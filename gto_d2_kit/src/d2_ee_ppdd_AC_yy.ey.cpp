/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AC_yy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_13_22(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C47084 = ce * de;
    const double C47083 = ce + de;
    const double C47082 = 0 * de;
    const double C47081 = yC - yD;
    const double C47122 = 0 * ce;
    const double C47117 = 0 * de;
    const double C47116 = 0 * de;
    const double C47167 = 0 * de;
    const double C47208 = ae + be;
    const double C47207 = yA - yB;
    const double C47222 = ae * be;
    const double C47220 = 0 * be;
    const double C47233 = p + q;
    const double C47232 = p * q;
    const double C47241 = ae * ce;
    const double C47240 = yP - yQ;
    const double C47238 = bs[3];
    const double C47247 = bs[4];
    const double C47245 = xP - xQ;
    const double C47256 = bs[5];
    const double C47265 = bs[6];
    const double C47280 = bs[7];
    const double C47298 = bs[2];
    const double C47403 = zP - zQ;
    const double C115 = bs[0];
    const double C48136 = xA - xB;
    const double C48149 = xC - xD;
    const double C48197 = zC - zD;
    const double C48371 = zA - zB;
    const double C47085 = std::pow(C47083, 2);
    const double C47100 = 2 * C47083;
    const double C47118 = C47082 / C47083;
    const double C47086 = C47084 * C47081;
    const double C47119 = C47081 * C47082;
    const double C48180 = std::pow(C47081, 2);
    const double C48239 = C47081 * de;
    const double C48237 = C47081 * ce;
    const double C47129 = C47122 / C47083;
    const double C47124 = C47081 * C47117;
    const double C47168 = C47167 / C47083;
    const double C47221 = std::pow(C47208, 2);
    const double C47249 = C47083 * C47208;
    const double C48146 = 2 * C47208;
    const double C48384 = std::pow(C47207, 2);
    const double C48486 = C47207 * be;
    const double C48484 = C47207 * ae;
    const double C47224 = C47222 * C47207;
    const double C47234 = 2 * C47232;
    const double C47243 = std::pow(C47240, 2);
    const double C47302 = C47240 * ae;
    const double C47300 = C47240 * ce;
    const double C47258 = std::pow(C47245, 2);
    const double C47520 = std::pow(C47403, 2);
    const double C48137 = std::pow(C48136, 2);
    const double C48452 = C48136 * be;
    const double C48451 = C48136 * ae;
    const double C48152 = C48149 * de;
    const double C48151 = C48149 * ce;
    const double C48150 = std::pow(C48149, 2);
    const double C48198 = std::pow(C48197, 2);
    const double C48281 = C48197 * de;
    const double C48279 = C48197 * ce;
    const double C48401 = std::pow(C48371, 2);
    const double C48487 = C48371 * be;
    const double C48485 = C48371 * ae;
    const double C47087 = 2 * C47085;
    const double C48464 = 4 * C47085;
    const double C48164 = std::pow(C47100, -1);
    const double C48465 = C47085 * C47100;
    const double C48461 = std::pow(C47100, -2);
    const double C47127 = C47119 / C47083;
    const double C48181 = C48180 * C47084;
    const double C48466 = std::pow(C48237, 2);
    const double C47130 = C47124 / C47083;
    const double C47223 = 2 * C47221;
    const double C48453 = std::pow(C48146, -1);
    const double C48385 = C48384 * C47222;
    const double C47236 = C47234 / C47233;
    const double C136 =
        (-((std::pow(yP - yQ, 2) * bs[2] * std::pow(C47234 / C47233, 2) -
            (bs[1] * C47234) / C47233) *
           ae * ce) /
         C47083) /
        C47208;
    const double C116 = -(C47245 * bs[1] * C47234) / C47233;
    const double C308 = -(C47240 * bs[1] * C47234) / C47233;
    const double C524 = -(C47403 * bs[1] * C47234) / C47233;
    const double C47250 = C47243 * C47247;
    const double C47259 = C47243 * C47256;
    const double C47268 = C47243 * C47265;
    const double C47284 = C47243 * C47280;
    const double C47304 = C47238 * C47302;
    const double C47311 = C47247 * C47302;
    const double C47320 = C47256 * C47302;
    const double C47335 = C47265 * C47302;
    const double C47364 = C47280 * C47302;
    const double C122 = (-(bs[1] * C47302 * C47234) / C47233) / C47208;
    const double C47303 = C47238 * C47300;
    const double C47309 = C47247 * C47300;
    const double C47318 = C47256 * C47300;
    const double C47331 = C47265 * C47300;
    const double C47358 = C47280 * C47300;
    const double C123 = (bs[1] * C47300 * C47234) / (C47233 * C47083);
    const double C48138 = C48137 * C47222;
    const double C48454 = std::pow(C48151, 2);
    const double C48153 = C48150 * C47084;
    const double C48199 = C48198 * C47084;
    const double C48468 = std::pow(C48279, 2);
    const double C48402 = C48401 * C47222;
    const double C47121 = C47082 / C47087;
    const double C47126 = C47117 / C47087;
    const double C47125 = C47116 / C47087;
    const double C48498 = C47083 * C48464;
    const double C48499 = 4 * C48465;
    const double C47131 = 0 - C47127;
    const double C48182 = C48181 / C47083;
    const double C47134 = 0 - C47130;
    const double C48386 = C48385 / C47208;
    const double C47239 = -C47236;
    const double C47248 = std::pow(C47236, 4);
    const double C47266 = std::pow(C47236, 6);
    const double C47297 = std::pow(C47236, 2);
    const double C137 =
        (-((xP - xQ) *
           (bs[2] * std::pow(C47236, 2) +
            std::pow(yP - yQ, 2) * bs[3] * std::pow(-C47236, 3)) *
           ae * ce) /
         C47083) /
        C47208;
    const double C48139 = C48138 / C47208;
    const double C48154 = C48153 / C47083;
    const double C48200 = C48199 / C47083;
    const double C48403 = C48402 / C47208;
    const double C47135 = C47131 * ce;
    const double C48183 = -C48182;
    const double C47138 = C47134 * ce;
    const double C48387 = -C48386;
    const double C47242 = std::pow(C47239, 3);
    const double C47257 = std::pow(C47239, 5);
    const double C47281 = std::pow(C47239, 7);
    const double C47251 = C47250 * C47248;
    const double C47255 = C47247 * C47248;
    const double C47313 = C47248 * C47311;
    const double C47312 = C47248 * C47309;
    const double C47269 = C47268 * C47266;
    const double C47279 = C47265 * C47266;
    const double C47341 = C47266 * C47335;
    const double C47337 = C47266 * C47331;
    const double C47301 = C47298 * C47297;
    const double C124 = (C47245 * C47297 * C47298 * C47302) / C47208;
    const double C125 = -(C47245 * C47297 * C47298 * C47300) / C47083;
    const double C318 = (C47240 * C47297 * C47298 * C47302) / C47208 -
                        (ae * bs[1] * C47234) / (C47233 * C47208);
    const double C319 = (ce * bs[1] * C47234) / (C47233 * C47083) -
                        (C47240 * C47297 * C47298 * C47300) / C47083;
    const double C537 = -(C47403 * C47297 * C47298 * C47300) / C47083;
    const double C538 = (C47403 * C47297 * C47298 * C47302) / C47208;
    const double C48140 = -C48139;
    const double C48155 = -C48154;
    const double C48201 = -C48200;
    const double C48404 = -C48403;
    const double C47139 = C47135 / C47083;
    const double C48184 = std::exp(C48183);
    const double C47142 = C47138 / C47083;
    const double C48388 = std::exp(C48387);
    const double C47246 = C47238 * C47242;
    const double C47306 = C47242 * C47304;
    const double C47305 = C47242 * C47303;
    const double C138 =
        (-((C47238 * C47242 + C47243 * bs[4] * std::pow(C47236, 4)) * C47241 *
           std::pow(xP - xQ, 2)) /
         C47083) /
            C47208 -
        ((bs[2] * std::pow(C47236, 2) + C47243 * C47238 * C47242) * C47241) /
            (C47083 * C47208);
    const double C338 =
        (-(C47297 * C47298 * C47240 * ae * ce) / C47083) / C47208 -
        (ae * C47297 * C47298 * C47240 * ce) / C47249 -
        (C47240 * (C47298 * C47297 + C47243 * C47238 * C47242) * C47241) /
            C47249;
    const double C47260 = C47259 * C47257;
    const double C47264 = C47256 * C47257;
    const double C47323 = C47257 * C47320;
    const double C47321 = C47257 * C47318;
    const double C47286 = C47284 * C47281;
    const double C47371 = C47281 * C47364;
    const double C47367 = C47281 * C47358;
    const double C47319 = C47255 * C47258;
    const double C47332 = C47245 * C47255;
    const double C47425 = C47255 * ae;
    const double C47423 = C47255 * C47243;
    const double C47422 = C47240 * C47255;
    const double C47421 = C47255 * ce;
    const double C48108 = C47255 * C47520;
    const double C48122 = C47403 * C47255;
    const double C47315 = C47245 * C47313;
    const double C47412 = C47240 * C47313;
    const double C47417 = C47313 * ce;
    const double C47314 = C47245 * C47312;
    const double C47409 = C47240 * C47312;
    const double C47418 = ae * C47312;
    const double C47361 = C47279 * C47258;
    const double C47616 = C47245 * C47279;
    const double C47732 = C47279 * ae;
    const double C47726 = C47279 * C47243;
    const double C47725 = C47240 * C47279;
    const double C47724 = C47279 * ce;
    const double C47345 = C47341 * C47258;
    const double C47363 = C47245 * C47341;
    const double C47566 = C47240 * C47341;
    const double C47718 = C47341 * ce;
    const double C47791 = C47341 * C47520;
    const double C47813 = C47403 * C47341;
    const double C47343 = C47337 * C47258;
    const double C47357 = C47245 * C47337;
    const double C47560 = C47240 * C47337;
    const double C47719 = ae * C47337;
    const double C47792 = C47337 * C47520;
    const double C47814 = C47403 * C47337;
    const double C554 =
        (-((zP - zQ) * (C47301 + C47243 * C47238 * C47242) * C47241) / C47083) /
        C47208;
    const double C117 = C47301 * C47258 - (bs[1] * C47234) / C47233;
    const double C309 = C47301 * C47243 - (bs[1] * C47234) / C47233;
    const double C310 = C47240 * C47245 * C47301;
    const double C521 = C47403 * C47245 * C47301;
    const double C526 = C47301 * C47520 - (bs[1] * C47234) / C47233;
    const double C1013 = C47403 * C47240 * C47301;
    const double C48141 = std::exp(C48140);
    const double C48156 = std::exp(C48155);
    const double C48202 = std::exp(C48201);
    const double C48405 = std::exp(C48404);
    const double C47143 = C47139 - C47126;
    const double C47088 = C47086 * C48184;
    const double C114 = -(2 * ce * de * (yC - yD) * C48184) / (ce + de);
    const double C48238 = C48184 / C47100;
    const double C48240 = C48184 * C48237;
    const double C48247 = C48164 * C48184;
    const double C48472 = C48184 * C48239;
    const double C48502 = C48461 * C48184;
    const double C48500 = C48184 * C48466;
    const double C47146 = C47142 - C47125;
    const double C147 = C48388 * C137;
    const double C145 = C48388 * C124;
    const double C11085 = C48388 * C538;
    const double C47225 = C47224 * C48388;
    const double C113 = -(2 * ae * be * (yA - yB) * C48388) / (ae + be);
    const double C5059 =
        ((C48388 - (C47207 * 2 * ae * be * C47207 * C48388) / C47208) * ae) /
            C47208 -
        (0 * be) / (2 * std::pow(C47208, 2));
    const double C5060 =
        (0 * ae) / C47208 - (ae * be * C47207 * C48388) / std::pow(C47208, 2);
    const double C16532 =
        (-(0 * be) / C47208) / (2 * C47208) -
        ((C48388 - (C47207 * 2 * ae * be * C47207 * C48388) / C47208) * be) /
            C47208;
    const double C16533 =
        (-(2 * ae * be * C47207 * C48388) / C47208) / (2 * C47208) -
        (0 * be) / C47208;
    const double C48520 = C48453 * C48388;
    const double C48519 = C48388 * C48484;
    const double C16528 = -(C48388 * C48486) / C47208;
    const double C47252 = C47246 + C47251;
    const double C47310 = C47245 * C47246;
    const double C47413 = C47246 * ae;
    const double C47411 = C47240 * C47246;
    const double C47410 = C47246 * ce;
    const double C118 =
        2 * C47245 * C47301 + C47245 * (C47301 + C47246 * C47258);
    const double C312 = C47240 * (C47301 + C47246 * C47258);
    const double C522 = C47403 * (C47301 + C47246 * C47258);
    const double C1283 =
        2 * C47240 * C47301 + C47240 * (C47301 + C47246 * C47243);
    const double C1417 = C47403 * (C47301 + C47246 * C47243);
    const double C2169 =
        2 * C47403 * C47301 + C47403 * (C47301 + C47246 * C47520);
    const double C2170 =
        3 * (C47301 + C47246 * C47520) +
        C47403 * (2 * C47403 * C47246 + C47403 * (C47246 + C47255 * C47520));
    const double C126 = (C47297 * C47298 * C47302 + C47306 * C47258) / C47208;
    const double C129 =
        (2 * C47245 * C47306 + C47245 * (C47306 + C47313 * C47258)) / C47208;
    const double C320 =
        (C47297 * C47298 * C47302 + C47240 * (C47240 * C47306 + C47301 * ae) +
         C47240 * C47301 * ae) /
        C47208;
    const double C322 =
        (C47240 * C47245 * C47306 + C47245 * C47301 * ae) / C47208;
    const double C326 = (C47240 * (C47306 + C47313 * C47258) +
                         (C47301 + C47246 * C47258) * ae) /
                        C47208;
    const double C531 = (C47403 * C47245 * C47306) / C47208;
    const double C533 = (C47403 * (C47306 + C47313 * C47258)) / C47208;
    const double C541 = (C47297 * C47298 * C47302 + C47306 * C47520) / C47208;
    const double C1018 = (C47403 * (C47240 * C47306 + C47301 * ae)) / C47208;
    const double C2178 =
        (2 * C47403 * C47306 + C47403 * (C47306 + C47313 * C47520)) / C47208;
    const double C127 = -(C47305 * C47258 + C47297 * C47298 * C47300) / C47083;
    const double C128 = (-2 * C47245 * C47305) / C47083 -
                        (C47245 * (C47312 * C47258 + C47305)) / C47083;
    const double C321 = -(C47240 * (C47240 * C47305 + C47301 * ce) +
                          C47297 * C47298 * C47300 + C47240 * C47301 * ce) /
                        C47083;
    const double C323 =
        -(C47240 * C47245 * C47305 + C47245 * C47301 * ce) / C47083;
    const double C327 = -(C47240 * (C47312 * C47258 + C47305) +
                          (C47301 + C47246 * C47258) * ce) /
                        C47083;
    const double C532 = -(C47403 * C47245 * C47305) / C47083;
    const double C534 = -(C47403 * (C47312 * C47258 + C47305)) / C47083;
    const double C542 = -(C47305 * C47520 + C47297 * C47298 * C47300) / C47083;
    const double C1019 = -(C47403 * (C47240 * C47305 + C47301 * ce)) / C47083;
    const double C2177 = (-2 * C47403 * C47305) / C47083 -
                         (C47403 * (C47312 * C47520 + C47305)) / C47083;
    const double C151 = C48388 * C138;
    const double C47261 = C47255 + C47260;
    const double C47270 = C47264 + C47269;
    const double C47333 = C47264 * C47258;
    const double C47360 = C47245 * C47264;
    const double C47567 = C47264 * ae;
    const double C47563 = C47264 * C47243;
    const double C47562 = C47240 * C47264;
    const double C47561 = C47264 * ce;
    const double C48123 = C47264 * C47520;
    const double C47325 = C47323 * C47258;
    const double C47334 = C47245 * C47323;
    const double C47424 = C47240 * C47323;
    const double C47556 = C47323 * ce;
    const double C47679 = C47403 * C47323;
    const double C47995 = C47323 * C47520;
    const double C2179 =
        (3 * (C47306 + C47313 * C47520) +
         C47403 * (2 * C47403 * C47313 + C47403 * (C47313 + C47323 * C47520))) /
        C47208;
    const double C47324 = C47321 * C47258;
    const double C47330 = C47245 * C47321;
    const double C47420 = C47240 * C47321;
    const double C47557 = ae * C47321;
    const double C47680 = C47403 * C47321;
    const double C47998 = C47321 * C47520;
    const double C2180 =
        (-3 * (C47312 * C47520 + C47305)) / C47083 +
        C47403 * ((-2 * C47403 * C47312) / C47083 -
                  (C47403 * (C47321 * C47520 + C47312)) / C47083);
    const double C47287 = C47279 + C47286;
    const double C47375 = C47371 * C47258;
    const double C47619 = C47245 * C47371;
    const double C47731 = C47240 * C47371;
    const double C47373 = C47367 * C47258;
    const double C47615 = C47245 * C47367;
    const double C47723 = C47240 * C47367;
    const double C47322 = C47246 + C47319;
    const double C47338 = 2 * C47332;
    const double C47450 = C47332 * ae;
    const double C47448 = C47240 * C47332;
    const double C47447 = C47332 * ce;
    const double C47431 = C47246 + C47423;
    const double C47433 = C47422 * ae;
    const double C47430 = C47422 * ce;
    const double C47564 = 2 * C47422;
    const double C48109 = C47246 + C48108;
    const double C48124 = 2 * C48122;
    const double C543 = (C47245 * C47306 + C47315 * C47520) / C47208;
    const double C47426 = C47417 / C47083;
    const double C544 = -(C47314 * C47520 + C47245 * C47305) / C47083;
    const double C47427 = C47418 / C47249;
    const double C47369 = C47264 + C47361;
    const double C47631 = C47616 * ae;
    const double C47629 = C47616 * C47243;
    const double C47628 = C47240 * C47616;
    const double C47627 = C47616 * ce;
    const double C47744 = C47264 + C47726;
    const double C47746 = C47725 * ae;
    const double C47743 = C47725 * ce;
    const double C47348 = C47323 + C47345;
    const double C47370 = 2 * C47363;
    const double C47461 = C47240 * C47363;
    const double C47611 = C47363 * ce;
    const double C47693 = C47403 * C47363;
    const double C48001 = C47363 * C47520;
    const double C47737 = C47718 / C47083;
    const double C47794 = C47323 + C47791;
    const double C47818 = C47813 * ce;
    const double C47346 = C47343 + C47321;
    const double C47366 = -2 * C47357;
    const double C47457 = C47240 * C47357;
    const double C47612 = ae * C47357;
    const double C47694 = C47403 * C47357;
    const double C48004 = C47357 * C47520;
    const double C47738 = C47719 / C47249;
    const double C47795 = C47792 + C47321;
    const double C47819 = ae * C47814;
    const double C11087 = C48388 * C554;
    const double C48489 = C48453 * C48141;
    const double C48488 = C48141 * C48451;
    const double C5057 = -(C48141 * C48452) / C47208;
    const double C48158 = C48156 * C48151;
    const double C48157 = C48156 / C47100;
    const double C48166 = C48164 * C48156;
    const double C48457 = C48156 * C48152;
    const double C48496 = C48461 * C48156;
    const double C48490 = C48156 * C48454;
    const double C48280 = C48202 / C47100;
    const double C48282 = C48202 * C48279;
    const double C48289 = C48164 * C48202;
    const double C48478 = C48202 * C48281;
    const double C48505 = C48461 * C48202;
    const double C48503 = C48202 * C48468;
    const double C48522 = C48453 * C48405;
    const double C48521 = C48405 * C48485;
    const double C31925 = -(C48405 * C48487) / C47208;
    const double C47148 = C47143 / C47100;
    const double C47147 = C47081 * C47143;
    const double C47101 = 2 * C47088;
    const double C47123 = C47088 / C47085;
    const double C307 = ((0 * ce) / C47083 - C47088 / C47085) / (2 * C47083) +
                        (0 * ce) / C47083;
    const double C717 =
        ((C48184 - (C47081 * 2 * C47088) / C47083) * ce) / C47083 -
        C47082 / C47087;
    const double C718 = (0 * ce) / C47083 - C47088 / C47085;
    const double C1177 = (C48184 * std::pow(C48239, 2)) / C47085 + C48238;
    const double C48241 = C48240 * C48239;
    const double C48246 = C48240 / C47087;
    const double C48470 = C48240 / C47083;
    const double C48467 = C48164 * C48240;
    const double C306 =
        (((C48184 - (C47081 * 2 * C47088) / C47083) * ce) / C47083 -
         C47082 / C47087) /
            (2 * C47083) +
        ((C47081 * ((0 * ce) / C47083 - C47088 / C47085) + C48247) * ce) /
            C47083;
    const double C48248 = C48247 * C48239;
    const double C48476 = C48237 * C48247;
    const double C48475 = 2 * C48247;
    const double C48512 = C48247 / C48464;
    const double C1276 = C48247 / C48499;
    const double C3121 = C48247 / C47100;
    const double C48508 = C48472 / C47083;
    const double C1178 = (-2 * C48164 * C48472) / C47083;
    const double C48528 = C48500 / C47085;
    const double C47152 = C47146 + C47118;
    const double C22208 = ((0 * ae) / C47208 - C47225 / C47221) / (2 * C47208) -
                          (0 * be) / C47208;
    const double C148 = C113 * C117;
    const double C146 = C113 * C125;
    const double C144 = C113 * C116;
    const double C351 = C113 * C310;
    const double C562 = C113 * C521;
    const double C11095 = C113 * C526;
    const double C11086 = C113 * C537;
    const double C11084 = C113 * C524;
    const double C11563 = C113 * C1013;
    const double C5076 = C5059 * C117;
    const double C5066 = C5059 * C125;
    const double C5062 = C5059 * C116;
    const double C5258 = C5059 * C310;
    const double C5450 = C5059 * C521;
    const double C37682 = C5059 * C526;
    const double C37672 = C5059 * C537;
    const double C37668 = C5059 * C524;
    const double C38148 = C5059 * C1013;
    const double C5064 = C5060 * C310;
    const double C37670 = C5060 * C1013;
    const double C16549 = C16532 * C117;
    const double C16539 = C16532 * C125;
    const double C16535 = C16532 * C116;
    const double C16731 = C16532 * C310;
    const double C16923 = C16532 * C521;
    const double C26660 = C16532 * C526;
    const double C26650 = C16532 * C537;
    const double C26646 = C16532 * C524;
    const double C27126 = C16532 * C1013;
    const double C16537 = C16533 * C310;
    const double C26648 = C16533 * C1013;
    const double C22207 =
        (((C48388 - (C47207 * 2 * C47225) / C47208) * ae) / C47208 -
         C47220 / C47223) /
            (2 * C47208) -
        ((C47207 * ((0 * ae) / C47208 - C47225 / C47221) + C48520) * be) /
            C47208;
    const double C22204 = C48520 / C48146;
    const double C5055 = C48519 / C47208;
    const double C22202 = C48388 / C48146 - (C48519 * C48486) / C47221;
    const double C22203 = C48519 / C47223 - (C48520 * C48486) / C47208;
    const double C16546 = C16528 * C138;
    const double C16540 = C16528 * C137;
    const double C16536 = C16528 * C124;
    const double C26651 = C16528 * C554;
    const double C26647 = C16528 * C538;
    const double C47253 = C47252 * C47241;
    const double C324 =
        (C47245 * C47306 + C47240 * (C47240 * C47315 + C47310 * ae) +
         C47240 * C47310 * ae) /
        C47208;
    const double C325 = -(C47240 * (C47240 * C47314 + C47310 * ce) +
                          C47245 * C47305 + C47240 * C47310 * ce) /
                        C47083;
    const double C1020 = (C47403 * (C47240 * C47315 + C47310 * ae)) / C47208;
    const double C1021 = -(C47403 * (C47240 * C47314 + C47310 * ce)) / C47083;
    const double C311 = C47245 * C47301 + C47310 * C47243;
    const double C527 = C47245 * C47301 + C47310 * C47520;
    const double C1014 = C47403 * C47240 * C47310;
    const double C1285 =
        2 * C47240 * C47310 + C47240 * (C47310 + C47332 * C47243);
    const double C1418 = C47403 * (C47310 + C47332 * C47243);
    const double C2168 =
        2 * C47403 * C47310 + C47403 * (C47310 + C47332 * C47520);
    const double C47415 = C47412 + C47413;
    const double C1420 = C47240 * C47301 + C47411 * C47520;
    const double C2581 =
        2 * C47403 * C47411 + C47403 * (C47411 + C47422 * C47520);
    const double C47414 = C47409 + C47410;
    const double C154 = C113 * C118;
    const double C5078 = C5059 * C118;
    const double C16551 = C16532 * C118;
    const double C361 = C113 * C312;
    const double C5074 = C5060 * C312;
    const double C5272 = C5059 * C312;
    const double C16547 = C16533 * C312;
    const double C16745 = C16532 * C312;
    const double C566 = C113 * C522;
    const double C5458 = C5059 * C522;
    const double C16931 = C16532 * C522;
    const double C11958 = C113 * C1417;
    const double C27124 = C16533 * C1417;
    const double C27510 = C16532 * C1417;
    const double C38146 = C5060 * C1417;
    const double C38532 = C5059 * C1417;
    const double C12888 = C113 * C2169;
    const double C28390 = C16532 * C2169;
    const double C39408 = C5059 * C2169;
    const double C12898 = C113 * C2170;
    const double C28404 = C16532 * C2170;
    const double C39422 = C5059 * C2170;
    const double C149 = C48388 * C126;
    const double C16550 = C16528 * C126;
    const double C155 = C48388 * C129;
    const double C16552 = C16528 * C129;
    const double C352 = C48388 * C322;
    const double C5065 = C48520 * C322;
    const double C16538 = C48520 * C322;
    const double C16732 = C16528 * C322;
    const double C362 = C48388 * C326;
    const double C5075 = C48520 * C326;
    const double C16548 = C48520 * C326;
    const double C16746 = C16528 * C326;
    const double C563 = C48388 * C531;
    const double C16924 = C16528 * C531;
    const double C567 = C48388 * C533;
    const double C16932 = C16528 * C533;
    const double C11096 = C48388 * C541;
    const double C26661 = C16528 * C541;
    const double C11564 = C48388 * C1018;
    const double C26649 = C48520 * C1018;
    const double C27127 = C16528 * C1018;
    const double C37671 = C48520 * C1018;
    const double C12889 = C48388 * C2178;
    const double C28391 = C16528 * C2178;
    const double C150 = C113 * C127;
    const double C5072 = C5059 * C127;
    const double C16545 = C16532 * C127;
    const double C152 = C113 * C128;
    const double C5082 = C5059 * C128;
    const double C16555 = C16532 * C128;
    const double C353 = C113 * C323;
    const double C5068 = C5060 * C323;
    const double C5262 = C5059 * C323;
    const double C16541 = C16533 * C323;
    const double C16735 = C16532 * C323;
    const double C363 = C113 * C327;
    const double C5070 = C5060 * C327;
    const double C5276 = C5059 * C327;
    const double C16543 = C16533 * C327;
    const double C16749 = C16532 * C327;
    const double C564 = C113 * C532;
    const double C5454 = C5059 * C532;
    const double C16927 = C16532 * C532;
    const double C568 = C113 * C534;
    const double C5462 = C5059 * C534;
    const double C16935 = C16532 * C534;
    const double C11093 = C113 * C542;
    const double C26656 = C16532 * C542;
    const double C37678 = C5059 * C542;
    const double C11565 = C113 * C1019;
    const double C26652 = C16533 * C1019;
    const double C27130 = C16532 * C1019;
    const double C37674 = C5060 * C1019;
    const double C38152 = C5059 * C1019;
    const double C12890 = C113 * C2177;
    const double C28394 = C16532 * C2177;
    const double C39412 = C5059 * C2177;
    const double C47262 = C47261 * C47241;
    const double C47271 = C47270 * C47241;
    const double C47339 = C47255 + C47333;
    const double C47368 = 2 * C47360;
    const double C47462 = C47360 * ae;
    const double C47460 = C47360 * C47243;
    const double C47459 = C47240 * C47360;
    const double C47458 = C47360 * ce;
    const double C48111 = C47360 * C47520;
    const double C2171 =
        3 * (C47310 + C47332 * C47520) +
        C47403 * (2 * C47403 * C47332 + C47403 * (C47332 + C47360 * C47520));
    const double C47577 = C47566 + C47567;
    const double C47576 = C47255 + C47563;
    const double C47578 = C47562 * ae;
    const double C47575 = C47562 * ce;
    const double C47727 = 2 * C47562;
    const double C48119 = C47562 * C47520;
    const double C7249 =
        3 * (C47411 + C47422 * C47520) +
        C47403 * (2 * C47403 * C47422 + C47403 * (C47422 + C47562 * C47520));
    const double C47574 = C47560 + C47561;
    const double C48125 = C47255 + C48123;
    const double C47327 = C47313 + C47325;
    const double C47340 = 2 * C47334;
    const double C47449 = C47240 * C47334;
    const double C47454 = C47334 * ce;
    const double C2176 =
        (2 * C47403 * C47315 + C47403 * (C47315 + C47334 * C47520)) / C47208;
    const double C2181 =
        (3 * (C47315 + C47334 * C47520) +
         C47403 * (2 * C47403 * C47334 + C47403 * (C47334 + C47363 * C47520))) /
        C47208;
    const double C47432 = C47424 + C47425;
    const double C47570 = C47556 / C47083;
    const double C47682 = C47679 * ce;
    const double C48023 = 2 * C47679;
    const double C47996 = C47313 + C47995;
    const double C12899 = C48388 * C2179;
    const double C28405 = C16528 * C2179;
    const double C47326 = C47324 + C47312;
    const double C47336 = -2 * C47330;
    const double C47446 = C47240 * C47330;
    const double C47455 = ae * C47330;
    const double C2175 = (-2 * C47403 * C47314) / C47083 -
                         (C47403 * (C47330 * C47520 + C47314)) / C47083;
    const double C2182 =
        (-3 * (C47330 * C47520 + C47314)) / C47083 +
        C47403 * ((-2 * C47403 * C47330) / C47083 -
                  (C47403 * (C47357 * C47520 + C47330)) / C47083);
    const double C47429 = C47420 + C47421;
    const double C47571 = C47557 / C47249;
    const double C47683 = ae * C47680;
    const double C48027 = -2 * C47680;
    const double C47999 = C47998 + C47312;
    const double C12896 = C113 * C2180;
    const double C28400 = C16532 * C2180;
    const double C39418 = C5059 * C2180;
    const double C47288 = C47287 * C47241;
    const double C47378 = C47341 + C47375;
    const double C47630 = C47240 * C47619;
    const double C47745 = C47731 + C47732;
    const double C47376 = C47373 + C47337;
    const double C47626 = C47240 * C47615;
    const double C47742 = C47723 + C47724;
    const double C119 = 3 * (C47301 + C47246 * C47258) +
                        C47245 * (2 * C47310 + C47245 * C47322);
    const double C313 = C47301 + C47246 * C47258 + C47322 * C47243;
    const double C314 = C47240 * (2 * C47310 + C47245 * C47322);
    const double C523 = C47403 * (2 * C47310 + C47245 * C47322);
    const double C528 = C47301 + C47246 * C47258 + C47322 * C47520;
    const double C1015 = C47403 * C47240 * C47322;
    const double C1422 = C47240 * C47310 + C47448 * C47520;
    const double C1284 = 3 * (C47301 + C47246 * C47243) +
                         C47240 * (2 * C47411 + C47240 * C47431);
    const double C1421 = C47301 + C47246 * C47243 + C47431 * C47520;
    const double C1865 = C47403 * (2 * C47411 + C47240 * C47431);
    const double C12879 =
        4 * (2 * C47403 * C47246 + C47403 * C48109) +
        C47403 * (3 * C48109 + C47403 * (2 * C47403 * C47255 +
                                         C47403 * (C47255 + C47264 * C47520)));
    const double C575 = C48388 * C543;
    const double C16940 = C16528 * C543;
    const double C47434 = -C47426;
    const double C576 = C113 * C544;
    const double C5470 = C5059 * C544;
    const double C16943 = C16532 * C544;
    const double C47374 = C47245 * C47369;
    const double C47498 = C47369 * ae;
    const double C47496 = C47369 * C47243;
    const double C47495 = C47240 * C47369;
    const double C47494 = C47369 * ce;
    const double C47637 = C47360 + C47629;
    const double C47639 = C47628 * ae;
    const double C47636 = C47628 * ce;
    const double C47754 = C47744 * ae;
    const double C47752 = C47240 * C47744;
    const double C47751 = C47744 * ce;
    const double C47350 = C47245 * C47348;
    const double C47362 = 3 * C47348;
    const double C47485 = C47240 * C47348;
    const double C47490 = C47348 * ce;
    const double C47622 = C47611 / C47083;
    const double C47696 = C47693 * ce;
    const double C48002 = C47334 + C48001;
    const double C47749 = -C47737;
    const double C47797 = C47794 * ce;
    const double C48024 = C47403 * C47794;
    const double C47823 = C47818 / C47083;
    const double C47349 = C47245 * C47346;
    const double C47356 = -3 * C47346;
    const double C47482 = C47240 * C47346;
    const double C47491 = ae * C47346;
    const double C47372 = C47366 / C47083;
    const double C47623 = C47612 / C47249;
    const double C47697 = ae * C47694;
    const double C48005 = C48004 + C47330;
    const double C47798 = ae * C47795;
    const double C48028 = C47403 * C47795;
    const double C47824 = C47819 / C47249;
    const double C106 = C48489 / C48146;
    const double C104 = C48141 / C48146 - (C48488 * C48452) / C47221;
    const double C105 = C48488 / C47223 - (C48489 * C48452) / C47208;
    const double C16530 = C48488 / C47208;
    const double C48159 = C48158 * C48152;
    const double C48165 = C48158 / C47087;
    const double C48458 = C48164 * C48158;
    const double C48456 = C48158 / C47083;
    const double C302 = (C48156 * std::pow(C48152, 2)) / C47085 + C48157;
    const double C48167 = C48166 * C48152;
    const double C48462 = C48151 * C48166;
    const double C48460 = 2 * C48166;
    const double C48506 = C48166 / C48464;
    const double C111 = C48166 / C48499;
    const double C3124 = C48166 / C47100;
    const double C48492 = C48457 / C47083;
    const double C303 = (-2 * C48164 * C48457) / C47083;
    const double C48523 = C48490 / C47085;
    const double C1987 = (C48202 * std::pow(C48281, 2)) / C47085 + C48280;
    const double C48283 = C48282 * C48281;
    const double C48288 = C48282 / C47087;
    const double C48471 = C48282 / C47083;
    const double C48469 = C48164 * C48282;
    const double C48290 = C48289 * C48281;
    const double C48482 = C48279 * C48289;
    const double C48481 = 2 * C48289;
    const double C48518 = C48289 / C48464;
    const double C2166 = C48289 / C48499;
    const double C4082 = C48289 / C47100;
    const double C48514 = C48478 / C47083;
    const double C1988 = (-2 * C48164 * C48478) / C47083;
    const double C48530 = C48503 / C47085;
    const double C42925 = C48522 / C48146;
    const double C10789 = C48521 / C47208;
    const double C42923 = C48405 / C48146 - (C48521 * C48487) / C47221;
    const double C42924 = C48521 / C47223 - (C48522 * C48487) / C47208;
    const double C47153 = C47147 + 0;
    const double C47120 = C47081 * C47101;
    const double C1184 =
        ((-C47082 / C47083) / C47100 -
         ((C48184 - (C47081 * C47101) / C47083) * de) / C47083) /
            C47100 -
        ((C47081 * ((-C47101 / C47083) / C47100 - (0 * de) / C47083) + C48247) *
         de) /
            C47083;
    const double C1185 =
        ((-C47101 / C47083) / C47100 - (0 * de) / C47083) / C47100 -
        (0 * de) / C47083;
    const double C2698 = (-C47101 / C47083) / C47100 - (0 * de) / C47083;
    const double C47133 = C47129 - C47123;
    const double C48242 = C48241 / C47085;
    const double C305 =
        (((0 - (C47081 * C47082) / C47083) * ce) / C47083 - (0 * de) / C47087) /
            (2 * C47083) +
        ((C47081 * (((C48184 - (C47081 * 2 * C47088) / C47083) * ce) / C47083 -
                    C47082 / C47087) +
          C48470) *
         ce) /
            C47083 +
        (0 * ce) / C47083 - C47088 / C47085;
    const double C48501 = 2 * C48467;
    const double C48249 = C48248 / C47083;
    const double C48511 = C48476 / C47087;
    const double C48532 = C48470 - C48508;
    const double C2691 = -C48508;
    const double C48541 = C48528 + C48238;
    const double C47156 = C47152 / C47100;
    const double C165 = C146 + C147;
    const double C164 = C144 + C145;
    const double C11099 = C11086 + C11087;
    const double C11098 = C11084 + C11085;
    const double C5079 = C5055 * C129;
    const double C5077 = C5055 * C126;
    const double C5073 = C5055 * C138;
    const double C5067 = C5055 * C137;
    const double C5063 = C5055 * C124;
    const double C5273 = C5055 * C326;
    const double C5259 = C5055 * C322;
    const double C5467 = C5055 * C543;
    const double C5459 = C5055 * C533;
    const double C5451 = C5055 * C531;
    const double C37683 = C5055 * C541;
    const double C37673 = C5055 * C554;
    const double C37669 = C5055 * C538;
    const double C38149 = C5055 * C1018;
    const double C39423 = C5055 * C2179;
    const double C39409 = C5055 * C2178;
    const double C22206 =
        (((0 - (C47207 * C47220) / C47208) * ae) / C47208 - (0 * be) / C47223) /
            (2 * C47208) -
        ((C47207 * (((C48388 - (C47207 * 2 * C47225) / C47208) * ae) / C47208 -
                    C47220 / C47223) +
          C5055) *
         be) /
            C47208 +
        (0 * ae) / C47208 - C47225 / C47221;
    const double C16569 = C16539 + C16540;
    const double C16567 = C16535 + C16536;
    const double C26664 = C26650 + C26651;
    const double C26662 = C26646 + C26647;
    const double C139 =
        (-2 * C47245 * C47253) / C47249 +
        C47245 * ((-((C47247 * C47248 + C47243 * bs[5] * std::pow(C47239, 5)) *
                     C47241 * std::pow(C47245, 2)) /
                   C47083) /
                      C47208 -
                  C47253 / C47249);
    const double C339 =
        (-(ae * (C47240 * C47305 + C47301 * ce)) / C47083) / C47208 -
        ((C47301 + C47243 * C47238 * C47242) * C47241) / C47249 -
        ((C47240 * C47306 + C47301 * ae) * ce) / C47249 +
        C47240 * ((-(C47306 * ce) / C47083) / C47208 - (ae * C47305) / C47249 -
                  (C47240 * C47253) / C47249);
    const double C340 = (-(C47245 * C47306 * ce) / C47083) / C47208 -
                        (ae * C47245 * C47305) / C47249 -
                        (C47240 * C47245 * C47253) / C47249;
    const double C551 = (-((zP - zQ) * C47245 * C47253) / C47083) / C47208;
    const double C556 = (-(C47253 * std::pow(zP - zQ, 2)) / C47083) / C47208 -
                        ((C47301 + C47243 * C47238 * C47242) * C47241) / C47249;
    const double C1028 = (-(C47403 * C47306 * ce) / C47083) / C47208 -
                         (ae * C47403 * C47305) / C47249 -
                         (C47240 * C47403 * C47253) / C47249;
    const double C356 = C48388 * C324;
    const double C5265 = C5055 * C324;
    const double C5257 = C48520 * C324;
    const double C16738 = C16528 * C324;
    const double C16730 = C48520 * C324;
    const double C357 = C113 * C325;
    const double C5268 = C5059 * C325;
    const double C5260 = C5060 * C325;
    const double C16741 = C16532 * C325;
    const double C16733 = C16533 * C325;
    const double C1035 = C48388 * C1020;
    const double C5453 = C48520 * C1020;
    const double C5977 = C5055 * C1020;
    const double C16926 = C48520 * C1020;
    const double C17450 = C16528 * C1020;
    const double C1038 = C113 * C1021;
    const double C5456 = C5060 * C1021;
    const double C5980 = C5059 * C1021;
    const double C16929 = C16533 * C1021;
    const double C17453 = C16532 * C1021;
    const double C355 = C113 * C311;
    const double C5264 = C5059 * C311;
    const double C5256 = C5060 * C311;
    const double C16737 = C16532 * C311;
    const double C16729 = C16533 * C311;
    const double C574 = C113 * C527;
    const double C5466 = C5059 * C527;
    const double C16939 = C16532 * C527;
    const double C1034 = C113 * C1014;
    const double C5452 = C5060 * C1014;
    const double C5976 = C5059 * C1014;
    const double C16925 = C16533 * C1014;
    const double C17449 = C16532 * C1014;
    const double C1572 = C113 * C1285;
    const double C5266 = C5060 * C1285;
    const double C6522 = C5059 * C1285;
    const double C16739 = C16533 * C1285;
    const double C17979 = C16532 * C1285;
    const double C1748 = C113 * C1418;
    const double C5978 = C5060 * C1418;
    const double C6728 = C5059 * C1418;
    const double C17451 = C16533 * C1418;
    const double C18185 = C16532 * C1418;
    const double C2468 = C113 * C2168;
    const double C7594 = C5059 * C2168;
    const double C19035 = C16532 * C2168;
    const double C1289 = (2 * (C47240 * C47306 + C47301 * ae) +
                          C47240 * (C47306 + C47240 * C47415 + C47411 * ae) +
                          (C47301 + C47246 * C47243) * ae) /
                         C47208;
    const double C1426 =
        (C47403 * (C47306 + C47240 * C47415 + C47411 * ae)) / C47208;
    const double C1432 =
        (C47240 * C47306 + C47301 * ae + C47415 * C47520) / C47208;
    const double C11962 = C113 * C1420;
    const double C26658 = C16533 * C1420;
    const double C27518 = C16532 * C1420;
    const double C37680 = C5060 * C1420;
    const double C38540 = C5059 * C1420;
    const double C13390 = C113 * C2581;
    const double C28392 = C16533 * C2581;
    const double C28870 = C16532 * C2581;
    const double C39410 = C5060 * C2581;
    const double C39888 = C5059 * C2581;
    const double C1290 =
        (-2 * (C47240 * C47305 + C47301 * ce)) / C47083 -
        (C47240 * (C47240 * C47414 + C47305 + C47411 * ce)) / C47083 -
        ((C47301 + C47246 * C47243) * ce) / C47083;
    const double C1427 =
        -(C47403 * (C47240 * C47414 + C47305 + C47411 * ce)) / C47083;
    const double C1433 =
        -(C47414 * C47520 + C47240 * C47305 + C47301 * ce) / C47083;
    const double C166 = C148 + C149;
    const double C16574 = C16549 + C16550;
    const double C169 = C154 + C155;
    const double C16575 = C16551 + C16552;
    const double C379 = C351 + C352;
    const double C5095 = C5064 + C5065;
    const double C16568 = C16537 + C16538;
    const double C16762 = C16731 + C16732;
    const double C384 = C361 + C362;
    const double C5100 = C5074 + C5075;
    const double C16573 = C16547 + C16548;
    const double C16769 = C16745 + C16746;
    const double C586 = C562 + C563;
    const double C16955 = C16923 + C16924;
    const double C588 = C566 + C567;
    const double C16959 = C16931 + C16932;
    const double C11101 = C11095 + C11096;
    const double C26669 = C26660 + C26661;
    const double C11570 = C11563 + C11564;
    const double C26663 = C26648 + C26649;
    const double C27133 = C27126 + C27127;
    const double C37685 = C37670 + C37671;
    const double C12900 = C12888 + C12889;
    const double C28406 = C28390 + C28391;
    const double C167 = C150 + C151;
    const double C16572 = C16545 + C16546;
    const double C47267 = C47262 / C47249;
    const double C47419 = C47240 * C47262;
    const double C47445 = C47245 * C47262;
    const double C47537 = C47403 * C47262;
    const double C140 =
        3 * ((-(C47262 * C47258) / C47083) / C47208 - C47253 / C47249) +
        C47245 *
            ((-2 * C47245 * C47262) / C47249 +
             C47245 *
                 ((-((C47256 * C47257 + C47243 * bs[6] * std::pow(C47236, 6)) *
                     C47241 * C47258) /
                   C47083) /
                      C47208 -
                  C47262 / C47249));
    const double C341 =
        (-(ae * (C47240 * C47314 + C47310 * ce)) / C47083) / C47208 -
        (C47245 * C47253) / C47249 -
        ((C47240 * C47315 + C47310 * ae) * ce) / C47249 +
        C47240 * ((-(C47315 * ce) / C47083) / C47208 - (ae * C47314) / C47249 -
                  (C47240 * C47245 * C47262) / C47249);
    const double C342 =
        (-((C47306 + C47313 * C47258) * ce) / C47083) / C47208 -
        (ae * (C47312 * C47258 + C47305)) / C47249 +
        C47240 * ((-(C47262 * C47258) / C47083) / C47208 - C47253 / C47249);
    const double C552 =
        (zP - zQ) * ((-(C47262 * C47258) / C47083) / C47208 - C47253 / C47249);
    const double C557 =
        (-(C47245 * C47262 * std::pow(zP - zQ, 2)) / C47083) / C47208 -
        (C47245 * C47253) / C47249;
    const double C1029 = (-(C47403 * C47315 * ce) / C47083) / C47208 -
                         (ae * C47403 * C47314) / C47249 -
                         (C47240 * C47403 * C47245 * C47262) / C47249;
    const double C1301 =
        2 * ((-(C47306 * ce) / C47083) / C47208 - (ae * C47305) / C47249 -
             (C47240 * C47253) / C47249) -
        (ae * (C47240 * C47414 + C47305 + C47411 * ce)) / C47249 -
        ((C47306 + C47240 * C47415 + C47411 * ae) * ce) / C47249 +
        C47240 *
            ((-(ae * C47414) / C47083) / C47208 - C47253 / C47249 -
             (C47415 * ce) / C47249 +
             C47240 * ((-(C47313 * ce) / C47083) / C47208 -
                       (ae * C47312) / C47249 - (C47240 * C47262) / C47249));
    const double C1444 = (-(ae * C47403 * C47414) / C47083) / C47208 -
                         (C47403 * C47253) / C47249 -
                         (C47403 * C47415 * ce) / C47249 +
                         C47240 * ((-(C47403 * C47313 * ce) / C47083) / C47208 -
                                   (ae * C47403 * C47312) / C47249 -
                                   (C47240 * C47403 * C47262) / C47249);
    const double C1447 =
        (-((C47306 + C47313 * C47520) * ce) / C47083) / C47208 -
        (ae * (C47312 * C47520 + C47305)) / C47249 +
        C47240 * ((-(C47262 * C47520) / C47083) / C47208 - C47253 / C47249);
    const double C2187 =
        (-2 * C47403 * C47253) / C47249 +
        C47403 * ((-(C47262 * C47520) / C47083) / C47208 - C47253 / C47249);
    const double C47272 = C47271 * C47258;
    const double C47282 = C47271 / C47249;
    const double C47278 = C47245 * C47271;
    const double C47558 = C47240 * C47271;
    const double C47667 = C47271 * C47520;
    const double C47681 = C47403 * C47271;
    const double C47344 = C47245 * C47339;
    const double C47359 = 3 * C47339;
    const double C47486 = C47339 * ae;
    const double C47484 = C47240 * C47339;
    const double C47483 = C47339 * ce;
    const double C1287 =
        2 * C47240 * C47322 + C47240 * (C47322 + C47339 * C47243);
    const double C1419 = C47403 * (C47322 + C47339 * C47243);
    const double C2167 =
        2 * C47403 * C47322 + C47403 * (C47322 + C47339 * C47520);
    const double C2172 =
        3 * (C47322 + C47339 * C47520) +
        C47403 * (2 * C47403 * C47339 + C47403 * (C47339 + C47369 * C47520));
    const double C47469 = C47461 + C47462;
    const double C47468 = C47332 + C47460;
    const double C47470 = C47459 * ae;
    const double C47467 = C47459 * ce;
    const double C47617 = 2 * C47459;
    const double C2582 =
        2 * C47403 * C47448 + C47403 * (C47448 + C47459 * C47520);
    const double C7250 =
        3 * (C47448 + C47459 * C47520) +
        C47403 * (2 * C47403 * C47459 + C47403 * (C47459 + C47628 * C47520));
    const double C47466 = C47457 + C47458;
    const double C48112 = C47332 + C48111;
    const double C12894 = C113 * C2171;
    const double C47584 = C47240 * C47577;
    const double C47730 = 2 * C47577;
    const double C47717 = C47577 * ce;
    const double C47812 = C47403 * C47577;
    const double C48017 = C47577 * C47520;
    const double C47585 = C47576 * ae;
    const double C47583 = C47240 * C47576;
    const double C47582 = C47576 * ce;
    const double C47728 = 3 * C47576;
    const double C7735 =
        2 * C47403 * C47431 + C47403 * (C47431 + C47576 * C47520);
    const double C23689 =
        3 * (C47431 + C47576 * C47520) +
        C47403 * (2 * C47403 * C47576 + C47403 * (C47576 + C47744 * C47520));
    const double C48120 = C47422 + C48119;
    const double C28402 = C16533 * C7249;
    const double C39420 = C5060 * C7249;
    const double C44800 = C113 * C7249;
    const double C47581 = C47240 * C47574;
    const double C47722 = -2 * C47574;
    const double C47716 = ae * C47574;
    const double C47810 = C47403 * C47574;
    const double C48020 = C47574 * C47520;
    const double C48126 = C47403 * C48125;
    const double C130 = (3 * (C47306 + C47313 * C47258) +
                         C47245 * (2 * C47315 + C47245 * C47327)) /
                        C47208;
    const double C328 =
        (C47306 + C47313 * C47258 + C47240 * (C47240 * C47327 + C47322 * ae) +
         C47240 * C47322 * ae) /
        C47208;
    const double C330 = (C47240 * (2 * C47315 + C47245 * C47327) +
                         (2 * C47310 + C47245 * C47322) * ae) /
                        C47208;
    const double C535 = (C47403 * (2 * C47315 + C47245 * C47327)) / C47208;
    const double C545 = (C47306 + C47313 * C47258 + C47327 * C47520) / C47208;
    const double C1022 = (C47403 * (C47240 * C47327 + C47322 * ae)) / C47208;
    const double C2174 =
        (2 * C47403 * C47327 + C47403 * (C47327 + C47348 * C47520)) / C47208;
    const double C47452 = C47449 + C47450;
    const double C47463 = C47454 / C47083;
    const double C2469 = C48388 * C2176;
    const double C7595 = C5055 * C2176;
    const double C19036 = C16528 * C2176;
    const double C12895 = C48388 * C2181;
    const double C47436 = C47240 * C47432;
    const double C47565 = 2 * C47432;
    const double C47555 = C47432 * ce;
    const double C2584 =
        (2 * C47403 * C47415 + C47403 * (C47415 + C47432 * C47520)) / C47208;
    const double C7251 =
        (3 * (C47415 + C47432 * C47520) +
         C47403 * (2 * C47403 * C47432 + C47403 * (C47432 + C47577 * C47520))) /
        C47208;
    const double C47580 = -C47570;
    const double C47685 = C47682 / C47083;
    const double C12881 =
        (4 * (2 * C47403 * C47313 + C47403 * C47996) +
         C47403 * (3 * C47996 + C47403 * (2 * C47679 + C47403 * C47794))) /
        C47208;
    const double C12905 = C12898 + C12899;
    const double C28413 = C28404 + C28405;
    const double C131 =
        (-3 * (C47312 * C47258 + C47305)) / C47083 +
        C47245 * ((-2 * C47314) / C47083 - (C47245 * C47326) / C47083);
    const double C329 = -(C47240 * (C47240 * C47326 + C47322 * ce) +
                          C47312 * C47258 + C47305 + C47240 * C47322 * ce) /
                        C47083;
    const double C331 =
        C47240 * ((-2 * C47314) / C47083 - (C47245 * C47326) / C47083) -
        ((2 * C47310 + C47245 * C47322) * ce) / C47083;
    const double C536 =
        C47403 * ((-2 * C47314) / C47083 - (C47245 * C47326) / C47083);
    const double C546 = -(C47326 * C47520 + C47312 * C47258 + C47305) / C47083;
    const double C1023 = -(C47403 * (C47240 * C47326 + C47322 * ce)) / C47083;
    const double C2173 = (-2 * C47403 * C47326) / C47083 -
                         (C47403 * (C47346 * C47520 + C47326)) / C47083;
    const double C47342 = C47336 / C47083;
    const double C47451 = C47446 + C47447;
    const double C47464 = C47455 / C47249;
    const double C2470 = C113 * C2175;
    const double C7598 = C5059 * C2175;
    const double C19039 = C16532 * C2175;
    const double C12892 = C113 * C2182;
    const double C47435 = C47240 * C47429;
    const double C47559 = -2 * C47429;
    const double C47554 = ae * C47429;
    const double C2585 = (-2 * C47403 * C47414) / C47083 -
                         (C47403 * (C47429 * C47520 + C47414)) / C47083;
    const double C7252 =
        (-3 * (C47429 * C47520 + C47414)) / C47083 +
        C47403 * ((-2 * C47403 * C47429) / C47083 -
                  (C47403 * (C47574 * C47520 + C47429)) / C47083);
    const double C47686 = C47683 / C47249;
    const double C48029 = C48027 / C47083;
    const double C12882 =
        4 * ((-2 * C47403 * C47312) / C47083 - (C47403 * C47999) / C47083) +
        C47403 *
            ((-3 * C47999) / C47083 +
             C47403 * ((-2 * C47680) / C47083 - (C47403 * C47795) / C47083));
    const double C47289 = C47288 * C47258;
    const double C47613 = C47245 * C47288;
    const double C47720 = C47240 * C47288;
    const double C47793 = C47288 * C47520;
    const double C47815 = C47403 * C47288;
    const double C47381 = C47245 * C47378;
    const double C47497 = C47240 * C47378;
    const double C2183 =
        (3 * (C47327 + C47348 * C47520) +
         C47403 * (2 * C47403 * C47348 + C47403 * (C47348 + C47378 * C47520))) /
        C47208;
    const double C47638 = C47630 + C47631;
    const double C47753 = C47240 * C47745;
    const double C47379 = C47245 * C47376;
    const double C47493 = C47240 * C47376;
    const double C2184 =
        (-3 * (C47346 * C47520 + C47326)) / C47083 +
        C47403 * ((-2 * C47403 * C47346) / C47083 -
                  (C47403 * (C47376 * C47520 + C47346)) / C47083);
    const double C47635 = C47626 + C47627;
    const double C47750 = C47240 * C47742;
    const double C156 = C113 * C119;
    const double C5092 = C5059 * C119;
    const double C16565 = C16532 * C119;
    const double C365 = C113 * C313;
    const double C5282 = C5059 * C313;
    const double C5274 = C5060 * C313;
    const double C16755 = C16532 * C313;
    const double C16747 = C16533 * C313;
    const double C369 = C113 * C314;
    const double C5080 = C5060 * C314;
    const double C5630 = C5059 * C314;
    const double C16553 = C16533 * C314;
    const double C17103 = C16532 * C314;
    const double C570 = C113 * C523;
    const double C5776 = C5059 * C523;
    const double C17249 = C16532 * C523;
    const double C578 = C113 * C528;
    const double C5480 = C5059 * C528;
    const double C16953 = C16532 * C528;
    const double C1040 = C113 * C1015;
    const double C5460 = C5060 * C1015;
    const double C5986 = C5059 * C1015;
    const double C16933 = C16533 * C1015;
    const double C17459 = C16532 * C1015;
    const double C2344 = C113 * C1422;
    const double C5468 = C5060 * C1422;
    const double C7454 = C5059 * C1422;
    const double C16941 = C16533 * C1422;
    const double C18895 = C16532 * C1422;
    const double C11968 = C113 * C1421;
    const double C27528 = C16532 * C1421;
    const double C27520 = C16533 * C1421;
    const double C38550 = C5059 * C1421;
    const double C38542 = C5060 * C1421;
    const double C12480 = C113 * C1865;
    const double C27512 = C16533 * C1865;
    const double C28002 = C16532 * C1865;
    const double C38534 = C5060 * C1865;
    const double C39024 = C5059 * C1865;
    const double C44446 = C113 * C12879;
    const double C47437 = C47434 / C47208;
    const double C47377 = C47368 + C47374;
    const double C47503 = C47339 + C47496;
    const double C47505 = C47495 * ae;
    const double C47502 = C47495 * ce;
    const double C47646 = C47637 * ae;
    const double C47644 = C47240 * C47637;
    const double C47643 = C47637 * ce;
    const double C47760 = C47727 + C47752;
    const double C47759 = C47751 / C47083;
    const double C47352 = C47340 + C47350;
    const double C47499 = C47490 / C47083;
    const double C47633 = -C47622;
    const double C47699 = C47696 / C47083;
    const double C12883 =
        (4 * (2 * C47403 * C47334 + C47403 * C48002) +
         C47403 *
             (3 * C48002 +
              C47403 * (2 * C47693 + C47403 * (C47363 + C47619 * C47520)))) /
        C47208;
    const double C47757 = C47749 / C47208;
    const double C47800 = C47797 / C47083;
    const double C48025 = C48023 + C48024;
    const double C47827 = -C47823;
    const double C47351 = C47349 / C47083;
    const double C47365 = C47356 / C47083;
    const double C47500 = C47491 / C47249;
    const double C47700 = C47697 / C47249;
    const double C12884 =
        4 * ((-2 * C47403 * C47330) / C47083 - (C47403 * C48005) / C47083) +
        C47403 * ((-3 * C48005) / C47083 +
                  C47403 * ((-2 * C47694) / C47083 -
                            (C47403 * (C47615 * C47520 + C47357)) / C47083));
    const double C47801 = C47798 / C47249;
    const double C48030 = C48028 / C47083;
    const double C48160 = C48159 / C47085;
    const double C48493 = 2 * C48458;
    const double C48168 = C48167 / C47083;
    const double C48497 = C48462 / C47087;
    const double C48524 = C48456 - C48492;
    const double C2825 = -C48492;
    const double C48538 = C48523 + C48157;
    const double C48284 = C48283 / C47085;
    const double C48504 = 2 * C48469;
    const double C48291 = C48290 / C47083;
    const double C48517 = C48482 / C47087;
    const double C48535 = C48471 - C48514;
    const double C3562 = -C48514;
    const double C48542 = C48530 + C48280;
    const double C47157 = C47153 * de;
    const double C47128 = C47120 / C47083;
    const double C47137 = C47081 * C47133;
    const double C47166 = C47133 / C47100;
    const double C48243 = C48238 - C48242;
    const double C48529 = C48501 / C47083;
    const double C48250 = C48246 - C48249;
    const double C48543 = C48532 / C47100;
    const double C1183 =
        ((-(0 * de) / C47083) / C47100 -
         ((0 - (C47081 * C47082) / C47083) * de) / C47083) /
            C47100 -
        ((C47081 * ((-C47082 / C47083) / C47100 -
                    ((C48184 - (C47081 * C47101) / C47083) * de) / C47083) +
          C2691) *
         de) /
            C47083 +
        (-C47101 / C47083) / C47100 - (0 * de) / C47083;
    const double C175 = C165 * C48184;
    const double C350 = C165 * C48541;
    const double C725 = C165 * C48470;
    const double C1188 = C165 * C1177;
    const double C2701 = C165 * C2691;
    const double C174 = C164 * C114;
    const double C349 = C164 * C305;
    const double C724 = C164 * C717;
    const double C11103 = C11099 * C48184;
    const double C11562 = C11099 * C48470;
    const double C11955 = C11099 * C1177;
    const double C12781 = C11099 * C48541;
    const double C13861 = C11099 * C2691;
    const double C11102 = C11098 * C114;
    const double C11561 = C11098 * C717;
    const double C12780 = C11098 * C305;
    const double C5102 = C5078 + C5079;
    const double C5101 = C5076 + C5077;
    const double C5099 = C5072 + C5073;
    const double C5096 = C5066 + C5067;
    const double C5094 = C5062 + C5063;
    const double C5296 = C5272 + C5273;
    const double C5289 = C5258 + C5259;
    const double C5486 = C5458 + C5459;
    const double C5482 = C5450 + C5451;
    const double C37691 = C37682 + C37683;
    const double C37686 = C37672 + C37673;
    const double C37684 = C37668 + C37669;
    const double C38155 = C38148 + C38149;
    const double C39431 = C39422 + C39423;
    const double C39424 = C39408 + C39409;
    const double C153 = C48388 * C139;
    const double C5083 = C5055 * C139;
    const double C16556 = C16528 * C139;
    const double C354 = C48388 * C340;
    const double C5069 = C48520 * C340;
    const double C5263 = C5055 * C340;
    const double C16542 = C48520 * C340;
    const double C16736 = C16528 * C340;
    const double C565 = C48388 * C551;
    const double C5455 = C5055 * C551;
    const double C16928 = C16528 * C551;
    const double C11094 = C48388 * C556;
    const double C26657 = C16528 * C556;
    const double C37679 = C5055 * C556;
    const double C11566 = C48388 * C1028;
    const double C26653 = C48520 * C1028;
    const double C27131 = C16528 * C1028;
    const double C37675 = C48520 * C1028;
    const double C38153 = C5055 * C1028;
    const double C381 = C355 + C356;
    const double C5292 = C5264 + C5265;
    const double C5288 = C5256 + C5257;
    const double C16765 = C16737 + C16738;
    const double C16761 = C16729 + C16730;
    const double C592 = C574 + C575;
    const double C5490 = C5466 + C5467;
    const double C16963 = C16939 + C16940;
    const double C1052 = C1034 + C1035;
    const double C5483 = C5452 + C5453;
    const double C5992 = C5976 + C5977;
    const double C16956 = C16925 + C16926;
    const double C17465 = C17449 + C17450;
    const double C11959 = C48388 * C1426;
    const double C27125 = C48520 * C1426;
    const double C27511 = C16528 * C1426;
    const double C38147 = C48520 * C1426;
    const double C38533 = C5055 * C1426;
    const double C11963 = C48388 * C1432;
    const double C26659 = C48520 * C1432;
    const double C27519 = C16528 * C1432;
    const double C37681 = C48520 * C1432;
    const double C38541 = C5055 * C1432;
    const double C11960 = C113 * C1427;
    const double C27128 = C16533 * C1427;
    const double C27514 = C16532 * C1427;
    const double C38150 = C5060 * C1427;
    const double C38536 = C5059 * C1427;
    const double C11966 = C113 * C1433;
    const double C26654 = C16533 * C1433;
    const double C27522 = C16532 * C1433;
    const double C37676 = C5060 * C1433;
    const double C38544 = C5059 * C1433;
    const double C176 = C166 * C114;
    const double C359 = C166 * C305;
    const double C728 = C166 * C717;
    const double C179 = C169 * C114;
    const double C372 = C169 * C305;
    const double C734 = C169 * C717;
    const double C392 = C379 * C306;
    const double C726 = C379 * C718;
    const double C1189 = C379 * C1184;
    const double C2702 = C379 * C2698;
    const double C396 = C384 * C306;
    const double C730 = C384 * C718;
    const double C1195 = C384 * C1184;
    const double C2706 = C384 * C2698;
    const double C598 = C586 * C114;
    const double C1037 = C586 * C717;
    const double C3713 = C586 * C305;
    const double C600 = C588 * C114;
    const double C1043 = C588 * C717;
    const double C3719 = C588 * C305;
    const double C11105 = C11101 * C114;
    const double C12788 = C11101 * C305;
    const double C13108 = C11101 * C717;
    const double C11575 = C11570 * C718;
    const double C11956 = C11570 * C1184;
    const double C12782 = C11570 * C306;
    const double C13862 = C11570 * C2698;
    const double C12906 = C12900 * C114;
    const double C13388 = C12900 * C717;
    const double C44368 = C12900 * C305;
    const double C177 = C167 * C48184;
    const double C360 = C167 * C48541;
    const double C729 = C167 * C48470;
    const double C1194 = C167 * C1177;
    const double C2705 = C167 * C2691;
    const double C1448 =
        (-(C47262 * C47520) / C47083) / C47208 - C47253 / C47249 -
        (ae * (C47429 * C47520 + C47414)) / C47249 -
        ((C47415 + C47432 * C47520) * ce) / C47249 +
        C47240 * ((-((C47313 + C47323 * C47520) * ce) / C47083) / C47208 -
                  (ae * (C47321 * C47520 + C47312)) / C47249 +
                  C47240 * ((-(C47271 * C47520) / C47083) / C47208 - C47267));
    const double C47428 = C47419 / C47249;
    const double C2188 =
        3 * ((-(C47262 * C47520) / C47083) / C47208 - C47253 / C47249) +
        C47403 * ((-2 * C47537) / C47249 +
                  C47403 * ((-(C47271 * C47520) / C47083) / C47208 - C47267));
    const double C2590 =
        (((-2 * C47403 * C47312) / C47083 -
          (C47403 * (C47321 * C47520 + C47312)) / C47083) *
         ae) /
            C47208 -
        ((2 * C47403 * C47313 + C47403 * (C47313 + C47323 * C47520)) * ce) /
            C47249 +
        C47240 * ((-2 * C47537) / C47249 +
                  C47403 * ((-(C47271 * C47520) / C47083) / C47208 - C47267));
    const double C159 = C48388 * C140;
    const double C5089 = C5055 * C140;
    const double C16562 = C16528 * C140;
    const double C358 = C48388 * C341;
    const double C5269 = C5055 * C341;
    const double C5261 = C48520 * C341;
    const double C16742 = C16528 * C341;
    const double C16734 = C48520 * C341;
    const double C364 = C48388 * C342;
    const double C5071 = C48520 * C342;
    const double C5277 = C5055 * C342;
    const double C16544 = C48520 * C342;
    const double C16750 = C16528 * C342;
    const double C569 = C48388 * C552;
    const double C5463 = C5055 * C552;
    const double C16936 = C16528 * C552;
    const double C577 = C48388 * C557;
    const double C5471 = C5055 * C557;
    const double C16944 = C16528 * C557;
    const double C1039 = C48388 * C1029;
    const double C5457 = C48520 * C1029;
    const double C5981 = C5055 * C1029;
    const double C16930 = C48520 * C1029;
    const double C17454 = C16528 * C1029;
    const double C11961 = C48388 * C1444;
    const double C27129 = C48520 * C1444;
    const double C27515 = C16528 * C1444;
    const double C38151 = C48520 * C1444;
    const double C38537 = C5055 * C1444;
    const double C11967 = C48388 * C1447;
    const double C26655 = C48520 * C1447;
    const double C27523 = C16528 * C1447;
    const double C37677 = C48520 * C1447;
    const double C38545 = C5055 * C1447;
    const double C12891 = C48388 * C2187;
    const double C28395 = C16528 * C2187;
    const double C39413 = C5055 * C2187;
    const double C47273 = C47272 / C47083;
    const double C47283 = -2 * C47278;
    const double C47456 = C47240 * C47278;
    const double C47539 = C47403 * C47278;
    const double C47609 = C47278 / C47249;
    const double C1449 =
        (-((C47315 + C47334 * C47520) * ce) / C47083) / C47208 -
        (ae * (C47330 * C47520 + C47314)) / C47249 +
        C47240 * ((-(C47278 * C47520) / C47083) / C47208 - C47445 / C47249);
    const double C2186 =
        (-2 * C47403 * C47445) / C47249 +
        C47403 * ((-(C47278 * C47520) / C47083) / C47208 - C47445 / C47249);
    const double C47572 = C47558 / C47249;
    const double C47668 = C47667 / C47083;
    const double C47684 = C47240 * C47681;
    const double C47811 = C47681 / C47249;
    const double C47838 = -2 * C47681;
    const double C47347 = C47338 + C47344;
    const double C47488 = C47485 + C47486;
    const double C1424 = C47240 * C47322 + C47484 * C47520;
    const double C2583 =
        2 * C47403 * C47484 + C47403 * (C47484 + C47495 * C47520);
    const double C47487 = C47482 + C47483;
    const double C1582 = C113 * C1287;
    const double C5280 = C5060 * C1287;
    const double C16753 = C16533 * C1287;
    const double C1756 = C113 * C1419;
    const double C5984 = C5060 * C1419;
    const double C17457 = C16533 * C1419;
    const double C2472 = C113 * C2167;
    const double C47473 = C47240 * C47469;
    const double C47618 = 2 * C47469;
    const double C47610 = C47469 * ce;
    const double C1286 = 3 * (C47310 + C47332 * C47243) +
                         C47240 * (2 * C47448 + C47240 * C47468);
    const double C1423 = C47310 + C47332 * C47243 + C47468 * C47520;
    const double C1866 = C47403 * (2 * C47448 + C47240 * C47468);
    const double C7736 =
        2 * C47403 * C47468 + C47403 * (C47468 + C47637 * C47520);
    const double C7596 = C5060 * C2582;
    const double C13114 = C113 * C2582;
    const double C19037 = C16533 * C2582;
    const double C47472 = C47240 * C47466;
    const double C47614 = -2 * C47466;
    const double C47608 = ae * C47466;
    const double C12880 =
        4 * (2 * C47403 * C47332 + C47403 * C48112) +
        C47403 * (3 * C48112 + C47403 * (2 * C47403 * C47360 +
                                         C47403 * (C47360 + C47616 * C47520)));
    const double C47591 = C47323 + C47584;
    const double C47736 = C47717 / C47249;
    const double C47817 = C47812 * ce;
    const double C48018 = C47432 + C48017;
    const double C47590 = C47564 + C47583;
    const double C47589 = C47582 / C47083;
    const double C28868 = C16533 * C7735;
    const double C39886 = C5060 * C7735;
    const double C43777 = C113 * C7735;
    const double C28385 =
        4 * (2 * C47403 * C47422 + C47403 * C48120) +
        C47403 * (3 * C48120 + C47403 * (2 * C47403 * C47562 +
                                         C47403 * (C47562 + C47725 * C47520)));
    const double C47588 = C47581 + C47321;
    const double C47741 = C47722 / C47083;
    const double C47735 = C47716 / C47083;
    const double C47816 = ae * C47810;
    const double C48021 = C48020 + C47429;
    const double C48127 = C48124 + C48126;
    const double C157 = C48388 * C130;
    const double C5093 = C5055 * C130;
    const double C16566 = C16528 * C130;
    const double C366 = C48388 * C328;
    const double C5283 = C5055 * C328;
    const double C5275 = C48520 * C328;
    const double C16756 = C16528 * C328;
    const double C16748 = C48520 * C328;
    const double C370 = C48388 * C330;
    const double C5081 = C48520 * C330;
    const double C5631 = C5055 * C330;
    const double C16554 = C48520 * C330;
    const double C17104 = C16528 * C330;
    const double C571 = C48388 * C535;
    const double C5777 = C5055 * C535;
    const double C17250 = C16528 * C535;
    const double C579 = C48388 * C545;
    const double C5481 = C5055 * C545;
    const double C16954 = C16528 * C545;
    const double C1041 = C48388 * C1022;
    const double C5461 = C48520 * C1022;
    const double C5987 = C5055 * C1022;
    const double C16934 = C48520 * C1022;
    const double C17460 = C16528 * C1022;
    const double C2473 = C48388 * C2174;
    const double C1293 = (2 * (C47240 * C47315 + C47310 * ae) +
                          C47240 * (C47315 + C47240 * C47452 + C47448 * ae) +
                          (C47310 + C47332 * C47243) * ae) /
                         C47208;
    const double C1428 =
        (C47403 * (C47315 + C47240 * C47452 + C47448 * ae)) / C47208;
    const double C1436 =
        (C47240 * C47315 + C47310 * ae + C47452 * C47520) / C47208;
    const double C2586 =
        (2 * C47403 * C47452 + C47403 * (C47452 + C47469 * C47520)) / C47208;
    const double C47471 = -C47463;
    const double C2476 = C2468 + C2469;
    const double C7602 = C7594 + C7595;
    const double C19043 = C19035 + C19036;
    const double C12903 = C12894 + C12895;
    const double C47439 = C47313 + C47436;
    const double C47569 = C47555 / C47249;
    const double C13391 = C48388 * C2584;
    const double C28393 = C48520 * C2584;
    const double C28871 = C16528 * C2584;
    const double C39411 = C48520 * C2584;
    const double C39889 = C5055 * C2584;
    const double C28403 = C48520 * C7251;
    const double C39421 = C48520 * C7251;
    const double C44801 = C48388 * C7251;
    const double C47587 = C47580 / C47208;
    const double C47688 = -C47685;
    const double C44447 = C48388 * C12881;
    const double C12911 = C12905 * C114;
    const double C44798 = C12905 * C717;
    const double C158 = C113 * C131;
    const double C5088 = C5059 * C131;
    const double C16561 = C16532 * C131;
    const double C367 = C113 * C329;
    const double C5286 = C5059 * C329;
    const double C5278 = C5060 * C329;
    const double C16759 = C16532 * C329;
    const double C16751 = C16533 * C329;
    const double C373 = C113 * C331;
    const double C5084 = C5060 * C331;
    const double C5634 = C5059 * C331;
    const double C16557 = C16533 * C331;
    const double C17107 = C16532 * C331;
    const double C572 = C113 * C536;
    const double C5772 = C5059 * C536;
    const double C17245 = C16532 * C536;
    const double C580 = C113 * C546;
    const double C5476 = C5059 * C546;
    const double C16949 = C16532 * C546;
    const double C1044 = C113 * C1023;
    const double C5464 = C5060 * C1023;
    const double C5990 = C5059 * C1023;
    const double C16937 = C16533 * C1023;
    const double C17463 = C16532 * C1023;
    const double C2474 = C113 * C2173;
    const double C1303 =
        2 * ((-(C47315 * ce) / C47083) / C47208 - (ae * C47314) / C47249 -
             (C47240 * C47445) / C47249) -
        (ae * (C47240 * C47451 + C47314 + C47448 * ce)) / C47249 -
        ((C47315 + C47240 * C47452 + C47448 * ae) * ce) / C47249 +
        C47240 *
            ((-(ae * C47451) / C47083) / C47208 - C47445 / C47249 -
             (C47452 * ce) / C47249 +
             C47240 * ((-(C47334 * ce) / C47083) / C47208 -
                       (ae * C47330) / C47249 - (C47240 * C47278) / C47249));
    const double C1445 = (-(ae * C47403 * C47451) / C47083) / C47208 -
                         (C47403 * C47445) / C47249 -
                         (C47403 * C47452 * ce) / C47249 +
                         C47240 * ((-(C47403 * C47334 * ce) / C47083) / C47208 -
                                   (ae * C47403 * C47330) / C47249 -
                                   (C47240 * C47403 * C47278) / C47249);
    const double C1450 =
        (-(C47278 * C47520) / C47083) / C47208 - C47445 / C47249 -
        (ae * (C47466 * C47520 + C47451)) / C47249 -
        ((C47452 + C47469 * C47520) * ce) / C47249 +
        C47240 * ((-((C47334 + C47363 * C47520) * ce) / C47083) / C47208 -
                  (ae * (C47357 * C47520 + C47330)) / C47249 +
                  C47240 * ((-(C47245 * C47288 * C47520) / C47083) / C47208 -
                            C47278 / C47249));
    const double C1294 =
        (-2 * (C47240 * C47314 + C47310 * ce)) / C47083 -
        (C47240 * (C47240 * C47451 + C47314 + C47448 * ce)) / C47083 -
        ((C47310 + C47332 * C47243) * ce) / C47083;
    const double C1429 =
        -(C47403 * (C47240 * C47451 + C47314 + C47448 * ce)) / C47083;
    const double C1437 =
        -(C47451 * C47520 + C47240 * C47314 + C47310 * ce) / C47083;
    const double C2587 = (-2 * C47403 * C47451) / C47083 -
                         (C47403 * (C47466 * C47520 + C47451)) / C47083;
    const double C47438 = C47435 + C47312;
    const double C47573 = C47559 / C47083;
    const double C47568 = C47554 / C47083;
    const double C13392 = C113 * C2585;
    const double C28396 = C16533 * C2585;
    const double C28874 = C16532 * C2585;
    const double C39414 = C5060 * C2585;
    const double C39892 = C5059 * C2585;
    const double C28398 = C16533 * C7252;
    const double C39416 = C5060 * C7252;
    const double C44802 = C113 * C7252;
    const double C44444 = C113 * C12882;
    const double C47290 = C47289 / C47083;
    const double C47624 = C47240 * C47613;
    const double C47673 = C47613 * C47520;
    const double C47695 = C47403 * C47613;
    const double C47739 = C47720 / C47249;
    const double C47796 = C47793 / C47083;
    const double C47820 = C47240 * C47815;
    const double C47384 = C47370 + C47381;
    const double C47504 = C47497 + C47498;
    const double C47645 = C47240 * C47638;
    const double C7253 =
        (3 * (C47452 + C47469 * C47520) +
         C47403 * (2 * C47403 * C47469 + C47403 * (C47469 + C47638 * C47520))) /
        C47208;
    const double C47761 = C47341 + C47753;
    const double C47382 = C47379 / C47083;
    const double C47501 = C47493 + C47494;
    const double C47642 = C47240 * C47635;
    const double C7254 =
        (-3 * (C47466 * C47520 + C47451)) / C47083 +
        C47403 * ((-2 * C47403 * C47466) / C47083 -
                  (C47403 * (C47635 * C47520 + C47466)) / C47083);
    const double C47758 = C47750 + C47337;
    const double C47440 = C47437 - C47427;
    const double C47380 = C47245 * C47377;
    const double C47531 = C47377 * ae;
    const double C47529 = C47240 * C47377;
    const double C47528 = C47377 * ce;
    const double C1288 = 3 * (C47322 + C47339 * C47243) +
                         C47240 * (2 * C47484 + C47240 * C47503);
    const double C1425 = C47322 + C47339 * C47243 + C47503 * C47520;
    const double C1867 = C47403 * (2 * C47484 + C47240 * C47503);
    const double C47651 = C47617 + C47644;
    const double C47650 = C47643 / C47083;
    const double C47768 = C47760 * ae;
    const double C47766 = C47240 * C47760;
    const double C47765 = C47760 * ce;
    const double C133 = (4 * (2 * C47315 + C47245 * C47327) +
                         C47245 * (3 * C47327 + C47245 * C47352)) /
                        C47208;
    const double C540 = (C47403 * (3 * C47327 + C47245 * C47352)) / C47208;
    const double C548 =
        (2 * C47315 + C47245 * C47327 + C47352 * C47520) / C47208;
    const double C47506 = -C47499;
    const double C47641 = C47633 / C47208;
    const double C47702 = -C47699;
    const double C47763 = C47757 - C47738;
    const double C47803 = -C47800;
    const double C44438 =
        (5 * (3 * C47996 + C47403 * C48025) +
         C47403 * (4 * C48025 +
                   C47403 * (3 * C47794 +
                             C47403 * (2 * C47813 +
                                       C47403 * (C47341 + C47371 * C47520))))) /
        C47208;
    const double C47829 = C47827 / C47208;
    const double C47353 = C47342 - C47351;
    const double C48031 = C48029 - C48030;
    const double C48161 = C48157 - C48160;
    const double C48525 = C48493 / C47083;
    const double C48169 = C48165 - C48168;
    const double C48539 = C48524 / C47100;
    const double C48285 = C48280 - C48284;
    const double C48531 = C48504 / C47083;
    const double C48292 = C48288 - C48291;
    const double C48545 = C48535 / C47100;
    const double C47159 = C47157 / C47083;
    const double C47132 = C48184 - C47128;
    const double C47141 = C47137 + C48247;
    const double C47169 = C47166 - C47168;
    const double C3136 = C167 * C48243;
    const double C3130 = C165 * C48243;
    const double C14422 = C11099 * C48243;
    const double C48473 = C48243 * C48237;
    const double C48510 = C48475 + C48243;
    const double C48477 = C48250 / C47100;
    const double C48474 = C48250 * C48237;
    const double C1551 = C48543 - (C48243 * C48239) / C47083;
    const double C1201 = C169 * C1183;
    const double C1193 = C166 * C1183;
    const double C1187 = C164 * C1183;
    const double C1754 = C588 * C1183;
    const double C1746 = C586 * C1183;
    const double C11965 = C11101 * C1183;
    const double C11954 = C11098 * C1183;
    const double C43775 = C12900 * C1183;
    const double C168 = C152 + C153;
    const double C5104 = C5082 + C5083;
    const double C16577 = C16555 + C16556;
    const double C380 = C353 + C354;
    const double C5097 = C5068 + C5069;
    const double C5291 = C5262 + C5263;
    const double C16570 = C16541 + C16542;
    const double C16764 = C16735 + C16736;
    const double C587 = C564 + C565;
    const double C5484 = C5454 + C5455;
    const double C16957 = C16927 + C16928;
    const double C11100 = C11093 + C11094;
    const double C26667 = C26656 + C26657;
    const double C37689 = C37678 + C37679;
    const double C11571 = C11565 + C11566;
    const double C26665 = C26652 + C26653;
    const double C27135 = C27130 + C27131;
    const double C37687 = C37674 + C37675;
    const double C38157 = C38152 + C38153;
    const double C394 = C381 * C307;
    const double C1191 = C381 * C1185;
    const double C604 = C592 * C114;
    const double C2342 = C592 * C717;
    const double C11974 = C592 * C1183;
    const double C12794 = C592 * C305;
    const double C1059 = C1052 * C718;
    const double C1744 = C1052 * C1184;
    const double C2994 = C1052 * C2698;
    const double C3711 = C1052 * C306;
    const double C11980 = C11958 + C11959;
    const double C27132 = C27124 + C27125;
    const double C27534 = C27510 + C27511;
    const double C38154 = C38146 + C38147;
    const double C38556 = C38532 + C38533;
    const double C11982 = C11962 + C11963;
    const double C26668 = C26658 + C26659;
    const double C27538 = C27518 + C27519;
    const double C37690 = C37680 + C37681;
    const double C38560 = C38540 + C38541;
    const double C184 = C176 + C177;
    const double C383 = C359 + C360;
    const double C742 = C728 + C729;
    const double C11971 = C48388 * C1448;
    const double C27533 = C16528 * C1448;
    const double C27525 = C48520 * C1448;
    const double C38555 = C5055 * C1448;
    const double C38547 = C48520 * C1448;
    const double C12897 = C48388 * C2188;
    const double C28401 = C16528 * C2188;
    const double C39419 = C5055 * C2188;
    const double C13393 = C48388 * C2590;
    const double C28397 = C48520 * C2590;
    const double C28875 = C16528 * C2590;
    const double C39415 = C48520 * C2590;
    const double C39893 = C5055 * C2590;
    const double C382 = C357 + C358;
    const double C5294 = C5268 + C5269;
    const double C5290 = C5260 + C5261;
    const double C16767 = C16741 + C16742;
    const double C16763 = C16733 + C16734;
    const double C385 = C363 + C364;
    const double C5098 = C5070 + C5071;
    const double C5298 = C5276 + C5277;
    const double C16571 = C16543 + C16544;
    const double C16771 = C16749 + C16750;
    const double C589 = C568 + C569;
    const double C5488 = C5462 + C5463;
    const double C16961 = C16935 + C16936;
    const double C593 = C576 + C577;
    const double C5492 = C5470 + C5471;
    const double C16965 = C16943 + C16944;
    const double C1053 = C1038 + C1039;
    const double C5485 = C5456 + C5457;
    const double C5994 = C5980 + C5981;
    const double C16958 = C16929 + C16930;
    const double C17467 = C17453 + C17454;
    const double C11981 = C11960 + C11961;
    const double C27134 = C27128 + C27129;
    const double C27536 = C27514 + C27515;
    const double C38156 = C38150 + C38151;
    const double C38558 = C38536 + C38537;
    const double C11983 = C11966 + C11967;
    const double C26666 = C26654 + C26655;
    const double C27540 = C27522 + C27523;
    const double C37688 = C37676 + C37677;
    const double C38562 = C38544 + C38545;
    const double C12901 = C12890 + C12891;
    const double C28408 = C28394 + C28395;
    const double C39426 = C39412 + C39413;
    const double C47274 = -C47273;
    const double C47285 = C47283 / C47249;
    const double C47465 = C47456 / C47249;
    const double C2189 =
        3 * ((-(C47278 * C47520) / C47083) / C47208 - C47445 / C47249) +
        C47403 * ((-2 * C47539) / C47249 +
                  C47403 * ((-(C47245 * C47288 * C47520) / C47083) / C47208 -
                            C47278 / C47249));
    const double C2591 =
        (((-2 * C47403 * C47330) / C47083 -
          (C47403 * (C47357 * C47520 + C47330)) / C47083) *
         ae) /
            C47208 -
        ((2 * C47403 * C47334 + C47403 * (C47334 + C47363 * C47520)) * ce) /
            C47249 +
        C47240 * ((-2 * C47539) / C47249 +
                  C47403 * ((-(C47245 * C47288 * C47520) / C47083) / C47208 -
                            C47278 / C47249));
    const double C2347 = C48388 * C1449;
    const double C5473 = C48520 * C1449;
    const double C7459 = C5055 * C1449;
    const double C16946 = C48520 * C1449;
    const double C18900 = C16528 * C1449;
    const double C2471 = C48388 * C2186;
    const double C7599 = C5055 * C2186;
    const double C19040 = C16528 * C2186;
    const double C47669 = -C47668;
    const double C47687 = C47684 / C47249;
    const double C47840 = C47838 / C47249;
    const double C332 =
        (2 * C47315 + C47245 * C47327 +
         C47240 * (C47240 * C47352 + C47347 * ae) + C47240 * C47347 * ae) /
        C47208;
    const double C334 = (C47240 * (3 * C47327 + C47245 * C47352) +
                         (3 * C47322 + C47245 * C47347) * ae) /
                        C47208;
    const double C1024 = (C47403 * (C47240 * C47352 + C47347 * ae)) / C47208;
    const double C120 = 4 * (2 * C47310 + C47245 * C47322) +
                        C47245 * (3 * C47322 + C47245 * C47347);
    const double C315 = 2 * C47310 + C47245 * C47322 + C47347 * C47243;
    const double C316 = C47240 * (3 * C47322 + C47245 * C47347);
    const double C525 = C47403 * (3 * C47322 + C47245 * C47347);
    const double C529 = 2 * C47310 + C47245 * C47322 + C47347 * C47520;
    const double C1016 = C47403 * C47240 * C47347;
    const double C1561 =
        2 * C47240 * C47347 + C47240 * (C47347 + C47377 * C47243);
    const double C1739 = C47403 * (C47347 + C47377 * C47243);
    const double C2463 =
        2 * C47403 * C47347 + C47403 * (C47347 + C47377 * C47520);
    const double C1297 = (2 * (C47240 * C47327 + C47322 * ae) +
                          C47240 * (C47327 + C47240 * C47488 + C47484 * ae) +
                          (C47322 + C47339 * C47243) * ae) /
                         C47208;
    const double C1430 =
        (C47403 * (C47327 + C47240 * C47488 + C47484 * ae)) / C47208;
    const double C1440 =
        (C47240 * C47327 + C47322 * ae + C47488 * C47520) / C47208;
    const double C2350 = C113 * C1424;
    const double C5478 = C5060 * C1424;
    const double C16951 = C16533 * C1424;
    const double C1298 =
        (-2 * (C47240 * C47326 + C47322 * ce)) / C47083 -
        (C47240 * (C47240 * C47487 + C47326 + C47484 * ce)) / C47083 -
        ((C47322 + C47339 * C47243) * ce) / C47083;
    const double C1431 =
        -(C47403 * (C47240 * C47487 + C47326 + C47484 * ce)) / C47083;
    const double C1441 =
        -(C47487 * C47520 + C47240 * C47326 + C47322 * ce) / C47083;
    const double C47476 = C47334 + C47473;
    const double C47621 = C47610 / C47249;
    const double C6520 = C5060 * C1286;
    const double C17977 = C16533 * C1286;
    const double C7452 = C5060 * C1423;
    const double C11976 = C113 * C1423;
    const double C18893 = C16533 * C1423;
    const double C6726 = C5060 * C1866;
    const double C12132 = C113 * C1866;
    const double C18183 = C16533 * C1866;
    const double C47475 = C47472 + C47330;
    const double C47625 = C47614 / C47083;
    const double C47620 = C47608 / C47083;
    const double C47595 = C47591 + C47578;
    const double C47822 = C47817 / C47249;
    const double C28386 =
        (4 * (2 * C47403 * C47432 + C47403 * C48018) +
         C47403 *
             (3 * C48018 +
              C47403 * (2 * C47812 + C47403 * (C47577 + C47745 * C47520)))) /
        C47208;
    const double C6227 = 4 * (2 * C47411 + C47240 * C47431) +
                         C47240 * (3 * C47431 + C47240 * C47590);
    const double C6381 = 2 * C47411 + C47240 * C47431 + C47590 * C47520;
    const double C6867 = C47403 * (3 * C47431 + C47240 * C47590);
    const double C24035 =
        2 * C47403 * C47590 + C47403 * (C47590 + C47760 * C47520);
    const double C47594 = C47588 + C47575;
    const double C47748 = -C47735;
    const double C47821 = C47816 / C47083;
    const double C28387 =
        4 * ((-2 * C47403 * C47429) / C47083 - (C47403 * C48021) / C47083) +
        C47403 * ((-3 * C48021) / C47083 +
                  C47403 * ((-2 * C47810) / C47083 -
                            (C47403 * (C47742 * C47520 + C47574)) / C47083));
    const double C44437 =
        5 * (3 * C48109 + C47403 * C48127) +
        C47403 * (4 * C48127 +
                  C47403 * (3 * C48125 +
                            C47403 * (2 * C47403 * C47264 +
                                      C47403 * (C47264 + C47279 * C47520))));
    const double C170 = C156 + C157;
    const double C5109 = C5092 + C5093;
    const double C16582 = C16565 + C16566;
    const double C386 = C365 + C366;
    const double C5301 = C5282 + C5283;
    const double C5297 = C5274 + C5275;
    const double C16774 = C16755 + C16756;
    const double C16770 = C16747 + C16748;
    const double C388 = C369 + C370;
    const double C5103 = C5080 + C5081;
    const double C5637 = C5630 + C5631;
    const double C16576 = C16553 + C16554;
    const double C17110 = C17103 + C17104;
    const double C590 = C570 + C571;
    const double C5781 = C5776 + C5777;
    const double C17254 = C17249 + C17250;
    const double C594 = C578 + C579;
    const double C5497 = C5480 + C5481;
    const double C16970 = C16953 + C16954;
    const double C1054 = C1040 + C1041;
    const double C5487 = C5460 + C5461;
    const double C5997 = C5986 + C5987;
    const double C16960 = C16933 + C16934;
    const double C17470 = C17459 + C17460;
    const double C2478 = C2472 + C2473;
    const double C1573 = C48388 * C1293;
    const double C5267 = C48520 * C1293;
    const double C6523 = C5055 * C1293;
    const double C16740 = C48520 * C1293;
    const double C17980 = C16528 * C1293;
    const double C1749 = C48388 * C1428;
    const double C5979 = C48520 * C1428;
    const double C6729 = C5055 * C1428;
    const double C17452 = C48520 * C1428;
    const double C18186 = C16528 * C1428;
    const double C2345 = C48388 * C1436;
    const double C5469 = C48520 * C1436;
    const double C7455 = C5055 * C1436;
    const double C16942 = C48520 * C1436;
    const double C18896 = C16528 * C1436;
    const double C7597 = C48520 * C2586;
    const double C13115 = C48388 * C2586;
    const double C19038 = C48520 * C2586;
    const double C47474 = C47471 / C47208;
    const double C2480 = C2476 * C114;
    const double C13112 = C2476 * C717;
    const double C12909 = C12903 * C114;
    const double C47442 = C47439 + C47433;
    const double C13394 = C13390 + C13391;
    const double C28407 = C28392 + C28393;
    const double C28877 = C28870 + C28871;
    const double C39425 = C39410 + C39411;
    const double C39895 = C39888 + C39889;
    const double C28412 = C28402 + C28403;
    const double C39430 = C39420 + C39421;
    const double C44805 = C44800 + C44801;
    const double C47593 = C47587 - C47571;
    const double C47689 = C47688 / C47208;
    const double C44449 = C44446 + C44447;
    const double C171 = C158 + C159;
    const double C5107 = C5088 + C5089;
    const double C16580 = C16561 + C16562;
    const double C1575 = C48388 * C1303;
    const double C5271 = C48520 * C1303;
    const double C6527 = C5055 * C1303;
    const double C16744 = C48520 * C1303;
    const double C17984 = C16528 * C1303;
    const double C1751 = C48388 * C1445;
    const double C5983 = C48520 * C1445;
    const double C6733 = C5055 * C1445;
    const double C17456 = C48520 * C1445;
    const double C18190 = C16528 * C1445;
    const double C7457 = C48520 * C1450;
    const double C11979 = C48388 * C1450;
    const double C18898 = C48520 * C1450;
    const double C1574 = C113 * C1294;
    const double C5270 = C5060 * C1294;
    const double C6526 = C5059 * C1294;
    const double C16743 = C16533 * C1294;
    const double C17983 = C16532 * C1294;
    const double C1750 = C113 * C1429;
    const double C5982 = C5060 * C1429;
    const double C6732 = C5059 * C1429;
    const double C17455 = C16533 * C1429;
    const double C18189 = C16532 * C1429;
    const double C2346 = C113 * C1437;
    const double C5472 = C5060 * C1437;
    const double C7458 = C5059 * C1437;
    const double C16945 = C16533 * C1437;
    const double C18899 = C16532 * C1437;
    const double C7600 = C5060 * C2587;
    const double C13116 = C113 * C2587;
    const double C19041 = C16533 * C2587;
    const double C47441 = C47438 + C47430;
    const double C47579 = -C47568;
    const double C47291 = -C47290;
    const double C47634 = C47624 / C47249;
    const double C47674 = C47673 / C47083;
    const double C47698 = C47240 * C47695;
    const double C47799 = -C47796;
    const double C47825 = C47820 / C47249;
    const double C47386 = C47245 * C47384;
    const double C47530 = C47240 * C47384;
    const double C2464 =
        (2 * C47403 * C47352 + C47403 * (C47352 + C47384 * C47520)) / C47208;
    const double C47508 = C47240 * C47504;
    const double C2588 =
        (2 * C47403 * C47488 + C47403 * (C47488 + C47504 * C47520)) / C47208;
    const double C47652 = C47363 + C47645;
    const double C47767 = C47761 + C47746;
    const double C47385 = C47372 - C47382;
    const double C47507 = C47240 * C47501;
    const double C2589 = (-2 * C47403 * C47487) / C47083 -
                         (C47403 * (C47501 * C47520 + C47487)) / C47083;
    const double C47649 = C47642 + C47357;
    const double C47764 = C47758 + C47743;
    const double C47443 = C47440 - C47428;
    const double C47383 = C47359 + C47380;
    const double C2337 = C47240 * C47347 + C47529 * C47520;
    const double C47532 = C47528 / C47083;
    const double C6228 = 4 * (2 * C47448 + C47240 * C47468) +
                         C47240 * (3 * C47468 + C47240 * C47651);
    const double C6382 = 2 * C47448 + C47240 * C47468 + C47651 * C47520;
    const double C6868 = C47403 * (3 * C47468 + C47240 * C47651);
    const double C47773 = C47728 + C47766;
    const double C47772 = C47765 / C47083;
    const double C163 = C48388 * C133;
    const double C862 = C48388 * C540;
    const double C585 = C48388 * C548;
    const double C47509 = C47506 / C47208;
    const double C47648 = C47641 - C47623;
    const double C47703 = C47702 / C47208;
    const double C47770 = C47763 - C47739;
    const double C47805 = C47803 / C47208;
    const double C47831 = C47829 - C47824;
    const double C132 =
        4 * ((-2 * C47314) / C47083 - (C47245 * C47326) / C47083) +
        C47245 * ((-3 * C47326) / C47083 + C47245 * C47353);
    const double C333 = (-2 * C47314) / C47083 - (C47245 * C47326) / C47083 +
                        C47240 * (C47240 * C47353 - (C47347 * ce) / C47083) -
                        (C47240 * C47347 * ce) / C47083;
    const double C335 = C47240 * ((-3 * C47326) / C47083 + C47245 * C47353) -
                        ((3 * C47322 + C47245 * C47347) * ce) / C47083;
    const double C539 = C47403 * ((-3 * C47326) / C47083 + C47245 * C47353);
    const double C547 =
        (-2 * C47314) / C47083 - (C47245 * C47326) / C47083 + C47353 * C47520;
    const double C1025 = C47403 * (C47240 * C47353 - (C47347 * ce) / C47083);
    const double C44439 =
        5 * ((-3 * C47999) / C47083 + C47403 * C48031) +
        C47403 * (4 * C48031 +
                  C47403 * ((-3 * C47795) / C47083 +
                            C47403 * ((-2 * C47814) / C47083 -
                                      (C47403 * (C47367 * C47520 + C47337)) /
                                          C47083)));
    const double C48455 = C48161 * C48151;
    const double C48495 = C48460 + C48161;
    const double C48463 = C48169 / C47100;
    const double C48459 = C48169 * C48151;
    const double C713 = C48539 - (C48161 * C48152) / C47083;
    const double C48479 = C48285 * C48279;
    const double C48516 = C48481 + C48285;
    const double C48483 = C48292 / C47100;
    const double C48480 = C48292 * C48279;
    const double C2459 = C48545 - (C48285 * C48281) / C47083;
    const double C47161 = C47156 - C47159;
    const double C47136 = C47132 * ce;
    const double C2697 = (-C47118) / C47100 - (C47132 * de) / C47083;
    const double C47145 = C47141 * de;
    const double C3133 = C381 * C47169;
    const double C1282 =
        (C47169 / C47100 + (0 * ce) / C47083) / C47100 - (0 * de) / C47083;
    const double C1560 = C47169 / C47100 - (0 * de) / C47083;
    const double C2830 = C47169 / C47100 + (0 * ce) / C47083;
    const double C48507 = C48473 / C47083;
    const double C48533 = C48510 / C47100;
    const double C48534 = C48511 + C48477;
    const double C1553 = C48477 - C48248 / C47087;
    const double C48509 = C48474 / C47083;
    const double C1577 = C167 * C1551;
    const double C1567 = C165 * C1551;
    const double C12475 = C11099 * C1551;
    const double C1205 = C1193 + C1194;
    const double C178 = C168 * C48184;
    const double C371 = C168 * C48541;
    const double C733 = C168 * C48470;
    const double C1200 = C168 * C1177;
    const double C2709 = C168 * C2691;
    const double C3142 = C168 * C48243;
    const double C393 = C380 * C48529;
    const double C727 = C380 * C48247;
    const double C1190 = C380 * C1178;
    const double C2703 = C380 * C48247;
    const double C3132 = C380 * C48250;
    const double C599 = C587 * C48184;
    const double C1036 = C587 * C48470;
    const double C1745 = C587 * C1177;
    const double C2995 = C587 * C2691;
    const double C3454 = C587 * C48243;
    const double C3712 = C587 * C48541;
    const double C12127 = C587 * C1551;
    const double C11104 = C11100 * C48184;
    const double C11964 = C11100 * C1177;
    const double C12787 = C11100 * C48541;
    const double C13107 = C11100 * C48470;
    const double C13867 = C11100 * C2691;
    const double C16442 = C11100 * C48243;
    const double C44132 = C11100 * C1551;
    const double C11576 = C11571 * C48247;
    const double C11957 = C11571 * C1178;
    const double C12783 = C11571 * C48529;
    const double C13863 = C11571 * C48247;
    const double C14424 = C11571 * C48250;
    const double C11988 = C11980 * C1185;
    const double C12784 = C11980 * C307;
    const double C14425 = C11980 * C47169;
    const double C11990 = C11982 * C1184;
    const double C12786 = C11982 * C306;
    const double C13106 = C11982 * C718;
    const double C13866 = C11982 * C2698;
    const double C187 = C184 * C48405;
    const double C404 = C383 - C396;
    const double C746 = C742 - C730;
    const double C12904 = C12896 + C12897;
    const double C28411 = C28400 + C28401;
    const double C39429 = C39418 + C39419;
    const double C13395 = C13392 + C13393;
    const double C28409 = C28396 + C28397;
    const double C28879 = C28874 + C28875;
    const double C39427 = C39414 + C39415;
    const double C39897 = C39892 + C39893;
    const double C395 = C382 * C48502;
    const double C1192 = C382 * C48502;
    const double C3134 = C382 * C3121;
    const double C397 = C385 * C48529;
    const double C731 = C385 * C48247;
    const double C1196 = C385 * C1178;
    const double C2707 = C385 * C48247;
    const double C3138 = C385 * C48250;
    const double C601 = C589 * C48184;
    const double C1042 = C589 * C48470;
    const double C1753 = C589 * C1177;
    const double C2999 = C589 * C2691;
    const double C3460 = C589 * C48243;
    const double C3718 = C589 * C48541;
    const double C605 = C593 * C48184;
    const double C2343 = C593 * C48470;
    const double C3003 = C593 * C2691;
    const double C11973 = C593 * C1177;
    const double C12793 = C593 * C48541;
    const double C14430 = C593 * C48243;
    const double C1060 = C1053 * C48247;
    const double C1747 = C1053 * C1178;
    const double C2997 = C1053 * C48247;
    const double C3456 = C1053 * C48250;
    const double C3714 = C1053 * C48529;
    const double C11989 = C11981 * C48502;
    const double C12785 = C11981 * C48502;
    const double C14426 = C11981 * C3121;
    const double C11991 = C11983 * C1178;
    const double C12789 = C11983 * C48529;
    const double C13109 = C11983 * C48247;
    const double C13869 = C11983 * C48247;
    const double C16444 = C11983 * C48250;
    const double C12907 = C12901 * C48184;
    const double C13389 = C12901 * C48470;
    const double C15904 = C12901 * C2691;
    const double C43774 = C12901 * C1177;
    const double C44367 = C12901 * C48541;
    const double C47062 = C12901 * C48243;
    const double C47275 = C47274 / C47208;
    const double C12893 = C48388 * C2189;
    const double C7601 = C48520 * C2591;
    const double C13117 = C48388 * C2591;
    const double C19042 = C48520 * C2591;
    const double C2477 = C2470 + C2471;
    const double C7604 = C7598 + C7599;
    const double C19045 = C19039 + C19040;
    const double C47670 = C47669 / C47208;
    const double C376 = C48388 * C332;
    const double C5629 = C48520 * C332;
    const double C17102 = C48520 * C332;
    const double C739 = C48388 * C334;
    const double C5091 = C48520 * C334;
    const double C16564 = C48520 * C334;
    const double C1049 = C48388 * C1024;
    const double C5775 = C48520 * C1024;
    const double C17248 = C48520 * C1024;
    const double C162 = C113 * C120;
    const double C375 = C113 * C315;
    const double C5628 = C5060 * C315;
    const double C17101 = C16533 * C315;
    const double C738 = C113 * C316;
    const double C5090 = C5060 * C316;
    const double C16563 = C16533 * C316;
    const double C861 = C113 * C525;
    const double C584 = C113 * C529;
    const double C1048 = C113 * C1016;
    const double C5774 = C5060 * C1016;
    const double C17247 = C16533 * C1016;
    const double C1583 = C48388 * C1297;
    const double C5281 = C48520 * C1297;
    const double C16754 = C48520 * C1297;
    const double C1757 = C48388 * C1430;
    const double C5985 = C48520 * C1430;
    const double C17458 = C48520 * C1430;
    const double C2351 = C48388 * C1440;
    const double C5479 = C48520 * C1440;
    const double C16952 = C48520 * C1440;
    const double C1584 = C113 * C1298;
    const double C5284 = C5060 * C1298;
    const double C16757 = C16533 * C1298;
    const double C1758 = C113 * C1431;
    const double C5988 = C5060 * C1431;
    const double C17461 = C16533 * C1431;
    const double C2352 = C113 * C1441;
    const double C5474 = C5060 * C1441;
    const double C16947 = C16533 * C1441;
    const double C47479 = C47476 + C47470;
    const double C47478 = C47475 + C47467;
    const double C47632 = -C47620;
    const double C47599 = C47240 * C47595;
    const double C47729 = 3 * C47595;
    const double C47715 = C47595 * ce;
    const double C27526 = C16533 * C6381;
    const double C38548 = C5060 * C6381;
    const double C44137 = C113 * C6381;
    const double C28000 = C16533 * C6867;
    const double C39022 = C5060 * C6867;
    const double C47598 = C47240 * C47594;
    const double C47721 = -3 * C47594;
    const double C47714 = ae * C47594;
    const double C47756 = C47748 / C47208;
    const double C47826 = -C47821;
    const double C180 = C170 * C114;
    const double C736 = C170 * C717;
    const double C398 = C386 * C307;
    const double C1197 = C386 * C1185;
    const double C3139 = C386 * C47169;
    const double C400 = C388 * C306;
    const double C732 = C388 * C718;
    const double C1199 = C388 * C1184;
    const double C2708 = C388 * C2698;
    const double C602 = C590 * C114;
    const double C1046 = C590 * C717;
    const double C606 = C594 * C114;
    const double C2348 = C594 * C717;
    const double C1061 = C1054 * C718;
    const double C1752 = C1054 * C1184;
    const double C2998 = C1054 * C2698;
    const double C3717 = C1054 * C306;
    const double C2482 = C2478 * C114;
    const double C1586 = C1572 + C1573;
    const double C5293 = C5266 + C5267;
    const double C6529 = C6522 + C6523;
    const double C16766 = C16739 + C16740;
    const double C17986 = C17979 + C17980;
    const double C1760 = C1748 + C1749;
    const double C5993 = C5978 + C5979;
    const double C6735 = C6728 + C6729;
    const double C17466 = C17451 + C17452;
    const double C18192 = C18185 + C18186;
    const double C2354 = C2344 + C2345;
    const double C5491 = C5468 + C5469;
    const double C7461 = C7454 + C7455;
    const double C16964 = C16941 + C16942;
    const double C18902 = C18895 + C18896;
    const double C7603 = C7596 + C7597;
    const double C13120 = C13114 + C13115;
    const double C19044 = C19037 + C19038;
    const double C47477 = C47474 - C47464;
    const double C1291 =
        (3 * (C47306 + C47240 * C47415 + C47411 * ae) +
         C47240 * (2 * C47415 + C47240 * C47442 + C47431 * ae) +
         (2 * C47411 + C47240 * C47431) * ae) /
        C47208;
    const double C1434 =
        (C47306 + C47240 * C47415 + C47411 * ae + C47442 * C47520) / C47208;
    const double C1868 =
        (C47403 * (2 * C47415 + C47240 * C47442 + C47431 * ae)) / C47208;
    const double C7737 =
        (2 * C47403 * C47442 + C47403 * (C47442 + C47595 * C47520)) / C47208;
    const double C13396 = C13394 * C718;
    const double C15905 = C13394 * C2698;
    const double C43773 = C13394 * C1184;
    const double C44366 = C13394 * C306;
    const double C44808 = C44805 * C718;
    const double C46654 = C44805 * C2698;
    const double C47597 = C47593 - C47572;
    const double C47690 = C47689 - C47686;
    const double C44451 = C44449 * C114;
    const double C181 = C171 * C48184;
    const double C737 = C171 * C48470;
    const double C2713 = C171 * C2691;
    const double C1587 = C1574 + C1575;
    const double C5295 = C5270 + C5271;
    const double C6531 = C6526 + C6527;
    const double C16768 = C16743 + C16744;
    const double C17988 = C17983 + C17984;
    const double C1761 = C1750 + C1751;
    const double C5995 = C5982 + C5983;
    const double C6737 = C6732 + C6733;
    const double C17468 = C17455 + C17456;
    const double C18194 = C18189 + C18190;
    const double C2355 = C2346 + C2347;
    const double C5493 = C5472 + C5473;
    const double C7463 = C7458 + C7459;
    const double C16966 = C16945 + C16946;
    const double C18904 = C18899 + C18900;
    const double C1874 =
        2 * ((-(C47403 * C47313 * ce) / C47083) / C47208 -
             (ae * C47403 * C47312) / C47249 - (C47240 * C47537) / C47249) -
        (ae * C47403 * C47441) / C47249 - (C47403 * C47442 * ce) / C47249 +
        C47240 * ((-(ae * C47403 * C47429) / C47083) / C47208 -
                  C47537 / C47249 - (C47403 * C47432 * ce) / C47249 +
                  C47240 * ((-(C47403 * C47323 * ce) / C47083) / C47208 -
                            (ae * C47403 * C47321) / C47249 -
                            (C47240 * C47403 * C47271) / C47249));
    const double C1292 =
        (-3 * (C47240 * C47414 + C47305 + C47411 * ce)) / C47083 +
        C47240 * ((-2 * C47414) / C47083 - (C47240 * C47441) / C47083 -
                  (C47431 * ce) / C47083) -
        ((2 * C47411 + C47240 * C47431) * ce) / C47083;
    const double C1435 =
        -(C47441 * C47520 + C47240 * C47414 + C47305 + C47411 * ce) / C47083;
    const double C1869 =
        C47403 * ((-2 * C47414) / C47083 - (C47240 * C47441) / C47083 -
                  (C47431 * ce) / C47083);
    const double C7738 = (-2 * C47403 * C47441) / C47083 -
                         (C47403 * (C47594 * C47520 + C47441)) / C47083;
    const double C47586 = C47579 / C47208;
    const double C47292 = C47291 / C47208;
    const double C47675 = -C47674;
    const double C47701 = C47698 / C47249;
    const double C47802 = C47799 / C47208;
    const double C47388 = C47362 + C47386;
    const double C47533 = C47530 + C47531;
    const double C47511 = C47348 + C47508;
    const double C47656 = C47652 + C47639;
    const double C47774 = C47240 * C47767;
    const double C23690 =
        (3 * (C47442 + C47595 * C47520) +
         C47403 * (2 * C47403 * C47595 + C47403 * (C47595 + C47767 * C47520))) /
        C47208;
    const double C47387 = C47245 * C47385;
    const double C47527 = C47240 * C47385;
    const double C2465 =
        2 * C47403 * C47353 + C47403 * (C47353 + C47385 * C47520);
    const double C47510 = C47507 + C47346;
    const double C47655 = C47649 + C47636;
    const double C47771 = C47240 * C47764;
    const double C23691 =
        (-3 * (C47594 * C47520 + C47441)) / C47083 +
        C47403 * ((-2 * C47403 * C47594) / C47083 -
                  (C47403 * (C47764 * C47520 + C47594)) / C47083);
    const double C1302 =
        3 * ((-(ae * C47414) / C47083) / C47208 - C47253 / C47249 -
             (C47415 * ce) / C47249 + C47240 * C47443) +
        (((-2 * C47414) / C47083 - (C47240 * C47441) / C47083 -
          (C47431 * ce) / C47083) *
         ae) /
            C47208 -
        ((2 * C47415 + C47240 * C47442 + C47431 * ae) * ce) / C47249 +
        C47240 * (2 * C47443 - (ae * C47441) / C47249 - (C47442 * ce) / C47249 +
                  C47240 * ((-(ae * C47429) / C47083) / C47208 - C47267 -
                            (C47432 * ce) / C47249 +
                            C47240 * ((-(C47323 * ce) / C47083) / C47208 -
                                      (ae * C47321) / C47249 -
                                      (C47240 * C47271) / C47249)));
    const double C121 = 5 * (3 * C47322 + C47245 * C47347) +
                        C47245 * (4 * C47347 + C47245 * C47383);
    const double C317 = 3 * C47322 + C47245 * C47347 + C47383 * C47243;
    const double C530 = 3 * C47322 + C47245 * C47347 + C47383 * C47520;
    const double C719 = C47240 * (4 * C47347 + C47245 * C47383);
    const double C853 = C47403 * (4 * C47347 + C47245 * C47383);
    const double C1017 = C47403 * C47240 * C47383;
    const double C22943 = 5 * (3 * C47431 + C47240 * C47590) +
                          C47240 * (4 * C47590 + C47240 * C47773);
    const double C23057 = 3 * C47431 + C47240 * C47590 + C47773 * C47520;
    const double C23403 = C47403 * (4 * C47590 + C47240 * C47773);
    const double C47512 = C47509 - C47500;
    const double C47654 = C47648 - C47634;
    const double C47704 = C47703 - C47700;
    const double C47775 = C47240 * C47770;
    const double C47807 = C47805 - C47801;
    const double C47833 = C47831 - C47825;
    const double C160 = C113 * C132;
    const double C377 = C113 * C333;
    const double C5632 = C5060 * C333;
    const double C17105 = C16533 * C333;
    const double C740 = C113 * C335;
    const double C5086 = C5060 * C335;
    const double C16559 = C16533 * C335;
    const double C859 = C113 * C539;
    const double C582 = C113 * C547;
    const double C1050 = C113 * C1025;
    const double C5770 = C5060 * C1025;
    const double C17243 = C16533 * C1025;
    const double C48491 = C48455 / C47083;
    const double C48526 = C48495 / C47100;
    const double C48527 = C48497 + C48463;
    const double C715 = C48463 - C48167 / C47087;
    const double C48494 = C48459 / C47083;
    const double C48513 = C48479 / C47083;
    const double C48536 = C48516 / C47100;
    const double C48537 = C48517 + C48483;
    const double C2461 = C48483 - C48290 / C47087;
    const double C48515 = C48480 / C47083;
    const double C47140 = C47136 / C47083;
    const double C2712 = C170 * C2697;
    const double C2710 = C169 * C2697;
    const double C2704 = C166 * C2697;
    const double C2700 = C164 * C2697;
    const double C3006 = C594 * C2697;
    const double C3002 = C592 * C2697;
    const double C3000 = C588 * C2697;
    const double C2996 = C586 * C2697;
    const double C3300 = C590 * C2697;
    const double C13872 = C2476 * C2697;
    const double C13868 = C11101 * C2697;
    const double C13860 = C11098 * C2697;
    const double C15903 = C12900 * C2697;
    const double C46652 = C12905 * C2697;
    const double C47151 = C47145 / C47083;
    const double C48548 = C48507 + C48543;
    const double C1552 = C48533 - (C48250 * C48239) / C47083;
    const double C2837 = C382 * C48534;
    const double C15770 = C11981 * C48534;
    const double C1275 = C48534 / C47100 - C48248 / C48498;
    const double C1571 = C382 * C1553;
    const double C12479 = C11981 * C1553;
    const double C48544 = C48509 + C48533;
    const double C1206 = C1205 - C1195;
    const double C185 = C178 + C179;
    const double C743 = C733 + C734;
    const double C11089 = C599 + C598;
    const double C11088 = C598 + C599;
    const double C11568 = C1036 + C1037;
    const double C11567 = C1037 + C1036;
    const double C12335 = C1745 + C1746;
    const double C12334 = C1746 + C1745;
    const double C14768 = C3712 + C3713;
    const double C14767 = C3713 + C3712;
    const double C43147 = C11105 + C11104;
    const double C43772 = C11965 + C11964;
    const double C44365 = C12788 + C12787;
    const double C44598 = C13108 + C13107;
    const double C12910 = C12904 * C48184;
    const double C44799 = C12904 * C48470;
    const double C46653 = C12904 * C2691;
    const double C13397 = C13395 * C48247;
    const double C15906 = C13395 * C48247;
    const double C43776 = C13395 * C1178;
    const double C44369 = C13395 * C48529;
    const double C47064 = C13395 * C48250;
    const double C405 = C404 - C397;
    const double C750 = C746 - C731;
    const double C610 = C601 + C600;
    const double C11090 = C600 + C601;
    const double C1055 = C1042 + C1043;
    const double C11569 = C1043 + C1042;
    const double C11092 = C605 + C604;
    const double C11091 = C604 + C605;
    const double C13111 = C2342 + C2343;
    const double C13110 = C2343 + C2342;
    const double C44442 = C12907 + C12906;
    const double C44797 = C13389 + C13388;
    const double C47276 = C47275 - C47267;
    const double C12902 = C12892 + C12893;
    const double C7605 = C7600 + C7601;
    const double C13121 = C13116 + C13117;
    const double C19046 = C19041 + C19042;
    const double C2481 = C2477 * C48184;
    const double C13113 = C2477 * C48470;
    const double C13873 = C2477 * C2691;
    const double C47671 = C47670 - C47267;
    const double C173 = C162 + C163;
    const double C390 = C375 + C376;
    const double C5636 = C5628 + C5629;
    const double C17109 = C17101 + C17102;
    const double C744 = C738 + C739;
    const double C5108 = C5090 + C5091;
    const double C16581 = C16563 + C16564;
    const double C865 = C861 + C862;
    const double C597 = C584 + C585;
    const double C1057 = C1048 + C1049;
    const double C5780 = C5774 + C5775;
    const double C17253 = C17247 + C17248;
    const double C1588 = C1582 + C1583;
    const double C5300 = C5280 + C5281;
    const double C16773 = C16753 + C16754;
    const double C1762 = C1756 + C1757;
    const double C5996 = C5984 + C5985;
    const double C17469 = C17457 + C17458;
    const double C2356 = C2350 + C2351;
    const double C5496 = C5478 + C5479;
    const double C16969 = C16951 + C16952;
    const double C1295 =
        (3 * (C47315 + C47240 * C47452 + C47448 * ae) +
         C47240 * (2 * C47452 + C47240 * C47479 + C47468 * ae) +
         (2 * C47448 + C47240 * C47468) * ae) /
        C47208;
    const double C1438 =
        (C47315 + C47240 * C47452 + C47448 * ae + C47479 * C47520) / C47208;
    const double C1870 =
        (C47403 * (2 * C47452 + C47240 * C47479 + C47468 * ae)) / C47208;
    const double C1875 =
        2 * ((-(C47403 * C47334 * ce) / C47083) / C47208 -
             (ae * C47403 * C47330) / C47249 - (C47240 * C47539) / C47249) -
        (ae * C47403 * C47478) / C47249 - (C47403 * C47479 * ce) / C47249 +
        C47240 * ((-(ae * C47403 * C47466) / C47083) / C47208 -
                  C47539 / C47249 - (C47403 * C47469 * ce) / C47249 +
                  C47240 * ((-(C47403 * C47363 * ce) / C47083) / C47208 -
                            (ae * C47403 * C47357) / C47249 -
                            (C47240 * C47403 * C47245 * C47288) / C47249));
    const double C1296 =
        (-3 * (C47240 * C47451 + C47314 + C47448 * ce)) / C47083 +
        C47240 * ((-2 * C47451) / C47083 - (C47240 * C47478) / C47083 -
                  (C47468 * ce) / C47083) -
        ((2 * C47448 + C47240 * C47468) * ce) / C47083;
    const double C1439 =
        -(C47478 * C47520 + C47240 * C47451 + C47314 + C47448 * ce) / C47083;
    const double C1871 =
        C47403 * ((-2 * C47451) / C47083 - (C47240 * C47478) / C47083 -
                  (C47468 * ce) / C47083);
    const double C47640 = C47632 / C47208;
    const double C47602 = C47565 + C47599;
    const double C47734 = C47715 / C47249;
    const double C47601 = C47598 / C47083;
    const double C47740 = C47721 / C47083;
    const double C47733 = C47714 / C47249;
    const double C47762 = C47756 - C47282;
    const double C47828 = C47826 / C47208;
    const double C1590 = C1586 * C1560;
    const double C2838 = C1586 * C2830;
    const double C1764 = C1760 * C1185;
    const double C3457 = C1760 * C47169;
    const double C3715 = C1760 * C307;
    const double C2358 = C2354 * C718;
    const double C3004 = C2354 * C2698;
    const double C11972 = C2354 * C1184;
    const double C12792 = C2354 * C306;
    const double C13124 = C13120 * C718;
    const double C13874 = C13120 * C2698;
    const double C47480 = C47477 - C47465;
    const double C11969 = C48388 * C1434;
    const double C27529 = C16528 * C1434;
    const double C27521 = C48520 * C1434;
    const double C38551 = C5055 * C1434;
    const double C38543 = C48520 * C1434;
    const double C12481 = C48388 * C1868;
    const double C27513 = C48520 * C1868;
    const double C28003 = C16528 * C1868;
    const double C38535 = C48520 * C1868;
    const double C39025 = C5055 * C1868;
    const double C28869 = C48520 * C7737;
    const double C39887 = C48520 * C7737;
    const double C43778 = C48388 * C7737;
    const double C47600 = C47240 * C47597;
    const double C47713 = 2 * C47597;
    const double C47691 = C47690 - C47687;
    const double C186 = C180 + C181;
    const double C1591 = C1587 * C48512;
    const double C2839 = C1587 * C48512;
    const double C1765 = C1761 * C48502;
    const double C3458 = C1761 * C3121;
    const double C3716 = C1761 * C48502;
    const double C12131 = C1761 * C1553;
    const double C13663 = C1761 * C48534;
    const double C2359 = C2355 * C48247;
    const double C3005 = C2355 * C48247;
    const double C11975 = C2355 * C1178;
    const double C12795 = C2355 * C48529;
    const double C14432 = C2355 * C48250;
    const double C12483 = C48388 * C1874;
    const double C27517 = C48520 * C1874;
    const double C28007 = C16528 * C1874;
    const double C38539 = C48520 * C1874;
    const double C39029 = C5055 * C1874;
    const double C11970 = C113 * C1435;
    const double C27532 = C16532 * C1435;
    const double C27524 = C16533 * C1435;
    const double C38554 = C5059 * C1435;
    const double C38546 = C5060 * C1435;
    const double C12482 = C113 * C1869;
    const double C27516 = C16533 * C1869;
    const double C28006 = C16532 * C1869;
    const double C38538 = C5060 * C1869;
    const double C39028 = C5059 * C1869;
    const double C28872 = C16533 * C7738;
    const double C39890 = C5060 * C7738;
    const double C43779 = C113 * C7738;
    const double C47592 = C47586 - C47267;
    const double C47293 = C47292 - C47282;
    const double C47676 = C47675 / C47208;
    const double C47804 = C47802 - C47282;
    const double C134 = (5 * (3 * C47327 + C47245 * C47352) +
                         C47245 * (4 * C47352 + C47245 * C47388)) /
                        C47208;
    const double C336 =
        (3 * C47327 + C47245 * C47352 +
         C47240 * (C47240 * C47388 + C47383 * ae) + C47240 * C47383 * ae) /
        C47208;
    const double C549 =
        (3 * C47327 + C47245 * C47352 + C47388 * C47520) / C47208;
    const double C720 = (C47240 * (4 * C47352 + C47245 * C47388) +
                         (4 * C47347 + C47245 * C47383) * ae) /
                        C47208;
    const double C854 = (C47403 * (4 * C47352 + C47245 * C47388)) / C47208;
    const double C1026 = (C47403 * (C47240 * C47388 + C47383 * ae)) / C47208;
    const double C1562 = (2 * (C47240 * C47352 + C47347 * ae) +
                          C47240 * (C47352 + C47240 * C47533 + C47529 * ae) +
                          (C47347 + C47377 * C47243) * ae) /
                         C47208;
    const double C1740 =
        (C47403 * (C47352 + C47240 * C47533 + C47529 * ae)) / C47208;
    const double C2338 =
        (C47240 * C47352 + C47347 * ae + C47533 * C47520) / C47208;
    const double C47514 = C47511 + C47505;
    const double C47659 = C47240 * C47656;
    const double C7739 =
        (2 * C47403 * C47479 + C47403 * (C47479 + C47656 * C47520)) / C47208;
    const double C47777 = C47730 + C47774;
    const double C47389 = C47365 + C47387;
    const double C47534 = C47527 - C47532;
    const double C47513 = C47510 + C47502;
    const double C47658 = C47240 * C47655;
    const double C7740 = (-2 * C47403 * C47478) / C47083 -
                         (C47403 * (C47655 * C47520 + C47478)) / C47083;
    const double C47776 = C47771 / C47083;
    const double C47657 = C47240 * C47654;
    const double C47705 = C47704 - C47701;
    const double C47834 = C47240 * C47833;
    const double C48547 = C48491 + C48539;
    const double C714 = C48526 - (C48169 * C48152) / C47083;
    const double C110 = C48527 / C47100 - C48167 / C48498;
    const double C48540 = C48494 + C48526;
    const double C48549 = C48513 + C48545;
    const double C2460 = C48536 - (C48292 * C48281) / C47083;
    const double C2165 = C48537 / C47100 - C48290 / C48498;
    const double C48546 = C48515 + C48536;
    const double C47144 = C47140 - C47121;
    const double C2717 = C2709 + C2710;
    const double C2716 = C2704 + C2705;
    const double C13871 = C3002 + C3003;
    const double C13870 = C3003 + C3002;
    const double C3299 = C2999 + C3000;
    const double C14224 = C3000 + C2999;
    const double C13865 = C2995 + C2996;
    const double C13864 = C2996 + C2995;
    const double C45152 = C13868 + C13867;
    const double C46651 = C15904 + C15903;
    const double C2841 = C167 * C48548;
    const double C2833 = C165 * C48548;
    const double C13659 = C587 * C48548;
    const double C15766 = C11099 * C48548;
    const double C46546 = C11100 * C48548;
    const double C1272 =
        (C48541 + 2 * C48243) / C47100 - (C48548 * C48239) / C47083;
    const double C1579 = C385 * C1552;
    const double C1569 = C380 * C1552;
    const double C12129 = C1053 * C1552;
    const double C12477 = C11571 * C1552;
    const double C44134 = C11983 * C1552;
    const double C2843 = C385 * C48544;
    const double C2835 = C380 * C48544;
    const double C13661 = C1053 * C48544;
    const double C15768 = C11571 * C48544;
    const double C46548 = C11983 * C48544;
    const double C1273 =
        (C48529 + 2 * C48250 + C48548) / C47100 - (C48544 * C48239) / C47083;
    const double C1274 = (C48502 + C48247 / C47083 + C48544) / C47100 -
                         (C48534 * C48239) / C47083;
    const double C1207 = C1206 - C1196;
    const double C188 = C185 * C48405;
    const double C747 = C732 - C743;
    const double C11573 = C1059 - C11568;
    const double C11572 = C11567 - C1059;
    const double C12337 = C1744 - C12335;
    const double C12336 = C12334 - C1744;
    const double C14770 = C3711 - C14768;
    const double C14769 = C14767 - C3711;
    const double C43781 = C43772 - C11990;
    const double C44372 = C44365 - C12786;
    const double C44599 = C44598 - C13106;
    const double C44443 = C12911 + C12910;
    const double C406 = C405 + C398;
    const double C752 = C750 * C48405;
    const double C612 = C610 * C48405;
    const double C1065 = C1061 - C1055;
    const double C11574 = C11569 - C1061;
    const double C44804 = C13396 - C44797;
    const double C141 =
        4 * ((-2 * C47245 * C47262) / C47249 + C47245 * C47276) +
        C47245 *
            (3 * C47276 +
             C47245 * ((-2 * C47245 * C47271) / C47249 +
                       C47245 * ((-((C47265 * C47266 +
                                     C47243 * bs[7] * std::pow(C47239, 7)) *
                                    C47241 * C47258) /
                                  C47083) /
                                     C47208 -
                                 C47271 / C47249)));
    const double C343 = (-(C47262 * C47258) / C47083) / C47208 -
                        C47253 / C47249 -
                        (ae * (C47240 * C47326 + C47322 * ce)) / C47249 -
                        ((C47240 * C47327 + C47322 * ae) * ce) / C47249 +
                        C47240 * ((-(C47327 * ce) / C47083) / C47208 -
                                  (ae * C47326) / C47249 + C47240 * C47276);
    const double C344 =
        (((-2 * C47314) / C47083 - (C47245 * C47326) / C47083) * ae) / C47208 -
        ((2 * C47315 + C47245 * C47327) * ce) / C47249 +
        C47240 * ((-2 * C47245 * C47262) / C47249 + C47245 * C47276);
    const double C553 =
        (zP - zQ) * ((-2 * C47245 * C47262) / C47249 + C47245 * C47276);
    const double C558 = (-(C47262 * C47258) / C47083) / C47208 -
                        C47253 / C47249 + C47276 * std::pow(zP - zQ, 2);
    const double C1030 = (-(C47403 * C47327 * ce) / C47083) / C47208 -
                         (ae * C47403 * C47326) / C47249 +
                         C47240 * C47403 * C47276;
    const double C12908 = C12902 * C48184;
    const double C13125 = C13121 * C48247;
    const double C13875 = C13121 * C48247;
    const double C13257 = C2481 + C2480;
    const double C13256 = C2480 + C2481;
    const double C6387 =
        2 * ((-((C47313 + C47323 * C47520) * ce) / C47083) / C47208 -
             (ae * (C47321 * C47520 + C47312)) / C47249 + C47240 * C47671) -
        (ae * (C47594 * C47520 + C47441)) / C47249 -
        ((C47442 + C47595 * C47520) * ce) / C47249 +
        C47240 *
            (C47671 - (ae * (C47574 * C47520 + C47429)) / C47249 -
             ((C47432 + C47577 * C47520) * ce) / C47249 +
             C47240 *
                 ((-((C47323 + C47341 * C47520) * ce) / C47083) / C47208 -
                  (ae * (C47337 * C47520 + C47321)) / C47249 +
                  C47240 * ((-(C47288 * C47520) / C47083) / C47208 - C47282)));
    const double C7255 =
        (((-3 * (C47321 * C47520 + C47312)) / C47083 +
          C47403 * ((-2 * C47680) / C47083 -
                    (C47403 * (C47337 * C47520 + C47321)) / C47083)) *
         ae) /
            C47208 -
        ((3 * (C47313 + C47323 * C47520) +
          C47403 * (2 * C47679 + C47403 * (C47323 + C47341 * C47520))) *
         ce) /
            C47249 +
        C47240 * (3 * C47671 +
                  C47403 * ((-2 * C47681) / C47249 +
                            C47403 * ((-(C47288 * C47520) / C47083) / C47208 -
                                      C47282)));
    const double C7741 =
        (-2 * C47537) / C47249 + C47403 * C47671 +
        (((-2 * C47403 * C47429) / C47083 -
          (C47403 * (C47574 * C47520 + C47429)) / C47083) *
         ae) /
            C47208 -
        ((2 * C47403 * C47432 + C47403 * (C47432 + C47577 * C47520)) * ce) /
            C47249 +
        C47240 * ((((-2 * C47680) / C47083 -
                    (C47403 * (C47337 * C47520 + C47321)) / C47083) *
                   ae) /
                      C47208 -
                  ((2 * C47679 + C47403 * (C47323 + C47341 * C47520)) * ce) /
                      C47249 +
                  C47240 * ((-2 * C47681) / C47249 +
                            C47403 * ((-(C47288 * C47520) / C47083) / C47208 -
                                      C47282)));
    const double C12885 =
        4 * ((-2 * C47537) / C47249 + C47403 * C47671) +
        C47403 * (3 * C47671 +
                  C47403 * ((-2 * C47681) / C47249 +
                            C47403 * ((-(C47288 * C47520) / C47083) / C47208 -
                                      C47282)));
    const double C183 = C173 * C114;
    const double C402 = C390 * C307;
    const double C1203 = C390 * C1185;
    const double C3145 = C390 * C47169;
    const double C748 = C744 * C718;
    const double C2714 = C744 * C2698;
    const double C867 = C865 * C114;
    const double C609 = C597 * C114;
    const double C1063 = C1057 * C718;
    const double C3302 = C1057 * C2698;
    const double C1592 = C1588 * C1560;
    const double C2846 = C1588 * C2830;
    const double C1766 = C1762 * C1185;
    const double C3463 = C1762 * C47169;
    const double C3721 = C1762 * C307;
    const double C2360 = C2356 * C718;
    const double C3008 = C2356 * C2698;
    const double C6521 = C48520 * C1295;
    const double C17978 = C48520 * C1295;
    const double C7453 = C48520 * C1438;
    const double C11977 = C48388 * C1438;
    const double C18894 = C48520 * C1438;
    const double C6727 = C48520 * C1870;
    const double C12133 = C48388 * C1870;
    const double C18184 = C48520 * C1870;
    const double C6731 = C48520 * C1875;
    const double C12135 = C48388 * C1875;
    const double C18188 = C48520 * C1875;
    const double C6524 = C5060 * C1296;
    const double C17981 = C16533 * C1296;
    const double C7456 = C5060 * C1439;
    const double C11978 = C113 * C1439;
    const double C18897 = C16533 * C1439;
    const double C6730 = C5060 * C1871;
    const double C12134 = C113 * C1871;
    const double C18187 = C16533 * C1871;
    const double C47647 = C47640 - C47609;
    const double C47605 = C47602 + C47585;
    const double C47604 = C47573 - C47601;
    const double C47769 = C47762 - C47736;
    const double C47830 = C47828 - C47811;
    const double C13119 = C13111 - C2358;
    const double C13118 = C2358 - C13110;
    const double C1304 =
        3 * ((-(ae * C47451) / C47083) / C47208 - C47445 / C47249 -
             (C47452 * ce) / C47249 + C47240 * C47480) +
        (((-2 * C47451) / C47083 - (C47240 * C47478) / C47083 -
          (C47468 * ce) / C47083) *
         ae) /
            C47208 -
        ((2 * C47452 + C47240 * C47479 + C47468 * ae) * ce) / C47249 +
        C47240 * (2 * C47480 - (ae * C47478) / C47249 - (C47479 * ce) / C47249 +
                  C47240 * ((-(ae * C47466) / C47083) / C47208 -
                            C47278 / C47249 - (C47469 * ce) / C47249 +
                            C47240 * ((-(C47363 * ce) / C47083) / C47208 -
                                      (ae * C47357) / C47249 -
                                      (C47240 * C47245 * C47288) / C47249)));
    const double C11984 = C11968 + C11969;
    const double C27543 = C27528 + C27529;
    const double C27539 = C27520 + C27521;
    const double C38565 = C38550 + C38551;
    const double C38561 = C38542 + C38543;
    const double C12484 = C12480 + C12481;
    const double C27535 = C27512 + C27513;
    const double C28009 = C28002 + C28003;
    const double C38557 = C38534 + C38535;
    const double C39031 = C39024 + C39025;
    const double C28876 = C28868 + C28869;
    const double C39894 = C39886 + C39887;
    const double C43782 = C43777 + C43778;
    const double C47747 = C47713 - C47733;
    const double C189 = C186 * C48405;
    const double C11985 = C11970 + C11971;
    const double C27545 = C27532 + C27533;
    const double C27541 = C27524 + C27525;
    const double C38567 = C38554 + C38555;
    const double C38563 = C38546 + C38547;
    const double C12485 = C12482 + C12483;
    const double C27537 = C27516 + C27517;
    const double C28011 = C28006 + C28007;
    const double C38559 = C38538 + C38539;
    const double C39033 = C39028 + C39029;
    const double C47596 = C47592 - C47569;
    const double C47294 = C47245 * C47293;
    const double C47492 = C47240 * C47293;
    const double C47541 = C47403 * C47293;
    const double C1305 =
        2 * ((-(C47327 * ce) / C47083) / C47208 - (ae * C47326) / C47249 +
             C47240 * C47276) -
        (ae * (C47240 * C47487 + C47326 + C47484 * ce)) / C47249 -
        ((C47327 + C47240 * C47488 + C47484 * ae) * ce) / C47249 +
        C47240 * (C47276 - (ae * C47487) / C47249 - (C47488 * ce) / C47249 +
                  C47240 * ((-(C47348 * ce) / C47083) / C47208 -
                            (ae * C47346) / C47249 + C47240 * C47293));
    const double C1446 =
        C47403 * C47276 - (ae * C47403 * C47487) / C47249 -
        (C47403 * C47488 * ce) / C47249 +
        C47240 * ((-(C47403 * C47348 * ce) / C47083) / C47208 -
                  (ae * C47403 * C47346) / C47249 + C47240 * C47403 * C47293);
    const double C1451 =
        (-((C47327 + C47348 * C47520) * ce) / C47083) / C47208 -
        (ae * (C47346 * C47520 + C47326)) / C47249 +
        C47240 * (C47276 + C47293 * C47520);
    const double C1452 =
        C47276 + C47293 * C47520 - (ae * (C47501 * C47520 + C47487)) / C47249 -
        ((C47488 + C47504 * C47520) * ce) / C47249 +
        C47240 *
            ((-((C47348 + C47378 * C47520) * ce) / C47083) / C47208 -
             (ae * (C47376 * C47520 + C47346)) / C47249 +
             C47240 *
                 (C47293 +
                  ((-((C47280 * C47281 + C47243 * bs[8] * std::pow(C47236, 8)) *
                      C47241 * C47258) /
                    C47083) /
                       C47208 -
                   C47288 / C47249) *
                      C47520));
    const double C2185 =
        2 * C47403 * C47276 + C47403 * (C47276 + C47293 * C47520);
    const double C47677 = C47676 - C47609;
    const double C47806 = C47240 * C47804;
    const double C47839 = C47403 * C47804;
    const double C23692 =
        3 * C47671 + C47403 * ((-2 * C47681) / C47249 + C47403 * C47804) +
        (((-3 * (C47574 * C47520 + C47429)) / C47083 +
          C47403 * ((-2 * C47810) / C47083 -
                    (C47403 * (C47742 * C47520 + C47574)) / C47083)) *
         ae) /
            C47208 -
        ((3 * (C47432 + C47577 * C47520) +
          C47403 * (2 * C47812 + C47403 * (C47577 + C47745 * C47520))) *
         ce) /
            C47249 +
        C47240 *
            ((((-3 * C47795) / C47083 +
               C47403 * ((-2 * C47814) / C47083 -
                         (C47403 * (C47367 * C47520 + C47337)) / C47083)) *
              ae) /
                 C47208 -
             ((3 * C47794 +
               C47403 * (2 * C47813 + C47403 * (C47341 + C47371 * C47520))) *
              ce) /
                 C47249 +
             C47240 *
                 (3 * C47804 +
                  C47403 *
                      ((-2 * C47815) / C47249 +
                       C47403 * ((-((C47280 * C47281 +
                                     C47243 * bs[8] * std::pow(C47236, 8)) *
                                    C47241 * C47520) /
                                  C47083) /
                                     C47208 -
                                 C47288 / C47249))));
    const double C1299 =
        (3 * (C47327 + C47240 * C47488 + C47484 * ae) +
         C47240 * (2 * C47488 + C47240 * C47514 + C47503 * ae) +
         (2 * C47484 + C47240 * C47503) * ae) /
        C47208;
    const double C1442 =
        (C47327 + C47240 * C47488 + C47484 * ae + C47514 * C47520) / C47208;
    const double C1872 =
        (C47403 * (2 * C47488 + C47240 * C47514 + C47503 * ae)) / C47208;
    const double C47662 = C47618 + C47659;
    const double C47780 = C47777 + C47754;
    const double C1032 =
        (C47403 * C47389 * ae) / C47208 - (C47403 * C47388 * ce) / C47249 +
        C47240 * C47403 *
            (3 * C47293 +
             C47245 * ((-2 * C47245 * C47288) / C47249 +
                       C47245 * ((-((C47280 * C47281 +
                                     C47243 * bs[8] * std::pow(C47236, 8)) *
                                    C47241 * C47258) /
                                  C47083) /
                                     C47208 -
                                 C47288 / C47249)));
    const double C135 = 5 * ((-3 * C47326) / C47083 + C47245 * C47353) +
                        C47245 * (4 * C47353 + C47245 * C47389);
    const double C337 = (-3 * C47326) / C47083 + C47245 * C47353 +
                        C47240 * (C47240 * C47389 - (C47383 * ce) / C47083) -
                        (C47240 * C47383 * ce) / C47083;
    const double C550 =
        (-3 * C47326) / C47083 + C47245 * C47353 + C47389 * C47520;
    const double C721 = C47240 * (4 * C47353 + C47245 * C47389) -
                        ((4 * C47347 + C47245 * C47383) * ce) / C47083;
    const double C855 = C47403 * (4 * C47353 + C47245 * C47389);
    const double C1027 = C47403 * (C47240 * C47389 - (C47383 * ce) / C47083);
    const double C1563 =
        2 * (C47240 * C47353 - (C47347 * ce) / C47083) +
        C47240 * (C47353 + C47240 * C47534 - (C47529 * ce) / C47083) -
        ((C47347 + C47377 * C47243) * ce) / C47083;
    const double C1741 =
        C47403 * (C47353 + C47240 * C47534 - (C47529 * ce) / C47083);
    const double C2339 =
        C47240 * C47353 - (C47347 * ce) / C47083 + C47534 * C47520;
    const double C1300 =
        (-3 * (C47240 * C47487 + C47326 + C47484 * ce)) / C47083 +
        C47240 * ((-2 * C47487) / C47083 - (C47240 * C47513) / C47083 -
                  (C47503 * ce) / C47083) -
        ((2 * C47484 + C47240 * C47503) * ce) / C47083;
    const double C1443 =
        -(C47513 * C47520 + C47240 * C47487 + C47326 + C47484 * ce) / C47083;
    const double C1873 =
        C47403 * ((-2 * C47487) / C47083 - (C47240 * C47513) / C47083 -
                  (C47503 * ce) / C47083);
    const double C47661 = C47658 / C47083;
    const double C47779 = C47741 - C47776;
    const double C107 =
        (C48538 + 2 * C48161) / C47100 - (C48547 * C48152) / C47083;
    const double C108 =
        (C48525 + 2 * C48169 + C48547) / C47100 - (C48540 * C48152) / C47083;
    const double C109 = (C48496 + C48166 / C47083 + C48540) / C47100 -
                        (C48527 * C48152) / C47083;
    const double C2162 =
        (C48542 + 2 * C48285) / C47100 - (C48549 * C48281) / C47083;
    const double C2163 =
        (C48531 + 2 * C48292 + C48549) / C47100 - (C48546 * C48281) / C47083;
    const double C2164 = (C48505 + C48289 / C47083 + C48546) / C47100 -
                         (C48537 * C48281) / C47083;
    const double C47150 = C47144 / C47100;
    const double C47149 = C47081 * C47144;
    const double C2719 = C2708 - C2717;
    const double C2718 = C2716 - C2706;
    const double C13879 = C13871 - C3004;
    const double C13878 = C3004 - C13870;
    const double C3304 = C2998 - C3299;
    const double C14225 = C14224 - C2998;
    const double C13877 = C2994 - C13865;
    const double C13876 = C13864 - C2994;
    const double C45153 = C45152 - C13866;
    const double C46656 = C15905 - C46651;
    const double C1208 = C1207 + C1197;
    const double C11578 = C11573 + C1060;
    const double C11577 = C11572 - C1060;
    const double C12339 = C12337 + C1747;
    const double C12338 = C12336 - C1747;
    const double C14772 = C14770 + C3714;
    const double C14771 = C14769 - C3714;
    const double C43784 = C43781 - C11991;
    const double C44373 = C44372 - C12789;
    const double C44600 = C44599 - C13109;
    const double C44807 = C44804 + C13397;
    const double C161 = C48388 * C141;
    const double C368 = C48388 * C343;
    const double C5287 = C5055 * C343;
    const double C5279 = C48520 * C343;
    const double C16760 = C16528 * C343;
    const double C16752 = C48520 * C343;
    const double C374 = C48388 * C344;
    const double C5085 = C48520 * C344;
    const double C5635 = C5055 * C344;
    const double C16558 = C48520 * C344;
    const double C17108 = C16528 * C344;
    const double C573 = C48388 * C553;
    const double C5773 = C5055 * C553;
    const double C17246 = C16528 * C553;
    const double C581 = C48388 * C558;
    const double C5477 = C5055 * C558;
    const double C16950 = C16528 * C558;
    const double C1045 = C48388 * C1030;
    const double C5465 = C48520 * C1030;
    const double C5991 = C5055 * C1030;
    const double C16938 = C48520 * C1030;
    const double C17464 = C16528 * C1030;
    const double C27531 = C48520 * C6387;
    const double C38553 = C48520 * C6387;
    const double C44140 = C48388 * C6387;
    const double C28399 = C48520 * C7255;
    const double C39417 = C48520 * C7255;
    const double C44803 = C48388 * C7255;
    const double C28873 = C48520 * C7741;
    const double C39891 = C48520 * C7741;
    const double C43780 = C48388 * C7741;
    const double C44445 = C48388 * C12885;
    const double C6528 = C6520 + C6521;
    const double C17985 = C17977 + C17978;
    const double C7460 = C7452 + C7453;
    const double C11986 = C11976 + C11977;
    const double C18901 = C18893 + C18894;
    const double C6734 = C6726 + C6727;
    const double C12136 = C12132 + C12133;
    const double C18191 = C18183 + C18184;
    const double C7462 = C7456 + C7457;
    const double C11987 = C11978 + C11979;
    const double C18903 = C18897 + C18898;
    const double C6736 = C6730 + C6731;
    const double C12137 = C12134 + C12135;
    const double C18193 = C18187 + C18188;
    const double C47653 = C47647 - C47621;
    const double C6229 =
        (4 * (2 * C47415 + C47240 * C47442 + C47431 * ae) +
         C47240 * (3 * C47442 + C47240 * C47605 + C47590 * ae) +
         (3 * C47431 + C47240 * C47590) * ae) /
        C47208;
    const double C6383 =
        (2 * C47415 + C47240 * C47442 + C47431 * ae + C47605 * C47520) / C47208;
    const double C6869 =
        (C47403 * (3 * C47442 + C47240 * C47605 + C47590 * ae)) / C47208;
    const double C47606 = C47604 - C47589;
    const double C47778 = C47769 + C47775;
    const double C47832 = C47830 - C47822;
    const double C13123 = C13119 - C2359;
    const double C13122 = C13118 + C2359;
    const double C6525 = C48520 * C1304;
    const double C17982 = C48520 * C1304;
    const double C11992 = C11984 * C1185;
    const double C12790 = C11984 * C307;
    const double C16445 = C11984 * C47169;
    const double C12486 = C12484 * C1560;
    const double C15771 = C12484 * C2830;
    const double C43785 = C43782 * C1185;
    const double C44370 = C43782 * C307;
    const double C47065 = C43782 * C47169;
    const double C47755 = C47747 - C47734;
    const double C11993 = C11985 * C48502;
    const double C12791 = C11985 * C48502;
    const double C16446 = C11985 * C3121;
    const double C44136 = C11985 * C1553;
    const double C46550 = C11985 * C48534;
    const double C12487 = C12485 * C48512;
    const double C15772 = C12485 * C48512;
    const double C47603 = C47596 + C47600;
    const double C47295 = C47285 + C47294;
    const double C47515 = C47512 + C47492;
    const double C1876 =
        2 * ((-(C47403 * C47348 * ce) / C47083) / C47208 -
             (ae * C47403 * C47346) / C47249 + C47240 * C47541) -
        (ae * C47403 * C47513) / C47249 - (C47403 * C47514 * ce) / C47249 +
        C47240 * (C47541 - (ae * C47403 * C47501) / C47249 -
                  (C47403 * C47504 * ce) / C47249 +
                  C47240 * ((-(C47403 * C47378 * ce) / C47083) / C47208 -
                            (ae * C47403 * C47376) / C47249 +
                            C47240 * C47403 *
                                ((-((C47280 * C47281 +
                                     C47243 * bs[8] * std::pow(C47236, 8)) *
                                    C47241 * C47258) /
                                  C47083) /
                                     C47208 -
                                 C47288 / C47249)));
    const double C2190 =
        3 * (C47276 + C47293 * C47520) +
        C47403 *
            (2 * C47541 +
             C47403 *
                 (C47293 +
                  ((-((C47280 * C47281 + C47243 * bs[8] * std::pow(C47236, 8)) *
                      C47241 * C47258) /
                    C47083) /
                       C47208 -
                   C47288 / C47249) *
                      C47520));
    const double C2592 =
        (((-2 * C47403 * C47346) / C47083 -
          (C47403 * (C47376 * C47520 + C47346)) / C47083) *
         ae) /
            C47208 -
        ((2 * C47403 * C47348 + C47403 * (C47348 + C47378 * C47520)) * ce) /
            C47249 +
        C47240 *
            (2 * C47541 +
             C47403 *
                 (C47293 +
                  ((-((C47280 * C47281 + C47243 * bs[8] * std::pow(C47236, 8)) *
                      C47241 * C47258) /
                    C47083) /
                       C47208 -
                   C47288 / C47249) *
                      C47520));
    const double C1585 = C48388 * C1305;
    const double C5285 = C48520 * C1305;
    const double C16758 = C48520 * C1305;
    const double C1759 = C48388 * C1446;
    const double C5989 = C48520 * C1446;
    const double C17462 = C48520 * C1446;
    const double C2353 = C48388 * C1451;
    const double C5475 = C48520 * C1451;
    const double C16948 = C48520 * C1451;
    const double C2475 = C48388 * C2185;
    const double C6388 =
        2 * ((-((C47334 + C47363 * C47520) * ce) / C47083) / C47208 -
             (ae * (C47357 * C47520 + C47330)) / C47249 + C47240 * C47677) -
        (ae * (C47655 * C47520 + C47478)) / C47249 -
        ((C47479 + C47656 * C47520) * ce) / C47249 +
        C47240 *
            (C47677 - (ae * (C47635 * C47520 + C47466)) / C47249 -
             ((C47469 + C47638 * C47520) * ce) / C47249 +
             C47240 * ((-((C47363 + C47619 * C47520) * ce) / C47083) / C47208 -
                       (ae * (C47615 * C47520 + C47357)) / C47249 +
                       C47240 * ((-(C47245 *
                                    (C47280 * C47281 +
                                     C47243 * bs[8] * std::pow(C47236, 8)) *
                                    C47241 * C47520) /
                                  C47083) /
                                     C47208 -
                                 C47613 / C47249)));
    const double C7256 =
        (((-3 * (C47357 * C47520 + C47330)) / C47083 +
          C47403 * ((-2 * C47694) / C47083 -
                    (C47403 * (C47615 * C47520 + C47357)) / C47083)) *
         ae) /
            C47208 -
        ((3 * (C47334 + C47363 * C47520) +
          C47403 * (2 * C47693 + C47403 * (C47363 + C47619 * C47520))) *
         ce) /
            C47249 +
        C47240 *
            (3 * C47677 +
             C47403 * ((-2 * C47695) / C47249 +
                       C47403 * ((-(C47245 *
                                    (C47280 * C47281 +
                                     C47243 * bs[8] * std::pow(C47236, 8)) *
                                    C47241 * C47520) /
                                  C47083) /
                                     C47208 -
                                 C47613 / C47249)));
    const double C7742 =
        (-2 * C47539) / C47249 + C47403 * C47677 +
        (((-2 * C47403 * C47466) / C47083 -
          (C47403 * (C47635 * C47520 + C47466)) / C47083) *
         ae) /
            C47208 -
        ((2 * C47403 * C47469 + C47403 * (C47469 + C47638 * C47520)) * ce) /
            C47249 +
        C47240 *
            ((((-2 * C47694) / C47083 -
               (C47403 * (C47615 * C47520 + C47357)) / C47083) *
              ae) /
                 C47208 -
             ((2 * C47693 + C47403 * (C47363 + C47619 * C47520)) * ce) /
                 C47249 +
             C47240 * ((-2 * C47695) / C47249 +
                       C47403 * ((-(C47245 *
                                    (C47280 * C47281 +
                                     C47243 * bs[8] * std::pow(C47236, 8)) *
                                    C47241 * C47520) /
                                  C47083) /
                                     C47208 -
                                 C47613 / C47249)));
    const double C12886 =
        4 * ((-2 * C47539) / C47249 + C47403 * C47677) +
        C47403 *
            (3 * C47677 +
             C47403 * ((-2 * C47695) / C47249 +
                       C47403 * ((-(C47245 *
                                    (C47280 * C47281 +
                                     C47243 * bs[8] * std::pow(C47236, 8)) *
                                    C47241 * C47520) /
                                  C47083) /
                                     C47208 -
                                 C47613 / C47249)));
    const double C47808 = C47807 + C47806;
    const double C47841 = C47840 + C47839;
    const double C47664 = C47662 + C47646;
    const double C47783 = C47240 * C47780;
    const double C24036 =
        (2 * C47403 * C47605 + C47403 * (C47605 + C47780 * C47520)) / C47208;
    const double C47663 = C47625 - C47661;
    const double C47782 = C47779 - C47759;
    const double C47155 = C47150 - C47151;
    const double C47154 = C47149 + C48470;
    const double C2720 = C2718 - C2707;
    const double C13883 = C13879 - C3005;
    const double C13882 = C13878 + C3005;
    const double C13881 = C13877 + C2997;
    const double C13880 = C13876 - C2997;
    const double C45154 = C45153 - C13869;
    const double C46657 = C46656 + C15906;
    const double C12341 = C12339 - C1764;
    const double C12340 = C12338 + C1764;
    const double C14774 = C14772 - C3715;
    const double C14773 = C14771 + C3715;
    const double C172 = C160 + C161;
    const double C387 = C367 + C368;
    const double C5303 = C5286 + C5287;
    const double C5299 = C5278 + C5279;
    const double C16776 = C16759 + C16760;
    const double C16772 = C16751 + C16752;
    const double C389 = C373 + C374;
    const double C5105 = C5084 + C5085;
    const double C5639 = C5634 + C5635;
    const double C16578 = C16557 + C16558;
    const double C17112 = C17107 + C17108;
    const double C591 = C572 + C573;
    const double C5779 = C5772 + C5773;
    const double C17252 = C17245 + C17246;
    const double C595 = C580 + C581;
    const double C5495 = C5476 + C5477;
    const double C16968 = C16949 + C16950;
    const double C1056 = C1044 + C1045;
    const double C5489 = C5464 + C5465;
    const double C5999 = C5990 + C5991;
    const double C16962 = C16937 + C16938;
    const double C17472 = C17463 + C17464;
    const double C28410 = C28398 + C28399;
    const double C39428 = C39416 + C39417;
    const double C44806 = C44802 + C44803;
    const double C28878 = C28872 + C28873;
    const double C39896 = C39890 + C39891;
    const double C43783 = C43779 + C43780;
    const double C44448 = C44444 + C44445;
    const double C11994 = C11986 * C1185;
    const double C12796 = C11986 * C307;
    const double C14433 = C11986 * C47169;
    const double C12138 = C12136 * C1560;
    const double C13664 = C12136 * C2830;
    const double C11995 = C11987 * C48502;
    const double C12797 = C11987 * C48502;
    const double C14434 = C11987 * C3121;
    const double C12139 = C12137 * C48512;
    const double C13665 = C12137 * C48512;
    const double C47660 = C47653 + C47657;
    const double C27527 = C48520 * C6383;
    const double C38549 = C48520 * C6383;
    const double C44138 = C48388 * C6383;
    const double C28001 = C48520 * C6869;
    const double C39023 = C48520 * C6869;
    const double C6873 =
        3 * ((-(ae * C47403 * C47429) / C47083) / C47208 - C47537 / C47249 -
             (C47403 * C47432 * ce) / C47249 + C47240 * C47691) +
        (C47403 * C47606 * ae) / C47208 - (C47403 * C47605 * ce) / C47249 +
        C47240 *
            (2 * C47691 - (ae * C47403 * C47594) / C47249 -
             (C47403 * C47595 * ce) / C47249 +
             C47240 * ((-(ae * C47403 * C47574) / C47083) / C47208 -
                       C47681 / C47249 - (C47403 * C47577 * ce) / C47249 +
                       C47240 * ((-(C47403 * C47341 * ce) / C47083) / C47208 -
                                 (ae * C47403 * C47337) / C47249 -
                                 (C47240 * C47403 * C47288) / C47249)));
    const double C6230 =
        4 * ((-2 * C47414) / C47083 - (C47240 * C47441) / C47083 -
             (C47431 * ce) / C47083) +
        C47240 * ((-3 * C47441) / C47083 + C47240 * C47606 -
                  (C47590 * ce) / C47083) -
        ((3 * C47431 + C47240 * C47590) * ce) / C47083;
    const double C6384 = (-2 * C47414) / C47083 - (C47240 * C47441) / C47083 -
                         (C47431 * ce) / C47083 + C47606 * C47520;
    const double C6870 = C47403 * ((-3 * C47441) / C47083 + C47240 * C47606 -
                                   (C47590 * ce) / C47083);
    const double C47781 = C47240 * C47778;
    const double C47835 = C47832 + C47834;
    const double C6530 = C6524 + C6525;
    const double C17987 = C17981 + C17982;
    const double C43787 = C43784 + C11992;
    const double C44374 = C44373 + C12790;
    const double C6233 =
        4 * (2 * C47443 - (ae * C47441) / C47249 - (C47442 * ce) / C47249 +
             C47240 * C47603) +
        (((-3 * C47441) / C47083 + C47240 * C47606 - (C47590 * ce) / C47083) *
         ae) /
            C47208 -
        ((3 * C47442 + C47240 * C47605 + C47590 * ae) * ce) / C47249 +
        C47240 *
            (3 * C47603 + (C47606 * ae) / C47208 - (C47605 * ce) / C47249 +
             C47240 *
                 (2 * C47597 - (ae * C47594) / C47249 - (C47595 * ce) / C47249 +
                  C47240 * ((-(ae * C47574) / C47083) / C47208 - C47282 -
                            (C47577 * ce) / C47249 +
                            C47240 * ((-(C47341 * ce) / C47083) / C47208 -
                                      (ae * C47337) / C47249 -
                                      (C47240 * C47288) / C47249))));
    const double C142 =
        5 * (3 * C47276 + C47245 * C47295) +
        C47245 * (4 * C47295 +
                  C47245 * (3 * C47293 +
                            C47245 * ((-2 * C47245 * C47288) / C47249 +
                                      C47245 * ((-((C47280 * C47281 +
                                                    C47243 * bs[8] *
                                                        std::pow(C47236, 8)) *
                                                   C47241 * C47258) /
                                                 C47083) /
                                                    C47208 -
                                                C47288 / C47249))));
    const double C345 =
        (-2 * C47245 * C47262) / C47249 + C47245 * C47276 +
        ((C47240 * C47353 - (C47347 * ce) / C47083) * ae) / C47208 -
        ((C47240 * C47352 + C47347 * ae) * ce) / C47249 +
        C47240 *
            ((C47353 * ae) / C47208 - (C47352 * ce) / C47249 + C47240 * C47295);
    const double C346 =
        (((-3 * C47326) / C47083 + C47245 * C47353) * ae) / C47208 -
        ((3 * C47327 + C47245 * C47352) * ce) / C47249 +
        C47240 * (3 * C47276 + C47245 * C47295);
    const double C347 =
        3 * C47276 + C47245 * C47295 +
        ((C47240 * C47389 - (C47383 * ce) / C47083) * ae) / C47208 -
        ((C47240 * C47388 + C47383 * ae) * ce) / C47249 +
        C47240 * ((C47389 * ae) / C47208 - (C47388 * ce) / C47249 +
                  C47240 * (3 * C47293 +
                            C47245 * ((-2 * C47245 * C47288) / C47249 +
                                      C47245 * ((-((C47280 * C47281 +
                                                    C47243 * bs[8] *
                                                        std::pow(C47236, 8)) *
                                                   C47241 * C47258) /
                                                 C47083) /
                                                    C47208 -
                                                C47288 / C47249))));
    const double C555 = (zP - zQ) * (3 * C47276 + C47245 * C47295);
    const double C559 = (-2 * C47245 * C47262) / C47249 + C47245 * C47276 +
                        C47295 * std::pow(zP - zQ, 2);
    const double C560 =
        3 * C47276 + C47245 * C47295 +
        (3 * C47293 +
         C47245 *
             ((-2 * C47245 * C47288) / C47249 +
              C47245 *
                  ((-((C47280 * C47281 + C47243 * bs[8] * std::pow(C47236, 8)) *
                      C47241 * C47258) /
                    C47083) /
                       C47208 -
                   C47288 / C47249))) *
            std::pow(zP - zQ, 2);
    const double C722 =
        ((4 * C47353 + C47245 * C47389) * ae) / C47208 -
        ((4 * C47352 + C47245 * C47388) * ce) / C47249 +
        C47240 * (4 * C47295 +
                  C47245 * (3 * C47293 +
                            C47245 * ((-2 * C47245 * C47288) / C47249 +
                                      C47245 * ((-((C47280 * C47281 +
                                                    C47243 * bs[8] *
                                                        std::pow(C47236, 8)) *
                                                   C47241 * C47258) /
                                                 C47083) /
                                                    C47208 -
                                                C47288 / C47249))));
    const double C856 =
        (zP - zQ) *
        (4 * C47295 +
         C47245 *
             (3 * C47293 +
              C47245 * ((-2 * C47245 * C47288) / C47249 +
                        C47245 * ((-((C47280 * C47281 +
                                      C47243 * bs[8] * std::pow(C47236, 8)) *
                                     C47241 * C47258) /
                                   C47083) /
                                      C47208 -
                                  C47288 / C47249))));
    const double C1031 = (C47403 * C47353 * ae) / C47208 -
                         (C47403 * C47352 * ce) / C47249 +
                         C47240 * C47403 * C47295;
    const double C1564 =
        2 * ((C47353 * ae) / C47208 - (C47352 * ce) / C47249 +
             C47240 * C47295) +
        ((C47353 + C47240 * C47534 - (C47529 * ce) / C47083) * ae) / C47208 -
        ((C47352 + C47240 * C47533 + C47529 * ae) * ce) / C47249 +
        C47240 * (C47295 + (C47534 * ae) / C47208 - (C47533 * ce) / C47249 +
                  C47240 * ((C47385 * ae) / C47208 - (C47384 * ce) / C47249 +
                            C47240 * ((-2 * C47245 * C47288) / C47249 +
                                      C47245 * ((-((C47280 * C47281 +
                                                    C47243 * bs[8] *
                                                        std::pow(C47236, 8)) *
                                                   C47241 * C47258) /
                                                 C47083) /
                                                    C47208 -
                                                C47288 / C47249))));
    const double C1742 =
        C47403 * C47295 + (C47403 * C47534 * ae) / C47208 -
        (C47403 * C47533 * ce) / C47249 +
        C47240 *
            ((C47403 * C47385 * ae) / C47208 - (C47403 * C47384 * ce) / C47249 +
             C47240 * C47403 *
                 ((-2 * C47245 * C47288) / C47249 +
                  C47245 * ((-((C47280 * C47281 +
                                C47243 * bs[8] * std::pow(C47236, 8)) *
                               C47241 * C47258) /
                             C47083) /
                                C47208 -
                            C47288 / C47249)));
    const double C2340 =
        ((C47353 + C47385 * C47520) * ae) / C47208 -
        ((C47352 + C47384 * C47520) * ce) / C47249 +
        C47240 *
            (C47295 +
             ((-2 * C47245 * C47288) / C47249 +
              C47245 *
                  ((-((C47280 * C47281 + C47243 * bs[8] * std::pow(C47236, 8)) *
                      C47241 * C47258) /
                    C47083) /
                       C47208 -
                   C47288 / C47249)) *
                 C47520);
    const double C2466 =
        2 * C47403 * C47295 +
        C47403 *
            (C47295 +
             ((-2 * C47245 * C47288) / C47249 +
              C47245 *
                  ((-((C47280 * C47281 + C47243 * bs[8] * std::pow(C47236, 8)) *
                      C47241 * C47258) /
                    C47083) /
                       C47208 -
                   C47288 / C47249)) *
                 C47520);
    const double C1306 =
        3 * (C47276 - (ae * C47487) / C47249 - (C47488 * ce) / C47249 +
             C47240 * C47515) +
        (((-2 * C47487) / C47083 - (C47240 * C47513) / C47083 -
          (C47503 * ce) / C47083) *
         ae) /
            C47208 -
        ((2 * C47488 + C47240 * C47514 + C47503 * ae) * ce) / C47249 +
        C47240 *
            (2 * C47515 - (ae * C47513) / C47249 - (C47514 * ce) / C47249 +
             C47240 *
                 (C47293 - (ae * C47501) / C47249 - (C47504 * ce) / C47249 +
                  C47240 *
                      ((-(C47378 * ce) / C47083) / C47208 -
                       (ae * C47376) / C47249 +
                       C47240 * ((-((C47280 * C47281 +
                                     C47243 * bs[8] * std::pow(C47236, 8)) *
                                    C47241 * C47258) /
                                  C47083) /
                                     C47208 -
                                 C47288 / C47249))));
    const double C1589 = C1584 + C1585;
    const double C5302 = C5284 + C5285;
    const double C16775 = C16757 + C16758;
    const double C1763 = C1758 + C1759;
    const double C5998 = C5988 + C5989;
    const double C17471 = C17461 + C17462;
    const double C2357 = C2352 + C2353;
    const double C5494 = C5474 + C5475;
    const double C16967 = C16947 + C16948;
    const double C2479 = C2474 + C2475;
    const double C24038 =
        2 * ((((-2 * C47680) / C47083 - (C47403 * C47795) / C47083) * ae) /
                 C47208 -
             ((2 * C47679 + C47403 * C47794) * ce) / C47249 + C47240 * C47841) +
        (((-2 * C47403 * C47594) / C47083 -
          (C47403 * (C47764 * C47520 + C47594)) / C47083) *
         ae) /
            C47208 -
        ((2 * C47403 * C47595 + C47403 * (C47595 + C47767 * C47520)) * ce) /
            C47249 +
        C47240 *
            (C47841 +
             (((-2 * C47810) / C47083 -
               (C47403 * (C47742 * C47520 + C47574)) / C47083) *
              ae) /
                 C47208 -
             ((2 * C47812 + C47403 * (C47577 + C47745 * C47520)) * ce) /
                 C47249 +
             C47240 *
                 ((((-2 * C47814) / C47083 -
                    (C47403 * (C47367 * C47520 + C47337)) / C47083) *
                   ae) /
                      C47208 -
                  ((2 * C47813 + C47403 * (C47341 + C47371 * C47520)) * ce) /
                      C47249 +
                  C47240 *
                      ((-2 * C47815) / C47249 +
                       C47403 * ((-((C47280 * C47281 +
                                     C47243 * bs[8] * std::pow(C47236, 8)) *
                                    C47241 * C47520) /
                                  C47083) /
                                     C47208 -
                                 C47288 / C47249))));
    const double C28388 =
        ((4 * ((-2 * C47680) / C47083 - (C47403 * C47795) / C47083) +
          C47403 *
              ((-3 * C47795) / C47083 +
               C47403 * ((-2 * C47814) / C47083 -
                         (C47403 * (C47367 * C47520 + C47337)) / C47083))) *
         ae) /
            C47208 -
        ((4 * (2 * C47679 + C47403 * C47794) +
          C47403 *
              (3 * C47794 +
               C47403 * (2 * C47813 + C47403 * (C47341 + C47371 * C47520)))) *
         ce) /
            C47249 +
        C47240 * (4 * C47841 +
                  C47403 * (3 * C47804 +
                            C47403 * ((-2 * C47815) / C47249 +
                                      C47403 * ((-((C47280 * C47281 +
                                                    C47243 * bs[8] *
                                                        std::pow(C47236, 8)) *
                                                   C47241 * C47520) /
                                                 C47083) /
                                                    C47208 -
                                                C47288 / C47249))));
    const double C44440 =
        5 * (3 * C47671 + C47403 * C47841) +
        C47403 * (4 * C47841 +
                  C47403 * (3 * C47804 +
                            C47403 * ((-2 * C47815) / C47249 +
                                      C47403 * ((-((C47280 * C47281 +
                                                    C47243 * bs[8] *
                                                        std::pow(C47236, 8)) *
                                                   C47241 * C47520) /
                                                 C47083) /
                                                    C47208 -
                                                C47288 / C47249))));
    const double C6231 =
        (4 * (2 * C47452 + C47240 * C47479 + C47468 * ae) +
         C47240 * (3 * C47479 + C47240 * C47664 + C47651 * ae) +
         (3 * C47468 + C47240 * C47651) * ae) /
        C47208;
    const double C6385 =
        (2 * C47452 + C47240 * C47479 + C47468 * ae + C47664 * C47520) / C47208;
    const double C6871 =
        (C47403 * (3 * C47479 + C47240 * C47664 + C47651 * ae)) / C47208;
    const double C47786 = C47729 + C47783;
    const double C47665 = C47663 - C47650;
    const double C47785 = C47240 * C47782;
    const double C23060 =
        3 * (C47671 - (ae * (C47574 * C47520 + C47429)) / C47249 -
             ((C47432 + C47577 * C47520) * ce) / C47249 + C47240 * C47808) +
        ((C47606 + C47782 * C47520) * ae) / C47208 -
        ((C47605 + C47780 * C47520) * ce) / C47249 +
        C47240 *
            (2 * C47808 - (ae * (C47764 * C47520 + C47594)) / C47249 -
             ((C47595 + C47767 * C47520) * ce) / C47249 +
             C47240 *
                 (C47804 - (ae * (C47742 * C47520 + C47574)) / C47249 -
                  ((C47577 + C47745 * C47520) * ce) / C47249 +
                  C47240 *
                      ((-((C47341 + C47371 * C47520) * ce) / C47083) / C47208 -
                       (ae * (C47367 * C47520 + C47337)) / C47249 +
                       C47240 * ((-((C47280 * C47281 +
                                     C47243 * bs[8] * std::pow(C47236, 8)) *
                                    C47241 * C47520) /
                                  C47083) /
                                     C47208 -
                                 C47288 / C47249))));
    const double C24037 =
        2 * C47403 * C47606 + C47403 * (C47606 + C47782 * C47520);
    const double C3141 = C388 * C47155;
    const double C3137 = C384 * C47155;
    const double C3131 = C379 * C47155;
    const double C3459 = C1054 * C47155;
    const double C3453 = C1052 * C47155;
    const double C14429 = C2354 * C47155;
    const double C14423 = C11570 * C47155;
    const double C16441 = C11982 * C47155;
    const double C47061 = C13394 * C47155;
    const double C1281 =
        (C47155 / C47100 + ((C47081 * C47169 + C3121) * ce) / C47083) / C47100 -
        ((C47081 * (C47169 / C47100 + (0 * ce) / C47083) + C48512) * de) /
            C47083;
    const double C1559 =
        C47155 / C47100 - ((C47081 * C47169 + C3121) * de) / C47083;
    const double C2829 =
        C47155 / C47100 + ((C47081 * C47169 + C3121) * ce) / C47083;
    const double C47158 = C47154 * de;
    const double C2722 = C2720 * C48405;
    const double C12343 = C12341 - C1765;
    const double C12342 = C12340 + C1765;
    const double C14776 = C14774 - C3716;
    const double C14775 = C14773 + C3716;
    const double C182 = C172 * C48184;
    const double C399 = C387 * C48502;
    const double C1198 = C387 * C48502;
    const double C1581 = C387 * C1553;
    const double C2845 = C387 * C48534;
    const double C3140 = C387 * C3121;
    const double C401 = C389 * C48529;
    const double C735 = C389 * C48247;
    const double C1202 = C389 * C1178;
    const double C2711 = C389 * C48247;
    const double C3144 = C389 * C48250;
    const double C603 = C591 * C48184;
    const double C1047 = C591 * C48470;
    const double C3301 = C591 * C2691;
    const double C607 = C595 * C48184;
    const double C2349 = C595 * C48470;
    const double C3007 = C595 * C2691;
    const double C1062 = C1056 * C48247;
    const double C1755 = C1056 * C1178;
    const double C3001 = C1056 * C48247;
    const double C3462 = C1056 * C48250;
    const double C3720 = C1056 * C48529;
    const double C44809 = C44806 * C48247;
    const double C46655 = C44806 * C48247;
    const double C43786 = C43783 * C48502;
    const double C44371 = C43783 * C48502;
    const double C47066 = C43783 * C3121;
    const double C44450 = C44448 * C48184;
    const double C27542 = C27526 + C27527;
    const double C38564 = C38548 + C38549;
    const double C44141 = C44137 + C44138;
    const double C28008 = C28000 + C28001;
    const double C39030 = C39022 + C39023;
    const double C28005 = C48520 * C6873;
    const double C39027 = C48520 * C6873;
    const double C27530 = C16533 * C6384;
    const double C38552 = C5060 * C6384;
    const double C44139 = C113 * C6384;
    const double C28004 = C16533 * C6870;
    const double C39026 = C5060 * C6870;
    const double C47784 = C47755 + C47781;
    const double C43788 = C43787 + C11993;
    const double C44375 = C44374 + C12791;
    const double C378 = C48388 * C345;
    const double C5633 = C48520 * C345;
    const double C17106 = C48520 * C345;
    const double C741 = C48388 * C346;
    const double C5087 = C48520 * C346;
    const double C16560 = C48520 * C346;
    const double C860 = C48388 * C555;
    const double C583 = C48388 * C559;
    const double C1051 = C48388 * C1031;
    const double C5771 = C48520 * C1031;
    const double C17244 = C48520 * C1031;
    const double C1593 = C1589 * C48512;
    const double C2847 = C1589 * C48512;
    const double C1767 = C1763 * C48502;
    const double C3464 = C1763 * C3121;
    const double C3722 = C1763 * C48502;
    const double C2361 = C2357 * C48247;
    const double C3009 = C2357 * C48247;
    const double C2483 = C2479 * C48184;
    const double C47788 = C47786 + C47768;
    const double C6234 =
        4 * (2 * C47480 - (ae * C47478) / C47249 - (C47479 * ce) / C47249 +
             C47240 * C47660) +
        (((-3 * C47478) / C47083 + C47240 * C47665 - (C47651 * ce) / C47083) *
         ae) /
            C47208 -
        ((3 * C47479 + C47240 * C47664 + C47651 * ae) * ce) / C47249 +
        C47240 *
            (3 * C47660 + (C47665 * ae) / C47208 - (C47664 * ce) / C47249 +
             C47240 *
                 (2 * C47654 - (ae * C47655) / C47249 - (C47656 * ce) / C47249 +
                  C47240 * ((-(ae * C47635) / C47083) / C47208 -
                            C47613 / C47249 - (C47638 * ce) / C47249 +
                            C47240 * ((-(C47619 * ce) / C47083) / C47208 -
                                      (ae * C47615) / C47249 -
                                      (C47240 * C47245 *
                                       (C47280 * C47281 +
                                        C47243 * bs[8] * std::pow(C47236, 8)) *
                                       C47241) /
                                          C47249))));
    const double C6874 =
        3 * ((-(ae * C47403 * C47466) / C47083) / C47208 - C47539 / C47249 -
             (C47403 * C47469 * ce) / C47249 + C47240 * C47705) +
        (C47403 * C47665 * ae) / C47208 - (C47403 * C47664 * ce) / C47249 +
        C47240 *
            (2 * C47705 - (ae * C47403 * C47655) / C47249 -
             (C47403 * C47656 * ce) / C47249 +
             C47240 * ((-(ae * C47403 * C47635) / C47083) / C47208 -
                       C47695 / C47249 - (C47403 * C47638 * ce) / C47249 +
                       C47240 * ((-(C47403 * C47619 * ce) / C47083) / C47208 -
                                 (ae * C47403 * C47615) / C47249 -
                                 (C47240 * C47403 * C47245 *
                                  (C47280 * C47281 +
                                   C47243 * bs[8] * std::pow(C47236, 8)) *
                                  C47241) /
                                     C47249)));
    const double C6232 =
        4 * ((-2 * C47451) / C47083 - (C47240 * C47478) / C47083 -
             (C47468 * ce) / C47083) +
        C47240 * ((-3 * C47478) / C47083 + C47240 * C47665 -
                  (C47651 * ce) / C47083) -
        ((3 * C47468 + C47240 * C47651) * ce) / C47083;
    const double C6386 = (-2 * C47451) / C47083 - (C47240 * C47478) / C47083 -
                         (C47468 * ce) / C47083 + C47665 * C47520;
    const double C6872 = C47403 * ((-3 * C47478) / C47083 + C47240 * C47665 -
                                   (C47651 * ce) / C47083);
    const double C47787 = C47740 + C47785;
    const double C1580 = C386 * C1559;
    const double C1570 = C381 * C1559;
    const double C12130 = C1760 * C1559;
    const double C12478 = C11980 * C1559;
    const double C44135 = C11984 * C1559;
    const double C2844 = C386 * C2829;
    const double C2836 = C381 * C2829;
    const double C13662 = C1760 * C2829;
    const double C15769 = C11980 * C2829;
    const double C46549 = C11984 * C2829;
    const double C47160 = C47158 / C47083;
    const double C407 = C406 + C399;
    const double C1209 = C1208 + C1198;
    const double C751 = C747 + C735;
    const double C2721 = C2719 + C2711;
    const double C858 = C602 + C603;
    const double C11366 = C603 + C602;
    const double C611 = C606 + C607;
    const double C11097 = C607 + C606;
    const double C1066 = C1065 + C1062;
    const double C11579 = C11574 - C1062;
    const double C3305 = C3304 + C3001;
    const double C14226 = C14225 - C3001;
    const double C44143 = C44141 * C1560;
    const double C46551 = C44141 * C2830;
    const double C27544 = C27530 + C27531;
    const double C38566 = C38552 + C38553;
    const double C44142 = C44139 + C44140;
    const double C28010 = C28004 + C28005;
    const double C39032 = C39026 + C39027;
    const double C391 = C377 + C378;
    const double C5638 = C5632 + C5633;
    const double C17111 = C17105 + C17106;
    const double C745 = C740 + C741;
    const double C5106 = C5086 + C5087;
    const double C16579 = C16559 + C16560;
    const double C864 = C859 + C860;
    const double C596 = C582 + C583;
    const double C1058 = C1050 + C1051;
    const double C5778 = C5770 + C5771;
    const double C17251 = C17243 + C17244;
    const double C22944 =
        (5 * (3 * C47442 + C47240 * C47605 + C47590 * ae) +
         C47240 * (4 * C47605 + C47240 * C47788 + C47773 * ae) +
         (4 * C47590 + C47240 * C47773) * ae) /
        C47208;
    const double C23058 =
        (3 * C47442 + C47240 * C47605 + C47590 * ae + C47788 * C47520) / C47208;
    const double C23404 =
        (C47403 * (4 * C47605 + C47240 * C47788 + C47773 * ae)) / C47208;
    const double C47789 = C47787 - C47772;
    const double C47162 = C47148 - C47160;
    const double C408 = C407 * C48405;
    const double C1210 = C1209 * C48405;
    const double C753 = C751 * C48405;
    const double C2723 = C2721 * C48405;
    const double C863 = C858 * C48405;
    const double C613 = C611 * C48405;
    const double C1067 = C1066 * C48405;
    const double C3306 = C3305 * C48405;
    const double C44144 = C44142 * C48512;
    const double C46552 = C44142 * C48512;
    const double C403 = C391 * C48502;
    const double C1204 = C391 * C48502;
    const double C3146 = C391 * C3121;
    const double C749 = C745 * C48247;
    const double C2715 = C745 * C48247;
    const double C866 = C864 * C48184;
    const double C608 = C596 * C48184;
    const double C1064 = C1058 * C48247;
    const double C3303 = C1058 * C48247;
    const double C22946 =
        5 * (3 * C47603 + (C47606 * ae) / C47208 - (C47605 * ce) / C47249 +
             C47240 * C47784) +
        ((4 * C47606 + C47240 * C47789 - (C47773 * ce) / C47083) * ae) /
            C47208 -
        ((4 * C47605 + C47240 * C47788 + C47773 * ae) * ce) / C47249 +
        C47240 *
            (4 * C47784 + (C47789 * ae) / C47208 - (C47788 * ce) / C47249 +
             C47240 *
                 (3 * C47778 + (C47782 * ae) / C47208 - (C47780 * ce) / C47249 +
                  C47240 *
                      (2 * C47770 - (ae * C47764) / C47249 -
                       (C47767 * ce) / C47249 +
                       C47240 *
                           ((-(ae * C47742) / C47083) / C47208 -
                            C47288 / C47249 - (C47745 * ce) / C47249 +
                            C47240 * ((-(C47371 * ce) / C47083) / C47208 -
                                      (ae * C47367) / C47249 -
                                      (C47240 *
                                       (C47280 * C47281 +
                                        C47243 * bs[8] * std::pow(C47236, 8)) *
                                       C47241) /
                                          C47249)))));
    const double C23406 =
        4 * (2 * C47691 - (ae * C47403 * C47594) / C47249 -
             (C47403 * C47595 * ce) / C47249 + C47240 * C47835) +
        (C47403 * C47789 * ae) / C47208 - (C47403 * C47788 * ce) / C47249 +
        C47240 *
            (3 * C47835 + (C47403 * C47782 * ae) / C47208 -
             (C47403 * C47780 * ce) / C47249 +
             C47240 *
                 (2 * C47833 - (ae * C47403 * C47764) / C47249 -
                  (C47403 * C47767 * ce) / C47249 +
                  C47240 *
                      ((-(ae * C47403 * C47742) / C47083) / C47208 -
                       C47815 / C47249 - (C47403 * C47745 * ce) / C47249 +
                       C47240 * ((-(C47403 * C47371 * ce) / C47083) / C47208 -
                                 (ae * C47403 * C47367) / C47249 -
                                 (C47240 * C47403 *
                                  (C47280 * C47281 +
                                   C47243 * bs[8] * std::pow(C47236, 8)) *
                                  C47241) /
                                     C47249))));
    const double C22945 =
        5 * ((-3 * C47441) / C47083 + C47240 * C47606 -
             (C47590 * ce) / C47083) +
        C47240 * (4 * C47606 + C47240 * C47789 - (C47773 * ce) / C47083) -
        ((4 * C47590 + C47240 * C47773) * ce) / C47083;
    const double C23059 = (-3 * C47441) / C47083 + C47240 * C47606 -
                          (C47590 * ce) / C47083 + C47789 * C47520;
    const double C23405 =
        C47403 * (4 * C47606 + C47240 * C47789 - (C47773 * ce) / C47083);
    const double C47163 = C47162 + C47133;
    const double C3143 = C169 * C47163;
    const double C3135 = C166 * C47163;
    const double C3129 = C164 * C47163;
    const double C3461 = C588 * C47163;
    const double C3455 = C586 * C47163;
    const double C14431 = C592 * C47163;
    const double C14421 = C11098 * C47163;
    const double C16443 = C11101 * C47163;
    const double C47063 = C12900 * C47163;
    const double C1278 =
        (((((0 - (C47081 * C47116) / C47083) * ce) / C47083 -
           (0 * de) / C47087 + (2 * C47117) / C47083) /
              C47100 -
          ((C47081 * C47152 + 0) * de) / C47083 + C47126 - C47139) /
             C47100 +
         ((C47081 * C47161 + 0) * ce) / C47083) /
            C47100 -
        ((C47081 * (C47161 / C47100 +
                    ((C47081 * C47163 + C48243) * ce) / C47083 + C47155) +
          C48548) *
         de) /
            C47083 +
        C47163 / C47100 + ((C47081 * C47155 + C48250) * ce) / C47083 +
        2 * (C47133 / C47100 - (0 * de) / C47083);
    const double C1279 =
        (C47161 / C47100 + ((C47081 * C47163 + C48243) * ce) / C47083 +
         C47155) /
            C47100 -
        ((C47081 * (C47163 / C47100 +
                    ((C47081 * C47155 + C48250) * ce) / C47083 + 2 * C47169) +
          C48544) *
         de) /
            C47083 +
        2 * (C47155 / C47100 + ((C47081 * C47169 + C3121) * ce) / C47083);
    const double C1280 =
        (C47163 / C47100 + ((C47081 * C47155 + C48250) * ce) / C47083 +
         2 * C47169) /
            C47100 -
        ((C47081 *
              (C47155 / C47100 + ((C47081 * C47169 + C3121) * ce) / C47083) +
          C48534) *
         de) /
            C47083 +
        3 * (C47169 / C47100 + (0 * ce) / C47083);
    const double C1557 =
        C47161 / C47100 - ((C47081 * C47163 + C48243) * de) / C47083 + C47155;
    const double C1558 = C47163 / C47100 -
                         ((C47081 * C47155 + C48250) * de) / C47083 +
                         2 * C47169;
    const double C2827 =
        C47161 / C47100 + ((C47081 * C47163 + C48243) * ce) / C47083 + C47155;
    const double C2828 = C47163 / C47100 +
                         ((C47081 * C47155 + C48250) * ce) / C47083 +
                         2 * C47169;
    const double C3147 = C3135 + C3136;
    const double C14428 = C3454 + C3455;
    const double C14427 = C3455 + C3454;
    const double C47060 = C16443 + C16442;
    const double C1576 = C166 * C1557;
    const double C1566 = C164 * C1557;
    const double C12126 = C586 * C1557;
    const double C12474 = C11098 * C1557;
    const double C44131 = C11101 * C1557;
    const double C1578 = C384 * C1558;
    const double C1568 = C379 * C1558;
    const double C12128 = C1052 * C1558;
    const double C12476 = C11570 * C1558;
    const double C44133 = C11982 * C1558;
    const double C2840 = C166 * C2827;
    const double C2832 = C164 * C2827;
    const double C13658 = C586 * C2827;
    const double C15765 = C11098 * C2827;
    const double C46545 = C11101 * C2827;
    const double C2842 = C384 * C2828;
    const double C2834 = C379 * C2828;
    const double C13660 = C1052 * C2828;
    const double C15767 = C11570 * C2828;
    const double C46547 = C11982 * C2828;
    const double C3148 = C3147 - C3137;
    const double C14436 = C3453 - C14428;
    const double C14435 = C14427 - C3453;
    const double C47067 = C47060 - C16441;
    const double C3149 = C3148 - C3138;
    const double C14438 = C14436 + C3456;
    const double C14437 = C14435 - C3456;
    const double C47068 = C47067 - C16444;
    const double C3150 = C3149 + C3139;
    const double C14440 = C14438 - C3457;
    const double C14439 = C14437 + C3457;
    const double C47069 = C47068 + C16445;
    const double C3151 = C3150 + C3140;
    const double C14442 = C14440 - C3458;
    const double C14441 = C14439 + C3458;
    const double C47070 = C47069 + C16446;
    const double C3152 = C3151 * C48405;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C47163 +
            (C113 * C123 + C48388 * C136) * C48243 -
            (C113 * C308 + C48388 * C318) * C47155 -
            (C113 * C319 + C48388 * C338) * C48250 +
            (C113 * C309 + C48388 * C320) * C47169 +
            (C113 * C321 + C48388 * C339) * C3121) *
               C48405 * C104 +
           (C3129 + C3130 - C3131 - C3132 + C3133 + C3134) * C48405 * C105 +
           C3152 * C106) *
              C48161 +
          ((C3131 - (C3130 + C3129) + C3132 - C3133 - C3134) * C48405 * C104 +
           (C3137 - (C3136 + C3135) + C3138 - C3139 - C3140) * C48405 * C105 +
           (C3141 - (C3142 + C3143) + C3144 - C3145 - C3146) * C48405 * C106) *
              C48169 +
          (C3152 * C104 +
           (C3143 + C3142 - C3141 - C3144 + C3145 + C3146) * C48405 * C105 +
           (C170 * C47163 + C171 * C48243 - C744 * C47155 - C745 * C48250 +
            (C113 * C317 + C48388 * C336) * C47169 +
            (C113 * C337 + C48388 * C347) * C3121) *
               C48405 * C106) *
              C3124) *
         C48202) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C47163 +
             (C113 * C123 + C48388 * C136) * C48243 -
             (C113 * C308 + C48388 * C318) * C47155 -
             (C113 * C319 + C48388 * C338) * C48250 +
             (C113 * C309 + C48388 * C320) * C47169 +
             (C113 * C321 + C48388 * C339) * C3121) *
                C48405 * C104 +
            (C3129 + C3130 - C3131 - C3132 + C3133 + C3134) * C48405 * C105 +
            C3152 * C106) *
               C2825 +
           ((C3131 - (C3130 + C3129) + C3132 - C3133 - C3134) * C48405 * C104 +
            (C3137 - (C3136 + C3135) + C3138 - C3139 - C3140) * C48405 * C105 +
            (C3141 - (C3142 + C3143) + C3144 - C3145 - C3146) * C48405 * C106) *
               C48166) *
              C48471 +
          ((((C113 * C1013 + C48388 * C1018) * C47155 -
             ((C113 * C537 + C48388 * C554) * C48243 +
              (C113 * C524 + C48388 * C538) * C47163) +
             (C113 * C1019 + C48388 * C1028) * C48250 -
             (C113 * C1417 + C48388 * C1426) * C47169 -
             (C113 * C1427 + C48388 * C1444) * C3121) *
                C48405 * C104 +
            (C3453 - (C3454 + C3455) + C3456 - C3457 - C3458) * C48405 * C105 +
            (C3459 - (C3460 + C3461) + C3462 - C3463 - C3464) * C48405 * C106) *
               C2825 +
           ((C3455 + C3454 - C3453 - C3456 + C3457 + C3458) * C48405 * C104 +
            (C3461 + C3460 - C3459 - C3462 + C3463 + C3464) * C48405 * C105 +
            (C590 * C47163 + C591 * C48243 - C1057 * C47155 - C1058 * C48250 +
             (C113 * C1739 + C48388 * C1740) * C47169 +
             (C113 * C1741 + C48388 * C1742) * C3121) *
                C48405 * C106) *
               C48166) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C2827 +
            (C113 * C123 + C48388 * C136) * C48548 -
            (C113 * C308 + C48388 * C318) * C2828 -
            (C113 * C319 + C48388 * C338) * C48544 +
            (C113 * C309 + C48388 * C320) * C2829 +
            (C113 * C321 + C48388 * C339) * C48534 -
            (C113 * C1283 + C48388 * C1289) * C2830 -
            (C113 * C1290 + C48388 * C1301) * C48512) *
               C48405 * C104 +
           (C2832 + C2833 - C2834 - C2835 + C2836 + C2837 - C2838 - C2839) *
               C48405 * C105 +
           (C2840 + C2841 - C2842 - C2843 + C2844 + C2845 - C2846 - C2847) *
               C48405 * C106) *
              C2825 +
          ((C2834 - (C2833 + C2832) + C2835 - C2836 - C2837 + C2838 + C2839) *
               C48405 * C104 +
           (C2842 - (C2841 + C2840) + C2843 - C2844 - C2845 + C2846 + C2847) *
               C48405 * C105 +
           (C388 * C2828 - (C168 * C48548 + C169 * C2827) + C389 * C48544 -
            C390 * C2829 - C391 * C48534 +
            (C113 * C1561 + C48388 * C1562) * C2830 +
            (C113 * C1563 + C48388 * C1564) * C48512) *
               C48405 * C106) *
              C48166) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C2697 +
            (C113 * C123 + C48388 * C136) * C2691 -
            (C113 * C308 + C48388 * C318) * C2698 -
            (C113 * C319 + C48388 * C338) * C48247) *
               C48405 * C104 +
           (C2700 + C2701 - C2702 - C2703) * C48405 * C105 + C2722 * C106) *
              C48547 +
          ((C2702 - (C2701 + C2700) + C2703) * C48405 * C104 +
           (C2706 - (C2705 + C2704) + C2707) * C48405 * C105 + C2723 * C106) *
              C48540 +
          (C2722 * C104 + (C2710 + C2709 - C2708 - C2711) * C48405 * C105 +
           (C2712 + C2713 - C2714 - C2715) * C48405 * C106) *
              C48527 +
          (C2723 * C104 + (C2714 - (C2713 + C2712) + C2715) * C48405 * C105 +
           ((C113 * C719 + C48388 * C720) * C2698 -
            (C172 * C2691 + C173 * C2697) +
            (C113 * C721 + C48388 * C722) * C48247) *
               C48405 * C106) *
              C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2697 +
             (C113 * C123 + C48388 * C136) * C2691 -
             (C113 * C308 + C48388 * C318) * C2698 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C48405 * C104 +
            (C2700 + C2701 - C2702 - C2703) * C48405 * C105 + C2722 * C106) *
               C2825 +
           ((C2702 - (C2701 + C2700) + C2703) * C48405 * C104 +
            (C2706 - (C2705 + C2704) + C2707) * C48405 * C105 + C2723 * C106) *
               C48166) *
              C48542 +
          ((((C113 * C1013 + C48388 * C1018) * C2698 -
             ((C113 * C537 + C48388 * C554) * C2691 +
              (C113 * C524 + C48388 * C538) * C2697) +
             (C113 * C1019 + C48388 * C1028) * C48247) *
                C48405 * C104 +
            (C2994 - (C2995 + C2996) + C2997) * C48405 * C105 +
            (C2998 - (C2999 + C3000) + C3001) * C48405 * C106) *
               C2825 +
           ((C2996 + C2995 - C2994 - C2997) * C48405 * C104 +
            (C3000 + C2999 - C2998 - C3001) * C48405 * C105 +
            (C590 * C2697 + C591 * C2691 - C1057 * C2698 - C1058 * C48247) *
                C48405 * C106) *
               C48166) *
              C48531 +
          ((((C113 * C526 + C48388 * C541) * C2697 +
             (C113 * C542 + C48388 * C556) * C2691 -
             (C113 * C1420 + C48388 * C1432) * C2698 -
             (C113 * C1433 + C48388 * C1447) * C48247) *
                C48405 * C104 +
            (C3002 + C3003 - C3004 - C3005) * C48405 * C105 +
            (C3006 + C3007 - C3008 - C3009) * C48405 * C106) *
               C2825 +
           ((C3004 - (C3003 + C3002) + C3005) * C48405 * C104 +
            (C3008 - (C3007 + C3006) + C3009) * C48405 * C105 +
            ((C113 * C2337 + C48388 * C2338) * C2698 -
             (C596 * C2691 + C597 * C2697) +
             (C113 * C2339 + C48388 * C2340) * C48247) *
                C48405 * C106) *
               C48166) *
              C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2697 +
             (C113 * C123 + C48388 * C136) * C2691 -
             (C113 * C308 + C48388 * C318) * C2698 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C48405 * C104 +
            (C2700 + C2701 - C2702 - C2703) * C48405 * C105 + C2722 * C106) *
               C48161 +
           ((C2702 - (C2701 + C2700) + C2703) * C48405 * C104 +
            (C2706 - (C2705 + C2704) + C2707) * C48405 * C105 + C2723 * C106) *
               C48169 +
           (C2722 * C104 + (C2710 + C2709 - C2708 - C2711) * C48405 * C105 +
            (C2712 + C2713 - C2714 - C2715) * C48405 * C106) *
               C3124) *
              C48471 +
          ((((C113 * C1013 + C48388 * C1018) * C2698 -
             ((C113 * C537 + C48388 * C554) * C2691 +
              (C113 * C524 + C48388 * C538) * C2697) +
             (C113 * C1019 + C48388 * C1028) * C48247) *
                C48405 * C104 +
            (C2994 - (C2995 + C2996) + C2997) * C48405 * C105 + C3306 * C106) *
               C48161 +
           ((C2996 + C2995 - C2994 - C2997) * C48405 * C104 +
            (C3000 + C2999 - C2998 - C3001) * C48405 * C105 +
            (C3300 + C3301 - C3302 - C3303) * C48405 * C106) *
               C48169 +
           (C3306 * C104 + (C3302 - (C3301 + C3300) + C3303) * C48405 * C105 +
            ((C113 * C1017 + C48388 * C1026) * C2698 -
             (C864 * C2691 + C865 * C2697) +
             (C113 * C1027 + C48388 * C1032) * C48247) *
                C48405 * C106) *
               C3124) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C2697 +
            (C113 * C123 + C48388 * C136) * C2691 -
            (C113 * C308 + C48388 * C318) * C2698 -
            (C113 * C319 + C48388 * C338) * C48247) *
               C48405 * C104 +
           (C2700 + C2701 - C2702 - C2703) * C48405 * C105 + C2722 * C106) *
              C48547 +
          ((C2702 - (C2701 + C2700) + C2703) * C48405 * C104 +
           (C2706 - (C2705 + C2704) + C2707) * C48405 * C105 + C2723 * C106) *
              C48540 +
          (C2722 * C104 + (C2710 + C2709 - C2708 - C2711) * C48405 * C105 +
           (C2712 + C2713 - C2714 - C2715) * C48405 * C106) *
              C48527 +
          (C2723 * C104 + (C2714 - (C2713 + C2712) + C2715) * C48405 * C105 +
           ((C113 * C719 + C48388 * C720) * C2698 -
            (C172 * C2691 + C173 * C2697) +
            (C113 * C721 + C48388 * C722) * C48247) *
               C48405 * C106) *
              C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C2827 +
            (C113 * C123 + C48388 * C136) * C48548 -
            (C113 * C308 + C48388 * C318) * C2828 -
            (C113 * C319 + C48388 * C338) * C48544 +
            (C113 * C309 + C48388 * C320) * C2829 +
            (C113 * C321 + C48388 * C339) * C48534 -
            (C113 * C1283 + C48388 * C1289) * C2830 -
            (C113 * C1290 + C48388 * C1301) * C48512) *
               C48405 * C104 +
           (C2832 + C2833 - C2834 - C2835 + C2836 + C2837 - C2838 - C2839) *
               C48405 * C105 +
           (C2840 + C2841 - C2842 - C2843 + C2844 + C2845 - C2846 - C2847) *
               C48405 * C106) *
              C2825 +
          ((C2834 - (C2833 + C2832) + C2835 - C2836 - C2837 + C2838 + C2839) *
               C48405 * C104 +
           (C2842 - (C2841 + C2840) + C2843 - C2844 - C2845 + C2846 + C2847) *
               C48405 * C105 +
           (C388 * C2828 - (C168 * C48548 + C169 * C2827) + C389 * C48544 -
            C390 * C2829 - C391 * C48534 +
            (C113 * C1561 + C48388 * C1562) * C2830 +
            (C113 * C1563 + C48388 * C1564) * C48512) *
               C48405 * C106) *
              C48166) *
         C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C47163 +
             (C113 * C123 + C48388 * C136) * C48243 -
             (C113 * C308 + C48388 * C318) * C47155 -
             (C113 * C319 + C48388 * C338) * C48250 +
             (C113 * C309 + C48388 * C320) * C47169 +
             (C113 * C321 + C48388 * C339) * C3121) *
                C48405 * C104 +
            (C3129 + C3130 - C3131 - C3132 + C3133 + C3134) * C48405 * C105 +
            C3152 * C106) *
               C48456 +
           ((C3131 - (C3130 + C3129) + C3132 - C3133 - C3134) * C48405 * C104 +
            (C3137 - (C3136 + C3135) + C3138 - C3139 - C3140) * C48405 * C105 +
            (C3141 - (C3142 + C3143) + C3144 - C3145 - C3146) * C48405 * C106) *
               C48166) *
              C3562 +
          ((((C113 * C1013 + C48388 * C1018) * C47155 -
             ((C113 * C537 + C48388 * C554) * C48243 +
              (C113 * C524 + C48388 * C538) * C47163) +
             (C113 * C1019 + C48388 * C1028) * C48250 -
             (C113 * C1417 + C48388 * C1426) * C47169 -
             (C113 * C1427 + C48388 * C1444) * C3121) *
                C48405 * C104 +
            (C3453 - (C3454 + C3455) + C3456 - C3457 - C3458) * C48405 * C105 +
            (C3459 - (C3460 + C3461) + C3462 - C3463 - C3464) * C48405 * C106) *
               C48456 +
           ((C3455 + C3454 - C3453 - C3456 + C3457 + C3458) * C48405 * C104 +
            (C3461 + C3460 - C3459 - C3462 + C3463 + C3464) * C48405 * C105 +
            (C590 * C47163 + C591 * C48243 - C1057 * C47155 - C1058 * C48250 +
             (C113 * C1739 + C48388 * C1740) * C47169 +
             (C113 * C1741 + C48388 * C1742) * C3121) *
                C48405 * C106) *
               C48166) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C47163 +
            (C113 * C123 + C48388 * C136) * C48243 -
            (C113 * C308 + C48388 * C318) * C47155 -
            (C113 * C319 + C48388 * C338) * C48250 +
            (C113 * C309 + C48388 * C320) * C47169 +
            (C113 * C321 + C48388 * C339) * C3121) *
               C48405 * C104 +
           (C3129 + C3130 - C3131 - C3132 + C3133 + C3134) * C48405 * C105 +
           C3152 * C106) *
              C48156 * C48285 +
          (((C113 * C1013 + C48388 * C1018) * C47155 -
            ((C113 * C537 + C48388 * C554) * C48243 +
             (C113 * C524 + C48388 * C538) * C47163) +
            (C113 * C1019 + C48388 * C1028) * C48250 -
            (C113 * C1417 + C48388 * C1426) * C47169 -
            (C113 * C1427 + C48388 * C1444) * C3121) *
               C48405 * C104 +
           (C3453 - (C3454 + C3455) + C3456 - C3457 - C3458) * C48405 * C105 +
           (C3459 - (C3460 + C3461) + C3462 - C3463 - C3464) * C48405 * C106) *
              C48156 * C48292 +
          (((C113 * C526 + C48388 * C541) * C47163 +
            (C113 * C542 + C48388 * C556) * C48243 -
            (C113 * C1420 + C48388 * C1432) * C47155 -
            (C113 * C1433 + C48388 * C1447) * C48250 +
            (C113 * C1421 + C48388 * C1434) * C47169 +
            (C113 * C1435 + C48388 * C1448) * C3121) *
               C48405 * C104 +
           (C592 * C47163 + C593 * C48243 - C2354 * C47155 - C2355 * C48250 +
            (C113 * C1423 + C48388 * C1438) * C47169 +
            (C113 * C1439 + C48388 * C1450) * C3121) *
               C48405 * C105 +
           (C594 * C47163 + C595 * C48243 - C2356 * C47155 - C2357 * C48250 +
            (C113 * C1425 + C48388 * C1442) * C47169 +
            (C113 * C1443 + C48388 * C1452) * C3121) *
               C48405 * C106) *
              C48156 * C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C2827 +
            (C113 * C123 + C48388 * C136) * C48548 -
            (C113 * C308 + C48388 * C318) * C2828 -
            (C113 * C319 + C48388 * C338) * C48544 +
            (C113 * C309 + C48388 * C320) * C2829 +
            (C113 * C321 + C48388 * C339) * C48534 -
            (C113 * C1283 + C48388 * C1289) * C2830 -
            (C113 * C1290 + C48388 * C1301) * C48512) *
               C48405 * C104 +
           (C2832 + C2833 - C2834 - C2835 + C2836 + C2837 - C2838 - C2839) *
               C48405 * C105 +
           (C2840 + C2841 - C2842 - C2843 + C2844 + C2845 - C2846 - C2847) *
               C48405 * C106) *
              C48156 * C3562 +
          (((C113 * C1013 + C48388 * C1018) * C2828 -
            ((C113 * C537 + C48388 * C554) * C48548 +
             (C113 * C524 + C48388 * C538) * C2827) +
            (C113 * C1019 + C48388 * C1028) * C48544 -
            (C113 * C1417 + C48388 * C1426) * C2829 -
            (C113 * C1427 + C48388 * C1444) * C48534 +
            (C113 * C1865 + C48388 * C1868) * C2830 +
            (C113 * C1869 + C48388 * C1874) * C48512) *
               C48405 * C104 +
           (C1052 * C2828 - (C587 * C48548 + C586 * C2827) + C1053 * C48544 -
            C1760 * C2829 - C1761 * C48534 +
            (C113 * C1866 + C48388 * C1870) * C2830 +
            (C113 * C1871 + C48388 * C1875) * C48512) *
               C48405 * C105 +
           (C1054 * C2828 - (C589 * C48548 + C588 * C2827) + C1056 * C48544 -
            C1762 * C2829 - C1763 * C48534 +
            (C113 * C1867 + C48388 * C1872) * C2830 +
            (C113 * C1873 + C48388 * C1876) * C48512) *
               C48405 * C106) *
              C48156 * C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2697 +
             (C113 * C123 + C48388 * C136) * C2691 -
             (C113 * C308 + C48388 * C318) * C2698 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C48405 * C104 +
            (C2700 + C2701 - C2702 - C2703) * C48405 * C105 + C2722 * C106) *
               C48538 +
           ((C2702 - (C2701 + C2700) + C2703) * C48405 * C104 +
            (C2706 - (C2705 + C2704) + C2707) * C48405 * C105 + C2723 * C106) *
               C48525 +
           (C2722 * C104 + (C2710 + C2709 - C2708 - C2711) * C48405 * C105 +
            (C2712 + C2713 - C2714 - C2715) * C48405 * C106) *
               C48496) *
              C3562 +
          ((((C113 * C1013 + C48388 * C1018) * C2698 -
             ((C113 * C537 + C48388 * C554) * C2691 +
              (C113 * C524 + C48388 * C538) * C2697) +
             (C113 * C1019 + C48388 * C1028) * C48247) *
                C48405 * C104 +
            (C2994 - (C2995 + C2996) + C2997) * C48405 * C105 + C3306 * C106) *
               C48538 +
           ((C2996 + C2995 - C2994 - C2997) * C48405 * C104 +
            (C3000 + C2999 - C2998 - C3001) * C48405 * C105 +
            (C3300 + C3301 - C3302 - C3303) * C48405 * C106) *
               C48525 +
           (C3306 * C104 + (C3302 - (C3301 + C3300) + C3303) * C48405 * C105 +
            ((C113 * C1017 + C48388 * C1026) * C2698 -
             (C864 * C2691 + C865 * C2697) +
             (C113 * C1027 + C48388 * C1032) * C48247) *
                C48405 * C106) *
               C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C2697 +
            (C113 * C123 + C48388 * C136) * C2691 -
            (C113 * C308 + C48388 * C318) * C2698 -
            (C113 * C319 + C48388 * C338) * C48247) *
               C48405 * C104 +
           (C2700 + C2701 - C2702 - C2703) * C48405 * C105 + C2722 * C106) *
              C48156 * C48549 +
          (((C113 * C1013 + C48388 * C1018) * C2698 -
            ((C113 * C537 + C48388 * C554) * C2691 +
             (C113 * C524 + C48388 * C538) * C2697) +
            (C113 * C1019 + C48388 * C1028) * C48247) *
               C48405 * C104 +
           (C2994 - (C2995 + C2996) + C2997) * C48405 * C105 + C3306 * C106) *
              C48156 * C48546 +
          (((C113 * C526 + C48388 * C541) * C2697 +
            (C113 * C542 + C48388 * C556) * C2691 -
            (C113 * C1420 + C48388 * C1432) * C2698 -
            (C113 * C1433 + C48388 * C1447) * C48247) *
               C48405 * C104 +
           (C3002 + C3003 - C3004 - C3005) * C48405 * C105 +
           (C3006 + C3007 - C3008 - C3009) * C48405 * C106) *
              C48156 * C48537 +
          (((C113 * C2581 + C48388 * C2584) * C2698 -
            ((C113 * C2177 + C48388 * C2187) * C2691 +
             (C113 * C2169 + C48388 * C2178) * C2697) +
            (C113 * C2585 + C48388 * C2590) * C48247) *
               C48405 * C104 +
           ((C113 * C2582 + C48388 * C2586) * C2698 -
            (C2477 * C2691 + C2476 * C2697) +
            (C113 * C2587 + C48388 * C2591) * C48247) *
               C48405 * C105 +
           ((C113 * C2583 + C48388 * C2588) * C2698 -
            (C2479 * C2691 + C2478 * C2697) +
            (C113 * C2589 + C48388 * C2592) * C48247) *
               C48405 * C106) *
              C48156 * C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2697 +
             (C113 * C123 + C48388 * C136) * C2691 -
             (C113 * C308 + C48388 * C318) * C2698 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C48405 * C104 +
            (C2700 + C2701 - C2702 - C2703) * C48405 * C105 + C2722 * C106) *
               C48456 +
           ((C2702 - (C2701 + C2700) + C2703) * C48405 * C104 +
            (C2706 - (C2705 + C2704) + C2707) * C48405 * C105 + C2723 * C106) *
               C48166) *
              C48285 +
          ((((C113 * C1013 + C48388 * C1018) * C2698 -
             ((C113 * C537 + C48388 * C554) * C2691 +
              (C113 * C524 + C48388 * C538) * C2697) +
             (C113 * C1019 + C48388 * C1028) * C48247) *
                C48405 * C104 +
            (C2994 - (C2995 + C2996) + C2997) * C48405 * C105 + C3306 * C106) *
               C48456 +
           ((C2996 + C2995 - C2994 - C2997) * C48405 * C104 +
            (C3000 + C2999 - C2998 - C3001) * C48405 * C105 +
            (C3300 + C3301 - C3302 - C3303) * C48405 * C106) *
               C48166) *
              C48292 +
          ((((C113 * C526 + C48388 * C541) * C2697 +
             (C113 * C542 + C48388 * C556) * C2691 -
             (C113 * C1420 + C48388 * C1432) * C2698 -
             (C113 * C1433 + C48388 * C1447) * C48247) *
                C48405 * C104 +
            (C3002 + C3003 - C3004 - C3005) * C48405 * C105 +
            (C3006 + C3007 - C3008 - C3009) * C48405 * C106) *
               C48456 +
           ((C3004 - (C3003 + C3002) + C3005) * C48405 * C104 +
            (C3008 - (C3007 + C3006) + C3009) * C48405 * C105 +
            ((C113 * C2337 + C48388 * C2338) * C2698 -
             (C596 * C2691 + C597 * C2697) +
             (C113 * C2339 + C48388 * C2340) * C48247) *
                C48405 * C106) *
               C48166) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2697 +
             (C113 * C123 + C48388 * C136) * C2691 -
             (C113 * C308 + C48388 * C318) * C2698 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C48405 * C104 +
            (C2700 + C2701 - C2702 - C2703) * C48405 * C105 + C2722 * C106) *
               C48538 +
           ((C2702 - (C2701 + C2700) + C2703) * C48405 * C104 +
            (C2706 - (C2705 + C2704) + C2707) * C48405 * C105 + C2723 * C106) *
               C48525 +
           (C2722 * C104 + (C2710 + C2709 - C2708 - C2711) * C48405 * C105 +
            (C2712 + C2713 - C2714 - C2715) * C48405 * C106) *
               C48496) *
              C3562 +
          ((((C113 * C1013 + C48388 * C1018) * C2698 -
             ((C113 * C537 + C48388 * C554) * C2691 +
              (C113 * C524 + C48388 * C538) * C2697) +
             (C113 * C1019 + C48388 * C1028) * C48247) *
                C48405 * C104 +
            (C2994 - (C2995 + C2996) + C2997) * C48405 * C105 + C3306 * C106) *
               C48538 +
           ((C2996 + C2995 - C2994 - C2997) * C48405 * C104 +
            (C3000 + C2999 - C2998 - C3001) * C48405 * C105 +
            (C3300 + C3301 - C3302 - C3303) * C48405 * C106) *
               C48525 +
           (C3306 * C104 + (C3302 - (C3301 + C3300) + C3303) * C48405 * C105 +
            ((C113 * C1017 + C48388 * C1026) * C2698 -
             (C864 * C2691 + C865 * C2697) +
             (C113 * C1027 + C48388 * C1032) * C48247) *
                C48405 * C106) *
               C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C2827 +
            (C113 * C123 + C48388 * C136) * C48548 -
            (C113 * C308 + C48388 * C318) * C2828 -
            (C113 * C319 + C48388 * C338) * C48544 +
            (C113 * C309 + C48388 * C320) * C2829 +
            (C113 * C321 + C48388 * C339) * C48534 -
            (C113 * C1283 + C48388 * C1289) * C2830 -
            (C113 * C1290 + C48388 * C1301) * C48512) *
               C48405 * C104 +
           (C2832 + C2833 - C2834 - C2835 + C2836 + C2837 - C2838 - C2839) *
               C48405 * C105 +
           (C2840 + C2841 - C2842 - C2843 + C2844 + C2845 - C2846 - C2847) *
               C48405 * C106) *
              C48156 * C3562 +
          (((C113 * C1013 + C48388 * C1018) * C2828 -
            ((C113 * C537 + C48388 * C554) * C48548 +
             (C113 * C524 + C48388 * C538) * C2827) +
            (C113 * C1019 + C48388 * C1028) * C48544 -
            (C113 * C1417 + C48388 * C1426) * C2829 -
            (C113 * C1427 + C48388 * C1444) * C48534 +
            (C113 * C1865 + C48388 * C1868) * C2830 +
            (C113 * C1869 + C48388 * C1874) * C48512) *
               C48405 * C104 +
           (C1052 * C2828 - (C587 * C48548 + C586 * C2827) + C1053 * C48544 -
            C1760 * C2829 - C1761 * C48534 +
            (C113 * C1866 + C48388 * C1870) * C2830 +
            (C113 * C1871 + C48388 * C1875) * C48512) *
               C48405 * C105 +
           (C1054 * C2828 - (C589 * C48548 + C588 * C2827) + C1056 * C48544 -
            C1762 * C2829 - C1763 * C48534 +
            (C113 * C1867 + C48388 * C1872) * C2830 +
            (C113 * C1873 + C48388 * C1876) * C48512) *
               C48405 * C106) *
              C48156 * C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1557 +
            (C113 * C123 + C48388 * C136) * C1551 -
            (C113 * C308 + C48388 * C318) * C1558 -
            (C113 * C319 + C48388 * C338) * C1552 +
            (C113 * C309 + C48388 * C320) * C1559 +
            (C113 * C321 + C48388 * C339) * C1553 -
            (C113 * C1283 + C48388 * C1289) * C1560 -
            (C113 * C1290 + C48388 * C1301) * C48512) *
               C48405 * C104 +
           (C1566 + C1567 - C1568 - C1569 + C1570 + C1571 - C1590 - C1591) *
               C48405 * C105 +
           (C1576 + C1577 - C1578 - C1579 + C1580 + C1581 - C1592 - C1593) *
               C48405 * C106) *
              C48456 +
          ((C1568 - (C1567 + C1566) + C1569 - C1570 - C1571 + C1590 + C1591) *
               C48405 * C104 +
           (C1578 - (C1577 + C1576) + C1579 - C1580 - C1581 + C1592 + C1593) *
               C48405 * C105 +
           (C388 * C1558 - (C168 * C1551 + C169 * C1557) + C389 * C1552 -
            C390 * C1559 - C391 * C1553 +
            (C113 * C1561 + C48388 * C1562) * C1560 +
            (C113 * C1563 + C48388 * C1564) * C48512) *
               C48405 * C106) *
              C48166) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C717 +
            (C113 * C123 + C48388 * C136) * C48470 -
            (C113 * C308 + C48388 * C318) * C718 -
            (C113 * C319 + C48388 * C338) * C48247) *
               C48405 * C104 +
           (C724 + C725 - C726 - C727) * C48405 * C105 + C752 * C106) *
              C713 +
          ((C726 - (C725 + C724) + C727) * C48405 * C104 +
           (C730 - (C729 + C728) + C731) * C48405 * C105 + C753 * C106) *
              C714 +
          (C752 * C104 + (C734 + C733 - C732 - C735) * C48405 * C105 +
           (C736 + C737 - C748 - C749) * C48405 * C106) *
              C715 +
          (C753 * C104 + (C748 - (C737 + C736) + C749) * C48405 * C105 +
           ((C113 * C719 + C48388 * C720) * C718 -
            (C172 * C48470 + C173 * C717) +
            (C113 * C721 + C48388 * C722) * C48247) *
               C48405 * C106) *
              C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C717 +
             (C113 * C123 + C48388 * C136) * C48470 -
             (C113 * C308 + C48388 * C318) * C718 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C48405 * C104 +
            (C724 + C725 - C726 - C727) * C48405 * C105 + C752 * C106) *
               C48456 +
           ((C726 - (C725 + C724) + C727) * C48405 * C104 +
            (C730 - (C729 + C728) + C731) * C48405 * C105 + C753 * C106) *
               C48166) *
              C1987 +
          ((((C113 * C1013 + C48388 * C1018) * C718 -
             ((C113 * C537 + C48388 * C554) * C48470 +
              (C113 * C524 + C48388 * C538) * C717) +
             (C113 * C1019 + C48388 * C1028) * C48247) *
                C48405 * C104 +
            (C1059 - (C1036 + C1037) + C1060) * C48405 * C105 + C1067 * C106) *
               C48456 +
           ((C1037 + C1036 - C1059 - C1060) * C48405 * C104 +
            (C1043 + C1042 - C1061 - C1062) * C48405 * C105 +
            (C1046 + C1047 - C1063 - C1064) * C48405 * C106) *
               C48166) *
              C1988 +
          ((((C113 * C526 + C48388 * C541) * C717 +
             (C113 * C542 + C48388 * C556) * C48470 -
             (C113 * C1420 + C48388 * C1432) * C718 -
             (C113 * C1433 + C48388 * C1447) * C48247) *
                C48405 * C104 +
            (C2342 + C2343 - C2358 - C2359) * C48405 * C105 +
            (C2348 + C2349 - C2360 - C2361) * C48405 * C106) *
               C48456 +
           ((C2358 - (C2343 + C2342) + C2359) * C48405 * C104 +
            (C2360 - (C2349 + C2348) + C2361) * C48405 * C105 +
            ((C113 * C2337 + C48388 * C2338) * C718 -
             (C596 * C48470 + C597 * C717) +
             (C113 * C2339 + C48388 * C2340) * C48247) *
                C48405 * C106) *
               C48166) *
              C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1557 +
            (C113 * C123 + C48388 * C136) * C1551 -
            (C113 * C308 + C48388 * C318) * C1558 -
            (C113 * C319 + C48388 * C338) * C1552 +
            (C113 * C309 + C48388 * C320) * C1559 +
            (C113 * C321 + C48388 * C339) * C1553 -
            (C113 * C1283 + C48388 * C1289) * C1560 -
            (C113 * C1290 + C48388 * C1301) * C48512) *
               C48405 * C104 +
           (C1566 + C1567 - C1568 - C1569 + C1570 + C1571 - C1590 - C1591) *
               C48405 * C105 +
           (C1576 + C1577 - C1578 - C1579 + C1580 + C1581 - C1592 - C1593) *
               C48405 * C106) *
              C48156 * C48471 +
          (((C113 * C1013 + C48388 * C1018) * C1558 -
            ((C113 * C537 + C48388 * C554) * C1551 +
             (C113 * C524 + C48388 * C538) * C1557) +
            (C113 * C1019 + C48388 * C1028) * C1552 -
            (C113 * C1417 + C48388 * C1426) * C1559 -
            (C113 * C1427 + C48388 * C1444) * C1553 +
            (C113 * C1865 + C48388 * C1868) * C1560 +
            (C113 * C1869 + C48388 * C1874) * C48512) *
               C48405 * C104 +
           (C1052 * C1558 - (C587 * C1551 + C586 * C1557) + C1053 * C1552 -
            C1760 * C1559 - C1761 * C1553 +
            (C113 * C1866 + C48388 * C1870) * C1560 +
            (C113 * C1871 + C48388 * C1875) * C48512) *
               C48405 * C105 +
           (C1054 * C1558 - (C589 * C1551 + C588 * C1557) + C1056 * C1552 -
            C1762 * C1559 - C1763 * C1553 +
            (C113 * C1867 + C48388 * C1872) * C1560 +
            (C113 * C1873 + C48388 * C1876) * C48512) *
               C48405 * C106) *
              C48156 * C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C717 +
             (C113 * C123 + C48388 * C136) * C48470 -
             (C113 * C308 + C48388 * C318) * C718 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C48405 * C104 +
            (C724 + C725 - C726 - C727) * C48405 * C105 + C752 * C106) *
               C302 +
           ((C726 - (C725 + C724) + C727) * C48405 * C104 +
            (C730 - (C729 + C728) + C731) * C48405 * C105 + C753 * C106) *
               C303 +
           (C752 * C104 + (C734 + C733 - C732 - C735) * C48405 * C105 +
            (C736 + C737 - C748 - C749) * C48405 * C106) *
               C48496) *
              C48471 +
          ((((C113 * C1013 + C48388 * C1018) * C718 -
             ((C113 * C537 + C48388 * C554) * C48470 +
              (C113 * C524 + C48388 * C538) * C717) +
             (C113 * C1019 + C48388 * C1028) * C48247) *
                C48405 * C104 +
            (C1059 - (C1036 + C1037) + C1060) * C48405 * C105 + C1067 * C106) *
               C302 +
           ((C1037 + C1036 - C1059 - C1060) * C48405 * C104 +
            (C1043 + C1042 - C1061 - C1062) * C48405 * C105 +
            (C1046 + C1047 - C1063 - C1064) * C48405 * C106) *
               C303 +
           (C1067 * C104 + (C1063 - (C1047 + C1046) + C1064) * C48405 * C105 +
            ((C113 * C1017 + C48388 * C1026) * C718 -
             (C864 * C48470 + C865 * C717) +
             (C113 * C1027 + C48388 * C1032) * C48247) *
                C48405 * C106) *
               C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C717 +
            (C113 * C123 + C48388 * C136) * C48470 -
            (C113 * C308 + C48388 * C318) * C718 -
            (C113 * C319 + C48388 * C338) * C48247) *
               C48405 * C104 +
           (C724 + C725 - C726 - C727) * C48405 * C105 + C752 * C106) *
              C48156 * C2459 +
          (((C113 * C1013 + C48388 * C1018) * C718 -
            ((C113 * C537 + C48388 * C554) * C48470 +
             (C113 * C524 + C48388 * C538) * C717) +
            (C113 * C1019 + C48388 * C1028) * C48247) *
               C48405 * C104 +
           (C1059 - (C1036 + C1037) + C1060) * C48405 * C105 + C1067 * C106) *
              C48156 * C2460 +
          (((C113 * C526 + C48388 * C541) * C717 +
            (C113 * C542 + C48388 * C556) * C48470 -
            (C113 * C1420 + C48388 * C1432) * C718 -
            (C113 * C1433 + C48388 * C1447) * C48247) *
               C48405 * C104 +
           (C2342 + C2343 - C2358 - C2359) * C48405 * C105 +
           (C2348 + C2349 - C2360 - C2361) * C48405 * C106) *
              C48156 * C2461 +
          (((C113 * C2581 + C48388 * C2584) * C718 -
            ((C113 * C2177 + C48388 * C2187) * C48470 +
             (C113 * C2169 + C48388 * C2178) * C717) +
            (C113 * C2585 + C48388 * C2590) * C48247) *
               C48405 * C104 +
           ((C113 * C2582 + C48388 * C2586) * C718 -
            (C2477 * C48470 + C2476 * C717) +
            (C113 * C2587 + C48388 * C2591) * C48247) *
               C48405 * C105 +
           ((C113 * C2583 + C48388 * C2588) * C718 -
            (C2479 * C48470 + C2478 * C717) +
            (C113 * C2589 + C48388 * C2592) * C48247) *
               C48405 * C106) *
              C48156 * C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C48388 * C122) * C114 +
                (C113 * C123 + C48388 * C136) * C48184) *
                   C48405 * C104 +
               (C174 + C175) * C48405 * C105 + C187 * C106) *
                  C107 -
              (C188 * C106 + (C177 + C176) * C48405 * C105 +
               (C175 + C174) * C48405 * C104) *
                  C108 +
              (C187 * C104 + (C179 + C178) * C48405 * C105 + C189 * C106) *
                  C109 -
              ((C182 + C183) * C48405 * C106 + (C181 + C180) * C48405 * C105 +
               C188 * C104) *
                  C110 +
              (C189 * C104 + (C183 + C182) * C48405 * C105 +
               ((C113 * C121 + C48388 * C134) * C114 +
                (C113 * C135 + C48388 * C142) * C48184) *
                   C48405 * C106) *
                  C111) *
             C48202 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C48388 * C122) * C305 +
                (C113 * C123 + C48388 * C136) * C48541 -
                (C113 * C308 + C48388 * C318) * C306 -
                (C113 * C319 + C48388 * C338) * C48529 +
                (C113 * C309 + C48388 * C320) * C307 +
                (C113 * C321 + C48388 * C339) * C48502) *
                   C48405 * C104 +
               (C349 + C350 - C392 - C393 + C394 + C395) * C48405 * C105 +
               C408 * C106) *
                  C302 +
              ((C392 - (C350 + C349) + C393 - C394 - C395) * C48405 * C104 +
               (C396 - (C360 + C359) + C397 - C398 - C399) * C48405 * C105 +
               (C400 - (C371 + C372) + C401 - C402 - C403) * C48405 * C106) *
                  C303 +
              (C408 * C104 +
               (C372 + C371 - C400 - C401 + C402 + C403) * C48405 * C105 +
               (C170 * C305 + C171 * C48541 -
                (C113 * C316 + C48388 * C334) * C306 -
                (C113 * C335 + C48388 * C346) * C48529 +
                (C113 * C317 + C48388 * C336) * C307 +
                (C113 * C337 + C48388 * C347) * C48502) *
                   C48405 * C106) *
                  C48496) *
             C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C48405 * C104 +
            (C174 + C175) * C48405 * C105 + C187 * C106) *
               C302 -
           (C188 * C106 + (C177 + C176) * C48405 * C105 +
            (C175 + C174) * C48405 * C104) *
               C303 +
           (C187 * C104 + (C179 + C178) * C48405 * C105 + C189 * C106) *
               C48496) *
              C48542 +
          (((C598 + C599) * C48405 * C104 + (C600 + C601) * C48405 * C105 +
            (C602 + C603) * C48405 * C106) *
               C303 -
           (C612 * C106 + (C599 + C598) * C48405 * C105 +
            ((C113 * C537 + C48388 * C554) * C48184 +
             (C113 * C524 + C48388 * C538) * C114) *
                C48405 * C104) *
               C302 -
           (((C113 * C539 + C48388 * C555) * C48184 +
             (C113 * C525 + C48388 * C540) * C114) *
                C48405 * C106 +
            (C603 + C602) * C48405 * C105 + C612 * C104) *
               C48496) *
              C48531 +
          ((((C113 * C526 + C48388 * C541) * C114 +
             (C113 * C542 + C48388 * C556) * C48184) *
                C48405 * C104 +
            (C604 + C605) * C48405 * C105 + C613 * C106) *
               C302 -
           ((C608 + C609) * C48405 * C106 + (C607 + C606) * C48405 * C105 +
            (C605 + C604) * C48405 * C104) *
               C303 +
           (C613 * C104 + (C609 + C608) * C48405 * C105 +
            ((C113 * C530 + C48388 * C549) * C114 +
             (C113 * C550 + C48388 * C560) * C48184) *
                C48405 * C106) *
               C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1183 +
            (C113 * C123 + C48388 * C136) * C1177 -
            (C113 * C308 + C48388 * C318) * C1184 -
            (C113 * C319 + C48388 * C338) * C1178 +
            (C113 * C309 + C48388 * C320) * C1185 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C48405 * C104 +
           (C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C48405 * C105 +
           C1210 * C106) *
              C48538 +
          ((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C48405 * C104 +
           (C1195 - (C1194 + C1193) + C1196 - C1197 - C1198) * C48405 * C105 +
           (C1199 - (C1200 + C1201) + C1202 - C1203 - C1204) * C48405 * C106) *
              C48525 +
          (C1210 * C104 +
           (C1201 + C1200 - C1199 - C1202 + C1203 + C1204) * C48405 * C105 +
           (C170 * C1183 + C171 * C1177 - C744 * C1184 - C745 * C1178 +
            (C113 * C317 + C48388 * C336) * C1185 +
            (C113 * C337 + C48388 * C347) * C48502) *
               C48405 * C106) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48388 * C122) * C1278 +
           (C113 * C123 + C48388 * C136) * C1272 -
           (C113 * C308 + C48388 * C318) * C1279 -
           (C113 * C319 + C48388 * C338) * C1273 +
           (C113 * C309 + C48388 * C320) * C1280 +
           (C113 * C321 + C48388 * C339) * C1274 -
           (C113 * C1283 + C48388 * C1289) * C1281 -
           (C113 * C1290 + C48388 * C1301) * C1275 +
           (C113 * C1284 + C48388 * C1291) * C1282 +
           (C113 * C1292 + C48388 * C1302) * C1276) *
              C48405 * C104 +
          (C164 * C1278 + C165 * C1272 - C379 * C1279 - C380 * C1273 +
           C381 * C1280 + C382 * C1274 -
           (C113 * C1285 + C48388 * C1293) * C1281 -
           (C113 * C1294 + C48388 * C1303) * C1275 +
           (C113 * C1286 + C48388 * C1295) * C1282 +
           (C113 * C1296 + C48388 * C1304) * C1276) *
              C48405 * C105 +
          (C166 * C1278 + C167 * C1272 - C384 * C1279 - C385 * C1273 +
           C386 * C1280 + C387 * C1274 -
           (C113 * C1287 + C48388 * C1297) * C1281 -
           (C113 * C1298 + C48388 * C1305) * C1275 +
           (C113 * C1288 + C48388 * C1299) * C1282 +
           (C113 * C1300 + C48388 * C1306) * C1276) *
              C48405 * C106) *
         C48156 * C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1183 +
            (C113 * C123 + C48388 * C136) * C1177 -
            (C113 * C308 + C48388 * C318) * C1184 -
            (C113 * C319 + C48388 * C338) * C1178 +
            (C113 * C309 + C48388 * C320) * C1185 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C48405 * C104 +
           (C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C48405 * C105 +
           C1210 * C106) *
              C48156 * C48542 +
          (((C113 * C1013 + C48388 * C1018) * C1184 -
            ((C113 * C537 + C48388 * C554) * C1177 +
             (C113 * C524 + C48388 * C538) * C1183) +
            (C113 * C1019 + C48388 * C1028) * C1178 -
            (C113 * C1417 + C48388 * C1426) * C1185 -
            (C113 * C1427 + C48388 * C1444) * C48502) *
               C48405 * C104 +
           (C1052 * C1184 - (C587 * C1177 + C586 * C1183) + C1053 * C1178 -
            (C113 * C1418 + C48388 * C1428) * C1185 -
            (C113 * C1429 + C48388 * C1445) * C48502) *
               C48405 * C105 +
           (C1054 * C1184 - (C589 * C1177 + C588 * C1183) + C1056 * C1178 -
            (C113 * C1419 + C48388 * C1430) * C1185 -
            (C113 * C1431 + C48388 * C1446) * C48502) *
               C48405 * C106) *
              C48156 * C48531 +
          (((C113 * C526 + C48388 * C541) * C1183 +
            (C113 * C542 + C48388 * C556) * C1177 -
            (C113 * C1420 + C48388 * C1432) * C1184 -
            (C113 * C1433 + C48388 * C1447) * C1178 +
            (C113 * C1421 + C48388 * C1434) * C1185 +
            (C113 * C1435 + C48388 * C1448) * C48502) *
               C48405 * C104 +
           (C592 * C1183 + C593 * C1177 -
            (C113 * C1422 + C48388 * C1436) * C1184 -
            (C113 * C1437 + C48388 * C1449) * C1178 +
            (C113 * C1423 + C48388 * C1438) * C1185 +
            (C113 * C1439 + C48388 * C1450) * C48502) *
               C48405 * C105 +
           (C594 * C1183 + C595 * C1177 -
            (C113 * C1424 + C48388 * C1440) * C1184 -
            (C113 * C1441 + C48388 * C1451) * C1178 +
            (C113 * C1425 + C48388 * C1442) * C1185 +
            (C113 * C1443 + C48388 * C1452) * C48502) *
               C48405 * C106) *
              C48156 * C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C48405 * C104 +
            (C174 + C175) * C48405 * C105 + C187 * C106) *
               C48538 -
           (C188 * C106 + (C177 + C176) * C48405 * C105 +
            (C175 + C174) * C48405 * C104) *
               C48525 +
           (C187 * C104 + (C179 + C178) * C48405 * C105 + C189 * C106) *
               C48496) *
              C1987 +
          (((C598 + C599) * C48405 * C104 + (C600 + C601) * C48405 * C105 +
            C863 * C106) *
               C48525 -
           (C612 * C106 + (C599 + C598) * C48405 * C105 +
            ((C113 * C537 + C48388 * C554) * C48184 +
             (C113 * C524 + C48388 * C538) * C114) *
                C48405 * C104) *
               C48538 -
           ((C866 + C867) * C48405 * C106 + (C603 + C602) * C48405 * C105 +
            C612 * C104) *
               C48496) *
              C1988 +
          ((((C113 * C526 + C48388 * C541) * C114 +
             (C113 * C542 + C48388 * C556) * C48184) *
                C48405 * C104 +
            (C604 + C605) * C48405 * C105 + C613 * C106) *
               C48538 -
           ((C608 + C609) * C48405 * C106 + (C607 + C606) * C48405 * C105 +
            (C605 + C604) * C48405 * C104) *
               C48525 +
           (C613 * C104 + (C609 + C608) * C48405 * C105 +
            ((C113 * C530 + C48388 * C549) * C114 +
             (C113 * C550 + C48388 * C560) * C48184) *
                C48405 * C106) *
               C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C305 +
            (C113 * C123 + C48388 * C136) * C48541 -
            (C113 * C308 + C48388 * C318) * C306 -
            (C113 * C319 + C48388 * C338) * C48529 +
            (C113 * C309 + C48388 * C320) * C307 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C48405 * C104 +
           (C349 + C350 - C392 - C393 + C394 + C395) * C48405 * C105 +
           C408 * C106) *
              C48156 * C1987 +
          (((C113 * C1013 + C48388 * C1018) * C306 -
            ((C113 * C537 + C48388 * C554) * C48541 +
             (C113 * C524 + C48388 * C538) * C305) +
            (C113 * C1019 + C48388 * C1028) * C48529 -
            (C113 * C1417 + C48388 * C1426) * C307 -
            (C113 * C1427 + C48388 * C1444) * C48502) *
               C48405 * C104 +
           (C1052 * C306 - (C587 * C48541 + C586 * C305) + C1053 * C48529 -
            C1760 * C307 - C1761 * C48502) *
               C48405 * C105 +
           (C1054 * C306 - (C589 * C48541 + C588 * C305) + C1056 * C48529 -
            C1762 * C307 - C1763 * C48502) *
               C48405 * C106) *
              C48156 * C1988 +
          (((C113 * C526 + C48388 * C541) * C305 +
            (C113 * C542 + C48388 * C556) * C48541 -
            (C113 * C1420 + C48388 * C1432) * C306 -
            (C113 * C1433 + C48388 * C1447) * C48529 +
            (C113 * C1421 + C48388 * C1434) * C307 +
            (C113 * C1435 + C48388 * C1448) * C48502) *
               C48405 * C104 +
           (C592 * C305 + C593 * C48541 -
            (C113 * C1422 + C48388 * C1436) * C306 -
            (C113 * C1437 + C48388 * C1449) * C48529 +
            (C113 * C1423 + C48388 * C1438) * C307 +
            (C113 * C1439 + C48388 * C1450) * C48502) *
               C48405 * C105 +
           (C594 * C305 + C595 * C48541 -
            (C113 * C1424 + C48388 * C1440) * C306 -
            (C113 * C1441 + C48388 * C1451) * C48529 +
            (C113 * C1425 + C48388 * C1442) * C307 +
            (C113 * C1443 + C48388 * C1452) * C48502) *
               C48405 * C106) *
              C48156 * C48505)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C114 +
            (C113 * C123 + C48388 * C136) * C48184) *
               C48405 * C104 +
           (C174 + C175) * C48405 * C105 + C187 * C106) *
              C48156 * C2162 -
          (C612 * C106 + (C599 + C598) * C48405 * C105 +
           ((C113 * C537 + C48388 * C554) * C48184 +
            (C113 * C524 + C48388 * C538) * C114) *
               C48405 * C104) *
              C48156 * C2163 +
          (((C113 * C526 + C48388 * C541) * C114 +
            (C113 * C542 + C48388 * C556) * C48184) *
               C48405 * C104 +
           (C604 + C605) * C48405 * C105 + C613 * C106) *
              C48156 * C2164 -
          (((C113 * C2173 + C48388 * C2185) * C48184 +
            (C113 * C2167 + C48388 * C2174) * C114) *
               C48405 * C106 +
           ((C113 * C2175 + C48388 * C2186) * C48184 +
            (C113 * C2168 + C48388 * C2176) * C114) *
               C48405 * C105 +
           ((C113 * C2177 + C48388 * C2187) * C48184 +
            (C113 * C2169 + C48388 * C2178) * C114) *
               C48405 * C104) *
              C48156 * C2165 +
          (((C113 * C2170 + C48388 * C2179) * C114 +
            (C113 * C2180 + C48388 * C2188) * C48184) *
               C48405 * C104 +
           ((C113 * C2171 + C48388 * C2181) * C114 +
            (C113 * C2182 + C48388 * C2189) * C48184) *
               C48405 * C105 +
           ((C113 * C2172 + C48388 * C2183) * C114 +
            (C113 * C2184 + C48388 * C2190) * C48184) *
               C48405 * C106) *
              C48156 * C2166)) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1183 +
             (C113 * C123 + C48388 * C136) * C1177 -
             (C113 * C308 + C48388 * C318) * C1184 -
             (C113 * C319 + C48388 * C338) * C1178 +
             (C113 * C309 + C48388 * C320) * C1185 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C48405 * C104 +
            (C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C48405 * C105 +
            C1210 * C106) *
               C48456 +
           ((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C48405 * C104 +
            (C1195 - (C1194 + C1193) + C1196 - C1197 - C1198) * C48405 * C105 +
            (C1199 - (C1200 + C1201) + C1202 - C1203 - C1204) * C48405 * C106) *
               C48166) *
              C48471 +
          ((((C113 * C1013 + C48388 * C1018) * C1184 -
             ((C113 * C537 + C48388 * C554) * C1177 +
              (C113 * C524 + C48388 * C538) * C1183) +
             (C113 * C1019 + C48388 * C1028) * C1178 -
             (C113 * C1417 + C48388 * C1426) * C1185 -
             (C113 * C1427 + C48388 * C1444) * C48502) *
                C48405 * C104 +
            (C1744 - (C1745 + C1746) + C1747 - C1764 - C1765) * C48405 * C105 +
            (C1752 - (C1753 + C1754) + C1755 - C1766 - C1767) * C48405 * C106) *
               C48456 +
           ((C1746 + C1745 - C1744 - C1747 + C1764 + C1765) * C48405 * C104 +
            (C1754 + C1753 - C1752 - C1755 + C1766 + C1767) * C48405 * C105 +
            (C590 * C1183 + C591 * C1177 - C1057 * C1184 - C1058 * C1178 +
             (C113 * C1739 + C48388 * C1740) * C1185 +
             (C113 * C1741 + C48388 * C1742) * C48502) *
                C48405 * C106) *
               C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C48405 * C104 +
            (C174 + C175) * C48405 * C105 + C187 * C106) *
               C713 -
           (C188 * C106 + (C177 + C176) * C48405 * C105 +
            (C175 + C174) * C48405 * C104) *
               C714 +
           (C187 * C104 + (C179 + C178) * C48405 * C105 + C189 * C106) * C715 -
           ((C182 + C183) * C48405 * C106 + (C181 + C180) * C48405 * C105 +
            C188 * C104) *
               C48506) *
              C48471 +
          (((C598 + C599) * C48405 * C104 + (C600 + C601) * C48405 * C105 +
            C863 * C106) *
               C714 -
           (C612 * C106 + (C599 + C598) * C48405 * C105 +
            ((C113 * C537 + C48388 * C554) * C48184 +
             (C113 * C524 + C48388 * C538) * C114) *
                C48405 * C104) *
               C713 -
           ((C866 + C867) * C48405 * C106 + (C603 + C602) * C48405 * C105 +
            C612 * C104) *
               C715 +
           (C863 * C104 + (C867 + C866) * C48405 * C105 +
            ((C113 * C853 + C48388 * C854) * C114 +
             (C113 * C855 + C48388 * C856) * C48184) *
                C48405 * C106) *
               C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C48405 * C104 +
            (C174 + C175) * C48405 * C105 + C187 * C106) *
               C48456 -
           (C188 * C106 + (C177 + C176) * C48405 * C105 +
            (C175 + C174) * C48405 * C104) *
               C48166) *
              C2459 +
          (((C598 + C599) * C48405 * C104 + (C600 + C601) * C48405 * C105 +
            C863 * C106) *
               C48166 -
           (C612 * C106 + (C599 + C598) * C48405 * C105 +
            ((C113 * C537 + C48388 * C554) * C48184 +
             (C113 * C524 + C48388 * C538) * C114) *
                C48405 * C104) *
               C48456) *
              C2460 +
          ((((C113 * C526 + C48388 * C541) * C114 +
             (C113 * C542 + C48388 * C556) * C48184) *
                C48405 * C104 +
            (C604 + C605) * C48405 * C105 + C613 * C106) *
               C48456 -
           ((C608 + C609) * C48405 * C106 + (C607 + C606) * C48405 * C105 +
            (C605 + C604) * C48405 * C104) *
               C48166) *
              C2461 +
          (((C2480 + C2481) * C48405 * C104 + (C2482 + C2483) * C48405 * C105 +
            ((C113 * C2463 + C48388 * C2464) * C114 +
             (C113 * C2465 + C48388 * C2466) * C48184) *
                C48405 * C106) *
               C48166 -
           ((C2483 + C2482) * C48405 * C106 + (C2481 + C2480) * C48405 * C105 +
            ((C113 * C2177 + C48388 * C2187) * C48184 +
             (C113 * C2169 + C48388 * C2178) * C114) *
                C48405 * C104) *
               C48456) *
              C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C305 +
            (C113 * C123 + C48388 * C136) * C48541 -
            (C113 * C308 + C48388 * C318) * C306 -
            (C113 * C319 + C48388 * C338) * C48529 +
            (C113 * C309 + C48388 * C320) * C307 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C48405 * C104 +
           (C349 + C350 - C392 - C393 + C394 + C395) * C48405 * C105 +
           C408 * C106) *
              C302 +
          ((C392 - (C350 + C349) + C393 - C394 - C395) * C48405 * C104 +
           (C396 - (C360 + C359) + C397 - C398 - C399) * C48405 * C105 +
           (C400 - (C371 + C372) + C401 - C402 - C403) * C48405 * C106) *
              C303 +
          (C408 * C104 +
           (C372 + C371 - C400 - C401 + C402 + C403) * C48405 * C105 +
           (C170 * C305 + C171 * C48541 - (C113 * C316 + C48388 * C334) * C306 -
            (C113 * C335 + C48388 * C346) * C48529 +
            (C113 * C317 + C48388 * C336) * C307 +
            (C113 * C337 + C48388 * C347) * C48502) *
               C48405 * C106) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C114 +
            (C113 * C123 + C48388 * C136) * C48184) *
               C48405 * C104 +
           (C174 + C175) * C48405 * C105 + C187 * C106) *
              C107 -
          (C188 * C106 + (C177 + C176) * C48405 * C105 +
           (C175 + C174) * C48405 * C104) *
              C108 +
          (C187 * C104 + (C179 + C178) * C48405 * C105 + C189 * C106) * C109 -
          ((C182 + C183) * C48405 * C106 + (C181 + C180) * C48405 * C105 +
           C188 * C104) *
              C110 +
          (C189 * C104 + (C183 + C182) * C48405 * C105 +
           ((C113 * C121 + C48388 * C134) * C114 +
            (C113 * C135 + C48388 * C142) * C48184) *
               C48405 * C106) *
              C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1183 +
            (C113 * C123 + C48388 * C136) * C1177 -
            (C113 * C308 + C48388 * C318) * C1184 -
            (C113 * C319 + C48388 * C338) * C1178 +
            (C113 * C309 + C48388 * C320) * C1185 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C48405 * C104 +
           (C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C48405 * C105 +
           C1210 * C106) *
              C48538 +
          ((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C48405 * C104 +
           (C1195 - (C1194 + C1193) + C1196 - C1197 - C1198) * C48405 * C105 +
           (C1199 - (C1200 + C1201) + C1202 - C1203 - C1204) * C48405 * C106) *
              C48525 +
          (C1210 * C104 +
           (C1201 + C1200 - C1199 - C1202 + C1203 + C1204) * C48405 * C105 +
           (C170 * C1183 + C171 * C1177 - C744 * C1184 - C745 * C1178 +
            (C113 * C317 + C48388 * C336) * C1185 +
            (C113 * C337 + C48388 * C347) * C48502) *
               C48405 * C106) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48388 * C122) * C1278 +
           (C113 * C123 + C48388 * C136) * C1272 -
           (C113 * C308 + C48388 * C318) * C1279 -
           (C113 * C319 + C48388 * C338) * C1273 +
           (C113 * C309 + C48388 * C320) * C1280 +
           (C113 * C321 + C48388 * C339) * C1274 -
           (C113 * C1283 + C48388 * C1289) * C1281 -
           (C113 * C1290 + C48388 * C1301) * C1275 +
           (C113 * C1284 + C48388 * C1291) * C1282 +
           (C113 * C1292 + C48388 * C1302) * C1276) *
              C48405 * C104 +
          (C164 * C1278 + C165 * C1272 - C379 * C1279 - C380 * C1273 +
           C381 * C1280 + C382 * C1274 -
           (C113 * C1285 + C48388 * C1293) * C1281 -
           (C113 * C1294 + C48388 * C1303) * C1275 +
           (C113 * C1286 + C48388 * C1295) * C1282 +
           (C113 * C1296 + C48388 * C1304) * C1276) *
              C48405 * C105 +
          (C166 * C1278 + C167 * C1272 - C384 * C1279 - C385 * C1273 +
           C386 * C1280 + C387 * C1274 -
           (C113 * C1287 + C48388 * C1297) * C1281 -
           (C113 * C1298 + C48388 * C1305) * C1275 +
           (C113 * C1288 + C48388 * C1299) * C1282 +
           (C113 * C1300 + C48388 * C1306) * C1276) *
              C48405 * C106) *
         C48156 * C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C48405 * C104 +
            (C174 + C175) * C48405 * C105 + C187 * C106) *
               C48538 -
           (C188 * C106 + (C177 + C176) * C48405 * C105 +
            (C175 + C174) * C48405 * C104) *
               C48525 +
           (C187 * C104 + (C179 + C178) * C48405 * C105 + C189 * C106) *
               C48496) *
              C1987 +
          (((C598 + C599) * C48405 * C104 + (C600 + C601) * C48405 * C105 +
            C863 * C106) *
               C48525 -
           (C612 * C106 + (C599 + C598) * C48405 * C105 +
            ((C113 * C537 + C48388 * C554) * C48184 +
             (C113 * C524 + C48388 * C538) * C114) *
                C48405 * C104) *
               C48538 -
           ((C866 + C867) * C48405 * C106 + (C603 + C602) * C48405 * C105 +
            C612 * C104) *
               C48496) *
              C1988 +
          ((((C113 * C526 + C48388 * C541) * C114 +
             (C113 * C542 + C48388 * C556) * C48184) *
                C48405 * C104 +
            (C604 + C605) * C48405 * C105 + C613 * C106) *
               C48538 -
           ((C608 + C609) * C48405 * C106 + (C607 + C606) * C48405 * C105 +
            (C605 + C604) * C48405 * C104) *
               C48525 +
           (C613 * C104 + (C609 + C608) * C48405 * C105 +
            ((C113 * C530 + C48388 * C549) * C114 +
             (C113 * C550 + C48388 * C560) * C48184) *
                C48405 * C106) *
               C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C305 +
            (C113 * C123 + C48388 * C136) * C48541 -
            (C113 * C308 + C48388 * C318) * C306 -
            (C113 * C319 + C48388 * C338) * C48529 +
            (C113 * C309 + C48388 * C320) * C307 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C48405 * C104 +
           (C349 + C350 - C392 - C393 + C394 + C395) * C48405 * C105 +
           C408 * C106) *
              C48156 * C1987 +
          (((C113 * C1013 + C48388 * C1018) * C306 -
            ((C113 * C537 + C48388 * C554) * C48541 +
             (C113 * C524 + C48388 * C538) * C305) +
            (C113 * C1019 + C48388 * C1028) * C48529 -
            (C113 * C1417 + C48388 * C1426) * C307 -
            (C113 * C1427 + C48388 * C1444) * C48502) *
               C48405 * C104 +
           (C1052 * C306 - (C587 * C48541 + C586 * C305) + C1053 * C48529 -
            C1760 * C307 - C1761 * C48502) *
               C48405 * C105 +
           (C1054 * C306 - (C589 * C48541 + C588 * C305) + C1056 * C48529 -
            C1762 * C307 - C1763 * C48502) *
               C48405 * C106) *
              C48156 * C1988 +
          (((C113 * C526 + C48388 * C541) * C305 +
            (C113 * C542 + C48388 * C556) * C48541 -
            (C113 * C1420 + C48388 * C1432) * C306 -
            (C113 * C1433 + C48388 * C1447) * C48529 +
            (C113 * C1421 + C48388 * C1434) * C307 +
            (C113 * C1435 + C48388 * C1448) * C48502) *
               C48405 * C104 +
           (C592 * C305 + C593 * C48541 -
            (C113 * C1422 + C48388 * C1436) * C306 -
            (C113 * C1437 + C48388 * C1449) * C48529 +
            (C113 * C1423 + C48388 * C1438) * C307 +
            (C113 * C1439 + C48388 * C1450) * C48502) *
               C48405 * C105 +
           (C594 * C305 + C595 * C48541 -
            (C113 * C1424 + C48388 * C1440) * C306 -
            (C113 * C1441 + C48388 * C1451) * C48529 +
            (C113 * C1425 + C48388 * C1442) * C307 +
            (C113 * C1443 + C48388 * C1452) * C48502) *
               C48405 * C106) *
              C48156 * C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C717 +
             (C113 * C123 + C48388 * C136) * C48470 -
             (C113 * C308 + C48388 * C318) * C718 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C48405 * C104 +
            (C724 + C725 - C726 - C727) * C48405 * C105 + C752 * C106) *
               C48161 +
           ((C726 - (C725 + C724) + C727) * C48405 * C104 +
            (C730 - (C729 + C728) + C731) * C48405 * C105 + C753 * C106) *
               C48169 +
           (C752 * C104 + (C734 + C733 - C732 - C735) * C48405 * C105 +
            (C736 + C737 - C748 - C749) * C48405 * C106) *
               C3124) *
              C3562 +
          ((((C113 * C1013 + C48388 * C1018) * C718 -
             ((C113 * C537 + C48388 * C554) * C48470 +
              (C113 * C524 + C48388 * C538) * C717) +
             (C113 * C1019 + C48388 * C1028) * C48247) *
                C48405 * C104 +
            (C1059 - (C1036 + C1037) + C1060) * C48405 * C105 + C1067 * C106) *
               C48161 +
           ((C1037 + C1036 - C1059 - C1060) * C48405 * C104 +
            (C1043 + C1042 - C1061 - C1062) * C48405 * C105 +
            (C1046 + C1047 - C1063 - C1064) * C48405 * C106) *
               C48169 +
           (C1067 * C104 + (C1063 - (C1047 + C1046) + C1064) * C48405 * C105 +
            ((C113 * C1017 + C48388 * C1026) * C718 -
             (C864 * C48470 + C865 * C717) +
             (C113 * C1027 + C48388 * C1032) * C48247) *
                C48405 * C106) *
               C3124) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C717 +
             (C113 * C123 + C48388 * C136) * C48470 -
             (C113 * C308 + C48388 * C318) * C718 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C48405 * C104 +
            (C724 + C725 - C726 - C727) * C48405 * C105 + C752 * C106) *
               C2825 +
           ((C726 - (C725 + C724) + C727) * C48405 * C104 +
            (C730 - (C729 + C728) + C731) * C48405 * C105 + C753 * C106) *
               C48166) *
              C48285 +
          ((((C113 * C1013 + C48388 * C1018) * C718 -
             ((C113 * C537 + C48388 * C554) * C48470 +
              (C113 * C524 + C48388 * C538) * C717) +
             (C113 * C1019 + C48388 * C1028) * C48247) *
                C48405 * C104 +
            (C1059 - (C1036 + C1037) + C1060) * C48405 * C105 + C1067 * C106) *
               C2825 +
           ((C1037 + C1036 - C1059 - C1060) * C48405 * C104 +
            (C1043 + C1042 - C1061 - C1062) * C48405 * C105 +
            (C1046 + C1047 - C1063 - C1064) * C48405 * C106) *
               C48166) *
              C48292 +
          ((((C113 * C526 + C48388 * C541) * C717 +
             (C113 * C542 + C48388 * C556) * C48470 -
             (C113 * C1420 + C48388 * C1432) * C718 -
             (C113 * C1433 + C48388 * C1447) * C48247) *
                C48405 * C104 +
            (C2342 + C2343 - C2358 - C2359) * C48405 * C105 +
            (C2348 + C2349 - C2360 - C2361) * C48405 * C106) *
               C2825 +
           ((C2358 - (C2343 + C2342) + C2359) * C48405 * C104 +
            (C2360 - (C2349 + C2348) + C2361) * C48405 * C105 +
            ((C113 * C2337 + C48388 * C2338) * C718 -
             (C596 * C48470 + C597 * C717) +
             (C113 * C2339 + C48388 * C2340) * C48247) *
                C48405 * C106) *
               C48166) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C305 +
             (C113 * C123 + C48388 * C136) * C48541 -
             (C113 * C308 + C48388 * C318) * C306 -
             (C113 * C319 + C48388 * C338) * C48529 +
             (C113 * C309 + C48388 * C320) * C307 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C48405 * C104 +
            (C349 + C350 - C392 - C393 + C394 + C395) * C48405 * C105 +
            C408 * C106) *
               C2825 +
           ((C392 - (C350 + C349) + C393 - C394 - C395) * C48405 * C104 +
            (C396 - (C360 + C359) + C397 - C398 - C399) * C48405 * C105 +
            (C400 - (C371 + C372) + C401 - C402 - C403) * C48405 * C106) *
               C48166) *
              C3562 +
          ((((C113 * C1013 + C48388 * C1018) * C306 -
             ((C113 * C537 + C48388 * C554) * C48541 +
              (C113 * C524 + C48388 * C538) * C305) +
             (C113 * C1019 + C48388 * C1028) * C48529 -
             (C113 * C1417 + C48388 * C1426) * C307 -
             (C113 * C1427 + C48388 * C1444) * C48502) *
                C48405 * C104 +
            (C3711 - (C3712 + C3713) + C3714 - C3715 - C3716) * C48405 * C105 +
            (C3717 - (C3718 + C3719) + C3720 - C3721 - C3722) * C48405 * C106) *
               C2825 +
           ((C3713 + C3712 - C3711 - C3714 + C3715 + C3716) * C48405 * C104 +
            (C3719 + C3718 - C3717 - C3720 + C3721 + C3722) * C48405 * C105 +
            (C590 * C305 + C591 * C48541 - C1057 * C306 - C1058 * C48529 +
             (C113 * C1739 + C48388 * C1740) * C307 +
             (C113 * C1741 + C48388 * C1742) * C48502) *
                C48405 * C106) *
               C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C48405 * C104 +
            (C174 + C175) * C48405 * C105 + C187 * C106) *
               C48547 -
           (C188 * C106 + (C177 + C176) * C48405 * C105 +
            (C175 + C174) * C48405 * C104) *
               C48540 +
           (C187 * C104 + (C179 + C178) * C48405 * C105 + C189 * C106) *
               C48527 -
           ((C182 + C183) * C48405 * C106 + (C181 + C180) * C48405 * C105 +
            C188 * C104) *
               C48506) *
              C3562 +
          (((C598 + C599) * C48405 * C104 + (C600 + C601) * C48405 * C105 +
            C863 * C106) *
               C48540 -
           (C612 * C106 + (C599 + C598) * C48405 * C105 +
            ((C113 * C537 + C48388 * C554) * C48184 +
             (C113 * C524 + C48388 * C538) * C114) *
                C48405 * C104) *
               C48547 -
           ((C866 + C867) * C48405 * C106 + (C603 + C602) * C48405 * C105 +
            C612 * C104) *
               C48527 +
           (C863 * C104 + (C867 + C866) * C48405 * C105 +
            ((C113 * C853 + C48388 * C854) * C114 +
             (C113 * C855 + C48388 * C856) * C48184) *
                C48405 * C106) *
               C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C48405 * C104 +
            (C174 + C175) * C48405 * C105 + C187 * C106) *
               C2825 -
           (C188 * C106 + (C177 + C176) * C48405 * C105 +
            (C175 + C174) * C48405 * C104) *
               C48166) *
              C48549 +
          (((C598 + C599) * C48405 * C104 + (C600 + C601) * C48405 * C105 +
            C863 * C106) *
               C48166 -
           (C612 * C106 + (C599 + C598) * C48405 * C105 +
            ((C113 * C537 + C48388 * C554) * C48184 +
             (C113 * C524 + C48388 * C538) * C114) *
                C48405 * C104) *
               C2825) *
              C48546 +
          ((((C113 * C526 + C48388 * C541) * C114 +
             (C113 * C542 + C48388 * C556) * C48184) *
                C48405 * C104 +
            (C604 + C605) * C48405 * C105 + C613 * C106) *
               C2825 -
           ((C608 + C609) * C48405 * C106 + (C607 + C606) * C48405 * C105 +
            (C605 + C604) * C48405 * C104) *
               C48166) *
              C48537 +
          (((C2480 + C2481) * C48405 * C104 + (C2482 + C2483) * C48405 * C105 +
            ((C113 * C2463 + C48388 * C2464) * C114 +
             (C113 * C2465 + C48388 * C2466) * C48184) *
                C48405 * C106) *
               C48166 -
           ((C2483 + C2482) * C48405 * C106 + (C2481 + C2480) * C48405 * C105 +
            ((C113 * C2177 + C48388 * C2187) * C48184 +
             (C113 * C2169 + C48388 * C2178) * C114) *
                C48405 * C104) *
               C2825) *
              C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C48405 * C104 +
            (C174 + C175) * C48405 * C105 + C187 * C106) *
               C48161 -
           (C188 * C106 + (C177 + C176) * C48405 * C105 +
            (C175 + C174) * C48405 * C104) *
               C48169 +
           (C187 * C104 + (C179 + C178) * C48405 * C105 + C189 * C106) *
               C3124) *
              C48285 +
          (((C598 + C599) * C48405 * C104 + (C600 + C601) * C48405 * C105 +
            C863 * C106) *
               C48169 -
           (C612 * C106 + (C599 + C598) * C48405 * C105 +
            ((C113 * C537 + C48388 * C554) * C48184 +
             (C113 * C524 + C48388 * C538) * C114) *
                C48405 * C104) *
               C48161 -
           ((C866 + C867) * C48405 * C106 + (C603 + C602) * C48405 * C105 +
            C612 * C104) *
               C3124) *
              C48292 +
          ((((C113 * C526 + C48388 * C541) * C114 +
             (C113 * C542 + C48388 * C556) * C48184) *
                C48405 * C104 +
            (C604 + C605) * C48405 * C105 + C613 * C106) *
               C48161 -
           ((C608 + C609) * C48405 * C106 + (C607 + C606) * C48405 * C105 +
            (C605 + C604) * C48405 * C104) *
               C48169 +
           (C613 * C104 + (C609 + C608) * C48405 * C105 +
            ((C113 * C530 + C48388 * C549) * C114 +
             (C113 * C550 + C48388 * C560) * C48184) *
                C48405 * C106) *
               C3124) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C48405 * C104 +
            (C174 + C175) * C48405 * C105 + C187 * C106) *
               C48547 -
           (C188 * C106 + (C177 + C176) * C48405 * C105 +
            (C175 + C174) * C48405 * C104) *
               C48540 +
           (C187 * C104 + (C179 + C178) * C48405 * C105 + C189 * C106) *
               C48527 -
           ((C182 + C183) * C48405 * C106 + (C181 + C180) * C48405 * C105 +
            C188 * C104) *
               C48506) *
              C3562 +
          (((C598 + C599) * C48405 * C104 + (C600 + C601) * C48405 * C105 +
            C863 * C106) *
               C48540 -
           (C612 * C106 + (C599 + C598) * C48405 * C105 +
            ((C113 * C537 + C48388 * C554) * C48184 +
             (C113 * C524 + C48388 * C538) * C114) *
                C48405 * C104) *
               C48547 -
           ((C866 + C867) * C48405 * C106 + (C603 + C602) * C48405 * C105 +
            C612 * C104) *
               C48527 +
           (C863 * C104 + (C867 + C866) * C48405 * C105 +
            ((C113 * C853 + C48388 * C854) * C114 +
             (C113 * C855 + C48388 * C856) * C48184) *
                C48405 * C106) *
               C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C305 +
             (C113 * C123 + C48388 * C136) * C48541 -
             (C113 * C308 + C48388 * C318) * C306 -
             (C113 * C319 + C48388 * C338) * C48529 +
             (C113 * C309 + C48388 * C320) * C307 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C48405 * C104 +
            (C349 + C350 - C392 - C393 + C394 + C395) * C48405 * C105 +
            C408 * C106) *
               C2825 +
           ((C392 - (C350 + C349) + C393 - C394 - C395) * C48405 * C104 +
            (C396 - (C360 + C359) + C397 - C398 - C399) * C48405 * C105 +
            (C400 - (C371 + C372) + C401 - C402 - C403) * C48405 * C106) *
               C48166) *
              C3562 +
          ((((C113 * C1013 + C48388 * C1018) * C306 -
             ((C113 * C537 + C48388 * C554) * C48541 +
              (C113 * C524 + C48388 * C538) * C305) +
             (C113 * C1019 + C48388 * C1028) * C48529 -
             (C113 * C1417 + C48388 * C1426) * C307 -
             (C113 * C1427 + C48388 * C1444) * C48502) *
                C48405 * C104 +
            (C3711 - (C3712 + C3713) + C3714 - C3715 - C3716) * C48405 * C105 +
            (C3717 - (C3718 + C3719) + C3720 - C3721 - C3722) * C48405 * C106) *
               C2825 +
           ((C3713 + C3712 - C3711 - C3714 + C3715 + C3716) * C48405 * C104 +
            (C3719 + C3718 - C3717 - C3720 + C3721 + C3722) * C48405 * C105 +
            (C590 * C305 + C591 * C48541 - C1057 * C306 - C1058 * C48529 +
             (C113 * C1739 + C48388 * C1740) * C307 +
             (C113 * C1741 + C48388 * C1742) * C48502) *
                C48405 * C106) *
               C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C717 +
            (C113 * C123 + C48388 * C136) * C48470 -
            (C113 * C308 + C48388 * C318) * C718 -
            (C113 * C319 + C48388 * C338) * C48247) *
               C48405 * C104 +
           (C724 + C725 - C726 - C727) * C48405 * C105 + C752 * C106) *
              C713 +
          ((C726 - (C725 + C724) + C727) * C48405 * C104 +
           (C730 - (C729 + C728) + C731) * C48405 * C105 + C753 * C106) *
              C714 +
          (C752 * C104 + (C734 + C733 - C732 - C735) * C48405 * C105 +
           (C736 + C737 - C748 - C749) * C48405 * C106) *
              C715 +
          (C753 * C104 + (C748 - (C737 + C736) + C749) * C48405 * C105 +
           ((C113 * C719 + C48388 * C720) * C718 -
            (C172 * C48470 + C173 * C717) +
            (C113 * C721 + C48388 * C722) * C48247) *
               C48405 * C106) *
              C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1557 +
            (C113 * C123 + C48388 * C136) * C1551 -
            (C113 * C308 + C48388 * C318) * C1558 -
            (C113 * C319 + C48388 * C338) * C1552 +
            (C113 * C309 + C48388 * C320) * C1559 +
            (C113 * C321 + C48388 * C339) * C1553 -
            (C113 * C1283 + C48388 * C1289) * C1560 -
            (C113 * C1290 + C48388 * C1301) * C48512) *
               C48405 * C104 +
           (C1566 + C1567 - C1568 - C1569 + C1570 + C1571 - C1590 - C1591) *
               C48405 * C105 +
           (C1576 + C1577 - C1578 - C1579 + C1580 + C1581 - C1592 - C1593) *
               C48405 * C106) *
              C48456 +
          ((C1568 - (C1567 + C1566) + C1569 - C1570 - C1571 + C1590 + C1591) *
               C48405 * C104 +
           (C1578 - (C1577 + C1576) + C1579 - C1580 - C1581 + C1592 + C1593) *
               C48405 * C105 +
           (C388 * C1558 - (C168 * C1551 + C169 * C1557) + C389 * C1552 -
            C390 * C1559 - C391 * C1553 +
            (C113 * C1561 + C48388 * C1562) * C1560 +
            (C113 * C1563 + C48388 * C1564) * C48512) *
               C48405 * C106) *
              C48166) *
         C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C717 +
             (C113 * C123 + C48388 * C136) * C48470 -
             (C113 * C308 + C48388 * C318) * C718 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C48405 * C104 +
            (C724 + C725 - C726 - C727) * C48405 * C105 + C752 * C106) *
               C302 +
           ((C726 - (C725 + C724) + C727) * C48405 * C104 +
            (C730 - (C729 + C728) + C731) * C48405 * C105 + C753 * C106) *
               C303 +
           (C752 * C104 + (C734 + C733 - C732 - C735) * C48405 * C105 +
            (C736 + C737 - C748 - C749) * C48405 * C106) *
               C48496) *
              C48471 +
          ((((C113 * C1013 + C48388 * C1018) * C718 -
             ((C113 * C537 + C48388 * C554) * C48470 +
              (C113 * C524 + C48388 * C538) * C717) +
             (C113 * C1019 + C48388 * C1028) * C48247) *
                C48405 * C104 +
            (C1059 - (C1036 + C1037) + C1060) * C48405 * C105 + C1067 * C106) *
               C302 +
           ((C1037 + C1036 - C1059 - C1060) * C48405 * C104 +
            (C1043 + C1042 - C1061 - C1062) * C48405 * C105 +
            (C1046 + C1047 - C1063 - C1064) * C48405 * C106) *
               C303 +
           (C1067 * C104 + (C1063 - (C1047 + C1046) + C1064) * C48405 * C105 +
            ((C113 * C1017 + C48388 * C1026) * C718 -
             (C864 * C48470 + C865 * C717) +
             (C113 * C1027 + C48388 * C1032) * C48247) *
                C48405 * C106) *
               C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1557 +
            (C113 * C123 + C48388 * C136) * C1551 -
            (C113 * C308 + C48388 * C318) * C1558 -
            (C113 * C319 + C48388 * C338) * C1552 +
            (C113 * C309 + C48388 * C320) * C1559 +
            (C113 * C321 + C48388 * C339) * C1553 -
            (C113 * C1283 + C48388 * C1289) * C1560 -
            (C113 * C1290 + C48388 * C1301) * C48512) *
               C48405 * C104 +
           (C1566 + C1567 - C1568 - C1569 + C1570 + C1571 - C1590 - C1591) *
               C48405 * C105 +
           (C1576 + C1577 - C1578 - C1579 + C1580 + C1581 - C1592 - C1593) *
               C48405 * C106) *
              C48156 * C48471 +
          (((C113 * C1013 + C48388 * C1018) * C1558 -
            ((C113 * C537 + C48388 * C554) * C1551 +
             (C113 * C524 + C48388 * C538) * C1557) +
            (C113 * C1019 + C48388 * C1028) * C1552 -
            (C113 * C1417 + C48388 * C1426) * C1559 -
            (C113 * C1427 + C48388 * C1444) * C1553 +
            (C113 * C1865 + C48388 * C1868) * C1560 +
            (C113 * C1869 + C48388 * C1874) * C48512) *
               C48405 * C104 +
           (C1052 * C1558 - (C587 * C1551 + C586 * C1557) + C1053 * C1552 -
            C1760 * C1559 - C1761 * C1553 +
            (C113 * C1866 + C48388 * C1870) * C1560 +
            (C113 * C1871 + C48388 * C1875) * C48512) *
               C48405 * C105 +
           (C1054 * C1558 - (C589 * C1551 + C588 * C1557) + C1056 * C1552 -
            C1762 * C1559 - C1763 * C1553 +
            (C113 * C1867 + C48388 * C1872) * C1560 +
            (C113 * C1873 + C48388 * C1876) * C48512) *
               C48405 * C106) *
              C48156 * C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C305 +
            (C113 * C123 + C48388 * C136) * C48541 -
            (C113 * C308 + C48388 * C318) * C306 -
            (C113 * C319 + C48388 * C338) * C48529 +
            (C113 * C309 + C48388 * C320) * C307 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C48405 * C104 +
           (C349 + C350 - C392 - C393 + C394 + C395) * C48405 * C105 +
           C408 * C106) *
              C302 +
          ((C392 - (C350 + C349) + C393 - C394 - C395) * C48405 * C104 +
           (C396 - (C360 + C359) + C397 - C398 - C399) * C48405 * C105 +
           (C400 - (C371 + C372) + C401 - C402 - C403) * C48405 * C106) *
              C303 +
          (C408 * C104 +
           (C372 + C371 - C400 - C401 + C402 + C403) * C48405 * C105 +
           (C170 * C305 + C171 * C48541 - (C113 * C316 + C48388 * C334) * C306 -
            (C113 * C335 + C48388 * C346) * C48529 +
            (C113 * C317 + C48388 * C336) * C307 +
            (C113 * C337 + C48388 * C347) * C48502) *
               C48405 * C106) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C114 +
            (C113 * C123 + C48388 * C136) * C48184) *
               C48405 * C104 +
           (C174 + C175) * C48405 * C105 + C187 * C106) *
              C107 -
          (C188 * C106 + (C177 + C176) * C48405 * C105 +
           (C175 + C174) * C48405 * C104) *
              C108 +
          (C187 * C104 + (C179 + C178) * C48405 * C105 + C189 * C106) * C109 -
          ((C182 + C183) * C48405 * C106 + (C181 + C180) * C48405 * C105 +
           C188 * C104) *
              C110 +
          (C189 * C104 + (C183 + C182) * C48405 * C105 +
           ((C113 * C121 + C48388 * C134) * C114 +
            (C113 * C135 + C48388 * C142) * C48184) *
               C48405 * C106) *
              C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C48405 * C104 +
            (C174 + C175) * C48405 * C105 + C187 * C106) *
               C302 -
           (C188 * C106 + (C177 + C176) * C48405 * C105 +
            (C175 + C174) * C48405 * C104) *
               C303 +
           (C187 * C104 + (C179 + C178) * C48405 * C105 + C189 * C106) *
               C48496) *
              C48542 +
          (((C598 + C599) * C48405 * C104 + (C600 + C601) * C48405 * C105 +
            (C602 + C603) * C48405 * C106) *
               C303 -
           (C612 * C106 + (C599 + C598) * C48405 * C105 +
            ((C113 * C537 + C48388 * C554) * C48184 +
             (C113 * C524 + C48388 * C538) * C114) *
                C48405 * C104) *
               C302 -
           (((C113 * C539 + C48388 * C555) * C48184 +
             (C113 * C525 + C48388 * C540) * C114) *
                C48405 * C106 +
            (C603 + C602) * C48405 * C105 + C612 * C104) *
               C48496) *
              C48531 +
          ((((C113 * C526 + C48388 * C541) * C114 +
             (C113 * C542 + C48388 * C556) * C48184) *
                C48405 * C104 +
            (C604 + C605) * C48405 * C105 + C613 * C106) *
               C302 -
           ((C608 + C609) * C48405 * C106 + (C607 + C606) * C48405 * C105 +
            (C605 + C604) * C48405 * C104) *
               C303 +
           (C613 * C104 + (C609 + C608) * C48405 * C105 +
            ((C113 * C530 + C48388 * C549) * C114 +
             (C113 * C550 + C48388 * C560) * C48184) *
                C48405 * C106) *
               C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1183 +
            (C113 * C123 + C48388 * C136) * C1177 -
            (C113 * C308 + C48388 * C318) * C1184 -
            (C113 * C319 + C48388 * C338) * C1178 +
            (C113 * C309 + C48388 * C320) * C1185 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C48405 * C104 +
           (C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C48405 * C105 +
           C1210 * C106) *
              C48538 +
          ((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C48405 * C104 +
           (C1195 - (C1194 + C1193) + C1196 - C1197 - C1198) * C48405 * C105 +
           (C1199 - (C1200 + C1201) + C1202 - C1203 - C1204) * C48405 * C106) *
              C48525 +
          (C1210 * C104 +
           (C1201 + C1200 - C1199 - C1202 + C1203 + C1204) * C48405 * C105 +
           (C170 * C1183 + C171 * C1177 - C744 * C1184 - C745 * C1178 +
            (C113 * C317 + C48388 * C336) * C1185 +
            (C113 * C337 + C48388 * C347) * C48502) *
               C48405 * C106) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48388 * C122) * C1278 +
           (C113 * C123 + C48388 * C136) * C1272 -
           (C113 * C308 + C48388 * C318) * C1279 -
           (C113 * C319 + C48388 * C338) * C1273 +
           (C113 * C309 + C48388 * C320) * C1280 +
           (C113 * C321 + C48388 * C339) * C1274 -
           (C113 * C1283 + C48388 * C1289) * C1281 -
           (C113 * C1290 + C48388 * C1301) * C1275 +
           (C113 * C1284 + C48388 * C1291) * C1282 +
           (C113 * C1292 + C48388 * C1302) * C1276) *
              C48405 * C104 +
          (C164 * C1278 + C165 * C1272 - C379 * C1279 - C380 * C1273 +
           C381 * C1280 + C382 * C1274 -
           (C113 * C1285 + C48388 * C1293) * C1281 -
           (C113 * C1294 + C48388 * C1303) * C1275 +
           (C113 * C1286 + C48388 * C1295) * C1282 +
           (C113 * C1296 + C48388 * C1304) * C1276) *
              C48405 * C105 +
          (C166 * C1278 + C167 * C1272 - C384 * C1279 - C385 * C1273 +
           C386 * C1280 + C387 * C1274 -
           (C113 * C1287 + C48388 * C1297) * C1281 -
           (C113 * C1298 + C48388 * C1305) * C1275 +
           (C113 * C1288 + C48388 * C1299) * C1282 +
           (C113 * C1300 + C48388 * C1306) * C1276) *
              C48405 * C106) *
         C48156 * C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1183 +
            (C113 * C123 + C48388 * C136) * C1177 -
            (C113 * C308 + C48388 * C318) * C1184 -
            (C113 * C319 + C48388 * C338) * C1178 +
            (C113 * C309 + C48388 * C320) * C1185 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C48405 * C104 +
           (C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C48405 * C105 +
           C1210 * C106) *
              C48156 * C48542 +
          (((C113 * C1013 + C48388 * C1018) * C1184 -
            ((C113 * C537 + C48388 * C554) * C1177 +
             (C113 * C524 + C48388 * C538) * C1183) +
            (C113 * C1019 + C48388 * C1028) * C1178 -
            (C113 * C1417 + C48388 * C1426) * C1185 -
            (C113 * C1427 + C48388 * C1444) * C48502) *
               C48405 * C104 +
           (C1052 * C1184 - (C587 * C1177 + C586 * C1183) + C1053 * C1178 -
            (C113 * C1418 + C48388 * C1428) * C1185 -
            (C113 * C1429 + C48388 * C1445) * C48502) *
               C48405 * C105 +
           (C1054 * C1184 - (C589 * C1177 + C588 * C1183) + C1056 * C1178 -
            (C113 * C1419 + C48388 * C1430) * C1185 -
            (C113 * C1431 + C48388 * C1446) * C48502) *
               C48405 * C106) *
              C48156 * C48531 +
          (((C113 * C526 + C48388 * C541) * C1183 +
            (C113 * C542 + C48388 * C556) * C1177 -
            (C113 * C1420 + C48388 * C1432) * C1184 -
            (C113 * C1433 + C48388 * C1447) * C1178 +
            (C113 * C1421 + C48388 * C1434) * C1185 +
            (C113 * C1435 + C48388 * C1448) * C48502) *
               C48405 * C104 +
           (C592 * C1183 + C593 * C1177 -
            (C113 * C1422 + C48388 * C1436) * C1184 -
            (C113 * C1437 + C48388 * C1449) * C1178 +
            (C113 * C1423 + C48388 * C1438) * C1185 +
            (C113 * C1439 + C48388 * C1450) * C48502) *
               C48405 * C105 +
           (C594 * C1183 + C595 * C1177 -
            (C113 * C1424 + C48388 * C1440) * C1184 -
            (C113 * C1441 + C48388 * C1451) * C1178 +
            (C113 * C1425 + C48388 * C1442) * C1185 +
            (C113 * C1443 + C48388 * C1452) * C48502) *
               C48405 * C106) *
              C48156 * C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C48405 * C104 +
            (C174 + C175) * C48405 * C105 + C187 * C106) *
               C713 -
           (C188 * C106 + (C177 + C176) * C48405 * C105 +
            (C175 + C174) * C48405 * C104) *
               C714 +
           (C187 * C104 + (C179 + C178) * C48405 * C105 + C189 * C106) * C715 -
           ((C182 + C183) * C48405 * C106 + (C181 + C180) * C48405 * C105 +
            C188 * C104) *
               C48506) *
              C48471 +
          (((C598 + C599) * C48405 * C104 + (C600 + C601) * C48405 * C105 +
            C863 * C106) *
               C714 -
           (C612 * C106 + (C599 + C598) * C48405 * C105 +
            ((C113 * C537 + C48388 * C554) * C48184 +
             (C113 * C524 + C48388 * C538) * C114) *
                C48405 * C104) *
               C713 -
           ((C866 + C867) * C48405 * C106 + (C603 + C602) * C48405 * C105 +
            C612 * C104) *
               C715 +
           (C863 * C104 + (C867 + C866) * C48405 * C105 +
            ((C113 * C853 + C48388 * C854) * C114 +
             (C113 * C855 + C48388 * C856) * C48184) *
                C48405 * C106) *
               C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1183 +
             (C113 * C123 + C48388 * C136) * C1177 -
             (C113 * C308 + C48388 * C318) * C1184 -
             (C113 * C319 + C48388 * C338) * C1178 +
             (C113 * C309 + C48388 * C320) * C1185 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C48405 * C104 +
            (C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C48405 * C105 +
            C1210 * C106) *
               C48456 +
           ((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C48405 * C104 +
            (C1195 - (C1194 + C1193) + C1196 - C1197 - C1198) * C48405 * C105 +
            (C1199 - (C1200 + C1201) + C1202 - C1203 - C1204) * C48405 * C106) *
               C48166) *
              C48471 +
          ((((C113 * C1013 + C48388 * C1018) * C1184 -
             ((C113 * C537 + C48388 * C554) * C1177 +
              (C113 * C524 + C48388 * C538) * C1183) +
             (C113 * C1019 + C48388 * C1028) * C1178 -
             (C113 * C1417 + C48388 * C1426) * C1185 -
             (C113 * C1427 + C48388 * C1444) * C48502) *
                C48405 * C104 +
            (C1744 - (C1745 + C1746) + C1747 - C1764 - C1765) * C48405 * C105 +
            (C1752 - (C1753 + C1754) + C1755 - C1766 - C1767) * C48405 * C106) *
               C48456 +
           ((C1746 + C1745 - C1744 - C1747 + C1764 + C1765) * C48405 * C104 +
            (C1754 + C1753 - C1752 - C1755 + C1766 + C1767) * C48405 * C105 +
            (C590 * C1183 + C591 * C1177 - C1057 * C1184 - C1058 * C1178 +
             (C113 * C1739 + C48388 * C1740) * C1185 +
             (C113 * C1741 + C48388 * C1742) * C48502) *
                C48405 * C106) *
               C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C114 +
            (C113 * C123 + C48388 * C136) * C48184) *
               C48405 * C104 +
           (C174 + C175) * C48405 * C105 + C187 * C106) *
              C107 -
          (C188 * C106 + (C177 + C176) * C48405 * C105 +
           (C175 + C174) * C48405 * C104) *
              C108 +
          (C187 * C104 + (C179 + C178) * C48405 * C105 + C189 * C106) * C109 -
          ((C182 + C183) * C48405 * C106 + (C181 + C180) * C48405 * C105 +
           C188 * C104) *
              C110 +
          (C189 * C104 + (C183 + C182) * C48405 * C105 +
           ((C113 * C121 + C48388 * C134) * C114 +
            (C113 * C135 + C48388 * C142) * C48184) *
               C48405 * C106) *
              C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C305 +
            (C113 * C123 + C48388 * C136) * C48541 -
            (C113 * C308 + C48388 * C318) * C306 -
            (C113 * C319 + C48388 * C338) * C48529 +
            (C113 * C309 + C48388 * C320) * C307 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C48405 * C104 +
           (C349 + C350 - C392 - C393 + C394 + C395) * C48405 * C105 +
           C408 * C106) *
              C302 +
          ((C392 - (C350 + C349) + C393 - C394 - C395) * C48405 * C104 +
           (C396 - (C360 + C359) + C397 - C398 - C399) * C48405 * C105 +
           (C400 - (C371 + C372) + C401 - C402 - C403) * C48405 * C106) *
              C303 +
          (C408 * C104 +
           (C372 + C371 - C400 - C401 + C402 + C403) * C48405 * C105 +
           (C170 * C305 + C171 * C48541 - (C113 * C316 + C48388 * C334) * C306 -
            (C113 * C335 + C48388 * C346) * C48529 +
            (C113 * C317 + C48388 * C336) * C307 +
            (C113 * C337 + C48388 * C347) * C48502) *
               C48405 * C106) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1183 +
            (C113 * C123 + C48388 * C136) * C1177 -
            (C113 * C308 + C48388 * C318) * C1184 -
            (C113 * C319 + C48388 * C338) * C1178 +
            (C113 * C309 + C48388 * C320) * C1185 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C48405 * C104 +
           (C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C48405 * C105 +
           C1210 * C106) *
              C48538 +
          ((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C48405 * C104 +
           (C1195 - (C1194 + C1193) + C1196 - C1197 - C1198) * C48405 * C105 +
           (C1199 - (C1200 + C1201) + C1202 - C1203 - C1204) * C48405 * C106) *
              C48525 +
          (C1210 * C104 +
           (C1201 + C1200 - C1199 - C1202 + C1203 + C1204) * C48405 * C105 +
           (C170 * C1183 + C171 * C1177 - C744 * C1184 - C745 * C1178 +
            (C113 * C317 + C48388 * C336) * C1185 +
            (C113 * C337 + C48388 * C347) * C48502) *
               C48405 * C106) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48388 * C122) * C1278 +
           (C113 * C123 + C48388 * C136) * C1272 -
           (C113 * C308 + C48388 * C318) * C1279 -
           (C113 * C319 + C48388 * C338) * C1273 +
           (C113 * C309 + C48388 * C320) * C1280 +
           (C113 * C321 + C48388 * C339) * C1274 -
           (C113 * C1283 + C48388 * C1289) * C1281 -
           (C113 * C1290 + C48388 * C1301) * C1275 +
           (C113 * C1284 + C48388 * C1291) * C1282 +
           (C113 * C1292 + C48388 * C1302) * C1276) *
              C48405 * C104 +
          (C164 * C1278 + C165 * C1272 - C379 * C1279 - C380 * C1273 +
           C381 * C1280 + C382 * C1274 -
           (C113 * C1285 + C48388 * C1293) * C1281 -
           (C113 * C1294 + C48388 * C1303) * C1275 +
           (C113 * C1286 + C48388 * C1295) * C1282 +
           (C113 * C1296 + C48388 * C1304) * C1276) *
              C48405 * C105 +
          (C166 * C1278 + C167 * C1272 - C384 * C1279 - C385 * C1273 +
           C386 * C1280 + C387 * C1274 -
           (C113 * C1287 + C48388 * C1297) * C1281 -
           (C113 * C1298 + C48388 * C1305) * C1275 +
           (C113 * C1288 + C48388 * C1299) * C1282 +
           (C113 * C1300 + C48388 * C1306) * C1276) *
              C48405 * C106) *
         C48156 * C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C47163 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48243 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C47155 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48250 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C47169 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C3121) *
               C48405 * C5057 +
           ((C5094 + C5095) * C47163 + (C5096 + C5097) * C48243 -
            (C5288 + C5289) * C47155 - (C5290 + C5291) * C48250 +
            (C5292 + C5293) * C47169 + (C5294 + C5295) * C3121) *
               C48405 * C48489) *
              C48161 +
          (((C5289 + C5288) * C47155 -
            ((C5097 + C5096) * C48243 + (C5095 + C5094) * C47163) +
            (C5291 + C5290) * C48250 - (C5293 + C5292) * C47169 -
            (C5295 + C5294) * C3121) *
               C48405 * C5057 +
           ((C5296 + C5297) * C47155 -
            ((C5098 + C5099) * C48243 + (C5100 + C5101) * C47163) +
            (C5298 + C5299) * C48250 - (C5300 + C5301) * C47169 -
            (C5302 + C5303) * C3121) *
               C48405 * C48489) *
              C48169 +
          (((C5101 + C5100) * C47163 + (C5099 + C5098) * C48243 -
            (C5297 + C5296) * C47155 - (C5299 + C5298) * C48250 +
            (C5301 + C5300) * C47169 + (C5303 + C5302) * C3121) *
               C48405 * C5057 +
           ((C5102 + C5103) * C47163 + (C5104 + C5105) * C48243 -
            (C5636 + C5637) * C47155 - (C5638 + C5639) * C48250 +
            (C5059 * C315 + C5055 * C332 + C5060 * C1561 + C48520 * C1562) *
                C47169 +
            (C5059 * C333 + C5055 * C345 + C5060 * C1563 + C48520 * C1564) *
                C3121) *
               C48405 * C48489) *
              C3124) *
         C48202) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C47163 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48243 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C47155 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48250 +
             (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                 C47169 +
             (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                 C3121) *
                C48405 * C5057 +
            ((C5094 + C5095) * C47163 + (C5096 + C5097) * C48243 -
             (C5288 + C5289) * C47155 - (C5290 + C5291) * C48250 +
             (C5292 + C5293) * C47169 + (C5294 + C5295) * C3121) *
                C48405 * C48489) *
               C2825 +
           (((C5289 + C5288) * C47155 -
             ((C5097 + C5096) * C48243 + (C5095 + C5094) * C47163) +
             (C5291 + C5290) * C48250 - (C5293 + C5292) * C47169 -
             (C5295 + C5294) * C3121) *
                C48405 * C5057 +
            ((C5296 + C5297) * C47155 -
             ((C5098 + C5099) * C48243 + (C5100 + C5101) * C47163) +
             (C5298 + C5299) * C48250 - (C5300 + C5301) * C47169 -
             (C5302 + C5303) * C3121) *
                C48405 * C48489) *
               C48166) *
              C48471 +
          ((((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                 C47155 -
             ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                  C48243 +
              (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                  C47163) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                 C48250 -
             (C5060 * C1865 + C48520 * C1868 + C5059 * C1417 + C5055 * C1426) *
                 C47169 -
             (C5060 * C1869 + C48520 * C1874 + C5059 * C1427 + C5055 * C1444) *
                 C3121) *
                C48405 * C5057 +
            ((C5992 + C5993) * C47155 -
             ((C5485 + C5484) * C48243 + (C5483 + C5482) * C47163) +
             (C5994 + C5995) * C48250 - (C6734 + C6735) * C47169 -
             (C6736 + C6737) * C3121) *
                C48405 * C48489) *
               C2825 +
           (((C5482 + C5483) * C47163 + (C5484 + C5485) * C48243 -
             (C5993 + C5992) * C47155 - (C5995 + C5994) * C48250 +
             (C6735 + C6734) * C47169 + (C6737 + C6736) * C3121) *
                C48405 * C5057 +
            ((C5486 + C5487) * C47163 + (C5488 + C5489) * C48243 -
             (C5996 + C5997) * C47155 - (C5998 + C5999) * C48250 +
             (C5059 * C1419 + C5055 * C1430 + C5060 * C1867 + C48520 * C1872) *
                 C47169 +
             (C5059 * C1431 + C5055 * C1446 + C5060 * C1873 + C48520 * C1876) *
                 C3121) *
                C48405 * C48489) *
               C48166) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C2827 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48548 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C2828 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48544 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C2829 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48534 -
            (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
                C2830 -
            (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
                C48512) *
               C48405 * C5057 +
           ((C5094 + C5095) * C2827 + (C5096 + C5097) * C48548 -
            (C5288 + C5289) * C2828 - (C5290 + C5291) * C48544 +
            (C5292 + C5293) * C2829 + (C5294 + C5295) * C48534 -
            (C6528 + C6529) * C2830 - (C6530 + C6531) * C48512) *
               C48405 * C48489) *
              C2825 +
          (((C5289 + C5288) * C2828 -
            ((C5097 + C5096) * C48548 + (C5095 + C5094) * C2827) +
            (C5291 + C5290) * C48544 - (C5293 + C5292) * C2829 -
            (C5295 + C5294) * C48534 + (C6529 + C6528) * C2830 +
            (C6531 + C6530) * C48512) *
               C48405 * C5057 +
           ((C5296 + C5297) * C2828 -
            ((C5098 + C5099) * C48548 + (C5100 + C5101) * C2827) +
            (C5298 + C5299) * C48544 - (C5300 + C5301) * C2829 -
            (C5302 + C5303) * C48534 +
            (C5059 * C1287 + C5055 * C1297 + C5060 * C1288 + C48520 * C1299) *
                C2830 +
            (C5059 * C1298 + C5055 * C1305 + C5060 * C1300 + C48520 * C1306) *
                C48512) *
               C48405 * C48489) *
              C48166) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C2697 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C2691 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C2698 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48247) *
               C48405 * C5057 +
           ((C5094 + C5095) * C2697 + (C5096 + C5097) * C2691 -
            (C5288 + C5289) * C2698 - (C5290 + C5291) * C48247) *
               C48405 * C48489) *
              C48547 +
          (((C5289 + C5288) * C2698 -
            ((C5097 + C5096) * C2691 + (C5095 + C5094) * C2697) +
            (C5291 + C5290) * C48247) *
               C48405 * C5057 +
           ((C5296 + C5297) * C2698 -
            ((C5098 + C5099) * C2691 + (C5100 + C5101) * C2697) +
            (C5298 + C5299) * C48247) *
               C48405 * C48489) *
              C48540 +
          (((C5101 + C5100) * C2697 + (C5099 + C5098) * C2691 -
            (C5297 + C5296) * C2698 - (C5299 + C5298) * C48247) *
               C48405 * C5057 +
           ((C5102 + C5103) * C2697 + (C5104 + C5105) * C2691 -
            (C5636 + C5637) * C2698 - (C5638 + C5639) * C48247) *
               C48405 * C48489) *
              C48527 +
          (((C5637 + C5636) * C2698 -
            ((C5105 + C5104) * C2691 + (C5103 + C5102) * C2697) +
            (C5639 + C5638) * C48247) *
               C48405 * C5057 +
           ((C5059 * C316 + C5055 * C334 + C5060 * C317 + C48520 * C336) *
                C2698 -
            ((C5106 + C5107) * C2691 + (C5108 + C5109) * C2697) +
            (C5059 * C335 + C5055 * C346 + C5060 * C337 + C48520 * C347) *
                C48247) *
               C48405 * C48489) *
              C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C2697 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C2691 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C2698 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48247) *
                C48405 * C5057 +
            ((C5094 + C5095) * C2697 + (C5096 + C5097) * C2691 -
             (C5288 + C5289) * C2698 - (C5290 + C5291) * C48247) *
                C48405 * C48489) *
               C2825 +
           (((C5289 + C5288) * C2698 -
             ((C5097 + C5096) * C2691 + (C5095 + C5094) * C2697) +
             (C5291 + C5290) * C48247) *
                C48405 * C5057 +
            ((C5296 + C5297) * C2698 -
             ((C5098 + C5099) * C2691 + (C5100 + C5101) * C2697) +
             (C5298 + C5299) * C48247) *
                C48405 * C48489) *
               C48166) *
              C48542 +
          ((((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                 C2698 -
             ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                  C2691 +
              (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                  C2697) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                 C48247) *
                C48405 * C5057 +
            ((C5992 + C5993) * C2698 -
             ((C5485 + C5484) * C2691 + (C5483 + C5482) * C2697) +
             (C5994 + C5995) * C48247) *
                C48405 * C48489) *
               C2825 +
           (((C5482 + C5483) * C2697 + (C5484 + C5485) * C2691 -
             (C5993 + C5992) * C2698 - (C5995 + C5994) * C48247) *
                C48405 * C5057 +
            ((C5486 + C5487) * C2697 + (C5488 + C5489) * C2691 -
             (C5996 + C5997) * C2698 - (C5998 + C5999) * C48247) *
                C48405 * C48489) *
               C48166) *
              C48531 +
          ((((C5059 * C526 + C5055 * C541 + C5060 * C1420 + C48520 * C1432) *
                 C2697 +
             (C5059 * C542 + C5055 * C556 + C5060 * C1433 + C48520 * C1447) *
                 C2691 -
             (C5060 * C1421 + C48520 * C1434 + C5059 * C1420 + C5055 * C1432) *
                 C2698 -
             (C5060 * C1435 + C48520 * C1448 + C5059 * C1433 + C5055 * C1447) *
                 C48247) *
                C48405 * C5057 +
            ((C5490 + C5491) * C2697 + (C5492 + C5493) * C2691 -
             (C7460 + C7461) * C2698 - (C7462 + C7463) * C48247) *
                C48405 * C48489) *
               C2825 +
           (((C7461 + C7460) * C2698 -
             ((C5493 + C5492) * C2691 + (C5491 + C5490) * C2697) +
             (C7463 + C7462) * C48247) *
                C48405 * C5057 +
            ((C5059 * C1424 + C5055 * C1440 + C5060 * C1425 + C48520 * C1442) *
                 C2698 -
             ((C5494 + C5495) * C2691 + (C5496 + C5497) * C2697) +
             (C5059 * C1441 + C5055 * C1451 + C5060 * C1443 + C48520 * C1452) *
                 C48247) *
                C48405 * C48489) *
               C48166) *
              C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C2697 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C2691 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C2698 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48247) *
                C48405 * C5057 +
            ((C5094 + C5095) * C2697 + (C5096 + C5097) * C2691 -
             (C5288 + C5289) * C2698 - (C5290 + C5291) * C48247) *
                C48405 * C48489) *
               C48161 +
           (((C5289 + C5288) * C2698 -
             ((C5097 + C5096) * C2691 + (C5095 + C5094) * C2697) +
             (C5291 + C5290) * C48247) *
                C48405 * C5057 +
            ((C5296 + C5297) * C2698 -
             ((C5098 + C5099) * C2691 + (C5100 + C5101) * C2697) +
             (C5298 + C5299) * C48247) *
                C48405 * C48489) *
               C48169 +
           (((C5101 + C5100) * C2697 + (C5099 + C5098) * C2691 -
             (C5297 + C5296) * C2698 - (C5299 + C5298) * C48247) *
                C48405 * C5057 +
            ((C5102 + C5103) * C2697 + (C5104 + C5105) * C2691 -
             (C5636 + C5637) * C2698 - (C5638 + C5639) * C48247) *
                C48405 * C48489) *
               C3124) *
              C48471 +
          ((((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                 C2698 -
             ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                  C2691 +
              (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                  C2697) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                 C48247) *
                C48405 * C5057 +
            ((C5992 + C5993) * C2698 -
             ((C5485 + C5484) * C2691 + (C5483 + C5482) * C2697) +
             (C5994 + C5995) * C48247) *
                C48405 * C48489) *
               C48161 +
           (((C5482 + C5483) * C2697 + (C5484 + C5485) * C2691 -
             (C5993 + C5992) * C2698 - (C5995 + C5994) * C48247) *
                C48405 * C5057 +
            ((C5486 + C5487) * C2697 + (C5488 + C5489) * C2691 -
             (C5996 + C5997) * C2698 - (C5998 + C5999) * C48247) *
                C48405 * C48489) *
               C48169 +
           (((C5997 + C5996) * C2698 -
             ((C5489 + C5488) * C2691 + (C5487 + C5486) * C2697) +
             (C5999 + C5998) * C48247) *
                C48405 * C5057 +
            ((C5059 * C1016 + C5055 * C1024 + C5060 * C1739 + C48520 * C1740) *
                 C2698 -
             ((C5778 + C5779) * C2691 + (C5780 + C5781) * C2697) +
             (C5059 * C1025 + C5055 * C1031 + C5060 * C1741 + C48520 * C1742) *
                 C48247) *
                C48405 * C48489) *
               C3124) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C2697 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C2691 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C2698 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48247) *
               C48405 * C5057 +
           ((C5094 + C5095) * C2697 + (C5096 + C5097) * C2691 -
            (C5288 + C5289) * C2698 - (C5290 + C5291) * C48247) *
               C48405 * C48489) *
              C48547 +
          (((C5289 + C5288) * C2698 -
            ((C5097 + C5096) * C2691 + (C5095 + C5094) * C2697) +
            (C5291 + C5290) * C48247) *
               C48405 * C5057 +
           ((C5296 + C5297) * C2698 -
            ((C5098 + C5099) * C2691 + (C5100 + C5101) * C2697) +
            (C5298 + C5299) * C48247) *
               C48405 * C48489) *
              C48540 +
          (((C5101 + C5100) * C2697 + (C5099 + C5098) * C2691 -
            (C5297 + C5296) * C2698 - (C5299 + C5298) * C48247) *
               C48405 * C5057 +
           ((C5102 + C5103) * C2697 + (C5104 + C5105) * C2691 -
            (C5636 + C5637) * C2698 - (C5638 + C5639) * C48247) *
               C48405 * C48489) *
              C48527 +
          (((C5637 + C5636) * C2698 -
            ((C5105 + C5104) * C2691 + (C5103 + C5102) * C2697) +
            (C5639 + C5638) * C48247) *
               C48405 * C5057 +
           ((C5059 * C316 + C5055 * C334 + C5060 * C317 + C48520 * C336) *
                C2698 -
            ((C5106 + C5107) * C2691 + (C5108 + C5109) * C2697) +
            (C5059 * C335 + C5055 * C346 + C5060 * C337 + C48520 * C347) *
                C48247) *
               C48405 * C48489) *
              C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C2827 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48548 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C2828 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48544 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C2829 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48534 -
            (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
                C2830 -
            (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
                C48512) *
               C48405 * C5057 +
           ((C5094 + C5095) * C2827 + (C5096 + C5097) * C48548 -
            (C5288 + C5289) * C2828 - (C5290 + C5291) * C48544 +
            (C5292 + C5293) * C2829 + (C5294 + C5295) * C48534 -
            (C6528 + C6529) * C2830 - (C6530 + C6531) * C48512) *
               C48405 * C48489) *
              C2825 +
          (((C5289 + C5288) * C2828 -
            ((C5097 + C5096) * C48548 + (C5095 + C5094) * C2827) +
            (C5291 + C5290) * C48544 - (C5293 + C5292) * C2829 -
            (C5295 + C5294) * C48534 + (C6529 + C6528) * C2830 +
            (C6531 + C6530) * C48512) *
               C48405 * C5057 +
           ((C5296 + C5297) * C2828 -
            ((C5098 + C5099) * C48548 + (C5100 + C5101) * C2827) +
            (C5298 + C5299) * C48544 - (C5300 + C5301) * C2829 -
            (C5302 + C5303) * C48534 +
            (C5059 * C1287 + C5055 * C1297 + C5060 * C1288 + C48520 * C1299) *
                C2830 +
            (C5059 * C1298 + C5055 * C1305 + C5060 * C1300 + C48520 * C1306) *
                C48512) *
               C48405 * C48489) *
              C48166) *
         C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C47163 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48243 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C47155 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48250 +
             (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                 C47169 +
             (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                 C3121) *
                C48405 * C5057 +
            ((C5094 + C5095) * C47163 + (C5096 + C5097) * C48243 -
             (C5288 + C5289) * C47155 - (C5290 + C5291) * C48250 +
             (C5292 + C5293) * C47169 + (C5294 + C5295) * C3121) *
                C48405 * C48489) *
               C48456 +
           (((C5289 + C5288) * C47155 -
             ((C5097 + C5096) * C48243 + (C5095 + C5094) * C47163) +
             (C5291 + C5290) * C48250 - (C5293 + C5292) * C47169 -
             (C5295 + C5294) * C3121) *
                C48405 * C5057 +
            ((C5296 + C5297) * C47155 -
             ((C5098 + C5099) * C48243 + (C5100 + C5101) * C47163) +
             (C5298 + C5299) * C48250 - (C5300 + C5301) * C47169 -
             (C5302 + C5303) * C3121) *
                C48405 * C48489) *
               C48166) *
              C3562 +
          ((((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                 C47155 -
             ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                  C48243 +
              (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                  C47163) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                 C48250 -
             (C5060 * C1865 + C48520 * C1868 + C5059 * C1417 + C5055 * C1426) *
                 C47169 -
             (C5060 * C1869 + C48520 * C1874 + C5059 * C1427 + C5055 * C1444) *
                 C3121) *
                C48405 * C5057 +
            ((C5992 + C5993) * C47155 -
             ((C5485 + C5484) * C48243 + (C5483 + C5482) * C47163) +
             (C5994 + C5995) * C48250 - (C6734 + C6735) * C47169 -
             (C6736 + C6737) * C3121) *
                C48405 * C48489) *
               C48456 +
           (((C5482 + C5483) * C47163 + (C5484 + C5485) * C48243 -
             (C5993 + C5992) * C47155 - (C5995 + C5994) * C48250 +
             (C6735 + C6734) * C47169 + (C6737 + C6736) * C3121) *
                C48405 * C5057 +
            ((C5486 + C5487) * C47163 + (C5488 + C5489) * C48243 -
             (C5996 + C5997) * C47155 - (C5998 + C5999) * C48250 +
             (C5059 * C1419 + C5055 * C1430 + C5060 * C1867 + C48520 * C1872) *
                 C47169 +
             (C5059 * C1431 + C5055 * C1446 + C5060 * C1873 + C48520 * C1876) *
                 C3121) *
                C48405 * C48489) *
               C48166) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C47163 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48243 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C47155 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48250 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C47169 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C3121) *
               C48405 * C5057 +
           ((C5094 + C5095) * C47163 + (C5096 + C5097) * C48243 -
            (C5288 + C5289) * C47155 - (C5290 + C5291) * C48250 +
            (C5292 + C5293) * C47169 + (C5294 + C5295) * C3121) *
               C48405 * C48489) *
              C48156 * C48285 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                C47155 -
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C48243 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C47163) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                C48250 -
            (C5060 * C1865 + C48520 * C1868 + C5059 * C1417 + C5055 * C1426) *
                C47169 -
            (C5060 * C1869 + C48520 * C1874 + C5059 * C1427 + C5055 * C1444) *
                C3121) *
               C48405 * C5057 +
           ((C5992 + C5993) * C47155 -
            ((C5485 + C5484) * C48243 + (C5483 + C5482) * C47163) +
            (C5994 + C5995) * C48250 - (C6734 + C6735) * C47169 -
            (C6736 + C6737) * C3121) *
               C48405 * C48489) *
              C48156 * C48292 +
          (((C5059 * C526 + C5055 * C541 + C5060 * C1420 + C48520 * C1432) *
                C47163 +
            (C5059 * C542 + C5055 * C556 + C5060 * C1433 + C48520 * C1447) *
                C48243 -
            (C5060 * C1421 + C48520 * C1434 + C5059 * C1420 + C5055 * C1432) *
                C47155 -
            (C5060 * C1435 + C48520 * C1448 + C5059 * C1433 + C5055 * C1447) *
                C48250 +
            (C5059 * C1421 + C5055 * C1434 + C5060 * C6381 + C48520 * C6383) *
                C47169 +
            (C5059 * C1435 + C5055 * C1448 + C5060 * C6384 + C48520 * C6387) *
                C3121) *
               C48405 * C5057 +
           ((C5490 + C5491) * C47163 + (C5492 + C5493) * C48243 -
            (C7460 + C7461) * C47155 - (C7462 + C7463) * C48250 +
            (C5059 * C1423 + C5055 * C1438 + C5060 * C6382 + C48520 * C6385) *
                C47169 +
            (C5059 * C1439 + C5055 * C1450 + C5060 * C6386 + C48520 * C6388) *
                C3121) *
               C48405 * C48489) *
              C48156 * C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C2827 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48548 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C2828 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48544 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C2829 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48534 -
            (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
                C2830 -
            (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
                C48512) *
               C48405 * C5057 +
           ((C5094 + C5095) * C2827 + (C5096 + C5097) * C48548 -
            (C5288 + C5289) * C2828 - (C5290 + C5291) * C48544 +
            (C5292 + C5293) * C2829 + (C5294 + C5295) * C48534 -
            (C6528 + C6529) * C2830 - (C6530 + C6531) * C48512) *
               C48405 * C48489) *
              C48156 * C3562 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                C2828 -
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C48548 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C2827) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                C48544 -
            (C5060 * C1865 + C48520 * C1868 + C5059 * C1417 + C5055 * C1426) *
                C2829 -
            (C5060 * C1869 + C48520 * C1874 + C5059 * C1427 + C5055 * C1444) *
                C48534 +
            (C5059 * C1865 + C5055 * C1868 + C5060 * C6867 + C48520 * C6869) *
                C2830 +
            (C5059 * C1869 + C5055 * C1874 + C5060 * C6870 + C48520 * C6873) *
                C48512) *
               C48405 * C5057 +
           ((C5992 + C5993) * C2828 -
            ((C5485 + C5484) * C48548 + (C5483 + C5482) * C2827) +
            (C5994 + C5995) * C48544 - (C6734 + C6735) * C2829 -
            (C6736 + C6737) * C48534 +
            (C5059 * C1866 + C5055 * C1870 + C5060 * C6868 + C48520 * C6871) *
                C2830 +
            (C5059 * C1871 + C5055 * C1875 + C5060 * C6872 + C48520 * C6874) *
                C48512) *
               C48405 * C48489) *
              C48156 * C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C2697 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C2691 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C2698 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48247) *
                C48405 * C5057 +
            ((C5094 + C5095) * C2697 + (C5096 + C5097) * C2691 -
             (C5288 + C5289) * C2698 - (C5290 + C5291) * C48247) *
                C48405 * C48489) *
               C48538 +
           (((C5289 + C5288) * C2698 -
             ((C5097 + C5096) * C2691 + (C5095 + C5094) * C2697) +
             (C5291 + C5290) * C48247) *
                C48405 * C5057 +
            ((C5296 + C5297) * C2698 -
             ((C5098 + C5099) * C2691 + (C5100 + C5101) * C2697) +
             (C5298 + C5299) * C48247) *
                C48405 * C48489) *
               C48525 +
           (((C5101 + C5100) * C2697 + (C5099 + C5098) * C2691 -
             (C5297 + C5296) * C2698 - (C5299 + C5298) * C48247) *
                C48405 * C5057 +
            ((C5102 + C5103) * C2697 + (C5104 + C5105) * C2691 -
             (C5636 + C5637) * C2698 - (C5638 + C5639) * C48247) *
                C48405 * C48489) *
               C48496) *
              C3562 +
          ((((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                 C2698 -
             ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                  C2691 +
              (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                  C2697) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                 C48247) *
                C48405 * C5057 +
            ((C5992 + C5993) * C2698 -
             ((C5485 + C5484) * C2691 + (C5483 + C5482) * C2697) +
             (C5994 + C5995) * C48247) *
                C48405 * C48489) *
               C48538 +
           (((C5482 + C5483) * C2697 + (C5484 + C5485) * C2691 -
             (C5993 + C5992) * C2698 - (C5995 + C5994) * C48247) *
                C48405 * C5057 +
            ((C5486 + C5487) * C2697 + (C5488 + C5489) * C2691 -
             (C5996 + C5997) * C2698 - (C5998 + C5999) * C48247) *
                C48405 * C48489) *
               C48525 +
           (((C5997 + C5996) * C2698 -
             ((C5489 + C5488) * C2691 + (C5487 + C5486) * C2697) +
             (C5999 + C5998) * C48247) *
                C48405 * C5057 +
            ((C5059 * C1016 + C5055 * C1024 + C5060 * C1739 + C48520 * C1740) *
                 C2698 -
             ((C5778 + C5779) * C2691 + (C5780 + C5781) * C2697) +
             (C5059 * C1025 + C5055 * C1031 + C5060 * C1741 + C48520 * C1742) *
                 C48247) *
                C48405 * C48489) *
               C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C2697 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C2691 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C2698 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48247) *
               C48405 * C5057 +
           ((C5094 + C5095) * C2697 + (C5096 + C5097) * C2691 -
            (C5288 + C5289) * C2698 - (C5290 + C5291) * C48247) *
               C48405 * C48489) *
              C48156 * C48549 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                C2698 -
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C2691 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C2697) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                C48247) *
               C48405 * C5057 +
           ((C5992 + C5993) * C2698 -
            ((C5485 + C5484) * C2691 + (C5483 + C5482) * C2697) +
            (C5994 + C5995) * C48247) *
               C48405 * C48489) *
              C48156 * C48546 +
          (((C5059 * C526 + C5055 * C541 + C5060 * C1420 + C48520 * C1432) *
                C2697 +
            (C5059 * C542 + C5055 * C556 + C5060 * C1433 + C48520 * C1447) *
                C2691 -
            (C5060 * C1421 + C48520 * C1434 + C5059 * C1420 + C5055 * C1432) *
                C2698 -
            (C5060 * C1435 + C48520 * C1448 + C5059 * C1433 + C5055 * C1447) *
                C48247) *
               C48405 * C5057 +
           ((C5490 + C5491) * C2697 + (C5492 + C5493) * C2691 -
            (C7460 + C7461) * C2698 - (C7462 + C7463) * C48247) *
               C48405 * C48489) *
              C48156 * C48537 +
          (((C5059 * C2581 + C5055 * C2584 + C5060 * C7735 + C48520 * C7737) *
                C2698 -
            ((C5060 * C2585 + C48520 * C2590 + C5059 * C2177 + C5055 * C2187) *
                 C2691 +
             (C5060 * C2581 + C48520 * C2584 + C5059 * C2169 + C5055 * C2178) *
                 C2697) +
            (C5059 * C2585 + C5055 * C2590 + C5060 * C7738 + C48520 * C7741) *
                C48247) *
               C48405 * C5057 +
           ((C5059 * C2582 + C5055 * C2586 + C5060 * C7736 + C48520 * C7739) *
                C2698 -
            ((C7605 + C7604) * C2691 + (C7603 + C7602) * C2697) +
            (C5059 * C2587 + C5055 * C2591 + C5060 * C7740 + C48520 * C7742) *
                C48247) *
               C48405 * C48489) *
              C48156 * C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C2697 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C2691 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C2698 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48247) *
                C48405 * C5057 +
            ((C5094 + C5095) * C2697 + (C5096 + C5097) * C2691 -
             (C5288 + C5289) * C2698 - (C5290 + C5291) * C48247) *
                C48405 * C48489) *
               C48456 +
           (((C5289 + C5288) * C2698 -
             ((C5097 + C5096) * C2691 + (C5095 + C5094) * C2697) +
             (C5291 + C5290) * C48247) *
                C48405 * C5057 +
            ((C5296 + C5297) * C2698 -
             ((C5098 + C5099) * C2691 + (C5100 + C5101) * C2697) +
             (C5298 + C5299) * C48247) *
                C48405 * C48489) *
               C48166) *
              C48285 +
          ((((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                 C2698 -
             ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                  C2691 +
              (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                  C2697) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                 C48247) *
                C48405 * C5057 +
            ((C5992 + C5993) * C2698 -
             ((C5485 + C5484) * C2691 + (C5483 + C5482) * C2697) +
             (C5994 + C5995) * C48247) *
                C48405 * C48489) *
               C48456 +
           (((C5482 + C5483) * C2697 + (C5484 + C5485) * C2691 -
             (C5993 + C5992) * C2698 - (C5995 + C5994) * C48247) *
                C48405 * C5057 +
            ((C5486 + C5487) * C2697 + (C5488 + C5489) * C2691 -
             (C5996 + C5997) * C2698 - (C5998 + C5999) * C48247) *
                C48405 * C48489) *
               C48166) *
              C48292 +
          ((((C5059 * C526 + C5055 * C541 + C5060 * C1420 + C48520 * C1432) *
                 C2697 +
             (C5059 * C542 + C5055 * C556 + C5060 * C1433 + C48520 * C1447) *
                 C2691 -
             (C5060 * C1421 + C48520 * C1434 + C5059 * C1420 + C5055 * C1432) *
                 C2698 -
             (C5060 * C1435 + C48520 * C1448 + C5059 * C1433 + C5055 * C1447) *
                 C48247) *
                C48405 * C5057 +
            ((C5490 + C5491) * C2697 + (C5492 + C5493) * C2691 -
             (C7460 + C7461) * C2698 - (C7462 + C7463) * C48247) *
                C48405 * C48489) *
               C48456 +
           (((C7461 + C7460) * C2698 -
             ((C5493 + C5492) * C2691 + (C5491 + C5490) * C2697) +
             (C7463 + C7462) * C48247) *
                C48405 * C5057 +
            ((C5059 * C1424 + C5055 * C1440 + C5060 * C1425 + C48520 * C1442) *
                 C2698 -
             ((C5494 + C5495) * C2691 + (C5496 + C5497) * C2697) +
             (C5059 * C1441 + C5055 * C1451 + C5060 * C1443 + C48520 * C1452) *
                 C48247) *
                C48405 * C48489) *
               C48166) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C2697 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C2691 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C2698 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48247) *
                C48405 * C5057 +
            ((C5094 + C5095) * C2697 + (C5096 + C5097) * C2691 -
             (C5288 + C5289) * C2698 - (C5290 + C5291) * C48247) *
                C48405 * C48489) *
               C48538 +
           (((C5289 + C5288) * C2698 -
             ((C5097 + C5096) * C2691 + (C5095 + C5094) * C2697) +
             (C5291 + C5290) * C48247) *
                C48405 * C5057 +
            ((C5296 + C5297) * C2698 -
             ((C5098 + C5099) * C2691 + (C5100 + C5101) * C2697) +
             (C5298 + C5299) * C48247) *
                C48405 * C48489) *
               C48525 +
           (((C5101 + C5100) * C2697 + (C5099 + C5098) * C2691 -
             (C5297 + C5296) * C2698 - (C5299 + C5298) * C48247) *
                C48405 * C5057 +
            ((C5102 + C5103) * C2697 + (C5104 + C5105) * C2691 -
             (C5636 + C5637) * C2698 - (C5638 + C5639) * C48247) *
                C48405 * C48489) *
               C48496) *
              C3562 +
          ((((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                 C2698 -
             ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                  C2691 +
              (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                  C2697) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                 C48247) *
                C48405 * C5057 +
            ((C5992 + C5993) * C2698 -
             ((C5485 + C5484) * C2691 + (C5483 + C5482) * C2697) +
             (C5994 + C5995) * C48247) *
                C48405 * C48489) *
               C48538 +
           (((C5482 + C5483) * C2697 + (C5484 + C5485) * C2691 -
             (C5993 + C5992) * C2698 - (C5995 + C5994) * C48247) *
                C48405 * C5057 +
            ((C5486 + C5487) * C2697 + (C5488 + C5489) * C2691 -
             (C5996 + C5997) * C2698 - (C5998 + C5999) * C48247) *
                C48405 * C48489) *
               C48525 +
           (((C5997 + C5996) * C2698 -
             ((C5489 + C5488) * C2691 + (C5487 + C5486) * C2697) +
             (C5999 + C5998) * C48247) *
                C48405 * C5057 +
            ((C5059 * C1016 + C5055 * C1024 + C5060 * C1739 + C48520 * C1740) *
                 C2698 -
             ((C5778 + C5779) * C2691 + (C5780 + C5781) * C2697) +
             (C5059 * C1025 + C5055 * C1031 + C5060 * C1741 + C48520 * C1742) *
                 C48247) *
                C48405 * C48489) *
               C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C2827 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48548 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C2828 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48544 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C2829 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48534 -
            (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
                C2830 -
            (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
                C48512) *
               C48405 * C5057 +
           ((C5094 + C5095) * C2827 + (C5096 + C5097) * C48548 -
            (C5288 + C5289) * C2828 - (C5290 + C5291) * C48544 +
            (C5292 + C5293) * C2829 + (C5294 + C5295) * C48534 -
            (C6528 + C6529) * C2830 - (C6530 + C6531) * C48512) *
               C48405 * C48489) *
              C48156 * C3562 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                C2828 -
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C48548 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C2827) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                C48544 -
            (C5060 * C1865 + C48520 * C1868 + C5059 * C1417 + C5055 * C1426) *
                C2829 -
            (C5060 * C1869 + C48520 * C1874 + C5059 * C1427 + C5055 * C1444) *
                C48534 +
            (C5059 * C1865 + C5055 * C1868 + C5060 * C6867 + C48520 * C6869) *
                C2830 +
            (C5059 * C1869 + C5055 * C1874 + C5060 * C6870 + C48520 * C6873) *
                C48512) *
               C48405 * C5057 +
           ((C5992 + C5993) * C2828 -
            ((C5485 + C5484) * C48548 + (C5483 + C5482) * C2827) +
            (C5994 + C5995) * C48544 - (C6734 + C6735) * C2829 -
            (C6736 + C6737) * C48534 +
            (C5059 * C1866 + C5055 * C1870 + C5060 * C6868 + C48520 * C6871) *
                C2830 +
            (C5059 * C1871 + C5055 * C1875 + C5060 * C6872 + C48520 * C6874) *
                C48512) *
               C48405 * C48489) *
              C48156 * C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C1557 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C1551 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C1558 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C1552 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C1559 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C1553 -
            (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
                C1560 -
            (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
                C48512) *
               C48405 * C5057 +
           ((C5094 + C5095) * C1557 + (C5096 + C5097) * C1551 -
            (C5288 + C5289) * C1558 - (C5290 + C5291) * C1552 +
            (C5292 + C5293) * C1559 + (C5294 + C5295) * C1553 -
            (C6528 + C6529) * C1560 - (C6530 + C6531) * C48512) *
               C48405 * C48489) *
              C48456 +
          (((C5289 + C5288) * C1558 -
            ((C5097 + C5096) * C1551 + (C5095 + C5094) * C1557) +
            (C5291 + C5290) * C1552 - (C5293 + C5292) * C1559 -
            (C5295 + C5294) * C1553 + (C6529 + C6528) * C1560 +
            (C6531 + C6530) * C48512) *
               C48405 * C5057 +
           ((C5296 + C5297) * C1558 -
            ((C5098 + C5099) * C1551 + (C5100 + C5101) * C1557) +
            (C5298 + C5299) * C1552 - (C5300 + C5301) * C1559 -
            (C5302 + C5303) * C1553 +
            (C5059 * C1287 + C5055 * C1297 + C5060 * C1288 + C48520 * C1299) *
                C1560 +
            (C5059 * C1298 + C5055 * C1305 + C5060 * C1300 + C48520 * C1306) *
                C48512) *
               C48405 * C48489) *
              C48166) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C717 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48470 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C718 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48247) *
               C48405 * C5057 +
           ((C5094 + C5095) * C717 + (C5096 + C5097) * C48470 -
            (C5288 + C5289) * C718 - (C5290 + C5291) * C48247) *
               C48405 * C48489) *
              C713 +
          (((C5289 + C5288) * C718 -
            ((C5097 + C5096) * C48470 + (C5095 + C5094) * C717) +
            (C5291 + C5290) * C48247) *
               C48405 * C5057 +
           ((C5296 + C5297) * C718 -
            ((C5098 + C5099) * C48470 + (C5100 + C5101) * C717) +
            (C5298 + C5299) * C48247) *
               C48405 * C48489) *
              C714 +
          (((C5101 + C5100) * C717 + (C5099 + C5098) * C48470 -
            (C5297 + C5296) * C718 - (C5299 + C5298) * C48247) *
               C48405 * C5057 +
           ((C5102 + C5103) * C717 + (C5104 + C5105) * C48470 -
            (C5636 + C5637) * C718 - (C5638 + C5639) * C48247) *
               C48405 * C48489) *
              C715 +
          (((C5637 + C5636) * C718 -
            ((C5105 + C5104) * C48470 + (C5103 + C5102) * C717) +
            (C5639 + C5638) * C48247) *
               C48405 * C5057 +
           ((C5059 * C316 + C5055 * C334 + C5060 * C317 + C48520 * C336) *
                C718 -
            ((C5106 + C5107) * C48470 + (C5108 + C5109) * C717) +
            (C5059 * C335 + C5055 * C346 + C5060 * C337 + C48520 * C347) *
                C48247) *
               C48405 * C48489) *
              C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C717 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48470 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C718 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48247) *
                C48405 * C5057 +
            ((C5094 + C5095) * C717 + (C5096 + C5097) * C48470 -
             (C5288 + C5289) * C718 - (C5290 + C5291) * C48247) *
                C48405 * C48489) *
               C48456 +
           (((C5289 + C5288) * C718 -
             ((C5097 + C5096) * C48470 + (C5095 + C5094) * C717) +
             (C5291 + C5290) * C48247) *
                C48405 * C5057 +
            ((C5296 + C5297) * C718 -
             ((C5098 + C5099) * C48470 + (C5100 + C5101) * C717) +
             (C5298 + C5299) * C48247) *
                C48405 * C48489) *
               C48166) *
              C1987 +
          ((((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                 C718 -
             ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                  C48470 +
              (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                  C717) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                 C48247) *
                C48405 * C5057 +
            ((C5992 + C5993) * C718 -
             ((C5485 + C5484) * C48470 + (C5483 + C5482) * C717) +
             (C5994 + C5995) * C48247) *
                C48405 * C48489) *
               C48456 +
           (((C5482 + C5483) * C717 + (C5484 + C5485) * C48470 -
             (C5993 + C5992) * C718 - (C5995 + C5994) * C48247) *
                C48405 * C5057 +
            ((C5486 + C5487) * C717 + (C5488 + C5489) * C48470 -
             (C5996 + C5997) * C718 - (C5998 + C5999) * C48247) *
                C48405 * C48489) *
               C48166) *
              C1988 +
          ((((C5059 * C526 + C5055 * C541 + C5060 * C1420 + C48520 * C1432) *
                 C717 +
             (C5059 * C542 + C5055 * C556 + C5060 * C1433 + C48520 * C1447) *
                 C48470 -
             (C5060 * C1421 + C48520 * C1434 + C5059 * C1420 + C5055 * C1432) *
                 C718 -
             (C5060 * C1435 + C48520 * C1448 + C5059 * C1433 + C5055 * C1447) *
                 C48247) *
                C48405 * C5057 +
            ((C5490 + C5491) * C717 + (C5492 + C5493) * C48470 -
             (C7460 + C7461) * C718 - (C7462 + C7463) * C48247) *
                C48405 * C48489) *
               C48456 +
           (((C7461 + C7460) * C718 -
             ((C5493 + C5492) * C48470 + (C5491 + C5490) * C717) +
             (C7463 + C7462) * C48247) *
                C48405 * C5057 +
            ((C5059 * C1424 + C5055 * C1440 + C5060 * C1425 + C48520 * C1442) *
                 C718 -
             ((C5494 + C5495) * C48470 + (C5496 + C5497) * C717) +
             (C5059 * C1441 + C5055 * C1451 + C5060 * C1443 + C48520 * C1452) *
                 C48247) *
                C48405 * C48489) *
               C48166) *
              C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C1557 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C1551 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C1558 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C1552 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C1559 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C1553 -
            (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
                C1560 -
            (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
                C48512) *
               C48405 * C5057 +
           ((C5094 + C5095) * C1557 + (C5096 + C5097) * C1551 -
            (C5288 + C5289) * C1558 - (C5290 + C5291) * C1552 +
            (C5292 + C5293) * C1559 + (C5294 + C5295) * C1553 -
            (C6528 + C6529) * C1560 - (C6530 + C6531) * C48512) *
               C48405 * C48489) *
              C48156 * C48471 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                C1558 -
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C1551 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C1557) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                C1552 -
            (C5060 * C1865 + C48520 * C1868 + C5059 * C1417 + C5055 * C1426) *
                C1559 -
            (C5060 * C1869 + C48520 * C1874 + C5059 * C1427 + C5055 * C1444) *
                C1553 +
            (C5059 * C1865 + C5055 * C1868 + C5060 * C6867 + C48520 * C6869) *
                C1560 +
            (C5059 * C1869 + C5055 * C1874 + C5060 * C6870 + C48520 * C6873) *
                C48512) *
               C48405 * C5057 +
           ((C5992 + C5993) * C1558 -
            ((C5485 + C5484) * C1551 + (C5483 + C5482) * C1557) +
            (C5994 + C5995) * C1552 - (C6734 + C6735) * C1559 -
            (C6736 + C6737) * C1553 +
            (C5059 * C1866 + C5055 * C1870 + C5060 * C6868 + C48520 * C6871) *
                C1560 +
            (C5059 * C1871 + C5055 * C1875 + C5060 * C6872 + C48520 * C6874) *
                C48512) *
               C48405 * C48489) *
              C48156 * C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C717 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48470 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C718 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48247) *
                C48405 * C5057 +
            ((C5094 + C5095) * C717 + (C5096 + C5097) * C48470 -
             (C5288 + C5289) * C718 - (C5290 + C5291) * C48247) *
                C48405 * C48489) *
               C302 +
           (((C5289 + C5288) * C718 -
             ((C5097 + C5096) * C48470 + (C5095 + C5094) * C717) +
             (C5291 + C5290) * C48247) *
                C48405 * C5057 +
            ((C5296 + C5297) * C718 -
             ((C5098 + C5099) * C48470 + (C5100 + C5101) * C717) +
             (C5298 + C5299) * C48247) *
                C48405 * C48489) *
               C303 +
           (((C5101 + C5100) * C717 + (C5099 + C5098) * C48470 -
             (C5297 + C5296) * C718 - (C5299 + C5298) * C48247) *
                C48405 * C5057 +
            ((C5102 + C5103) * C717 + (C5104 + C5105) * C48470 -
             (C5636 + C5637) * C718 - (C5638 + C5639) * C48247) *
                C48405 * C48489) *
               C48496) *
              C48471 +
          ((((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                 C718 -
             ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                  C48470 +
              (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                  C717) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                 C48247) *
                C48405 * C5057 +
            ((C5992 + C5993) * C718 -
             ((C5485 + C5484) * C48470 + (C5483 + C5482) * C717) +
             (C5994 + C5995) * C48247) *
                C48405 * C48489) *
               C302 +
           (((C5482 + C5483) * C717 + (C5484 + C5485) * C48470 -
             (C5993 + C5992) * C718 - (C5995 + C5994) * C48247) *
                C48405 * C5057 +
            ((C5486 + C5487) * C717 + (C5488 + C5489) * C48470 -
             (C5996 + C5997) * C718 - (C5998 + C5999) * C48247) *
                C48405 * C48489) *
               C303 +
           (((C5997 + C5996) * C718 -
             ((C5489 + C5488) * C48470 + (C5487 + C5486) * C717) +
             (C5999 + C5998) * C48247) *
                C48405 * C5057 +
            ((C5059 * C1016 + C5055 * C1024 + C5060 * C1739 + C48520 * C1740) *
                 C718 -
             ((C5778 + C5779) * C48470 + (C5780 + C5781) * C717) +
             (C5059 * C1025 + C5055 * C1031 + C5060 * C1741 + C48520 * C1742) *
                 C48247) *
                C48405 * C48489) *
               C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C717 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48470 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C718 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48247) *
               C48405 * C5057 +
           ((C5094 + C5095) * C717 + (C5096 + C5097) * C48470 -
            (C5288 + C5289) * C718 - (C5290 + C5291) * C48247) *
               C48405 * C48489) *
              C48156 * C2459 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                C718 -
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C48470 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C717) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                C48247) *
               C48405 * C5057 +
           ((C5992 + C5993) * C718 -
            ((C5485 + C5484) * C48470 + (C5483 + C5482) * C717) +
            (C5994 + C5995) * C48247) *
               C48405 * C48489) *
              C48156 * C2460 +
          (((C5059 * C526 + C5055 * C541 + C5060 * C1420 + C48520 * C1432) *
                C717 +
            (C5059 * C542 + C5055 * C556 + C5060 * C1433 + C48520 * C1447) *
                C48470 -
            (C5060 * C1421 + C48520 * C1434 + C5059 * C1420 + C5055 * C1432) *
                C718 -
            (C5060 * C1435 + C48520 * C1448 + C5059 * C1433 + C5055 * C1447) *
                C48247) *
               C48405 * C5057 +
           ((C5490 + C5491) * C717 + (C5492 + C5493) * C48470 -
            (C7460 + C7461) * C718 - (C7462 + C7463) * C48247) *
               C48405 * C48489) *
              C48156 * C2461 +
          (((C5059 * C2581 + C5055 * C2584 + C5060 * C7735 + C48520 * C7737) *
                C718 -
            ((C5060 * C2585 + C48520 * C2590 + C5059 * C2177 + C5055 * C2187) *
                 C48470 +
             (C5060 * C2581 + C48520 * C2584 + C5059 * C2169 + C5055 * C2178) *
                 C717) +
            (C5059 * C2585 + C5055 * C2590 + C5060 * C7738 + C48520 * C7741) *
                C48247) *
               C48405 * C5057 +
           ((C5059 * C2582 + C5055 * C2586 + C5060 * C7736 + C48520 * C7739) *
                C718 -
            ((C7605 + C7604) * C48470 + (C7603 + C7602) * C717) +
            (C5059 * C2587 + C5055 * C2591 + C5060 * C7740 + C48520 * C7742) *
                C48247) *
               C48405 * C48489) *
              C48156 * C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                    C114 +
                (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                    C48184) *
                   C48405 * C5057 +
               ((C5094 + C5095) * C114 + (C5096 + C5097) * C48184) * C48405 *
                   C48489) *
                  C107 -
              (((C5098 + C5099) * C48184 + (C5100 + C5101) * C114) * C48405 *
                   C48489 +
               ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C48405 *
                   C5057) *
                  C108 +
              (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C48405 *
                   C5057 +
               ((C5102 + C5103) * C114 + (C5104 + C5105) * C48184) * C48405 *
                   C48489) *
                  C109 -
              (((C5106 + C5107) * C48184 + (C5108 + C5109) * C114) * C48405 *
                   C48489 +
               ((C5105 + C5104) * C48184 + (C5103 + C5102) * C114) * C48405 *
                   C5057) *
                  C110 +
              (((C5109 + C5108) * C114 + (C5107 + C5106) * C48184) * C48405 *
                   C5057 +
               ((C5059 * C120 + C5055 * C133 + C5060 * C719 + C48520 * C720) *
                    C114 +
                (C5059 * C132 + C5055 * C141 + C5060 * C721 + C48520 * C722) *
                    C48184) *
                   C48405 * C48489) *
                  C111) *
             C48202 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                    C305 +
                (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                    C48541 -
                (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                    C306 -
                (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                    C48529 +
                (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                    C307 +
                (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                    C48502) *
                   C48405 * C5057 +
               ((C5094 + C5095) * C305 + (C5096 + C5097) * C48541 -
                (C5288 + C5289) * C306 - (C5290 + C5291) * C48529 +
                (C5292 + C5293) * C307 + (C5294 + C5295) * C48502) *
                   C48405 * C48489) *
                  C302 +
              (((C5289 + C5288) * C306 -
                ((C5097 + C5096) * C48541 + (C5095 + C5094) * C305) +
                (C5291 + C5290) * C48529 - (C5293 + C5292) * C307 -
                (C5295 + C5294) * C48502) *
                   C48405 * C5057 +
               ((C5296 + C5297) * C306 -
                ((C5098 + C5099) * C48541 + (C5100 + C5101) * C305) +
                (C5298 + C5299) * C48529 - (C5300 + C5301) * C307 -
                (C5302 + C5303) * C48502) *
                   C48405 * C48489) *
                  C303 +
              (((C5101 + C5100) * C305 + (C5099 + C5098) * C48541 -
                (C5297 + C5296) * C306 - (C5299 + C5298) * C48529 +
                (C5301 + C5300) * C307 + (C5303 + C5302) * C48502) *
                   C48405 * C5057 +
               ((C5102 + C5103) * C305 + (C5104 + C5105) * C48541 -
                (C5060 * C315 + C48520 * C332 + C5059 * C314 + C5055 * C330) *
                    C306 -
                (C5060 * C333 + C48520 * C345 + C5059 * C331 + C5055 * C344) *
                    C48529 +
                (C5059 * C315 + C5055 * C332 + C5060 * C1561 + C48520 * C1562) *
                    C307 +
                (C5059 * C333 + C5055 * C345 + C5060 * C1563 + C48520 * C1564) *
                    C48502) *
                   C48405 * C48489) *
                  C48496) *
             C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48184) * C48405 *
                C48489) *
               C302 -
           (((C5098 + C5099) * C48184 + (C5100 + C5101) * C114) * C48405 *
                C48489 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C48405 *
                C5057) *
               C303 +
           (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C48405 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48184) * C48405 *
                C48489) *
               C48496) *
              C48542 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C48405 *
                C5057 +
            ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48405 *
                C48489) *
               C303 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48405 *
                C48489 +
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C48184 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C114) *
                C48405 * C5057) *
               C302 -
           (((C5060 * C1025 + C48520 * C1031 + C5059 * C536 + C5055 * C553) *
                 C48184 +
             (C5060 * C1016 + C48520 * C1024 + C5059 * C523 + C5055 * C535) *
                 C114) *
                C48405 * C48489 +
            ((C5489 + C5488) * C48184 + (C5487 + C5486) * C114) * C48405 *
                C5057) *
               C48496) *
              C48531 +
          ((((C5059 * C526 + C5055 * C541 + C5060 * C1420 + C48520 * C1432) *
                 C114 +
             (C5059 * C542 + C5055 * C556 + C5060 * C1433 + C48520 * C1447) *
                 C48184) *
                C48405 * C5057 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48184) * C48405 *
                C48489) *
               C302 -
           (((C5494 + C5495) * C48184 + (C5496 + C5497) * C114) * C48405 *
                C48489 +
            ((C5493 + C5492) * C48184 + (C5491 + C5490) * C114) * C48405 *
                C5057) *
               C303 +
           (((C5497 + C5496) * C114 + (C5495 + C5494) * C48184) * C48405 *
                C5057 +
            ((C5059 * C529 + C5055 * C548 + C5060 * C2337 + C48520 * C2338) *
                 C114 +
             (C5059 * C547 + C5055 * C559 + C5060 * C2339 + C48520 * C2340) *
                 C48184) *
                C48405 * C48489) *
               C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C1183 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C1177 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C1184 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C1178 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C1185 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C5057 +
           ((C5094 + C5095) * C1183 + (C5096 + C5097) * C1177 -
            (C5288 + C5289) * C1184 - (C5290 + C5291) * C1178 +
            (C5292 + C5293) * C1185 + (C5294 + C5295) * C48502) *
               C48405 * C48489) *
              C48538 +
          (((C5289 + C5288) * C1184 -
            ((C5097 + C5096) * C1177 + (C5095 + C5094) * C1183) +
            (C5291 + C5290) * C1178 - (C5293 + C5292) * C1185 -
            (C5295 + C5294) * C48502) *
               C48405 * C5057 +
           ((C5296 + C5297) * C1184 -
            ((C5098 + C5099) * C1177 + (C5100 + C5101) * C1183) +
            (C5298 + C5299) * C1178 - (C5300 + C5301) * C1185 -
            (C5302 + C5303) * C48502) *
               C48405 * C48489) *
              C48525 +
          (((C5101 + C5100) * C1183 + (C5099 + C5098) * C1177 -
            (C5297 + C5296) * C1184 - (C5299 + C5298) * C1178 +
            (C5301 + C5300) * C1185 + (C5303 + C5302) * C48502) *
               C48405 * C5057 +
           ((C5102 + C5103) * C1183 + (C5104 + C5105) * C1177 -
            (C5636 + C5637) * C1184 - (C5638 + C5639) * C1178 +
            (C5059 * C315 + C5055 * C332 + C5060 * C1561 + C48520 * C1562) *
                C1185 +
            (C5059 * C333 + C5055 * C345 + C5060 * C1563 + C48520 * C1564) *
                C48502) *
               C48405 * C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
               C1278 +
           (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
               C1272 -
           (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
               C1279 -
           (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
               C1273 +
           (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
               C1280 +
           (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
               C1274 -
           (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
               C1281 -
           (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
               C1275 +
           (C5059 * C1284 + C5055 * C1291 + C5060 * C6227 + C48520 * C6229) *
               C1282 +
           (C5059 * C1292 + C5055 * C1302 + C5060 * C6230 + C48520 * C6233) *
               C1276) *
              C48405 * C5057 +
          ((C5094 + C5095) * C1278 + (C5096 + C5097) * C1272 -
           (C5288 + C5289) * C1279 - (C5290 + C5291) * C1273 +
           (C5292 + C5293) * C1280 + (C5294 + C5295) * C1274 -
           (C5060 * C1286 + C48520 * C1295 + C5059 * C1285 + C5055 * C1293) *
               C1281 -
           (C5060 * C1296 + C48520 * C1304 + C5059 * C1294 + C5055 * C1303) *
               C1275 +
           (C5059 * C1286 + C5055 * C1295 + C5060 * C6228 + C48520 * C6231) *
               C1282 +
           (C5059 * C1296 + C5055 * C1304 + C5060 * C6232 + C48520 * C6234) *
               C1276) *
              C48405 * C48489) *
         C48156 * C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C1183 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C1177 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C1184 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C1178 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C1185 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C5057 +
           ((C5094 + C5095) * C1183 + (C5096 + C5097) * C1177 -
            (C5288 + C5289) * C1184 - (C5290 + C5291) * C1178 +
            (C5292 + C5293) * C1185 + (C5294 + C5295) * C48502) *
               C48405 * C48489) *
              C48156 * C48542 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                C1184 -
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C1177 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C1183) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                C1178 -
            (C5060 * C1865 + C48520 * C1868 + C5059 * C1417 + C5055 * C1426) *
                C1185 -
            (C5060 * C1869 + C48520 * C1874 + C5059 * C1427 + C5055 * C1444) *
                C48502) *
               C48405 * C5057 +
           ((C5992 + C5993) * C1184 -
            ((C5485 + C5484) * C1177 + (C5483 + C5482) * C1183) +
            (C5994 + C5995) * C1178 -
            (C5060 * C1866 + C48520 * C1870 + C5059 * C1418 + C5055 * C1428) *
                C1185 -
            (C5060 * C1871 + C48520 * C1875 + C5059 * C1429 + C5055 * C1445) *
                C48502) *
               C48405 * C48489) *
              C48156 * C48531 +
          (((C5059 * C526 + C5055 * C541 + C5060 * C1420 + C48520 * C1432) *
                C1183 +
            (C5059 * C542 + C5055 * C556 + C5060 * C1433 + C48520 * C1447) *
                C1177 -
            (C5060 * C1421 + C48520 * C1434 + C5059 * C1420 + C5055 * C1432) *
                C1184 -
            (C5060 * C1435 + C48520 * C1448 + C5059 * C1433 + C5055 * C1447) *
                C1178 +
            (C5059 * C1421 + C5055 * C1434 + C5060 * C6381 + C48520 * C6383) *
                C1185 +
            (C5059 * C1435 + C5055 * C1448 + C5060 * C6384 + C48520 * C6387) *
                C48502) *
               C48405 * C5057 +
           ((C5490 + C5491) * C1183 + (C5492 + C5493) * C1177 -
            (C5060 * C1423 + C48520 * C1438 + C5059 * C1422 + C5055 * C1436) *
                C1184 -
            (C5060 * C1439 + C48520 * C1450 + C5059 * C1437 + C5055 * C1449) *
                C1178 +
            (C5059 * C1423 + C5055 * C1438 + C5060 * C6382 + C48520 * C6385) *
                C1185 +
            (C5059 * C1439 + C5055 * C1450 + C5060 * C6386 + C48520 * C6388) *
                C48502) *
               C48405 * C48489) *
              C48156 * C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48184) * C48405 *
                C48489) *
               C48538 -
           (((C5098 + C5099) * C48184 + (C5100 + C5101) * C114) * C48405 *
                C48489 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C48405 *
                C5057) *
               C48525 +
           (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C48405 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48184) * C48405 *
                C48489) *
               C48496) *
              C1987 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C48405 *
                C5057 +
            ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48405 *
                C48489) *
               C48525 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48405 *
                C48489 +
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C48184 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C114) *
                C48405 * C5057) *
               C48538 -
           (((C5778 + C5779) * C48184 + (C5780 + C5781) * C114) * C48405 *
                C48489 +
            ((C5489 + C5488) * C48184 + (C5487 + C5486) * C114) * C48405 *
                C5057) *
               C48496) *
              C1988 +
          ((((C5059 * C526 + C5055 * C541 + C5060 * C1420 + C48520 * C1432) *
                 C114 +
             (C5059 * C542 + C5055 * C556 + C5060 * C1433 + C48520 * C1447) *
                 C48184) *
                C48405 * C5057 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48184) * C48405 *
                C48489) *
               C48538 -
           (((C5494 + C5495) * C48184 + (C5496 + C5497) * C114) * C48405 *
                C48489 +
            ((C5493 + C5492) * C48184 + (C5491 + C5490) * C114) * C48405 *
                C5057) *
               C48525 +
           (((C5497 + C5496) * C114 + (C5495 + C5494) * C48184) * C48405 *
                C5057 +
            ((C5059 * C529 + C5055 * C548 + C5060 * C2337 + C48520 * C2338) *
                 C114 +
             (C5059 * C547 + C5055 * C559 + C5060 * C2339 + C48520 * C2340) *
                 C48184) *
                C48405 * C48489) *
               C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C305 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48541 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C306 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48529 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C307 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C5057 +
           ((C5094 + C5095) * C305 + (C5096 + C5097) * C48541 -
            (C5288 + C5289) * C306 - (C5290 + C5291) * C48529 +
            (C5292 + C5293) * C307 + (C5294 + C5295) * C48502) *
               C48405 * C48489) *
              C48156 * C1987 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                C306 -
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C48541 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C305) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                C48529 -
            (C5060 * C1865 + C48520 * C1868 + C5059 * C1417 + C5055 * C1426) *
                C307 -
            (C5060 * C1869 + C48520 * C1874 + C5059 * C1427 + C5055 * C1444) *
                C48502) *
               C48405 * C5057 +
           ((C5992 + C5993) * C306 -
            ((C5485 + C5484) * C48541 + (C5483 + C5482) * C305) +
            (C5994 + C5995) * C48529 - (C6734 + C6735) * C307 -
            (C6736 + C6737) * C48502) *
               C48405 * C48489) *
              C48156 * C1988 +
          (((C5059 * C526 + C5055 * C541 + C5060 * C1420 + C48520 * C1432) *
                C305 +
            (C5059 * C542 + C5055 * C556 + C5060 * C1433 + C48520 * C1447) *
                C48541 -
            (C5060 * C1421 + C48520 * C1434 + C5059 * C1420 + C5055 * C1432) *
                C306 -
            (C5060 * C1435 + C48520 * C1448 + C5059 * C1433 + C5055 * C1447) *
                C48529 +
            (C5059 * C1421 + C5055 * C1434 + C5060 * C6381 + C48520 * C6383) *
                C307 +
            (C5059 * C1435 + C5055 * C1448 + C5060 * C6384 + C48520 * C6387) *
                C48502) *
               C48405 * C5057 +
           ((C5490 + C5491) * C305 + (C5492 + C5493) * C48541 -
            (C5060 * C1423 + C48520 * C1438 + C5059 * C1422 + C5055 * C1436) *
                C306 -
            (C5060 * C1439 + C48520 * C1450 + C5059 * C1437 + C5055 * C1449) *
                C48529 +
            (C5059 * C1423 + C5055 * C1438 + C5060 * C6382 + C48520 * C6385) *
                C307 +
            (C5059 * C1439 + C5055 * C1450 + C5060 * C6386 + C48520 * C6388) *
                C48502) *
               C48405 * C48489) *
              C48156 * C48505)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48184) *
               C48405 * C5057 +
           ((C5094 + C5095) * C114 + (C5096 + C5097) * C48184) * C48405 *
               C48489) *
              C48156 * C2162 -
          (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48405 *
               C48489 +
           ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                C48184 +
            (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                C114) *
               C48405 * C5057) *
              C48156 * C2163 +
          (((C5059 * C526 + C5055 * C541 + C5060 * C1420 + C48520 * C1432) *
                C114 +
            (C5059 * C542 + C5055 * C556 + C5060 * C1433 + C48520 * C1447) *
                C48184) *
               C48405 * C5057 +
           ((C5490 + C5491) * C114 + (C5492 + C5493) * C48184) * C48405 *
               C48489) *
              C48156 * C2164 -
          (((C5060 * C2587 + C48520 * C2591 + C5059 * C2175 + C5055 * C2186) *
                C48184 +
            (C5060 * C2582 + C48520 * C2586 + C5059 * C2168 + C5055 * C2176) *
                C114) *
               C48405 * C48489 +
           ((C5060 * C2585 + C48520 * C2590 + C5059 * C2177 + C5055 * C2187) *
                C48184 +
            (C5060 * C2581 + C48520 * C2584 + C5059 * C2169 + C5055 * C2178) *
                C114) *
               C48405 * C5057) *
              C48156 * C2165 +
          (((C5059 * C2170 + C5055 * C2179 + C5060 * C7249 + C48520 * C7251) *
                C114 +
            (C5059 * C2180 + C5055 * C2188 + C5060 * C7252 + C48520 * C7255) *
                C48184) *
               C48405 * C5057 +
           ((C5059 * C2171 + C5055 * C2181 + C5060 * C7250 + C48520 * C7253) *
                C114 +
            (C5059 * C2182 + C5055 * C2189 + C5060 * C7254 + C48520 * C7256) *
                C48184) *
               C48405 * C48489) *
              C48156 * C2166)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C1183 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C1177 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C1184 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C1178 +
             (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                 C1185 +
             (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                 C48502) *
                C48405 * C5057 +
            ((C5094 + C5095) * C1183 + (C5096 + C5097) * C1177 -
             (C5288 + C5289) * C1184 - (C5290 + C5291) * C1178 +
             (C5292 + C5293) * C1185 + (C5294 + C5295) * C48502) *
                C48405 * C48489) *
               C48456 +
           (((C5289 + C5288) * C1184 -
             ((C5097 + C5096) * C1177 + (C5095 + C5094) * C1183) +
             (C5291 + C5290) * C1178 - (C5293 + C5292) * C1185 -
             (C5295 + C5294) * C48502) *
                C48405 * C5057 +
            ((C5296 + C5297) * C1184 -
             ((C5098 + C5099) * C1177 + (C5100 + C5101) * C1183) +
             (C5298 + C5299) * C1178 - (C5300 + C5301) * C1185 -
             (C5302 + C5303) * C48502) *
                C48405 * C48489) *
               C48166) *
              C48471 +
          ((((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                 C1184 -
             ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                  C1177 +
              (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                  C1183) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                 C1178 -
             (C5060 * C1865 + C48520 * C1868 + C5059 * C1417 + C5055 * C1426) *
                 C1185 -
             (C5060 * C1869 + C48520 * C1874 + C5059 * C1427 + C5055 * C1444) *
                 C48502) *
                C48405 * C5057 +
            ((C5992 + C5993) * C1184 -
             ((C5485 + C5484) * C1177 + (C5483 + C5482) * C1183) +
             (C5994 + C5995) * C1178 - (C6734 + C6735) * C1185 -
             (C6736 + C6737) * C48502) *
                C48405 * C48489) *
               C48456 +
           (((C5482 + C5483) * C1183 + (C5484 + C5485) * C1177 -
             (C5993 + C5992) * C1184 - (C5995 + C5994) * C1178 +
             (C6735 + C6734) * C1185 + (C6737 + C6736) * C48502) *
                C48405 * C5057 +
            ((C5486 + C5487) * C1183 + (C5488 + C5489) * C1177 -
             (C5996 + C5997) * C1184 - (C5998 + C5999) * C1178 +
             (C5059 * C1419 + C5055 * C1430 + C5060 * C1867 + C48520 * C1872) *
                 C1185 +
             (C5059 * C1431 + C5055 * C1446 + C5060 * C1873 + C48520 * C1876) *
                 C48502) *
                C48405 * C48489) *
               C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48184) * C48405 *
                C48489) *
               C713 -
           (((C5098 + C5099) * C48184 + (C5100 + C5101) * C114) * C48405 *
                C48489 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C48405 *
                C5057) *
               C714 +
           (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C48405 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48184) * C48405 *
                C48489) *
               C715 -
           (((C5106 + C5107) * C48184 + (C5108 + C5109) * C114) * C48405 *
                C48489 +
            ((C5105 + C5104) * C48184 + (C5103 + C5102) * C114) * C48405 *
                C5057) *
               C48506) *
              C48471 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C48405 *
                C5057 +
            ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48405 *
                C48489) *
               C714 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48405 *
                C48489 +
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C48184 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C114) *
                C48405 * C5057) *
               C713 -
           (((C5778 + C5779) * C48184 + (C5780 + C5781) * C114) * C48405 *
                C48489 +
            ((C5489 + C5488) * C48184 + (C5487 + C5486) * C114) * C48405 *
                C5057) *
               C715 +
           (((C5781 + C5780) * C114 + (C5779 + C5778) * C48184) * C48405 *
                C5057 +
            ((C5059 * C525 + C5055 * C540 + C5060 * C1017 + C48520 * C1026) *
                 C114 +
             (C5059 * C539 + C5055 * C555 + C5060 * C1027 + C48520 * C1032) *
                 C48184) *
                C48405 * C48489) *
               C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48184) * C48405 *
                C48489) *
               C48456 -
           (((C5098 + C5099) * C48184 + (C5100 + C5101) * C114) * C48405 *
                C48489 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C48405 *
                C5057) *
               C48166) *
              C2459 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C48405 *
                C5057 +
            ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48405 *
                C48489) *
               C48166 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48405 *
                C48489 +
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C48184 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C114) *
                C48405 * C5057) *
               C48456) *
              C2460 +
          ((((C5059 * C526 + C5055 * C541 + C5060 * C1420 + C48520 * C1432) *
                 C114 +
             (C5059 * C542 + C5055 * C556 + C5060 * C1433 + C48520 * C1447) *
                 C48184) *
                C48405 * C5057 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48184) * C48405 *
                C48489) *
               C48456 -
           (((C5494 + C5495) * C48184 + (C5496 + C5497) * C114) * C48405 *
                C48489 +
            ((C5493 + C5492) * C48184 + (C5491 + C5490) * C114) * C48405 *
                C5057) *
               C48166) *
              C2461 +
          ((((C7602 + C7603) * C114 + (C7604 + C7605) * C48184) * C48405 *
                C5057 +
            ((C5059 * C2167 + C5055 * C2174 + C5060 * C2583 + C48520 * C2588) *
                 C114 +
             (C5059 * C2173 + C5055 * C2185 + C5060 * C2589 + C48520 * C2592) *
                 C48184) *
                C48405 * C48489) *
               C48166 -
           (((C7605 + C7604) * C48184 + (C7603 + C7602) * C114) * C48405 *
                C48489 +
            ((C5060 * C2585 + C48520 * C2590 + C5059 * C2177 + C5055 * C2187) *
                 C48184 +
             (C5060 * C2581 + C48520 * C2584 + C5059 * C2169 + C5055 * C2178) *
                 C114) *
                C48405 * C5057) *
               C48456) *
              C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C305 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48541 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C306 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48529 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C307 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C5057 +
           ((C5094 + C5095) * C305 + (C5096 + C5097) * C48541 -
            (C5288 + C5289) * C306 - (C5290 + C5291) * C48529 +
            (C5292 + C5293) * C307 + (C5294 + C5295) * C48502) *
               C48405 * C48489) *
              C302 +
          (((C5289 + C5288) * C306 -
            ((C5097 + C5096) * C48541 + (C5095 + C5094) * C305) +
            (C5291 + C5290) * C48529 - (C5293 + C5292) * C307 -
            (C5295 + C5294) * C48502) *
               C48405 * C5057 +
           ((C5296 + C5297) * C306 -
            ((C5098 + C5099) * C48541 + (C5100 + C5101) * C305) +
            (C5298 + C5299) * C48529 - (C5300 + C5301) * C307 -
            (C5302 + C5303) * C48502) *
               C48405 * C48489) *
              C303 +
          (((C5101 + C5100) * C305 + (C5099 + C5098) * C48541 -
            (C5297 + C5296) * C306 - (C5299 + C5298) * C48529 +
            (C5301 + C5300) * C307 + (C5303 + C5302) * C48502) *
               C48405 * C5057 +
           ((C5102 + C5103) * C305 + (C5104 + C5105) * C48541 -
            (C5060 * C315 + C48520 * C332 + C5059 * C314 + C5055 * C330) *
                C306 -
            (C5060 * C333 + C48520 * C345 + C5059 * C331 + C5055 * C344) *
                C48529 +
            (C5059 * C315 + C5055 * C332 + C5060 * C1561 + C48520 * C1562) *
                C307 +
            (C5059 * C333 + C5055 * C345 + C5060 * C1563 + C48520 * C1564) *
                C48502) *
               C48405 * C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48184) *
               C48405 * C5057 +
           ((C5094 + C5095) * C114 + (C5096 + C5097) * C48184) * C48405 *
               C48489) *
              C107 -
          (((C5098 + C5099) * C48184 + (C5100 + C5101) * C114) * C48405 *
               C48489 +
           ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C48405 *
               C5057) *
              C108 +
          (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C48405 *
               C5057 +
           ((C5102 + C5103) * C114 + (C5104 + C5105) * C48184) * C48405 *
               C48489) *
              C109 -
          (((C5106 + C5107) * C48184 + (C5108 + C5109) * C114) * C48405 *
               C48489 +
           ((C5105 + C5104) * C48184 + (C5103 + C5102) * C114) * C48405 *
               C5057) *
              C110 +
          (((C5109 + C5108) * C114 + (C5107 + C5106) * C48184) * C48405 *
               C5057 +
           ((C5059 * C120 + C5055 * C133 + C5060 * C719 + C48520 * C720) *
                C114 +
            (C5059 * C132 + C5055 * C141 + C5060 * C721 + C48520 * C722) *
                C48184) *
               C48405 * C48489) *
              C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C1183 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C1177 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C1184 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C1178 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C1185 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C5057 +
           ((C5094 + C5095) * C1183 + (C5096 + C5097) * C1177 -
            (C5288 + C5289) * C1184 - (C5290 + C5291) * C1178 +
            (C5292 + C5293) * C1185 + (C5294 + C5295) * C48502) *
               C48405 * C48489) *
              C48538 +
          (((C5289 + C5288) * C1184 -
            ((C5097 + C5096) * C1177 + (C5095 + C5094) * C1183) +
            (C5291 + C5290) * C1178 - (C5293 + C5292) * C1185 -
            (C5295 + C5294) * C48502) *
               C48405 * C5057 +
           ((C5296 + C5297) * C1184 -
            ((C5098 + C5099) * C1177 + (C5100 + C5101) * C1183) +
            (C5298 + C5299) * C1178 - (C5300 + C5301) * C1185 -
            (C5302 + C5303) * C48502) *
               C48405 * C48489) *
              C48525 +
          (((C5101 + C5100) * C1183 + (C5099 + C5098) * C1177 -
            (C5297 + C5296) * C1184 - (C5299 + C5298) * C1178 +
            (C5301 + C5300) * C1185 + (C5303 + C5302) * C48502) *
               C48405 * C5057 +
           ((C5102 + C5103) * C1183 + (C5104 + C5105) * C1177 -
            (C5636 + C5637) * C1184 - (C5638 + C5639) * C1178 +
            (C5059 * C315 + C5055 * C332 + C5060 * C1561 + C48520 * C1562) *
                C1185 +
            (C5059 * C333 + C5055 * C345 + C5060 * C1563 + C48520 * C1564) *
                C48502) *
               C48405 * C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
               C1278 +
           (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
               C1272 -
           (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
               C1279 -
           (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
               C1273 +
           (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
               C1280 +
           (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
               C1274 -
           (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
               C1281 -
           (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
               C1275 +
           (C5059 * C1284 + C5055 * C1291 + C5060 * C6227 + C48520 * C6229) *
               C1282 +
           (C5059 * C1292 + C5055 * C1302 + C5060 * C6230 + C48520 * C6233) *
               C1276) *
              C48405 * C5057 +
          ((C5094 + C5095) * C1278 + (C5096 + C5097) * C1272 -
           (C5288 + C5289) * C1279 - (C5290 + C5291) * C1273 +
           (C5292 + C5293) * C1280 + (C5294 + C5295) * C1274 -
           (C5060 * C1286 + C48520 * C1295 + C5059 * C1285 + C5055 * C1293) *
               C1281 -
           (C5060 * C1296 + C48520 * C1304 + C5059 * C1294 + C5055 * C1303) *
               C1275 +
           (C5059 * C1286 + C5055 * C1295 + C5060 * C6228 + C48520 * C6231) *
               C1282 +
           (C5059 * C1296 + C5055 * C1304 + C5060 * C6232 + C48520 * C6234) *
               C1276) *
              C48405 * C48489) *
         C48156 * C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48184) * C48405 *
                C48489) *
               C48538 -
           (((C5098 + C5099) * C48184 + (C5100 + C5101) * C114) * C48405 *
                C48489 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C48405 *
                C5057) *
               C48525 +
           (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C48405 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48184) * C48405 *
                C48489) *
               C48496) *
              C1987 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C48405 *
                C5057 +
            ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48405 *
                C48489) *
               C48525 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48405 *
                C48489 +
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C48184 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C114) *
                C48405 * C5057) *
               C48538 -
           (((C5778 + C5779) * C48184 + (C5780 + C5781) * C114) * C48405 *
                C48489 +
            ((C5489 + C5488) * C48184 + (C5487 + C5486) * C114) * C48405 *
                C5057) *
               C48496) *
              C1988 +
          ((((C5059 * C526 + C5055 * C541 + C5060 * C1420 + C48520 * C1432) *
                 C114 +
             (C5059 * C542 + C5055 * C556 + C5060 * C1433 + C48520 * C1447) *
                 C48184) *
                C48405 * C5057 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48184) * C48405 *
                C48489) *
               C48538 -
           (((C5494 + C5495) * C48184 + (C5496 + C5497) * C114) * C48405 *
                C48489 +
            ((C5493 + C5492) * C48184 + (C5491 + C5490) * C114) * C48405 *
                C5057) *
               C48525 +
           (((C5497 + C5496) * C114 + (C5495 + C5494) * C48184) * C48405 *
                C5057 +
            ((C5059 * C529 + C5055 * C548 + C5060 * C2337 + C48520 * C2338) *
                 C114 +
             (C5059 * C547 + C5055 * C559 + C5060 * C2339 + C48520 * C2340) *
                 C48184) *
                C48405 * C48489) *
               C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C305 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48541 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C306 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48529 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C307 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C5057 +
           ((C5094 + C5095) * C305 + (C5096 + C5097) * C48541 -
            (C5288 + C5289) * C306 - (C5290 + C5291) * C48529 +
            (C5292 + C5293) * C307 + (C5294 + C5295) * C48502) *
               C48405 * C48489) *
              C48156 * C1987 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                C306 -
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C48541 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C305) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                C48529 -
            (C5060 * C1865 + C48520 * C1868 + C5059 * C1417 + C5055 * C1426) *
                C307 -
            (C5060 * C1869 + C48520 * C1874 + C5059 * C1427 + C5055 * C1444) *
                C48502) *
               C48405 * C5057 +
           ((C5992 + C5993) * C306 -
            ((C5485 + C5484) * C48541 + (C5483 + C5482) * C305) +
            (C5994 + C5995) * C48529 - (C6734 + C6735) * C307 -
            (C6736 + C6737) * C48502) *
               C48405 * C48489) *
              C48156 * C1988 +
          (((C5059 * C526 + C5055 * C541 + C5060 * C1420 + C48520 * C1432) *
                C305 +
            (C5059 * C542 + C5055 * C556 + C5060 * C1433 + C48520 * C1447) *
                C48541 -
            (C5060 * C1421 + C48520 * C1434 + C5059 * C1420 + C5055 * C1432) *
                C306 -
            (C5060 * C1435 + C48520 * C1448 + C5059 * C1433 + C5055 * C1447) *
                C48529 +
            (C5059 * C1421 + C5055 * C1434 + C5060 * C6381 + C48520 * C6383) *
                C307 +
            (C5059 * C1435 + C5055 * C1448 + C5060 * C6384 + C48520 * C6387) *
                C48502) *
               C48405 * C5057 +
           ((C5490 + C5491) * C305 + (C5492 + C5493) * C48541 -
            (C5060 * C1423 + C48520 * C1438 + C5059 * C1422 + C5055 * C1436) *
                C306 -
            (C5060 * C1439 + C48520 * C1450 + C5059 * C1437 + C5055 * C1449) *
                C48529 +
            (C5059 * C1423 + C5055 * C1438 + C5060 * C6382 + C48520 * C6385) *
                C307 +
            (C5059 * C1439 + C5055 * C1450 + C5060 * C6386 + C48520 * C6388) *
                C48502) *
               C48405 * C48489) *
              C48156 * C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C717 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48470 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C718 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48247) *
                C48405 * C5057 +
            ((C5094 + C5095) * C717 + (C5096 + C5097) * C48470 -
             (C5288 + C5289) * C718 - (C5290 + C5291) * C48247) *
                C48405 * C48489) *
               C48161 +
           (((C5289 + C5288) * C718 -
             ((C5097 + C5096) * C48470 + (C5095 + C5094) * C717) +
             (C5291 + C5290) * C48247) *
                C48405 * C5057 +
            ((C5296 + C5297) * C718 -
             ((C5098 + C5099) * C48470 + (C5100 + C5101) * C717) +
             (C5298 + C5299) * C48247) *
                C48405 * C48489) *
               C48169 +
           (((C5101 + C5100) * C717 + (C5099 + C5098) * C48470 -
             (C5297 + C5296) * C718 - (C5299 + C5298) * C48247) *
                C48405 * C5057 +
            ((C5102 + C5103) * C717 + (C5104 + C5105) * C48470 -
             (C5636 + C5637) * C718 - (C5638 + C5639) * C48247) *
                C48405 * C48489) *
               C3124) *
              C3562 +
          ((((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                 C718 -
             ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                  C48470 +
              (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                  C717) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                 C48247) *
                C48405 * C5057 +
            ((C5992 + C5993) * C718 -
             ((C5485 + C5484) * C48470 + (C5483 + C5482) * C717) +
             (C5994 + C5995) * C48247) *
                C48405 * C48489) *
               C48161 +
           (((C5482 + C5483) * C717 + (C5484 + C5485) * C48470 -
             (C5993 + C5992) * C718 - (C5995 + C5994) * C48247) *
                C48405 * C5057 +
            ((C5486 + C5487) * C717 + (C5488 + C5489) * C48470 -
             (C5996 + C5997) * C718 - (C5998 + C5999) * C48247) *
                C48405 * C48489) *
               C48169 +
           (((C5997 + C5996) * C718 -
             ((C5489 + C5488) * C48470 + (C5487 + C5486) * C717) +
             (C5999 + C5998) * C48247) *
                C48405 * C5057 +
            ((C5059 * C1016 + C5055 * C1024 + C5060 * C1739 + C48520 * C1740) *
                 C718 -
             ((C5778 + C5779) * C48470 + (C5780 + C5781) * C717) +
             (C5059 * C1025 + C5055 * C1031 + C5060 * C1741 + C48520 * C1742) *
                 C48247) *
                C48405 * C48489) *
               C3124) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C717 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48470 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C718 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48247) *
                C48405 * C5057 +
            ((C5094 + C5095) * C717 + (C5096 + C5097) * C48470 -
             (C5288 + C5289) * C718 - (C5290 + C5291) * C48247) *
                C48405 * C48489) *
               C2825 +
           (((C5289 + C5288) * C718 -
             ((C5097 + C5096) * C48470 + (C5095 + C5094) * C717) +
             (C5291 + C5290) * C48247) *
                C48405 * C5057 +
            ((C5296 + C5297) * C718 -
             ((C5098 + C5099) * C48470 + (C5100 + C5101) * C717) +
             (C5298 + C5299) * C48247) *
                C48405 * C48489) *
               C48166) *
              C48285 +
          ((((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                 C718 -
             ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                  C48470 +
              (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                  C717) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                 C48247) *
                C48405 * C5057 +
            ((C5992 + C5993) * C718 -
             ((C5485 + C5484) * C48470 + (C5483 + C5482) * C717) +
             (C5994 + C5995) * C48247) *
                C48405 * C48489) *
               C2825 +
           (((C5482 + C5483) * C717 + (C5484 + C5485) * C48470 -
             (C5993 + C5992) * C718 - (C5995 + C5994) * C48247) *
                C48405 * C5057 +
            ((C5486 + C5487) * C717 + (C5488 + C5489) * C48470 -
             (C5996 + C5997) * C718 - (C5998 + C5999) * C48247) *
                C48405 * C48489) *
               C48166) *
              C48292 +
          ((((C5059 * C526 + C5055 * C541 + C5060 * C1420 + C48520 * C1432) *
                 C717 +
             (C5059 * C542 + C5055 * C556 + C5060 * C1433 + C48520 * C1447) *
                 C48470 -
             (C5060 * C1421 + C48520 * C1434 + C5059 * C1420 + C5055 * C1432) *
                 C718 -
             (C5060 * C1435 + C48520 * C1448 + C5059 * C1433 + C5055 * C1447) *
                 C48247) *
                C48405 * C5057 +
            ((C5490 + C5491) * C717 + (C5492 + C5493) * C48470 -
             (C7460 + C7461) * C718 - (C7462 + C7463) * C48247) *
                C48405 * C48489) *
               C2825 +
           (((C7461 + C7460) * C718 -
             ((C5493 + C5492) * C48470 + (C5491 + C5490) * C717) +
             (C7463 + C7462) * C48247) *
                C48405 * C5057 +
            ((C5059 * C1424 + C5055 * C1440 + C5060 * C1425 + C48520 * C1442) *
                 C718 -
             ((C5494 + C5495) * C48470 + (C5496 + C5497) * C717) +
             (C5059 * C1441 + C5055 * C1451 + C5060 * C1443 + C48520 * C1452) *
                 C48247) *
                C48405 * C48489) *
               C48166) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C305 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48541 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C306 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48529 +
             (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                 C307 +
             (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                 C48502) *
                C48405 * C5057 +
            ((C5094 + C5095) * C305 + (C5096 + C5097) * C48541 -
             (C5288 + C5289) * C306 - (C5290 + C5291) * C48529 +
             (C5292 + C5293) * C307 + (C5294 + C5295) * C48502) *
                C48405 * C48489) *
               C2825 +
           (((C5289 + C5288) * C306 -
             ((C5097 + C5096) * C48541 + (C5095 + C5094) * C305) +
             (C5291 + C5290) * C48529 - (C5293 + C5292) * C307 -
             (C5295 + C5294) * C48502) *
                C48405 * C5057 +
            ((C5296 + C5297) * C306 -
             ((C5098 + C5099) * C48541 + (C5100 + C5101) * C305) +
             (C5298 + C5299) * C48529 - (C5300 + C5301) * C307 -
             (C5302 + C5303) * C48502) *
                C48405 * C48489) *
               C48166) *
              C3562 +
          ((((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                 C306 -
             ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                  C48541 +
              (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                  C305) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                 C48529 -
             (C5060 * C1865 + C48520 * C1868 + C5059 * C1417 + C5055 * C1426) *
                 C307 -
             (C5060 * C1869 + C48520 * C1874 + C5059 * C1427 + C5055 * C1444) *
                 C48502) *
                C48405 * C5057 +
            ((C5992 + C5993) * C306 -
             ((C5485 + C5484) * C48541 + (C5483 + C5482) * C305) +
             (C5994 + C5995) * C48529 - (C6734 + C6735) * C307 -
             (C6736 + C6737) * C48502) *
                C48405 * C48489) *
               C2825 +
           (((C5482 + C5483) * C305 + (C5484 + C5485) * C48541 -
             (C5993 + C5992) * C306 - (C5995 + C5994) * C48529 +
             (C6735 + C6734) * C307 + (C6737 + C6736) * C48502) *
                C48405 * C5057 +
            ((C5486 + C5487) * C305 + (C5488 + C5489) * C48541 -
             (C5996 + C5997) * C306 - (C5998 + C5999) * C48529 +
             (C5059 * C1419 + C5055 * C1430 + C5060 * C1867 + C48520 * C1872) *
                 C307 +
             (C5059 * C1431 + C5055 * C1446 + C5060 * C1873 + C48520 * C1876) *
                 C48502) *
                C48405 * C48489) *
               C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48184) * C48405 *
                C48489) *
               C48547 -
           (((C5098 + C5099) * C48184 + (C5100 + C5101) * C114) * C48405 *
                C48489 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C48405 *
                C5057) *
               C48540 +
           (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C48405 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48184) * C48405 *
                C48489) *
               C48527 -
           (((C5106 + C5107) * C48184 + (C5108 + C5109) * C114) * C48405 *
                C48489 +
            ((C5105 + C5104) * C48184 + (C5103 + C5102) * C114) * C48405 *
                C5057) *
               C48506) *
              C3562 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C48405 *
                C5057 +
            ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48405 *
                C48489) *
               C48540 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48405 *
                C48489 +
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C48184 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C114) *
                C48405 * C5057) *
               C48547 -
           (((C5778 + C5779) * C48184 + (C5780 + C5781) * C114) * C48405 *
                C48489 +
            ((C5489 + C5488) * C48184 + (C5487 + C5486) * C114) * C48405 *
                C5057) *
               C48527 +
           (((C5781 + C5780) * C114 + (C5779 + C5778) * C48184) * C48405 *
                C5057 +
            ((C5059 * C525 + C5055 * C540 + C5060 * C1017 + C48520 * C1026) *
                 C114 +
             (C5059 * C539 + C5055 * C555 + C5060 * C1027 + C48520 * C1032) *
                 C48184) *
                C48405 * C48489) *
               C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48184) * C48405 *
                C48489) *
               C2825 -
           (((C5098 + C5099) * C48184 + (C5100 + C5101) * C114) * C48405 *
                C48489 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C48405 *
                C5057) *
               C48166) *
              C48549 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C48405 *
                C5057 +
            ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48405 *
                C48489) *
               C48166 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48405 *
                C48489 +
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C48184 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C114) *
                C48405 * C5057) *
               C2825) *
              C48546 +
          ((((C5059 * C526 + C5055 * C541 + C5060 * C1420 + C48520 * C1432) *
                 C114 +
             (C5059 * C542 + C5055 * C556 + C5060 * C1433 + C48520 * C1447) *
                 C48184) *
                C48405 * C5057 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48184) * C48405 *
                C48489) *
               C2825 -
           (((C5494 + C5495) * C48184 + (C5496 + C5497) * C114) * C48405 *
                C48489 +
            ((C5493 + C5492) * C48184 + (C5491 + C5490) * C114) * C48405 *
                C5057) *
               C48166) *
              C48537 +
          ((((C7602 + C7603) * C114 + (C7604 + C7605) * C48184) * C48405 *
                C5057 +
            ((C5059 * C2167 + C5055 * C2174 + C5060 * C2583 + C48520 * C2588) *
                 C114 +
             (C5059 * C2173 + C5055 * C2185 + C5060 * C2589 + C48520 * C2592) *
                 C48184) *
                C48405 * C48489) *
               C48166 -
           (((C7605 + C7604) * C48184 + (C7603 + C7602) * C114) * C48405 *
                C48489 +
            ((C5060 * C2585 + C48520 * C2590 + C5059 * C2177 + C5055 * C2187) *
                 C48184 +
             (C5060 * C2581 + C48520 * C2584 + C5059 * C2169 + C5055 * C2178) *
                 C114) *
                C48405 * C5057) *
               C2825) *
              C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48184) * C48405 *
                C48489) *
               C48161 -
           (((C5098 + C5099) * C48184 + (C5100 + C5101) * C114) * C48405 *
                C48489 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C48405 *
                C5057) *
               C48169 +
           (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C48405 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48184) * C48405 *
                C48489) *
               C3124) *
              C48285 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C48405 *
                C5057 +
            ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48405 *
                C48489) *
               C48169 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48405 *
                C48489 +
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C48184 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C114) *
                C48405 * C5057) *
               C48161 -
           (((C5778 + C5779) * C48184 + (C5780 + C5781) * C114) * C48405 *
                C48489 +
            ((C5489 + C5488) * C48184 + (C5487 + C5486) * C114) * C48405 *
                C5057) *
               C3124) *
              C48292 +
          ((((C5059 * C526 + C5055 * C541 + C5060 * C1420 + C48520 * C1432) *
                 C114 +
             (C5059 * C542 + C5055 * C556 + C5060 * C1433 + C48520 * C1447) *
                 C48184) *
                C48405 * C5057 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48184) * C48405 *
                C48489) *
               C48161 -
           (((C5494 + C5495) * C48184 + (C5496 + C5497) * C114) * C48405 *
                C48489 +
            ((C5493 + C5492) * C48184 + (C5491 + C5490) * C114) * C48405 *
                C5057) *
               C48169 +
           (((C5497 + C5496) * C114 + (C5495 + C5494) * C48184) * C48405 *
                C5057 +
            ((C5059 * C529 + C5055 * C548 + C5060 * C2337 + C48520 * C2338) *
                 C114 +
             (C5059 * C547 + C5055 * C559 + C5060 * C2339 + C48520 * C2340) *
                 C48184) *
                C48405 * C48489) *
               C3124) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48184) * C48405 *
                C48489) *
               C48547 -
           (((C5098 + C5099) * C48184 + (C5100 + C5101) * C114) * C48405 *
                C48489 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C48405 *
                C5057) *
               C48540 +
           (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C48405 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48184) * C48405 *
                C48489) *
               C48527 -
           (((C5106 + C5107) * C48184 + (C5108 + C5109) * C114) * C48405 *
                C48489 +
            ((C5105 + C5104) * C48184 + (C5103 + C5102) * C114) * C48405 *
                C5057) *
               C48506) *
              C3562 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C48405 *
                C5057 +
            ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48405 *
                C48489) *
               C48540 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48405 *
                C48489 +
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C48184 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C114) *
                C48405 * C5057) *
               C48547 -
           (((C5778 + C5779) * C48184 + (C5780 + C5781) * C114) * C48405 *
                C48489 +
            ((C5489 + C5488) * C48184 + (C5487 + C5486) * C114) * C48405 *
                C5057) *
               C48527 +
           (((C5781 + C5780) * C114 + (C5779 + C5778) * C48184) * C48405 *
                C5057 +
            ((C5059 * C525 + C5055 * C540 + C5060 * C1017 + C48520 * C1026) *
                 C114 +
             (C5059 * C539 + C5055 * C555 + C5060 * C1027 + C48520 * C1032) *
                 C48184) *
                C48405 * C48489) *
               C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C305 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48541 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C306 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48529 +
             (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                 C307 +
             (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                 C48502) *
                C48405 * C5057 +
            ((C5094 + C5095) * C305 + (C5096 + C5097) * C48541 -
             (C5288 + C5289) * C306 - (C5290 + C5291) * C48529 +
             (C5292 + C5293) * C307 + (C5294 + C5295) * C48502) *
                C48405 * C48489) *
               C2825 +
           (((C5289 + C5288) * C306 -
             ((C5097 + C5096) * C48541 + (C5095 + C5094) * C305) +
             (C5291 + C5290) * C48529 - (C5293 + C5292) * C307 -
             (C5295 + C5294) * C48502) *
                C48405 * C5057 +
            ((C5296 + C5297) * C306 -
             ((C5098 + C5099) * C48541 + (C5100 + C5101) * C305) +
             (C5298 + C5299) * C48529 - (C5300 + C5301) * C307 -
             (C5302 + C5303) * C48502) *
                C48405 * C48489) *
               C48166) *
              C3562 +
          ((((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                 C306 -
             ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                  C48541 +
              (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                  C305) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                 C48529 -
             (C5060 * C1865 + C48520 * C1868 + C5059 * C1417 + C5055 * C1426) *
                 C307 -
             (C5060 * C1869 + C48520 * C1874 + C5059 * C1427 + C5055 * C1444) *
                 C48502) *
                C48405 * C5057 +
            ((C5992 + C5993) * C306 -
             ((C5485 + C5484) * C48541 + (C5483 + C5482) * C305) +
             (C5994 + C5995) * C48529 - (C6734 + C6735) * C307 -
             (C6736 + C6737) * C48502) *
                C48405 * C48489) *
               C2825 +
           (((C5482 + C5483) * C305 + (C5484 + C5485) * C48541 -
             (C5993 + C5992) * C306 - (C5995 + C5994) * C48529 +
             (C6735 + C6734) * C307 + (C6737 + C6736) * C48502) *
                C48405 * C5057 +
            ((C5486 + C5487) * C305 + (C5488 + C5489) * C48541 -
             (C5996 + C5997) * C306 - (C5998 + C5999) * C48529 +
             (C5059 * C1419 + C5055 * C1430 + C5060 * C1867 + C48520 * C1872) *
                 C307 +
             (C5059 * C1431 + C5055 * C1446 + C5060 * C1873 + C48520 * C1876) *
                 C48502) *
                C48405 * C48489) *
               C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C717 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48470 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C718 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48247) *
               C48405 * C5057 +
           ((C5094 + C5095) * C717 + (C5096 + C5097) * C48470 -
            (C5288 + C5289) * C718 - (C5290 + C5291) * C48247) *
               C48405 * C48489) *
              C713 +
          (((C5289 + C5288) * C718 -
            ((C5097 + C5096) * C48470 + (C5095 + C5094) * C717) +
            (C5291 + C5290) * C48247) *
               C48405 * C5057 +
           ((C5296 + C5297) * C718 -
            ((C5098 + C5099) * C48470 + (C5100 + C5101) * C717) +
            (C5298 + C5299) * C48247) *
               C48405 * C48489) *
              C714 +
          (((C5101 + C5100) * C717 + (C5099 + C5098) * C48470 -
            (C5297 + C5296) * C718 - (C5299 + C5298) * C48247) *
               C48405 * C5057 +
           ((C5102 + C5103) * C717 + (C5104 + C5105) * C48470 -
            (C5636 + C5637) * C718 - (C5638 + C5639) * C48247) *
               C48405 * C48489) *
              C715 +
          (((C5637 + C5636) * C718 -
            ((C5105 + C5104) * C48470 + (C5103 + C5102) * C717) +
            (C5639 + C5638) * C48247) *
               C48405 * C5057 +
           ((C5059 * C316 + C5055 * C334 + C5060 * C317 + C48520 * C336) *
                C718 -
            ((C5106 + C5107) * C48470 + (C5108 + C5109) * C717) +
            (C5059 * C335 + C5055 * C346 + C5060 * C337 + C48520 * C347) *
                C48247) *
               C48405 * C48489) *
              C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C1557 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C1551 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C1558 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C1552 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C1559 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C1553 -
            (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
                C1560 -
            (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
                C48512) *
               C48405 * C5057 +
           ((C5094 + C5095) * C1557 + (C5096 + C5097) * C1551 -
            (C5288 + C5289) * C1558 - (C5290 + C5291) * C1552 +
            (C5292 + C5293) * C1559 + (C5294 + C5295) * C1553 -
            (C6528 + C6529) * C1560 - (C6530 + C6531) * C48512) *
               C48405 * C48489) *
              C48456 +
          (((C5289 + C5288) * C1558 -
            ((C5097 + C5096) * C1551 + (C5095 + C5094) * C1557) +
            (C5291 + C5290) * C1552 - (C5293 + C5292) * C1559 -
            (C5295 + C5294) * C1553 + (C6529 + C6528) * C1560 +
            (C6531 + C6530) * C48512) *
               C48405 * C5057 +
           ((C5296 + C5297) * C1558 -
            ((C5098 + C5099) * C1551 + (C5100 + C5101) * C1557) +
            (C5298 + C5299) * C1552 - (C5300 + C5301) * C1559 -
            (C5302 + C5303) * C1553 +
            (C5059 * C1287 + C5055 * C1297 + C5060 * C1288 + C48520 * C1299) *
                C1560 +
            (C5059 * C1298 + C5055 * C1305 + C5060 * C1300 + C48520 * C1306) *
                C48512) *
               C48405 * C48489) *
              C48166) *
         C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C717 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48470 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C718 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48247) *
                C48405 * C5057 +
            ((C5094 + C5095) * C717 + (C5096 + C5097) * C48470 -
             (C5288 + C5289) * C718 - (C5290 + C5291) * C48247) *
                C48405 * C48489) *
               C302 +
           (((C5289 + C5288) * C718 -
             ((C5097 + C5096) * C48470 + (C5095 + C5094) * C717) +
             (C5291 + C5290) * C48247) *
                C48405 * C5057 +
            ((C5296 + C5297) * C718 -
             ((C5098 + C5099) * C48470 + (C5100 + C5101) * C717) +
             (C5298 + C5299) * C48247) *
                C48405 * C48489) *
               C303 +
           (((C5101 + C5100) * C717 + (C5099 + C5098) * C48470 -
             (C5297 + C5296) * C718 - (C5299 + C5298) * C48247) *
                C48405 * C5057 +
            ((C5102 + C5103) * C717 + (C5104 + C5105) * C48470 -
             (C5636 + C5637) * C718 - (C5638 + C5639) * C48247) *
                C48405 * C48489) *
               C48496) *
              C48471 +
          ((((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                 C718 -
             ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                  C48470 +
              (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                  C717) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                 C48247) *
                C48405 * C5057 +
            ((C5992 + C5993) * C718 -
             ((C5485 + C5484) * C48470 + (C5483 + C5482) * C717) +
             (C5994 + C5995) * C48247) *
                C48405 * C48489) *
               C302 +
           (((C5482 + C5483) * C717 + (C5484 + C5485) * C48470 -
             (C5993 + C5992) * C718 - (C5995 + C5994) * C48247) *
                C48405 * C5057 +
            ((C5486 + C5487) * C717 + (C5488 + C5489) * C48470 -
             (C5996 + C5997) * C718 - (C5998 + C5999) * C48247) *
                C48405 * C48489) *
               C303 +
           (((C5997 + C5996) * C718 -
             ((C5489 + C5488) * C48470 + (C5487 + C5486) * C717) +
             (C5999 + C5998) * C48247) *
                C48405 * C5057 +
            ((C5059 * C1016 + C5055 * C1024 + C5060 * C1739 + C48520 * C1740) *
                 C718 -
             ((C5778 + C5779) * C48470 + (C5780 + C5781) * C717) +
             (C5059 * C1025 + C5055 * C1031 + C5060 * C1741 + C48520 * C1742) *
                 C48247) *
                C48405 * C48489) *
               C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C1557 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C1551 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C1558 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C1552 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C1559 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C1553 -
            (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
                C1560 -
            (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
                C48512) *
               C48405 * C5057 +
           ((C5094 + C5095) * C1557 + (C5096 + C5097) * C1551 -
            (C5288 + C5289) * C1558 - (C5290 + C5291) * C1552 +
            (C5292 + C5293) * C1559 + (C5294 + C5295) * C1553 -
            (C6528 + C6529) * C1560 - (C6530 + C6531) * C48512) *
               C48405 * C48489) *
              C48156 * C48471 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                C1558 -
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C1551 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C1557) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                C1552 -
            (C5060 * C1865 + C48520 * C1868 + C5059 * C1417 + C5055 * C1426) *
                C1559 -
            (C5060 * C1869 + C48520 * C1874 + C5059 * C1427 + C5055 * C1444) *
                C1553 +
            (C5059 * C1865 + C5055 * C1868 + C5060 * C6867 + C48520 * C6869) *
                C1560 +
            (C5059 * C1869 + C5055 * C1874 + C5060 * C6870 + C48520 * C6873) *
                C48512) *
               C48405 * C5057 +
           ((C5992 + C5993) * C1558 -
            ((C5485 + C5484) * C1551 + (C5483 + C5482) * C1557) +
            (C5994 + C5995) * C1552 - (C6734 + C6735) * C1559 -
            (C6736 + C6737) * C1553 +
            (C5059 * C1866 + C5055 * C1870 + C5060 * C6868 + C48520 * C6871) *
                C1560 +
            (C5059 * C1871 + C5055 * C1875 + C5060 * C6872 + C48520 * C6874) *
                C48512) *
               C48405 * C48489) *
              C48156 * C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C305 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48541 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C306 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48529 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C307 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C5057 +
           ((C5094 + C5095) * C305 + (C5096 + C5097) * C48541 -
            (C5288 + C5289) * C306 - (C5290 + C5291) * C48529 +
            (C5292 + C5293) * C307 + (C5294 + C5295) * C48502) *
               C48405 * C48489) *
              C302 +
          (((C5289 + C5288) * C306 -
            ((C5097 + C5096) * C48541 + (C5095 + C5094) * C305) +
            (C5291 + C5290) * C48529 - (C5293 + C5292) * C307 -
            (C5295 + C5294) * C48502) *
               C48405 * C5057 +
           ((C5296 + C5297) * C306 -
            ((C5098 + C5099) * C48541 + (C5100 + C5101) * C305) +
            (C5298 + C5299) * C48529 - (C5300 + C5301) * C307 -
            (C5302 + C5303) * C48502) *
               C48405 * C48489) *
              C303 +
          (((C5101 + C5100) * C305 + (C5099 + C5098) * C48541 -
            (C5297 + C5296) * C306 - (C5299 + C5298) * C48529 +
            (C5301 + C5300) * C307 + (C5303 + C5302) * C48502) *
               C48405 * C5057 +
           ((C5102 + C5103) * C305 + (C5104 + C5105) * C48541 -
            (C5060 * C315 + C48520 * C332 + C5059 * C314 + C5055 * C330) *
                C306 -
            (C5060 * C333 + C48520 * C345 + C5059 * C331 + C5055 * C344) *
                C48529 +
            (C5059 * C315 + C5055 * C332 + C5060 * C1561 + C48520 * C1562) *
                C307 +
            (C5059 * C333 + C5055 * C345 + C5060 * C1563 + C48520 * C1564) *
                C48502) *
               C48405 * C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48184) *
               C48405 * C5057 +
           ((C5094 + C5095) * C114 + (C5096 + C5097) * C48184) * C48405 *
               C48489) *
              C107 -
          (((C5098 + C5099) * C48184 + (C5100 + C5101) * C114) * C48405 *
               C48489 +
           ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C48405 *
               C5057) *
              C108 +
          (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C48405 *
               C5057 +
           ((C5102 + C5103) * C114 + (C5104 + C5105) * C48184) * C48405 *
               C48489) *
              C109 -
          (((C5106 + C5107) * C48184 + (C5108 + C5109) * C114) * C48405 *
               C48489 +
           ((C5105 + C5104) * C48184 + (C5103 + C5102) * C114) * C48405 *
               C5057) *
              C110 +
          (((C5109 + C5108) * C114 + (C5107 + C5106) * C48184) * C48405 *
               C5057 +
           ((C5059 * C120 + C5055 * C133 + C5060 * C719 + C48520 * C720) *
                C114 +
            (C5059 * C132 + C5055 * C141 + C5060 * C721 + C48520 * C722) *
                C48184) *
               C48405 * C48489) *
              C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48184) * C48405 *
                C48489) *
               C302 -
           (((C5098 + C5099) * C48184 + (C5100 + C5101) * C114) * C48405 *
                C48489 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C48405 *
                C5057) *
               C303 +
           (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C48405 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48184) * C48405 *
                C48489) *
               C48496) *
              C48542 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C48405 *
                C5057 +
            ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48405 *
                C48489) *
               C303 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48405 *
                C48489 +
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C48184 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C114) *
                C48405 * C5057) *
               C302 -
           (((C5060 * C1025 + C48520 * C1031 + C5059 * C536 + C5055 * C553) *
                 C48184 +
             (C5060 * C1016 + C48520 * C1024 + C5059 * C523 + C5055 * C535) *
                 C114) *
                C48405 * C48489 +
            ((C5489 + C5488) * C48184 + (C5487 + C5486) * C114) * C48405 *
                C5057) *
               C48496) *
              C48531 +
          ((((C5059 * C526 + C5055 * C541 + C5060 * C1420 + C48520 * C1432) *
                 C114 +
             (C5059 * C542 + C5055 * C556 + C5060 * C1433 + C48520 * C1447) *
                 C48184) *
                C48405 * C5057 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48184) * C48405 *
                C48489) *
               C302 -
           (((C5494 + C5495) * C48184 + (C5496 + C5497) * C114) * C48405 *
                C48489 +
            ((C5493 + C5492) * C48184 + (C5491 + C5490) * C114) * C48405 *
                C5057) *
               C303 +
           (((C5497 + C5496) * C114 + (C5495 + C5494) * C48184) * C48405 *
                C5057 +
            ((C5059 * C529 + C5055 * C548 + C5060 * C2337 + C48520 * C2338) *
                 C114 +
             (C5059 * C547 + C5055 * C559 + C5060 * C2339 + C48520 * C2340) *
                 C48184) *
                C48405 * C48489) *
               C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C1183 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C1177 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C1184 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C1178 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C1185 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C5057 +
           ((C5094 + C5095) * C1183 + (C5096 + C5097) * C1177 -
            (C5288 + C5289) * C1184 - (C5290 + C5291) * C1178 +
            (C5292 + C5293) * C1185 + (C5294 + C5295) * C48502) *
               C48405 * C48489) *
              C48538 +
          (((C5289 + C5288) * C1184 -
            ((C5097 + C5096) * C1177 + (C5095 + C5094) * C1183) +
            (C5291 + C5290) * C1178 - (C5293 + C5292) * C1185 -
            (C5295 + C5294) * C48502) *
               C48405 * C5057 +
           ((C5296 + C5297) * C1184 -
            ((C5098 + C5099) * C1177 + (C5100 + C5101) * C1183) +
            (C5298 + C5299) * C1178 - (C5300 + C5301) * C1185 -
            (C5302 + C5303) * C48502) *
               C48405 * C48489) *
              C48525 +
          (((C5101 + C5100) * C1183 + (C5099 + C5098) * C1177 -
            (C5297 + C5296) * C1184 - (C5299 + C5298) * C1178 +
            (C5301 + C5300) * C1185 + (C5303 + C5302) * C48502) *
               C48405 * C5057 +
           ((C5102 + C5103) * C1183 + (C5104 + C5105) * C1177 -
            (C5636 + C5637) * C1184 - (C5638 + C5639) * C1178 +
            (C5059 * C315 + C5055 * C332 + C5060 * C1561 + C48520 * C1562) *
                C1185 +
            (C5059 * C333 + C5055 * C345 + C5060 * C1563 + C48520 * C1564) *
                C48502) *
               C48405 * C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
               C1278 +
           (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
               C1272 -
           (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
               C1279 -
           (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
               C1273 +
           (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
               C1280 +
           (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
               C1274 -
           (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
               C1281 -
           (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
               C1275 +
           (C5059 * C1284 + C5055 * C1291 + C5060 * C6227 + C48520 * C6229) *
               C1282 +
           (C5059 * C1292 + C5055 * C1302 + C5060 * C6230 + C48520 * C6233) *
               C1276) *
              C48405 * C5057 +
          ((C5094 + C5095) * C1278 + (C5096 + C5097) * C1272 -
           (C5288 + C5289) * C1279 - (C5290 + C5291) * C1273 +
           (C5292 + C5293) * C1280 + (C5294 + C5295) * C1274 -
           (C5060 * C1286 + C48520 * C1295 + C5059 * C1285 + C5055 * C1293) *
               C1281 -
           (C5060 * C1296 + C48520 * C1304 + C5059 * C1294 + C5055 * C1303) *
               C1275 +
           (C5059 * C1286 + C5055 * C1295 + C5060 * C6228 + C48520 * C6231) *
               C1282 +
           (C5059 * C1296 + C5055 * C1304 + C5060 * C6232 + C48520 * C6234) *
               C1276) *
              C48405 * C48489) *
         C48156 * C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C1183 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C1177 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C1184 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C1178 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C1185 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C5057 +
           ((C5094 + C5095) * C1183 + (C5096 + C5097) * C1177 -
            (C5288 + C5289) * C1184 - (C5290 + C5291) * C1178 +
            (C5292 + C5293) * C1185 + (C5294 + C5295) * C48502) *
               C48405 * C48489) *
              C48156 * C48542 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                C1184 -
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C1177 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C1183) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                C1178 -
            (C5060 * C1865 + C48520 * C1868 + C5059 * C1417 + C5055 * C1426) *
                C1185 -
            (C5060 * C1869 + C48520 * C1874 + C5059 * C1427 + C5055 * C1444) *
                C48502) *
               C48405 * C5057 +
           ((C5992 + C5993) * C1184 -
            ((C5485 + C5484) * C1177 + (C5483 + C5482) * C1183) +
            (C5994 + C5995) * C1178 -
            (C5060 * C1866 + C48520 * C1870 + C5059 * C1418 + C5055 * C1428) *
                C1185 -
            (C5060 * C1871 + C48520 * C1875 + C5059 * C1429 + C5055 * C1445) *
                C48502) *
               C48405 * C48489) *
              C48156 * C48531 +
          (((C5059 * C526 + C5055 * C541 + C5060 * C1420 + C48520 * C1432) *
                C1183 +
            (C5059 * C542 + C5055 * C556 + C5060 * C1433 + C48520 * C1447) *
                C1177 -
            (C5060 * C1421 + C48520 * C1434 + C5059 * C1420 + C5055 * C1432) *
                C1184 -
            (C5060 * C1435 + C48520 * C1448 + C5059 * C1433 + C5055 * C1447) *
                C1178 +
            (C5059 * C1421 + C5055 * C1434 + C5060 * C6381 + C48520 * C6383) *
                C1185 +
            (C5059 * C1435 + C5055 * C1448 + C5060 * C6384 + C48520 * C6387) *
                C48502) *
               C48405 * C5057 +
           ((C5490 + C5491) * C1183 + (C5492 + C5493) * C1177 -
            (C5060 * C1423 + C48520 * C1438 + C5059 * C1422 + C5055 * C1436) *
                C1184 -
            (C5060 * C1439 + C48520 * C1450 + C5059 * C1437 + C5055 * C1449) *
                C1178 +
            (C5059 * C1423 + C5055 * C1438 + C5060 * C6382 + C48520 * C6385) *
                C1185 +
            (C5059 * C1439 + C5055 * C1450 + C5060 * C6386 + C48520 * C6388) *
                C48502) *
               C48405 * C48489) *
              C48156 * C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48184) * C48405 *
                C48489) *
               C713 -
           (((C5098 + C5099) * C48184 + (C5100 + C5101) * C114) * C48405 *
                C48489 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C48405 *
                C5057) *
               C714 +
           (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C48405 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48184) * C48405 *
                C48489) *
               C715 -
           (((C5106 + C5107) * C48184 + (C5108 + C5109) * C114) * C48405 *
                C48489 +
            ((C5105 + C5104) * C48184 + (C5103 + C5102) * C114) * C48405 *
                C5057) *
               C48506) *
              C48471 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C48405 *
                C5057 +
            ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48405 *
                C48489) *
               C714 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48405 *
                C48489 +
            ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                 C48184 +
             (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                 C114) *
                C48405 * C5057) *
               C713 -
           (((C5778 + C5779) * C48184 + (C5780 + C5781) * C114) * C48405 *
                C48489 +
            ((C5489 + C5488) * C48184 + (C5487 + C5486) * C114) * C48405 *
                C5057) *
               C715 +
           (((C5781 + C5780) * C114 + (C5779 + C5778) * C48184) * C48405 *
                C5057 +
            ((C5059 * C525 + C5055 * C540 + C5060 * C1017 + C48520 * C1026) *
                 C114 +
             (C5059 * C539 + C5055 * C555 + C5060 * C1027 + C48520 * C1032) *
                 C48184) *
                C48405 * C48489) *
               C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C1183 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C1177 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C1184 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C1178 +
             (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                 C1185 +
             (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                 C48502) *
                C48405 * C5057 +
            ((C5094 + C5095) * C1183 + (C5096 + C5097) * C1177 -
             (C5288 + C5289) * C1184 - (C5290 + C5291) * C1178 +
             (C5292 + C5293) * C1185 + (C5294 + C5295) * C48502) *
                C48405 * C48489) *
               C48456 +
           (((C5289 + C5288) * C1184 -
             ((C5097 + C5096) * C1177 + (C5095 + C5094) * C1183) +
             (C5291 + C5290) * C1178 - (C5293 + C5292) * C1185 -
             (C5295 + C5294) * C48502) *
                C48405 * C5057 +
            ((C5296 + C5297) * C1184 -
             ((C5098 + C5099) * C1177 + (C5100 + C5101) * C1183) +
             (C5298 + C5299) * C1178 - (C5300 + C5301) * C1185 -
             (C5302 + C5303) * C48502) *
                C48405 * C48489) *
               C48166) *
              C48471 +
          ((((C5059 * C1013 + C5055 * C1018 + C5060 * C1417 + C48520 * C1426) *
                 C1184 -
             ((C5060 * C1019 + C48520 * C1028 + C5059 * C537 + C5055 * C554) *
                  C1177 +
              (C5060 * C1013 + C48520 * C1018 + C5059 * C524 + C5055 * C538) *
                  C1183) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1427 + C48520 * C1444) *
                 C1178 -
             (C5060 * C1865 + C48520 * C1868 + C5059 * C1417 + C5055 * C1426) *
                 C1185 -
             (C5060 * C1869 + C48520 * C1874 + C5059 * C1427 + C5055 * C1444) *
                 C48502) *
                C48405 * C5057 +
            ((C5992 + C5993) * C1184 -
             ((C5485 + C5484) * C1177 + (C5483 + C5482) * C1183) +
             (C5994 + C5995) * C1178 - (C6734 + C6735) * C1185 -
             (C6736 + C6737) * C48502) *
                C48405 * C48489) *
               C48456 +
           (((C5482 + C5483) * C1183 + (C5484 + C5485) * C1177 -
             (C5993 + C5992) * C1184 - (C5995 + C5994) * C1178 +
             (C6735 + C6734) * C1185 + (C6737 + C6736) * C48502) *
                C48405 * C5057 +
            ((C5486 + C5487) * C1183 + (C5488 + C5489) * C1177 -
             (C5996 + C5997) * C1184 - (C5998 + C5999) * C1178 +
             (C5059 * C1419 + C5055 * C1430 + C5060 * C1867 + C48520 * C1872) *
                 C1185 +
             (C5059 * C1431 + C5055 * C1446 + C5060 * C1873 + C48520 * C1876) *
                 C48502) *
                C48405 * C48489) *
               C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48184) *
               C48405 * C5057 +
           ((C5094 + C5095) * C114 + (C5096 + C5097) * C48184) * C48405 *
               C48489) *
              C107 -
          (((C5098 + C5099) * C48184 + (C5100 + C5101) * C114) * C48405 *
               C48489 +
           ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C48405 *
               C5057) *
              C108 +
          (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C48405 *
               C5057 +
           ((C5102 + C5103) * C114 + (C5104 + C5105) * C48184) * C48405 *
               C48489) *
              C109 -
          (((C5106 + C5107) * C48184 + (C5108 + C5109) * C114) * C48405 *
               C48489 +
           ((C5105 + C5104) * C48184 + (C5103 + C5102) * C114) * C48405 *
               C5057) *
              C110 +
          (((C5109 + C5108) * C114 + (C5107 + C5106) * C48184) * C48405 *
               C5057 +
           ((C5059 * C120 + C5055 * C133 + C5060 * C719 + C48520 * C720) *
                C114 +
            (C5059 * C132 + C5055 * C141 + C5060 * C721 + C48520 * C722) *
                C48184) *
               C48405 * C48489) *
              C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C305 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48541 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C306 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48529 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C307 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C5057 +
           ((C5094 + C5095) * C305 + (C5096 + C5097) * C48541 -
            (C5288 + C5289) * C306 - (C5290 + C5291) * C48529 +
            (C5292 + C5293) * C307 + (C5294 + C5295) * C48502) *
               C48405 * C48489) *
              C302 +
          (((C5289 + C5288) * C306 -
            ((C5097 + C5096) * C48541 + (C5095 + C5094) * C305) +
            (C5291 + C5290) * C48529 - (C5293 + C5292) * C307 -
            (C5295 + C5294) * C48502) *
               C48405 * C5057 +
           ((C5296 + C5297) * C306 -
            ((C5098 + C5099) * C48541 + (C5100 + C5101) * C305) +
            (C5298 + C5299) * C48529 - (C5300 + C5301) * C307 -
            (C5302 + C5303) * C48502) *
               C48405 * C48489) *
              C303 +
          (((C5101 + C5100) * C305 + (C5099 + C5098) * C48541 -
            (C5297 + C5296) * C306 - (C5299 + C5298) * C48529 +
            (C5301 + C5300) * C307 + (C5303 + C5302) * C48502) *
               C48405 * C5057 +
           ((C5102 + C5103) * C305 + (C5104 + C5105) * C48541 -
            (C5060 * C315 + C48520 * C332 + C5059 * C314 + C5055 * C330) *
                C306 -
            (C5060 * C333 + C48520 * C345 + C5059 * C331 + C5055 * C344) *
                C48529 +
            (C5059 * C315 + C5055 * C332 + C5060 * C1561 + C48520 * C1562) *
                C307 +
            (C5059 * C333 + C5055 * C345 + C5060 * C1563 + C48520 * C1564) *
                C48502) *
               C48405 * C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C1183 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C1177 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C1184 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C1178 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C1185 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C5057 +
           ((C5094 + C5095) * C1183 + (C5096 + C5097) * C1177 -
            (C5288 + C5289) * C1184 - (C5290 + C5291) * C1178 +
            (C5292 + C5293) * C1185 + (C5294 + C5295) * C48502) *
               C48405 * C48489) *
              C48538 +
          (((C5289 + C5288) * C1184 -
            ((C5097 + C5096) * C1177 + (C5095 + C5094) * C1183) +
            (C5291 + C5290) * C1178 - (C5293 + C5292) * C1185 -
            (C5295 + C5294) * C48502) *
               C48405 * C5057 +
           ((C5296 + C5297) * C1184 -
            ((C5098 + C5099) * C1177 + (C5100 + C5101) * C1183) +
            (C5298 + C5299) * C1178 - (C5300 + C5301) * C1185 -
            (C5302 + C5303) * C48502) *
               C48405 * C48489) *
              C48525 +
          (((C5101 + C5100) * C1183 + (C5099 + C5098) * C1177 -
            (C5297 + C5296) * C1184 - (C5299 + C5298) * C1178 +
            (C5301 + C5300) * C1185 + (C5303 + C5302) * C48502) *
               C48405 * C5057 +
           ((C5102 + C5103) * C1183 + (C5104 + C5105) * C1177 -
            (C5636 + C5637) * C1184 - (C5638 + C5639) * C1178 +
            (C5059 * C315 + C5055 * C332 + C5060 * C1561 + C48520 * C1562) *
                C1185 +
            (C5059 * C333 + C5055 * C345 + C5060 * C1563 + C48520 * C1564) *
                C48502) *
               C48405 * C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
               C1278 +
           (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
               C1272 -
           (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
               C1279 -
           (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
               C1273 +
           (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
               C1280 +
           (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
               C1274 -
           (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
               C1281 -
           (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
               C1275 +
           (C5059 * C1284 + C5055 * C1291 + C5060 * C6227 + C48520 * C6229) *
               C1282 +
           (C5059 * C1292 + C5055 * C1302 + C5060 * C6230 + C48520 * C6233) *
               C1276) *
              C48405 * C5057 +
          ((C5094 + C5095) * C1278 + (C5096 + C5097) * C1272 -
           (C5288 + C5289) * C1279 - (C5290 + C5291) * C1273 +
           (C5292 + C5293) * C1280 + (C5294 + C5295) * C1274 -
           (C5060 * C1286 + C48520 * C1295 + C5059 * C1285 + C5055 * C1293) *
               C1281 -
           (C5060 * C1296 + C48520 * C1304 + C5059 * C1294 + C5055 * C1303) *
               C1275 +
           (C5059 * C1286 + C5055 * C1295 + C5060 * C6228 + C48520 * C6231) *
               C1282 +
           (C5059 * C1296 + C5055 * C1304 + C5060 * C6232 + C48520 * C6234) *
               C1276) *
              C48405 * C48489) *
         C48156 * C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C47163 +
             (C113 * C123 + C48388 * C136) * C48243 -
             (C113 * C308 + C48388 * C318) * C47155 -
             (C113 * C319 + C48388 * C338) * C48250 +
             (C113 * C309 + C48388 * C320) * C47169 +
             (C113 * C321 + C48388 * C339) * C3121) *
                C10789 +
            (C11098 * C47163 + C11099 * C48243 - C11570 * C47155 -
             C11571 * C48250 + C11980 * C47169 + C11981 * C3121) *
                C48522) *
               C5057 +
           ((C3129 + C3130 - C3131 - C3132 + C3133 + C3134) * C10789 +
            (C3455 + C3454 - C3453 - C3456 + C3457 + C3458) * C48522) *
               C48489) *
              C48161 +
          (((C3131 - (C3130 + C3129) + C3132 - C3133 - C3134) * C10789 +
            (C3453 - (C3454 + C3455) + C3456 - C3457 - C3458) * C48522) *
               C5057 +
           ((C3137 - (C3136 + C3135) + C3138 - C3139 - C3140) * C10789 +
            (C3459 - (C3460 + C3461) + C3462 - C3463 - C3464) * C48522) *
               C48489) *
              C48169 +
          ((C3151 * C10789 +
            (C3461 + C3460 - C3459 - C3462 + C3463 + C3464) * C48522) *
               C5057 +
           ((C3143 + C3142 - C3141 - C3144 + C3145 + C3146) * C10789 +
            (C590 * C47163 + C591 * C48243 - C1057 * C47155 - C1058 * C48250 +
             (C113 * C1739 + C48388 * C1740) * C47169 +
             (C113 * C1741 + C48388 * C1742) * C3121) *
                C48522) *
               C48489) *
              C3124) *
         C48202) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C47163 +
              (C113 * C123 + C48388 * C136) * C48243 -
              (C113 * C308 + C48388 * C318) * C47155 -
              (C113 * C319 + C48388 * C338) * C48250 +
              (C113 * C309 + C48388 * C320) * C47169 +
              (C113 * C321 + C48388 * C339) * C3121) *
                 C10789 +
             (C14421 + C14422 - C14423 - C14424 + C14425 + C14426) * C48522) *
                C5057 +
            ((C3129 + C3130 - C3131 - C3132 + C3133 + C3134) * C10789 +
             C14441 * C48522) *
                C48489) *
               C2825 +
           (((C3131 - (C3130 + C3129) + C3132 - C3133 - C3134) * C10789 +
             C14442 * C48522) *
                C5057 +
            ((C3137 - (C3136 + C3135) + C3138 - C3139 - C3140) * C10789 +
             (C3459 - (C3460 + C3461) + C3462 - C3463 - C3464) * C48522) *
                C48489) *
               C48166) *
              C48471 +
          ((((C14423 - (C14422 + C14421) + C14424 - C14425 - C14426) * C10789 +
             (C11982 * C47155 - (C11100 * C48243 + C11101 * C47163) +
              C11983 * C48250 - C11984 * C47169 - C11985 * C3121) *
                 C48522) *
                C5057 +
            (C14442 * C10789 +
             (C14429 - (C14430 + C14431) + C14432 - C14433 - C14434) * C48522) *
                C48489) *
               C2825 +
           ((C14441 * C10789 +
             (C14431 + C14430 - C14429 - C14432 + C14433 + C14434) * C48522) *
                C5057 +
            ((C3461 + C3460 - C3459 - C3462 + C3463 + C3464) * C10789 +
             (C594 * C47163 + C595 * C48243 - C2356 * C47155 - C2357 * C48250 +
              (C113 * C1425 + C48388 * C1442) * C47169 +
              (C113 * C1443 + C48388 * C1452) * C3121) *
                 C48522) *
                C48489) *
               C48166) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2827 +
             (C113 * C123 + C48388 * C136) * C48548 -
             (C113 * C308 + C48388 * C318) * C2828 -
             (C113 * C319 + C48388 * C338) * C48544 +
             (C113 * C309 + C48388 * C320) * C2829 +
             (C113 * C321 + C48388 * C339) * C48534 -
             (C113 * C1283 + C48388 * C1289) * C2830 -
             (C113 * C1290 + C48388 * C1301) * C48512) *
                C10789 +
            (C11098 * C2827 + C11099 * C48548 - C11570 * C2828 -
             C11571 * C48544 + C11980 * C2829 + C11981 * C48534 -
             C12484 * C2830 - C12485 * C48512) *
                C48522) *
               C5057 +
           ((C2832 + C2833 - C2834 - C2835 + C2836 + C2837 - C2838 - C2839) *
                C10789 +
            (C13658 + C13659 - C13660 - C13661 + C13662 + C13663 - C13664 -
             C13665) *
                C48522) *
               C48489) *
              C2825 +
          (((C2834 - (C2833 + C2832) + C2835 - C2836 - C2837 + C2838 + C2839) *
                C10789 +
            (C13660 - (C13659 + C13658) + C13661 - C13662 - C13663 + C13664 +
             C13665) *
                C48522) *
               C5057 +
           ((C2842 - (C2841 + C2840) + C2843 - C2844 - C2845 + C2846 + C2847) *
                C10789 +
            (C1054 * C2828 - (C589 * C48548 + C588 * C2827) + C1056 * C48544 -
             C1762 * C2829 - C1763 * C48534 +
             (C113 * C1867 + C48388 * C1872) * C2830 +
             (C113 * C1873 + C48388 * C1876) * C48512) *
                C48522) *
               C48489) *
              C48166) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2697 +
             (C113 * C123 + C48388 * C136) * C2691 -
             (C113 * C308 + C48388 * C318) * C2698 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C10789 +
            (C11098 * C2697 + C11099 * C2691 - C11570 * C2698 -
             C11571 * C48247) *
                C48522) *
               C5057 +
           ((C2700 + C2701 - C2702 - C2703) * C10789 +
            (C2996 + C2995 - C2994 - C2997) * C48522) *
               C48489) *
              C48547 +
          (((C2702 - (C2701 + C2700) + C2703) * C10789 +
            (C2994 - (C2995 + C2996) + C2997) * C48522) *
               C5057 +
           ((C2706 - (C2705 + C2704) + C2707) * C10789 + C3305 * C48522) *
               C48489) *
              C48540 +
          ((C2720 * C10789 + (C3000 + C2999 - C2998 - C3001) * C48522) * C5057 +
           ((C2710 + C2709 - C2708 - C2711) * C10789 +
            (C3300 + C3301 - C3302 - C3303) * C48522) *
               C48489) *
              C48527 +
          ((C2721 * C10789 + (C3302 - (C3301 + C3300) + C3303) * C48522) *
               C5057 +
           ((C2714 - (C2713 + C2712) + C2715) * C10789 +
            ((C113 * C1017 + C48388 * C1026) * C2698 -
             (C864 * C2691 + C865 * C2697) +
             (C113 * C1027 + C48388 * C1032) * C48247) *
                C48522) *
               C48489) *
              C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C2697 +
              (C113 * C123 + C48388 * C136) * C2691 -
              (C113 * C308 + C48388 * C318) * C2698 -
              (C113 * C319 + C48388 * C338) * C48247) *
                 C10789 +
             (C13860 + C13861 - C13862 - C13863) * C48522) *
                C5057 +
            ((C2700 + C2701 - C2702 - C2703) * C10789 + C13880 * C48522) *
                C48489) *
               C2825 +
           (((C2702 - (C2701 + C2700) + C2703) * C10789 + C13881 * C48522) *
                C5057 +
            ((C2706 - (C2705 + C2704) + C2707) * C10789 + C3305 * C48522) *
                C48489) *
               C48166) *
              C48542 +
          ((((C13862 - (C13861 + C13860) + C13863) * C10789 +
             (C13866 - (C13867 + C13868) + C13869) * C48522) *
                C5057 +
            (C13881 * C10789 + C13882 * C48522) * C48489) *
               C2825 +
           ((C13880 * C10789 + C13883 * C48522) * C5057 +
            ((C3000 + C2999 - C2998 - C3001) * C10789 +
             (C3006 + C3007 - C3008 - C3009) * C48522) *
                C48489) *
               C48166) *
              C48531 +
          ((((C13868 + C13867 - C13866 - C13869) * C10789 +
             (C12900 * C2697 + C12901 * C2691 - C13394 * C2698 -
              C13395 * C48247) *
                 C48522) *
                C5057 +
            (C13883 * C10789 + (C13872 + C13873 - C13874 - C13875) * C48522) *
                C48489) *
               C2825 +
           ((C13882 * C10789 + (C13874 - (C13873 + C13872) + C13875) * C48522) *
                C5057 +
            ((C3008 - (C3007 + C3006) + C3009) * C10789 +
             ((C113 * C2583 + C48388 * C2588) * C2698 -
              (C2479 * C2691 + C2478 * C2697) +
              (C113 * C2589 + C48388 * C2592) * C48247) *
                 C48522) *
                C48489) *
               C48166) *
              C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C2697 +
              (C113 * C123 + C48388 * C136) * C2691 -
              (C113 * C308 + C48388 * C318) * C2698 -
              (C113 * C319 + C48388 * C338) * C48247) *
                 C10789 +
             (C13860 + C13861 - C13862 - C13863) * C48522) *
                C5057 +
            ((C2700 + C2701 - C2702 - C2703) * C10789 + C13880 * C48522) *
                C48489) *
               C48161 +
           (((C2702 - (C2701 + C2700) + C2703) * C10789 + C13881 * C48522) *
                C5057 +
            ((C2706 - (C2705 + C2704) + C2707) * C10789 + C3305 * C48522) *
                C48489) *
               C48169 +
           ((C2720 * C10789 + C14226 * C48522) * C5057 +
            ((C2710 + C2709 - C2708 - C2711) * C10789 +
             (C3300 + C3301 - C3302 - C3303) * C48522) *
                C48489) *
               C3124) *
              C48471 +
          ((((C13862 - (C13861 + C13860) + C13863) * C10789 +
             (C13866 - (C13867 + C13868) + C13869) * C48522) *
                C5057 +
            (C13881 * C10789 + C13882 * C48522) * C48489) *
               C48161 +
           ((C13880 * C10789 + C13883 * C48522) * C5057 +
            (C14226 * C10789 + (C3006 + C3007 - C3008 - C3009) * C48522) *
                C48489) *
               C48169 +
           ((C3305 * C10789 + (C3008 - (C3007 + C3006) + C3009) * C48522) *
                C5057 +
            ((C3302 - (C3301 + C3300) + C3303) * C10789 +
             ((C113 * C2337 + C48388 * C2338) * C2698 -
              (C596 * C2691 + C597 * C2697) +
              (C113 * C2339 + C48388 * C2340) * C48247) *
                 C48522) *
                C48489) *
               C3124) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2697 +
             (C113 * C123 + C48388 * C136) * C2691 -
             (C113 * C308 + C48388 * C318) * C2698 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C10789 +
            (C11098 * C2697 + C11099 * C2691 - C11570 * C2698 -
             C11571 * C48247) *
                C48522) *
               C5057 +
           ((C2700 + C2701 - C2702 - C2703) * C10789 +
            (C2996 + C2995 - C2994 - C2997) * C48522) *
               C48489) *
              C48547 +
          (((C2702 - (C2701 + C2700) + C2703) * C10789 +
            (C2994 - (C2995 + C2996) + C2997) * C48522) *
               C5057 +
           ((C2706 - (C2705 + C2704) + C2707) * C10789 + C3305 * C48522) *
               C48489) *
              C48540 +
          ((C2720 * C10789 + (C3000 + C2999 - C2998 - C3001) * C48522) * C5057 +
           ((C2710 + C2709 - C2708 - C2711) * C10789 +
            (C3300 + C3301 - C3302 - C3303) * C48522) *
               C48489) *
              C48527 +
          ((C2721 * C10789 + (C3302 - (C3301 + C3300) + C3303) * C48522) *
               C5057 +
           ((C2714 - (C2713 + C2712) + C2715) * C10789 +
            ((C113 * C1017 + C48388 * C1026) * C2698 -
             (C864 * C2691 + C865 * C2697) +
             (C113 * C1027 + C48388 * C1032) * C48247) *
                C48522) *
               C48489) *
              C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2827 +
             (C113 * C123 + C48388 * C136) * C48548 -
             (C113 * C308 + C48388 * C318) * C2828 -
             (C113 * C319 + C48388 * C338) * C48544 +
             (C113 * C309 + C48388 * C320) * C2829 +
             (C113 * C321 + C48388 * C339) * C48534 -
             (C113 * C1283 + C48388 * C1289) * C2830 -
             (C113 * C1290 + C48388 * C1301) * C48512) *
                C10789 +
            (C11098 * C2827 + C11099 * C48548 - C11570 * C2828 -
             C11571 * C48544 + C11980 * C2829 + C11981 * C48534 -
             C12484 * C2830 - C12485 * C48512) *
                C48522) *
               C5057 +
           ((C2832 + C2833 - C2834 - C2835 + C2836 + C2837 - C2838 - C2839) *
                C10789 +
            (C13658 + C13659 - C13660 - C13661 + C13662 + C13663 - C13664 -
             C13665) *
                C48522) *
               C48489) *
              C2825 +
          (((C2834 - (C2833 + C2832) + C2835 - C2836 - C2837 + C2838 + C2839) *
                C10789 +
            (C13660 - (C13659 + C13658) + C13661 - C13662 - C13663 + C13664 +
             C13665) *
                C48522) *
               C5057 +
           ((C2842 - (C2841 + C2840) + C2843 - C2844 - C2845 + C2846 + C2847) *
                C10789 +
            (C1054 * C2828 - (C589 * C48548 + C588 * C2827) + C1056 * C48544 -
             C1762 * C2829 - C1763 * C48534 +
             (C113 * C1867 + C48388 * C1872) * C2830 +
             (C113 * C1873 + C48388 * C1876) * C48512) *
                C48522) *
               C48489) *
              C48166) *
         C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C47163 +
              (C113 * C123 + C48388 * C136) * C48243 -
              (C113 * C308 + C48388 * C318) * C47155 -
              (C113 * C319 + C48388 * C338) * C48250 +
              (C113 * C309 + C48388 * C320) * C47169 +
              (C113 * C321 + C48388 * C339) * C3121) *
                 C10789 +
             (C14421 + C14422 - C14423 - C14424 + C14425 + C14426) * C48522) *
                C5057 +
            ((C3129 + C3130 - C3131 - C3132 + C3133 + C3134) * C10789 +
             C14441 * C48522) *
                C48489) *
               C48456 +
           (((C3131 - (C3130 + C3129) + C3132 - C3133 - C3134) * C10789 +
             C14442 * C48522) *
                C5057 +
            ((C3137 - (C3136 + C3135) + C3138 - C3139 - C3140) * C10789 +
             (C3459 - (C3460 + C3461) + C3462 - C3463 - C3464) * C48522) *
                C48489) *
               C48166) *
              C3562 +
          ((((C14423 - (C14422 + C14421) + C14424 - C14425 - C14426) * C10789 +
             (C11982 * C47155 - (C11100 * C48243 + C11101 * C47163) +
              C11983 * C48250 - C11984 * C47169 - C11985 * C3121) *
                 C48522) *
                C5057 +
            (C14442 * C10789 +
             (C14429 - (C14430 + C14431) + C14432 - C14433 - C14434) * C48522) *
                C48489) *
               C48456 +
           ((C14441 * C10789 +
             (C14431 + C14430 - C14429 - C14432 + C14433 + C14434) * C48522) *
                C5057 +
            ((C3461 + C3460 - C3459 - C3462 + C3463 + C3464) * C10789 +
             (C594 * C47163 + C595 * C48243 - C2356 * C47155 - C2357 * C48250 +
              (C113 * C1425 + C48388 * C1442) * C47169 +
              (C113 * C1443 + C48388 * C1452) * C3121) *
                 C48522) *
                C48489) *
               C48166) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C47163 +
             (C113 * C123 + C48388 * C136) * C48243 -
             (C113 * C308 + C48388 * C318) * C47155 -
             (C113 * C319 + C48388 * C338) * C48250 +
             (C113 * C309 + C48388 * C320) * C47169 +
             (C113 * C321 + C48388 * C339) * C3121) *
                C10789 +
            (C14421 + C14422 - C14423 - C14424 + C14425 + C14426) * C48522) *
               C5057 +
           ((C3129 + C3130 - C3131 - C3132 + C3133 + C3134) * C10789 +
            C14441 * C48522) *
               C48489) *
              C48156 * C48285 +
          (((C14423 - (C14422 + C14421) + C14424 - C14425 - C14426) * C10789 +
            (C16441 - (C16442 + C16443) + C16444 - C16445 - C16446) * C48522) *
               C5057 +
           (C14442 * C10789 +
            (C14429 - (C14430 + C14431) + C14432 - C14433 - C14434) * C48522) *
               C48489) *
              C48156 * C48292 +
          (((C16443 + C16442 - C16441 - C16444 + C16445 + C16446) * C10789 +
            (C12900 * C47163 + C12901 * C48243 - C13394 * C47155 -
             C13395 * C48250 + (C113 * C7735 + C48388 * C7737) * C47169 +
             (C113 * C7738 + C48388 * C7741) * C3121) *
                C48522) *
               C5057 +
           ((C14431 + C14430 - C14429 - C14432 + C14433 + C14434) * C10789 +
            (C2476 * C47163 + C2477 * C48243 - C13120 * C47155 -
             C13121 * C48250 + (C113 * C7736 + C48388 * C7739) * C47169 +
             (C113 * C7740 + C48388 * C7742) * C3121) *
                C48522) *
               C48489) *
              C48156 * C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2827 +
             (C113 * C123 + C48388 * C136) * C48548 -
             (C113 * C308 + C48388 * C318) * C2828 -
             (C113 * C319 + C48388 * C338) * C48544 +
             (C113 * C309 + C48388 * C320) * C2829 +
             (C113 * C321 + C48388 * C339) * C48534 -
             (C113 * C1283 + C48388 * C1289) * C2830 -
             (C113 * C1290 + C48388 * C1301) * C48512) *
                C10789 +
            (C15765 + C15766 - C15767 - C15768 + C15769 + C15770 - C15771 -
             C15772) *
                C48522) *
               C5057 +
           ((C2832 + C2833 - C2834 - C2835 + C2836 + C2837 - C2838 - C2839) *
                C10789 +
            (C13658 + C13659 - C13660 - C13661 + C13662 + C13663 - C13664 -
             C13665) *
                C48522) *
               C48489) *
              C48156 * C3562 +
          (((C15767 - (C15766 + C15765) + C15768 - C15769 - C15770 + C15771 +
             C15772) *
                C10789 +
            (C11982 * C2828 - (C11100 * C48548 + C11101 * C2827) +
             C11983 * C48544 - C11984 * C2829 - C11985 * C48534 +
             (C113 * C6381 + C48388 * C6383) * C2830 +
             (C113 * C6384 + C48388 * C6387) * C48512) *
                C48522) *
               C5057 +
           ((C13660 - (C13659 + C13658) + C13661 - C13662 - C13663 + C13664 +
             C13665) *
                C10789 +
            (C2354 * C2828 - (C593 * C48548 + C592 * C2827) + C2355 * C48544 -
             C11986 * C2829 - C11987 * C48534 +
             (C113 * C6382 + C48388 * C6385) * C2830 +
             (C113 * C6386 + C48388 * C6388) * C48512) *
                C48522) *
               C48489) *
              C48156 * C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C2697 +
              (C113 * C123 + C48388 * C136) * C2691 -
              (C113 * C308 + C48388 * C318) * C2698 -
              (C113 * C319 + C48388 * C338) * C48247) *
                 C10789 +
             (C13860 + C13861 - C13862 - C13863) * C48522) *
                C5057 +
            ((C2700 + C2701 - C2702 - C2703) * C10789 + C13880 * C48522) *
                C48489) *
               C48538 +
           (((C2702 - (C2701 + C2700) + C2703) * C10789 + C13881 * C48522) *
                C5057 +
            ((C2706 - (C2705 + C2704) + C2707) * C10789 + C3305 * C48522) *
                C48489) *
               C48525 +
           ((C2720 * C10789 + C14226 * C48522) * C5057 +
            ((C2710 + C2709 - C2708 - C2711) * C10789 +
             (C3300 + C3301 - C3302 - C3303) * C48522) *
                C48489) *
               C48496) *
              C3562 +
          ((((C13862 - (C13861 + C13860) + C13863) * C10789 +
             (C13866 - (C13867 + C13868) + C13869) * C48522) *
                C5057 +
            (C13881 * C10789 + C13882 * C48522) * C48489) *
               C48538 +
           ((C13880 * C10789 + C13883 * C48522) * C5057 +
            (C14226 * C10789 + (C3006 + C3007 - C3008 - C3009) * C48522) *
                C48489) *
               C48525 +
           ((C3305 * C10789 + (C3008 - (C3007 + C3006) + C3009) * C48522) *
                C5057 +
            ((C3302 - (C3301 + C3300) + C3303) * C10789 +
             ((C113 * C2337 + C48388 * C2338) * C2698 -
              (C596 * C2691 + C597 * C2697) +
              (C113 * C2339 + C48388 * C2340) * C48247) *
                 C48522) *
                C48489) *
               C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2697 +
             (C113 * C123 + C48388 * C136) * C2691 -
             (C113 * C308 + C48388 * C318) * C2698 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C10789 +
            (C13860 + C13861 - C13862 - C13863) * C48522) *
               C5057 +
           ((C2700 + C2701 - C2702 - C2703) * C10789 + C13880 * C48522) *
               C48489) *
              C48156 * C48549 +
          (((C13862 - (C13861 + C13860) + C13863) * C10789 +
            (C13866 - (C13867 + C13868) + C13869) * C48522) *
               C5057 +
           (C13881 * C10789 + C13882 * C48522) * C48489) *
              C48156 * C48546 +
          (((C13868 + C13867 - C13866 - C13869) * C10789 +
            (C15903 + C15904 - C15905 - C15906) * C48522) *
               C5057 +
           (C13883 * C10789 + (C13872 + C13873 - C13874 - C13875) * C48522) *
               C48489) *
              C48156 * C48537 +
          (((C15905 - (C15904 + C15903) + C15906) * C10789 +
            ((C113 * C7249 + C48388 * C7251) * C2698 -
             (C12904 * C2691 + C12905 * C2697) +
             (C113 * C7252 + C48388 * C7255) * C48247) *
                C48522) *
               C5057 +
           ((C13874 - (C13873 + C13872) + C13875) * C10789 +
            ((C113 * C7250 + C48388 * C7253) * C2698 -
             (C12902 * C2691 + C12903 * C2697) +
             (C113 * C7254 + C48388 * C7256) * C48247) *
                C48522) *
               C48489) *
              C48156 * C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C2697 +
              (C113 * C123 + C48388 * C136) * C2691 -
              (C113 * C308 + C48388 * C318) * C2698 -
              (C113 * C319 + C48388 * C338) * C48247) *
                 C10789 +
             (C13860 + C13861 - C13862 - C13863) * C48522) *
                C5057 +
            ((C2700 + C2701 - C2702 - C2703) * C10789 + C13880 * C48522) *
                C48489) *
               C48456 +
           (((C2702 - (C2701 + C2700) + C2703) * C10789 + C13881 * C48522) *
                C5057 +
            ((C2706 - (C2705 + C2704) + C2707) * C10789 + C3305 * C48522) *
                C48489) *
               C48166) *
              C48285 +
          ((((C13862 - (C13861 + C13860) + C13863) * C10789 +
             (C13866 - (C13867 + C13868) + C13869) * C48522) *
                C5057 +
            (C13881 * C10789 + C13882 * C48522) * C48489) *
               C48456 +
           ((C13880 * C10789 + C13883 * C48522) * C5057 +
            (C14226 * C10789 + (C3006 + C3007 - C3008 - C3009) * C48522) *
                C48489) *
               C48166) *
              C48292 +
          ((((C13868 + C13867 - C13866 - C13869) * C10789 +
             (C15903 + C15904 - C15905 - C15906) * C48522) *
                C5057 +
            (C13883 * C10789 + (C13872 + C13873 - C13874 - C13875) * C48522) *
                C48489) *
               C48456 +
           ((C13882 * C10789 + (C13874 - (C13873 + C13872) + C13875) * C48522) *
                C5057 +
            ((C3008 - (C3007 + C3006) + C3009) * C10789 +
             ((C113 * C2583 + C48388 * C2588) * C2698 -
              (C2479 * C2691 + C2478 * C2697) +
              (C113 * C2589 + C48388 * C2592) * C48247) *
                 C48522) *
                C48489) *
               C48166) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C2697 +
              (C113 * C123 + C48388 * C136) * C2691 -
              (C113 * C308 + C48388 * C318) * C2698 -
              (C113 * C319 + C48388 * C338) * C48247) *
                 C10789 +
             (C13860 + C13861 - C13862 - C13863) * C48522) *
                C5057 +
            ((C2700 + C2701 - C2702 - C2703) * C10789 + C13880 * C48522) *
                C48489) *
               C48538 +
           (((C2702 - (C2701 + C2700) + C2703) * C10789 + C13881 * C48522) *
                C5057 +
            ((C2706 - (C2705 + C2704) + C2707) * C10789 + C3305 * C48522) *
                C48489) *
               C48525 +
           ((C2720 * C10789 + C14226 * C48522) * C5057 +
            ((C2710 + C2709 - C2708 - C2711) * C10789 +
             (C3300 + C3301 - C3302 - C3303) * C48522) *
                C48489) *
               C48496) *
              C3562 +
          ((((C13862 - (C13861 + C13860) + C13863) * C10789 +
             (C13866 - (C13867 + C13868) + C13869) * C48522) *
                C5057 +
            (C13881 * C10789 + C13882 * C48522) * C48489) *
               C48538 +
           ((C13880 * C10789 + C13883 * C48522) * C5057 +
            (C14226 * C10789 + (C3006 + C3007 - C3008 - C3009) * C48522) *
                C48489) *
               C48525 +
           ((C3305 * C10789 + (C3008 - (C3007 + C3006) + C3009) * C48522) *
                C5057 +
            ((C3302 - (C3301 + C3300) + C3303) * C10789 +
             ((C113 * C2337 + C48388 * C2338) * C2698 -
              (C596 * C2691 + C597 * C2697) +
              (C113 * C2339 + C48388 * C2340) * C48247) *
                 C48522) *
                C48489) *
               C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2827 +
             (C113 * C123 + C48388 * C136) * C48548 -
             (C113 * C308 + C48388 * C318) * C2828 -
             (C113 * C319 + C48388 * C338) * C48544 +
             (C113 * C309 + C48388 * C320) * C2829 +
             (C113 * C321 + C48388 * C339) * C48534 -
             (C113 * C1283 + C48388 * C1289) * C2830 -
             (C113 * C1290 + C48388 * C1301) * C48512) *
                C10789 +
            (C15765 + C15766 - C15767 - C15768 + C15769 + C15770 - C15771 -
             C15772) *
                C48522) *
               C5057 +
           ((C2832 + C2833 - C2834 - C2835 + C2836 + C2837 - C2838 - C2839) *
                C10789 +
            (C13658 + C13659 - C13660 - C13661 + C13662 + C13663 - C13664 -
             C13665) *
                C48522) *
               C48489) *
              C48156 * C3562 +
          (((C15767 - (C15766 + C15765) + C15768 - C15769 - C15770 + C15771 +
             C15772) *
                C10789 +
            (C11982 * C2828 - (C11100 * C48548 + C11101 * C2827) +
             C11983 * C48544 - C11984 * C2829 - C11985 * C48534 +
             (C113 * C6381 + C48388 * C6383) * C2830 +
             (C113 * C6384 + C48388 * C6387) * C48512) *
                C48522) *
               C5057 +
           ((C13660 - (C13659 + C13658) + C13661 - C13662 - C13663 + C13664 +
             C13665) *
                C10789 +
            (C2354 * C2828 - (C593 * C48548 + C592 * C2827) + C2355 * C48544 -
             C11986 * C2829 - C11987 * C48534 +
             (C113 * C6382 + C48388 * C6385) * C2830 +
             (C113 * C6386 + C48388 * C6388) * C48512) *
                C48522) *
               C48489) *
              C48156 * C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1557 +
             (C113 * C123 + C48388 * C136) * C1551 -
             (C113 * C308 + C48388 * C318) * C1558 -
             (C113 * C319 + C48388 * C338) * C1552 +
             (C113 * C309 + C48388 * C320) * C1559 +
             (C113 * C321 + C48388 * C339) * C1553 -
             (C113 * C1283 + C48388 * C1289) * C1560 -
             (C113 * C1290 + C48388 * C1301) * C48512) *
                C10789 +
            (C11098 * C1557 + C11099 * C1551 - C11570 * C1558 - C11571 * C1552 +
             C11980 * C1559 + C11981 * C1553 -
             (C113 * C1865 + C48388 * C1868) * C1560 -
             (C113 * C1869 + C48388 * C1874) * C48512) *
                C48522) *
               C5057 +
           ((C1566 + C1567 - C1568 - C1569 + C1570 + C1571 - C1590 - C1591) *
                C10789 +
            (C12126 + C12127 - C12128 - C12129 + C12130 + C12131 - C12138 -
             C12139) *
                C48522) *
               C48489) *
              C48456 +
          (((C1568 - (C1567 + C1566) + C1569 - C1570 - C1571 + C1590 + C1591) *
                C10789 +
            (C12128 - (C12127 + C12126) + C12129 - C12130 - C12131 + C12138 +
             C12139) *
                C48522) *
               C5057 +
           ((C1578 - (C1577 + C1576) + C1579 - C1580 - C1581 + C1592 + C1593) *
                C10789 +
            (C1054 * C1558 - (C589 * C1551 + C588 * C1557) + C1056 * C1552 -
             C1762 * C1559 - C1763 * C1553 +
             (C113 * C1867 + C48388 * C1872) * C1560 +
             (C113 * C1873 + C48388 * C1876) * C48512) *
                C48522) *
               C48489) *
              C48166) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C717 +
             (C113 * C123 + C48388 * C136) * C48470 -
             (C113 * C308 + C48388 * C318) * C718 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C10789 +
            (C11098 * C717 + C11099 * C48470 -
             (C113 * C1013 + C48388 * C1018) * C718 -
             (C113 * C1019 + C48388 * C1028) * C48247) *
                C48522) *
               C5057 +
           ((C724 + C725 - C726 - C727) * C10789 +
            (C1037 + C1036 - C1059 - C1060) * C48522) *
               C48489) *
              C713 +
          (((C726 - (C725 + C724) + C727) * C10789 +
            (C1059 - (C1036 + C1037) + C1060) * C48522) *
               C5057 +
           ((C730 - (C729 + C728) + C731) * C10789 + C1066 * C48522) * C48489) *
              C714 +
          ((C750 * C10789 + (C1043 + C1042 - C1061 - C1062) * C48522) * C5057 +
           ((C734 + C733 - C732 - C735) * C10789 +
            (C1046 + C1047 - C1063 - C1064) * C48522) *
               C48489) *
              C715 +
          ((C751 * C10789 + (C1063 - (C1047 + C1046) + C1064) * C48522) *
               C5057 +
           ((C748 - (C737 + C736) + C749) * C10789 +
            ((C113 * C1017 + C48388 * C1026) * C718 -
             (C864 * C48470 + C865 * C717) +
             (C113 * C1027 + C48388 * C1032) * C48247) *
                C48522) *
               C48489) *
              C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C717 +
              (C113 * C123 + C48388 * C136) * C48470 -
              (C113 * C308 + C48388 * C318) * C718 -
              (C113 * C319 + C48388 * C338) * C48247) *
                 C10789 +
             (C11561 + C11562 - C11575 - C11576) * C48522) *
                C5057 +
            ((C724 + C725 - C726 - C727) * C10789 + C11577 * C48522) * C48489) *
               C48456 +
           (((C726 - (C725 + C724) + C727) * C10789 + C11578 * C48522) * C5057 +
            ((C730 - (C729 + C728) + C731) * C10789 + C1066 * C48522) *
                C48489) *
               C48166) *
              C1987 +
          ((((C11575 - (C11562 + C11561) + C11576) * C10789 +
             (C13106 - (C13107 + C13108) + C13109) * C48522) *
                C5057 +
            (C11578 * C10789 + C13122 * C48522) * C48489) *
               C48456 +
           ((C11577 * C10789 + C13123 * C48522) * C5057 +
            (C11579 * C10789 + (C2348 + C2349 - C2360 - C2361) * C48522) *
                C48489) *
               C48166) *
              C1988 +
          ((((C13108 + C13107 - C13106 - C13109) * C10789 +
             (C12900 * C717 + C12901 * C48470 -
              (C113 * C2581 + C48388 * C2584) * C718 -
              (C113 * C2585 + C48388 * C2590) * C48247) *
                 C48522) *
                C5057 +
            (C13123 * C10789 + (C13112 + C13113 - C13124 - C13125) * C48522) *
                C48489) *
               C48456 +
           ((C13122 * C10789 + (C13124 - (C13113 + C13112) + C13125) * C48522) *
                C5057 +
            ((C2360 - (C2349 + C2348) + C2361) * C10789 +
             ((C113 * C2583 + C48388 * C2588) * C718 -
              (C2479 * C48470 + C2478 * C717) +
              (C113 * C2589 + C48388 * C2592) * C48247) *
                 C48522) *
                C48489) *
               C48166) *
              C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1557 +
             (C113 * C123 + C48388 * C136) * C1551 -
             (C113 * C308 + C48388 * C318) * C1558 -
             (C113 * C319 + C48388 * C338) * C1552 +
             (C113 * C309 + C48388 * C320) * C1559 +
             (C113 * C321 + C48388 * C339) * C1553 -
             (C113 * C1283 + C48388 * C1289) * C1560 -
             (C113 * C1290 + C48388 * C1301) * C48512) *
                C10789 +
            (C12474 + C12475 - C12476 - C12477 + C12478 + C12479 - C12486 -
             C12487) *
                C48522) *
               C5057 +
           ((C1566 + C1567 - C1568 - C1569 + C1570 + C1571 - C1590 - C1591) *
                C10789 +
            (C12126 + C12127 - C12128 - C12129 + C12130 + C12131 - C12138 -
             C12139) *
                C48522) *
               C48489) *
              C48156 * C48471 +
          (((C12476 - (C12475 + C12474) + C12477 - C12478 - C12479 + C12486 +
             C12487) *
                C10789 +
            (C11982 * C1558 - (C11100 * C1551 + C11101 * C1557) +
             C11983 * C1552 - C11984 * C1559 - C11985 * C1553 +
             (C113 * C6381 + C48388 * C6383) * C1560 +
             (C113 * C6384 + C48388 * C6387) * C48512) *
                C48522) *
               C5057 +
           ((C12128 - (C12127 + C12126) + C12129 - C12130 - C12131 + C12138 +
             C12139) *
                C10789 +
            (C2354 * C1558 - (C593 * C1551 + C592 * C1557) + C2355 * C1552 -
             C11986 * C1559 - C11987 * C1553 +
             (C113 * C6382 + C48388 * C6385) * C1560 +
             (C113 * C6386 + C48388 * C6388) * C48512) *
                C48522) *
               C48489) *
              C48156 * C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C717 +
              (C113 * C123 + C48388 * C136) * C48470 -
              (C113 * C308 + C48388 * C318) * C718 -
              (C113 * C319 + C48388 * C338) * C48247) *
                 C10789 +
             (C11561 + C11562 - C11575 - C11576) * C48522) *
                C5057 +
            ((C724 + C725 - C726 - C727) * C10789 + C11577 * C48522) * C48489) *
               C302 +
           (((C726 - (C725 + C724) + C727) * C10789 + C11578 * C48522) * C5057 +
            ((C730 - (C729 + C728) + C731) * C10789 + C1066 * C48522) *
                C48489) *
               C303 +
           ((C750 * C10789 + C11579 * C48522) * C5057 +
            ((C734 + C733 - C732 - C735) * C10789 +
             (C1046 + C1047 - C1063 - C1064) * C48522) *
                C48489) *
               C48496) *
              C48471 +
          ((((C11575 - (C11562 + C11561) + C11576) * C10789 +
             ((C113 * C1420 + C48388 * C1432) * C718 -
              (C11100 * C48470 + C11101 * C717) +
              (C113 * C1433 + C48388 * C1447) * C48247) *
                 C48522) *
                C5057 +
            (C11578 * C10789 + (C2358 - (C2343 + C2342) + C2359) * C48522) *
                C48489) *
               C302 +
           ((C11577 * C10789 + (C2342 + C2343 - C2358 - C2359) * C48522) *
                C5057 +
            (C11579 * C10789 + (C2348 + C2349 - C2360 - C2361) * C48522) *
                C48489) *
               C303 +
           ((C1066 * C10789 + (C2360 - (C2349 + C2348) + C2361) * C48522) *
                C5057 +
            ((C1063 - (C1047 + C1046) + C1064) * C10789 +
             ((C113 * C2337 + C48388 * C2338) * C718 -
              (C596 * C48470 + C597 * C717) +
              (C113 * C2339 + C48388 * C2340) * C48247) *
                 C48522) *
                C48489) *
               C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C717 +
             (C113 * C123 + C48388 * C136) * C48470 -
             (C113 * C308 + C48388 * C318) * C718 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C10789 +
            (C11561 + C11562 - C11575 - C11576) * C48522) *
               C5057 +
           ((C724 + C725 - C726 - C727) * C10789 + C11577 * C48522) * C48489) *
              C48156 * C2459 +
          (((C11575 - (C11562 + C11561) + C11576) * C10789 +
            (C13106 - (C13107 + C13108) + C13109) * C48522) *
               C5057 +
           (C11578 * C10789 + C13122 * C48522) * C48489) *
              C48156 * C2460 +
          (((C13108 + C13107 - C13106 - C13109) * C10789 +
            (C13388 + C13389 - C13396 - C13397) * C48522) *
               C5057 +
           (C13123 * C10789 + (C13112 + C13113 - C13124 - C13125) * C48522) *
               C48489) *
              C48156 * C2461 +
          (((C13396 - (C13389 + C13388) + C13397) * C10789 +
            ((C113 * C7249 + C48388 * C7251) * C718 -
             (C12904 * C48470 + C12905 * C717) +
             (C113 * C7252 + C48388 * C7255) * C48247) *
                C48522) *
               C5057 +
           ((C13124 - (C13113 + C13112) + C13125) * C10789 +
            ((C113 * C7250 + C48388 * C7253) * C718 -
             (C12902 * C48470 + C12903 * C717) +
             (C113 * C7254 + C48388 * C7256) * C48247) *
                C48522) *
               C48489) *
              C48156 * C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48388 * C122) * C114 +
                 (C113 * C123 + C48388 * C136) * C48184) *
                    C10789 +
                ((C113 * C524 + C48388 * C538) * C114 +
                 (C113 * C537 + C48388 * C554) * C48184) *
                    C48522) *
                   C5057 +
               ((C174 + C175) * C10789 + (C598 + C599) * C48522) * C48489) *
                  C107 -
              ((C610 * C48522 + (C177 + C176) * C10789) * C48489 +
               ((C599 + C598) * C48522 + (C175 + C174) * C10789) * C5057) *
                  C108 +
              ((C184 * C10789 + (C600 + C601) * C48522) * C5057 +
               ((C179 + C178) * C10789 + C858 * C48522) * C48489) *
                  C109 -
              (((C866 + C867) * C48522 + (C181 + C180) * C10789) * C48489 +
               ((C603 + C602) * C48522 + C185 * C10789) * C5057) *
                  C110 +
              ((C186 * C10789 + (C867 + C866) * C48522) * C5057 +
               ((C183 + C182) * C10789 +
                ((C113 * C853 + C48388 * C854) * C114 +
                 (C113 * C855 + C48388 * C856) * C48184) *
                    C48522) *
                   C48489) *
                  C111) *
             C48202 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48388 * C122) * C305 +
                 (C113 * C123 + C48388 * C136) * C48541 -
                 (C113 * C308 + C48388 * C318) * C306 -
                 (C113 * C319 + C48388 * C338) * C48529 +
                 (C113 * C309 + C48388 * C320) * C307 +
                 (C113 * C321 + C48388 * C339) * C48502) *
                    C10789 +
                ((C113 * C524 + C48388 * C538) * C305 +
                 (C113 * C537 + C48388 * C554) * C48541 -
                 (C113 * C1013 + C48388 * C1018) * C306 -
                 (C113 * C1019 + C48388 * C1028) * C48529 +
                 (C113 * C1417 + C48388 * C1426) * C307 +
                 (C113 * C1427 + C48388 * C1444) * C48502) *
                    C48522) *
                   C5057 +
               ((C349 + C350 - C392 - C393 + C394 + C395) * C10789 +
                (C3713 + C3712 - C3711 - C3714 + C3715 + C3716) * C48522) *
                   C48489) *
                  C302 +
              (((C392 - (C350 + C349) + C393 - C394 - C395) * C10789 +
                (C3711 - (C3712 + C3713) + C3714 - C3715 - C3716) * C48522) *
                   C5057 +
               ((C396 - (C360 + C359) + C397 - C398 - C399) * C10789 +
                (C3717 - (C3718 + C3719) + C3720 - C3721 - C3722) * C48522) *
                   C48489) *
                  C303 +
              ((C407 * C10789 +
                (C3719 + C3718 - C3717 - C3720 + C3721 + C3722) * C48522) *
                   C5057 +
               ((C372 + C371 - C400 - C401 + C402 + C403) * C10789 +
                (C590 * C305 + C591 * C48541 - C1057 * C306 - C1058 * C48529 +
                 (C113 * C1739 + C48388 * C1740) * C307 +
                 (C113 * C1741 + C48388 * C1742) * C48502) *
                    C48522) *
                   C48489) *
                  C48496) *
             C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C10789 +
             (C11102 + C11103) * C48522) *
                C5057 +
            ((C174 + C175) * C10789 + C11088 * C48522) * C48489) *
               C302 -
           ((C610 * C48522 + (C177 + C176) * C10789) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C10789) * C5057) *
               C303 +
           ((C184 * C10789 + C11090 * C48522) * C5057 +
            ((C179 + C178) * C10789 + C858 * C48522) * C48489) *
               C48496) *
              C48542 +
          (((C11088 * C10789 + C11091 * C48522) * C5057 +
            (C11090 * C10789 + C611 * C48522) * C48489) *
               C303 -
           ((C11092 * C48522 + C11089 * C10789) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C10789) * C5057) *
               C302 -
           (((C608 + C609) * C48522 + (C603 + C602) * C10789) * C48489 +
            (C11097 * C48522 + C610 * C10789) * C5057) *
               C48496) *
              C48531 +
          ((((C11105 + C11104) * C10789 +
             ((C113 * C2169 + C48388 * C2178) * C114 +
              (C113 * C2177 + C48388 * C2187) * C48184) *
                 C48522) *
                C5057 +
            (C11091 * C10789 + (C2480 + C2481) * C48522) * C48489) *
               C302 -
           (((C2483 + C2482) * C48522 + C11097 * C10789) * C48489 +
            ((C2481 + C2480) * C48522 + C11092 * C10789) * C5057) *
               C303 +
           ((C611 * C10789 + (C2482 + C2483) * C48522) * C5057 +
            ((C609 + C608) * C10789 +
             ((C113 * C2463 + C48388 * C2464) * C114 +
              (C113 * C2465 + C48388 * C2466) * C48184) *
                 C48522) *
                C48489) *
               C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1183 +
             (C113 * C123 + C48388 * C136) * C1177 -
             (C113 * C308 + C48388 * C318) * C1184 -
             (C113 * C319 + C48388 * C338) * C1178 +
             (C113 * C309 + C48388 * C320) * C1185 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C10789 +
            (C11098 * C1183 + C11099 * C1177 - C11570 * C1184 - C11571 * C1178 +
             (C113 * C1417 + C48388 * C1426) * C1185 +
             (C113 * C1427 + C48388 * C1444) * C48502) *
                C48522) *
               C5057 +
           ((C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C10789 +
            (C1746 + C1745 - C1744 - C1747 + C1764 + C1765) * C48522) *
               C48489) *
              C48538 +
          (((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C10789 +
            (C1744 - (C1745 + C1746) + C1747 - C1764 - C1765) * C48522) *
               C5057 +
           ((C1195 - (C1194 + C1193) + C1196 - C1197 - C1198) * C10789 +
            (C1752 - (C1753 + C1754) + C1755 - C1766 - C1767) * C48522) *
               C48489) *
              C48525 +
          ((C1209 * C10789 +
            (C1754 + C1753 - C1752 - C1755 + C1766 + C1767) * C48522) *
               C5057 +
           ((C1201 + C1200 - C1199 - C1202 + C1203 + C1204) * C10789 +
            (C590 * C1183 + C591 * C1177 - C1057 * C1184 - C1058 * C1178 +
             (C113 * C1739 + C48388 * C1740) * C1185 +
             (C113 * C1741 + C48388 * C1742) * C48502) *
                C48522) *
               C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1278 +
            (C113 * C123 + C48388 * C136) * C1272 -
            (C113 * C308 + C48388 * C318) * C1279 -
            (C113 * C319 + C48388 * C338) * C1273 +
            (C113 * C309 + C48388 * C320) * C1280 +
            (C113 * C321 + C48388 * C339) * C1274 -
            (C113 * C1283 + C48388 * C1289) * C1281 -
            (C113 * C1290 + C48388 * C1301) * C1275 +
            (C113 * C1284 + C48388 * C1291) * C1282 +
            (C113 * C1292 + C48388 * C1302) * C1276) *
               C10789 +
           (C11098 * C1278 + C11099 * C1272 - C11570 * C1279 - C11571 * C1273 +
            (C113 * C1417 + C48388 * C1426) * C1280 +
            (C113 * C1427 + C48388 * C1444) * C1274 -
            (C113 * C1865 + C48388 * C1868) * C1281 -
            (C113 * C1869 + C48388 * C1874) * C1275 +
            (C113 * C6867 + C48388 * C6869) * C1282 +
            (C113 * C6870 + C48388 * C6873) * C1276) *
               C48522) *
              C5057 +
          ((C164 * C1278 + C165 * C1272 - C379 * C1279 - C380 * C1273 +
            C381 * C1280 + C382 * C1274 - C1586 * C1281 - C1587 * C1275 +
            (C113 * C1286 + C48388 * C1295) * C1282 +
            (C113 * C1296 + C48388 * C1304) * C1276) *
               C10789 +
           (C586 * C1278 + C587 * C1272 - C1052 * C1279 - C1053 * C1273 +
            C1760 * C1280 + C1761 * C1274 -
            (C113 * C1866 + C48388 * C1870) * C1281 -
            (C113 * C1871 + C48388 * C1875) * C1275 +
            (C113 * C6868 + C48388 * C6871) * C1282 +
            (C113 * C6872 + C48388 * C6874) * C1276) *
               C48522) *
              C48489) *
         C48156 * C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1183 +
             (C113 * C123 + C48388 * C136) * C1177 -
             (C113 * C308 + C48388 * C318) * C1184 -
             (C113 * C319 + C48388 * C338) * C1178 +
             (C113 * C309 + C48388 * C320) * C1185 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C10789 +
            (C11954 + C11955 - C11956 - C11957 + C11988 + C11989) * C48522) *
               C5057 +
           ((C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C10789 +
            (C1746 + C1745 - C1744 - C1747 + C1764 + C1765) * C48522) *
               C48489) *
              C48156 * C48542 +
          (((C11956 - (C11955 + C11954) + C11957 - C11988 - C11989) * C10789 +
            (C11990 - (C11964 + C11965) + C11991 - C11992 - C11993) * C48522) *
               C5057 +
           ((C1744 - (C1745 + C1746) + C1747 - C1764 - C1765) * C10789 +
            (C11972 - (C11973 + C11974) + C11975 - C11994 - C11995) * C48522) *
               C48489) *
              C48156 * C48531 +
          (((C11965 + C11964 - C11990 - C11991 + C11992 + C11993) * C10789 +
            ((C113 * C2169 + C48388 * C2178) * C1183 +
             (C113 * C2177 + C48388 * C2187) * C1177 -
             (C113 * C2581 + C48388 * C2584) * C1184 -
             (C113 * C2585 + C48388 * C2590) * C1178 +
             (C113 * C7735 + C48388 * C7737) * C1185 +
             (C113 * C7738 + C48388 * C7741) * C48502) *
                C48522) *
               C5057 +
           ((C11974 + C11973 - C11972 - C11975 + C11994 + C11995) * C10789 +
            (C2476 * C1183 + C2477 * C1177 -
             (C113 * C2582 + C48388 * C2586) * C1184 -
             (C113 * C2587 + C48388 * C2591) * C1178 +
             (C113 * C7736 + C48388 * C7739) * C1185 +
             (C113 * C7740 + C48388 * C7742) * C48502) *
                C48522) *
               C48489) *
              C48156 * C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C10789 +
             (C11102 + C11103) * C48522) *
                C5057 +
            ((C174 + C175) * C10789 + C11088 * C48522) * C48489) *
               C48538 -
           ((C610 * C48522 + (C177 + C176) * C10789) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C10789) * C5057) *
               C48525 +
           ((C184 * C10789 + C11090 * C48522) * C5057 +
            ((C179 + C178) * C10789 + C858 * C48522) * C48489) *
               C48496) *
              C1987 +
          (((C11088 * C10789 + C11091 * C48522) * C5057 +
            (C11090 * C10789 + C611 * C48522) * C48489) *
               C48525 -
           ((C11092 * C48522 + C11089 * C10789) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C10789) * C5057) *
               C48538 -
           (((C608 + C609) * C48522 + C11366 * C10789) * C48489 +
            (C11097 * C48522 + C610 * C10789) * C5057) *
               C48496) *
              C1988 +
          ((((C11105 + C11104) * C10789 +
             ((C113 * C2169 + C48388 * C2178) * C114 +
              (C113 * C2177 + C48388 * C2187) * C48184) *
                 C48522) *
                C5057 +
            (C11091 * C10789 + (C2480 + C2481) * C48522) * C48489) *
               C48538 -
           (((C2483 + C2482) * C48522 + C11097 * C10789) * C48489 +
            ((C2481 + C2480) * C48522 + C11092 * C10789) * C5057) *
               C48525 +
           ((C611 * C10789 + (C2482 + C2483) * C48522) * C5057 +
            ((C609 + C608) * C10789 +
             ((C113 * C2463 + C48388 * C2464) * C114 +
              (C113 * C2465 + C48388 * C2466) * C48184) *
                 C48522) *
                C48489) *
               C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C305 +
             (C113 * C123 + C48388 * C136) * C48541 -
             (C113 * C308 + C48388 * C318) * C306 -
             (C113 * C319 + C48388 * C338) * C48529 +
             (C113 * C309 + C48388 * C320) * C307 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C10789 +
            (C12780 + C12781 - C12782 - C12783 + C12784 + C12785) * C48522) *
               C5057 +
           ((C349 + C350 - C392 - C393 + C394 + C395) * C10789 +
            (C3713 + C3712 - C3711 - C3714 + C3715 + C3716) * C48522) *
               C48489) *
              C48156 * C1987 +
          (((C12782 - (C12781 + C12780) + C12783 - C12784 - C12785) * C10789 +
            (C12786 - (C12787 + C12788) + C12789 - C12790 - C12791) * C48522) *
               C5057 +
           ((C3711 - (C3712 + C3713) + C3714 - C3715 - C3716) * C10789 +
            (C12792 - (C12793 + C12794) + C12795 - C12796 - C12797) * C48522) *
               C48489) *
              C48156 * C1988 +
          (((C12788 + C12787 - C12786 - C12789 + C12790 + C12791) * C10789 +
            ((C113 * C2169 + C48388 * C2178) * C305 +
             (C113 * C2177 + C48388 * C2187) * C48541 -
             (C113 * C2581 + C48388 * C2584) * C306 -
             (C113 * C2585 + C48388 * C2590) * C48529 +
             (C113 * C7735 + C48388 * C7737) * C307 +
             (C113 * C7738 + C48388 * C7741) * C48502) *
                C48522) *
               C5057 +
           ((C12794 + C12793 - C12792 - C12795 + C12796 + C12797) * C10789 +
            (C2476 * C305 + C2477 * C48541 -
             (C113 * C2582 + C48388 * C2586) * C306 -
             (C113 * C2587 + C48388 * C2591) * C48529 +
             (C113 * C7736 + C48388 * C7739) * C307 +
             (C113 * C7740 + C48388 * C7742) * C48502) *
                C48522) *
               C48489) *
              C48156 * C48505)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C10789 +
            (C11102 + C11103) * C48522) *
               C5057 +
           ((C174 + C175) * C10789 + C11088 * C48522) * C48489) *
              C48156 * C2162 -
          ((C11092 * C48522 + C11089 * C10789) * C48489 +
           ((C11104 + C11105) * C48522 + (C11103 + C11102) * C10789) * C5057) *
              C48156 * C2163 +
          (((C11105 + C11104) * C10789 + (C12906 + C12907) * C48522) * C5057 +
           (C11091 * C10789 + (C2480 + C2481) * C48522) * C48489) *
              C48156 * C2164 -
          (((C12908 + C12909) * C48522 + (C2481 + C2480) * C10789) * C48489 +
           ((C12910 + C12911) * C48522 + (C12907 + C12906) * C10789) * C5057) *
              C48156 * C2165 +
          (((C12911 + C12910) * C10789 +
            ((C113 * C12879 + C48388 * C12881) * C114 +
             (C113 * C12882 + C48388 * C12885) * C48184) *
                C48522) *
               C5057 +
           ((C12909 + C12908) * C10789 +
            ((C113 * C12880 + C48388 * C12883) * C114 +
             (C113 * C12884 + C48388 * C12886) * C48184) *
                C48522) *
               C48489) *
              C48156 * C2166)) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C1183 +
              (C113 * C123 + C48388 * C136) * C1177 -
              (C113 * C308 + C48388 * C318) * C1184 -
              (C113 * C319 + C48388 * C338) * C1178 +
              (C113 * C309 + C48388 * C320) * C1185 +
              (C113 * C321 + C48388 * C339) * C48502) *
                 C10789 +
             (C11954 + C11955 - C11956 - C11957 + C11988 + C11989) * C48522) *
                C5057 +
            ((C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C10789 +
             C12342 * C48522) *
                C48489) *
               C48456 +
           (((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C10789 +
             C12343 * C48522) *
                C5057 +
            ((C1195 - (C1194 + C1193) + C1196 - C1197 - C1198) * C10789 +
             (C1752 - (C1753 + C1754) + C1755 - C1766 - C1767) * C48522) *
                C48489) *
               C48166) *
              C48471 +
          ((((C11956 - (C11955 + C11954) + C11957 - C11988 - C11989) * C10789 +
             (C11990 - (C11964 + C11965) + C11991 - C11992 - C11993) * C48522) *
                C5057 +
            (C12343 * C10789 +
             (C11972 - (C11973 + C11974) + C11975 - C11994 - C11995) * C48522) *
                C48489) *
               C48456 +
           ((C12342 * C10789 +
             (C11974 + C11973 - C11972 - C11975 + C11994 + C11995) * C48522) *
                C5057 +
            ((C1754 + C1753 - C1752 - C1755 + C1766 + C1767) * C10789 +
             (C594 * C1183 + C595 * C1177 - C2356 * C1184 - C2357 * C1178 +
              (C113 * C1425 + C48388 * C1442) * C1185 +
              (C113 * C1443 + C48388 * C1452) * C48502) *
                 C48522) *
                C48489) *
               C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C10789 +
             (C11102 + C11103) * C48522) *
                C5057 +
            ((C174 + C175) * C10789 + C11088 * C48522) * C48489) *
               C713 -
           ((C610 * C48522 + (C177 + C176) * C10789) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C10789) * C5057) *
               C714 +
           ((C184 * C10789 + C11090 * C48522) * C5057 +
            ((C179 + C178) * C10789 + C858 * C48522) * C48489) *
               C715 -
           (((C866 + C867) * C48522 + (C181 + C180) * C10789) * C48489 +
            (C11366 * C48522 + C185 * C10789) * C5057) *
               C48506) *
              C48471 +
          (((C11088 * C10789 + C11091 * C48522) * C5057 +
            (C11090 * C10789 + C611 * C48522) * C48489) *
               C714 -
           ((C11092 * C48522 + C11089 * C10789) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C10789) * C5057) *
               C713 -
           (((C608 + C609) * C48522 + C11366 * C10789) * C48489 +
            (C11097 * C48522 + C610 * C10789) * C5057) *
               C715 +
           ((C858 * C10789 + (C609 + C608) * C48522) * C5057 +
            ((C867 + C866) * C10789 + ((C113 * C530 + C48388 * C549) * C114 +
                                       (C113 * C550 + C48388 * C560) * C48184) *
                                          C48522) *
                C48489) *
               C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C10789 +
             (C11102 + C11103) * C48522) *
                C5057 +
            ((C174 + C175) * C10789 + C11088 * C48522) * C48489) *
               C48456 -
           ((C610 * C48522 + (C177 + C176) * C10789) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C10789) * C5057) *
               C48166) *
              C2459 +
          (((C11088 * C10789 + C11091 * C48522) * C5057 +
            (C11090 * C10789 + C611 * C48522) * C48489) *
               C48166 -
           ((C11092 * C48522 + C11089 * C10789) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C10789) * C5057) *
               C48456) *
              C2460 +
          ((((C11105 + C11104) * C10789 + (C12906 + C12907) * C48522) * C5057 +
            (C11091 * C10789 + C13256 * C48522) * C48489) *
               C48456 -
           (((C2483 + C2482) * C48522 + C11097 * C10789) * C48489 +
            (C13257 * C48522 + C11092 * C10789) * C5057) *
               C48166) *
              C2461 +
          (((C13256 * C10789 + (C12909 + C12908) * C48522) * C5057 +
            ((C2482 + C2483) * C10789 +
             ((C113 * C2172 + C48388 * C2183) * C114 +
              (C113 * C2184 + C48388 * C2190) * C48184) *
                 C48522) *
                C48489) *
               C48166 -
           (((C12908 + C12909) * C48522 + C13257 * C10789) * C48489 +
            ((C12910 + C12911) * C48522 + (C12907 + C12906) * C10789) * C5057) *
               C48456) *
              C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C305 +
             (C113 * C123 + C48388 * C136) * C48541 -
             (C113 * C308 + C48388 * C318) * C306 -
             (C113 * C319 + C48388 * C338) * C48529 +
             (C113 * C309 + C48388 * C320) * C307 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C10789 +
            ((C113 * C524 + C48388 * C538) * C305 +
             (C113 * C537 + C48388 * C554) * C48541 -
             (C113 * C1013 + C48388 * C1018) * C306 -
             (C113 * C1019 + C48388 * C1028) * C48529 +
             (C113 * C1417 + C48388 * C1426) * C307 +
             (C113 * C1427 + C48388 * C1444) * C48502) *
                C48522) *
               C5057 +
           ((C349 + C350 - C392 - C393 + C394 + C395) * C10789 +
            (C3713 + C3712 - C3711 - C3714 + C3715 + C3716) * C48522) *
               C48489) *
              C302 +
          (((C392 - (C350 + C349) + C393 - C394 - C395) * C10789 +
            (C3711 - (C3712 + C3713) + C3714 - C3715 - C3716) * C48522) *
               C5057 +
           ((C396 - (C360 + C359) + C397 - C398 - C399) * C10789 +
            (C3717 - (C3718 + C3719) + C3720 - C3721 - C3722) * C48522) *
               C48489) *
              C303 +
          ((C407 * C10789 +
            (C3719 + C3718 - C3717 - C3720 + C3721 + C3722) * C48522) *
               C5057 +
           ((C372 + C371 - C400 - C401 + C402 + C403) * C10789 +
            (C590 * C305 + C591 * C48541 - C1057 * C306 - C1058 * C48529 +
             (C113 * C1739 + C48388 * C1740) * C307 +
             (C113 * C1741 + C48388 * C1742) * C48502) *
                C48522) *
               C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C10789 +
            ((C113 * C524 + C48388 * C538) * C114 +
             (C113 * C537 + C48388 * C554) * C48184) *
                C48522) *
               C5057 +
           ((C174 + C175) * C10789 + (C598 + C599) * C48522) * C48489) *
              C107 -
          ((C610 * C48522 + (C177 + C176) * C10789) * C48489 +
           ((C599 + C598) * C48522 + (C175 + C174) * C10789) * C5057) *
              C108 +
          ((C184 * C10789 + (C600 + C601) * C48522) * C5057 +
           ((C179 + C178) * C10789 + C858 * C48522) * C48489) *
              C109 -
          (((C866 + C867) * C48522 + (C181 + C180) * C10789) * C48489 +
           ((C603 + C602) * C48522 + C185 * C10789) * C5057) *
              C110 +
          ((C186 * C10789 + (C867 + C866) * C48522) * C5057 +
           ((C183 + C182) * C10789 + ((C113 * C853 + C48388 * C854) * C114 +
                                      (C113 * C855 + C48388 * C856) * C48184) *
                                         C48522) *
               C48489) *
              C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1183 +
             (C113 * C123 + C48388 * C136) * C1177 -
             (C113 * C308 + C48388 * C318) * C1184 -
             (C113 * C319 + C48388 * C338) * C1178 +
             (C113 * C309 + C48388 * C320) * C1185 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C10789 +
            (C11098 * C1183 + C11099 * C1177 - C11570 * C1184 - C11571 * C1178 +
             (C113 * C1417 + C48388 * C1426) * C1185 +
             (C113 * C1427 + C48388 * C1444) * C48502) *
                C48522) *
               C5057 +
           ((C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C10789 +
            (C1746 + C1745 - C1744 - C1747 + C1764 + C1765) * C48522) *
               C48489) *
              C48538 +
          (((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C10789 +
            (C1744 - (C1745 + C1746) + C1747 - C1764 - C1765) * C48522) *
               C5057 +
           ((C1195 - (C1194 + C1193) + C1196 - C1197 - C1198) * C10789 +
            (C1752 - (C1753 + C1754) + C1755 - C1766 - C1767) * C48522) *
               C48489) *
              C48525 +
          ((C1209 * C10789 +
            (C1754 + C1753 - C1752 - C1755 + C1766 + C1767) * C48522) *
               C5057 +
           ((C1201 + C1200 - C1199 - C1202 + C1203 + C1204) * C10789 +
            (C590 * C1183 + C591 * C1177 - C1057 * C1184 - C1058 * C1178 +
             (C113 * C1739 + C48388 * C1740) * C1185 +
             (C113 * C1741 + C48388 * C1742) * C48502) *
                C48522) *
               C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1278 +
            (C113 * C123 + C48388 * C136) * C1272 -
            (C113 * C308 + C48388 * C318) * C1279 -
            (C113 * C319 + C48388 * C338) * C1273 +
            (C113 * C309 + C48388 * C320) * C1280 +
            (C113 * C321 + C48388 * C339) * C1274 -
            (C113 * C1283 + C48388 * C1289) * C1281 -
            (C113 * C1290 + C48388 * C1301) * C1275 +
            (C113 * C1284 + C48388 * C1291) * C1282 +
            (C113 * C1292 + C48388 * C1302) * C1276) *
               C10789 +
           (C11098 * C1278 + C11099 * C1272 - C11570 * C1279 - C11571 * C1273 +
            (C113 * C1417 + C48388 * C1426) * C1280 +
            (C113 * C1427 + C48388 * C1444) * C1274 -
            (C113 * C1865 + C48388 * C1868) * C1281 -
            (C113 * C1869 + C48388 * C1874) * C1275 +
            (C113 * C6867 + C48388 * C6869) * C1282 +
            (C113 * C6870 + C48388 * C6873) * C1276) *
               C48522) *
              C5057 +
          ((C164 * C1278 + C165 * C1272 - C379 * C1279 - C380 * C1273 +
            C381 * C1280 + C382 * C1274 - C1586 * C1281 - C1587 * C1275 +
            (C113 * C1286 + C48388 * C1295) * C1282 +
            (C113 * C1296 + C48388 * C1304) * C1276) *
               C10789 +
           (C586 * C1278 + C587 * C1272 - C1052 * C1279 - C1053 * C1273 +
            C1760 * C1280 + C1761 * C1274 -
            (C113 * C1866 + C48388 * C1870) * C1281 -
            (C113 * C1871 + C48388 * C1875) * C1275 +
            (C113 * C6868 + C48388 * C6871) * C1282 +
            (C113 * C6872 + C48388 * C6874) * C1276) *
               C48522) *
              C48489) *
         C48156 * C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C10789 +
             (C11102 + C11103) * C48522) *
                C5057 +
            ((C174 + C175) * C10789 + C11088 * C48522) * C48489) *
               C48538 -
           ((C610 * C48522 + (C177 + C176) * C10789) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C10789) * C5057) *
               C48525 +
           ((C184 * C10789 + C11090 * C48522) * C5057 +
            ((C179 + C178) * C10789 + C858 * C48522) * C48489) *
               C48496) *
              C1987 +
          (((C11088 * C10789 + C11091 * C48522) * C5057 +
            (C11090 * C10789 + C611 * C48522) * C48489) *
               C48525 -
           ((C11092 * C48522 + C11089 * C10789) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C10789) * C5057) *
               C48538 -
           (((C608 + C609) * C48522 + C11366 * C10789) * C48489 +
            (C11097 * C48522 + C610 * C10789) * C5057) *
               C48496) *
              C1988 +
          ((((C11105 + C11104) * C10789 +
             ((C113 * C2169 + C48388 * C2178) * C114 +
              (C113 * C2177 + C48388 * C2187) * C48184) *
                 C48522) *
                C5057 +
            (C11091 * C10789 + (C2480 + C2481) * C48522) * C48489) *
               C48538 -
           (((C2483 + C2482) * C48522 + C11097 * C10789) * C48489 +
            ((C2481 + C2480) * C48522 + C11092 * C10789) * C5057) *
               C48525 +
           ((C611 * C10789 + (C2482 + C2483) * C48522) * C5057 +
            ((C609 + C608) * C10789 +
             ((C113 * C2463 + C48388 * C2464) * C114 +
              (C113 * C2465 + C48388 * C2466) * C48184) *
                 C48522) *
                C48489) *
               C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C305 +
             (C113 * C123 + C48388 * C136) * C48541 -
             (C113 * C308 + C48388 * C318) * C306 -
             (C113 * C319 + C48388 * C338) * C48529 +
             (C113 * C309 + C48388 * C320) * C307 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C10789 +
            (C12780 + C12781 - C12782 - C12783 + C12784 + C12785) * C48522) *
               C5057 +
           ((C349 + C350 - C392 - C393 + C394 + C395) * C10789 +
            (C3713 + C3712 - C3711 - C3714 + C3715 + C3716) * C48522) *
               C48489) *
              C48156 * C1987 +
          (((C12782 - (C12781 + C12780) + C12783 - C12784 - C12785) * C10789 +
            (C12786 - (C12787 + C12788) + C12789 - C12790 - C12791) * C48522) *
               C5057 +
           ((C3711 - (C3712 + C3713) + C3714 - C3715 - C3716) * C10789 +
            (C12792 - (C12793 + C12794) + C12795 - C12796 - C12797) * C48522) *
               C48489) *
              C48156 * C1988 +
          (((C12788 + C12787 - C12786 - C12789 + C12790 + C12791) * C10789 +
            ((C113 * C2169 + C48388 * C2178) * C305 +
             (C113 * C2177 + C48388 * C2187) * C48541 -
             (C113 * C2581 + C48388 * C2584) * C306 -
             (C113 * C2585 + C48388 * C2590) * C48529 +
             (C113 * C7735 + C48388 * C7737) * C307 +
             (C113 * C7738 + C48388 * C7741) * C48502) *
                C48522) *
               C5057 +
           ((C12794 + C12793 - C12792 - C12795 + C12796 + C12797) * C10789 +
            (C2476 * C305 + C2477 * C48541 -
             (C113 * C2582 + C48388 * C2586) * C306 -
             (C113 * C2587 + C48388 * C2591) * C48529 +
             (C113 * C7736 + C48388 * C7739) * C307 +
             (C113 * C7740 + C48388 * C7742) * C48502) *
                C48522) *
               C48489) *
              C48156 * C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C717 +
              (C113 * C123 + C48388 * C136) * C48470 -
              (C113 * C308 + C48388 * C318) * C718 -
              (C113 * C319 + C48388 * C338) * C48247) *
                 C10789 +
             (C11561 + C11562 - C11575 - C11576) * C48522) *
                C5057 +
            ((C724 + C725 - C726 - C727) * C10789 + C11577 * C48522) * C48489) *
               C48161 +
           (((C726 - (C725 + C724) + C727) * C10789 + C11578 * C48522) * C5057 +
            ((C730 - (C729 + C728) + C731) * C10789 + C1066 * C48522) *
                C48489) *
               C48169 +
           ((C750 * C10789 + C11579 * C48522) * C5057 +
            ((C734 + C733 - C732 - C735) * C10789 +
             (C1046 + C1047 - C1063 - C1064) * C48522) *
                C48489) *
               C3124) *
              C3562 +
          ((((C11575 - (C11562 + C11561) + C11576) * C10789 +
             (C13106 - (C13107 + C13108) + C13109) * C48522) *
                C5057 +
            (C11578 * C10789 + C13122 * C48522) * C48489) *
               C48161 +
           ((C11577 * C10789 + C13123 * C48522) * C5057 +
            (C11579 * C10789 + (C2348 + C2349 - C2360 - C2361) * C48522) *
                C48489) *
               C48169 +
           ((C1066 * C10789 + (C2360 - (C2349 + C2348) + C2361) * C48522) *
                C5057 +
            ((C1063 - (C1047 + C1046) + C1064) * C10789 +
             ((C113 * C2337 + C48388 * C2338) * C718 -
              (C596 * C48470 + C597 * C717) +
              (C113 * C2339 + C48388 * C2340) * C48247) *
                 C48522) *
                C48489) *
               C3124) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C717 +
              (C113 * C123 + C48388 * C136) * C48470 -
              (C113 * C308 + C48388 * C318) * C718 -
              (C113 * C319 + C48388 * C338) * C48247) *
                 C10789 +
             (C11561 + C11562 - C11575 - C11576) * C48522) *
                C5057 +
            ((C724 + C725 - C726 - C727) * C10789 + C11577 * C48522) * C48489) *
               C2825 +
           (((C726 - (C725 + C724) + C727) * C10789 + C11578 * C48522) * C5057 +
            ((C730 - (C729 + C728) + C731) * C10789 + C1066 * C48522) *
                C48489) *
               C48166) *
              C48285 +
          ((((C11575 - (C11562 + C11561) + C11576) * C10789 +
             (C13106 - (C13107 + C13108) + C13109) * C48522) *
                C5057 +
            (C11578 * C10789 + C13122 * C48522) * C48489) *
               C2825 +
           ((C11577 * C10789 + C13123 * C48522) * C5057 +
            (C11579 * C10789 + (C2348 + C2349 - C2360 - C2361) * C48522) *
                C48489) *
               C48166) *
              C48292 +
          ((((C13108 + C13107 - C13106 - C13109) * C10789 +
             (C13388 + C13389 - C13396 - C13397) * C48522) *
                C5057 +
            (C13123 * C10789 + (C13112 + C13113 - C13124 - C13125) * C48522) *
                C48489) *
               C2825 +
           ((C13122 * C10789 + (C13124 - (C13113 + C13112) + C13125) * C48522) *
                C5057 +
            ((C2360 - (C2349 + C2348) + C2361) * C10789 +
             ((C113 * C2583 + C48388 * C2588) * C718 -
              (C2479 * C48470 + C2478 * C717) +
              (C113 * C2589 + C48388 * C2592) * C48247) *
                 C48522) *
                C48489) *
               C48166) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C305 +
              (C113 * C123 + C48388 * C136) * C48541 -
              (C113 * C308 + C48388 * C318) * C306 -
              (C113 * C319 + C48388 * C338) * C48529 +
              (C113 * C309 + C48388 * C320) * C307 +
              (C113 * C321 + C48388 * C339) * C48502) *
                 C10789 +
             (C12780 + C12781 - C12782 - C12783 + C12784 + C12785) * C48522) *
                C5057 +
            ((C349 + C350 - C392 - C393 + C394 + C395) * C10789 +
             C14775 * C48522) *
                C48489) *
               C2825 +
           (((C392 - (C350 + C349) + C393 - C394 - C395) * C10789 +
             C14776 * C48522) *
                C5057 +
            ((C396 - (C360 + C359) + C397 - C398 - C399) * C10789 +
             (C3717 - (C3718 + C3719) + C3720 - C3721 - C3722) * C48522) *
                C48489) *
               C48166) *
              C3562 +
          ((((C12782 - (C12781 + C12780) + C12783 - C12784 - C12785) * C10789 +
             (C12786 - (C12787 + C12788) + C12789 - C12790 - C12791) * C48522) *
                C5057 +
            (C14776 * C10789 +
             (C12792 - (C12793 + C12794) + C12795 - C12796 - C12797) * C48522) *
                C48489) *
               C2825 +
           ((C14775 * C10789 +
             (C12794 + C12793 - C12792 - C12795 + C12796 + C12797) * C48522) *
                C5057 +
            ((C3719 + C3718 - C3717 - C3720 + C3721 + C3722) * C10789 +
             (C594 * C305 + C595 * C48541 - C2356 * C306 - C2357 * C48529 +
              (C113 * C1425 + C48388 * C1442) * C307 +
              (C113 * C1443 + C48388 * C1452) * C48502) *
                 C48522) *
                C48489) *
               C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C10789 +
             (C11102 + C11103) * C48522) *
                C5057 +
            ((C174 + C175) * C10789 + C11088 * C48522) * C48489) *
               C48547 -
           ((C610 * C48522 + (C177 + C176) * C10789) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C10789) * C5057) *
               C48540 +
           ((C184 * C10789 + C11090 * C48522) * C5057 +
            ((C179 + C178) * C10789 + C858 * C48522) * C48489) *
               C48527 -
           (((C866 + C867) * C48522 + (C181 + C180) * C10789) * C48489 +
            (C11366 * C48522 + C185 * C10789) * C5057) *
               C48506) *
              C3562 +
          (((C11088 * C10789 + C11091 * C48522) * C5057 +
            (C11090 * C10789 + C611 * C48522) * C48489) *
               C48540 -
           ((C11092 * C48522 + C11089 * C10789) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C10789) * C5057) *
               C48547 -
           (((C608 + C609) * C48522 + C11366 * C10789) * C48489 +
            (C11097 * C48522 + C610 * C10789) * C5057) *
               C48527 +
           ((C858 * C10789 + (C609 + C608) * C48522) * C5057 +
            ((C867 + C866) * C10789 + ((C113 * C530 + C48388 * C549) * C114 +
                                       (C113 * C550 + C48388 * C560) * C48184) *
                                          C48522) *
                C48489) *
               C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C10789 +
             (C11102 + C11103) * C48522) *
                C5057 +
            ((C174 + C175) * C10789 + C11088 * C48522) * C48489) *
               C2825 -
           ((C610 * C48522 + (C177 + C176) * C10789) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C10789) * C5057) *
               C48166) *
              C48549 +
          (((C11088 * C10789 + C11091 * C48522) * C5057 +
            (C11090 * C10789 + C611 * C48522) * C48489) *
               C48166 -
           ((C11092 * C48522 + C11089 * C10789) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C10789) * C5057) *
               C2825) *
              C48546 +
          ((((C11105 + C11104) * C10789 + (C12906 + C12907) * C48522) * C5057 +
            (C11091 * C10789 + C13256 * C48522) * C48489) *
               C2825 -
           (((C2483 + C2482) * C48522 + C11097 * C10789) * C48489 +
            (C13257 * C48522 + C11092 * C10789) * C5057) *
               C48166) *
              C48537 +
          (((C13256 * C10789 + (C12909 + C12908) * C48522) * C5057 +
            ((C2482 + C2483) * C10789 +
             ((C113 * C2172 + C48388 * C2183) * C114 +
              (C113 * C2184 + C48388 * C2190) * C48184) *
                 C48522) *
                C48489) *
               C48166 -
           (((C12908 + C12909) * C48522 + C13257 * C10789) * C48489 +
            ((C12910 + C12911) * C48522 + (C12907 + C12906) * C10789) * C5057) *
               C2825) *
              C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C10789 +
             (C11102 + C11103) * C48522) *
                C5057 +
            ((C174 + C175) * C10789 + C11088 * C48522) * C48489) *
               C48161 -
           ((C610 * C48522 + (C177 + C176) * C10789) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C10789) * C5057) *
               C48169 +
           ((C184 * C10789 + C11090 * C48522) * C5057 +
            ((C179 + C178) * C10789 + C858 * C48522) * C48489) *
               C3124) *
              C48285 +
          (((C11088 * C10789 + C11091 * C48522) * C5057 +
            (C11090 * C10789 + C611 * C48522) * C48489) *
               C48169 -
           ((C11092 * C48522 + C11089 * C10789) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C10789) * C5057) *
               C48161 -
           (((C608 + C609) * C48522 + C11366 * C10789) * C48489 +
            (C11097 * C48522 + C610 * C10789) * C5057) *
               C3124) *
              C48292 +
          ((((C11105 + C11104) * C10789 + (C12906 + C12907) * C48522) * C5057 +
            (C11091 * C10789 + C13256 * C48522) * C48489) *
               C48161 -
           (((C2483 + C2482) * C48522 + C11097 * C10789) * C48489 +
            (C13257 * C48522 + C11092 * C10789) * C5057) *
               C48169 +
           ((C611 * C10789 + (C2482 + C2483) * C48522) * C5057 +
            ((C609 + C608) * C10789 +
             ((C113 * C2463 + C48388 * C2464) * C114 +
              (C113 * C2465 + C48388 * C2466) * C48184) *
                 C48522) *
                C48489) *
               C3124) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C10789 +
             (C11102 + C11103) * C48522) *
                C5057 +
            ((C174 + C175) * C10789 + C11088 * C48522) * C48489) *
               C48547 -
           ((C610 * C48522 + (C177 + C176) * C10789) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C10789) * C5057) *
               C48540 +
           ((C184 * C10789 + C11090 * C48522) * C5057 +
            ((C179 + C178) * C10789 + C858 * C48522) * C48489) *
               C48527 -
           (((C866 + C867) * C48522 + (C181 + C180) * C10789) * C48489 +
            (C11366 * C48522 + C185 * C10789) * C5057) *
               C48506) *
              C3562 +
          (((C11088 * C10789 + C11091 * C48522) * C5057 +
            (C11090 * C10789 + C611 * C48522) * C48489) *
               C48540 -
           ((C11092 * C48522 + C11089 * C10789) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C10789) * C5057) *
               C48547 -
           (((C608 + C609) * C48522 + C11366 * C10789) * C48489 +
            (C11097 * C48522 + C610 * C10789) * C5057) *
               C48527 +
           ((C858 * C10789 + (C609 + C608) * C48522) * C5057 +
            ((C867 + C866) * C10789 + ((C113 * C530 + C48388 * C549) * C114 +
                                       (C113 * C550 + C48388 * C560) * C48184) *
                                          C48522) *
                C48489) *
               C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C305 +
              (C113 * C123 + C48388 * C136) * C48541 -
              (C113 * C308 + C48388 * C318) * C306 -
              (C113 * C319 + C48388 * C338) * C48529 +
              (C113 * C309 + C48388 * C320) * C307 +
              (C113 * C321 + C48388 * C339) * C48502) *
                 C10789 +
             (C12780 + C12781 - C12782 - C12783 + C12784 + C12785) * C48522) *
                C5057 +
            ((C349 + C350 - C392 - C393 + C394 + C395) * C10789 +
             C14775 * C48522) *
                C48489) *
               C2825 +
           (((C392 - (C350 + C349) + C393 - C394 - C395) * C10789 +
             C14776 * C48522) *
                C5057 +
            ((C396 - (C360 + C359) + C397 - C398 - C399) * C10789 +
             (C3717 - (C3718 + C3719) + C3720 - C3721 - C3722) * C48522) *
                C48489) *
               C48166) *
              C3562 +
          ((((C12782 - (C12781 + C12780) + C12783 - C12784 - C12785) * C10789 +
             (C12786 - (C12787 + C12788) + C12789 - C12790 - C12791) * C48522) *
                C5057 +
            (C14776 * C10789 +
             (C12792 - (C12793 + C12794) + C12795 - C12796 - C12797) * C48522) *
                C48489) *
               C2825 +
           ((C14775 * C10789 +
             (C12794 + C12793 - C12792 - C12795 + C12796 + C12797) * C48522) *
                C5057 +
            ((C3719 + C3718 - C3717 - C3720 + C3721 + C3722) * C10789 +
             (C594 * C305 + C595 * C48541 - C2356 * C306 - C2357 * C48529 +
              (C113 * C1425 + C48388 * C1442) * C307 +
              (C113 * C1443 + C48388 * C1452) * C48502) *
                 C48522) *
                C48489) *
               C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C717 +
             (C113 * C123 + C48388 * C136) * C48470 -
             (C113 * C308 + C48388 * C318) * C718 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C10789 +
            (C11098 * C717 + C11099 * C48470 -
             (C113 * C1013 + C48388 * C1018) * C718 -
             (C113 * C1019 + C48388 * C1028) * C48247) *
                C48522) *
               C5057 +
           ((C724 + C725 - C726 - C727) * C10789 +
            (C1037 + C1036 - C1059 - C1060) * C48522) *
               C48489) *
              C713 +
          (((C726 - (C725 + C724) + C727) * C10789 +
            (C1059 - (C1036 + C1037) + C1060) * C48522) *
               C5057 +
           ((C730 - (C729 + C728) + C731) * C10789 + C1066 * C48522) * C48489) *
              C714 +
          ((C750 * C10789 + (C1043 + C1042 - C1061 - C1062) * C48522) * C5057 +
           ((C734 + C733 - C732 - C735) * C10789 +
            (C1046 + C1047 - C1063 - C1064) * C48522) *
               C48489) *
              C715 +
          ((C751 * C10789 + (C1063 - (C1047 + C1046) + C1064) * C48522) *
               C5057 +
           ((C748 - (C737 + C736) + C749) * C10789 +
            ((C113 * C1017 + C48388 * C1026) * C718 -
             (C864 * C48470 + C865 * C717) +
             (C113 * C1027 + C48388 * C1032) * C48247) *
                C48522) *
               C48489) *
              C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1557 +
             (C113 * C123 + C48388 * C136) * C1551 -
             (C113 * C308 + C48388 * C318) * C1558 -
             (C113 * C319 + C48388 * C338) * C1552 +
             (C113 * C309 + C48388 * C320) * C1559 +
             (C113 * C321 + C48388 * C339) * C1553 -
             (C113 * C1283 + C48388 * C1289) * C1560 -
             (C113 * C1290 + C48388 * C1301) * C48512) *
                C10789 +
            (C11098 * C1557 + C11099 * C1551 - C11570 * C1558 - C11571 * C1552 +
             C11980 * C1559 + C11981 * C1553 -
             (C113 * C1865 + C48388 * C1868) * C1560 -
             (C113 * C1869 + C48388 * C1874) * C48512) *
                C48522) *
               C5057 +
           ((C1566 + C1567 - C1568 - C1569 + C1570 + C1571 - C1590 - C1591) *
                C10789 +
            (C12126 + C12127 - C12128 - C12129 + C12130 + C12131 - C12138 -
             C12139) *
                C48522) *
               C48489) *
              C48456 +
          (((C1568 - (C1567 + C1566) + C1569 - C1570 - C1571 + C1590 + C1591) *
                C10789 +
            (C12128 - (C12127 + C12126) + C12129 - C12130 - C12131 + C12138 +
             C12139) *
                C48522) *
               C5057 +
           ((C1578 - (C1577 + C1576) + C1579 - C1580 - C1581 + C1592 + C1593) *
                C10789 +
            (C1054 * C1558 - (C589 * C1551 + C588 * C1557) + C1056 * C1552 -
             C1762 * C1559 - C1763 * C1553 +
             (C113 * C1867 + C48388 * C1872) * C1560 +
             (C113 * C1873 + C48388 * C1876) * C48512) *
                C48522) *
               C48489) *
              C48166) *
         C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C717 +
              (C113 * C123 + C48388 * C136) * C48470 -
              (C113 * C308 + C48388 * C318) * C718 -
              (C113 * C319 + C48388 * C338) * C48247) *
                 C10789 +
             (C11561 + C11562 - C11575 - C11576) * C48522) *
                C5057 +
            ((C724 + C725 - C726 - C727) * C10789 + C11577 * C48522) * C48489) *
               C302 +
           (((C726 - (C725 + C724) + C727) * C10789 + C11578 * C48522) * C5057 +
            ((C730 - (C729 + C728) + C731) * C10789 + C1066 * C48522) *
                C48489) *
               C303 +
           ((C750 * C10789 + C11579 * C48522) * C5057 +
            ((C734 + C733 - C732 - C735) * C10789 +
             (C1046 + C1047 - C1063 - C1064) * C48522) *
                C48489) *
               C48496) *
              C48471 +
          ((((C11575 - (C11562 + C11561) + C11576) * C10789 +
             ((C113 * C1420 + C48388 * C1432) * C718 -
              (C11100 * C48470 + C11101 * C717) +
              (C113 * C1433 + C48388 * C1447) * C48247) *
                 C48522) *
                C5057 +
            (C11578 * C10789 + (C2358 - (C2343 + C2342) + C2359) * C48522) *
                C48489) *
               C302 +
           ((C11577 * C10789 + (C2342 + C2343 - C2358 - C2359) * C48522) *
                C5057 +
            (C11579 * C10789 + (C2348 + C2349 - C2360 - C2361) * C48522) *
                C48489) *
               C303 +
           ((C1066 * C10789 + (C2360 - (C2349 + C2348) + C2361) * C48522) *
                C5057 +
            ((C1063 - (C1047 + C1046) + C1064) * C10789 +
             ((C113 * C2337 + C48388 * C2338) * C718 -
              (C596 * C48470 + C597 * C717) +
              (C113 * C2339 + C48388 * C2340) * C48247) *
                 C48522) *
                C48489) *
               C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1557 +
             (C113 * C123 + C48388 * C136) * C1551 -
             (C113 * C308 + C48388 * C318) * C1558 -
             (C113 * C319 + C48388 * C338) * C1552 +
             (C113 * C309 + C48388 * C320) * C1559 +
             (C113 * C321 + C48388 * C339) * C1553 -
             (C113 * C1283 + C48388 * C1289) * C1560 -
             (C113 * C1290 + C48388 * C1301) * C48512) *
                C10789 +
            (C12474 + C12475 - C12476 - C12477 + C12478 + C12479 - C12486 -
             C12487) *
                C48522) *
               C5057 +
           ((C1566 + C1567 - C1568 - C1569 + C1570 + C1571 - C1590 - C1591) *
                C10789 +
            (C12126 + C12127 - C12128 - C12129 + C12130 + C12131 - C12138 -
             C12139) *
                C48522) *
               C48489) *
              C48156 * C48471 +
          (((C12476 - (C12475 + C12474) + C12477 - C12478 - C12479 + C12486 +
             C12487) *
                C10789 +
            (C11982 * C1558 - (C11100 * C1551 + C11101 * C1557) +
             C11983 * C1552 - C11984 * C1559 - C11985 * C1553 +
             (C113 * C6381 + C48388 * C6383) * C1560 +
             (C113 * C6384 + C48388 * C6387) * C48512) *
                C48522) *
               C5057 +
           ((C12128 - (C12127 + C12126) + C12129 - C12130 - C12131 + C12138 +
             C12139) *
                C10789 +
            (C2354 * C1558 - (C593 * C1551 + C592 * C1557) + C2355 * C1552 -
             C11986 * C1559 - C11987 * C1553 +
             (C113 * C6382 + C48388 * C6385) * C1560 +
             (C113 * C6386 + C48388 * C6388) * C48512) *
                C48522) *
               C48489) *
              C48156 * C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C305 +
             (C113 * C123 + C48388 * C136) * C48541 -
             (C113 * C308 + C48388 * C318) * C306 -
             (C113 * C319 + C48388 * C338) * C48529 +
             (C113 * C309 + C48388 * C320) * C307 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C10789 +
            ((C113 * C524 + C48388 * C538) * C305 +
             (C113 * C537 + C48388 * C554) * C48541 -
             (C113 * C1013 + C48388 * C1018) * C306 -
             (C113 * C1019 + C48388 * C1028) * C48529 +
             (C113 * C1417 + C48388 * C1426) * C307 +
             (C113 * C1427 + C48388 * C1444) * C48502) *
                C48522) *
               C5057 +
           ((C349 + C350 - C392 - C393 + C394 + C395) * C10789 +
            (C3713 + C3712 - C3711 - C3714 + C3715 + C3716) * C48522) *
               C48489) *
              C302 +
          (((C392 - (C350 + C349) + C393 - C394 - C395) * C10789 +
            (C3711 - (C3712 + C3713) + C3714 - C3715 - C3716) * C48522) *
               C5057 +
           ((C396 - (C360 + C359) + C397 - C398 - C399) * C10789 +
            (C3717 - (C3718 + C3719) + C3720 - C3721 - C3722) * C48522) *
               C48489) *
              C303 +
          ((C407 * C10789 +
            (C3719 + C3718 - C3717 - C3720 + C3721 + C3722) * C48522) *
               C5057 +
           ((C372 + C371 - C400 - C401 + C402 + C403) * C10789 +
            (C590 * C305 + C591 * C48541 - C1057 * C306 - C1058 * C48529 +
             (C113 * C1739 + C48388 * C1740) * C307 +
             (C113 * C1741 + C48388 * C1742) * C48502) *
                C48522) *
               C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C10789 +
            ((C113 * C524 + C48388 * C538) * C114 +
             (C113 * C537 + C48388 * C554) * C48184) *
                C48522) *
               C5057 +
           ((C174 + C175) * C10789 + (C598 + C599) * C48522) * C48489) *
              C107 -
          ((C610 * C48522 + (C177 + C176) * C10789) * C48489 +
           ((C599 + C598) * C48522 + (C175 + C174) * C10789) * C5057) *
              C108 +
          ((C184 * C10789 + (C600 + C601) * C48522) * C5057 +
           ((C179 + C178) * C10789 + C858 * C48522) * C48489) *
              C109 -
          (((C866 + C867) * C48522 + (C181 + C180) * C10789) * C48489 +
           ((C603 + C602) * C48522 + C185 * C10789) * C5057) *
              C110 +
          ((C186 * C10789 + (C867 + C866) * C48522) * C5057 +
           ((C183 + C182) * C10789 + ((C113 * C853 + C48388 * C854) * C114 +
                                      (C113 * C855 + C48388 * C856) * C48184) *
                                         C48522) *
               C48489) *
              C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C10789 +
             (C11102 + C11103) * C48522) *
                C5057 +
            ((C174 + C175) * C10789 + C11088 * C48522) * C48489) *
               C302 -
           ((C610 * C48522 + (C177 + C176) * C10789) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C10789) * C5057) *
               C303 +
           ((C184 * C10789 + C11090 * C48522) * C5057 +
            ((C179 + C178) * C10789 + C858 * C48522) * C48489) *
               C48496) *
              C48542 +
          (((C11088 * C10789 + C11091 * C48522) * C5057 +
            (C11090 * C10789 + C611 * C48522) * C48489) *
               C303 -
           ((C11092 * C48522 + C11089 * C10789) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C10789) * C5057) *
               C302 -
           (((C608 + C609) * C48522 + (C603 + C602) * C10789) * C48489 +
            (C11097 * C48522 + C610 * C10789) * C5057) *
               C48496) *
              C48531 +
          ((((C11105 + C11104) * C10789 +
             ((C113 * C2169 + C48388 * C2178) * C114 +
              (C113 * C2177 + C48388 * C2187) * C48184) *
                 C48522) *
                C5057 +
            (C11091 * C10789 + (C2480 + C2481) * C48522) * C48489) *
               C302 -
           (((C2483 + C2482) * C48522 + C11097 * C10789) * C48489 +
            ((C2481 + C2480) * C48522 + C11092 * C10789) * C5057) *
               C303 +
           ((C611 * C10789 + (C2482 + C2483) * C48522) * C5057 +
            ((C609 + C608) * C10789 +
             ((C113 * C2463 + C48388 * C2464) * C114 +
              (C113 * C2465 + C48388 * C2466) * C48184) *
                 C48522) *
                C48489) *
               C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1183 +
             (C113 * C123 + C48388 * C136) * C1177 -
             (C113 * C308 + C48388 * C318) * C1184 -
             (C113 * C319 + C48388 * C338) * C1178 +
             (C113 * C309 + C48388 * C320) * C1185 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C10789 +
            (C11098 * C1183 + C11099 * C1177 - C11570 * C1184 - C11571 * C1178 +
             (C113 * C1417 + C48388 * C1426) * C1185 +
             (C113 * C1427 + C48388 * C1444) * C48502) *
                C48522) *
               C5057 +
           ((C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C10789 +
            (C1746 + C1745 - C1744 - C1747 + C1764 + C1765) * C48522) *
               C48489) *
              C48538 +
          (((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C10789 +
            (C1744 - (C1745 + C1746) + C1747 - C1764 - C1765) * C48522) *
               C5057 +
           ((C1195 - (C1194 + C1193) + C1196 - C1197 - C1198) * C10789 +
            (C1752 - (C1753 + C1754) + C1755 - C1766 - C1767) * C48522) *
               C48489) *
              C48525 +
          ((C1209 * C10789 +
            (C1754 + C1753 - C1752 - C1755 + C1766 + C1767) * C48522) *
               C5057 +
           ((C1201 + C1200 - C1199 - C1202 + C1203 + C1204) * C10789 +
            (C590 * C1183 + C591 * C1177 - C1057 * C1184 - C1058 * C1178 +
             (C113 * C1739 + C48388 * C1740) * C1185 +
             (C113 * C1741 + C48388 * C1742) * C48502) *
                C48522) *
               C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1278 +
            (C113 * C123 + C48388 * C136) * C1272 -
            (C113 * C308 + C48388 * C318) * C1279 -
            (C113 * C319 + C48388 * C338) * C1273 +
            (C113 * C309 + C48388 * C320) * C1280 +
            (C113 * C321 + C48388 * C339) * C1274 -
            (C113 * C1283 + C48388 * C1289) * C1281 -
            (C113 * C1290 + C48388 * C1301) * C1275 +
            (C113 * C1284 + C48388 * C1291) * C1282 +
            (C113 * C1292 + C48388 * C1302) * C1276) *
               C10789 +
           (C11098 * C1278 + C11099 * C1272 - C11570 * C1279 - C11571 * C1273 +
            (C113 * C1417 + C48388 * C1426) * C1280 +
            (C113 * C1427 + C48388 * C1444) * C1274 -
            (C113 * C1865 + C48388 * C1868) * C1281 -
            (C113 * C1869 + C48388 * C1874) * C1275 +
            (C113 * C6867 + C48388 * C6869) * C1282 +
            (C113 * C6870 + C48388 * C6873) * C1276) *
               C48522) *
              C5057 +
          ((C164 * C1278 + C165 * C1272 - C379 * C1279 - C380 * C1273 +
            C381 * C1280 + C382 * C1274 - C1586 * C1281 - C1587 * C1275 +
            (C113 * C1286 + C48388 * C1295) * C1282 +
            (C113 * C1296 + C48388 * C1304) * C1276) *
               C10789 +
           (C586 * C1278 + C587 * C1272 - C1052 * C1279 - C1053 * C1273 +
            C1760 * C1280 + C1761 * C1274 -
            (C113 * C1866 + C48388 * C1870) * C1281 -
            (C113 * C1871 + C48388 * C1875) * C1275 +
            (C113 * C6868 + C48388 * C6871) * C1282 +
            (C113 * C6872 + C48388 * C6874) * C1276) *
               C48522) *
              C48489) *
         C48156 * C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1183 +
             (C113 * C123 + C48388 * C136) * C1177 -
             (C113 * C308 + C48388 * C318) * C1184 -
             (C113 * C319 + C48388 * C338) * C1178 +
             (C113 * C309 + C48388 * C320) * C1185 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C10789 +
            (C11954 + C11955 - C11956 - C11957 + C11988 + C11989) * C48522) *
               C5057 +
           ((C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C10789 +
            (C1746 + C1745 - C1744 - C1747 + C1764 + C1765) * C48522) *
               C48489) *
              C48156 * C48542 +
          (((C11956 - (C11955 + C11954) + C11957 - C11988 - C11989) * C10789 +
            (C11990 - (C11964 + C11965) + C11991 - C11992 - C11993) * C48522) *
               C5057 +
           ((C1744 - (C1745 + C1746) + C1747 - C1764 - C1765) * C10789 +
            (C11972 - (C11973 + C11974) + C11975 - C11994 - C11995) * C48522) *
               C48489) *
              C48156 * C48531 +
          (((C11965 + C11964 - C11990 - C11991 + C11992 + C11993) * C10789 +
            ((C113 * C2169 + C48388 * C2178) * C1183 +
             (C113 * C2177 + C48388 * C2187) * C1177 -
             (C113 * C2581 + C48388 * C2584) * C1184 -
             (C113 * C2585 + C48388 * C2590) * C1178 +
             (C113 * C7735 + C48388 * C7737) * C1185 +
             (C113 * C7738 + C48388 * C7741) * C48502) *
                C48522) *
               C5057 +
           ((C11974 + C11973 - C11972 - C11975 + C11994 + C11995) * C10789 +
            (C2476 * C1183 + C2477 * C1177 -
             (C113 * C2582 + C48388 * C2586) * C1184 -
             (C113 * C2587 + C48388 * C2591) * C1178 +
             (C113 * C7736 + C48388 * C7739) * C1185 +
             (C113 * C7740 + C48388 * C7742) * C48502) *
                C48522) *
               C48489) *
              C48156 * C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C10789 +
             (C11102 + C11103) * C48522) *
                C5057 +
            ((C174 + C175) * C10789 + C11088 * C48522) * C48489) *
               C713 -
           ((C610 * C48522 + (C177 + C176) * C10789) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C10789) * C5057) *
               C714 +
           ((C184 * C10789 + C11090 * C48522) * C5057 +
            ((C179 + C178) * C10789 + C858 * C48522) * C48489) *
               C715 -
           (((C866 + C867) * C48522 + (C181 + C180) * C10789) * C48489 +
            (C11366 * C48522 + C185 * C10789) * C5057) *
               C48506) *
              C48471 +
          (((C11088 * C10789 + C11091 * C48522) * C5057 +
            (C11090 * C10789 + C611 * C48522) * C48489) *
               C714 -
           ((C11092 * C48522 + C11089 * C10789) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C10789) * C5057) *
               C713 -
           (((C608 + C609) * C48522 + C11366 * C10789) * C48489 +
            (C11097 * C48522 + C610 * C10789) * C5057) *
               C715 +
           ((C858 * C10789 + (C609 + C608) * C48522) * C5057 +
            ((C867 + C866) * C10789 + ((C113 * C530 + C48388 * C549) * C114 +
                                       (C113 * C550 + C48388 * C560) * C48184) *
                                          C48522) *
                C48489) *
               C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C1183 +
              (C113 * C123 + C48388 * C136) * C1177 -
              (C113 * C308 + C48388 * C318) * C1184 -
              (C113 * C319 + C48388 * C338) * C1178 +
              (C113 * C309 + C48388 * C320) * C1185 +
              (C113 * C321 + C48388 * C339) * C48502) *
                 C10789 +
             (C11954 + C11955 - C11956 - C11957 + C11988 + C11989) * C48522) *
                C5057 +
            ((C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C10789 +
             C12342 * C48522) *
                C48489) *
               C48456 +
           (((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C10789 +
             C12343 * C48522) *
                C5057 +
            ((C1195 - (C1194 + C1193) + C1196 - C1197 - C1198) * C10789 +
             (C1752 - (C1753 + C1754) + C1755 - C1766 - C1767) * C48522) *
                C48489) *
               C48166) *
              C48471 +
          ((((C11956 - (C11955 + C11954) + C11957 - C11988 - C11989) * C10789 +
             (C11990 - (C11964 + C11965) + C11991 - C11992 - C11993) * C48522) *
                C5057 +
            (C12343 * C10789 +
             (C11972 - (C11973 + C11974) + C11975 - C11994 - C11995) * C48522) *
                C48489) *
               C48456 +
           ((C12342 * C10789 +
             (C11974 + C11973 - C11972 - C11975 + C11994 + C11995) * C48522) *
                C5057 +
            ((C1754 + C1753 - C1752 - C1755 + C1766 + C1767) * C10789 +
             (C594 * C1183 + C595 * C1177 - C2356 * C1184 - C2357 * C1178 +
              (C113 * C1425 + C48388 * C1442) * C1185 +
              (C113 * C1443 + C48388 * C1452) * C48502) *
                 C48522) *
                C48489) *
               C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C10789 +
            ((C113 * C524 + C48388 * C538) * C114 +
             (C113 * C537 + C48388 * C554) * C48184) *
                C48522) *
               C5057 +
           ((C174 + C175) * C10789 + (C598 + C599) * C48522) * C48489) *
              C107 -
          ((C610 * C48522 + (C177 + C176) * C10789) * C48489 +
           ((C599 + C598) * C48522 + (C175 + C174) * C10789) * C5057) *
              C108 +
          ((C184 * C10789 + (C600 + C601) * C48522) * C5057 +
           ((C179 + C178) * C10789 + C858 * C48522) * C48489) *
              C109 -
          (((C866 + C867) * C48522 + (C181 + C180) * C10789) * C48489 +
           ((C603 + C602) * C48522 + C185 * C10789) * C5057) *
              C110 +
          ((C186 * C10789 + (C867 + C866) * C48522) * C5057 +
           ((C183 + C182) * C10789 + ((C113 * C853 + C48388 * C854) * C114 +
                                      (C113 * C855 + C48388 * C856) * C48184) *
                                         C48522) *
               C48489) *
              C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C305 +
             (C113 * C123 + C48388 * C136) * C48541 -
             (C113 * C308 + C48388 * C318) * C306 -
             (C113 * C319 + C48388 * C338) * C48529 +
             (C113 * C309 + C48388 * C320) * C307 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C10789 +
            ((C113 * C524 + C48388 * C538) * C305 +
             (C113 * C537 + C48388 * C554) * C48541 -
             (C113 * C1013 + C48388 * C1018) * C306 -
             (C113 * C1019 + C48388 * C1028) * C48529 +
             (C113 * C1417 + C48388 * C1426) * C307 +
             (C113 * C1427 + C48388 * C1444) * C48502) *
                C48522) *
               C5057 +
           ((C349 + C350 - C392 - C393 + C394 + C395) * C10789 +
            (C3713 + C3712 - C3711 - C3714 + C3715 + C3716) * C48522) *
               C48489) *
              C302 +
          (((C392 - (C350 + C349) + C393 - C394 - C395) * C10789 +
            (C3711 - (C3712 + C3713) + C3714 - C3715 - C3716) * C48522) *
               C5057 +
           ((C396 - (C360 + C359) + C397 - C398 - C399) * C10789 +
            (C3717 - (C3718 + C3719) + C3720 - C3721 - C3722) * C48522) *
               C48489) *
              C303 +
          ((C407 * C10789 +
            (C3719 + C3718 - C3717 - C3720 + C3721 + C3722) * C48522) *
               C5057 +
           ((C372 + C371 - C400 - C401 + C402 + C403) * C10789 +
            (C590 * C305 + C591 * C48541 - C1057 * C306 - C1058 * C48529 +
             (C113 * C1739 + C48388 * C1740) * C307 +
             (C113 * C1741 + C48388 * C1742) * C48502) *
                C48522) *
               C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1183 +
             (C113 * C123 + C48388 * C136) * C1177 -
             (C113 * C308 + C48388 * C318) * C1184 -
             (C113 * C319 + C48388 * C338) * C1178 +
             (C113 * C309 + C48388 * C320) * C1185 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C10789 +
            (C11098 * C1183 + C11099 * C1177 - C11570 * C1184 - C11571 * C1178 +
             (C113 * C1417 + C48388 * C1426) * C1185 +
             (C113 * C1427 + C48388 * C1444) * C48502) *
                C48522) *
               C5057 +
           ((C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C10789 +
            (C1746 + C1745 - C1744 - C1747 + C1764 + C1765) * C48522) *
               C48489) *
              C48538 +
          (((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C10789 +
            (C1744 - (C1745 + C1746) + C1747 - C1764 - C1765) * C48522) *
               C5057 +
           ((C1195 - (C1194 + C1193) + C1196 - C1197 - C1198) * C10789 +
            (C1752 - (C1753 + C1754) + C1755 - C1766 - C1767) * C48522) *
               C48489) *
              C48525 +
          ((C1209 * C10789 +
            (C1754 + C1753 - C1752 - C1755 + C1766 + C1767) * C48522) *
               C5057 +
           ((C1201 + C1200 - C1199 - C1202 + C1203 + C1204) * C10789 +
            (C590 * C1183 + C591 * C1177 - C1057 * C1184 - C1058 * C1178 +
             (C113 * C1739 + C48388 * C1740) * C1185 +
             (C113 * C1741 + C48388 * C1742) * C48502) *
                C48522) *
               C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1278 +
            (C113 * C123 + C48388 * C136) * C1272 -
            (C113 * C308 + C48388 * C318) * C1279 -
            (C113 * C319 + C48388 * C338) * C1273 +
            (C113 * C309 + C48388 * C320) * C1280 +
            (C113 * C321 + C48388 * C339) * C1274 -
            (C113 * C1283 + C48388 * C1289) * C1281 -
            (C113 * C1290 + C48388 * C1301) * C1275 +
            (C113 * C1284 + C48388 * C1291) * C1282 +
            (C113 * C1292 + C48388 * C1302) * C1276) *
               C10789 +
           (C11098 * C1278 + C11099 * C1272 - C11570 * C1279 - C11571 * C1273 +
            (C113 * C1417 + C48388 * C1426) * C1280 +
            (C113 * C1427 + C48388 * C1444) * C1274 -
            (C113 * C1865 + C48388 * C1868) * C1281 -
            (C113 * C1869 + C48388 * C1874) * C1275 +
            (C113 * C6867 + C48388 * C6869) * C1282 +
            (C113 * C6870 + C48388 * C6873) * C1276) *
               C48522) *
              C5057 +
          ((C164 * C1278 + C165 * C1272 - C379 * C1279 - C380 * C1273 +
            C381 * C1280 + C382 * C1274 - C1586 * C1281 - C1587 * C1275 +
            (C113 * C1286 + C48388 * C1295) * C1282 +
            (C113 * C1296 + C48388 * C1304) * C1276) *
               C10789 +
           (C586 * C1278 + C587 * C1272 - C1052 * C1279 - C1053 * C1273 +
            C1760 * C1280 + C1761 * C1274 -
            (C113 * C1866 + C48388 * C1870) * C1281 -
            (C113 * C1871 + C48388 * C1875) * C1275 +
            (C113 * C6868 + C48388 * C6871) * C1282 +
            (C113 * C6872 + C48388 * C6874) * C1276) *
               C48522) *
              C48489) *
         C48156 * C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C47163 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48243 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C47155 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48250 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C47169 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C3121) *
               C48405 * C16530 +
           ((C16567 + C16568) * C47163 + (C16569 + C16570) * C48243 -
            (C16761 + C16762) * C47155 - (C16763 + C16764) * C48250 +
            (C16765 + C16766) * C47169 + (C16767 + C16768) * C3121) *
               C48405 * C48489) *
              C48161 +
          (((C16762 + C16761) * C47155 -
            ((C16570 + C16569) * C48243 + (C16568 + C16567) * C47163) +
            (C16764 + C16763) * C48250 - (C16766 + C16765) * C47169 -
            (C16768 + C16767) * C3121) *
               C48405 * C16530 +
           ((C16769 + C16770) * C47155 -
            ((C16571 + C16572) * C48243 + (C16573 + C16574) * C47163) +
            (C16771 + C16772) * C48250 - (C16773 + C16774) * C47169 -
            (C16775 + C16776) * C3121) *
               C48405 * C48489) *
              C48169 +
          (((C16574 + C16573) * C47163 + (C16572 + C16571) * C48243 -
            (C16770 + C16769) * C47155 - (C16772 + C16771) * C48250 +
            (C16774 + C16773) * C47169 + (C16776 + C16775) * C3121) *
               C48405 * C16530 +
           ((C16575 + C16576) * C47163 + (C16577 + C16578) * C48243 -
            (C17109 + C17110) * C47155 - (C17111 + C17112) * C48250 +
            (C16532 * C315 + C16528 * C332 + C16533 * C1561 + C48520 * C1562) *
                C47169 +
            (C16532 * C333 + C16528 * C345 + C16533 * C1563 + C48520 * C1564) *
                C3121) *
               C48405 * C48489) *
              C3124) *
         C48202) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C47163 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48243 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C47155 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48250 +
             (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                 C47169 +
             (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                 C3121) *
                C48405 * C16530 +
            ((C16567 + C16568) * C47163 + (C16569 + C16570) * C48243 -
             (C16761 + C16762) * C47155 - (C16763 + C16764) * C48250 +
             (C16765 + C16766) * C47169 + (C16767 + C16768) * C3121) *
                C48405 * C48489) *
               C2825 +
           (((C16762 + C16761) * C47155 -
             ((C16570 + C16569) * C48243 + (C16568 + C16567) * C47163) +
             (C16764 + C16763) * C48250 - (C16766 + C16765) * C47169 -
             (C16768 + C16767) * C3121) *
                C48405 * C16530 +
            ((C16769 + C16770) * C47155 -
             ((C16571 + C16572) * C48243 + (C16573 + C16574) * C47163) +
             (C16771 + C16772) * C48250 - (C16773 + C16774) * C47169 -
             (C16775 + C16776) * C3121) *
                C48405 * C48489) *
               C48166) *
              C48471 +
          ((((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
              C48520 * C1426) *
                 C47155 -
             ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 +
               C16528 * C554) *
                  C48243 +
              (C16533 * C1013 + C48520 * C1018 + C16532 * C524 +
               C16528 * C538) *
                  C47163) +
             (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
              C48520 * C1444) *
                 C48250 -
             (C16533 * C1865 + C48520 * C1868 + C16532 * C1417 +
              C16528 * C1426) *
                 C47169 -
             (C16533 * C1869 + C48520 * C1874 + C16532 * C1427 +
              C16528 * C1444) *
                 C3121) *
                C48405 * C16530 +
            ((C17465 + C17466) * C47155 -
             ((C16958 + C16957) * C48243 + (C16956 + C16955) * C47163) +
             (C17467 + C17468) * C48250 - (C18191 + C18192) * C47169 -
             (C18193 + C18194) * C3121) *
                C48405 * C48489) *
               C2825 +
           (((C16955 + C16956) * C47163 + (C16957 + C16958) * C48243 -
             (C17466 + C17465) * C47155 - (C17468 + C17467) * C48250 +
             (C18192 + C18191) * C47169 + (C18194 + C18193) * C3121) *
                C48405 * C16530 +
            ((C16959 + C16960) * C47163 + (C16961 + C16962) * C48243 -
             (C17469 + C17470) * C47155 - (C17471 + C17472) * C48250 +
             (C16532 * C1419 + C16528 * C1430 + C16533 * C1867 +
              C48520 * C1872) *
                 C47169 +
             (C16532 * C1431 + C16528 * C1446 + C16533 * C1873 +
              C48520 * C1876) *
                 C3121) *
                C48405 * C48489) *
               C48166) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C2827 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48548 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C2828 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48544 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C2829 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48534 -
            (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 +
             C16528 * C1289) *
                C2830 -
            (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 +
             C16528 * C1301) *
                C48512) *
               C48405 * C16530 +
           ((C16567 + C16568) * C2827 + (C16569 + C16570) * C48548 -
            (C16761 + C16762) * C2828 - (C16763 + C16764) * C48544 +
            (C16765 + C16766) * C2829 + (C16767 + C16768) * C48534 -
            (C17985 + C17986) * C2830 - (C17987 + C17988) * C48512) *
               C48405 * C48489) *
              C2825 +
          (((C16762 + C16761) * C2828 -
            ((C16570 + C16569) * C48548 + (C16568 + C16567) * C2827) +
            (C16764 + C16763) * C48544 - (C16766 + C16765) * C2829 -
            (C16768 + C16767) * C48534 + (C17986 + C17985) * C2830 +
            (C17988 + C17987) * C48512) *
               C48405 * C16530 +
           ((C16769 + C16770) * C2828 -
            ((C16571 + C16572) * C48548 + (C16573 + C16574) * C2827) +
            (C16771 + C16772) * C48544 - (C16773 + C16774) * C2829 -
            (C16775 + C16776) * C48534 +
            (C16532 * C1287 + C16528 * C1297 + C16533 * C1288 +
             C48520 * C1299) *
                C2830 +
            (C16532 * C1298 + C16528 * C1305 + C16533 * C1300 +
             C48520 * C1306) *
                C48512) *
               C48405 * C48489) *
              C48166) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C2697 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C2691 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C2698 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48247) *
               C48405 * C16530 +
           ((C16567 + C16568) * C2697 + (C16569 + C16570) * C2691 -
            (C16761 + C16762) * C2698 - (C16763 + C16764) * C48247) *
               C48405 * C48489) *
              C48547 +
          (((C16762 + C16761) * C2698 -
            ((C16570 + C16569) * C2691 + (C16568 + C16567) * C2697) +
            (C16764 + C16763) * C48247) *
               C48405 * C16530 +
           ((C16769 + C16770) * C2698 -
            ((C16571 + C16572) * C2691 + (C16573 + C16574) * C2697) +
            (C16771 + C16772) * C48247) *
               C48405 * C48489) *
              C48540 +
          (((C16574 + C16573) * C2697 + (C16572 + C16571) * C2691 -
            (C16770 + C16769) * C2698 - (C16772 + C16771) * C48247) *
               C48405 * C16530 +
           ((C16575 + C16576) * C2697 + (C16577 + C16578) * C2691 -
            (C17109 + C17110) * C2698 - (C17111 + C17112) * C48247) *
               C48405 * C48489) *
              C48527 +
          (((C17110 + C17109) * C2698 -
            ((C16578 + C16577) * C2691 + (C16576 + C16575) * C2697) +
            (C17112 + C17111) * C48247) *
               C48405 * C16530 +
           ((C16532 * C316 + C16528 * C334 + C16533 * C317 + C48520 * C336) *
                C2698 -
            ((C16579 + C16580) * C2691 + (C16581 + C16582) * C2697) +
            (C16532 * C335 + C16528 * C346 + C16533 * C337 + C48520 * C347) *
                C48247) *
               C48405 * C48489) *
              C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C2697 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C2691 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C2698 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48247) *
                C48405 * C16530 +
            ((C16567 + C16568) * C2697 + (C16569 + C16570) * C2691 -
             (C16761 + C16762) * C2698 - (C16763 + C16764) * C48247) *
                C48405 * C48489) *
               C2825 +
           (((C16762 + C16761) * C2698 -
             ((C16570 + C16569) * C2691 + (C16568 + C16567) * C2697) +
             (C16764 + C16763) * C48247) *
                C48405 * C16530 +
            ((C16769 + C16770) * C2698 -
             ((C16571 + C16572) * C2691 + (C16573 + C16574) * C2697) +
             (C16771 + C16772) * C48247) *
                C48405 * C48489) *
               C48166) *
              C48542 +
          ((((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
              C48520 * C1426) *
                 C2698 -
             ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 +
               C16528 * C554) *
                  C2691 +
              (C16533 * C1013 + C48520 * C1018 + C16532 * C524 +
               C16528 * C538) *
                  C2697) +
             (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
              C48520 * C1444) *
                 C48247) *
                C48405 * C16530 +
            ((C17465 + C17466) * C2698 -
             ((C16958 + C16957) * C2691 + (C16956 + C16955) * C2697) +
             (C17467 + C17468) * C48247) *
                C48405 * C48489) *
               C2825 +
           (((C16955 + C16956) * C2697 + (C16957 + C16958) * C2691 -
             (C17466 + C17465) * C2698 - (C17468 + C17467) * C48247) *
                C48405 * C16530 +
            ((C16959 + C16960) * C2697 + (C16961 + C16962) * C2691 -
             (C17469 + C17470) * C2698 - (C17471 + C17472) * C48247) *
                C48405 * C48489) *
               C48166) *
              C48531 +
          ((((C16532 * C526 + C16528 * C541 + C16533 * C1420 + C48520 * C1432) *
                 C2697 +
             (C16532 * C542 + C16528 * C556 + C16533 * C1433 + C48520 * C1447) *
                 C2691 -
             (C16533 * C1421 + C48520 * C1434 + C16532 * C1420 +
              C16528 * C1432) *
                 C2698 -
             (C16533 * C1435 + C48520 * C1448 + C16532 * C1433 +
              C16528 * C1447) *
                 C48247) *
                C48405 * C16530 +
            ((C16963 + C16964) * C2697 + (C16965 + C16966) * C2691 -
             (C18901 + C18902) * C2698 - (C18903 + C18904) * C48247) *
                C48405 * C48489) *
               C2825 +
           (((C18902 + C18901) * C2698 -
             ((C16966 + C16965) * C2691 + (C16964 + C16963) * C2697) +
             (C18904 + C18903) * C48247) *
                C48405 * C16530 +
            ((C16532 * C1424 + C16528 * C1440 + C16533 * C1425 +
              C48520 * C1442) *
                 C2698 -
             ((C16967 + C16968) * C2691 + (C16969 + C16970) * C2697) +
             (C16532 * C1441 + C16528 * C1451 + C16533 * C1443 +
              C48520 * C1452) *
                 C48247) *
                C48405 * C48489) *
               C48166) *
              C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C2697 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C2691 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C2698 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48247) *
                C48405 * C16530 +
            ((C16567 + C16568) * C2697 + (C16569 + C16570) * C2691 -
             (C16761 + C16762) * C2698 - (C16763 + C16764) * C48247) *
                C48405 * C48489) *
               C48161 +
           (((C16762 + C16761) * C2698 -
             ((C16570 + C16569) * C2691 + (C16568 + C16567) * C2697) +
             (C16764 + C16763) * C48247) *
                C48405 * C16530 +
            ((C16769 + C16770) * C2698 -
             ((C16571 + C16572) * C2691 + (C16573 + C16574) * C2697) +
             (C16771 + C16772) * C48247) *
                C48405 * C48489) *
               C48169 +
           (((C16574 + C16573) * C2697 + (C16572 + C16571) * C2691 -
             (C16770 + C16769) * C2698 - (C16772 + C16771) * C48247) *
                C48405 * C16530 +
            ((C16575 + C16576) * C2697 + (C16577 + C16578) * C2691 -
             (C17109 + C17110) * C2698 - (C17111 + C17112) * C48247) *
                C48405 * C48489) *
               C3124) *
              C48471 +
          ((((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
              C48520 * C1426) *
                 C2698 -
             ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 +
               C16528 * C554) *
                  C2691 +
              (C16533 * C1013 + C48520 * C1018 + C16532 * C524 +
               C16528 * C538) *
                  C2697) +
             (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
              C48520 * C1444) *
                 C48247) *
                C48405 * C16530 +
            ((C17465 + C17466) * C2698 -
             ((C16958 + C16957) * C2691 + (C16956 + C16955) * C2697) +
             (C17467 + C17468) * C48247) *
                C48405 * C48489) *
               C48161 +
           (((C16955 + C16956) * C2697 + (C16957 + C16958) * C2691 -
             (C17466 + C17465) * C2698 - (C17468 + C17467) * C48247) *
                C48405 * C16530 +
            ((C16959 + C16960) * C2697 + (C16961 + C16962) * C2691 -
             (C17469 + C17470) * C2698 - (C17471 + C17472) * C48247) *
                C48405 * C48489) *
               C48169 +
           (((C17470 + C17469) * C2698 -
             ((C16962 + C16961) * C2691 + (C16960 + C16959) * C2697) +
             (C17472 + C17471) * C48247) *
                C48405 * C16530 +
            ((C16532 * C1016 + C16528 * C1024 + C16533 * C1739 +
              C48520 * C1740) *
                 C2698 -
             ((C17251 + C17252) * C2691 + (C17253 + C17254) * C2697) +
             (C16532 * C1025 + C16528 * C1031 + C16533 * C1741 +
              C48520 * C1742) *
                 C48247) *
                C48405 * C48489) *
               C3124) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C2697 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C2691 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C2698 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48247) *
               C48405 * C16530 +
           ((C16567 + C16568) * C2697 + (C16569 + C16570) * C2691 -
            (C16761 + C16762) * C2698 - (C16763 + C16764) * C48247) *
               C48405 * C48489) *
              C48547 +
          (((C16762 + C16761) * C2698 -
            ((C16570 + C16569) * C2691 + (C16568 + C16567) * C2697) +
            (C16764 + C16763) * C48247) *
               C48405 * C16530 +
           ((C16769 + C16770) * C2698 -
            ((C16571 + C16572) * C2691 + (C16573 + C16574) * C2697) +
            (C16771 + C16772) * C48247) *
               C48405 * C48489) *
              C48540 +
          (((C16574 + C16573) * C2697 + (C16572 + C16571) * C2691 -
            (C16770 + C16769) * C2698 - (C16772 + C16771) * C48247) *
               C48405 * C16530 +
           ((C16575 + C16576) * C2697 + (C16577 + C16578) * C2691 -
            (C17109 + C17110) * C2698 - (C17111 + C17112) * C48247) *
               C48405 * C48489) *
              C48527 +
          (((C17110 + C17109) * C2698 -
            ((C16578 + C16577) * C2691 + (C16576 + C16575) * C2697) +
            (C17112 + C17111) * C48247) *
               C48405 * C16530 +
           ((C16532 * C316 + C16528 * C334 + C16533 * C317 + C48520 * C336) *
                C2698 -
            ((C16579 + C16580) * C2691 + (C16581 + C16582) * C2697) +
            (C16532 * C335 + C16528 * C346 + C16533 * C337 + C48520 * C347) *
                C48247) *
               C48405 * C48489) *
              C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C2827 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48548 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C2828 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48544 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C2829 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48534 -
            (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 +
             C16528 * C1289) *
                C2830 -
            (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 +
             C16528 * C1301) *
                C48512) *
               C48405 * C16530 +
           ((C16567 + C16568) * C2827 + (C16569 + C16570) * C48548 -
            (C16761 + C16762) * C2828 - (C16763 + C16764) * C48544 +
            (C16765 + C16766) * C2829 + (C16767 + C16768) * C48534 -
            (C17985 + C17986) * C2830 - (C17987 + C17988) * C48512) *
               C48405 * C48489) *
              C2825 +
          (((C16762 + C16761) * C2828 -
            ((C16570 + C16569) * C48548 + (C16568 + C16567) * C2827) +
            (C16764 + C16763) * C48544 - (C16766 + C16765) * C2829 -
            (C16768 + C16767) * C48534 + (C17986 + C17985) * C2830 +
            (C17988 + C17987) * C48512) *
               C48405 * C16530 +
           ((C16769 + C16770) * C2828 -
            ((C16571 + C16572) * C48548 + (C16573 + C16574) * C2827) +
            (C16771 + C16772) * C48544 - (C16773 + C16774) * C2829 -
            (C16775 + C16776) * C48534 +
            (C16532 * C1287 + C16528 * C1297 + C16533 * C1288 +
             C48520 * C1299) *
                C2830 +
            (C16532 * C1298 + C16528 * C1305 + C16533 * C1300 +
             C48520 * C1306) *
                C48512) *
               C48405 * C48489) *
              C48166) *
         C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C47163 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48243 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C47155 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48250 +
             (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                 C47169 +
             (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                 C3121) *
                C48405 * C16530 +
            ((C16567 + C16568) * C47163 + (C16569 + C16570) * C48243 -
             (C16761 + C16762) * C47155 - (C16763 + C16764) * C48250 +
             (C16765 + C16766) * C47169 + (C16767 + C16768) * C3121) *
                C48405 * C48489) *
               C48456 +
           (((C16762 + C16761) * C47155 -
             ((C16570 + C16569) * C48243 + (C16568 + C16567) * C47163) +
             (C16764 + C16763) * C48250 - (C16766 + C16765) * C47169 -
             (C16768 + C16767) * C3121) *
                C48405 * C16530 +
            ((C16769 + C16770) * C47155 -
             ((C16571 + C16572) * C48243 + (C16573 + C16574) * C47163) +
             (C16771 + C16772) * C48250 - (C16773 + C16774) * C47169 -
             (C16775 + C16776) * C3121) *
                C48405 * C48489) *
               C48166) *
              C3562 +
          ((((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
              C48520 * C1426) *
                 C47155 -
             ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 +
               C16528 * C554) *
                  C48243 +
              (C16533 * C1013 + C48520 * C1018 + C16532 * C524 +
               C16528 * C538) *
                  C47163) +
             (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
              C48520 * C1444) *
                 C48250 -
             (C16533 * C1865 + C48520 * C1868 + C16532 * C1417 +
              C16528 * C1426) *
                 C47169 -
             (C16533 * C1869 + C48520 * C1874 + C16532 * C1427 +
              C16528 * C1444) *
                 C3121) *
                C48405 * C16530 +
            ((C17465 + C17466) * C47155 -
             ((C16958 + C16957) * C48243 + (C16956 + C16955) * C47163) +
             (C17467 + C17468) * C48250 - (C18191 + C18192) * C47169 -
             (C18193 + C18194) * C3121) *
                C48405 * C48489) *
               C48456 +
           (((C16955 + C16956) * C47163 + (C16957 + C16958) * C48243 -
             (C17466 + C17465) * C47155 - (C17468 + C17467) * C48250 +
             (C18192 + C18191) * C47169 + (C18194 + C18193) * C3121) *
                C48405 * C16530 +
            ((C16959 + C16960) * C47163 + (C16961 + C16962) * C48243 -
             (C17469 + C17470) * C47155 - (C17471 + C17472) * C48250 +
             (C16532 * C1419 + C16528 * C1430 + C16533 * C1867 +
              C48520 * C1872) *
                 C47169 +
             (C16532 * C1431 + C16528 * C1446 + C16533 * C1873 +
              C48520 * C1876) *
                 C3121) *
                C48405 * C48489) *
               C48166) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C47163 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48243 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C47155 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48250 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C47169 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C3121) *
               C48405 * C16530 +
           ((C16567 + C16568) * C47163 + (C16569 + C16570) * C48243 -
            (C16761 + C16762) * C47155 - (C16763 + C16764) * C48250 +
            (C16765 + C16766) * C47169 + (C16767 + C16768) * C3121) *
               C48405 * C48489) *
              C48156 * C48285 +
          (((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
             C48520 * C1426) *
                C47155 -
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C48243 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C47163) +
            (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
             C48520 * C1444) *
                C48250 -
            (C16533 * C1865 + C48520 * C1868 + C16532 * C1417 +
             C16528 * C1426) *
                C47169 -
            (C16533 * C1869 + C48520 * C1874 + C16532 * C1427 +
             C16528 * C1444) *
                C3121) *
               C48405 * C16530 +
           ((C17465 + C17466) * C47155 -
            ((C16958 + C16957) * C48243 + (C16956 + C16955) * C47163) +
            (C17467 + C17468) * C48250 - (C18191 + C18192) * C47169 -
            (C18193 + C18194) * C3121) *
               C48405 * C48489) *
              C48156 * C48292 +
          (((C16532 * C526 + C16528 * C541 + C16533 * C1420 + C48520 * C1432) *
                C47163 +
            (C16532 * C542 + C16528 * C556 + C16533 * C1433 + C48520 * C1447) *
                C48243 -
            (C16533 * C1421 + C48520 * C1434 + C16532 * C1420 +
             C16528 * C1432) *
                C47155 -
            (C16533 * C1435 + C48520 * C1448 + C16532 * C1433 +
             C16528 * C1447) *
                C48250 +
            (C16532 * C1421 + C16528 * C1434 + C16533 * C6381 +
             C48520 * C6383) *
                C47169 +
            (C16532 * C1435 + C16528 * C1448 + C16533 * C6384 +
             C48520 * C6387) *
                C3121) *
               C48405 * C16530 +
           ((C16963 + C16964) * C47163 + (C16965 + C16966) * C48243 -
            (C18901 + C18902) * C47155 - (C18903 + C18904) * C48250 +
            (C16532 * C1423 + C16528 * C1438 + C16533 * C6382 +
             C48520 * C6385) *
                C47169 +
            (C16532 * C1439 + C16528 * C1450 + C16533 * C6386 +
             C48520 * C6388) *
                C3121) *
               C48405 * C48489) *
              C48156 * C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C2827 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48548 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C2828 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48544 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C2829 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48534 -
            (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 +
             C16528 * C1289) *
                C2830 -
            (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 +
             C16528 * C1301) *
                C48512) *
               C48405 * C16530 +
           ((C16567 + C16568) * C2827 + (C16569 + C16570) * C48548 -
            (C16761 + C16762) * C2828 - (C16763 + C16764) * C48544 +
            (C16765 + C16766) * C2829 + (C16767 + C16768) * C48534 -
            (C17985 + C17986) * C2830 - (C17987 + C17988) * C48512) *
               C48405 * C48489) *
              C48156 * C3562 +
          (((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
             C48520 * C1426) *
                C2828 -
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C48548 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C2827) +
            (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
             C48520 * C1444) *
                C48544 -
            (C16533 * C1865 + C48520 * C1868 + C16532 * C1417 +
             C16528 * C1426) *
                C2829 -
            (C16533 * C1869 + C48520 * C1874 + C16532 * C1427 +
             C16528 * C1444) *
                C48534 +
            (C16532 * C1865 + C16528 * C1868 + C16533 * C6867 +
             C48520 * C6869) *
                C2830 +
            (C16532 * C1869 + C16528 * C1874 + C16533 * C6870 +
             C48520 * C6873) *
                C48512) *
               C48405 * C16530 +
           ((C17465 + C17466) * C2828 -
            ((C16958 + C16957) * C48548 + (C16956 + C16955) * C2827) +
            (C17467 + C17468) * C48544 - (C18191 + C18192) * C2829 -
            (C18193 + C18194) * C48534 +
            (C16532 * C1866 + C16528 * C1870 + C16533 * C6868 +
             C48520 * C6871) *
                C2830 +
            (C16532 * C1871 + C16528 * C1875 + C16533 * C6872 +
             C48520 * C6874) *
                C48512) *
               C48405 * C48489) *
              C48156 * C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C2697 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C2691 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C2698 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48247) *
                C48405 * C16530 +
            ((C16567 + C16568) * C2697 + (C16569 + C16570) * C2691 -
             (C16761 + C16762) * C2698 - (C16763 + C16764) * C48247) *
                C48405 * C48489) *
               C48538 +
           (((C16762 + C16761) * C2698 -
             ((C16570 + C16569) * C2691 + (C16568 + C16567) * C2697) +
             (C16764 + C16763) * C48247) *
                C48405 * C16530 +
            ((C16769 + C16770) * C2698 -
             ((C16571 + C16572) * C2691 + (C16573 + C16574) * C2697) +
             (C16771 + C16772) * C48247) *
                C48405 * C48489) *
               C48525 +
           (((C16574 + C16573) * C2697 + (C16572 + C16571) * C2691 -
             (C16770 + C16769) * C2698 - (C16772 + C16771) * C48247) *
                C48405 * C16530 +
            ((C16575 + C16576) * C2697 + (C16577 + C16578) * C2691 -
             (C17109 + C17110) * C2698 - (C17111 + C17112) * C48247) *
                C48405 * C48489) *
               C48496) *
              C3562 +
          ((((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
              C48520 * C1426) *
                 C2698 -
             ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 +
               C16528 * C554) *
                  C2691 +
              (C16533 * C1013 + C48520 * C1018 + C16532 * C524 +
               C16528 * C538) *
                  C2697) +
             (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
              C48520 * C1444) *
                 C48247) *
                C48405 * C16530 +
            ((C17465 + C17466) * C2698 -
             ((C16958 + C16957) * C2691 + (C16956 + C16955) * C2697) +
             (C17467 + C17468) * C48247) *
                C48405 * C48489) *
               C48538 +
           (((C16955 + C16956) * C2697 + (C16957 + C16958) * C2691 -
             (C17466 + C17465) * C2698 - (C17468 + C17467) * C48247) *
                C48405 * C16530 +
            ((C16959 + C16960) * C2697 + (C16961 + C16962) * C2691 -
             (C17469 + C17470) * C2698 - (C17471 + C17472) * C48247) *
                C48405 * C48489) *
               C48525 +
           (((C17470 + C17469) * C2698 -
             ((C16962 + C16961) * C2691 + (C16960 + C16959) * C2697) +
             (C17472 + C17471) * C48247) *
                C48405 * C16530 +
            ((C16532 * C1016 + C16528 * C1024 + C16533 * C1739 +
              C48520 * C1740) *
                 C2698 -
             ((C17251 + C17252) * C2691 + (C17253 + C17254) * C2697) +
             (C16532 * C1025 + C16528 * C1031 + C16533 * C1741 +
              C48520 * C1742) *
                 C48247) *
                C48405 * C48489) *
               C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C2697 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C2691 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C2698 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48247) *
               C48405 * C16530 +
           ((C16567 + C16568) * C2697 + (C16569 + C16570) * C2691 -
            (C16761 + C16762) * C2698 - (C16763 + C16764) * C48247) *
               C48405 * C48489) *
              C48156 * C48549 +
          (((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
             C48520 * C1426) *
                C2698 -
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C2691 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C2697) +
            (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
             C48520 * C1444) *
                C48247) *
               C48405 * C16530 +
           ((C17465 + C17466) * C2698 -
            ((C16958 + C16957) * C2691 + (C16956 + C16955) * C2697) +
            (C17467 + C17468) * C48247) *
               C48405 * C48489) *
              C48156 * C48546 +
          (((C16532 * C526 + C16528 * C541 + C16533 * C1420 + C48520 * C1432) *
                C2697 +
            (C16532 * C542 + C16528 * C556 + C16533 * C1433 + C48520 * C1447) *
                C2691 -
            (C16533 * C1421 + C48520 * C1434 + C16532 * C1420 +
             C16528 * C1432) *
                C2698 -
            (C16533 * C1435 + C48520 * C1448 + C16532 * C1433 +
             C16528 * C1447) *
                C48247) *
               C48405 * C16530 +
           ((C16963 + C16964) * C2697 + (C16965 + C16966) * C2691 -
            (C18901 + C18902) * C2698 - (C18903 + C18904) * C48247) *
               C48405 * C48489) *
              C48156 * C48537 +
          (((C16532 * C2581 + C16528 * C2584 + C16533 * C7735 +
             C48520 * C7737) *
                C2698 -
            ((C16533 * C2585 + C48520 * C2590 + C16532 * C2177 +
              C16528 * C2187) *
                 C2691 +
             (C16533 * C2581 + C48520 * C2584 + C16532 * C2169 +
              C16528 * C2178) *
                 C2697) +
            (C16532 * C2585 + C16528 * C2590 + C16533 * C7738 +
             C48520 * C7741) *
                C48247) *
               C48405 * C16530 +
           ((C16532 * C2582 + C16528 * C2586 + C16533 * C7736 +
             C48520 * C7739) *
                C2698 -
            ((C19046 + C19045) * C2691 + (C19044 + C19043) * C2697) +
            (C16532 * C2587 + C16528 * C2591 + C16533 * C7740 +
             C48520 * C7742) *
                C48247) *
               C48405 * C48489) *
              C48156 * C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C2697 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C2691 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C2698 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48247) *
                C48405 * C16530 +
            ((C16567 + C16568) * C2697 + (C16569 + C16570) * C2691 -
             (C16761 + C16762) * C2698 - (C16763 + C16764) * C48247) *
                C48405 * C48489) *
               C48456 +
           (((C16762 + C16761) * C2698 -
             ((C16570 + C16569) * C2691 + (C16568 + C16567) * C2697) +
             (C16764 + C16763) * C48247) *
                C48405 * C16530 +
            ((C16769 + C16770) * C2698 -
             ((C16571 + C16572) * C2691 + (C16573 + C16574) * C2697) +
             (C16771 + C16772) * C48247) *
                C48405 * C48489) *
               C48166) *
              C48285 +
          ((((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
              C48520 * C1426) *
                 C2698 -
             ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 +
               C16528 * C554) *
                  C2691 +
              (C16533 * C1013 + C48520 * C1018 + C16532 * C524 +
               C16528 * C538) *
                  C2697) +
             (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
              C48520 * C1444) *
                 C48247) *
                C48405 * C16530 +
            ((C17465 + C17466) * C2698 -
             ((C16958 + C16957) * C2691 + (C16956 + C16955) * C2697) +
             (C17467 + C17468) * C48247) *
                C48405 * C48489) *
               C48456 +
           (((C16955 + C16956) * C2697 + (C16957 + C16958) * C2691 -
             (C17466 + C17465) * C2698 - (C17468 + C17467) * C48247) *
                C48405 * C16530 +
            ((C16959 + C16960) * C2697 + (C16961 + C16962) * C2691 -
             (C17469 + C17470) * C2698 - (C17471 + C17472) * C48247) *
                C48405 * C48489) *
               C48166) *
              C48292 +
          ((((C16532 * C526 + C16528 * C541 + C16533 * C1420 + C48520 * C1432) *
                 C2697 +
             (C16532 * C542 + C16528 * C556 + C16533 * C1433 + C48520 * C1447) *
                 C2691 -
             (C16533 * C1421 + C48520 * C1434 + C16532 * C1420 +
              C16528 * C1432) *
                 C2698 -
             (C16533 * C1435 + C48520 * C1448 + C16532 * C1433 +
              C16528 * C1447) *
                 C48247) *
                C48405 * C16530 +
            ((C16963 + C16964) * C2697 + (C16965 + C16966) * C2691 -
             (C18901 + C18902) * C2698 - (C18903 + C18904) * C48247) *
                C48405 * C48489) *
               C48456 +
           (((C18902 + C18901) * C2698 -
             ((C16966 + C16965) * C2691 + (C16964 + C16963) * C2697) +
             (C18904 + C18903) * C48247) *
                C48405 * C16530 +
            ((C16532 * C1424 + C16528 * C1440 + C16533 * C1425 +
              C48520 * C1442) *
                 C2698 -
             ((C16967 + C16968) * C2691 + (C16969 + C16970) * C2697) +
             (C16532 * C1441 + C16528 * C1451 + C16533 * C1443 +
              C48520 * C1452) *
                 C48247) *
                C48405 * C48489) *
               C48166) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C2697 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C2691 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C2698 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48247) *
                C48405 * C16530 +
            ((C16567 + C16568) * C2697 + (C16569 + C16570) * C2691 -
             (C16761 + C16762) * C2698 - (C16763 + C16764) * C48247) *
                C48405 * C48489) *
               C48538 +
           (((C16762 + C16761) * C2698 -
             ((C16570 + C16569) * C2691 + (C16568 + C16567) * C2697) +
             (C16764 + C16763) * C48247) *
                C48405 * C16530 +
            ((C16769 + C16770) * C2698 -
             ((C16571 + C16572) * C2691 + (C16573 + C16574) * C2697) +
             (C16771 + C16772) * C48247) *
                C48405 * C48489) *
               C48525 +
           (((C16574 + C16573) * C2697 + (C16572 + C16571) * C2691 -
             (C16770 + C16769) * C2698 - (C16772 + C16771) * C48247) *
                C48405 * C16530 +
            ((C16575 + C16576) * C2697 + (C16577 + C16578) * C2691 -
             (C17109 + C17110) * C2698 - (C17111 + C17112) * C48247) *
                C48405 * C48489) *
               C48496) *
              C3562 +
          ((((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
              C48520 * C1426) *
                 C2698 -
             ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 +
               C16528 * C554) *
                  C2691 +
              (C16533 * C1013 + C48520 * C1018 + C16532 * C524 +
               C16528 * C538) *
                  C2697) +
             (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
              C48520 * C1444) *
                 C48247) *
                C48405 * C16530 +
            ((C17465 + C17466) * C2698 -
             ((C16958 + C16957) * C2691 + (C16956 + C16955) * C2697) +
             (C17467 + C17468) * C48247) *
                C48405 * C48489) *
               C48538 +
           (((C16955 + C16956) * C2697 + (C16957 + C16958) * C2691 -
             (C17466 + C17465) * C2698 - (C17468 + C17467) * C48247) *
                C48405 * C16530 +
            ((C16959 + C16960) * C2697 + (C16961 + C16962) * C2691 -
             (C17469 + C17470) * C2698 - (C17471 + C17472) * C48247) *
                C48405 * C48489) *
               C48525 +
           (((C17470 + C17469) * C2698 -
             ((C16962 + C16961) * C2691 + (C16960 + C16959) * C2697) +
             (C17472 + C17471) * C48247) *
                C48405 * C16530 +
            ((C16532 * C1016 + C16528 * C1024 + C16533 * C1739 +
              C48520 * C1740) *
                 C2698 -
             ((C17251 + C17252) * C2691 + (C17253 + C17254) * C2697) +
             (C16532 * C1025 + C16528 * C1031 + C16533 * C1741 +
              C48520 * C1742) *
                 C48247) *
                C48405 * C48489) *
               C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C2827 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48548 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C2828 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48544 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C2829 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48534 -
            (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 +
             C16528 * C1289) *
                C2830 -
            (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 +
             C16528 * C1301) *
                C48512) *
               C48405 * C16530 +
           ((C16567 + C16568) * C2827 + (C16569 + C16570) * C48548 -
            (C16761 + C16762) * C2828 - (C16763 + C16764) * C48544 +
            (C16765 + C16766) * C2829 + (C16767 + C16768) * C48534 -
            (C17985 + C17986) * C2830 - (C17987 + C17988) * C48512) *
               C48405 * C48489) *
              C48156 * C3562 +
          (((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
             C48520 * C1426) *
                C2828 -
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C48548 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C2827) +
            (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
             C48520 * C1444) *
                C48544 -
            (C16533 * C1865 + C48520 * C1868 + C16532 * C1417 +
             C16528 * C1426) *
                C2829 -
            (C16533 * C1869 + C48520 * C1874 + C16532 * C1427 +
             C16528 * C1444) *
                C48534 +
            (C16532 * C1865 + C16528 * C1868 + C16533 * C6867 +
             C48520 * C6869) *
                C2830 +
            (C16532 * C1869 + C16528 * C1874 + C16533 * C6870 +
             C48520 * C6873) *
                C48512) *
               C48405 * C16530 +
           ((C17465 + C17466) * C2828 -
            ((C16958 + C16957) * C48548 + (C16956 + C16955) * C2827) +
            (C17467 + C17468) * C48544 - (C18191 + C18192) * C2829 -
            (C18193 + C18194) * C48534 +
            (C16532 * C1866 + C16528 * C1870 + C16533 * C6868 +
             C48520 * C6871) *
                C2830 +
            (C16532 * C1871 + C16528 * C1875 + C16533 * C6872 +
             C48520 * C6874) *
                C48512) *
               C48405 * C48489) *
              C48156 * C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C1557 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C1551 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C1558 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C1552 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C1559 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C1553 -
            (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 +
             C16528 * C1289) *
                C1560 -
            (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 +
             C16528 * C1301) *
                C48512) *
               C48405 * C16530 +
           ((C16567 + C16568) * C1557 + (C16569 + C16570) * C1551 -
            (C16761 + C16762) * C1558 - (C16763 + C16764) * C1552 +
            (C16765 + C16766) * C1559 + (C16767 + C16768) * C1553 -
            (C17985 + C17986) * C1560 - (C17987 + C17988) * C48512) *
               C48405 * C48489) *
              C48456 +
          (((C16762 + C16761) * C1558 -
            ((C16570 + C16569) * C1551 + (C16568 + C16567) * C1557) +
            (C16764 + C16763) * C1552 - (C16766 + C16765) * C1559 -
            (C16768 + C16767) * C1553 + (C17986 + C17985) * C1560 +
            (C17988 + C17987) * C48512) *
               C48405 * C16530 +
           ((C16769 + C16770) * C1558 -
            ((C16571 + C16572) * C1551 + (C16573 + C16574) * C1557) +
            (C16771 + C16772) * C1552 - (C16773 + C16774) * C1559 -
            (C16775 + C16776) * C1553 +
            (C16532 * C1287 + C16528 * C1297 + C16533 * C1288 +
             C48520 * C1299) *
                C1560 +
            (C16532 * C1298 + C16528 * C1305 + C16533 * C1300 +
             C48520 * C1306) *
                C48512) *
               C48405 * C48489) *
              C48166) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C717 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48470 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C718 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48247) *
               C48405 * C16530 +
           ((C16567 + C16568) * C717 + (C16569 + C16570) * C48470 -
            (C16761 + C16762) * C718 - (C16763 + C16764) * C48247) *
               C48405 * C48489) *
              C713 +
          (((C16762 + C16761) * C718 -
            ((C16570 + C16569) * C48470 + (C16568 + C16567) * C717) +
            (C16764 + C16763) * C48247) *
               C48405 * C16530 +
           ((C16769 + C16770) * C718 -
            ((C16571 + C16572) * C48470 + (C16573 + C16574) * C717) +
            (C16771 + C16772) * C48247) *
               C48405 * C48489) *
              C714 +
          (((C16574 + C16573) * C717 + (C16572 + C16571) * C48470 -
            (C16770 + C16769) * C718 - (C16772 + C16771) * C48247) *
               C48405 * C16530 +
           ((C16575 + C16576) * C717 + (C16577 + C16578) * C48470 -
            (C17109 + C17110) * C718 - (C17111 + C17112) * C48247) *
               C48405 * C48489) *
              C715 +
          (((C17110 + C17109) * C718 -
            ((C16578 + C16577) * C48470 + (C16576 + C16575) * C717) +
            (C17112 + C17111) * C48247) *
               C48405 * C16530 +
           ((C16532 * C316 + C16528 * C334 + C16533 * C317 + C48520 * C336) *
                C718 -
            ((C16579 + C16580) * C48470 + (C16581 + C16582) * C717) +
            (C16532 * C335 + C16528 * C346 + C16533 * C337 + C48520 * C347) *
                C48247) *
               C48405 * C48489) *
              C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C717 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48470 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C718 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48247) *
                C48405 * C16530 +
            ((C16567 + C16568) * C717 + (C16569 + C16570) * C48470 -
             (C16761 + C16762) * C718 - (C16763 + C16764) * C48247) *
                C48405 * C48489) *
               C48456 +
           (((C16762 + C16761) * C718 -
             ((C16570 + C16569) * C48470 + (C16568 + C16567) * C717) +
             (C16764 + C16763) * C48247) *
                C48405 * C16530 +
            ((C16769 + C16770) * C718 -
             ((C16571 + C16572) * C48470 + (C16573 + C16574) * C717) +
             (C16771 + C16772) * C48247) *
                C48405 * C48489) *
               C48166) *
              C1987 +
          ((((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
              C48520 * C1426) *
                 C718 -
             ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 +
               C16528 * C554) *
                  C48470 +
              (C16533 * C1013 + C48520 * C1018 + C16532 * C524 +
               C16528 * C538) *
                  C717) +
             (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
              C48520 * C1444) *
                 C48247) *
                C48405 * C16530 +
            ((C17465 + C17466) * C718 -
             ((C16958 + C16957) * C48470 + (C16956 + C16955) * C717) +
             (C17467 + C17468) * C48247) *
                C48405 * C48489) *
               C48456 +
           (((C16955 + C16956) * C717 + (C16957 + C16958) * C48470 -
             (C17466 + C17465) * C718 - (C17468 + C17467) * C48247) *
                C48405 * C16530 +
            ((C16959 + C16960) * C717 + (C16961 + C16962) * C48470 -
             (C17469 + C17470) * C718 - (C17471 + C17472) * C48247) *
                C48405 * C48489) *
               C48166) *
              C1988 +
          ((((C16532 * C526 + C16528 * C541 + C16533 * C1420 + C48520 * C1432) *
                 C717 +
             (C16532 * C542 + C16528 * C556 + C16533 * C1433 + C48520 * C1447) *
                 C48470 -
             (C16533 * C1421 + C48520 * C1434 + C16532 * C1420 +
              C16528 * C1432) *
                 C718 -
             (C16533 * C1435 + C48520 * C1448 + C16532 * C1433 +
              C16528 * C1447) *
                 C48247) *
                C48405 * C16530 +
            ((C16963 + C16964) * C717 + (C16965 + C16966) * C48470 -
             (C18901 + C18902) * C718 - (C18903 + C18904) * C48247) *
                C48405 * C48489) *
               C48456 +
           (((C18902 + C18901) * C718 -
             ((C16966 + C16965) * C48470 + (C16964 + C16963) * C717) +
             (C18904 + C18903) * C48247) *
                C48405 * C16530 +
            ((C16532 * C1424 + C16528 * C1440 + C16533 * C1425 +
              C48520 * C1442) *
                 C718 -
             ((C16967 + C16968) * C48470 + (C16969 + C16970) * C717) +
             (C16532 * C1441 + C16528 * C1451 + C16533 * C1443 +
              C48520 * C1452) *
                 C48247) *
                C48405 * C48489) *
               C48166) *
              C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C1557 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C1551 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C1558 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C1552 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C1559 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C1553 -
            (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 +
             C16528 * C1289) *
                C1560 -
            (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 +
             C16528 * C1301) *
                C48512) *
               C48405 * C16530 +
           ((C16567 + C16568) * C1557 + (C16569 + C16570) * C1551 -
            (C16761 + C16762) * C1558 - (C16763 + C16764) * C1552 +
            (C16765 + C16766) * C1559 + (C16767 + C16768) * C1553 -
            (C17985 + C17986) * C1560 - (C17987 + C17988) * C48512) *
               C48405 * C48489) *
              C48156 * C48471 +
          (((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
             C48520 * C1426) *
                C1558 -
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C1551 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C1557) +
            (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
             C48520 * C1444) *
                C1552 -
            (C16533 * C1865 + C48520 * C1868 + C16532 * C1417 +
             C16528 * C1426) *
                C1559 -
            (C16533 * C1869 + C48520 * C1874 + C16532 * C1427 +
             C16528 * C1444) *
                C1553 +
            (C16532 * C1865 + C16528 * C1868 + C16533 * C6867 +
             C48520 * C6869) *
                C1560 +
            (C16532 * C1869 + C16528 * C1874 + C16533 * C6870 +
             C48520 * C6873) *
                C48512) *
               C48405 * C16530 +
           ((C17465 + C17466) * C1558 -
            ((C16958 + C16957) * C1551 + (C16956 + C16955) * C1557) +
            (C17467 + C17468) * C1552 - (C18191 + C18192) * C1559 -
            (C18193 + C18194) * C1553 +
            (C16532 * C1866 + C16528 * C1870 + C16533 * C6868 +
             C48520 * C6871) *
                C1560 +
            (C16532 * C1871 + C16528 * C1875 + C16533 * C6872 +
             C48520 * C6874) *
                C48512) *
               C48405 * C48489) *
              C48156 * C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C717 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48470 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C718 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48247) *
                C48405 * C16530 +
            ((C16567 + C16568) * C717 + (C16569 + C16570) * C48470 -
             (C16761 + C16762) * C718 - (C16763 + C16764) * C48247) *
                C48405 * C48489) *
               C302 +
           (((C16762 + C16761) * C718 -
             ((C16570 + C16569) * C48470 + (C16568 + C16567) * C717) +
             (C16764 + C16763) * C48247) *
                C48405 * C16530 +
            ((C16769 + C16770) * C718 -
             ((C16571 + C16572) * C48470 + (C16573 + C16574) * C717) +
             (C16771 + C16772) * C48247) *
                C48405 * C48489) *
               C303 +
           (((C16574 + C16573) * C717 + (C16572 + C16571) * C48470 -
             (C16770 + C16769) * C718 - (C16772 + C16771) * C48247) *
                C48405 * C16530 +
            ((C16575 + C16576) * C717 + (C16577 + C16578) * C48470 -
             (C17109 + C17110) * C718 - (C17111 + C17112) * C48247) *
                C48405 * C48489) *
               C48496) *
              C48471 +
          ((((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
              C48520 * C1426) *
                 C718 -
             ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 +
               C16528 * C554) *
                  C48470 +
              (C16533 * C1013 + C48520 * C1018 + C16532 * C524 +
               C16528 * C538) *
                  C717) +
             (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
              C48520 * C1444) *
                 C48247) *
                C48405 * C16530 +
            ((C17465 + C17466) * C718 -
             ((C16958 + C16957) * C48470 + (C16956 + C16955) * C717) +
             (C17467 + C17468) * C48247) *
                C48405 * C48489) *
               C302 +
           (((C16955 + C16956) * C717 + (C16957 + C16958) * C48470 -
             (C17466 + C17465) * C718 - (C17468 + C17467) * C48247) *
                C48405 * C16530 +
            ((C16959 + C16960) * C717 + (C16961 + C16962) * C48470 -
             (C17469 + C17470) * C718 - (C17471 + C17472) * C48247) *
                C48405 * C48489) *
               C303 +
           (((C17470 + C17469) * C718 -
             ((C16962 + C16961) * C48470 + (C16960 + C16959) * C717) +
             (C17472 + C17471) * C48247) *
                C48405 * C16530 +
            ((C16532 * C1016 + C16528 * C1024 + C16533 * C1739 +
              C48520 * C1740) *
                 C718 -
             ((C17251 + C17252) * C48470 + (C17253 + C17254) * C717) +
             (C16532 * C1025 + C16528 * C1031 + C16533 * C1741 +
              C48520 * C1742) *
                 C48247) *
                C48405 * C48489) *
               C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C717 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48470 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C718 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48247) *
               C48405 * C16530 +
           ((C16567 + C16568) * C717 + (C16569 + C16570) * C48470 -
            (C16761 + C16762) * C718 - (C16763 + C16764) * C48247) *
               C48405 * C48489) *
              C48156 * C2459 +
          (((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
             C48520 * C1426) *
                C718 -
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C48470 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C717) +
            (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
             C48520 * C1444) *
                C48247) *
               C48405 * C16530 +
           ((C17465 + C17466) * C718 -
            ((C16958 + C16957) * C48470 + (C16956 + C16955) * C717) +
            (C17467 + C17468) * C48247) *
               C48405 * C48489) *
              C48156 * C2460 +
          (((C16532 * C526 + C16528 * C541 + C16533 * C1420 + C48520 * C1432) *
                C717 +
            (C16532 * C542 + C16528 * C556 + C16533 * C1433 + C48520 * C1447) *
                C48470 -
            (C16533 * C1421 + C48520 * C1434 + C16532 * C1420 +
             C16528 * C1432) *
                C718 -
            (C16533 * C1435 + C48520 * C1448 + C16532 * C1433 +
             C16528 * C1447) *
                C48247) *
               C48405 * C16530 +
           ((C16963 + C16964) * C717 + (C16965 + C16966) * C48470 -
            (C18901 + C18902) * C718 - (C18903 + C18904) * C48247) *
               C48405 * C48489) *
              C48156 * C2461 +
          (((C16532 * C2581 + C16528 * C2584 + C16533 * C7735 +
             C48520 * C7737) *
                C718 -
            ((C16533 * C2585 + C48520 * C2590 + C16532 * C2177 +
              C16528 * C2187) *
                 C48470 +
             (C16533 * C2581 + C48520 * C2584 + C16532 * C2169 +
              C16528 * C2178) *
                 C717) +
            (C16532 * C2585 + C16528 * C2590 + C16533 * C7738 +
             C48520 * C7741) *
                C48247) *
               C48405 * C16530 +
           ((C16532 * C2582 + C16528 * C2586 + C16533 * C7736 +
             C48520 * C7739) *
                C718 -
            ((C19046 + C19045) * C48470 + (C19044 + C19043) * C717) +
            (C16532 * C2587 + C16528 * C2591 + C16533 * C7740 +
             C48520 * C7742) *
                C48247) *
               C48405 * C48489) *
              C48156 * C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C16532 * C115 + C16528 * C122 + C16533 * C308 +
                 C48520 * C318) *
                    C114 +
                (C16532 * C123 + C16528 * C136 + C16533 * C319 +
                 C48520 * C338) *
                    C48184) *
                   C48405 * C16530 +
               ((C16567 + C16568) * C114 + (C16569 + C16570) * C48184) *
                   C48405 * C48489) *
                  C107 -
              (((C16571 + C16572) * C48184 + (C16573 + C16574) * C114) *
                   C48405 * C48489 +
               ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) *
                   C48405 * C16530) *
                  C108 +
              (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) *
                   C48405 * C16530 +
               ((C16575 + C16576) * C114 + (C16577 + C16578) * C48184) *
                   C48405 * C48489) *
                  C109 -
              (((C16579 + C16580) * C48184 + (C16581 + C16582) * C114) *
                   C48405 * C48489 +
               ((C16578 + C16577) * C48184 + (C16576 + C16575) * C114) *
                   C48405 * C16530) *
                  C110 +
              (((C16582 + C16581) * C114 + (C16580 + C16579) * C48184) *
                   C48405 * C16530 +
               ((C16532 * C120 + C16528 * C133 + C16533 * C719 +
                 C48520 * C720) *
                    C114 +
                (C16532 * C132 + C16528 * C141 + C16533 * C721 +
                 C48520 * C722) *
                    C48184) *
                   C48405 * C48489) *
                  C111) *
             C48202 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C16532 * C115 + C16528 * C122 + C16533 * C308 +
                 C48520 * C318) *
                    C305 +
                (C16532 * C123 + C16528 * C136 + C16533 * C319 +
                 C48520 * C338) *
                    C48541 -
                (C16533 * C309 + C48520 * C320 + C16532 * C308 +
                 C16528 * C318) *
                    C306 -
                (C16533 * C321 + C48520 * C339 + C16532 * C319 +
                 C16528 * C338) *
                    C48529 +
                (C16532 * C309 + C16528 * C320 + C16533 * C1283 +
                 C48520 * C1289) *
                    C307 +
                (C16532 * C321 + C16528 * C339 + C16533 * C1290 +
                 C48520 * C1301) *
                    C48502) *
                   C48405 * C16530 +
               ((C16567 + C16568) * C305 + (C16569 + C16570) * C48541 -
                (C16761 + C16762) * C306 - (C16763 + C16764) * C48529 +
                (C16765 + C16766) * C307 + (C16767 + C16768) * C48502) *
                   C48405 * C48489) *
                  C302 +
              (((C16762 + C16761) * C306 -
                ((C16570 + C16569) * C48541 + (C16568 + C16567) * C305) +
                (C16764 + C16763) * C48529 - (C16766 + C16765) * C307 -
                (C16768 + C16767) * C48502) *
                   C48405 * C16530 +
               ((C16769 + C16770) * C306 -
                ((C16571 + C16572) * C48541 + (C16573 + C16574) * C305) +
                (C16771 + C16772) * C48529 - (C16773 + C16774) * C307 -
                (C16775 + C16776) * C48502) *
                   C48405 * C48489) *
                  C303 +
              (((C16574 + C16573) * C305 + (C16572 + C16571) * C48541 -
                (C16770 + C16769) * C306 - (C16772 + C16771) * C48529 +
                (C16774 + C16773) * C307 + (C16776 + C16775) * C48502) *
                   C48405 * C16530 +
               ((C16575 + C16576) * C305 + (C16577 + C16578) * C48541 -
                (C16533 * C315 + C48520 * C332 + C16532 * C314 +
                 C16528 * C330) *
                    C306 -
                (C16533 * C333 + C48520 * C345 + C16532 * C331 +
                 C16528 * C344) *
                    C48529 +
                (C16532 * C315 + C16528 * C332 + C16533 * C1561 +
                 C48520 * C1562) *
                    C307 +
                (C16532 * C333 + C16528 * C345 + C16533 * C1563 +
                 C48520 * C1564) *
                    C48502) *
                   C48405 * C48489) *
                  C48496) *
             C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C16530 +
            ((C16567 + C16568) * C114 + (C16569 + C16570) * C48184) * C48405 *
                C48489) *
               C302 -
           (((C16571 + C16572) * C48184 + (C16573 + C16574) * C114) * C48405 *
                C48489 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C48405 *
                C16530) *
               C303 +
           (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C48405 *
                C16530 +
            ((C16575 + C16576) * C114 + (C16577 + C16578) * C48184) * C48405 *
                C48489) *
               C48496) *
              C48542 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C48405 *
                C16530 +
            ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48405 *
                C48489) *
               C303 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48405 *
                C48489 +
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C48184 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C114) *
                C48405 * C16530) *
               C302 -
           (((C16533 * C1025 + C48520 * C1031 + C16532 * C536 + C16528 * C553) *
                 C48184 +
             (C16533 * C1016 + C48520 * C1024 + C16532 * C523 + C16528 * C535) *
                 C114) *
                C48405 * C48489 +
            ((C16962 + C16961) * C48184 + (C16960 + C16959) * C114) * C48405 *
                C16530) *
               C48496) *
              C48531 +
          ((((C16532 * C526 + C16528 * C541 + C16533 * C1420 + C48520 * C1432) *
                 C114 +
             (C16532 * C542 + C16528 * C556 + C16533 * C1433 + C48520 * C1447) *
                 C48184) *
                C48405 * C16530 +
            ((C16963 + C16964) * C114 + (C16965 + C16966) * C48184) * C48405 *
                C48489) *
               C302 -
           (((C16967 + C16968) * C48184 + (C16969 + C16970) * C114) * C48405 *
                C48489 +
            ((C16966 + C16965) * C48184 + (C16964 + C16963) * C114) * C48405 *
                C16530) *
               C303 +
           (((C16970 + C16969) * C114 + (C16968 + C16967) * C48184) * C48405 *
                C16530 +
            ((C16532 * C529 + C16528 * C548 + C16533 * C2337 + C48520 * C2338) *
                 C114 +
             (C16532 * C547 + C16528 * C559 + C16533 * C2339 + C48520 * C2340) *
                 C48184) *
                C48405 * C48489) *
               C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C1183 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C1177 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C1184 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C1178 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C1185 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C16530 +
           ((C16567 + C16568) * C1183 + (C16569 + C16570) * C1177 -
            (C16761 + C16762) * C1184 - (C16763 + C16764) * C1178 +
            (C16765 + C16766) * C1185 + (C16767 + C16768) * C48502) *
               C48405 * C48489) *
              C48538 +
          (((C16762 + C16761) * C1184 -
            ((C16570 + C16569) * C1177 + (C16568 + C16567) * C1183) +
            (C16764 + C16763) * C1178 - (C16766 + C16765) * C1185 -
            (C16768 + C16767) * C48502) *
               C48405 * C16530 +
           ((C16769 + C16770) * C1184 -
            ((C16571 + C16572) * C1177 + (C16573 + C16574) * C1183) +
            (C16771 + C16772) * C1178 - (C16773 + C16774) * C1185 -
            (C16775 + C16776) * C48502) *
               C48405 * C48489) *
              C48525 +
          (((C16574 + C16573) * C1183 + (C16572 + C16571) * C1177 -
            (C16770 + C16769) * C1184 - (C16772 + C16771) * C1178 +
            (C16774 + C16773) * C1185 + (C16776 + C16775) * C48502) *
               C48405 * C16530 +
           ((C16575 + C16576) * C1183 + (C16577 + C16578) * C1177 -
            (C17109 + C17110) * C1184 - (C17111 + C17112) * C1178 +
            (C16532 * C315 + C16528 * C332 + C16533 * C1561 + C48520 * C1562) *
                C1185 +
            (C16532 * C333 + C16528 * C345 + C16533 * C1563 + C48520 * C1564) *
                C48502) *
               C48405 * C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
               C1278 +
           (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
               C1272 -
           (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
               C1279 -
           (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
               C1273 +
           (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
               C1280 +
           (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
               C1274 -
           (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 + C16528 * C1289) *
               C1281 -
           (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 + C16528 * C1301) *
               C1275 +
           (C16532 * C1284 + C16528 * C1291 + C16533 * C6227 + C48520 * C6229) *
               C1282 +
           (C16532 * C1292 + C16528 * C1302 + C16533 * C6230 + C48520 * C6233) *
               C1276) *
              C48405 * C16530 +
          ((C16567 + C16568) * C1278 + (C16569 + C16570) * C1272 -
           (C16761 + C16762) * C1279 - (C16763 + C16764) * C1273 +
           (C16765 + C16766) * C1280 + (C16767 + C16768) * C1274 -
           (C16533 * C1286 + C48520 * C1295 + C16532 * C1285 + C16528 * C1293) *
               C1281 -
           (C16533 * C1296 + C48520 * C1304 + C16532 * C1294 + C16528 * C1303) *
               C1275 +
           (C16532 * C1286 + C16528 * C1295 + C16533 * C6228 + C48520 * C6231) *
               C1282 +
           (C16532 * C1296 + C16528 * C1304 + C16533 * C6232 + C48520 * C6234) *
               C1276) *
              C48405 * C48489) *
         C48156 * C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C1183 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C1177 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C1184 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C1178 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C1185 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C16530 +
           ((C16567 + C16568) * C1183 + (C16569 + C16570) * C1177 -
            (C16761 + C16762) * C1184 - (C16763 + C16764) * C1178 +
            (C16765 + C16766) * C1185 + (C16767 + C16768) * C48502) *
               C48405 * C48489) *
              C48156 * C48542 +
          (((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
             C48520 * C1426) *
                C1184 -
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C1177 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C1183) +
            (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
             C48520 * C1444) *
                C1178 -
            (C16533 * C1865 + C48520 * C1868 + C16532 * C1417 +
             C16528 * C1426) *
                C1185 -
            (C16533 * C1869 + C48520 * C1874 + C16532 * C1427 +
             C16528 * C1444) *
                C48502) *
               C48405 * C16530 +
           ((C17465 + C17466) * C1184 -
            ((C16958 + C16957) * C1177 + (C16956 + C16955) * C1183) +
            (C17467 + C17468) * C1178 -
            (C16533 * C1866 + C48520 * C1870 + C16532 * C1418 +
             C16528 * C1428) *
                C1185 -
            (C16533 * C1871 + C48520 * C1875 + C16532 * C1429 +
             C16528 * C1445) *
                C48502) *
               C48405 * C48489) *
              C48156 * C48531 +
          (((C16532 * C526 + C16528 * C541 + C16533 * C1420 + C48520 * C1432) *
                C1183 +
            (C16532 * C542 + C16528 * C556 + C16533 * C1433 + C48520 * C1447) *
                C1177 -
            (C16533 * C1421 + C48520 * C1434 + C16532 * C1420 +
             C16528 * C1432) *
                C1184 -
            (C16533 * C1435 + C48520 * C1448 + C16532 * C1433 +
             C16528 * C1447) *
                C1178 +
            (C16532 * C1421 + C16528 * C1434 + C16533 * C6381 +
             C48520 * C6383) *
                C1185 +
            (C16532 * C1435 + C16528 * C1448 + C16533 * C6384 +
             C48520 * C6387) *
                C48502) *
               C48405 * C16530 +
           ((C16963 + C16964) * C1183 + (C16965 + C16966) * C1177 -
            (C16533 * C1423 + C48520 * C1438 + C16532 * C1422 +
             C16528 * C1436) *
                C1184 -
            (C16533 * C1439 + C48520 * C1450 + C16532 * C1437 +
             C16528 * C1449) *
                C1178 +
            (C16532 * C1423 + C16528 * C1438 + C16533 * C6382 +
             C48520 * C6385) *
                C1185 +
            (C16532 * C1439 + C16528 * C1450 + C16533 * C6386 +
             C48520 * C6388) *
                C48502) *
               C48405 * C48489) *
              C48156 * C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C16530 +
            ((C16567 + C16568) * C114 + (C16569 + C16570) * C48184) * C48405 *
                C48489) *
               C48538 -
           (((C16571 + C16572) * C48184 + (C16573 + C16574) * C114) * C48405 *
                C48489 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C48405 *
                C16530) *
               C48525 +
           (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C48405 *
                C16530 +
            ((C16575 + C16576) * C114 + (C16577 + C16578) * C48184) * C48405 *
                C48489) *
               C48496) *
              C1987 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C48405 *
                C16530 +
            ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48405 *
                C48489) *
               C48525 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48405 *
                C48489 +
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C48184 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C114) *
                C48405 * C16530) *
               C48538 -
           (((C17251 + C17252) * C48184 + (C17253 + C17254) * C114) * C48405 *
                C48489 +
            ((C16962 + C16961) * C48184 + (C16960 + C16959) * C114) * C48405 *
                C16530) *
               C48496) *
              C1988 +
          ((((C16532 * C526 + C16528 * C541 + C16533 * C1420 + C48520 * C1432) *
                 C114 +
             (C16532 * C542 + C16528 * C556 + C16533 * C1433 + C48520 * C1447) *
                 C48184) *
                C48405 * C16530 +
            ((C16963 + C16964) * C114 + (C16965 + C16966) * C48184) * C48405 *
                C48489) *
               C48538 -
           (((C16967 + C16968) * C48184 + (C16969 + C16970) * C114) * C48405 *
                C48489 +
            ((C16966 + C16965) * C48184 + (C16964 + C16963) * C114) * C48405 *
                C16530) *
               C48525 +
           (((C16970 + C16969) * C114 + (C16968 + C16967) * C48184) * C48405 *
                C16530 +
            ((C16532 * C529 + C16528 * C548 + C16533 * C2337 + C48520 * C2338) *
                 C114 +
             (C16532 * C547 + C16528 * C559 + C16533 * C2339 + C48520 * C2340) *
                 C48184) *
                C48405 * C48489) *
               C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C305 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48541 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C306 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48529 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C307 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C16530 +
           ((C16567 + C16568) * C305 + (C16569 + C16570) * C48541 -
            (C16761 + C16762) * C306 - (C16763 + C16764) * C48529 +
            (C16765 + C16766) * C307 + (C16767 + C16768) * C48502) *
               C48405 * C48489) *
              C48156 * C1987 +
          (((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
             C48520 * C1426) *
                C306 -
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C48541 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C305) +
            (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
             C48520 * C1444) *
                C48529 -
            (C16533 * C1865 + C48520 * C1868 + C16532 * C1417 +
             C16528 * C1426) *
                C307 -
            (C16533 * C1869 + C48520 * C1874 + C16532 * C1427 +
             C16528 * C1444) *
                C48502) *
               C48405 * C16530 +
           ((C17465 + C17466) * C306 -
            ((C16958 + C16957) * C48541 + (C16956 + C16955) * C305) +
            (C17467 + C17468) * C48529 - (C18191 + C18192) * C307 -
            (C18193 + C18194) * C48502) *
               C48405 * C48489) *
              C48156 * C1988 +
          (((C16532 * C526 + C16528 * C541 + C16533 * C1420 + C48520 * C1432) *
                C305 +
            (C16532 * C542 + C16528 * C556 + C16533 * C1433 + C48520 * C1447) *
                C48541 -
            (C16533 * C1421 + C48520 * C1434 + C16532 * C1420 +
             C16528 * C1432) *
                C306 -
            (C16533 * C1435 + C48520 * C1448 + C16532 * C1433 +
             C16528 * C1447) *
                C48529 +
            (C16532 * C1421 + C16528 * C1434 + C16533 * C6381 +
             C48520 * C6383) *
                C307 +
            (C16532 * C1435 + C16528 * C1448 + C16533 * C6384 +
             C48520 * C6387) *
                C48502) *
               C48405 * C16530 +
           ((C16963 + C16964) * C305 + (C16965 + C16966) * C48541 -
            (C16533 * C1423 + C48520 * C1438 + C16532 * C1422 +
             C16528 * C1436) *
                C306 -
            (C16533 * C1439 + C48520 * C1450 + C16532 * C1437 +
             C16528 * C1449) *
                C48529 +
            (C16532 * C1423 + C16528 * C1438 + C16533 * C6382 +
             C48520 * C6385) *
                C307 +
            (C16532 * C1439 + C16528 * C1450 + C16533 * C6386 +
             C48520 * C6388) *
                C48502) *
               C48405 * C48489) *
              C48156 * C48505)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C114 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48184) *
               C48405 * C16530 +
           ((C16567 + C16568) * C114 + (C16569 + C16570) * C48184) * C48405 *
               C48489) *
              C48156 * C2162 -
          (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48405 *
               C48489 +
           ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                C48184 +
            (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                C114) *
               C48405 * C16530) *
              C48156 * C2163 +
          (((C16532 * C526 + C16528 * C541 + C16533 * C1420 + C48520 * C1432) *
                C114 +
            (C16532 * C542 + C16528 * C556 + C16533 * C1433 + C48520 * C1447) *
                C48184) *
               C48405 * C16530 +
           ((C16963 + C16964) * C114 + (C16965 + C16966) * C48184) * C48405 *
               C48489) *
              C48156 * C2164 -
          (((C16533 * C2587 + C48520 * C2591 + C16532 * C2175 +
             C16528 * C2186) *
                C48184 +
            (C16533 * C2582 + C48520 * C2586 + C16532 * C2168 +
             C16528 * C2176) *
                C114) *
               C48405 * C48489 +
           ((C16533 * C2585 + C48520 * C2590 + C16532 * C2177 +
             C16528 * C2187) *
                C48184 +
            (C16533 * C2581 + C48520 * C2584 + C16532 * C2169 +
             C16528 * C2178) *
                C114) *
               C48405 * C16530) *
              C48156 * C2165 +
          (((C16532 * C2170 + C16528 * C2179 + C16533 * C7249 +
             C48520 * C7251) *
                C114 +
            (C16532 * C2180 + C16528 * C2188 + C16533 * C7252 +
             C48520 * C7255) *
                C48184) *
               C48405 * C16530 +
           ((C16532 * C2171 + C16528 * C2181 + C16533 * C7250 +
             C48520 * C7253) *
                C114 +
            (C16532 * C2182 + C16528 * C2189 + C16533 * C7254 +
             C48520 * C7256) *
                C48184) *
               C48405 * C48489) *
              C48156 * C2166)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C1183 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C1177 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C1184 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C1178 +
             (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                 C1185 +
             (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                 C48502) *
                C48405 * C16530 +
            ((C16567 + C16568) * C1183 + (C16569 + C16570) * C1177 -
             (C16761 + C16762) * C1184 - (C16763 + C16764) * C1178 +
             (C16765 + C16766) * C1185 + (C16767 + C16768) * C48502) *
                C48405 * C48489) *
               C48456 +
           (((C16762 + C16761) * C1184 -
             ((C16570 + C16569) * C1177 + (C16568 + C16567) * C1183) +
             (C16764 + C16763) * C1178 - (C16766 + C16765) * C1185 -
             (C16768 + C16767) * C48502) *
                C48405 * C16530 +
            ((C16769 + C16770) * C1184 -
             ((C16571 + C16572) * C1177 + (C16573 + C16574) * C1183) +
             (C16771 + C16772) * C1178 - (C16773 + C16774) * C1185 -
             (C16775 + C16776) * C48502) *
                C48405 * C48489) *
               C48166) *
              C48471 +
          ((((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
              C48520 * C1426) *
                 C1184 -
             ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 +
               C16528 * C554) *
                  C1177 +
              (C16533 * C1013 + C48520 * C1018 + C16532 * C524 +
               C16528 * C538) *
                  C1183) +
             (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
              C48520 * C1444) *
                 C1178 -
             (C16533 * C1865 + C48520 * C1868 + C16532 * C1417 +
              C16528 * C1426) *
                 C1185 -
             (C16533 * C1869 + C48520 * C1874 + C16532 * C1427 +
              C16528 * C1444) *
                 C48502) *
                C48405 * C16530 +
            ((C17465 + C17466) * C1184 -
             ((C16958 + C16957) * C1177 + (C16956 + C16955) * C1183) +
             (C17467 + C17468) * C1178 - (C18191 + C18192) * C1185 -
             (C18193 + C18194) * C48502) *
                C48405 * C48489) *
               C48456 +
           (((C16955 + C16956) * C1183 + (C16957 + C16958) * C1177 -
             (C17466 + C17465) * C1184 - (C17468 + C17467) * C1178 +
             (C18192 + C18191) * C1185 + (C18194 + C18193) * C48502) *
                C48405 * C16530 +
            ((C16959 + C16960) * C1183 + (C16961 + C16962) * C1177 -
             (C17469 + C17470) * C1184 - (C17471 + C17472) * C1178 +
             (C16532 * C1419 + C16528 * C1430 + C16533 * C1867 +
              C48520 * C1872) *
                 C1185 +
             (C16532 * C1431 + C16528 * C1446 + C16533 * C1873 +
              C48520 * C1876) *
                 C48502) *
                C48405 * C48489) *
               C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C16530 +
            ((C16567 + C16568) * C114 + (C16569 + C16570) * C48184) * C48405 *
                C48489) *
               C713 -
           (((C16571 + C16572) * C48184 + (C16573 + C16574) * C114) * C48405 *
                C48489 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C48405 *
                C16530) *
               C714 +
           (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C48405 *
                C16530 +
            ((C16575 + C16576) * C114 + (C16577 + C16578) * C48184) * C48405 *
                C48489) *
               C715 -
           (((C16579 + C16580) * C48184 + (C16581 + C16582) * C114) * C48405 *
                C48489 +
            ((C16578 + C16577) * C48184 + (C16576 + C16575) * C114) * C48405 *
                C16530) *
               C48506) *
              C48471 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C48405 *
                C16530 +
            ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48405 *
                C48489) *
               C714 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48405 *
                C48489 +
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C48184 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C114) *
                C48405 * C16530) *
               C713 -
           (((C17251 + C17252) * C48184 + (C17253 + C17254) * C114) * C48405 *
                C48489 +
            ((C16962 + C16961) * C48184 + (C16960 + C16959) * C114) * C48405 *
                C16530) *
               C715 +
           (((C17254 + C17253) * C114 + (C17252 + C17251) * C48184) * C48405 *
                C16530 +
            ((C16532 * C525 + C16528 * C540 + C16533 * C1017 + C48520 * C1026) *
                 C114 +
             (C16532 * C539 + C16528 * C555 + C16533 * C1027 + C48520 * C1032) *
                 C48184) *
                C48405 * C48489) *
               C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C16530 +
            ((C16567 + C16568) * C114 + (C16569 + C16570) * C48184) * C48405 *
                C48489) *
               C48456 -
           (((C16571 + C16572) * C48184 + (C16573 + C16574) * C114) * C48405 *
                C48489 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C48405 *
                C16530) *
               C48166) *
              C2459 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C48405 *
                C16530 +
            ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48405 *
                C48489) *
               C48166 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48405 *
                C48489 +
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C48184 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C114) *
                C48405 * C16530) *
               C48456) *
              C2460 +
          ((((C16532 * C526 + C16528 * C541 + C16533 * C1420 + C48520 * C1432) *
                 C114 +
             (C16532 * C542 + C16528 * C556 + C16533 * C1433 + C48520 * C1447) *
                 C48184) *
                C48405 * C16530 +
            ((C16963 + C16964) * C114 + (C16965 + C16966) * C48184) * C48405 *
                C48489) *
               C48456 -
           (((C16967 + C16968) * C48184 + (C16969 + C16970) * C114) * C48405 *
                C48489 +
            ((C16966 + C16965) * C48184 + (C16964 + C16963) * C114) * C48405 *
                C16530) *
               C48166) *
              C2461 +
          ((((C19043 + C19044) * C114 + (C19045 + C19046) * C48184) * C48405 *
                C16530 +
            ((C16532 * C2167 + C16528 * C2174 + C16533 * C2583 +
              C48520 * C2588) *
                 C114 +
             (C16532 * C2173 + C16528 * C2185 + C16533 * C2589 +
              C48520 * C2592) *
                 C48184) *
                C48405 * C48489) *
               C48166 -
           (((C19046 + C19045) * C48184 + (C19044 + C19043) * C114) * C48405 *
                C48489 +
            ((C16533 * C2585 + C48520 * C2590 + C16532 * C2177 +
              C16528 * C2187) *
                 C48184 +
             (C16533 * C2581 + C48520 * C2584 + C16532 * C2169 +
              C16528 * C2178) *
                 C114) *
                C48405 * C16530) *
               C48456) *
              C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C305 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48541 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C306 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48529 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C307 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C16530 +
           ((C16567 + C16568) * C305 + (C16569 + C16570) * C48541 -
            (C16761 + C16762) * C306 - (C16763 + C16764) * C48529 +
            (C16765 + C16766) * C307 + (C16767 + C16768) * C48502) *
               C48405 * C48489) *
              C302 +
          (((C16762 + C16761) * C306 -
            ((C16570 + C16569) * C48541 + (C16568 + C16567) * C305) +
            (C16764 + C16763) * C48529 - (C16766 + C16765) * C307 -
            (C16768 + C16767) * C48502) *
               C48405 * C16530 +
           ((C16769 + C16770) * C306 -
            ((C16571 + C16572) * C48541 + (C16573 + C16574) * C305) +
            (C16771 + C16772) * C48529 - (C16773 + C16774) * C307 -
            (C16775 + C16776) * C48502) *
               C48405 * C48489) *
              C303 +
          (((C16574 + C16573) * C305 + (C16572 + C16571) * C48541 -
            (C16770 + C16769) * C306 - (C16772 + C16771) * C48529 +
            (C16774 + C16773) * C307 + (C16776 + C16775) * C48502) *
               C48405 * C16530 +
           ((C16575 + C16576) * C305 + (C16577 + C16578) * C48541 -
            (C16533 * C315 + C48520 * C332 + C16532 * C314 + C16528 * C330) *
                C306 -
            (C16533 * C333 + C48520 * C345 + C16532 * C331 + C16528 * C344) *
                C48529 +
            (C16532 * C315 + C16528 * C332 + C16533 * C1561 + C48520 * C1562) *
                C307 +
            (C16532 * C333 + C16528 * C345 + C16533 * C1563 + C48520 * C1564) *
                C48502) *
               C48405 * C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C114 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48184) *
               C48405 * C16530 +
           ((C16567 + C16568) * C114 + (C16569 + C16570) * C48184) * C48405 *
               C48489) *
              C107 -
          (((C16571 + C16572) * C48184 + (C16573 + C16574) * C114) * C48405 *
               C48489 +
           ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C48405 *
               C16530) *
              C108 +
          (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C48405 *
               C16530 +
           ((C16575 + C16576) * C114 + (C16577 + C16578) * C48184) * C48405 *
               C48489) *
              C109 -
          (((C16579 + C16580) * C48184 + (C16581 + C16582) * C114) * C48405 *
               C48489 +
           ((C16578 + C16577) * C48184 + (C16576 + C16575) * C114) * C48405 *
               C16530) *
              C110 +
          (((C16582 + C16581) * C114 + (C16580 + C16579) * C48184) * C48405 *
               C16530 +
           ((C16532 * C120 + C16528 * C133 + C16533 * C719 + C48520 * C720) *
                C114 +
            (C16532 * C132 + C16528 * C141 + C16533 * C721 + C48520 * C722) *
                C48184) *
               C48405 * C48489) *
              C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C1183 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C1177 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C1184 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C1178 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C1185 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C16530 +
           ((C16567 + C16568) * C1183 + (C16569 + C16570) * C1177 -
            (C16761 + C16762) * C1184 - (C16763 + C16764) * C1178 +
            (C16765 + C16766) * C1185 + (C16767 + C16768) * C48502) *
               C48405 * C48489) *
              C48538 +
          (((C16762 + C16761) * C1184 -
            ((C16570 + C16569) * C1177 + (C16568 + C16567) * C1183) +
            (C16764 + C16763) * C1178 - (C16766 + C16765) * C1185 -
            (C16768 + C16767) * C48502) *
               C48405 * C16530 +
           ((C16769 + C16770) * C1184 -
            ((C16571 + C16572) * C1177 + (C16573 + C16574) * C1183) +
            (C16771 + C16772) * C1178 - (C16773 + C16774) * C1185 -
            (C16775 + C16776) * C48502) *
               C48405 * C48489) *
              C48525 +
          (((C16574 + C16573) * C1183 + (C16572 + C16571) * C1177 -
            (C16770 + C16769) * C1184 - (C16772 + C16771) * C1178 +
            (C16774 + C16773) * C1185 + (C16776 + C16775) * C48502) *
               C48405 * C16530 +
           ((C16575 + C16576) * C1183 + (C16577 + C16578) * C1177 -
            (C17109 + C17110) * C1184 - (C17111 + C17112) * C1178 +
            (C16532 * C315 + C16528 * C332 + C16533 * C1561 + C48520 * C1562) *
                C1185 +
            (C16532 * C333 + C16528 * C345 + C16533 * C1563 + C48520 * C1564) *
                C48502) *
               C48405 * C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
               C1278 +
           (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
               C1272 -
           (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
               C1279 -
           (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
               C1273 +
           (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
               C1280 +
           (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
               C1274 -
           (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 + C16528 * C1289) *
               C1281 -
           (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 + C16528 * C1301) *
               C1275 +
           (C16532 * C1284 + C16528 * C1291 + C16533 * C6227 + C48520 * C6229) *
               C1282 +
           (C16532 * C1292 + C16528 * C1302 + C16533 * C6230 + C48520 * C6233) *
               C1276) *
              C48405 * C16530 +
          ((C16567 + C16568) * C1278 + (C16569 + C16570) * C1272 -
           (C16761 + C16762) * C1279 - (C16763 + C16764) * C1273 +
           (C16765 + C16766) * C1280 + (C16767 + C16768) * C1274 -
           (C16533 * C1286 + C48520 * C1295 + C16532 * C1285 + C16528 * C1293) *
               C1281 -
           (C16533 * C1296 + C48520 * C1304 + C16532 * C1294 + C16528 * C1303) *
               C1275 +
           (C16532 * C1286 + C16528 * C1295 + C16533 * C6228 + C48520 * C6231) *
               C1282 +
           (C16532 * C1296 + C16528 * C1304 + C16533 * C6232 + C48520 * C6234) *
               C1276) *
              C48405 * C48489) *
         C48156 * C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C16530 +
            ((C16567 + C16568) * C114 + (C16569 + C16570) * C48184) * C48405 *
                C48489) *
               C48538 -
           (((C16571 + C16572) * C48184 + (C16573 + C16574) * C114) * C48405 *
                C48489 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C48405 *
                C16530) *
               C48525 +
           (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C48405 *
                C16530 +
            ((C16575 + C16576) * C114 + (C16577 + C16578) * C48184) * C48405 *
                C48489) *
               C48496) *
              C1987 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C48405 *
                C16530 +
            ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48405 *
                C48489) *
               C48525 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48405 *
                C48489 +
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C48184 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C114) *
                C48405 * C16530) *
               C48538 -
           (((C17251 + C17252) * C48184 + (C17253 + C17254) * C114) * C48405 *
                C48489 +
            ((C16962 + C16961) * C48184 + (C16960 + C16959) * C114) * C48405 *
                C16530) *
               C48496) *
              C1988 +
          ((((C16532 * C526 + C16528 * C541 + C16533 * C1420 + C48520 * C1432) *
                 C114 +
             (C16532 * C542 + C16528 * C556 + C16533 * C1433 + C48520 * C1447) *
                 C48184) *
                C48405 * C16530 +
            ((C16963 + C16964) * C114 + (C16965 + C16966) * C48184) * C48405 *
                C48489) *
               C48538 -
           (((C16967 + C16968) * C48184 + (C16969 + C16970) * C114) * C48405 *
                C48489 +
            ((C16966 + C16965) * C48184 + (C16964 + C16963) * C114) * C48405 *
                C16530) *
               C48525 +
           (((C16970 + C16969) * C114 + (C16968 + C16967) * C48184) * C48405 *
                C16530 +
            ((C16532 * C529 + C16528 * C548 + C16533 * C2337 + C48520 * C2338) *
                 C114 +
             (C16532 * C547 + C16528 * C559 + C16533 * C2339 + C48520 * C2340) *
                 C48184) *
                C48405 * C48489) *
               C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C305 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48541 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C306 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48529 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C307 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C16530 +
           ((C16567 + C16568) * C305 + (C16569 + C16570) * C48541 -
            (C16761 + C16762) * C306 - (C16763 + C16764) * C48529 +
            (C16765 + C16766) * C307 + (C16767 + C16768) * C48502) *
               C48405 * C48489) *
              C48156 * C1987 +
          (((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
             C48520 * C1426) *
                C306 -
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C48541 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C305) +
            (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
             C48520 * C1444) *
                C48529 -
            (C16533 * C1865 + C48520 * C1868 + C16532 * C1417 +
             C16528 * C1426) *
                C307 -
            (C16533 * C1869 + C48520 * C1874 + C16532 * C1427 +
             C16528 * C1444) *
                C48502) *
               C48405 * C16530 +
           ((C17465 + C17466) * C306 -
            ((C16958 + C16957) * C48541 + (C16956 + C16955) * C305) +
            (C17467 + C17468) * C48529 - (C18191 + C18192) * C307 -
            (C18193 + C18194) * C48502) *
               C48405 * C48489) *
              C48156 * C1988 +
          (((C16532 * C526 + C16528 * C541 + C16533 * C1420 + C48520 * C1432) *
                C305 +
            (C16532 * C542 + C16528 * C556 + C16533 * C1433 + C48520 * C1447) *
                C48541 -
            (C16533 * C1421 + C48520 * C1434 + C16532 * C1420 +
             C16528 * C1432) *
                C306 -
            (C16533 * C1435 + C48520 * C1448 + C16532 * C1433 +
             C16528 * C1447) *
                C48529 +
            (C16532 * C1421 + C16528 * C1434 + C16533 * C6381 +
             C48520 * C6383) *
                C307 +
            (C16532 * C1435 + C16528 * C1448 + C16533 * C6384 +
             C48520 * C6387) *
                C48502) *
               C48405 * C16530 +
           ((C16963 + C16964) * C305 + (C16965 + C16966) * C48541 -
            (C16533 * C1423 + C48520 * C1438 + C16532 * C1422 +
             C16528 * C1436) *
                C306 -
            (C16533 * C1439 + C48520 * C1450 + C16532 * C1437 +
             C16528 * C1449) *
                C48529 +
            (C16532 * C1423 + C16528 * C1438 + C16533 * C6382 +
             C48520 * C6385) *
                C307 +
            (C16532 * C1439 + C16528 * C1450 + C16533 * C6386 +
             C48520 * C6388) *
                C48502) *
               C48405 * C48489) *
              C48156 * C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C717 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48470 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C718 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48247) *
                C48405 * C16530 +
            ((C16567 + C16568) * C717 + (C16569 + C16570) * C48470 -
             (C16761 + C16762) * C718 - (C16763 + C16764) * C48247) *
                C48405 * C48489) *
               C48161 +
           (((C16762 + C16761) * C718 -
             ((C16570 + C16569) * C48470 + (C16568 + C16567) * C717) +
             (C16764 + C16763) * C48247) *
                C48405 * C16530 +
            ((C16769 + C16770) * C718 -
             ((C16571 + C16572) * C48470 + (C16573 + C16574) * C717) +
             (C16771 + C16772) * C48247) *
                C48405 * C48489) *
               C48169 +
           (((C16574 + C16573) * C717 + (C16572 + C16571) * C48470 -
             (C16770 + C16769) * C718 - (C16772 + C16771) * C48247) *
                C48405 * C16530 +
            ((C16575 + C16576) * C717 + (C16577 + C16578) * C48470 -
             (C17109 + C17110) * C718 - (C17111 + C17112) * C48247) *
                C48405 * C48489) *
               C3124) *
              C3562 +
          ((((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
              C48520 * C1426) *
                 C718 -
             ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 +
               C16528 * C554) *
                  C48470 +
              (C16533 * C1013 + C48520 * C1018 + C16532 * C524 +
               C16528 * C538) *
                  C717) +
             (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
              C48520 * C1444) *
                 C48247) *
                C48405 * C16530 +
            ((C17465 + C17466) * C718 -
             ((C16958 + C16957) * C48470 + (C16956 + C16955) * C717) +
             (C17467 + C17468) * C48247) *
                C48405 * C48489) *
               C48161 +
           (((C16955 + C16956) * C717 + (C16957 + C16958) * C48470 -
             (C17466 + C17465) * C718 - (C17468 + C17467) * C48247) *
                C48405 * C16530 +
            ((C16959 + C16960) * C717 + (C16961 + C16962) * C48470 -
             (C17469 + C17470) * C718 - (C17471 + C17472) * C48247) *
                C48405 * C48489) *
               C48169 +
           (((C17470 + C17469) * C718 -
             ((C16962 + C16961) * C48470 + (C16960 + C16959) * C717) +
             (C17472 + C17471) * C48247) *
                C48405 * C16530 +
            ((C16532 * C1016 + C16528 * C1024 + C16533 * C1739 +
              C48520 * C1740) *
                 C718 -
             ((C17251 + C17252) * C48470 + (C17253 + C17254) * C717) +
             (C16532 * C1025 + C16528 * C1031 + C16533 * C1741 +
              C48520 * C1742) *
                 C48247) *
                C48405 * C48489) *
               C3124) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C717 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48470 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C718 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48247) *
                C48405 * C16530 +
            ((C16567 + C16568) * C717 + (C16569 + C16570) * C48470 -
             (C16761 + C16762) * C718 - (C16763 + C16764) * C48247) *
                C48405 * C48489) *
               C2825 +
           (((C16762 + C16761) * C718 -
             ((C16570 + C16569) * C48470 + (C16568 + C16567) * C717) +
             (C16764 + C16763) * C48247) *
                C48405 * C16530 +
            ((C16769 + C16770) * C718 -
             ((C16571 + C16572) * C48470 + (C16573 + C16574) * C717) +
             (C16771 + C16772) * C48247) *
                C48405 * C48489) *
               C48166) *
              C48285 +
          ((((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
              C48520 * C1426) *
                 C718 -
             ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 +
               C16528 * C554) *
                  C48470 +
              (C16533 * C1013 + C48520 * C1018 + C16532 * C524 +
               C16528 * C538) *
                  C717) +
             (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
              C48520 * C1444) *
                 C48247) *
                C48405 * C16530 +
            ((C17465 + C17466) * C718 -
             ((C16958 + C16957) * C48470 + (C16956 + C16955) * C717) +
             (C17467 + C17468) * C48247) *
                C48405 * C48489) *
               C2825 +
           (((C16955 + C16956) * C717 + (C16957 + C16958) * C48470 -
             (C17466 + C17465) * C718 - (C17468 + C17467) * C48247) *
                C48405 * C16530 +
            ((C16959 + C16960) * C717 + (C16961 + C16962) * C48470 -
             (C17469 + C17470) * C718 - (C17471 + C17472) * C48247) *
                C48405 * C48489) *
               C48166) *
              C48292 +
          ((((C16532 * C526 + C16528 * C541 + C16533 * C1420 + C48520 * C1432) *
                 C717 +
             (C16532 * C542 + C16528 * C556 + C16533 * C1433 + C48520 * C1447) *
                 C48470 -
             (C16533 * C1421 + C48520 * C1434 + C16532 * C1420 +
              C16528 * C1432) *
                 C718 -
             (C16533 * C1435 + C48520 * C1448 + C16532 * C1433 +
              C16528 * C1447) *
                 C48247) *
                C48405 * C16530 +
            ((C16963 + C16964) * C717 + (C16965 + C16966) * C48470 -
             (C18901 + C18902) * C718 - (C18903 + C18904) * C48247) *
                C48405 * C48489) *
               C2825 +
           (((C18902 + C18901) * C718 -
             ((C16966 + C16965) * C48470 + (C16964 + C16963) * C717) +
             (C18904 + C18903) * C48247) *
                C48405 * C16530 +
            ((C16532 * C1424 + C16528 * C1440 + C16533 * C1425 +
              C48520 * C1442) *
                 C718 -
             ((C16967 + C16968) * C48470 + (C16969 + C16970) * C717) +
             (C16532 * C1441 + C16528 * C1451 + C16533 * C1443 +
              C48520 * C1452) *
                 C48247) *
                C48405 * C48489) *
               C48166) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C305 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48541 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C306 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48529 +
             (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                 C307 +
             (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                 C48502) *
                C48405 * C16530 +
            ((C16567 + C16568) * C305 + (C16569 + C16570) * C48541 -
             (C16761 + C16762) * C306 - (C16763 + C16764) * C48529 +
             (C16765 + C16766) * C307 + (C16767 + C16768) * C48502) *
                C48405 * C48489) *
               C2825 +
           (((C16762 + C16761) * C306 -
             ((C16570 + C16569) * C48541 + (C16568 + C16567) * C305) +
             (C16764 + C16763) * C48529 - (C16766 + C16765) * C307 -
             (C16768 + C16767) * C48502) *
                C48405 * C16530 +
            ((C16769 + C16770) * C306 -
             ((C16571 + C16572) * C48541 + (C16573 + C16574) * C305) +
             (C16771 + C16772) * C48529 - (C16773 + C16774) * C307 -
             (C16775 + C16776) * C48502) *
                C48405 * C48489) *
               C48166) *
              C3562 +
          ((((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
              C48520 * C1426) *
                 C306 -
             ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 +
               C16528 * C554) *
                  C48541 +
              (C16533 * C1013 + C48520 * C1018 + C16532 * C524 +
               C16528 * C538) *
                  C305) +
             (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
              C48520 * C1444) *
                 C48529 -
             (C16533 * C1865 + C48520 * C1868 + C16532 * C1417 +
              C16528 * C1426) *
                 C307 -
             (C16533 * C1869 + C48520 * C1874 + C16532 * C1427 +
              C16528 * C1444) *
                 C48502) *
                C48405 * C16530 +
            ((C17465 + C17466) * C306 -
             ((C16958 + C16957) * C48541 + (C16956 + C16955) * C305) +
             (C17467 + C17468) * C48529 - (C18191 + C18192) * C307 -
             (C18193 + C18194) * C48502) *
                C48405 * C48489) *
               C2825 +
           (((C16955 + C16956) * C305 + (C16957 + C16958) * C48541 -
             (C17466 + C17465) * C306 - (C17468 + C17467) * C48529 +
             (C18192 + C18191) * C307 + (C18194 + C18193) * C48502) *
                C48405 * C16530 +
            ((C16959 + C16960) * C305 + (C16961 + C16962) * C48541 -
             (C17469 + C17470) * C306 - (C17471 + C17472) * C48529 +
             (C16532 * C1419 + C16528 * C1430 + C16533 * C1867 +
              C48520 * C1872) *
                 C307 +
             (C16532 * C1431 + C16528 * C1446 + C16533 * C1873 +
              C48520 * C1876) *
                 C48502) *
                C48405 * C48489) *
               C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C16530 +
            ((C16567 + C16568) * C114 + (C16569 + C16570) * C48184) * C48405 *
                C48489) *
               C48547 -
           (((C16571 + C16572) * C48184 + (C16573 + C16574) * C114) * C48405 *
                C48489 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C48405 *
                C16530) *
               C48540 +
           (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C48405 *
                C16530 +
            ((C16575 + C16576) * C114 + (C16577 + C16578) * C48184) * C48405 *
                C48489) *
               C48527 -
           (((C16579 + C16580) * C48184 + (C16581 + C16582) * C114) * C48405 *
                C48489 +
            ((C16578 + C16577) * C48184 + (C16576 + C16575) * C114) * C48405 *
                C16530) *
               C48506) *
              C3562 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C48405 *
                C16530 +
            ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48405 *
                C48489) *
               C48540 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48405 *
                C48489 +
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C48184 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C114) *
                C48405 * C16530) *
               C48547 -
           (((C17251 + C17252) * C48184 + (C17253 + C17254) * C114) * C48405 *
                C48489 +
            ((C16962 + C16961) * C48184 + (C16960 + C16959) * C114) * C48405 *
                C16530) *
               C48527 +
           (((C17254 + C17253) * C114 + (C17252 + C17251) * C48184) * C48405 *
                C16530 +
            ((C16532 * C525 + C16528 * C540 + C16533 * C1017 + C48520 * C1026) *
                 C114 +
             (C16532 * C539 + C16528 * C555 + C16533 * C1027 + C48520 * C1032) *
                 C48184) *
                C48405 * C48489) *
               C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C16530 +
            ((C16567 + C16568) * C114 + (C16569 + C16570) * C48184) * C48405 *
                C48489) *
               C2825 -
           (((C16571 + C16572) * C48184 + (C16573 + C16574) * C114) * C48405 *
                C48489 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C48405 *
                C16530) *
               C48166) *
              C48549 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C48405 *
                C16530 +
            ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48405 *
                C48489) *
               C48166 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48405 *
                C48489 +
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C48184 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C114) *
                C48405 * C16530) *
               C2825) *
              C48546 +
          ((((C16532 * C526 + C16528 * C541 + C16533 * C1420 + C48520 * C1432) *
                 C114 +
             (C16532 * C542 + C16528 * C556 + C16533 * C1433 + C48520 * C1447) *
                 C48184) *
                C48405 * C16530 +
            ((C16963 + C16964) * C114 + (C16965 + C16966) * C48184) * C48405 *
                C48489) *
               C2825 -
           (((C16967 + C16968) * C48184 + (C16969 + C16970) * C114) * C48405 *
                C48489 +
            ((C16966 + C16965) * C48184 + (C16964 + C16963) * C114) * C48405 *
                C16530) *
               C48166) *
              C48537 +
          ((((C19043 + C19044) * C114 + (C19045 + C19046) * C48184) * C48405 *
                C16530 +
            ((C16532 * C2167 + C16528 * C2174 + C16533 * C2583 +
              C48520 * C2588) *
                 C114 +
             (C16532 * C2173 + C16528 * C2185 + C16533 * C2589 +
              C48520 * C2592) *
                 C48184) *
                C48405 * C48489) *
               C48166 -
           (((C19046 + C19045) * C48184 + (C19044 + C19043) * C114) * C48405 *
                C48489 +
            ((C16533 * C2585 + C48520 * C2590 + C16532 * C2177 +
              C16528 * C2187) *
                 C48184 +
             (C16533 * C2581 + C48520 * C2584 + C16532 * C2169 +
              C16528 * C2178) *
                 C114) *
                C48405 * C16530) *
               C2825) *
              C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C16530 +
            ((C16567 + C16568) * C114 + (C16569 + C16570) * C48184) * C48405 *
                C48489) *
               C48161 -
           (((C16571 + C16572) * C48184 + (C16573 + C16574) * C114) * C48405 *
                C48489 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C48405 *
                C16530) *
               C48169 +
           (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C48405 *
                C16530 +
            ((C16575 + C16576) * C114 + (C16577 + C16578) * C48184) * C48405 *
                C48489) *
               C3124) *
              C48285 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C48405 *
                C16530 +
            ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48405 *
                C48489) *
               C48169 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48405 *
                C48489 +
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C48184 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C114) *
                C48405 * C16530) *
               C48161 -
           (((C17251 + C17252) * C48184 + (C17253 + C17254) * C114) * C48405 *
                C48489 +
            ((C16962 + C16961) * C48184 + (C16960 + C16959) * C114) * C48405 *
                C16530) *
               C3124) *
              C48292 +
          ((((C16532 * C526 + C16528 * C541 + C16533 * C1420 + C48520 * C1432) *
                 C114 +
             (C16532 * C542 + C16528 * C556 + C16533 * C1433 + C48520 * C1447) *
                 C48184) *
                C48405 * C16530 +
            ((C16963 + C16964) * C114 + (C16965 + C16966) * C48184) * C48405 *
                C48489) *
               C48161 -
           (((C16967 + C16968) * C48184 + (C16969 + C16970) * C114) * C48405 *
                C48489 +
            ((C16966 + C16965) * C48184 + (C16964 + C16963) * C114) * C48405 *
                C16530) *
               C48169 +
           (((C16970 + C16969) * C114 + (C16968 + C16967) * C48184) * C48405 *
                C16530 +
            ((C16532 * C529 + C16528 * C548 + C16533 * C2337 + C48520 * C2338) *
                 C114 +
             (C16532 * C547 + C16528 * C559 + C16533 * C2339 + C48520 * C2340) *
                 C48184) *
                C48405 * C48489) *
               C3124) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C16530 +
            ((C16567 + C16568) * C114 + (C16569 + C16570) * C48184) * C48405 *
                C48489) *
               C48547 -
           (((C16571 + C16572) * C48184 + (C16573 + C16574) * C114) * C48405 *
                C48489 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C48405 *
                C16530) *
               C48540 +
           (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C48405 *
                C16530 +
            ((C16575 + C16576) * C114 + (C16577 + C16578) * C48184) * C48405 *
                C48489) *
               C48527 -
           (((C16579 + C16580) * C48184 + (C16581 + C16582) * C114) * C48405 *
                C48489 +
            ((C16578 + C16577) * C48184 + (C16576 + C16575) * C114) * C48405 *
                C16530) *
               C48506) *
              C3562 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C48405 *
                C16530 +
            ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48405 *
                C48489) *
               C48540 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48405 *
                C48489 +
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C48184 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C114) *
                C48405 * C16530) *
               C48547 -
           (((C17251 + C17252) * C48184 + (C17253 + C17254) * C114) * C48405 *
                C48489 +
            ((C16962 + C16961) * C48184 + (C16960 + C16959) * C114) * C48405 *
                C16530) *
               C48527 +
           (((C17254 + C17253) * C114 + (C17252 + C17251) * C48184) * C48405 *
                C16530 +
            ((C16532 * C525 + C16528 * C540 + C16533 * C1017 + C48520 * C1026) *
                 C114 +
             (C16532 * C539 + C16528 * C555 + C16533 * C1027 + C48520 * C1032) *
                 C48184) *
                C48405 * C48489) *
               C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C305 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48541 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C306 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48529 +
             (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                 C307 +
             (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                 C48502) *
                C48405 * C16530 +
            ((C16567 + C16568) * C305 + (C16569 + C16570) * C48541 -
             (C16761 + C16762) * C306 - (C16763 + C16764) * C48529 +
             (C16765 + C16766) * C307 + (C16767 + C16768) * C48502) *
                C48405 * C48489) *
               C2825 +
           (((C16762 + C16761) * C306 -
             ((C16570 + C16569) * C48541 + (C16568 + C16567) * C305) +
             (C16764 + C16763) * C48529 - (C16766 + C16765) * C307 -
             (C16768 + C16767) * C48502) *
                C48405 * C16530 +
            ((C16769 + C16770) * C306 -
             ((C16571 + C16572) * C48541 + (C16573 + C16574) * C305) +
             (C16771 + C16772) * C48529 - (C16773 + C16774) * C307 -
             (C16775 + C16776) * C48502) *
                C48405 * C48489) *
               C48166) *
              C3562 +
          ((((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
              C48520 * C1426) *
                 C306 -
             ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 +
               C16528 * C554) *
                  C48541 +
              (C16533 * C1013 + C48520 * C1018 + C16532 * C524 +
               C16528 * C538) *
                  C305) +
             (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
              C48520 * C1444) *
                 C48529 -
             (C16533 * C1865 + C48520 * C1868 + C16532 * C1417 +
              C16528 * C1426) *
                 C307 -
             (C16533 * C1869 + C48520 * C1874 + C16532 * C1427 +
              C16528 * C1444) *
                 C48502) *
                C48405 * C16530 +
            ((C17465 + C17466) * C306 -
             ((C16958 + C16957) * C48541 + (C16956 + C16955) * C305) +
             (C17467 + C17468) * C48529 - (C18191 + C18192) * C307 -
             (C18193 + C18194) * C48502) *
                C48405 * C48489) *
               C2825 +
           (((C16955 + C16956) * C305 + (C16957 + C16958) * C48541 -
             (C17466 + C17465) * C306 - (C17468 + C17467) * C48529 +
             (C18192 + C18191) * C307 + (C18194 + C18193) * C48502) *
                C48405 * C16530 +
            ((C16959 + C16960) * C305 + (C16961 + C16962) * C48541 -
             (C17469 + C17470) * C306 - (C17471 + C17472) * C48529 +
             (C16532 * C1419 + C16528 * C1430 + C16533 * C1867 +
              C48520 * C1872) *
                 C307 +
             (C16532 * C1431 + C16528 * C1446 + C16533 * C1873 +
              C48520 * C1876) *
                 C48502) *
                C48405 * C48489) *
               C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C717 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48470 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C718 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48247) *
               C48405 * C16530 +
           ((C16567 + C16568) * C717 + (C16569 + C16570) * C48470 -
            (C16761 + C16762) * C718 - (C16763 + C16764) * C48247) *
               C48405 * C48489) *
              C713 +
          (((C16762 + C16761) * C718 -
            ((C16570 + C16569) * C48470 + (C16568 + C16567) * C717) +
            (C16764 + C16763) * C48247) *
               C48405 * C16530 +
           ((C16769 + C16770) * C718 -
            ((C16571 + C16572) * C48470 + (C16573 + C16574) * C717) +
            (C16771 + C16772) * C48247) *
               C48405 * C48489) *
              C714 +
          (((C16574 + C16573) * C717 + (C16572 + C16571) * C48470 -
            (C16770 + C16769) * C718 - (C16772 + C16771) * C48247) *
               C48405 * C16530 +
           ((C16575 + C16576) * C717 + (C16577 + C16578) * C48470 -
            (C17109 + C17110) * C718 - (C17111 + C17112) * C48247) *
               C48405 * C48489) *
              C715 +
          (((C17110 + C17109) * C718 -
            ((C16578 + C16577) * C48470 + (C16576 + C16575) * C717) +
            (C17112 + C17111) * C48247) *
               C48405 * C16530 +
           ((C16532 * C316 + C16528 * C334 + C16533 * C317 + C48520 * C336) *
                C718 -
            ((C16579 + C16580) * C48470 + (C16581 + C16582) * C717) +
            (C16532 * C335 + C16528 * C346 + C16533 * C337 + C48520 * C347) *
                C48247) *
               C48405 * C48489) *
              C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C1557 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C1551 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C1558 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C1552 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C1559 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C1553 -
            (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 +
             C16528 * C1289) *
                C1560 -
            (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 +
             C16528 * C1301) *
                C48512) *
               C48405 * C16530 +
           ((C16567 + C16568) * C1557 + (C16569 + C16570) * C1551 -
            (C16761 + C16762) * C1558 - (C16763 + C16764) * C1552 +
            (C16765 + C16766) * C1559 + (C16767 + C16768) * C1553 -
            (C17985 + C17986) * C1560 - (C17987 + C17988) * C48512) *
               C48405 * C48489) *
              C48456 +
          (((C16762 + C16761) * C1558 -
            ((C16570 + C16569) * C1551 + (C16568 + C16567) * C1557) +
            (C16764 + C16763) * C1552 - (C16766 + C16765) * C1559 -
            (C16768 + C16767) * C1553 + (C17986 + C17985) * C1560 +
            (C17988 + C17987) * C48512) *
               C48405 * C16530 +
           ((C16769 + C16770) * C1558 -
            ((C16571 + C16572) * C1551 + (C16573 + C16574) * C1557) +
            (C16771 + C16772) * C1552 - (C16773 + C16774) * C1559 -
            (C16775 + C16776) * C1553 +
            (C16532 * C1287 + C16528 * C1297 + C16533 * C1288 +
             C48520 * C1299) *
                C1560 +
            (C16532 * C1298 + C16528 * C1305 + C16533 * C1300 +
             C48520 * C1306) *
                C48512) *
               C48405 * C48489) *
              C48166) *
         C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C717 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48470 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C718 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48247) *
                C48405 * C16530 +
            ((C16567 + C16568) * C717 + (C16569 + C16570) * C48470 -
             (C16761 + C16762) * C718 - (C16763 + C16764) * C48247) *
                C48405 * C48489) *
               C302 +
           (((C16762 + C16761) * C718 -
             ((C16570 + C16569) * C48470 + (C16568 + C16567) * C717) +
             (C16764 + C16763) * C48247) *
                C48405 * C16530 +
            ((C16769 + C16770) * C718 -
             ((C16571 + C16572) * C48470 + (C16573 + C16574) * C717) +
             (C16771 + C16772) * C48247) *
                C48405 * C48489) *
               C303 +
           (((C16574 + C16573) * C717 + (C16572 + C16571) * C48470 -
             (C16770 + C16769) * C718 - (C16772 + C16771) * C48247) *
                C48405 * C16530 +
            ((C16575 + C16576) * C717 + (C16577 + C16578) * C48470 -
             (C17109 + C17110) * C718 - (C17111 + C17112) * C48247) *
                C48405 * C48489) *
               C48496) *
              C48471 +
          ((((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
              C48520 * C1426) *
                 C718 -
             ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 +
               C16528 * C554) *
                  C48470 +
              (C16533 * C1013 + C48520 * C1018 + C16532 * C524 +
               C16528 * C538) *
                  C717) +
             (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
              C48520 * C1444) *
                 C48247) *
                C48405 * C16530 +
            ((C17465 + C17466) * C718 -
             ((C16958 + C16957) * C48470 + (C16956 + C16955) * C717) +
             (C17467 + C17468) * C48247) *
                C48405 * C48489) *
               C302 +
           (((C16955 + C16956) * C717 + (C16957 + C16958) * C48470 -
             (C17466 + C17465) * C718 - (C17468 + C17467) * C48247) *
                C48405 * C16530 +
            ((C16959 + C16960) * C717 + (C16961 + C16962) * C48470 -
             (C17469 + C17470) * C718 - (C17471 + C17472) * C48247) *
                C48405 * C48489) *
               C303 +
           (((C17470 + C17469) * C718 -
             ((C16962 + C16961) * C48470 + (C16960 + C16959) * C717) +
             (C17472 + C17471) * C48247) *
                C48405 * C16530 +
            ((C16532 * C1016 + C16528 * C1024 + C16533 * C1739 +
              C48520 * C1740) *
                 C718 -
             ((C17251 + C17252) * C48470 + (C17253 + C17254) * C717) +
             (C16532 * C1025 + C16528 * C1031 + C16533 * C1741 +
              C48520 * C1742) *
                 C48247) *
                C48405 * C48489) *
               C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C1557 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C1551 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C1558 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C1552 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C1559 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C1553 -
            (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 +
             C16528 * C1289) *
                C1560 -
            (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 +
             C16528 * C1301) *
                C48512) *
               C48405 * C16530 +
           ((C16567 + C16568) * C1557 + (C16569 + C16570) * C1551 -
            (C16761 + C16762) * C1558 - (C16763 + C16764) * C1552 +
            (C16765 + C16766) * C1559 + (C16767 + C16768) * C1553 -
            (C17985 + C17986) * C1560 - (C17987 + C17988) * C48512) *
               C48405 * C48489) *
              C48156 * C48471 +
          (((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
             C48520 * C1426) *
                C1558 -
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C1551 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C1557) +
            (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
             C48520 * C1444) *
                C1552 -
            (C16533 * C1865 + C48520 * C1868 + C16532 * C1417 +
             C16528 * C1426) *
                C1559 -
            (C16533 * C1869 + C48520 * C1874 + C16532 * C1427 +
             C16528 * C1444) *
                C1553 +
            (C16532 * C1865 + C16528 * C1868 + C16533 * C6867 +
             C48520 * C6869) *
                C1560 +
            (C16532 * C1869 + C16528 * C1874 + C16533 * C6870 +
             C48520 * C6873) *
                C48512) *
               C48405 * C16530 +
           ((C17465 + C17466) * C1558 -
            ((C16958 + C16957) * C1551 + (C16956 + C16955) * C1557) +
            (C17467 + C17468) * C1552 - (C18191 + C18192) * C1559 -
            (C18193 + C18194) * C1553 +
            (C16532 * C1866 + C16528 * C1870 + C16533 * C6868 +
             C48520 * C6871) *
                C1560 +
            (C16532 * C1871 + C16528 * C1875 + C16533 * C6872 +
             C48520 * C6874) *
                C48512) *
               C48405 * C48489) *
              C48156 * C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C305 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48541 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C306 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48529 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C307 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C16530 +
           ((C16567 + C16568) * C305 + (C16569 + C16570) * C48541 -
            (C16761 + C16762) * C306 - (C16763 + C16764) * C48529 +
            (C16765 + C16766) * C307 + (C16767 + C16768) * C48502) *
               C48405 * C48489) *
              C302 +
          (((C16762 + C16761) * C306 -
            ((C16570 + C16569) * C48541 + (C16568 + C16567) * C305) +
            (C16764 + C16763) * C48529 - (C16766 + C16765) * C307 -
            (C16768 + C16767) * C48502) *
               C48405 * C16530 +
           ((C16769 + C16770) * C306 -
            ((C16571 + C16572) * C48541 + (C16573 + C16574) * C305) +
            (C16771 + C16772) * C48529 - (C16773 + C16774) * C307 -
            (C16775 + C16776) * C48502) *
               C48405 * C48489) *
              C303 +
          (((C16574 + C16573) * C305 + (C16572 + C16571) * C48541 -
            (C16770 + C16769) * C306 - (C16772 + C16771) * C48529 +
            (C16774 + C16773) * C307 + (C16776 + C16775) * C48502) *
               C48405 * C16530 +
           ((C16575 + C16576) * C305 + (C16577 + C16578) * C48541 -
            (C16533 * C315 + C48520 * C332 + C16532 * C314 + C16528 * C330) *
                C306 -
            (C16533 * C333 + C48520 * C345 + C16532 * C331 + C16528 * C344) *
                C48529 +
            (C16532 * C315 + C16528 * C332 + C16533 * C1561 + C48520 * C1562) *
                C307 +
            (C16532 * C333 + C16528 * C345 + C16533 * C1563 + C48520 * C1564) *
                C48502) *
               C48405 * C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C114 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48184) *
               C48405 * C16530 +
           ((C16567 + C16568) * C114 + (C16569 + C16570) * C48184) * C48405 *
               C48489) *
              C107 -
          (((C16571 + C16572) * C48184 + (C16573 + C16574) * C114) * C48405 *
               C48489 +
           ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C48405 *
               C16530) *
              C108 +
          (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C48405 *
               C16530 +
           ((C16575 + C16576) * C114 + (C16577 + C16578) * C48184) * C48405 *
               C48489) *
              C109 -
          (((C16579 + C16580) * C48184 + (C16581 + C16582) * C114) * C48405 *
               C48489 +
           ((C16578 + C16577) * C48184 + (C16576 + C16575) * C114) * C48405 *
               C16530) *
              C110 +
          (((C16582 + C16581) * C114 + (C16580 + C16579) * C48184) * C48405 *
               C16530 +
           ((C16532 * C120 + C16528 * C133 + C16533 * C719 + C48520 * C720) *
                C114 +
            (C16532 * C132 + C16528 * C141 + C16533 * C721 + C48520 * C722) *
                C48184) *
               C48405 * C48489) *
              C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C16530 +
            ((C16567 + C16568) * C114 + (C16569 + C16570) * C48184) * C48405 *
                C48489) *
               C302 -
           (((C16571 + C16572) * C48184 + (C16573 + C16574) * C114) * C48405 *
                C48489 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C48405 *
                C16530) *
               C303 +
           (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C48405 *
                C16530 +
            ((C16575 + C16576) * C114 + (C16577 + C16578) * C48184) * C48405 *
                C48489) *
               C48496) *
              C48542 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C48405 *
                C16530 +
            ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48405 *
                C48489) *
               C303 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48405 *
                C48489 +
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C48184 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C114) *
                C48405 * C16530) *
               C302 -
           (((C16533 * C1025 + C48520 * C1031 + C16532 * C536 + C16528 * C553) *
                 C48184 +
             (C16533 * C1016 + C48520 * C1024 + C16532 * C523 + C16528 * C535) *
                 C114) *
                C48405 * C48489 +
            ((C16962 + C16961) * C48184 + (C16960 + C16959) * C114) * C48405 *
                C16530) *
               C48496) *
              C48531 +
          ((((C16532 * C526 + C16528 * C541 + C16533 * C1420 + C48520 * C1432) *
                 C114 +
             (C16532 * C542 + C16528 * C556 + C16533 * C1433 + C48520 * C1447) *
                 C48184) *
                C48405 * C16530 +
            ((C16963 + C16964) * C114 + (C16965 + C16966) * C48184) * C48405 *
                C48489) *
               C302 -
           (((C16967 + C16968) * C48184 + (C16969 + C16970) * C114) * C48405 *
                C48489 +
            ((C16966 + C16965) * C48184 + (C16964 + C16963) * C114) * C48405 *
                C16530) *
               C303 +
           (((C16970 + C16969) * C114 + (C16968 + C16967) * C48184) * C48405 *
                C16530 +
            ((C16532 * C529 + C16528 * C548 + C16533 * C2337 + C48520 * C2338) *
                 C114 +
             (C16532 * C547 + C16528 * C559 + C16533 * C2339 + C48520 * C2340) *
                 C48184) *
                C48405 * C48489) *
               C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C1183 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C1177 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C1184 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C1178 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C1185 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C16530 +
           ((C16567 + C16568) * C1183 + (C16569 + C16570) * C1177 -
            (C16761 + C16762) * C1184 - (C16763 + C16764) * C1178 +
            (C16765 + C16766) * C1185 + (C16767 + C16768) * C48502) *
               C48405 * C48489) *
              C48538 +
          (((C16762 + C16761) * C1184 -
            ((C16570 + C16569) * C1177 + (C16568 + C16567) * C1183) +
            (C16764 + C16763) * C1178 - (C16766 + C16765) * C1185 -
            (C16768 + C16767) * C48502) *
               C48405 * C16530 +
           ((C16769 + C16770) * C1184 -
            ((C16571 + C16572) * C1177 + (C16573 + C16574) * C1183) +
            (C16771 + C16772) * C1178 - (C16773 + C16774) * C1185 -
            (C16775 + C16776) * C48502) *
               C48405 * C48489) *
              C48525 +
          (((C16574 + C16573) * C1183 + (C16572 + C16571) * C1177 -
            (C16770 + C16769) * C1184 - (C16772 + C16771) * C1178 +
            (C16774 + C16773) * C1185 + (C16776 + C16775) * C48502) *
               C48405 * C16530 +
           ((C16575 + C16576) * C1183 + (C16577 + C16578) * C1177 -
            (C17109 + C17110) * C1184 - (C17111 + C17112) * C1178 +
            (C16532 * C315 + C16528 * C332 + C16533 * C1561 + C48520 * C1562) *
                C1185 +
            (C16532 * C333 + C16528 * C345 + C16533 * C1563 + C48520 * C1564) *
                C48502) *
               C48405 * C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
               C1278 +
           (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
               C1272 -
           (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
               C1279 -
           (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
               C1273 +
           (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
               C1280 +
           (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
               C1274 -
           (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 + C16528 * C1289) *
               C1281 -
           (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 + C16528 * C1301) *
               C1275 +
           (C16532 * C1284 + C16528 * C1291 + C16533 * C6227 + C48520 * C6229) *
               C1282 +
           (C16532 * C1292 + C16528 * C1302 + C16533 * C6230 + C48520 * C6233) *
               C1276) *
              C48405 * C16530 +
          ((C16567 + C16568) * C1278 + (C16569 + C16570) * C1272 -
           (C16761 + C16762) * C1279 - (C16763 + C16764) * C1273 +
           (C16765 + C16766) * C1280 + (C16767 + C16768) * C1274 -
           (C16533 * C1286 + C48520 * C1295 + C16532 * C1285 + C16528 * C1293) *
               C1281 -
           (C16533 * C1296 + C48520 * C1304 + C16532 * C1294 + C16528 * C1303) *
               C1275 +
           (C16532 * C1286 + C16528 * C1295 + C16533 * C6228 + C48520 * C6231) *
               C1282 +
           (C16532 * C1296 + C16528 * C1304 + C16533 * C6232 + C48520 * C6234) *
               C1276) *
              C48405 * C48489) *
         C48156 * C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C1183 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C1177 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C1184 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C1178 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C1185 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C16530 +
           ((C16567 + C16568) * C1183 + (C16569 + C16570) * C1177 -
            (C16761 + C16762) * C1184 - (C16763 + C16764) * C1178 +
            (C16765 + C16766) * C1185 + (C16767 + C16768) * C48502) *
               C48405 * C48489) *
              C48156 * C48542 +
          (((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
             C48520 * C1426) *
                C1184 -
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C1177 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C1183) +
            (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
             C48520 * C1444) *
                C1178 -
            (C16533 * C1865 + C48520 * C1868 + C16532 * C1417 +
             C16528 * C1426) *
                C1185 -
            (C16533 * C1869 + C48520 * C1874 + C16532 * C1427 +
             C16528 * C1444) *
                C48502) *
               C48405 * C16530 +
           ((C17465 + C17466) * C1184 -
            ((C16958 + C16957) * C1177 + (C16956 + C16955) * C1183) +
            (C17467 + C17468) * C1178 -
            (C16533 * C1866 + C48520 * C1870 + C16532 * C1418 +
             C16528 * C1428) *
                C1185 -
            (C16533 * C1871 + C48520 * C1875 + C16532 * C1429 +
             C16528 * C1445) *
                C48502) *
               C48405 * C48489) *
              C48156 * C48531 +
          (((C16532 * C526 + C16528 * C541 + C16533 * C1420 + C48520 * C1432) *
                C1183 +
            (C16532 * C542 + C16528 * C556 + C16533 * C1433 + C48520 * C1447) *
                C1177 -
            (C16533 * C1421 + C48520 * C1434 + C16532 * C1420 +
             C16528 * C1432) *
                C1184 -
            (C16533 * C1435 + C48520 * C1448 + C16532 * C1433 +
             C16528 * C1447) *
                C1178 +
            (C16532 * C1421 + C16528 * C1434 + C16533 * C6381 +
             C48520 * C6383) *
                C1185 +
            (C16532 * C1435 + C16528 * C1448 + C16533 * C6384 +
             C48520 * C6387) *
                C48502) *
               C48405 * C16530 +
           ((C16963 + C16964) * C1183 + (C16965 + C16966) * C1177 -
            (C16533 * C1423 + C48520 * C1438 + C16532 * C1422 +
             C16528 * C1436) *
                C1184 -
            (C16533 * C1439 + C48520 * C1450 + C16532 * C1437 +
             C16528 * C1449) *
                C1178 +
            (C16532 * C1423 + C16528 * C1438 + C16533 * C6382 +
             C48520 * C6385) *
                C1185 +
            (C16532 * C1439 + C16528 * C1450 + C16533 * C6386 +
             C48520 * C6388) *
                C48502) *
               C48405 * C48489) *
              C48156 * C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C48405 * C16530 +
            ((C16567 + C16568) * C114 + (C16569 + C16570) * C48184) * C48405 *
                C48489) *
               C713 -
           (((C16571 + C16572) * C48184 + (C16573 + C16574) * C114) * C48405 *
                C48489 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C48405 *
                C16530) *
               C714 +
           (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C48405 *
                C16530 +
            ((C16575 + C16576) * C114 + (C16577 + C16578) * C48184) * C48405 *
                C48489) *
               C715 -
           (((C16579 + C16580) * C48184 + (C16581 + C16582) * C114) * C48405 *
                C48489 +
            ((C16578 + C16577) * C48184 + (C16576 + C16575) * C114) * C48405 *
                C16530) *
               C48506) *
              C48471 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C48405 *
                C16530 +
            ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48405 *
                C48489) *
               C714 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48405 *
                C48489 +
            ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 + C16528 * C554) *
                 C48184 +
             (C16533 * C1013 + C48520 * C1018 + C16532 * C524 + C16528 * C538) *
                 C114) *
                C48405 * C16530) *
               C713 -
           (((C17251 + C17252) * C48184 + (C17253 + C17254) * C114) * C48405 *
                C48489 +
            ((C16962 + C16961) * C48184 + (C16960 + C16959) * C114) * C48405 *
                C16530) *
               C715 +
           (((C17254 + C17253) * C114 + (C17252 + C17251) * C48184) * C48405 *
                C16530 +
            ((C16532 * C525 + C16528 * C540 + C16533 * C1017 + C48520 * C1026) *
                 C114 +
             (C16532 * C539 + C16528 * C555 + C16533 * C1027 + C48520 * C1032) *
                 C48184) *
                C48405 * C48489) *
               C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C1183 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C1177 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C1184 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C1178 +
             (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                 C1185 +
             (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                 C48502) *
                C48405 * C16530 +
            ((C16567 + C16568) * C1183 + (C16569 + C16570) * C1177 -
             (C16761 + C16762) * C1184 - (C16763 + C16764) * C1178 +
             (C16765 + C16766) * C1185 + (C16767 + C16768) * C48502) *
                C48405 * C48489) *
               C48456 +
           (((C16762 + C16761) * C1184 -
             ((C16570 + C16569) * C1177 + (C16568 + C16567) * C1183) +
             (C16764 + C16763) * C1178 - (C16766 + C16765) * C1185 -
             (C16768 + C16767) * C48502) *
                C48405 * C16530 +
            ((C16769 + C16770) * C1184 -
             ((C16571 + C16572) * C1177 + (C16573 + C16574) * C1183) +
             (C16771 + C16772) * C1178 - (C16773 + C16774) * C1185 -
             (C16775 + C16776) * C48502) *
                C48405 * C48489) *
               C48166) *
              C48471 +
          ((((C16532 * C1013 + C16528 * C1018 + C16533 * C1417 +
              C48520 * C1426) *
                 C1184 -
             ((C16533 * C1019 + C48520 * C1028 + C16532 * C537 +
               C16528 * C554) *
                  C1177 +
              (C16533 * C1013 + C48520 * C1018 + C16532 * C524 +
               C16528 * C538) *
                  C1183) +
             (C16532 * C1019 + C16528 * C1028 + C16533 * C1427 +
              C48520 * C1444) *
                 C1178 -
             (C16533 * C1865 + C48520 * C1868 + C16532 * C1417 +
              C16528 * C1426) *
                 C1185 -
             (C16533 * C1869 + C48520 * C1874 + C16532 * C1427 +
              C16528 * C1444) *
                 C48502) *
                C48405 * C16530 +
            ((C17465 + C17466) * C1184 -
             ((C16958 + C16957) * C1177 + (C16956 + C16955) * C1183) +
             (C17467 + C17468) * C1178 - (C18191 + C18192) * C1185 -
             (C18193 + C18194) * C48502) *
                C48405 * C48489) *
               C48456 +
           (((C16955 + C16956) * C1183 + (C16957 + C16958) * C1177 -
             (C17466 + C17465) * C1184 - (C17468 + C17467) * C1178 +
             (C18192 + C18191) * C1185 + (C18194 + C18193) * C48502) *
                C48405 * C16530 +
            ((C16959 + C16960) * C1183 + (C16961 + C16962) * C1177 -
             (C17469 + C17470) * C1184 - (C17471 + C17472) * C1178 +
             (C16532 * C1419 + C16528 * C1430 + C16533 * C1867 +
              C48520 * C1872) *
                 C1185 +
             (C16532 * C1431 + C16528 * C1446 + C16533 * C1873 +
              C48520 * C1876) *
                 C48502) *
                C48405 * C48489) *
               C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C114 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48184) *
               C48405 * C16530 +
           ((C16567 + C16568) * C114 + (C16569 + C16570) * C48184) * C48405 *
               C48489) *
              C107 -
          (((C16571 + C16572) * C48184 + (C16573 + C16574) * C114) * C48405 *
               C48489 +
           ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C48405 *
               C16530) *
              C108 +
          (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C48405 *
               C16530 +
           ((C16575 + C16576) * C114 + (C16577 + C16578) * C48184) * C48405 *
               C48489) *
              C109 -
          (((C16579 + C16580) * C48184 + (C16581 + C16582) * C114) * C48405 *
               C48489 +
           ((C16578 + C16577) * C48184 + (C16576 + C16575) * C114) * C48405 *
               C16530) *
              C110 +
          (((C16582 + C16581) * C114 + (C16580 + C16579) * C48184) * C48405 *
               C16530 +
           ((C16532 * C120 + C16528 * C133 + C16533 * C719 + C48520 * C720) *
                C114 +
            (C16532 * C132 + C16528 * C141 + C16533 * C721 + C48520 * C722) *
                C48184) *
               C48405 * C48489) *
              C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C305 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48541 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C306 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48529 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C307 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C16530 +
           ((C16567 + C16568) * C305 + (C16569 + C16570) * C48541 -
            (C16761 + C16762) * C306 - (C16763 + C16764) * C48529 +
            (C16765 + C16766) * C307 + (C16767 + C16768) * C48502) *
               C48405 * C48489) *
              C302 +
          (((C16762 + C16761) * C306 -
            ((C16570 + C16569) * C48541 + (C16568 + C16567) * C305) +
            (C16764 + C16763) * C48529 - (C16766 + C16765) * C307 -
            (C16768 + C16767) * C48502) *
               C48405 * C16530 +
           ((C16769 + C16770) * C306 -
            ((C16571 + C16572) * C48541 + (C16573 + C16574) * C305) +
            (C16771 + C16772) * C48529 - (C16773 + C16774) * C307 -
            (C16775 + C16776) * C48502) *
               C48405 * C48489) *
              C303 +
          (((C16574 + C16573) * C305 + (C16572 + C16571) * C48541 -
            (C16770 + C16769) * C306 - (C16772 + C16771) * C48529 +
            (C16774 + C16773) * C307 + (C16776 + C16775) * C48502) *
               C48405 * C16530 +
           ((C16575 + C16576) * C305 + (C16577 + C16578) * C48541 -
            (C16533 * C315 + C48520 * C332 + C16532 * C314 + C16528 * C330) *
                C306 -
            (C16533 * C333 + C48520 * C345 + C16532 * C331 + C16528 * C344) *
                C48529 +
            (C16532 * C315 + C16528 * C332 + C16533 * C1561 + C48520 * C1562) *
                C307 +
            (C16532 * C333 + C16528 * C345 + C16533 * C1563 + C48520 * C1564) *
                C48502) *
               C48405 * C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C1183 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C1177 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C1184 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C1178 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C1185 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C48405 * C16530 +
           ((C16567 + C16568) * C1183 + (C16569 + C16570) * C1177 -
            (C16761 + C16762) * C1184 - (C16763 + C16764) * C1178 +
            (C16765 + C16766) * C1185 + (C16767 + C16768) * C48502) *
               C48405 * C48489) *
              C48538 +
          (((C16762 + C16761) * C1184 -
            ((C16570 + C16569) * C1177 + (C16568 + C16567) * C1183) +
            (C16764 + C16763) * C1178 - (C16766 + C16765) * C1185 -
            (C16768 + C16767) * C48502) *
               C48405 * C16530 +
           ((C16769 + C16770) * C1184 -
            ((C16571 + C16572) * C1177 + (C16573 + C16574) * C1183) +
            (C16771 + C16772) * C1178 - (C16773 + C16774) * C1185 -
            (C16775 + C16776) * C48502) *
               C48405 * C48489) *
              C48525 +
          (((C16574 + C16573) * C1183 + (C16572 + C16571) * C1177 -
            (C16770 + C16769) * C1184 - (C16772 + C16771) * C1178 +
            (C16774 + C16773) * C1185 + (C16776 + C16775) * C48502) *
               C48405 * C16530 +
           ((C16575 + C16576) * C1183 + (C16577 + C16578) * C1177 -
            (C17109 + C17110) * C1184 - (C17111 + C17112) * C1178 +
            (C16532 * C315 + C16528 * C332 + C16533 * C1561 + C48520 * C1562) *
                C1185 +
            (C16532 * C333 + C16528 * C345 + C16533 * C1563 + C48520 * C1564) *
                C48502) *
               C48405 * C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
               C1278 +
           (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
               C1272 -
           (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
               C1279 -
           (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
               C1273 +
           (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
               C1280 +
           (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
               C1274 -
           (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 + C16528 * C1289) *
               C1281 -
           (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 + C16528 * C1301) *
               C1275 +
           (C16532 * C1284 + C16528 * C1291 + C16533 * C6227 + C48520 * C6229) *
               C1282 +
           (C16532 * C1292 + C16528 * C1302 + C16533 * C6230 + C48520 * C6233) *
               C1276) *
              C48405 * C16530 +
          ((C16567 + C16568) * C1278 + (C16569 + C16570) * C1272 -
           (C16761 + C16762) * C1279 - (C16763 + C16764) * C1273 +
           (C16765 + C16766) * C1280 + (C16767 + C16768) * C1274 -
           (C16533 * C1286 + C48520 * C1295 + C16532 * C1285 + C16528 * C1293) *
               C1281 -
           (C16533 * C1296 + C48520 * C1304 + C16532 * C1294 + C16528 * C1303) *
               C1275 +
           (C16532 * C1286 + C16528 * C1295 + C16533 * C6228 + C48520 * C6231) *
               C1282 +
           (C16532 * C1296 + C16528 * C1304 + C16533 * C6232 + C48520 * C6234) *
               C1276) *
              C48405 * C48489) *
         C48156 * C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C47163 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C48243 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C47155 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C48250 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C47169 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C3121) *
                       C48405 * C48141 * C48161 +
                   ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                     C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                        C47155 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C48243 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C47163) +
                    (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                     C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                        C48250 -
                    (C22208 * C1286 + C22204 * C1295 + C22207 * C1285 +
                     C22203 * C1293 + C22206 * C311 + C22202 * C324) *
                        C47169 -
                    (C22208 * C1296 + C22204 * C1304 + C22207 * C1294 +
                     C22203 * C1303 + C22206 * C325 + C22202 * C341) *
                        C3121) *
                       C48405 * C48141 * C48169 +
                   ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                     C22203 * C326 + C22208 * C313 + C22204 * C328) *
                        C47163 +
                    (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                     C22203 * C342 + C22208 * C329 + C22204 * C343) *
                        C48243 -
                    (C22208 * C1287 + C22204 * C1297 + C22207 * C313 +
                     C22203 * C328 + C22206 * C312 + C22202 * C326) *
                        C47155 -
                    (C22208 * C1298 + C22204 * C1305 + C22207 * C329 +
                     C22203 * C343 + C22206 * C327 + C22202 * C342) *
                        C48250 +
                    (C22206 * C313 + C22202 * C328 + C22207 * C1287 +
                     C22203 * C1297 + C22208 * C1288 + C22204 * C1299) *
                        C47169 +
                    (C22206 * C329 + C22202 * C343 + C22207 * C1298 +
                     C22203 * C1305 + C22208 * C1300 + C22204 * C1306) *
                        C3121) *
                       C48405 * C48141 * C3124) *
                  C48202) /
                 (p * q * std::sqrt(p + q));
    d2ee[101] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C47163 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C48243 -
                     (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                      C22203 * C320 + C22206 * C308 + C22202 * C318) *
                         C47155 -
                     (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                      C22203 * C339 + C22206 * C319 + C22202 * C338) *
                         C48250 +
                     (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                      C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                         C47169 +
                     (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                      C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                         C3121) *
                        C48405 * C48141 * C2825 +
                    ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                      C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                         C47155 -
                     ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                       C22203 * C340 + C22206 * C125 + C22202 * C137) *
                          C48243 +
                      (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                       C22203 * C322 + C22206 * C116 + C22202 * C124) *
                          C47163) +
                     (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                      C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                         C48250 -
                     (C22208 * C1286 + C22204 * C1295 + C22207 * C1285 +
                      C22203 * C1293 + C22206 * C311 + C22202 * C324) *
                         C47169 -
                     (C22208 * C1296 + C22204 * C1304 + C22207 * C1294 +
                      C22203 * C1303 + C22206 * C325 + C22202 * C341) *
                         C3121) *
                        C48405 * C48141 * C48166) *
                       C48471 +
                   (((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                      C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                         C47155 -
                     ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                       C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                          C48243 +
                      (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                       C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                          C47163) +
                     (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                      C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                         C48250 -
                     (C22208 * C6867 + C22204 * C6869 + C22207 * C1865 +
                      C22203 * C1868 + C22206 * C1417 + C22202 * C1426) *
                         C47169 -
                     (C22208 * C6870 + C22204 * C6873 + C22207 * C1869 +
                      C22203 * C1874 + C22206 * C1427 + C22202 * C1444) *
                         C3121) *
                        C48405 * C48141 * C2825 +
                    ((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C47163 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C48243 -
                     (C22208 * C1866 + C22204 * C1870 + C22207 * C1418 +
                      C22203 * C1428 + C22206 * C1014 + C22202 * C1020) *
                         C47155 -
                     (C22208 * C1871 + C22204 * C1875 + C22207 * C1429 +
                      C22203 * C1445 + C22206 * C1021 + C22202 * C1029) *
                         C48250 +
                     (C22206 * C1418 + C22202 * C1428 + C22207 * C1866 +
                      C22203 * C1870 + C22208 * C6868 + C22204 * C6871) *
                         C47169 +
                     (C22206 * C1429 + C22202 * C1445 + C22207 * C1871 +
                      C22203 * C1875 + C22208 * C6872 + C22204 * C6874) *
                         C3121) *
                        C48405 * C48141 * C48166) *
                       C48289)) /
                 (p * q * std::sqrt(p + q));
    d2ee[102] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C2827 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C48548 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C2828 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C48544 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C2829 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C48534 -
                    (C22208 * C6227 + C22204 * C6229 + C22207 * C1284 +
                     C22203 * C1291 + C22206 * C1283 + C22202 * C1289) *
                        C2830 -
                    (C22208 * C6230 + C22204 * C6233 + C22207 * C1292 +
                     C22203 * C1302 + C22206 * C1290 + C22202 * C1301) *
                        C48512) *
                       C48405 * C48141 * C2825 +
                   ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                     C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                        C2828 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C48548 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C2827) +
                    (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                     C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                        C48544 -
                    (C22208 * C1286 + C22204 * C1295 + C22207 * C1285 +
                     C22203 * C1293 + C22206 * C311 + C22202 * C324) *
                        C2829 -
                    (C22208 * C1296 + C22204 * C1304 + C22207 * C1294 +
                     C22203 * C1303 + C22206 * C325 + C22202 * C341) *
                        C48534 +
                    (C22206 * C1285 + C22202 * C1293 + C22207 * C1286 +
                     C22203 * C1295 + C22208 * C6228 + C22204 * C6231) *
                        C2830 +
                    (C22206 * C1294 + C22202 * C1303 + C22207 * C1296 +
                     C22203 * C1304 + C22208 * C6232 + C22204 * C6234) *
                        C48512) *
                       C48405 * C48141 * C48166) *
                  C48202) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C2697 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C2691 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C2698 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C48247) *
                       C48405 * C48141 * C48547 +
                   ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                     C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                        C2698 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C2691 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C2697) +
                    (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                     C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                        C48247) *
                       C48405 * C48141 * C48540 +
                   ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                     C22203 * C326 + C22208 * C313 + C22204 * C328) *
                        C2697 +
                    (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                     C22203 * C342 + C22208 * C329 + C22204 * C343) *
                        C2691 -
                    (C22208 * C1287 + C22204 * C1297 + C22207 * C313 +
                     C22203 * C328 + C22206 * C312 + C22202 * C326) *
                        C2698 -
                    (C22208 * C1298 + C22204 * C1305 + C22207 * C329 +
                     C22203 * C343 + C22206 * C327 + C22202 * C342) *
                        C48247) *
                       C48405 * C48141 * C48527 +
                   ((C22206 * C314 + C22202 * C330 + C22207 * C315 +
                     C22203 * C332 + C22208 * C1561 + C22204 * C1562) *
                        C2698 -
                    ((C22208 * C333 + C22204 * C345 + C22207 * C331 +
                      C22203 * C344 + C22206 * C128 + C22202 * C139) *
                         C2691 +
                     (C22208 * C315 + C22204 * C332 + C22207 * C314 +
                      C22203 * C330 + C22206 * C118 + C22202 * C129) *
                         C2697) +
                    (C22206 * C331 + C22202 * C344 + C22207 * C333 +
                     C22203 * C345 + C22208 * C1563 + C22204 * C1564) *
                        C48247) *
                       C48405 * C48141 * C48506) *
                  C48202) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C2697 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C2691 -
                     (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                      C22203 * C320 + C22206 * C308 + C22202 * C318) *
                         C2698 -
                     (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                      C22203 * C339 + C22206 * C319 + C22202 * C338) *
                         C48247) *
                        C48405 * C48141 * C2825 +
                    ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                      C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                         C2698 -
                     ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                       C22203 * C340 + C22206 * C125 + C22202 * C137) *
                          C2691 +
                      (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                       C22203 * C322 + C22206 * C116 + C22202 * C124) *
                          C2697) +
                     (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                      C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                         C48247) *
                        C48405 * C48141 * C48166) *
                       C48542 +
                   (((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                      C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                         C2698 -
                     ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                       C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                          C2691 +
                      (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                       C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                          C2697) +
                     (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                      C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                         C48247) *
                        C48405 * C48141 * C2825 +
                    ((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C2697 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C2691 -
                     (C22208 * C1866 + C22204 * C1870 + C22207 * C1418 +
                      C22203 * C1428 + C22206 * C1014 + C22202 * C1020) *
                         C2698 -
                     (C22208 * C1871 + C22204 * C1875 + C22207 * C1429 +
                      C22203 * C1445 + C22206 * C1021 + C22202 * C1029) *
                         C48247) *
                        C48405 * C48141 * C48166) *
                       C48531 +
                   (((C22206 * C526 + C22202 * C541 + C22207 * C1420 +
                      C22203 * C1432 + C22208 * C1421 + C22204 * C1434) *
                         C2697 +
                     (C22206 * C542 + C22202 * C556 + C22207 * C1433 +
                      C22203 * C1447 + C22208 * C1435 + C22204 * C1448) *
                         C2691 -
                     (C22208 * C6381 + C22204 * C6383 + C22207 * C1421 +
                      C22203 * C1434 + C22206 * C1420 + C22202 * C1432) *
                         C2698 -
                     (C22208 * C6384 + C22204 * C6387 + C22207 * C1435 +
                      C22203 * C1448 + C22206 * C1433 + C22202 * C1447) *
                         C48247) *
                        C48405 * C48141 * C2825 +
                    ((C22206 * C1422 + C22202 * C1436 + C22207 * C1423 +
                      C22203 * C1438 + C22208 * C6382 + C22204 * C6385) *
                         C2698 -
                     ((C22208 * C1439 + C22204 * C1450 + C22207 * C1437 +
                       C22203 * C1449 + C22206 * C544 + C22202 * C557) *
                          C2691 +
                      (C22208 * C1423 + C22204 * C1438 + C22207 * C1422 +
                       C22203 * C1436 + C22206 * C527 + C22202 * C543) *
                          C2697) +
                     (C22206 * C1437 + C22202 * C1449 + C22207 * C1439 +
                      C22203 * C1450 + C22208 * C6386 + C22204 * C6388) *
                         C48247) *
                        C48405 * C48141 * C48166) *
                       C48505)) /
                     (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C2697 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C2691 -
                     (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                      C22203 * C320 + C22206 * C308 + C22202 * C318) *
                         C2698 -
                     (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                      C22203 * C339 + C22206 * C319 + C22202 * C338) *
                         C48247) *
                        C48405 * C48141 * C48161 +
                    ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                      C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                         C2698 -
                     ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                       C22203 * C340 + C22206 * C125 + C22202 * C137) *
                          C2691 +
                      (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                       C22203 * C322 + C22206 * C116 + C22202 * C124) *
                          C2697) +
                     (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                      C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                         C48247) *
                        C48405 * C48141 * C48169 +
                    ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                      C22203 * C326 + C22208 * C313 + C22204 * C328) *
                         C2697 +
                     (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                      C22203 * C342 + C22208 * C329 + C22204 * C343) *
                         C2691 -
                     (C22208 * C1287 + C22204 * C1297 + C22207 * C313 +
                      C22203 * C328 + C22206 * C312 + C22202 * C326) *
                         C2698 -
                     (C22208 * C1298 + C22204 * C1305 + C22207 * C329 +
                      C22203 * C343 + C22206 * C327 + C22202 * C342) *
                         C48247) *
                        C48405 * C48141 * C3124) *
                       C48471 +
                   (((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                      C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                         C2698 -
                     ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                       C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                          C2691 +
                      (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                       C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                          C2697) +
                     (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                      C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                         C48247) *
                        C48405 * C48141 * C48161 +
                    ((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C2697 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C2691 -
                     (C22208 * C1866 + C22204 * C1870 + C22207 * C1418 +
                      C22203 * C1428 + C22206 * C1014 + C22202 * C1020) *
                         C2698 -
                     (C22208 * C1871 + C22204 * C1875 + C22207 * C1429 +
                      C22203 * C1445 + C22206 * C1021 + C22202 * C1029) *
                         C48247) *
                        C48405 * C48141 * C48169 +
                    ((C22206 * C1015 + C22202 * C1022 + C22207 * C1419 +
                      C22203 * C1430 + C22208 * C1867 + C22204 * C1872) *
                         C2698 -
                     ((C22208 * C1431 + C22204 * C1446 + C22207 * C1023 +
                       C22203 * C1030 + C22206 * C534 + C22202 * C552) *
                          C2691 +
                      (C22208 * C1419 + C22204 * C1430 + C22207 * C1015 +
                       C22203 * C1022 + C22206 * C522 + C22202 * C533) *
                          C2697) +
                     (C22206 * C1023 + C22202 * C1030 + C22207 * C1431 +
                      C22203 * C1446 + C22208 * C1873 + C22204 * C1876) *
                         C48247) *
                        C48405 * C48141 * C3124) *
                       C48289)) /
                 (p * q * std::sqrt(p + q));
    d2ee[104] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C2697 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C2691 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C2698 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C48247) *
                       C48405 * C48141 * C48547 +
                   ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                     C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                        C2698 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C2691 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C2697) +
                    (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                     C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                        C48247) *
                       C48405 * C48141 * C48540 +
                   ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                     C22203 * C326 + C22208 * C313 + C22204 * C328) *
                        C2697 +
                    (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                     C22203 * C342 + C22208 * C329 + C22204 * C343) *
                        C2691 -
                    (C22208 * C1287 + C22204 * C1297 + C22207 * C313 +
                     C22203 * C328 + C22206 * C312 + C22202 * C326) *
                        C2698 -
                    (C22208 * C1298 + C22204 * C1305 + C22207 * C329 +
                     C22203 * C343 + C22206 * C327 + C22202 * C342) *
                        C48247) *
                       C48405 * C48141 * C48527 +
                   ((C22206 * C314 + C22202 * C330 + C22207 * C315 +
                     C22203 * C332 + C22208 * C1561 + C22204 * C1562) *
                        C2698 -
                    ((C22208 * C333 + C22204 * C345 + C22207 * C331 +
                      C22203 * C344 + C22206 * C128 + C22202 * C139) *
                         C2691 +
                     (C22208 * C315 + C22204 * C332 + C22207 * C314 +
                      C22203 * C330 + C22206 * C118 + C22202 * C129) *
                         C2697) +
                    (C22206 * C331 + C22202 * C344 + C22207 * C333 +
                     C22203 * C345 + C22208 * C1563 + C22204 * C1564) *
                        C48247) *
                       C48405 * C48141 * C48506) *
                  C48202) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C2827 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C48548 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C2828 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C48544 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C2829 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C48534 -
                    (C22208 * C6227 + C22204 * C6229 + C22207 * C1284 +
                     C22203 * C1291 + C22206 * C1283 + C22202 * C1289) *
                        C2830 -
                    (C22208 * C6230 + C22204 * C6233 + C22207 * C1292 +
                     C22203 * C1302 + C22206 * C1290 + C22202 * C1301) *
                        C48512) *
                       C48405 * C48141 * C2825 +
                   ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                     C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                        C2828 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C48548 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C2827) +
                    (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                     C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                        C48544 -
                    (C22208 * C1286 + C22204 * C1295 + C22207 * C1285 +
                     C22203 * C1293 + C22206 * C311 + C22202 * C324) *
                        C2829 -
                    (C22208 * C1296 + C22204 * C1304 + C22207 * C1294 +
                     C22203 * C1303 + C22206 * C325 + C22202 * C341) *
                        C48534 +
                    (C22206 * C1285 + C22202 * C1293 + C22207 * C1286 +
                     C22203 * C1295 + C22208 * C6228 + C22204 * C6231) *
                        C2830 +
                    (C22206 * C1294 + C22202 * C1303 + C22207 * C1296 +
                     C22203 * C1304 + C22208 * C6232 + C22204 * C6234) *
                        C48512) *
                       C48405 * C48141 * C48166) *
                  C48202) /
                     (p * q * std::sqrt(p + q));
    d2ee[105] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C47163 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C48243 -
                     (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                      C22203 * C320 + C22206 * C308 + C22202 * C318) *
                         C47155 -
                     (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                      C22203 * C339 + C22206 * C319 + C22202 * C338) *
                         C48250 +
                     (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                      C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                         C47169 +
                     (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                      C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                         C3121) *
                        C48405 * C48141 * C48456 +
                    ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                      C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                         C47155 -
                     ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                       C22203 * C340 + C22206 * C125 + C22202 * C137) *
                          C48243 +
                      (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                       C22203 * C322 + C22206 * C116 + C22202 * C124) *
                          C47163) +
                     (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                      C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                         C48250 -
                     (C22208 * C1286 + C22204 * C1295 + C22207 * C1285 +
                      C22203 * C1293 + C22206 * C311 + C22202 * C324) *
                         C47169 -
                     (C22208 * C1296 + C22204 * C1304 + C22207 * C1294 +
                      C22203 * C1303 + C22206 * C325 + C22202 * C341) *
                         C3121) *
                        C48405 * C48141 * C48166) *
                       C3562 +
                   (((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                      C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                         C47155 -
                     ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                       C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                          C48243 +
                      (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                       C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                          C47163) +
                     (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                      C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                         C48250 -
                     (C22208 * C6867 + C22204 * C6869 + C22207 * C1865 +
                      C22203 * C1868 + C22206 * C1417 + C22202 * C1426) *
                         C47169 -
                     (C22208 * C6870 + C22204 * C6873 + C22207 * C1869 +
                      C22203 * C1874 + C22206 * C1427 + C22202 * C1444) *
                         C3121) *
                        C48405 * C48141 * C48456 +
                    ((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C47163 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C48243 -
                     (C22208 * C1866 + C22204 * C1870 + C22207 * C1418 +
                      C22203 * C1428 + C22206 * C1014 + C22202 * C1020) *
                         C47155 -
                     (C22208 * C1871 + C22204 * C1875 + C22207 * C1429 +
                      C22203 * C1445 + C22206 * C1021 + C22202 * C1029) *
                         C48250 +
                     (C22206 * C1418 + C22202 * C1428 + C22207 * C1866 +
                      C22203 * C1870 + C22208 * C6868 + C22204 * C6871) *
                         C47169 +
                     (C22206 * C1429 + C22202 * C1445 + C22207 * C1871 +
                      C22203 * C1875 + C22208 * C6872 + C22204 * C6874) *
                         C3121) *
                        C48405 * C48141 * C48166) *
                       C48289)) /
                 (p * q * std::sqrt(p + q));
    d2ee[106] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C47163 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C48243 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C47155 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C48250 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C47169 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C3121) *
                       C48405 * C48141 * C48156 * C48285 +
                   ((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                     C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                        C47155 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C48243 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C47163) +
                    (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                     C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                        C48250 -
                    (C22208 * C6867 + C22204 * C6869 + C22207 * C1865 +
                     C22203 * C1868 + C22206 * C1417 + C22202 * C1426) *
                        C47169 -
                    (C22208 * C6870 + C22204 * C6873 + C22207 * C1869 +
                     C22203 * C1874 + C22206 * C1427 + C22202 * C1444) *
                        C3121) *
                       C48405 * C48141 * C48156 * C48292 +
                   ((C22206 * C526 + C22202 * C541 + C22207 * C1420 +
                     C22203 * C1432 + C22208 * C1421 + C22204 * C1434) *
                        C47163 +
                    (C22206 * C542 + C22202 * C556 + C22207 * C1433 +
                     C22203 * C1447 + C22208 * C1435 + C22204 * C1448) *
                        C48243 -
                    (C22208 * C6381 + C22204 * C6383 + C22207 * C1421 +
                     C22203 * C1434 + C22206 * C1420 + C22202 * C1432) *
                        C47155 -
                    (C22208 * C6384 + C22204 * C6387 + C22207 * C1435 +
                     C22203 * C1448 + C22206 * C1433 + C22202 * C1447) *
                        C48250 +
                    (C22206 * C1421 + C22202 * C1434 + C22207 * C6381 +
                     C22203 * C6383 + C22208 * C23057 + C22204 * C23058) *
                        C47169 +
                    (C22206 * C1435 + C22202 * C1448 + C22207 * C6384 +
                     C22203 * C6387 + C22208 * C23059 + C22204 * C23060) *
                        C3121) *
                       C48405 * C48141 * C48156 * C4082)) /
                 (p * q * std::sqrt(p + q));
    d2ee[107] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C2827 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C48548 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C2828 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C48544 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C2829 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C48534 -
                    (C22208 * C6227 + C22204 * C6229 + C22207 * C1284 +
                     C22203 * C1291 + C22206 * C1283 + C22202 * C1289) *
                        C2830 -
                    (C22208 * C6230 + C22204 * C6233 + C22207 * C1292 +
                     C22203 * C1302 + C22206 * C1290 + C22202 * C1301) *
                        C48512) *
                       C48405 * C48141 * C48156 * C3562 +
                   ((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                     C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                        C2828 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C48548 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C2827) +
                    (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                     C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                        C48544 -
                    (C22208 * C6867 + C22204 * C6869 + C22207 * C1865 +
                     C22203 * C1868 + C22206 * C1417 + C22202 * C1426) *
                        C2829 -
                    (C22208 * C6870 + C22204 * C6873 + C22207 * C1869 +
                     C22203 * C1874 + C22206 * C1427 + C22202 * C1444) *
                        C48534 +
                    (C22206 * C1865 + C22202 * C1868 + C22207 * C6867 +
                     C22203 * C6869 + C22208 * C23403 + C22204 * C23404) *
                        C2830 +
                    (C22206 * C1869 + C22202 * C1874 + C22207 * C6870 +
                     C22203 * C6873 + C22208 * C23405 + C22204 * C23406) *
                        C48512) *
                       C48405 * C48141 * C48156 * C48289)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C2697 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C2691 -
                     (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                      C22203 * C320 + C22206 * C308 + C22202 * C318) *
                         C2698 -
                     (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                      C22203 * C339 + C22206 * C319 + C22202 * C338) *
                         C48247) *
                        C48405 * C48141 * C48538 +
                    ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                      C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                         C2698 -
                     ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                       C22203 * C340 + C22206 * C125 + C22202 * C137) *
                          C2691 +
                      (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                       C22203 * C322 + C22206 * C116 + C22202 * C124) *
                          C2697) +
                     (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                      C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                         C48247) *
                        C48405 * C48141 * C48525 +
                    ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                      C22203 * C326 + C22208 * C313 + C22204 * C328) *
                         C2697 +
                     (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                      C22203 * C342 + C22208 * C329 + C22204 * C343) *
                         C2691 -
                     (C22208 * C1287 + C22204 * C1297 + C22207 * C313 +
                      C22203 * C328 + C22206 * C312 + C22202 * C326) *
                         C2698 -
                     (C22208 * C1298 + C22204 * C1305 + C22207 * C329 +
                      C22203 * C343 + C22206 * C327 + C22202 * C342) *
                         C48247) *
                        C48405 * C48141 * C48496) *
                       C3562 +
                   (((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                      C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                         C2698 -
                     ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                       C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                          C2691 +
                      (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                       C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                          C2697) +
                     (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                      C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                         C48247) *
                        C48405 * C48141 * C48538 +
                    ((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C2697 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C2691 -
                     (C22208 * C1866 + C22204 * C1870 + C22207 * C1418 +
                      C22203 * C1428 + C22206 * C1014 + C22202 * C1020) *
                         C2698 -
                     (C22208 * C1871 + C22204 * C1875 + C22207 * C1429 +
                      C22203 * C1445 + C22206 * C1021 + C22202 * C1029) *
                         C48247) *
                        C48405 * C48141 * C48525 +
                    ((C22206 * C1015 + C22202 * C1022 + C22207 * C1419 +
                      C22203 * C1430 + C22208 * C1867 + C22204 * C1872) *
                         C2698 -
                     ((C22208 * C1431 + C22204 * C1446 + C22207 * C1023 +
                       C22203 * C1030 + C22206 * C534 + C22202 * C552) *
                          C2691 +
                      (C22208 * C1419 + C22204 * C1430 + C22207 * C1015 +
                       C22203 * C1022 + C22206 * C522 + C22202 * C533) *
                          C2697) +
                     (C22206 * C1023 + C22202 * C1030 + C22207 * C1431 +
                      C22203 * C1446 + C22208 * C1873 + C22204 * C1876) *
                         C48247) *
                        C48405 * C48141 * C48496) *
                       C48289)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C2697 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C2691 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C2698 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C48247) *
                       C48405 * C48141 * C48156 * C48549 +
                   ((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                     C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                        C2698 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C2691 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C2697) +
                    (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                     C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                        C48247) *
                       C48405 * C48141 * C48156 * C48546 +
                   ((C22206 * C526 + C22202 * C541 + C22207 * C1420 +
                     C22203 * C1432 + C22208 * C1421 + C22204 * C1434) *
                        C2697 +
                    (C22206 * C542 + C22202 * C556 + C22207 * C1433 +
                     C22203 * C1447 + C22208 * C1435 + C22204 * C1448) *
                        C2691 -
                    (C22208 * C6381 + C22204 * C6383 + C22207 * C1421 +
                     C22203 * C1434 + C22206 * C1420 + C22202 * C1432) *
                        C2698 -
                    (C22208 * C6384 + C22204 * C6387 + C22207 * C1435 +
                     C22203 * C1448 + C22206 * C1433 + C22202 * C1447) *
                        C48247) *
                       C48405 * C48141 * C48156 * C48537 +
                   ((C22206 * C2581 + C22202 * C2584 + C22207 * C7735 +
                     C22203 * C7737 + C22208 * C24035 + C22204 * C24036) *
                        C2698 -
                    ((C22208 * C7738 + C22204 * C7741 + C22207 * C2585 +
                      C22203 * C2590 + C22206 * C2177 + C22202 * C2187) *
                         C2691 +
                     (C22208 * C7735 + C22204 * C7737 + C22207 * C2581 +
                      C22203 * C2584 + C22206 * C2169 + C22202 * C2178) *
                         C2697) +
                    (C22206 * C2585 + C22202 * C2590 + C22207 * C7738 +
                     C22203 * C7741 + C22208 * C24037 + C22204 * C24038) *
                        C48247) *
                       C48405 * C48141 * C48156 * C48518)) /
                     (p * q * std::sqrt(p + q));
    d2ee[108] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C2697 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C2691 -
                     (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                      C22203 * C320 + C22206 * C308 + C22202 * C318) *
                         C2698 -
                     (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                      C22203 * C339 + C22206 * C319 + C22202 * C338) *
                         C48247) *
                        C48405 * C48141 * C48456 +
                    ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                      C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                         C2698 -
                     ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                       C22203 * C340 + C22206 * C125 + C22202 * C137) *
                          C2691 +
                      (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                       C22203 * C322 + C22206 * C116 + C22202 * C124) *
                          C2697) +
                     (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                      C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                         C48247) *
                        C48405 * C48141 * C48166) *
                       C48285 +
                   (((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                      C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                         C2698 -
                     ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                       C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                          C2691 +
                      (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                       C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                          C2697) +
                     (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                      C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                         C48247) *
                        C48405 * C48141 * C48456 +
                    ((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C2697 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C2691 -
                     (C22208 * C1866 + C22204 * C1870 + C22207 * C1418 +
                      C22203 * C1428 + C22206 * C1014 + C22202 * C1020) *
                         C2698 -
                     (C22208 * C1871 + C22204 * C1875 + C22207 * C1429 +
                      C22203 * C1445 + C22206 * C1021 + C22202 * C1029) *
                         C48247) *
                        C48405 * C48141 * C48166) *
                       C48292 +
                   (((C22206 * C526 + C22202 * C541 + C22207 * C1420 +
                      C22203 * C1432 + C22208 * C1421 + C22204 * C1434) *
                         C2697 +
                     (C22206 * C542 + C22202 * C556 + C22207 * C1433 +
                      C22203 * C1447 + C22208 * C1435 + C22204 * C1448) *
                         C2691 -
                     (C22208 * C6381 + C22204 * C6383 + C22207 * C1421 +
                      C22203 * C1434 + C22206 * C1420 + C22202 * C1432) *
                         C2698 -
                     (C22208 * C6384 + C22204 * C6387 + C22207 * C1435 +
                      C22203 * C1448 + C22206 * C1433 + C22202 * C1447) *
                         C48247) *
                        C48405 * C48141 * C48456 +
                    ((C22206 * C1422 + C22202 * C1436 + C22207 * C1423 +
                      C22203 * C1438 + C22208 * C6382 + C22204 * C6385) *
                         C2698 -
                     ((C22208 * C1439 + C22204 * C1450 + C22207 * C1437 +
                       C22203 * C1449 + C22206 * C544 + C22202 * C557) *
                          C2691 +
                      (C22208 * C1423 + C22204 * C1438 + C22207 * C1422 +
                       C22203 * C1436 + C22206 * C527 + C22202 * C543) *
                          C2697) +
                     (C22206 * C1437 + C22202 * C1449 + C22207 * C1439 +
                      C22203 * C1450 + C22208 * C6386 + C22204 * C6388) *
                         C48247) *
                        C48405 * C48141 * C48166) *
                       C4082)) /
                 (p * q * std::sqrt(p + q));
    d2ee[109] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C2697 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C2691 -
                     (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                      C22203 * C320 + C22206 * C308 + C22202 * C318) *
                         C2698 -
                     (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                      C22203 * C339 + C22206 * C319 + C22202 * C338) *
                         C48247) *
                        C48405 * C48141 * C48538 +
                    ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                      C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                         C2698 -
                     ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                       C22203 * C340 + C22206 * C125 + C22202 * C137) *
                          C2691 +
                      (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                       C22203 * C322 + C22206 * C116 + C22202 * C124) *
                          C2697) +
                     (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                      C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                         C48247) *
                        C48405 * C48141 * C48525 +
                    ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                      C22203 * C326 + C22208 * C313 + C22204 * C328) *
                         C2697 +
                     (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                      C22203 * C342 + C22208 * C329 + C22204 * C343) *
                         C2691 -
                     (C22208 * C1287 + C22204 * C1297 + C22207 * C313 +
                      C22203 * C328 + C22206 * C312 + C22202 * C326) *
                         C2698 -
                     (C22208 * C1298 + C22204 * C1305 + C22207 * C329 +
                      C22203 * C343 + C22206 * C327 + C22202 * C342) *
                         C48247) *
                        C48405 * C48141 * C48496) *
                       C3562 +
                   (((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                      C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                         C2698 -
                     ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                       C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                          C2691 +
                      (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                       C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                          C2697) +
                     (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                      C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                         C48247) *
                        C48405 * C48141 * C48538 +
                    ((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C2697 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C2691 -
                     (C22208 * C1866 + C22204 * C1870 + C22207 * C1418 +
                      C22203 * C1428 + C22206 * C1014 + C22202 * C1020) *
                         C2698 -
                     (C22208 * C1871 + C22204 * C1875 + C22207 * C1429 +
                      C22203 * C1445 + C22206 * C1021 + C22202 * C1029) *
                         C48247) *
                        C48405 * C48141 * C48525 +
                    ((C22206 * C1015 + C22202 * C1022 + C22207 * C1419 +
                      C22203 * C1430 + C22208 * C1867 + C22204 * C1872) *
                         C2698 -
                     ((C22208 * C1431 + C22204 * C1446 + C22207 * C1023 +
                       C22203 * C1030 + C22206 * C534 + C22202 * C552) *
                          C2691 +
                      (C22208 * C1419 + C22204 * C1430 + C22207 * C1015 +
                       C22203 * C1022 + C22206 * C522 + C22202 * C533) *
                          C2697) +
                     (C22206 * C1023 + C22202 * C1030 + C22207 * C1431 +
                      C22203 * C1446 + C22208 * C1873 + C22204 * C1876) *
                         C48247) *
                        C48405 * C48141 * C48496) *
                       C48289)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C2827 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C48548 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C2828 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C48544 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C2829 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C48534 -
                    (C22208 * C6227 + C22204 * C6229 + C22207 * C1284 +
                     C22203 * C1291 + C22206 * C1283 + C22202 * C1289) *
                        C2830 -
                    (C22208 * C6230 + C22204 * C6233 + C22207 * C1292 +
                     C22203 * C1302 + C22206 * C1290 + C22202 * C1301) *
                        C48512) *
                       C48405 * C48141 * C48156 * C3562 +
                   ((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                     C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                        C2828 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C48548 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C2827) +
                    (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                     C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                        C48544 -
                    (C22208 * C6867 + C22204 * C6869 + C22207 * C1865 +
                     C22203 * C1868 + C22206 * C1417 + C22202 * C1426) *
                        C2829 -
                    (C22208 * C6870 + C22204 * C6873 + C22207 * C1869 +
                     C22203 * C1874 + C22206 * C1427 + C22202 * C1444) *
                        C48534 +
                    (C22206 * C1865 + C22202 * C1868 + C22207 * C6867 +
                     C22203 * C6869 + C22208 * C23403 + C22204 * C23404) *
                        C2830 +
                    (C22206 * C1869 + C22202 * C1874 + C22207 * C6870 +
                     C22203 * C6873 + C22208 * C23405 + C22204 * C23406) *
                        C48512) *
                       C48405 * C48141 * C48156 * C48289)) /
                     (p * q * std::sqrt(p + q));
    d2ee[110] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C1557 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C1551 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C1558 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C1552 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C1559 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C1553 -
                    (C22208 * C6227 + C22204 * C6229 + C22207 * C1284 +
                     C22203 * C1291 + C22206 * C1283 + C22202 * C1289) *
                        C1560 -
                    (C22208 * C6230 + C22204 * C6233 + C22207 * C1292 +
                     C22203 * C1302 + C22206 * C1290 + C22202 * C1301) *
                        C48512) *
                       C48405 * C48141 * C48456 +
                   ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                     C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                        C1558 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C1551 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C1557) +
                    (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                     C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                        C1552 -
                    (C22208 * C1286 + C22204 * C1295 + C22207 * C1285 +
                     C22203 * C1293 + C22206 * C311 + C22202 * C324) *
                        C1559 -
                    (C22208 * C1296 + C22204 * C1304 + C22207 * C1294 +
                     C22203 * C1303 + C22206 * C325 + C22202 * C341) *
                        C1553 +
                    (C22206 * C1285 + C22202 * C1293 + C22207 * C1286 +
                     C22203 * C1295 + C22208 * C6228 + C22204 * C6231) *
                        C1560 +
                    (C22206 * C1294 + C22202 * C1303 + C22207 * C1296 +
                     C22203 * C1304 + C22208 * C6232 + C22204 * C6234) *
                        C48512) *
                       C48405 * C48141 * C48166) *
                  C48202) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C717 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C48470 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C718 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C48247) *
                       C48405 * C48141 * C713 +
                   ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                     C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                        C718 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C48470 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C717) +
                    (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                     C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                        C48247) *
                       C48405 * C48141 * C714 +
                   ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                     C22203 * C326 + C22208 * C313 + C22204 * C328) *
                        C717 +
                    (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                     C22203 * C342 + C22208 * C329 + C22204 * C343) *
                        C48470 -
                    (C22208 * C1287 + C22204 * C1297 + C22207 * C313 +
                     C22203 * C328 + C22206 * C312 + C22202 * C326) *
                        C718 -
                    (C22208 * C1298 + C22204 * C1305 + C22207 * C329 +
                     C22203 * C343 + C22206 * C327 + C22202 * C342) *
                        C48247) *
                       C48405 * C48141 * C715 +
                   ((C22206 * C314 + C22202 * C330 + C22207 * C315 +
                     C22203 * C332 + C22208 * C1561 + C22204 * C1562) *
                        C718 -
                    ((C22208 * C333 + C22204 * C345 + C22207 * C331 +
                      C22203 * C344 + C22206 * C128 + C22202 * C139) *
                         C48470 +
                     (C22208 * C315 + C22204 * C332 + C22207 * C314 +
                      C22203 * C330 + C22206 * C118 + C22202 * C129) *
                         C717) +
                    (C22206 * C331 + C22202 * C344 + C22207 * C333 +
                     C22203 * C345 + C22208 * C1563 + C22204 * C1564) *
                        C48247) *
                       C48405 * C48141 * C48506) *
                  C48202) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C717 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C48470 -
                     (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                      C22203 * C320 + C22206 * C308 + C22202 * C318) *
                         C718 -
                     (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                      C22203 * C339 + C22206 * C319 + C22202 * C338) *
                         C48247) *
                        C48405 * C48141 * C48456 +
                    ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                      C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                         C718 -
                     ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                       C22203 * C340 + C22206 * C125 + C22202 * C137) *
                          C48470 +
                      (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                       C22203 * C322 + C22206 * C116 + C22202 * C124) *
                          C717) +
                     (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                      C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                         C48247) *
                        C48405 * C48141 * C48166) *
                       C1987 +
                   (((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                      C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                         C718 -
                     ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                       C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                          C48470 +
                      (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                       C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                          C717) +
                     (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                      C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                         C48247) *
                        C48405 * C48141 * C48456 +
                    ((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C717 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C48470 -
                     (C22208 * C1866 + C22204 * C1870 + C22207 * C1418 +
                      C22203 * C1428 + C22206 * C1014 + C22202 * C1020) *
                         C718 -
                     (C22208 * C1871 + C22204 * C1875 + C22207 * C1429 +
                      C22203 * C1445 + C22206 * C1021 + C22202 * C1029) *
                         C48247) *
                        C48405 * C48141 * C48166) *
                       C1988 +
                   (((C22206 * C526 + C22202 * C541 + C22207 * C1420 +
                      C22203 * C1432 + C22208 * C1421 + C22204 * C1434) *
                         C717 +
                     (C22206 * C542 + C22202 * C556 + C22207 * C1433 +
                      C22203 * C1447 + C22208 * C1435 + C22204 * C1448) *
                         C48470 -
                     (C22208 * C6381 + C22204 * C6383 + C22207 * C1421 +
                      C22203 * C1434 + C22206 * C1420 + C22202 * C1432) *
                         C718 -
                     (C22208 * C6384 + C22204 * C6387 + C22207 * C1435 +
                      C22203 * C1448 + C22206 * C1433 + C22202 * C1447) *
                         C48247) *
                        C48405 * C48141 * C48456 +
                    ((C22206 * C1422 + C22202 * C1436 + C22207 * C1423 +
                      C22203 * C1438 + C22208 * C6382 + C22204 * C6385) *
                         C718 -
                     ((C22208 * C1439 + C22204 * C1450 + C22207 * C1437 +
                       C22203 * C1449 + C22206 * C544 + C22202 * C557) *
                          C48470 +
                      (C22208 * C1423 + C22204 * C1438 + C22207 * C1422 +
                       C22203 * C1436 + C22206 * C527 + C22202 * C543) *
                          C717) +
                     (C22206 * C1437 + C22202 * C1449 + C22207 * C1439 +
                      C22203 * C1450 + C22208 * C6386 + C22204 * C6388) *
                         C48247) *
                        C48405 * C48141 * C48166) *
                       C48505)) /
                     (p * q * std::sqrt(p + q));
    d2ee[111] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C1557 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C1551 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C1558 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C1552 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C1559 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C1553 -
                    (C22208 * C6227 + C22204 * C6229 + C22207 * C1284 +
                     C22203 * C1291 + C22206 * C1283 + C22202 * C1289) *
                        C1560 -
                    (C22208 * C6230 + C22204 * C6233 + C22207 * C1292 +
                     C22203 * C1302 + C22206 * C1290 + C22202 * C1301) *
                        C48512) *
                       C48405 * C48141 * C48156 * C48471 +
                   ((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                     C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                        C1558 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C1551 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C1557) +
                    (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                     C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                        C1552 -
                    (C22208 * C6867 + C22204 * C6869 + C22207 * C1865 +
                     C22203 * C1868 + C22206 * C1417 + C22202 * C1426) *
                        C1559 -
                    (C22208 * C6870 + C22204 * C6873 + C22207 * C1869 +
                     C22203 * C1874 + C22206 * C1427 + C22202 * C1444) *
                        C1553 +
                    (C22206 * C1865 + C22202 * C1868 + C22207 * C6867 +
                     C22203 * C6869 + C22208 * C23403 + C22204 * C23404) *
                        C1560 +
                    (C22206 * C1869 + C22202 * C1874 + C22207 * C6870 +
                     C22203 * C6873 + C22208 * C23405 + C22204 * C23406) *
                        C48512) *
                       C48405 * C48141 * C48156 * C48289)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C717 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C48470 -
                     (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                      C22203 * C320 + C22206 * C308 + C22202 * C318) *
                         C718 -
                     (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                      C22203 * C339 + C22206 * C319 + C22202 * C338) *
                         C48247) *
                        C48405 * C48141 * C302 +
                    ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                      C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                         C718 -
                     ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                       C22203 * C340 + C22206 * C125 + C22202 * C137) *
                          C48470 +
                      (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                       C22203 * C322 + C22206 * C116 + C22202 * C124) *
                          C717) +
                     (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                      C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                         C48247) *
                        C48405 * C48141 * C303 +
                    ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                      C22203 * C326 + C22208 * C313 + C22204 * C328) *
                         C717 +
                     (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                      C22203 * C342 + C22208 * C329 + C22204 * C343) *
                         C48470 -
                     (C22208 * C1287 + C22204 * C1297 + C22207 * C313 +
                      C22203 * C328 + C22206 * C312 + C22202 * C326) *
                         C718 -
                     (C22208 * C1298 + C22204 * C1305 + C22207 * C329 +
                      C22203 * C343 + C22206 * C327 + C22202 * C342) *
                         C48247) *
                        C48405 * C48141 * C48496) *
                       C48471 +
                   (((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                      C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                         C718 -
                     ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                       C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                          C48470 +
                      (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                       C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                          C717) +
                     (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                      C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                         C48247) *
                        C48405 * C48141 * C302 +
                    ((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C717 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C48470 -
                     (C22208 * C1866 + C22204 * C1870 + C22207 * C1418 +
                      C22203 * C1428 + C22206 * C1014 + C22202 * C1020) *
                         C718 -
                     (C22208 * C1871 + C22204 * C1875 + C22207 * C1429 +
                      C22203 * C1445 + C22206 * C1021 + C22202 * C1029) *
                         C48247) *
                        C48405 * C48141 * C303 +
                    ((C22206 * C1015 + C22202 * C1022 + C22207 * C1419 +
                      C22203 * C1430 + C22208 * C1867 + C22204 * C1872) *
                         C718 -
                     ((C22208 * C1431 + C22204 * C1446 + C22207 * C1023 +
                       C22203 * C1030 + C22206 * C534 + C22202 * C552) *
                          C48470 +
                      (C22208 * C1419 + C22204 * C1430 + C22207 * C1015 +
                       C22203 * C1022 + C22206 * C522 + C22202 * C533) *
                          C717) +
                     (C22206 * C1023 + C22202 * C1030 + C22207 * C1431 +
                      C22203 * C1446 + C22208 * C1873 + C22204 * C1876) *
                         C48247) *
                        C48405 * C48141 * C48496) *
                       C48289)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C717 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C48470 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C718 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C48247) *
                       C48405 * C48141 * C48156 * C2459 +
                   ((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                     C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                        C718 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C48470 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C717) +
                    (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                     C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                        C48247) *
                       C48405 * C48141 * C48156 * C2460 +
                   ((C22206 * C526 + C22202 * C541 + C22207 * C1420 +
                     C22203 * C1432 + C22208 * C1421 + C22204 * C1434) *
                        C717 +
                    (C22206 * C542 + C22202 * C556 + C22207 * C1433 +
                     C22203 * C1447 + C22208 * C1435 + C22204 * C1448) *
                        C48470 -
                    (C22208 * C6381 + C22204 * C6383 + C22207 * C1421 +
                     C22203 * C1434 + C22206 * C1420 + C22202 * C1432) *
                        C718 -
                    (C22208 * C6384 + C22204 * C6387 + C22207 * C1435 +
                     C22203 * C1448 + C22206 * C1433 + C22202 * C1447) *
                        C48247) *
                       C48405 * C48141 * C48156 * C2461 +
                   ((C22206 * C2581 + C22202 * C2584 + C22207 * C7735 +
                     C22203 * C7737 + C22208 * C24035 + C22204 * C24036) *
                        C718 -
                    ((C22208 * C7738 + C22204 * C7741 + C22207 * C2585 +
                      C22203 * C2590 + C22206 * C2177 + C22202 * C2187) *
                         C48470 +
                     (C22208 * C7735 + C22204 * C7737 + C22207 * C2581 +
                      C22203 * C2584 + C22206 * C2169 + C22202 * C2178) *
                         C717) +
                    (C22206 * C2585 + C22202 * C2590 + C22207 * C7738 +
                     C22203 * C7741 + C22208 * C24037 + C22204 * C24038) *
                        C48247) *
                       C48405 * C48141 * C48156 * C48518)) /
                     (p * q * std::sqrt(p + q));
    d2ee[112] += (0.5 * std::pow(Pi, 2.5) *
                      (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                         C22203 * C318 + C22208 * C309 + C22204 * C320) *
                            C114 +
                        (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                         C22203 * C338 + C22208 * C321 + C22204 * C339) *
                            C48184) *
                           C48405 * C48141 * C107 -
                       ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                         C22203 * C340 + C22206 * C125 + C22202 * C137) *
                            C48184 +
                        (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                         C22203 * C322 + C22206 * C116 + C22202 * C124) *
                            C114) *
                           C48405 * C48141 * C108 +
                       ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                         C22203 * C326 + C22208 * C313 + C22204 * C328) *
                            C114 +
                        (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                         C22203 * C342 + C22208 * C329 + C22204 * C343) *
                            C48184) *
                           C48405 * C48141 * C109 -
                       ((C22208 * C333 + C22204 * C345 + C22207 * C331 +
                         C22203 * C344 + C22206 * C128 + C22202 * C139) *
                            C48184 +
                        (C22208 * C315 + C22204 * C332 + C22207 * C314 +
                         C22203 * C330 + C22206 * C118 + C22202 * C129) *
                            C114) *
                           C48405 * C48141 * C110 +
                       ((C22206 * C119 + C22202 * C130 + C22207 * C316 +
                         C22203 * C334 + C22208 * C317 + C22204 * C336) *
                            C114 +
                        (C22206 * C131 + C22202 * C140 + C22207 * C335 +
                         C22203 * C346 + C22208 * C337 + C22204 * C347) *
                            C48184) *
                           C48405 * C48141 * C111) *
                      C48202 +
                  0.5 * std::pow(Pi, 2.5) *
                      (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                         C22203 * C318 + C22208 * C309 + C22204 * C320) *
                            C305 +
                        (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                         C22203 * C338 + C22208 * C321 + C22204 * C339) *
                            C48541 -
                        (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                         C22203 * C320 + C22206 * C308 + C22202 * C318) *
                            C306 -
                        (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                         C22203 * C339 + C22206 * C319 + C22202 * C338) *
                            C48529 +
                        (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                         C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                            C307 +
                        (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                         C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                            C48502) *
                           C48405 * C48141 * C302 +
                       ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                         C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                            C306 -
                        ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                          C22203 * C340 + C22206 * C125 + C22202 * C137) *
                             C48541 +
                         (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                          C22203 * C322 + C22206 * C116 + C22202 * C124) *
                             C305) +
                        (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                         C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                            C48529 -
                        (C22208 * C1286 + C22204 * C1295 + C22207 * C1285 +
                         C22203 * C1293 + C22206 * C311 + C22202 * C324) *
                            C307 -
                        (C22208 * C1296 + C22204 * C1304 + C22207 * C1294 +
                         C22203 * C1303 + C22206 * C325 + C22202 * C341) *
                            C48502) *
                           C48405 * C48141 * C303 +
                       ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                         C22203 * C326 + C22208 * C313 + C22204 * C328) *
                            C305 +
                        (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                         C22203 * C342 + C22208 * C329 + C22204 * C343) *
                            C48541 -
                        (C22208 * C1287 + C22204 * C1297 + C22207 * C313 +
                         C22203 * C328 + C22206 * C312 + C22202 * C326) *
                            C306 -
                        (C22208 * C1298 + C22204 * C1305 + C22207 * C329 +
                         C22203 * C343 + C22206 * C327 + C22202 * C342) *
                            C48529 +
                        (C22206 * C313 + C22202 * C328 + C22207 * C1287 +
                         C22203 * C1297 + C22208 * C1288 + C22204 * C1299) *
                            C307 +
                        (C22206 * C329 + C22202 * C343 + C22207 * C1298 +
                         C22203 * C1305 + C22208 * C1300 + C22204 * C1306) *
                            C48502) *
                           C48405 * C48141 * C48496) *
                      C48202) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C114 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C48184) *
                        C48405 * C48141 * C302 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C48184 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C114) *
                        C48405 * C48141 * C303 +
                    ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                      C22203 * C326 + C22208 * C313 + C22204 * C328) *
                         C114 +
                     (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                      C22203 * C342 + C22208 * C329 + C22204 * C343) *
                         C48184) *
                        C48405 * C48141 * C48496) *
                       C48542 +
                   (((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C114 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C48184) *
                        C48405 * C48141 * C303 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C48184 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C114) *
                        C48405 * C48141 * C302 -
                    ((C22208 * C1431 + C22204 * C1446 + C22207 * C1023 +
                      C22203 * C1030 + C22206 * C534 + C22202 * C552) *
                         C48184 +
                     (C22208 * C1419 + C22204 * C1430 + C22207 * C1015 +
                      C22203 * C1022 + C22206 * C522 + C22202 * C533) *
                         C114) *
                        C48405 * C48141 * C48496) *
                       C48531 +
                   (((C22206 * C526 + C22202 * C541 + C22207 * C1420 +
                      C22203 * C1432 + C22208 * C1421 + C22204 * C1434) *
                         C114 +
                     (C22206 * C542 + C22202 * C556 + C22207 * C1433 +
                      C22203 * C1447 + C22208 * C1435 + C22204 * C1448) *
                         C48184) *
                        C48405 * C48141 * C302 -
                    ((C22208 * C1439 + C22204 * C1450 + C22207 * C1437 +
                      C22203 * C1449 + C22206 * C544 + C22202 * C557) *
                         C48184 +
                     (C22208 * C1423 + C22204 * C1438 + C22207 * C1422 +
                      C22203 * C1436 + C22206 * C527 + C22202 * C543) *
                         C114) *
                        C48405 * C48141 * C303 +
                    ((C22206 * C528 + C22202 * C545 + C22207 * C1424 +
                      C22203 * C1440 + C22208 * C1425 + C22204 * C1442) *
                         C114 +
                     (C22206 * C546 + C22202 * C558 + C22207 * C1441 +
                      C22203 * C1451 + C22208 * C1443 + C22204 * C1452) *
                         C48184) *
                        C48405 * C48141 * C48496) *
                       C48505)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C1183 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C1177 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C1184 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C1178 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C1185 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C48502) *
                       C48405 * C48141 * C48538 +
                   ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                     C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                        C1184 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C1177 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C1183) +
                    (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                     C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                        C1178 -
                    (C22208 * C1286 + C22204 * C1295 + C22207 * C1285 +
                     C22203 * C1293 + C22206 * C311 + C22202 * C324) *
                        C1185 -
                    (C22208 * C1296 + C22204 * C1304 + C22207 * C1294 +
                     C22203 * C1303 + C22206 * C325 + C22202 * C341) *
                        C48502) *
                       C48405 * C48141 * C48525 +
                   ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                     C22203 * C326 + C22208 * C313 + C22204 * C328) *
                        C1183 +
                    (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                     C22203 * C342 + C22208 * C329 + C22204 * C343) *
                        C1177 -
                    (C22208 * C1287 + C22204 * C1297 + C22207 * C313 +
                     C22203 * C328 + C22206 * C312 + C22202 * C326) *
                        C1184 -
                    (C22208 * C1298 + C22204 * C1305 + C22207 * C329 +
                     C22203 * C343 + C22206 * C327 + C22202 * C342) *
                        C1178 +
                    (C22206 * C313 + C22202 * C328 + C22207 * C1287 +
                     C22203 * C1297 + C22208 * C1288 + C22204 * C1299) *
                        C1185 +
                    (C22206 * C329 + C22202 * C343 + C22207 * C1298 +
                     C22203 * C1305 + C22208 * C1300 + C22204 * C1306) *
                        C48502) *
                       C48405 * C48141 * C48496) *
                  C48202) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  ((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                    C22203 * C318 + C22208 * C309 + C22204 * C320) *
                       C1278 +
                   (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                    C22203 * C338 + C22208 * C321 + C22204 * C339) *
                       C1272 -
                   (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                    C22203 * C320 + C22206 * C308 + C22202 * C318) *
                       C1279 -
                   (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                    C22203 * C339 + C22206 * C319 + C22202 * C338) *
                       C1273 +
                   (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                    C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                       C1280 +
                   (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                    C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                       C1274 -
                   (C22208 * C6227 + C22204 * C6229 + C22207 * C1284 +
                    C22203 * C1291 + C22206 * C1283 + C22202 * C1289) *
                       C1281 -
                   (C22208 * C6230 + C22204 * C6233 + C22207 * C1292 +
                    C22203 * C1302 + C22206 * C1290 + C22202 * C1301) *
                       C1275 +
                   (C22206 * C1284 + C22202 * C1291 + C22207 * C6227 +
                    C22203 * C6229 + C22208 * C22943 + C22204 * C22944) *
                       C1282 +
                   (C22206 * C1292 + C22202 * C1302 + C22207 * C6230 +
                    C22203 * C6233 + C22208 * C22945 + C22204 * C22946) *
                       C1276) *
                  C48405 * C48141 * C48156 * C48202) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C1183 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C1177 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C1184 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C1178 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C1185 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C48502) *
                       C48405 * C48141 * C48156 * C48542 +
                   ((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                     C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                        C1184 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C1177 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C1183) +
                    (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                     C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                        C1178 -
                    (C22208 * C6867 + C22204 * C6869 + C22207 * C1865 +
                     C22203 * C1868 + C22206 * C1417 + C22202 * C1426) *
                        C1185 -
                    (C22208 * C6870 + C22204 * C6873 + C22207 * C1869 +
                     C22203 * C1874 + C22206 * C1427 + C22202 * C1444) *
                        C48502) *
                       C48405 * C48141 * C48156 * C48531 +
                   ((C22206 * C526 + C22202 * C541 + C22207 * C1420 +
                     C22203 * C1432 + C22208 * C1421 + C22204 * C1434) *
                        C1183 +
                    (C22206 * C542 + C22202 * C556 + C22207 * C1433 +
                     C22203 * C1447 + C22208 * C1435 + C22204 * C1448) *
                        C1177 -
                    (C22208 * C6381 + C22204 * C6383 + C22207 * C1421 +
                     C22203 * C1434 + C22206 * C1420 + C22202 * C1432) *
                        C1184 -
                    (C22208 * C6384 + C22204 * C6387 + C22207 * C1435 +
                     C22203 * C1448 + C22206 * C1433 + C22202 * C1447) *
                        C1178 +
                    (C22206 * C1421 + C22202 * C1434 + C22207 * C6381 +
                     C22203 * C6383 + C22208 * C23057 + C22204 * C23058) *
                        C1185 +
                    (C22206 * C1435 + C22202 * C1448 + C22207 * C6384 +
                     C22203 * C6387 + C22208 * C23059 + C22204 * C23060) *
                        C48502) *
                       C48405 * C48141 * C48156 * C48505)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C114 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C48184) *
                        C48405 * C48141 * C48538 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C48184 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C114) *
                        C48405 * C48141 * C48525 +
                    ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                      C22203 * C326 + C22208 * C313 + C22204 * C328) *
                         C114 +
                     (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                      C22203 * C342 + C22208 * C329 + C22204 * C343) *
                         C48184) *
                        C48405 * C48141 * C48496) *
                       C1987 +
                   (((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C114 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C48184) *
                        C48405 * C48141 * C48525 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C48184 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C114) *
                        C48405 * C48141 * C48538 -
                    ((C22208 * C1431 + C22204 * C1446 + C22207 * C1023 +
                      C22203 * C1030 + C22206 * C534 + C22202 * C552) *
                         C48184 +
                     (C22208 * C1419 + C22204 * C1430 + C22207 * C1015 +
                      C22203 * C1022 + C22206 * C522 + C22202 * C533) *
                         C114) *
                        C48405 * C48141 * C48496) *
                       C1988 +
                   (((C22206 * C526 + C22202 * C541 + C22207 * C1420 +
                      C22203 * C1432 + C22208 * C1421 + C22204 * C1434) *
                         C114 +
                     (C22206 * C542 + C22202 * C556 + C22207 * C1433 +
                      C22203 * C1447 + C22208 * C1435 + C22204 * C1448) *
                         C48184) *
                        C48405 * C48141 * C48538 -
                    ((C22208 * C1439 + C22204 * C1450 + C22207 * C1437 +
                      C22203 * C1449 + C22206 * C544 + C22202 * C557) *
                         C48184 +
                     (C22208 * C1423 + C22204 * C1438 + C22207 * C1422 +
                      C22203 * C1436 + C22206 * C527 + C22202 * C543) *
                         C114) *
                        C48405 * C48141 * C48525 +
                    ((C22206 * C528 + C22202 * C545 + C22207 * C1424 +
                      C22203 * C1440 + C22208 * C1425 + C22204 * C1442) *
                         C114 +
                     (C22206 * C546 + C22202 * C558 + C22207 * C1441 +
                      C22203 * C1451 + C22208 * C1443 + C22204 * C1452) *
                         C48184) *
                        C48405 * C48141 * C48496) *
                       C48505)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C305 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C48541 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C306 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C48529 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C307 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C48502) *
                       C48405 * C48141 * C48156 * C1987 +
                   ((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                     C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                        C306 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C48541 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C305) +
                    (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                     C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                        C48529 -
                    (C22208 * C6867 + C22204 * C6869 + C22207 * C1865 +
                     C22203 * C1868 + C22206 * C1417 + C22202 * C1426) *
                        C307 -
                    (C22208 * C6870 + C22204 * C6873 + C22207 * C1869 +
                     C22203 * C1874 + C22206 * C1427 + C22202 * C1444) *
                        C48502) *
                       C48405 * C48141 * C48156 * C1988 +
                   ((C22206 * C526 + C22202 * C541 + C22207 * C1420 +
                     C22203 * C1432 + C22208 * C1421 + C22204 * C1434) *
                        C305 +
                    (C22206 * C542 + C22202 * C556 + C22207 * C1433 +
                     C22203 * C1447 + C22208 * C1435 + C22204 * C1448) *
                        C48541 -
                    (C22208 * C6381 + C22204 * C6383 + C22207 * C1421 +
                     C22203 * C1434 + C22206 * C1420 + C22202 * C1432) *
                        C306 -
                    (C22208 * C6384 + C22204 * C6387 + C22207 * C1435 +
                     C22203 * C1448 + C22206 * C1433 + C22202 * C1447) *
                        C48529 +
                    (C22206 * C1421 + C22202 * C1434 + C22207 * C6381 +
                     C22203 * C6383 + C22208 * C23057 + C22204 * C23058) *
                        C307 +
                    (C22206 * C1435 + C22202 * C1448 + C22207 * C6384 +
                     C22203 * C6387 + C22208 * C23059 + C22204 * C23060) *
                        C48502) *
                       C48405 * C48141 * C48156 * C48505)) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C114 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C48184) *
                       C48405 * C48141 * C48156 * C2162 -
                   ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                     C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                        C48184 +
                    (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                     C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                        C114) *
                       C48405 * C48141 * C48156 * C2163 +
                   ((C22206 * C526 + C22202 * C541 + C22207 * C1420 +
                     C22203 * C1432 + C22208 * C1421 + C22204 * C1434) *
                        C114 +
                    (C22206 * C542 + C22202 * C556 + C22207 * C1433 +
                     C22203 * C1447 + C22208 * C1435 + C22204 * C1448) *
                        C48184) *
                       C48405 * C48141 * C48156 * C2164 -
                   ((C22208 * C7738 + C22204 * C7741 + C22207 * C2585 +
                     C22203 * C2590 + C22206 * C2177 + C22202 * C2187) *
                        C48184 +
                    (C22208 * C7735 + C22204 * C7737 + C22207 * C2581 +
                     C22203 * C2584 + C22206 * C2169 + C22202 * C2178) *
                        C114) *
                       C48405 * C48141 * C48156 * C2165 +
                   ((C22206 * C2170 + C22202 * C2179 + C22207 * C7249 +
                     C22203 * C7251 + C22208 * C23689 + C22204 * C23690) *
                        C114 +
                    (C22206 * C2180 + C22202 * C2188 + C22207 * C7252 +
                     C22203 * C7255 + C22208 * C23691 + C22204 * C23692) *
                        C48184) *
                       C48405 * C48141 * C48156 * C2166)) /
                     (p * q * std::sqrt(p + q));
    d2ee[113] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C1183 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C1177 -
                     (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                      C22203 * C320 + C22206 * C308 + C22202 * C318) *
                         C1184 -
                     (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                      C22203 * C339 + C22206 * C319 + C22202 * C338) *
                         C1178 +
                     (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                      C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                         C1185 +
                     (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                      C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                         C48502) *
                        C48405 * C48141 * C48456 +
                    ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                      C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                         C1184 -
                     ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                       C22203 * C340 + C22206 * C125 + C22202 * C137) *
                          C1177 +
                      (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                       C22203 * C322 + C22206 * C116 + C22202 * C124) *
                          C1183) +
                     (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                      C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                         C1178 -
                     (C22208 * C1286 + C22204 * C1295 + C22207 * C1285 +
                      C22203 * C1293 + C22206 * C311 + C22202 * C324) *
                         C1185 -
                     (C22208 * C1296 + C22204 * C1304 + C22207 * C1294 +
                      C22203 * C1303 + C22206 * C325 + C22202 * C341) *
                         C48502) *
                        C48405 * C48141 * C48166) *
                       C48471 +
                   (((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                      C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                         C1184 -
                     ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                       C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                          C1177 +
                      (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                       C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                          C1183) +
                     (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                      C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                         C1178 -
                     (C22208 * C6867 + C22204 * C6869 + C22207 * C1865 +
                      C22203 * C1868 + C22206 * C1417 + C22202 * C1426) *
                         C1185 -
                     (C22208 * C6870 + C22204 * C6873 + C22207 * C1869 +
                      C22203 * C1874 + C22206 * C1427 + C22202 * C1444) *
                         C48502) *
                        C48405 * C48141 * C48456 +
                    ((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C1183 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C1177 -
                     (C22208 * C1866 + C22204 * C1870 + C22207 * C1418 +
                      C22203 * C1428 + C22206 * C1014 + C22202 * C1020) *
                         C1184 -
                     (C22208 * C1871 + C22204 * C1875 + C22207 * C1429 +
                      C22203 * C1445 + C22206 * C1021 + C22202 * C1029) *
                         C1178 +
                     (C22206 * C1418 + C22202 * C1428 + C22207 * C1866 +
                      C22203 * C1870 + C22208 * C6868 + C22204 * C6871) *
                         C1185 +
                     (C22206 * C1429 + C22202 * C1445 + C22207 * C1871 +
                      C22203 * C1875 + C22208 * C6872 + C22204 * C6874) *
                         C48502) *
                        C48405 * C48141 * C48166) *
                       C48289)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C114 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C48184) *
                        C48405 * C48141 * C713 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C48184 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C114) *
                        C48405 * C48141 * C714 +
                    ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                      C22203 * C326 + C22208 * C313 + C22204 * C328) *
                         C114 +
                     (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                      C22203 * C342 + C22208 * C329 + C22204 * C343) *
                         C48184) *
                        C48405 * C48141 * C715 -
                    ((C22208 * C333 + C22204 * C345 + C22207 * C331 +
                      C22203 * C344 + C22206 * C128 + C22202 * C139) *
                         C48184 +
                     (C22208 * C315 + C22204 * C332 + C22207 * C314 +
                      C22203 * C330 + C22206 * C118 + C22202 * C129) *
                         C114) *
                        C48405 * C48141 * C48506) *
                       C48471 +
                   (((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C114 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C48184) *
                        C48405 * C48141 * C714 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C48184 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C114) *
                        C48405 * C48141 * C713 -
                    ((C22208 * C1431 + C22204 * C1446 + C22207 * C1023 +
                      C22203 * C1030 + C22206 * C534 + C22202 * C552) *
                         C48184 +
                     (C22208 * C1419 + C22204 * C1430 + C22207 * C1015 +
                      C22203 * C1022 + C22206 * C522 + C22202 * C533) *
                         C114) *
                        C48405 * C48141 * C715 +
                    ((C22206 * C523 + C22202 * C535 + C22207 * C1016 +
                      C22203 * C1024 + C22208 * C1739 + C22204 * C1740) *
                         C114 +
                     (C22206 * C536 + C22202 * C553 + C22207 * C1025 +
                      C22203 * C1031 + C22208 * C1741 + C22204 * C1742) *
                         C48184) *
                        C48405 * C48141 * C48506) *
                       C48289)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C114 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C48184) *
                        C48405 * C48141 * C48456 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C48184 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C114) *
                        C48405 * C48141 * C48166) *
                       C2459 +
                   (((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C114 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C48184) *
                        C48405 * C48141 * C48166 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C48184 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C114) *
                        C48405 * C48141 * C48456) *
                       C2460 +
                   (((C22206 * C526 + C22202 * C541 + C22207 * C1420 +
                      C22203 * C1432 + C22208 * C1421 + C22204 * C1434) *
                         C114 +
                     (C22206 * C542 + C22202 * C556 + C22207 * C1433 +
                      C22203 * C1447 + C22208 * C1435 + C22204 * C1448) *
                         C48184) *
                        C48405 * C48141 * C48456 -
                    ((C22208 * C1439 + C22204 * C1450 + C22207 * C1437 +
                      C22203 * C1449 + C22206 * C544 + C22202 * C557) *
                         C48184 +
                     (C22208 * C1423 + C22204 * C1438 + C22207 * C1422 +
                      C22203 * C1436 + C22206 * C527 + C22202 * C543) *
                         C114) *
                        C48405 * C48141 * C48166) *
                       C2461 +
                   (((C22206 * C2168 + C22202 * C2176 + C22207 * C2582 +
                      C22203 * C2586 + C22208 * C7736 + C22204 * C7739) *
                         C114 +
                     (C22206 * C2175 + C22202 * C2186 + C22207 * C2587 +
                      C22203 * C2591 + C22208 * C7740 + C22204 * C7742) *
                         C48184) *
                        C48405 * C48141 * C48166 -
                    ((C22208 * C7738 + C22204 * C7741 + C22207 * C2585 +
                      C22203 * C2590 + C22206 * C2177 + C22202 * C2187) *
                         C48184 +
                     (C22208 * C7735 + C22204 * C7737 + C22207 * C2581 +
                      C22203 * C2584 + C22206 * C2169 + C22202 * C2178) *
                         C114) *
                        C48405 * C48141 * C48456) *
                       C48518)) /
                     (p * q * std::sqrt(p + q));
    d2ee[114] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C305 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C48541 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C306 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C48529 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C307 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C48502) *
                       C48405 * C48141 * C302 +
                   ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                     C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                        C306 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C48541 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C305) +
                    (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                     C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                        C48529 -
                    (C22208 * C1286 + C22204 * C1295 + C22207 * C1285 +
                     C22203 * C1293 + C22206 * C311 + C22202 * C324) *
                        C307 -
                    (C22208 * C1296 + C22204 * C1304 + C22207 * C1294 +
                     C22203 * C1303 + C22206 * C325 + C22202 * C341) *
                        C48502) *
                       C48405 * C48141 * C303 +
                   ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                     C22203 * C326 + C22208 * C313 + C22204 * C328) *
                        C305 +
                    (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                     C22203 * C342 + C22208 * C329 + C22204 * C343) *
                        C48541 -
                    (C22208 * C1287 + C22204 * C1297 + C22207 * C313 +
                     C22203 * C328 + C22206 * C312 + C22202 * C326) *
                        C306 -
                    (C22208 * C1298 + C22204 * C1305 + C22207 * C329 +
                     C22203 * C343 + C22206 * C327 + C22202 * C342) *
                        C48529 +
                    (C22206 * C313 + C22202 * C328 + C22207 * C1287 +
                     C22203 * C1297 + C22208 * C1288 + C22204 * C1299) *
                        C307 +
                    (C22206 * C329 + C22202 * C343 + C22207 * C1298 +
                     C22203 * C1305 + C22208 * C1300 + C22204 * C1306) *
                        C48502) *
                       C48405 * C48141 * C48496) *
                  C48202) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C114 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C48184) *
                       C48405 * C48141 * C107 -
                   ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                     C22203 * C340 + C22206 * C125 + C22202 * C137) *
                        C48184 +
                    (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                     C22203 * C322 + C22206 * C116 + C22202 * C124) *
                        C114) *
                       C48405 * C48141 * C108 +
                   ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                     C22203 * C326 + C22208 * C313 + C22204 * C328) *
                        C114 +
                    (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                     C22203 * C342 + C22208 * C329 + C22204 * C343) *
                        C48184) *
                       C48405 * C48141 * C109 -
                   ((C22208 * C333 + C22204 * C345 + C22207 * C331 +
                     C22203 * C344 + C22206 * C128 + C22202 * C139) *
                        C48184 +
                    (C22208 * C315 + C22204 * C332 + C22207 * C314 +
                     C22203 * C330 + C22206 * C118 + C22202 * C129) *
                        C114) *
                       C48405 * C48141 * C110 +
                   ((C22206 * C119 + C22202 * C130 + C22207 * C316 +
                     C22203 * C334 + C22208 * C317 + C22204 * C336) *
                        C114 +
                    (C22206 * C131 + C22202 * C140 + C22207 * C335 +
                     C22203 * C346 + C22208 * C337 + C22204 * C347) *
                        C48184) *
                       C48405 * C48141 * C111) *
                  C48202) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C1183 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C1177 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C1184 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C1178 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C1185 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C48502) *
                       C48405 * C48141 * C48538 +
                   ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                     C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                        C1184 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C1177 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C1183) +
                    (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                     C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                        C1178 -
                    (C22208 * C1286 + C22204 * C1295 + C22207 * C1285 +
                     C22203 * C1293 + C22206 * C311 + C22202 * C324) *
                        C1185 -
                    (C22208 * C1296 + C22204 * C1304 + C22207 * C1294 +
                     C22203 * C1303 + C22206 * C325 + C22202 * C341) *
                        C48502) *
                       C48405 * C48141 * C48525 +
                   ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                     C22203 * C326 + C22208 * C313 + C22204 * C328) *
                        C1183 +
                    (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                     C22203 * C342 + C22208 * C329 + C22204 * C343) *
                        C1177 -
                    (C22208 * C1287 + C22204 * C1297 + C22207 * C313 +
                     C22203 * C328 + C22206 * C312 + C22202 * C326) *
                        C1184 -
                    (C22208 * C1298 + C22204 * C1305 + C22207 * C329 +
                     C22203 * C343 + C22206 * C327 + C22202 * C342) *
                        C1178 +
                    (C22206 * C313 + C22202 * C328 + C22207 * C1287 +
                     C22203 * C1297 + C22208 * C1288 + C22204 * C1299) *
                        C1185 +
                    (C22206 * C329 + C22202 * C343 + C22207 * C1298 +
                     C22203 * C1305 + C22208 * C1300 + C22204 * C1306) *
                        C48502) *
                       C48405 * C48141 * C48496) *
                  C48202) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                    C22203 * C318 + C22208 * C309 + C22204 * C320) *
                       C1278 +
                   (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                    C22203 * C338 + C22208 * C321 + C22204 * C339) *
                       C1272 -
                   (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                    C22203 * C320 + C22206 * C308 + C22202 * C318) *
                       C1279 -
                   (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                    C22203 * C339 + C22206 * C319 + C22202 * C338) *
                       C1273 +
                   (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                    C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                       C1280 +
                   (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                    C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                       C1274 -
                   (C22208 * C6227 + C22204 * C6229 + C22207 * C1284 +
                    C22203 * C1291 + C22206 * C1283 + C22202 * C1289) *
                       C1281 -
                   (C22208 * C6230 + C22204 * C6233 + C22207 * C1292 +
                    C22203 * C1302 + C22206 * C1290 + C22202 * C1301) *
                       C1275 +
                   (C22206 * C1284 + C22202 * C1291 + C22207 * C6227 +
                    C22203 * C6229 + C22208 * C22943 + C22204 * C22944) *
                       C1282 +
                   (C22206 * C1292 + C22202 * C1302 + C22207 * C6230 +
                    C22203 * C6233 + C22208 * C22945 + C22204 * C22946) *
                       C1276) *
                  C48405 * C48141 * C48156 * C48202) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C114 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C48184) *
                        C48405 * C48141 * C48538 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C48184 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C114) *
                        C48405 * C48141 * C48525 +
                    ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                      C22203 * C326 + C22208 * C313 + C22204 * C328) *
                         C114 +
                     (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                      C22203 * C342 + C22208 * C329 + C22204 * C343) *
                         C48184) *
                        C48405 * C48141 * C48496) *
                       C1987 +
                   (((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C114 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C48184) *
                        C48405 * C48141 * C48525 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C48184 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C114) *
                        C48405 * C48141 * C48538 -
                    ((C22208 * C1431 + C22204 * C1446 + C22207 * C1023 +
                      C22203 * C1030 + C22206 * C534 + C22202 * C552) *
                         C48184 +
                     (C22208 * C1419 + C22204 * C1430 + C22207 * C1015 +
                      C22203 * C1022 + C22206 * C522 + C22202 * C533) *
                         C114) *
                        C48405 * C48141 * C48496) *
                       C1988 +
                   (((C22206 * C526 + C22202 * C541 + C22207 * C1420 +
                      C22203 * C1432 + C22208 * C1421 + C22204 * C1434) *
                         C114 +
                     (C22206 * C542 + C22202 * C556 + C22207 * C1433 +
                      C22203 * C1447 + C22208 * C1435 + C22204 * C1448) *
                         C48184) *
                        C48405 * C48141 * C48538 -
                    ((C22208 * C1439 + C22204 * C1450 + C22207 * C1437 +
                      C22203 * C1449 + C22206 * C544 + C22202 * C557) *
                         C48184 +
                     (C22208 * C1423 + C22204 * C1438 + C22207 * C1422 +
                      C22203 * C1436 + C22206 * C527 + C22202 * C543) *
                         C114) *
                        C48405 * C48141 * C48525 +
                    ((C22206 * C528 + C22202 * C545 + C22207 * C1424 +
                      C22203 * C1440 + C22208 * C1425 + C22204 * C1442) *
                         C114 +
                     (C22206 * C546 + C22202 * C558 + C22207 * C1441 +
                      C22203 * C1451 + C22208 * C1443 + C22204 * C1452) *
                         C48184) *
                        C48405 * C48141 * C48496) *
                       C48505)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C305 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C48541 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C306 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C48529 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C307 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C48502) *
                       C48405 * C48141 * C48156 * C1987 +
                   ((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                     C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                        C306 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C48541 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C305) +
                    (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                     C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                        C48529 -
                    (C22208 * C6867 + C22204 * C6869 + C22207 * C1865 +
                     C22203 * C1868 + C22206 * C1417 + C22202 * C1426) *
                        C307 -
                    (C22208 * C6870 + C22204 * C6873 + C22207 * C1869 +
                     C22203 * C1874 + C22206 * C1427 + C22202 * C1444) *
                        C48502) *
                       C48405 * C48141 * C48156 * C1988 +
                   ((C22206 * C526 + C22202 * C541 + C22207 * C1420 +
                     C22203 * C1432 + C22208 * C1421 + C22204 * C1434) *
                        C305 +
                    (C22206 * C542 + C22202 * C556 + C22207 * C1433 +
                     C22203 * C1447 + C22208 * C1435 + C22204 * C1448) *
                        C48541 -
                    (C22208 * C6381 + C22204 * C6383 + C22207 * C1421 +
                     C22203 * C1434 + C22206 * C1420 + C22202 * C1432) *
                        C306 -
                    (C22208 * C6384 + C22204 * C6387 + C22207 * C1435 +
                     C22203 * C1448 + C22206 * C1433 + C22202 * C1447) *
                        C48529 +
                    (C22206 * C1421 + C22202 * C1434 + C22207 * C6381 +
                     C22203 * C6383 + C22208 * C23057 + C22204 * C23058) *
                        C307 +
                    (C22206 * C1435 + C22202 * C1448 + C22207 * C6384 +
                     C22203 * C6387 + C22208 * C23059 + C22204 * C23060) *
                        C48502) *
                       C48405 * C48141 * C48156 * C48505)) /
                     (p * q * std::sqrt(p + q));
    d2ee[115] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C717 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C48470 -
                     (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                      C22203 * C320 + C22206 * C308 + C22202 * C318) *
                         C718 -
                     (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                      C22203 * C339 + C22206 * C319 + C22202 * C338) *
                         C48247) *
                        C48405 * C48141 * C48161 +
                    ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                      C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                         C718 -
                     ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                       C22203 * C340 + C22206 * C125 + C22202 * C137) *
                          C48470 +
                      (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                       C22203 * C322 + C22206 * C116 + C22202 * C124) *
                          C717) +
                     (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                      C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                         C48247) *
                        C48405 * C48141 * C48169 +
                    ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                      C22203 * C326 + C22208 * C313 + C22204 * C328) *
                         C717 +
                     (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                      C22203 * C342 + C22208 * C329 + C22204 * C343) *
                         C48470 -
                     (C22208 * C1287 + C22204 * C1297 + C22207 * C313 +
                      C22203 * C328 + C22206 * C312 + C22202 * C326) *
                         C718 -
                     (C22208 * C1298 + C22204 * C1305 + C22207 * C329 +
                      C22203 * C343 + C22206 * C327 + C22202 * C342) *
                         C48247) *
                        C48405 * C48141 * C3124) *
                       C3562 +
                   (((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                      C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                         C718 -
                     ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                       C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                          C48470 +
                      (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                       C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                          C717) +
                     (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                      C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                         C48247) *
                        C48405 * C48141 * C48161 +
                    ((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C717 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C48470 -
                     (C22208 * C1866 + C22204 * C1870 + C22207 * C1418 +
                      C22203 * C1428 + C22206 * C1014 + C22202 * C1020) *
                         C718 -
                     (C22208 * C1871 + C22204 * C1875 + C22207 * C1429 +
                      C22203 * C1445 + C22206 * C1021 + C22202 * C1029) *
                         C48247) *
                        C48405 * C48141 * C48169 +
                    ((C22206 * C1015 + C22202 * C1022 + C22207 * C1419 +
                      C22203 * C1430 + C22208 * C1867 + C22204 * C1872) *
                         C718 -
                     ((C22208 * C1431 + C22204 * C1446 + C22207 * C1023 +
                       C22203 * C1030 + C22206 * C534 + C22202 * C552) *
                          C48470 +
                      (C22208 * C1419 + C22204 * C1430 + C22207 * C1015 +
                       C22203 * C1022 + C22206 * C522 + C22202 * C533) *
                          C717) +
                     (C22206 * C1023 + C22202 * C1030 + C22207 * C1431 +
                      C22203 * C1446 + C22208 * C1873 + C22204 * C1876) *
                         C48247) *
                        C48405 * C48141 * C3124) *
                       C48289)) /
                 (p * q * std::sqrt(p + q));
    d2ee[116] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C717 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C48470 -
                     (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                      C22203 * C320 + C22206 * C308 + C22202 * C318) *
                         C718 -
                     (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                      C22203 * C339 + C22206 * C319 + C22202 * C338) *
                         C48247) *
                        C48405 * C48141 * C2825 +
                    ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                      C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                         C718 -
                     ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                       C22203 * C340 + C22206 * C125 + C22202 * C137) *
                          C48470 +
                      (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                       C22203 * C322 + C22206 * C116 + C22202 * C124) *
                          C717) +
                     (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                      C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                         C48247) *
                        C48405 * C48141 * C48166) *
                       C48285 +
                   (((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                      C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                         C718 -
                     ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                       C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                          C48470 +
                      (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                       C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                          C717) +
                     (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                      C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                         C48247) *
                        C48405 * C48141 * C2825 +
                    ((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C717 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C48470 -
                     (C22208 * C1866 + C22204 * C1870 + C22207 * C1418 +
                      C22203 * C1428 + C22206 * C1014 + C22202 * C1020) *
                         C718 -
                     (C22208 * C1871 + C22204 * C1875 + C22207 * C1429 +
                      C22203 * C1445 + C22206 * C1021 + C22202 * C1029) *
                         C48247) *
                        C48405 * C48141 * C48166) *
                       C48292 +
                   (((C22206 * C526 + C22202 * C541 + C22207 * C1420 +
                      C22203 * C1432 + C22208 * C1421 + C22204 * C1434) *
                         C717 +
                     (C22206 * C542 + C22202 * C556 + C22207 * C1433 +
                      C22203 * C1447 + C22208 * C1435 + C22204 * C1448) *
                         C48470 -
                     (C22208 * C6381 + C22204 * C6383 + C22207 * C1421 +
                      C22203 * C1434 + C22206 * C1420 + C22202 * C1432) *
                         C718 -
                     (C22208 * C6384 + C22204 * C6387 + C22207 * C1435 +
                      C22203 * C1448 + C22206 * C1433 + C22202 * C1447) *
                         C48247) *
                        C48405 * C48141 * C2825 +
                    ((C22206 * C1422 + C22202 * C1436 + C22207 * C1423 +
                      C22203 * C1438 + C22208 * C6382 + C22204 * C6385) *
                         C718 -
                     ((C22208 * C1439 + C22204 * C1450 + C22207 * C1437 +
                       C22203 * C1449 + C22206 * C544 + C22202 * C557) *
                          C48470 +
                      (C22208 * C1423 + C22204 * C1438 + C22207 * C1422 +
                       C22203 * C1436 + C22206 * C527 + C22202 * C543) *
                          C717) +
                     (C22206 * C1437 + C22202 * C1449 + C22207 * C1439 +
                      C22203 * C1450 + C22208 * C6386 + C22204 * C6388) *
                         C48247) *
                        C48405 * C48141 * C48166) *
                       C4082)) /
                 (p * q * std::sqrt(p + q));
    d2ee[117] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C305 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C48541 -
                     (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                      C22203 * C320 + C22206 * C308 + C22202 * C318) *
                         C306 -
                     (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                      C22203 * C339 + C22206 * C319 + C22202 * C338) *
                         C48529 +
                     (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                      C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                         C307 +
                     (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                      C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                         C48502) *
                        C48405 * C48141 * C2825 +
                    ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                      C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                         C306 -
                     ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                       C22203 * C340 + C22206 * C125 + C22202 * C137) *
                          C48541 +
                      (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                       C22203 * C322 + C22206 * C116 + C22202 * C124) *
                          C305) +
                     (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                      C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                         C48529 -
                     (C22208 * C1286 + C22204 * C1295 + C22207 * C1285 +
                      C22203 * C1293 + C22206 * C311 + C22202 * C324) *
                         C307 -
                     (C22208 * C1296 + C22204 * C1304 + C22207 * C1294 +
                      C22203 * C1303 + C22206 * C325 + C22202 * C341) *
                         C48502) *
                        C48405 * C48141 * C48166) *
                       C3562 +
                   (((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                      C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                         C306 -
                     ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                       C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                          C48541 +
                      (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                       C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                          C305) +
                     (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                      C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                         C48529 -
                     (C22208 * C6867 + C22204 * C6869 + C22207 * C1865 +
                      C22203 * C1868 + C22206 * C1417 + C22202 * C1426) *
                         C307 -
                     (C22208 * C6870 + C22204 * C6873 + C22207 * C1869 +
                      C22203 * C1874 + C22206 * C1427 + C22202 * C1444) *
                         C48502) *
                        C48405 * C48141 * C2825 +
                    ((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C305 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C48541 -
                     (C22208 * C1866 + C22204 * C1870 + C22207 * C1418 +
                      C22203 * C1428 + C22206 * C1014 + C22202 * C1020) *
                         C306 -
                     (C22208 * C1871 + C22204 * C1875 + C22207 * C1429 +
                      C22203 * C1445 + C22206 * C1021 + C22202 * C1029) *
                         C48529 +
                     (C22206 * C1418 + C22202 * C1428 + C22207 * C1866 +
                      C22203 * C1870 + C22208 * C6868 + C22204 * C6871) *
                         C307 +
                     (C22206 * C1429 + C22202 * C1445 + C22207 * C1871 +
                      C22203 * C1875 + C22208 * C6872 + C22204 * C6874) *
                         C48502) *
                        C48405 * C48141 * C48166) *
                       C48289)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C114 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C48184) *
                        C48405 * C48141 * C48547 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C48184 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C114) *
                        C48405 * C48141 * C48540 +
                    ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                      C22203 * C326 + C22208 * C313 + C22204 * C328) *
                         C114 +
                     (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                      C22203 * C342 + C22208 * C329 + C22204 * C343) *
                         C48184) *
                        C48405 * C48141 * C48527 -
                    ((C22208 * C333 + C22204 * C345 + C22207 * C331 +
                      C22203 * C344 + C22206 * C128 + C22202 * C139) *
                         C48184 +
                     (C22208 * C315 + C22204 * C332 + C22207 * C314 +
                      C22203 * C330 + C22206 * C118 + C22202 * C129) *
                         C114) *
                        C48405 * C48141 * C48506) *
                       C3562 +
                   (((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C114 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C48184) *
                        C48405 * C48141 * C48540 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C48184 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C114) *
                        C48405 * C48141 * C48547 -
                    ((C22208 * C1431 + C22204 * C1446 + C22207 * C1023 +
                      C22203 * C1030 + C22206 * C534 + C22202 * C552) *
                         C48184 +
                     (C22208 * C1419 + C22204 * C1430 + C22207 * C1015 +
                      C22203 * C1022 + C22206 * C522 + C22202 * C533) *
                         C114) *
                        C48405 * C48141 * C48527 +
                    ((C22206 * C523 + C22202 * C535 + C22207 * C1016 +
                      C22203 * C1024 + C22208 * C1739 + C22204 * C1740) *
                         C114 +
                     (C22206 * C536 + C22202 * C553 + C22207 * C1025 +
                      C22203 * C1031 + C22208 * C1741 + C22204 * C1742) *
                         C48184) *
                        C48405 * C48141 * C48506) *
                       C48289)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C114 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C48184) *
                        C48405 * C48141 * C2825 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C48184 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C114) *
                        C48405 * C48141 * C48166) *
                       C48549 +
                   (((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C114 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C48184) *
                        C48405 * C48141 * C48166 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C48184 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C114) *
                        C48405 * C48141 * C2825) *
                       C48546 +
                   (((C22206 * C526 + C22202 * C541 + C22207 * C1420 +
                      C22203 * C1432 + C22208 * C1421 + C22204 * C1434) *
                         C114 +
                     (C22206 * C542 + C22202 * C556 + C22207 * C1433 +
                      C22203 * C1447 + C22208 * C1435 + C22204 * C1448) *
                         C48184) *
                        C48405 * C48141 * C2825 -
                    ((C22208 * C1439 + C22204 * C1450 + C22207 * C1437 +
                      C22203 * C1449 + C22206 * C544 + C22202 * C557) *
                         C48184 +
                     (C22208 * C1423 + C22204 * C1438 + C22207 * C1422 +
                      C22203 * C1436 + C22206 * C527 + C22202 * C543) *
                         C114) *
                        C48405 * C48141 * C48166) *
                       C48537 +
                   (((C22206 * C2168 + C22202 * C2176 + C22207 * C2582 +
                      C22203 * C2586 + C22208 * C7736 + C22204 * C7739) *
                         C114 +
                     (C22206 * C2175 + C22202 * C2186 + C22207 * C2587 +
                      C22203 * C2591 + C22208 * C7740 + C22204 * C7742) *
                         C48184) *
                        C48405 * C48141 * C48166 -
                    ((C22208 * C7738 + C22204 * C7741 + C22207 * C2585 +
                      C22203 * C2590 + C22206 * C2177 + C22202 * C2187) *
                         C48184 +
                     (C22208 * C7735 + C22204 * C7737 + C22207 * C2581 +
                      C22203 * C2584 + C22206 * C2169 + C22202 * C2178) *
                         C114) *
                        C48405 * C48141 * C2825) *
                       C48518)) /
                     (p * q * std::sqrt(p + q));
    d2ee[118] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C114 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C48184) *
                        C48405 * C48141 * C48161 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C48184 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C114) *
                        C48405 * C48141 * C48169 +
                    ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                      C22203 * C326 + C22208 * C313 + C22204 * C328) *
                         C114 +
                     (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                      C22203 * C342 + C22208 * C329 + C22204 * C343) *
                         C48184) *
                        C48405 * C48141 * C3124) *
                       C48285 +
                   (((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C114 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C48184) *
                        C48405 * C48141 * C48169 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C48184 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C114) *
                        C48405 * C48141 * C48161 -
                    ((C22208 * C1431 + C22204 * C1446 + C22207 * C1023 +
                      C22203 * C1030 + C22206 * C534 + C22202 * C552) *
                         C48184 +
                     (C22208 * C1419 + C22204 * C1430 + C22207 * C1015 +
                      C22203 * C1022 + C22206 * C522 + C22202 * C533) *
                         C114) *
                        C48405 * C48141 * C3124) *
                       C48292 +
                   (((C22206 * C526 + C22202 * C541 + C22207 * C1420 +
                      C22203 * C1432 + C22208 * C1421 + C22204 * C1434) *
                         C114 +
                     (C22206 * C542 + C22202 * C556 + C22207 * C1433 +
                      C22203 * C1447 + C22208 * C1435 + C22204 * C1448) *
                         C48184) *
                        C48405 * C48141 * C48161 -
                    ((C22208 * C1439 + C22204 * C1450 + C22207 * C1437 +
                      C22203 * C1449 + C22206 * C544 + C22202 * C557) *
                         C48184 +
                     (C22208 * C1423 + C22204 * C1438 + C22207 * C1422 +
                      C22203 * C1436 + C22206 * C527 + C22202 * C543) *
                         C114) *
                        C48405 * C48141 * C48169 +
                    ((C22206 * C528 + C22202 * C545 + C22207 * C1424 +
                      C22203 * C1440 + C22208 * C1425 + C22204 * C1442) *
                         C114 +
                     (C22206 * C546 + C22202 * C558 + C22207 * C1441 +
                      C22203 * C1451 + C22208 * C1443 + C22204 * C1452) *
                         C48184) *
                        C48405 * C48141 * C3124) *
                       C4082)) /
                 (p * q * std::sqrt(p + q));
    d2ee[119] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C114 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C48184) *
                        C48405 * C48141 * C48547 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C48184 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C114) *
                        C48405 * C48141 * C48540 +
                    ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                      C22203 * C326 + C22208 * C313 + C22204 * C328) *
                         C114 +
                     (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                      C22203 * C342 + C22208 * C329 + C22204 * C343) *
                         C48184) *
                        C48405 * C48141 * C48527 -
                    ((C22208 * C333 + C22204 * C345 + C22207 * C331 +
                      C22203 * C344 + C22206 * C128 + C22202 * C139) *
                         C48184 +
                     (C22208 * C315 + C22204 * C332 + C22207 * C314 +
                      C22203 * C330 + C22206 * C118 + C22202 * C129) *
                         C114) *
                        C48405 * C48141 * C48506) *
                       C3562 +
                   (((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C114 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C48184) *
                        C48405 * C48141 * C48540 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C48184 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C114) *
                        C48405 * C48141 * C48547 -
                    ((C22208 * C1431 + C22204 * C1446 + C22207 * C1023 +
                      C22203 * C1030 + C22206 * C534 + C22202 * C552) *
                         C48184 +
                     (C22208 * C1419 + C22204 * C1430 + C22207 * C1015 +
                      C22203 * C1022 + C22206 * C522 + C22202 * C533) *
                         C114) *
                        C48405 * C48141 * C48527 +
                    ((C22206 * C523 + C22202 * C535 + C22207 * C1016 +
                      C22203 * C1024 + C22208 * C1739 + C22204 * C1740) *
                         C114 +
                     (C22206 * C536 + C22202 * C553 + C22207 * C1025 +
                      C22203 * C1031 + C22208 * C1741 + C22204 * C1742) *
                         C48184) *
                        C48405 * C48141 * C48506) *
                       C48289)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C305 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C48541 -
                     (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                      C22203 * C320 + C22206 * C308 + C22202 * C318) *
                         C306 -
                     (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                      C22203 * C339 + C22206 * C319 + C22202 * C338) *
                         C48529 +
                     (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                      C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                         C307 +
                     (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                      C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                         C48502) *
                        C48405 * C48141 * C2825 +
                    ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                      C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                         C306 -
                     ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                       C22203 * C340 + C22206 * C125 + C22202 * C137) *
                          C48541 +
                      (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                       C22203 * C322 + C22206 * C116 + C22202 * C124) *
                          C305) +
                     (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                      C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                         C48529 -
                     (C22208 * C1286 + C22204 * C1295 + C22207 * C1285 +
                      C22203 * C1293 + C22206 * C311 + C22202 * C324) *
                         C307 -
                     (C22208 * C1296 + C22204 * C1304 + C22207 * C1294 +
                      C22203 * C1303 + C22206 * C325 + C22202 * C341) *
                         C48502) *
                        C48405 * C48141 * C48166) *
                       C3562 +
                   (((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                      C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                         C306 -
                     ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                       C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                          C48541 +
                      (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                       C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                          C305) +
                     (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                      C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                         C48529 -
                     (C22208 * C6867 + C22204 * C6869 + C22207 * C1865 +
                      C22203 * C1868 + C22206 * C1417 + C22202 * C1426) *
                         C307 -
                     (C22208 * C6870 + C22204 * C6873 + C22207 * C1869 +
                      C22203 * C1874 + C22206 * C1427 + C22202 * C1444) *
                         C48502) *
                        C48405 * C48141 * C2825 +
                    ((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C305 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C48541 -
                     (C22208 * C1866 + C22204 * C1870 + C22207 * C1418 +
                      C22203 * C1428 + C22206 * C1014 + C22202 * C1020) *
                         C306 -
                     (C22208 * C1871 + C22204 * C1875 + C22207 * C1429 +
                      C22203 * C1445 + C22206 * C1021 + C22202 * C1029) *
                         C48529 +
                     (C22206 * C1418 + C22202 * C1428 + C22207 * C1866 +
                      C22203 * C1870 + C22208 * C6868 + C22204 * C6871) *
                         C307 +
                     (C22206 * C1429 + C22202 * C1445 + C22207 * C1871 +
                      C22203 * C1875 + C22208 * C6872 + C22204 * C6874) *
                         C48502) *
                        C48405 * C48141 * C48166) *
                       C48289)) /
                     (p * q * std::sqrt(p + q));
    d2ee[120] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C717 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C48470 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C718 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C48247) *
                       C48405 * C48141 * C713 +
                   ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                     C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                        C718 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C48470 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C717) +
                    (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                     C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                        C48247) *
                       C48405 * C48141 * C714 +
                   ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                     C22203 * C326 + C22208 * C313 + C22204 * C328) *
                        C717 +
                    (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                     C22203 * C342 + C22208 * C329 + C22204 * C343) *
                        C48470 -
                    (C22208 * C1287 + C22204 * C1297 + C22207 * C313 +
                     C22203 * C328 + C22206 * C312 + C22202 * C326) *
                        C718 -
                    (C22208 * C1298 + C22204 * C1305 + C22207 * C329 +
                     C22203 * C343 + C22206 * C327 + C22202 * C342) *
                        C48247) *
                       C48405 * C48141 * C715 +
                   ((C22206 * C314 + C22202 * C330 + C22207 * C315 +
                     C22203 * C332 + C22208 * C1561 + C22204 * C1562) *
                        C718 -
                    ((C22208 * C333 + C22204 * C345 + C22207 * C331 +
                      C22203 * C344 + C22206 * C128 + C22202 * C139) *
                         C48470 +
                     (C22208 * C315 + C22204 * C332 + C22207 * C314 +
                      C22203 * C330 + C22206 * C118 + C22202 * C129) *
                         C717) +
                    (C22206 * C331 + C22202 * C344 + C22207 * C333 +
                     C22203 * C345 + C22208 * C1563 + C22204 * C1564) *
                        C48247) *
                       C48405 * C48141 * C48506) *
                  C48202) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C1557 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C1551 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C1558 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C1552 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C1559 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C1553 -
                    (C22208 * C6227 + C22204 * C6229 + C22207 * C1284 +
                     C22203 * C1291 + C22206 * C1283 + C22202 * C1289) *
                        C1560 -
                    (C22208 * C6230 + C22204 * C6233 + C22207 * C1292 +
                     C22203 * C1302 + C22206 * C1290 + C22202 * C1301) *
                        C48512) *
                       C48405 * C48141 * C48456 +
                   ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                     C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                        C1558 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C1551 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C1557) +
                    (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                     C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                        C1552 -
                    (C22208 * C1286 + C22204 * C1295 + C22207 * C1285 +
                     C22203 * C1293 + C22206 * C311 + C22202 * C324) *
                        C1559 -
                    (C22208 * C1296 + C22204 * C1304 + C22207 * C1294 +
                     C22203 * C1303 + C22206 * C325 + C22202 * C341) *
                        C1553 +
                    (C22206 * C1285 + C22202 * C1293 + C22207 * C1286 +
                     C22203 * C1295 + C22208 * C6228 + C22204 * C6231) *
                        C1560 +
                    (C22206 * C1294 + C22202 * C1303 + C22207 * C1296 +
                     C22203 * C1304 + C22208 * C6232 + C22204 * C6234) *
                        C48512) *
                       C48405 * C48141 * C48166) *
                  C48202) /
                     (p * q * std::sqrt(p + q));
    d2ee[121] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C717 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C48470 -
                     (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                      C22203 * C320 + C22206 * C308 + C22202 * C318) *
                         C718 -
                     (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                      C22203 * C339 + C22206 * C319 + C22202 * C338) *
                         C48247) *
                        C48405 * C48141 * C302 +
                    ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                      C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                         C718 -
                     ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                       C22203 * C340 + C22206 * C125 + C22202 * C137) *
                          C48470 +
                      (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                       C22203 * C322 + C22206 * C116 + C22202 * C124) *
                          C717) +
                     (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                      C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                         C48247) *
                        C48405 * C48141 * C303 +
                    ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                      C22203 * C326 + C22208 * C313 + C22204 * C328) *
                         C717 +
                     (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                      C22203 * C342 + C22208 * C329 + C22204 * C343) *
                         C48470 -
                     (C22208 * C1287 + C22204 * C1297 + C22207 * C313 +
                      C22203 * C328 + C22206 * C312 + C22202 * C326) *
                         C718 -
                     (C22208 * C1298 + C22204 * C1305 + C22207 * C329 +
                      C22203 * C343 + C22206 * C327 + C22202 * C342) *
                         C48247) *
                        C48405 * C48141 * C48496) *
                       C48471 +
                   (((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                      C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                         C718 -
                     ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                       C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                          C48470 +
                      (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                       C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                          C717) +
                     (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                      C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                         C48247) *
                        C48405 * C48141 * C302 +
                    ((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C717 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C48470 -
                     (C22208 * C1866 + C22204 * C1870 + C22207 * C1418 +
                      C22203 * C1428 + C22206 * C1014 + C22202 * C1020) *
                         C718 -
                     (C22208 * C1871 + C22204 * C1875 + C22207 * C1429 +
                      C22203 * C1445 + C22206 * C1021 + C22202 * C1029) *
                         C48247) *
                        C48405 * C48141 * C303 +
                    ((C22206 * C1015 + C22202 * C1022 + C22207 * C1419 +
                      C22203 * C1430 + C22208 * C1867 + C22204 * C1872) *
                         C718 -
                     ((C22208 * C1431 + C22204 * C1446 + C22207 * C1023 +
                       C22203 * C1030 + C22206 * C534 + C22202 * C552) *
                          C48470 +
                      (C22208 * C1419 + C22204 * C1430 + C22207 * C1015 +
                       C22203 * C1022 + C22206 * C522 + C22202 * C533) *
                          C717) +
                     (C22206 * C1023 + C22202 * C1030 + C22207 * C1431 +
                      C22203 * C1446 + C22208 * C1873 + C22204 * C1876) *
                         C48247) *
                        C48405 * C48141 * C48496) *
                       C48289)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C1557 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C1551 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C1558 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C1552 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C1559 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C1553 -
                    (C22208 * C6227 + C22204 * C6229 + C22207 * C1284 +
                     C22203 * C1291 + C22206 * C1283 + C22202 * C1289) *
                        C1560 -
                    (C22208 * C6230 + C22204 * C6233 + C22207 * C1292 +
                     C22203 * C1302 + C22206 * C1290 + C22202 * C1301) *
                        C48512) *
                       C48405 * C48141 * C48156 * C48471 +
                   ((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                     C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                        C1558 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C1551 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C1557) +
                    (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                     C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                        C1552 -
                    (C22208 * C6867 + C22204 * C6869 + C22207 * C1865 +
                     C22203 * C1868 + C22206 * C1417 + C22202 * C1426) *
                        C1559 -
                    (C22208 * C6870 + C22204 * C6873 + C22207 * C1869 +
                     C22203 * C1874 + C22206 * C1427 + C22202 * C1444) *
                        C1553 +
                    (C22206 * C1865 + C22202 * C1868 + C22207 * C6867 +
                     C22203 * C6869 + C22208 * C23403 + C22204 * C23404) *
                        C1560 +
                    (C22206 * C1869 + C22202 * C1874 + C22207 * C6870 +
                     C22203 * C6873 + C22208 * C23405 + C22204 * C23406) *
                        C48512) *
                       C48405 * C48141 * C48156 * C48289)) /
                     (p * q * std::sqrt(p + q));
    d2ee[122] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C305 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C48541 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C306 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C48529 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C307 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C48502) *
                       C48405 * C48141 * C302 +
                   ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                     C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                        C306 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C48541 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C305) +
                    (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                     C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                        C48529 -
                    (C22208 * C1286 + C22204 * C1295 + C22207 * C1285 +
                     C22203 * C1293 + C22206 * C311 + C22202 * C324) *
                        C307 -
                    (C22208 * C1296 + C22204 * C1304 + C22207 * C1294 +
                     C22203 * C1303 + C22206 * C325 + C22202 * C341) *
                        C48502) *
                       C48405 * C48141 * C303 +
                   ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                     C22203 * C326 + C22208 * C313 + C22204 * C328) *
                        C305 +
                    (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                     C22203 * C342 + C22208 * C329 + C22204 * C343) *
                        C48541 -
                    (C22208 * C1287 + C22204 * C1297 + C22207 * C313 +
                     C22203 * C328 + C22206 * C312 + C22202 * C326) *
                        C306 -
                    (C22208 * C1298 + C22204 * C1305 + C22207 * C329 +
                     C22203 * C343 + C22206 * C327 + C22202 * C342) *
                        C48529 +
                    (C22206 * C313 + C22202 * C328 + C22207 * C1287 +
                     C22203 * C1297 + C22208 * C1288 + C22204 * C1299) *
                        C307 +
                    (C22206 * C329 + C22202 * C343 + C22207 * C1298 +
                     C22203 * C1305 + C22208 * C1300 + C22204 * C1306) *
                        C48502) *
                       C48405 * C48141 * C48496) *
                  C48202) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C114 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C48184) *
                       C48405 * C48141 * C107 -
                   ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                     C22203 * C340 + C22206 * C125 + C22202 * C137) *
                        C48184 +
                    (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                     C22203 * C322 + C22206 * C116 + C22202 * C124) *
                        C114) *
                       C48405 * C48141 * C108 +
                   ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                     C22203 * C326 + C22208 * C313 + C22204 * C328) *
                        C114 +
                    (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                     C22203 * C342 + C22208 * C329 + C22204 * C343) *
                        C48184) *
                       C48405 * C48141 * C109 -
                   ((C22208 * C333 + C22204 * C345 + C22207 * C331 +
                     C22203 * C344 + C22206 * C128 + C22202 * C139) *
                        C48184 +
                    (C22208 * C315 + C22204 * C332 + C22207 * C314 +
                     C22203 * C330 + C22206 * C118 + C22202 * C129) *
                        C114) *
                       C48405 * C48141 * C110 +
                   ((C22206 * C119 + C22202 * C130 + C22207 * C316 +
                     C22203 * C334 + C22208 * C317 + C22204 * C336) *
                        C114 +
                    (C22206 * C131 + C22202 * C140 + C22207 * C335 +
                     C22203 * C346 + C22208 * C337 + C22204 * C347) *
                        C48184) *
                       C48405 * C48141 * C111) *
                  C48202) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C114 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C48184) *
                        C48405 * C48141 * C302 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C48184 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C114) *
                        C48405 * C48141 * C303 +
                    ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                      C22203 * C326 + C22208 * C313 + C22204 * C328) *
                         C114 +
                     (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                      C22203 * C342 + C22208 * C329 + C22204 * C343) *
                         C48184) *
                        C48405 * C48141 * C48496) *
                       C48542 +
                   (((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C114 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C48184) *
                        C48405 * C48141 * C303 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C48184 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C114) *
                        C48405 * C48141 * C302 -
                    ((C22208 * C1431 + C22204 * C1446 + C22207 * C1023 +
                      C22203 * C1030 + C22206 * C534 + C22202 * C552) *
                         C48184 +
                     (C22208 * C1419 + C22204 * C1430 + C22207 * C1015 +
                      C22203 * C1022 + C22206 * C522 + C22202 * C533) *
                         C114) *
                        C48405 * C48141 * C48496) *
                       C48531 +
                   (((C22206 * C526 + C22202 * C541 + C22207 * C1420 +
                      C22203 * C1432 + C22208 * C1421 + C22204 * C1434) *
                         C114 +
                     (C22206 * C542 + C22202 * C556 + C22207 * C1433 +
                      C22203 * C1447 + C22208 * C1435 + C22204 * C1448) *
                         C48184) *
                        C48405 * C48141 * C302 -
                    ((C22208 * C1439 + C22204 * C1450 + C22207 * C1437 +
                      C22203 * C1449 + C22206 * C544 + C22202 * C557) *
                         C48184 +
                     (C22208 * C1423 + C22204 * C1438 + C22207 * C1422 +
                      C22203 * C1436 + C22206 * C527 + C22202 * C543) *
                         C114) *
                        C48405 * C48141 * C303 +
                    ((C22206 * C528 + C22202 * C545 + C22207 * C1424 +
                      C22203 * C1440 + C22208 * C1425 + C22204 * C1442) *
                         C114 +
                     (C22206 * C546 + C22202 * C558 + C22207 * C1441 +
                      C22203 * C1451 + C22208 * C1443 + C22204 * C1452) *
                         C48184) *
                        C48405 * C48141 * C48496) *
                       C48505)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C1183 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C1177 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C1184 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C1178 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C1185 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C48502) *
                       C48405 * C48141 * C48538 +
                   ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                     C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                        C1184 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C1177 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C1183) +
                    (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                     C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                        C1178 -
                    (C22208 * C1286 + C22204 * C1295 + C22207 * C1285 +
                     C22203 * C1293 + C22206 * C311 + C22202 * C324) *
                        C1185 -
                    (C22208 * C1296 + C22204 * C1304 + C22207 * C1294 +
                     C22203 * C1303 + C22206 * C325 + C22202 * C341) *
                        C48502) *
                       C48405 * C48141 * C48525 +
                   ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                     C22203 * C326 + C22208 * C313 + C22204 * C328) *
                        C1183 +
                    (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                     C22203 * C342 + C22208 * C329 + C22204 * C343) *
                        C1177 -
                    (C22208 * C1287 + C22204 * C1297 + C22207 * C313 +
                     C22203 * C328 + C22206 * C312 + C22202 * C326) *
                        C1184 -
                    (C22208 * C1298 + C22204 * C1305 + C22207 * C329 +
                     C22203 * C343 + C22206 * C327 + C22202 * C342) *
                        C1178 +
                    (C22206 * C313 + C22202 * C328 + C22207 * C1287 +
                     C22203 * C1297 + C22208 * C1288 + C22204 * C1299) *
                        C1185 +
                    (C22206 * C329 + C22202 * C343 + C22207 * C1298 +
                     C22203 * C1305 + C22208 * C1300 + C22204 * C1306) *
                        C48502) *
                       C48405 * C48141 * C48496) *
                  C48202) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                    C22203 * C318 + C22208 * C309 + C22204 * C320) *
                       C1278 +
                   (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                    C22203 * C338 + C22208 * C321 + C22204 * C339) *
                       C1272 -
                   (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                    C22203 * C320 + C22206 * C308 + C22202 * C318) *
                       C1279 -
                   (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                    C22203 * C339 + C22206 * C319 + C22202 * C338) *
                       C1273 +
                   (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                    C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                       C1280 +
                   (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                    C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                       C1274 -
                   (C22208 * C6227 + C22204 * C6229 + C22207 * C1284 +
                    C22203 * C1291 + C22206 * C1283 + C22202 * C1289) *
                       C1281 -
                   (C22208 * C6230 + C22204 * C6233 + C22207 * C1292 +
                    C22203 * C1302 + C22206 * C1290 + C22202 * C1301) *
                       C1275 +
                   (C22206 * C1284 + C22202 * C1291 + C22207 * C6227 +
                    C22203 * C6229 + C22208 * C22943 + C22204 * C22944) *
                       C1282 +
                   (C22206 * C1292 + C22202 * C1302 + C22207 * C6230 +
                    C22203 * C6233 + C22208 * C22945 + C22204 * C22946) *
                       C1276) *
                  C48405 * C48141 * C48156 * C48202) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C1183 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C1177 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C1184 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C1178 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C1185 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C48502) *
                       C48405 * C48141 * C48156 * C48542 +
                   ((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                     C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                        C1184 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C1177 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C1183) +
                    (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                     C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                        C1178 -
                    (C22208 * C6867 + C22204 * C6869 + C22207 * C1865 +
                     C22203 * C1868 + C22206 * C1417 + C22202 * C1426) *
                        C1185 -
                    (C22208 * C6870 + C22204 * C6873 + C22207 * C1869 +
                     C22203 * C1874 + C22206 * C1427 + C22202 * C1444) *
                        C48502) *
                       C48405 * C48141 * C48156 * C48531 +
                   ((C22206 * C526 + C22202 * C541 + C22207 * C1420 +
                     C22203 * C1432 + C22208 * C1421 + C22204 * C1434) *
                        C1183 +
                    (C22206 * C542 + C22202 * C556 + C22207 * C1433 +
                     C22203 * C1447 + C22208 * C1435 + C22204 * C1448) *
                        C1177 -
                    (C22208 * C6381 + C22204 * C6383 + C22207 * C1421 +
                     C22203 * C1434 + C22206 * C1420 + C22202 * C1432) *
                        C1184 -
                    (C22208 * C6384 + C22204 * C6387 + C22207 * C1435 +
                     C22203 * C1448 + C22206 * C1433 + C22202 * C1447) *
                        C1178 +
                    (C22206 * C1421 + C22202 * C1434 + C22207 * C6381 +
                     C22203 * C6383 + C22208 * C23057 + C22204 * C23058) *
                        C1185 +
                    (C22206 * C1435 + C22202 * C1448 + C22207 * C6384 +
                     C22203 * C6387 + C22208 * C23059 + C22204 * C23060) *
                        C48502) *
                       C48405 * C48141 * C48156 * C48505)) /
                     (p * q * std::sqrt(p + q));
    d2ee[123] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C114 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C48184) *
                        C48405 * C48141 * C713 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C48184 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C114) *
                        C48405 * C48141 * C714 +
                    ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                      C22203 * C326 + C22208 * C313 + C22204 * C328) *
                         C114 +
                     (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                      C22203 * C342 + C22208 * C329 + C22204 * C343) *
                         C48184) *
                        C48405 * C48141 * C715 -
                    ((C22208 * C333 + C22204 * C345 + C22207 * C331 +
                      C22203 * C344 + C22206 * C128 + C22202 * C139) *
                         C48184 +
                     (C22208 * C315 + C22204 * C332 + C22207 * C314 +
                      C22203 * C330 + C22206 * C118 + C22202 * C129) *
                         C114) *
                        C48405 * C48141 * C48506) *
                       C48471 +
                   (((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C114 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C48184) *
                        C48405 * C48141 * C714 -
                    ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                      C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                         C48184 +
                     (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                      C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                         C114) *
                        C48405 * C48141 * C713 -
                    ((C22208 * C1431 + C22204 * C1446 + C22207 * C1023 +
                      C22203 * C1030 + C22206 * C534 + C22202 * C552) *
                         C48184 +
                     (C22208 * C1419 + C22204 * C1430 + C22207 * C1015 +
                      C22203 * C1022 + C22206 * C522 + C22202 * C533) *
                         C114) *
                        C48405 * C48141 * C715 +
                    ((C22206 * C523 + C22202 * C535 + C22207 * C1016 +
                      C22203 * C1024 + C22208 * C1739 + C22204 * C1740) *
                         C114 +
                     (C22206 * C536 + C22202 * C553 + C22207 * C1025 +
                      C22203 * C1031 + C22208 * C1741 + C22204 * C1742) *
                         C48184) *
                        C48405 * C48141 * C48506) *
                       C48289)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                      C22203 * C318 + C22208 * C309 + C22204 * C320) *
                         C1183 +
                     (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                      C22203 * C338 + C22208 * C321 + C22204 * C339) *
                         C1177 -
                     (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                      C22203 * C320 + C22206 * C308 + C22202 * C318) *
                         C1184 -
                     (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                      C22203 * C339 + C22206 * C319 + C22202 * C338) *
                         C1178 +
                     (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                      C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                         C1185 +
                     (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                      C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                         C48502) *
                        C48405 * C48141 * C48456 +
                    ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                      C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                         C1184 -
                     ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                       C22203 * C340 + C22206 * C125 + C22202 * C137) *
                          C1177 +
                      (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                       C22203 * C322 + C22206 * C116 + C22202 * C124) *
                          C1183) +
                     (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                      C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                         C1178 -
                     (C22208 * C1286 + C22204 * C1295 + C22207 * C1285 +
                      C22203 * C1293 + C22206 * C311 + C22202 * C324) *
                         C1185 -
                     (C22208 * C1296 + C22204 * C1304 + C22207 * C1294 +
                      C22203 * C1303 + C22206 * C325 + C22202 * C341) *
                         C48502) *
                        C48405 * C48141 * C48166) *
                       C48471 +
                   (((C22206 * C1013 + C22202 * C1018 + C22207 * C1417 +
                      C22203 * C1426 + C22208 * C1865 + C22204 * C1868) *
                         C1184 -
                     ((C22208 * C1427 + C22204 * C1444 + C22207 * C1019 +
                       C22203 * C1028 + C22206 * C537 + C22202 * C554) *
                          C1177 +
                      (C22208 * C1417 + C22204 * C1426 + C22207 * C1013 +
                       C22203 * C1018 + C22206 * C524 + C22202 * C538) *
                          C1183) +
                     (C22206 * C1019 + C22202 * C1028 + C22207 * C1427 +
                      C22203 * C1444 + C22208 * C1869 + C22204 * C1874) *
                         C1178 -
                     (C22208 * C6867 + C22204 * C6869 + C22207 * C1865 +
                      C22203 * C1868 + C22206 * C1417 + C22202 * C1426) *
                         C1185 -
                     (C22208 * C6870 + C22204 * C6873 + C22207 * C1869 +
                      C22203 * C1874 + C22206 * C1427 + C22202 * C1444) *
                         C48502) *
                        C48405 * C48141 * C48456 +
                    ((C22206 * C521 + C22202 * C531 + C22207 * C1014 +
                      C22203 * C1020 + C22208 * C1418 + C22204 * C1428) *
                         C1183 +
                     (C22206 * C532 + C22202 * C551 + C22207 * C1021 +
                      C22203 * C1029 + C22208 * C1429 + C22204 * C1445) *
                         C1177 -
                     (C22208 * C1866 + C22204 * C1870 + C22207 * C1418 +
                      C22203 * C1428 + C22206 * C1014 + C22202 * C1020) *
                         C1184 -
                     (C22208 * C1871 + C22204 * C1875 + C22207 * C1429 +
                      C22203 * C1445 + C22206 * C1021 + C22202 * C1029) *
                         C1178 +
                     (C22206 * C1418 + C22202 * C1428 + C22207 * C1866 +
                      C22203 * C1870 + C22208 * C6868 + C22204 * C6871) *
                         C1185 +
                     (C22206 * C1429 + C22202 * C1445 + C22207 * C1871 +
                      C22203 * C1875 + C22208 * C6872 + C22204 * C6874) *
                         C48502) *
                        C48405 * C48141 * C48166) *
                       C48289)) /
                     (p * q * std::sqrt(p + q));
    d2ee[124] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C114 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C48184) *
                       C48405 * C48141 * C107 -
                   ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                     C22203 * C340 + C22206 * C125 + C22202 * C137) *
                        C48184 +
                    (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                     C22203 * C322 + C22206 * C116 + C22202 * C124) *
                        C114) *
                       C48405 * C48141 * C108 +
                   ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                     C22203 * C326 + C22208 * C313 + C22204 * C328) *
                        C114 +
                    (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                     C22203 * C342 + C22208 * C329 + C22204 * C343) *
                        C48184) *
                       C48405 * C48141 * C109 -
                   ((C22208 * C333 + C22204 * C345 + C22207 * C331 +
                     C22203 * C344 + C22206 * C128 + C22202 * C139) *
                        C48184 +
                    (C22208 * C315 + C22204 * C332 + C22207 * C314 +
                     C22203 * C330 + C22206 * C118 + C22202 * C129) *
                        C114) *
                       C48405 * C48141 * C110 +
                   ((C22206 * C119 + C22202 * C130 + C22207 * C316 +
                     C22203 * C334 + C22208 * C317 + C22204 * C336) *
                        C114 +
                    (C22206 * C131 + C22202 * C140 + C22207 * C335 +
                     C22203 * C346 + C22208 * C337 + C22204 * C347) *
                        C48184) *
                       C48405 * C48141 * C111) *
                  C48202) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C305 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C48541 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C306 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C48529 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C307 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C48502) *
                       C48405 * C48141 * C302 +
                   ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                     C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                        C306 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C48541 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C305) +
                    (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                     C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                        C48529 -
                    (C22208 * C1286 + C22204 * C1295 + C22207 * C1285 +
                     C22203 * C1293 + C22206 * C311 + C22202 * C324) *
                        C307 -
                    (C22208 * C1296 + C22204 * C1304 + C22207 * C1294 +
                     C22203 * C1303 + C22206 * C325 + C22202 * C341) *
                        C48502) *
                       C48405 * C48141 * C303 +
                   ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                     C22203 * C326 + C22208 * C313 + C22204 * C328) *
                        C305 +
                    (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                     C22203 * C342 + C22208 * C329 + C22204 * C343) *
                        C48541 -
                    (C22208 * C1287 + C22204 * C1297 + C22207 * C313 +
                     C22203 * C328 + C22206 * C312 + C22202 * C326) *
                        C306 -
                    (C22208 * C1298 + C22204 * C1305 + C22207 * C329 +
                     C22203 * C343 + C22206 * C327 + C22202 * C342) *
                        C48529 +
                    (C22206 * C313 + C22202 * C328 + C22207 * C1287 +
                     C22203 * C1297 + C22208 * C1288 + C22204 * C1299) *
                        C307 +
                    (C22206 * C329 + C22202 * C343 + C22207 * C1298 +
                     C22203 * C1305 + C22208 * C1300 + C22204 * C1306) *
                        C48502) *
                       C48405 * C48141 * C48496) *
                  C48202) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                     C22203 * C318 + C22208 * C309 + C22204 * C320) *
                        C1183 +
                    (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                     C22203 * C338 + C22208 * C321 + C22204 * C339) *
                        C1177 -
                    (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                     C22203 * C320 + C22206 * C308 + C22202 * C318) *
                        C1184 -
                    (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                     C22203 * C339 + C22206 * C319 + C22202 * C338) *
                        C1178 +
                    (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                     C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                        C1185 +
                    (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                     C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                        C48502) *
                       C48405 * C48141 * C48538 +
                   ((C22206 * C310 + C22202 * C322 + C22207 * C311 +
                     C22203 * C324 + C22208 * C1285 + C22204 * C1293) *
                        C1184 -
                    ((C22208 * C325 + C22204 * C341 + C22207 * C323 +
                      C22203 * C340 + C22206 * C125 + C22202 * C137) *
                         C1177 +
                     (C22208 * C311 + C22204 * C324 + C22207 * C310 +
                      C22203 * C322 + C22206 * C116 + C22202 * C124) *
                         C1183) +
                    (C22206 * C323 + C22202 * C340 + C22207 * C325 +
                     C22203 * C341 + C22208 * C1294 + C22204 * C1303) *
                        C1178 -
                    (C22208 * C1286 + C22204 * C1295 + C22207 * C1285 +
                     C22203 * C1293 + C22206 * C311 + C22202 * C324) *
                        C1185 -
                    (C22208 * C1296 + C22204 * C1304 + C22207 * C1294 +
                     C22203 * C1303 + C22206 * C325 + C22202 * C341) *
                        C48502) *
                       C48405 * C48141 * C48525 +
                   ((C22206 * C117 + C22202 * C126 + C22207 * C312 +
                     C22203 * C326 + C22208 * C313 + C22204 * C328) *
                        C1183 +
                    (C22206 * C127 + C22202 * C138 + C22207 * C327 +
                     C22203 * C342 + C22208 * C329 + C22204 * C343) *
                        C1177 -
                    (C22208 * C1287 + C22204 * C1297 + C22207 * C313 +
                     C22203 * C328 + C22206 * C312 + C22202 * C326) *
                        C1184 -
                    (C22208 * C1298 + C22204 * C1305 + C22207 * C329 +
                     C22203 * C343 + C22206 * C327 + C22202 * C342) *
                        C1178 +
                    (C22206 * C313 + C22202 * C328 + C22207 * C1287 +
                     C22203 * C1297 + C22208 * C1288 + C22204 * C1299) *
                        C1185 +
                    (C22206 * C329 + C22202 * C343 + C22207 * C1298 +
                     C22203 * C1305 + C22208 * C1300 + C22204 * C1306) *
                        C48502) *
                       C48405 * C48141 * C48496) *
                  C48202) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((C22206 * C115 + C22202 * C122 + C22207 * C308 +
                    C22203 * C318 + C22208 * C309 + C22204 * C320) *
                       C1278 +
                   (C22206 * C123 + C22202 * C136 + C22207 * C319 +
                    C22203 * C338 + C22208 * C321 + C22204 * C339) *
                       C1272 -
                   (C22208 * C1283 + C22204 * C1289 + C22207 * C309 +
                    C22203 * C320 + C22206 * C308 + C22202 * C318) *
                       C1279 -
                   (C22208 * C1290 + C22204 * C1301 + C22207 * C321 +
                    C22203 * C339 + C22206 * C319 + C22202 * C338) *
                       C1273 +
                   (C22206 * C309 + C22202 * C320 + C22207 * C1283 +
                    C22203 * C1289 + C22208 * C1284 + C22204 * C1291) *
                       C1280 +
                   (C22206 * C321 + C22202 * C339 + C22207 * C1290 +
                    C22203 * C1301 + C22208 * C1292 + C22204 * C1302) *
                       C1274 -
                   (C22208 * C6227 + C22204 * C6229 + C22207 * C1284 +
                    C22203 * C1291 + C22206 * C1283 + C22202 * C1289) *
                       C1281 -
                   (C22208 * C6230 + C22204 * C6233 + C22207 * C1292 +
                    C22203 * C1302 + C22206 * C1290 + C22202 * C1301) *
                       C1275 +
                   (C22206 * C1284 + C22202 * C1291 + C22207 * C6227 +
                    C22203 * C6229 + C22208 * C22943 + C22204 * C22944) *
                       C1282 +
                   (C22206 * C1292 + C22202 * C1302 + C22207 * C6230 +
                    C22203 * C6233 + C22208 * C22945 + C22204 * C22946) *
                       C1276) *
                  C48405 * C48141 * C48156 * C48202) /
                     (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C47163 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48243 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C47155 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48250 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C47169 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C3121) *
               C10789 +
           ((C26662 + C26663) * C47163 + (C26664 + C26665) * C48243 -
            (C27132 + C27133) * C47155 - (C27134 + C27135) * C48250 +
            (C27534 + C27535) * C47169 + (C27536 + C27537) * C3121) *
               C48522) *
              C48141 * C48161 +
          (((C16762 + C16761) * C47155 -
            ((C16570 + C16569) * C48243 + (C16568 + C16567) * C47163) +
            (C16764 + C16763) * C48250 - (C16766 + C16765) * C47169 -
            (C16768 + C16767) * C3121) *
               C10789 +
           ((C17465 + C17466) * C47155 -
            ((C16958 + C16957) * C48243 + (C16956 + C16955) * C47163) +
            (C17467 + C17468) * C48250 - (C18191 + C18192) * C47169 -
            (C18193 + C18194) * C3121) *
               C48522) *
              C48141 * C48169 +
          (((C16574 + C16573) * C47163 + (C16572 + C16571) * C48243 -
            (C16770 + C16769) * C47155 - (C16772 + C16771) * C48250 +
            (C16774 + C16773) * C47169 + (C16776 + C16775) * C3121) *
               C10789 +
           ((C16959 + C16960) * C47163 + (C16961 + C16962) * C48243 -
            (C17469 + C17470) * C47155 - (C17471 + C17472) * C48250 +
            (C16532 * C1419 + C16528 * C1430 + C16533 * C1867 +
             C48520 * C1872) *
                C47169 +
            (C16532 * C1431 + C16528 * C1446 + C16533 * C1873 +
             C48520 * C1876) *
                C3121) *
               C48522) *
              C48141 * C3124) *
         C48202) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C47163 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48243 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C47155 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48250 +
             (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                 C47169 +
             (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                 C3121) *
                C10789 +
            ((C26662 + C26663) * C47163 + (C26664 + C26665) * C48243 -
             (C27132 + C27133) * C47155 - (C27134 + C27135) * C48250 +
             (C27534 + C27535) * C47169 + (C27536 + C27537) * C3121) *
                C48522) *
               C48141 * C2825 +
           (((C16762 + C16761) * C47155 -
             ((C16570 + C16569) * C48243 + (C16568 + C16567) * C47163) +
             (C16764 + C16763) * C48250 - (C16766 + C16765) * C47169 -
             (C16768 + C16767) * C3121) *
                C10789 +
            ((C17465 + C17466) * C47155 -
             ((C16958 + C16957) * C48243 + (C16956 + C16955) * C47163) +
             (C17467 + C17468) * C48250 - (C18191 + C18192) * C47169 -
             (C18193 + C18194) * C3121) *
                C48522) *
               C48141 * C48166) *
              C48471 +
          ((((C27133 + C27132) * C47155 -
             ((C26665 + C26664) * C48243 + (C26663 + C26662) * C47163) +
             (C27135 + C27134) * C48250 - (C27535 + C27534) * C47169 -
             (C27537 + C27536) * C3121) *
                C10789 +
            ((C27538 + C27539) * C47155 -
             ((C26666 + C26667) * C48243 + (C26668 + C26669) * C47163) +
             (C27540 + C27541) * C48250 - (C27542 + C27543) * C47169 -
             (C27544 + C27545) * C3121) *
                C48522) *
               C48141 * C2825 +
           (((C16955 + C16956) * C47163 + (C16957 + C16958) * C48243 -
             (C17466 + C17465) * C47155 - (C17468 + C17467) * C48250 +
             (C18192 + C18191) * C47169 + (C18194 + C18193) * C3121) *
                C10789 +
            ((C16963 + C16964) * C47163 + (C16965 + C16966) * C48243 -
             (C18901 + C18902) * C47155 - (C18903 + C18904) * C48250 +
             (C16532 * C1423 + C16528 * C1438 + C16533 * C6382 +
              C48520 * C6385) *
                 C47169 +
             (C16532 * C1439 + C16528 * C1450 + C16533 * C6386 +
              C48520 * C6388) *
                 C3121) *
                C48522) *
               C48141 * C48166) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C2827 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48548 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C2828 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48544 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C2829 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48534 -
            (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 +
             C16528 * C1289) *
                C2830 -
            (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 +
             C16528 * C1301) *
                C48512) *
               C10789 +
           ((C26662 + C26663) * C2827 + (C26664 + C26665) * C48548 -
            (C27132 + C27133) * C2828 - (C27134 + C27135) * C48544 +
            (C27534 + C27535) * C2829 + (C27536 + C27537) * C48534 -
            (C28008 + C28009) * C2830 - (C28010 + C28011) * C48512) *
               C48522) *
              C48141 * C2825 +
          (((C16762 + C16761) * C2828 -
            ((C16570 + C16569) * C48548 + (C16568 + C16567) * C2827) +
            (C16764 + C16763) * C48544 - (C16766 + C16765) * C2829 -
            (C16768 + C16767) * C48534 + (C17986 + C17985) * C2830 +
            (C17988 + C17987) * C48512) *
               C10789 +
           ((C17465 + C17466) * C2828 -
            ((C16958 + C16957) * C48548 + (C16956 + C16955) * C2827) +
            (C17467 + C17468) * C48544 - (C18191 + C18192) * C2829 -
            (C18193 + C18194) * C48534 +
            (C16532 * C1866 + C16528 * C1870 + C16533 * C6868 +
             C48520 * C6871) *
                C2830 +
            (C16532 * C1871 + C16528 * C1875 + C16533 * C6872 +
             C48520 * C6874) *
                C48512) *
               C48522) *
              C48141 * C48166) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C2697 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C2691 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C2698 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48247) *
               C10789 +
           ((C26662 + C26663) * C2697 + (C26664 + C26665) * C2691 -
            (C27132 + C27133) * C2698 - (C27134 + C27135) * C48247) *
               C48522) *
              C48141 * C48547 +
          (((C16762 + C16761) * C2698 -
            ((C16570 + C16569) * C2691 + (C16568 + C16567) * C2697) +
            (C16764 + C16763) * C48247) *
               C10789 +
           ((C17465 + C17466) * C2698 -
            ((C16958 + C16957) * C2691 + (C16956 + C16955) * C2697) +
            (C17467 + C17468) * C48247) *
               C48522) *
              C48141 * C48540 +
          (((C16574 + C16573) * C2697 + (C16572 + C16571) * C2691 -
            (C16770 + C16769) * C2698 - (C16772 + C16771) * C48247) *
               C10789 +
           ((C16959 + C16960) * C2697 + (C16961 + C16962) * C2691 -
            (C17469 + C17470) * C2698 - (C17471 + C17472) * C48247) *
               C48522) *
              C48141 * C48527 +
          (((C17110 + C17109) * C2698 -
            ((C16578 + C16577) * C2691 + (C16576 + C16575) * C2697) +
            (C17112 + C17111) * C48247) *
               C10789 +
           ((C16532 * C1016 + C16528 * C1024 + C16533 * C1739 +
             C48520 * C1740) *
                C2698 -
            ((C17251 + C17252) * C2691 + (C17253 + C17254) * C2697) +
            (C16532 * C1025 + C16528 * C1031 + C16533 * C1741 +
             C48520 * C1742) *
                C48247) *
               C48522) *
              C48141 * C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C2697 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C2691 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C2698 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48247) *
                C10789 +
            ((C26662 + C26663) * C2697 + (C26664 + C26665) * C2691 -
             (C27132 + C27133) * C2698 - (C27134 + C27135) * C48247) *
                C48522) *
               C48141 * C2825 +
           (((C16762 + C16761) * C2698 -
             ((C16570 + C16569) * C2691 + (C16568 + C16567) * C2697) +
             (C16764 + C16763) * C48247) *
                C10789 +
            ((C17465 + C17466) * C2698 -
             ((C16958 + C16957) * C2691 + (C16956 + C16955) * C2697) +
             (C17467 + C17468) * C48247) *
                C48522) *
               C48141 * C48166) *
              C48542 +
          ((((C27133 + C27132) * C2698 -
             ((C26665 + C26664) * C2691 + (C26663 + C26662) * C2697) +
             (C27135 + C27134) * C48247) *
                C10789 +
            ((C27538 + C27539) * C2698 -
             ((C26666 + C26667) * C2691 + (C26668 + C26669) * C2697) +
             (C27540 + C27541) * C48247) *
                C48522) *
               C48141 * C2825 +
           (((C16955 + C16956) * C2697 + (C16957 + C16958) * C2691 -
             (C17466 + C17465) * C2698 - (C17468 + C17467) * C48247) *
                C10789 +
            ((C16963 + C16964) * C2697 + (C16965 + C16966) * C2691 -
             (C18901 + C18902) * C2698 - (C18903 + C18904) * C48247) *
                C48522) *
               C48141 * C48166) *
              C48531 +
          ((((C26669 + C26668) * C2697 + (C26667 + C26666) * C2691 -
             (C27539 + C27538) * C2698 - (C27541 + C27540) * C48247) *
                C10789 +
            ((C28406 + C28407) * C2697 + (C28408 + C28409) * C2691 -
             (C28876 + C28877) * C2698 - (C28878 + C28879) * C48247) *
                C48522) *
               C48141 * C2825 +
           (((C18902 + C18901) * C2698 -
             ((C16966 + C16965) * C2691 + (C16964 + C16963) * C2697) +
             (C18904 + C18903) * C48247) *
                C10789 +
            ((C16532 * C2582 + C16528 * C2586 + C16533 * C7736 +
              C48520 * C7739) *
                 C2698 -
             ((C19046 + C19045) * C2691 + (C19044 + C19043) * C2697) +
             (C16532 * C2587 + C16528 * C2591 + C16533 * C7740 +
              C48520 * C7742) *
                 C48247) *
                C48522) *
               C48141 * C48166) *
              C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C2697 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C2691 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C2698 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48247) *
                C10789 +
            ((C26662 + C26663) * C2697 + (C26664 + C26665) * C2691 -
             (C27132 + C27133) * C2698 - (C27134 + C27135) * C48247) *
                C48522) *
               C48141 * C48161 +
           (((C16762 + C16761) * C2698 -
             ((C16570 + C16569) * C2691 + (C16568 + C16567) * C2697) +
             (C16764 + C16763) * C48247) *
                C10789 +
            ((C17465 + C17466) * C2698 -
             ((C16958 + C16957) * C2691 + (C16956 + C16955) * C2697) +
             (C17467 + C17468) * C48247) *
                C48522) *
               C48141 * C48169 +
           (((C16574 + C16573) * C2697 + (C16572 + C16571) * C2691 -
             (C16770 + C16769) * C2698 - (C16772 + C16771) * C48247) *
                C10789 +
            ((C16959 + C16960) * C2697 + (C16961 + C16962) * C2691 -
             (C17469 + C17470) * C2698 - (C17471 + C17472) * C48247) *
                C48522) *
               C48141 * C3124) *
              C48471 +
          ((((C27133 + C27132) * C2698 -
             ((C26665 + C26664) * C2691 + (C26663 + C26662) * C2697) +
             (C27135 + C27134) * C48247) *
                C10789 +
            ((C27538 + C27539) * C2698 -
             ((C26666 + C26667) * C2691 + (C26668 + C26669) * C2697) +
             (C27540 + C27541) * C48247) *
                C48522) *
               C48141 * C48161 +
           (((C16955 + C16956) * C2697 + (C16957 + C16958) * C2691 -
             (C17466 + C17465) * C2698 - (C17468 + C17467) * C48247) *
                C10789 +
            ((C16963 + C16964) * C2697 + (C16965 + C16966) * C2691 -
             (C18901 + C18902) * C2698 - (C18903 + C18904) * C48247) *
                C48522) *
               C48141 * C48169 +
           (((C17470 + C17469) * C2698 -
             ((C16962 + C16961) * C2691 + (C16960 + C16959) * C2697) +
             (C17472 + C17471) * C48247) *
                C10789 +
            ((C16532 * C1424 + C16528 * C1440 + C16533 * C1425 +
              C48520 * C1442) *
                 C2698 -
             ((C16967 + C16968) * C2691 + (C16969 + C16970) * C2697) +
             (C16532 * C1441 + C16528 * C1451 + C16533 * C1443 +
              C48520 * C1452) *
                 C48247) *
                C48522) *
               C48141 * C3124) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C2697 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C2691 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C2698 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48247) *
               C10789 +
           ((C26662 + C26663) * C2697 + (C26664 + C26665) * C2691 -
            (C27132 + C27133) * C2698 - (C27134 + C27135) * C48247) *
               C48522) *
              C48141 * C48547 +
          (((C16762 + C16761) * C2698 -
            ((C16570 + C16569) * C2691 + (C16568 + C16567) * C2697) +
            (C16764 + C16763) * C48247) *
               C10789 +
           ((C17465 + C17466) * C2698 -
            ((C16958 + C16957) * C2691 + (C16956 + C16955) * C2697) +
            (C17467 + C17468) * C48247) *
               C48522) *
              C48141 * C48540 +
          (((C16574 + C16573) * C2697 + (C16572 + C16571) * C2691 -
            (C16770 + C16769) * C2698 - (C16772 + C16771) * C48247) *
               C10789 +
           ((C16959 + C16960) * C2697 + (C16961 + C16962) * C2691 -
            (C17469 + C17470) * C2698 - (C17471 + C17472) * C48247) *
               C48522) *
              C48141 * C48527 +
          (((C17110 + C17109) * C2698 -
            ((C16578 + C16577) * C2691 + (C16576 + C16575) * C2697) +
            (C17112 + C17111) * C48247) *
               C10789 +
           ((C16532 * C1016 + C16528 * C1024 + C16533 * C1739 +
             C48520 * C1740) *
                C2698 -
            ((C17251 + C17252) * C2691 + (C17253 + C17254) * C2697) +
            (C16532 * C1025 + C16528 * C1031 + C16533 * C1741 +
             C48520 * C1742) *
                C48247) *
               C48522) *
              C48141 * C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C2827 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48548 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C2828 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48544 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C2829 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48534 -
            (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 +
             C16528 * C1289) *
                C2830 -
            (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 +
             C16528 * C1301) *
                C48512) *
               C10789 +
           ((C26662 + C26663) * C2827 + (C26664 + C26665) * C48548 -
            (C27132 + C27133) * C2828 - (C27134 + C27135) * C48544 +
            (C27534 + C27535) * C2829 + (C27536 + C27537) * C48534 -
            (C28008 + C28009) * C2830 - (C28010 + C28011) * C48512) *
               C48522) *
              C48141 * C2825 +
          (((C16762 + C16761) * C2828 -
            ((C16570 + C16569) * C48548 + (C16568 + C16567) * C2827) +
            (C16764 + C16763) * C48544 - (C16766 + C16765) * C2829 -
            (C16768 + C16767) * C48534 + (C17986 + C17985) * C2830 +
            (C17988 + C17987) * C48512) *
               C10789 +
           ((C17465 + C17466) * C2828 -
            ((C16958 + C16957) * C48548 + (C16956 + C16955) * C2827) +
            (C17467 + C17468) * C48544 - (C18191 + C18192) * C2829 -
            (C18193 + C18194) * C48534 +
            (C16532 * C1866 + C16528 * C1870 + C16533 * C6868 +
             C48520 * C6871) *
                C2830 +
            (C16532 * C1871 + C16528 * C1875 + C16533 * C6872 +
             C48520 * C6874) *
                C48512) *
               C48522) *
              C48141 * C48166) *
         C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C47163 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48243 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C47155 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48250 +
             (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                 C47169 +
             (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                 C3121) *
                C10789 +
            ((C26662 + C26663) * C47163 + (C26664 + C26665) * C48243 -
             (C27132 + C27133) * C47155 - (C27134 + C27135) * C48250 +
             (C27534 + C27535) * C47169 + (C27536 + C27537) * C3121) *
                C48522) *
               C48141 * C48456 +
           (((C16762 + C16761) * C47155 -
             ((C16570 + C16569) * C48243 + (C16568 + C16567) * C47163) +
             (C16764 + C16763) * C48250 - (C16766 + C16765) * C47169 -
             (C16768 + C16767) * C3121) *
                C10789 +
            ((C17465 + C17466) * C47155 -
             ((C16958 + C16957) * C48243 + (C16956 + C16955) * C47163) +
             (C17467 + C17468) * C48250 - (C18191 + C18192) * C47169 -
             (C18193 + C18194) * C3121) *
                C48522) *
               C48141 * C48166) *
              C3562 +
          ((((C27133 + C27132) * C47155 -
             ((C26665 + C26664) * C48243 + (C26663 + C26662) * C47163) +
             (C27135 + C27134) * C48250 - (C27535 + C27534) * C47169 -
             (C27537 + C27536) * C3121) *
                C10789 +
            ((C27538 + C27539) * C47155 -
             ((C26666 + C26667) * C48243 + (C26668 + C26669) * C47163) +
             (C27540 + C27541) * C48250 - (C27542 + C27543) * C47169 -
             (C27544 + C27545) * C3121) *
                C48522) *
               C48141 * C48456 +
           (((C16955 + C16956) * C47163 + (C16957 + C16958) * C48243 -
             (C17466 + C17465) * C47155 - (C17468 + C17467) * C48250 +
             (C18192 + C18191) * C47169 + (C18194 + C18193) * C3121) *
                C10789 +
            ((C16963 + C16964) * C47163 + (C16965 + C16966) * C48243 -
             (C18901 + C18902) * C47155 - (C18903 + C18904) * C48250 +
             (C16532 * C1423 + C16528 * C1438 + C16533 * C6382 +
              C48520 * C6385) *
                 C47169 +
             (C16532 * C1439 + C16528 * C1450 + C16533 * C6386 +
              C48520 * C6388) *
                 C3121) *
                C48522) *
               C48141 * C48166) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C47163 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48243 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C47155 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48250 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C47169 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C3121) *
               C10789 +
           ((C26662 + C26663) * C47163 + (C26664 + C26665) * C48243 -
            (C27132 + C27133) * C47155 - (C27134 + C27135) * C48250 +
            (C27534 + C27535) * C47169 + (C27536 + C27537) * C3121) *
               C48522) *
              C48141 * C48156 * C48285 +
          (((C27133 + C27132) * C47155 -
            ((C26665 + C26664) * C48243 + (C26663 + C26662) * C47163) +
            (C27135 + C27134) * C48250 - (C27535 + C27534) * C47169 -
            (C27537 + C27536) * C3121) *
               C10789 +
           ((C27538 + C27539) * C47155 -
            ((C26666 + C26667) * C48243 + (C26668 + C26669) * C47163) +
            (C27540 + C27541) * C48250 - (C27542 + C27543) * C47169 -
            (C27544 + C27545) * C3121) *
               C48522) *
              C48141 * C48156 * C48292 +
          (((C26669 + C26668) * C47163 + (C26667 + C26666) * C48243 -
            (C27539 + C27538) * C47155 - (C27541 + C27540) * C48250 +
            (C27543 + C27542) * C47169 + (C27545 + C27544) * C3121) *
               C10789 +
           ((C28406 + C28407) * C47163 + (C28408 + C28409) * C48243 -
            (C28876 + C28877) * C47155 - (C28878 + C28879) * C48250 +
            (C16532 * C7735 + C16528 * C7737 + C16533 * C24035 +
             C48520 * C24036) *
                C47169 +
            (C16532 * C7738 + C16528 * C7741 + C16533 * C24037 +
             C48520 * C24038) *
                C3121) *
               C48522) *
              C48141 * C48156 * C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C2827 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48548 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C2828 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48544 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C2829 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48534 -
            (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 +
             C16528 * C1289) *
                C2830 -
            (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 +
             C16528 * C1301) *
                C48512) *
               C10789 +
           ((C26662 + C26663) * C2827 + (C26664 + C26665) * C48548 -
            (C27132 + C27133) * C2828 - (C27134 + C27135) * C48544 +
            (C27534 + C27535) * C2829 + (C27536 + C27537) * C48534 -
            (C28008 + C28009) * C2830 - (C28010 + C28011) * C48512) *
               C48522) *
              C48141 * C48156 * C3562 +
          (((C27133 + C27132) * C2828 -
            ((C26665 + C26664) * C48548 + (C26663 + C26662) * C2827) +
            (C27135 + C27134) * C48544 - (C27535 + C27534) * C2829 -
            (C27537 + C27536) * C48534 + (C28009 + C28008) * C2830 +
            (C28011 + C28010) * C48512) *
               C10789 +
           ((C27538 + C27539) * C2828 -
            ((C26666 + C26667) * C48548 + (C26668 + C26669) * C2827) +
            (C27540 + C27541) * C48544 - (C27542 + C27543) * C2829 -
            (C27544 + C27545) * C48534 +
            (C16532 * C6381 + C16528 * C6383 + C16533 * C23057 +
             C48520 * C23058) *
                C2830 +
            (C16532 * C6384 + C16528 * C6387 + C16533 * C23059 +
             C48520 * C23060) *
                C48512) *
               C48522) *
              C48141 * C48156 * C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C2697 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C2691 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C2698 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48247) *
                C10789 +
            ((C26662 + C26663) * C2697 + (C26664 + C26665) * C2691 -
             (C27132 + C27133) * C2698 - (C27134 + C27135) * C48247) *
                C48522) *
               C48141 * C48538 +
           (((C16762 + C16761) * C2698 -
             ((C16570 + C16569) * C2691 + (C16568 + C16567) * C2697) +
             (C16764 + C16763) * C48247) *
                C10789 +
            ((C17465 + C17466) * C2698 -
             ((C16958 + C16957) * C2691 + (C16956 + C16955) * C2697) +
             (C17467 + C17468) * C48247) *
                C48522) *
               C48141 * C48525 +
           (((C16574 + C16573) * C2697 + (C16572 + C16571) * C2691 -
             (C16770 + C16769) * C2698 - (C16772 + C16771) * C48247) *
                C10789 +
            ((C16959 + C16960) * C2697 + (C16961 + C16962) * C2691 -
             (C17469 + C17470) * C2698 - (C17471 + C17472) * C48247) *
                C48522) *
               C48141 * C48496) *
              C3562 +
          ((((C27133 + C27132) * C2698 -
             ((C26665 + C26664) * C2691 + (C26663 + C26662) * C2697) +
             (C27135 + C27134) * C48247) *
                C10789 +
            ((C27538 + C27539) * C2698 -
             ((C26666 + C26667) * C2691 + (C26668 + C26669) * C2697) +
             (C27540 + C27541) * C48247) *
                C48522) *
               C48141 * C48538 +
           (((C16955 + C16956) * C2697 + (C16957 + C16958) * C2691 -
             (C17466 + C17465) * C2698 - (C17468 + C17467) * C48247) *
                C10789 +
            ((C16963 + C16964) * C2697 + (C16965 + C16966) * C2691 -
             (C18901 + C18902) * C2698 - (C18903 + C18904) * C48247) *
                C48522) *
               C48141 * C48525 +
           (((C17470 + C17469) * C2698 -
             ((C16962 + C16961) * C2691 + (C16960 + C16959) * C2697) +
             (C17472 + C17471) * C48247) *
                C10789 +
            ((C16532 * C1424 + C16528 * C1440 + C16533 * C1425 +
              C48520 * C1442) *
                 C2698 -
             ((C16967 + C16968) * C2691 + (C16969 + C16970) * C2697) +
             (C16532 * C1441 + C16528 * C1451 + C16533 * C1443 +
              C48520 * C1452) *
                 C48247) *
                C48522) *
               C48141 * C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C2697 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C2691 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C2698 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48247) *
               C10789 +
           ((C26662 + C26663) * C2697 + (C26664 + C26665) * C2691 -
            (C27132 + C27133) * C2698 - (C27134 + C27135) * C48247) *
               C48522) *
              C48141 * C48156 * C48549 +
          (((C27133 + C27132) * C2698 -
            ((C26665 + C26664) * C2691 + (C26663 + C26662) * C2697) +
            (C27135 + C27134) * C48247) *
               C10789 +
           ((C27538 + C27539) * C2698 -
            ((C26666 + C26667) * C2691 + (C26668 + C26669) * C2697) +
            (C27540 + C27541) * C48247) *
               C48522) *
              C48141 * C48156 * C48546 +
          (((C26669 + C26668) * C2697 + (C26667 + C26666) * C2691 -
            (C27539 + C27538) * C2698 - (C27541 + C27540) * C48247) *
               C10789 +
           ((C28406 + C28407) * C2697 + (C28408 + C28409) * C2691 -
            (C28876 + C28877) * C2698 - (C28878 + C28879) * C48247) *
               C48522) *
              C48141 * C48156 * C48537 +
          (((C28877 + C28876) * C2698 -
            ((C28409 + C28408) * C2691 + (C28407 + C28406) * C2697) +
            (C28879 + C28878) * C48247) *
               C10789 +
           ((C16532 * C7249 + C16528 * C7251 + C16533 * C23689 +
             C48520 * C23690) *
                C2698 -
            ((C28410 + C28411) * C2691 + (C28412 + C28413) * C2697) +
            (C16532 * C7252 + C16528 * C7255 + C16533 * C23691 +
             C48520 * C23692) *
                C48247) *
               C48522) *
              C48141 * C48156 * C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C2697 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C2691 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C2698 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48247) *
                C10789 +
            ((C26662 + C26663) * C2697 + (C26664 + C26665) * C2691 -
             (C27132 + C27133) * C2698 - (C27134 + C27135) * C48247) *
                C48522) *
               C48141 * C48456 +
           (((C16762 + C16761) * C2698 -
             ((C16570 + C16569) * C2691 + (C16568 + C16567) * C2697) +
             (C16764 + C16763) * C48247) *
                C10789 +
            ((C17465 + C17466) * C2698 -
             ((C16958 + C16957) * C2691 + (C16956 + C16955) * C2697) +
             (C17467 + C17468) * C48247) *
                C48522) *
               C48141 * C48166) *
              C48285 +
          ((((C27133 + C27132) * C2698 -
             ((C26665 + C26664) * C2691 + (C26663 + C26662) * C2697) +
             (C27135 + C27134) * C48247) *
                C10789 +
            ((C27538 + C27539) * C2698 -
             ((C26666 + C26667) * C2691 + (C26668 + C26669) * C2697) +
             (C27540 + C27541) * C48247) *
                C48522) *
               C48141 * C48456 +
           (((C16955 + C16956) * C2697 + (C16957 + C16958) * C2691 -
             (C17466 + C17465) * C2698 - (C17468 + C17467) * C48247) *
                C10789 +
            ((C16963 + C16964) * C2697 + (C16965 + C16966) * C2691 -
             (C18901 + C18902) * C2698 - (C18903 + C18904) * C48247) *
                C48522) *
               C48141 * C48166) *
              C48292 +
          ((((C26669 + C26668) * C2697 + (C26667 + C26666) * C2691 -
             (C27539 + C27538) * C2698 - (C27541 + C27540) * C48247) *
                C10789 +
            ((C28406 + C28407) * C2697 + (C28408 + C28409) * C2691 -
             (C28876 + C28877) * C2698 - (C28878 + C28879) * C48247) *
                C48522) *
               C48141 * C48456 +
           (((C18902 + C18901) * C2698 -
             ((C16966 + C16965) * C2691 + (C16964 + C16963) * C2697) +
             (C18904 + C18903) * C48247) *
                C10789 +
            ((C16532 * C2582 + C16528 * C2586 + C16533 * C7736 +
              C48520 * C7739) *
                 C2698 -
             ((C19046 + C19045) * C2691 + (C19044 + C19043) * C2697) +
             (C16532 * C2587 + C16528 * C2591 + C16533 * C7740 +
              C48520 * C7742) *
                 C48247) *
                C48522) *
               C48141 * C48166) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C2697 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C2691 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C2698 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48247) *
                C10789 +
            ((C26662 + C26663) * C2697 + (C26664 + C26665) * C2691 -
             (C27132 + C27133) * C2698 - (C27134 + C27135) * C48247) *
                C48522) *
               C48141 * C48538 +
           (((C16762 + C16761) * C2698 -
             ((C16570 + C16569) * C2691 + (C16568 + C16567) * C2697) +
             (C16764 + C16763) * C48247) *
                C10789 +
            ((C17465 + C17466) * C2698 -
             ((C16958 + C16957) * C2691 + (C16956 + C16955) * C2697) +
             (C17467 + C17468) * C48247) *
                C48522) *
               C48141 * C48525 +
           (((C16574 + C16573) * C2697 + (C16572 + C16571) * C2691 -
             (C16770 + C16769) * C2698 - (C16772 + C16771) * C48247) *
                C10789 +
            ((C16959 + C16960) * C2697 + (C16961 + C16962) * C2691 -
             (C17469 + C17470) * C2698 - (C17471 + C17472) * C48247) *
                C48522) *
               C48141 * C48496) *
              C3562 +
          ((((C27133 + C27132) * C2698 -
             ((C26665 + C26664) * C2691 + (C26663 + C26662) * C2697) +
             (C27135 + C27134) * C48247) *
                C10789 +
            ((C27538 + C27539) * C2698 -
             ((C26666 + C26667) * C2691 + (C26668 + C26669) * C2697) +
             (C27540 + C27541) * C48247) *
                C48522) *
               C48141 * C48538 +
           (((C16955 + C16956) * C2697 + (C16957 + C16958) * C2691 -
             (C17466 + C17465) * C2698 - (C17468 + C17467) * C48247) *
                C10789 +
            ((C16963 + C16964) * C2697 + (C16965 + C16966) * C2691 -
             (C18901 + C18902) * C2698 - (C18903 + C18904) * C48247) *
                C48522) *
               C48141 * C48525 +
           (((C17470 + C17469) * C2698 -
             ((C16962 + C16961) * C2691 + (C16960 + C16959) * C2697) +
             (C17472 + C17471) * C48247) *
                C10789 +
            ((C16532 * C1424 + C16528 * C1440 + C16533 * C1425 +
              C48520 * C1442) *
                 C2698 -
             ((C16967 + C16968) * C2691 + (C16969 + C16970) * C2697) +
             (C16532 * C1441 + C16528 * C1451 + C16533 * C1443 +
              C48520 * C1452) *
                 C48247) *
                C48522) *
               C48141 * C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C2827 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48548 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C2828 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48544 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C2829 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48534 -
            (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 +
             C16528 * C1289) *
                C2830 -
            (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 +
             C16528 * C1301) *
                C48512) *
               C10789 +
           ((C26662 + C26663) * C2827 + (C26664 + C26665) * C48548 -
            (C27132 + C27133) * C2828 - (C27134 + C27135) * C48544 +
            (C27534 + C27535) * C2829 + (C27536 + C27537) * C48534 -
            (C28008 + C28009) * C2830 - (C28010 + C28011) * C48512) *
               C48522) *
              C48141 * C48156 * C3562 +
          (((C27133 + C27132) * C2828 -
            ((C26665 + C26664) * C48548 + (C26663 + C26662) * C2827) +
            (C27135 + C27134) * C48544 - (C27535 + C27534) * C2829 -
            (C27537 + C27536) * C48534 + (C28009 + C28008) * C2830 +
            (C28011 + C28010) * C48512) *
               C10789 +
           ((C27538 + C27539) * C2828 -
            ((C26666 + C26667) * C48548 + (C26668 + C26669) * C2827) +
            (C27540 + C27541) * C48544 - (C27542 + C27543) * C2829 -
            (C27544 + C27545) * C48534 +
            (C16532 * C6381 + C16528 * C6383 + C16533 * C23057 +
             C48520 * C23058) *
                C2830 +
            (C16532 * C6384 + C16528 * C6387 + C16533 * C23059 +
             C48520 * C23060) *
                C48512) *
               C48522) *
              C48141 * C48156 * C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C1557 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C1551 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C1558 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C1552 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C1559 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C1553 -
            (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 +
             C16528 * C1289) *
                C1560 -
            (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 +
             C16528 * C1301) *
                C48512) *
               C10789 +
           ((C26662 + C26663) * C1557 + (C26664 + C26665) * C1551 -
            (C27132 + C27133) * C1558 - (C27134 + C27135) * C1552 +
            (C27534 + C27535) * C1559 + (C27536 + C27537) * C1553 -
            (C16533 * C6867 + C48520 * C6869 + C16532 * C1865 +
             C16528 * C1868) *
                C1560 -
            (C16533 * C6870 + C48520 * C6873 + C16532 * C1869 +
             C16528 * C1874) *
                C48512) *
               C48522) *
              C48141 * C48456 +
          (((C16762 + C16761) * C1558 -
            ((C16570 + C16569) * C1551 + (C16568 + C16567) * C1557) +
            (C16764 + C16763) * C1552 - (C16766 + C16765) * C1559 -
            (C16768 + C16767) * C1553 + (C17986 + C17985) * C1560 +
            (C17988 + C17987) * C48512) *
               C10789 +
           ((C17465 + C17466) * C1558 -
            ((C16958 + C16957) * C1551 + (C16956 + C16955) * C1557) +
            (C17467 + C17468) * C1552 - (C18191 + C18192) * C1559 -
            (C18193 + C18194) * C1553 +
            (C16532 * C1866 + C16528 * C1870 + C16533 * C6868 +
             C48520 * C6871) *
                C1560 +
            (C16532 * C1871 + C16528 * C1875 + C16533 * C6872 +
             C48520 * C6874) *
                C48512) *
               C48522) *
              C48141 * C48166) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C717 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48470 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C718 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48247) *
               C10789 +
           ((C26662 + C26663) * C717 + (C26664 + C26665) * C48470 -
            (C16533 * C1417 + C48520 * C1426 + C16532 * C1013 +
             C16528 * C1018) *
                C718 -
            (C16533 * C1427 + C48520 * C1444 + C16532 * C1019 +
             C16528 * C1028) *
                C48247) *
               C48522) *
              C48141 * C713 +
          (((C16762 + C16761) * C718 -
            ((C16570 + C16569) * C48470 + (C16568 + C16567) * C717) +
            (C16764 + C16763) * C48247) *
               C10789 +
           ((C17465 + C17466) * C718 -
            ((C16958 + C16957) * C48470 + (C16956 + C16955) * C717) +
            (C17467 + C17468) * C48247) *
               C48522) *
              C48141 * C714 +
          (((C16574 + C16573) * C717 + (C16572 + C16571) * C48470 -
            (C16770 + C16769) * C718 - (C16772 + C16771) * C48247) *
               C10789 +
           ((C16959 + C16960) * C717 + (C16961 + C16962) * C48470 -
            (C17469 + C17470) * C718 - (C17471 + C17472) * C48247) *
               C48522) *
              C48141 * C715 +
          (((C17110 + C17109) * C718 -
            ((C16578 + C16577) * C48470 + (C16576 + C16575) * C717) +
            (C17112 + C17111) * C48247) *
               C10789 +
           ((C16532 * C1016 + C16528 * C1024 + C16533 * C1739 +
             C48520 * C1740) *
                C718 -
            ((C17251 + C17252) * C48470 + (C17253 + C17254) * C717) +
            (C16532 * C1025 + C16528 * C1031 + C16533 * C1741 +
             C48520 * C1742) *
                C48247) *
               C48522) *
              C48141 * C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C717 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48470 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C718 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48247) *
                C10789 +
            ((C26662 + C26663) * C717 + (C26664 + C26665) * C48470 -
             (C27132 + C27133) * C718 - (C27134 + C27135) * C48247) *
                C48522) *
               C48141 * C48456 +
           (((C16762 + C16761) * C718 -
             ((C16570 + C16569) * C48470 + (C16568 + C16567) * C717) +
             (C16764 + C16763) * C48247) *
                C10789 +
            ((C17465 + C17466) * C718 -
             ((C16958 + C16957) * C48470 + (C16956 + C16955) * C717) +
             (C17467 + C17468) * C48247) *
                C48522) *
               C48141 * C48166) *
              C1987 +
          ((((C27133 + C27132) * C718 -
             ((C26665 + C26664) * C48470 + (C26663 + C26662) * C717) +
             (C27135 + C27134) * C48247) *
                C10789 +
            ((C27538 + C27539) * C718 -
             ((C26666 + C26667) * C48470 + (C26668 + C26669) * C717) +
             (C27540 + C27541) * C48247) *
                C48522) *
               C48141 * C48456 +
           (((C16955 + C16956) * C717 + (C16957 + C16958) * C48470 -
             (C17466 + C17465) * C718 - (C17468 + C17467) * C48247) *
                C10789 +
            ((C16963 + C16964) * C717 + (C16965 + C16966) * C48470 -
             (C18901 + C18902) * C718 - (C18903 + C18904) * C48247) *
                C48522) *
               C48141 * C48166) *
              C1988 +
          ((((C26669 + C26668) * C717 + (C26667 + C26666) * C48470 -
             (C27539 + C27538) * C718 - (C27541 + C27540) * C48247) *
                C10789 +
            ((C28406 + C28407) * C717 + (C28408 + C28409) * C48470 -
             (C16533 * C7735 + C48520 * C7737 + C16532 * C2581 +
              C16528 * C2584) *
                 C718 -
             (C16533 * C7738 + C48520 * C7741 + C16532 * C2585 +
              C16528 * C2590) *
                 C48247) *
                C48522) *
               C48141 * C48456 +
           (((C18902 + C18901) * C718 -
             ((C16966 + C16965) * C48470 + (C16964 + C16963) * C717) +
             (C18904 + C18903) * C48247) *
                C10789 +
            ((C16532 * C2582 + C16528 * C2586 + C16533 * C7736 +
              C48520 * C7739) *
                 C718 -
             ((C19046 + C19045) * C48470 + (C19044 + C19043) * C717) +
             (C16532 * C2587 + C16528 * C2591 + C16533 * C7740 +
              C48520 * C7742) *
                 C48247) *
                C48522) *
               C48141 * C48166) *
              C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C1557 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C1551 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C1558 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C1552 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C1559 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C1553 -
            (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 +
             C16528 * C1289) *
                C1560 -
            (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 +
             C16528 * C1301) *
                C48512) *
               C10789 +
           ((C26662 + C26663) * C1557 + (C26664 + C26665) * C1551 -
            (C27132 + C27133) * C1558 - (C27134 + C27135) * C1552 +
            (C27534 + C27535) * C1559 + (C27536 + C27537) * C1553 -
            (C28008 + C28009) * C1560 - (C28010 + C28011) * C48512) *
               C48522) *
              C48141 * C48156 * C48471 +
          (((C27133 + C27132) * C1558 -
            ((C26665 + C26664) * C1551 + (C26663 + C26662) * C1557) +
            (C27135 + C27134) * C1552 - (C27535 + C27534) * C1559 -
            (C27537 + C27536) * C1553 + (C28009 + C28008) * C1560 +
            (C28011 + C28010) * C48512) *
               C10789 +
           ((C27538 + C27539) * C1558 -
            ((C26666 + C26667) * C1551 + (C26668 + C26669) * C1557) +
            (C27540 + C27541) * C1552 - (C27542 + C27543) * C1559 -
            (C27544 + C27545) * C1553 +
            (C16532 * C6381 + C16528 * C6383 + C16533 * C23057 +
             C48520 * C23058) *
                C1560 +
            (C16532 * C6384 + C16528 * C6387 + C16533 * C23059 +
             C48520 * C23060) *
                C48512) *
               C48522) *
              C48141 * C48156 * C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C717 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48470 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C718 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48247) *
                C10789 +
            ((C26662 + C26663) * C717 + (C26664 + C26665) * C48470 -
             (C27132 + C27133) * C718 - (C27134 + C27135) * C48247) *
                C48522) *
               C48141 * C302 +
           (((C16762 + C16761) * C718 -
             ((C16570 + C16569) * C48470 + (C16568 + C16567) * C717) +
             (C16764 + C16763) * C48247) *
                C10789 +
            ((C17465 + C17466) * C718 -
             ((C16958 + C16957) * C48470 + (C16956 + C16955) * C717) +
             (C17467 + C17468) * C48247) *
                C48522) *
               C48141 * C303 +
           (((C16574 + C16573) * C717 + (C16572 + C16571) * C48470 -
             (C16770 + C16769) * C718 - (C16772 + C16771) * C48247) *
                C10789 +
            ((C16959 + C16960) * C717 + (C16961 + C16962) * C48470 -
             (C17469 + C17470) * C718 - (C17471 + C17472) * C48247) *
                C48522) *
               C48141 * C48496) *
              C48471 +
          ((((C27133 + C27132) * C718 -
             ((C26665 + C26664) * C48470 + (C26663 + C26662) * C717) +
             (C27135 + C27134) * C48247) *
                C10789 +
            ((C16532 * C1420 + C16528 * C1432 + C16533 * C1421 +
              C48520 * C1434) *
                 C718 -
             ((C26666 + C26667) * C48470 + (C26668 + C26669) * C717) +
             (C16532 * C1433 + C16528 * C1447 + C16533 * C1435 +
              C48520 * C1448) *
                 C48247) *
                C48522) *
               C48141 * C302 +
           (((C16955 + C16956) * C717 + (C16957 + C16958) * C48470 -
             (C17466 + C17465) * C718 - (C17468 + C17467) * C48247) *
                C10789 +
            ((C16963 + C16964) * C717 + (C16965 + C16966) * C48470 -
             (C18901 + C18902) * C718 - (C18903 + C18904) * C48247) *
                C48522) *
               C48141 * C303 +
           (((C17470 + C17469) * C718 -
             ((C16962 + C16961) * C48470 + (C16960 + C16959) * C717) +
             (C17472 + C17471) * C48247) *
                C10789 +
            ((C16532 * C1424 + C16528 * C1440 + C16533 * C1425 +
              C48520 * C1442) *
                 C718 -
             ((C16967 + C16968) * C48470 + (C16969 + C16970) * C717) +
             (C16532 * C1441 + C16528 * C1451 + C16533 * C1443 +
              C48520 * C1452) *
                 C48247) *
                C48522) *
               C48141 * C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C717 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48470 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C718 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48247) *
               C10789 +
           ((C26662 + C26663) * C717 + (C26664 + C26665) * C48470 -
            (C27132 + C27133) * C718 - (C27134 + C27135) * C48247) *
               C48522) *
              C48141 * C48156 * C2459 +
          (((C27133 + C27132) * C718 -
            ((C26665 + C26664) * C48470 + (C26663 + C26662) * C717) +
            (C27135 + C27134) * C48247) *
               C10789 +
           ((C27538 + C27539) * C718 -
            ((C26666 + C26667) * C48470 + (C26668 + C26669) * C717) +
            (C27540 + C27541) * C48247) *
               C48522) *
              C48141 * C48156 * C2460 +
          (((C26669 + C26668) * C717 + (C26667 + C26666) * C48470 -
            (C27539 + C27538) * C718 - (C27541 + C27540) * C48247) *
               C10789 +
           ((C28406 + C28407) * C717 + (C28408 + C28409) * C48470 -
            (C28876 + C28877) * C718 - (C28878 + C28879) * C48247) *
               C48522) *
              C48141 * C48156 * C2461 +
          (((C28877 + C28876) * C718 -
            ((C28409 + C28408) * C48470 + (C28407 + C28406) * C717) +
            (C28879 + C28878) * C48247) *
               C10789 +
           ((C16532 * C7249 + C16528 * C7251 + C16533 * C23689 +
             C48520 * C23690) *
                C718 -
            ((C28410 + C28411) * C48470 + (C28412 + C28413) * C717) +
            (C16532 * C7252 + C16528 * C7255 + C16533 * C23691 +
             C48520 * C23692) *
                C48247) *
               C48522) *
              C48141 * C48156 * C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C16532 * C115 + C16528 * C122 + C16533 * C308 +
                 C48520 * C318) *
                    C114 +
                (C16532 * C123 + C16528 * C136 + C16533 * C319 +
                 C48520 * C338) *
                    C48184) *
                   C10789 +
               ((C16532 * C524 + C16528 * C538 + C16533 * C1013 +
                 C48520 * C1018) *
                    C114 +
                (C16532 * C537 + C16528 * C554 + C16533 * C1019 +
                 C48520 * C1028) *
                    C48184) *
                   C48522) *
                  C48141 * C107 -
              (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) *
                   C48522 +
               ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) *
                   C10789) *
                  C48141 * C108 +
              (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) *
                   C10789 +
               ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) *
                   C48522) *
                  C48141 * C109 -
              (((C17251 + C17252) * C48184 + (C17253 + C17254) * C114) *
                   C48522 +
               ((C16578 + C16577) * C48184 + (C16576 + C16575) * C114) *
                   C10789) *
                  C48141 * C110 +
              (((C16582 + C16581) * C114 + (C16580 + C16579) * C48184) *
                   C10789 +
               ((C16532 * C525 + C16528 * C540 + C16533 * C1017 +
                 C48520 * C1026) *
                    C114 +
                (C16532 * C539 + C16528 * C555 + C16533 * C1027 +
                 C48520 * C1032) *
                    C48184) *
                   C48522) *
                  C48141 * C111) *
             C48202 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C16532 * C115 + C16528 * C122 + C16533 * C308 +
                 C48520 * C318) *
                    C305 +
                (C16532 * C123 + C16528 * C136 + C16533 * C319 +
                 C48520 * C338) *
                    C48541 -
                (C16533 * C309 + C48520 * C320 + C16532 * C308 +
                 C16528 * C318) *
                    C306 -
                (C16533 * C321 + C48520 * C339 + C16532 * C319 +
                 C16528 * C338) *
                    C48529 +
                (C16532 * C309 + C16528 * C320 + C16533 * C1283 +
                 C48520 * C1289) *
                    C307 +
                (C16532 * C321 + C16528 * C339 + C16533 * C1290 +
                 C48520 * C1301) *
                    C48502) *
                   C10789 +
               ((C16532 * C524 + C16528 * C538 + C16533 * C1013 +
                 C48520 * C1018) *
                    C305 +
                (C16532 * C537 + C16528 * C554 + C16533 * C1019 +
                 C48520 * C1028) *
                    C48541 -
                (C16533 * C1417 + C48520 * C1426 + C16532 * C1013 +
                 C16528 * C1018) *
                    C306 -
                (C16533 * C1427 + C48520 * C1444 + C16532 * C1019 +
                 C16528 * C1028) *
                    C48529 +
                (C16532 * C1417 + C16528 * C1426 + C16533 * C1865 +
                 C48520 * C1868) *
                    C307 +
                (C16532 * C1427 + C16528 * C1444 + C16533 * C1869 +
                 C48520 * C1874) *
                    C48502) *
                   C48522) *
                  C48141 * C302 +
              (((C16762 + C16761) * C306 -
                ((C16570 + C16569) * C48541 + (C16568 + C16567) * C305) +
                (C16764 + C16763) * C48529 - (C16766 + C16765) * C307 -
                (C16768 + C16767) * C48502) *
                   C10789 +
               ((C17465 + C17466) * C306 -
                ((C16958 + C16957) * C48541 + (C16956 + C16955) * C305) +
                (C17467 + C17468) * C48529 - (C18191 + C18192) * C307 -
                (C18193 + C18194) * C48502) *
                   C48522) *
                  C48141 * C303 +
              (((C16574 + C16573) * C305 + (C16572 + C16571) * C48541 -
                (C16770 + C16769) * C306 - (C16772 + C16771) * C48529 +
                (C16774 + C16773) * C307 + (C16776 + C16775) * C48502) *
                   C10789 +
               ((C16959 + C16960) * C305 + (C16961 + C16962) * C48541 -
                (C17469 + C17470) * C306 - (C17471 + C17472) * C48529 +
                (C16532 * C1419 + C16528 * C1430 + C16533 * C1867 +
                 C48520 * C1872) *
                    C307 +
                (C16532 * C1431 + C16528 * C1446 + C16533 * C1873 +
                 C48520 * C1876) *
                    C48502) *
                   C48522) *
                  C48141 * C48496) *
             C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C10789 +
            ((C26662 + C26663) * C114 + (C26664 + C26665) * C48184) * C48522) *
               C48141 * C302 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48522 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C10789) *
               C48141 * C303 +
           (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C10789 +
            ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48522) *
               C48141 * C48496) *
              C48542 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C10789 +
            ((C16963 + C16964) * C114 + (C16965 + C16966) * C48184) * C48522) *
               C48141 * C303 -
           (((C26666 + C26667) * C48184 + (C26668 + C26669) * C114) * C48522 +
            ((C26665 + C26664) * C48184 + (C26663 + C26662) * C114) * C10789) *
               C48141 * C302 -
           (((C16967 + C16968) * C48184 + (C16969 + C16970) * C114) * C48522 +
            ((C16962 + C16961) * C48184 + (C16960 + C16959) * C114) * C10789) *
               C48141 * C48496) *
              C48531 +
          ((((C26669 + C26668) * C114 + (C26667 + C26666) * C48184) * C10789 +
            ((C16532 * C2169 + C16528 * C2178 + C16533 * C2581 +
              C48520 * C2584) *
                 C114 +
             (C16532 * C2177 + C16528 * C2187 + C16533 * C2585 +
              C48520 * C2590) *
                 C48184) *
                C48522) *
               C48141 * C302 -
           (((C19046 + C19045) * C48184 + (C19044 + C19043) * C114) * C48522 +
            ((C16966 + C16965) * C48184 + (C16964 + C16963) * C114) * C10789) *
               C48141 * C303 +
           (((C16970 + C16969) * C114 + (C16968 + C16967) * C48184) * C10789 +
            ((C16532 * C2167 + C16528 * C2174 + C16533 * C2583 +
              C48520 * C2588) *
                 C114 +
             (C16532 * C2173 + C16528 * C2185 + C16533 * C2589 +
              C48520 * C2592) *
                 C48184) *
                C48522) *
               C48141 * C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C1183 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C1177 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C1184 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C1178 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C1185 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C10789 +
           ((C26662 + C26663) * C1183 + (C26664 + C26665) * C1177 -
            (C27132 + C27133) * C1184 - (C27134 + C27135) * C1178 +
            (C16532 * C1417 + C16528 * C1426 + C16533 * C1865 +
             C48520 * C1868) *
                C1185 +
            (C16532 * C1427 + C16528 * C1444 + C16533 * C1869 +
             C48520 * C1874) *
                C48502) *
               C48522) *
              C48141 * C48538 +
          (((C16762 + C16761) * C1184 -
            ((C16570 + C16569) * C1177 + (C16568 + C16567) * C1183) +
            (C16764 + C16763) * C1178 - (C16766 + C16765) * C1185 -
            (C16768 + C16767) * C48502) *
               C10789 +
           ((C17465 + C17466) * C1184 -
            ((C16958 + C16957) * C1177 + (C16956 + C16955) * C1183) +
            (C17467 + C17468) * C1178 - (C18191 + C18192) * C1185 -
            (C18193 + C18194) * C48502) *
               C48522) *
              C48141 * C48525 +
          (((C16574 + C16573) * C1183 + (C16572 + C16571) * C1177 -
            (C16770 + C16769) * C1184 - (C16772 + C16771) * C1178 +
            (C16774 + C16773) * C1185 + (C16776 + C16775) * C48502) *
               C10789 +
           ((C16959 + C16960) * C1183 + (C16961 + C16962) * C1177 -
            (C17469 + C17470) * C1184 - (C17471 + C17472) * C1178 +
            (C16532 * C1419 + C16528 * C1430 + C16533 * C1867 +
             C48520 * C1872) *
                C1185 +
            (C16532 * C1431 + C16528 * C1446 + C16533 * C1873 +
             C48520 * C1876) *
                C48502) *
               C48522) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
               C1278 +
           (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
               C1272 -
           (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
               C1279 -
           (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
               C1273 +
           (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
               C1280 +
           (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
               C1274 -
           (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 + C16528 * C1289) *
               C1281 -
           (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 + C16528 * C1301) *
               C1275 +
           (C16532 * C1284 + C16528 * C1291 + C16533 * C6227 + C48520 * C6229) *
               C1282 +
           (C16532 * C1292 + C16528 * C1302 + C16533 * C6230 + C48520 * C6233) *
               C1276) *
              C10789 +
          ((C26662 + C26663) * C1278 + (C26664 + C26665) * C1272 -
           (C27132 + C27133) * C1279 - (C27134 + C27135) * C1273 +
           (C16532 * C1417 + C16528 * C1426 + C16533 * C1865 + C48520 * C1868) *
               C1280 +
           (C16532 * C1427 + C16528 * C1444 + C16533 * C1869 + C48520 * C1874) *
               C1274 -
           (C16533 * C6867 + C48520 * C6869 + C16532 * C1865 + C16528 * C1868) *
               C1281 -
           (C16533 * C6870 + C48520 * C6873 + C16532 * C1869 + C16528 * C1874) *
               C1275 +
           (C16532 * C6867 + C16528 * C6869 + C16533 * C23403 +
            C48520 * C23404) *
               C1282 +
           (C16532 * C6870 + C16528 * C6873 + C16533 * C23405 +
            C48520 * C23406) *
               C1276) *
              C48522) *
         C48141 * C48156 * C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C1183 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C1177 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C1184 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C1178 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C1185 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C10789 +
           ((C26662 + C26663) * C1183 + (C26664 + C26665) * C1177 -
            (C27132 + C27133) * C1184 - (C27134 + C27135) * C1178 +
            (C27534 + C27535) * C1185 + (C27536 + C27537) * C48502) *
               C48522) *
              C48141 * C48156 * C48542 +
          (((C27133 + C27132) * C1184 -
            ((C26665 + C26664) * C1177 + (C26663 + C26662) * C1183) +
            (C27135 + C27134) * C1178 - (C27535 + C27534) * C1185 -
            (C27537 + C27536) * C48502) *
               C10789 +
           ((C27538 + C27539) * C1184 -
            ((C26666 + C26667) * C1177 + (C26668 + C26669) * C1183) +
            (C27540 + C27541) * C1178 - (C27542 + C27543) * C1185 -
            (C27544 + C27545) * C48502) *
               C48522) *
              C48141 * C48156 * C48531 +
          (((C26669 + C26668) * C1183 + (C26667 + C26666) * C1177 -
            (C27539 + C27538) * C1184 - (C27541 + C27540) * C1178 +
            (C27543 + C27542) * C1185 + (C27545 + C27544) * C48502) *
               C10789 +
           ((C16532 * C2169 + C16528 * C2178 + C16533 * C2581 +
             C48520 * C2584) *
                C1183 +
            (C16532 * C2177 + C16528 * C2187 + C16533 * C2585 +
             C48520 * C2590) *
                C1177 -
            (C16533 * C7735 + C48520 * C7737 + C16532 * C2581 +
             C16528 * C2584) *
                C1184 -
            (C16533 * C7738 + C48520 * C7741 + C16532 * C2585 +
             C16528 * C2590) *
                C1178 +
            (C16532 * C7735 + C16528 * C7737 + C16533 * C24035 +
             C48520 * C24036) *
                C1185 +
            (C16532 * C7738 + C16528 * C7741 + C16533 * C24037 +
             C48520 * C24038) *
                C48502) *
               C48522) *
              C48141 * C48156 * C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C10789 +
            ((C26662 + C26663) * C114 + (C26664 + C26665) * C48184) * C48522) *
               C48141 * C48538 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48522 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C10789) *
               C48141 * C48525 +
           (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C10789 +
            ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48522) *
               C48141 * C48496) *
              C1987 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C10789 +
            ((C16963 + C16964) * C114 + (C16965 + C16966) * C48184) * C48522) *
               C48141 * C48525 -
           (((C26666 + C26667) * C48184 + (C26668 + C26669) * C114) * C48522 +
            ((C26665 + C26664) * C48184 + (C26663 + C26662) * C114) * C10789) *
               C48141 * C48538 -
           (((C16967 + C16968) * C48184 + (C16969 + C16970) * C114) * C48522 +
            ((C16962 + C16961) * C48184 + (C16960 + C16959) * C114) * C10789) *
               C48141 * C48496) *
              C1988 +
          ((((C26669 + C26668) * C114 + (C26667 + C26666) * C48184) * C10789 +
            ((C16532 * C2169 + C16528 * C2178 + C16533 * C2581 +
              C48520 * C2584) *
                 C114 +
             (C16532 * C2177 + C16528 * C2187 + C16533 * C2585 +
              C48520 * C2590) *
                 C48184) *
                C48522) *
               C48141 * C48538 -
           (((C19046 + C19045) * C48184 + (C19044 + C19043) * C114) * C48522 +
            ((C16966 + C16965) * C48184 + (C16964 + C16963) * C114) * C10789) *
               C48141 * C48525 +
           (((C16970 + C16969) * C114 + (C16968 + C16967) * C48184) * C10789 +
            ((C16532 * C2167 + C16528 * C2174 + C16533 * C2583 +
              C48520 * C2588) *
                 C114 +
             (C16532 * C2173 + C16528 * C2185 + C16533 * C2589 +
              C48520 * C2592) *
                 C48184) *
                C48522) *
               C48141 * C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C305 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48541 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C306 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48529 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C307 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C10789 +
           ((C26662 + C26663) * C305 + (C26664 + C26665) * C48541 -
            (C27132 + C27133) * C306 - (C27134 + C27135) * C48529 +
            (C27534 + C27535) * C307 + (C27536 + C27537) * C48502) *
               C48522) *
              C48141 * C48156 * C1987 +
          (((C27133 + C27132) * C306 -
            ((C26665 + C26664) * C48541 + (C26663 + C26662) * C305) +
            (C27135 + C27134) * C48529 - (C27535 + C27534) * C307 -
            (C27537 + C27536) * C48502) *
               C10789 +
           ((C27538 + C27539) * C306 -
            ((C26666 + C26667) * C48541 + (C26668 + C26669) * C305) +
            (C27540 + C27541) * C48529 - (C27542 + C27543) * C307 -
            (C27544 + C27545) * C48502) *
               C48522) *
              C48141 * C48156 * C1988 +
          (((C26669 + C26668) * C305 + (C26667 + C26666) * C48541 -
            (C27539 + C27538) * C306 - (C27541 + C27540) * C48529 +
            (C27543 + C27542) * C307 + (C27545 + C27544) * C48502) *
               C10789 +
           ((C16532 * C2169 + C16528 * C2178 + C16533 * C2581 +
             C48520 * C2584) *
                C305 +
            (C16532 * C2177 + C16528 * C2187 + C16533 * C2585 +
             C48520 * C2590) *
                C48541 -
            (C16533 * C7735 + C48520 * C7737 + C16532 * C2581 +
             C16528 * C2584) *
                C306 -
            (C16533 * C7738 + C48520 * C7741 + C16532 * C2585 +
             C16528 * C2590) *
                C48529 +
            (C16532 * C7735 + C16528 * C7737 + C16533 * C24035 +
             C48520 * C24036) *
                C307 +
            (C16532 * C7738 + C16528 * C7741 + C16533 * C24037 +
             C48520 * C24038) *
                C48502) *
               C48522) *
              C48141 * C48156 * C48505)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C114 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48184) *
               C10789 +
           ((C26662 + C26663) * C114 + (C26664 + C26665) * C48184) * C48522) *
              C48141 * C48156 * C2162 -
          (((C26666 + C26667) * C48184 + (C26668 + C26669) * C114) * C48522 +
           ((C26665 + C26664) * C48184 + (C26663 + C26662) * C114) * C10789) *
              C48141 * C48156 * C2163 +
          (((C26669 + C26668) * C114 + (C26667 + C26666) * C48184) * C10789 +
           ((C28406 + C28407) * C114 + (C28408 + C28409) * C48184) * C48522) *
              C48141 * C48156 * C2164 -
          (((C28410 + C28411) * C48184 + (C28412 + C28413) * C114) * C48522 +
           ((C28409 + C28408) * C48184 + (C28407 + C28406) * C114) * C10789) *
              C48141 * C48156 * C2165 +
          (((C28413 + C28412) * C114 + (C28411 + C28410) * C48184) * C10789 +
           ((C16532 * C12879 + C16528 * C12881 + C16533 * C28385 +
             C48520 * C28386) *
                C114 +
            (C16532 * C12882 + C16528 * C12885 + C16533 * C28387 +
             C48520 * C28388) *
                C48184) *
               C48522) *
              C48141 * C48156 * C2166)) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C1183 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C1177 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C1184 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C1178 +
             (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                 C1185 +
             (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                 C48502) *
                C10789 +
            ((C26662 + C26663) * C1183 + (C26664 + C26665) * C1177 -
             (C27132 + C27133) * C1184 - (C27134 + C27135) * C1178 +
             (C27534 + C27535) * C1185 + (C27536 + C27537) * C48502) *
                C48522) *
               C48141 * C48456 +
           (((C16762 + C16761) * C1184 -
             ((C16570 + C16569) * C1177 + (C16568 + C16567) * C1183) +
             (C16764 + C16763) * C1178 - (C16766 + C16765) * C1185 -
             (C16768 + C16767) * C48502) *
                C10789 +
            ((C17465 + C17466) * C1184 -
             ((C16958 + C16957) * C1177 + (C16956 + C16955) * C1183) +
             (C17467 + C17468) * C1178 - (C18191 + C18192) * C1185 -
             (C18193 + C18194) * C48502) *
                C48522) *
               C48141 * C48166) *
              C48471 +
          ((((C27133 + C27132) * C1184 -
             ((C26665 + C26664) * C1177 + (C26663 + C26662) * C1183) +
             (C27135 + C27134) * C1178 - (C27535 + C27534) * C1185 -
             (C27537 + C27536) * C48502) *
                C10789 +
            ((C27538 + C27539) * C1184 -
             ((C26666 + C26667) * C1177 + (C26668 + C26669) * C1183) +
             (C27540 + C27541) * C1178 - (C27542 + C27543) * C1185 -
             (C27544 + C27545) * C48502) *
                C48522) *
               C48141 * C48456 +
           (((C16955 + C16956) * C1183 + (C16957 + C16958) * C1177 -
             (C17466 + C17465) * C1184 - (C17468 + C17467) * C1178 +
             (C18192 + C18191) * C1185 + (C18194 + C18193) * C48502) *
                C10789 +
            ((C16963 + C16964) * C1183 + (C16965 + C16966) * C1177 -
             (C18901 + C18902) * C1184 - (C18903 + C18904) * C1178 +
             (C16532 * C1423 + C16528 * C1438 + C16533 * C6382 +
              C48520 * C6385) *
                 C1185 +
             (C16532 * C1439 + C16528 * C1450 + C16533 * C6386 +
              C48520 * C6388) *
                 C48502) *
                C48522) *
               C48141 * C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C10789 +
            ((C26662 + C26663) * C114 + (C26664 + C26665) * C48184) * C48522) *
               C48141 * C713 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48522 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C10789) *
               C48141 * C714 +
           (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C10789 +
            ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48522) *
               C48141 * C715 -
           (((C17251 + C17252) * C48184 + (C17253 + C17254) * C114) * C48522 +
            ((C16578 + C16577) * C48184 + (C16576 + C16575) * C114) * C10789) *
               C48141 * C48506) *
              C48471 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C10789 +
            ((C16963 + C16964) * C114 + (C16965 + C16966) * C48184) * C48522) *
               C48141 * C714 -
           (((C26666 + C26667) * C48184 + (C26668 + C26669) * C114) * C48522 +
            ((C26665 + C26664) * C48184 + (C26663 + C26662) * C114) * C10789) *
               C48141 * C713 -
           (((C16967 + C16968) * C48184 + (C16969 + C16970) * C114) * C48522 +
            ((C16962 + C16961) * C48184 + (C16960 + C16959) * C114) * C10789) *
               C48141 * C715 +
           (((C17254 + C17253) * C114 + (C17252 + C17251) * C48184) * C10789 +
            ((C16532 * C529 + C16528 * C548 + C16533 * C2337 + C48520 * C2338) *
                 C114 +
             (C16532 * C547 + C16528 * C559 + C16533 * C2339 + C48520 * C2340) *
                 C48184) *
                C48522) *
               C48141 * C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C10789 +
            ((C26662 + C26663) * C114 + (C26664 + C26665) * C48184) * C48522) *
               C48141 * C48456 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48522 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C10789) *
               C48141 * C48166) *
              C2459 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C10789 +
            ((C16963 + C16964) * C114 + (C16965 + C16966) * C48184) * C48522) *
               C48141 * C48166 -
           (((C26666 + C26667) * C48184 + (C26668 + C26669) * C114) * C48522 +
            ((C26665 + C26664) * C48184 + (C26663 + C26662) * C114) * C10789) *
               C48141 * C48456) *
              C2460 +
          ((((C26669 + C26668) * C114 + (C26667 + C26666) * C48184) * C10789 +
            ((C28406 + C28407) * C114 + (C28408 + C28409) * C48184) * C48522) *
               C48141 * C48456 -
           (((C19046 + C19045) * C48184 + (C19044 + C19043) * C114) * C48522 +
            ((C16966 + C16965) * C48184 + (C16964 + C16963) * C114) * C10789) *
               C48141 * C48166) *
              C2461 +
          ((((C19043 + C19044) * C114 + (C19045 + C19046) * C48184) * C10789 +
            ((C16532 * C2171 + C16528 * C2181 + C16533 * C7250 +
              C48520 * C7253) *
                 C114 +
             (C16532 * C2182 + C16528 * C2189 + C16533 * C7254 +
              C48520 * C7256) *
                 C48184) *
                C48522) *
               C48141 * C48166 -
           (((C28410 + C28411) * C48184 + (C28412 + C28413) * C114) * C48522 +
            ((C28409 + C28408) * C48184 + (C28407 + C28406) * C114) * C10789) *
               C48141 * C48456) *
              C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C305 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48541 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C306 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48529 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C307 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C10789 +
           ((C16532 * C524 + C16528 * C538 + C16533 * C1013 + C48520 * C1018) *
                C305 +
            (C16532 * C537 + C16528 * C554 + C16533 * C1019 + C48520 * C1028) *
                C48541 -
            (C16533 * C1417 + C48520 * C1426 + C16532 * C1013 +
             C16528 * C1018) *
                C306 -
            (C16533 * C1427 + C48520 * C1444 + C16532 * C1019 +
             C16528 * C1028) *
                C48529 +
            (C16532 * C1417 + C16528 * C1426 + C16533 * C1865 +
             C48520 * C1868) *
                C307 +
            (C16532 * C1427 + C16528 * C1444 + C16533 * C1869 +
             C48520 * C1874) *
                C48502) *
               C48522) *
              C48141 * C302 +
          (((C16762 + C16761) * C306 -
            ((C16570 + C16569) * C48541 + (C16568 + C16567) * C305) +
            (C16764 + C16763) * C48529 - (C16766 + C16765) * C307 -
            (C16768 + C16767) * C48502) *
               C10789 +
           ((C17465 + C17466) * C306 -
            ((C16958 + C16957) * C48541 + (C16956 + C16955) * C305) +
            (C17467 + C17468) * C48529 - (C18191 + C18192) * C307 -
            (C18193 + C18194) * C48502) *
               C48522) *
              C48141 * C303 +
          (((C16574 + C16573) * C305 + (C16572 + C16571) * C48541 -
            (C16770 + C16769) * C306 - (C16772 + C16771) * C48529 +
            (C16774 + C16773) * C307 + (C16776 + C16775) * C48502) *
               C10789 +
           ((C16959 + C16960) * C305 + (C16961 + C16962) * C48541 -
            (C17469 + C17470) * C306 - (C17471 + C17472) * C48529 +
            (C16532 * C1419 + C16528 * C1430 + C16533 * C1867 +
             C48520 * C1872) *
                C307 +
            (C16532 * C1431 + C16528 * C1446 + C16533 * C1873 +
             C48520 * C1876) *
                C48502) *
               C48522) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C114 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48184) *
               C10789 +
           ((C16532 * C524 + C16528 * C538 + C16533 * C1013 + C48520 * C1018) *
                C114 +
            (C16532 * C537 + C16528 * C554 + C16533 * C1019 + C48520 * C1028) *
                C48184) *
               C48522) *
              C48141 * C107 -
          (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48522 +
           ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C10789) *
              C48141 * C108 +
          (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C10789 +
           ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48522) *
              C48141 * C109 -
          (((C17251 + C17252) * C48184 + (C17253 + C17254) * C114) * C48522 +
           ((C16578 + C16577) * C48184 + (C16576 + C16575) * C114) * C10789) *
              C48141 * C110 +
          (((C16582 + C16581) * C114 + (C16580 + C16579) * C48184) * C10789 +
           ((C16532 * C525 + C16528 * C540 + C16533 * C1017 + C48520 * C1026) *
                C114 +
            (C16532 * C539 + C16528 * C555 + C16533 * C1027 + C48520 * C1032) *
                C48184) *
               C48522) *
              C48141 * C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C1183 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C1177 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C1184 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C1178 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C1185 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C10789 +
           ((C26662 + C26663) * C1183 + (C26664 + C26665) * C1177 -
            (C27132 + C27133) * C1184 - (C27134 + C27135) * C1178 +
            (C16532 * C1417 + C16528 * C1426 + C16533 * C1865 +
             C48520 * C1868) *
                C1185 +
            (C16532 * C1427 + C16528 * C1444 + C16533 * C1869 +
             C48520 * C1874) *
                C48502) *
               C48522) *
              C48141 * C48538 +
          (((C16762 + C16761) * C1184 -
            ((C16570 + C16569) * C1177 + (C16568 + C16567) * C1183) +
            (C16764 + C16763) * C1178 - (C16766 + C16765) * C1185 -
            (C16768 + C16767) * C48502) *
               C10789 +
           ((C17465 + C17466) * C1184 -
            ((C16958 + C16957) * C1177 + (C16956 + C16955) * C1183) +
            (C17467 + C17468) * C1178 - (C18191 + C18192) * C1185 -
            (C18193 + C18194) * C48502) *
               C48522) *
              C48141 * C48525 +
          (((C16574 + C16573) * C1183 + (C16572 + C16571) * C1177 -
            (C16770 + C16769) * C1184 - (C16772 + C16771) * C1178 +
            (C16774 + C16773) * C1185 + (C16776 + C16775) * C48502) *
               C10789 +
           ((C16959 + C16960) * C1183 + (C16961 + C16962) * C1177 -
            (C17469 + C17470) * C1184 - (C17471 + C17472) * C1178 +
            (C16532 * C1419 + C16528 * C1430 + C16533 * C1867 +
             C48520 * C1872) *
                C1185 +
            (C16532 * C1431 + C16528 * C1446 + C16533 * C1873 +
             C48520 * C1876) *
                C48502) *
               C48522) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
               C1278 +
           (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
               C1272 -
           (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
               C1279 -
           (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
               C1273 +
           (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
               C1280 +
           (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
               C1274 -
           (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 + C16528 * C1289) *
               C1281 -
           (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 + C16528 * C1301) *
               C1275 +
           (C16532 * C1284 + C16528 * C1291 + C16533 * C6227 + C48520 * C6229) *
               C1282 +
           (C16532 * C1292 + C16528 * C1302 + C16533 * C6230 + C48520 * C6233) *
               C1276) *
              C10789 +
          ((C26662 + C26663) * C1278 + (C26664 + C26665) * C1272 -
           (C27132 + C27133) * C1279 - (C27134 + C27135) * C1273 +
           (C16532 * C1417 + C16528 * C1426 + C16533 * C1865 + C48520 * C1868) *
               C1280 +
           (C16532 * C1427 + C16528 * C1444 + C16533 * C1869 + C48520 * C1874) *
               C1274 -
           (C16533 * C6867 + C48520 * C6869 + C16532 * C1865 + C16528 * C1868) *
               C1281 -
           (C16533 * C6870 + C48520 * C6873 + C16532 * C1869 + C16528 * C1874) *
               C1275 +
           (C16532 * C6867 + C16528 * C6869 + C16533 * C23403 +
            C48520 * C23404) *
               C1282 +
           (C16532 * C6870 + C16528 * C6873 + C16533 * C23405 +
            C48520 * C23406) *
               C1276) *
              C48522) *
         C48141 * C48156 * C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C10789 +
            ((C26662 + C26663) * C114 + (C26664 + C26665) * C48184) * C48522) *
               C48141 * C48538 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48522 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C10789) *
               C48141 * C48525 +
           (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C10789 +
            ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48522) *
               C48141 * C48496) *
              C1987 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C10789 +
            ((C16963 + C16964) * C114 + (C16965 + C16966) * C48184) * C48522) *
               C48141 * C48525 -
           (((C26666 + C26667) * C48184 + (C26668 + C26669) * C114) * C48522 +
            ((C26665 + C26664) * C48184 + (C26663 + C26662) * C114) * C10789) *
               C48141 * C48538 -
           (((C16967 + C16968) * C48184 + (C16969 + C16970) * C114) * C48522 +
            ((C16962 + C16961) * C48184 + (C16960 + C16959) * C114) * C10789) *
               C48141 * C48496) *
              C1988 +
          ((((C26669 + C26668) * C114 + (C26667 + C26666) * C48184) * C10789 +
            ((C16532 * C2169 + C16528 * C2178 + C16533 * C2581 +
              C48520 * C2584) *
                 C114 +
             (C16532 * C2177 + C16528 * C2187 + C16533 * C2585 +
              C48520 * C2590) *
                 C48184) *
                C48522) *
               C48141 * C48538 -
           (((C19046 + C19045) * C48184 + (C19044 + C19043) * C114) * C48522 +
            ((C16966 + C16965) * C48184 + (C16964 + C16963) * C114) * C10789) *
               C48141 * C48525 +
           (((C16970 + C16969) * C114 + (C16968 + C16967) * C48184) * C10789 +
            ((C16532 * C2167 + C16528 * C2174 + C16533 * C2583 +
              C48520 * C2588) *
                 C114 +
             (C16532 * C2173 + C16528 * C2185 + C16533 * C2589 +
              C48520 * C2592) *
                 C48184) *
                C48522) *
               C48141 * C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C305 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48541 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C306 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48529 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C307 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C10789 +
           ((C26662 + C26663) * C305 + (C26664 + C26665) * C48541 -
            (C27132 + C27133) * C306 - (C27134 + C27135) * C48529 +
            (C27534 + C27535) * C307 + (C27536 + C27537) * C48502) *
               C48522) *
              C48141 * C48156 * C1987 +
          (((C27133 + C27132) * C306 -
            ((C26665 + C26664) * C48541 + (C26663 + C26662) * C305) +
            (C27135 + C27134) * C48529 - (C27535 + C27534) * C307 -
            (C27537 + C27536) * C48502) *
               C10789 +
           ((C27538 + C27539) * C306 -
            ((C26666 + C26667) * C48541 + (C26668 + C26669) * C305) +
            (C27540 + C27541) * C48529 - (C27542 + C27543) * C307 -
            (C27544 + C27545) * C48502) *
               C48522) *
              C48141 * C48156 * C1988 +
          (((C26669 + C26668) * C305 + (C26667 + C26666) * C48541 -
            (C27539 + C27538) * C306 - (C27541 + C27540) * C48529 +
            (C27543 + C27542) * C307 + (C27545 + C27544) * C48502) *
               C10789 +
           ((C16532 * C2169 + C16528 * C2178 + C16533 * C2581 +
             C48520 * C2584) *
                C305 +
            (C16532 * C2177 + C16528 * C2187 + C16533 * C2585 +
             C48520 * C2590) *
                C48541 -
            (C16533 * C7735 + C48520 * C7737 + C16532 * C2581 +
             C16528 * C2584) *
                C306 -
            (C16533 * C7738 + C48520 * C7741 + C16532 * C2585 +
             C16528 * C2590) *
                C48529 +
            (C16532 * C7735 + C16528 * C7737 + C16533 * C24035 +
             C48520 * C24036) *
                C307 +
            (C16532 * C7738 + C16528 * C7741 + C16533 * C24037 +
             C48520 * C24038) *
                C48502) *
               C48522) *
              C48141 * C48156 * C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C717 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48470 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C718 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48247) *
                C10789 +
            ((C26662 + C26663) * C717 + (C26664 + C26665) * C48470 -
             (C27132 + C27133) * C718 - (C27134 + C27135) * C48247) *
                C48522) *
               C48141 * C48161 +
           (((C16762 + C16761) * C718 -
             ((C16570 + C16569) * C48470 + (C16568 + C16567) * C717) +
             (C16764 + C16763) * C48247) *
                C10789 +
            ((C17465 + C17466) * C718 -
             ((C16958 + C16957) * C48470 + (C16956 + C16955) * C717) +
             (C17467 + C17468) * C48247) *
                C48522) *
               C48141 * C48169 +
           (((C16574 + C16573) * C717 + (C16572 + C16571) * C48470 -
             (C16770 + C16769) * C718 - (C16772 + C16771) * C48247) *
                C10789 +
            ((C16959 + C16960) * C717 + (C16961 + C16962) * C48470 -
             (C17469 + C17470) * C718 - (C17471 + C17472) * C48247) *
                C48522) *
               C48141 * C3124) *
              C3562 +
          ((((C27133 + C27132) * C718 -
             ((C26665 + C26664) * C48470 + (C26663 + C26662) * C717) +
             (C27135 + C27134) * C48247) *
                C10789 +
            ((C27538 + C27539) * C718 -
             ((C26666 + C26667) * C48470 + (C26668 + C26669) * C717) +
             (C27540 + C27541) * C48247) *
                C48522) *
               C48141 * C48161 +
           (((C16955 + C16956) * C717 + (C16957 + C16958) * C48470 -
             (C17466 + C17465) * C718 - (C17468 + C17467) * C48247) *
                C10789 +
            ((C16963 + C16964) * C717 + (C16965 + C16966) * C48470 -
             (C18901 + C18902) * C718 - (C18903 + C18904) * C48247) *
                C48522) *
               C48141 * C48169 +
           (((C17470 + C17469) * C718 -
             ((C16962 + C16961) * C48470 + (C16960 + C16959) * C717) +
             (C17472 + C17471) * C48247) *
                C10789 +
            ((C16532 * C1424 + C16528 * C1440 + C16533 * C1425 +
              C48520 * C1442) *
                 C718 -
             ((C16967 + C16968) * C48470 + (C16969 + C16970) * C717) +
             (C16532 * C1441 + C16528 * C1451 + C16533 * C1443 +
              C48520 * C1452) *
                 C48247) *
                C48522) *
               C48141 * C3124) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C717 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48470 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C718 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48247) *
                C10789 +
            ((C26662 + C26663) * C717 + (C26664 + C26665) * C48470 -
             (C27132 + C27133) * C718 - (C27134 + C27135) * C48247) *
                C48522) *
               C48141 * C2825 +
           (((C16762 + C16761) * C718 -
             ((C16570 + C16569) * C48470 + (C16568 + C16567) * C717) +
             (C16764 + C16763) * C48247) *
                C10789 +
            ((C17465 + C17466) * C718 -
             ((C16958 + C16957) * C48470 + (C16956 + C16955) * C717) +
             (C17467 + C17468) * C48247) *
                C48522) *
               C48141 * C48166) *
              C48285 +
          ((((C27133 + C27132) * C718 -
             ((C26665 + C26664) * C48470 + (C26663 + C26662) * C717) +
             (C27135 + C27134) * C48247) *
                C10789 +
            ((C27538 + C27539) * C718 -
             ((C26666 + C26667) * C48470 + (C26668 + C26669) * C717) +
             (C27540 + C27541) * C48247) *
                C48522) *
               C48141 * C2825 +
           (((C16955 + C16956) * C717 + (C16957 + C16958) * C48470 -
             (C17466 + C17465) * C718 - (C17468 + C17467) * C48247) *
                C10789 +
            ((C16963 + C16964) * C717 + (C16965 + C16966) * C48470 -
             (C18901 + C18902) * C718 - (C18903 + C18904) * C48247) *
                C48522) *
               C48141 * C48166) *
              C48292 +
          ((((C26669 + C26668) * C717 + (C26667 + C26666) * C48470 -
             (C27539 + C27538) * C718 - (C27541 + C27540) * C48247) *
                C10789 +
            ((C28406 + C28407) * C717 + (C28408 + C28409) * C48470 -
             (C28876 + C28877) * C718 - (C28878 + C28879) * C48247) *
                C48522) *
               C48141 * C2825 +
           (((C18902 + C18901) * C718 -
             ((C16966 + C16965) * C48470 + (C16964 + C16963) * C717) +
             (C18904 + C18903) * C48247) *
                C10789 +
            ((C16532 * C2582 + C16528 * C2586 + C16533 * C7736 +
              C48520 * C7739) *
                 C718 -
             ((C19046 + C19045) * C48470 + (C19044 + C19043) * C717) +
             (C16532 * C2587 + C16528 * C2591 + C16533 * C7740 +
              C48520 * C7742) *
                 C48247) *
                C48522) *
               C48141 * C48166) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C305 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48541 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C306 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48529 +
             (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                 C307 +
             (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                 C48502) *
                C10789 +
            ((C26662 + C26663) * C305 + (C26664 + C26665) * C48541 -
             (C27132 + C27133) * C306 - (C27134 + C27135) * C48529 +
             (C27534 + C27535) * C307 + (C27536 + C27537) * C48502) *
                C48522) *
               C48141 * C2825 +
           (((C16762 + C16761) * C306 -
             ((C16570 + C16569) * C48541 + (C16568 + C16567) * C305) +
             (C16764 + C16763) * C48529 - (C16766 + C16765) * C307 -
             (C16768 + C16767) * C48502) *
                C10789 +
            ((C17465 + C17466) * C306 -
             ((C16958 + C16957) * C48541 + (C16956 + C16955) * C305) +
             (C17467 + C17468) * C48529 - (C18191 + C18192) * C307 -
             (C18193 + C18194) * C48502) *
                C48522) *
               C48141 * C48166) *
              C3562 +
          ((((C27133 + C27132) * C306 -
             ((C26665 + C26664) * C48541 + (C26663 + C26662) * C305) +
             (C27135 + C27134) * C48529 - (C27535 + C27534) * C307 -
             (C27537 + C27536) * C48502) *
                C10789 +
            ((C27538 + C27539) * C306 -
             ((C26666 + C26667) * C48541 + (C26668 + C26669) * C305) +
             (C27540 + C27541) * C48529 - (C27542 + C27543) * C307 -
             (C27544 + C27545) * C48502) *
                C48522) *
               C48141 * C2825 +
           (((C16955 + C16956) * C305 + (C16957 + C16958) * C48541 -
             (C17466 + C17465) * C306 - (C17468 + C17467) * C48529 +
             (C18192 + C18191) * C307 + (C18194 + C18193) * C48502) *
                C10789 +
            ((C16963 + C16964) * C305 + (C16965 + C16966) * C48541 -
             (C18901 + C18902) * C306 - (C18903 + C18904) * C48529 +
             (C16532 * C1423 + C16528 * C1438 + C16533 * C6382 +
              C48520 * C6385) *
                 C307 +
             (C16532 * C1439 + C16528 * C1450 + C16533 * C6386 +
              C48520 * C6388) *
                 C48502) *
                C48522) *
               C48141 * C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C10789 +
            ((C26662 + C26663) * C114 + (C26664 + C26665) * C48184) * C48522) *
               C48141 * C48547 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48522 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C10789) *
               C48141 * C48540 +
           (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C10789 +
            ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48522) *
               C48141 * C48527 -
           (((C17251 + C17252) * C48184 + (C17253 + C17254) * C114) * C48522 +
            ((C16578 + C16577) * C48184 + (C16576 + C16575) * C114) * C10789) *
               C48141 * C48506) *
              C3562 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C10789 +
            ((C16963 + C16964) * C114 + (C16965 + C16966) * C48184) * C48522) *
               C48141 * C48540 -
           (((C26666 + C26667) * C48184 + (C26668 + C26669) * C114) * C48522 +
            ((C26665 + C26664) * C48184 + (C26663 + C26662) * C114) * C10789) *
               C48141 * C48547 -
           (((C16967 + C16968) * C48184 + (C16969 + C16970) * C114) * C48522 +
            ((C16962 + C16961) * C48184 + (C16960 + C16959) * C114) * C10789) *
               C48141 * C48527 +
           (((C17254 + C17253) * C114 + (C17252 + C17251) * C48184) * C10789 +
            ((C16532 * C529 + C16528 * C548 + C16533 * C2337 + C48520 * C2338) *
                 C114 +
             (C16532 * C547 + C16528 * C559 + C16533 * C2339 + C48520 * C2340) *
                 C48184) *
                C48522) *
               C48141 * C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C10789 +
            ((C26662 + C26663) * C114 + (C26664 + C26665) * C48184) * C48522) *
               C48141 * C2825 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48522 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C10789) *
               C48141 * C48166) *
              C48549 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C10789 +
            ((C16963 + C16964) * C114 + (C16965 + C16966) * C48184) * C48522) *
               C48141 * C48166 -
           (((C26666 + C26667) * C48184 + (C26668 + C26669) * C114) * C48522 +
            ((C26665 + C26664) * C48184 + (C26663 + C26662) * C114) * C10789) *
               C48141 * C2825) *
              C48546 +
          ((((C26669 + C26668) * C114 + (C26667 + C26666) * C48184) * C10789 +
            ((C28406 + C28407) * C114 + (C28408 + C28409) * C48184) * C48522) *
               C48141 * C2825 -
           (((C19046 + C19045) * C48184 + (C19044 + C19043) * C114) * C48522 +
            ((C16966 + C16965) * C48184 + (C16964 + C16963) * C114) * C10789) *
               C48141 * C48166) *
              C48537 +
          ((((C19043 + C19044) * C114 + (C19045 + C19046) * C48184) * C10789 +
            ((C16532 * C2171 + C16528 * C2181 + C16533 * C7250 +
              C48520 * C7253) *
                 C114 +
             (C16532 * C2182 + C16528 * C2189 + C16533 * C7254 +
              C48520 * C7256) *
                 C48184) *
                C48522) *
               C48141 * C48166 -
           (((C28410 + C28411) * C48184 + (C28412 + C28413) * C114) * C48522 +
            ((C28409 + C28408) * C48184 + (C28407 + C28406) * C114) * C10789) *
               C48141 * C2825) *
              C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C10789 +
            ((C26662 + C26663) * C114 + (C26664 + C26665) * C48184) * C48522) *
               C48141 * C48161 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48522 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C10789) *
               C48141 * C48169 +
           (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C10789 +
            ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48522) *
               C48141 * C3124) *
              C48285 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C10789 +
            ((C16963 + C16964) * C114 + (C16965 + C16966) * C48184) * C48522) *
               C48141 * C48169 -
           (((C26666 + C26667) * C48184 + (C26668 + C26669) * C114) * C48522 +
            ((C26665 + C26664) * C48184 + (C26663 + C26662) * C114) * C10789) *
               C48141 * C48161 -
           (((C16967 + C16968) * C48184 + (C16969 + C16970) * C114) * C48522 +
            ((C16962 + C16961) * C48184 + (C16960 + C16959) * C114) * C10789) *
               C48141 * C3124) *
              C48292 +
          ((((C26669 + C26668) * C114 + (C26667 + C26666) * C48184) * C10789 +
            ((C28406 + C28407) * C114 + (C28408 + C28409) * C48184) * C48522) *
               C48141 * C48161 -
           (((C19046 + C19045) * C48184 + (C19044 + C19043) * C114) * C48522 +
            ((C16966 + C16965) * C48184 + (C16964 + C16963) * C114) * C10789) *
               C48141 * C48169 +
           (((C16970 + C16969) * C114 + (C16968 + C16967) * C48184) * C10789 +
            ((C16532 * C2167 + C16528 * C2174 + C16533 * C2583 +
              C48520 * C2588) *
                 C114 +
             (C16532 * C2173 + C16528 * C2185 + C16533 * C2589 +
              C48520 * C2592) *
                 C48184) *
                C48522) *
               C48141 * C3124) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C10789 +
            ((C26662 + C26663) * C114 + (C26664 + C26665) * C48184) * C48522) *
               C48141 * C48547 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48522 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C10789) *
               C48141 * C48540 +
           (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C10789 +
            ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48522) *
               C48141 * C48527 -
           (((C17251 + C17252) * C48184 + (C17253 + C17254) * C114) * C48522 +
            ((C16578 + C16577) * C48184 + (C16576 + C16575) * C114) * C10789) *
               C48141 * C48506) *
              C3562 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C10789 +
            ((C16963 + C16964) * C114 + (C16965 + C16966) * C48184) * C48522) *
               C48141 * C48540 -
           (((C26666 + C26667) * C48184 + (C26668 + C26669) * C114) * C48522 +
            ((C26665 + C26664) * C48184 + (C26663 + C26662) * C114) * C10789) *
               C48141 * C48547 -
           (((C16967 + C16968) * C48184 + (C16969 + C16970) * C114) * C48522 +
            ((C16962 + C16961) * C48184 + (C16960 + C16959) * C114) * C10789) *
               C48141 * C48527 +
           (((C17254 + C17253) * C114 + (C17252 + C17251) * C48184) * C10789 +
            ((C16532 * C529 + C16528 * C548 + C16533 * C2337 + C48520 * C2338) *
                 C114 +
             (C16532 * C547 + C16528 * C559 + C16533 * C2339 + C48520 * C2340) *
                 C48184) *
                C48522) *
               C48141 * C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C305 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48541 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C306 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48529 +
             (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                 C307 +
             (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                 C48502) *
                C10789 +
            ((C26662 + C26663) * C305 + (C26664 + C26665) * C48541 -
             (C27132 + C27133) * C306 - (C27134 + C27135) * C48529 +
             (C27534 + C27535) * C307 + (C27536 + C27537) * C48502) *
                C48522) *
               C48141 * C2825 +
           (((C16762 + C16761) * C306 -
             ((C16570 + C16569) * C48541 + (C16568 + C16567) * C305) +
             (C16764 + C16763) * C48529 - (C16766 + C16765) * C307 -
             (C16768 + C16767) * C48502) *
                C10789 +
            ((C17465 + C17466) * C306 -
             ((C16958 + C16957) * C48541 + (C16956 + C16955) * C305) +
             (C17467 + C17468) * C48529 - (C18191 + C18192) * C307 -
             (C18193 + C18194) * C48502) *
                C48522) *
               C48141 * C48166) *
              C3562 +
          ((((C27133 + C27132) * C306 -
             ((C26665 + C26664) * C48541 + (C26663 + C26662) * C305) +
             (C27135 + C27134) * C48529 - (C27535 + C27534) * C307 -
             (C27537 + C27536) * C48502) *
                C10789 +
            ((C27538 + C27539) * C306 -
             ((C26666 + C26667) * C48541 + (C26668 + C26669) * C305) +
             (C27540 + C27541) * C48529 - (C27542 + C27543) * C307 -
             (C27544 + C27545) * C48502) *
                C48522) *
               C48141 * C2825 +
           (((C16955 + C16956) * C305 + (C16957 + C16958) * C48541 -
             (C17466 + C17465) * C306 - (C17468 + C17467) * C48529 +
             (C18192 + C18191) * C307 + (C18194 + C18193) * C48502) *
                C10789 +
            ((C16963 + C16964) * C305 + (C16965 + C16966) * C48541 -
             (C18901 + C18902) * C306 - (C18903 + C18904) * C48529 +
             (C16532 * C1423 + C16528 * C1438 + C16533 * C6382 +
              C48520 * C6385) *
                 C307 +
             (C16532 * C1439 + C16528 * C1450 + C16533 * C6386 +
              C48520 * C6388) *
                 C48502) *
                C48522) *
               C48141 * C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C717 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48470 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C718 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48247) *
               C10789 +
           ((C26662 + C26663) * C717 + (C26664 + C26665) * C48470 -
            (C16533 * C1417 + C48520 * C1426 + C16532 * C1013 +
             C16528 * C1018) *
                C718 -
            (C16533 * C1427 + C48520 * C1444 + C16532 * C1019 +
             C16528 * C1028) *
                C48247) *
               C48522) *
              C48141 * C713 +
          (((C16762 + C16761) * C718 -
            ((C16570 + C16569) * C48470 + (C16568 + C16567) * C717) +
            (C16764 + C16763) * C48247) *
               C10789 +
           ((C17465 + C17466) * C718 -
            ((C16958 + C16957) * C48470 + (C16956 + C16955) * C717) +
            (C17467 + C17468) * C48247) *
               C48522) *
              C48141 * C714 +
          (((C16574 + C16573) * C717 + (C16572 + C16571) * C48470 -
            (C16770 + C16769) * C718 - (C16772 + C16771) * C48247) *
               C10789 +
           ((C16959 + C16960) * C717 + (C16961 + C16962) * C48470 -
            (C17469 + C17470) * C718 - (C17471 + C17472) * C48247) *
               C48522) *
              C48141 * C715 +
          (((C17110 + C17109) * C718 -
            ((C16578 + C16577) * C48470 + (C16576 + C16575) * C717) +
            (C17112 + C17111) * C48247) *
               C10789 +
           ((C16532 * C1016 + C16528 * C1024 + C16533 * C1739 +
             C48520 * C1740) *
                C718 -
            ((C17251 + C17252) * C48470 + (C17253 + C17254) * C717) +
            (C16532 * C1025 + C16528 * C1031 + C16533 * C1741 +
             C48520 * C1742) *
                C48247) *
               C48522) *
              C48141 * C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C1557 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C1551 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C1558 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C1552 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C1559 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C1553 -
            (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 +
             C16528 * C1289) *
                C1560 -
            (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 +
             C16528 * C1301) *
                C48512) *
               C10789 +
           ((C26662 + C26663) * C1557 + (C26664 + C26665) * C1551 -
            (C27132 + C27133) * C1558 - (C27134 + C27135) * C1552 +
            (C27534 + C27535) * C1559 + (C27536 + C27537) * C1553 -
            (C16533 * C6867 + C48520 * C6869 + C16532 * C1865 +
             C16528 * C1868) *
                C1560 -
            (C16533 * C6870 + C48520 * C6873 + C16532 * C1869 +
             C16528 * C1874) *
                C48512) *
               C48522) *
              C48141 * C48456 +
          (((C16762 + C16761) * C1558 -
            ((C16570 + C16569) * C1551 + (C16568 + C16567) * C1557) +
            (C16764 + C16763) * C1552 - (C16766 + C16765) * C1559 -
            (C16768 + C16767) * C1553 + (C17986 + C17985) * C1560 +
            (C17988 + C17987) * C48512) *
               C10789 +
           ((C17465 + C17466) * C1558 -
            ((C16958 + C16957) * C1551 + (C16956 + C16955) * C1557) +
            (C17467 + C17468) * C1552 - (C18191 + C18192) * C1559 -
            (C18193 + C18194) * C1553 +
            (C16532 * C1866 + C16528 * C1870 + C16533 * C6868 +
             C48520 * C6871) *
                C1560 +
            (C16532 * C1871 + C16528 * C1875 + C16533 * C6872 +
             C48520 * C6874) *
                C48512) *
               C48522) *
              C48141 * C48166) *
         C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C717 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48470 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C718 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C48247) *
                C10789 +
            ((C26662 + C26663) * C717 + (C26664 + C26665) * C48470 -
             (C27132 + C27133) * C718 - (C27134 + C27135) * C48247) *
                C48522) *
               C48141 * C302 +
           (((C16762 + C16761) * C718 -
             ((C16570 + C16569) * C48470 + (C16568 + C16567) * C717) +
             (C16764 + C16763) * C48247) *
                C10789 +
            ((C17465 + C17466) * C718 -
             ((C16958 + C16957) * C48470 + (C16956 + C16955) * C717) +
             (C17467 + C17468) * C48247) *
                C48522) *
               C48141 * C303 +
           (((C16574 + C16573) * C717 + (C16572 + C16571) * C48470 -
             (C16770 + C16769) * C718 - (C16772 + C16771) * C48247) *
                C10789 +
            ((C16959 + C16960) * C717 + (C16961 + C16962) * C48470 -
             (C17469 + C17470) * C718 - (C17471 + C17472) * C48247) *
                C48522) *
               C48141 * C48496) *
              C48471 +
          ((((C27133 + C27132) * C718 -
             ((C26665 + C26664) * C48470 + (C26663 + C26662) * C717) +
             (C27135 + C27134) * C48247) *
                C10789 +
            ((C16532 * C1420 + C16528 * C1432 + C16533 * C1421 +
              C48520 * C1434) *
                 C718 -
             ((C26666 + C26667) * C48470 + (C26668 + C26669) * C717) +
             (C16532 * C1433 + C16528 * C1447 + C16533 * C1435 +
              C48520 * C1448) *
                 C48247) *
                C48522) *
               C48141 * C302 +
           (((C16955 + C16956) * C717 + (C16957 + C16958) * C48470 -
             (C17466 + C17465) * C718 - (C17468 + C17467) * C48247) *
                C10789 +
            ((C16963 + C16964) * C717 + (C16965 + C16966) * C48470 -
             (C18901 + C18902) * C718 - (C18903 + C18904) * C48247) *
                C48522) *
               C48141 * C303 +
           (((C17470 + C17469) * C718 -
             ((C16962 + C16961) * C48470 + (C16960 + C16959) * C717) +
             (C17472 + C17471) * C48247) *
                C10789 +
            ((C16532 * C1424 + C16528 * C1440 + C16533 * C1425 +
              C48520 * C1442) *
                 C718 -
             ((C16967 + C16968) * C48470 + (C16969 + C16970) * C717) +
             (C16532 * C1441 + C16528 * C1451 + C16533 * C1443 +
              C48520 * C1452) *
                 C48247) *
                C48522) *
               C48141 * C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C1557 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C1551 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C1558 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C1552 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C1559 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C1553 -
            (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 +
             C16528 * C1289) *
                C1560 -
            (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 +
             C16528 * C1301) *
                C48512) *
               C10789 +
           ((C26662 + C26663) * C1557 + (C26664 + C26665) * C1551 -
            (C27132 + C27133) * C1558 - (C27134 + C27135) * C1552 +
            (C27534 + C27535) * C1559 + (C27536 + C27537) * C1553 -
            (C28008 + C28009) * C1560 - (C28010 + C28011) * C48512) *
               C48522) *
              C48141 * C48156 * C48471 +
          (((C27133 + C27132) * C1558 -
            ((C26665 + C26664) * C1551 + (C26663 + C26662) * C1557) +
            (C27135 + C27134) * C1552 - (C27535 + C27534) * C1559 -
            (C27537 + C27536) * C1553 + (C28009 + C28008) * C1560 +
            (C28011 + C28010) * C48512) *
               C10789 +
           ((C27538 + C27539) * C1558 -
            ((C26666 + C26667) * C1551 + (C26668 + C26669) * C1557) +
            (C27540 + C27541) * C1552 - (C27542 + C27543) * C1559 -
            (C27544 + C27545) * C1553 +
            (C16532 * C6381 + C16528 * C6383 + C16533 * C23057 +
             C48520 * C23058) *
                C1560 +
            (C16532 * C6384 + C16528 * C6387 + C16533 * C23059 +
             C48520 * C23060) *
                C48512) *
               C48522) *
              C48141 * C48156 * C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C305 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48541 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C306 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48529 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C307 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C10789 +
           ((C16532 * C524 + C16528 * C538 + C16533 * C1013 + C48520 * C1018) *
                C305 +
            (C16532 * C537 + C16528 * C554 + C16533 * C1019 + C48520 * C1028) *
                C48541 -
            (C16533 * C1417 + C48520 * C1426 + C16532 * C1013 +
             C16528 * C1018) *
                C306 -
            (C16533 * C1427 + C48520 * C1444 + C16532 * C1019 +
             C16528 * C1028) *
                C48529 +
            (C16532 * C1417 + C16528 * C1426 + C16533 * C1865 +
             C48520 * C1868) *
                C307 +
            (C16532 * C1427 + C16528 * C1444 + C16533 * C1869 +
             C48520 * C1874) *
                C48502) *
               C48522) *
              C48141 * C302 +
          (((C16762 + C16761) * C306 -
            ((C16570 + C16569) * C48541 + (C16568 + C16567) * C305) +
            (C16764 + C16763) * C48529 - (C16766 + C16765) * C307 -
            (C16768 + C16767) * C48502) *
               C10789 +
           ((C17465 + C17466) * C306 -
            ((C16958 + C16957) * C48541 + (C16956 + C16955) * C305) +
            (C17467 + C17468) * C48529 - (C18191 + C18192) * C307 -
            (C18193 + C18194) * C48502) *
               C48522) *
              C48141 * C303 +
          (((C16574 + C16573) * C305 + (C16572 + C16571) * C48541 -
            (C16770 + C16769) * C306 - (C16772 + C16771) * C48529 +
            (C16774 + C16773) * C307 + (C16776 + C16775) * C48502) *
               C10789 +
           ((C16959 + C16960) * C305 + (C16961 + C16962) * C48541 -
            (C17469 + C17470) * C306 - (C17471 + C17472) * C48529 +
            (C16532 * C1419 + C16528 * C1430 + C16533 * C1867 +
             C48520 * C1872) *
                C307 +
            (C16532 * C1431 + C16528 * C1446 + C16533 * C1873 +
             C48520 * C1876) *
                C48502) *
               C48522) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C114 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48184) *
               C10789 +
           ((C16532 * C524 + C16528 * C538 + C16533 * C1013 + C48520 * C1018) *
                C114 +
            (C16532 * C537 + C16528 * C554 + C16533 * C1019 + C48520 * C1028) *
                C48184) *
               C48522) *
              C48141 * C107 -
          (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48522 +
           ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C10789) *
              C48141 * C108 +
          (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C10789 +
           ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48522) *
              C48141 * C109 -
          (((C17251 + C17252) * C48184 + (C17253 + C17254) * C114) * C48522 +
           ((C16578 + C16577) * C48184 + (C16576 + C16575) * C114) * C10789) *
              C48141 * C110 +
          (((C16582 + C16581) * C114 + (C16580 + C16579) * C48184) * C10789 +
           ((C16532 * C525 + C16528 * C540 + C16533 * C1017 + C48520 * C1026) *
                C114 +
            (C16532 * C539 + C16528 * C555 + C16533 * C1027 + C48520 * C1032) *
                C48184) *
               C48522) *
              C48141 * C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C10789 +
            ((C26662 + C26663) * C114 + (C26664 + C26665) * C48184) * C48522) *
               C48141 * C302 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48522 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C10789) *
               C48141 * C303 +
           (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C10789 +
            ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48522) *
               C48141 * C48496) *
              C48542 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C10789 +
            ((C16963 + C16964) * C114 + (C16965 + C16966) * C48184) * C48522) *
               C48141 * C303 -
           (((C26666 + C26667) * C48184 + (C26668 + C26669) * C114) * C48522 +
            ((C26665 + C26664) * C48184 + (C26663 + C26662) * C114) * C10789) *
               C48141 * C302 -
           (((C16967 + C16968) * C48184 + (C16969 + C16970) * C114) * C48522 +
            ((C16962 + C16961) * C48184 + (C16960 + C16959) * C114) * C10789) *
               C48141 * C48496) *
              C48531 +
          ((((C26669 + C26668) * C114 + (C26667 + C26666) * C48184) * C10789 +
            ((C16532 * C2169 + C16528 * C2178 + C16533 * C2581 +
              C48520 * C2584) *
                 C114 +
             (C16532 * C2177 + C16528 * C2187 + C16533 * C2585 +
              C48520 * C2590) *
                 C48184) *
                C48522) *
               C48141 * C302 -
           (((C19046 + C19045) * C48184 + (C19044 + C19043) * C114) * C48522 +
            ((C16966 + C16965) * C48184 + (C16964 + C16963) * C114) * C10789) *
               C48141 * C303 +
           (((C16970 + C16969) * C114 + (C16968 + C16967) * C48184) * C10789 +
            ((C16532 * C2167 + C16528 * C2174 + C16533 * C2583 +
              C48520 * C2588) *
                 C114 +
             (C16532 * C2173 + C16528 * C2185 + C16533 * C2589 +
              C48520 * C2592) *
                 C48184) *
                C48522) *
               C48141 * C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C1183 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C1177 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C1184 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C1178 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C1185 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C10789 +
           ((C26662 + C26663) * C1183 + (C26664 + C26665) * C1177 -
            (C27132 + C27133) * C1184 - (C27134 + C27135) * C1178 +
            (C16532 * C1417 + C16528 * C1426 + C16533 * C1865 +
             C48520 * C1868) *
                C1185 +
            (C16532 * C1427 + C16528 * C1444 + C16533 * C1869 +
             C48520 * C1874) *
                C48502) *
               C48522) *
              C48141 * C48538 +
          (((C16762 + C16761) * C1184 -
            ((C16570 + C16569) * C1177 + (C16568 + C16567) * C1183) +
            (C16764 + C16763) * C1178 - (C16766 + C16765) * C1185 -
            (C16768 + C16767) * C48502) *
               C10789 +
           ((C17465 + C17466) * C1184 -
            ((C16958 + C16957) * C1177 + (C16956 + C16955) * C1183) +
            (C17467 + C17468) * C1178 - (C18191 + C18192) * C1185 -
            (C18193 + C18194) * C48502) *
               C48522) *
              C48141 * C48525 +
          (((C16574 + C16573) * C1183 + (C16572 + C16571) * C1177 -
            (C16770 + C16769) * C1184 - (C16772 + C16771) * C1178 +
            (C16774 + C16773) * C1185 + (C16776 + C16775) * C48502) *
               C10789 +
           ((C16959 + C16960) * C1183 + (C16961 + C16962) * C1177 -
            (C17469 + C17470) * C1184 - (C17471 + C17472) * C1178 +
            (C16532 * C1419 + C16528 * C1430 + C16533 * C1867 +
             C48520 * C1872) *
                C1185 +
            (C16532 * C1431 + C16528 * C1446 + C16533 * C1873 +
             C48520 * C1876) *
                C48502) *
               C48522) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
               C1278 +
           (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
               C1272 -
           (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
               C1279 -
           (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
               C1273 +
           (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
               C1280 +
           (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
               C1274 -
           (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 + C16528 * C1289) *
               C1281 -
           (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 + C16528 * C1301) *
               C1275 +
           (C16532 * C1284 + C16528 * C1291 + C16533 * C6227 + C48520 * C6229) *
               C1282 +
           (C16532 * C1292 + C16528 * C1302 + C16533 * C6230 + C48520 * C6233) *
               C1276) *
              C10789 +
          ((C26662 + C26663) * C1278 + (C26664 + C26665) * C1272 -
           (C27132 + C27133) * C1279 - (C27134 + C27135) * C1273 +
           (C16532 * C1417 + C16528 * C1426 + C16533 * C1865 + C48520 * C1868) *
               C1280 +
           (C16532 * C1427 + C16528 * C1444 + C16533 * C1869 + C48520 * C1874) *
               C1274 -
           (C16533 * C6867 + C48520 * C6869 + C16532 * C1865 + C16528 * C1868) *
               C1281 -
           (C16533 * C6870 + C48520 * C6873 + C16532 * C1869 + C16528 * C1874) *
               C1275 +
           (C16532 * C6867 + C16528 * C6869 + C16533 * C23403 +
            C48520 * C23404) *
               C1282 +
           (C16532 * C6870 + C16528 * C6873 + C16533 * C23405 +
            C48520 * C23406) *
               C1276) *
              C48522) *
         C48141 * C48156 * C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C1183 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C1177 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C1184 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C1178 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C1185 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C10789 +
           ((C26662 + C26663) * C1183 + (C26664 + C26665) * C1177 -
            (C27132 + C27133) * C1184 - (C27134 + C27135) * C1178 +
            (C27534 + C27535) * C1185 + (C27536 + C27537) * C48502) *
               C48522) *
              C48141 * C48156 * C48542 +
          (((C27133 + C27132) * C1184 -
            ((C26665 + C26664) * C1177 + (C26663 + C26662) * C1183) +
            (C27135 + C27134) * C1178 - (C27535 + C27534) * C1185 -
            (C27537 + C27536) * C48502) *
               C10789 +
           ((C27538 + C27539) * C1184 -
            ((C26666 + C26667) * C1177 + (C26668 + C26669) * C1183) +
            (C27540 + C27541) * C1178 - (C27542 + C27543) * C1185 -
            (C27544 + C27545) * C48502) *
               C48522) *
              C48141 * C48156 * C48531 +
          (((C26669 + C26668) * C1183 + (C26667 + C26666) * C1177 -
            (C27539 + C27538) * C1184 - (C27541 + C27540) * C1178 +
            (C27543 + C27542) * C1185 + (C27545 + C27544) * C48502) *
               C10789 +
           ((C16532 * C2169 + C16528 * C2178 + C16533 * C2581 +
             C48520 * C2584) *
                C1183 +
            (C16532 * C2177 + C16528 * C2187 + C16533 * C2585 +
             C48520 * C2590) *
                C1177 -
            (C16533 * C7735 + C48520 * C7737 + C16532 * C2581 +
             C16528 * C2584) *
                C1184 -
            (C16533 * C7738 + C48520 * C7741 + C16532 * C2585 +
             C16528 * C2590) *
                C1178 +
            (C16532 * C7735 + C16528 * C7737 + C16533 * C24035 +
             C48520 * C24036) *
                C1185 +
            (C16532 * C7738 + C16528 * C7741 + C16533 * C24037 +
             C48520 * C24038) *
                C48502) *
               C48522) *
              C48141 * C48156 * C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C114 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C48184) *
                C10789 +
            ((C26662 + C26663) * C114 + (C26664 + C26665) * C48184) * C48522) *
               C48141 * C713 -
           (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48522 +
            ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C10789) *
               C48141 * C714 +
           (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C10789 +
            ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48522) *
               C48141 * C715 -
           (((C17251 + C17252) * C48184 + (C17253 + C17254) * C114) * C48522 +
            ((C16578 + C16577) * C48184 + (C16576 + C16575) * C114) * C10789) *
               C48141 * C48506) *
              C48471 +
          ((((C16955 + C16956) * C114 + (C16957 + C16958) * C48184) * C10789 +
            ((C16963 + C16964) * C114 + (C16965 + C16966) * C48184) * C48522) *
               C48141 * C714 -
           (((C26666 + C26667) * C48184 + (C26668 + C26669) * C114) * C48522 +
            ((C26665 + C26664) * C48184 + (C26663 + C26662) * C114) * C10789) *
               C48141 * C713 -
           (((C16967 + C16968) * C48184 + (C16969 + C16970) * C114) * C48522 +
            ((C16962 + C16961) * C48184 + (C16960 + C16959) * C114) * C10789) *
               C48141 * C715 +
           (((C17254 + C17253) * C114 + (C17252 + C17251) * C48184) * C10789 +
            ((C16532 * C529 + C16528 * C548 + C16533 * C2337 + C48520 * C2338) *
                 C114 +
             (C16532 * C547 + C16528 * C559 + C16533 * C2339 + C48520 * C2340) *
                 C48184) *
                C48522) *
               C48141 * C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                 C1183 +
             (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                 C1177 -
             (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                 C1184 -
             (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                 C1178 +
             (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                 C1185 +
             (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                 C48502) *
                C10789 +
            ((C26662 + C26663) * C1183 + (C26664 + C26665) * C1177 -
             (C27132 + C27133) * C1184 - (C27134 + C27135) * C1178 +
             (C27534 + C27535) * C1185 + (C27536 + C27537) * C48502) *
                C48522) *
               C48141 * C48456 +
           (((C16762 + C16761) * C1184 -
             ((C16570 + C16569) * C1177 + (C16568 + C16567) * C1183) +
             (C16764 + C16763) * C1178 - (C16766 + C16765) * C1185 -
             (C16768 + C16767) * C48502) *
                C10789 +
            ((C17465 + C17466) * C1184 -
             ((C16958 + C16957) * C1177 + (C16956 + C16955) * C1183) +
             (C17467 + C17468) * C1178 - (C18191 + C18192) * C1185 -
             (C18193 + C18194) * C48502) *
                C48522) *
               C48141 * C48166) *
              C48471 +
          ((((C27133 + C27132) * C1184 -
             ((C26665 + C26664) * C1177 + (C26663 + C26662) * C1183) +
             (C27135 + C27134) * C1178 - (C27535 + C27534) * C1185 -
             (C27537 + C27536) * C48502) *
                C10789 +
            ((C27538 + C27539) * C1184 -
             ((C26666 + C26667) * C1177 + (C26668 + C26669) * C1183) +
             (C27540 + C27541) * C1178 - (C27542 + C27543) * C1185 -
             (C27544 + C27545) * C48502) *
                C48522) *
               C48141 * C48456 +
           (((C16955 + C16956) * C1183 + (C16957 + C16958) * C1177 -
             (C17466 + C17465) * C1184 - (C17468 + C17467) * C1178 +
             (C18192 + C18191) * C1185 + (C18194 + C18193) * C48502) *
                C10789 +
            ((C16963 + C16964) * C1183 + (C16965 + C16966) * C1177 -
             (C18901 + C18902) * C1184 - (C18903 + C18904) * C1178 +
             (C16532 * C1423 + C16528 * C1438 + C16533 * C6382 +
              C48520 * C6385) *
                 C1185 +
             (C16532 * C1439 + C16528 * C1450 + C16533 * C6386 +
              C48520 * C6388) *
                 C48502) *
                C48522) *
               C48141 * C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C114 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48184) *
               C10789 +
           ((C16532 * C524 + C16528 * C538 + C16533 * C1013 + C48520 * C1018) *
                C114 +
            (C16532 * C537 + C16528 * C554 + C16533 * C1019 + C48520 * C1028) *
                C48184) *
               C48522) *
              C48141 * C107 -
          (((C16958 + C16957) * C48184 + (C16956 + C16955) * C114) * C48522 +
           ((C16570 + C16569) * C48184 + (C16568 + C16567) * C114) * C10789) *
              C48141 * C108 +
          (((C16574 + C16573) * C114 + (C16572 + C16571) * C48184) * C10789 +
           ((C16959 + C16960) * C114 + (C16961 + C16962) * C48184) * C48522) *
              C48141 * C109 -
          (((C17251 + C17252) * C48184 + (C17253 + C17254) * C114) * C48522 +
           ((C16578 + C16577) * C48184 + (C16576 + C16575) * C114) * C10789) *
              C48141 * C110 +
          (((C16582 + C16581) * C114 + (C16580 + C16579) * C48184) * C10789 +
           ((C16532 * C525 + C16528 * C540 + C16533 * C1017 + C48520 * C1026) *
                C114 +
            (C16532 * C539 + C16528 * C555 + C16533 * C1027 + C48520 * C1032) *
                C48184) *
               C48522) *
              C48141 * C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C305 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C48541 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C306 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C48529 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C307 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C10789 +
           ((C16532 * C524 + C16528 * C538 + C16533 * C1013 + C48520 * C1018) *
                C305 +
            (C16532 * C537 + C16528 * C554 + C16533 * C1019 + C48520 * C1028) *
                C48541 -
            (C16533 * C1417 + C48520 * C1426 + C16532 * C1013 +
             C16528 * C1018) *
                C306 -
            (C16533 * C1427 + C48520 * C1444 + C16532 * C1019 +
             C16528 * C1028) *
                C48529 +
            (C16532 * C1417 + C16528 * C1426 + C16533 * C1865 +
             C48520 * C1868) *
                C307 +
            (C16532 * C1427 + C16528 * C1444 + C16533 * C1869 +
             C48520 * C1874) *
                C48502) *
               C48522) *
              C48141 * C302 +
          (((C16762 + C16761) * C306 -
            ((C16570 + C16569) * C48541 + (C16568 + C16567) * C305) +
            (C16764 + C16763) * C48529 - (C16766 + C16765) * C307 -
            (C16768 + C16767) * C48502) *
               C10789 +
           ((C17465 + C17466) * C306 -
            ((C16958 + C16957) * C48541 + (C16956 + C16955) * C305) +
            (C17467 + C17468) * C48529 - (C18191 + C18192) * C307 -
            (C18193 + C18194) * C48502) *
               C48522) *
              C48141 * C303 +
          (((C16574 + C16573) * C305 + (C16572 + C16571) * C48541 -
            (C16770 + C16769) * C306 - (C16772 + C16771) * C48529 +
            (C16774 + C16773) * C307 + (C16776 + C16775) * C48502) *
               C10789 +
           ((C16959 + C16960) * C305 + (C16961 + C16962) * C48541 -
            (C17469 + C17470) * C306 - (C17471 + C17472) * C48529 +
            (C16532 * C1419 + C16528 * C1430 + C16533 * C1867 +
             C48520 * C1872) *
                C307 +
            (C16532 * C1431 + C16528 * C1446 + C16533 * C1873 +
             C48520 * C1876) *
                C48502) *
               C48522) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
                C1183 +
            (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
                C1177 -
            (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
                C1184 -
            (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
                C1178 +
            (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
                C1185 +
            (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
                C48502) *
               C10789 +
           ((C26662 + C26663) * C1183 + (C26664 + C26665) * C1177 -
            (C27132 + C27133) * C1184 - (C27134 + C27135) * C1178 +
            (C16532 * C1417 + C16528 * C1426 + C16533 * C1865 +
             C48520 * C1868) *
                C1185 +
            (C16532 * C1427 + C16528 * C1444 + C16533 * C1869 +
             C48520 * C1874) *
                C48502) *
               C48522) *
              C48141 * C48538 +
          (((C16762 + C16761) * C1184 -
            ((C16570 + C16569) * C1177 + (C16568 + C16567) * C1183) +
            (C16764 + C16763) * C1178 - (C16766 + C16765) * C1185 -
            (C16768 + C16767) * C48502) *
               C10789 +
           ((C17465 + C17466) * C1184 -
            ((C16958 + C16957) * C1177 + (C16956 + C16955) * C1183) +
            (C17467 + C17468) * C1178 - (C18191 + C18192) * C1185 -
            (C18193 + C18194) * C48502) *
               C48522) *
              C48141 * C48525 +
          (((C16574 + C16573) * C1183 + (C16572 + C16571) * C1177 -
            (C16770 + C16769) * C1184 - (C16772 + C16771) * C1178 +
            (C16774 + C16773) * C1185 + (C16776 + C16775) * C48502) *
               C10789 +
           ((C16959 + C16960) * C1183 + (C16961 + C16962) * C1177 -
            (C17469 + C17470) * C1184 - (C17471 + C17472) * C1178 +
            (C16532 * C1419 + C16528 * C1430 + C16533 * C1867 +
             C48520 * C1872) *
                C1185 +
            (C16532 * C1431 + C16528 * C1446 + C16533 * C1873 +
             C48520 * C1876) *
                C48502) *
               C48522) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C16532 * C115 + C16528 * C122 + C16533 * C308 + C48520 * C318) *
               C1278 +
           (C16532 * C123 + C16528 * C136 + C16533 * C319 + C48520 * C338) *
               C1272 -
           (C16533 * C309 + C48520 * C320 + C16532 * C308 + C16528 * C318) *
               C1279 -
           (C16533 * C321 + C48520 * C339 + C16532 * C319 + C16528 * C338) *
               C1273 +
           (C16532 * C309 + C16528 * C320 + C16533 * C1283 + C48520 * C1289) *
               C1280 +
           (C16532 * C321 + C16528 * C339 + C16533 * C1290 + C48520 * C1301) *
               C1274 -
           (C16533 * C1284 + C48520 * C1291 + C16532 * C1283 + C16528 * C1289) *
               C1281 -
           (C16533 * C1292 + C48520 * C1302 + C16532 * C1290 + C16528 * C1301) *
               C1275 +
           (C16532 * C1284 + C16528 * C1291 + C16533 * C6227 + C48520 * C6229) *
               C1282 +
           (C16532 * C1292 + C16528 * C1302 + C16533 * C6230 + C48520 * C6233) *
               C1276) *
              C10789 +
          ((C26662 + C26663) * C1278 + (C26664 + C26665) * C1272 -
           (C27132 + C27133) * C1279 - (C27134 + C27135) * C1273 +
           (C16532 * C1417 + C16528 * C1426 + C16533 * C1865 + C48520 * C1868) *
               C1280 +
           (C16532 * C1427 + C16528 * C1444 + C16533 * C1869 + C48520 * C1874) *
               C1274 -
           (C16533 * C6867 + C48520 * C6869 + C16532 * C1865 + C16528 * C1868) *
               C1281 -
           (C16533 * C6870 + C48520 * C6873 + C16532 * C1869 + C16528 * C1874) *
               C1275 +
           (C16532 * C6867 + C16528 * C6869 + C16533 * C23403 +
            C48520 * C23404) *
               C1282 +
           (C16532 * C6870 + C16528 * C6873 + C16533 * C23405 +
            C48520 * C23406) *
               C1276) *
              C48522) *
         C48141 * C48156 * C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C47163 +
             (C113 * C123 + C48388 * C136) * C48243 -
             (C113 * C308 + C48388 * C318) * C47155 -
             (C113 * C319 + C48388 * C338) * C48250 +
             (C113 * C309 + C48388 * C320) * C47169 +
             (C113 * C321 + C48388 * C339) * C3121) *
                C31925 +
            (C14421 + C14422 - C14423 - C14424 + C14425 + C14426) * C48522) *
               C16530 +
           ((C3129 + C3130 - C3131 - C3132 + C3133 + C3134) * C31925 +
            C14441 * C48522) *
               C48489) *
              C48161 +
          (((C3131 - (C3130 + C3129) + C3132 - C3133 - C3134) * C31925 +
            C14442 * C48522) *
               C16530 +
           ((C3137 - (C3136 + C3135) + C3138 - C3139 - C3140) * C31925 +
            (C3459 - (C3460 + C3461) + C3462 - C3463 - C3464) * C48522) *
               C48489) *
              C48169 +
          ((C3151 * C31925 +
            (C3461 + C3460 - C3459 - C3462 + C3463 + C3464) * C48522) *
               C16530 +
           ((C3143 + C3142 - C3141 - C3144 + C3145 + C3146) * C31925 +
            (C590 * C47163 + C591 * C48243 - C1057 * C47155 - C1058 * C48250 +
             (C113 * C1739 + C48388 * C1740) * C47169 +
             (C113 * C1741 + C48388 * C1742) * C3121) *
                C48522) *
               C48489) *
              C3124) *
         C48202) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C47163 +
              (C113 * C123 + C48388 * C136) * C48243 -
              (C113 * C308 + C48388 * C318) * C47155 -
              (C113 * C319 + C48388 * C338) * C48250 +
              (C113 * C309 + C48388 * C320) * C47169 +
              (C113 * C321 + C48388 * C339) * C3121) *
                 C31925 +
             (C14421 + C14422 - C14423 - C14424 + C14425 + C14426) * C48522) *
                C16530 +
            ((C3129 + C3130 - C3131 - C3132 + C3133 + C3134) * C31925 +
             C14441 * C48522) *
                C48489) *
               C2825 +
           (((C3131 - (C3130 + C3129) + C3132 - C3133 - C3134) * C31925 +
             C14442 * C48522) *
                C16530 +
            ((C3137 - (C3136 + C3135) + C3138 - C3139 - C3140) * C31925 +
             (C3459 - (C3460 + C3461) + C3462 - C3463 - C3464) * C48522) *
                C48489) *
               C48166) *
              C48471 +
          ((((C14423 - (C14422 + C14421) + C14424 - C14425 - C14426) * C31925 +
             (C16441 - (C16442 + C16443) + C16444 - C16445 - C16446) * C48522) *
                C16530 +
            (C14442 * C31925 +
             (C14429 - (C14430 + C14431) + C14432 - C14433 - C14434) * C48522) *
                C48489) *
               C2825 +
           ((C14441 * C31925 +
             (C14431 + C14430 - C14429 - C14432 + C14433 + C14434) * C48522) *
                C16530 +
            ((C3461 + C3460 - C3459 - C3462 + C3463 + C3464) * C31925 +
             (C594 * C47163 + C595 * C48243 - C2356 * C47155 - C2357 * C48250 +
              (C113 * C1425 + C48388 * C1442) * C47169 +
              (C113 * C1443 + C48388 * C1452) * C3121) *
                 C48522) *
                C48489) *
               C48166) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2827 +
             (C113 * C123 + C48388 * C136) * C48548 -
             (C113 * C308 + C48388 * C318) * C2828 -
             (C113 * C319 + C48388 * C338) * C48544 +
             (C113 * C309 + C48388 * C320) * C2829 +
             (C113 * C321 + C48388 * C339) * C48534 -
             (C113 * C1283 + C48388 * C1289) * C2830 -
             (C113 * C1290 + C48388 * C1301) * C48512) *
                C31925 +
            (C15765 + C15766 - C15767 - C15768 + C15769 + C15770 - C15771 -
             C15772) *
                C48522) *
               C16530 +
           ((C2832 + C2833 - C2834 - C2835 + C2836 + C2837 - C2838 - C2839) *
                C31925 +
            (C13658 + C13659 - C13660 - C13661 + C13662 + C13663 - C13664 -
             C13665) *
                C48522) *
               C48489) *
              C2825 +
          (((C2834 - (C2833 + C2832) + C2835 - C2836 - C2837 + C2838 + C2839) *
                C31925 +
            (C13660 - (C13659 + C13658) + C13661 - C13662 - C13663 + C13664 +
             C13665) *
                C48522) *
               C16530 +
           ((C2842 - (C2841 + C2840) + C2843 - C2844 - C2845 + C2846 + C2847) *
                C31925 +
            (C1054 * C2828 - (C589 * C48548 + C588 * C2827) + C1056 * C48544 -
             C1762 * C2829 - C1763 * C48534 +
             (C113 * C1867 + C48388 * C1872) * C2830 +
             (C113 * C1873 + C48388 * C1876) * C48512) *
                C48522) *
               C48489) *
              C48166) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2697 +
             (C113 * C123 + C48388 * C136) * C2691 -
             (C113 * C308 + C48388 * C318) * C2698 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C31925 +
            (C13860 + C13861 - C13862 - C13863) * C48522) *
               C16530 +
           ((C2700 + C2701 - C2702 - C2703) * C31925 + C13880 * C48522) *
               C48489) *
              C48547 +
          (((C2702 - (C2701 + C2700) + C2703) * C31925 + C13881 * C48522) *
               C16530 +
           ((C2706 - (C2705 + C2704) + C2707) * C31925 + C3305 * C48522) *
               C48489) *
              C48540 +
          ((C2720 * C31925 + C14226 * C48522) * C16530 +
           ((C2710 + C2709 - C2708 - C2711) * C31925 +
            (C3300 + C3301 - C3302 - C3303) * C48522) *
               C48489) *
              C48527 +
          ((C2721 * C31925 + (C3302 - (C3301 + C3300) + C3303) * C48522) *
               C16530 +
           ((C2714 - (C2713 + C2712) + C2715) * C31925 +
            ((C113 * C1017 + C48388 * C1026) * C2698 -
             (C864 * C2691 + C865 * C2697) +
             (C113 * C1027 + C48388 * C1032) * C48247) *
                C48522) *
               C48489) *
              C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C2697 +
              (C113 * C123 + C48388 * C136) * C2691 -
              (C113 * C308 + C48388 * C318) * C2698 -
              (C113 * C319 + C48388 * C338) * C48247) *
                 C31925 +
             (C13860 + C13861 - C13862 - C13863) * C48522) *
                C16530 +
            ((C2700 + C2701 - C2702 - C2703) * C31925 + C13880 * C48522) *
                C48489) *
               C2825 +
           (((C2702 - (C2701 + C2700) + C2703) * C31925 + C13881 * C48522) *
                C16530 +
            ((C2706 - (C2705 + C2704) + C2707) * C31925 + C3305 * C48522) *
                C48489) *
               C48166) *
              C48542 +
          ((((C13862 - (C13861 + C13860) + C13863) * C31925 +
             (C13866 - (C13867 + C13868) + C13869) * C48522) *
                C16530 +
            (C13881 * C31925 + C13882 * C48522) * C48489) *
               C2825 +
           ((C13880 * C31925 + C13883 * C48522) * C16530 +
            (C14226 * C31925 + (C3006 + C3007 - C3008 - C3009) * C48522) *
                C48489) *
               C48166) *
              C48531 +
          ((((C13868 + C13867 - C13866 - C13869) * C31925 +
             (C15903 + C15904 - C15905 - C15906) * C48522) *
                C16530 +
            (C13883 * C31925 + (C13872 + C13873 - C13874 - C13875) * C48522) *
                C48489) *
               C2825 +
           ((C13882 * C31925 + (C13874 - (C13873 + C13872) + C13875) * C48522) *
                C16530 +
            ((C3008 - (C3007 + C3006) + C3009) * C31925 +
             ((C113 * C2583 + C48388 * C2588) * C2698 -
              (C2479 * C2691 + C2478 * C2697) +
              (C113 * C2589 + C48388 * C2592) * C48247) *
                 C48522) *
                C48489) *
               C48166) *
              C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C2697 +
              (C113 * C123 + C48388 * C136) * C2691 -
              (C113 * C308 + C48388 * C318) * C2698 -
              (C113 * C319 + C48388 * C338) * C48247) *
                 C31925 +
             (C13860 + C13861 - C13862 - C13863) * C48522) *
                C16530 +
            ((C2700 + C2701 - C2702 - C2703) * C31925 + C13880 * C48522) *
                C48489) *
               C48161 +
           (((C2702 - (C2701 + C2700) + C2703) * C31925 + C13881 * C48522) *
                C16530 +
            ((C2706 - (C2705 + C2704) + C2707) * C31925 + C3305 * C48522) *
                C48489) *
               C48169 +
           ((C2720 * C31925 + C14226 * C48522) * C16530 +
            ((C2710 + C2709 - C2708 - C2711) * C31925 +
             (C3300 + C3301 - C3302 - C3303) * C48522) *
                C48489) *
               C3124) *
              C48471 +
          ((((C13862 - (C13861 + C13860) + C13863) * C31925 +
             (C13866 - (C13867 + C13868) + C13869) * C48522) *
                C16530 +
            (C13881 * C31925 + C13882 * C48522) * C48489) *
               C48161 +
           ((C13880 * C31925 + C13883 * C48522) * C16530 +
            (C14226 * C31925 + (C3006 + C3007 - C3008 - C3009) * C48522) *
                C48489) *
               C48169 +
           ((C3305 * C31925 + (C3008 - (C3007 + C3006) + C3009) * C48522) *
                C16530 +
            ((C3302 - (C3301 + C3300) + C3303) * C31925 +
             ((C113 * C2337 + C48388 * C2338) * C2698 -
              (C596 * C2691 + C597 * C2697) +
              (C113 * C2339 + C48388 * C2340) * C48247) *
                 C48522) *
                C48489) *
               C3124) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2697 +
             (C113 * C123 + C48388 * C136) * C2691 -
             (C113 * C308 + C48388 * C318) * C2698 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C31925 +
            (C13860 + C13861 - C13862 - C13863) * C48522) *
               C16530 +
           ((C2700 + C2701 - C2702 - C2703) * C31925 + C13880 * C48522) *
               C48489) *
              C48547 +
          (((C2702 - (C2701 + C2700) + C2703) * C31925 + C13881 * C48522) *
               C16530 +
           ((C2706 - (C2705 + C2704) + C2707) * C31925 + C3305 * C48522) *
               C48489) *
              C48540 +
          ((C2720 * C31925 + C14226 * C48522) * C16530 +
           ((C2710 + C2709 - C2708 - C2711) * C31925 +
            (C3300 + C3301 - C3302 - C3303) * C48522) *
               C48489) *
              C48527 +
          ((C2721 * C31925 + (C3302 - (C3301 + C3300) + C3303) * C48522) *
               C16530 +
           ((C2714 - (C2713 + C2712) + C2715) * C31925 +
            ((C113 * C1017 + C48388 * C1026) * C2698 -
             (C864 * C2691 + C865 * C2697) +
             (C113 * C1027 + C48388 * C1032) * C48247) *
                C48522) *
               C48489) *
              C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2827 +
             (C113 * C123 + C48388 * C136) * C48548 -
             (C113 * C308 + C48388 * C318) * C2828 -
             (C113 * C319 + C48388 * C338) * C48544 +
             (C113 * C309 + C48388 * C320) * C2829 +
             (C113 * C321 + C48388 * C339) * C48534 -
             (C113 * C1283 + C48388 * C1289) * C2830 -
             (C113 * C1290 + C48388 * C1301) * C48512) *
                C31925 +
            (C15765 + C15766 - C15767 - C15768 + C15769 + C15770 - C15771 -
             C15772) *
                C48522) *
               C16530 +
           ((C2832 + C2833 - C2834 - C2835 + C2836 + C2837 - C2838 - C2839) *
                C31925 +
            (C13658 + C13659 - C13660 - C13661 + C13662 + C13663 - C13664 -
             C13665) *
                C48522) *
               C48489) *
              C2825 +
          (((C2834 - (C2833 + C2832) + C2835 - C2836 - C2837 + C2838 + C2839) *
                C31925 +
            (C13660 - (C13659 + C13658) + C13661 - C13662 - C13663 + C13664 +
             C13665) *
                C48522) *
               C16530 +
           ((C2842 - (C2841 + C2840) + C2843 - C2844 - C2845 + C2846 + C2847) *
                C31925 +
            (C1054 * C2828 - (C589 * C48548 + C588 * C2827) + C1056 * C48544 -
             C1762 * C2829 - C1763 * C48534 +
             (C113 * C1867 + C48388 * C1872) * C2830 +
             (C113 * C1873 + C48388 * C1876) * C48512) *
                C48522) *
               C48489) *
              C48166) *
         C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C47163 +
              (C113 * C123 + C48388 * C136) * C48243 -
              (C113 * C308 + C48388 * C318) * C47155 -
              (C113 * C319 + C48388 * C338) * C48250 +
              (C113 * C309 + C48388 * C320) * C47169 +
              (C113 * C321 + C48388 * C339) * C3121) *
                 C31925 +
             (C14421 + C14422 - C14423 - C14424 + C14425 + C14426) * C48522) *
                C16530 +
            ((C3129 + C3130 - C3131 - C3132 + C3133 + C3134) * C31925 +
             C14441 * C48522) *
                C48489) *
               C48456 +
           (((C3131 - (C3130 + C3129) + C3132 - C3133 - C3134) * C31925 +
             C14442 * C48522) *
                C16530 +
            ((C3137 - (C3136 + C3135) + C3138 - C3139 - C3140) * C31925 +
             (C3459 - (C3460 + C3461) + C3462 - C3463 - C3464) * C48522) *
                C48489) *
               C48166) *
              C3562 +
          ((((C14423 - (C14422 + C14421) + C14424 - C14425 - C14426) * C31925 +
             (C16441 - (C16442 + C16443) + C16444 - C16445 - C16446) * C48522) *
                C16530 +
            (C14442 * C31925 +
             (C14429 - (C14430 + C14431) + C14432 - C14433 - C14434) * C48522) *
                C48489) *
               C48456 +
           ((C14441 * C31925 +
             (C14431 + C14430 - C14429 - C14432 + C14433 + C14434) * C48522) *
                C16530 +
            ((C3461 + C3460 - C3459 - C3462 + C3463 + C3464) * C31925 +
             (C594 * C47163 + C595 * C48243 - C2356 * C47155 - C2357 * C48250 +
              (C113 * C1425 + C48388 * C1442) * C47169 +
              (C113 * C1443 + C48388 * C1452) * C3121) *
                 C48522) *
                C48489) *
               C48166) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C47163 +
             (C113 * C123 + C48388 * C136) * C48243 -
             (C113 * C308 + C48388 * C318) * C47155 -
             (C113 * C319 + C48388 * C338) * C48250 +
             (C113 * C309 + C48388 * C320) * C47169 +
             (C113 * C321 + C48388 * C339) * C3121) *
                C31925 +
            (C14421 + C14422 - C14423 - C14424 + C14425 + C14426) * C48522) *
               C16530 +
           ((C3129 + C3130 - C3131 - C3132 + C3133 + C3134) * C31925 +
            C14441 * C48522) *
               C48489) *
              C48156 * C48285 +
          (((C14423 - (C14422 + C14421) + C14424 - C14425 - C14426) * C31925 +
            (C16441 - (C16442 + C16443) + C16444 - C16445 - C16446) * C48522) *
               C16530 +
           (C14442 * C31925 +
            (C14429 - (C14430 + C14431) + C14432 - C14433 - C14434) * C48522) *
               C48489) *
              C48156 * C48292 +
          (((C16443 + C16442 - C16441 - C16444 + C16445 + C16446) * C31925 +
            (C12900 * C47163 + C12901 * C48243 - C13394 * C47155 -
             C13395 * C48250 + (C113 * C7735 + C48388 * C7737) * C47169 +
             (C113 * C7738 + C48388 * C7741) * C3121) *
                C48522) *
               C16530 +
           ((C14431 + C14430 - C14429 - C14432 + C14433 + C14434) * C31925 +
            (C2476 * C47163 + C2477 * C48243 - C13120 * C47155 -
             C13121 * C48250 + (C113 * C7736 + C48388 * C7739) * C47169 +
             (C113 * C7740 + C48388 * C7742) * C3121) *
                C48522) *
               C48489) *
              C48156 * C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2827 +
             (C113 * C123 + C48388 * C136) * C48548 -
             (C113 * C308 + C48388 * C318) * C2828 -
             (C113 * C319 + C48388 * C338) * C48544 +
             (C113 * C309 + C48388 * C320) * C2829 +
             (C113 * C321 + C48388 * C339) * C48534 -
             (C113 * C1283 + C48388 * C1289) * C2830 -
             (C113 * C1290 + C48388 * C1301) * C48512) *
                C31925 +
            (C15765 + C15766 - C15767 - C15768 + C15769 + C15770 - C15771 -
             C15772) *
                C48522) *
               C16530 +
           ((C2832 + C2833 - C2834 - C2835 + C2836 + C2837 - C2838 - C2839) *
                C31925 +
            (C13658 + C13659 - C13660 - C13661 + C13662 + C13663 - C13664 -
             C13665) *
                C48522) *
               C48489) *
              C48156 * C3562 +
          (((C15767 - (C15766 + C15765) + C15768 - C15769 - C15770 + C15771 +
             C15772) *
                C31925 +
            (C11982 * C2828 - (C11100 * C48548 + C11101 * C2827) +
             C11983 * C48544 - C11984 * C2829 - C11985 * C48534 +
             (C113 * C6381 + C48388 * C6383) * C2830 +
             (C113 * C6384 + C48388 * C6387) * C48512) *
                C48522) *
               C16530 +
           ((C13660 - (C13659 + C13658) + C13661 - C13662 - C13663 + C13664 +
             C13665) *
                C31925 +
            (C2354 * C2828 - (C593 * C48548 + C592 * C2827) + C2355 * C48544 -
             C11986 * C2829 - C11987 * C48534 +
             (C113 * C6382 + C48388 * C6385) * C2830 +
             (C113 * C6386 + C48388 * C6388) * C48512) *
                C48522) *
               C48489) *
              C48156 * C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C2697 +
              (C113 * C123 + C48388 * C136) * C2691 -
              (C113 * C308 + C48388 * C318) * C2698 -
              (C113 * C319 + C48388 * C338) * C48247) *
                 C31925 +
             (C13860 + C13861 - C13862 - C13863) * C48522) *
                C16530 +
            ((C2700 + C2701 - C2702 - C2703) * C31925 + C13880 * C48522) *
                C48489) *
               C48538 +
           (((C2702 - (C2701 + C2700) + C2703) * C31925 + C13881 * C48522) *
                C16530 +
            ((C2706 - (C2705 + C2704) + C2707) * C31925 + C3305 * C48522) *
                C48489) *
               C48525 +
           ((C2720 * C31925 + C14226 * C48522) * C16530 +
            ((C2710 + C2709 - C2708 - C2711) * C31925 +
             (C3300 + C3301 - C3302 - C3303) * C48522) *
                C48489) *
               C48496) *
              C3562 +
          ((((C13862 - (C13861 + C13860) + C13863) * C31925 +
             (C13866 - (C13867 + C13868) + C13869) * C48522) *
                C16530 +
            (C13881 * C31925 + C13882 * C48522) * C48489) *
               C48538 +
           ((C13880 * C31925 + C13883 * C48522) * C16530 +
            (C14226 * C31925 + (C3006 + C3007 - C3008 - C3009) * C48522) *
                C48489) *
               C48525 +
           ((C3305 * C31925 + (C3008 - (C3007 + C3006) + C3009) * C48522) *
                C16530 +
            ((C3302 - (C3301 + C3300) + C3303) * C31925 +
             ((C113 * C2337 + C48388 * C2338) * C2698 -
              (C596 * C2691 + C597 * C2697) +
              (C113 * C2339 + C48388 * C2340) * C48247) *
                 C48522) *
                C48489) *
               C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2697 +
             (C113 * C123 + C48388 * C136) * C2691 -
             (C113 * C308 + C48388 * C318) * C2698 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C31925 +
            (C13860 + C13861 - C13862 - C13863) * C48522) *
               C16530 +
           ((C2700 + C2701 - C2702 - C2703) * C31925 + C13880 * C48522) *
               C48489) *
              C48156 * C48549 +
          (((C13862 - (C13861 + C13860) + C13863) * C31925 +
            (C13866 - (C13867 + C13868) + C13869) * C48522) *
               C16530 +
           (C13881 * C31925 + C13882 * C48522) * C48489) *
              C48156 * C48546 +
          (((C13868 + C13867 - C13866 - C13869) * C31925 +
            (C15903 + C15904 - C15905 - C15906) * C48522) *
               C16530 +
           (C13883 * C31925 + (C13872 + C13873 - C13874 - C13875) * C48522) *
               C48489) *
              C48156 * C48537 +
          (((C15905 - (C15904 + C15903) + C15906) * C31925 +
            ((C113 * C7249 + C48388 * C7251) * C2698 -
             (C12904 * C2691 + C12905 * C2697) +
             (C113 * C7252 + C48388 * C7255) * C48247) *
                C48522) *
               C16530 +
           ((C13874 - (C13873 + C13872) + C13875) * C31925 +
            ((C113 * C7250 + C48388 * C7253) * C2698 -
             (C12902 * C2691 + C12903 * C2697) +
             (C113 * C7254 + C48388 * C7256) * C48247) *
                C48522) *
               C48489) *
              C48156 * C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C2697 +
              (C113 * C123 + C48388 * C136) * C2691 -
              (C113 * C308 + C48388 * C318) * C2698 -
              (C113 * C319 + C48388 * C338) * C48247) *
                 C31925 +
             (C13860 + C13861 - C13862 - C13863) * C48522) *
                C16530 +
            ((C2700 + C2701 - C2702 - C2703) * C31925 + C13880 * C48522) *
                C48489) *
               C48456 +
           (((C2702 - (C2701 + C2700) + C2703) * C31925 + C13881 * C48522) *
                C16530 +
            ((C2706 - (C2705 + C2704) + C2707) * C31925 + C3305 * C48522) *
                C48489) *
               C48166) *
              C48285 +
          ((((C13862 - (C13861 + C13860) + C13863) * C31925 +
             (C13866 - (C13867 + C13868) + C13869) * C48522) *
                C16530 +
            (C13881 * C31925 + C13882 * C48522) * C48489) *
               C48456 +
           ((C13880 * C31925 + C13883 * C48522) * C16530 +
            (C14226 * C31925 + (C3006 + C3007 - C3008 - C3009) * C48522) *
                C48489) *
               C48166) *
              C48292 +
          ((((C13868 + C13867 - C13866 - C13869) * C31925 +
             (C15903 + C15904 - C15905 - C15906) * C48522) *
                C16530 +
            (C13883 * C31925 + (C13872 + C13873 - C13874 - C13875) * C48522) *
                C48489) *
               C48456 +
           ((C13882 * C31925 + (C13874 - (C13873 + C13872) + C13875) * C48522) *
                C16530 +
            ((C3008 - (C3007 + C3006) + C3009) * C31925 +
             ((C113 * C2583 + C48388 * C2588) * C2698 -
              (C2479 * C2691 + C2478 * C2697) +
              (C113 * C2589 + C48388 * C2592) * C48247) *
                 C48522) *
                C48489) *
               C48166) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C2697 +
              (C113 * C123 + C48388 * C136) * C2691 -
              (C113 * C308 + C48388 * C318) * C2698 -
              (C113 * C319 + C48388 * C338) * C48247) *
                 C31925 +
             (C13860 + C13861 - C13862 - C13863) * C48522) *
                C16530 +
            ((C2700 + C2701 - C2702 - C2703) * C31925 + C13880 * C48522) *
                C48489) *
               C48538 +
           (((C2702 - (C2701 + C2700) + C2703) * C31925 + C13881 * C48522) *
                C16530 +
            ((C2706 - (C2705 + C2704) + C2707) * C31925 + C3305 * C48522) *
                C48489) *
               C48525 +
           ((C2720 * C31925 + C14226 * C48522) * C16530 +
            ((C2710 + C2709 - C2708 - C2711) * C31925 +
             (C3300 + C3301 - C3302 - C3303) * C48522) *
                C48489) *
               C48496) *
              C3562 +
          ((((C13862 - (C13861 + C13860) + C13863) * C31925 +
             (C13866 - (C13867 + C13868) + C13869) * C48522) *
                C16530 +
            (C13881 * C31925 + C13882 * C48522) * C48489) *
               C48538 +
           ((C13880 * C31925 + C13883 * C48522) * C16530 +
            (C14226 * C31925 + (C3006 + C3007 - C3008 - C3009) * C48522) *
                C48489) *
               C48525 +
           ((C3305 * C31925 + (C3008 - (C3007 + C3006) + C3009) * C48522) *
                C16530 +
            ((C3302 - (C3301 + C3300) + C3303) * C31925 +
             ((C113 * C2337 + C48388 * C2338) * C2698 -
              (C596 * C2691 + C597 * C2697) +
              (C113 * C2339 + C48388 * C2340) * C48247) *
                 C48522) *
                C48489) *
               C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2827 +
             (C113 * C123 + C48388 * C136) * C48548 -
             (C113 * C308 + C48388 * C318) * C2828 -
             (C113 * C319 + C48388 * C338) * C48544 +
             (C113 * C309 + C48388 * C320) * C2829 +
             (C113 * C321 + C48388 * C339) * C48534 -
             (C113 * C1283 + C48388 * C1289) * C2830 -
             (C113 * C1290 + C48388 * C1301) * C48512) *
                C31925 +
            (C15765 + C15766 - C15767 - C15768 + C15769 + C15770 - C15771 -
             C15772) *
                C48522) *
               C16530 +
           ((C2832 + C2833 - C2834 - C2835 + C2836 + C2837 - C2838 - C2839) *
                C31925 +
            (C13658 + C13659 - C13660 - C13661 + C13662 + C13663 - C13664 -
             C13665) *
                C48522) *
               C48489) *
              C48156 * C3562 +
          (((C15767 - (C15766 + C15765) + C15768 - C15769 - C15770 + C15771 +
             C15772) *
                C31925 +
            (C11982 * C2828 - (C11100 * C48548 + C11101 * C2827) +
             C11983 * C48544 - C11984 * C2829 - C11985 * C48534 +
             (C113 * C6381 + C48388 * C6383) * C2830 +
             (C113 * C6384 + C48388 * C6387) * C48512) *
                C48522) *
               C16530 +
           ((C13660 - (C13659 + C13658) + C13661 - C13662 - C13663 + C13664 +
             C13665) *
                C31925 +
            (C2354 * C2828 - (C593 * C48548 + C592 * C2827) + C2355 * C48544 -
             C11986 * C2829 - C11987 * C48534 +
             (C113 * C6382 + C48388 * C6385) * C2830 +
             (C113 * C6386 + C48388 * C6388) * C48512) *
                C48522) *
               C48489) *
              C48156 * C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1557 +
             (C113 * C123 + C48388 * C136) * C1551 -
             (C113 * C308 + C48388 * C318) * C1558 -
             (C113 * C319 + C48388 * C338) * C1552 +
             (C113 * C309 + C48388 * C320) * C1559 +
             (C113 * C321 + C48388 * C339) * C1553 -
             (C113 * C1283 + C48388 * C1289) * C1560 -
             (C113 * C1290 + C48388 * C1301) * C48512) *
                C31925 +
            (C12474 + C12475 - C12476 - C12477 + C12478 + C12479 - C12486 -
             C12487) *
                C48522) *
               C16530 +
           ((C1566 + C1567 - C1568 - C1569 + C1570 + C1571 - C1590 - C1591) *
                C31925 +
            (C12126 + C12127 - C12128 - C12129 + C12130 + C12131 - C12138 -
             C12139) *
                C48522) *
               C48489) *
              C48456 +
          (((C1568 - (C1567 + C1566) + C1569 - C1570 - C1571 + C1590 + C1591) *
                C31925 +
            (C12128 - (C12127 + C12126) + C12129 - C12130 - C12131 + C12138 +
             C12139) *
                C48522) *
               C16530 +
           ((C1578 - (C1577 + C1576) + C1579 - C1580 - C1581 + C1592 + C1593) *
                C31925 +
            (C1054 * C1558 - (C589 * C1551 + C588 * C1557) + C1056 * C1552 -
             C1762 * C1559 - C1763 * C1553 +
             (C113 * C1867 + C48388 * C1872) * C1560 +
             (C113 * C1873 + C48388 * C1876) * C48512) *
                C48522) *
               C48489) *
              C48166) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C717 +
             (C113 * C123 + C48388 * C136) * C48470 -
             (C113 * C308 + C48388 * C318) * C718 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C31925 +
            (C11561 + C11562 - C11575 - C11576) * C48522) *
               C16530 +
           ((C724 + C725 - C726 - C727) * C31925 + C11577 * C48522) * C48489) *
              C713 +
          (((C726 - (C725 + C724) + C727) * C31925 + C11578 * C48522) * C16530 +
           ((C730 - (C729 + C728) + C731) * C31925 + C1066 * C48522) * C48489) *
              C714 +
          ((C750 * C31925 + C11579 * C48522) * C16530 +
           ((C734 + C733 - C732 - C735) * C31925 +
            (C1046 + C1047 - C1063 - C1064) * C48522) *
               C48489) *
              C715 +
          ((C751 * C31925 + (C1063 - (C1047 + C1046) + C1064) * C48522) *
               C16530 +
           ((C748 - (C737 + C736) + C749) * C31925 +
            ((C113 * C1017 + C48388 * C1026) * C718 -
             (C864 * C48470 + C865 * C717) +
             (C113 * C1027 + C48388 * C1032) * C48247) *
                C48522) *
               C48489) *
              C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C717 +
              (C113 * C123 + C48388 * C136) * C48470 -
              (C113 * C308 + C48388 * C318) * C718 -
              (C113 * C319 + C48388 * C338) * C48247) *
                 C31925 +
             (C11561 + C11562 - C11575 - C11576) * C48522) *
                C16530 +
            ((C724 + C725 - C726 - C727) * C31925 + C11577 * C48522) * C48489) *
               C48456 +
           (((C726 - (C725 + C724) + C727) * C31925 + C11578 * C48522) *
                C16530 +
            ((C730 - (C729 + C728) + C731) * C31925 + C1066 * C48522) *
                C48489) *
               C48166) *
              C1987 +
          ((((C11575 - (C11562 + C11561) + C11576) * C31925 +
             (C13106 - (C13107 + C13108) + C13109) * C48522) *
                C16530 +
            (C11578 * C31925 + C13122 * C48522) * C48489) *
               C48456 +
           ((C11577 * C31925 + C13123 * C48522) * C16530 +
            (C11579 * C31925 + (C2348 + C2349 - C2360 - C2361) * C48522) *
                C48489) *
               C48166) *
              C1988 +
          ((((C13108 + C13107 - C13106 - C13109) * C31925 +
             (C13388 + C13389 - C13396 - C13397) * C48522) *
                C16530 +
            (C13123 * C31925 + (C13112 + C13113 - C13124 - C13125) * C48522) *
                C48489) *
               C48456 +
           ((C13122 * C31925 + (C13124 - (C13113 + C13112) + C13125) * C48522) *
                C16530 +
            ((C2360 - (C2349 + C2348) + C2361) * C31925 +
             ((C113 * C2583 + C48388 * C2588) * C718 -
              (C2479 * C48470 + C2478 * C717) +
              (C113 * C2589 + C48388 * C2592) * C48247) *
                 C48522) *
                C48489) *
               C48166) *
              C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1557 +
             (C113 * C123 + C48388 * C136) * C1551 -
             (C113 * C308 + C48388 * C318) * C1558 -
             (C113 * C319 + C48388 * C338) * C1552 +
             (C113 * C309 + C48388 * C320) * C1559 +
             (C113 * C321 + C48388 * C339) * C1553 -
             (C113 * C1283 + C48388 * C1289) * C1560 -
             (C113 * C1290 + C48388 * C1301) * C48512) *
                C31925 +
            (C12474 + C12475 - C12476 - C12477 + C12478 + C12479 - C12486 -
             C12487) *
                C48522) *
               C16530 +
           ((C1566 + C1567 - C1568 - C1569 + C1570 + C1571 - C1590 - C1591) *
                C31925 +
            (C12126 + C12127 - C12128 - C12129 + C12130 + C12131 - C12138 -
             C12139) *
                C48522) *
               C48489) *
              C48156 * C48471 +
          (((C12476 - (C12475 + C12474) + C12477 - C12478 - C12479 + C12486 +
             C12487) *
                C31925 +
            (C11982 * C1558 - (C11100 * C1551 + C11101 * C1557) +
             C11983 * C1552 - C11984 * C1559 - C11985 * C1553 +
             (C113 * C6381 + C48388 * C6383) * C1560 +
             (C113 * C6384 + C48388 * C6387) * C48512) *
                C48522) *
               C16530 +
           ((C12128 - (C12127 + C12126) + C12129 - C12130 - C12131 + C12138 +
             C12139) *
                C31925 +
            (C2354 * C1558 - (C593 * C1551 + C592 * C1557) + C2355 * C1552 -
             C11986 * C1559 - C11987 * C1553 +
             (C113 * C6382 + C48388 * C6385) * C1560 +
             (C113 * C6386 + C48388 * C6388) * C48512) *
                C48522) *
               C48489) *
              C48156 * C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C717 +
              (C113 * C123 + C48388 * C136) * C48470 -
              (C113 * C308 + C48388 * C318) * C718 -
              (C113 * C319 + C48388 * C338) * C48247) *
                 C31925 +
             (C11561 + C11562 - C11575 - C11576) * C48522) *
                C16530 +
            ((C724 + C725 - C726 - C727) * C31925 + C11577 * C48522) * C48489) *
               C302 +
           (((C726 - (C725 + C724) + C727) * C31925 + C11578 * C48522) *
                C16530 +
            ((C730 - (C729 + C728) + C731) * C31925 + C1066 * C48522) *
                C48489) *
               C303 +
           ((C750 * C31925 + C11579 * C48522) * C16530 +
            ((C734 + C733 - C732 - C735) * C31925 +
             (C1046 + C1047 - C1063 - C1064) * C48522) *
                C48489) *
               C48496) *
              C48471 +
          ((((C11575 - (C11562 + C11561) + C11576) * C31925 +
             (C13106 - (C13107 + C13108) + C13109) * C48522) *
                C16530 +
            (C11578 * C31925 + C13122 * C48522) * C48489) *
               C302 +
           ((C11577 * C31925 + C13123 * C48522) * C16530 +
            (C11579 * C31925 + (C2348 + C2349 - C2360 - C2361) * C48522) *
                C48489) *
               C303 +
           ((C1066 * C31925 + (C2360 - (C2349 + C2348) + C2361) * C48522) *
                C16530 +
            ((C1063 - (C1047 + C1046) + C1064) * C31925 +
             ((C113 * C2337 + C48388 * C2338) * C718 -
              (C596 * C48470 + C597 * C717) +
              (C113 * C2339 + C48388 * C2340) * C48247) *
                 C48522) *
                C48489) *
               C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C717 +
             (C113 * C123 + C48388 * C136) * C48470 -
             (C113 * C308 + C48388 * C318) * C718 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C31925 +
            (C11561 + C11562 - C11575 - C11576) * C48522) *
               C16530 +
           ((C724 + C725 - C726 - C727) * C31925 + C11577 * C48522) * C48489) *
              C48156 * C2459 +
          (((C11575 - (C11562 + C11561) + C11576) * C31925 +
            (C13106 - (C13107 + C13108) + C13109) * C48522) *
               C16530 +
           (C11578 * C31925 + C13122 * C48522) * C48489) *
              C48156 * C2460 +
          (((C13108 + C13107 - C13106 - C13109) * C31925 +
            (C13388 + C13389 - C13396 - C13397) * C48522) *
               C16530 +
           (C13123 * C31925 + (C13112 + C13113 - C13124 - C13125) * C48522) *
               C48489) *
              C48156 * C2461 +
          (((C13396 - (C13389 + C13388) + C13397) * C31925 +
            ((C113 * C7249 + C48388 * C7251) * C718 -
             (C12904 * C48470 + C12905 * C717) +
             (C113 * C7252 + C48388 * C7255) * C48247) *
                C48522) *
               C16530 +
           ((C13124 - (C13113 + C13112) + C13125) * C31925 +
            ((C113 * C7250 + C48388 * C7253) * C718 -
             (C12902 * C48470 + C12903 * C717) +
             (C113 * C7254 + C48388 * C7256) * C48247) *
                C48522) *
               C48489) *
              C48156 * C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48388 * C122) * C114 +
                 (C113 * C123 + C48388 * C136) * C48184) *
                    C31925 +
                (C11102 + C11103) * C48522) *
                   C16530 +
               ((C174 + C175) * C31925 + C11088 * C48522) * C48489) *
                  C107 -
              ((C610 * C48522 + (C177 + C176) * C31925) * C48489 +
               (C11089 * C48522 + (C175 + C174) * C31925) * C16530) *
                  C108 +
              ((C184 * C31925 + C11090 * C48522) * C16530 +
               ((C179 + C178) * C31925 + C858 * C48522) * C48489) *
                  C109 -
              (((C866 + C867) * C48522 + (C181 + C180) * C31925) * C48489 +
               (C11366 * C48522 + C185 * C31925) * C16530) *
                  C110 +
              ((C186 * C31925 + (C867 + C866) * C48522) * C16530 +
               ((C183 + C182) * C31925 +
                ((C113 * C853 + C48388 * C854) * C114 +
                 (C113 * C855 + C48388 * C856) * C48184) *
                    C48522) *
                   C48489) *
                  C111) *
             C48202 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48388 * C122) * C305 +
                 (C113 * C123 + C48388 * C136) * C48541 -
                 (C113 * C308 + C48388 * C318) * C306 -
                 (C113 * C319 + C48388 * C338) * C48529 +
                 (C113 * C309 + C48388 * C320) * C307 +
                 (C113 * C321 + C48388 * C339) * C48502) *
                    C31925 +
                (C12780 + C12781 - C12782 - C12783 + C12784 + C12785) *
                    C48522) *
                   C16530 +
               ((C349 + C350 - C392 - C393 + C394 + C395) * C31925 +
                C14775 * C48522) *
                   C48489) *
                  C302 +
              (((C392 - (C350 + C349) + C393 - C394 - C395) * C31925 +
                C14776 * C48522) *
                   C16530 +
               ((C396 - (C360 + C359) + C397 - C398 - C399) * C31925 +
                (C3717 - (C3718 + C3719) + C3720 - C3721 - C3722) * C48522) *
                   C48489) *
                  C303 +
              ((C407 * C31925 +
                (C3719 + C3718 - C3717 - C3720 + C3721 + C3722) * C48522) *
                   C16530 +
               ((C372 + C371 - C400 - C401 + C402 + C403) * C31925 +
                (C590 * C305 + C591 * C48541 - C1057 * C306 - C1058 * C48529 +
                 (C113 * C1739 + C48388 * C1740) * C307 +
                 (C113 * C1741 + C48388 * C1742) * C48502) *
                    C48522) *
                   C48489) *
                  C48496) *
             C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C31925 +
             (C11102 + C11103) * C48522) *
                C16530 +
            ((C174 + C175) * C31925 + C11088 * C48522) * C48489) *
               C302 -
           ((C610 * C48522 + (C177 + C176) * C31925) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C31925) * C16530) *
               C303 +
           ((C184 * C31925 + C11090 * C48522) * C16530 +
            ((C179 + C178) * C31925 + C858 * C48522) * C48489) *
               C48496) *
              C48542 +
          (((C11088 * C31925 + C11091 * C48522) * C16530 +
            (C11090 * C31925 + C611 * C48522) * C48489) *
               C303 -
           ((C11092 * C48522 + C11089 * C31925) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C31925) *
                C16530) *
               C302 -
           (((C608 + C609) * C48522 + C11366 * C31925) * C48489 +
            (C11097 * C48522 + C610 * C31925) * C16530) *
               C48496) *
              C48531 +
          ((((C11105 + C11104) * C31925 + (C12906 + C12907) * C48522) * C16530 +
            (C11091 * C31925 + C13256 * C48522) * C48489) *
               C302 -
           (((C2483 + C2482) * C48522 + C11097 * C31925) * C48489 +
            (C13257 * C48522 + C11092 * C31925) * C16530) *
               C303 +
           ((C611 * C31925 + (C2482 + C2483) * C48522) * C16530 +
            ((C609 + C608) * C31925 +
             ((C113 * C2463 + C48388 * C2464) * C114 +
              (C113 * C2465 + C48388 * C2466) * C48184) *
                 C48522) *
                C48489) *
               C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1183 +
             (C113 * C123 + C48388 * C136) * C1177 -
             (C113 * C308 + C48388 * C318) * C1184 -
             (C113 * C319 + C48388 * C338) * C1178 +
             (C113 * C309 + C48388 * C320) * C1185 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C31925 +
            (C11954 + C11955 - C11956 - C11957 + C11988 + C11989) * C48522) *
               C16530 +
           ((C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C31925 +
            C12342 * C48522) *
               C48489) *
              C48538 +
          (((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C31925 +
            C12343 * C48522) *
               C16530 +
           ((C1195 - (C1194 + C1193) + C1196 - C1197 - C1198) * C31925 +
            (C1752 - (C1753 + C1754) + C1755 - C1766 - C1767) * C48522) *
               C48489) *
              C48525 +
          ((C1209 * C31925 +
            (C1754 + C1753 - C1752 - C1755 + C1766 + C1767) * C48522) *
               C16530 +
           ((C1201 + C1200 - C1199 - C1202 + C1203 + C1204) * C31925 +
            (C590 * C1183 + C591 * C1177 - C1057 * C1184 - C1058 * C1178 +
             (C113 * C1739 + C48388 * C1740) * C1185 +
             (C113 * C1741 + C48388 * C1742) * C48502) *
                C48522) *
               C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1278 +
            (C113 * C123 + C48388 * C136) * C1272 -
            (C113 * C308 + C48388 * C318) * C1279 -
            (C113 * C319 + C48388 * C338) * C1273 +
            (C113 * C309 + C48388 * C320) * C1280 +
            (C113 * C321 + C48388 * C339) * C1274 -
            (C113 * C1283 + C48388 * C1289) * C1281 -
            (C113 * C1290 + C48388 * C1301) * C1275 +
            (C113 * C1284 + C48388 * C1291) * C1282 +
            (C113 * C1292 + C48388 * C1302) * C1276) *
               C31925 +
           (C11098 * C1278 + C11099 * C1272 - C11570 * C1279 - C11571 * C1273 +
            C11980 * C1280 + C11981 * C1274 - C12484 * C1281 - C12485 * C1275 +
            (C113 * C6867 + C48388 * C6869) * C1282 +
            (C113 * C6870 + C48388 * C6873) * C1276) *
               C48522) *
              C16530 +
          ((C164 * C1278 + C165 * C1272 - C379 * C1279 - C380 * C1273 +
            C381 * C1280 + C382 * C1274 - C1586 * C1281 - C1587 * C1275 +
            (C113 * C1286 + C48388 * C1295) * C1282 +
            (C113 * C1296 + C48388 * C1304) * C1276) *
               C31925 +
           (C586 * C1278 + C587 * C1272 - C1052 * C1279 - C1053 * C1273 +
            C1760 * C1280 + C1761 * C1274 - C12136 * C1281 - C12137 * C1275 +
            (C113 * C6868 + C48388 * C6871) * C1282 +
            (C113 * C6872 + C48388 * C6874) * C1276) *
               C48522) *
              C48489) *
         C48156 * C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1183 +
             (C113 * C123 + C48388 * C136) * C1177 -
             (C113 * C308 + C48388 * C318) * C1184 -
             (C113 * C319 + C48388 * C338) * C1178 +
             (C113 * C309 + C48388 * C320) * C1185 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C31925 +
            (C11954 + C11955 - C11956 - C11957 + C11988 + C11989) * C48522) *
               C16530 +
           ((C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C31925 +
            C12342 * C48522) *
               C48489) *
              C48156 * C48542 +
          (((C11956 - (C11955 + C11954) + C11957 - C11988 - C11989) * C31925 +
            (C11990 - (C11964 + C11965) + C11991 - C11992 - C11993) * C48522) *
               C16530 +
           (C12343 * C31925 +
            (C11972 - (C11973 + C11974) + C11975 - C11994 - C11995) * C48522) *
               C48489) *
              C48156 * C48531 +
          (((C11965 + C11964 - C11990 - C11991 + C11992 + C11993) * C31925 +
            (C12900 * C1183 + C12901 * C1177 - C13394 * C1184 - C13395 * C1178 +
             (C113 * C7735 + C48388 * C7737) * C1185 +
             (C113 * C7738 + C48388 * C7741) * C48502) *
                C48522) *
               C16530 +
           ((C11974 + C11973 - C11972 - C11975 + C11994 + C11995) * C31925 +
            (C2476 * C1183 + C2477 * C1177 - C13120 * C1184 - C13121 * C1178 +
             (C113 * C7736 + C48388 * C7739) * C1185 +
             (C113 * C7740 + C48388 * C7742) * C48502) *
                C48522) *
               C48489) *
              C48156 * C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C31925 +
             (C11102 + C11103) * C48522) *
                C16530 +
            ((C174 + C175) * C31925 + C11088 * C48522) * C48489) *
               C48538 -
           ((C610 * C48522 + (C177 + C176) * C31925) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C31925) * C16530) *
               C48525 +
           ((C184 * C31925 + C11090 * C48522) * C16530 +
            ((C179 + C178) * C31925 + C858 * C48522) * C48489) *
               C48496) *
              C1987 +
          (((C11088 * C31925 + C11091 * C48522) * C16530 +
            (C11090 * C31925 + C611 * C48522) * C48489) *
               C48525 -
           ((C11092 * C48522 + C11089 * C31925) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C31925) *
                C16530) *
               C48538 -
           (((C608 + C609) * C48522 + C11366 * C31925) * C48489 +
            (C11097 * C48522 + C610 * C31925) * C16530) *
               C48496) *
              C1988 +
          ((((C11105 + C11104) * C31925 + (C12906 + C12907) * C48522) * C16530 +
            (C11091 * C31925 + C13256 * C48522) * C48489) *
               C48538 -
           (((C2483 + C2482) * C48522 + C11097 * C31925) * C48489 +
            (C13257 * C48522 + C11092 * C31925) * C16530) *
               C48525 +
           ((C611 * C31925 + (C2482 + C2483) * C48522) * C16530 +
            ((C609 + C608) * C31925 +
             ((C113 * C2463 + C48388 * C2464) * C114 +
              (C113 * C2465 + C48388 * C2466) * C48184) *
                 C48522) *
                C48489) *
               C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C305 +
             (C113 * C123 + C48388 * C136) * C48541 -
             (C113 * C308 + C48388 * C318) * C306 -
             (C113 * C319 + C48388 * C338) * C48529 +
             (C113 * C309 + C48388 * C320) * C307 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C31925 +
            (C12780 + C12781 - C12782 - C12783 + C12784 + C12785) * C48522) *
               C16530 +
           ((C349 + C350 - C392 - C393 + C394 + C395) * C31925 +
            C14775 * C48522) *
               C48489) *
              C48156 * C1987 +
          (((C12782 - (C12781 + C12780) + C12783 - C12784 - C12785) * C31925 +
            (C12786 - (C12787 + C12788) + C12789 - C12790 - C12791) * C48522) *
               C16530 +
           (C14776 * C31925 +
            (C12792 - (C12793 + C12794) + C12795 - C12796 - C12797) * C48522) *
               C48489) *
              C48156 * C1988 +
          (((C12788 + C12787 - C12786 - C12789 + C12790 + C12791) * C31925 +
            (C12900 * C305 + C12901 * C48541 - C13394 * C306 - C13395 * C48529 +
             (C113 * C7735 + C48388 * C7737) * C307 +
             (C113 * C7738 + C48388 * C7741) * C48502) *
                C48522) *
               C16530 +
           ((C12794 + C12793 - C12792 - C12795 + C12796 + C12797) * C31925 +
            (C2476 * C305 + C2477 * C48541 - C13120 * C306 - C13121 * C48529 +
             (C113 * C7736 + C48388 * C7739) * C307 +
             (C113 * C7740 + C48388 * C7742) * C48502) *
                C48522) *
               C48489) *
              C48156 * C48505)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C31925 +
            (C11102 + C11103) * C48522) *
               C16530 +
           ((C174 + C175) * C31925 + C11088 * C48522) * C48489) *
              C48156 * C2162 -
          ((C11092 * C48522 + C11089 * C31925) * C48489 +
           ((C11104 + C11105) * C48522 + (C11103 + C11102) * C31925) * C16530) *
              C48156 * C2163 +
          (((C11105 + C11104) * C31925 + (C12906 + C12907) * C48522) * C16530 +
           (C11091 * C31925 + C13256 * C48522) * C48489) *
              C48156 * C2164 -
          (((C12908 + C12909) * C48522 + C13257 * C31925) * C48489 +
           ((C12910 + C12911) * C48522 + (C12907 + C12906) * C31925) * C16530) *
              C48156 * C2165 +
          (((C12911 + C12910) * C31925 +
            ((C113 * C12879 + C48388 * C12881) * C114 +
             (C113 * C12882 + C48388 * C12885) * C48184) *
                C48522) *
               C16530 +
           ((C12909 + C12908) * C31925 +
            ((C113 * C12880 + C48388 * C12883) * C114 +
             (C113 * C12884 + C48388 * C12886) * C48184) *
                C48522) *
               C48489) *
              C48156 * C2166)) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C1183 +
              (C113 * C123 + C48388 * C136) * C1177 -
              (C113 * C308 + C48388 * C318) * C1184 -
              (C113 * C319 + C48388 * C338) * C1178 +
              (C113 * C309 + C48388 * C320) * C1185 +
              (C113 * C321 + C48388 * C339) * C48502) *
                 C31925 +
             (C11954 + C11955 - C11956 - C11957 + C11988 + C11989) * C48522) *
                C16530 +
            ((C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C31925 +
             C12342 * C48522) *
                C48489) *
               C48456 +
           (((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C31925 +
             C12343 * C48522) *
                C16530 +
            ((C1195 - (C1194 + C1193) + C1196 - C1197 - C1198) * C31925 +
             (C1752 - (C1753 + C1754) + C1755 - C1766 - C1767) * C48522) *
                C48489) *
               C48166) *
              C48471 +
          ((((C11956 - (C11955 + C11954) + C11957 - C11988 - C11989) * C31925 +
             (C11990 - (C11964 + C11965) + C11991 - C11992 - C11993) * C48522) *
                C16530 +
            (C12343 * C31925 +
             (C11972 - (C11973 + C11974) + C11975 - C11994 - C11995) * C48522) *
                C48489) *
               C48456 +
           ((C12342 * C31925 +
             (C11974 + C11973 - C11972 - C11975 + C11994 + C11995) * C48522) *
                C16530 +
            ((C1754 + C1753 - C1752 - C1755 + C1766 + C1767) * C31925 +
             (C594 * C1183 + C595 * C1177 - C2356 * C1184 - C2357 * C1178 +
              (C113 * C1425 + C48388 * C1442) * C1185 +
              (C113 * C1443 + C48388 * C1452) * C48502) *
                 C48522) *
                C48489) *
               C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C31925 +
             (C11102 + C11103) * C48522) *
                C16530 +
            ((C174 + C175) * C31925 + C11088 * C48522) * C48489) *
               C713 -
           ((C610 * C48522 + (C177 + C176) * C31925) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C31925) * C16530) *
               C714 +
           ((C184 * C31925 + C11090 * C48522) * C16530 +
            ((C179 + C178) * C31925 + C858 * C48522) * C48489) *
               C715 -
           (((C866 + C867) * C48522 + (C181 + C180) * C31925) * C48489 +
            (C11366 * C48522 + C185 * C31925) * C16530) *
               C48506) *
              C48471 +
          (((C11088 * C31925 + C11091 * C48522) * C16530 +
            (C11090 * C31925 + C611 * C48522) * C48489) *
               C714 -
           ((C11092 * C48522 + C11089 * C31925) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C31925) *
                C16530) *
               C713 -
           (((C608 + C609) * C48522 + C11366 * C31925) * C48489 +
            (C11097 * C48522 + C610 * C31925) * C16530) *
               C715 +
           ((C858 * C31925 + (C609 + C608) * C48522) * C16530 +
            ((C867 + C866) * C31925 + ((C113 * C530 + C48388 * C549) * C114 +
                                       (C113 * C550 + C48388 * C560) * C48184) *
                                          C48522) *
                C48489) *
               C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C31925 +
             (C11102 + C11103) * C48522) *
                C16530 +
            ((C174 + C175) * C31925 + C11088 * C48522) * C48489) *
               C48456 -
           ((C610 * C48522 + (C177 + C176) * C31925) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C31925) * C16530) *
               C48166) *
              C2459 +
          (((C11088 * C31925 + C11091 * C48522) * C16530 +
            (C11090 * C31925 + C611 * C48522) * C48489) *
               C48166 -
           ((C11092 * C48522 + C11089 * C31925) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C31925) *
                C16530) *
               C48456) *
              C2460 +
          ((((C11105 + C11104) * C31925 + (C12906 + C12907) * C48522) * C16530 +
            (C11091 * C31925 + C13256 * C48522) * C48489) *
               C48456 -
           (((C2483 + C2482) * C48522 + C11097 * C31925) * C48489 +
            (C13257 * C48522 + C11092 * C31925) * C16530) *
               C48166) *
              C2461 +
          (((C13256 * C31925 + (C12909 + C12908) * C48522) * C16530 +
            ((C2482 + C2483) * C31925 +
             ((C113 * C2172 + C48388 * C2183) * C114 +
              (C113 * C2184 + C48388 * C2190) * C48184) *
                 C48522) *
                C48489) *
               C48166 -
           (((C12908 + C12909) * C48522 + C13257 * C31925) * C48489 +
            ((C12910 + C12911) * C48522 + (C12907 + C12906) * C31925) *
                C16530) *
               C48456) *
              C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C305 +
             (C113 * C123 + C48388 * C136) * C48541 -
             (C113 * C308 + C48388 * C318) * C306 -
             (C113 * C319 + C48388 * C338) * C48529 +
             (C113 * C309 + C48388 * C320) * C307 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C31925 +
            (C12780 + C12781 - C12782 - C12783 + C12784 + C12785) * C48522) *
               C16530 +
           ((C349 + C350 - C392 - C393 + C394 + C395) * C31925 +
            C14775 * C48522) *
               C48489) *
              C302 +
          (((C392 - (C350 + C349) + C393 - C394 - C395) * C31925 +
            C14776 * C48522) *
               C16530 +
           ((C396 - (C360 + C359) + C397 - C398 - C399) * C31925 +
            (C3717 - (C3718 + C3719) + C3720 - C3721 - C3722) * C48522) *
               C48489) *
              C303 +
          ((C407 * C31925 +
            (C3719 + C3718 - C3717 - C3720 + C3721 + C3722) * C48522) *
               C16530 +
           ((C372 + C371 - C400 - C401 + C402 + C403) * C31925 +
            (C590 * C305 + C591 * C48541 - C1057 * C306 - C1058 * C48529 +
             (C113 * C1739 + C48388 * C1740) * C307 +
             (C113 * C1741 + C48388 * C1742) * C48502) *
                C48522) *
               C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C31925 +
            (C11102 + C11103) * C48522) *
               C16530 +
           ((C174 + C175) * C31925 + C11088 * C48522) * C48489) *
              C107 -
          ((C610 * C48522 + (C177 + C176) * C31925) * C48489 +
           (C11089 * C48522 + (C175 + C174) * C31925) * C16530) *
              C108 +
          ((C184 * C31925 + C11090 * C48522) * C16530 +
           ((C179 + C178) * C31925 + C858 * C48522) * C48489) *
              C109 -
          (((C866 + C867) * C48522 + (C181 + C180) * C31925) * C48489 +
           (C11366 * C48522 + C185 * C31925) * C16530) *
              C110 +
          ((C186 * C31925 + (C867 + C866) * C48522) * C16530 +
           ((C183 + C182) * C31925 + ((C113 * C853 + C48388 * C854) * C114 +
                                      (C113 * C855 + C48388 * C856) * C48184) *
                                         C48522) *
               C48489) *
              C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1183 +
             (C113 * C123 + C48388 * C136) * C1177 -
             (C113 * C308 + C48388 * C318) * C1184 -
             (C113 * C319 + C48388 * C338) * C1178 +
             (C113 * C309 + C48388 * C320) * C1185 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C31925 +
            (C11954 + C11955 - C11956 - C11957 + C11988 + C11989) * C48522) *
               C16530 +
           ((C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C31925 +
            C12342 * C48522) *
               C48489) *
              C48538 +
          (((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C31925 +
            C12343 * C48522) *
               C16530 +
           ((C1195 - (C1194 + C1193) + C1196 - C1197 - C1198) * C31925 +
            (C1752 - (C1753 + C1754) + C1755 - C1766 - C1767) * C48522) *
               C48489) *
              C48525 +
          ((C1209 * C31925 +
            (C1754 + C1753 - C1752 - C1755 + C1766 + C1767) * C48522) *
               C16530 +
           ((C1201 + C1200 - C1199 - C1202 + C1203 + C1204) * C31925 +
            (C590 * C1183 + C591 * C1177 - C1057 * C1184 - C1058 * C1178 +
             (C113 * C1739 + C48388 * C1740) * C1185 +
             (C113 * C1741 + C48388 * C1742) * C48502) *
                C48522) *
               C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1278 +
            (C113 * C123 + C48388 * C136) * C1272 -
            (C113 * C308 + C48388 * C318) * C1279 -
            (C113 * C319 + C48388 * C338) * C1273 +
            (C113 * C309 + C48388 * C320) * C1280 +
            (C113 * C321 + C48388 * C339) * C1274 -
            (C113 * C1283 + C48388 * C1289) * C1281 -
            (C113 * C1290 + C48388 * C1301) * C1275 +
            (C113 * C1284 + C48388 * C1291) * C1282 +
            (C113 * C1292 + C48388 * C1302) * C1276) *
               C31925 +
           (C11098 * C1278 + C11099 * C1272 - C11570 * C1279 - C11571 * C1273 +
            C11980 * C1280 + C11981 * C1274 - C12484 * C1281 - C12485 * C1275 +
            (C113 * C6867 + C48388 * C6869) * C1282 +
            (C113 * C6870 + C48388 * C6873) * C1276) *
               C48522) *
              C16530 +
          ((C164 * C1278 + C165 * C1272 - C379 * C1279 - C380 * C1273 +
            C381 * C1280 + C382 * C1274 - C1586 * C1281 - C1587 * C1275 +
            (C113 * C1286 + C48388 * C1295) * C1282 +
            (C113 * C1296 + C48388 * C1304) * C1276) *
               C31925 +
           (C586 * C1278 + C587 * C1272 - C1052 * C1279 - C1053 * C1273 +
            C1760 * C1280 + C1761 * C1274 - C12136 * C1281 - C12137 * C1275 +
            (C113 * C6868 + C48388 * C6871) * C1282 +
            (C113 * C6872 + C48388 * C6874) * C1276) *
               C48522) *
              C48489) *
         C48156 * C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C31925 +
             (C11102 + C11103) * C48522) *
                C16530 +
            ((C174 + C175) * C31925 + C11088 * C48522) * C48489) *
               C48538 -
           ((C610 * C48522 + (C177 + C176) * C31925) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C31925) * C16530) *
               C48525 +
           ((C184 * C31925 + C11090 * C48522) * C16530 +
            ((C179 + C178) * C31925 + C858 * C48522) * C48489) *
               C48496) *
              C1987 +
          (((C11088 * C31925 + C11091 * C48522) * C16530 +
            (C11090 * C31925 + C611 * C48522) * C48489) *
               C48525 -
           ((C11092 * C48522 + C11089 * C31925) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C31925) *
                C16530) *
               C48538 -
           (((C608 + C609) * C48522 + C11366 * C31925) * C48489 +
            (C11097 * C48522 + C610 * C31925) * C16530) *
               C48496) *
              C1988 +
          ((((C11105 + C11104) * C31925 + (C12906 + C12907) * C48522) * C16530 +
            (C11091 * C31925 + C13256 * C48522) * C48489) *
               C48538 -
           (((C2483 + C2482) * C48522 + C11097 * C31925) * C48489 +
            (C13257 * C48522 + C11092 * C31925) * C16530) *
               C48525 +
           ((C611 * C31925 + (C2482 + C2483) * C48522) * C16530 +
            ((C609 + C608) * C31925 +
             ((C113 * C2463 + C48388 * C2464) * C114 +
              (C113 * C2465 + C48388 * C2466) * C48184) *
                 C48522) *
                C48489) *
               C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C305 +
             (C113 * C123 + C48388 * C136) * C48541 -
             (C113 * C308 + C48388 * C318) * C306 -
             (C113 * C319 + C48388 * C338) * C48529 +
             (C113 * C309 + C48388 * C320) * C307 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C31925 +
            (C12780 + C12781 - C12782 - C12783 + C12784 + C12785) * C48522) *
               C16530 +
           ((C349 + C350 - C392 - C393 + C394 + C395) * C31925 +
            C14775 * C48522) *
               C48489) *
              C48156 * C1987 +
          (((C12782 - (C12781 + C12780) + C12783 - C12784 - C12785) * C31925 +
            (C12786 - (C12787 + C12788) + C12789 - C12790 - C12791) * C48522) *
               C16530 +
           (C14776 * C31925 +
            (C12792 - (C12793 + C12794) + C12795 - C12796 - C12797) * C48522) *
               C48489) *
              C48156 * C1988 +
          (((C12788 + C12787 - C12786 - C12789 + C12790 + C12791) * C31925 +
            (C12900 * C305 + C12901 * C48541 - C13394 * C306 - C13395 * C48529 +
             (C113 * C7735 + C48388 * C7737) * C307 +
             (C113 * C7738 + C48388 * C7741) * C48502) *
                C48522) *
               C16530 +
           ((C12794 + C12793 - C12792 - C12795 + C12796 + C12797) * C31925 +
            (C2476 * C305 + C2477 * C48541 - C13120 * C306 - C13121 * C48529 +
             (C113 * C7736 + C48388 * C7739) * C307 +
             (C113 * C7740 + C48388 * C7742) * C48502) *
                C48522) *
               C48489) *
              C48156 * C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C717 +
              (C113 * C123 + C48388 * C136) * C48470 -
              (C113 * C308 + C48388 * C318) * C718 -
              (C113 * C319 + C48388 * C338) * C48247) *
                 C31925 +
             (C11561 + C11562 - C11575 - C11576) * C48522) *
                C16530 +
            ((C724 + C725 - C726 - C727) * C31925 + C11577 * C48522) * C48489) *
               C48161 +
           (((C726 - (C725 + C724) + C727) * C31925 + C11578 * C48522) *
                C16530 +
            ((C730 - (C729 + C728) + C731) * C31925 + C1066 * C48522) *
                C48489) *
               C48169 +
           ((C750 * C31925 + C11579 * C48522) * C16530 +
            ((C734 + C733 - C732 - C735) * C31925 +
             (C1046 + C1047 - C1063 - C1064) * C48522) *
                C48489) *
               C3124) *
              C3562 +
          ((((C11575 - (C11562 + C11561) + C11576) * C31925 +
             (C13106 - (C13107 + C13108) + C13109) * C48522) *
                C16530 +
            (C11578 * C31925 + C13122 * C48522) * C48489) *
               C48161 +
           ((C11577 * C31925 + C13123 * C48522) * C16530 +
            (C11579 * C31925 + (C2348 + C2349 - C2360 - C2361) * C48522) *
                C48489) *
               C48169 +
           ((C1066 * C31925 + (C2360 - (C2349 + C2348) + C2361) * C48522) *
                C16530 +
            ((C1063 - (C1047 + C1046) + C1064) * C31925 +
             ((C113 * C2337 + C48388 * C2338) * C718 -
              (C596 * C48470 + C597 * C717) +
              (C113 * C2339 + C48388 * C2340) * C48247) *
                 C48522) *
                C48489) *
               C3124) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C717 +
              (C113 * C123 + C48388 * C136) * C48470 -
              (C113 * C308 + C48388 * C318) * C718 -
              (C113 * C319 + C48388 * C338) * C48247) *
                 C31925 +
             (C11561 + C11562 - C11575 - C11576) * C48522) *
                C16530 +
            ((C724 + C725 - C726 - C727) * C31925 + C11577 * C48522) * C48489) *
               C2825 +
           (((C726 - (C725 + C724) + C727) * C31925 + C11578 * C48522) *
                C16530 +
            ((C730 - (C729 + C728) + C731) * C31925 + C1066 * C48522) *
                C48489) *
               C48166) *
              C48285 +
          ((((C11575 - (C11562 + C11561) + C11576) * C31925 +
             (C13106 - (C13107 + C13108) + C13109) * C48522) *
                C16530 +
            (C11578 * C31925 + C13122 * C48522) * C48489) *
               C2825 +
           ((C11577 * C31925 + C13123 * C48522) * C16530 +
            (C11579 * C31925 + (C2348 + C2349 - C2360 - C2361) * C48522) *
                C48489) *
               C48166) *
              C48292 +
          ((((C13108 + C13107 - C13106 - C13109) * C31925 +
             (C13388 + C13389 - C13396 - C13397) * C48522) *
                C16530 +
            (C13123 * C31925 + (C13112 + C13113 - C13124 - C13125) * C48522) *
                C48489) *
               C2825 +
           ((C13122 * C31925 + (C13124 - (C13113 + C13112) + C13125) * C48522) *
                C16530 +
            ((C2360 - (C2349 + C2348) + C2361) * C31925 +
             ((C113 * C2583 + C48388 * C2588) * C718 -
              (C2479 * C48470 + C2478 * C717) +
              (C113 * C2589 + C48388 * C2592) * C48247) *
                 C48522) *
                C48489) *
               C48166) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C305 +
              (C113 * C123 + C48388 * C136) * C48541 -
              (C113 * C308 + C48388 * C318) * C306 -
              (C113 * C319 + C48388 * C338) * C48529 +
              (C113 * C309 + C48388 * C320) * C307 +
              (C113 * C321 + C48388 * C339) * C48502) *
                 C31925 +
             (C12780 + C12781 - C12782 - C12783 + C12784 + C12785) * C48522) *
                C16530 +
            ((C349 + C350 - C392 - C393 + C394 + C395) * C31925 +
             C14775 * C48522) *
                C48489) *
               C2825 +
           (((C392 - (C350 + C349) + C393 - C394 - C395) * C31925 +
             C14776 * C48522) *
                C16530 +
            ((C396 - (C360 + C359) + C397 - C398 - C399) * C31925 +
             (C3717 - (C3718 + C3719) + C3720 - C3721 - C3722) * C48522) *
                C48489) *
               C48166) *
              C3562 +
          ((((C12782 - (C12781 + C12780) + C12783 - C12784 - C12785) * C31925 +
             (C12786 - (C12787 + C12788) + C12789 - C12790 - C12791) * C48522) *
                C16530 +
            (C14776 * C31925 +
             (C12792 - (C12793 + C12794) + C12795 - C12796 - C12797) * C48522) *
                C48489) *
               C2825 +
           ((C14775 * C31925 +
             (C12794 + C12793 - C12792 - C12795 + C12796 + C12797) * C48522) *
                C16530 +
            ((C3719 + C3718 - C3717 - C3720 + C3721 + C3722) * C31925 +
             (C594 * C305 + C595 * C48541 - C2356 * C306 - C2357 * C48529 +
              (C113 * C1425 + C48388 * C1442) * C307 +
              (C113 * C1443 + C48388 * C1452) * C48502) *
                 C48522) *
                C48489) *
               C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C31925 +
             (C11102 + C11103) * C48522) *
                C16530 +
            ((C174 + C175) * C31925 + C11088 * C48522) * C48489) *
               C48547 -
           ((C610 * C48522 + (C177 + C176) * C31925) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C31925) * C16530) *
               C48540 +
           ((C184 * C31925 + C11090 * C48522) * C16530 +
            ((C179 + C178) * C31925 + C858 * C48522) * C48489) *
               C48527 -
           (((C866 + C867) * C48522 + (C181 + C180) * C31925) * C48489 +
            (C11366 * C48522 + C185 * C31925) * C16530) *
               C48506) *
              C3562 +
          (((C11088 * C31925 + C11091 * C48522) * C16530 +
            (C11090 * C31925 + C611 * C48522) * C48489) *
               C48540 -
           ((C11092 * C48522 + C11089 * C31925) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C31925) *
                C16530) *
               C48547 -
           (((C608 + C609) * C48522 + C11366 * C31925) * C48489 +
            (C11097 * C48522 + C610 * C31925) * C16530) *
               C48527 +
           ((C858 * C31925 + (C609 + C608) * C48522) * C16530 +
            ((C867 + C866) * C31925 + ((C113 * C530 + C48388 * C549) * C114 +
                                       (C113 * C550 + C48388 * C560) * C48184) *
                                          C48522) *
                C48489) *
               C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C31925 +
             (C11102 + C11103) * C48522) *
                C16530 +
            ((C174 + C175) * C31925 + C11088 * C48522) * C48489) *
               C2825 -
           ((C610 * C48522 + (C177 + C176) * C31925) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C31925) * C16530) *
               C48166) *
              C48549 +
          (((C11088 * C31925 + C11091 * C48522) * C16530 +
            (C11090 * C31925 + C611 * C48522) * C48489) *
               C48166 -
           ((C11092 * C48522 + C11089 * C31925) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C31925) *
                C16530) *
               C2825) *
              C48546 +
          ((((C11105 + C11104) * C31925 + (C12906 + C12907) * C48522) * C16530 +
            (C11091 * C31925 + C13256 * C48522) * C48489) *
               C2825 -
           (((C2483 + C2482) * C48522 + C11097 * C31925) * C48489 +
            (C13257 * C48522 + C11092 * C31925) * C16530) *
               C48166) *
              C48537 +
          (((C13256 * C31925 + (C12909 + C12908) * C48522) * C16530 +
            ((C2482 + C2483) * C31925 +
             ((C113 * C2172 + C48388 * C2183) * C114 +
              (C113 * C2184 + C48388 * C2190) * C48184) *
                 C48522) *
                C48489) *
               C48166 -
           (((C12908 + C12909) * C48522 + C13257 * C31925) * C48489 +
            ((C12910 + C12911) * C48522 + (C12907 + C12906) * C31925) *
                C16530) *
               C2825) *
              C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C31925 +
             (C11102 + C11103) * C48522) *
                C16530 +
            ((C174 + C175) * C31925 + C11088 * C48522) * C48489) *
               C48161 -
           ((C610 * C48522 + (C177 + C176) * C31925) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C31925) * C16530) *
               C48169 +
           ((C184 * C31925 + C11090 * C48522) * C16530 +
            ((C179 + C178) * C31925 + C858 * C48522) * C48489) *
               C3124) *
              C48285 +
          (((C11088 * C31925 + C11091 * C48522) * C16530 +
            (C11090 * C31925 + C611 * C48522) * C48489) *
               C48169 -
           ((C11092 * C48522 + C11089 * C31925) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C31925) *
                C16530) *
               C48161 -
           (((C608 + C609) * C48522 + C11366 * C31925) * C48489 +
            (C11097 * C48522 + C610 * C31925) * C16530) *
               C3124) *
              C48292 +
          ((((C11105 + C11104) * C31925 + (C12906 + C12907) * C48522) * C16530 +
            (C11091 * C31925 + C13256 * C48522) * C48489) *
               C48161 -
           (((C2483 + C2482) * C48522 + C11097 * C31925) * C48489 +
            (C13257 * C48522 + C11092 * C31925) * C16530) *
               C48169 +
           ((C611 * C31925 + (C2482 + C2483) * C48522) * C16530 +
            ((C609 + C608) * C31925 +
             ((C113 * C2463 + C48388 * C2464) * C114 +
              (C113 * C2465 + C48388 * C2466) * C48184) *
                 C48522) *
                C48489) *
               C3124) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C31925 +
             (C11102 + C11103) * C48522) *
                C16530 +
            ((C174 + C175) * C31925 + C11088 * C48522) * C48489) *
               C48547 -
           ((C610 * C48522 + (C177 + C176) * C31925) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C31925) * C16530) *
               C48540 +
           ((C184 * C31925 + C11090 * C48522) * C16530 +
            ((C179 + C178) * C31925 + C858 * C48522) * C48489) *
               C48527 -
           (((C866 + C867) * C48522 + (C181 + C180) * C31925) * C48489 +
            (C11366 * C48522 + C185 * C31925) * C16530) *
               C48506) *
              C3562 +
          (((C11088 * C31925 + C11091 * C48522) * C16530 +
            (C11090 * C31925 + C611 * C48522) * C48489) *
               C48540 -
           ((C11092 * C48522 + C11089 * C31925) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C31925) *
                C16530) *
               C48547 -
           (((C608 + C609) * C48522 + C11366 * C31925) * C48489 +
            (C11097 * C48522 + C610 * C31925) * C16530) *
               C48527 +
           ((C858 * C31925 + (C609 + C608) * C48522) * C16530 +
            ((C867 + C866) * C31925 + ((C113 * C530 + C48388 * C549) * C114 +
                                       (C113 * C550 + C48388 * C560) * C48184) *
                                          C48522) *
                C48489) *
               C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C305 +
              (C113 * C123 + C48388 * C136) * C48541 -
              (C113 * C308 + C48388 * C318) * C306 -
              (C113 * C319 + C48388 * C338) * C48529 +
              (C113 * C309 + C48388 * C320) * C307 +
              (C113 * C321 + C48388 * C339) * C48502) *
                 C31925 +
             (C12780 + C12781 - C12782 - C12783 + C12784 + C12785) * C48522) *
                C16530 +
            ((C349 + C350 - C392 - C393 + C394 + C395) * C31925 +
             C14775 * C48522) *
                C48489) *
               C2825 +
           (((C392 - (C350 + C349) + C393 - C394 - C395) * C31925 +
             C14776 * C48522) *
                C16530 +
            ((C396 - (C360 + C359) + C397 - C398 - C399) * C31925 +
             (C3717 - (C3718 + C3719) + C3720 - C3721 - C3722) * C48522) *
                C48489) *
               C48166) *
              C3562 +
          ((((C12782 - (C12781 + C12780) + C12783 - C12784 - C12785) * C31925 +
             (C12786 - (C12787 + C12788) + C12789 - C12790 - C12791) * C48522) *
                C16530 +
            (C14776 * C31925 +
             (C12792 - (C12793 + C12794) + C12795 - C12796 - C12797) * C48522) *
                C48489) *
               C2825 +
           ((C14775 * C31925 +
             (C12794 + C12793 - C12792 - C12795 + C12796 + C12797) * C48522) *
                C16530 +
            ((C3719 + C3718 - C3717 - C3720 + C3721 + C3722) * C31925 +
             (C594 * C305 + C595 * C48541 - C2356 * C306 - C2357 * C48529 +
              (C113 * C1425 + C48388 * C1442) * C307 +
              (C113 * C1443 + C48388 * C1452) * C48502) *
                 C48522) *
                C48489) *
               C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C717 +
             (C113 * C123 + C48388 * C136) * C48470 -
             (C113 * C308 + C48388 * C318) * C718 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C31925 +
            (C11561 + C11562 - C11575 - C11576) * C48522) *
               C16530 +
           ((C724 + C725 - C726 - C727) * C31925 + C11577 * C48522) * C48489) *
              C713 +
          (((C726 - (C725 + C724) + C727) * C31925 + C11578 * C48522) * C16530 +
           ((C730 - (C729 + C728) + C731) * C31925 + C1066 * C48522) * C48489) *
              C714 +
          ((C750 * C31925 + C11579 * C48522) * C16530 +
           ((C734 + C733 - C732 - C735) * C31925 +
            (C1046 + C1047 - C1063 - C1064) * C48522) *
               C48489) *
              C715 +
          ((C751 * C31925 + (C1063 - (C1047 + C1046) + C1064) * C48522) *
               C16530 +
           ((C748 - (C737 + C736) + C749) * C31925 +
            ((C113 * C1017 + C48388 * C1026) * C718 -
             (C864 * C48470 + C865 * C717) +
             (C113 * C1027 + C48388 * C1032) * C48247) *
                C48522) *
               C48489) *
              C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1557 +
             (C113 * C123 + C48388 * C136) * C1551 -
             (C113 * C308 + C48388 * C318) * C1558 -
             (C113 * C319 + C48388 * C338) * C1552 +
             (C113 * C309 + C48388 * C320) * C1559 +
             (C113 * C321 + C48388 * C339) * C1553 -
             (C113 * C1283 + C48388 * C1289) * C1560 -
             (C113 * C1290 + C48388 * C1301) * C48512) *
                C31925 +
            (C12474 + C12475 - C12476 - C12477 + C12478 + C12479 - C12486 -
             C12487) *
                C48522) *
               C16530 +
           ((C1566 + C1567 - C1568 - C1569 + C1570 + C1571 - C1590 - C1591) *
                C31925 +
            (C12126 + C12127 - C12128 - C12129 + C12130 + C12131 - C12138 -
             C12139) *
                C48522) *
               C48489) *
              C48456 +
          (((C1568 - (C1567 + C1566) + C1569 - C1570 - C1571 + C1590 + C1591) *
                C31925 +
            (C12128 - (C12127 + C12126) + C12129 - C12130 - C12131 + C12138 +
             C12139) *
                C48522) *
               C16530 +
           ((C1578 - (C1577 + C1576) + C1579 - C1580 - C1581 + C1592 + C1593) *
                C31925 +
            (C1054 * C1558 - (C589 * C1551 + C588 * C1557) + C1056 * C1552 -
             C1762 * C1559 - C1763 * C1553 +
             (C113 * C1867 + C48388 * C1872) * C1560 +
             (C113 * C1873 + C48388 * C1876) * C48512) *
                C48522) *
               C48489) *
              C48166) *
         C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C717 +
              (C113 * C123 + C48388 * C136) * C48470 -
              (C113 * C308 + C48388 * C318) * C718 -
              (C113 * C319 + C48388 * C338) * C48247) *
                 C31925 +
             (C11561 + C11562 - C11575 - C11576) * C48522) *
                C16530 +
            ((C724 + C725 - C726 - C727) * C31925 + C11577 * C48522) * C48489) *
               C302 +
           (((C726 - (C725 + C724) + C727) * C31925 + C11578 * C48522) *
                C16530 +
            ((C730 - (C729 + C728) + C731) * C31925 + C1066 * C48522) *
                C48489) *
               C303 +
           ((C750 * C31925 + C11579 * C48522) * C16530 +
            ((C734 + C733 - C732 - C735) * C31925 +
             (C1046 + C1047 - C1063 - C1064) * C48522) *
                C48489) *
               C48496) *
              C48471 +
          ((((C11575 - (C11562 + C11561) + C11576) * C31925 +
             (C13106 - (C13107 + C13108) + C13109) * C48522) *
                C16530 +
            (C11578 * C31925 + C13122 * C48522) * C48489) *
               C302 +
           ((C11577 * C31925 + C13123 * C48522) * C16530 +
            (C11579 * C31925 + (C2348 + C2349 - C2360 - C2361) * C48522) *
                C48489) *
               C303 +
           ((C1066 * C31925 + (C2360 - (C2349 + C2348) + C2361) * C48522) *
                C16530 +
            ((C1063 - (C1047 + C1046) + C1064) * C31925 +
             ((C113 * C2337 + C48388 * C2338) * C718 -
              (C596 * C48470 + C597 * C717) +
              (C113 * C2339 + C48388 * C2340) * C48247) *
                 C48522) *
                C48489) *
               C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1557 +
             (C113 * C123 + C48388 * C136) * C1551 -
             (C113 * C308 + C48388 * C318) * C1558 -
             (C113 * C319 + C48388 * C338) * C1552 +
             (C113 * C309 + C48388 * C320) * C1559 +
             (C113 * C321 + C48388 * C339) * C1553 -
             (C113 * C1283 + C48388 * C1289) * C1560 -
             (C113 * C1290 + C48388 * C1301) * C48512) *
                C31925 +
            (C12474 + C12475 - C12476 - C12477 + C12478 + C12479 - C12486 -
             C12487) *
                C48522) *
               C16530 +
           ((C1566 + C1567 - C1568 - C1569 + C1570 + C1571 - C1590 - C1591) *
                C31925 +
            (C12126 + C12127 - C12128 - C12129 + C12130 + C12131 - C12138 -
             C12139) *
                C48522) *
               C48489) *
              C48156 * C48471 +
          (((C12476 - (C12475 + C12474) + C12477 - C12478 - C12479 + C12486 +
             C12487) *
                C31925 +
            (C11982 * C1558 - (C11100 * C1551 + C11101 * C1557) +
             C11983 * C1552 - C11984 * C1559 - C11985 * C1553 +
             (C113 * C6381 + C48388 * C6383) * C1560 +
             (C113 * C6384 + C48388 * C6387) * C48512) *
                C48522) *
               C16530 +
           ((C12128 - (C12127 + C12126) + C12129 - C12130 - C12131 + C12138 +
             C12139) *
                C31925 +
            (C2354 * C1558 - (C593 * C1551 + C592 * C1557) + C2355 * C1552 -
             C11986 * C1559 - C11987 * C1553 +
             (C113 * C6382 + C48388 * C6385) * C1560 +
             (C113 * C6386 + C48388 * C6388) * C48512) *
                C48522) *
               C48489) *
              C48156 * C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C305 +
             (C113 * C123 + C48388 * C136) * C48541 -
             (C113 * C308 + C48388 * C318) * C306 -
             (C113 * C319 + C48388 * C338) * C48529 +
             (C113 * C309 + C48388 * C320) * C307 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C31925 +
            (C12780 + C12781 - C12782 - C12783 + C12784 + C12785) * C48522) *
               C16530 +
           ((C349 + C350 - C392 - C393 + C394 + C395) * C31925 +
            C14775 * C48522) *
               C48489) *
              C302 +
          (((C392 - (C350 + C349) + C393 - C394 - C395) * C31925 +
            C14776 * C48522) *
               C16530 +
           ((C396 - (C360 + C359) + C397 - C398 - C399) * C31925 +
            (C3717 - (C3718 + C3719) + C3720 - C3721 - C3722) * C48522) *
               C48489) *
              C303 +
          ((C407 * C31925 +
            (C3719 + C3718 - C3717 - C3720 + C3721 + C3722) * C48522) *
               C16530 +
           ((C372 + C371 - C400 - C401 + C402 + C403) * C31925 +
            (C590 * C305 + C591 * C48541 - C1057 * C306 - C1058 * C48529 +
             (C113 * C1739 + C48388 * C1740) * C307 +
             (C113 * C1741 + C48388 * C1742) * C48502) *
                C48522) *
               C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C31925 +
            (C11102 + C11103) * C48522) *
               C16530 +
           ((C174 + C175) * C31925 + C11088 * C48522) * C48489) *
              C107 -
          ((C610 * C48522 + (C177 + C176) * C31925) * C48489 +
           (C11089 * C48522 + (C175 + C174) * C31925) * C16530) *
              C108 +
          ((C184 * C31925 + C11090 * C48522) * C16530 +
           ((C179 + C178) * C31925 + C858 * C48522) * C48489) *
              C109 -
          (((C866 + C867) * C48522 + (C181 + C180) * C31925) * C48489 +
           (C11366 * C48522 + C185 * C31925) * C16530) *
              C110 +
          ((C186 * C31925 + (C867 + C866) * C48522) * C16530 +
           ((C183 + C182) * C31925 + ((C113 * C853 + C48388 * C854) * C114 +
                                      (C113 * C855 + C48388 * C856) * C48184) *
                                         C48522) *
               C48489) *
              C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C31925 +
             (C11102 + C11103) * C48522) *
                C16530 +
            ((C174 + C175) * C31925 + C11088 * C48522) * C48489) *
               C302 -
           ((C610 * C48522 + (C177 + C176) * C31925) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C31925) * C16530) *
               C303 +
           ((C184 * C31925 + C11090 * C48522) * C16530 +
            ((C179 + C178) * C31925 + C858 * C48522) * C48489) *
               C48496) *
              C48542 +
          (((C11088 * C31925 + C11091 * C48522) * C16530 +
            (C11090 * C31925 + C611 * C48522) * C48489) *
               C303 -
           ((C11092 * C48522 + C11089 * C31925) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C31925) *
                C16530) *
               C302 -
           (((C608 + C609) * C48522 + C11366 * C31925) * C48489 +
            (C11097 * C48522 + C610 * C31925) * C16530) *
               C48496) *
              C48531 +
          ((((C11105 + C11104) * C31925 + (C12906 + C12907) * C48522) * C16530 +
            (C11091 * C31925 + C13256 * C48522) * C48489) *
               C302 -
           (((C2483 + C2482) * C48522 + C11097 * C31925) * C48489 +
            (C13257 * C48522 + C11092 * C31925) * C16530) *
               C303 +
           ((C611 * C31925 + (C2482 + C2483) * C48522) * C16530 +
            ((C609 + C608) * C31925 +
             ((C113 * C2463 + C48388 * C2464) * C114 +
              (C113 * C2465 + C48388 * C2466) * C48184) *
                 C48522) *
                C48489) *
               C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1183 +
             (C113 * C123 + C48388 * C136) * C1177 -
             (C113 * C308 + C48388 * C318) * C1184 -
             (C113 * C319 + C48388 * C338) * C1178 +
             (C113 * C309 + C48388 * C320) * C1185 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C31925 +
            (C11954 + C11955 - C11956 - C11957 + C11988 + C11989) * C48522) *
               C16530 +
           ((C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C31925 +
            C12342 * C48522) *
               C48489) *
              C48538 +
          (((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C31925 +
            C12343 * C48522) *
               C16530 +
           ((C1195 - (C1194 + C1193) + C1196 - C1197 - C1198) * C31925 +
            (C1752 - (C1753 + C1754) + C1755 - C1766 - C1767) * C48522) *
               C48489) *
              C48525 +
          ((C1209 * C31925 +
            (C1754 + C1753 - C1752 - C1755 + C1766 + C1767) * C48522) *
               C16530 +
           ((C1201 + C1200 - C1199 - C1202 + C1203 + C1204) * C31925 +
            (C590 * C1183 + C591 * C1177 - C1057 * C1184 - C1058 * C1178 +
             (C113 * C1739 + C48388 * C1740) * C1185 +
             (C113 * C1741 + C48388 * C1742) * C48502) *
                C48522) *
               C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1278 +
            (C113 * C123 + C48388 * C136) * C1272 -
            (C113 * C308 + C48388 * C318) * C1279 -
            (C113 * C319 + C48388 * C338) * C1273 +
            (C113 * C309 + C48388 * C320) * C1280 +
            (C113 * C321 + C48388 * C339) * C1274 -
            (C113 * C1283 + C48388 * C1289) * C1281 -
            (C113 * C1290 + C48388 * C1301) * C1275 +
            (C113 * C1284 + C48388 * C1291) * C1282 +
            (C113 * C1292 + C48388 * C1302) * C1276) *
               C31925 +
           (C11098 * C1278 + C11099 * C1272 - C11570 * C1279 - C11571 * C1273 +
            C11980 * C1280 + C11981 * C1274 - C12484 * C1281 - C12485 * C1275 +
            (C113 * C6867 + C48388 * C6869) * C1282 +
            (C113 * C6870 + C48388 * C6873) * C1276) *
               C48522) *
              C16530 +
          ((C164 * C1278 + C165 * C1272 - C379 * C1279 - C380 * C1273 +
            C381 * C1280 + C382 * C1274 - C1586 * C1281 - C1587 * C1275 +
            (C113 * C1286 + C48388 * C1295) * C1282 +
            (C113 * C1296 + C48388 * C1304) * C1276) *
               C31925 +
           (C586 * C1278 + C587 * C1272 - C1052 * C1279 - C1053 * C1273 +
            C1760 * C1280 + C1761 * C1274 - C12136 * C1281 - C12137 * C1275 +
            (C113 * C6868 + C48388 * C6871) * C1282 +
            (C113 * C6872 + C48388 * C6874) * C1276) *
               C48522) *
              C48489) *
         C48156 * C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1183 +
             (C113 * C123 + C48388 * C136) * C1177 -
             (C113 * C308 + C48388 * C318) * C1184 -
             (C113 * C319 + C48388 * C338) * C1178 +
             (C113 * C309 + C48388 * C320) * C1185 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C31925 +
            (C11954 + C11955 - C11956 - C11957 + C11988 + C11989) * C48522) *
               C16530 +
           ((C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C31925 +
            C12342 * C48522) *
               C48489) *
              C48156 * C48542 +
          (((C11956 - (C11955 + C11954) + C11957 - C11988 - C11989) * C31925 +
            (C11990 - (C11964 + C11965) + C11991 - C11992 - C11993) * C48522) *
               C16530 +
           (C12343 * C31925 +
            (C11972 - (C11973 + C11974) + C11975 - C11994 - C11995) * C48522) *
               C48489) *
              C48156 * C48531 +
          (((C11965 + C11964 - C11990 - C11991 + C11992 + C11993) * C31925 +
            (C12900 * C1183 + C12901 * C1177 - C13394 * C1184 - C13395 * C1178 +
             (C113 * C7735 + C48388 * C7737) * C1185 +
             (C113 * C7738 + C48388 * C7741) * C48502) *
                C48522) *
               C16530 +
           ((C11974 + C11973 - C11972 - C11975 + C11994 + C11995) * C31925 +
            (C2476 * C1183 + C2477 * C1177 - C13120 * C1184 - C13121 * C1178 +
             (C113 * C7736 + C48388 * C7739) * C1185 +
             (C113 * C7740 + C48388 * C7742) * C48502) *
                C48522) *
               C48489) *
              C48156 * C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C114 +
              (C113 * C123 + C48388 * C136) * C48184) *
                 C31925 +
             (C11102 + C11103) * C48522) *
                C16530 +
            ((C174 + C175) * C31925 + C11088 * C48522) * C48489) *
               C713 -
           ((C610 * C48522 + (C177 + C176) * C31925) * C48489 +
            (C11089 * C48522 + (C175 + C174) * C31925) * C16530) *
               C714 +
           ((C184 * C31925 + C11090 * C48522) * C16530 +
            ((C179 + C178) * C31925 + C858 * C48522) * C48489) *
               C715 -
           (((C866 + C867) * C48522 + (C181 + C180) * C31925) * C48489 +
            (C11366 * C48522 + C185 * C31925) * C16530) *
               C48506) *
              C48471 +
          (((C11088 * C31925 + C11091 * C48522) * C16530 +
            (C11090 * C31925 + C611 * C48522) * C48489) *
               C714 -
           ((C11092 * C48522 + C11089 * C31925) * C48489 +
            ((C11104 + C11105) * C48522 + (C11103 + C11102) * C31925) *
                C16530) *
               C713 -
           (((C608 + C609) * C48522 + C11366 * C31925) * C48489 +
            (C11097 * C48522 + C610 * C31925) * C16530) *
               C715 +
           ((C858 * C31925 + (C609 + C608) * C48522) * C16530 +
            ((C867 + C866) * C31925 + ((C113 * C530 + C48388 * C549) * C114 +
                                       (C113 * C550 + C48388 * C560) * C48184) *
                                          C48522) *
                C48489) *
               C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48388 * C122) * C1183 +
              (C113 * C123 + C48388 * C136) * C1177 -
              (C113 * C308 + C48388 * C318) * C1184 -
              (C113 * C319 + C48388 * C338) * C1178 +
              (C113 * C309 + C48388 * C320) * C1185 +
              (C113 * C321 + C48388 * C339) * C48502) *
                 C31925 +
             (C11954 + C11955 - C11956 - C11957 + C11988 + C11989) * C48522) *
                C16530 +
            ((C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C31925 +
             C12342 * C48522) *
                C48489) *
               C48456 +
           (((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C31925 +
             C12343 * C48522) *
                C16530 +
            ((C1195 - (C1194 + C1193) + C1196 - C1197 - C1198) * C31925 +
             (C1752 - (C1753 + C1754) + C1755 - C1766 - C1767) * C48522) *
                C48489) *
               C48166) *
              C48471 +
          ((((C11956 - (C11955 + C11954) + C11957 - C11988 - C11989) * C31925 +
             (C11990 - (C11964 + C11965) + C11991 - C11992 - C11993) * C48522) *
                C16530 +
            (C12343 * C31925 +
             (C11972 - (C11973 + C11974) + C11975 - C11994 - C11995) * C48522) *
                C48489) *
               C48456 +
           ((C12342 * C31925 +
             (C11974 + C11973 - C11972 - C11975 + C11994 + C11995) * C48522) *
                C16530 +
            ((C1754 + C1753 - C1752 - C1755 + C1766 + C1767) * C31925 +
             (C594 * C1183 + C595 * C1177 - C2356 * C1184 - C2357 * C1178 +
              (C113 * C1425 + C48388 * C1442) * C1185 +
              (C113 * C1443 + C48388 * C1452) * C48502) *
                 C48522) *
                C48489) *
               C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C31925 +
            (C11102 + C11103) * C48522) *
               C16530 +
           ((C174 + C175) * C31925 + C11088 * C48522) * C48489) *
              C107 -
          ((C610 * C48522 + (C177 + C176) * C31925) * C48489 +
           (C11089 * C48522 + (C175 + C174) * C31925) * C16530) *
              C108 +
          ((C184 * C31925 + C11090 * C48522) * C16530 +
           ((C179 + C178) * C31925 + C858 * C48522) * C48489) *
              C109 -
          (((C866 + C867) * C48522 + (C181 + C180) * C31925) * C48489 +
           (C11366 * C48522 + C185 * C31925) * C16530) *
              C110 +
          ((C186 * C31925 + (C867 + C866) * C48522) * C16530 +
           ((C183 + C182) * C31925 + ((C113 * C853 + C48388 * C854) * C114 +
                                      (C113 * C855 + C48388 * C856) * C48184) *
                                         C48522) *
               C48489) *
              C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C305 +
             (C113 * C123 + C48388 * C136) * C48541 -
             (C113 * C308 + C48388 * C318) * C306 -
             (C113 * C319 + C48388 * C338) * C48529 +
             (C113 * C309 + C48388 * C320) * C307 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C31925 +
            (C12780 + C12781 - C12782 - C12783 + C12784 + C12785) * C48522) *
               C16530 +
           ((C349 + C350 - C392 - C393 + C394 + C395) * C31925 +
            C14775 * C48522) *
               C48489) *
              C302 +
          (((C392 - (C350 + C349) + C393 - C394 - C395) * C31925 +
            C14776 * C48522) *
               C16530 +
           ((C396 - (C360 + C359) + C397 - C398 - C399) * C31925 +
            (C3717 - (C3718 + C3719) + C3720 - C3721 - C3722) * C48522) *
               C48489) *
              C303 +
          ((C407 * C31925 +
            (C3719 + C3718 - C3717 - C3720 + C3721 + C3722) * C48522) *
               C16530 +
           ((C372 + C371 - C400 - C401 + C402 + C403) * C31925 +
            (C590 * C305 + C591 * C48541 - C1057 * C306 - C1058 * C48529 +
             (C113 * C1739 + C48388 * C1740) * C307 +
             (C113 * C1741 + C48388 * C1742) * C48502) *
                C48522) *
               C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1183 +
             (C113 * C123 + C48388 * C136) * C1177 -
             (C113 * C308 + C48388 * C318) * C1184 -
             (C113 * C319 + C48388 * C338) * C1178 +
             (C113 * C309 + C48388 * C320) * C1185 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C31925 +
            (C11954 + C11955 - C11956 - C11957 + C11988 + C11989) * C48522) *
               C16530 +
           ((C1187 + C1188 - C1189 - C1190 + C1191 + C1192) * C31925 +
            C12342 * C48522) *
               C48489) *
              C48538 +
          (((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C31925 +
            C12343 * C48522) *
               C16530 +
           ((C1195 - (C1194 + C1193) + C1196 - C1197 - C1198) * C31925 +
            (C1752 - (C1753 + C1754) + C1755 - C1766 - C1767) * C48522) *
               C48489) *
              C48525 +
          ((C1209 * C31925 +
            (C1754 + C1753 - C1752 - C1755 + C1766 + C1767) * C48522) *
               C16530 +
           ((C1201 + C1200 - C1199 - C1202 + C1203 + C1204) * C31925 +
            (C590 * C1183 + C591 * C1177 - C1057 * C1184 - C1058 * C1178 +
             (C113 * C1739 + C48388 * C1740) * C1185 +
             (C113 * C1741 + C48388 * C1742) * C48502) *
                C48522) *
               C48489) *
              C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1278 +
            (C113 * C123 + C48388 * C136) * C1272 -
            (C113 * C308 + C48388 * C318) * C1279 -
            (C113 * C319 + C48388 * C338) * C1273 +
            (C113 * C309 + C48388 * C320) * C1280 +
            (C113 * C321 + C48388 * C339) * C1274 -
            (C113 * C1283 + C48388 * C1289) * C1281 -
            (C113 * C1290 + C48388 * C1301) * C1275 +
            (C113 * C1284 + C48388 * C1291) * C1282 +
            (C113 * C1292 + C48388 * C1302) * C1276) *
               C31925 +
           (C11098 * C1278 + C11099 * C1272 - C11570 * C1279 - C11571 * C1273 +
            C11980 * C1280 + C11981 * C1274 - C12484 * C1281 - C12485 * C1275 +
            (C113 * C6867 + C48388 * C6869) * C1282 +
            (C113 * C6870 + C48388 * C6873) * C1276) *
               C48522) *
              C16530 +
          ((C164 * C1278 + C165 * C1272 - C379 * C1279 - C380 * C1273 +
            C381 * C1280 + C382 * C1274 - C1586 * C1281 - C1587 * C1275 +
            (C113 * C1286 + C48388 * C1295) * C1282 +
            (C113 * C1296 + C48388 * C1304) * C1276) *
               C31925 +
           (C586 * C1278 + C587 * C1272 - C1052 * C1279 - C1053 * C1273 +
            C1760 * C1280 + C1761 * C1274 - C12136 * C1281 - C12137 * C1275 +
            (C113 * C6868 + C48388 * C6871) * C1282 +
            (C113 * C6872 + C48388 * C6874) * C1276) *
               C48522) *
              C48489) *
         C48156 * C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C47163 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48243 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C47155 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48250 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C47169 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C3121) *
               C31925 +
           ((C37684 + C37685) * C47163 + (C37686 + C37687) * C48243 -
            (C38154 + C38155) * C47155 - (C38156 + C38157) * C48250 +
            (C38556 + C38557) * C47169 + (C38558 + C38559) * C3121) *
               C48522) *
              C48141 * C48161 +
          (((C5289 + C5288) * C47155 -
            ((C5097 + C5096) * C48243 + (C5095 + C5094) * C47163) +
            (C5291 + C5290) * C48250 - (C5293 + C5292) * C47169 -
            (C5295 + C5294) * C3121) *
               C31925 +
           ((C5992 + C5993) * C47155 -
            ((C5485 + C5484) * C48243 + (C5483 + C5482) * C47163) +
            (C5994 + C5995) * C48250 - (C6734 + C6735) * C47169 -
            (C6736 + C6737) * C3121) *
               C48522) *
              C48141 * C48169 +
          (((C5101 + C5100) * C47163 + (C5099 + C5098) * C48243 -
            (C5297 + C5296) * C47155 - (C5299 + C5298) * C48250 +
            (C5301 + C5300) * C47169 + (C5303 + C5302) * C3121) *
               C31925 +
           ((C5486 + C5487) * C47163 + (C5488 + C5489) * C48243 -
            (C5996 + C5997) * C47155 - (C5998 + C5999) * C48250 +
            (C5059 * C1419 + C5055 * C1430 + C5060 * C1867 + C48520 * C1872) *
                C47169 +
            (C5059 * C1431 + C5055 * C1446 + C5060 * C1873 + C48520 * C1876) *
                C3121) *
               C48522) *
              C48141 * C3124) *
         C48202) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C47163 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48243 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C47155 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48250 +
             (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                 C47169 +
             (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                 C3121) *
                C31925 +
            ((C37684 + C37685) * C47163 + (C37686 + C37687) * C48243 -
             (C38154 + C38155) * C47155 - (C38156 + C38157) * C48250 +
             (C38556 + C38557) * C47169 + (C38558 + C38559) * C3121) *
                C48522) *
               C48141 * C2825 +
           (((C5289 + C5288) * C47155 -
             ((C5097 + C5096) * C48243 + (C5095 + C5094) * C47163) +
             (C5291 + C5290) * C48250 - (C5293 + C5292) * C47169 -
             (C5295 + C5294) * C3121) *
                C31925 +
            ((C5992 + C5993) * C47155 -
             ((C5485 + C5484) * C48243 + (C5483 + C5482) * C47163) +
             (C5994 + C5995) * C48250 - (C6734 + C6735) * C47169 -
             (C6736 + C6737) * C3121) *
                C48522) *
               C48141 * C48166) *
              C48471 +
          ((((C38155 + C38154) * C47155 -
             ((C37687 + C37686) * C48243 + (C37685 + C37684) * C47163) +
             (C38157 + C38156) * C48250 - (C38557 + C38556) * C47169 -
             (C38559 + C38558) * C3121) *
                C31925 +
            ((C38560 + C38561) * C47155 -
             ((C37688 + C37689) * C48243 + (C37690 + C37691) * C47163) +
             (C38562 + C38563) * C48250 - (C38564 + C38565) * C47169 -
             (C38566 + C38567) * C3121) *
                C48522) *
               C48141 * C2825 +
           (((C5482 + C5483) * C47163 + (C5484 + C5485) * C48243 -
             (C5993 + C5992) * C47155 - (C5995 + C5994) * C48250 +
             (C6735 + C6734) * C47169 + (C6737 + C6736) * C3121) *
                C31925 +
            ((C5490 + C5491) * C47163 + (C5492 + C5493) * C48243 -
             (C7460 + C7461) * C47155 - (C7462 + C7463) * C48250 +
             (C5059 * C1423 + C5055 * C1438 + C5060 * C6382 + C48520 * C6385) *
                 C47169 +
             (C5059 * C1439 + C5055 * C1450 + C5060 * C6386 + C48520 * C6388) *
                 C3121) *
                C48522) *
               C48141 * C48166) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C2827 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48548 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C2828 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48544 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C2829 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48534 -
            (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
                C2830 -
            (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
                C48512) *
               C31925 +
           ((C37684 + C37685) * C2827 + (C37686 + C37687) * C48548 -
            (C38154 + C38155) * C2828 - (C38156 + C38157) * C48544 +
            (C38556 + C38557) * C2829 + (C38558 + C38559) * C48534 -
            (C39030 + C39031) * C2830 - (C39032 + C39033) * C48512) *
               C48522) *
              C48141 * C2825 +
          (((C5289 + C5288) * C2828 -
            ((C5097 + C5096) * C48548 + (C5095 + C5094) * C2827) +
            (C5291 + C5290) * C48544 - (C5293 + C5292) * C2829 -
            (C5295 + C5294) * C48534 + (C6529 + C6528) * C2830 +
            (C6531 + C6530) * C48512) *
               C31925 +
           ((C5992 + C5993) * C2828 -
            ((C5485 + C5484) * C48548 + (C5483 + C5482) * C2827) +
            (C5994 + C5995) * C48544 - (C6734 + C6735) * C2829 -
            (C6736 + C6737) * C48534 +
            (C5059 * C1866 + C5055 * C1870 + C5060 * C6868 + C48520 * C6871) *
                C2830 +
            (C5059 * C1871 + C5055 * C1875 + C5060 * C6872 + C48520 * C6874) *
                C48512) *
               C48522) *
              C48141 * C48166) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C2697 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C2691 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C2698 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48247) *
               C31925 +
           ((C37684 + C37685) * C2697 + (C37686 + C37687) * C2691 -
            (C38154 + C38155) * C2698 - (C38156 + C38157) * C48247) *
               C48522) *
              C48141 * C48547 +
          (((C5289 + C5288) * C2698 -
            ((C5097 + C5096) * C2691 + (C5095 + C5094) * C2697) +
            (C5291 + C5290) * C48247) *
               C31925 +
           ((C5992 + C5993) * C2698 -
            ((C5485 + C5484) * C2691 + (C5483 + C5482) * C2697) +
            (C5994 + C5995) * C48247) *
               C48522) *
              C48141 * C48540 +
          (((C5101 + C5100) * C2697 + (C5099 + C5098) * C2691 -
            (C5297 + C5296) * C2698 - (C5299 + C5298) * C48247) *
               C31925 +
           ((C5486 + C5487) * C2697 + (C5488 + C5489) * C2691 -
            (C5996 + C5997) * C2698 - (C5998 + C5999) * C48247) *
               C48522) *
              C48141 * C48527 +
          (((C5637 + C5636) * C2698 -
            ((C5105 + C5104) * C2691 + (C5103 + C5102) * C2697) +
            (C5639 + C5638) * C48247) *
               C31925 +
           ((C5059 * C1016 + C5055 * C1024 + C5060 * C1739 + C48520 * C1740) *
                C2698 -
            ((C5778 + C5779) * C2691 + (C5780 + C5781) * C2697) +
            (C5059 * C1025 + C5055 * C1031 + C5060 * C1741 + C48520 * C1742) *
                C48247) *
               C48522) *
              C48141 * C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C2697 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C2691 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C2698 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48247) *
                C31925 +
            ((C37684 + C37685) * C2697 + (C37686 + C37687) * C2691 -
             (C38154 + C38155) * C2698 - (C38156 + C38157) * C48247) *
                C48522) *
               C48141 * C2825 +
           (((C5289 + C5288) * C2698 -
             ((C5097 + C5096) * C2691 + (C5095 + C5094) * C2697) +
             (C5291 + C5290) * C48247) *
                C31925 +
            ((C5992 + C5993) * C2698 -
             ((C5485 + C5484) * C2691 + (C5483 + C5482) * C2697) +
             (C5994 + C5995) * C48247) *
                C48522) *
               C48141 * C48166) *
              C48542 +
          ((((C38155 + C38154) * C2698 -
             ((C37687 + C37686) * C2691 + (C37685 + C37684) * C2697) +
             (C38157 + C38156) * C48247) *
                C31925 +
            ((C38560 + C38561) * C2698 -
             ((C37688 + C37689) * C2691 + (C37690 + C37691) * C2697) +
             (C38562 + C38563) * C48247) *
                C48522) *
               C48141 * C2825 +
           (((C5482 + C5483) * C2697 + (C5484 + C5485) * C2691 -
             (C5993 + C5992) * C2698 - (C5995 + C5994) * C48247) *
                C31925 +
            ((C5490 + C5491) * C2697 + (C5492 + C5493) * C2691 -
             (C7460 + C7461) * C2698 - (C7462 + C7463) * C48247) *
                C48522) *
               C48141 * C48166) *
              C48531 +
          ((((C37691 + C37690) * C2697 + (C37689 + C37688) * C2691 -
             (C38561 + C38560) * C2698 - (C38563 + C38562) * C48247) *
                C31925 +
            ((C39424 + C39425) * C2697 + (C39426 + C39427) * C2691 -
             (C39894 + C39895) * C2698 - (C39896 + C39897) * C48247) *
                C48522) *
               C48141 * C2825 +
           (((C7461 + C7460) * C2698 -
             ((C5493 + C5492) * C2691 + (C5491 + C5490) * C2697) +
             (C7463 + C7462) * C48247) *
                C31925 +
            ((C5059 * C2582 + C5055 * C2586 + C5060 * C7736 + C48520 * C7739) *
                 C2698 -
             ((C7605 + C7604) * C2691 + (C7603 + C7602) * C2697) +
             (C5059 * C2587 + C5055 * C2591 + C5060 * C7740 + C48520 * C7742) *
                 C48247) *
                C48522) *
               C48141 * C48166) *
              C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C2697 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C2691 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C2698 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48247) *
                C31925 +
            ((C37684 + C37685) * C2697 + (C37686 + C37687) * C2691 -
             (C38154 + C38155) * C2698 - (C38156 + C38157) * C48247) *
                C48522) *
               C48141 * C48161 +
           (((C5289 + C5288) * C2698 -
             ((C5097 + C5096) * C2691 + (C5095 + C5094) * C2697) +
             (C5291 + C5290) * C48247) *
                C31925 +
            ((C5992 + C5993) * C2698 -
             ((C5485 + C5484) * C2691 + (C5483 + C5482) * C2697) +
             (C5994 + C5995) * C48247) *
                C48522) *
               C48141 * C48169 +
           (((C5101 + C5100) * C2697 + (C5099 + C5098) * C2691 -
             (C5297 + C5296) * C2698 - (C5299 + C5298) * C48247) *
                C31925 +
            ((C5486 + C5487) * C2697 + (C5488 + C5489) * C2691 -
             (C5996 + C5997) * C2698 - (C5998 + C5999) * C48247) *
                C48522) *
               C48141 * C3124) *
              C48471 +
          ((((C38155 + C38154) * C2698 -
             ((C37687 + C37686) * C2691 + (C37685 + C37684) * C2697) +
             (C38157 + C38156) * C48247) *
                C31925 +
            ((C38560 + C38561) * C2698 -
             ((C37688 + C37689) * C2691 + (C37690 + C37691) * C2697) +
             (C38562 + C38563) * C48247) *
                C48522) *
               C48141 * C48161 +
           (((C5482 + C5483) * C2697 + (C5484 + C5485) * C2691 -
             (C5993 + C5992) * C2698 - (C5995 + C5994) * C48247) *
                C31925 +
            ((C5490 + C5491) * C2697 + (C5492 + C5493) * C2691 -
             (C7460 + C7461) * C2698 - (C7462 + C7463) * C48247) *
                C48522) *
               C48141 * C48169 +
           (((C5997 + C5996) * C2698 -
             ((C5489 + C5488) * C2691 + (C5487 + C5486) * C2697) +
             (C5999 + C5998) * C48247) *
                C31925 +
            ((C5059 * C1424 + C5055 * C1440 + C5060 * C1425 + C48520 * C1442) *
                 C2698 -
             ((C5494 + C5495) * C2691 + (C5496 + C5497) * C2697) +
             (C5059 * C1441 + C5055 * C1451 + C5060 * C1443 + C48520 * C1452) *
                 C48247) *
                C48522) *
               C48141 * C3124) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C2697 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C2691 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C2698 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48247) *
               C31925 +
           ((C37684 + C37685) * C2697 + (C37686 + C37687) * C2691 -
            (C38154 + C38155) * C2698 - (C38156 + C38157) * C48247) *
               C48522) *
              C48141 * C48547 +
          (((C5289 + C5288) * C2698 -
            ((C5097 + C5096) * C2691 + (C5095 + C5094) * C2697) +
            (C5291 + C5290) * C48247) *
               C31925 +
           ((C5992 + C5993) * C2698 -
            ((C5485 + C5484) * C2691 + (C5483 + C5482) * C2697) +
            (C5994 + C5995) * C48247) *
               C48522) *
              C48141 * C48540 +
          (((C5101 + C5100) * C2697 + (C5099 + C5098) * C2691 -
            (C5297 + C5296) * C2698 - (C5299 + C5298) * C48247) *
               C31925 +
           ((C5486 + C5487) * C2697 + (C5488 + C5489) * C2691 -
            (C5996 + C5997) * C2698 - (C5998 + C5999) * C48247) *
               C48522) *
              C48141 * C48527 +
          (((C5637 + C5636) * C2698 -
            ((C5105 + C5104) * C2691 + (C5103 + C5102) * C2697) +
            (C5639 + C5638) * C48247) *
               C31925 +
           ((C5059 * C1016 + C5055 * C1024 + C5060 * C1739 + C48520 * C1740) *
                C2698 -
            ((C5778 + C5779) * C2691 + (C5780 + C5781) * C2697) +
            (C5059 * C1025 + C5055 * C1031 + C5060 * C1741 + C48520 * C1742) *
                C48247) *
               C48522) *
              C48141 * C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C2827 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48548 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C2828 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48544 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C2829 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48534 -
            (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
                C2830 -
            (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
                C48512) *
               C31925 +
           ((C37684 + C37685) * C2827 + (C37686 + C37687) * C48548 -
            (C38154 + C38155) * C2828 - (C38156 + C38157) * C48544 +
            (C38556 + C38557) * C2829 + (C38558 + C38559) * C48534 -
            (C39030 + C39031) * C2830 - (C39032 + C39033) * C48512) *
               C48522) *
              C48141 * C2825 +
          (((C5289 + C5288) * C2828 -
            ((C5097 + C5096) * C48548 + (C5095 + C5094) * C2827) +
            (C5291 + C5290) * C48544 - (C5293 + C5292) * C2829 -
            (C5295 + C5294) * C48534 + (C6529 + C6528) * C2830 +
            (C6531 + C6530) * C48512) *
               C31925 +
           ((C5992 + C5993) * C2828 -
            ((C5485 + C5484) * C48548 + (C5483 + C5482) * C2827) +
            (C5994 + C5995) * C48544 - (C6734 + C6735) * C2829 -
            (C6736 + C6737) * C48534 +
            (C5059 * C1866 + C5055 * C1870 + C5060 * C6868 + C48520 * C6871) *
                C2830 +
            (C5059 * C1871 + C5055 * C1875 + C5060 * C6872 + C48520 * C6874) *
                C48512) *
               C48522) *
              C48141 * C48166) *
         C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C47163 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48243 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C47155 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48250 +
             (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                 C47169 +
             (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                 C3121) *
                C31925 +
            ((C37684 + C37685) * C47163 + (C37686 + C37687) * C48243 -
             (C38154 + C38155) * C47155 - (C38156 + C38157) * C48250 +
             (C38556 + C38557) * C47169 + (C38558 + C38559) * C3121) *
                C48522) *
               C48141 * C48456 +
           (((C5289 + C5288) * C47155 -
             ((C5097 + C5096) * C48243 + (C5095 + C5094) * C47163) +
             (C5291 + C5290) * C48250 - (C5293 + C5292) * C47169 -
             (C5295 + C5294) * C3121) *
                C31925 +
            ((C5992 + C5993) * C47155 -
             ((C5485 + C5484) * C48243 + (C5483 + C5482) * C47163) +
             (C5994 + C5995) * C48250 - (C6734 + C6735) * C47169 -
             (C6736 + C6737) * C3121) *
                C48522) *
               C48141 * C48166) *
              C3562 +
          ((((C38155 + C38154) * C47155 -
             ((C37687 + C37686) * C48243 + (C37685 + C37684) * C47163) +
             (C38157 + C38156) * C48250 - (C38557 + C38556) * C47169 -
             (C38559 + C38558) * C3121) *
                C31925 +
            ((C38560 + C38561) * C47155 -
             ((C37688 + C37689) * C48243 + (C37690 + C37691) * C47163) +
             (C38562 + C38563) * C48250 - (C38564 + C38565) * C47169 -
             (C38566 + C38567) * C3121) *
                C48522) *
               C48141 * C48456 +
           (((C5482 + C5483) * C47163 + (C5484 + C5485) * C48243 -
             (C5993 + C5992) * C47155 - (C5995 + C5994) * C48250 +
             (C6735 + C6734) * C47169 + (C6737 + C6736) * C3121) *
                C31925 +
            ((C5490 + C5491) * C47163 + (C5492 + C5493) * C48243 -
             (C7460 + C7461) * C47155 - (C7462 + C7463) * C48250 +
             (C5059 * C1423 + C5055 * C1438 + C5060 * C6382 + C48520 * C6385) *
                 C47169 +
             (C5059 * C1439 + C5055 * C1450 + C5060 * C6386 + C48520 * C6388) *
                 C3121) *
                C48522) *
               C48141 * C48166) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C47163 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48243 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C47155 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48250 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C47169 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C3121) *
               C31925 +
           ((C37684 + C37685) * C47163 + (C37686 + C37687) * C48243 -
            (C38154 + C38155) * C47155 - (C38156 + C38157) * C48250 +
            (C38556 + C38557) * C47169 + (C38558 + C38559) * C3121) *
               C48522) *
              C48141 * C48156 * C48285 +
          (((C38155 + C38154) * C47155 -
            ((C37687 + C37686) * C48243 + (C37685 + C37684) * C47163) +
            (C38157 + C38156) * C48250 - (C38557 + C38556) * C47169 -
            (C38559 + C38558) * C3121) *
               C31925 +
           ((C38560 + C38561) * C47155 -
            ((C37688 + C37689) * C48243 + (C37690 + C37691) * C47163) +
            (C38562 + C38563) * C48250 - (C38564 + C38565) * C47169 -
            (C38566 + C38567) * C3121) *
               C48522) *
              C48141 * C48156 * C48292 +
          (((C37691 + C37690) * C47163 + (C37689 + C37688) * C48243 -
            (C38561 + C38560) * C47155 - (C38563 + C38562) * C48250 +
            (C38565 + C38564) * C47169 + (C38567 + C38566) * C3121) *
               C31925 +
           ((C39424 + C39425) * C47163 + (C39426 + C39427) * C48243 -
            (C39894 + C39895) * C47155 - (C39896 + C39897) * C48250 +
            (C5059 * C7735 + C5055 * C7737 + C5060 * C24035 + C48520 * C24036) *
                C47169 +
            (C5059 * C7738 + C5055 * C7741 + C5060 * C24037 + C48520 * C24038) *
                C3121) *
               C48522) *
              C48141 * C48156 * C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C2827 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48548 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C2828 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48544 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C2829 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48534 -
            (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
                C2830 -
            (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
                C48512) *
               C31925 +
           ((C37684 + C37685) * C2827 + (C37686 + C37687) * C48548 -
            (C38154 + C38155) * C2828 - (C38156 + C38157) * C48544 +
            (C38556 + C38557) * C2829 + (C38558 + C38559) * C48534 -
            (C39030 + C39031) * C2830 - (C39032 + C39033) * C48512) *
               C48522) *
              C48141 * C48156 * C3562 +
          (((C38155 + C38154) * C2828 -
            ((C37687 + C37686) * C48548 + (C37685 + C37684) * C2827) +
            (C38157 + C38156) * C48544 - (C38557 + C38556) * C2829 -
            (C38559 + C38558) * C48534 + (C39031 + C39030) * C2830 +
            (C39033 + C39032) * C48512) *
               C31925 +
           ((C38560 + C38561) * C2828 -
            ((C37688 + C37689) * C48548 + (C37690 + C37691) * C2827) +
            (C38562 + C38563) * C48544 - (C38564 + C38565) * C2829 -
            (C38566 + C38567) * C48534 +
            (C5059 * C6381 + C5055 * C6383 + C5060 * C23057 + C48520 * C23058) *
                C2830 +
            (C5059 * C6384 + C5055 * C6387 + C5060 * C23059 + C48520 * C23060) *
                C48512) *
               C48522) *
              C48141 * C48156 * C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C2697 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C2691 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C2698 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48247) *
                C31925 +
            ((C37684 + C37685) * C2697 + (C37686 + C37687) * C2691 -
             (C38154 + C38155) * C2698 - (C38156 + C38157) * C48247) *
                C48522) *
               C48141 * C48538 +
           (((C5289 + C5288) * C2698 -
             ((C5097 + C5096) * C2691 + (C5095 + C5094) * C2697) +
             (C5291 + C5290) * C48247) *
                C31925 +
            ((C5992 + C5993) * C2698 -
             ((C5485 + C5484) * C2691 + (C5483 + C5482) * C2697) +
             (C5994 + C5995) * C48247) *
                C48522) *
               C48141 * C48525 +
           (((C5101 + C5100) * C2697 + (C5099 + C5098) * C2691 -
             (C5297 + C5296) * C2698 - (C5299 + C5298) * C48247) *
                C31925 +
            ((C5486 + C5487) * C2697 + (C5488 + C5489) * C2691 -
             (C5996 + C5997) * C2698 - (C5998 + C5999) * C48247) *
                C48522) *
               C48141 * C48496) *
              C3562 +
          ((((C38155 + C38154) * C2698 -
             ((C37687 + C37686) * C2691 + (C37685 + C37684) * C2697) +
             (C38157 + C38156) * C48247) *
                C31925 +
            ((C38560 + C38561) * C2698 -
             ((C37688 + C37689) * C2691 + (C37690 + C37691) * C2697) +
             (C38562 + C38563) * C48247) *
                C48522) *
               C48141 * C48538 +
           (((C5482 + C5483) * C2697 + (C5484 + C5485) * C2691 -
             (C5993 + C5992) * C2698 - (C5995 + C5994) * C48247) *
                C31925 +
            ((C5490 + C5491) * C2697 + (C5492 + C5493) * C2691 -
             (C7460 + C7461) * C2698 - (C7462 + C7463) * C48247) *
                C48522) *
               C48141 * C48525 +
           (((C5997 + C5996) * C2698 -
             ((C5489 + C5488) * C2691 + (C5487 + C5486) * C2697) +
             (C5999 + C5998) * C48247) *
                C31925 +
            ((C5059 * C1424 + C5055 * C1440 + C5060 * C1425 + C48520 * C1442) *
                 C2698 -
             ((C5494 + C5495) * C2691 + (C5496 + C5497) * C2697) +
             (C5059 * C1441 + C5055 * C1451 + C5060 * C1443 + C48520 * C1452) *
                 C48247) *
                C48522) *
               C48141 * C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C2697 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C2691 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C2698 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48247) *
               C31925 +
           ((C37684 + C37685) * C2697 + (C37686 + C37687) * C2691 -
            (C38154 + C38155) * C2698 - (C38156 + C38157) * C48247) *
               C48522) *
              C48141 * C48156 * C48549 +
          (((C38155 + C38154) * C2698 -
            ((C37687 + C37686) * C2691 + (C37685 + C37684) * C2697) +
            (C38157 + C38156) * C48247) *
               C31925 +
           ((C38560 + C38561) * C2698 -
            ((C37688 + C37689) * C2691 + (C37690 + C37691) * C2697) +
            (C38562 + C38563) * C48247) *
               C48522) *
              C48141 * C48156 * C48546 +
          (((C37691 + C37690) * C2697 + (C37689 + C37688) * C2691 -
            (C38561 + C38560) * C2698 - (C38563 + C38562) * C48247) *
               C31925 +
           ((C39424 + C39425) * C2697 + (C39426 + C39427) * C2691 -
            (C39894 + C39895) * C2698 - (C39896 + C39897) * C48247) *
               C48522) *
              C48141 * C48156 * C48537 +
          (((C39895 + C39894) * C2698 -
            ((C39427 + C39426) * C2691 + (C39425 + C39424) * C2697) +
            (C39897 + C39896) * C48247) *
               C31925 +
           ((C5059 * C7249 + C5055 * C7251 + C5060 * C23689 + C48520 * C23690) *
                C2698 -
            ((C39428 + C39429) * C2691 + (C39430 + C39431) * C2697) +
            (C5059 * C7252 + C5055 * C7255 + C5060 * C23691 + C48520 * C23692) *
                C48247) *
               C48522) *
              C48141 * C48156 * C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C2697 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C2691 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C2698 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48247) *
                C31925 +
            ((C37684 + C37685) * C2697 + (C37686 + C37687) * C2691 -
             (C38154 + C38155) * C2698 - (C38156 + C38157) * C48247) *
                C48522) *
               C48141 * C48456 +
           (((C5289 + C5288) * C2698 -
             ((C5097 + C5096) * C2691 + (C5095 + C5094) * C2697) +
             (C5291 + C5290) * C48247) *
                C31925 +
            ((C5992 + C5993) * C2698 -
             ((C5485 + C5484) * C2691 + (C5483 + C5482) * C2697) +
             (C5994 + C5995) * C48247) *
                C48522) *
               C48141 * C48166) *
              C48285 +
          ((((C38155 + C38154) * C2698 -
             ((C37687 + C37686) * C2691 + (C37685 + C37684) * C2697) +
             (C38157 + C38156) * C48247) *
                C31925 +
            ((C38560 + C38561) * C2698 -
             ((C37688 + C37689) * C2691 + (C37690 + C37691) * C2697) +
             (C38562 + C38563) * C48247) *
                C48522) *
               C48141 * C48456 +
           (((C5482 + C5483) * C2697 + (C5484 + C5485) * C2691 -
             (C5993 + C5992) * C2698 - (C5995 + C5994) * C48247) *
                C31925 +
            ((C5490 + C5491) * C2697 + (C5492 + C5493) * C2691 -
             (C7460 + C7461) * C2698 - (C7462 + C7463) * C48247) *
                C48522) *
               C48141 * C48166) *
              C48292 +
          ((((C37691 + C37690) * C2697 + (C37689 + C37688) * C2691 -
             (C38561 + C38560) * C2698 - (C38563 + C38562) * C48247) *
                C31925 +
            ((C39424 + C39425) * C2697 + (C39426 + C39427) * C2691 -
             (C39894 + C39895) * C2698 - (C39896 + C39897) * C48247) *
                C48522) *
               C48141 * C48456 +
           (((C7461 + C7460) * C2698 -
             ((C5493 + C5492) * C2691 + (C5491 + C5490) * C2697) +
             (C7463 + C7462) * C48247) *
                C31925 +
            ((C5059 * C2582 + C5055 * C2586 + C5060 * C7736 + C48520 * C7739) *
                 C2698 -
             ((C7605 + C7604) * C2691 + (C7603 + C7602) * C2697) +
             (C5059 * C2587 + C5055 * C2591 + C5060 * C7740 + C48520 * C7742) *
                 C48247) *
                C48522) *
               C48141 * C48166) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C2697 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C2691 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C2698 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48247) *
                C31925 +
            ((C37684 + C37685) * C2697 + (C37686 + C37687) * C2691 -
             (C38154 + C38155) * C2698 - (C38156 + C38157) * C48247) *
                C48522) *
               C48141 * C48538 +
           (((C5289 + C5288) * C2698 -
             ((C5097 + C5096) * C2691 + (C5095 + C5094) * C2697) +
             (C5291 + C5290) * C48247) *
                C31925 +
            ((C5992 + C5993) * C2698 -
             ((C5485 + C5484) * C2691 + (C5483 + C5482) * C2697) +
             (C5994 + C5995) * C48247) *
                C48522) *
               C48141 * C48525 +
           (((C5101 + C5100) * C2697 + (C5099 + C5098) * C2691 -
             (C5297 + C5296) * C2698 - (C5299 + C5298) * C48247) *
                C31925 +
            ((C5486 + C5487) * C2697 + (C5488 + C5489) * C2691 -
             (C5996 + C5997) * C2698 - (C5998 + C5999) * C48247) *
                C48522) *
               C48141 * C48496) *
              C3562 +
          ((((C38155 + C38154) * C2698 -
             ((C37687 + C37686) * C2691 + (C37685 + C37684) * C2697) +
             (C38157 + C38156) * C48247) *
                C31925 +
            ((C38560 + C38561) * C2698 -
             ((C37688 + C37689) * C2691 + (C37690 + C37691) * C2697) +
             (C38562 + C38563) * C48247) *
                C48522) *
               C48141 * C48538 +
           (((C5482 + C5483) * C2697 + (C5484 + C5485) * C2691 -
             (C5993 + C5992) * C2698 - (C5995 + C5994) * C48247) *
                C31925 +
            ((C5490 + C5491) * C2697 + (C5492 + C5493) * C2691 -
             (C7460 + C7461) * C2698 - (C7462 + C7463) * C48247) *
                C48522) *
               C48141 * C48525 +
           (((C5997 + C5996) * C2698 -
             ((C5489 + C5488) * C2691 + (C5487 + C5486) * C2697) +
             (C5999 + C5998) * C48247) *
                C31925 +
            ((C5059 * C1424 + C5055 * C1440 + C5060 * C1425 + C48520 * C1442) *
                 C2698 -
             ((C5494 + C5495) * C2691 + (C5496 + C5497) * C2697) +
             (C5059 * C1441 + C5055 * C1451 + C5060 * C1443 + C48520 * C1452) *
                 C48247) *
                C48522) *
               C48141 * C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C2827 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48548 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C2828 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48544 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C2829 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48534 -
            (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
                C2830 -
            (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
                C48512) *
               C31925 +
           ((C37684 + C37685) * C2827 + (C37686 + C37687) * C48548 -
            (C38154 + C38155) * C2828 - (C38156 + C38157) * C48544 +
            (C38556 + C38557) * C2829 + (C38558 + C38559) * C48534 -
            (C39030 + C39031) * C2830 - (C39032 + C39033) * C48512) *
               C48522) *
              C48141 * C48156 * C3562 +
          (((C38155 + C38154) * C2828 -
            ((C37687 + C37686) * C48548 + (C37685 + C37684) * C2827) +
            (C38157 + C38156) * C48544 - (C38557 + C38556) * C2829 -
            (C38559 + C38558) * C48534 + (C39031 + C39030) * C2830 +
            (C39033 + C39032) * C48512) *
               C31925 +
           ((C38560 + C38561) * C2828 -
            ((C37688 + C37689) * C48548 + (C37690 + C37691) * C2827) +
            (C38562 + C38563) * C48544 - (C38564 + C38565) * C2829 -
            (C38566 + C38567) * C48534 +
            (C5059 * C6381 + C5055 * C6383 + C5060 * C23057 + C48520 * C23058) *
                C2830 +
            (C5059 * C6384 + C5055 * C6387 + C5060 * C23059 + C48520 * C23060) *
                C48512) *
               C48522) *
              C48141 * C48156 * C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C1557 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C1551 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C1558 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C1552 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C1559 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C1553 -
            (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
                C1560 -
            (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
                C48512) *
               C31925 +
           ((C37684 + C37685) * C1557 + (C37686 + C37687) * C1551 -
            (C38154 + C38155) * C1558 - (C38156 + C38157) * C1552 +
            (C38556 + C38557) * C1559 + (C38558 + C38559) * C1553 -
            (C5060 * C6867 + C48520 * C6869 + C5059 * C1865 + C5055 * C1868) *
                C1560 -
            (C5060 * C6870 + C48520 * C6873 + C5059 * C1869 + C5055 * C1874) *
                C48512) *
               C48522) *
              C48141 * C48456 +
          (((C5289 + C5288) * C1558 -
            ((C5097 + C5096) * C1551 + (C5095 + C5094) * C1557) +
            (C5291 + C5290) * C1552 - (C5293 + C5292) * C1559 -
            (C5295 + C5294) * C1553 + (C6529 + C6528) * C1560 +
            (C6531 + C6530) * C48512) *
               C31925 +
           ((C5992 + C5993) * C1558 -
            ((C5485 + C5484) * C1551 + (C5483 + C5482) * C1557) +
            (C5994 + C5995) * C1552 - (C6734 + C6735) * C1559 -
            (C6736 + C6737) * C1553 +
            (C5059 * C1866 + C5055 * C1870 + C5060 * C6868 + C48520 * C6871) *
                C1560 +
            (C5059 * C1871 + C5055 * C1875 + C5060 * C6872 + C48520 * C6874) *
                C48512) *
               C48522) *
              C48141 * C48166) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C717 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48470 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C718 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48247) *
               C31925 +
           ((C37684 + C37685) * C717 + (C37686 + C37687) * C48470 -
            (C5060 * C1417 + C48520 * C1426 + C5059 * C1013 + C5055 * C1018) *
                C718 -
            (C5060 * C1427 + C48520 * C1444 + C5059 * C1019 + C5055 * C1028) *
                C48247) *
               C48522) *
              C48141 * C713 +
          (((C5289 + C5288) * C718 -
            ((C5097 + C5096) * C48470 + (C5095 + C5094) * C717) +
            (C5291 + C5290) * C48247) *
               C31925 +
           ((C5992 + C5993) * C718 -
            ((C5485 + C5484) * C48470 + (C5483 + C5482) * C717) +
            (C5994 + C5995) * C48247) *
               C48522) *
              C48141 * C714 +
          (((C5101 + C5100) * C717 + (C5099 + C5098) * C48470 -
            (C5297 + C5296) * C718 - (C5299 + C5298) * C48247) *
               C31925 +
           ((C5486 + C5487) * C717 + (C5488 + C5489) * C48470 -
            (C5996 + C5997) * C718 - (C5998 + C5999) * C48247) *
               C48522) *
              C48141 * C715 +
          (((C5637 + C5636) * C718 -
            ((C5105 + C5104) * C48470 + (C5103 + C5102) * C717) +
            (C5639 + C5638) * C48247) *
               C31925 +
           ((C5059 * C1016 + C5055 * C1024 + C5060 * C1739 + C48520 * C1740) *
                C718 -
            ((C5778 + C5779) * C48470 + (C5780 + C5781) * C717) +
            (C5059 * C1025 + C5055 * C1031 + C5060 * C1741 + C48520 * C1742) *
                C48247) *
               C48522) *
              C48141 * C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C717 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48470 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C718 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48247) *
                C31925 +
            ((C37684 + C37685) * C717 + (C37686 + C37687) * C48470 -
             (C38154 + C38155) * C718 - (C38156 + C38157) * C48247) *
                C48522) *
               C48141 * C48456 +
           (((C5289 + C5288) * C718 -
             ((C5097 + C5096) * C48470 + (C5095 + C5094) * C717) +
             (C5291 + C5290) * C48247) *
                C31925 +
            ((C5992 + C5993) * C718 -
             ((C5485 + C5484) * C48470 + (C5483 + C5482) * C717) +
             (C5994 + C5995) * C48247) *
                C48522) *
               C48141 * C48166) *
              C1987 +
          ((((C38155 + C38154) * C718 -
             ((C37687 + C37686) * C48470 + (C37685 + C37684) * C717) +
             (C38157 + C38156) * C48247) *
                C31925 +
            ((C38560 + C38561) * C718 -
             ((C37688 + C37689) * C48470 + (C37690 + C37691) * C717) +
             (C38562 + C38563) * C48247) *
                C48522) *
               C48141 * C48456 +
           (((C5482 + C5483) * C717 + (C5484 + C5485) * C48470 -
             (C5993 + C5992) * C718 - (C5995 + C5994) * C48247) *
                C31925 +
            ((C5490 + C5491) * C717 + (C5492 + C5493) * C48470 -
             (C7460 + C7461) * C718 - (C7462 + C7463) * C48247) *
                C48522) *
               C48141 * C48166) *
              C1988 +
          ((((C37691 + C37690) * C717 + (C37689 + C37688) * C48470 -
             (C38561 + C38560) * C718 - (C38563 + C38562) * C48247) *
                C31925 +
            ((C39424 + C39425) * C717 + (C39426 + C39427) * C48470 -
             (C5060 * C7735 + C48520 * C7737 + C5059 * C2581 + C5055 * C2584) *
                 C718 -
             (C5060 * C7738 + C48520 * C7741 + C5059 * C2585 + C5055 * C2590) *
                 C48247) *
                C48522) *
               C48141 * C48456 +
           (((C7461 + C7460) * C718 -
             ((C5493 + C5492) * C48470 + (C5491 + C5490) * C717) +
             (C7463 + C7462) * C48247) *
                C31925 +
            ((C5059 * C2582 + C5055 * C2586 + C5060 * C7736 + C48520 * C7739) *
                 C718 -
             ((C7605 + C7604) * C48470 + (C7603 + C7602) * C717) +
             (C5059 * C2587 + C5055 * C2591 + C5060 * C7740 + C48520 * C7742) *
                 C48247) *
                C48522) *
               C48141 * C48166) *
              C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C1557 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C1551 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C1558 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C1552 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C1559 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C1553 -
            (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
                C1560 -
            (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
                C48512) *
               C31925 +
           ((C37684 + C37685) * C1557 + (C37686 + C37687) * C1551 -
            (C38154 + C38155) * C1558 - (C38156 + C38157) * C1552 +
            (C38556 + C38557) * C1559 + (C38558 + C38559) * C1553 -
            (C39030 + C39031) * C1560 - (C39032 + C39033) * C48512) *
               C48522) *
              C48141 * C48156 * C48471 +
          (((C38155 + C38154) * C1558 -
            ((C37687 + C37686) * C1551 + (C37685 + C37684) * C1557) +
            (C38157 + C38156) * C1552 - (C38557 + C38556) * C1559 -
            (C38559 + C38558) * C1553 + (C39031 + C39030) * C1560 +
            (C39033 + C39032) * C48512) *
               C31925 +
           ((C38560 + C38561) * C1558 -
            ((C37688 + C37689) * C1551 + (C37690 + C37691) * C1557) +
            (C38562 + C38563) * C1552 - (C38564 + C38565) * C1559 -
            (C38566 + C38567) * C1553 +
            (C5059 * C6381 + C5055 * C6383 + C5060 * C23057 + C48520 * C23058) *
                C1560 +
            (C5059 * C6384 + C5055 * C6387 + C5060 * C23059 + C48520 * C23060) *
                C48512) *
               C48522) *
              C48141 * C48156 * C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C717 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48470 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C718 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48247) *
                C31925 +
            ((C37684 + C37685) * C717 + (C37686 + C37687) * C48470 -
             (C38154 + C38155) * C718 - (C38156 + C38157) * C48247) *
                C48522) *
               C48141 * C302 +
           (((C5289 + C5288) * C718 -
             ((C5097 + C5096) * C48470 + (C5095 + C5094) * C717) +
             (C5291 + C5290) * C48247) *
                C31925 +
            ((C5992 + C5993) * C718 -
             ((C5485 + C5484) * C48470 + (C5483 + C5482) * C717) +
             (C5994 + C5995) * C48247) *
                C48522) *
               C48141 * C303 +
           (((C5101 + C5100) * C717 + (C5099 + C5098) * C48470 -
             (C5297 + C5296) * C718 - (C5299 + C5298) * C48247) *
                C31925 +
            ((C5486 + C5487) * C717 + (C5488 + C5489) * C48470 -
             (C5996 + C5997) * C718 - (C5998 + C5999) * C48247) *
                C48522) *
               C48141 * C48496) *
              C48471 +
          ((((C38155 + C38154) * C718 -
             ((C37687 + C37686) * C48470 + (C37685 + C37684) * C717) +
             (C38157 + C38156) * C48247) *
                C31925 +
            ((C5059 * C1420 + C5055 * C1432 + C5060 * C1421 + C48520 * C1434) *
                 C718 -
             ((C37688 + C37689) * C48470 + (C37690 + C37691) * C717) +
             (C5059 * C1433 + C5055 * C1447 + C5060 * C1435 + C48520 * C1448) *
                 C48247) *
                C48522) *
               C48141 * C302 +
           (((C5482 + C5483) * C717 + (C5484 + C5485) * C48470 -
             (C5993 + C5992) * C718 - (C5995 + C5994) * C48247) *
                C31925 +
            ((C5490 + C5491) * C717 + (C5492 + C5493) * C48470 -
             (C7460 + C7461) * C718 - (C7462 + C7463) * C48247) *
                C48522) *
               C48141 * C303 +
           (((C5997 + C5996) * C718 -
             ((C5489 + C5488) * C48470 + (C5487 + C5486) * C717) +
             (C5999 + C5998) * C48247) *
                C31925 +
            ((C5059 * C1424 + C5055 * C1440 + C5060 * C1425 + C48520 * C1442) *
                 C718 -
             ((C5494 + C5495) * C48470 + (C5496 + C5497) * C717) +
             (C5059 * C1441 + C5055 * C1451 + C5060 * C1443 + C48520 * C1452) *
                 C48247) *
                C48522) *
               C48141 * C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C717 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48470 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C718 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48247) *
               C31925 +
           ((C37684 + C37685) * C717 + (C37686 + C37687) * C48470 -
            (C38154 + C38155) * C718 - (C38156 + C38157) * C48247) *
               C48522) *
              C48141 * C48156 * C2459 +
          (((C38155 + C38154) * C718 -
            ((C37687 + C37686) * C48470 + (C37685 + C37684) * C717) +
            (C38157 + C38156) * C48247) *
               C31925 +
           ((C38560 + C38561) * C718 -
            ((C37688 + C37689) * C48470 + (C37690 + C37691) * C717) +
            (C38562 + C38563) * C48247) *
               C48522) *
              C48141 * C48156 * C2460 +
          (((C37691 + C37690) * C717 + (C37689 + C37688) * C48470 -
            (C38561 + C38560) * C718 - (C38563 + C38562) * C48247) *
               C31925 +
           ((C39424 + C39425) * C717 + (C39426 + C39427) * C48470 -
            (C39894 + C39895) * C718 - (C39896 + C39897) * C48247) *
               C48522) *
              C48141 * C48156 * C2461 +
          (((C39895 + C39894) * C718 -
            ((C39427 + C39426) * C48470 + (C39425 + C39424) * C717) +
            (C39897 + C39896) * C48247) *
               C31925 +
           ((C5059 * C7249 + C5055 * C7251 + C5060 * C23689 + C48520 * C23690) *
                C718 -
            ((C39428 + C39429) * C48470 + (C39430 + C39431) * C717) +
            (C5059 * C7252 + C5055 * C7255 + C5060 * C23691 + C48520 * C23692) *
                C48247) *
               C48522) *
              C48141 * C48156 * C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                    C114 +
                (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                    C48184) *
                   C31925 +
               ((C5059 * C524 + C5055 * C538 + C5060 * C1013 + C48520 * C1018) *
                    C114 +
                (C5059 * C537 + C5055 * C554 + C5060 * C1019 + C48520 * C1028) *
                    C48184) *
                   C48522) *
                  C48141 * C107 -
              (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48522 +
               ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C31925) *
                  C48141 * C108 +
              (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C31925 +
               ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48522) *
                  C48141 * C109 -
              (((C5778 + C5779) * C48184 + (C5780 + C5781) * C114) * C48522 +
               ((C5105 + C5104) * C48184 + (C5103 + C5102) * C114) * C31925) *
                  C48141 * C110 +
              (((C5109 + C5108) * C114 + (C5107 + C5106) * C48184) * C31925 +
               ((C5059 * C525 + C5055 * C540 + C5060 * C1017 + C48520 * C1026) *
                    C114 +
                (C5059 * C539 + C5055 * C555 + C5060 * C1027 + C48520 * C1032) *
                    C48184) *
                   C48522) *
                  C48141 * C111) *
             C48202 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                    C305 +
                (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                    C48541 -
                (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                    C306 -
                (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                    C48529 +
                (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                    C307 +
                (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                    C48502) *
                   C31925 +
               ((C5059 * C524 + C5055 * C538 + C5060 * C1013 + C48520 * C1018) *
                    C305 +
                (C5059 * C537 + C5055 * C554 + C5060 * C1019 + C48520 * C1028) *
                    C48541 -
                (C5060 * C1417 + C48520 * C1426 + C5059 * C1013 +
                 C5055 * C1018) *
                    C306 -
                (C5060 * C1427 + C48520 * C1444 + C5059 * C1019 +
                 C5055 * C1028) *
                    C48529 +
                (C5059 * C1417 + C5055 * C1426 + C5060 * C1865 +
                 C48520 * C1868) *
                    C307 +
                (C5059 * C1427 + C5055 * C1444 + C5060 * C1869 +
                 C48520 * C1874) *
                    C48502) *
                   C48522) *
                  C48141 * C302 +
              (((C5289 + C5288) * C306 -
                ((C5097 + C5096) * C48541 + (C5095 + C5094) * C305) +
                (C5291 + C5290) * C48529 - (C5293 + C5292) * C307 -
                (C5295 + C5294) * C48502) *
                   C31925 +
               ((C5992 + C5993) * C306 -
                ((C5485 + C5484) * C48541 + (C5483 + C5482) * C305) +
                (C5994 + C5995) * C48529 - (C6734 + C6735) * C307 -
                (C6736 + C6737) * C48502) *
                   C48522) *
                  C48141 * C303 +
              (((C5101 + C5100) * C305 + (C5099 + C5098) * C48541 -
                (C5297 + C5296) * C306 - (C5299 + C5298) * C48529 +
                (C5301 + C5300) * C307 + (C5303 + C5302) * C48502) *
                   C31925 +
               ((C5486 + C5487) * C305 + (C5488 + C5489) * C48541 -
                (C5996 + C5997) * C306 - (C5998 + C5999) * C48529 +
                (C5059 * C1419 + C5055 * C1430 + C5060 * C1867 +
                 C48520 * C1872) *
                    C307 +
                (C5059 * C1431 + C5055 * C1446 + C5060 * C1873 +
                 C48520 * C1876) *
                    C48502) *
                   C48522) *
                  C48141 * C48496) *
             C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C31925 +
            ((C37684 + C37685) * C114 + (C37686 + C37687) * C48184) * C48522) *
               C48141 * C302 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48522 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C31925) *
               C48141 * C303 +
           (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C31925 +
            ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48522) *
               C48141 * C48496) *
              C48542 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C31925 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48184) * C48522) *
               C48141 * C303 -
           (((C37688 + C37689) * C48184 + (C37690 + C37691) * C114) * C48522 +
            ((C37687 + C37686) * C48184 + (C37685 + C37684) * C114) * C31925) *
               C48141 * C302 -
           (((C5494 + C5495) * C48184 + (C5496 + C5497) * C114) * C48522 +
            ((C5489 + C5488) * C48184 + (C5487 + C5486) * C114) * C31925) *
               C48141 * C48496) *
              C48531 +
          ((((C37691 + C37690) * C114 + (C37689 + C37688) * C48184) * C31925 +
            ((C5059 * C2169 + C5055 * C2178 + C5060 * C2581 + C48520 * C2584) *
                 C114 +
             (C5059 * C2177 + C5055 * C2187 + C5060 * C2585 + C48520 * C2590) *
                 C48184) *
                C48522) *
               C48141 * C302 -
           (((C7605 + C7604) * C48184 + (C7603 + C7602) * C114) * C48522 +
            ((C5493 + C5492) * C48184 + (C5491 + C5490) * C114) * C31925) *
               C48141 * C303 +
           (((C5497 + C5496) * C114 + (C5495 + C5494) * C48184) * C31925 +
            ((C5059 * C2167 + C5055 * C2174 + C5060 * C2583 + C48520 * C2588) *
                 C114 +
             (C5059 * C2173 + C5055 * C2185 + C5060 * C2589 + C48520 * C2592) *
                 C48184) *
                C48522) *
               C48141 * C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C1183 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C1177 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C1184 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C1178 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C1185 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C31925 +
           ((C37684 + C37685) * C1183 + (C37686 + C37687) * C1177 -
            (C38154 + C38155) * C1184 - (C38156 + C38157) * C1178 +
            (C5059 * C1417 + C5055 * C1426 + C5060 * C1865 + C48520 * C1868) *
                C1185 +
            (C5059 * C1427 + C5055 * C1444 + C5060 * C1869 + C48520 * C1874) *
                C48502) *
               C48522) *
              C48141 * C48538 +
          (((C5289 + C5288) * C1184 -
            ((C5097 + C5096) * C1177 + (C5095 + C5094) * C1183) +
            (C5291 + C5290) * C1178 - (C5293 + C5292) * C1185 -
            (C5295 + C5294) * C48502) *
               C31925 +
           ((C5992 + C5993) * C1184 -
            ((C5485 + C5484) * C1177 + (C5483 + C5482) * C1183) +
            (C5994 + C5995) * C1178 - (C6734 + C6735) * C1185 -
            (C6736 + C6737) * C48502) *
               C48522) *
              C48141 * C48525 +
          (((C5101 + C5100) * C1183 + (C5099 + C5098) * C1177 -
            (C5297 + C5296) * C1184 - (C5299 + C5298) * C1178 +
            (C5301 + C5300) * C1185 + (C5303 + C5302) * C48502) *
               C31925 +
           ((C5486 + C5487) * C1183 + (C5488 + C5489) * C1177 -
            (C5996 + C5997) * C1184 - (C5998 + C5999) * C1178 +
            (C5059 * C1419 + C5055 * C1430 + C5060 * C1867 + C48520 * C1872) *
                C1185 +
            (C5059 * C1431 + C5055 * C1446 + C5060 * C1873 + C48520 * C1876) *
                C48502) *
               C48522) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
               C1278 +
           (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
               C1272 -
           (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
               C1279 -
           (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
               C1273 +
           (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
               C1280 +
           (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
               C1274 -
           (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
               C1281 -
           (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
               C1275 +
           (C5059 * C1284 + C5055 * C1291 + C5060 * C6227 + C48520 * C6229) *
               C1282 +
           (C5059 * C1292 + C5055 * C1302 + C5060 * C6230 + C48520 * C6233) *
               C1276) *
              C31925 +
          ((C37684 + C37685) * C1278 + (C37686 + C37687) * C1272 -
           (C38154 + C38155) * C1279 - (C38156 + C38157) * C1273 +
           (C5059 * C1417 + C5055 * C1426 + C5060 * C1865 + C48520 * C1868) *
               C1280 +
           (C5059 * C1427 + C5055 * C1444 + C5060 * C1869 + C48520 * C1874) *
               C1274 -
           (C5060 * C6867 + C48520 * C6869 + C5059 * C1865 + C5055 * C1868) *
               C1281 -
           (C5060 * C6870 + C48520 * C6873 + C5059 * C1869 + C5055 * C1874) *
               C1275 +
           (C5059 * C6867 + C5055 * C6869 + C5060 * C23403 + C48520 * C23404) *
               C1282 +
           (C5059 * C6870 + C5055 * C6873 + C5060 * C23405 + C48520 * C23406) *
               C1276) *
              C48522) *
         C48141 * C48156 * C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C1183 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C1177 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C1184 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C1178 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C1185 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C31925 +
           ((C37684 + C37685) * C1183 + (C37686 + C37687) * C1177 -
            (C38154 + C38155) * C1184 - (C38156 + C38157) * C1178 +
            (C38556 + C38557) * C1185 + (C38558 + C38559) * C48502) *
               C48522) *
              C48141 * C48156 * C48542 +
          (((C38155 + C38154) * C1184 -
            ((C37687 + C37686) * C1177 + (C37685 + C37684) * C1183) +
            (C38157 + C38156) * C1178 - (C38557 + C38556) * C1185 -
            (C38559 + C38558) * C48502) *
               C31925 +
           ((C38560 + C38561) * C1184 -
            ((C37688 + C37689) * C1177 + (C37690 + C37691) * C1183) +
            (C38562 + C38563) * C1178 - (C38564 + C38565) * C1185 -
            (C38566 + C38567) * C48502) *
               C48522) *
              C48141 * C48156 * C48531 +
          (((C37691 + C37690) * C1183 + (C37689 + C37688) * C1177 -
            (C38561 + C38560) * C1184 - (C38563 + C38562) * C1178 +
            (C38565 + C38564) * C1185 + (C38567 + C38566) * C48502) *
               C31925 +
           ((C5059 * C2169 + C5055 * C2178 + C5060 * C2581 + C48520 * C2584) *
                C1183 +
            (C5059 * C2177 + C5055 * C2187 + C5060 * C2585 + C48520 * C2590) *
                C1177 -
            (C5060 * C7735 + C48520 * C7737 + C5059 * C2581 + C5055 * C2584) *
                C1184 -
            (C5060 * C7738 + C48520 * C7741 + C5059 * C2585 + C5055 * C2590) *
                C1178 +
            (C5059 * C7735 + C5055 * C7737 + C5060 * C24035 + C48520 * C24036) *
                C1185 +
            (C5059 * C7738 + C5055 * C7741 + C5060 * C24037 + C48520 * C24038) *
                C48502) *
               C48522) *
              C48141 * C48156 * C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C31925 +
            ((C37684 + C37685) * C114 + (C37686 + C37687) * C48184) * C48522) *
               C48141 * C48538 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48522 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C31925) *
               C48141 * C48525 +
           (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C31925 +
            ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48522) *
               C48141 * C48496) *
              C1987 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C31925 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48184) * C48522) *
               C48141 * C48525 -
           (((C37688 + C37689) * C48184 + (C37690 + C37691) * C114) * C48522 +
            ((C37687 + C37686) * C48184 + (C37685 + C37684) * C114) * C31925) *
               C48141 * C48538 -
           (((C5494 + C5495) * C48184 + (C5496 + C5497) * C114) * C48522 +
            ((C5489 + C5488) * C48184 + (C5487 + C5486) * C114) * C31925) *
               C48141 * C48496) *
              C1988 +
          ((((C37691 + C37690) * C114 + (C37689 + C37688) * C48184) * C31925 +
            ((C5059 * C2169 + C5055 * C2178 + C5060 * C2581 + C48520 * C2584) *
                 C114 +
             (C5059 * C2177 + C5055 * C2187 + C5060 * C2585 + C48520 * C2590) *
                 C48184) *
                C48522) *
               C48141 * C48538 -
           (((C7605 + C7604) * C48184 + (C7603 + C7602) * C114) * C48522 +
            ((C5493 + C5492) * C48184 + (C5491 + C5490) * C114) * C31925) *
               C48141 * C48525 +
           (((C5497 + C5496) * C114 + (C5495 + C5494) * C48184) * C31925 +
            ((C5059 * C2167 + C5055 * C2174 + C5060 * C2583 + C48520 * C2588) *
                 C114 +
             (C5059 * C2173 + C5055 * C2185 + C5060 * C2589 + C48520 * C2592) *
                 C48184) *
                C48522) *
               C48141 * C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C305 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48541 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C306 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48529 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C307 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C31925 +
           ((C37684 + C37685) * C305 + (C37686 + C37687) * C48541 -
            (C38154 + C38155) * C306 - (C38156 + C38157) * C48529 +
            (C38556 + C38557) * C307 + (C38558 + C38559) * C48502) *
               C48522) *
              C48141 * C48156 * C1987 +
          (((C38155 + C38154) * C306 -
            ((C37687 + C37686) * C48541 + (C37685 + C37684) * C305) +
            (C38157 + C38156) * C48529 - (C38557 + C38556) * C307 -
            (C38559 + C38558) * C48502) *
               C31925 +
           ((C38560 + C38561) * C306 -
            ((C37688 + C37689) * C48541 + (C37690 + C37691) * C305) +
            (C38562 + C38563) * C48529 - (C38564 + C38565) * C307 -
            (C38566 + C38567) * C48502) *
               C48522) *
              C48141 * C48156 * C1988 +
          (((C37691 + C37690) * C305 + (C37689 + C37688) * C48541 -
            (C38561 + C38560) * C306 - (C38563 + C38562) * C48529 +
            (C38565 + C38564) * C307 + (C38567 + C38566) * C48502) *
               C31925 +
           ((C5059 * C2169 + C5055 * C2178 + C5060 * C2581 + C48520 * C2584) *
                C305 +
            (C5059 * C2177 + C5055 * C2187 + C5060 * C2585 + C48520 * C2590) *
                C48541 -
            (C5060 * C7735 + C48520 * C7737 + C5059 * C2581 + C5055 * C2584) *
                C306 -
            (C5060 * C7738 + C48520 * C7741 + C5059 * C2585 + C5055 * C2590) *
                C48529 +
            (C5059 * C7735 + C5055 * C7737 + C5060 * C24035 + C48520 * C24036) *
                C307 +
            (C5059 * C7738 + C5055 * C7741 + C5060 * C24037 + C48520 * C24038) *
                C48502) *
               C48522) *
              C48141 * C48156 * C48505)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48184) *
               C31925 +
           ((C37684 + C37685) * C114 + (C37686 + C37687) * C48184) * C48522) *
              C48141 * C48156 * C2162 -
          (((C37688 + C37689) * C48184 + (C37690 + C37691) * C114) * C48522 +
           ((C37687 + C37686) * C48184 + (C37685 + C37684) * C114) * C31925) *
              C48141 * C48156 * C2163 +
          (((C37691 + C37690) * C114 + (C37689 + C37688) * C48184) * C31925 +
           ((C39424 + C39425) * C114 + (C39426 + C39427) * C48184) * C48522) *
              C48141 * C48156 * C2164 -
          (((C39428 + C39429) * C48184 + (C39430 + C39431) * C114) * C48522 +
           ((C39427 + C39426) * C48184 + (C39425 + C39424) * C114) * C31925) *
              C48141 * C48156 * C2165 +
          (((C39431 + C39430) * C114 + (C39429 + C39428) * C48184) * C31925 +
           ((C5059 * C12879 + C5055 * C12881 + C5060 * C28385 +
             C48520 * C28386) *
                C114 +
            (C5059 * C12882 + C5055 * C12885 + C5060 * C28387 +
             C48520 * C28388) *
                C48184) *
               C48522) *
              C48141 * C48156 * C2166)) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C1183 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C1177 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C1184 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C1178 +
             (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                 C1185 +
             (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                 C48502) *
                C31925 +
            ((C37684 + C37685) * C1183 + (C37686 + C37687) * C1177 -
             (C38154 + C38155) * C1184 - (C38156 + C38157) * C1178 +
             (C38556 + C38557) * C1185 + (C38558 + C38559) * C48502) *
                C48522) *
               C48141 * C48456 +
           (((C5289 + C5288) * C1184 -
             ((C5097 + C5096) * C1177 + (C5095 + C5094) * C1183) +
             (C5291 + C5290) * C1178 - (C5293 + C5292) * C1185 -
             (C5295 + C5294) * C48502) *
                C31925 +
            ((C5992 + C5993) * C1184 -
             ((C5485 + C5484) * C1177 + (C5483 + C5482) * C1183) +
             (C5994 + C5995) * C1178 - (C6734 + C6735) * C1185 -
             (C6736 + C6737) * C48502) *
                C48522) *
               C48141 * C48166) *
              C48471 +
          ((((C38155 + C38154) * C1184 -
             ((C37687 + C37686) * C1177 + (C37685 + C37684) * C1183) +
             (C38157 + C38156) * C1178 - (C38557 + C38556) * C1185 -
             (C38559 + C38558) * C48502) *
                C31925 +
            ((C38560 + C38561) * C1184 -
             ((C37688 + C37689) * C1177 + (C37690 + C37691) * C1183) +
             (C38562 + C38563) * C1178 - (C38564 + C38565) * C1185 -
             (C38566 + C38567) * C48502) *
                C48522) *
               C48141 * C48456 +
           (((C5482 + C5483) * C1183 + (C5484 + C5485) * C1177 -
             (C5993 + C5992) * C1184 - (C5995 + C5994) * C1178 +
             (C6735 + C6734) * C1185 + (C6737 + C6736) * C48502) *
                C31925 +
            ((C5490 + C5491) * C1183 + (C5492 + C5493) * C1177 -
             (C7460 + C7461) * C1184 - (C7462 + C7463) * C1178 +
             (C5059 * C1423 + C5055 * C1438 + C5060 * C6382 + C48520 * C6385) *
                 C1185 +
             (C5059 * C1439 + C5055 * C1450 + C5060 * C6386 + C48520 * C6388) *
                 C48502) *
                C48522) *
               C48141 * C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C31925 +
            ((C37684 + C37685) * C114 + (C37686 + C37687) * C48184) * C48522) *
               C48141 * C713 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48522 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C31925) *
               C48141 * C714 +
           (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C31925 +
            ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48522) *
               C48141 * C715 -
           (((C5778 + C5779) * C48184 + (C5780 + C5781) * C114) * C48522 +
            ((C5105 + C5104) * C48184 + (C5103 + C5102) * C114) * C31925) *
               C48141 * C48506) *
              C48471 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C31925 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48184) * C48522) *
               C48141 * C714 -
           (((C37688 + C37689) * C48184 + (C37690 + C37691) * C114) * C48522 +
            ((C37687 + C37686) * C48184 + (C37685 + C37684) * C114) * C31925) *
               C48141 * C713 -
           (((C5494 + C5495) * C48184 + (C5496 + C5497) * C114) * C48522 +
            ((C5489 + C5488) * C48184 + (C5487 + C5486) * C114) * C31925) *
               C48141 * C715 +
           (((C5781 + C5780) * C114 + (C5779 + C5778) * C48184) * C31925 +
            ((C5059 * C529 + C5055 * C548 + C5060 * C2337 + C48520 * C2338) *
                 C114 +
             (C5059 * C547 + C5055 * C559 + C5060 * C2339 + C48520 * C2340) *
                 C48184) *
                C48522) *
               C48141 * C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C31925 +
            ((C37684 + C37685) * C114 + (C37686 + C37687) * C48184) * C48522) *
               C48141 * C48456 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48522 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C31925) *
               C48141 * C48166) *
              C2459 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C31925 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48184) * C48522) *
               C48141 * C48166 -
           (((C37688 + C37689) * C48184 + (C37690 + C37691) * C114) * C48522 +
            ((C37687 + C37686) * C48184 + (C37685 + C37684) * C114) * C31925) *
               C48141 * C48456) *
              C2460 +
          ((((C37691 + C37690) * C114 + (C37689 + C37688) * C48184) * C31925 +
            ((C39424 + C39425) * C114 + (C39426 + C39427) * C48184) * C48522) *
               C48141 * C48456 -
           (((C7605 + C7604) * C48184 + (C7603 + C7602) * C114) * C48522 +
            ((C5493 + C5492) * C48184 + (C5491 + C5490) * C114) * C31925) *
               C48141 * C48166) *
              C2461 +
          ((((C7602 + C7603) * C114 + (C7604 + C7605) * C48184) * C31925 +
            ((C5059 * C2171 + C5055 * C2181 + C5060 * C7250 + C48520 * C7253) *
                 C114 +
             (C5059 * C2182 + C5055 * C2189 + C5060 * C7254 + C48520 * C7256) *
                 C48184) *
                C48522) *
               C48141 * C48166 -
           (((C39428 + C39429) * C48184 + (C39430 + C39431) * C114) * C48522 +
            ((C39427 + C39426) * C48184 + (C39425 + C39424) * C114) * C31925) *
               C48141 * C48456) *
              C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C305 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48541 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C306 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48529 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C307 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C31925 +
           ((C5059 * C524 + C5055 * C538 + C5060 * C1013 + C48520 * C1018) *
                C305 +
            (C5059 * C537 + C5055 * C554 + C5060 * C1019 + C48520 * C1028) *
                C48541 -
            (C5060 * C1417 + C48520 * C1426 + C5059 * C1013 + C5055 * C1018) *
                C306 -
            (C5060 * C1427 + C48520 * C1444 + C5059 * C1019 + C5055 * C1028) *
                C48529 +
            (C5059 * C1417 + C5055 * C1426 + C5060 * C1865 + C48520 * C1868) *
                C307 +
            (C5059 * C1427 + C5055 * C1444 + C5060 * C1869 + C48520 * C1874) *
                C48502) *
               C48522) *
              C48141 * C302 +
          (((C5289 + C5288) * C306 -
            ((C5097 + C5096) * C48541 + (C5095 + C5094) * C305) +
            (C5291 + C5290) * C48529 - (C5293 + C5292) * C307 -
            (C5295 + C5294) * C48502) *
               C31925 +
           ((C5992 + C5993) * C306 -
            ((C5485 + C5484) * C48541 + (C5483 + C5482) * C305) +
            (C5994 + C5995) * C48529 - (C6734 + C6735) * C307 -
            (C6736 + C6737) * C48502) *
               C48522) *
              C48141 * C303 +
          (((C5101 + C5100) * C305 + (C5099 + C5098) * C48541 -
            (C5297 + C5296) * C306 - (C5299 + C5298) * C48529 +
            (C5301 + C5300) * C307 + (C5303 + C5302) * C48502) *
               C31925 +
           ((C5486 + C5487) * C305 + (C5488 + C5489) * C48541 -
            (C5996 + C5997) * C306 - (C5998 + C5999) * C48529 +
            (C5059 * C1419 + C5055 * C1430 + C5060 * C1867 + C48520 * C1872) *
                C307 +
            (C5059 * C1431 + C5055 * C1446 + C5060 * C1873 + C48520 * C1876) *
                C48502) *
               C48522) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48184) *
               C31925 +
           ((C5059 * C524 + C5055 * C538 + C5060 * C1013 + C48520 * C1018) *
                C114 +
            (C5059 * C537 + C5055 * C554 + C5060 * C1019 + C48520 * C1028) *
                C48184) *
               C48522) *
              C48141 * C107 -
          (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48522 +
           ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C31925) *
              C48141 * C108 +
          (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C31925 +
           ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48522) *
              C48141 * C109 -
          (((C5778 + C5779) * C48184 + (C5780 + C5781) * C114) * C48522 +
           ((C5105 + C5104) * C48184 + (C5103 + C5102) * C114) * C31925) *
              C48141 * C110 +
          (((C5109 + C5108) * C114 + (C5107 + C5106) * C48184) * C31925 +
           ((C5059 * C525 + C5055 * C540 + C5060 * C1017 + C48520 * C1026) *
                C114 +
            (C5059 * C539 + C5055 * C555 + C5060 * C1027 + C48520 * C1032) *
                C48184) *
               C48522) *
              C48141 * C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C1183 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C1177 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C1184 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C1178 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C1185 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C31925 +
           ((C37684 + C37685) * C1183 + (C37686 + C37687) * C1177 -
            (C38154 + C38155) * C1184 - (C38156 + C38157) * C1178 +
            (C5059 * C1417 + C5055 * C1426 + C5060 * C1865 + C48520 * C1868) *
                C1185 +
            (C5059 * C1427 + C5055 * C1444 + C5060 * C1869 + C48520 * C1874) *
                C48502) *
               C48522) *
              C48141 * C48538 +
          (((C5289 + C5288) * C1184 -
            ((C5097 + C5096) * C1177 + (C5095 + C5094) * C1183) +
            (C5291 + C5290) * C1178 - (C5293 + C5292) * C1185 -
            (C5295 + C5294) * C48502) *
               C31925 +
           ((C5992 + C5993) * C1184 -
            ((C5485 + C5484) * C1177 + (C5483 + C5482) * C1183) +
            (C5994 + C5995) * C1178 - (C6734 + C6735) * C1185 -
            (C6736 + C6737) * C48502) *
               C48522) *
              C48141 * C48525 +
          (((C5101 + C5100) * C1183 + (C5099 + C5098) * C1177 -
            (C5297 + C5296) * C1184 - (C5299 + C5298) * C1178 +
            (C5301 + C5300) * C1185 + (C5303 + C5302) * C48502) *
               C31925 +
           ((C5486 + C5487) * C1183 + (C5488 + C5489) * C1177 -
            (C5996 + C5997) * C1184 - (C5998 + C5999) * C1178 +
            (C5059 * C1419 + C5055 * C1430 + C5060 * C1867 + C48520 * C1872) *
                C1185 +
            (C5059 * C1431 + C5055 * C1446 + C5060 * C1873 + C48520 * C1876) *
                C48502) *
               C48522) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
               C1278 +
           (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
               C1272 -
           (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
               C1279 -
           (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
               C1273 +
           (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
               C1280 +
           (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
               C1274 -
           (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
               C1281 -
           (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
               C1275 +
           (C5059 * C1284 + C5055 * C1291 + C5060 * C6227 + C48520 * C6229) *
               C1282 +
           (C5059 * C1292 + C5055 * C1302 + C5060 * C6230 + C48520 * C6233) *
               C1276) *
              C31925 +
          ((C37684 + C37685) * C1278 + (C37686 + C37687) * C1272 -
           (C38154 + C38155) * C1279 - (C38156 + C38157) * C1273 +
           (C5059 * C1417 + C5055 * C1426 + C5060 * C1865 + C48520 * C1868) *
               C1280 +
           (C5059 * C1427 + C5055 * C1444 + C5060 * C1869 + C48520 * C1874) *
               C1274 -
           (C5060 * C6867 + C48520 * C6869 + C5059 * C1865 + C5055 * C1868) *
               C1281 -
           (C5060 * C6870 + C48520 * C6873 + C5059 * C1869 + C5055 * C1874) *
               C1275 +
           (C5059 * C6867 + C5055 * C6869 + C5060 * C23403 + C48520 * C23404) *
               C1282 +
           (C5059 * C6870 + C5055 * C6873 + C5060 * C23405 + C48520 * C23406) *
               C1276) *
              C48522) *
         C48141 * C48156 * C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C31925 +
            ((C37684 + C37685) * C114 + (C37686 + C37687) * C48184) * C48522) *
               C48141 * C48538 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48522 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C31925) *
               C48141 * C48525 +
           (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C31925 +
            ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48522) *
               C48141 * C48496) *
              C1987 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C31925 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48184) * C48522) *
               C48141 * C48525 -
           (((C37688 + C37689) * C48184 + (C37690 + C37691) * C114) * C48522 +
            ((C37687 + C37686) * C48184 + (C37685 + C37684) * C114) * C31925) *
               C48141 * C48538 -
           (((C5494 + C5495) * C48184 + (C5496 + C5497) * C114) * C48522 +
            ((C5489 + C5488) * C48184 + (C5487 + C5486) * C114) * C31925) *
               C48141 * C48496) *
              C1988 +
          ((((C37691 + C37690) * C114 + (C37689 + C37688) * C48184) * C31925 +
            ((C5059 * C2169 + C5055 * C2178 + C5060 * C2581 + C48520 * C2584) *
                 C114 +
             (C5059 * C2177 + C5055 * C2187 + C5060 * C2585 + C48520 * C2590) *
                 C48184) *
                C48522) *
               C48141 * C48538 -
           (((C7605 + C7604) * C48184 + (C7603 + C7602) * C114) * C48522 +
            ((C5493 + C5492) * C48184 + (C5491 + C5490) * C114) * C31925) *
               C48141 * C48525 +
           (((C5497 + C5496) * C114 + (C5495 + C5494) * C48184) * C31925 +
            ((C5059 * C2167 + C5055 * C2174 + C5060 * C2583 + C48520 * C2588) *
                 C114 +
             (C5059 * C2173 + C5055 * C2185 + C5060 * C2589 + C48520 * C2592) *
                 C48184) *
                C48522) *
               C48141 * C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C305 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48541 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C306 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48529 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C307 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C31925 +
           ((C37684 + C37685) * C305 + (C37686 + C37687) * C48541 -
            (C38154 + C38155) * C306 - (C38156 + C38157) * C48529 +
            (C38556 + C38557) * C307 + (C38558 + C38559) * C48502) *
               C48522) *
              C48141 * C48156 * C1987 +
          (((C38155 + C38154) * C306 -
            ((C37687 + C37686) * C48541 + (C37685 + C37684) * C305) +
            (C38157 + C38156) * C48529 - (C38557 + C38556) * C307 -
            (C38559 + C38558) * C48502) *
               C31925 +
           ((C38560 + C38561) * C306 -
            ((C37688 + C37689) * C48541 + (C37690 + C37691) * C305) +
            (C38562 + C38563) * C48529 - (C38564 + C38565) * C307 -
            (C38566 + C38567) * C48502) *
               C48522) *
              C48141 * C48156 * C1988 +
          (((C37691 + C37690) * C305 + (C37689 + C37688) * C48541 -
            (C38561 + C38560) * C306 - (C38563 + C38562) * C48529 +
            (C38565 + C38564) * C307 + (C38567 + C38566) * C48502) *
               C31925 +
           ((C5059 * C2169 + C5055 * C2178 + C5060 * C2581 + C48520 * C2584) *
                C305 +
            (C5059 * C2177 + C5055 * C2187 + C5060 * C2585 + C48520 * C2590) *
                C48541 -
            (C5060 * C7735 + C48520 * C7737 + C5059 * C2581 + C5055 * C2584) *
                C306 -
            (C5060 * C7738 + C48520 * C7741 + C5059 * C2585 + C5055 * C2590) *
                C48529 +
            (C5059 * C7735 + C5055 * C7737 + C5060 * C24035 + C48520 * C24036) *
                C307 +
            (C5059 * C7738 + C5055 * C7741 + C5060 * C24037 + C48520 * C24038) *
                C48502) *
               C48522) *
              C48141 * C48156 * C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C717 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48470 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C718 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48247) *
                C31925 +
            ((C37684 + C37685) * C717 + (C37686 + C37687) * C48470 -
             (C38154 + C38155) * C718 - (C38156 + C38157) * C48247) *
                C48522) *
               C48141 * C48161 +
           (((C5289 + C5288) * C718 -
             ((C5097 + C5096) * C48470 + (C5095 + C5094) * C717) +
             (C5291 + C5290) * C48247) *
                C31925 +
            ((C5992 + C5993) * C718 -
             ((C5485 + C5484) * C48470 + (C5483 + C5482) * C717) +
             (C5994 + C5995) * C48247) *
                C48522) *
               C48141 * C48169 +
           (((C5101 + C5100) * C717 + (C5099 + C5098) * C48470 -
             (C5297 + C5296) * C718 - (C5299 + C5298) * C48247) *
                C31925 +
            ((C5486 + C5487) * C717 + (C5488 + C5489) * C48470 -
             (C5996 + C5997) * C718 - (C5998 + C5999) * C48247) *
                C48522) *
               C48141 * C3124) *
              C3562 +
          ((((C38155 + C38154) * C718 -
             ((C37687 + C37686) * C48470 + (C37685 + C37684) * C717) +
             (C38157 + C38156) * C48247) *
                C31925 +
            ((C38560 + C38561) * C718 -
             ((C37688 + C37689) * C48470 + (C37690 + C37691) * C717) +
             (C38562 + C38563) * C48247) *
                C48522) *
               C48141 * C48161 +
           (((C5482 + C5483) * C717 + (C5484 + C5485) * C48470 -
             (C5993 + C5992) * C718 - (C5995 + C5994) * C48247) *
                C31925 +
            ((C5490 + C5491) * C717 + (C5492 + C5493) * C48470 -
             (C7460 + C7461) * C718 - (C7462 + C7463) * C48247) *
                C48522) *
               C48141 * C48169 +
           (((C5997 + C5996) * C718 -
             ((C5489 + C5488) * C48470 + (C5487 + C5486) * C717) +
             (C5999 + C5998) * C48247) *
                C31925 +
            ((C5059 * C1424 + C5055 * C1440 + C5060 * C1425 + C48520 * C1442) *
                 C718 -
             ((C5494 + C5495) * C48470 + (C5496 + C5497) * C717) +
             (C5059 * C1441 + C5055 * C1451 + C5060 * C1443 + C48520 * C1452) *
                 C48247) *
                C48522) *
               C48141 * C3124) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C717 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48470 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C718 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48247) *
                C31925 +
            ((C37684 + C37685) * C717 + (C37686 + C37687) * C48470 -
             (C38154 + C38155) * C718 - (C38156 + C38157) * C48247) *
                C48522) *
               C48141 * C2825 +
           (((C5289 + C5288) * C718 -
             ((C5097 + C5096) * C48470 + (C5095 + C5094) * C717) +
             (C5291 + C5290) * C48247) *
                C31925 +
            ((C5992 + C5993) * C718 -
             ((C5485 + C5484) * C48470 + (C5483 + C5482) * C717) +
             (C5994 + C5995) * C48247) *
                C48522) *
               C48141 * C48166) *
              C48285 +
          ((((C38155 + C38154) * C718 -
             ((C37687 + C37686) * C48470 + (C37685 + C37684) * C717) +
             (C38157 + C38156) * C48247) *
                C31925 +
            ((C38560 + C38561) * C718 -
             ((C37688 + C37689) * C48470 + (C37690 + C37691) * C717) +
             (C38562 + C38563) * C48247) *
                C48522) *
               C48141 * C2825 +
           (((C5482 + C5483) * C717 + (C5484 + C5485) * C48470 -
             (C5993 + C5992) * C718 - (C5995 + C5994) * C48247) *
                C31925 +
            ((C5490 + C5491) * C717 + (C5492 + C5493) * C48470 -
             (C7460 + C7461) * C718 - (C7462 + C7463) * C48247) *
                C48522) *
               C48141 * C48166) *
              C48292 +
          ((((C37691 + C37690) * C717 + (C37689 + C37688) * C48470 -
             (C38561 + C38560) * C718 - (C38563 + C38562) * C48247) *
                C31925 +
            ((C39424 + C39425) * C717 + (C39426 + C39427) * C48470 -
             (C39894 + C39895) * C718 - (C39896 + C39897) * C48247) *
                C48522) *
               C48141 * C2825 +
           (((C7461 + C7460) * C718 -
             ((C5493 + C5492) * C48470 + (C5491 + C5490) * C717) +
             (C7463 + C7462) * C48247) *
                C31925 +
            ((C5059 * C2582 + C5055 * C2586 + C5060 * C7736 + C48520 * C7739) *
                 C718 -
             ((C7605 + C7604) * C48470 + (C7603 + C7602) * C717) +
             (C5059 * C2587 + C5055 * C2591 + C5060 * C7740 + C48520 * C7742) *
                 C48247) *
                C48522) *
               C48141 * C48166) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C305 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48541 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C306 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48529 +
             (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                 C307 +
             (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                 C48502) *
                C31925 +
            ((C37684 + C37685) * C305 + (C37686 + C37687) * C48541 -
             (C38154 + C38155) * C306 - (C38156 + C38157) * C48529 +
             (C38556 + C38557) * C307 + (C38558 + C38559) * C48502) *
                C48522) *
               C48141 * C2825 +
           (((C5289 + C5288) * C306 -
             ((C5097 + C5096) * C48541 + (C5095 + C5094) * C305) +
             (C5291 + C5290) * C48529 - (C5293 + C5292) * C307 -
             (C5295 + C5294) * C48502) *
                C31925 +
            ((C5992 + C5993) * C306 -
             ((C5485 + C5484) * C48541 + (C5483 + C5482) * C305) +
             (C5994 + C5995) * C48529 - (C6734 + C6735) * C307 -
             (C6736 + C6737) * C48502) *
                C48522) *
               C48141 * C48166) *
              C3562 +
          ((((C38155 + C38154) * C306 -
             ((C37687 + C37686) * C48541 + (C37685 + C37684) * C305) +
             (C38157 + C38156) * C48529 - (C38557 + C38556) * C307 -
             (C38559 + C38558) * C48502) *
                C31925 +
            ((C38560 + C38561) * C306 -
             ((C37688 + C37689) * C48541 + (C37690 + C37691) * C305) +
             (C38562 + C38563) * C48529 - (C38564 + C38565) * C307 -
             (C38566 + C38567) * C48502) *
                C48522) *
               C48141 * C2825 +
           (((C5482 + C5483) * C305 + (C5484 + C5485) * C48541 -
             (C5993 + C5992) * C306 - (C5995 + C5994) * C48529 +
             (C6735 + C6734) * C307 + (C6737 + C6736) * C48502) *
                C31925 +
            ((C5490 + C5491) * C305 + (C5492 + C5493) * C48541 -
             (C7460 + C7461) * C306 - (C7462 + C7463) * C48529 +
             (C5059 * C1423 + C5055 * C1438 + C5060 * C6382 + C48520 * C6385) *
                 C307 +
             (C5059 * C1439 + C5055 * C1450 + C5060 * C6386 + C48520 * C6388) *
                 C48502) *
                C48522) *
               C48141 * C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C31925 +
            ((C37684 + C37685) * C114 + (C37686 + C37687) * C48184) * C48522) *
               C48141 * C48547 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48522 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C31925) *
               C48141 * C48540 +
           (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C31925 +
            ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48522) *
               C48141 * C48527 -
           (((C5778 + C5779) * C48184 + (C5780 + C5781) * C114) * C48522 +
            ((C5105 + C5104) * C48184 + (C5103 + C5102) * C114) * C31925) *
               C48141 * C48506) *
              C3562 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C31925 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48184) * C48522) *
               C48141 * C48540 -
           (((C37688 + C37689) * C48184 + (C37690 + C37691) * C114) * C48522 +
            ((C37687 + C37686) * C48184 + (C37685 + C37684) * C114) * C31925) *
               C48141 * C48547 -
           (((C5494 + C5495) * C48184 + (C5496 + C5497) * C114) * C48522 +
            ((C5489 + C5488) * C48184 + (C5487 + C5486) * C114) * C31925) *
               C48141 * C48527 +
           (((C5781 + C5780) * C114 + (C5779 + C5778) * C48184) * C31925 +
            ((C5059 * C529 + C5055 * C548 + C5060 * C2337 + C48520 * C2338) *
                 C114 +
             (C5059 * C547 + C5055 * C559 + C5060 * C2339 + C48520 * C2340) *
                 C48184) *
                C48522) *
               C48141 * C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C31925 +
            ((C37684 + C37685) * C114 + (C37686 + C37687) * C48184) * C48522) *
               C48141 * C2825 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48522 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C31925) *
               C48141 * C48166) *
              C48549 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C31925 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48184) * C48522) *
               C48141 * C48166 -
           (((C37688 + C37689) * C48184 + (C37690 + C37691) * C114) * C48522 +
            ((C37687 + C37686) * C48184 + (C37685 + C37684) * C114) * C31925) *
               C48141 * C2825) *
              C48546 +
          ((((C37691 + C37690) * C114 + (C37689 + C37688) * C48184) * C31925 +
            ((C39424 + C39425) * C114 + (C39426 + C39427) * C48184) * C48522) *
               C48141 * C2825 -
           (((C7605 + C7604) * C48184 + (C7603 + C7602) * C114) * C48522 +
            ((C5493 + C5492) * C48184 + (C5491 + C5490) * C114) * C31925) *
               C48141 * C48166) *
              C48537 +
          ((((C7602 + C7603) * C114 + (C7604 + C7605) * C48184) * C31925 +
            ((C5059 * C2171 + C5055 * C2181 + C5060 * C7250 + C48520 * C7253) *
                 C114 +
             (C5059 * C2182 + C5055 * C2189 + C5060 * C7254 + C48520 * C7256) *
                 C48184) *
                C48522) *
               C48141 * C48166 -
           (((C39428 + C39429) * C48184 + (C39430 + C39431) * C114) * C48522 +
            ((C39427 + C39426) * C48184 + (C39425 + C39424) * C114) * C31925) *
               C48141 * C2825) *
              C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C31925 +
            ((C37684 + C37685) * C114 + (C37686 + C37687) * C48184) * C48522) *
               C48141 * C48161 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48522 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C31925) *
               C48141 * C48169 +
           (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C31925 +
            ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48522) *
               C48141 * C3124) *
              C48285 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C31925 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48184) * C48522) *
               C48141 * C48169 -
           (((C37688 + C37689) * C48184 + (C37690 + C37691) * C114) * C48522 +
            ((C37687 + C37686) * C48184 + (C37685 + C37684) * C114) * C31925) *
               C48141 * C48161 -
           (((C5494 + C5495) * C48184 + (C5496 + C5497) * C114) * C48522 +
            ((C5489 + C5488) * C48184 + (C5487 + C5486) * C114) * C31925) *
               C48141 * C3124) *
              C48292 +
          ((((C37691 + C37690) * C114 + (C37689 + C37688) * C48184) * C31925 +
            ((C39424 + C39425) * C114 + (C39426 + C39427) * C48184) * C48522) *
               C48141 * C48161 -
           (((C7605 + C7604) * C48184 + (C7603 + C7602) * C114) * C48522 +
            ((C5493 + C5492) * C48184 + (C5491 + C5490) * C114) * C31925) *
               C48141 * C48169 +
           (((C5497 + C5496) * C114 + (C5495 + C5494) * C48184) * C31925 +
            ((C5059 * C2167 + C5055 * C2174 + C5060 * C2583 + C48520 * C2588) *
                 C114 +
             (C5059 * C2173 + C5055 * C2185 + C5060 * C2589 + C48520 * C2592) *
                 C48184) *
                C48522) *
               C48141 * C3124) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C31925 +
            ((C37684 + C37685) * C114 + (C37686 + C37687) * C48184) * C48522) *
               C48141 * C48547 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48522 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C31925) *
               C48141 * C48540 +
           (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C31925 +
            ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48522) *
               C48141 * C48527 -
           (((C5778 + C5779) * C48184 + (C5780 + C5781) * C114) * C48522 +
            ((C5105 + C5104) * C48184 + (C5103 + C5102) * C114) * C31925) *
               C48141 * C48506) *
              C3562 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C31925 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48184) * C48522) *
               C48141 * C48540 -
           (((C37688 + C37689) * C48184 + (C37690 + C37691) * C114) * C48522 +
            ((C37687 + C37686) * C48184 + (C37685 + C37684) * C114) * C31925) *
               C48141 * C48547 -
           (((C5494 + C5495) * C48184 + (C5496 + C5497) * C114) * C48522 +
            ((C5489 + C5488) * C48184 + (C5487 + C5486) * C114) * C31925) *
               C48141 * C48527 +
           (((C5781 + C5780) * C114 + (C5779 + C5778) * C48184) * C31925 +
            ((C5059 * C529 + C5055 * C548 + C5060 * C2337 + C48520 * C2338) *
                 C114 +
             (C5059 * C547 + C5055 * C559 + C5060 * C2339 + C48520 * C2340) *
                 C48184) *
                C48522) *
               C48141 * C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C305 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48541 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C306 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48529 +
             (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                 C307 +
             (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                 C48502) *
                C31925 +
            ((C37684 + C37685) * C305 + (C37686 + C37687) * C48541 -
             (C38154 + C38155) * C306 - (C38156 + C38157) * C48529 +
             (C38556 + C38557) * C307 + (C38558 + C38559) * C48502) *
                C48522) *
               C48141 * C2825 +
           (((C5289 + C5288) * C306 -
             ((C5097 + C5096) * C48541 + (C5095 + C5094) * C305) +
             (C5291 + C5290) * C48529 - (C5293 + C5292) * C307 -
             (C5295 + C5294) * C48502) *
                C31925 +
            ((C5992 + C5993) * C306 -
             ((C5485 + C5484) * C48541 + (C5483 + C5482) * C305) +
             (C5994 + C5995) * C48529 - (C6734 + C6735) * C307 -
             (C6736 + C6737) * C48502) *
                C48522) *
               C48141 * C48166) *
              C3562 +
          ((((C38155 + C38154) * C306 -
             ((C37687 + C37686) * C48541 + (C37685 + C37684) * C305) +
             (C38157 + C38156) * C48529 - (C38557 + C38556) * C307 -
             (C38559 + C38558) * C48502) *
                C31925 +
            ((C38560 + C38561) * C306 -
             ((C37688 + C37689) * C48541 + (C37690 + C37691) * C305) +
             (C38562 + C38563) * C48529 - (C38564 + C38565) * C307 -
             (C38566 + C38567) * C48502) *
                C48522) *
               C48141 * C2825 +
           (((C5482 + C5483) * C305 + (C5484 + C5485) * C48541 -
             (C5993 + C5992) * C306 - (C5995 + C5994) * C48529 +
             (C6735 + C6734) * C307 + (C6737 + C6736) * C48502) *
                C31925 +
            ((C5490 + C5491) * C305 + (C5492 + C5493) * C48541 -
             (C7460 + C7461) * C306 - (C7462 + C7463) * C48529 +
             (C5059 * C1423 + C5055 * C1438 + C5060 * C6382 + C48520 * C6385) *
                 C307 +
             (C5059 * C1439 + C5055 * C1450 + C5060 * C6386 + C48520 * C6388) *
                 C48502) *
                C48522) *
               C48141 * C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C717 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48470 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C718 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48247) *
               C31925 +
           ((C37684 + C37685) * C717 + (C37686 + C37687) * C48470 -
            (C5060 * C1417 + C48520 * C1426 + C5059 * C1013 + C5055 * C1018) *
                C718 -
            (C5060 * C1427 + C48520 * C1444 + C5059 * C1019 + C5055 * C1028) *
                C48247) *
               C48522) *
              C48141 * C713 +
          (((C5289 + C5288) * C718 -
            ((C5097 + C5096) * C48470 + (C5095 + C5094) * C717) +
            (C5291 + C5290) * C48247) *
               C31925 +
           ((C5992 + C5993) * C718 -
            ((C5485 + C5484) * C48470 + (C5483 + C5482) * C717) +
            (C5994 + C5995) * C48247) *
               C48522) *
              C48141 * C714 +
          (((C5101 + C5100) * C717 + (C5099 + C5098) * C48470 -
            (C5297 + C5296) * C718 - (C5299 + C5298) * C48247) *
               C31925 +
           ((C5486 + C5487) * C717 + (C5488 + C5489) * C48470 -
            (C5996 + C5997) * C718 - (C5998 + C5999) * C48247) *
               C48522) *
              C48141 * C715 +
          (((C5637 + C5636) * C718 -
            ((C5105 + C5104) * C48470 + (C5103 + C5102) * C717) +
            (C5639 + C5638) * C48247) *
               C31925 +
           ((C5059 * C1016 + C5055 * C1024 + C5060 * C1739 + C48520 * C1740) *
                C718 -
            ((C5778 + C5779) * C48470 + (C5780 + C5781) * C717) +
            (C5059 * C1025 + C5055 * C1031 + C5060 * C1741 + C48520 * C1742) *
                C48247) *
               C48522) *
              C48141 * C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C1557 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C1551 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C1558 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C1552 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C1559 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C1553 -
            (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
                C1560 -
            (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
                C48512) *
               C31925 +
           ((C37684 + C37685) * C1557 + (C37686 + C37687) * C1551 -
            (C38154 + C38155) * C1558 - (C38156 + C38157) * C1552 +
            (C38556 + C38557) * C1559 + (C38558 + C38559) * C1553 -
            (C5060 * C6867 + C48520 * C6869 + C5059 * C1865 + C5055 * C1868) *
                C1560 -
            (C5060 * C6870 + C48520 * C6873 + C5059 * C1869 + C5055 * C1874) *
                C48512) *
               C48522) *
              C48141 * C48456 +
          (((C5289 + C5288) * C1558 -
            ((C5097 + C5096) * C1551 + (C5095 + C5094) * C1557) +
            (C5291 + C5290) * C1552 - (C5293 + C5292) * C1559 -
            (C5295 + C5294) * C1553 + (C6529 + C6528) * C1560 +
            (C6531 + C6530) * C48512) *
               C31925 +
           ((C5992 + C5993) * C1558 -
            ((C5485 + C5484) * C1551 + (C5483 + C5482) * C1557) +
            (C5994 + C5995) * C1552 - (C6734 + C6735) * C1559 -
            (C6736 + C6737) * C1553 +
            (C5059 * C1866 + C5055 * C1870 + C5060 * C6868 + C48520 * C6871) *
                C1560 +
            (C5059 * C1871 + C5055 * C1875 + C5060 * C6872 + C48520 * C6874) *
                C48512) *
               C48522) *
              C48141 * C48166) *
         C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C717 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48470 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C718 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C48247) *
                C31925 +
            ((C37684 + C37685) * C717 + (C37686 + C37687) * C48470 -
             (C38154 + C38155) * C718 - (C38156 + C38157) * C48247) *
                C48522) *
               C48141 * C302 +
           (((C5289 + C5288) * C718 -
             ((C5097 + C5096) * C48470 + (C5095 + C5094) * C717) +
             (C5291 + C5290) * C48247) *
                C31925 +
            ((C5992 + C5993) * C718 -
             ((C5485 + C5484) * C48470 + (C5483 + C5482) * C717) +
             (C5994 + C5995) * C48247) *
                C48522) *
               C48141 * C303 +
           (((C5101 + C5100) * C717 + (C5099 + C5098) * C48470 -
             (C5297 + C5296) * C718 - (C5299 + C5298) * C48247) *
                C31925 +
            ((C5486 + C5487) * C717 + (C5488 + C5489) * C48470 -
             (C5996 + C5997) * C718 - (C5998 + C5999) * C48247) *
                C48522) *
               C48141 * C48496) *
              C48471 +
          ((((C38155 + C38154) * C718 -
             ((C37687 + C37686) * C48470 + (C37685 + C37684) * C717) +
             (C38157 + C38156) * C48247) *
                C31925 +
            ((C5059 * C1420 + C5055 * C1432 + C5060 * C1421 + C48520 * C1434) *
                 C718 -
             ((C37688 + C37689) * C48470 + (C37690 + C37691) * C717) +
             (C5059 * C1433 + C5055 * C1447 + C5060 * C1435 + C48520 * C1448) *
                 C48247) *
                C48522) *
               C48141 * C302 +
           (((C5482 + C5483) * C717 + (C5484 + C5485) * C48470 -
             (C5993 + C5992) * C718 - (C5995 + C5994) * C48247) *
                C31925 +
            ((C5490 + C5491) * C717 + (C5492 + C5493) * C48470 -
             (C7460 + C7461) * C718 - (C7462 + C7463) * C48247) *
                C48522) *
               C48141 * C303 +
           (((C5997 + C5996) * C718 -
             ((C5489 + C5488) * C48470 + (C5487 + C5486) * C717) +
             (C5999 + C5998) * C48247) *
                C31925 +
            ((C5059 * C1424 + C5055 * C1440 + C5060 * C1425 + C48520 * C1442) *
                 C718 -
             ((C5494 + C5495) * C48470 + (C5496 + C5497) * C717) +
             (C5059 * C1441 + C5055 * C1451 + C5060 * C1443 + C48520 * C1452) *
                 C48247) *
                C48522) *
               C48141 * C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C1557 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C1551 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C1558 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C1552 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C1559 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C1553 -
            (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
                C1560 -
            (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
                C48512) *
               C31925 +
           ((C37684 + C37685) * C1557 + (C37686 + C37687) * C1551 -
            (C38154 + C38155) * C1558 - (C38156 + C38157) * C1552 +
            (C38556 + C38557) * C1559 + (C38558 + C38559) * C1553 -
            (C39030 + C39031) * C1560 - (C39032 + C39033) * C48512) *
               C48522) *
              C48141 * C48156 * C48471 +
          (((C38155 + C38154) * C1558 -
            ((C37687 + C37686) * C1551 + (C37685 + C37684) * C1557) +
            (C38157 + C38156) * C1552 - (C38557 + C38556) * C1559 -
            (C38559 + C38558) * C1553 + (C39031 + C39030) * C1560 +
            (C39033 + C39032) * C48512) *
               C31925 +
           ((C38560 + C38561) * C1558 -
            ((C37688 + C37689) * C1551 + (C37690 + C37691) * C1557) +
            (C38562 + C38563) * C1552 - (C38564 + C38565) * C1559 -
            (C38566 + C38567) * C1553 +
            (C5059 * C6381 + C5055 * C6383 + C5060 * C23057 + C48520 * C23058) *
                C1560 +
            (C5059 * C6384 + C5055 * C6387 + C5060 * C23059 + C48520 * C23060) *
                C48512) *
               C48522) *
              C48141 * C48156 * C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C305 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48541 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C306 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48529 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C307 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C31925 +
           ((C5059 * C524 + C5055 * C538 + C5060 * C1013 + C48520 * C1018) *
                C305 +
            (C5059 * C537 + C5055 * C554 + C5060 * C1019 + C48520 * C1028) *
                C48541 -
            (C5060 * C1417 + C48520 * C1426 + C5059 * C1013 + C5055 * C1018) *
                C306 -
            (C5060 * C1427 + C48520 * C1444 + C5059 * C1019 + C5055 * C1028) *
                C48529 +
            (C5059 * C1417 + C5055 * C1426 + C5060 * C1865 + C48520 * C1868) *
                C307 +
            (C5059 * C1427 + C5055 * C1444 + C5060 * C1869 + C48520 * C1874) *
                C48502) *
               C48522) *
              C48141 * C302 +
          (((C5289 + C5288) * C306 -
            ((C5097 + C5096) * C48541 + (C5095 + C5094) * C305) +
            (C5291 + C5290) * C48529 - (C5293 + C5292) * C307 -
            (C5295 + C5294) * C48502) *
               C31925 +
           ((C5992 + C5993) * C306 -
            ((C5485 + C5484) * C48541 + (C5483 + C5482) * C305) +
            (C5994 + C5995) * C48529 - (C6734 + C6735) * C307 -
            (C6736 + C6737) * C48502) *
               C48522) *
              C48141 * C303 +
          (((C5101 + C5100) * C305 + (C5099 + C5098) * C48541 -
            (C5297 + C5296) * C306 - (C5299 + C5298) * C48529 +
            (C5301 + C5300) * C307 + (C5303 + C5302) * C48502) *
               C31925 +
           ((C5486 + C5487) * C305 + (C5488 + C5489) * C48541 -
            (C5996 + C5997) * C306 - (C5998 + C5999) * C48529 +
            (C5059 * C1419 + C5055 * C1430 + C5060 * C1867 + C48520 * C1872) *
                C307 +
            (C5059 * C1431 + C5055 * C1446 + C5060 * C1873 + C48520 * C1876) *
                C48502) *
               C48522) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48184) *
               C31925 +
           ((C5059 * C524 + C5055 * C538 + C5060 * C1013 + C48520 * C1018) *
                C114 +
            (C5059 * C537 + C5055 * C554 + C5060 * C1019 + C48520 * C1028) *
                C48184) *
               C48522) *
              C48141 * C107 -
          (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48522 +
           ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C31925) *
              C48141 * C108 +
          (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C31925 +
           ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48522) *
              C48141 * C109 -
          (((C5778 + C5779) * C48184 + (C5780 + C5781) * C114) * C48522 +
           ((C5105 + C5104) * C48184 + (C5103 + C5102) * C114) * C31925) *
              C48141 * C110 +
          (((C5109 + C5108) * C114 + (C5107 + C5106) * C48184) * C31925 +
           ((C5059 * C525 + C5055 * C540 + C5060 * C1017 + C48520 * C1026) *
                C114 +
            (C5059 * C539 + C5055 * C555 + C5060 * C1027 + C48520 * C1032) *
                C48184) *
               C48522) *
              C48141 * C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C31925 +
            ((C37684 + C37685) * C114 + (C37686 + C37687) * C48184) * C48522) *
               C48141 * C302 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48522 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C31925) *
               C48141 * C303 +
           (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C31925 +
            ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48522) *
               C48141 * C48496) *
              C48542 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C31925 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48184) * C48522) *
               C48141 * C303 -
           (((C37688 + C37689) * C48184 + (C37690 + C37691) * C114) * C48522 +
            ((C37687 + C37686) * C48184 + (C37685 + C37684) * C114) * C31925) *
               C48141 * C302 -
           (((C5494 + C5495) * C48184 + (C5496 + C5497) * C114) * C48522 +
            ((C5489 + C5488) * C48184 + (C5487 + C5486) * C114) * C31925) *
               C48141 * C48496) *
              C48531 +
          ((((C37691 + C37690) * C114 + (C37689 + C37688) * C48184) * C31925 +
            ((C5059 * C2169 + C5055 * C2178 + C5060 * C2581 + C48520 * C2584) *
                 C114 +
             (C5059 * C2177 + C5055 * C2187 + C5060 * C2585 + C48520 * C2590) *
                 C48184) *
                C48522) *
               C48141 * C302 -
           (((C7605 + C7604) * C48184 + (C7603 + C7602) * C114) * C48522 +
            ((C5493 + C5492) * C48184 + (C5491 + C5490) * C114) * C31925) *
               C48141 * C303 +
           (((C5497 + C5496) * C114 + (C5495 + C5494) * C48184) * C31925 +
            ((C5059 * C2167 + C5055 * C2174 + C5060 * C2583 + C48520 * C2588) *
                 C114 +
             (C5059 * C2173 + C5055 * C2185 + C5060 * C2589 + C48520 * C2592) *
                 C48184) *
                C48522) *
               C48141 * C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C1183 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C1177 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C1184 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C1178 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C1185 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C31925 +
           ((C37684 + C37685) * C1183 + (C37686 + C37687) * C1177 -
            (C38154 + C38155) * C1184 - (C38156 + C38157) * C1178 +
            (C5059 * C1417 + C5055 * C1426 + C5060 * C1865 + C48520 * C1868) *
                C1185 +
            (C5059 * C1427 + C5055 * C1444 + C5060 * C1869 + C48520 * C1874) *
                C48502) *
               C48522) *
              C48141 * C48538 +
          (((C5289 + C5288) * C1184 -
            ((C5097 + C5096) * C1177 + (C5095 + C5094) * C1183) +
            (C5291 + C5290) * C1178 - (C5293 + C5292) * C1185 -
            (C5295 + C5294) * C48502) *
               C31925 +
           ((C5992 + C5993) * C1184 -
            ((C5485 + C5484) * C1177 + (C5483 + C5482) * C1183) +
            (C5994 + C5995) * C1178 - (C6734 + C6735) * C1185 -
            (C6736 + C6737) * C48502) *
               C48522) *
              C48141 * C48525 +
          (((C5101 + C5100) * C1183 + (C5099 + C5098) * C1177 -
            (C5297 + C5296) * C1184 - (C5299 + C5298) * C1178 +
            (C5301 + C5300) * C1185 + (C5303 + C5302) * C48502) *
               C31925 +
           ((C5486 + C5487) * C1183 + (C5488 + C5489) * C1177 -
            (C5996 + C5997) * C1184 - (C5998 + C5999) * C1178 +
            (C5059 * C1419 + C5055 * C1430 + C5060 * C1867 + C48520 * C1872) *
                C1185 +
            (C5059 * C1431 + C5055 * C1446 + C5060 * C1873 + C48520 * C1876) *
                C48502) *
               C48522) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
               C1278 +
           (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
               C1272 -
           (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
               C1279 -
           (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
               C1273 +
           (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
               C1280 +
           (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
               C1274 -
           (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
               C1281 -
           (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
               C1275 +
           (C5059 * C1284 + C5055 * C1291 + C5060 * C6227 + C48520 * C6229) *
               C1282 +
           (C5059 * C1292 + C5055 * C1302 + C5060 * C6230 + C48520 * C6233) *
               C1276) *
              C31925 +
          ((C37684 + C37685) * C1278 + (C37686 + C37687) * C1272 -
           (C38154 + C38155) * C1279 - (C38156 + C38157) * C1273 +
           (C5059 * C1417 + C5055 * C1426 + C5060 * C1865 + C48520 * C1868) *
               C1280 +
           (C5059 * C1427 + C5055 * C1444 + C5060 * C1869 + C48520 * C1874) *
               C1274 -
           (C5060 * C6867 + C48520 * C6869 + C5059 * C1865 + C5055 * C1868) *
               C1281 -
           (C5060 * C6870 + C48520 * C6873 + C5059 * C1869 + C5055 * C1874) *
               C1275 +
           (C5059 * C6867 + C5055 * C6869 + C5060 * C23403 + C48520 * C23404) *
               C1282 +
           (C5059 * C6870 + C5055 * C6873 + C5060 * C23405 + C48520 * C23406) *
               C1276) *
              C48522) *
         C48141 * C48156 * C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C1183 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C1177 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C1184 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C1178 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C1185 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C31925 +
           ((C37684 + C37685) * C1183 + (C37686 + C37687) * C1177 -
            (C38154 + C38155) * C1184 - (C38156 + C38157) * C1178 +
            (C38556 + C38557) * C1185 + (C38558 + C38559) * C48502) *
               C48522) *
              C48141 * C48156 * C48542 +
          (((C38155 + C38154) * C1184 -
            ((C37687 + C37686) * C1177 + (C37685 + C37684) * C1183) +
            (C38157 + C38156) * C1178 - (C38557 + C38556) * C1185 -
            (C38559 + C38558) * C48502) *
               C31925 +
           ((C38560 + C38561) * C1184 -
            ((C37688 + C37689) * C1177 + (C37690 + C37691) * C1183) +
            (C38562 + C38563) * C1178 - (C38564 + C38565) * C1185 -
            (C38566 + C38567) * C48502) *
               C48522) *
              C48141 * C48156 * C48531 +
          (((C37691 + C37690) * C1183 + (C37689 + C37688) * C1177 -
            (C38561 + C38560) * C1184 - (C38563 + C38562) * C1178 +
            (C38565 + C38564) * C1185 + (C38567 + C38566) * C48502) *
               C31925 +
           ((C5059 * C2169 + C5055 * C2178 + C5060 * C2581 + C48520 * C2584) *
                C1183 +
            (C5059 * C2177 + C5055 * C2187 + C5060 * C2585 + C48520 * C2590) *
                C1177 -
            (C5060 * C7735 + C48520 * C7737 + C5059 * C2581 + C5055 * C2584) *
                C1184 -
            (C5060 * C7738 + C48520 * C7741 + C5059 * C2585 + C5055 * C2590) *
                C1178 +
            (C5059 * C7735 + C5055 * C7737 + C5060 * C24035 + C48520 * C24036) *
                C1185 +
            (C5059 * C7738 + C5055 * C7741 + C5060 * C24037 + C48520 * C24038) *
                C48502) *
               C48522) *
              C48141 * C48156 * C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C48184) *
                C31925 +
            ((C37684 + C37685) * C114 + (C37686 + C37687) * C48184) * C48522) *
               C48141 * C713 -
           (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48522 +
            ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C31925) *
               C48141 * C714 +
           (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C31925 +
            ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48522) *
               C48141 * C715 -
           (((C5778 + C5779) * C48184 + (C5780 + C5781) * C114) * C48522 +
            ((C5105 + C5104) * C48184 + (C5103 + C5102) * C114) * C31925) *
               C48141 * C48506) *
              C48471 +
          ((((C5482 + C5483) * C114 + (C5484 + C5485) * C48184) * C31925 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48184) * C48522) *
               C48141 * C714 -
           (((C37688 + C37689) * C48184 + (C37690 + C37691) * C114) * C48522 +
            ((C37687 + C37686) * C48184 + (C37685 + C37684) * C114) * C31925) *
               C48141 * C713 -
           (((C5494 + C5495) * C48184 + (C5496 + C5497) * C114) * C48522 +
            ((C5489 + C5488) * C48184 + (C5487 + C5486) * C114) * C31925) *
               C48141 * C715 +
           (((C5781 + C5780) * C114 + (C5779 + C5778) * C48184) * C31925 +
            ((C5059 * C529 + C5055 * C548 + C5060 * C2337 + C48520 * C2338) *
                 C114 +
             (C5059 * C547 + C5055 * C559 + C5060 * C2339 + C48520 * C2340) *
                 C48184) *
                C48522) *
               C48141 * C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                 C1183 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                 C1177 -
             (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                 C1184 -
             (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                 C1178 +
             (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                 C1185 +
             (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                 C48502) *
                C31925 +
            ((C37684 + C37685) * C1183 + (C37686 + C37687) * C1177 -
             (C38154 + C38155) * C1184 - (C38156 + C38157) * C1178 +
             (C38556 + C38557) * C1185 + (C38558 + C38559) * C48502) *
                C48522) *
               C48141 * C48456 +
           (((C5289 + C5288) * C1184 -
             ((C5097 + C5096) * C1177 + (C5095 + C5094) * C1183) +
             (C5291 + C5290) * C1178 - (C5293 + C5292) * C1185 -
             (C5295 + C5294) * C48502) *
                C31925 +
            ((C5992 + C5993) * C1184 -
             ((C5485 + C5484) * C1177 + (C5483 + C5482) * C1183) +
             (C5994 + C5995) * C1178 - (C6734 + C6735) * C1185 -
             (C6736 + C6737) * C48502) *
                C48522) *
               C48141 * C48166) *
              C48471 +
          ((((C38155 + C38154) * C1184 -
             ((C37687 + C37686) * C1177 + (C37685 + C37684) * C1183) +
             (C38157 + C38156) * C1178 - (C38557 + C38556) * C1185 -
             (C38559 + C38558) * C48502) *
                C31925 +
            ((C38560 + C38561) * C1184 -
             ((C37688 + C37689) * C1177 + (C37690 + C37691) * C1183) +
             (C38562 + C38563) * C1178 - (C38564 + C38565) * C1185 -
             (C38566 + C38567) * C48502) *
                C48522) *
               C48141 * C48456 +
           (((C5482 + C5483) * C1183 + (C5484 + C5485) * C1177 -
             (C5993 + C5992) * C1184 - (C5995 + C5994) * C1178 +
             (C6735 + C6734) * C1185 + (C6737 + C6736) * C48502) *
                C31925 +
            ((C5490 + C5491) * C1183 + (C5492 + C5493) * C1177 -
             (C7460 + C7461) * C1184 - (C7462 + C7463) * C1178 +
             (C5059 * C1423 + C5055 * C1438 + C5060 * C6382 + C48520 * C6385) *
                 C1185 +
             (C5059 * C1439 + C5055 * C1450 + C5060 * C6386 + C48520 * C6388) *
                 C48502) *
                C48522) *
               C48141 * C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48184) *
               C31925 +
           ((C5059 * C524 + C5055 * C538 + C5060 * C1013 + C48520 * C1018) *
                C114 +
            (C5059 * C537 + C5055 * C554 + C5060 * C1019 + C48520 * C1028) *
                C48184) *
               C48522) *
              C48141 * C107 -
          (((C5485 + C5484) * C48184 + (C5483 + C5482) * C114) * C48522 +
           ((C5097 + C5096) * C48184 + (C5095 + C5094) * C114) * C31925) *
              C48141 * C108 +
          (((C5101 + C5100) * C114 + (C5099 + C5098) * C48184) * C31925 +
           ((C5486 + C5487) * C114 + (C5488 + C5489) * C48184) * C48522) *
              C48141 * C109 -
          (((C5778 + C5779) * C48184 + (C5780 + C5781) * C114) * C48522 +
           ((C5105 + C5104) * C48184 + (C5103 + C5102) * C114) * C31925) *
              C48141 * C110 +
          (((C5109 + C5108) * C114 + (C5107 + C5106) * C48184) * C31925 +
           ((C5059 * C525 + C5055 * C540 + C5060 * C1017 + C48520 * C1026) *
                C114 +
            (C5059 * C539 + C5055 * C555 + C5060 * C1027 + C48520 * C1032) *
                C48184) *
               C48522) *
              C48141 * C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C305 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C48541 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C306 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C48529 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C307 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C31925 +
           ((C5059 * C524 + C5055 * C538 + C5060 * C1013 + C48520 * C1018) *
                C305 +
            (C5059 * C537 + C5055 * C554 + C5060 * C1019 + C48520 * C1028) *
                C48541 -
            (C5060 * C1417 + C48520 * C1426 + C5059 * C1013 + C5055 * C1018) *
                C306 -
            (C5060 * C1427 + C48520 * C1444 + C5059 * C1019 + C5055 * C1028) *
                C48529 +
            (C5059 * C1417 + C5055 * C1426 + C5060 * C1865 + C48520 * C1868) *
                C307 +
            (C5059 * C1427 + C5055 * C1444 + C5060 * C1869 + C48520 * C1874) *
                C48502) *
               C48522) *
              C48141 * C302 +
          (((C5289 + C5288) * C306 -
            ((C5097 + C5096) * C48541 + (C5095 + C5094) * C305) +
            (C5291 + C5290) * C48529 - (C5293 + C5292) * C307 -
            (C5295 + C5294) * C48502) *
               C31925 +
           ((C5992 + C5993) * C306 -
            ((C5485 + C5484) * C48541 + (C5483 + C5482) * C305) +
            (C5994 + C5995) * C48529 - (C6734 + C6735) * C307 -
            (C6736 + C6737) * C48502) *
               C48522) *
              C48141 * C303 +
          (((C5101 + C5100) * C305 + (C5099 + C5098) * C48541 -
            (C5297 + C5296) * C306 - (C5299 + C5298) * C48529 +
            (C5301 + C5300) * C307 + (C5303 + C5302) * C48502) *
               C31925 +
           ((C5486 + C5487) * C305 + (C5488 + C5489) * C48541 -
            (C5996 + C5997) * C306 - (C5998 + C5999) * C48529 +
            (C5059 * C1419 + C5055 * C1430 + C5060 * C1867 + C48520 * C1872) *
                C307 +
            (C5059 * C1431 + C5055 * C1446 + C5060 * C1873 + C48520 * C1876) *
                C48502) *
               C48522) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
                C1183 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
                C1177 -
            (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
                C1184 -
            (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
                C1178 +
            (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
                C1185 +
            (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
                C48502) *
               C31925 +
           ((C37684 + C37685) * C1183 + (C37686 + C37687) * C1177 -
            (C38154 + C38155) * C1184 - (C38156 + C38157) * C1178 +
            (C5059 * C1417 + C5055 * C1426 + C5060 * C1865 + C48520 * C1868) *
                C1185 +
            (C5059 * C1427 + C5055 * C1444 + C5060 * C1869 + C48520 * C1874) *
                C48502) *
               C48522) *
              C48141 * C48538 +
          (((C5289 + C5288) * C1184 -
            ((C5097 + C5096) * C1177 + (C5095 + C5094) * C1183) +
            (C5291 + C5290) * C1178 - (C5293 + C5292) * C1185 -
            (C5295 + C5294) * C48502) *
               C31925 +
           ((C5992 + C5993) * C1184 -
            ((C5485 + C5484) * C1177 + (C5483 + C5482) * C1183) +
            (C5994 + C5995) * C1178 - (C6734 + C6735) * C1185 -
            (C6736 + C6737) * C48502) *
               C48522) *
              C48141 * C48525 +
          (((C5101 + C5100) * C1183 + (C5099 + C5098) * C1177 -
            (C5297 + C5296) * C1184 - (C5299 + C5298) * C1178 +
            (C5301 + C5300) * C1185 + (C5303 + C5302) * C48502) *
               C31925 +
           ((C5486 + C5487) * C1183 + (C5488 + C5489) * C1177 -
            (C5996 + C5997) * C1184 - (C5998 + C5999) * C1178 +
            (C5059 * C1419 + C5055 * C1430 + C5060 * C1867 + C48520 * C1872) *
                C1185 +
            (C5059 * C1431 + C5055 * C1446 + C5060 * C1873 + C48520 * C1876) *
                C48502) *
               C48522) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C5059 * C115 + C5055 * C122 + C5060 * C308 + C48520 * C318) *
               C1278 +
           (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48520 * C338) *
               C1272 -
           (C5060 * C309 + C48520 * C320 + C5059 * C308 + C5055 * C318) *
               C1279 -
           (C5060 * C321 + C48520 * C339 + C5059 * C319 + C5055 * C338) *
               C1273 +
           (C5059 * C309 + C5055 * C320 + C5060 * C1283 + C48520 * C1289) *
               C1280 +
           (C5059 * C321 + C5055 * C339 + C5060 * C1290 + C48520 * C1301) *
               C1274 -
           (C5060 * C1284 + C48520 * C1291 + C5059 * C1283 + C5055 * C1289) *
               C1281 -
           (C5060 * C1292 + C48520 * C1302 + C5059 * C1290 + C5055 * C1301) *
               C1275 +
           (C5059 * C1284 + C5055 * C1291 + C5060 * C6227 + C48520 * C6229) *
               C1282 +
           (C5059 * C1292 + C5055 * C1302 + C5060 * C6230 + C48520 * C6233) *
               C1276) *
              C31925 +
          ((C37684 + C37685) * C1278 + (C37686 + C37687) * C1272 -
           (C38154 + C38155) * C1279 - (C38156 + C38157) * C1273 +
           (C5059 * C1417 + C5055 * C1426 + C5060 * C1865 + C48520 * C1868) *
               C1280 +
           (C5059 * C1427 + C5055 * C1444 + C5060 * C1869 + C48520 * C1874) *
               C1274 -
           (C5060 * C6867 + C48520 * C6869 + C5059 * C1865 + C5055 * C1868) *
               C1281 -
           (C5060 * C6870 + C48520 * C6873 + C5059 * C1869 + C5055 * C1874) *
               C1275 +
           (C5059 * C6867 + C5055 * C6869 + C5060 * C23403 + C48520 * C23404) *
               C1282 +
           (C5059 * C6870 + C5055 * C6873 + C5060 * C23405 + C48520 * C23406) *
               C1276) *
              C48522) *
         C48141 * C48156 * C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[200] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C47163 +
            (C113 * C123 + C48388 * C136) * C48243 -
            (C113 * C308 + C48388 * C318) * C47155 -
            (C113 * C319 + C48388 * C338) * C48250 +
            (C113 * C309 + C48388 * C320) * C47169 +
            (C113 * C321 + C48388 * C339) * C3121) *
               C42923 +
           (C14421 + C14422 - C14423 - C14424 + C14425 + C14426) * C42924 +
           (C16443 + C16442 - C16441 - C16444 + C16445 + C16446) * C42925) *
              C48141 * C48161 +
          ((C3131 - (C3130 + C3129) + C3132 - C3133 - C3134) * C42923 +
           C14442 * C42924 +
           (C14429 - (C14430 + C14431) + C14432 - C14433 - C14434) * C42925) *
              C48141 * C48169 +
          (C3151 * C42923 +
           (C3461 + C3460 - C3459 - C3462 + C3463 + C3464) * C42924 +
           (C594 * C47163 + C595 * C48243 - C2356 * C47155 - C2357 * C48250 +
            (C113 * C1425 + C48388 * C1442) * C47169 +
            (C113 * C1443 + C48388 * C1452) * C3121) *
               C42925) *
              C48141 * C3124) *
         C48202) /
        (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C47163 +
             (C113 * C123 + C48388 * C136) * C48243 -
             (C113 * C308 + C48388 * C318) * C47155 -
             (C113 * C319 + C48388 * C338) * C48250 +
             (C113 * C309 + C48388 * C320) * C47169 +
             (C113 * C321 + C48388 * C339) * C3121) *
                C42923 +
            (C14421 + C14422 - C14423 - C14424 + C14425 + C14426) * C42924 +
            (C16443 + C16442 - C16441 - C16444 + C16445 + C16446) * C42925) *
               C48141 * C2825 +
           ((C3131 - (C3130 + C3129) + C3132 - C3133 - C3134) * C42923 +
            C14442 * C42924 +
            (C14429 - (C14430 + C14431) + C14432 - C14433 - C14434) * C42925) *
               C48141 * C48166) *
              C48471 +
          (((C14423 - (C14422 + C14421) + C14424 - C14425 - C14426) * C42923 +
            (C16441 - (C16442 + C16443) + C16444 - C16445 - C16446) * C42924 +
            (C13394 * C47155 - (C12901 * C48243 + C12900 * C47163) +
             C13395 * C48250 - C43782 * C47169 - C43783 * C3121) *
                C42925) *
               C48141 * C2825 +
           (C14441 * C42923 +
            (C14431 + C14430 - C14429 - C14432 + C14433 + C14434) * C42924 +
            (C2476 * C47163 + C2477 * C48243 - C13120 * C47155 -
             C13121 * C48250 + (C113 * C7736 + C48388 * C7739) * C47169 +
             (C113 * C7740 + C48388 * C7742) * C3121) *
                C42925) *
               C48141 * C48166) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C2827 +
            (C113 * C123 + C48388 * C136) * C48548 -
            (C113 * C308 + C48388 * C318) * C2828 -
            (C113 * C319 + C48388 * C338) * C48544 +
            (C113 * C309 + C48388 * C320) * C2829 +
            (C113 * C321 + C48388 * C339) * C48534 -
            (C113 * C1283 + C48388 * C1289) * C2830 -
            (C113 * C1290 + C48388 * C1301) * C48512) *
               C42923 +
           (C15765 + C15766 - C15767 - C15768 + C15769 + C15770 - C15771 -
            C15772) *
               C42924 +
           (C11101 * C2827 + C11100 * C48548 - C11982 * C2828 -
            C11983 * C48544 + C11984 * C2829 + C11985 * C48534 -
            C44141 * C2830 - C44142 * C48512) *
               C42925) *
              C48141 * C2825 +
          ((C2834 - (C2833 + C2832) + C2835 - C2836 - C2837 + C2838 + C2839) *
               C42923 +
           (C13660 - (C13659 + C13658) + C13661 - C13662 - C13663 + C13664 +
            C13665) *
               C42924 +
           (C2354 * C2828 - (C593 * C48548 + C592 * C2827) + C2355 * C48544 -
            C11986 * C2829 - C11987 * C48534 +
            (C113 * C6382 + C48388 * C6385) * C2830 +
            (C113 * C6386 + C48388 * C6388) * C48512) *
               C42925) *
              C48141 * C48166) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C2697 +
            (C113 * C123 + C48388 * C136) * C2691 -
            (C113 * C308 + C48388 * C318) * C2698 -
            (C113 * C319 + C48388 * C338) * C48247) *
               C42923 +
           (C13860 + C13861 - C13862 - C13863) * C42924 +
           (C13868 + C13867 - C13866 - C13869) * C42925) *
              C48141 * C48547 +
          ((C2702 - (C2701 + C2700) + C2703) * C42923 + C13881 * C42924 +
           C13882 * C42925) *
              C48141 * C48540 +
          (C2720 * C42923 + C14226 * C42924 +
           (C3006 + C3007 - C3008 - C3009) * C42925) *
              C48141 * C48527 +
          (C2721 * C42923 + (C3302 - (C3301 + C3300) + C3303) * C42924 +
           ((C113 * C2337 + C48388 * C2338) * C2698 -
            (C596 * C2691 + C597 * C2697) +
            (C113 * C2339 + C48388 * C2340) * C48247) *
               C42925) *
              C48141 * C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2697 +
             (C113 * C123 + C48388 * C136) * C2691 -
             (C113 * C308 + C48388 * C318) * C2698 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C42923 +
            (C13860 + C13861 - C13862 - C13863) * C42924 + C45154 * C42925) *
               C48141 * C2825 +
           ((C2702 - (C2701 + C2700) + C2703) * C42923 + C13881 * C42924 +
            C13882 * C42925) *
               C48141 * C48166) *
              C48542 +
          (((C13862 - (C13861 + C13860) + C13863) * C42923 +
            (C13866 - (C13867 + C13868) + C13869) * C42924 +
            (C15905 - (C15904 + C15903) + C15906) * C42925) *
               C48141 * C2825 +
           (C13880 * C42923 + C13883 * C42924 +
            (C13872 + C13873 - C13874 - C13875) * C42925) *
               C48141 * C48166) *
              C48531 +
          ((C45154 * C42923 + (C15903 + C15904 - C15905 - C15906) * C42924 +
            (C12905 * C2697 + C12904 * C2691 - C44805 * C2698 -
             C44806 * C48247) *
                C42925) *
               C48141 * C2825 +
           (C13882 * C42923 + (C13874 - (C13873 + C13872) + C13875) * C42924 +
            ((C113 * C7250 + C48388 * C7253) * C2698 -
             (C12902 * C2691 + C12903 * C2697) +
             (C113 * C7254 + C48388 * C7256) * C48247) *
                C42925) *
               C48141 * C48166) *
              C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2697 +
             (C113 * C123 + C48388 * C136) * C2691 -
             (C113 * C308 + C48388 * C318) * C2698 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C42923 +
            (C13860 + C13861 - C13862 - C13863) * C42924 + C45154 * C42925) *
               C48141 * C48161 +
           ((C2702 - (C2701 + C2700) + C2703) * C42923 + C13881 * C42924 +
            C13882 * C42925) *
               C48141 * C48169 +
           (C2720 * C42923 + C14226 * C42924 +
            (C3006 + C3007 - C3008 - C3009) * C42925) *
               C48141 * C3124) *
              C48471 +
          (((C13862 - (C13861 + C13860) + C13863) * C42923 +
            (C13866 - (C13867 + C13868) + C13869) * C42924 +
            (C15905 - (C15904 + C15903) + C15906) * C42925) *
               C48141 * C48161 +
           (C13880 * C42923 + C13883 * C42924 +
            (C13872 + C13873 - C13874 - C13875) * C42925) *
               C48141 * C48169 +
           (C3305 * C42923 + (C3008 - (C3007 + C3006) + C3009) * C42924 +
            ((C113 * C2583 + C48388 * C2588) * C2698 -
             (C2479 * C2691 + C2478 * C2697) +
             (C113 * C2589 + C48388 * C2592) * C48247) *
                C42925) *
               C48141 * C3124) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C2697 +
            (C113 * C123 + C48388 * C136) * C2691 -
            (C113 * C308 + C48388 * C318) * C2698 -
            (C113 * C319 + C48388 * C338) * C48247) *
               C42923 +
           (C13860 + C13861 - C13862 - C13863) * C42924 +
           (C13868 + C13867 - C13866 - C13869) * C42925) *
              C48141 * C48547 +
          ((C2702 - (C2701 + C2700) + C2703) * C42923 + C13881 * C42924 +
           C13882 * C42925) *
              C48141 * C48540 +
          (C2720 * C42923 + C14226 * C42924 +
           (C3006 + C3007 - C3008 - C3009) * C42925) *
              C48141 * C48527 +
          (C2721 * C42923 + (C3302 - (C3301 + C3300) + C3303) * C42924 +
           ((C113 * C2337 + C48388 * C2338) * C2698 -
            (C596 * C2691 + C597 * C2697) +
            (C113 * C2339 + C48388 * C2340) * C48247) *
               C42925) *
              C48141 * C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C2827 +
            (C113 * C123 + C48388 * C136) * C48548 -
            (C113 * C308 + C48388 * C318) * C2828 -
            (C113 * C319 + C48388 * C338) * C48544 +
            (C113 * C309 + C48388 * C320) * C2829 +
            (C113 * C321 + C48388 * C339) * C48534 -
            (C113 * C1283 + C48388 * C1289) * C2830 -
            (C113 * C1290 + C48388 * C1301) * C48512) *
               C42923 +
           (C15765 + C15766 - C15767 - C15768 + C15769 + C15770 - C15771 -
            C15772) *
               C42924 +
           (C11101 * C2827 + C11100 * C48548 - C11982 * C2828 -
            C11983 * C48544 + C11984 * C2829 + C11985 * C48534 -
            C44141 * C2830 - C44142 * C48512) *
               C42925) *
              C48141 * C2825 +
          ((C2834 - (C2833 + C2832) + C2835 - C2836 - C2837 + C2838 + C2839) *
               C42923 +
           (C13660 - (C13659 + C13658) + C13661 - C13662 - C13663 + C13664 +
            C13665) *
               C42924 +
           (C2354 * C2828 - (C593 * C48548 + C592 * C2827) + C2355 * C48544 -
            C11986 * C2829 - C11987 * C48534 +
            (C113 * C6382 + C48388 * C6385) * C2830 +
            (C113 * C6386 + C48388 * C6388) * C48512) *
               C42925) *
              C48141 * C48166) *
         C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C47163 +
             (C113 * C123 + C48388 * C136) * C48243 -
             (C113 * C308 + C48388 * C318) * C47155 -
             (C113 * C319 + C48388 * C338) * C48250 +
             (C113 * C309 + C48388 * C320) * C47169 +
             (C113 * C321 + C48388 * C339) * C3121) *
                C42923 +
            (C14421 + C14422 - C14423 - C14424 + C14425 + C14426) * C42924 +
            (C16443 + C16442 - C16441 - C16444 + C16445 + C16446) * C42925) *
               C48141 * C48456 +
           ((C3131 - (C3130 + C3129) + C3132 - C3133 - C3134) * C42923 +
            C14442 * C42924 +
            (C14429 - (C14430 + C14431) + C14432 - C14433 - C14434) * C42925) *
               C48141 * C48166) *
              C3562 +
          (((C14423 - (C14422 + C14421) + C14424 - C14425 - C14426) * C42923 +
            (C16441 - (C16442 + C16443) + C16444 - C16445 - C16446) * C42924 +
            (C13394 * C47155 - (C12901 * C48243 + C12900 * C47163) +
             C13395 * C48250 - C43782 * C47169 - C43783 * C3121) *
                C42925) *
               C48141 * C48456 +
           (C14441 * C42923 +
            (C14431 + C14430 - C14429 - C14432 + C14433 + C14434) * C42924 +
            (C2476 * C47163 + C2477 * C48243 - C13120 * C47155 -
             C13121 * C48250 + (C113 * C7736 + C48388 * C7739) * C47169 +
             (C113 * C7740 + C48388 * C7742) * C3121) *
                C42925) *
               C48141 * C48166) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C47163 +
            (C113 * C123 + C48388 * C136) * C48243 -
            (C113 * C308 + C48388 * C318) * C47155 -
            (C113 * C319 + C48388 * C338) * C48250 +
            (C113 * C309 + C48388 * C320) * C47169 +
            (C113 * C321 + C48388 * C339) * C3121) *
               C42923 +
           (C14421 + C14422 - C14423 - C14424 + C14425 + C14426) * C42924 +
           C47070 * C42925) *
              C48141 * C48156 * C48285 +
          ((C14423 - (C14422 + C14421) + C14424 - C14425 - C14426) * C42923 +
           (C16441 - (C16442 + C16443) + C16444 - C16445 - C16446) * C42924 +
           (C47061 - (C47062 + C47063) + C47064 - C47065 - C47066) * C42925) *
              C48141 * C48156 * C48292 +
          (C47070 * C42923 +
           (C47063 + C47062 - C47061 - C47064 + C47065 + C47066) * C42924 +
           (C12905 * C47163 + C12904 * C48243 - C44805 * C47155 -
            C44806 * C48250 + (C113 * C23689 + C48388 * C23690) * C47169 +
            (C113 * C23691 + C48388 * C23692) * C3121) *
               C42925) *
              C48141 * C48156 * C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C2827 +
            (C113 * C123 + C48388 * C136) * C48548 -
            (C113 * C308 + C48388 * C318) * C2828 -
            (C113 * C319 + C48388 * C338) * C48544 +
            (C113 * C309 + C48388 * C320) * C2829 +
            (C113 * C321 + C48388 * C339) * C48534 -
            (C113 * C1283 + C48388 * C1289) * C2830 -
            (C113 * C1290 + C48388 * C1301) * C48512) *
               C42923 +
           (C15765 + C15766 - C15767 - C15768 + C15769 + C15770 - C15771 -
            C15772) *
               C42924 +
           (C46545 + C46546 - C46547 - C46548 + C46549 + C46550 - C46551 -
            C46552) *
               C42925) *
              C48141 * C48156 * C3562 +
          ((C15767 - (C15766 + C15765) + C15768 - C15769 - C15770 + C15771 +
            C15772) *
               C42923 +
           (C46547 - (C46546 + C46545) + C46548 - C46549 - C46550 + C46551 +
            C46552) *
               C42924 +
           (C13394 * C2828 - (C12901 * C48548 + C12900 * C2827) +
            C13395 * C48544 - C43782 * C2829 - C43783 * C48534 +
            (C113 * C24035 + C48388 * C24036) * C2830 +
            (C113 * C24037 + C48388 * C24038) * C48512) *
               C42925) *
              C48141 * C48156 * C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2697 +
             (C113 * C123 + C48388 * C136) * C2691 -
             (C113 * C308 + C48388 * C318) * C2698 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C42923 +
            (C13860 + C13861 - C13862 - C13863) * C42924 + C45154 * C42925) *
               C48141 * C48538 +
           ((C2702 - (C2701 + C2700) + C2703) * C42923 + C13881 * C42924 +
            C13882 * C42925) *
               C48141 * C48525 +
           (C2720 * C42923 + C14226 * C42924 +
            (C3006 + C3007 - C3008 - C3009) * C42925) *
               C48141 * C48496) *
              C3562 +
          (((C13862 - (C13861 + C13860) + C13863) * C42923 +
            (C13866 - (C13867 + C13868) + C13869) * C42924 +
            (C15905 - (C15904 + C15903) + C15906) * C42925) *
               C48141 * C48538 +
           (C13880 * C42923 + C13883 * C42924 +
            (C13872 + C13873 - C13874 - C13875) * C42925) *
               C48141 * C48525 +
           (C3305 * C42923 + (C3008 - (C3007 + C3006) + C3009) * C42924 +
            ((C113 * C2583 + C48388 * C2588) * C2698 -
             (C2479 * C2691 + C2478 * C2697) +
             (C113 * C2589 + C48388 * C2592) * C48247) *
                C42925) *
               C48141 * C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C2697 +
            (C113 * C123 + C48388 * C136) * C2691 -
            (C113 * C308 + C48388 * C318) * C2698 -
            (C113 * C319 + C48388 * C338) * C48247) *
               C42923 +
           (C13860 + C13861 - C13862 - C13863) * C42924 + C45154 * C42925) *
              C48141 * C48156 * C48549 +
          ((C13862 - (C13861 + C13860) + C13863) * C42923 +
           (C13866 - (C13867 + C13868) + C13869) * C42924 + C46657 * C42925) *
              C48141 * C48156 * C48546 +
          (C45154 * C42923 + (C15903 + C15904 - C15905 - C15906) * C42924 +
           (C46652 + C46653 - C46654 - C46655) * C42925) *
              C48141 * C48156 * C48537 +
          (C46657 * C42923 + (C46654 - (C46653 + C46652) + C46655) * C42924 +
           ((C113 * C28385 + C48388 * C28386) * C2698 -
            (C44448 * C2691 + C44449 * C2697) +
            (C113 * C28387 + C48388 * C28388) * C48247) *
               C42925) *
              C48141 * C48156 * C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2697 +
             (C113 * C123 + C48388 * C136) * C2691 -
             (C113 * C308 + C48388 * C318) * C2698 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C42923 +
            (C13860 + C13861 - C13862 - C13863) * C42924 + C45154 * C42925) *
               C48141 * C48456 +
           ((C2702 - (C2701 + C2700) + C2703) * C42923 + C13881 * C42924 +
            C13882 * C42925) *
               C48141 * C48166) *
              C48285 +
          (((C13862 - (C13861 + C13860) + C13863) * C42923 +
            (C13866 - (C13867 + C13868) + C13869) * C42924 + C46657 * C42925) *
               C48141 * C48456 +
           (C13880 * C42923 + C13883 * C42924 +
            (C13872 + C13873 - C13874 - C13875) * C42925) *
               C48141 * C48166) *
              C48292 +
          ((C45154 * C42923 + (C15903 + C15904 - C15905 - C15906) * C42924 +
            (C46652 + C46653 - C46654 - C46655) * C42925) *
               C48141 * C48456 +
           (C13882 * C42923 + (C13874 - (C13873 + C13872) + C13875) * C42924 +
            ((C113 * C7250 + C48388 * C7253) * C2698 -
             (C12902 * C2691 + C12903 * C2697) +
             (C113 * C7254 + C48388 * C7256) * C48247) *
                C42925) *
               C48141 * C48166) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C2697 +
             (C113 * C123 + C48388 * C136) * C2691 -
             (C113 * C308 + C48388 * C318) * C2698 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C42923 +
            (C13860 + C13861 - C13862 - C13863) * C42924 + C45154 * C42925) *
               C48141 * C48538 +
           ((C2702 - (C2701 + C2700) + C2703) * C42923 + C13881 * C42924 +
            C13882 * C42925) *
               C48141 * C48525 +
           (C2720 * C42923 + C14226 * C42924 +
            (C3006 + C3007 - C3008 - C3009) * C42925) *
               C48141 * C48496) *
              C3562 +
          (((C13862 - (C13861 + C13860) + C13863) * C42923 +
            (C13866 - (C13867 + C13868) + C13869) * C42924 +
            (C15905 - (C15904 + C15903) + C15906) * C42925) *
               C48141 * C48538 +
           (C13880 * C42923 + C13883 * C42924 +
            (C13872 + C13873 - C13874 - C13875) * C42925) *
               C48141 * C48525 +
           (C3305 * C42923 + (C3008 - (C3007 + C3006) + C3009) * C42924 +
            ((C113 * C2583 + C48388 * C2588) * C2698 -
             (C2479 * C2691 + C2478 * C2697) +
             (C113 * C2589 + C48388 * C2592) * C48247) *
                C42925) *
               C48141 * C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C2827 +
            (C113 * C123 + C48388 * C136) * C48548 -
            (C113 * C308 + C48388 * C318) * C2828 -
            (C113 * C319 + C48388 * C338) * C48544 +
            (C113 * C309 + C48388 * C320) * C2829 +
            (C113 * C321 + C48388 * C339) * C48534 -
            (C113 * C1283 + C48388 * C1289) * C2830 -
            (C113 * C1290 + C48388 * C1301) * C48512) *
               C42923 +
           (C15765 + C15766 - C15767 - C15768 + C15769 + C15770 - C15771 -
            C15772) *
               C42924 +
           (C46545 + C46546 - C46547 - C46548 + C46549 + C46550 - C46551 -
            C46552) *
               C42925) *
              C48141 * C48156 * C3562 +
          ((C15767 - (C15766 + C15765) + C15768 - C15769 - C15770 + C15771 +
            C15772) *
               C42923 +
           (C46547 - (C46546 + C46545) + C46548 - C46549 - C46550 + C46551 +
            C46552) *
               C42924 +
           (C13394 * C2828 - (C12901 * C48548 + C12900 * C2827) +
            C13395 * C48544 - C43782 * C2829 - C43783 * C48534 +
            (C113 * C24035 + C48388 * C24036) * C2830 +
            (C113 * C24037 + C48388 * C24038) * C48512) *
               C42925) *
              C48141 * C48156 * C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1557 +
            (C113 * C123 + C48388 * C136) * C1551 -
            (C113 * C308 + C48388 * C318) * C1558 -
            (C113 * C319 + C48388 * C338) * C1552 +
            (C113 * C309 + C48388 * C320) * C1559 +
            (C113 * C321 + C48388 * C339) * C1553 -
            (C113 * C1283 + C48388 * C1289) * C1560 -
            (C113 * C1290 + C48388 * C1301) * C48512) *
               C42923 +
           (C12474 + C12475 - C12476 - C12477 + C12478 + C12479 - C12486 -
            C12487) *
               C42924 +
           (C11101 * C1557 + C11100 * C1551 - C11982 * C1558 - C11983 * C1552 +
            C11984 * C1559 + C11985 * C1553 -
            (C113 * C6381 + C48388 * C6383) * C1560 -
            (C113 * C6384 + C48388 * C6387) * C48512) *
               C42925) *
              C48141 * C48456 +
          ((C1568 - (C1567 + C1566) + C1569 - C1570 - C1571 + C1590 + C1591) *
               C42923 +
           (C12128 - (C12127 + C12126) + C12129 - C12130 - C12131 + C12138 +
            C12139) *
               C42924 +
           (C2354 * C1558 - (C593 * C1551 + C592 * C1557) + C2355 * C1552 -
            C11986 * C1559 - C11987 * C1553 +
            (C113 * C6382 + C48388 * C6385) * C1560 +
            (C113 * C6386 + C48388 * C6388) * C48512) *
               C42925) *
              C48141 * C48166) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C717 +
            (C113 * C123 + C48388 * C136) * C48470 -
            (C113 * C308 + C48388 * C318) * C718 -
            (C113 * C319 + C48388 * C338) * C48247) *
               C42923 +
           (C11561 + C11562 - C11575 - C11576) * C42924 +
           (C13108 + C13107 - C13106 - C13109) * C42925) *
              C48141 * C713 +
          ((C726 - (C725 + C724) + C727) * C42923 + C11578 * C42924 +
           C13122 * C42925) *
              C48141 * C714 +
          (C750 * C42923 + C11579 * C42924 +
           (C2348 + C2349 - C2360 - C2361) * C42925) *
              C48141 * C715 +
          (C751 * C42923 + (C1063 - (C1047 + C1046) + C1064) * C42924 +
           ((C113 * C2337 + C48388 * C2338) * C718 -
            (C596 * C48470 + C597 * C717) +
            (C113 * C2339 + C48388 * C2340) * C48247) *
               C42925) *
              C48141 * C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C717 +
             (C113 * C123 + C48388 * C136) * C48470 -
             (C113 * C308 + C48388 * C318) * C718 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C42923 +
            (C11561 + C11562 - C11575 - C11576) * C42924 + C44600 * C42925) *
               C48141 * C48456 +
           ((C726 - (C725 + C724) + C727) * C42923 + C11578 * C42924 +
            C13122 * C42925) *
               C48141 * C48166) *
              C1987 +
          (((C11575 - (C11562 + C11561) + C11576) * C42923 +
            (C13106 - (C13107 + C13108) + C13109) * C42924 +
            (C13396 - (C13389 + C13388) + C13397) * C42925) *
               C48141 * C48456 +
           (C11577 * C42923 + C13123 * C42924 +
            (C13112 + C13113 - C13124 - C13125) * C42925) *
               C48141 * C48166) *
              C1988 +
          ((C44600 * C42923 + (C13388 + C13389 - C13396 - C13397) * C42924 +
            (C12905 * C717 + C12904 * C48470 -
             (C113 * C7249 + C48388 * C7251) * C718 -
             (C113 * C7252 + C48388 * C7255) * C48247) *
                C42925) *
               C48141 * C48456 +
           (C13122 * C42923 + (C13124 - (C13113 + C13112) + C13125) * C42924 +
            ((C113 * C7250 + C48388 * C7253) * C718 -
             (C12902 * C48470 + C12903 * C717) +
             (C113 * C7254 + C48388 * C7256) * C48247) *
                C42925) *
               C48141 * C48166) *
              C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1557 +
            (C113 * C123 + C48388 * C136) * C1551 -
            (C113 * C308 + C48388 * C318) * C1558 -
            (C113 * C319 + C48388 * C338) * C1552 +
            (C113 * C309 + C48388 * C320) * C1559 +
            (C113 * C321 + C48388 * C339) * C1553 -
            (C113 * C1283 + C48388 * C1289) * C1560 -
            (C113 * C1290 + C48388 * C1301) * C48512) *
               C42923 +
           (C12474 + C12475 - C12476 - C12477 + C12478 + C12479 - C12486 -
            C12487) *
               C42924 +
           (C44131 + C44132 - C44133 - C44134 + C44135 + C44136 - C44143 -
            C44144) *
               C42925) *
              C48141 * C48156 * C48471 +
          ((C12476 - (C12475 + C12474) + C12477 - C12478 - C12479 + C12486 +
            C12487) *
               C42923 +
           (C44133 - (C44132 + C44131) + C44134 - C44135 - C44136 + C44143 +
            C44144) *
               C42924 +
           (C13394 * C1558 - (C12901 * C1551 + C12900 * C1557) +
            C13395 * C1552 - C43782 * C1559 - C43783 * C1553 +
            (C113 * C24035 + C48388 * C24036) * C1560 +
            (C113 * C24037 + C48388 * C24038) * C48512) *
               C42925) *
              C48141 * C48156 * C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C717 +
             (C113 * C123 + C48388 * C136) * C48470 -
             (C113 * C308 + C48388 * C318) * C718 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C42923 +
            (C11561 + C11562 - C11575 - C11576) * C42924 +
            (C13108 + C13107 - C13106 - C13109) * C42925) *
               C48141 * C302 +
           ((C726 - (C725 + C724) + C727) * C42923 + C11578 * C42924 +
            C13122 * C42925) *
               C48141 * C303 +
           (C750 * C42923 + C11579 * C42924 +
            (C2348 + C2349 - C2360 - C2361) * C42925) *
               C48141 * C48496) *
              C48471 +
          (((C11575 - (C11562 + C11561) + C11576) * C42923 +
            (C13106 - (C13107 + C13108) + C13109) * C42924 +
            (C13396 - (C13389 + C13388) + C13397) * C42925) *
               C48141 * C302 +
           (C11577 * C42923 + C13123 * C42924 +
            (C13112 + C13113 - C13124 - C13125) * C42925) *
               C48141 * C303 +
           (C1066 * C42923 + (C2360 - (C2349 + C2348) + C2361) * C42924 +
            ((C113 * C2583 + C48388 * C2588) * C718 -
             (C2479 * C48470 + C2478 * C717) +
             (C113 * C2589 + C48388 * C2592) * C48247) *
                C42925) *
               C48141 * C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C717 +
            (C113 * C123 + C48388 * C136) * C48470 -
            (C113 * C308 + C48388 * C318) * C718 -
            (C113 * C319 + C48388 * C338) * C48247) *
               C42923 +
           (C11561 + C11562 - C11575 - C11576) * C42924 + C44600 * C42925) *
              C48141 * C48156 * C2459 +
          ((C11575 - (C11562 + C11561) + C11576) * C42923 +
           (C13106 - (C13107 + C13108) + C13109) * C42924 + C44807 * C42925) *
              C48141 * C48156 * C2460 +
          (C44600 * C42923 + (C13388 + C13389 - C13396 - C13397) * C42924 +
           (C44798 + C44799 - C44808 - C44809) * C42925) *
              C48141 * C48156 * C2461 +
          (C44807 * C42923 + (C44808 - (C44799 + C44798) + C44809) * C42924 +
           ((C113 * C28385 + C48388 * C28386) * C718 -
            (C44448 * C48470 + C44449 * C717) +
            (C113 * C28387 + C48388 * C28388) * C48247) *
               C42925) *
              C48141 * C48156 * C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C48388 * C122) * C114 +
                (C113 * C123 + C48388 * C136) * C48184) *
                   C42923 +
               (C11102 + C11103) * C42924 + (C11105 + C11104) * C42925) *
                  C48141 * C107 -
              (C11092 * C42925 + C11089 * C42924 + (C175 + C174) * C42923) *
                  C48141 * C108 +
              (C184 * C42923 + C11090 * C42924 + C611 * C42925) * C48141 *
                  C109 -
              ((C608 + C609) * C42925 + C11366 * C42924 + C185 * C42923) *
                  C48141 * C110 +
              (C186 * C42923 + (C867 + C866) * C42924 +
               ((C113 * C530 + C48388 * C549) * C114 +
                (C113 * C550 + C48388 * C560) * C48184) *
                   C42925) *
                  C48141 * C111) *
             C48202 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C48388 * C122) * C305 +
                (C113 * C123 + C48388 * C136) * C48541 -
                (C113 * C308 + C48388 * C318) * C306 -
                (C113 * C319 + C48388 * C338) * C48529 +
                (C113 * C309 + C48388 * C320) * C307 +
                (C113 * C321 + C48388 * C339) * C48502) *
                   C42923 +
               (C12780 + C12781 - C12782 - C12783 + C12784 + C12785) * C42924 +
               (C12788 + C12787 - C12786 - C12789 + C12790 + C12791) * C42925) *
                  C48141 * C302 +
              ((C392 - (C350 + C349) + C393 - C394 - C395) * C42923 +
               C14776 * C42924 +
               (C12792 - (C12793 + C12794) + C12795 - C12796 - C12797) *
                   C42925) *
                  C48141 * C303 +
              (C407 * C42923 +
               (C3719 + C3718 - C3717 - C3720 + C3721 + C3722) * C42924 +
               (C594 * C305 + C595 * C48541 - C2356 * C306 - C2357 * C48529 +
                (C113 * C1425 + C48388 * C1442) * C307 +
                (C113 * C1443 + C48388 * C1452) * C48502) *
                   C42925) *
                  C48141 * C48496) *
             C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C42923 +
            (C11102 + C11103) * C42924 + C43147 * C42925) *
               C48141 * C302 -
           (C11092 * C42925 + C11089 * C42924 + (C175 + C174) * C42923) *
               C48141 * C303 +
           (C184 * C42923 + C11090 * C42924 + C611 * C42925) * C48141 *
               C48496) *
              C48542 +
          ((C11088 * C42923 + C11091 * C42924 + C13256 * C42925) * C48141 *
               C303 -
           ((C12907 + C12906) * C42925 + (C11104 + C11105) * C42924 +
            (C11103 + C11102) * C42923) *
               C48141 * C302 -
           ((C2483 + C2482) * C42925 + C11097 * C42924 + C610 * C42923) *
               C48141 * C48496) *
              C48531 +
          ((C43147 * C42923 + (C12906 + C12907) * C42924 +
            (C12911 + C12910) * C42925) *
               C48141 * C302 -
           ((C12908 + C12909) * C42925 + C13257 * C42924 + C11092 * C42923) *
               C48141 * C303 +
           (C611 * C42923 + (C2482 + C2483) * C42924 +
            ((C113 * C2172 + C48388 * C2183) * C114 +
             (C113 * C2184 + C48388 * C2190) * C48184) *
                C42925) *
               C48141 * C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1183 +
            (C113 * C123 + C48388 * C136) * C1177 -
            (C113 * C308 + C48388 * C318) * C1184 -
            (C113 * C319 + C48388 * C338) * C1178 +
            (C113 * C309 + C48388 * C320) * C1185 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C42923 +
           (C11954 + C11955 - C11956 - C11957 + C11988 + C11989) * C42924 +
           (C11965 + C11964 - C11990 - C11991 + C11992 + C11993) * C42925) *
              C48141 * C48538 +
          ((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C42923 +
           C12343 * C42924 +
           (C11972 - (C11973 + C11974) + C11975 - C11994 - C11995) * C42925) *
              C48141 * C48525 +
          (C1209 * C42923 +
           (C1754 + C1753 - C1752 - C1755 + C1766 + C1767) * C42924 +
           (C594 * C1183 + C595 * C1177 - C2356 * C1184 - C2357 * C1178 +
            (C113 * C1425 + C48388 * C1442) * C1185 +
            (C113 * C1443 + C48388 * C1452) * C48502) *
               C42925) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48388 * C122) * C1278 +
           (C113 * C123 + C48388 * C136) * C1272 -
           (C113 * C308 + C48388 * C318) * C1279 -
           (C113 * C319 + C48388 * C338) * C1273 +
           (C113 * C309 + C48388 * C320) * C1280 +
           (C113 * C321 + C48388 * C339) * C1274 -
           (C113 * C1283 + C48388 * C1289) * C1281 -
           (C113 * C1290 + C48388 * C1301) * C1275 +
           (C113 * C1284 + C48388 * C1291) * C1282 +
           (C113 * C1292 + C48388 * C1302) * C1276) *
              C42923 +
          (C11098 * C1278 + C11099 * C1272 - C11570 * C1279 - C11571 * C1273 +
           C11980 * C1280 + C11981 * C1274 - C12484 * C1281 - C12485 * C1275 +
           (C113 * C6867 + C48388 * C6869) * C1282 +
           (C113 * C6870 + C48388 * C6873) * C1276) *
              C42924 +
          (C11101 * C1278 + C11100 * C1272 - C11982 * C1279 - C11983 * C1273 +
           C11984 * C1280 + C11985 * C1274 -
           (C113 * C6381 + C48388 * C6383) * C1281 -
           (C113 * C6384 + C48388 * C6387) * C1275 +
           (C113 * C23057 + C48388 * C23058) * C1282 +
           (C113 * C23059 + C48388 * C23060) * C1276) *
              C42925) *
         C48141 * C48156 * C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1183 +
            (C113 * C123 + C48388 * C136) * C1177 -
            (C113 * C308 + C48388 * C318) * C1184 -
            (C113 * C319 + C48388 * C338) * C1178 +
            (C113 * C309 + C48388 * C320) * C1185 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C42923 +
           (C11954 + C11955 - C11956 - C11957 + C11988 + C11989) * C42924 +
           C43788 * C42925) *
              C48141 * C48156 * C48542 +
          ((C11956 - (C11955 + C11954) + C11957 - C11988 - C11989) * C42923 +
           (C11990 - (C11964 + C11965) + C11991 - C11992 - C11993) * C42924 +
           (C43773 - (C43774 + C43775) + C43776 - C43785 - C43786) * C42925) *
              C48141 * C48156 * C48531 +
          (C43788 * C42923 +
           (C43775 + C43774 - C43773 - C43776 + C43785 + C43786) * C42924 +
           (C12905 * C1183 + C12904 * C1177 -
            (C113 * C7249 + C48388 * C7251) * C1184 -
            (C113 * C7252 + C48388 * C7255) * C1178 +
            (C113 * C23689 + C48388 * C23690) * C1185 +
            (C113 * C23691 + C48388 * C23692) * C48502) *
               C42925) *
              C48141 * C48156 * C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C42923 +
            (C11102 + C11103) * C42924 + C43147 * C42925) *
               C48141 * C48538 -
           (C11092 * C42925 + C11089 * C42924 + (C175 + C174) * C42923) *
               C48141 * C48525 +
           (C184 * C42923 + C11090 * C42924 + C611 * C42925) * C48141 *
               C48496) *
              C1987 +
          ((C11088 * C42923 + C11091 * C42924 + C13256 * C42925) * C48141 *
               C48525 -
           ((C12907 + C12906) * C42925 + (C11104 + C11105) * C42924 +
            (C11103 + C11102) * C42923) *
               C48141 * C48538 -
           ((C2483 + C2482) * C42925 + C11097 * C42924 + C610 * C42923) *
               C48141 * C48496) *
              C1988 +
          ((C43147 * C42923 + (C12906 + C12907) * C42924 +
            (C12911 + C12910) * C42925) *
               C48141 * C48538 -
           ((C12908 + C12909) * C42925 + C13257 * C42924 + C11092 * C42923) *
               C48141 * C48525 +
           (C611 * C42923 + (C2482 + C2483) * C42924 +
            ((C113 * C2172 + C48388 * C2183) * C114 +
             (C113 * C2184 + C48388 * C2190) * C48184) *
                C42925) *
               C48141 * C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C305 +
            (C113 * C123 + C48388 * C136) * C48541 -
            (C113 * C308 + C48388 * C318) * C306 -
            (C113 * C319 + C48388 * C338) * C48529 +
            (C113 * C309 + C48388 * C320) * C307 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C42923 +
           (C12780 + C12781 - C12782 - C12783 + C12784 + C12785) * C42924 +
           C44375 * C42925) *
              C48141 * C48156 * C1987 +
          ((C12782 - (C12781 + C12780) + C12783 - C12784 - C12785) * C42923 +
           (C12786 - (C12787 + C12788) + C12789 - C12790 - C12791) * C42924 +
           (C44366 - (C44367 + C44368) + C44369 - C44370 - C44371) * C42925) *
              C48141 * C48156 * C1988 +
          (C44375 * C42923 +
           (C44368 + C44367 - C44366 - C44369 + C44370 + C44371) * C42924 +
           (C12905 * C305 + C12904 * C48541 -
            (C113 * C7249 + C48388 * C7251) * C306 -
            (C113 * C7252 + C48388 * C7255) * C48529 +
            (C113 * C23689 + C48388 * C23690) * C307 +
            (C113 * C23691 + C48388 * C23692) * C48502) *
               C42925) *
              C48141 * C48156 * C48505)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C114 +
            (C113 * C123 + C48388 * C136) * C48184) *
               C42923 +
           (C11102 + C11103) * C42924 + C43147 * C42925) *
              C48141 * C48156 * C2162 -
          (C44442 * C42925 + (C11104 + C11105) * C42924 +
           (C11103 + C11102) * C42923) *
              C48141 * C48156 * C2163 +
          (C43147 * C42923 + (C12906 + C12907) * C42924 + C44443 * C42925) *
              C48141 * C48156 * C2164 -
          ((C44450 + C44451) * C42925 + (C12910 + C12911) * C42924 +
           C44442 * C42923) *
              C48141 * C48156 * C2165 +
          (C44443 * C42923 + (C44451 + C44450) * C42924 +
           ((C113 * C44437 + C48388 * C44438) * C114 +
            (C113 * C44439 + C48388 * C44440) * C48184) *
               C42925) *
              C48141 * C48156 * C2166)) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1183 +
             (C113 * C123 + C48388 * C136) * C1177 -
             (C113 * C308 + C48388 * C318) * C1184 -
             (C113 * C319 + C48388 * C338) * C1178 +
             (C113 * C309 + C48388 * C320) * C1185 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C42923 +
            (C11954 + C11955 - C11956 - C11957 + C11988 + C11989) * C42924 +
            C43788 * C42925) *
               C48141 * C48456 +
           ((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C42923 +
            C12343 * C42924 +
            (C11972 - (C11973 + C11974) + C11975 - C11994 - C11995) * C42925) *
               C48141 * C48166) *
              C48471 +
          (((C11956 - (C11955 + C11954) + C11957 - C11988 - C11989) * C42923 +
            (C11990 - (C11964 + C11965) + C11991 - C11992 - C11993) * C42924 +
            (C43773 - (C43774 + C43775) + C43776 - C43785 - C43786) * C42925) *
               C48141 * C48456 +
           (C12342 * C42923 +
            (C11974 + C11973 - C11972 - C11975 + C11994 + C11995) * C42924 +
            (C2476 * C1183 + C2477 * C1177 - C13120 * C1184 - C13121 * C1178 +
             (C113 * C7736 + C48388 * C7739) * C1185 +
             (C113 * C7740 + C48388 * C7742) * C48502) *
                C42925) *
               C48141 * C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C42923 +
            (C11102 + C11103) * C42924 + C43147 * C42925) *
               C48141 * C713 -
           (C11092 * C42925 + C11089 * C42924 + (C175 + C174) * C42923) *
               C48141 * C714 +
           (C184 * C42923 + C11090 * C42924 + C611 * C42925) * C48141 * C715 -
           ((C608 + C609) * C42925 + C11366 * C42924 + C185 * C42923) * C48141 *
               C48506) *
              C48471 +
          ((C11088 * C42923 + C11091 * C42924 + C13256 * C42925) * C48141 *
               C714 -
           ((C12907 + C12906) * C42925 + (C11104 + C11105) * C42924 +
            (C11103 + C11102) * C42923) *
               C48141 * C713 -
           ((C2483 + C2482) * C42925 + C11097 * C42924 + C610 * C42923) *
               C48141 * C715 +
           (C858 * C42923 + (C609 + C608) * C42924 +
            ((C113 * C2463 + C48388 * C2464) * C114 +
             (C113 * C2465 + C48388 * C2466) * C48184) *
                C42925) *
               C48141 * C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C42923 +
            (C11102 + C11103) * C42924 + C43147 * C42925) *
               C48141 * C48456 -
           (C11092 * C42925 + C11089 * C42924 + (C175 + C174) * C42923) *
               C48141 * C48166) *
              C2459 +
          ((C11088 * C42923 + C11091 * C42924 + C13256 * C42925) * C48141 *
               C48166 -
           (C44442 * C42925 + (C11104 + C11105) * C42924 +
            (C11103 + C11102) * C42923) *
               C48141 * C48456) *
              C2460 +
          ((C43147 * C42923 + (C12906 + C12907) * C42924 + C44443 * C42925) *
               C48141 * C48456 -
           ((C12908 + C12909) * C42925 + C13257 * C42924 + C11092 * C42923) *
               C48141 * C48166) *
              C2461 +
          ((C13256 * C42923 + (C12909 + C12908) * C42924 +
            ((C113 * C12880 + C48388 * C12883) * C114 +
             (C113 * C12884 + C48388 * C12886) * C48184) *
                C42925) *
               C48141 * C48166 -
           ((C44450 + C44451) * C42925 + (C12910 + C12911) * C42924 +
            C44442 * C42923) *
               C48141 * C48456) *
              C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C305 +
            (C113 * C123 + C48388 * C136) * C48541 -
            (C113 * C308 + C48388 * C318) * C306 -
            (C113 * C319 + C48388 * C338) * C48529 +
            (C113 * C309 + C48388 * C320) * C307 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C42923 +
           (C12780 + C12781 - C12782 - C12783 + C12784 + C12785) * C42924 +
           (C12788 + C12787 - C12786 - C12789 + C12790 + C12791) * C42925) *
              C48141 * C302 +
          ((C392 - (C350 + C349) + C393 - C394 - C395) * C42923 +
           C14776 * C42924 +
           (C12792 - (C12793 + C12794) + C12795 - C12796 - C12797) * C42925) *
              C48141 * C303 +
          (C407 * C42923 +
           (C3719 + C3718 - C3717 - C3720 + C3721 + C3722) * C42924 +
           (C594 * C305 + C595 * C48541 - C2356 * C306 - C2357 * C48529 +
            (C113 * C1425 + C48388 * C1442) * C307 +
            (C113 * C1443 + C48388 * C1452) * C48502) *
               C42925) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C114 +
            (C113 * C123 + C48388 * C136) * C48184) *
               C42923 +
           (C11102 + C11103) * C42924 + (C11105 + C11104) * C42925) *
              C48141 * C107 -
          (C11092 * C42925 + C11089 * C42924 + (C175 + C174) * C42923) *
              C48141 * C108 +
          (C184 * C42923 + C11090 * C42924 + C611 * C42925) * C48141 * C109 -
          ((C608 + C609) * C42925 + C11366 * C42924 + C185 * C42923) * C48141 *
              C110 +
          (C186 * C42923 + (C867 + C866) * C42924 +
           ((C113 * C530 + C48388 * C549) * C114 +
            (C113 * C550 + C48388 * C560) * C48184) *
               C42925) *
              C48141 * C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1183 +
            (C113 * C123 + C48388 * C136) * C1177 -
            (C113 * C308 + C48388 * C318) * C1184 -
            (C113 * C319 + C48388 * C338) * C1178 +
            (C113 * C309 + C48388 * C320) * C1185 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C42923 +
           (C11954 + C11955 - C11956 - C11957 + C11988 + C11989) * C42924 +
           (C11965 + C11964 - C11990 - C11991 + C11992 + C11993) * C42925) *
              C48141 * C48538 +
          ((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C42923 +
           C12343 * C42924 +
           (C11972 - (C11973 + C11974) + C11975 - C11994 - C11995) * C42925) *
              C48141 * C48525 +
          (C1209 * C42923 +
           (C1754 + C1753 - C1752 - C1755 + C1766 + C1767) * C42924 +
           (C594 * C1183 + C595 * C1177 - C2356 * C1184 - C2357 * C1178 +
            (C113 * C1425 + C48388 * C1442) * C1185 +
            (C113 * C1443 + C48388 * C1452) * C48502) *
               C42925) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48388 * C122) * C1278 +
           (C113 * C123 + C48388 * C136) * C1272 -
           (C113 * C308 + C48388 * C318) * C1279 -
           (C113 * C319 + C48388 * C338) * C1273 +
           (C113 * C309 + C48388 * C320) * C1280 +
           (C113 * C321 + C48388 * C339) * C1274 -
           (C113 * C1283 + C48388 * C1289) * C1281 -
           (C113 * C1290 + C48388 * C1301) * C1275 +
           (C113 * C1284 + C48388 * C1291) * C1282 +
           (C113 * C1292 + C48388 * C1302) * C1276) *
              C42923 +
          (C11098 * C1278 + C11099 * C1272 - C11570 * C1279 - C11571 * C1273 +
           C11980 * C1280 + C11981 * C1274 - C12484 * C1281 - C12485 * C1275 +
           (C113 * C6867 + C48388 * C6869) * C1282 +
           (C113 * C6870 + C48388 * C6873) * C1276) *
              C42924 +
          (C11101 * C1278 + C11100 * C1272 - C11982 * C1279 - C11983 * C1273 +
           C11984 * C1280 + C11985 * C1274 -
           (C113 * C6381 + C48388 * C6383) * C1281 -
           (C113 * C6384 + C48388 * C6387) * C1275 +
           (C113 * C23057 + C48388 * C23058) * C1282 +
           (C113 * C23059 + C48388 * C23060) * C1276) *
              C42925) *
         C48141 * C48156 * C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C42923 +
            (C11102 + C11103) * C42924 + C43147 * C42925) *
               C48141 * C48538 -
           (C11092 * C42925 + C11089 * C42924 + (C175 + C174) * C42923) *
               C48141 * C48525 +
           (C184 * C42923 + C11090 * C42924 + C611 * C42925) * C48141 *
               C48496) *
              C1987 +
          ((C11088 * C42923 + C11091 * C42924 + C13256 * C42925) * C48141 *
               C48525 -
           ((C12907 + C12906) * C42925 + (C11104 + C11105) * C42924 +
            (C11103 + C11102) * C42923) *
               C48141 * C48538 -
           ((C2483 + C2482) * C42925 + C11097 * C42924 + C610 * C42923) *
               C48141 * C48496) *
              C1988 +
          ((C43147 * C42923 + (C12906 + C12907) * C42924 +
            (C12911 + C12910) * C42925) *
               C48141 * C48538 -
           ((C12908 + C12909) * C42925 + C13257 * C42924 + C11092 * C42923) *
               C48141 * C48525 +
           (C611 * C42923 + (C2482 + C2483) * C42924 +
            ((C113 * C2172 + C48388 * C2183) * C114 +
             (C113 * C2184 + C48388 * C2190) * C48184) *
                C42925) *
               C48141 * C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C305 +
            (C113 * C123 + C48388 * C136) * C48541 -
            (C113 * C308 + C48388 * C318) * C306 -
            (C113 * C319 + C48388 * C338) * C48529 +
            (C113 * C309 + C48388 * C320) * C307 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C42923 +
           (C12780 + C12781 - C12782 - C12783 + C12784 + C12785) * C42924 +
           C44375 * C42925) *
              C48141 * C48156 * C1987 +
          ((C12782 - (C12781 + C12780) + C12783 - C12784 - C12785) * C42923 +
           (C12786 - (C12787 + C12788) + C12789 - C12790 - C12791) * C42924 +
           (C44366 - (C44367 + C44368) + C44369 - C44370 - C44371) * C42925) *
              C48141 * C48156 * C1988 +
          (C44375 * C42923 +
           (C44368 + C44367 - C44366 - C44369 + C44370 + C44371) * C42924 +
           (C12905 * C305 + C12904 * C48541 -
            (C113 * C7249 + C48388 * C7251) * C306 -
            (C113 * C7252 + C48388 * C7255) * C48529 +
            (C113 * C23689 + C48388 * C23690) * C307 +
            (C113 * C23691 + C48388 * C23692) * C48502) *
               C42925) *
              C48141 * C48156 * C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C717 +
             (C113 * C123 + C48388 * C136) * C48470 -
             (C113 * C308 + C48388 * C318) * C718 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C42923 +
            (C11561 + C11562 - C11575 - C11576) * C42924 + C44600 * C42925) *
               C48141 * C48161 +
           ((C726 - (C725 + C724) + C727) * C42923 + C11578 * C42924 +
            C13122 * C42925) *
               C48141 * C48169 +
           (C750 * C42923 + C11579 * C42924 +
            (C2348 + C2349 - C2360 - C2361) * C42925) *
               C48141 * C3124) *
              C3562 +
          (((C11575 - (C11562 + C11561) + C11576) * C42923 +
            (C13106 - (C13107 + C13108) + C13109) * C42924 + C44807 * C42925) *
               C48141 * C48161 +
           (C11577 * C42923 + C13123 * C42924 +
            (C13112 + C13113 - C13124 - C13125) * C42925) *
               C48141 * C48169 +
           (C1066 * C42923 + (C2360 - (C2349 + C2348) + C2361) * C42924 +
            ((C113 * C2583 + C48388 * C2588) * C718 -
             (C2479 * C48470 + C2478 * C717) +
             (C113 * C2589 + C48388 * C2592) * C48247) *
                C42925) *
               C48141 * C3124) *
              C48289)) /
        (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C717 +
             (C113 * C123 + C48388 * C136) * C48470 -
             (C113 * C308 + C48388 * C318) * C718 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C42923 +
            (C11561 + C11562 - C11575 - C11576) * C42924 + C44600 * C42925) *
               C48141 * C2825 +
           ((C726 - (C725 + C724) + C727) * C42923 + C11578 * C42924 +
            C13122 * C42925) *
               C48141 * C48166) *
              C48285 +
          (((C11575 - (C11562 + C11561) + C11576) * C42923 +
            (C13106 - (C13107 + C13108) + C13109) * C42924 + C44807 * C42925) *
               C48141 * C2825 +
           (C11577 * C42923 + C13123 * C42924 +
            (C13112 + C13113 - C13124 - C13125) * C42925) *
               C48141 * C48166) *
              C48292 +
          ((C44600 * C42923 + (C13388 + C13389 - C13396 - C13397) * C42924 +
            (C44798 + C44799 - C44808 - C44809) * C42925) *
               C48141 * C2825 +
           (C13122 * C42923 + (C13124 - (C13113 + C13112) + C13125) * C42924 +
            ((C113 * C7250 + C48388 * C7253) * C718 -
             (C12902 * C48470 + C12903 * C717) +
             (C113 * C7254 + C48388 * C7256) * C48247) *
                C42925) *
               C48141 * C48166) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C305 +
             (C113 * C123 + C48388 * C136) * C48541 -
             (C113 * C308 + C48388 * C318) * C306 -
             (C113 * C319 + C48388 * C338) * C48529 +
             (C113 * C309 + C48388 * C320) * C307 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C42923 +
            (C12780 + C12781 - C12782 - C12783 + C12784 + C12785) * C42924 +
            C44375 * C42925) *
               C48141 * C2825 +
           ((C392 - (C350 + C349) + C393 - C394 - C395) * C42923 +
            C14776 * C42924 +
            (C12792 - (C12793 + C12794) + C12795 - C12796 - C12797) * C42925) *
               C48141 * C48166) *
              C3562 +
          (((C12782 - (C12781 + C12780) + C12783 - C12784 - C12785) * C42923 +
            (C12786 - (C12787 + C12788) + C12789 - C12790 - C12791) * C42924 +
            (C44366 - (C44367 + C44368) + C44369 - C44370 - C44371) * C42925) *
               C48141 * C2825 +
           (C14775 * C42923 +
            (C12794 + C12793 - C12792 - C12795 + C12796 + C12797) * C42924 +
            (C2476 * C305 + C2477 * C48541 - C13120 * C306 - C13121 * C48529 +
             (C113 * C7736 + C48388 * C7739) * C307 +
             (C113 * C7740 + C48388 * C7742) * C48502) *
                C42925) *
               C48141 * C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C42923 +
            (C11102 + C11103) * C42924 + C43147 * C42925) *
               C48141 * C48547 -
           (C11092 * C42925 + C11089 * C42924 + (C175 + C174) * C42923) *
               C48141 * C48540 +
           (C184 * C42923 + C11090 * C42924 + C611 * C42925) * C48141 * C48527 -
           ((C608 + C609) * C42925 + C11366 * C42924 + C185 * C42923) * C48141 *
               C48506) *
              C3562 +
          ((C11088 * C42923 + C11091 * C42924 + C13256 * C42925) * C48141 *
               C48540 -
           (C44442 * C42925 + (C11104 + C11105) * C42924 +
            (C11103 + C11102) * C42923) *
               C48141 * C48547 -
           ((C2483 + C2482) * C42925 + C11097 * C42924 + C610 * C42923) *
               C48141 * C48527 +
           (C858 * C42923 + (C609 + C608) * C42924 +
            ((C113 * C2463 + C48388 * C2464) * C114 +
             (C113 * C2465 + C48388 * C2466) * C48184) *
                C42925) *
               C48141 * C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C42923 +
            (C11102 + C11103) * C42924 + C43147 * C42925) *
               C48141 * C2825 -
           (C11092 * C42925 + C11089 * C42924 + (C175 + C174) * C42923) *
               C48141 * C48166) *
              C48549 +
          ((C11088 * C42923 + C11091 * C42924 + C13256 * C42925) * C48141 *
               C48166 -
           (C44442 * C42925 + (C11104 + C11105) * C42924 +
            (C11103 + C11102) * C42923) *
               C48141 * C2825) *
              C48546 +
          ((C43147 * C42923 + (C12906 + C12907) * C42924 + C44443 * C42925) *
               C48141 * C2825 -
           ((C12908 + C12909) * C42925 + C13257 * C42924 + C11092 * C42923) *
               C48141 * C48166) *
              C48537 +
          ((C13256 * C42923 + (C12909 + C12908) * C42924 +
            ((C113 * C12880 + C48388 * C12883) * C114 +
             (C113 * C12884 + C48388 * C12886) * C48184) *
                C42925) *
               C48141 * C48166 -
           ((C44450 + C44451) * C42925 + (C12910 + C12911) * C42924 +
            C44442 * C42923) *
               C48141 * C2825) *
              C48518)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C42923 +
            (C11102 + C11103) * C42924 + C43147 * C42925) *
               C48141 * C48161 -
           (C11092 * C42925 + C11089 * C42924 + (C175 + C174) * C42923) *
               C48141 * C48169 +
           (C184 * C42923 + C11090 * C42924 + C611 * C42925) * C48141 * C3124) *
              C48285 +
          ((C11088 * C42923 + C11091 * C42924 + C13256 * C42925) * C48141 *
               C48169 -
           (C44442 * C42925 + (C11104 + C11105) * C42924 +
            (C11103 + C11102) * C42923) *
               C48141 * C48161 -
           ((C2483 + C2482) * C42925 + C11097 * C42924 + C610 * C42923) *
               C48141 * C3124) *
              C48292 +
          ((C43147 * C42923 + (C12906 + C12907) * C42924 + C44443 * C42925) *
               C48141 * C48161 -
           ((C12908 + C12909) * C42925 + C13257 * C42924 + C11092 * C42923) *
               C48141 * C48169 +
           (C611 * C42923 + (C2482 + C2483) * C42924 +
            ((C113 * C2172 + C48388 * C2183) * C114 +
             (C113 * C2184 + C48388 * C2190) * C48184) *
                C42925) *
               C48141 * C3124) *
              C4082)) /
        (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C42923 +
            (C11102 + C11103) * C42924 + C43147 * C42925) *
               C48141 * C48547 -
           (C11092 * C42925 + C11089 * C42924 + (C175 + C174) * C42923) *
               C48141 * C48540 +
           (C184 * C42923 + C11090 * C42924 + C611 * C42925) * C48141 * C48527 -
           ((C608 + C609) * C42925 + C11366 * C42924 + C185 * C42923) * C48141 *
               C48506) *
              C3562 +
          ((C11088 * C42923 + C11091 * C42924 + C13256 * C42925) * C48141 *
               C48540 -
           (C44442 * C42925 + (C11104 + C11105) * C42924 +
            (C11103 + C11102) * C42923) *
               C48141 * C48547 -
           ((C2483 + C2482) * C42925 + C11097 * C42924 + C610 * C42923) *
               C48141 * C48527 +
           (C858 * C42923 + (C609 + C608) * C42924 +
            ((C113 * C2463 + C48388 * C2464) * C114 +
             (C113 * C2465 + C48388 * C2466) * C48184) *
                C42925) *
               C48141 * C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C305 +
             (C113 * C123 + C48388 * C136) * C48541 -
             (C113 * C308 + C48388 * C318) * C306 -
             (C113 * C319 + C48388 * C338) * C48529 +
             (C113 * C309 + C48388 * C320) * C307 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C42923 +
            (C12780 + C12781 - C12782 - C12783 + C12784 + C12785) * C42924 +
            C44375 * C42925) *
               C48141 * C2825 +
           ((C392 - (C350 + C349) + C393 - C394 - C395) * C42923 +
            C14776 * C42924 +
            (C12792 - (C12793 + C12794) + C12795 - C12796 - C12797) * C42925) *
               C48141 * C48166) *
              C3562 +
          (((C12782 - (C12781 + C12780) + C12783 - C12784 - C12785) * C42923 +
            (C12786 - (C12787 + C12788) + C12789 - C12790 - C12791) * C42924 +
            (C44366 - (C44367 + C44368) + C44369 - C44370 - C44371) * C42925) *
               C48141 * C2825 +
           (C14775 * C42923 +
            (C12794 + C12793 - C12792 - C12795 + C12796 + C12797) * C42924 +
            (C2476 * C305 + C2477 * C48541 - C13120 * C306 - C13121 * C48529 +
             (C113 * C7736 + C48388 * C7739) * C307 +
             (C113 * C7740 + C48388 * C7742) * C48502) *
                C42925) *
               C48141 * C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C717 +
            (C113 * C123 + C48388 * C136) * C48470 -
            (C113 * C308 + C48388 * C318) * C718 -
            (C113 * C319 + C48388 * C338) * C48247) *
               C42923 +
           (C11561 + C11562 - C11575 - C11576) * C42924 +
           (C13108 + C13107 - C13106 - C13109) * C42925) *
              C48141 * C713 +
          ((C726 - (C725 + C724) + C727) * C42923 + C11578 * C42924 +
           C13122 * C42925) *
              C48141 * C714 +
          (C750 * C42923 + C11579 * C42924 +
           (C2348 + C2349 - C2360 - C2361) * C42925) *
              C48141 * C715 +
          (C751 * C42923 + (C1063 - (C1047 + C1046) + C1064) * C42924 +
           ((C113 * C2337 + C48388 * C2338) * C718 -
            (C596 * C48470 + C597 * C717) +
            (C113 * C2339 + C48388 * C2340) * C48247) *
               C42925) *
              C48141 * C48506) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1557 +
            (C113 * C123 + C48388 * C136) * C1551 -
            (C113 * C308 + C48388 * C318) * C1558 -
            (C113 * C319 + C48388 * C338) * C1552 +
            (C113 * C309 + C48388 * C320) * C1559 +
            (C113 * C321 + C48388 * C339) * C1553 -
            (C113 * C1283 + C48388 * C1289) * C1560 -
            (C113 * C1290 + C48388 * C1301) * C48512) *
               C42923 +
           (C12474 + C12475 - C12476 - C12477 + C12478 + C12479 - C12486 -
            C12487) *
               C42924 +
           (C11101 * C1557 + C11100 * C1551 - C11982 * C1558 - C11983 * C1552 +
            C11984 * C1559 + C11985 * C1553 -
            (C113 * C6381 + C48388 * C6383) * C1560 -
            (C113 * C6384 + C48388 * C6387) * C48512) *
               C42925) *
              C48141 * C48456 +
          ((C1568 - (C1567 + C1566) + C1569 - C1570 - C1571 + C1590 + C1591) *
               C42923 +
           (C12128 - (C12127 + C12126) + C12129 - C12130 - C12131 + C12138 +
            C12139) *
               C42924 +
           (C2354 * C1558 - (C593 * C1551 + C592 * C1557) + C2355 * C1552 -
            C11986 * C1559 - C11987 * C1553 +
            (C113 * C6382 + C48388 * C6385) * C1560 +
            (C113 * C6386 + C48388 * C6388) * C48512) *
               C42925) *
              C48141 * C48166) *
         C48202) /
            (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C717 +
             (C113 * C123 + C48388 * C136) * C48470 -
             (C113 * C308 + C48388 * C318) * C718 -
             (C113 * C319 + C48388 * C338) * C48247) *
                C42923 +
            (C11561 + C11562 - C11575 - C11576) * C42924 +
            (C13108 + C13107 - C13106 - C13109) * C42925) *
               C48141 * C302 +
           ((C726 - (C725 + C724) + C727) * C42923 + C11578 * C42924 +
            C13122 * C42925) *
               C48141 * C303 +
           (C750 * C42923 + C11579 * C42924 +
            (C2348 + C2349 - C2360 - C2361) * C42925) *
               C48141 * C48496) *
              C48471 +
          (((C11575 - (C11562 + C11561) + C11576) * C42923 +
            (C13106 - (C13107 + C13108) + C13109) * C42924 +
            (C13396 - (C13389 + C13388) + C13397) * C42925) *
               C48141 * C302 +
           (C11577 * C42923 + C13123 * C42924 +
            (C13112 + C13113 - C13124 - C13125) * C42925) *
               C48141 * C303 +
           (C1066 * C42923 + (C2360 - (C2349 + C2348) + C2361) * C42924 +
            ((C113 * C2583 + C48388 * C2588) * C718 -
             (C2479 * C48470 + C2478 * C717) +
             (C113 * C2589 + C48388 * C2592) * C48247) *
                C42925) *
               C48141 * C48496) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1557 +
            (C113 * C123 + C48388 * C136) * C1551 -
            (C113 * C308 + C48388 * C318) * C1558 -
            (C113 * C319 + C48388 * C338) * C1552 +
            (C113 * C309 + C48388 * C320) * C1559 +
            (C113 * C321 + C48388 * C339) * C1553 -
            (C113 * C1283 + C48388 * C1289) * C1560 -
            (C113 * C1290 + C48388 * C1301) * C48512) *
               C42923 +
           (C12474 + C12475 - C12476 - C12477 + C12478 + C12479 - C12486 -
            C12487) *
               C42924 +
           (C44131 + C44132 - C44133 - C44134 + C44135 + C44136 - C44143 -
            C44144) *
               C42925) *
              C48141 * C48156 * C48471 +
          ((C12476 - (C12475 + C12474) + C12477 - C12478 - C12479 + C12486 +
            C12487) *
               C42923 +
           (C44133 - (C44132 + C44131) + C44134 - C44135 - C44136 + C44143 +
            C44144) *
               C42924 +
           (C13394 * C1558 - (C12901 * C1551 + C12900 * C1557) +
            C13395 * C1552 - C43782 * C1559 - C43783 * C1553 +
            (C113 * C24035 + C48388 * C24036) * C1560 +
            (C113 * C24037 + C48388 * C24038) * C48512) *
               C42925) *
              C48141 * C48156 * C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C305 +
            (C113 * C123 + C48388 * C136) * C48541 -
            (C113 * C308 + C48388 * C318) * C306 -
            (C113 * C319 + C48388 * C338) * C48529 +
            (C113 * C309 + C48388 * C320) * C307 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C42923 +
           (C12780 + C12781 - C12782 - C12783 + C12784 + C12785) * C42924 +
           (C12788 + C12787 - C12786 - C12789 + C12790 + C12791) * C42925) *
              C48141 * C302 +
          ((C392 - (C350 + C349) + C393 - C394 - C395) * C42923 +
           C14776 * C42924 +
           (C12792 - (C12793 + C12794) + C12795 - C12796 - C12797) * C42925) *
              C48141 * C303 +
          (C407 * C42923 +
           (C3719 + C3718 - C3717 - C3720 + C3721 + C3722) * C42924 +
           (C594 * C305 + C595 * C48541 - C2356 * C306 - C2357 * C48529 +
            (C113 * C1425 + C48388 * C1442) * C307 +
            (C113 * C1443 + C48388 * C1452) * C48502) *
               C42925) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C114 +
            (C113 * C123 + C48388 * C136) * C48184) *
               C42923 +
           (C11102 + C11103) * C42924 + (C11105 + C11104) * C42925) *
              C48141 * C107 -
          (C11092 * C42925 + C11089 * C42924 + (C175 + C174) * C42923) *
              C48141 * C108 +
          (C184 * C42923 + C11090 * C42924 + C611 * C42925) * C48141 * C109 -
          ((C608 + C609) * C42925 + C11366 * C42924 + C185 * C42923) * C48141 *
              C110 +
          (C186 * C42923 + (C867 + C866) * C42924 +
           ((C113 * C530 + C48388 * C549) * C114 +
            (C113 * C550 + C48388 * C560) * C48184) *
               C42925) *
              C48141 * C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C42923 +
            (C11102 + C11103) * C42924 + C43147 * C42925) *
               C48141 * C302 -
           (C11092 * C42925 + C11089 * C42924 + (C175 + C174) * C42923) *
               C48141 * C303 +
           (C184 * C42923 + C11090 * C42924 + C611 * C42925) * C48141 *
               C48496) *
              C48542 +
          ((C11088 * C42923 + C11091 * C42924 + C13256 * C42925) * C48141 *
               C303 -
           ((C12907 + C12906) * C42925 + (C11104 + C11105) * C42924 +
            (C11103 + C11102) * C42923) *
               C48141 * C302 -
           ((C2483 + C2482) * C42925 + C11097 * C42924 + C610 * C42923) *
               C48141 * C48496) *
              C48531 +
          ((C43147 * C42923 + (C12906 + C12907) * C42924 +
            (C12911 + C12910) * C42925) *
               C48141 * C302 -
           ((C12908 + C12909) * C42925 + C13257 * C42924 + C11092 * C42923) *
               C48141 * C303 +
           (C611 * C42923 + (C2482 + C2483) * C42924 +
            ((C113 * C2172 + C48388 * C2183) * C114 +
             (C113 * C2184 + C48388 * C2190) * C48184) *
                C42925) *
               C48141 * C48496) *
              C48505)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1183 +
            (C113 * C123 + C48388 * C136) * C1177 -
            (C113 * C308 + C48388 * C318) * C1184 -
            (C113 * C319 + C48388 * C338) * C1178 +
            (C113 * C309 + C48388 * C320) * C1185 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C42923 +
           (C11954 + C11955 - C11956 - C11957 + C11988 + C11989) * C42924 +
           (C11965 + C11964 - C11990 - C11991 + C11992 + C11993) * C42925) *
              C48141 * C48538 +
          ((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C42923 +
           C12343 * C42924 +
           (C11972 - (C11973 + C11974) + C11975 - C11994 - C11995) * C42925) *
              C48141 * C48525 +
          (C1209 * C42923 +
           (C1754 + C1753 - C1752 - C1755 + C1766 + C1767) * C42924 +
           (C594 * C1183 + C595 * C1177 - C2356 * C1184 - C2357 * C1178 +
            (C113 * C1425 + C48388 * C1442) * C1185 +
            (C113 * C1443 + C48388 * C1452) * C48502) *
               C42925) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48388 * C122) * C1278 +
           (C113 * C123 + C48388 * C136) * C1272 -
           (C113 * C308 + C48388 * C318) * C1279 -
           (C113 * C319 + C48388 * C338) * C1273 +
           (C113 * C309 + C48388 * C320) * C1280 +
           (C113 * C321 + C48388 * C339) * C1274 -
           (C113 * C1283 + C48388 * C1289) * C1281 -
           (C113 * C1290 + C48388 * C1301) * C1275 +
           (C113 * C1284 + C48388 * C1291) * C1282 +
           (C113 * C1292 + C48388 * C1302) * C1276) *
              C42923 +
          (C11098 * C1278 + C11099 * C1272 - C11570 * C1279 - C11571 * C1273 +
           C11980 * C1280 + C11981 * C1274 - C12484 * C1281 - C12485 * C1275 +
           (C113 * C6867 + C48388 * C6869) * C1282 +
           (C113 * C6870 + C48388 * C6873) * C1276) *
              C42924 +
          (C11101 * C1278 + C11100 * C1272 - C11982 * C1279 - C11983 * C1273 +
           C11984 * C1280 + C11985 * C1274 -
           (C113 * C6381 + C48388 * C6383) * C1281 -
           (C113 * C6384 + C48388 * C6387) * C1275 +
           (C113 * C23057 + C48388 * C23058) * C1282 +
           (C113 * C23059 + C48388 * C23060) * C1276) *
              C42925) *
         C48141 * C48156 * C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1183 +
            (C113 * C123 + C48388 * C136) * C1177 -
            (C113 * C308 + C48388 * C318) * C1184 -
            (C113 * C319 + C48388 * C338) * C1178 +
            (C113 * C309 + C48388 * C320) * C1185 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C42923 +
           (C11954 + C11955 - C11956 - C11957 + C11988 + C11989) * C42924 +
           C43788 * C42925) *
              C48141 * C48156 * C48542 +
          ((C11956 - (C11955 + C11954) + C11957 - C11988 - C11989) * C42923 +
           (C11990 - (C11964 + C11965) + C11991 - C11992 - C11993) * C42924 +
           (C43773 - (C43774 + C43775) + C43776 - C43785 - C43786) * C42925) *
              C48141 * C48156 * C48531 +
          (C43788 * C42923 +
           (C43775 + C43774 - C43773 - C43776 + C43785 + C43786) * C42924 +
           (C12905 * C1183 + C12904 * C1177 -
            (C113 * C7249 + C48388 * C7251) * C1184 -
            (C113 * C7252 + C48388 * C7255) * C1178 +
            (C113 * C23689 + C48388 * C23690) * C1185 +
            (C113 * C23691 + C48388 * C23692) * C48502) *
               C42925) *
              C48141 * C48156 * C48505)) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C114 +
             (C113 * C123 + C48388 * C136) * C48184) *
                C42923 +
            (C11102 + C11103) * C42924 + C43147 * C42925) *
               C48141 * C713 -
           (C11092 * C42925 + C11089 * C42924 + (C175 + C174) * C42923) *
               C48141 * C714 +
           (C184 * C42923 + C11090 * C42924 + C611 * C42925) * C48141 * C715 -
           ((C608 + C609) * C42925 + C11366 * C42924 + C185 * C42923) * C48141 *
               C48506) *
              C48471 +
          ((C11088 * C42923 + C11091 * C42924 + C13256 * C42925) * C48141 *
               C714 -
           ((C12907 + C12906) * C42925 + (C11104 + C11105) * C42924 +
            (C11103 + C11102) * C42923) *
               C48141 * C713 -
           ((C2483 + C2482) * C42925 + C11097 * C42924 + C610 * C42923) *
               C48141 * C715 +
           (C858 * C42923 + (C609 + C608) * C42924 +
            ((C113 * C2463 + C48388 * C2464) * C114 +
             (C113 * C2465 + C48388 * C2466) * C48184) *
                C42925) *
               C48141 * C48506) *
              C48289)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48388 * C122) * C1183 +
             (C113 * C123 + C48388 * C136) * C1177 -
             (C113 * C308 + C48388 * C318) * C1184 -
             (C113 * C319 + C48388 * C338) * C1178 +
             (C113 * C309 + C48388 * C320) * C1185 +
             (C113 * C321 + C48388 * C339) * C48502) *
                C42923 +
            (C11954 + C11955 - C11956 - C11957 + C11988 + C11989) * C42924 +
            C43788 * C42925) *
               C48141 * C48456 +
           ((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C42923 +
            C12343 * C42924 +
            (C11972 - (C11973 + C11974) + C11975 - C11994 - C11995) * C42925) *
               C48141 * C48166) *
              C48471 +
          (((C11956 - (C11955 + C11954) + C11957 - C11988 - C11989) * C42923 +
            (C11990 - (C11964 + C11965) + C11991 - C11992 - C11993) * C42924 +
            (C43773 - (C43774 + C43775) + C43776 - C43785 - C43786) * C42925) *
               C48141 * C48456 +
           (C12342 * C42923 +
            (C11974 + C11973 - C11972 - C11975 + C11994 + C11995) * C42924 +
            (C2476 * C1183 + C2477 * C1177 - C13120 * C1184 - C13121 * C1178 +
             (C113 * C7736 + C48388 * C7739) * C1185 +
             (C113 * C7740 + C48388 * C7742) * C48502) *
                C42925) *
               C48141 * C48166) *
              C48289)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C114 +
            (C113 * C123 + C48388 * C136) * C48184) *
               C42923 +
           (C11102 + C11103) * C42924 + (C11105 + C11104) * C42925) *
              C48141 * C107 -
          (C11092 * C42925 + C11089 * C42924 + (C175 + C174) * C42923) *
              C48141 * C108 +
          (C184 * C42923 + C11090 * C42924 + C611 * C42925) * C48141 * C109 -
          ((C608 + C609) * C42925 + C11366 * C42924 + C185 * C42923) * C48141 *
              C110 +
          (C186 * C42923 + (C867 + C866) * C42924 +
           ((C113 * C530 + C48388 * C549) * C114 +
            (C113 * C550 + C48388 * C560) * C48184) *
               C42925) *
              C48141 * C111) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C305 +
            (C113 * C123 + C48388 * C136) * C48541 -
            (C113 * C308 + C48388 * C318) * C306 -
            (C113 * C319 + C48388 * C338) * C48529 +
            (C113 * C309 + C48388 * C320) * C307 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C42923 +
           (C12780 + C12781 - C12782 - C12783 + C12784 + C12785) * C42924 +
           (C12788 + C12787 - C12786 - C12789 + C12790 + C12791) * C42925) *
              C48141 * C302 +
          ((C392 - (C350 + C349) + C393 - C394 - C395) * C42923 +
           C14776 * C42924 +
           (C12792 - (C12793 + C12794) + C12795 - C12796 - C12797) * C42925) *
              C48141 * C303 +
          (C407 * C42923 +
           (C3719 + C3718 - C3717 - C3720 + C3721 + C3722) * C42924 +
           (C594 * C305 + C595 * C48541 - C2356 * C306 - C2357 * C48529 +
            (C113 * C1425 + C48388 * C1442) * C307 +
            (C113 * C1443 + C48388 * C1452) * C48502) *
               C42925) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48388 * C122) * C1183 +
            (C113 * C123 + C48388 * C136) * C1177 -
            (C113 * C308 + C48388 * C318) * C1184 -
            (C113 * C319 + C48388 * C338) * C1178 +
            (C113 * C309 + C48388 * C320) * C1185 +
            (C113 * C321 + C48388 * C339) * C48502) *
               C42923 +
           (C11954 + C11955 - C11956 - C11957 + C11988 + C11989) * C42924 +
           (C11965 + C11964 - C11990 - C11991 + C11992 + C11993) * C42925) *
              C48141 * C48538 +
          ((C1189 - (C1188 + C1187) + C1190 - C1191 - C1192) * C42923 +
           C12343 * C42924 +
           (C11972 - (C11973 + C11974) + C11975 - C11994 - C11995) * C42925) *
              C48141 * C48525 +
          (C1209 * C42923 +
           (C1754 + C1753 - C1752 - C1755 + C1766 + C1767) * C42924 +
           (C594 * C1183 + C595 * C1177 - C2356 * C1184 - C2357 * C1178 +
            (C113 * C1425 + C48388 * C1442) * C1185 +
            (C113 * C1443 + C48388 * C1452) * C48502) *
               C42925) *
              C48141 * C48496) *
         C48202) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48388 * C122) * C1278 +
           (C113 * C123 + C48388 * C136) * C1272 -
           (C113 * C308 + C48388 * C318) * C1279 -
           (C113 * C319 + C48388 * C338) * C1273 +
           (C113 * C309 + C48388 * C320) * C1280 +
           (C113 * C321 + C48388 * C339) * C1274 -
           (C113 * C1283 + C48388 * C1289) * C1281 -
           (C113 * C1290 + C48388 * C1301) * C1275 +
           (C113 * C1284 + C48388 * C1291) * C1282 +
           (C113 * C1292 + C48388 * C1302) * C1276) *
              C42923 +
          (C11098 * C1278 + C11099 * C1272 - C11570 * C1279 - C11571 * C1273 +
           C11980 * C1280 + C11981 * C1274 - C12484 * C1281 - C12485 * C1275 +
           (C113 * C6867 + C48388 * C6869) * C1282 +
           (C113 * C6870 + C48388 * C6873) * C1276) *
              C42924 +
          (C11101 * C1278 + C11100 * C1272 - C11982 * C1279 - C11983 * C1273 +
           C11984 * C1280 + C11985 * C1274 -
           (C113 * C6381 + C48388 * C6383) * C1281 -
           (C113 * C6384 + C48388 * C6387) * C1275 +
           (C113 * C23057 + C48388 * C23058) * C1282 +
           (C113 * C23059 + C48388 * C23060) * C1276) *
              C42925) *
         C48141 * C48156 * C48202) /
            (p * q * std::sqrt(p + q));
}
