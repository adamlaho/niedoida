/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AC_yz.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_13_23(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46951 = ce * de;
    const double C46950 = ce + de;
    const double C46949 = 0 * de;
    const double C46948 = zC - zD;
    const double C46989 = 0 * ce;
    const double C46984 = 0 * de;
    const double C46983 = 0 * de;
    const double C47034 = 0 * de;
    const double C47075 = ae + be;
    const double C47074 = yA - yB;
    const double C47089 = ae * be;
    const double C47087 = 0 * be;
    const double C47104 = zP - zQ;
    const double C47103 = yP - yQ;
    const double C47102 = p + q;
    const double C47101 = p * q;
    const double C47113 = bs[4];
    const double C47111 = xP - xQ;
    const double C47119 = bs[5];
    const double C47126 = bs[6];
    const double C47138 = bs[7];
    const double C47157 = bs[3];
    const double C47602 = bs[2];
    const double C115 = bs[0];
    const double C47976 = xA - xB;
    const double C47991 = xC - xD;
    const double C48020 = yC - yD;
    const double C48211 = zA - zB;
    const double C46952 = std::pow(C46950, 2);
    const double C46967 = 2 * C46950;
    const double C46985 = C46949 / C46950;
    const double C46953 = C46951 * C46948;
    const double C46986 = C46948 * C46949;
    const double C48038 = std::pow(C46948, 2);
    const double C48121 = C46948 * de;
    const double C48119 = C46948 * ce;
    const double C46996 = C46989 / C46950;
    const double C46991 = C46948 * C46984;
    const double C47035 = C47034 / C46950;
    const double C47088 = std::pow(C47075, 2);
    const double C47114 = C46950 * C47075;
    const double C136 = (-(std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                           (yP - yQ) * (zP - zQ) * ae * ce) /
                         C46950) /
                        C47075;
    const double C137 = (-((xP - xQ) * std::pow(-(2 * p * q) / (p + q), 3) *
                           bs[3] * (yP - yQ) * (zP - zQ) * ae * ce) /
                         C46950) /
                        C47075;
    const double C47986 = 2 * C47075;
    const double C48224 = std::pow(C47074, 2);
    const double C48326 = C47074 * be;
    const double C48324 = C47074 * ae;
    const double C47091 = C47089 * C47074;
    const double C47152 = C47104 * ce;
    const double C47329 = std::pow(C47104, 2);
    const double C47106 = C47103 * C47104;
    const double C47199 = C47103 * ae;
    const double C47253 = std::pow(C47103, 2);
    const double C47105 = 2 * C47101;
    const double C47120 = std::pow(C47111, 2);
    const double C47977 = std::pow(C47976, 2);
    const double C48292 = C47976 * be;
    const double C48291 = C47976 * ae;
    const double C47994 = C47991 * de;
    const double C47993 = C47991 * ce;
    const double C47992 = std::pow(C47991, 2);
    const double C48021 = std::pow(C48020, 2);
    const double C48079 = C48020 * de;
    const double C48077 = C48020 * ce;
    const double C48241 = std::pow(C48211, 2);
    const double C48327 = C48211 * be;
    const double C48325 = C48211 * ae;
    const double C46954 = 2 * C46952;
    const double C48304 = 4 * C46952;
    const double C48006 = std::pow(C46967, -1);
    const double C48305 = C46952 * C46967;
    const double C48301 = std::pow(C46967, -2);
    const double C46994 = C46986 / C46950;
    const double C48039 = C48038 * C46951;
    const double C48308 = std::pow(C48119, 2);
    const double C46997 = C46991 / C46950;
    const double C47090 = 2 * C47088;
    const double C48293 = std::pow(C47986, -1);
    const double C48225 = C48224 * C47089;
    const double C47158 = C47157 * C47152;
    const double C47161 = C47113 * C47152;
    const double C47165 = C47119 * C47152;
    const double C47172 = C47126 * C47152;
    const double C47185 = C47138 * C47152;
    const double C47108 = C47106 * ae;
    const double C47200 = C47157 * C47199;
    const double C47204 = C47113 * C47199;
    const double C47209 = C47119 * C47199;
    const double C47216 = C47126 * C47199;
    const double C47227 = C47138 * C47199;
    const double C47107 = C47105 / C47102;
    const double C122 = (-(bs[1] * C47199 * C47105) / C47102) / C47075;
    const double C123 = (bs[1] * C47152 * C47105) / (C47102 * C46950);
    const double C116 = -(C47111 * bs[1] * C47105) / C47102;
    const double C307 = -(C47103 * bs[1] * C47105) / C47102;
    const double C513 = -(C47104 * bs[1] * C47105) / C47102;
    const double C47978 = C47977 * C47089;
    const double C48294 = std::pow(C47993, 2);
    const double C47995 = C47992 * C46951;
    const double C48022 = C48021 * C46951;
    const double C48306 = std::pow(C48077, 2);
    const double C48242 = C48241 * C47089;
    const double C46988 = C46949 / C46954;
    const double C46993 = C46984 / C46954;
    const double C46992 = C46983 / C46954;
    const double C48338 = C46950 * C48304;
    const double C48339 = 4 * C48305;
    const double C46998 = 0 - C46994;
    const double C48040 = C48039 / C46950;
    const double C47001 = 0 - C46997;
    const double C48226 = C48225 / C47075;
    const double C47109 = C47108 * ce;
    const double C47112 = std::pow(C47107, 4);
    const double C47118 = -C47107;
    const double C47125 = std::pow(C47107, 6);
    const double C47601 = std::pow(C47107, 2);
    const double C124 =
        (C47111 * std::pow(C47107, 2) * bs[2] * C47199) / C47075;
    const double C125 =
        -(C47111 * std::pow(C47107, 2) * bs[2] * C47152) / C46950;
    const double C319 =
        -(C47103 * std::pow(C47107, 2) * bs[2] * C47152) / C46950;
    const double C320 =
        (C47103 * std::pow(C47107, 2) * bs[2] * C47199) / C47075 -
        (ae * bs[1] * C47105) / (C47102 * C47075);
    const double C47979 = C47978 / C47075;
    const double C47996 = C47995 / C46950;
    const double C48023 = C48022 / C46950;
    const double C48243 = C48242 / C47075;
    const double C47002 = C46998 * ce;
    const double C48041 = -C48040;
    const double C47005 = C47001 * ce;
    const double C48227 = -C48226;
    const double C47115 = C47113 * C47109;
    const double C47122 = C47119 * C47109;
    const double C47128 = C47126 * C47109;
    const double C47141 = C47138 * C47109;
    const double C138 =
        (-(std::pow(C47107, 4) * bs[4] * C47109 * std::pow(xP - xQ, 2)) /
         C46950) /
            C47075 -
        (std::pow(-C47107, 3) * bs[3] * C47109) / (C46950 * C47075);
    const double C47162 = C47112 * C47161;
    const double C47205 = C47112 * C47204;
    const double C47242 = C47113 * C47112;
    const double C47121 = std::pow(C47118, 5);
    const double C47137 = std::pow(C47118, 7);
    const double C47156 = std::pow(C47118, 3);
    const double C337 =
        (-(C47103 * std::pow(C47118, 3) * bs[3] * C47109) / C46950) / C47075 -
        (ae * std::pow(C47107, 2) * bs[2] * C47152) / C47114;
    const double C47174 = C47125 * C47172;
    const double C47218 = C47125 * C47216;
    const double C47296 = C47126 * C47125;
    const double C47603 = C47602 * C47601;
    const double C523 = (C47104 * C47601 * C47602 * C47199) / C47075;
    const double C524 = (ce * bs[1] * C47105) / (C47102 * C46950) -
                        (C47104 * C47601 * C47602 * C47152) / C46950;
    const double C47980 = -C47979;
    const double C47997 = -C47996;
    const double C48024 = -C48023;
    const double C48244 = -C48243;
    const double C47006 = C47002 / C46950;
    const double C48042 = std::exp(C48041);
    const double C47009 = C47005 / C46950;
    const double C48228 = std::exp(C48227);
    const double C47116 = C47112 * C47115;
    const double C47129 = C47125 * C47128;
    const double C47163 = C47111 * C47162;
    const double C47252 = ae * C47162;
    const double C47250 = C47103 * C47162;
    const double C47722 = C47104 * C47162;
    const double C47206 = C47111 * C47205;
    const double C47307 = C47205 * ce;
    const double C47328 = C47104 * C47205;
    const double C47667 = C47103 * C47205;
    const double C47283 = C47111 * C47242;
    const double C47289 = C47103 * C47242;
    const double C47439 = C47242 * ce;
    const double C47453 = C47104 * C47242;
    const double C47609 = C47242 * C47120;
    const double C47670 = C47242 * C47253;
    const double C47725 = C47242 * C47329;
    const double C47761 = C47242 * ae;
    const double C47123 = C47121 * C47122;
    const double C47166 = C47121 * C47165;
    const double C47210 = C47121 * C47209;
    const double C47244 = C47119 * C47121;
    const double C47143 = C47137 * C47141;
    const double C47188 = C47137 * C47185;
    const double C47229 = C47137 * C47227;
    const double C47159 = C47156 * C47158;
    const double C47201 = C47156 * C47200;
    const double C47281 = C47157 * C47156;
    const double C543 =
        (-(C47104 * C47156 * C47157 * C47109) / C46950) / C47075 -
        (std::pow(C47107, 2) * bs[2] * C47103 * ae * ce) / C47114;
    const double C47176 = C47174 * C47120;
    const double C47184 = C47111 * C47174;
    const double C47351 = C47174 * C47253;
    const double C47479 = ae * C47174;
    const double C47477 = C47103 * C47174;
    const double C47511 = C47104 * C47174;
    const double C47219 = C47218 * C47120;
    const double C47226 = C47111 * C47218;
    const double C47455 = C47218 * C47329;
    const double C47510 = C47218 * ce;
    const double C47508 = C47104 * C47218;
    const double C47831 = C47103 * C47218;
    const double C47297 = C47296 * C47120;
    const double C47419 = C47111 * C47296;
    const double C47516 = C47103 * C47296;
    const double C47515 = C47296 * C47253;
    const double C47557 = C47296 * C47329;
    const double C117 = C47603 * C47120 - (bs[1] * C47105) / C47102;
    const double C306 = C47103 * C47111 * C47603;
    const double C308 = C47603 * C47253 - (bs[1] * C47105) / C47102;
    const double C514 = C47603 * C47329 - (bs[1] * C47105) / C47102;
    const double C515 = C47104 * C47111 * C47603;
    const double C1013 = C47104 * C47103 * C47603;
    const double C47981 = std::exp(C47980);
    const double C47998 = std::exp(C47997);
    const double C48025 = std::exp(C48024);
    const double C48245 = std::exp(C48244);
    const double C47010 = C47006 - C46993;
    const double C46955 = C46953 * C48042;
    const double C114 = -(2 * ce * de * (zC - zD) * C48042) / (ce + de);
    const double C48120 = C48042 / C46967;
    const double C48122 = C48042 * C48119;
    const double C48129 = C48006 * C48042;
    const double C48318 = C48042 * C48121;
    const double C48345 = C48301 * C48042;
    const double C48343 = C48042 * C48308;
    const double C47013 = C47009 - C46992;
    const double C151 = C48228 * C138;
    const double C147 = C48228 * C137;
    const double C145 = C48228 * C124;
    const double C11101 = C48228 * C523;
    const double C47092 = C47091 * C48228;
    const double C113 = -(2 * ae * be * (yA - yB) * C48228) / (ae + be);
    const double C5059 =
        ((C48228 - (C47074 * 2 * ae * be * C47074 * C48228) / C47075) * ae) /
            C47075 -
        (0 * be) / (2 * std::pow(C47075, 2));
    const double C5060 =
        (0 * ae) / C47075 - (ae * be * C47074 * C48228) / std::pow(C47075, 2);
    const double C16473 =
        (-(0 * be) / C47075) / (2 * C47075) -
        ((C48228 - (C47074 * 2 * ae * be * C47074 * C48228) / C47075) * be) /
            C47075;
    const double C16474 =
        (-(2 * ae * be * C47074 * C48228) / C47075) / (2 * C47075) -
        (0 * be) / C47075;
    const double C48360 = C48293 * C48228;
    const double C48359 = C48228 * C48324;
    const double C16469 = -(C48228 * C48326) / C47075;
    const double C139 =
        (-2 * C47111 * C47116) / C47114 +
        C47111 *
            ((-(std::pow(-C47107, 5) * bs[5] * C47109 * std::pow(C47111, 2)) /
              C46950) /
                 C47075 -
             C47116 / C47114);
    const double C336 =
        (-(C47103 * C47111 * C47116) / C46950) / C47075 -
        (ae * C47111 * std::pow(C47118, 3) * bs[3] * C47152) / C47114;
    const double C47130 = C47129 * C47120;
    const double C47139 = C47129 / C47114;
    const double C47136 = C47111 * C47129;
    const double C47349 = C47103 * C47129;
    const double C47398 = C47104 * C47129;
    const double C47255 = C47252 / C47114;
    const double C47309 = C47307 / C47114;
    const double C47616 = 2 * C47283;
    const double C47677 = C47103 * C47283;
    const double C47676 = C47283 * ae;
    const double C47734 = C47104 * C47283;
    const double C47733 = C47283 * ce;
    const double C47763 = 2 * C47289;
    const double C47762 = C47289 * ae;
    const double C47795 = C47104 * C47289;
    const double C47794 = C47289 * ce;
    const double C47815 = 2 * C47453;
    const double C47814 = C47453 * ce;
    const double C47127 = C47123 / C47114;
    const double C47247 = C47111 * C47123;
    const double C47251 = C47103 * C47123;
    const double C47306 = C47104 * C47123;
    const double C140 =
        3 * ((-(C47123 * C47120) / C46950) / C47075 - C47116 / C47114) +
        C47111 * ((-2 * C47111 * C47123) / C47114 +
                  C47111 * ((-(std::pow(C47107, 6) * bs[6] * C47109 * C47120) /
                             C46950) /
                                C47075 -
                            C47123 / C47114));
    const double C335 =
        C47103 * ((-(C47123 * C47120) / C46950) / C47075 - C47116 / C47114) -
        (ae * (C47112 * C47113 * C47152 * C47120 +
               std::pow(C47118, 3) * bs[3] * C47152)) /
            C47114;
    const double C339 =
        (-(ae * C47103 * C47163) / C46950) / C47075 -
        (C47111 * C47116) / C47114 +
        C47103 * ((-(C47103 * C47111 * C47123) / C46950) / C47075 -
                  (ae * C47163) / C47114);
    const double C546 =
        (-(C47104 * C47206 * ce) / C46950) / C47075 -
        (C47111 * C47116) / C47114 +
        C47104 * ((-(C47104 * C47111 * C47123) / C46950) / C47075 -
                  (C47206 * ce) / C47114);
    const double C1029 =
        C47103 * ((-(C47104 * C47111 * C47123) / C46950) / C47075 -
                  (C47206 * ce) / C47114) -
        (ae * (C47104 * C47163 + C47111 * C47157 * C47156 * ce)) / C47114;
    const double C47167 = C47166 * C47120;
    const double C47171 = C47111 * C47166;
    const double C47256 = C47166 * C47253;
    const double C47350 = ae * C47166;
    const double C47348 = C47103 * C47166;
    const double C47438 = C47104 * C47166;
    const double C47211 = C47210 * C47120;
    const double C47215 = C47111 * C47210;
    const double C47330 = C47210 * C47329;
    const double C47399 = C47210 * ce;
    const double C47397 = C47104 * C47210;
    const double C47760 = C47103 * C47210;
    const double C47285 = C47244 * C47120;
    const double C47292 = C47111 * C47244;
    const double C47401 = C47103 * C47244;
    const double C47400 = C47244 * C47253;
    const double C47454 = C47244 * C47329;
    const double C47513 = C47104 * C47244;
    const double C47512 = C47244 * ce;
    const double C47832 = C47244 * ae;
    const double C47144 = C47143 * C47120;
    const double C47373 = C47111 * C47143;
    const double C47478 = C47103 * C47143;
    const double C47509 = C47104 * C47143;
    const double C47190 = C47188 * C47120;
    const double C47375 = C47111 * C47188;
    const double C47481 = C47188 * C47253;
    const double C47230 = C47229 * C47120;
    const double C47420 = C47111 * C47229;
    const double C47558 = C47229 * C47329;
    const double C338 = (-(ae * C47103 * C47159) / C46950) / C47075 -
                        (C47156 * C47157 * C47109) / C47114 +
                        C47103 * ((-(C47103 * C47116) / C46950) / C47075 -
                                  (ae * C47159) / C47114);
    const double C1271 =
        2 * ((-(C47103 * C47116) / C46950) / C47075 - (ae * C47159) / C47114) -
        (ae * (C47162 * std::pow(C47103, 2) + C47159)) / C47114 +
        C47103 *
            ((-(ae * C47103 * C47162) / C46950) / C47075 - C47116 / C47114 +
             C47103 * ((-(C47103 * C47123) / C46950) / C47075 -
                       (ae * C47162) / C47114));
    const double C127 =
        -(C47159 * C47120 + std::pow(C47107, 2) * bs[2] * C47152) / C46950;
    const double C128 = (-2 * C47111 * C47159) / C46950 -
                        (C47111 * (C47162 * C47120 + C47159)) / C46950;
    const double C315 = -(C47103 * (C47162 * C47120 + C47159)) / C46950;
    const double C317 = -(C47103 * C47111 * C47159) / C46950;
    const double C322 = -(C47159 * C47253 + C47601 * C47602 * C47152) / C46950;
    const double C324 = -(C47163 * C47253 + C47111 * C47159) / C46950;
    const double C526 = -(C47104 * (C47104 * C47159 + C47603 * ce) +
                          C47601 * C47602 * C47152 + C47104 * C47603 * ce) /
                        C46950;
    const double C528 =
        -(C47104 * C47111 * C47159 + C47111 * C47603 * ce) / C46950;
    const double C1019 =
        -(C47104 * C47103 * C47159 + C47103 * C47603 * ce) / C46950;
    const double C1261 = (-2 * C47103 * C47159) / C46950 -
                         (C47103 * (C47162 * C47253 + C47159)) / C46950;
    const double C544 = (-(C47104 * C47201 * ce) / C46950) / C47075 -
                        (C47156 * C47157 * C47109) / C47114 +
                        C47104 * ((-(C47104 * C47116) / C46950) / C47075 -
                                  (C47201 * ce) / C47114);
    const double C545 = (-(C47104 * C47111 * C47116) / C46950) / C47075 -
                        (C47111 * C47201 * ce) / C47114;
    const double C547 =
        C47104 * ((-(C47123 * C47120) / C46950) / C47075 - C47116 / C47114) -
        ((C47201 + C47205 * C47120) * ce) / C47114;
    const double C1028 =
        C47103 *
            ((-(C47104 * C47116) / C46950) / C47075 - (C47201 * ce) / C47114) -
        (ae * (C47104 * C47159 + bs[2] * std::pow(C47107, 2) * ce)) / C47114;
    const double C126 =
        (std::pow(C47107, 2) * bs[2] * C47199 + C47201 * C47120) / C47075;
    const double C129 =
        (2 * C47111 * C47201 + C47111 * (C47201 + C47205 * C47120)) / C47075;
    const double C318 =
        (C47103 * C47111 * C47201 + C47111 * bs[2] * std::pow(C47107, 2) * ae) /
        C47075;
    const double C321 =
        (C47601 * C47602 * C47199 + C47103 * (C47103 * C47201 + C47603 * ae) +
         C47103 * C47603 * ae) /
        C47075;
    const double C525 = (C47601 * C47602 * C47199 + C47201 * C47329) / C47075;
    const double C527 = (C47104 * C47111 * C47201) / C47075;
    const double C529 = (C47111 * C47201 + C47206 * C47329) / C47075;
    const double C531 = (C47104 * (C47201 + C47205 * C47120)) / C47075;
    const double C1018 = (C47104 * (C47103 * C47201 + C47603 * ae)) / C47075;
    const double C2153 =
        (2 * C47104 * C47201 + C47104 * (C47201 + C47205 * C47329)) / C47075;
    const double C1412 =
        C47103 *
            ((-(C47104 * C47205 * ce) / C46950) / C47075 - C47116 / C47114 +
             C47104 * ((-(C47104 * C47123) / C46950) / C47075 -
                       (C47205 * ce) / C47114)) -
        (ae * (C47104 * (C47104 * C47162 + C47281 * ce) + C47159 +
               C47104 * C47281 * ce)) /
            C47114;
    const double C1415 =
        (-(C47104 * C47116) / C46950) / C47075 - (C47201 * ce) / C47114 -
        (ae * (C47104 * C47250 + C47103 * C47281 * ce)) / C47114 +
        C47103 * (C47103 * ((-(C47104 * C47123) / C46950) / C47075 -
                            (C47205 * ce) / C47114) -
                  (ae * (C47104 * C47162 + C47281 * ce)) / C47114);
    const double C47606 = C47111 * C47281;
    const double C47610 = C47281 + C47609;
    const double C47669 = C47103 * C47281;
    const double C47668 = C47281 * ae;
    const double C47672 = C47281 + C47670;
    const double C47724 = C47104 * C47281;
    const double C47723 = C47281 * ce;
    const double C47727 = C47281 + C47725;
    const double C316 = (C47103 * (C47201 + C47205 * C47120) +
                         (bs[2] * std::pow(C47107, 2) + C47281 * C47120) * ae) /
                        C47075;
    const double C532 = -(C47104 * (C47162 * C47120 + C47159) +
                          (C47603 + C47281 * C47120) * ce) /
                        C46950;
    const double C1262 =
        (2 * (C47103 * C47201 + C47603 * ae) +
         C47103 * (C47201 + C47103 * (C47103 * C47205 + C47281 * ae) +
                   C47103 * C47281 * ae) +
         (C47603 + C47281 * C47253) * ae) /
        C47075;
    const double C1401 = -(C47104 * (C47162 * C47253 + C47159) +
                           (C47603 + C47281 * C47253) * ce) /
                         C46950;
    const double C2154 = (-2 * (C47104 * C47159 + C47603 * ce)) / C46950 -
                         (C47104 * (C47104 * (C47104 * C47162 + C47281 * ce) +
                                    C47159 + C47104 * C47281 * ce)) /
                             C46950 -
                         ((C47603 + C47281 * C47329) * ce) / C46950;
    const double C118 =
        2 * C47111 * C47603 + C47111 * (C47603 + C47281 * C47120);
    const double C305 = C47103 * (C47603 + C47281 * C47120);
    const double C517 = C47104 * (C47603 + C47281 * C47120);
    const double C1253 =
        2 * C47103 * C47603 + C47103 * (C47603 + C47281 * C47253);
    const double C1388 = C47104 * (C47603 + C47281 * C47253);
    const double C2147 =
        2 * C47104 * C47603 + C47104 * (C47603 + C47281 * C47329);
    const double C11103 = C48228 * C543;
    const double C47177 = C47176 + C47166;
    const double C47187 = -2 * C47184;
    const double C47265 = C47184 * C47253;
    const double C47374 = ae * C47184;
    const double C47371 = C47103 * C47184;
    const double C47446 = C47104 * C47184;
    const double C47356 = C47351 + C47166;
    const double C47485 = C47479 / C47114;
    const double C47487 = -2 * C47477;
    const double C47483 = ae * C47477;
    const double C47542 = C47104 * C47477;
    const double C47220 = C47210 + C47219;
    const double C47228 = 2 * C47226;
    const double C47335 = C47226 * C47329;
    const double C47418 = C47226 * ce;
    const double C47416 = C47104 * C47226;
    const double C47772 = C47103 * C47226;
    const double C47457 = C47210 + C47455;
    const double C47519 = C47510 / C47114;
    const double C47517 = C47508 * ce;
    const double C47572 = 2 * C47508;
    const double C47298 = C47244 + C47297;
    const double C47425 = C47103 * C47419;
    const double C47424 = C47419 * C47253;
    const double C47460 = C47419 * C47329;
    const double C47556 = C47516 * C47329;
    const double C47522 = C47244 + C47515;
    const double C47560 = C47244 + C47557;
    const double C48329 = C48293 * C47981;
    const double C48328 = C47981 * C48291;
    const double C5057 = -(C47981 * C48292) / C47075;
    const double C48000 = C47998 * C47993;
    const double C47999 = C47998 / C46967;
    const double C48008 = C48006 * C47998;
    const double C48297 = C47998 * C47994;
    const double C48336 = C48301 * C47998;
    const double C48330 = C47998 * C48294;
    const double C48078 = C48025 / C46967;
    const double C48080 = C48025 * C48077;
    const double C48087 = C48006 * C48025;
    const double C48312 = C48025 * C48079;
    const double C48342 = C48301 * C48025;
    const double C48340 = C48025 * C48306;
    const double C48362 = C48293 * C48245;
    const double C48361 = C48245 * C48325;
    const double C31866 = -(C48245 * C48327) / C47075;
    const double C47015 = C47010 / C46967;
    const double C47014 = C46948 * C47010;
    const double C46968 = 2 * C46955;
    const double C46990 = C46955 / C46952;
    const double C512 = ((0 * ce) / C46950 - C46955 / C46952) / (2 * C46950) +
                        (0 * ce) / C46950;
    const double C831 =
        ((C48042 - (C46948 * 2 * C46955) / C46950) * ce) / C46950 -
        C46949 / C46954;
    const double C832 = (0 * ce) / C46950 - C46955 / C46952;
    const double C1935 = (C48042 * std::pow(C48121, 2)) / C46952 + C48120;
    const double C48123 = C48122 * C48121;
    const double C48128 = C48122 / C46954;
    const double C48311 = C48122 / C46950;
    const double C48309 = C48006 * C48122;
    const double C511 =
        (((C48042 - (C46948 * 2 * C46955) / C46950) * ce) / C46950 -
         C46949 / C46954) /
            (2 * C46950) +
        ((C46948 * ((0 * ce) / C46950 - C46955 / C46952) + C48129) * ce) /
            C46950;
    const double C48130 = C48129 * C48121;
    const double C48322 = C48119 * C48129;
    const double C48321 = 2 * C48129;
    const double C48358 = C48129 / C48304;
    const double C2141 = C48129 / C48339;
    const double C4043 = C48129 / C46967;
    const double C48354 = C48318 / C46950;
    const double C1936 = (-2 * C48006 * C48318) / C46950;
    const double C48370 = C48343 / C46952;
    const double C47019 = C47013 + C46985;
    const double C22149 = ((0 * ae) / C47075 - C47092 / C47088) / (2 * C47075) -
                          (0 * be) / C47075;
    const double C148 = C113 * C117;
    const double C146 = C113 * C125;
    const double C144 = C113 * C116;
    const double C352 = C113 * C306;
    const double C556 = C113 * C515;
    const double C11104 = C113 * C514;
    const double C11102 = C113 * C524;
    const double C11100 = C113 * C513;
    const double C11592 = C113 * C1013;
    const double C5076 = C5059 * C117;
    const double C5066 = C5059 * C125;
    const double C5062 = C5059 * C116;
    const double C5262 = C5059 * C306;
    const double C5452 = C5059 * C515;
    const double C37617 = C5059 * C514;
    const double C37615 = C5059 * C524;
    const double C37611 = C5059 * C513;
    const double C38087 = C5059 * C1013;
    const double C5064 = C5060 * C306;
    const double C37609 = C5060 * C1013;
    const double C16490 = C16473 * C117;
    const double C16480 = C16473 * C125;
    const double C16476 = C16473 * C116;
    const double C16676 = C16473 * C306;
    const double C16866 = C16473 * C515;
    const double C26595 = C16473 * C514;
    const double C26593 = C16473 * C524;
    const double C26589 = C16473 * C513;
    const double C27065 = C16473 * C1013;
    const double C16478 = C16474 * C306;
    const double C26587 = C16474 * C1013;
    const double C22148 =
        (((C48228 - (C47074 * 2 * C47092) / C47075) * ae) / C47075 -
         C47087 / C47090) /
            (2 * C47075) -
        ((C47074 * ((0 * ae) / C47075 - C47092 / C47088) + C48360) * be) /
            C47075;
    const double C22145 = C48360 / C47986;
    const double C5055 = C48359 / C47075;
    const double C22143 = C48228 / C47986 - (C48359 * C48326) / C47088;
    const double C22144 = C48359 / C47090 - (C48360 * C48326) / C47075;
    const double C16487 = C16469 * C138;
    const double C16481 = C16469 * C137;
    const double C16477 = C16469 * C124;
    const double C26594 = C16469 * C543;
    const double C26590 = C16469 * C523;
    const double C153 = C48228 * C139;
    const double C16497 = C16469 * C139;
    const double C351 = C48228 * C336;
    const double C5069 = C48360 * C336;
    const double C16483 = C48360 * C336;
    const double C16673 = C16469 * C336;
    const double C47131 = C47130 / C46950;
    const double C47140 = -2 * C47136;
    const double C47263 = C47103 * C47136;
    const double C47314 = C47104 * C47136;
    const double C47372 = C47136 / C47114;
    const double C47353 = C47349 / C46950;
    const double C47403 = C47398 / C46950;
    const double C1416 =
        (-(C47104 * C47205 * ce) / C46950) / C47075 - C47116 / C47114 +
        C47104 *
            ((-(C47104 * C47123) / C46950) / C47075 - (C47205 * ce) / C47114) -
        (ae * (C47104 * (C47104 * C47103 * C47166 + C47289 * ce) + C47250 +
               C47104 * C47289 * ce)) /
            C47114 +
        C47103 *
            (C47103 * ((-(C47104 * C47210 * ce) / C46950) / C47075 - C47127 +
                       C47104 * ((-(C47104 * C47129) / C46950) / C47075 -
                                 (C47210 * ce) / C47114)) -
             (ae * (C47104 * (C47104 * C47166 + C47242 * ce) + C47162 +
                    C47104 * C47242 * ce)) /
                 C47114);
    const double C47254 = C47251 / C46950;
    const double C47308 = C47306 / C46950;
    const double C159 = C48228 * C140;
    const double C16503 = C16469 * C140;
    const double C347 = C48228 * C335;
    const double C5071 = C48360 * C335;
    const double C16485 = C48360 * C335;
    const double C16691 = C16469 * C335;
    const double C357 = C48228 * C339;
    const double C5257 = C48360 * C339;
    const double C16683 = C16469 * C339;
    const double C16671 = C48360 * C339;
    const double C563 = C48228 * C546;
    const double C16877 = C16469 * C546;
    const double C1039 = C48228 * C1029;
    const double C5455 = C48360 * C1029;
    const double C16869 = C48360 * C1029;
    const double C17395 = C16469 * C1029;
    const double C47168 = C47167 + C47162;
    const double C47173 = -2 * C47171;
    const double C47264 = ae * C47171;
    const double C47262 = C47103 * C47171;
    const double C1270 =
        2 * ((-(C47103 * C47247) / C46950) / C47075 - (ae * C47163) / C47114) -
        (ae * (C47171 * std::pow(C47103, 2) + C47163)) / C47114 +
        C47103 *
            ((-(ae * C47103 * C47171) / C46950) / C47075 - C47247 / C47114 +
             C47103 * ((-(C47103 * C47136) / C46950) / C47075 -
                       (ae * C47171) / C47114));
    const double C47732 = C47104 * C47171;
    const double C1259 = (-2 * C47103 * C47163) / C46950 -
                         (C47103 * (C47171 * C47253 + C47163)) / C46950;
    const double C47258 = C47256 + C47162;
    const double C47354 = C47350 / C47114;
    const double C47355 = -2 * C47348;
    const double C47352 = ae * C47348;
    const double C47793 = C47104 * C47348;
    const double C47440 = C47438 + C47439;
    const double C47212 = C47205 + C47211;
    const double C47217 = 2 * C47215;
    const double C47315 = C47215 * ce;
    const double C47334 = C47104 * C47215;
    const double C1413 =
        C47103 *
            ((-(C47104 * C47215 * ce) / C46950) / C47075 - C47247 / C47114 +
             C47104 * ((-(C47104 * C47136) / C46950) / C47075 -
                       (C47215 * ce) / C47114)) -
        (ae * (C47104 * (C47104 * C47171 + C47283 * ce) + C47163 +
               C47104 * C47283 * ce)) /
            C47114;
    const double C47675 = C47103 * C47215;
    const double C2157 =
        (2 * C47104 * C47206 + C47104 * (C47206 + C47215 * C47329)) / C47075;
    const double C47331 = C47205 + C47330;
    const double C47404 = C47399 / C47114;
    const double C47402 = C47397 * ce;
    const double C47467 = 2 * C47397;
    const double C47765 = C47760 + C47761;
    const double C47286 = C47242 + C47285;
    const double C47293 = C47103 * C47292;
    const double C47302 = 2 * C47292;
    const double C47447 = C47292 * ce;
    const double C47459 = C47104 * C47292;
    const double C47678 = C47292 * C47253;
    const double C47735 = C47292 * C47329;
    const double C47773 = C47292 * ae;
    const double C47514 = 2 * C47401;
    const double C47543 = C47401 * ce;
    const double C47555 = C47104 * C47401;
    const double C47796 = C47401 * C47329;
    const double C47833 = C47401 * ae;
    const double C47405 = C47242 + C47400;
    const double C47456 = C47242 + C47454;
    const double C47521 = C47513 * ce;
    const double C47570 = 2 * C47513;
    const double C47520 = C47511 + C47512;
    const double C47837 = C47831 + C47832;
    const double C47145 = C47144 / C46950;
    const double C47377 = C47103 * C47373;
    const double C47417 = C47104 * C47373;
    const double C47484 = C47478 / C46950;
    const double C47518 = C47509 / C46950;
    const double C47191 = C47190 + C47174;
    const double C47380 = C47375 * C47253;
    const double C47488 = C47481 + C47174;
    const double C47231 = C47218 + C47230;
    const double C47461 = C47420 * C47329;
    const double C47561 = C47218 + C47558;
    const double C150 = C113 * C127;
    const double C5072 = C5059 * C127;
    const double C16486 = C16473 * C127;
    const double C152 = C113 * C128;
    const double C5082 = C5059 * C128;
    const double C16496 = C16473 * C128;
    const double C346 = C113 * C315;
    const double C5070 = C5060 * C315;
    const double C5276 = C5059 * C315;
    const double C16484 = C16474 * C315;
    const double C16690 = C16473 * C315;
    const double C350 = C113 * C317;
    const double C5068 = C5060 * C317;
    const double C5258 = C5059 * C317;
    const double C16482 = C16474 * C317;
    const double C16672 = C16473 * C317;
    const double C356 = C113 * C324;
    const double C5268 = C5059 * C324;
    const double C5256 = C5060 * C324;
    const double C16682 = C16473 * C324;
    const double C16670 = C16474 * C324;
    const double C11106 = C113 * C526;
    const double C26599 = C16473 * C526;
    const double C37621 = C5059 * C526;
    const double C558 = C113 * C528;
    const double C5456 = C5059 * C528;
    const double C16870 = C16473 * C528;
    const double C11594 = C113 * C1019;
    const double C26591 = C16474 * C1019;
    const double C27069 = C16473 * C1019;
    const double C37613 = C5060 * C1019;
    const double C38091 = C5059 * C1019;
    const double C11107 = C48228 * C544;
    const double C26600 = C16469 * C544;
    const double C559 = C48228 * C545;
    const double C16871 = C16469 * C545;
    const double C569 = C48228 * C547;
    const double C16885 = C16469 * C547;
    const double C11595 = C48228 * C1028;
    const double C26592 = C48360 * C1028;
    const double C27070 = C16469 * C1028;
    const double C37614 = C48360 * C1028;
    const double C149 = C48228 * C126;
    const double C16491 = C16469 * C126;
    const double C155 = C48228 * C129;
    const double C16493 = C16469 * C129;
    const double C353 = C48228 * C318;
    const double C5065 = C48360 * C318;
    const double C16479 = C48360 * C318;
    const double C16677 = C16469 * C318;
    const double C11105 = C48228 * C525;
    const double C26596 = C16469 * C525;
    const double C557 = C48228 * C527;
    const double C16867 = C16469 * C527;
    const double C561 = C48228 * C529;
    const double C16873 = C16469 * C529;
    const double C567 = C48228 * C531;
    const double C16881 = C16469 * C531;
    const double C11593 = C48228 * C1018;
    const double C26588 = C48360 * C1018;
    const double C27066 = C16469 * C1018;
    const double C37610 = C48360 * C1018;
    const double C12871 = C48228 * C2153;
    const double C28334 = C16469 * C2153;
    const double C11983 = C48228 * C1412;
    const double C26602 = C48360 * C1412;
    const double C27458 = C16469 * C1412;
    const double C37624 = C48360 * C1412;
    const double C11987 = C48228 * C1415;
    const double C27072 = C48360 * C1415;
    const double C27466 = C16469 * C1415;
    const double C38094 = C48360 * C1415;
    const double C323 =
        (C47111 * C47201 + C47103 * (C47103 * C47206 + C47606 * ae) +
         C47103 * C47606 * ae) /
        C47075;
    const double C530 = -(C47104 * (C47104 * C47163 + C47606 * ce) +
                          C47111 * C47159 + C47104 * C47606 * ce) /
                        C46950;
    const double C1020 = (C47104 * (C47103 * C47206 + C47606 * ae)) / C47075;
    const double C1021 =
        -(C47104 * C47103 * C47163 + C47103 * C47606 * ce) / C46950;
    const double C1260 =
        (2 * (C47103 * C47206 + C47606 * ae) +
         C47103 * (C47206 + C47103 * (C47103 * C47215 + C47283 * ae) +
                   C47103 * C47283 * ae) +
         (C47606 + C47283 * C47253) * ae) /
        C47075;
    const double C1405 = -(C47104 * (C47171 * C47253 + C47163) +
                           (C47606 + C47283 * C47253) * ce) /
                         C46950;
    const double C2158 = (-2 * (C47104 * C47163 + C47606 * ce)) / C46950 -
                         (C47104 * (C47104 * (C47104 * C47171 + C47283 * ce) +
                                    C47163 + C47104 * C47283 * ce)) /
                             C46950 -
                         ((C47606 + C47283 * C47329) * ce) / C46950;
    const double C309 = C47111 * C47603 + C47606 * C47253;
    const double C516 = C47111 * C47603 + C47606 * C47329;
    const double C1014 = C47104 * C47103 * C47606;
    const double C1252 =
        2 * C47103 * C47606 + C47103 * (C47606 + C47283 * C47253);
    const double C1386 = C47103 * C47606 + C47677 * C47329;
    const double C1390 = C47104 * (C47606 + C47283 * C47253);
    const double C2149 =
        2 * C47104 * C47606 + C47104 * (C47606 + C47283 * C47329);
    const double C119 = 3 * (C47603 + C47281 * C47120) +
                        C47111 * (2 * C47606 + C47111 * C47610);
    const double C310 = C47603 + C47281 * C47120 + C47610 * C47253;
    const double C311 = C47103 * (2 * C47606 + C47111 * C47610);
    const double C518 = C47603 + C47281 * C47120 + C47610 * C47329;
    const double C519 = C47104 * (2 * C47606 + C47111 * C47610);
    const double C1015 = C47104 * C47103 * C47610;
    const double C1395 = -(C47104 * (C47104 * C47250 + C47669 * ce) +
                           C47103 * C47159 + C47104 * C47669 * ce) /
                         C46950;
    const double C2585 = (-2 * (C47104 * C47250 + C47669 * ce)) / C46950 -
                         (C47104 * (C47104 * (C47104 * C47348 + C47289 * ce) +
                                    C47250 + C47104 * C47289 * ce)) /
                             C46950 -
                         ((C47669 + C47289 * C47329) * ce) / C46950;
    const double C1385 = C47103 * C47603 + C47669 * C47329;
    const double C2581 =
        2 * C47104 * C47669 + C47104 * (C47669 + C47289 * C47329);
    const double C47671 = C47667 + C47668;
    const double C1254 = 3 * (C47603 + C47281 * C47253) +
                         C47103 * (2 * C47669 + C47103 * C47672);
    const double C1389 = C47603 + C47281 * C47253 + C47672 * C47329;
    const double C1813 = C47104 * (2 * C47669 + C47103 * C47672);
    const double C47726 = C47722 + C47723;
    const double C2148 = 3 * (C47603 + C47281 * C47329) +
                         C47104 * (2 * C47724 + C47104 * C47727);
    const double C349 = C48228 * C316;
    const double C5075 = C48360 * C316;
    const double C16489 = C48360 * C316;
    const double C16687 = C16469 * C316;
    const double C568 = C113 * C532;
    const double C5470 = C5059 * C532;
    const double C16884 = C16473 * C532;
    const double C11986 = C113 * C1401;
    const double C27071 = C16474 * C1401;
    const double C27465 = C16473 * C1401;
    const double C38093 = C5060 * C1401;
    const double C38487 = C5059 * C1401;
    const double C12872 = C113 * C2154;
    const double C28337 = C16473 * C2154;
    const double C39355 = C5059 * C2154;
    const double C154 = C113 * C118;
    const double C5078 = C5059 * C118;
    const double C16492 = C16473 * C118;
    const double C348 = C113 * C305;
    const double C5074 = C5060 * C305;
    const double C5272 = C5059 * C305;
    const double C16488 = C16474 * C305;
    const double C16686 = C16473 * C305;
    const double C566 = C113 * C517;
    const double C5466 = C5059 * C517;
    const double C16880 = C16473 * C517;
    const double C11984 = C113 * C1388;
    const double C27067 = C16474 * C1388;
    const double C27461 = C16473 * C1388;
    const double C38089 = C5060 * C1388;
    const double C38483 = C5059 * C1388;
    const double C12870 = C113 * C2147;
    const double C28333 = C16473 * C2147;
    const double C39351 = C5059 * C2147;
    const double C47178 = C47111 * C47177;
    const double C47183 = -3 * C47177;
    const double C47275 = ae * C47177;
    const double C47273 = C47103 * C47177;
    const double C47742 = C47104 * C47177;
    const double C47189 = C47187 / C46950;
    const double C47268 = C47265 + C47171;
    const double C47378 = C47374 / C47114;
    const double C47379 = -2 * C47371;
    const double C47376 = ae * C47371;
    const double C47801 = C47104 * C47371;
    const double C47360 = C47103 * C47356;
    const double C47480 = -3 * C47356;
    const double C47476 = ae * C47356;
    const double C47852 = C47104 * C47356;
    const double C47492 = C47487 / C46950;
    const double C47490 = C47483 / C46950;
    const double C47221 = C47111 * C47220;
    const double C47225 = 3 * C47220;
    const double C47323 = C47220 * ce;
    const double C47339 = C47104 * C47220;
    const double C47683 = C47103 * C47220;
    const double C47336 = C47215 + C47335;
    const double C47423 = C47418 / C47114;
    const double C47421 = C47416 * ce;
    const double C47471 = 2 * C47416;
    const double C47468 = C47104 * C47457;
    const double C47564 = C47457 * ce;
    const double C47577 = 3 * C47457;
    const double C47523 = C47517 / C46950;
    const double C47299 = C47103 * C47298;
    const double C47303 = C47111 * C47298;
    const double C47686 = C47298 * C47253;
    const double C47745 = C47298 * C47329;
    const double C47804 = C47425 * C47329;
    const double C47428 = C47292 + C47424;
    const double C47462 = C47292 + C47460;
    const double C47559 = C47401 + C47556;
    const double C47526 = C47103 * C47522;
    const double C47855 = C47522 * C47329;
    const double C47571 = C47104 * C47560;
    const double C106 = C48329 / C47986;
    const double C104 = C47981 / C47986 - (C48328 * C48292) / C47088;
    const double C105 = C48328 / C47090 - (C48329 * C48292) / C47075;
    const double C16471 = C48328 / C47075;
    const double C48001 = C48000 * C47994;
    const double C48007 = C48000 / C46954;
    const double C48298 = C48006 * C48000;
    const double C48296 = C48000 / C46950;
    const double C302 = (C47998 * std::pow(C47994, 2)) / C46952 + C47999;
    const double C48009 = C48008 * C47994;
    const double C48302 = C47993 * C48008;
    const double C48300 = 2 * C48008;
    const double C48346 = C48008 / C48304;
    const double C112 = C48008 / C48339;
    const double C3074 = C48008 / C46967;
    const double C48332 = C48297 / C46950;
    const double C303 = (-2 * C48006 * C48297) / C46950;
    const double C48363 = C48330 / C46952;
    const double C1177 = (C48025 * std::pow(C48079, 2)) / C46952 + C48078;
    const double C48081 = C48080 * C48079;
    const double C48086 = C48080 / C46954;
    const double C48310 = C48080 / C46950;
    const double C48307 = C48006 * C48080;
    const double C48088 = C48087 * C48079;
    const double C48316 = C48077 * C48087;
    const double C48315 = 2 * C48087;
    const double C48352 = C48087 / C48304;
    const double C1249 = C48087 / C48339;
    const double C3071 = C48087 / C46967;
    const double C48348 = C48312 / C46950;
    const double C1178 = (-2 * C48006 * C48312) / C46950;
    const double C48368 = C48340 / C46952;
    const double C42866 = C48362 / C47986;
    const double C10789 = C48361 / C47075;
    const double C42864 = C48245 / C47986 - (C48361 * C48327) / C47088;
    const double C42865 = C48361 / C47090 - (C48362 * C48327) / C47075;
    const double C47020 = C47014 + 0;
    const double C46987 = C46948 * C46968;
    const double C1939 =
        ((-C46949 / C46950) / C46967 -
         ((C48042 - (C46948 * C46968) / C46950) * de) / C46950) /
            C46967 -
        ((C46948 * ((-C46968 / C46950) / C46967 - (0 * de) / C46950) + C48129) *
         de) /
            C46950;
    const double C1940 =
        ((-C46968 / C46950) / C46967 - (0 * de) / C46950) / C46967 -
        (0 * de) / C46950;
    const double C3468 = (-C46968 / C46950) / C46967 - (0 * de) / C46950;
    const double C47000 = C46996 - C46990;
    const double C48124 = C48123 / C46952;
    const double C510 =
        (((0 - (C46948 * C46949) / C46950) * ce) / C46950 - (0 * de) / C46954) /
            (2 * C46950) +
        ((C46948 * (((C48042 - (C46948 * 2 * C46955) / C46950) * ce) / C46950 -
                    C46949 / C46954) +
          C48311) *
         ce) /
            C46950 +
        (0 * ce) / C46950 - C46955 / C46952;
    const double C48344 = 2 * C48309;
    const double C48131 = C48130 / C46950;
    const double C48357 = C48322 / C46954;
    const double C48375 = C48311 - C48354;
    const double C3465 = -C48354;
    const double C48382 = C48370 + C48120;
    const double C47023 = C47019 / C46967;
    const double C165 = C146 + C147;
    const double C164 = C144 + C145;
    const double C11121 = C11102 + C11103;
    const double C11120 = C11100 + C11101;
    const double C5089 = C5055 * C140;
    const double C5083 = C5055 * C139;
    const double C5079 = C5055 * C129;
    const double C5077 = C5055 * C126;
    const double C5073 = C5055 * C138;
    const double C5067 = C5055 * C137;
    const double C5063 = C5055 * C124;
    const double C5277 = C5055 * C335;
    const double C5273 = C5055 * C316;
    const double C5269 = C5055 * C339;
    const double C5263 = C5055 * C318;
    const double C5259 = C5055 * C336;
    const double C5471 = C5055 * C547;
    const double C5467 = C5055 * C531;
    const double C5463 = C5055 * C546;
    const double C5459 = C5055 * C529;
    const double C5457 = C5055 * C545;
    const double C5453 = C5055 * C527;
    const double C5981 = C5055 * C1029;
    const double C37622 = C5055 * C544;
    const double C37618 = C5055 * C525;
    const double C37616 = C5055 * C543;
    const double C37612 = C5055 * C523;
    const double C38092 = C5055 * C1028;
    const double C38088 = C5055 * C1018;
    const double C38488 = C5055 * C1415;
    const double C38480 = C5055 * C1412;
    const double C39352 = C5055 * C2153;
    const double C22147 =
        (((0 - (C47074 * C47087) / C47075) * ae) / C47075 - (0 * be) / C47090) /
            (2 * C47075) -
        ((C47074 * (((C48228 - (C47074 * 2 * C47092) / C47075) * ae) / C47075 -
                    C47087 / C47090) +
          C5055) *
         be) /
            C47075 +
        (0 * ae) / C47075 - C47092 / C47088;
    const double C16510 = C16480 + C16481;
    const double C16508 = C16476 + C16477;
    const double C26606 = C26593 + C26594;
    const double C26604 = C26589 + C26590;
    const double C47132 = -C47131;
    const double C47142 = C47140 / C47114;
    const double C47266 = C47263 / C46950;
    const double C47316 = C47314 / C46950;
    const double C47358 = -C47353;
    const double C47407 = -C47403;
    const double C11991 = C48228 * C1416;
    const double C27472 = C16469 * C1416;
    const double C27456 = C48360 * C1416;
    const double C38494 = C5055 * C1416;
    const double C38478 = C48360 * C1416;
    const double C47257 = -C47254;
    const double C47310 = -C47308;
    const double C131 =
        (-3 * (C47162 * C47120 + C47159)) / C46950 +
        C47111 * ((-2 * C47163) / C46950 - (C47111 * C47168) / C46950);
    const double C326 = -(C47168 * C47253 + C47162 * C47120 + C47159) / C46950;
    const double C328 =
        C47103 * ((-2 * C47163) / C46950 - (C47111 * C47168) / C46950);
    const double C534 = -(C47104 * (C47104 * C47168 + C47610 * ce) +
                          C47162 * C47120 + C47159 + C47104 * C47610 * ce) /
                        C46950;
    const double C536 =
        C47104 * ((-2 * C47163) / C46950 - (C47111 * C47168) / C46950) -
        ((2 * C47606 + C47111 * C47610) * ce) / C46950;
    const double C1023 =
        -(C47104 * C47103 * C47168 + C47103 * C47610 * ce) / C46950;
    const double C1257 = (-2 * C47103 * C47168) / C46950 -
                         (C47103 * (C47177 * C47253 + C47168)) / C46950;
    const double C47175 = C47173 / C46950;
    const double C47267 = C47264 / C47114;
    const double C1417 =
        (-(C47104 * C47247) / C46950) / C47075 - (C47206 * ce) / C47114 -
        (ae * (C47104 * C47262 + C47103 * C47283 * ce)) / C47114 +
        C47103 * (C47103 * ((-(C47104 * C47136) / C46950) / C47075 -
                            (C47215 * ce) / C47114) -
                  (ae * (C47104 * C47171 + C47283 * ce)) / C47114);
    const double C1397 = -(C47104 * (C47104 * C47262 + C47677 * ce) +
                           C47103 * C47163 + C47104 * C47677 * ce) /
                         C46950;
    const double C1535 = C48228 * C1270;
    const double C5271 = C48360 * C1270;
    const double C6523 = C5055 * C1270;
    const double C16685 = C48360 * C1270;
    const double C17921 = C16469 * C1270;
    const double C47736 = C47732 + C47733;
    const double C1534 = C113 * C1259;
    const double C5270 = C5060 * C1259;
    const double C6522 = C5059 * C1259;
    const double C16684 = C16474 * C1259;
    const double C17920 = C16473 * C1259;
    const double C1264 =
        (-3 * (C47162 * C47253 + C47159)) / C46950 +
        C47103 * ((-2 * C47250) / C46950 - (C47103 * C47258) / C46950);
    const double C1403 = -(C47104 * (C47104 * C47258 + C47672 * ce) +
                           C47162 * C47253 + C47159 + C47104 * C47672 * ce) /
                         C46950;
    const double C1817 =
        C47104 * ((-2 * C47250) / C46950 - (C47103 * C47258) / C46950) -
        ((2 * C47669 + C47103 * C47672) * ce) / C46950;
    const double C47359 = C47355 / C46950;
    const double C47357 = C47352 / C46950;
    const double C47797 = C47793 + C47794;
    const double C47441 = ae * C47440;
    const double C47813 = C47104 * C47440;
    const double C47873 = -2 * C47440;
    const double C130 = (3 * (C47201 + C47205 * C47120) +
                         C47111 * (2 * C47206 + C47111 * C47212)) /
                        C47075;
    const double C325 =
        (C47201 + C47205 * C47120 + C47103 * (C47103 * C47212 + C47610 * ae) +
         C47103 * C47610 * ae) /
        C47075;
    const double C327 = (C47103 * (2 * C47206 + C47111 * C47212) +
                         (2 * C47606 + C47111 * C47610) * ae) /
                        C47075;
    const double C533 = (C47201 + C47205 * C47120 + C47212 * C47329) / C47075;
    const double C535 = (C47104 * (2 * C47206 + C47111 * C47212)) / C47075;
    const double C1022 = (C47104 * (C47103 * C47212 + C47610 * ae)) / C47075;
    const double C2161 =
        (2 * C47104 * C47212 + C47104 * (C47212 + C47220 * C47329)) / C47075;
    const double C47317 = C47315 / C47114;
    const double C2329 = C48228 * C1413;
    const double C5465 = C48360 * C1413;
    const double C7459 = C5055 * C1413;
    const double C16879 = C48360 * C1413;
    const double C18841 = C16469 * C1413;
    const double C47679 = C47675 + C47676;
    const double C2463 = C48228 * C2157;
    const double C7597 = C5055 * C2157;
    const double C18979 = C16469 * C2157;
    const double C2155 = (3 * (C47201 + C47205 * C47329) +
                          C47104 * (2 * C47328 + C47104 * C47331)) /
                         C47075;
    const double C47406 = C47402 / C46950;
    const double C47767 = C47103 * C47765;
    const double C47830 = 2 * C47765;
    const double C47617 = C47111 * C47286;
    const double C47622 = 3 * C47286;
    const double C47685 = C47103 * C47286;
    const double C47684 = C47286 * ae;
    const double C47744 = C47104 * C47286;
    const double C47743 = C47286 * ce;
    const double C1258 =
        (2 * (C47103 * C47212 + C47610 * ae) +
         C47103 * (C47212 + C47103 * (C47103 * C47220 + C47286 * ae) +
                   C47103 * C47286 * ae) +
         (C47610 + C47286 * C47253) * ae) /
        C47075;
    const double C1409 = -(C47104 * (C47177 * C47253 + C47168) +
                           (C47610 + C47286 * C47253) * ce) /
                         C46950;
    const double C2162 = (-2 * (C47104 * C47168 + C47610 * ce)) / C46950 -
                         (C47104 * (C47104 * (C47104 * C47177 + C47286 * ce) +
                                    C47168 + C47104 * C47286 * ce)) /
                             C46950 -
                         ((C47610 + C47286 * C47329) * ce) / C46950;
    const double C1251 =
        2 * C47103 * C47610 + C47103 * (C47610 + C47286 * C47253);
    const double C1392 = C47104 * (C47610 + C47286 * C47253);
    const double C2151 =
        2 * C47104 * C47610 + C47104 * (C47610 + C47286 * C47329);
    const double C1418 =
        (-(C47104 * C47215 * ce) / C46950) / C47075 - C47247 / C47114 +
        C47104 *
            ((-(C47104 * C47136) / C46950) / C47075 - (C47215 * ce) / C47114) -
        (ae * (C47104 * (C47104 * C47103 * C47184 + C47293 * ce) + C47262 +
               C47104 * C47293 * ce)) /
            C47114 +
        C47103 * (C47103 * ((-(C47104 * C47226 * ce) / C46950) / C47075 -
                            C47136 / C47114 +
                            C47104 * ((-(C47104 * C47111 * C47143) / C46950) /
                                          C47075 -
                                      (C47226 * ce) / C47114)) -
                  (ae * (C47104 * (C47104 * C47184 + C47292 * ce) + C47171 +
                         C47104 * C47292 * ce)) /
                      C47114);
    const double C47775 = 2 * C47293;
    const double C47774 = C47293 * ae;
    const double C47803 = C47104 * C47293;
    const double C47802 = C47293 * ce;
    const double C2587 = (-2 * (C47104 * C47262 + C47677 * ce)) / C46950 -
                         (C47104 * (C47104 * (C47104 * C47371 + C47293 * ce) +
                                    C47262 + C47104 * C47293 * ce)) /
                             C46950 -
                         ((C47677 + C47293 * C47329) * ce) / C46950;
    const double C2582 =
        2 * C47104 * C47677 + C47104 * (C47677 + C47293 * C47329);
    const double C47448 = C47446 + C47447;
    const double C47824 = 2 * C47459;
    const double C47823 = C47459 * ce;
    const double C47680 = C47283 + C47678;
    const double C47737 = C47283 + C47735;
    const double C47777 = C47772 + C47773;
    const double C47546 = C47542 + C47543;
    const double C47866 = 2 * C47555;
    const double C47865 = C47555 * ce;
    const double C47798 = C47289 + C47796;
    const double C47764 = C47103 * C47405;
    const double C47835 = 3 * C47405;
    const double C47834 = C47405 * ae;
    const double C47854 = C47104 * C47405;
    const double C47853 = C47405 * ce;
    const double C7738 = (-2 * (C47104 * C47258 + C47672 * ce)) / C46950 -
                         (C47104 * (C47104 * (C47104 * C47356 + C47405 * ce) +
                                    C47258 + C47104 * C47405 * ce)) /
                             C46950 -
                         ((C47672 + C47405 * C47329) * ce) / C46950;
    const double C7735 =
        2 * C47104 * C47672 + C47104 * (C47672 + C47405 * C47329);
    const double C47816 = C47104 * C47456;
    const double C47876 = 3 * C47456;
    const double C47875 = C47456 * ce;
    const double C47525 = C47104 * C47520;
    const double C47545 = ae * C47520;
    const double C47839 = C47103 * C47837;
    const double C47861 = C47837 * C47329;
    const double C47146 = -C47145;
    const double C47382 = C47377 / C46950;
    const double C47422 = C47417 / C46950;
    const double C47491 = -C47484;
    const double C47524 = -C47518;
    const double C47192 = C47111 * C47191;
    const double C47276 = C47191 * C47253;
    const double C47384 = C47380 + C47184;
    const double C47493 = C47103 * C47488;
    const double C47232 = C47111 * C47231;
    const double C47340 = C47231 * C47329;
    const double C47463 = C47226 + C47461;
    const double C47573 = C47104 * C47561;
    const double C167 = C150 + C151;
    const double C16513 = C16486 + C16487;
    const double C168 = C152 + C153;
    const double C16518 = C16496 + C16497;
    const double C370 = C346 + C347;
    const double C5098 = C5070 + C5071;
    const double C16512 = C16484 + C16485;
    const double C16712 = C16690 + C16691;
    const double C372 = C350 + C351;
    const double C5097 = C5068 + C5069;
    const double C16511 = C16482 + C16483;
    const double C16703 = C16672 + C16673;
    const double C375 = C356 + C357;
    const double C5288 = C5256 + C5257;
    const double C16708 = C16682 + C16683;
    const double C16702 = C16670 + C16671;
    const double C11123 = C11106 + C11107;
    const double C26609 = C26599 + C26600;
    const double C585 = C558 + C559;
    const double C16899 = C16870 + C16871;
    const double C11605 = C11594 + C11595;
    const double C26605 = C26591 + C26592;
    const double C27075 = C27069 + C27070;
    const double C37627 = C37613 + C37614;
    const double C166 = C148 + C149;
    const double C16515 = C16490 + C16491;
    const double C373 = C352 + C353;
    const double C5095 = C5064 + C5065;
    const double C16509 = C16478 + C16479;
    const double C16705 = C16676 + C16677;
    const double C11122 = C11104 + C11105;
    const double C26607 = C26595 + C26596;
    const double C584 = C556 + C557;
    const double C16897 = C16866 + C16867;
    const double C11604 = C11592 + C11593;
    const double C26603 = C26587 + C26588;
    const double C27073 = C27065 + C27066;
    const double C37625 = C37609 + C37610;
    const double C355 = C48228 * C323;
    const double C5265 = C5055 * C323;
    const double C5261 = C48360 * C323;
    const double C16679 = C16469 * C323;
    const double C16675 = C48360 * C323;
    const double C562 = C113 * C530;
    const double C5462 = C5059 * C530;
    const double C16876 = C16473 * C530;
    const double C1035 = C48228 * C1020;
    const double C5451 = C48360 * C1020;
    const double C5977 = C5055 * C1020;
    const double C16865 = C48360 * C1020;
    const double C17391 = C16469 * C1020;
    const double C1038 = C113 * C1021;
    const double C5454 = C5060 * C1021;
    const double C5980 = C5059 * C1021;
    const double C16868 = C16474 * C1021;
    const double C17394 = C16473 * C1021;
    const double C1537 = C48228 * C1260;
    const double C5267 = C48360 * C1260;
    const double C6527 = C5055 * C1260;
    const double C16681 = C48360 * C1260;
    const double C17925 = C16469 * C1260;
    const double C1700 = C113 * C1405;
    const double C5982 = C5060 * C1405;
    const double C6732 = C5059 * C1405;
    const double C17396 = C16474 * C1405;
    const double C18130 = C16473 * C1405;
    const double C2464 = C113 * C2158;
    const double C7600 = C5059 * C2158;
    const double C18982 = C16473 * C2158;
    const double C354 = C113 * C309;
    const double C5264 = C5059 * C309;
    const double C5260 = C5060 * C309;
    const double C16678 = C16473 * C309;
    const double C16674 = C16474 * C309;
    const double C560 = C113 * C516;
    const double C5458 = C5059 * C516;
    const double C16872 = C16473 * C516;
    const double C1034 = C113 * C1014;
    const double C5450 = C5060 * C1014;
    const double C5976 = C5059 * C1014;
    const double C16864 = C16474 * C1014;
    const double C17390 = C16473 * C1014;
    const double C1536 = C113 * C1252;
    const double C5266 = C5060 * C1252;
    const double C6526 = C5059 * C1252;
    const double C16680 = C16474 * C1252;
    const double C17924 = C16473 * C1252;
    const double C2326 = C113 * C1386;
    const double C5460 = C5060 * C1386;
    const double C7454 = C5059 * C1386;
    const double C16874 = C16474 * C1386;
    const double C18836 = C16473 * C1386;
    const double C1698 = C113 * C1390;
    const double C5978 = C5060 * C1390;
    const double C6728 = C5059 * C1390;
    const double C17392 = C16474 * C1390;
    const double C18126 = C16473 * C1390;
    const double C2462 = C113 * C2149;
    const double C7596 = C5059 * C2149;
    const double C18978 = C16473 * C2149;
    const double C156 = C113 * C119;
    const double C5092 = C5059 * C119;
    const double C16506 = C16473 * C119;
    const double C358 = C113 * C310;
    const double C5286 = C5059 * C310;
    const double C5274 = C5060 * C310;
    const double C16700 = C16473 * C310;
    const double C16688 = C16474 * C310;
    const double C362 = C113 * C311;
    const double C5080 = C5060 * C311;
    const double C5634 = C5059 * C311;
    const double C16494 = C16474 * C311;
    const double C17048 = C16473 * C311;
    const double C570 = C113 * C518;
    const double C5476 = C5059 * C518;
    const double C16890 = C16473 * C518;
    const double C574 = C113 * C519;
    const double C5772 = C5059 * C519;
    const double C17186 = C16473 * C519;
    const double C1040 = C113 * C1015;
    const double C5468 = C5060 * C1015;
    const double C5986 = C5059 * C1015;
    const double C16882 = C16474 * C1015;
    const double C17400 = C16473 * C1015;
    const double C11982 = C113 * C1395;
    const double C26601 = C16474 * C1395;
    const double C27457 = C16473 * C1395;
    const double C37623 = C5060 * C1395;
    const double C38479 = C5059 * C1395;
    const double C13364 = C113 * C2585;
    const double C28335 = C16474 * C2585;
    const double C28813 = C16473 * C2585;
    const double C39353 = C5060 * C2585;
    const double C39831 = C5059 * C2585;
    const double C11980 = C113 * C1385;
    const double C26597 = C16474 * C1385;
    const double C27453 = C16473 * C1385;
    const double C37619 = C5060 * C1385;
    const double C38475 = C5059 * C1385;
    const double C13362 = C113 * C2581;
    const double C28331 = C16474 * C2581;
    const double C28809 = C16473 * C2581;
    const double C39349 = C5060 * C2581;
    const double C39827 = C5059 * C2581;
    const double C1263 =
        (3 * (C47201 + C47103 * C47671 + C47669 * ae) +
         C47103 * (2 * C47671 +
                   C47103 * (C47205 + C47103 * (C47103 * C47210 + C47242 * ae) +
                             C47289 * ae) +
                   C47672 * ae) +
         (2 * C47669 + C47103 * C47672) * ae) /
        C47075;
    const double C1394 =
        (C47103 * C47201 + C47603 * ae + C47671 * C47329) / C47075;
    const double C1400 =
        (C47104 * (C47201 + C47103 * C47671 + C47669 * ae)) / C47075;
    const double C1402 =
        (C47201 + C47103 * C47671 + C47669 * ae +
         (C47205 + C47103 * (C47103 * C47210 + C47242 * ae) + C47289 * ae) *
             C47329) /
        C47075;
    const double C1816 =
        (C47104 * (2 * C47671 +
                   C47103 * (C47205 + C47103 * (C47103 * C47210 + C47242 * ae) +
                             C47289 * ae) +
                   C47672 * ae)) /
        C47075;
    const double C2584 =
        (2 * C47104 * C47671 +
         C47104 * (C47671 + (C47103 * C47210 + C47242 * ae) * C47329)) /
        C47075;
    const double C7251 =
        (3 * (C47671 + C47765 * C47329) +
         C47104 *
             (2 * C47104 * C47765 +
              C47104 * (C47765 + (C47103 * C47218 + C47244 * ae) * C47329))) /
        C47075;
    const double C11988 = C113 * C1389;
    const double C27467 = C16473 * C1389;
    const double C27451 = C16474 * C1389;
    const double C38489 = C5059 * C1389;
    const double C38473 = C5060 * C1389;
    const double C12470 = C113 * C1813;
    const double C27459 = C16474 * C1813;
    const double C27941 = C16473 * C1813;
    const double C38481 = C5060 * C1813;
    const double C38963 = C5059 * C1813;
    const double C2156 =
        (-3 * (C47104 * C47726 + C47159 + C47724 * ce)) / C46950 +
        C47104 * ((-2 * C47726) / C46950 -
                  (C47104 * (C47104 * C47440 + C47162 + C47453 * ce)) / C46950 -
                  (C47727 * ce) / C46950) -
        ((2 * C47724 + C47104 * C47727) * ce) / C46950;
    const double C12874 = C113 * C2148;
    const double C28339 = C16473 * C2148;
    const double C39357 = C5059 * C2148;
    const double C590 = C568 + C569;
    const double C16906 = C16884 + C16885;
    const double C11999 = C11986 + C11987;
    const double C27076 = C27071 + C27072;
    const double C27482 = C27465 + C27466;
    const double C38098 = C38093 + C38094;
    const double C169 = C154 + C155;
    const double C16516 = C16492 + C16493;
    const double C371 = C348 + C349;
    const double C5100 = C5074 + C5075;
    const double C16514 = C16488 + C16489;
    const double C16710 = C16686 + C16687;
    const double C589 = C566 + C567;
    const double C16904 = C16880 + C16881;
    const double C12882 = C12870 + C12871;
    const double C28348 = C28333 + C28334;
    const double C47179 = C47178 / C46950;
    const double C47186 = C47183 / C46950;
    const double C47277 = C47275 / C47114;
    const double C1266 =
        (-3 * (C47171 * C47253 + C47163)) / C46950 +
        C47103 * ((-2 * C47262) / C46950 - (C47103 * C47268) / C46950);
    const double C47383 = C47379 / C46950;
    const double C47381 = C47376 / C46950;
    const double C47363 = C47360 / C46950;
    const double C47486 = C47480 / C46950;
    const double C47482 = C47476 / C47114;
    const double C47494 = -C47490;
    const double C47222 = C47217 + C47221;
    const double C47324 = C47323 / C47114;
    const double C2159 = (3 * (C47206 + C47215 * C47329) +
                          C47104 * (2 * C47334 + C47104 * C47336)) /
                         C47075;
    const double C47426 = C47421 / C46950;
    const double C47469 = C47467 + C47468;
    const double C47566 = C47564 / C47114;
    const double C47527 = -C47523;
    const double C47304 = C47302 + C47303;
    const double C47688 = C47286 + C47686;
    const double C47747 = C47286 + C47745;
    const double C47806 = C47293 + C47804;
    const double C47776 = C47103 * C47428;
    const double C47825 = C47104 * C47462;
    const double C47867 = C47104 * C47559;
    const double C47530 = C47514 + C47526;
    const double C47857 = C47405 + C47855;
    const double C47574 = C47570 + C47571;
    const double C48002 = C48001 / C46952;
    const double C48333 = 2 * C48298;
    const double C48010 = C48009 / C46950;
    const double C48337 = C48302 / C46954;
    const double C48364 = C48296 - C48332;
    const double C2799 = -C48332;
    const double C48378 = C48363 + C47999;
    const double C48082 = C48081 / C46952;
    const double C48341 = 2 * C48307;
    const double C48089 = C48088 / C46950;
    const double C48351 = C48316 / C46954;
    const double C48372 = C48310 - C48348;
    const double C2691 = -C48348;
    const double C48381 = C48368 + C48078;
    const double C47024 = C47020 * de;
    const double C46995 = C46987 / C46950;
    const double C47004 = C46948 * C47000;
    const double C47033 = C47000 / C46967;
    const double C48125 = C48120 - C48124;
    const double C48371 = C48344 / C46950;
    const double C48132 = C48128 - C48131;
    const double C48385 = C48375 / C46967;
    const double C1938 =
        ((-(0 * de) / C46950) / C46967 -
         ((0 - (C46948 * C46949) / C46950) * de) / C46950) /
            C46967 -
        ((C46948 * ((-C46949 / C46950) / C46967 -
                    ((C48042 - (C46948 * C46968) / C46950) * de) / C46950) +
          C3465) *
         de) /
            C46950 +
        (-C46968 / C46950) / C46967 - (0 * de) / C46950;
    const double C175 = C165 * C48042;
    const double C555 = C165 * C48382;
    const double C839 = C165 * C48311;
    const double C1943 = C165 * C1935;
    const double C3471 = C165 * C3465;
    const double C174 = C164 * C114;
    const double C554 = C164 * C510;
    const double C838 = C164 * C831;
    const double C5104 = C5082 + C5083;
    const double C5102 = C5078 + C5079;
    const double C5101 = C5076 + C5077;
    const double C5099 = C5072 + C5073;
    const double C5096 = C5066 + C5067;
    const double C5094 = C5062 + C5063;
    const double C5298 = C5276 + C5277;
    const double C5296 = C5272 + C5273;
    const double C5294 = C5268 + C5269;
    const double C5291 = C5262 + C5263;
    const double C5289 = C5258 + C5259;
    const double C5492 = C5470 + C5471;
    const double C5490 = C5466 + C5467;
    const double C5485 = C5456 + C5457;
    const double C5483 = C5452 + C5453;
    const double C37631 = C37621 + C37622;
    const double C37629 = C37617 + C37618;
    const double C37628 = C37615 + C37616;
    const double C37626 = C37611 + C37612;
    const double C38097 = C38091 + C38092;
    const double C38095 = C38087 + C38088;
    const double C38504 = C38487 + C38488;
    const double C39366 = C39351 + C39352;
    const double C47133 = C47132 / C47075;
    const double C47269 = -C47266;
    const double C47318 = -C47316;
    const double C47362 = C47358 / C47075;
    const double C47409 = C47407 / C47075;
    const double C47259 = C47257 / C47075;
    const double C47311 = C47310 / C47075;
    const double C158 = C113 * C131;
    const double C5088 = C5059 * C131;
    const double C16502 = C16473 * C131;
    const double C360 = C113 * C326;
    const double C5282 = C5059 * C326;
    const double C5278 = C5060 * C326;
    const double C16696 = C16473 * C326;
    const double C16692 = C16474 * C326;
    const double C364 = C113 * C328;
    const double C5084 = C5060 * C328;
    const double C5630 = C5059 * C328;
    const double C16498 = C16474 * C328;
    const double C17044 = C16473 * C328;
    const double C572 = C113 * C534;
    const double C5480 = C5059 * C534;
    const double C16894 = C16473 * C534;
    const double C578 = C113 * C536;
    const double C5776 = C5059 * C536;
    const double C17190 = C16473 * C536;
    const double C1044 = C113 * C1023;
    const double C5472 = C5060 * C1023;
    const double C5990 = C5059 * C1023;
    const double C16886 = C16474 * C1023;
    const double C17404 = C16473 * C1023;
    const double C1530 = C113 * C1257;
    const double C5280 = C5060 * C1257;
    const double C16694 = C16474 * C1257;
    const double C1701 = C48228 * C1417;
    const double C5983 = C48360 * C1417;
    const double C6733 = C5055 * C1417;
    const double C17397 = C48360 * C1417;
    const double C18131 = C16469 * C1417;
    const double C2328 = C113 * C1397;
    const double C5464 = C5060 * C1397;
    const double C7458 = C5059 * C1397;
    const double C16878 = C16474 * C1397;
    const double C18840 = C16473 * C1397;
    const double C1540 = C1534 + C1535;
    const double C5295 = C5270 + C5271;
    const double C6529 = C6522 + C6523;
    const double C16709 = C16684 + C16685;
    const double C17927 = C17920 + C17921;
    const double C11990 = C113 * C1403;
    const double C27471 = C16473 * C1403;
    const double C27455 = C16474 * C1403;
    const double C38493 = C5059 * C1403;
    const double C38477 = C5060 * C1403;
    const double C12472 = C113 * C1817;
    const double C27463 = C16474 * C1817;
    const double C27945 = C16473 * C1817;
    const double C38485 = C5060 * C1817;
    const double C38967 = C5059 * C1817;
    const double C47361 = -C47357;
    const double C47442 = C47441 / C47114;
    const double C47817 = C47813 + C47162;
    const double C47878 = C47873 / C46950;
    const double C157 = C48228 * C130;
    const double C5093 = C5055 * C130;
    const double C16507 = C16469 * C130;
    const double C359 = C48228 * C325;
    const double C5287 = C5055 * C325;
    const double C5275 = C48360 * C325;
    const double C16701 = C16469 * C325;
    const double C16689 = C48360 * C325;
    const double C363 = C48228 * C327;
    const double C5081 = C48360 * C327;
    const double C5635 = C5055 * C327;
    const double C16495 = C48360 * C327;
    const double C17049 = C16469 * C327;
    const double C571 = C48228 * C533;
    const double C5477 = C5055 * C533;
    const double C16891 = C16469 * C533;
    const double C575 = C48228 * C535;
    const double C5773 = C5055 * C535;
    const double C17187 = C16469 * C535;
    const double C1041 = C48228 * C1022;
    const double C5469 = C48360 * C1022;
    const double C5987 = C5055 * C1022;
    const double C16883 = C48360 * C1022;
    const double C17401 = C16469 * C1022;
    const double C2473 = C48228 * C2161;
    const double C1396 =
        (C47103 * C47206 + C47606 * ae + C47679 * C47329) / C47075;
    const double C1404 =
        (C47104 * (C47206 + C47103 * C47679 + C47677 * ae)) / C47075;
    const double C1406 =
        (C47206 + C47103 * C47679 + C47677 * ae +
         (C47215 + C47103 * (C47103 * C47226 + C47292 * ae) + C47293 * ae) *
             C47329) /
        C47075;
    const double C2586 =
        (2 * C47104 * C47679 +
         C47104 * (C47679 + (C47103 * C47226 + C47292 * ae) * C47329)) /
        C47075;
    const double C12875 = C48228 * C2155;
    const double C28340 = C16469 * C2155;
    const double C39358 = C5055 * C2155;
    const double C47408 = -C47406;
    const double C47768 = C47205 + C47767;
    const double C47618 = C47616 + C47617;
    const double C1399 = -(C47104 * (C47104 * C47273 + C47685 * ce) +
                           C47103 * C47168 + C47104 * C47685 * ce) /
                         C46950;
    const double C2589 =
        (-2 * (C47104 * C47273 + C47685 * ce)) / C46950 -
        (C47104 * (C47104 * (C47104 * C47103 * C47191 + C47299 * ce) + C47273 +
                   C47104 * C47299 * ce)) /
            C46950 -
        ((C47685 + C47299 * C47329) * ce) / C46950;
    const double C1387 = C47103 * C47610 + C47685 * C47329;
    const double C2583 =
        2 * C47104 * C47685 + C47104 * (C47685 + C47299 * C47329);
    const double C47687 = C47683 + C47684;
    const double C47746 = C47742 + C47743;
    const double C1533 = C48228 * C1258;
    const double C5285 = C48360 * C1258;
    const double C16699 = C48360 * C1258;
    const double C1706 = C113 * C1409;
    const double C5988 = C5060 * C1409;
    const double C17402 = C16474 * C1409;
    const double C2474 = C113 * C2162;
    const double C1532 = C113 * C1251;
    const double C5284 = C5060 * C1251;
    const double C16698 = C16474 * C1251;
    const double C1704 = C113 * C1392;
    const double C5984 = C5060 * C1392;
    const double C17398 = C16474 * C1392;
    const double C2472 = C113 * C2151;
    const double C7457 = C48360 * C1418;
    const double C11995 = C48228 * C1418;
    const double C18839 = C48360 * C1418;
    const double C47805 = C47801 + C47802;
    const double C7598 = C5060 * C2587;
    const double C13088 = C113 * C2587;
    const double C18980 = C16474 * C2587;
    const double C7594 = C5060 * C2582;
    const double C13086 = C113 * C2582;
    const double C18976 = C16474 * C2582;
    const double C47449 = ae * C47448;
    const double C47822 = C47104 * C47448;
    const double C1265 =
        (3 * (C47206 + C47103 * C47679 + C47677 * ae) +
         C47103 * (2 * C47679 +
                   C47103 * (C47215 + C47103 * (C47103 * C47226 + C47292 * ae) +
                             C47293 * ae) +
                   C47680 * ae) +
         (2 * C47677 + C47103 * C47680) * ae) /
        C47075;
    const double C1407 = -(C47104 * (C47104 * C47268 + C47680 * ce) +
                           C47171 * C47253 + C47163 + C47104 * C47680 * ce) /
                         C46950;
    const double C1818 =
        (C47104 * (2 * C47679 +
                   C47103 * (C47215 + C47103 * (C47103 * C47226 + C47292 * ae) +
                             C47293 * ae) +
                   C47680 * ae)) /
        C47075;
    const double C1819 =
        C47104 * ((-2 * C47262) / C46950 - (C47103 * C47268) / C46950) -
        ((2 * C47677 + C47103 * C47680) * ce) / C46950;
    const double C1255 = 3 * (C47606 + C47283 * C47253) +
                         C47103 * (2 * C47677 + C47103 * C47680);
    const double C1391 = C47606 + C47283 * C47253 + C47680 * C47329;
    const double C1814 = C47104 * (2 * C47677 + C47103 * C47680);
    const double C7736 =
        2 * C47104 * C47680 + C47104 * (C47680 + C47428 * C47329);
    const double C2160 =
        (-3 * (C47104 * C47736 + C47163 + C47734 * ce)) / C46950 +
        C47104 * ((-2 * C47736) / C46950 -
                  (C47104 * (C47104 * C47448 + C47171 + C47459 * ce)) / C46950 -
                  (C47737 * ce) / C46950) -
        ((2 * C47734 + C47104 * C47737) * ce) / C46950;
    const double C2150 = 3 * (C47606 + C47283 * C47329) +
                         C47104 * (2 * C47734 + C47104 * C47737);
    const double C47779 = C47103 * C47777;
    const double C7253 =
        (3 * (C47679 + C47777 * C47329) +
         C47104 *
             (2 * C47104 * C47777 +
              C47104 * (C47777 + (C47103 * C47420 + C47419 * ae) * C47329))) /
        C47075;
    const double C47548 = ae * C47546;
    const double C47864 = C47104 * C47546;
    const double C7252 =
        (-3 * (C47104 * C47797 + C47250 + C47795 * ce)) / C46950 +
        C47104 * ((-2 * C47797) / C46950 -
                  (C47104 * (C47104 * C47546 + C47348 + C47555 * ce)) / C46950 -
                  (C47798 * ce) / C46950) -
        ((2 * C47795 + C47104 * C47798) * ce) / C46950;
    const double C7249 = 3 * (C47669 + C47289 * C47329) +
                         C47104 * (2 * C47795 + C47104 * C47798);
    const double C47766 = C47763 + C47764;
    const double C47856 = C47852 + C47853;
    const double C28815 = C16474 * C7738;
    const double C39833 = C5060 * C7738;
    const double C43714 = C113 * C7738;
    const double C28811 = C16474 * C7735;
    const double C39829 = C5060 * C7735;
    const double C43712 = C113 * C7735;
    const double C47818 = C47815 + C47816;
    const double C47880 = C47875 / C46950;
    const double C47529 = C47525 + C47166;
    const double C47547 = C47545 / C47114;
    const double C47840 = C47210 + C47839;
    const double C47862 = C47765 + C47861;
    const double C47147 = C47146 / C47075;
    const double C47386 = -C47382;
    const double C47427 = -C47422;
    const double C47495 = C47491 / C47075;
    const double C47528 = C47524 / C47075;
    const double C47193 = C47192 / C46950;
    const double C47278 = C47276 + C47177;
    const double C47387 = C47103 * C47384;
    const double C7740 = (-2 * (C47104 * C47268 + C47680 * ce)) / C46950 -
                         (C47104 * (C47104 * (C47104 * C47384 + C47428 * ce) +
                                    C47268 + C47104 * C47428 * ce)) /
                             C46950 -
                         ((C47680 + C47428 * C47329) * ce) / C46950;
    const double C47496 = C47493 / C46950;
    const double C47233 = C47228 + C47232;
    const double C47341 = C47220 + C47340;
    const double C47472 = C47104 * C47463;
    const double C47575 = C47572 + C47573;
    const double C177 = C167 * C48042;
    const double C565 = C167 * C48382;
    const double C843 = C167 * C48311;
    const double C1949 = C167 * C1935;
    const double C3475 = C167 * C3465;
    const double C178 = C168 * C48042;
    const double C576 = C168 * C48382;
    const double C847 = C168 * C48311;
    const double C1955 = C168 * C1935;
    const double C3479 = C168 * C3465;
    const double C382 = C370 * C48042;
    const double C1042 = C370 * C48311;
    const double C2331 = C370 * C1935;
    const double C2955 = C370 * C48382;
    const double C3645 = C370 * C3465;
    const double C384 = C372 * C48042;
    const double C1036 = C372 * C48311;
    const double C2323 = C372 * C1935;
    const double C2949 = C372 * C48382;
    const double C3641 = C372 * C3465;
    const double C387 = C375 * C48042;
    const double C1697 = C375 * C48311;
    const double C3649 = C375 * C3465;
    const double C841 = C585 * C48129;
    const double C1945 = C585 * C1936;
    const double C3473 = C585 * C48129;
    const double C10793 = C585 * C48042;
    const double C11109 = C585 * C48382;
    const double C11387 = C585 * C48311;
    const double C12623 = C585 * C1935;
    const double C14493 = C585 * C3465;
    const double C176 = C166 * C114;
    const double C564 = C166 * C510;
    const double C842 = C166 * C831;
    const double C385 = C373 * C114;
    const double C1037 = C373 * C831;
    const double C2950 = C373 * C510;
    const double C597 = C584 * C511;
    const double C840 = C584 * C832;
    const double C1944 = C584 * C1939;
    const double C3472 = C584 * C3468;
    const double C10792 = C584 * C114;
    const double C11108 = C584 * C510;
    const double C11386 = C584 * C831;
    const double C587 = C562 + C563;
    const double C5488 = C5462 + C5463;
    const double C16902 = C16876 + C16877;
    const double C1053 = C1038 + C1039;
    const double C5484 = C5454 + C5455;
    const double C5994 = C5980 + C5981;
    const double C16898 = C16868 + C16869;
    const double C17408 = C17394 + C17395;
    const double C374 = C354 + C355;
    const double C5292 = C5264 + C5265;
    const double C5290 = C5260 + C5261;
    const double C16706 = C16678 + C16679;
    const double C16704 = C16674 + C16675;
    const double C586 = C560 + C561;
    const double C5486 = C5458 + C5459;
    const double C16900 = C16872 + C16873;
    const double C1052 = C1034 + C1035;
    const double C5482 = C5450 + C5451;
    const double C5992 = C5976 + C5977;
    const double C16896 = C16864 + C16865;
    const double C17406 = C17390 + C17391;
    const double C1541 = C1536 + C1537;
    const double C5293 = C5266 + C5267;
    const double C6531 = C6526 + C6527;
    const double C16707 = C16680 + C16681;
    const double C17929 = C17924 + C17925;
    const double C2476 = C2462 + C2463;
    const double C7603 = C7596 + C7597;
    const double C18985 = C18978 + C18979;
    const double C11997 = C11982 + C11983;
    const double C26610 = C26601 + C26602;
    const double C27478 = C27457 + C27458;
    const double C37632 = C37623 + C37624;
    const double C38500 = C38479 + C38480;
    const double C11981 = C48228 * C1394;
    const double C26598 = C48360 * C1394;
    const double C27454 = C16469 * C1394;
    const double C37620 = C48360 * C1394;
    const double C38476 = C5055 * C1394;
    const double C11985 = C48228 * C1400;
    const double C27068 = C48360 * C1400;
    const double C27462 = C16469 * C1400;
    const double C38090 = C48360 * C1400;
    const double C38484 = C5055 * C1400;
    const double C11989 = C48228 * C1402;
    const double C27468 = C16469 * C1402;
    const double C27452 = C48360 * C1402;
    const double C38490 = C5055 * C1402;
    const double C38474 = C48360 * C1402;
    const double C12471 = C48228 * C1816;
    const double C27460 = C48360 * C1816;
    const double C27942 = C16469 * C1816;
    const double C38482 = C48360 * C1816;
    const double C38964 = C5055 * C1816;
    const double C13363 = C48228 * C2584;
    const double C28332 = C48360 * C2584;
    const double C28810 = C16469 * C2584;
    const double C39350 = C48360 * C2584;
    const double C39828 = C5055 * C2584;
    const double C28342 = C48360 * C7251;
    const double C39360 = C48360 * C7251;
    const double C44701 = C48228 * C7251;
    const double C12876 = C113 * C2156;
    const double C28343 = C16473 * C2156;
    const double C39361 = C5059 * C2156;
    const double C845 = C590 * C48129;
    const double C1951 = C590 * C1936;
    const double C3477 = C590 * C48129;
    const double C10794 = C590 * C48042;
    const double C11115 = C590 * C48382;
    const double C11391 = C590 * C48311;
    const double C12629 = C590 * C1935;
    const double C14497 = C590 * C3465;
    const double C179 = C169 * C114;
    const double C577 = C169 * C510;
    const double C848 = C169 * C831;
    const double C383 = C371 * C114;
    const double C1043 = C371 * C831;
    const double C2956 = C371 * C510;
    const double C601 = C589 * C511;
    const double C844 = C589 * C832;
    const double C1950 = C589 * C1939;
    const double C3476 = C589 * C3468;
    const double C10795 = C589 * C114;
    const double C11116 = C589 * C510;
    const double C11392 = C589 * C831;
    const double C47180 = C47175 - C47179;
    const double C6520 = C5060 * C1266;
    const double C17918 = C16474 * C1266;
    const double C47385 = -C47381;
    const double C47366 = C47359 - C47363;
    const double C47497 = C47494 / C47075;
    const double C133 = (4 * (2 * C47206 + C47111 * C47212) +
                         C47111 * (3 * C47212 + C47111 * C47222)) /
                        C47075;
    const double C537 =
        (2 * C47206 + C47111 * C47212 + C47222 * C47329) / C47075;
    const double C539 = (C47104 * (3 * C47212 + C47111 * C47222)) / C47075;
    const double C12879 = C48228 * C2159;
    const double C47429 = -C47426;
    const double C12863 = (4 * (2 * C47328 + C47104 * C47331) +
                           C47104 * (3 * C47331 + C47104 * C47469)) /
                          C47075;
    const double C47531 = C47527 / C47075;
    const double C47623 = C47111 * C47304;
    const double C47750 = C47103 * C47304;
    const double C1256 = 3 * (C47610 + C47286 * C47253) +
                         C47103 * (2 * C47685 + C47103 * C47688);
    const double C1393 = C47610 + C47286 * C47253 + C47688 * C47329;
    const double C1815 = C47104 * (2 * C47685 + C47103 * C47688);
    const double C2152 = 3 * (C47610 + C47286 * C47329) +
                         C47104 * (2 * C47744 + C47104 * C47747);
    const double C7250 = 3 * (C47677 + C47293 * C47329) +
                         C47104 * (2 * C47803 + C47104 * C47806);
    const double C47778 = C47775 + C47776;
    const double C47827 = C47824 + C47825;
    const double C47869 = C47866 + C47867;
    const double C47836 = C47103 * C47530;
    const double C23630 = 3 * (C47672 + C47405 * C47329) +
                          C47104 * (2 * C47854 + C47104 * C47857);
    const double C47877 = C47104 * C47574;
    const double C48003 = C47999 - C48002;
    const double C48365 = C48333 / C46950;
    const double C48011 = C48007 - C48010;
    const double C48379 = C48364 / C46967;
    const double C48083 = C48078 - C48082;
    const double C48369 = C48341 / C46950;
    const double C48090 = C48086 - C48089;
    const double C48383 = C48372 / C46967;
    const double C47026 = C47024 / C46950;
    const double C46999 = C48042 - C46995;
    const double C47008 = C47004 + C48129;
    const double C47036 = C47033 - C47035;
    const double C4061 = C168 * C48125;
    const double C4055 = C167 * C48125;
    const double C4049 = C165 * C48125;
    const double C4225 = C370 * C48125;
    const double C4219 = C372 * C48125;
    const double C15195 = C590 * C48125;
    const double C15189 = C585 * C48125;
    const double C48319 = C48125 * C48119;
    const double C48356 = C48321 + C48125;
    const double C602 = C590 * C48371;
    const double C598 = C585 * C48371;
    const double C4057 = C590 * C48132;
    const double C4051 = C585 * C48132;
    const double C48323 = C48132 / C46967;
    const double C48320 = C48132 * C48119;
    const double C2443 = C48385 - (C48125 * C48121) / C46950;
    const double C1956 = C169 * C1938;
    const double C1948 = C166 * C1938;
    const double C1942 = C164 * C1938;
    const double C2332 = C371 * C1938;
    const double C2324 = C373 * C1938;
    const double C12630 = C589 * C1938;
    const double C12622 = C584 * C1938;
    const double C47134 = C47133 - C47127;
    const double C47270 = C47269 / C47075;
    const double C47319 = C47318 / C47075;
    const double C47365 = C47362 - C47354;
    const double C47411 = C47409 - C47404;
    const double C47260 = C47259 - C47255;
    const double C47312 = C47311 - C47309;
    const double C171 = C158 + C159;
    const double C5107 = C5088 + C5089;
    const double C16521 = C16502 + C16503;
    const double C1709 = C1700 + C1701;
    const double C5995 = C5982 + C5983;
    const double C6737 = C6732 + C6733;
    const double C17409 = C17396 + C17397;
    const double C18135 = C18130 + C18131;
    const double C2339 = C2328 + C2329;
    const double C5489 = C5464 + C5465;
    const double C7463 = C7458 + C7459;
    const double C16903 = C16878 + C16879;
    const double C18845 = C18840 + C18841;
    const double C1544 = C1540 * C48042;
    const double C12001 = C11990 + C11991;
    const double C27485 = C27471 + C27472;
    const double C27477 = C27455 + C27456;
    const double C38507 = C38493 + C38494;
    const double C38499 = C38477 + C38478;
    const double C47364 = C47361 / C47075;
    const double C47819 = C47817 + C47814;
    const double C170 = C156 + C157;
    const double C5109 = C5092 + C5093;
    const double C16523 = C16506 + C16507;
    const double C376 = C358 + C359;
    const double C5303 = C5286 + C5287;
    const double C5297 = C5274 + C5275;
    const double C16717 = C16700 + C16701;
    const double C16711 = C16688 + C16689;
    const double C378 = C362 + C363;
    const double C5103 = C5080 + C5081;
    const double C5639 = C5634 + C5635;
    const double C16517 = C16494 + C16495;
    const double C17053 = C17048 + C17049;
    const double C591 = C570 + C571;
    const double C5495 = C5476 + C5477;
    const double C16909 = C16890 + C16891;
    const double C593 = C574 + C575;
    const double C5779 = C5772 + C5773;
    const double C17193 = C17186 + C17187;
    const double C1054 = C1040 + C1041;
    const double C5491 = C5468 + C5469;
    const double C5997 = C5986 + C5987;
    const double C16905 = C16882 + C16883;
    const double C17411 = C17400 + C17401;
    const double C2327 = C48228 * C1396;
    const double C5461 = C48360 * C1396;
    const double C7455 = C5055 * C1396;
    const double C16875 = C48360 * C1396;
    const double C18837 = C16469 * C1396;
    const double C1699 = C48228 * C1404;
    const double C5979 = C48360 * C1404;
    const double C6729 = C5055 * C1404;
    const double C17393 = C48360 * C1404;
    const double C18127 = C16469 * C1404;
    const double C7453 = C48360 * C1406;
    const double C11993 = C48228 * C1406;
    const double C18835 = C48360 * C1406;
    const double C7595 = C48360 * C2586;
    const double C13087 = C48228 * C2586;
    const double C18977 = C48360 * C2586;
    const double C12884 = C12874 + C12875;
    const double C28351 = C28339 + C28340;
    const double C39369 = C39357 + C39358;
    const double C47410 = C47408 / C47075;
    const double C47769 = C47768 + C47762;
    const double C330 =
        (2 * C47206 + C47111 * C47212 +
         C47103 * (C47103 * C47222 + C47618 * ae) + C47103 * C47618 * ae) /
        C47075;
    const double C332 = (C47103 * (3 * C47212 + C47111 * C47222) +
                         (3 * C47610 + C47111 * C47618) * ae) /
                        C47075;
    const double C1024 = (C47104 * (C47103 * C47222 + C47618 * ae)) / C47075;
    const double C120 = 4 * (2 * C47606 + C47111 * C47610) +
                        C47111 * (3 * C47610 + C47111 * C47618);
    const double C312 = 2 * C47606 + C47111 * C47610 + C47618 * C47253;
    const double C313 = C47103 * (3 * C47610 + C47111 * C47618);
    const double C520 = 2 * C47606 + C47111 * C47610 + C47618 * C47329;
    const double C521 = C47104 * (3 * C47610 + C47111 * C47618);
    const double C1016 = C47104 * C47103 * C47618;
    const double C1525 =
        2 * C47103 * C47618 + C47103 * (C47618 + C47304 * C47253);
    const double C1691 = C47104 * (C47618 + C47304 * C47253);
    const double C2451 =
        2 * C47104 * C47618 + C47104 * (C47618 + C47304 * C47329);
    const double C2336 = C113 * C1399;
    const double C5478 = C5060 * C1399;
    const double C16892 = C16474 * C1399;
    const double C2334 = C113 * C1387;
    const double C5474 = C5060 * C1387;
    const double C16888 = C16474 * C1387;
    const double C1267 =
        (3 * (C47212 + C47103 * C47687 + C47685 * ae) +
         C47103 * (2 * C47687 +
                   C47103 * (C47220 + C47103 * (C47103 * C47231 + C47298 * ae) +
                             C47299 * ae) +
                   C47688 * ae) +
         (2 * C47685 + C47103 * C47688) * ae) /
        C47075;
    const double C1398 =
        (C47103 * C47212 + C47610 * ae + C47687 * C47329) / C47075;
    const double C1408 =
        (C47104 * (C47212 + C47103 * C47687 + C47685 * ae)) / C47075;
    const double C1410 =
        (C47212 + C47103 * C47687 + C47685 * ae +
         (C47220 + C47103 * (C47103 * C47231 + C47298 * ae) + C47299 * ae) *
             C47329) /
        C47075;
    const double C1820 =
        (C47104 * (2 * C47687 +
                   C47103 * (C47220 + C47103 * (C47103 * C47231 + C47298 * ae) +
                             C47299 * ae) +
                   C47688 * ae)) /
        C47075;
    const double C2588 =
        (2 * C47104 * C47687 +
         C47104 * (C47687 + (C47103 * C47231 + C47298 * ae) * C47329)) /
        C47075;
    const double C2164 =
        (-3 * (C47104 * C47746 + C47168 + C47744 * ce)) / C46950 +
        C47104 * ((-2 * C47746) / C46950 -
                  (C47104 * (C47104 * (C47104 * C47191 + C47298 * ce) + C47177 +
                             C47104 * C47298 * ce)) /
                      C46950 -
                  (C47747 * ce) / C46950) -
        ((2 * C47744 + C47104 * C47747) * ce) / C46950;
    const double C1539 = C1532 + C1533;
    const double C5302 = C5284 + C5285;
    const double C16716 = C16698 + C16699;
    const double C2478 = C2472 + C2473;
    const double C7254 =
        (-3 * (C47104 * C47805 + C47262 + C47803 * ce)) / C46950 +
        C47104 * ((-2 * C47805) / C46950 -
                  (C47104 * (C47104 * (C47104 * C47103 * C47375 + C47425 * ce) +
                             C47371 + C47104 * C47425 * ce)) /
                      C46950 -
                  (C47806 * ce) / C46950) -
        ((2 * C47803 + C47104 * C47806) * ce) / C46950;
    const double C47450 = C47449 / C47114;
    const double C47826 = C47822 + C47171;
    const double C6525 = C48360 * C1265;
    const double C17923 = C48360 * C1265;
    const double C7456 = C5060 * C1407;
    const double C11994 = C113 * C1407;
    const double C18838 = C16474 * C1407;
    const double C6727 = C48360 * C1818;
    const double C12137 = C48228 * C1818;
    const double C18125 = C48360 * C1818;
    const double C6730 = C5060 * C1819;
    const double C12134 = C113 * C1819;
    const double C18128 = C16474 * C1819;
    const double C6524 = C5060 * C1255;
    const double C17922 = C16474 * C1255;
    const double C7452 = C5060 * C1391;
    const double C11992 = C113 * C1391;
    const double C18834 = C16474 * C1391;
    const double C6726 = C5060 * C1814;
    const double C12136 = C113 * C1814;
    const double C18124 = C16474 * C1814;
    const double C12880 = C113 * C2160;
    const double C12878 = C113 * C2150;
    const double C47780 = C47215 + C47779;
    const double C47550 = C47548 / C47114;
    const double C47868 = C47864 + C47348;
    const double C28345 = C16474 * C7252;
    const double C39363 = C5060 * C7252;
    const double C44702 = C113 * C7252;
    const double C28341 = C16474 * C7249;
    const double C39359 = C5060 * C7249;
    const double C44700 = C113 * C7249;
    const double C6227 = 4 * (2 * C47669 + C47103 * C47672) +
                         C47103 * (3 * C47672 + C47103 * C47766);
    const double C6381 = 2 * C47669 + C47103 * C47672 + C47766 * C47329;
    const double C6867 = C47104 * (3 * C47672 + C47103 * C47766);
    const double C23976 =
        2 * C47104 * C47766 + C47104 * (C47766 + C47530 * C47329);
    const double C23632 =
        (-3 * (C47104 * C47856 + C47258 + C47854 * ce)) / C46950 +
        C47104 * ((-2 * C47856) / C46950 -
                  (C47104 * (C47104 * (C47104 * C47488 + C47522 * ce) + C47356 +
                             C47104 * C47522 * ce)) /
                      C46950 -
                  (C47857 * ce) / C46950) -
        ((2 * C47854 + C47104 * C47857) * ce) / C46950;
    const double C12861 = 4 * (2 * C47724 + C47104 * C47727) +
                          C47104 * (3 * C47727 + C47104 * C47818);
    const double C47533 = C47529 + C47521;
    const double C47841 = C47840 + C47833;
    const double C28327 =
        (4 * (2 * C47104 * C47765 + C47104 * C47862) +
         C47104 * (3 * C47862 + C47104 * (2 * C47104 * C47837 +
                                          C47104 * (C47837 + (C47103 * C47229 +
                                                              C47296 * ae) *
                                                                 C47329)))) /
        C47075;
    const double C47148 = C47147 - C47139;
    const double C47389 = C47386 / C47075;
    const double C47430 = C47427 / C47075;
    const double C47498 = C47495 - C47485;
    const double C47532 = C47528 - C47519;
    const double C47194 = C47189 - C47193;
    const double C1268 =
        (-3 * (C47177 * C47253 + C47168)) / C46950 +
        C47103 * ((-2 * C47273) / C46950 - (C47103 * C47278) / C46950);
    const double C1411 = -(C47104 * (C47104 * C47278 + C47688 * ce) +
                           C47177 * C47253 + C47168 + C47104 * C47688 * ce) /
                         C46950;
    const double C1821 =
        C47104 * ((-2 * C47273) / C46950 - (C47103 * C47278) / C46950) -
        ((2 * C47685 + C47103 * C47688) * ce) / C46950;
    const double C47390 = C47387 / C46950;
    const double C47499 = C47492 - C47496;
    const double C47234 = C47111 * C47233;
    const double C1526 =
        (2 * (C47103 * C47222 + C47618 * ae) +
         C47103 * (C47222 + C47103 * (C47103 * C47233 + C47304 * ae) +
                   C47103 * C47304 * ae) +
         (C47618 + C47304 * C47253) * ae) /
        C47075;
    const double C1692 =
        (C47104 * (C47222 + C47103 * (C47103 * C47233 + C47304 * ae) +
                   C47103 * C47304 * ae)) /
        C47075;
    const double C2318 = (C47103 * C47222 + C47618 * ae +
                          (C47103 * C47233 + C47304 * ae) * C47329) /
                         C47075;
    const double C2452 =
        (2 * C47104 * C47222 + C47104 * (C47222 + C47233 * C47329)) / C47075;
    const double C2163 = (3 * (C47212 + C47220 * C47329) +
                          C47104 * (2 * C47339 + C47104 * C47341)) /
                         C47075;
    const double C47473 = C47471 + C47472;
    const double C47578 = C47104 * C47575;
    const double C184 = C176 + C177;
    const double C588 = C564 + C565;
    const double C856 = C842 + C843;
    const double C600 = C587 * C48345;
    const double C1947 = C587 * C48345;
    const double C4053 = C587 * C4043;
    const double C11111 = C587 * C48371;
    const double C11389 = C587 * C48129;
    const double C12625 = C587 * C1936;
    const double C14495 = C587 * C48129;
    const double C15191 = C587 * C48132;
    const double C1060 = C1053 * C48129;
    const double C2325 = C1053 * C1936;
    const double C2951 = C1053 * C48371;
    const double C3643 = C1053 * C48129;
    const double C4221 = C1053 * C48132;
    const double C10946 = C1053 * C48042;
    const double C11597 = C1053 * C48311;
    const double C13083 = C1053 * C1935;
    const double C13823 = C1053 * C48382;
    const double C14699 = C1053 * C3465;
    const double C15395 = C1053 * C48125;
    const double C386 = C374 * C114;
    const double C1696 = C374 * C831;
    const double C599 = C586 * C512;
    const double C1946 = C586 * C1940;
    const double C11110 = C586 * C511;
    const double C11388 = C586 * C832;
    const double C12624 = C586 * C1939;
    const double C14494 = C586 * C3468;
    const double C1059 = C1052 * C832;
    const double C2322 = C1052 * C1939;
    const double C2948 = C1052 * C511;
    const double C3640 = C1052 * C3468;
    const double C10947 = C1052 * C114;
    const double C11598 = C1052 * C831;
    const double C13084 = C1052 * C1938;
    const double C13824 = C1052 * C510;
    const double C1545 = C1541 * C114;
    const double C11112 = C2476 * C512;
    const double C12626 = C2476 * C1940;
    const double C11996 = C11980 + C11981;
    const double C26608 = C26597 + C26598;
    const double C27476 = C27453 + C27454;
    const double C37630 = C37619 + C37620;
    const double C38498 = C38475 + C38476;
    const double C11998 = C11984 + C11985;
    const double C27074 = C27067 + C27068;
    const double C27480 = C27461 + C27462;
    const double C38096 = C38089 + C38090;
    const double C38502 = C38483 + C38484;
    const double C12000 = C11988 + C11989;
    const double C27483 = C27467 + C27468;
    const double C27475 = C27451 + C27452;
    const double C38505 = C38489 + C38490;
    const double C38497 = C38473 + C38474;
    const double C12474 = C12470 + C12471;
    const double C27479 = C27459 + C27460;
    const double C27949 = C27941 + C27942;
    const double C38501 = C38481 + C38482;
    const double C38971 = C38963 + C38964;
    const double C13366 = C13362 + C13363;
    const double C28347 = C28331 + C28332;
    const double C28817 = C28809 + C28810;
    const double C39365 = C39349 + C39350;
    const double C39835 = C39827 + C39828;
    const double C185 = C178 + C179;
    const double C857 = C847 + C848;
    const double C394 = C382 + C383;
    const double C1055 = C1042 + C1043;
    const double C132 =
        4 * ((-2 * C47163) / C46950 - (C47111 * C47168) / C46950) +
        C47111 * ((-3 * C47168) / C46950 + C47111 * C47180);
    const double C329 =
        (-2 * C47163) / C46950 - (C47111 * C47168) / C46950 + C47180 * C47253;
    const double C331 = C47103 * ((-3 * C47168) / C46950 + C47111 * C47180);
    const double C538 = (-2 * C47163) / C46950 - (C47111 * C47168) / C46950 +
                        C47104 * (C47104 * C47180 - (C47618 * ce) / C46950) -
                        (C47104 * C47618 * ce) / C46950;
    const double C540 = C47104 * ((-3 * C47168) / C46950 + C47111 * C47180) -
                        ((3 * C47610 + C47111 * C47618) * ce) / C46950;
    const double C1025 =
        C47104 * C47103 * C47180 - (C47103 * C47618 * ce) / C46950;
    const double C47388 = C47385 / C47075;
    const double C6230 =
        4 * ((-2 * C47250) / C46950 - (C47103 * C47258) / C46950) +
        C47103 * ((-3 * C47258) / C46950 + C47103 * C47366);
    const double C6384 = (-2 * C47250) / C46950 - (C47103 * C47258) / C46950 +
                         C47104 * (C47104 * C47366 - (C47766 * ce) / C46950) -
                         (C47104 * C47766 * ce) / C46950;
    const double C6870 = C47104 * ((-3 * C47258) / C46950 + C47103 * C47366) -
                         ((3 * C47672 + C47103 * C47766) * ce) / C46950;
    const double C47500 = C47497 - C47139;
    const double C163 = C48228 * C133;
    const double C581 = C48228 * C537;
    const double C853 = C48228 * C539;
    const double C47431 = C47429 / C47075;
    const double C44353 = C48228 * C12863;
    const double C47534 = C47531 - C47139;
    const double C47624 = C47622 + C47623;
    const double C2317 = C47103 * C47618 + C47750 * C47329;
    const double C6228 = 4 * (2 * C47677 + C47103 * C47680) +
                         C47103 * (3 * C47680 + C47103 * C47778);
    const double C6382 = 2 * C47677 + C47103 * C47680 + C47778 * C47329;
    const double C6868 = C47104 * (3 * C47680 + C47103 * C47778);
    const double C12862 = 4 * (2 * C47734 + C47104 * C47737) +
                          C47104 * (3 * C47737 + C47104 * C47827);
    const double C28326 = 4 * (2 * C47795 + C47104 * C47798) +
                          C47104 * (3 * C47798 + C47104 * C47869);
    const double C47838 = C47835 + C47836;
    const double C47881 = C47876 + C47877;
    const double C48295 = C48003 * C47993;
    const double C48335 = C48300 + C48003;
    const double C48303 = C48011 / C46967;
    const double C48299 = C48011 * C47993;
    const double C713 = C48379 - (C48003 * C47994) / C46950;
    const double C48313 = C48083 * C48077;
    const double C48350 = C48315 + C48083;
    const double C48317 = C48090 / C46967;
    const double C48314 = C48090 * C48077;
    const double C1519 = C48383 - (C48083 * C48079) / C46950;
    const double C47028 = C47023 - C47026;
    const double C47003 = C46999 * ce;
    const double C3467 = (-C46985) / C46967 - (C46999 * de) / C46950;
    const double C47012 = C47008 * de;
    const double C4052 = C586 * C47036;
    const double C15192 = C2476 * C47036;
    const double C2146 =
        (C47036 / C46967 + (0 * ce) / C46950) / C46967 - (0 * de) / C46950;
    const double C2450 = C47036 / C46967 - (0 * de) / C46950;
    const double C3760 = C47036 / C46967 + (0 * ce) / C46950;
    const double C48353 = C48319 / C46950;
    const double C48376 = C48356 / C46967;
    const double C48377 = C48357 + C48323;
    const double C2445 = C48323 - C48130 / C46954;
    const double C48355 = C48320 / C46950;
    const double C2467 = C167 * C2443;
    const double C2457 = C165 * C2443;
    const double C13225 = C585 * C2443;
    const double C1960 = C1948 + C1949;
    const double C141 =
        4 * ((-2 * C47111 * C47123) / C47114 + C47111 * C47134) +
        C47111 * (3 * C47134 + C47111 * ((-2 * C47111 * C47129) / C47114 +
                                         C47111 * ((-(std::pow(C47118, 7) *
                                                      bs[7] * C47109 * C47120) /
                                                    C46950) /
                                                       C47075 -
                                                   C47129 / C47114)));
    const double C340 = (-(C47123 * C47120) / C46950) / C47075 -
                        C47116 / C47114 - (ae * C47103 * C47168) / C47114 +
                        C47103 * (C47103 * C47134 - (ae * C47168) / C47114);
    const double C341 =
        (((-2 * C47163) / C46950 - (C47111 * C47168) / C46950) * ae) / C47075 +
        C47103 * ((-2 * C47111 * C47123) / C47114 + C47111 * C47134);
    const double C548 = (-(C47123 * C47120) / C46950) / C47075 -
                        C47116 / C47114 - (C47104 * C47212 * ce) / C47114 +
                        C47104 * (C47104 * C47134 - (C47212 * ce) / C47114);
    const double C549 =
        C47104 * ((-2 * C47111 * C47123) / C47114 + C47111 * C47134) -
        ((2 * C47206 + C47111 * C47212) * ce) / C47114;
    const double C1030 =
        C47103 * (C47104 * C47134 - (C47212 * ce) / C47114) -
        (ae * (C47104 * C47168 +
               (C47157 * C47156 + C47113 * C47112 * C47120) * ce)) /
            C47114;
    const double C47271 = C47270 - C47267;
    const double C47320 = C47319 - C47317;
    const double C47368 = C47103 * C47365;
    const double C47475 = 2 * C47365;
    const double C47413 = C47104 * C47411;
    const double C47437 = C47103 * C47411;
    const double C47563 = 2 * C47411;
    const double C1272 =
        3 * ((-(ae * C47250) / C46950) / C47075 - C47116 / C47114 +
             C47103 * C47260) +
        (((-2 * C47250) / C46950 - (C47103 * C47258) / C46950) * ae) / C47075 +
        C47103 *
            (2 * C47260 - (ae * C47258) / C47114 +
             C47103 * ((-(ae * C47103 * C47166) / C46950) / C47075 - C47127 +
                       C47103 * ((-(C47103 * C47129) / C46950) / C47075 -
                                 (ae * C47166) / C47114)));
    const double C1822 =
        2 * (C47103 * C47312 -
             (ae * (C47104 * C47162 + C47281 * ce)) / C47114) -
        (ae * (C47104 * C47258 + (C47281 + C47242 * C47253) * ce)) / C47114 +
        C47103 *
            (C47312 - (ae * (C47104 * C47103 * C47166 + C47289 * ce)) / C47114 +
             C47103 * (C47103 * ((-(C47104 * C47129) / C46950) / C47075 -
                                 (C47210 * ce) / C47114) -
                       (ae * (C47104 * C47166 + C47242 * ce)) / C47114));
    const double C2165 =
        2 * ((-(C47104 * C47116) / C46950) / C47075 - (C47201 * ce) / C47114) -
        ((C47201 + C47205 * std::pow(C47104, 2)) * ce) / C47114 +
        C47104 * ((-(C47104 * C47205 * ce) / C46950) / C47075 -
                  C47116 / C47114 + C47104 * C47312);
    const double C2166 =
        3 * ((-(C47328 * ce) / C46950) / C47075 - C47116 / C47114 +
             C47104 * C47312) -
        ((2 * C47328 + C47104 * C47331) * ce) / C47114 +
        C47104 *
            (2 * C47312 - (C47331 * ce) / C47114 +
             C47104 * ((-(C47104 * C47210 * ce) / C46950) / C47075 - C47127 +
                       C47104 * ((-(C47104 * C47129) / C46950) / C47075 -
                                 (C47210 * ce) / C47114)));
    const double C2590 =
        (((-2 * (C47104 * C47162 + C47281 * ce)) / C46950 -
          (C47104 * (C47104 * (C47104 * C47166 + C47242 * ce) + C47162 +
                     C47104 * C47242 * ce)) /
              C46950 -
          ((C47281 + C47242 * C47329) * ce) / C46950) *
         ae) /
            C47075 +
        C47103 *
            (2 * C47312 - (C47331 * ce) / C47114 +
             C47104 * ((-(C47104 * C47210 * ce) / C46950) / C47075 - C47127 +
                       C47104 * ((-(C47104 * C47129) / C46950) / C47075 -
                                 (C47210 * ce) / C47114)));
    const double C181 = C171 * C48042;
    const double C851 = C171 * C48311;
    const double C3483 = C171 * C3465;
    const double C1713 = C1709 * C48129;
    const double C3651 = C1709 * C48129;
    const double C10949 = C1709 * C48042;
    const double C12337 = C1709 * C48311;
    const double C14703 = C1709 * C3465;
    const double C2343 = C2339 * C48345;
    const double C2953 = C2339 * C48345;
    const double C4223 = C2339 * C4043;
    const double C11599 = C2339 * C48129;
    const double C13085 = C2339 * C1936;
    const double C13825 = C2339 * C48371;
    const double C14701 = C2339 * C48129;
    const double C15397 = C2339 * C48132;
    const double C47367 = C47364 - C47127;
    const double C180 = C170 * C114;
    const double C850 = C170 * C831;
    const double C388 = C376 * C114;
    const double C1702 = C376 * C831;
    const double C390 = C378 * C114;
    const double C1046 = C378 * C831;
    const double C603 = C591 * C512;
    const double C1952 = C591 * C1940;
    const double C4058 = C591 * C47036;
    const double C11114 = C591 * C511;
    const double C11390 = C591 * C832;
    const double C12628 = C591 * C1939;
    const double C14496 = C591 * C3468;
    const double C605 = C593 * C511;
    const double C846 = C593 * C832;
    const double C1954 = C593 * C1939;
    const double C3478 = C593 * C3468;
    const double C10796 = C593 * C114;
    const double C11394 = C593 * C831;
    const double C1061 = C1054 * C832;
    const double C2330 = C1054 * C1939;
    const double C2954 = C1054 * C511;
    const double C3644 = C1054 * C3468;
    const double C10950 = C1054 * C114;
    const double C11600 = C1054 * C831;
    const double C2338 = C2326 + C2327;
    const double C5487 = C5460 + C5461;
    const double C7461 = C7454 + C7455;
    const double C16901 = C16874 + C16875;
    const double C18843 = C18836 + C18837;
    const double C1708 = C1698 + C1699;
    const double C5993 = C5978 + C5979;
    const double C6735 = C6728 + C6729;
    const double C17407 = C17392 + C17393;
    const double C18133 = C18126 + C18127;
    const double C7602 = C7594 + C7595;
    const double C13090 = C13086 + C13087;
    const double C18984 = C18976 + C18977;
    const double C47412 = C47410 - C47127;
    const double C6229 =
        (4 * (2 * C47671 + C47103 * C47769 + C47672 * ae) +
         C47103 *
             (3 * C47769 +
              C47103 *
                  (2 * C47765 +
                   C47103 * (C47210 + C47103 * (C47103 * C47218 + C47244 * ae) +
                             C47401 * ae) +
                   C47405 * ae) +
              C47766 * ae) +
         (3 * C47672 + C47103 * C47766) * ae) /
        C47075;
    const double C6383 =
        (2 * C47671 + C47103 * C47769 + C47672 * ae +
         (2 * C47765 +
          C47103 * (C47210 + C47103 * (C47103 * C47218 + C47244 * ae) +
                    C47401 * ae) +
          C47405 * ae) *
             C47329) /
        C47075;
    const double C6869 =
        (C47104 *
         (3 * C47769 +
          C47103 *
              (2 * C47765 +
               C47103 * (C47210 + C47103 * (C47103 * C47218 + C47244 * ae) +
                         C47401 * ae) +
               C47405 * ae) +
          C47766 * ae)) /
        C47075;
    const double C7737 =
        (2 * C47104 * C47769 +
         C47104 * (C47769 + (C47210 + C47103 * (C47103 * C47218 + C47244 * ae) +
                             C47401 * ae) *
                                C47329)) /
        C47075;
    const double C369 = C48228 * C330;
    const double C5633 = C48360 * C330;
    const double C17047 = C48360 * C330;
    const double C726 = C48228 * C332;
    const double C5091 = C48360 * C332;
    const double C16505 = C48360 * C332;
    const double C1049 = C48228 * C1024;
    const double C5771 = C48360 * C1024;
    const double C17185 = C48360 * C1024;
    const double C162 = C113 * C120;
    const double C368 = C113 * C312;
    const double C5632 = C5060 * C312;
    const double C17046 = C16474 * C312;
    const double C725 = C113 * C313;
    const double C5090 = C5060 * C313;
    const double C16504 = C16474 * C313;
    const double C580 = C113 * C520;
    const double C852 = C113 * C521;
    const double C1048 = C113 * C1016;
    const double C5770 = C5060 * C1016;
    const double C17184 = C16474 * C1016;
    const double C2335 = C48228 * C1398;
    const double C5475 = C48360 * C1398;
    const double C16889 = C48360 * C1398;
    const double C1705 = C48228 * C1408;
    const double C5985 = C48360 * C1408;
    const double C17399 = C48360 * C1408;
    const double C1543 = C1539 * C114;
    const double C11118 = C2478 * C512;
    const double C12632 = C2478 * C1940;
    const double C15198 = C2478 * C47036;
    const double C47828 = C47826 + C47823;
    const double C7462 = C7456 + C7457;
    const double C12003 = C11994 + C11995;
    const double C18844 = C18838 + C18839;
    const double C6530 = C6524 + C6525;
    const double C17928 = C17922 + C17923;
    const double C7460 = C7452 + C7453;
    const double C12002 = C11992 + C11993;
    const double C18842 = C18834 + C18835;
    const double C6734 = C6726 + C6727;
    const double C12139 = C12136 + C12137;
    const double C18132 = C18124 + C18125;
    const double C12886 = C12878 + C12879;
    const double C47781 = C47780 + C47774;
    const double C47552 = C47411 - C47550;
    const double C47870 = C47868 + C47865;
    const double C28352 = C28341 + C28342;
    const double C39370 = C39359 + C39360;
    const double C44704 = C44700 + C44701;
    const double C27469 = C16474 * C6381;
    const double C38491 = C5060 * C6381;
    const double C44060 = C113 * C6381;
    const double C27943 = C16474 * C6867;
    const double C38965 = C5060 * C6867;
    const double C44352 = C113 * C12861;
    const double C47536 = ae * C47533;
    const double C47874 = C47104 * C47533;
    const double C12864 =
        4 * ((-2 * C47726) / C46950 - (C47104 * C47819) / C46950 -
             (C47727 * ce) / C46950) +
        C47104 *
            ((-3 * C47819) / C46950 +
             C47104 * ((-2 * C47440) / C46950 - (C47104 * C47533) / C46950 -
                       (C47456 * ce) / C46950) -
             (C47818 * ce) / C46950) -
        ((3 * C47727 + C47104 * C47818) * ce) / C46950;
    const double C47842 = C47103 * C47841;
    const double C23631 =
        (3 * (C47769 + C47841 * C47329) +
         C47104 *
             (2 * C47104 * C47841 +
              C47104 *
                  (C47841 + (C47218 + C47103 * (C47103 * C47229 + C47296 * ae) +
                             C47516 * ae) *
                                C47329))) /
        C47075;
    const double C47149 = C47111 * C47148;
    const double C47274 = C47103 * C47148;
    const double C47322 = C47104 * C47148;
    const double C1269 =
        2 * (C47103 * C47134 - (ae * C47168) / C47114) -
        (ae * (C47177 * std::pow(C47103, 2) + C47168)) / C47114 +
        C47103 * (C47134 - (ae * C47103 * C47177) / C47114 +
                  C47103 * (C47103 * C47148 - (ae * C47177) / C47114));
    const double C1414 =
        C47103 * (C47134 - (C47104 * C47220 * ce) / C47114 +
                  C47104 * (C47104 * C47148 - (C47220 * ce) / C47114)) -
        (ae * (C47104 * (C47104 * C47177 + C47286 * ce) + C47168 +
               C47104 * C47286 * ce)) /
            C47114;
    const double C1419 =
        C47104 * C47134 - (C47212 * ce) / C47114 -
        (ae * (C47104 * C47273 + C47103 * C47286 * ce)) / C47114 +
        C47103 * (C47103 * (C47104 * C47148 - (C47220 * ce) / C47114) -
                  (ae * (C47104 * C47177 + C47286 * ce)) / C47114);
    const double C1420 =
        C47134 - (C47104 * C47220 * ce) / C47114 +
        C47104 * (C47104 * C47148 - (C47220 * ce) / C47114) -
        (ae * (C47104 * (C47104 * C47103 * C47191 + C47299 * ce) + C47273 +
               C47104 * C47299 * ce)) /
            C47114 +
        C47103 * (C47103 * (C47148 - (C47104 * C47231 * ce) / C47114 +
                            C47104 * (C47104 * ((-(std::pow(C47107, 8) * bs[8] *
                                                   C47109 * C47120) /
                                                 C46950) /
                                                    C47075 -
                                                C47143 / C47114) -
                                      (C47231 * ce) / C47114)) -
                  (ae * (C47104 * (C47104 * C47191 + C47298 * ce) + C47177 +
                         C47104 * C47298 * ce)) /
                      C47114);
    const double C47392 = C47389 - C47378;
    const double C47432 = C47430 - C47423;
    const double C47501 = C47103 * C47498;
    const double C47535 = C47104 * C47532;
    const double C47544 = C47103 * C47532;
    const double C47195 = C47111 * C47194;
    const double C1527 =
        2 * C47103 * C47180 + C47103 * (C47180 + C47194 * C47253);
    const double C1693 = C47104 * (C47180 + C47194 * C47253) -
                         ((C47618 + C47304 * C47253) * ce) / C46950;
    const double C2319 =
        C47103 * C47180 +
        C47104 * (C47104 * C47103 * C47194 - (C47750 * ce) / C46950) -
        (C47104 * C47750 * ce) / C46950;
    const double C2453 =
        2 * (C47104 * C47180 - (C47618 * ce) / C46950) +
        C47104 * (C47180 + C47104 * (C47104 * C47194 - (C47304 * ce) / C46950) -
                  (C47104 * C47304 * ce) / C46950) -
        ((C47618 + C47304 * C47329) * ce) / C46950;
    const double C47393 = C47383 - C47390;
    const double C47502 = C47103 * C47499;
    const double C23978 =
        2 * (C47104 * C47366 - (C47766 * ce) / C46950) +
        C47104 * (C47366 + C47104 * (C47104 * C47499 - (C47530 * ce) / C46950) -
                  (C47104 * C47530 * ce) / C46950) -
        ((C47766 + C47530 * C47329) * ce) / C46950;
    const double C47235 = C47225 + C47234;
    const double C12865 = (4 * (2 * C47334 + C47104 * C47336) +
                           C47104 * (3 * C47336 + C47104 * C47473)) /
                          C47075;
    const double C47579 = C47577 + C47578;
    const double C187 = C184 * C48245;
    const double C609 = C588 - C601;
    const double C860 = C856 - C844;
    const double C188 = C185 * C48245;
    const double C396 = C394 * C48245;
    const double C160 = C113 * C132;
    const double C366 = C113 * C329;
    const double C5628 = C5060 * C329;
    const double C17042 = C16474 * C329;
    const double C723 = C113 * C331;
    const double C5086 = C5060 * C331;
    const double C16500 = C16474 * C331;
    const double C582 = C113 * C538;
    const double C854 = C113 * C540;
    const double C1050 = C113 * C1025;
    const double C5774 = C5060 * C1025;
    const double C17188 = C16474 * C1025;
    const double C47391 = C47388 - C47372;
    const double C27473 = C16474 * C6384;
    const double C38495 = C5060 * C6384;
    const double C44062 = C113 * C6384;
    const double C27947 = C16474 * C6870;
    const double C38969 = C5060 * C6870;
    const double C47433 = C47431 - C47372;
    const double C121 = 5 * (3 * C47610 + C47111 * C47618) +
                        C47111 * (4 * C47618 + C47111 * C47624);
    const double C314 = 3 * C47610 + C47111 * C47618 + C47624 * C47253;
    const double C522 = 3 * C47610 + C47111 * C47618 + C47624 * C47329;
    const double C717 = C47103 * (4 * C47618 + C47111 * C47624);
    const double C833 = C47104 * (4 * C47618 + C47111 * C47624);
    const double C1017 = C47104 * C47103 * C47624;
    const double C22884 = 5 * (3 * C47672 + C47103 * C47766) +
                          C47103 * (4 * C47766 + C47103 * C47838);
    const double C22998 = 3 * C47672 + C47103 * C47766 + C47838 * C47329;
    const double C23344 = C47104 * (4 * C47766 + C47103 * C47838);
    const double C44347 = 5 * (3 * C47727 + C47104 * C47818) +
                          C47104 * (4 * C47818 + C47104 * C47881);
    const double C48331 = C48295 / C46950;
    const double C48366 = C48335 / C46967;
    const double C48367 = C48337 + C48303;
    const double C715 = C48303 - C48009 / C46954;
    const double C48334 = C48299 / C46950;
    const double C48347 = C48313 / C46950;
    const double C48373 = C48350 / C46967;
    const double C48374 = C48351 + C48317;
    const double C1521 = C48317 - C48088 / C46954;
    const double C48349 = C48314 / C46950;
    const double C47007 = C47003 / C46950;
    const double C3482 = C170 * C3467;
    const double C3480 = C169 * C3467;
    const double C3474 = C166 * C3467;
    const double C3470 = C164 * C3467;
    const double C3652 = C376 * C3467;
    const double C3648 = C374 * C3467;
    const double C3646 = C371 * C3467;
    const double C3642 = C373 * C3467;
    const double C3925 = C378 * C3467;
    const double C14500 = C593 * C3467;
    const double C14498 = C589 * C3467;
    const double C14492 = C584 * C3467;
    const double C14700 = C1052 * C3467;
    const double C15038 = C1054 * C3467;
    const double C47018 = C47012 / C46950;
    const double C2482 = C2478 * C2450;
    const double C2480 = C2476 * C2450;
    const double C3776 = C2478 * C3760;
    const double C3768 = C2476 * C3760;
    const double C48389 = C48353 + C48385;
    const double C2444 = C48376 - (C48132 * C48121) / C46950;
    const double C3767 = C587 * C48377;
    const double C2140 = C48377 / C46967 - C48130 / C48338;
    const double C2461 = C587 * C2445;
    const double C48386 = C48355 + C48376;
    const double C1961 = C1960 - C1950;
    const double C161 = C48228 * C141;
    const double C361 = C48228 * C340;
    const double C5283 = C5055 * C340;
    const double C5279 = C48360 * C340;
    const double C16697 = C16469 * C340;
    const double C16693 = C48360 * C340;
    const double C365 = C48228 * C341;
    const double C5085 = C48360 * C341;
    const double C5631 = C5055 * C341;
    const double C16499 = C48360 * C341;
    const double C17045 = C16469 * C341;
    const double C573 = C48228 * C548;
    const double C5481 = C5055 * C548;
    const double C16895 = C16469 * C548;
    const double C579 = C48228 * C549;
    const double C5777 = C5055 * C549;
    const double C17191 = C16469 * C549;
    const double C1045 = C48228 * C1030;
    const double C5473 = C48360 * C1030;
    const double C5991 = C5055 * C1030;
    const double C16887 = C48360 * C1030;
    const double C17405 = C16469 * C1030;
    const double C1273 =
        3 * ((-(ae * C47262) / C46950) / C47075 - C47247 / C47114 +
             C47103 * C47271) +
        (((-2 * C47262) / C46950 - (C47103 * C47268) / C46950) * ae) / C47075 +
        C47103 * (2 * C47271 - (ae * C47268) / C47114 +
                  C47103 * ((-(ae * C47103 * C47184) / C46950) / C47075 -
                            C47136 / C47114 +
                            C47103 * ((-(C47103 * C47111 * C47143) / C46950) /
                                          C47075 -
                                      (ae * C47184) / C47114)));
    const double C1823 =
        2 * (C47103 * C47320 -
             (ae * (C47104 * C47171 + C47283 * ce)) / C47114) -
        (ae * (C47104 * C47268 + (C47283 + C47292 * C47253) * ce)) / C47114 +
        C47103 *
            (C47320 - (ae * (C47104 * C47103 * C47184 + C47293 * ce)) / C47114 +
             C47103 *
                 (C47103 * ((-(C47104 * C47111 * C47143) / C46950) / C47075 -
                            (C47226 * ce) / C47114) -
                  (ae * (C47104 * C47184 + C47292 * ce)) / C47114));
    const double C2167 =
        2 * ((-(C47104 * C47247) / C46950) / C47075 - (C47206 * ce) / C47114) -
        ((C47206 + C47215 * C47329) * ce) / C47114 +
        C47104 * ((-(C47104 * C47215 * ce) / C46950) / C47075 -
                  C47247 / C47114 + C47104 * C47320);
    const double C2168 =
        3 * ((-(C47334 * ce) / C46950) / C47075 - C47247 / C47114 +
             C47104 * C47320) -
        ((2 * C47334 + C47104 * C47336) * ce) / C47114 +
        C47104 * (2 * C47320 - (C47336 * ce) / C47114 +
                  C47104 * ((-(C47104 * C47226 * ce) / C46950) / C47075 -
                            C47136 / C47114 +
                            C47104 * ((-(C47104 * C47111 * C47143) / C46950) /
                                          C47075 -
                                      (C47226 * ce) / C47114)));
    const double C2591 =
        (((-2 * (C47104 * C47171 + C47283 * ce)) / C46950 -
          (C47104 * (C47104 * (C47104 * C47184 + C47292 * ce) + C47171 +
                     C47104 * C47292 * ce)) /
              C46950 -
          ((C47283 + C47292 * C47329) * ce) / C46950) *
         ae) /
            C47075 +
        C47103 * (2 * C47320 - (C47336 * ce) / C47114 +
                  C47104 * ((-(C47104 * C47226 * ce) / C46950) / C47075 -
                            C47136 / C47114 +
                            C47104 * ((-(C47104 * C47111 * C47143) / C46950) /
                                          C47075 -
                                      (C47226 * ce) / C47114)));
    const double C47489 = C47475 - C47482;
    const double C47443 = C47437 - C47442;
    const double C47567 = C47563 - C47566;
    const double C12473 = C48228 * C1822;
    const double C27464 = C48360 * C1822;
    const double C27946 = C16469 * C1822;
    const double C38486 = C48360 * C1822;
    const double C38968 = C5055 * C1822;
    const double C12873 = C48228 * C2165;
    const double C28338 = C16469 * C2165;
    const double C39356 = C5055 * C2165;
    const double C12877 = C48228 * C2166;
    const double C28344 = C16469 * C2166;
    const double C39362 = C5055 * C2166;
    const double C13365 = C48228 * C2590;
    const double C28336 = C48360 * C2590;
    const double C28814 = C16469 * C2590;
    const double C39354 = C48360 * C2590;
    const double C39832 = C5055 * C2590;
    const double C47369 = C47367 + C47368;
    const double C186 = C180 + C181;
    const double C861 = C846 - C857;
    const double C1065 = C1061 - C1055;
    const double C2342 = C2338 * C1940;
    const double C2952 = C2338 * C512;
    const double C4222 = C2338 * C47036;
    const double C11596 = C2338 * C832;
    const double C13082 = C2338 * C1939;
    const double C13822 = C2338 * C511;
    const double C14698 = C2338 * C3468;
    const double C1712 = C1708 * C832;
    const double C3650 = C1708 * C3468;
    const double C10948 = C1708 * C114;
    const double C12336 = C1708 * C831;
    const double C14702 = C1708 * C3467;
    const double C13092 = C13090 * C1940;
    const double C13826 = C13090 * C512;
    const double C15398 = C13090 * C47036;
    const double C47414 = C47412 + C47413;
    const double C27470 = C48360 * C6383;
    const double C38492 = C48360 * C6383;
    const double C44061 = C48228 * C6383;
    const double C27944 = C48360 * C6869;
    const double C38966 = C48360 * C6869;
    const double C28812 = C48360 * C7737;
    const double C39830 = C48360 * C7737;
    const double C43713 = C48228 * C7737;
    const double C173 = C162 + C163;
    const double C381 = C368 + C369;
    const double C5638 = C5632 + C5633;
    const double C17052 = C17046 + C17047;
    const double C729 = C725 + C726;
    const double C5108 = C5090 + C5091;
    const double C16522 = C16504 + C16505;
    const double C595 = C580 + C581;
    const double C858 = C852 + C853;
    const double C1057 = C1048 + C1049;
    const double C5778 = C5770 + C5771;
    const double C17192 = C17184 + C17185;
    const double C2340 = C2334 + C2335;
    const double C5494 = C5474 + C5475;
    const double C16908 = C16888 + C16889;
    const double C1710 = C1704 + C1705;
    const double C5996 = C5984 + C5985;
    const double C17410 = C17398 + C17399;
    const double C12866 =
        4 * ((-2 * C47736) / C46950 - (C47104 * C47828) / C46950 -
             (C47737 * ce) / C46950) +
        C47104 *
            ((-3 * C47828) / C46950 +
             C47104 * ((-2 * C47448) / C46950 -
                       (C47104 * (C47104 * (C47104 * C47375 + C47419 * ce) +
                                  C47184 + C47104 * C47419 * ce)) /
                           C46950 -
                       (C47462 * ce) / C46950) -
             (C47827 * ce) / C46950) -
        ((3 * C47737 + C47104 * C47827) * ce) / C46950;
    const double C12339 = C12003 * C48129;
    const double C14705 = C12003 * C48129;
    const double C12338 = C12002 * C832;
    const double C14704 = C12002 * C3468;
    const double C12141 = C12139 * C114;
    const double C13230 = C12886 * C2450;
    const double C14842 = C12886 * C3760;
    const double C6231 =
        (4 * (2 * C47679 + C47103 * C47781 + C47680 * ae) +
         C47103 *
             (3 * C47781 +
              C47103 *
                  (2 * C47777 +
                   C47103 * (C47226 + C47103 * (C47103 * C47420 + C47419 * ae) +
                             C47425 * ae) +
                   C47428 * ae) +
              C47778 * ae) +
         (3 * C47680 + C47103 * C47778) * ae) /
        C47075;
    const double C6385 =
        (2 * C47679 + C47103 * C47781 + C47680 * ae +
         (2 * C47777 +
          C47103 * (C47226 + C47103 * (C47103 * C47420 + C47419 * ae) +
                    C47425 * ae) +
          C47428 * ae) *
             C47329) /
        C47075;
    const double C6871 =
        (C47104 *
         (3 * C47781 +
          C47103 *
              (2 * C47777 +
               C47103 * (C47226 + C47103 * (C47103 * C47420 + C47419 * ae) +
                         C47425 * ae) +
               C47428 * ae) +
          C47778 * ae)) /
        C47075;
    const double C7739 =
        (2 * C47104 * C47781 +
         C47104 * (C47781 + (C47226 + C47103 * (C47103 * C47420 + C47419 * ae) +
                             C47425 * ae) *
                                C47329)) /
        C47075;
    const double C28328 =
        4 * ((-2 * C47797) / C46950 - (C47104 * C47870) / C46950 -
             (C47798 * ce) / C46950) +
        C47104 *
            ((-3 * C47870) / C46950 +
             C47104 *
                 ((-2 * C47546) / C46950 -
                  (C47104 * (C47104 * (C47104 * C47103 * C47188 + C47516 * ce) +
                             C47477 + C47104 * C47516 * ce)) /
                      C46950 -
                  (C47559 * ce) / C46950) -
             (C47869 * ce) / C46950) -
        ((3 * C47798 + C47104 * C47869) * ce) / C46950;
    const double C44356 = C44352 + C44353;
    const double C47538 = C47536 / C47114;
    const double C47879 = C47874 / C46950;
    const double C44354 = C113 * C12864;
    const double C47843 = C47830 + C47842;
    const double C47150 = C47142 + C47149;
    const double C47279 = C47274 - C47277;
    const double C47325 = C47322 - C47324;
    const double C1531 = C48228 * C1269;
    const double C5281 = C48360 * C1269;
    const double C16695 = C48360 * C1269;
    const double C2337 = C48228 * C1414;
    const double C5479 = C48360 * C1414;
    const double C16893 = C48360 * C1414;
    const double C1707 = C48228 * C1419;
    const double C5989 = C48360 * C1419;
    const double C17403 = C48360 * C1419;
    const double C47394 = C47103 * C47392;
    const double C47434 = C47104 * C47432;
    const double C47445 = C47103 * C47432;
    const double C47503 = C47500 + C47501;
    const double C47537 = C47534 + C47535;
    const double C47549 = C47544 - C47547;
    const double C47196 = C47186 + C47195;
    const double C6232 =
        4 * ((-2 * C47262) / C46950 - (C47103 * C47268) / C46950) +
        C47103 * ((-3 * C47268) / C46950 + C47103 * C47393);
    const double C6386 = (-2 * C47262) / C46950 - (C47103 * C47268) / C46950 +
                         C47104 * (C47104 * C47393 - (C47778 * ce) / C46950) -
                         (C47104 * C47778 * ce) / C46950;
    const double C6872 = C47104 * ((-3 * C47268) / C46950 + C47103 * C47393) -
                         ((3 * C47680 + C47103 * C47778) * ce) / C46950;
    const double C47504 = C47486 + C47502;
    const double C134 = (5 * (3 * C47212 + C47111 * C47222) +
                         C47111 * (4 * C47222 + C47111 * C47235)) /
                        C47075;
    const double C333 =
        (3 * C47212 + C47111 * C47222 +
         C47103 * (C47103 * C47235 + C47624 * ae) + C47103 * C47624 * ae) /
        C47075;
    const double C541 =
        (3 * C47212 + C47111 * C47222 + C47235 * C47329) / C47075;
    const double C718 = (C47103 * (4 * C47222 + C47111 * C47235) +
                         (4 * C47618 + C47111 * C47624) * ae) /
                        C47075;
    const double C834 = (C47104 * (4 * C47222 + C47111 * C47235)) / C47075;
    const double C1026 = (C47104 * (C47103 * C47235 + C47624 * ae)) / C47075;
    const double C44348 = (5 * (3 * C47331 + C47104 * C47469) +
                           C47104 * (4 * C47469 + C47104 * C47579)) /
                          C47075;
    const double C610 = C609 - C602;
    const double C864 = C860 - C845;
    const double C48387 = C48331 + C48379;
    const double C714 = C48366 - (C48011 * C47994) / C46950;
    const double C111 = C48367 / C46967 - C48009 / C48338;
    const double C48380 = C48334 + C48366;
    const double C48388 = C48347 + C48383;
    const double C1520 = C48373 - (C48090 * C48079) / C46950;
    const double C1248 = C48374 / C46967 - C48088 / C48338;
    const double C48384 = C48349 + C48373;
    const double C47011 = C47007 - C46988;
    const double C3487 = C3479 + C3480;
    const double C3486 = C3474 + C3475;
    const double C3924 = C3645 + C3646;
    const double C3771 = C167 * C48389;
    const double C3763 = C165 * C48389;
    const double C14837 = C585 * C48389;
    const double C2137 =
        (C48382 + 2 * C48125) / C46967 - (C48389 * C48121) / C46950;
    const double C2469 = C590 * C2444;
    const double C2459 = C585 * C2444;
    const double C13227 = C587 * C2444;
    const double C3773 = C590 * C48386;
    const double C3765 = C585 * C48386;
    const double C14839 = C587 * C48386;
    const double C2138 =
        (C48371 + 2 * C48132 + C48389) / C46967 - (C48386 * C48121) / C46950;
    const double C2139 = (C48345 + C48129 / C46950 + C48386) / C46967 -
                         (C48377 * C48121) / C46950;
    const double C1962 = C1961 - C1951;
    const double C172 = C160 + C161;
    const double C377 = C360 + C361;
    const double C5301 = C5282 + C5283;
    const double C5299 = C5278 + C5279;
    const double C16715 = C16696 + C16697;
    const double C16713 = C16692 + C16693;
    const double C379 = C364 + C365;
    const double C5105 = C5084 + C5085;
    const double C5637 = C5630 + C5631;
    const double C16519 = C16498 + C16499;
    const double C17051 = C17044 + C17045;
    const double C592 = C572 + C573;
    const double C5497 = C5480 + C5481;
    const double C16911 = C16894 + C16895;
    const double C594 = C578 + C579;
    const double C5781 = C5776 + C5777;
    const double C17195 = C17190 + C17191;
    const double C1056 = C1044 + C1045;
    const double C5493 = C5472 + C5473;
    const double C5999 = C5990 + C5991;
    const double C16907 = C16886 + C16887;
    const double C17413 = C17404 + C17405;
    const double C6521 = C48360 * C1273;
    const double C17919 = C48360 * C1273;
    const double C6731 = C48360 * C1823;
    const double C12135 = C48228 * C1823;
    const double C18129 = C48360 * C1823;
    const double C2465 = C48228 * C2167;
    const double C7601 = C5055 * C2167;
    const double C18983 = C16469 * C2167;
    const double C12881 = C48228 * C2168;
    const double C7599 = C48360 * C2591;
    const double C13089 = C48228 * C2591;
    const double C18981 = C48360 * C2591;
    const double C6873 =
        3 * (C47312 - (ae * (C47104 * C47348 + C47289 * ce)) / C47114 +
             C47103 * C47443) +
        ((C47104 * C47366 - ((2 * C47289 + C47103 * C47405) * ce) / C46950) *
         ae) /
            C47075 +
        C47103 *
            (2 * C47443 - (ae * (C47104 * C47356 + C47405 * ce)) / C47114 +
             C47103 *
                 (C47411 -
                  (ae * (C47104 * C47103 * C47174 + C47401 * ce)) / C47114 +
                  C47103 * (C47103 * ((-(C47104 * C47143) / C46950) / C47075 -
                                      (C47218 * ce) / C47114) -
                            (ae * (C47104 * C47174 + C47244 * ce)) / C47114)));
    const double C12475 = C12472 + C12473;
    const double C27481 = C27463 + C27464;
    const double C27951 = C27945 + C27946;
    const double C38503 = C38485 + C38486;
    const double C38973 = C38967 + C38968;
    const double C12883 = C12872 + C12873;
    const double C28350 = C28337 + C28338;
    const double C39368 = C39355 + C39356;
    const double C12885 = C12876 + C12877;
    const double C28353 = C28343 + C28344;
    const double C39371 = C39361 + C39362;
    const double C13367 = C13364 + C13365;
    const double C28349 = C28335 + C28336;
    const double C28819 = C28813 + C28814;
    const double C39367 = C39353 + C39354;
    const double C39837 = C39831 + C39832;
    const double C6233 =
        4 * (2 * C47260 - (ae * C47258) / C47114 + C47103 * C47369) +
        (((-3 * C47258) / C46950 + C47103 * C47366) * ae) / C47075 +
        C47103 *
            (3 * C47369 + (C47366 * ae) / C47075 +
             C47103 *
                 (2 * C47365 - (ae * C47356) / C47114 +
                  C47103 *
                      ((-(ae * C47103 * C47174) / C46950) / C47075 - C47139 +
                       C47103 * ((-(C47103 * C47143) / C46950) / C47075 -
                                 (ae * C47174) / C47114))));
    const double C189 = C186 * C48245;
    const double C6387 =
        2 * (C47103 * C47414 - (ae * (C47104 * (C47104 * C47166 + C47242 * ce) +
                                      C47162 + C47104 * C47242 * ce)) /
                                   C47114) -
        (ae * (C47104 * (C47104 * C47356 + C47405 * ce) + C47258 +
               C47104 * C47405 * ce)) /
            C47114 +
        C47103 *
            (C47414 -
             (ae * (C47104 * (C47104 * C47103 * C47174 + C47401 * ce) + C47348 +
                    C47104 * C47401 * ce)) /
                 C47114 +
             C47103 *
                 (C47103 *
                      ((-(C47104 * C47218 * ce) / C46950) / C47075 - C47139 +
                       C47104 * ((-(C47104 * C47143) / C46950) / C47075 -
                                 (C47218 * ce) / C47114)) -
                  (ae * (C47104 * (C47104 * C47174 + C47244 * ce) + C47166 +
                         C47104 * C47244 * ce)) /
                      C47114));
    const double C7255 =
        (((-3 * (C47104 * C47440 + C47162 + C47453 * ce)) / C46950 +
          C47104 * ((-2 * C47440) / C46950 -
                    (C47104 * (C47104 * (C47104 * C47174 + C47244 * ce) +
                               C47166 + C47104 * C47244 * ce)) /
                        C46950 -
                    (C47456 * ce) / C46950) -
          ((2 * C47453 + C47104 * C47456) * ce) / C46950) *
         ae) /
            C47075 +
        C47103 *
            (3 * C47414 - ((2 * C47397 + C47104 * C47457) * ce) / C47114 +
             C47104 *
                 (2 * C47411 - (C47457 * ce) / C47114 +
                  C47104 *
                      ((-(C47104 * C47218 * ce) / C46950) / C47075 - C47139 +
                       C47104 * ((-(C47104 * C47143) / C46950) / C47075 -
                                 (C47218 * ce) / C47114))));
    const double C7741 =
        2 * C47312 - (C47331 * ce) / C47114 + C47104 * C47414 +
        (((-2 * (C47104 * C47348 + C47289 * ce)) / C46950 -
          (C47104 * (C47104 * (C47104 * C47103 * C47174 + C47401 * ce) +
                     C47348 + C47104 * C47401 * ce)) /
              C46950 -
          ((C47289 + C47401 * C47329) * ce) / C46950) *
         ae) /
            C47075 +
        C47103 *
            ((((-2 * C47440) / C46950 -
               (C47104 * (C47104 * (C47104 * C47174 + C47244 * ce) + C47166 +
                          C47104 * C47244 * ce)) /
                   C46950 -
               (C47456 * ce) / C46950) *
              ae) /
                 C47075 +
             C47103 *
                 (2 * C47411 - (C47457 * ce) / C47114 +
                  C47104 *
                      ((-(C47104 * C47218 * ce) / C46950) / C47075 - C47139 +
                       C47104 * ((-(C47104 * C47143) / C46950) / C47075 -
                                 (C47218 * ce) / C47114))));
    const double C12867 =
        4 * (2 * C47312 - (C47331 * ce) / C47114 + C47104 * C47414) -
        ((3 * C47331 + C47104 * C47469) * ce) / C47114 +
        C47104 *
            (3 * C47414 - (C47469 * ce) / C47114 +
             C47104 *
                 (2 * C47411 - (C47457 * ce) / C47114 +
                  C47104 *
                      ((-(C47104 * C47218 * ce) / C46950) / C47075 - C47139 +
                       C47104 * ((-(C47104 * C47143) / C46950) / C47075 -
                                 (C47218 * ce) / C47114))));
    const double C27484 = C27469 + C27470;
    const double C38506 = C38491 + C38492;
    const double C44064 = C44060 + C44061;
    const double C27950 = C27943 + C27944;
    const double C38972 = C38965 + C38966;
    const double C28818 = C28811 + C28812;
    const double C39836 = C39829 + C39830;
    const double C43716 = C43712 + C43713;
    const double C183 = C173 * C114;
    const double C393 = C381 * C114;
    const double C731 = C729 * C114;
    const double C607 = C595 * C512;
    const double C1958 = C595 * C1940;
    const double C4064 = C595 * C47036;
    const double C11396 = C595 * C832;
    const double C14502 = C595 * C3468;
    const double C862 = C858 * C832;
    const double C3484 = C858 * C3468;
    const double C10799 = C858 * C114;
    const double C1063 = C1057 * C832;
    const double C3927 = C1057 * C3468;
    const double C11255 = C1057 * C114;
    const double C2344 = C2340 * C1940;
    const double C2958 = C2340 * C512;
    const double C4228 = C2340 * C47036;
    const double C11602 = C2340 * C832;
    const double C15040 = C2340 * C3468;
    const double C1714 = C1710 * C832;
    const double C3654 = C1710 * C3468;
    const double C10953 = C1710 * C114;
    const double C47882 = C47878 - C47879;
    const double C47844 = C47843 + C47834;
    const double C142 =
        5 * (3 * C47134 + C47111 * C47150) +
        C47111 * (4 * C47150 +
                  C47111 * (3 * C47148 +
                            C47111 * ((-2 * C47111 * C47143) / C47114 +
                                      C47111 * ((-(std::pow(C47107, 8) * bs[8] *
                                                   C47109 * C47120) /
                                                 C46950) /
                                                    C47075 -
                                                C47143 / C47114))));
    const double C342 = (-2 * C47111 * C47123) / C47114 + C47111 * C47134 +
                        (C47103 * C47180 * ae) / C47075 +
                        C47103 * ((C47180 * ae) / C47075 + C47103 * C47150);
    const double C343 =
        (((-3 * C47168) / C46950 + C47111 * C47180) * ae) / C47075 +
        C47103 * (3 * C47134 + C47111 * C47150);
    const double C550 = (-2 * C47111 * C47123) / C47114 + C47111 * C47134 -
                        (C47104 * C47222 * ce) / C47114 +
                        C47104 * (C47104 * C47150 - (C47222 * ce) / C47114);
    const double C551 = C47104 * (3 * C47134 + C47111 * C47150) -
                        ((3 * C47212 + C47111 * C47222) * ce) / C47114;
    const double C552 =
        3 * C47134 + C47111 * C47150 - (C47104 * C47235 * ce) / C47114 +
        C47104 * (C47104 * (3 * C47148 +
                            C47111 * ((-2 * C47111 * C47143) / C47114 +
                                      C47111 * ((-(std::pow(C47107, 8) * bs[8] *
                                                   C47109 * C47120) /
                                                 C46950) /
                                                    C47075 -
                                                C47143 / C47114))) -
                  (C47235 * ce) / C47114);
    const double C836 =
        C47104 * (4 * C47150 +
                  C47111 * (3 * C47148 +
                            C47111 * ((-2 * C47111 * C47143) / C47114 +
                                      C47111 * ((-(std::pow(C47107, 8) * bs[8] *
                                                   C47109 * C47120) /
                                                 C46950) /
                                                    C47075 -
                                                C47143 / C47114)))) -
        ((4 * C47222 + C47111 * C47235) * ce) / C47114;
    const double C1031 =
        ((C47104 * C47180 - ((2 * C47111 * C47242 +
                              C47111 * (C47242 + C47119 * C47121 * C47120)) *
                             ce) /
                                C46950) *
         ae) /
            C47075 +
        C47103 * (C47104 * C47150 - (C47222 * ce) / C47114);
    const double C1528 =
        2 * ((C47180 * ae) / C47075 + C47103 * C47150) +
        ((C47180 + C47194 * C47253) * ae) / C47075 +
        C47103 * (C47150 + (C47103 * C47194 * ae) / C47075 +
                  C47103 * ((C47194 * ae) / C47075 +
                            C47103 * ((-2 * C47111 * C47143) / C47114 +
                                      C47111 * ((-(std::pow(C47107, 8) * bs[8] *
                                                   C47109 * C47120) /
                                                 C46950) /
                                                    C47075 -
                                                C47143 / C47114))));
    const double C1694 =
        C47104 * C47150 - (C47222 * ce) / C47114 +
        ((C47104 * C47103 * C47194 - (C47103 * C47304 * ce) / C46950) * ae) /
            C47075 +
        C47103 * (((C47104 * C47194 - (C47304 * ce) / C46950) * ae) / C47075 +
                  C47103 * (C47104 * ((-2 * C47111 * C47143) / C47114 +
                                      C47111 * ((-(std::pow(C47107, 8) * bs[8] *
                                                   C47109 * C47120) /
                                                 C46950) /
                                                    C47075 -
                                                C47143 / C47114)) -
                            (C47233 * ce) / C47114));
    const double C2320 =
        ((C47180 + C47104 * (C47104 * C47194 - (C47304 * ce) / C46950) -
          (C47104 * C47304 * ce) / C46950) *
         ae) /
            C47075 +
        C47103 * (C47150 - (C47104 * C47233 * ce) / C47114 +
                  C47104 * (C47104 * ((-2 * C47111 * C47143) / C47114 +
                                      C47111 * ((-(std::pow(C47107, 8) * bs[8] *
                                                   C47109 * C47120) /
                                                 C46950) /
                                                    C47075 -
                                                C47143 / C47114)) -
                            (C47233 * ce) / C47114));
    const double C2454 =
        2 * (C47104 * C47150 - (C47222 * ce) / C47114) -
        ((C47222 + C47233 * C47329) * ce) / C47114 +
        C47104 * (C47150 - (C47104 * C47233 * ce) / C47114 +
                  C47104 * (C47104 * ((-2 * C47111 * C47143) / C47114 +
                                      C47111 * ((-(std::pow(C47107, 8) * bs[8] *
                                                   C47109 * C47120) /
                                                 C46950) /
                                                    C47075 -
                                                C47143 / C47114)) -
                            (C47233 * ce) / C47114));
    const double C1274 =
        3 * (C47134 - (ae * C47273) / C47114 + C47103 * C47279) +
        (((-2 * C47273) / C46950 - (C47103 * C47278) / C46950) * ae) / C47075 +
        C47103 * (2 * C47279 - (ae * C47278) / C47114 +
                  C47103 * (C47148 - (ae * C47103 * C47191) / C47114 +
                            C47103 * (C47103 * ((-(std::pow(C47107, 8) * bs[8] *
                                                   C47109 * C47120) /
                                                 C46950) /
                                                    C47075 -
                                                C47143 / C47114) -
                                      (ae * C47191) / C47114)));
    const double C1824 =
        2 * (C47103 * C47325 -
             (ae * (C47104 * C47177 + C47286 * ce)) / C47114) -
        (ae * (C47104 * C47278 + (C47286 + C47298 * C47253) * ce)) / C47114 +
        C47103 *
            (C47325 - (ae * (C47104 * C47103 * C47191 + C47299 * ce)) / C47114 +
             C47103 * (C47103 * (C47104 * ((-(std::pow(C47107, 8) * bs[8] *
                                              C47109 * C47120) /
                                            C46950) /
                                               C47075 -
                                           C47143 / C47114) -
                                 (C47231 * ce) / C47114) -
                       (ae * (C47104 * C47191 + C47298 * ce)) / C47114));
    const double C2169 =
        2 * (C47104 * C47134 - (C47212 * ce) / C47114) -
        ((C47212 + C47220 * C47329) * ce) / C47114 +
        C47104 * (C47134 - (C47104 * C47220 * ce) / C47114 + C47104 * C47325);
    const double C2170 =
        3 * (C47134 - (C47339 * ce) / C47114 + C47104 * C47325) -
        ((2 * C47339 + C47104 * C47341) * ce) / C47114 +
        C47104 * (2 * C47325 - (C47341 * ce) / C47114 +
                  C47104 * (C47148 - (C47104 * C47231 * ce) / C47114 +
                            C47104 * (C47104 * ((-(std::pow(C47107, 8) * bs[8] *
                                                   C47109 * C47120) /
                                                 C46950) /
                                                    C47075 -
                                                C47143 / C47114) -
                                      (C47231 * ce) / C47114)));
    const double C2592 =
        (((-2 * (C47104 * C47177 + C47286 * ce)) / C46950 -
          (C47104 * (C47104 * (C47104 * C47191 + C47298 * ce) + C47177 +
                     C47104 * C47298 * ce)) /
              C46950 -
          ((C47286 + C47298 * C47329) * ce) / C46950) *
         ae) /
            C47075 +
        C47103 * (2 * C47325 - (C47341 * ce) / C47114 +
                  C47104 * (C47148 - (C47104 * C47231 * ce) / C47114 +
                            C47104 * (C47104 * ((-(std::pow(C47107, 8) * bs[8] *
                                                   C47109 * C47120) /
                                                 C46950) /
                                                    C47075 -
                                                C47143 / C47114) -
                                      (C47231 * ce) / C47114)));
    const double C1538 = C1530 + C1531;
    const double C5300 = C5280 + C5281;
    const double C16714 = C16694 + C16695;
    const double C2341 = C2336 + C2337;
    const double C5496 = C5478 + C5479;
    const double C16910 = C16892 + C16893;
    const double C1711 = C1706 + C1707;
    const double C5998 = C5988 + C5989;
    const double C17412 = C17402 + C17403;
    const double C47395 = C47391 + C47394;
    const double C47435 = C47433 + C47434;
    const double C47451 = C47445 - C47450;
    const double C47505 = C47103 * C47503;
    const double C47539 = C47103 * C47537;
    const double C47565 = C47104 * C47537;
    const double C23633 =
        3 * C47414 - (C47469 * ce) / C47114 +
        C47104 * (2 * C47411 - (C47457 * ce) / C47114 + C47104 * C47537) +
        (((-3 * (C47104 * C47546 + C47348 + C47555 * ce)) / C46950 +
          C47104 *
              ((-2 * C47546) / C46950 -
               (C47104 * (C47104 * (C47104 * C47103 * C47188 + C47516 * ce) +
                          C47477 + C47104 * C47516 * ce)) /
                   C46950 -
               (C47559 * ce) / C46950) -
          ((2 * C47555 + C47104 * C47559) * ce) / C46950) *
         ae) /
            C47075 +
        C47103 *
            ((((-3 * C47533) / C46950 +
               C47104 * ((-2 * C47520) / C46950 -
                         (C47104 * (C47104 * (C47104 * C47188 + C47296 * ce) +
                                    C47174 + C47104 * C47296 * ce)) /
                             C46950 -
                         (C47560 * ce) / C46950) -
               ((2 * C47513 + C47104 * C47560) * ce) / C46950) *
              ae) /
                 C47075 +
             C47103 *
                 (3 * C47537 - ((2 * C47508 + C47104 * C47561) * ce) / C47114 +
                  C47104 *
                      (2 * C47532 - (C47561 * ce) / C47114 +
                       C47104 * ((-(C47104 * C47229 * ce) / C46950) / C47075 -
                                 C47143 / C47114 +
                                 C47104 * ((-(C47104 * std::pow(C47107, 8) *
                                              bs[8] * C47109) /
                                            C46950) /
                                               C47075 -
                                           (C47229 * ce) / C47114)))));
    const double C47551 = C47103 * C47549;
    const double C344 =
        3 * C47134 + C47111 * C47150 + (C47103 * C47196 * ae) / C47075 +
        C47103 * ((C47196 * ae) / C47075 +
                  C47103 * (3 * C47148 +
                            C47111 * ((-2 * C47111 * C47143) / C47114 +
                                      C47111 * ((-(std::pow(C47107, 8) * bs[8] *
                                                   C47109 * C47120) /
                                                 C46950) /
                                                    C47075 -
                                                C47143 / C47114))));
    const double C720 =
        ((4 * C47180 + C47111 * C47196) * ae) / C47075 +
        C47103 * (4 * C47150 +
                  C47111 * (3 * C47148 +
                            C47111 * ((-2 * C47111 * C47143) / C47114 +
                                      C47111 * ((-(std::pow(C47107, 8) * bs[8] *
                                                   C47109 * C47120) /
                                                 C46950) /
                                                    C47075 -
                                                C47143 / C47114))));
    const double C1032 =
        ((C47104 * C47196 -
          ((3 * (C47242 + C47244 * C47120) +
            C47111 * (2 * C47111 * C47244 +
                      C47111 * (C47244 + C47126 * C47125 * C47120))) *
           ce) /
              C46950) *
         ae) /
            C47075 +
        C47103 * (C47104 * (3 * C47148 +
                            C47111 * ((-2 * C47111 * C47143) / C47114 +
                                      C47111 * ((-(std::pow(C47107, 8) * bs[8] *
                                                   C47109 * C47120) /
                                                 C46950) /
                                                    C47075 -
                                                C47143 / C47114))) -
                  (C47235 * ce) / C47114);
    const double C135 = 5 * ((-3 * C47168) / C46950 + C47111 * C47180) +
                        C47111 * (4 * C47180 + C47111 * C47196);
    const double C334 =
        (-3 * C47168) / C46950 + C47111 * C47180 + C47196 * C47253;
    const double C542 = (-3 * C47168) / C46950 + C47111 * C47180 +
                        C47104 * (C47104 * C47196 - (C47624 * ce) / C46950) -
                        (C47104 * C47624 * ce) / C46950;
    const double C719 = C47103 * (4 * C47180 + C47111 * C47196);
    const double C835 = C47104 * (4 * C47180 + C47111 * C47196) -
                        ((4 * C47618 + C47111 * C47624) * ce) / C46950;
    const double C1027 =
        C47104 * C47103 * C47196 - (C47103 * C47624 * ce) / C46950;
    const double C22886 = 5 * ((-3 * C47258) / C46950 + C47103 * C47366) +
                          C47103 * (4 * C47366 + C47103 * C47504);
    const double C23000 = (-3 * C47258) / C46950 + C47103 * C47366 +
                          C47104 * (C47104 * C47504 - (C47838 * ce) / C46950) -
                          (C47104 * C47838 * ce) / C46950;
    const double C23346 = C47104 * (4 * C47366 + C47103 * C47504) -
                          ((4 * C47766 + C47103 * C47838) * ce) / C46950;
    const double C611 = C610 + C603;
    const double C866 = C864 * C48245;
    const double C108 =
        (C48378 + 2 * C48003) / C46967 - (C48387 * C47994) / C46950;
    const double C109 =
        (C48365 + 2 * C48011 + C48387) / C46967 - (C48380 * C47994) / C46950;
    const double C110 = (C48336 + C48008 / C46950 + C48380) / C46967 -
                        (C48367 * C47994) / C46950;
    const double C1245 =
        (C48381 + 2 * C48083) / C46967 - (C48388 * C48079) / C46950;
    const double C1246 =
        (C48369 + 2 * C48090 + C48388) / C46967 - (C48384 * C48079) / C46950;
    const double C1247 = (C48342 + C48087 / C46950 + C48384) / C46967 -
                         (C48374 * C48079) / C46950;
    const double C47017 = C47011 / C46967;
    const double C47016 = C46948 * C47011;
    const double C3489 = C3478 - C3487;
    const double C3488 = C3486 - C3476;
    const double C3929 = C3644 - C3924;
    const double C1963 = C1962 + C1952;
    const double C182 = C172 * C48042;
    const double C389 = C377 * C48042;
    const double C1703 = C377 * C48311;
    const double C3653 = C377 * C3465;
    const double C391 = C379 * C48042;
    const double C1047 = C379 * C48311;
    const double C3926 = C379 * C3465;
    const double C604 = C592 * C48345;
    const double C1953 = C592 * C48345;
    const double C2471 = C592 * C2445;
    const double C3775 = C592 * C48377;
    const double C4059 = C592 * C4043;
    const double C11117 = C592 * C48371;
    const double C11393 = C592 * C48129;
    const double C12631 = C592 * C1936;
    const double C14499 = C592 * C48129;
    const double C15197 = C592 * C48132;
    const double C606 = C594 * C48371;
    const double C849 = C594 * C48129;
    const double C1957 = C594 * C1936;
    const double C3481 = C594 * C48129;
    const double C4063 = C594 * C48132;
    const double C10797 = C594 * C48042;
    const double C11395 = C594 * C48311;
    const double C14501 = C594 * C3465;
    const double C1062 = C1056 * C48129;
    const double C2333 = C1056 * C1936;
    const double C2957 = C1056 * C48371;
    const double C3647 = C1056 * C48129;
    const double C4227 = C1056 * C48132;
    const double C10951 = C1056 * C48042;
    const double C11601 = C1056 * C48311;
    const double C15039 = C1056 * C3465;
    const double C6528 = C6520 + C6521;
    const double C17926 = C17918 + C17919;
    const double C6736 = C6730 + C6731;
    const double C12138 = C12134 + C12135;
    const double C18134 = C18128 + C18129;
    const double C2477 = C2464 + C2465;
    const double C7605 = C7600 + C7601;
    const double C18987 = C18982 + C18983;
    const double C12887 = C12880 + C12881;
    const double C7604 = C7598 + C7599;
    const double C13091 = C13088 + C13089;
    const double C18986 = C18980 + C18981;
    const double C27948 = C48360 * C6873;
    const double C38970 = C48360 * C6873;
    const double C27474 = C48360 * C6387;
    const double C38496 = C48360 * C6387;
    const double C44063 = C48228 * C6387;
    const double C28346 = C48360 * C7255;
    const double C39364 = C48360 * C7255;
    const double C44703 = C48228 * C7255;
    const double C28816 = C48360 * C7741;
    const double C39834 = C48360 * C7741;
    const double C43715 = C48228 * C7741;
    const double C44355 = C48228 * C12867;
    const double C47883 = C47882 - C47880;
    const double C22885 =
        (5 * (3 * C47769 + C47103 * C47844 + C47766 * ae) +
         C47103 * (4 * C47844 +
                   C47103 * (3 * C47841 +
                             C47103 * (2 * C47837 +
                                       C47103 * (C47218 +
                                                 C47103 * (C47103 * C47229 +
                                                           C47296 * ae) +
                                                 C47516 * ae) +
                                       C47522 * ae) +
                             C47530 * ae) +
                   C47838 * ae) +
         (4 * C47766 + C47103 * C47838) * ae) /
        C47075;
    const double C22999 =
        (3 * C47769 + C47103 * C47844 + C47766 * ae +
         (3 * C47841 +
          C47103 *
              (2 * C47837 +
               C47103 * (C47218 + C47103 * (C47103 * C47229 + C47296 * ae) +
                         C47516 * ae) +
               C47522 * ae) +
          C47530 * ae) *
             C47329) /
        C47075;
    const double C23345 =
        (C47104 *
         (4 * C47844 +
          C47103 *
              (3 * C47841 +
               C47103 * (2 * C47837 +
                         C47103 * (C47218 +
                                   C47103 * (C47103 * C47229 + C47296 * ae) +
                                   C47516 * ae) +
                         C47522 * ae) +
               C47530 * ae) +
          C47838 * ae)) /
        C47075;
    const double C23977 =
        (2 * C47104 * C47844 +
         C47104 *
             (C47844 +
              (2 * C47837 +
               C47103 * (C47218 + C47103 * (C47103 * C47229 + C47296 * ae) +
                         C47516 * ae) +
               C47522 * ae) *
                  C47329)) /
        C47075;
    const double C367 = C48228 * C342;
    const double C5629 = C48360 * C342;
    const double C17043 = C48360 * C342;
    const double C724 = C48228 * C343;
    const double C5087 = C48360 * C343;
    const double C16501 = C48360 * C343;
    const double C583 = C48228 * C550;
    const double C855 = C48228 * C551;
    const double C1051 = C48228 * C1031;
    const double C5775 = C48360 * C1031;
    const double C17189 = C48360 * C1031;
    const double C2475 = C48228 * C2169;
    const double C1542 = C1538 * C48042;
    const double C2345 = C2341 * C48345;
    const double C2959 = C2341 * C48345;
    const double C4229 = C2341 * C4043;
    const double C11603 = C2341 * C48129;
    const double C15041 = C2341 * C48129;
    const double C1715 = C1711 * C48129;
    const double C3655 = C1711 * C48129;
    const double C10952 = C1711 * C48042;
    const double C6234 =
        4 * (2 * C47271 - (ae * C47268) / C47114 + C47103 * C47395) +
        (((-3 * C47268) / C46950 + C47103 * C47393) * ae) / C47075 +
        C47103 *
            (3 * C47395 + (C47393 * ae) / C47075 +
             C47103 *
                 (2 * C47392 - (ae * C47384) / C47114 +
                  C47103 * ((-(ae * C47103 * C47375) / C46950) / C47075 -
                            C47373 / C47114 +
                            C47103 * ((-(C47103 * C47111 * std::pow(C47107, 8) *
                                         bs[8] * C47109) /
                                       C46950) /
                                          C47075 -
                                      (ae * C47375) / C47114))));
    const double C6388 =
        2 * (C47103 * C47435 - (ae * (C47104 * (C47104 * C47184 + C47292 * ce) +
                                      C47171 + C47104 * C47292 * ce)) /
                                   C47114) -
        (ae * (C47104 * (C47104 * C47384 + C47428 * ce) + C47268 +
               C47104 * C47428 * ce)) /
            C47114 +
        C47103 *
            (C47435 -
             (ae * (C47104 * (C47104 * C47103 * C47375 + C47425 * ce) + C47371 +
                    C47104 * C47425 * ce)) /
                 C47114 +
             C47103 *
                 (C47103 * ((-(C47104 * C47420 * ce) / C46950) / C47075 -
                            C47373 / C47114 +
                            C47104 * ((-(C47104 * C47111 * std::pow(C47107, 8) *
                                         bs[8] * C47109) /
                                       C46950) /
                                          C47075 -
                                      (C47420 * ce) / C47114)) -
                  (ae * (C47104 * (C47104 * C47375 + C47419 * ce) + C47184 +
                         C47104 * C47419 * ce)) /
                      C47114));
    const double C7256 =
        (((-3 * (C47104 * C47448 + C47171 + C47459 * ce)) / C46950 +
          C47104 * ((-2 * C47448) / C46950 -
                    (C47104 * (C47104 * (C47104 * C47375 + C47419 * ce) +
                               C47184 + C47104 * C47419 * ce)) /
                        C46950 -
                    (C47462 * ce) / C46950) -
          ((2 * C47459 + C47104 * C47462) * ce) / C46950) *
         ae) /
            C47075 +
        C47103 *
            (3 * C47435 - ((2 * C47416 + C47104 * C47463) * ce) / C47114 +
             C47104 *
                 (2 * C47432 - (C47463 * ce) / C47114 +
                  C47104 * ((-(C47104 * C47420 * ce) / C46950) / C47075 -
                            C47373 / C47114 +
                            C47104 * ((-(C47104 * C47111 * std::pow(C47107, 8) *
                                         bs[8] * C47109) /
                                       C46950) /
                                          C47075 -
                                      (C47420 * ce) / C47114))));
    const double C7742 =
        2 * C47320 - (C47336 * ce) / C47114 + C47104 * C47435 +
        (((-2 * (C47104 * C47371 + C47293 * ce)) / C46950 -
          (C47104 * (C47104 * (C47104 * C47103 * C47375 + C47425 * ce) +
                     C47371 + C47104 * C47425 * ce)) /
              C46950 -
          ((C47293 + C47425 * C47329) * ce) / C46950) *
         ae) /
            C47075 +
        C47103 *
            ((((-2 * C47448) / C46950 -
               (C47104 * (C47104 * (C47104 * C47375 + C47419 * ce) + C47184 +
                          C47104 * C47419 * ce)) /
                   C46950 -
               (C47462 * ce) / C46950) *
              ae) /
                 C47075 +
             C47103 *
                 (2 * C47432 - (C47463 * ce) / C47114 +
                  C47104 * ((-(C47104 * C47420 * ce) / C46950) / C47075 -
                            C47373 / C47114 +
                            C47104 * ((-(C47104 * C47111 * std::pow(C47107, 8) *
                                         bs[8] * C47109) /
                                       C46950) /
                                          C47075 -
                                      (C47420 * ce) / C47114))));
    const double C12868 =
        4 * (2 * C47320 - (C47336 * ce) / C47114 + C47104 * C47435) -
        ((3 * C47336 + C47104 * C47473) * ce) / C47114 +
        C47104 *
            (3 * C47435 - (C47473 * ce) / C47114 +
             C47104 *
                 (2 * C47432 - (C47463 * ce) / C47114 +
                  C47104 * ((-(C47104 * C47420 * ce) / C46950) / C47075 -
                            C47373 / C47114 +
                            C47104 * ((-(C47104 * C47111 * std::pow(C47107, 8) *
                                         bs[8] * C47109) /
                                       C46950) /
                                          C47075 -
                                      (C47420 * ce) / C47114))));
    const double C6874 =
        3 * (C47320 - (ae * (C47104 * C47371 + C47293 * ce)) / C47114 +
             C47103 * C47451) +
        ((C47104 * C47393 - ((2 * C47293 + C47103 * C47428) * ce) / C46950) *
         ae) /
            C47075 +
        C47103 *
            (2 * C47451 - (ae * (C47104 * C47384 + C47428 * ce)) / C47114 +
             C47103 *
                 (C47432 -
                  (ae * (C47104 * C47103 * C47375 + C47425 * ce)) / C47114 +
                  C47103 * (C47103 * ((-(C47104 * C47111 * std::pow(C47107, 8) *
                                         bs[8] * C47109) /
                                       C46950) /
                                          C47075 -
                                      (C47420 * ce) / C47114) -
                            (ae * (C47104 * C47375 + C47419 * ce)) / C47114)));
    const double C47506 = C47489 + C47505;
    const double C47540 = C47539 - C47538;
    const double C47568 = C47567 + C47565;
    const double C47553 = C47552 + C47551;
    const double C47022 = C47017 - C47018;
    const double C47021 = C47016 + C48311;
    const double C3490 = C3488 - C3477;
    const double C395 = C388 + C389;
    const double C722 = C390 + C391;
    const double C612 = C611 + C604;
    const double C1964 = C1963 + C1953;
    const double C865 = C861 + C849;
    const double C3491 = C3489 + C3481;
    const double C1066 = C1065 + C1062;
    const double C3930 = C3929 + C3647;
    const double C12140 = C12138 * C48042;
    const double C2481 = C2477 * C48358;
    const double C3769 = C2477 * C48358;
    const double C11113 = C2477 * C48345;
    const double C12627 = C2477 * C48345;
    const double C13229 = C2477 * C2445;
    const double C14841 = C2477 * C48377;
    const double C15193 = C2477 * C4043;
    const double C13231 = C12887 * C48358;
    const double C14843 = C12887 * C48358;
    const double C13093 = C13091 * C48345;
    const double C13827 = C13091 * C48345;
    const double C15399 = C13091 * C4043;
    const double C27952 = C27947 + C27948;
    const double C38974 = C38969 + C38970;
    const double C27486 = C27473 + C27474;
    const double C38508 = C38495 + C38496;
    const double C44065 = C44062 + C44063;
    const double C28354 = C28345 + C28346;
    const double C39372 = C39363 + C39364;
    const double C44705 = C44702 + C44703;
    const double C28820 = C28815 + C28816;
    const double C39838 = C39833 + C39834;
    const double C43717 = C43714 + C43715;
    const double C44357 = C44354 + C44355;
    const double C44349 =
        5 * ((-3 * C47819) / C46950 + C47104 * C47883 -
             (C47818 * ce) / C46950) +
        C47104 *
            (4 * C47883 +
             C47104 * ((-3 * C47533) / C46950 +
                       C47104 * ((-2 * C47520) / C46950 -
                                 (C47104 *
                                  (C47104 * (C47104 * C47188 + C47296 * ce) +
                                   C47174 + C47104 * C47296 * ce)) /
                                     C46950 -
                                 (C47560 * ce) / C46950) -
                       (C47574 * ce) / C46950) -
             (C47881 * ce) / C46950) -
        ((4 * C47818 + C47104 * C47881) * ce) / C46950;
    const double C380 = C366 + C367;
    const double C5636 = C5628 + C5629;
    const double C17050 = C17042 + C17043;
    const double C728 = C723 + C724;
    const double C5106 = C5086 + C5087;
    const double C16520 = C16500 + C16501;
    const double C596 = C582 + C583;
    const double C859 = C854 + C855;
    const double C1058 = C1050 + C1051;
    const double C5780 = C5774 + C5775;
    const double C17194 = C17188 + C17189;
    const double C2479 = C2474 + C2475;
    const double C22887 =
        5 * (3 * C47369 + (C47366 * ae) / C47075 + C47103 * C47506) +
        ((4 * C47366 + C47103 * C47504) * ae) / C47075 +
        C47103 *
            (4 * C47506 + (C47504 * ae) / C47075 +
             C47103 *
                 (3 * C47503 + (C47499 * ae) / C47075 +
                  C47103 *
                      (2 * C47498 - (ae * C47488) / C47114 +
                       C47103 * ((-(ae * C47103 * C47188) / C46950) / C47075 -
                                 C47143 / C47114 +
                                 C47103 * ((-(C47103 * std::pow(C47107, 8) *
                                              bs[8] * C47109) /
                                            C46950) /
                                               C47075 -
                                           (ae * C47188) / C47114)))));
    const double C23001 =
        3 * (C47414 -
             (ae * (C47104 * (C47104 * C47477 + C47401 * ce) + C47348 +
                    C47104 * C47401 * ce)) /
                 C47114 +
             C47103 * C47540) +
        ((C47366 + C47104 * (C47104 * C47499 - (C47530 * ce) / C46950) -
          (C47104 * C47530 * ce) / C46950) *
         ae) /
            C47075 +
        C47103 *
            (2 * C47540 -
             (ae * (C47104 * (C47104 * C47488 + C47522 * ce) + C47356 +
                    C47104 * C47522 * ce)) /
                 C47114 +
             C47103 *
                 (C47537 -
                  (ae * (C47104 * (C47104 * C47103 * C47188 + C47516 * ce) +
                         C47477 + C47104 * C47516 * ce)) /
                      C47114 +
                  C47103 *
                      (C47103 * ((-(C47104 * C47229 * ce) / C46950) / C47075 -
                                 C47143 / C47114 +
                                 C47104 * ((-(C47104 * std::pow(C47107, 8) *
                                              bs[8] * C47109) /
                                            C46950) /
                                               C47075 -
                                           (C47229 * ce) / C47114)) -
                       (ae * (C47104 * (C47104 * C47188 + C47296 * ce) +
                              C47174 + C47104 * C47296 * ce)) /
                           C47114)));
    const double C23979 =
        2 * ((((-2 * C47440) / C46950 - (C47104 * C47533) / C46950 -
               (C47456 * ce) / C46950) *
              ae) /
                 C47075 +
             C47103 * C47568) +
        (((-2 * (C47104 * C47356 + C47405 * ce)) / C46950 -
          (C47104 * (C47104 * (C47104 * C47488 + C47522 * ce) + C47356 +
                     C47104 * C47522 * ce)) /
              C46950 -
          ((C47405 + C47522 * C47329) * ce) / C46950) *
         ae) /
            C47075 +
        C47103 *
            (C47568 +
             (((-2 * C47546) / C46950 -
               (C47104 * (C47104 * (C47104 * C47103 * C47188 + C47516 * ce) +
                          C47477 + C47104 * C47516 * ce)) /
                   C46950 -
               (C47559 * ce) / C46950) *
              ae) /
                 C47075 +
             C47103 *
                 ((((-2 * C47520) / C46950 -
                    (C47104 * (C47104 * (C47104 * C47188 + C47296 * ce) +
                               C47174 + C47104 * C47296 * ce)) /
                        C46950 -
                    (C47560 * ce) / C46950) *
                   ae) /
                      C47075 +
                  C47103 *
                      (2 * C47532 - (C47561 * ce) / C47114 +
                       C47104 * ((-(C47104 * C47229 * ce) / C46950) / C47075 -
                                 C47143 / C47114 +
                                 C47104 * ((-(C47104 * std::pow(C47107, 8) *
                                              bs[8] * C47109) /
                                            C46950) /
                                               C47075 -
                                           (C47229 * ce) / C47114)))));
    const double C28329 =
        ((4 * ((-2 * C47440) / C46950 - (C47104 * C47533) / C46950 -
               (C47456 * ce) / C46950) +
          C47104 *
              ((-3 * C47533) / C46950 +
               C47104 * ((-2 * C47520) / C46950 -
                         (C47104 * (C47104 * (C47104 * C47188 + C47296 * ce) +
                                    C47174 + C47104 * C47296 * ce)) /
                             C46950 -
                         (C47560 * ce) / C46950) -
               (C47574 * ce) / C46950) -
          ((3 * C47456 + C47104 * C47574) * ce) / C46950) *
         ae) /
            C47075 +
        C47103 *
            (4 * C47568 - ((3 * C47457 + C47104 * C47575) * ce) / C47114 +
             C47104 *
                 (3 * C47537 - (C47575 * ce) / C47114 +
                  C47104 *
                      (2 * C47532 - (C47561 * ce) / C47114 +
                       C47104 * ((-(C47104 * C47229 * ce) / C46950) / C47075 -
                                 C47143 / C47114 +
                                 C47104 * ((-(C47104 * std::pow(C47107, 8) *
                                              bs[8] * C47109) /
                                            C46950) /
                                               C47075 -
                                           (C47229 * ce) / C47114)))));
    const double C44350 =
        5 * (3 * C47414 - (C47469 * ce) / C47114 + C47104 * C47568) -
        ((4 * C47469 + C47104 * C47579) * ce) / C47114 +
        C47104 *
            (4 * C47568 - (C47579 * ce) / C47114 +
             C47104 *
                 (3 * C47537 - (C47575 * ce) / C47114 +
                  C47104 *
                      (2 * C47532 - (C47561 * ce) / C47114 +
                       C47104 * ((-(C47104 * C47229 * ce) / C46950) / C47075 -
                                 C47143 / C47114 +
                                 C47104 * ((-(C47104 * std::pow(C47107, 8) *
                                              bs[8] * C47109) /
                                            C46950) /
                                               C47075 -
                                           (C47229 * ce) / C47114)))));
    const double C23347 =
        4 * (2 * C47443 - (ae * (C47104 * C47356 + C47405 * ce)) / C47114 +
             C47103 * C47553) +
        ((C47104 * C47504 - ((3 * C47405 + C47103 * C47530) * ce) / C46950) *
         ae) /
            C47075 +
        C47103 *
            (3 * C47553 +
             ((C47104 * C47499 - (C47530 * ce) / C46950) * ae) / C47075 +
             C47103 *
                 (2 * C47549 - (ae * (C47104 * C47488 + C47522 * ce)) / C47114 +
                  C47103 *
                      (C47532 -
                       (ae * (C47104 * C47103 * C47188 + C47516 * ce)) /
                           C47114 +
                       C47103 *
                           (C47103 * ((-(C47104 * std::pow(C47107, 8) * bs[8] *
                                         C47109) /
                                       C46950) /
                                          C47075 -
                                      (C47229 * ce) / C47114) -
                            (ae * (C47104 * C47188 + C47296 * ce)) / C47114))));
    const double C4060 = C593 * C47022;
    const double C4056 = C589 * C47022;
    const double C4050 = C584 * C47022;
    const double C4224 = C1054 * C47022;
    const double C4218 = C1052 * C47022;
    const double C15194 = C591 * C47022;
    const double C15190 = C586 * C47022;
    const double C15394 = C2338 * C47022;
    const double C2145 =
        (C47022 / C46967 + ((C46948 * C47036 + C4043) * ce) / C46950) / C46967 -
        ((C46948 * (C47036 / C46967 + (0 * ce) / C46950) + C48358) * de) /
            C46950;
    const double C2449 =
        C47022 / C46967 - ((C46948 * C47036 + C4043) * de) / C46950;
    const double C3759 =
        C47022 / C46967 + ((C46948 * C47036 + C4043) * ce) / C46950;
    const double C47025 = C47021 * de;
    const double C3492 = C3490 * C48245;
    const double C397 = C395 * C48245;
    const double C727 = C722 * C48245;
    const double C613 = C612 * C48245;
    const double C1965 = C1964 * C48245;
    const double C867 = C865 * C48245;
    const double C3493 = C3491 * C48245;
    const double C1067 = C1066 * C48245;
    const double C3931 = C3930 * C48245;
    const double C392 = C380 * C48042;
    const double C730 = C728 * C48042;
    const double C608 = C596 * C48345;
    const double C1959 = C596 * C48345;
    const double C4065 = C596 * C4043;
    const double C11397 = C596 * C48129;
    const double C14503 = C596 * C48129;
    const double C863 = C859 * C48129;
    const double C3485 = C859 * C48129;
    const double C10798 = C859 * C48042;
    const double C1064 = C1058 * C48129;
    const double C3928 = C1058 * C48129;
    const double C11254 = C1058 * C48042;
    const double C2483 = C2479 * C48358;
    const double C3777 = C2479 * C48358;
    const double C11119 = C2479 * C48345;
    const double C12633 = C2479 * C48345;
    const double C15199 = C2479 * C4043;
    const double C2470 = C591 * C2449;
    const double C2460 = C586 * C2449;
    const double C13228 = C2476 * C2449;
    const double C3774 = C591 * C3759;
    const double C3766 = C586 * C3759;
    const double C14840 = C2476 * C3759;
    const double C47027 = C47025 / C46950;
    const double C47029 = C47015 - C47027;
    const double C47030 = C47029 + C47000;
    const double C4062 = C169 * C47030;
    const double C4054 = C166 * C47030;
    const double C4048 = C164 * C47030;
    const double C4226 = C371 * C47030;
    const double C4220 = C373 * C47030;
    const double C15196 = C589 * C47030;
    const double C15188 = C584 * C47030;
    const double C15396 = C1052 * C47030;
    const double C2142 =
        (((((0 - (C46948 * C46983) / C46950) * ce) / C46950 -
           (0 * de) / C46954 + (2 * C46984) / C46950) /
              C46967 -
          ((C46948 * C47019 + 0) * de) / C46950 + C46993 - C47006) /
             C46967 +
         ((C46948 * C47028 + 0) * ce) / C46950) /
            C46967 -
        ((C46948 * (C47028 / C46967 +
                    ((C46948 * C47030 + C48125) * ce) / C46950 + C47022) +
          C48389) *
         de) /
            C46950 +
        C47030 / C46967 + ((C46948 * C47022 + C48132) * ce) / C46950 +
        2 * (C47000 / C46967 - (0 * de) / C46950);
    const double C2143 =
        (C47028 / C46967 + ((C46948 * C47030 + C48125) * ce) / C46950 +
         C47022) /
            C46967 -
        ((C46948 * (C47030 / C46967 +
                    ((C46948 * C47022 + C48132) * ce) / C46950 + 2 * C47036) +
          C48386) *
         de) /
            C46950 +
        2 * (C47022 / C46967 + ((C46948 * C47036 + C4043) * ce) / C46950);
    const double C2144 =
        (C47030 / C46967 + ((C46948 * C47022 + C48132) * ce) / C46950 +
         2 * C47036) /
            C46967 -
        ((C46948 *
              (C47022 / C46967 + ((C46948 * C47036 + C4043) * ce) / C46950) +
          C48377) *
         de) /
            C46950 +
        3 * (C47036 / C46967 + (0 * ce) / C46950);
    const double C2447 =
        C47028 / C46967 - ((C46948 * C47030 + C48125) * de) / C46950 + C47022;
    const double C2448 = C47030 / C46967 -
                         ((C46948 * C47022 + C48132) * de) / C46950 +
                         2 * C47036;
    const double C3757 =
        C47028 / C46967 + ((C46948 * C47030 + C48125) * ce) / C46950 + C47022;
    const double C3758 = C47030 / C46967 +
                         ((C46948 * C47022 + C48132) * ce) / C46950 +
                         2 * C47036;
    const double C4066 = C4054 + C4055;
    const double C2466 = C166 * C2447;
    const double C2456 = C164 * C2447;
    const double C13224 = C584 * C2447;
    const double C2468 = C589 * C2448;
    const double C2458 = C584 * C2448;
    const double C13226 = C586 * C2448;
    const double C3770 = C166 * C3757;
    const double C3762 = C164 * C3757;
    const double C14836 = C584 * C3757;
    const double C3772 = C589 * C3758;
    const double C3764 = C584 * C3758;
    const double C14838 = C586 * C3758;
    const double C4067 = C4066 - C4056;
    const double C4068 = C4067 - C4057;
    const double C4069 = C4068 + C4058;
    const double C4070 = C4069 + C4059;
    const double C4071 = C4070 * C48245;
    d2ee[0] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C48245 * C104 +
            (C174 + C175) * C48245 * C105 + C187 * C106) *
               C48083 -
           (C396 * C106 + (C384 + C385) * C48245 * C105 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C48245 * C104) *
               C48090 +
           (((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C48245 * C104 +
            (C386 + C387) * C48245 * C105 + C397 * C106) *
               C3071) *
              C48003 +
          (((C385 + C384) * C48245 * C104 + (C383 + C382) * C48245 * C105 +
            C727 * C106) *
               C48090 -
           (C188 * C106 + (C177 + C176) * C48245 * C105 +
            (C175 + C174) * C48245 * C104) *
               C48083 -
           ((C392 + C393) * C48245 * C106 + (C389 + C388) * C48245 * C105 +
            (C387 + C386) * C48245 * C104) *
               C3071) *
              C48011 +
          ((C187 * C104 + (C179 + C178) * C48245 * C105 + C189 * C106) *
               C48083 -
           ((C730 + C731) * C48245 * C106 + (C391 + C390) * C48245 * C105 +
            C396 * C104) *
               C48090 +
           (C397 * C104 + (C393 + C392) * C48245 * C105 +
            ((C113 * C314 + C48228 * C333) * C114 +
             (C113 * C334 + C48228 * C344) * C48042) *
                C48245 * C106) *
               C3071) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C831 +
             (C113 * C123 + C48228 * C136) * C48311 -
             (C113 * C513 + C48228 * C523) * C832 -
             (C113 * C524 + C48228 * C543) * C48129) *
                C48245 * C104 +
            (C838 + C839 - C840 - C841) * C48245 * C105 + C866 * C106) *
               C48083 +
           (((C113 * C1013 + C48228 * C1018) * C832 -
             ((C113 * C319 + C48228 * C337) * C48311 +
              (C113 * C307 + C48228 * C320) * C831) +
             (C113 * C1019 + C48228 * C1028) * C48129) *
                C48245 * C104 +
            (C1059 - (C1036 + C1037) + C1060) * C48245 * C105 + C1067 * C106) *
               C48090 +
           (((C113 * C308 + C48228 * C321) * C831 +
             (C113 * C322 + C48228 * C338) * C48311 -
             (C113 * C1388 + C48228 * C1400) * C832 -
             (C113 * C1401 + C48228 * C1415) * C48129) *
                C48245 * C104 +
            (C1696 + C1697 - C1712 - C1713) * C48245 * C105 +
            (C1702 + C1703 - C1714 - C1715) * C48245 * C106) *
               C3071) *
              C2799 +
          (((C840 - (C839 + C838) + C841) * C48245 * C104 +
            (C844 - (C843 + C842) + C845) * C48245 * C105 + C867 * C106) *
               C48083 +
           ((C1037 + C1036 - C1059 - C1060) * C48245 * C104 +
            (C1043 + C1042 - C1061 - C1062) * C48245 * C105 +
            (C1046 + C1047 - C1063 - C1064) * C48245 * C106) *
               C48090 +
           ((C1712 - (C1697 + C1696) + C1713) * C48245 * C104 +
            (C1714 - (C1703 + C1702) + C1715) * C48245 * C105 +
            ((C113 * C1691 + C48228 * C1692) * C832 -
             (C380 * C48311 + C381 * C831) +
             (C113 * C1693 + C48228 * C1694) * C48129) *
                C48245 * C106) *
               C3071) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C48245 * C104 +
            (C174 + C175) * C48245 * C105 + C187 * C106) *
               C48388 -
           (C396 * C106 + (C384 + C385) * C48245 * C105 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C48245 * C104) *
               C48384 +
           (((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C48245 * C104 +
            (C386 + C387) * C48245 * C105 + C397 * C106) *
               C48374 -
           ((C1542 + C1543) * C48245 * C106 + (C1544 + C1545) * C48245 * C105 +
            ((C113 * C1261 + C48228 * C1271) * C48042 +
             (C113 * C1253 + C48228 * C1262) * C114) *
                C48245 * C104) *
               C48352) *
              C2799 +
          (((C385 + C384) * C48245 * C104 + (C383 + C382) * C48245 * C105 +
            C727 * C106) *
               C48384 -
           (C188 * C106 + (C177 + C176) * C48245 * C105 +
            (C175 + C174) * C48245 * C104) *
               C48388 -
           ((C392 + C393) * C48245 * C106 + (C389 + C388) * C48245 * C105 +
            (C387 + C386) * C48245 * C104) *
               C48374 +
           ((C1545 + C1544) * C48245 * C104 + (C1543 + C1542) * C48245 * C105 +
            ((C113 * C1525 + C48228 * C1526) * C114 +
             (C113 * C1527 + C48228 * C1528) * C48042) *
                C48245 * C106) *
               C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C48245 * C104 +
            (C174 + C175) * C48245 * C105 + C187 * C106) *
               C2691 -
           (C396 * C106 + (C384 + C385) * C48245 * C105 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C48245 * C104) *
               C48087) *
              C48387 +
          (((C385 + C384) * C48245 * C104 + (C383 + C382) * C48245 * C105 +
            C727 * C106) *
               C48087 -
           (C188 * C106 + (C177 + C176) * C48245 * C105 +
            (C175 + C174) * C48245 * C104) *
               C2691) *
              C48380 +
          ((C187 * C104 + (C179 + C178) * C48245 * C105 + C189 * C106) * C2691 -
           ((C730 + C731) * C48245 * C106 + (C391 + C390) * C48245 * C105 +
            C396 * C104) *
               C48087) *
              C48367 +
          ((C727 * C104 + (C731 + C730) * C48245 * C105 +
            ((C113 * C717 + C48228 * C718) * C114 +
             (C113 * C719 + C48228 * C720) * C48042) *
                C48245 * C106) *
               C48087 -
           ((C182 + C183) * C48245 * C106 + (C181 + C180) * C48245 * C105 +
            C188 * C104) *
               C2691) *
              C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C510 +
             (C113 * C123 + C48228 * C136) * C48382 -
             (C113 * C513 + C48228 * C523) * C511 -
             (C113 * C524 + C48228 * C543) * C48371 +
             (C113 * C514 + C48228 * C525) * C512 +
             (C113 * C526 + C48228 * C544) * C48345) *
                C48245 * C104 +
            (C554 + C555 - C597 - C598 + C599 + C600) * C48245 * C105 +
            C613 * C106) *
               C2691 +
           (((C113 * C1013 + C48228 * C1018) * C511 -
             ((C113 * C319 + C48228 * C337) * C48382 +
              (C113 * C307 + C48228 * C320) * C510) +
             (C113 * C1019 + C48228 * C1028) * C48371 -
             (C113 * C1385 + C48228 * C1394) * C512 -
             (C113 * C1395 + C48228 * C1412) * C48345) *
                C48245 * C104 +
            (C2948 - (C2949 + C2950) + C2951 - C2952 - C2953) * C48245 * C105 +
            (C2954 - (C2955 + C2956) + C2957 - C2958 - C2959) * C48245 * C106) *
               C48087) *
              C2799 +
          (((C597 - (C555 + C554) + C598 - C599 - C600) * C48245 * C104 +
            (C601 - (C565 + C564) + C602 - C603 - C604) * C48245 * C105 +
            (C605 - (C576 + C577) + C606 - C607 - C608) * C48245 * C106) *
               C2691 +
           ((C2950 + C2949 - C2948 - C2951 + C2952 + C2953) * C48245 * C104 +
            (C2956 + C2955 - C2954 - C2957 + C2958 + C2959) * C48245 * C105 +
            (C378 * C510 + C379 * C48382 - C1057 * C511 - C1058 * C48371 +
             (C113 * C2317 + C48228 * C2318) * C512 +
             (C113 * C2319 + C48228 * C2320) * C48345) *
                C48245 * C106) *
               C48087) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C831 +
             (C113 * C123 + C48228 * C136) * C48311 -
             (C113 * C513 + C48228 * C523) * C832 -
             (C113 * C524 + C48228 * C543) * C48129) *
                C48245 * C104 +
            (C838 + C839 - C840 - C841) * C48245 * C105 + C866 * C106) *
               C2691 +
           (((C113 * C1013 + C48228 * C1018) * C832 -
             ((C113 * C319 + C48228 * C337) * C48311 +
              (C113 * C307 + C48228 * C320) * C831) +
             (C113 * C1019 + C48228 * C1028) * C48129) *
                C48245 * C104 +
            (C1059 - (C1036 + C1037) + C1060) * C48245 * C105 + C1067 * C106) *
               C48087) *
              C48003 +
          (((C840 - (C839 + C838) + C841) * C48245 * C104 +
            (C844 - (C843 + C842) + C845) * C48245 * C105 + C867 * C106) *
               C2691 +
           ((C1037 + C1036 - C1059 - C1060) * C48245 * C104 +
            (C1043 + C1042 - C1061 - C1062) * C48245 * C105 +
            (C1046 + C1047 - C1063 - C1064) * C48245 * C106) *
               C48087) *
              C48011 +
          ((C866 * C104 + (C848 + C847 - C846 - C849) * C48245 * C105 +
            (C850 + C851 - C862 - C863) * C48245 * C106) *
               C2691 +
           (C1067 * C104 + (C1063 - (C1047 + C1046) + C1064) * C48245 * C105 +
            ((C113 * C1017 + C48228 * C1026) * C832 -
             (C728 * C48311 + C729 * C831) +
             (C113 * C1027 + C48228 * C1032) * C48129) *
                C48245 * C106) *
               C48087) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C48245 * C104 +
            (C174 + C175) * C48245 * C105 + C187 * C106) *
               C2691 -
           (C396 * C106 + (C384 + C385) * C48245 * C105 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C48245 * C104) *
               C48087) *
              C48387 +
          (((C385 + C384) * C48245 * C104 + (C383 + C382) * C48245 * C105 +
            C727 * C106) *
               C48087 -
           (C188 * C106 + (C177 + C176) * C48245 * C105 +
            (C175 + C174) * C48245 * C104) *
               C2691) *
              C48380 +
          ((C187 * C104 + (C179 + C178) * C48245 * C105 + C189 * C106) * C2691 -
           ((C730 + C731) * C48245 * C106 + (C391 + C390) * C48245 * C105 +
            C396 * C104) *
               C48087) *
              C48367 +
          ((C727 * C104 + (C731 + C730) * C48245 * C105 +
            ((C113 * C717 + C48228 * C718) * C114 +
             (C113 * C719 + C48228 * C720) * C48042) *
                C48245 * C106) *
               C48087 -
           ((C182 + C183) * C48245 * C106 + (C181 + C180) * C48245 * C105 +
            C188 * C104) *
               C2691) *
              C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C48245 * C104 +
            (C174 + C175) * C48245 * C105 + C187 * C106) *
               C48388 -
           (C396 * C106 + (C384 + C385) * C48245 * C105 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C48245 * C104) *
               C48384 +
           (((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C48245 * C104 +
            (C386 + C387) * C48245 * C105 + C397 * C106) *
               C48374 -
           ((C1542 + C1543) * C48245 * C106 + (C1544 + C1545) * C48245 * C105 +
            ((C113 * C1261 + C48228 * C1271) * C48042 +
             (C113 * C1253 + C48228 * C1262) * C114) *
                C48245 * C104) *
               C48352) *
              C2799 +
          (((C385 + C384) * C48245 * C104 + (C383 + C382) * C48245 * C105 +
            C727 * C106) *
               C48384 -
           (C188 * C106 + (C177 + C176) * C48245 * C105 +
            (C175 + C174) * C48245 * C104) *
               C48388 -
           ((C392 + C393) * C48245 * C106 + (C389 + C388) * C48245 * C105 +
            (C387 + C386) * C48245 * C104) *
               C48374 +
           ((C1545 + C1544) * C48245 * C104 + (C1543 + C1542) * C48245 * C105 +
            ((C113 * C1525 + C48228 * C1526) * C114 +
             (C113 * C1527 + C48228 * C1528) * C48042) *
                C48245 * C106) *
               C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3467 +
             (C113 * C123 + C48228 * C136) * C3465 -
             (C113 * C513 + C48228 * C523) * C3468 -
             (C113 * C524 + C48228 * C543) * C48129) *
                C48245 * C104 +
            (C3470 + C3471 - C3472 - C3473) * C48245 * C105 + C3492 * C106) *
               C48083 +
           (((C113 * C1013 + C48228 * C1018) * C3468 -
             ((C113 * C319 + C48228 * C337) * C3465 +
              (C113 * C307 + C48228 * C320) * C3467) +
             (C113 * C1019 + C48228 * C1028) * C48129) *
                C48245 * C104 +
            (C3640 - (C3641 + C3642) + C3643) * C48245 * C105 + C3931 * C106) *
               C48090 +
           (((C113 * C308 + C48228 * C321) * C3467 +
             (C113 * C322 + C48228 * C338) * C3465 -
             (C113 * C1388 + C48228 * C1400) * C3468 -
             (C113 * C1401 + C48228 * C1415) * C48129) *
                C48245 * C104 +
            (C3648 + C3649 - C3650 - C3651) * C48245 * C105 +
            (C3652 + C3653 - C3654 - C3655) * C48245 * C106) *
               C3071) *
              C48296 +
          (((C3472 - (C3471 + C3470) + C3473) * C48245 * C104 +
            (C3476 - (C3475 + C3474) + C3477) * C48245 * C105 + C3493 * C106) *
               C48083 +
           ((C3642 + C3641 - C3640 - C3643) * C48245 * C104 +
            (C3646 + C3645 - C3644 - C3647) * C48245 * C105 +
            (C3925 + C3926 - C3927 - C3928) * C48245 * C106) *
               C48090 +
           ((C3650 - (C3649 + C3648) + C3651) * C48245 * C104 +
            (C3654 - (C3653 + C3652) + C3655) * C48245 * C105 +
            ((C113 * C1691 + C48228 * C1692) * C3468 -
             (C380 * C3465 + C381 * C3467) +
             (C113 * C1693 + C48228 * C1694) * C48129) *
                C48245 * C106) *
               C3071) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C47030 +
            (C113 * C123 + C48228 * C136) * C48125 -
            (C113 * C513 + C48228 * C523) * C47022 -
            (C113 * C524 + C48228 * C543) * C48132 +
            (C113 * C514 + C48228 * C525) * C47036 +
            (C113 * C526 + C48228 * C544) * C4043) *
               C48245 * C104 +
           (C4048 + C4049 - C4050 - C4051 + C4052 + C4053) * C48245 * C105 +
           C4071 * C106) *
              C48083 +
          (((C113 * C1013 + C48228 * C1018) * C47022 -
            ((C113 * C319 + C48228 * C337) * C48125 +
             (C113 * C307 + C48228 * C320) * C47030) +
            (C113 * C1019 + C48228 * C1028) * C48132 -
            (C113 * C1385 + C48228 * C1394) * C47036 -
            (C113 * C1395 + C48228 * C1412) * C4043) *
               C48245 * C104 +
           (C4218 - (C4219 + C4220) + C4221 - C4222 - C4223) * C48245 * C105 +
           (C4224 - (C4225 + C4226) + C4227 - C4228 - C4229) * C48245 * C106) *
              C48090 +
          (((C113 * C308 + C48228 * C321) * C47030 +
            (C113 * C322 + C48228 * C338) * C48125 -
            (C113 * C1388 + C48228 * C1400) * C47022 -
            (C113 * C1401 + C48228 * C1415) * C48132 +
            (C113 * C1389 + C48228 * C1402) * C47036 +
            (C113 * C1403 + C48228 * C1416) * C4043) *
               C48245 * C104 +
           (C374 * C47030 + C375 * C48125 - C1708 * C47022 - C1709 * C48132 +
            (C113 * C1391 + C48228 * C1406) * C47036 +
            (C113 * C1407 + C48228 * C1418) * C4043) *
               C48245 * C105 +
           (C376 * C47030 + C377 * C48125 - C1710 * C47022 - C1711 * C48132 +
            (C113 * C1393 + C48228 * C1410) * C47036 +
            (C113 * C1411 + C48228 * C1420) * C4043) *
               C48245 * C106) *
              C3071) *
         C47998) /
        (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C3467 +
            (C113 * C123 + C48228 * C136) * C3465 -
            (C113 * C513 + C48228 * C523) * C3468 -
            (C113 * C524 + C48228 * C543) * C48129) *
               C48245 * C104 +
           (C3470 + C3471 - C3472 - C3473) * C48245 * C105 + C3492 * C106) *
              C48388 +
          (((C113 * C1013 + C48228 * C1018) * C3468 -
            ((C113 * C319 + C48228 * C337) * C3465 +
             (C113 * C307 + C48228 * C320) * C3467) +
            (C113 * C1019 + C48228 * C1028) * C48129) *
               C48245 * C104 +
           (C3640 - (C3641 + C3642) + C3643) * C48245 * C105 + C3931 * C106) *
              C48384 +
          (((C113 * C308 + C48228 * C321) * C3467 +
            (C113 * C322 + C48228 * C338) * C3465 -
            (C113 * C1388 + C48228 * C1400) * C3468 -
            (C113 * C1401 + C48228 * C1415) * C48129) *
               C48245 * C104 +
           (C3648 + C3649 - C3650 - C3651) * C48245 * C105 +
           (C3652 + C3653 - C3654 - C3655) * C48245 * C106) *
              C48374 +
          (((C113 * C1813 + C48228 * C1816) * C3468 -
            ((C113 * C1261 + C48228 * C1271) * C3465 +
             (C113 * C1253 + C48228 * C1262) * C3467) +
            (C113 * C1817 + C48228 * C1822) * C48129) *
               C48245 * C104 +
           ((C113 * C1814 + C48228 * C1818) * C3468 -
            (C1540 * C3465 + C1541 * C3467) +
            (C113 * C1819 + C48228 * C1823) * C48129) *
               C48245 * C105 +
           ((C113 * C1815 + C48228 * C1820) * C3468 -
            (C1538 * C3465 + C1539 * C3467) +
            (C113 * C1821 + C48228 * C1824) * C48129) *
               C48245 * C106) *
              C48352) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3467 +
             (C113 * C123 + C48228 * C136) * C3465 -
             (C113 * C513 + C48228 * C523) * C3468 -
             (C113 * C524 + C48228 * C543) * C48129) *
                C48245 * C104 +
            (C3470 + C3471 - C3472 - C3473) * C48245 * C105 + C3492 * C106) *
               C2691 +
           (((C113 * C1013 + C48228 * C1018) * C3468 -
             ((C113 * C319 + C48228 * C337) * C3465 +
              (C113 * C307 + C48228 * C320) * C3467) +
             (C113 * C1019 + C48228 * C1028) * C48129) *
                C48245 * C104 +
            (C3640 - (C3641 + C3642) + C3643) * C48245 * C105 + C3931 * C106) *
               C48087) *
              C48378 +
          (((C3472 - (C3471 + C3470) + C3473) * C48245 * C104 +
            (C3476 - (C3475 + C3474) + C3477) * C48245 * C105 + C3493 * C106) *
               C2691 +
           ((C3642 + C3641 - C3640 - C3643) * C48245 * C104 +
            (C3646 + C3645 - C3644 - C3647) * C48245 * C105 +
            (C3925 + C3926 - C3927 - C3928) * C48245 * C106) *
               C48087) *
              C48365 +
          ((C3492 * C104 + (C3480 + C3479 - C3478 - C3481) * C48245 * C105 +
            (C3482 + C3483 - C3484 - C3485) * C48245 * C106) *
               C2691 +
           (C3931 * C104 + (C3927 - (C3926 + C3925) + C3928) * C48245 * C105 +
            ((C113 * C1017 + C48228 * C1026) * C3468 -
             (C728 * C3465 + C729 * C3467) +
             (C113 * C1027 + C48228 * C1032) * C48129) *
                C48245 * C106) *
               C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C3757 +
            (C113 * C123 + C48228 * C136) * C48389 -
            (C113 * C513 + C48228 * C523) * C3758 -
            (C113 * C524 + C48228 * C543) * C48386 +
            (C113 * C514 + C48228 * C525) * C3759 +
            (C113 * C526 + C48228 * C544) * C48377 -
            (C113 * C2147 + C48228 * C2153) * C3760 -
            (C113 * C2154 + C48228 * C2165) * C48358) *
               C48245 * C104 +
           (C3762 + C3763 - C3764 - C3765 + C3766 + C3767 - C3768 - C3769) *
               C48245 * C105 +
           (C3770 + C3771 - C3772 - C3773 + C3774 + C3775 - C3776 - C3777) *
               C48245 * C106) *
              C2691 +
          (((C113 * C1013 + C48228 * C1018) * C3758 -
            ((C113 * C319 + C48228 * C337) * C48389 +
             (C113 * C307 + C48228 * C320) * C3757) +
            (C113 * C1019 + C48228 * C1028) * C48386 -
            (C113 * C1385 + C48228 * C1394) * C3759 -
            (C113 * C1395 + C48228 * C1412) * C48377 +
            (C113 * C2581 + C48228 * C2584) * C3760 +
            (C113 * C2585 + C48228 * C2590) * C48358) *
               C48245 * C104 +
           (C1052 * C3758 - (C372 * C48389 + C373 * C3757) + C1053 * C48386 -
            C2338 * C3759 - C2339 * C48377 +
            (C113 * C2582 + C48228 * C2586) * C3760 +
            (C113 * C2587 + C48228 * C2591) * C48358) *
               C48245 * C105 +
           (C1054 * C3758 - (C370 * C48389 + C371 * C3757) + C1056 * C48386 -
            C2340 * C3759 - C2341 * C48377 +
            (C113 * C2583 + C48228 * C2588) * C3760 +
            (C113 * C2589 + C48228 * C2592) * C48358) *
               C48245 * C106) *
              C48087) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C47030 +
             (C113 * C123 + C48228 * C136) * C48125 -
             (C113 * C513 + C48228 * C523) * C47022 -
             (C113 * C524 + C48228 * C543) * C48132 +
             (C113 * C514 + C48228 * C525) * C47036 +
             (C113 * C526 + C48228 * C544) * C4043) *
                C48245 * C104 +
            (C4048 + C4049 - C4050 - C4051 + C4052 + C4053) * C48245 * C105 +
            C4071 * C106) *
               C2691 +
           (((C113 * C1013 + C48228 * C1018) * C47022 -
             ((C113 * C319 + C48228 * C337) * C48125 +
              (C113 * C307 + C48228 * C320) * C47030) +
             (C113 * C1019 + C48228 * C1028) * C48132 -
             (C113 * C1385 + C48228 * C1394) * C47036 -
             (C113 * C1395 + C48228 * C1412) * C4043) *
                C48245 * C104 +
            (C4218 - (C4219 + C4220) + C4221 - C4222 - C4223) * C48245 * C105 +
            (C4224 - (C4225 + C4226) + C4227 - C4228 - C4229) * C48245 * C106) *
               C48087) *
              C48296 +
          (((C4050 - (C4049 + C4048) + C4051 - C4052 - C4053) * C48245 * C104 +
            (C4056 - (C4055 + C4054) + C4057 - C4058 - C4059) * C48245 * C105 +
            (C4060 - (C4061 + C4062) + C4063 - C4064 - C4065) * C48245 * C106) *
               C2691 +
           ((C4220 + C4219 - C4218 - C4221 + C4222 + C4223) * C48245 * C104 +
            (C4226 + C4225 - C4224 - C4227 + C4228 + C4229) * C48245 * C105 +
            (C378 * C47030 + C379 * C48125 - C1057 * C47022 - C1058 * C48132 +
             (C113 * C2317 + C48228 * C2318) * C47036 +
             (C113 * C2319 + C48228 * C2320) * C4043) *
                C48245 * C106) *
               C48087) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3467 +
             (C113 * C123 + C48228 * C136) * C3465 -
             (C113 * C513 + C48228 * C523) * C3468 -
             (C113 * C524 + C48228 * C543) * C48129) *
                C48245 * C104 +
            (C3470 + C3471 - C3472 - C3473) * C48245 * C105 + C3492 * C106) *
               C2691 +
           (((C113 * C1013 + C48228 * C1018) * C3468 -
             ((C113 * C319 + C48228 * C337) * C3465 +
              (C113 * C307 + C48228 * C320) * C3467) +
             (C113 * C1019 + C48228 * C1028) * C48129) *
                C48245 * C104 +
            (C3640 - (C3641 + C3642) + C3643) * C48245 * C105 + C3931 * C106) *
               C48087) *
              C48378 +
          (((C3472 - (C3471 + C3470) + C3473) * C48245 * C104 +
            (C3476 - (C3475 + C3474) + C3477) * C48245 * C105 + C3493 * C106) *
               C2691 +
           ((C3642 + C3641 - C3640 - C3643) * C48245 * C104 +
            (C3646 + C3645 - C3644 - C3647) * C48245 * C105 +
            (C3925 + C3926 - C3927 - C3928) * C48245 * C106) *
               C48087) *
              C48365 +
          ((C3492 * C104 + (C3480 + C3479 - C3478 - C3481) * C48245 * C105 +
            (C3482 + C3483 - C3484 - C3485) * C48245 * C106) *
               C2691 +
           (C3931 * C104 + (C3927 - (C3926 + C3925) + C3928) * C48245 * C105 +
            ((C113 * C1017 + C48228 * C1026) * C3468 -
             (C728 * C3465 + C729 * C3467) +
             (C113 * C1027 + C48228 * C1032) * C48129) *
                C48245 * C106) *
               C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C3467 +
            (C113 * C123 + C48228 * C136) * C3465 -
            (C113 * C513 + C48228 * C523) * C3468 -
            (C113 * C524 + C48228 * C543) * C48129) *
               C48245 * C104 +
           (C3470 + C3471 - C3472 - C3473) * C48245 * C105 + C3492 * C106) *
              C48388 +
          (((C113 * C1013 + C48228 * C1018) * C3468 -
            ((C113 * C319 + C48228 * C337) * C3465 +
             (C113 * C307 + C48228 * C320) * C3467) +
            (C113 * C1019 + C48228 * C1028) * C48129) *
               C48245 * C104 +
           (C3640 - (C3641 + C3642) + C3643) * C48245 * C105 + C3931 * C106) *
              C48384 +
          (((C113 * C308 + C48228 * C321) * C3467 +
            (C113 * C322 + C48228 * C338) * C3465 -
            (C113 * C1388 + C48228 * C1400) * C3468 -
            (C113 * C1401 + C48228 * C1415) * C48129) *
               C48245 * C104 +
           (C3648 + C3649 - C3650 - C3651) * C48245 * C105 +
           (C3652 + C3653 - C3654 - C3655) * C48245 * C106) *
              C48374 +
          (((C113 * C1813 + C48228 * C1816) * C3468 -
            ((C113 * C1261 + C48228 * C1271) * C3465 +
             (C113 * C1253 + C48228 * C1262) * C3467) +
            (C113 * C1817 + C48228 * C1822) * C48129) *
               C48245 * C104 +
           ((C113 * C1814 + C48228 * C1818) * C3468 -
            (C1540 * C3465 + C1541 * C3467) +
            (C113 * C1819 + C48228 * C1823) * C48129) *
               C48245 * C105 +
           ((C113 * C1815 + C48228 * C1820) * C3468 -
            (C1538 * C3465 + C1539 * C3467) +
            (C113 * C1821 + C48228 * C1824) * C48129) *
               C48245 * C106) *
              C48352) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C48245 * C104 +
            (C174 + C175) * C48245 * C105 + C187 * C106) *
               C1519 -
           (C396 * C106 + (C384 + C385) * C48245 * C105 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C48245 * C104) *
               C1520 +
           (((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C48245 * C104 +
            (C386 + C387) * C48245 * C105 + C397 * C106) *
               C1521 -
           ((C1542 + C1543) * C48245 * C106 + (C1544 + C1545) * C48245 * C105 +
            ((C113 * C1261 + C48228 * C1271) * C48042 +
             (C113 * C1253 + C48228 * C1262) * C114) *
                C48245 * C104) *
               C48352) *
              C48296 +
          (((C385 + C384) * C48245 * C104 + (C383 + C382) * C48245 * C105 +
            C727 * C106) *
               C1520 -
           (C188 * C106 + (C177 + C176) * C48245 * C105 +
            (C175 + C174) * C48245 * C104) *
               C1519 -
           ((C392 + C393) * C48245 * C106 + (C389 + C388) * C48245 * C105 +
            (C387 + C386) * C48245 * C104) *
               C1521 +
           ((C1545 + C1544) * C48245 * C104 + (C1543 + C1542) * C48245 * C105 +
            ((C113 * C1525 + C48228 * C1526) * C114 +
             (C113 * C1527 + C48228 * C1528) * C48042) *
                C48245 * C106) *
               C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C48245 * C104 +
            (C174 + C175) * C48245 * C105 + C187 * C106) *
               C48310 -
           (C396 * C106 + (C384 + C385) * C48245 * C105 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C48245 * C104) *
               C48087) *
              C713 +
          (((C385 + C384) * C48245 * C104 + (C383 + C382) * C48245 * C105 +
            C727 * C106) *
               C48087 -
           (C188 * C106 + (C177 + C176) * C48245 * C105 +
            (C175 + C174) * C48245 * C104) *
               C48310) *
              C714 +
          ((C187 * C104 + (C179 + C178) * C48245 * C105 + C189 * C106) *
               C48310 -
           ((C730 + C731) * C48245 * C106 + (C391 + C390) * C48245 * C105 +
            C396 * C104) *
               C48087) *
              C715 +
          ((C727 * C104 + (C731 + C730) * C48245 * C105 +
            ((C113 * C717 + C48228 * C718) * C114 +
             (C113 * C719 + C48228 * C720) * C48042) *
                C48245 * C106) *
               C48087 -
           ((C182 + C183) * C48245 * C106 + (C181 + C180) * C48245 * C105 +
            C188 * C104) *
               C48310) *
              C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C1938 +
             (C113 * C123 + C48228 * C136) * C1935 -
             (C113 * C513 + C48228 * C523) * C1939 -
             (C113 * C524 + C48228 * C543) * C1936 +
             (C113 * C514 + C48228 * C525) * C1940 +
             (C113 * C526 + C48228 * C544) * C48345) *
                C48245 * C104 +
            (C1942 + C1943 - C1944 - C1945 + C1946 + C1947) * C48245 * C105 +
            C1965 * C106) *
               C48310 +
           (((C113 * C1013 + C48228 * C1018) * C1939 -
             ((C113 * C319 + C48228 * C337) * C1935 +
              (C113 * C307 + C48228 * C320) * C1938) +
             (C113 * C1019 + C48228 * C1028) * C1936 -
             (C113 * C1385 + C48228 * C1394) * C1940 -
             (C113 * C1395 + C48228 * C1412) * C48345) *
                C48245 * C104 +
            (C2322 - (C2323 + C2324) + C2325 - C2342 - C2343) * C48245 * C105 +
            (C2330 - (C2331 + C2332) + C2333 - C2344 - C2345) * C48245 * C106) *
               C48087) *
              C48296 +
          (((C1944 - (C1943 + C1942) + C1945 - C1946 - C1947) * C48245 * C104 +
            (C1950 - (C1949 + C1948) + C1951 - C1952 - C1953) * C48245 * C105 +
            (C1954 - (C1955 + C1956) + C1957 - C1958 - C1959) * C48245 * C106) *
               C48310 +
           ((C2324 + C2323 - C2322 - C2325 + C2342 + C2343) * C48245 * C104 +
            (C2332 + C2331 - C2330 - C2333 + C2344 + C2345) * C48245 * C105 +
            (C378 * C1938 + C379 * C1935 - C1057 * C1939 - C1058 * C1936 +
             (C113 * C2317 + C48228 * C2318) * C1940 +
             (C113 * C2319 + C48228 * C2320) * C48345) *
                C48245 * C106) *
               C48087) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C831 +
            (C113 * C123 + C48228 * C136) * C48311 -
            (C113 * C513 + C48228 * C523) * C832 -
            (C113 * C524 + C48228 * C543) * C48129) *
               C48245 * C104 +
           (C838 + C839 - C840 - C841) * C48245 * C105 + C866 * C106) *
              C1519 +
          (((C113 * C1013 + C48228 * C1018) * C832 -
            ((C113 * C319 + C48228 * C337) * C48311 +
             (C113 * C307 + C48228 * C320) * C831) +
            (C113 * C1019 + C48228 * C1028) * C48129) *
               C48245 * C104 +
           (C1059 - (C1036 + C1037) + C1060) * C48245 * C105 + C1067 * C106) *
              C1520 +
          (((C113 * C308 + C48228 * C321) * C831 +
            (C113 * C322 + C48228 * C338) * C48311 -
            (C113 * C1388 + C48228 * C1400) * C832 -
            (C113 * C1401 + C48228 * C1415) * C48129) *
               C48245 * C104 +
           (C1696 + C1697 - C1712 - C1713) * C48245 * C105 +
           (C1702 + C1703 - C1714 - C1715) * C48245 * C106) *
              C1521 +
          (((C113 * C1813 + C48228 * C1816) * C832 -
            ((C113 * C1261 + C48228 * C1271) * C48311 +
             (C113 * C1253 + C48228 * C1262) * C831) +
            (C113 * C1817 + C48228 * C1822) * C48129) *
               C48245 * C104 +
           ((C113 * C1814 + C48228 * C1818) * C832 -
            (C1540 * C48311 + C1541 * C831) +
            (C113 * C1819 + C48228 * C1823) * C48129) *
               C48245 * C105 +
           ((C113 * C1815 + C48228 * C1820) * C832 -
            (C1538 * C48311 + C1539 * C831) +
            (C113 * C1821 + C48228 * C1824) * C48129) *
               C48245 * C106) *
              C48352) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C831 +
             (C113 * C123 + C48228 * C136) * C48311 -
             (C113 * C513 + C48228 * C523) * C832 -
             (C113 * C524 + C48228 * C543) * C48129) *
                C48245 * C104 +
            (C838 + C839 - C840 - C841) * C48245 * C105 + C866 * C106) *
               C48310 +
           (((C113 * C1013 + C48228 * C1018) * C832 -
             ((C113 * C319 + C48228 * C337) * C48311 +
              (C113 * C307 + C48228 * C320) * C831) +
             (C113 * C1019 + C48228 * C1028) * C48129) *
                C48245 * C104 +
            (C1059 - (C1036 + C1037) + C1060) * C48245 * C105 + C1067 * C106) *
               C48087) *
              C302 +
          (((C840 - (C839 + C838) + C841) * C48245 * C104 +
            (C844 - (C843 + C842) + C845) * C48245 * C105 + C867 * C106) *
               C48310 +
           ((C1037 + C1036 - C1059 - C1060) * C48245 * C104 +
            (C1043 + C1042 - C1061 - C1062) * C48245 * C105 +
            (C1046 + C1047 - C1063 - C1064) * C48245 * C106) *
               C48087) *
              C303 +
          ((C866 * C104 + (C848 + C847 - C846 - C849) * C48245 * C105 +
            (C850 + C851 - C862 - C863) * C48245 * C106) *
               C48310 +
           (C1067 * C104 + (C1063 - (C1047 + C1046) + C1064) * C48245 * C105 +
            ((C113 * C1017 + C48228 * C1026) * C832 -
             (C728 * C48311 + C729 * C831) +
             (C113 * C1027 + C48228 * C1032) * C48129) *
                C48245 * C106) *
               C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C2447 +
            (C113 * C123 + C48228 * C136) * C2443 -
            (C113 * C513 + C48228 * C523) * C2448 -
            (C113 * C524 + C48228 * C543) * C2444 +
            (C113 * C514 + C48228 * C525) * C2449 +
            (C113 * C526 + C48228 * C544) * C2445 -
            (C113 * C2147 + C48228 * C2153) * C2450 -
            (C113 * C2154 + C48228 * C2165) * C48358) *
               C48245 * C104 +
           (C2456 + C2457 - C2458 - C2459 + C2460 + C2461 - C2480 - C2481) *
               C48245 * C105 +
           (C2466 + C2467 - C2468 - C2469 + C2470 + C2471 - C2482 - C2483) *
               C48245 * C106) *
              C48310 +
          (((C113 * C1013 + C48228 * C1018) * C2448 -
            ((C113 * C319 + C48228 * C337) * C2443 +
             (C113 * C307 + C48228 * C320) * C2447) +
            (C113 * C1019 + C48228 * C1028) * C2444 -
            (C113 * C1385 + C48228 * C1394) * C2449 -
            (C113 * C1395 + C48228 * C1412) * C2445 +
            (C113 * C2581 + C48228 * C2584) * C2450 +
            (C113 * C2585 + C48228 * C2590) * C48358) *
               C48245 * C104 +
           (C1052 * C2448 - (C372 * C2443 + C373 * C2447) + C1053 * C2444 -
            C2338 * C2449 - C2339 * C2445 +
            (C113 * C2582 + C48228 * C2586) * C2450 +
            (C113 * C2587 + C48228 * C2591) * C48358) *
               C48245 * C105 +
           (C1054 * C2448 - (C370 * C2443 + C371 * C2447) + C1056 * C2444 -
            C2340 * C2449 - C2341 * C2445 +
            (C113 * C2583 + C48228 * C2588) * C2450 +
            (C113 * C2589 + C48228 * C2592) * C48358) *
               C48245 * C106) *
              C48087) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C48228 * C122) * C114 +
                (C113 * C123 + C48228 * C136) * C48042) *
                   C48245 * C104 +
               (C174 + C175) * C48245 * C105 + C187 * C106) *
                  C48025 * C108 -
              (C188 * C106 + (C177 + C176) * C48245 * C105 +
               (C175 + C174) * C48245 * C104) *
                  C48025 * C109 +
              (C187 * C104 + (C179 + C178) * C48245 * C105 + C189 * C106) *
                  C48025 * C110 -
              ((C182 + C183) * C48245 * C106 + (C181 + C180) * C48245 * C105 +
               C188 * C104) *
                  C48025 * C111 +
              (C189 * C104 + (C183 + C182) * C48245 * C105 +
               ((C113 * C121 + C48228 * C134) * C114 +
                (C113 * C135 + C48228 * C142) * C48042) *
                   C48245 * C106) *
                  C48025 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48228 * C122) * C114 +
                 (C113 * C123 + C48228 * C136) * C48042) *
                    C48245 * C104 +
                (C174 + C175) * C48245 * C105 + C187 * C106) *
                   C48381 -
               (C396 * C106 + (C384 + C385) * C48245 * C105 +
                ((C113 * C319 + C48228 * C337) * C48042 +
                 (C113 * C307 + C48228 * C320) * C114) *
                    C48245 * C104) *
                   C48369 +
               (((C113 * C308 + C48228 * C321) * C114 +
                 (C113 * C322 + C48228 * C338) * C48042) *
                    C48245 * C104 +
                (C386 + C387) * C48245 * C105 + C397 * C106) *
                   C48342) *
                  C302 +
              (((C385 + C384) * C48245 * C104 + (C383 + C382) * C48245 * C105 +
                (C390 + C391) * C48245 * C106) *
                   C48369 -
               (C188 * C106 + (C177 + C176) * C48245 * C105 +
                (C175 + C174) * C48245 * C104) *
                   C48381 -
               ((C392 + C393) * C48245 * C106 + (C389 + C388) * C48245 * C105 +
                (C387 + C386) * C48245 * C104) *
                   C48342) *
                  C303 +
              ((C187 * C104 + (C179 + C178) * C48245 * C105 + C189 * C106) *
                   C48381 -
               (((C113 * C331 + C48228 * C343) * C48042 +
                 (C113 * C313 + C48228 * C332) * C114) *
                    C48245 * C106 +
                (C391 + C390) * C48245 * C105 + C396 * C104) *
                   C48369 +
               (C397 * C104 + (C393 + C392) * C48245 * C105 +
                ((C113 * C314 + C48228 * C333) * C114 +
                 (C113 * C334 + C48228 * C344) * C48042) *
                    C48245 * C106) *
                   C48342) *
                  C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C510 +
            (C113 * C123 + C48228 * C136) * C48382 -
            (C113 * C513 + C48228 * C523) * C511 -
            (C113 * C524 + C48228 * C543) * C48371 +
            (C113 * C514 + C48228 * C525) * C512 +
            (C113 * C526 + C48228 * C544) * C48345) *
               C48245 * C104 +
           (C554 + C555 - C597 - C598 + C599 + C600) * C48245 * C105 +
           C613 * C106) *
              C48025 * C302 +
          ((C597 - (C555 + C554) + C598 - C599 - C600) * C48245 * C104 +
           (C601 - (C565 + C564) + C602 - C603 - C604) * C48245 * C105 +
           (C605 - (C576 + C577) + C606 - C607 - C608) * C48245 * C106) *
              C48025 * C303 +
          (C613 * C104 +
           (C577 + C576 - C605 - C606 + C607 + C608) * C48245 * C105 +
           (C170 * C510 + C171 * C48382 - (C113 * C521 + C48228 * C539) * C511 -
            (C113 * C540 + C48228 * C551) * C48371 +
            (C113 * C522 + C48228 * C541) * C512 +
            (C113 * C542 + C48228 * C552) * C48345) *
               C48245 * C106) *
              C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C48245 * C104 +
            (C174 + C175) * C48245 * C105 + C187 * C106) *
               C1177 -
           (C396 * C106 + (C384 + C385) * C48245 * C105 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C48245 * C104) *
               C1178 +
           (((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C48245 * C104 +
            (C386 + C387) * C48245 * C105 + C397 * C106) *
               C48342) *
              C48378 +
          (((C385 + C384) * C48245 * C104 + (C383 + C382) * C48245 * C105 +
            C727 * C106) *
               C1178 -
           (C188 * C106 + (C177 + C176) * C48245 * C105 +
            (C175 + C174) * C48245 * C104) *
               C1177 -
           ((C392 + C393) * C48245 * C106 + (C389 + C388) * C48245 * C105 +
            (C387 + C386) * C48245 * C104) *
               C48342) *
              C48365 +
          ((C187 * C104 + (C179 + C178) * C48245 * C105 + C189 * C106) * C1177 -
           ((C730 + C731) * C48245 * C106 + (C391 + C390) * C48245 * C105 +
            C396 * C104) *
               C1178 +
           (C397 * C104 + (C393 + C392) * C48245 * C105 +
            ((C113 * C314 + C48228 * C333) * C114 +
             (C113 * C334 + C48228 * C344) * C48042) *
                C48245 * C106) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C114 +
            (C113 * C123 + C48228 * C136) * C48042) *
               C48245 * C104 +
           (C174 + C175) * C48245 * C105 + C187 * C106) *
              C1245 -
          (C396 * C106 + (C384 + C385) * C48245 * C105 +
           ((C113 * C319 + C48228 * C337) * C48042 +
            (C113 * C307 + C48228 * C320) * C114) *
               C48245 * C104) *
              C1246 +
          (((C113 * C308 + C48228 * C321) * C114 +
            (C113 * C322 + C48228 * C338) * C48042) *
               C48245 * C104 +
           (C386 + C387) * C48245 * C105 + C397 * C106) *
              C1247 -
          (((C113 * C1257 + C48228 * C1269) * C48042 +
            (C113 * C1251 + C48228 * C1258) * C114) *
               C48245 * C106 +
           ((C113 * C1259 + C48228 * C1270) * C48042 +
            (C113 * C1252 + C48228 * C1260) * C114) *
               C48245 * C105 +
           ((C113 * C1261 + C48228 * C1271) * C48042 +
            (C113 * C1253 + C48228 * C1262) * C114) *
               C48245 * C104) *
              C1248 +
          (((C113 * C1254 + C48228 * C1263) * C114 +
            (C113 * C1264 + C48228 * C1272) * C48042) *
               C48245 * C104 +
           ((C113 * C1255 + C48228 * C1265) * C114 +
            (C113 * C1266 + C48228 * C1273) * C48042) *
               C48245 * C105 +
           ((C113 * C1256 + C48228 * C1267) * C114 +
            (C113 * C1268 + C48228 * C1274) * C48042) *
               C48245 * C106) *
              C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C510 +
            (C113 * C123 + C48228 * C136) * C48382 -
            (C113 * C513 + C48228 * C523) * C511 -
            (C113 * C524 + C48228 * C543) * C48371 +
            (C113 * C514 + C48228 * C525) * C512 +
            (C113 * C526 + C48228 * C544) * C48345) *
               C48245 * C104 +
           (C554 + C555 - C597 - C598 + C599 + C600) * C48245 * C105 +
           C613 * C106) *
              C1177 +
          (((C113 * C1013 + C48228 * C1018) * C511 -
            ((C113 * C319 + C48228 * C337) * C48382 +
             (C113 * C307 + C48228 * C320) * C510) +
            (C113 * C1019 + C48228 * C1028) * C48371 -
            (C113 * C1385 + C48228 * C1394) * C512 -
            (C113 * C1395 + C48228 * C1412) * C48345) *
               C48245 * C104 +
           (C1052 * C511 - (C372 * C48382 + C373 * C510) + C1053 * C48371 -
            (C113 * C1386 + C48228 * C1396) * C512 -
            (C113 * C1397 + C48228 * C1413) * C48345) *
               C48245 * C105 +
           (C1054 * C511 - (C370 * C48382 + C371 * C510) + C1056 * C48371 -
            (C113 * C1387 + C48228 * C1398) * C512 -
            (C113 * C1399 + C48228 * C1414) * C48345) *
               C48245 * C106) *
              C1178 +
          (((C113 * C308 + C48228 * C321) * C510 +
            (C113 * C322 + C48228 * C338) * C48382 -
            (C113 * C1388 + C48228 * C1400) * C511 -
            (C113 * C1401 + C48228 * C1415) * C48371 +
            (C113 * C1389 + C48228 * C1402) * C512 +
            (C113 * C1403 + C48228 * C1416) * C48345) *
               C48245 * C104 +
           (C374 * C510 + C375 * C48382 -
            (C113 * C1390 + C48228 * C1404) * C511 -
            (C113 * C1405 + C48228 * C1417) * C48371 +
            (C113 * C1391 + C48228 * C1406) * C512 +
            (C113 * C1407 + C48228 * C1418) * C48345) *
               C48245 * C105 +
           (C376 * C510 + C377 * C48382 -
            (C113 * C1392 + C48228 * C1408) * C511 -
            (C113 * C1409 + C48228 * C1419) * C48371 +
            (C113 * C1393 + C48228 * C1410) * C512 +
            (C113 * C1411 + C48228 * C1420) * C48345) *
               C48245 * C106) *
              C48342) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C1938 +
            (C113 * C123 + C48228 * C136) * C1935 -
            (C113 * C513 + C48228 * C523) * C1939 -
            (C113 * C524 + C48228 * C543) * C1936 +
            (C113 * C514 + C48228 * C525) * C1940 +
            (C113 * C526 + C48228 * C544) * C48345) *
               C48245 * C104 +
           (C1942 + C1943 - C1944 - C1945 + C1946 + C1947) * C48245 * C105 +
           C1965 * C106) *
              C48025 * C48378 +
          ((C1944 - (C1943 + C1942) + C1945 - C1946 - C1947) * C48245 * C104 +
           (C1950 - (C1949 + C1948) + C1951 - C1952 - C1953) * C48245 * C105 +
           (C1954 - (C1955 + C1956) + C1957 - C1958 - C1959) * C48245 * C106) *
              C48025 * C48365 +
          (C1965 * C104 +
           (C1956 + C1955 - C1954 - C1957 + C1958 + C1959) * C48245 * C105 +
           (C170 * C1938 + C171 * C1935 - C858 * C1939 - C859 * C1936 +
            (C113 * C522 + C48228 * C541) * C1940 +
            (C113 * C542 + C48228 * C552) * C48345) *
               C48245 * C106) *
              C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C1938 +
            (C113 * C123 + C48228 * C136) * C1935 -
            (C113 * C513 + C48228 * C523) * C1939 -
            (C113 * C524 + C48228 * C543) * C1936 +
            (C113 * C514 + C48228 * C525) * C1940 +
            (C113 * C526 + C48228 * C544) * C48345) *
               C48245 * C104 +
           (C1942 + C1943 - C1944 - C1945 + C1946 + C1947) * C48245 * C105 +
           C1965 * C106) *
              C48381 +
          (((C113 * C1013 + C48228 * C1018) * C1939 -
            ((C113 * C319 + C48228 * C337) * C1935 +
             (C113 * C307 + C48228 * C320) * C1938) +
            (C113 * C1019 + C48228 * C1028) * C1936 -
            (C113 * C1385 + C48228 * C1394) * C1940 -
            (C113 * C1395 + C48228 * C1412) * C48345) *
               C48245 * C104 +
           (C1052 * C1939 - (C372 * C1935 + C373 * C1938) + C1053 * C1936 -
            (C113 * C1386 + C48228 * C1396) * C1940 -
            (C113 * C1397 + C48228 * C1413) * C48345) *
               C48245 * C105 +
           (C1054 * C1939 - (C370 * C1935 + C371 * C1938) + C1056 * C1936 -
            (C113 * C1387 + C48228 * C1398) * C1940 -
            (C113 * C1399 + C48228 * C1414) * C48345) *
               C48245 * C106) *
              C48369 +
          (((C113 * C308 + C48228 * C321) * C1938 +
            (C113 * C322 + C48228 * C338) * C1935 -
            (C113 * C1388 + C48228 * C1400) * C1939 -
            (C113 * C1401 + C48228 * C1415) * C1936 +
            (C113 * C1389 + C48228 * C1402) * C1940 +
            (C113 * C1403 + C48228 * C1416) * C48345) *
               C48245 * C104 +
           (C374 * C1938 + C375 * C1935 - C1708 * C1939 - C1709 * C1936 +
            (C113 * C1391 + C48228 * C1406) * C1940 +
            (C113 * C1407 + C48228 * C1418) * C48345) *
               C48245 * C105 +
           (C376 * C1938 + C377 * C1935 - C1710 * C1939 - C1711 * C1936 +
            (C113 * C1393 + C48228 * C1410) * C1940 +
            (C113 * C1411 + C48228 * C1420) * C48345) *
               C48245 * C106) *
              C48342) *
         C47998) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48228 * C122) * C2142 +
           (C113 * C123 + C48228 * C136) * C2137 -
           (C113 * C513 + C48228 * C523) * C2143 -
           (C113 * C524 + C48228 * C543) * C2138 +
           (C113 * C514 + C48228 * C525) * C2144 +
           (C113 * C526 + C48228 * C544) * C2139 -
           (C113 * C2147 + C48228 * C2153) * C2145 -
           (C113 * C2154 + C48228 * C2165) * C2140 +
           (C113 * C2148 + C48228 * C2155) * C2146 +
           (C113 * C2156 + C48228 * C2166) * C2141) *
              C48245 * C104 +
          (C164 * C2142 + C165 * C2137 - C584 * C2143 - C585 * C2138 +
           C586 * C2144 + C587 * C2139 -
           (C113 * C2149 + C48228 * C2157) * C2145 -
           (C113 * C2158 + C48228 * C2167) * C2140 +
           (C113 * C2150 + C48228 * C2159) * C2146 +
           (C113 * C2160 + C48228 * C2168) * C2141) *
              C48245 * C105 +
          (C166 * C2142 + C167 * C2137 - C589 * C2143 - C590 * C2138 +
           C591 * C2144 + C592 * C2139 -
           (C113 * C2151 + C48228 * C2161) * C2145 -
           (C113 * C2162 + C48228 * C2169) * C2140 +
           (C113 * C2152 + C48228 * C2163) * C2146 +
           (C113 * C2164 + C48228 * C2170) * C2141) *
              C48245 * C106) *
         C48025 * C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C831 +
             (C113 * C123 + C48228 * C136) * C48311 -
             (C113 * C513 + C48228 * C523) * C832 -
             (C113 * C524 + C48228 * C543) * C48129) *
                C48245 * C104 +
            (C838 + C839 - C840 - C841) * C48245 * C105 + C866 * C106) *
               C1177 +
           (((C113 * C1013 + C48228 * C1018) * C832 -
             ((C113 * C319 + C48228 * C337) * C48311 +
              (C113 * C307 + C48228 * C320) * C831) +
             (C113 * C1019 + C48228 * C1028) * C48129) *
                C48245 * C104 +
            (C1059 - (C1036 + C1037) + C1060) * C48245 * C105 + C1067 * C106) *
               C1178 +
           (((C113 * C308 + C48228 * C321) * C831 +
             (C113 * C322 + C48228 * C338) * C48311 -
             (C113 * C1388 + C48228 * C1400) * C832 -
             (C113 * C1401 + C48228 * C1415) * C48129) *
                C48245 * C104 +
            (C1696 + C1697 - C1712 - C1713) * C48245 * C105 +
            (C1702 + C1703 - C1714 - C1715) * C48245 * C106) *
               C48342) *
              C48296 +
          (((C840 - (C839 + C838) + C841) * C48245 * C104 +
            (C844 - (C843 + C842) + C845) * C48245 * C105 + C867 * C106) *
               C1177 +
           ((C1037 + C1036 - C1059 - C1060) * C48245 * C104 +
            (C1043 + C1042 - C1061 - C1062) * C48245 * C105 +
            (C1046 + C1047 - C1063 - C1064) * C48245 * C106) *
               C1178 +
           ((C1712 - (C1697 + C1696) + C1713) * C48245 * C104 +
            (C1714 - (C1703 + C1702) + C1715) * C48245 * C105 +
            ((C113 * C1691 + C48228 * C1692) * C832 -
             (C380 * C48311 + C381 * C831) +
             (C113 * C1693 + C48228 * C1694) * C48129) *
                C48245 * C106) *
               C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C831 +
            (C113 * C123 + C48228 * C136) * C48311 -
            (C113 * C513 + C48228 * C523) * C832 -
            (C113 * C524 + C48228 * C543) * C48129) *
               C48245 * C104 +
           (C838 + C839 - C840 - C841) * C48245 * C105 + C866 * C106) *
              C48025 * C713 +
          ((C840 - (C839 + C838) + C841) * C48245 * C104 +
           (C844 - (C843 + C842) + C845) * C48245 * C105 + C867 * C106) *
              C48025 * C714 +
          (C866 * C104 + (C848 + C847 - C846 - C849) * C48245 * C105 +
           (C850 + C851 - C862 - C863) * C48245 * C106) *
              C48025 * C715 +
          (C867 * C104 + (C862 - (C851 + C850) + C863) * C48245 * C105 +
           ((C113 * C833 + C48228 * C834) * C832 -
            (C172 * C48311 + C173 * C831) +
            (C113 * C835 + C48228 * C836) * C48129) *
               C48245 * C106) *
              C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C2447 +
            (C113 * C123 + C48228 * C136) * C2443 -
            (C113 * C513 + C48228 * C523) * C2448 -
            (C113 * C524 + C48228 * C543) * C2444 +
            (C113 * C514 + C48228 * C525) * C2449 +
            (C113 * C526 + C48228 * C544) * C2445 -
            (C113 * C2147 + C48228 * C2153) * C2450 -
            (C113 * C2154 + C48228 * C2165) * C48358) *
               C48245 * C104 +
           (C2456 + C2457 - C2458 - C2459 + C2460 + C2461 - C2480 - C2481) *
               C48245 * C105 +
           (C2466 + C2467 - C2468 - C2469 + C2470 + C2471 - C2482 - C2483) *
               C48245 * C106) *
              C48025 * C48296 +
          ((C2458 - (C2457 + C2456) + C2459 - C2460 - C2461 + C2480 + C2481) *
               C48245 * C104 +
           (C2468 - (C2467 + C2466) + C2469 - C2470 - C2471 + C2482 + C2483) *
               C48245 * C105 +
           (C593 * C2448 - (C168 * C2443 + C169 * C2447) + C594 * C2444 -
            C595 * C2449 - C596 * C2445 +
            (C113 * C2451 + C48228 * C2452) * C2450 +
            (C113 * C2453 + C48228 * C2454) * C48358) *
               C48245 * C106) *
              C48025 * C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C48245 * C104 +
            (C174 + C175) * C48245 * C105 + C187 * C106) *
               C48381 -
           (C396 * C106 + (C384 + C385) * C48245 * C105 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C48245 * C104) *
               C48369 +
           (((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C48245 * C104 +
            (C386 + C387) * C48245 * C105 + C397 * C106) *
               C48342) *
              C302 +
          (((C385 + C384) * C48245 * C104 + (C383 + C382) * C48245 * C105 +
            (C390 + C391) * C48245 * C106) *
               C48369 -
           (C188 * C106 + (C177 + C176) * C48245 * C105 +
            (C175 + C174) * C48245 * C104) *
               C48381 -
           ((C392 + C393) * C48245 * C106 + (C389 + C388) * C48245 * C105 +
            (C387 + C386) * C48245 * C104) *
               C48342) *
              C303 +
          ((C187 * C104 + (C179 + C178) * C48245 * C105 + C189 * C106) *
               C48381 -
           (((C113 * C331 + C48228 * C343) * C48042 +
             (C113 * C313 + C48228 * C332) * C114) *
                C48245 * C106 +
            (C391 + C390) * C48245 * C105 + C396 * C104) *
               C48369 +
           (C397 * C104 + (C393 + C392) * C48245 * C105 +
            ((C113 * C314 + C48228 * C333) * C114 +
             (C113 * C334 + C48228 * C344) * C48042) *
                C48245 * C106) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C114 +
            (C113 * C123 + C48228 * C136) * C48042) *
               C48245 * C104 +
           (C174 + C175) * C48245 * C105 + C187 * C106) *
              C48025 * C108 -
          (C188 * C106 + (C177 + C176) * C48245 * C105 +
           (C175 + C174) * C48245 * C104) *
              C48025 * C109 +
          (C187 * C104 + (C179 + C178) * C48245 * C105 + C189 * C106) * C48025 *
              C110 -
          ((C182 + C183) * C48245 * C106 + (C181 + C180) * C48245 * C105 +
           C188 * C104) *
              C48025 * C111 +
          (C189 * C104 + (C183 + C182) * C48245 * C105 +
           ((C113 * C121 + C48228 * C134) * C114 +
            (C113 * C135 + C48228 * C142) * C48042) *
               C48245 * C106) *
              C48025 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C48245 * C104 +
            (C174 + C175) * C48245 * C105 + C187 * C106) *
               C1177 -
           (C396 * C106 + (C384 + C385) * C48245 * C105 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C48245 * C104) *
               C1178 +
           (((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C48245 * C104 +
            (C386 + C387) * C48245 * C105 + C397 * C106) *
               C48342) *
              C48378 +
          (((C385 + C384) * C48245 * C104 + (C383 + C382) * C48245 * C105 +
            C727 * C106) *
               C1178 -
           (C188 * C106 + (C177 + C176) * C48245 * C105 +
            (C175 + C174) * C48245 * C104) *
               C1177 -
           ((C392 + C393) * C48245 * C106 + (C389 + C388) * C48245 * C105 +
            (C387 + C386) * C48245 * C104) *
               C48342) *
              C48365 +
          ((C187 * C104 + (C179 + C178) * C48245 * C105 + C189 * C106) * C1177 -
           ((C730 + C731) * C48245 * C106 + (C391 + C390) * C48245 * C105 +
            C396 * C104) *
               C1178 +
           (C397 * C104 + (C393 + C392) * C48245 * C105 +
            ((C113 * C314 + C48228 * C333) * C114 +
             (C113 * C334 + C48228 * C344) * C48042) *
                C48245 * C106) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C114 +
            (C113 * C123 + C48228 * C136) * C48042) *
               C48245 * C104 +
           (C174 + C175) * C48245 * C105 + C187 * C106) *
              C1245 -
          (C396 * C106 + (C384 + C385) * C48245 * C105 +
           ((C113 * C319 + C48228 * C337) * C48042 +
            (C113 * C307 + C48228 * C320) * C114) *
               C48245 * C104) *
              C1246 +
          (((C113 * C308 + C48228 * C321) * C114 +
            (C113 * C322 + C48228 * C338) * C48042) *
               C48245 * C104 +
           (C386 + C387) * C48245 * C105 + C397 * C106) *
              C1247 -
          (((C113 * C1257 + C48228 * C1269) * C48042 +
            (C113 * C1251 + C48228 * C1258) * C114) *
               C48245 * C106 +
           ((C113 * C1259 + C48228 * C1270) * C48042 +
            (C113 * C1252 + C48228 * C1260) * C114) *
               C48245 * C105 +
           ((C113 * C1261 + C48228 * C1271) * C48042 +
            (C113 * C1253 + C48228 * C1262) * C114) *
               C48245 * C104) *
              C1248 +
          (((C113 * C1254 + C48228 * C1263) * C114 +
            (C113 * C1264 + C48228 * C1272) * C48042) *
               C48245 * C104 +
           ((C113 * C1255 + C48228 * C1265) * C114 +
            (C113 * C1266 + C48228 * C1273) * C48042) *
               C48245 * C105 +
           ((C113 * C1256 + C48228 * C1267) * C114 +
            (C113 * C1268 + C48228 * C1274) * C48042) *
               C48245 * C106) *
              C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C1938 +
            (C113 * C123 + C48228 * C136) * C1935 -
            (C113 * C513 + C48228 * C523) * C1939 -
            (C113 * C524 + C48228 * C543) * C1936 +
            (C113 * C514 + C48228 * C525) * C1940 +
            (C113 * C526 + C48228 * C544) * C48345) *
               C48245 * C104 +
           (C1942 + C1943 - C1944 - C1945 + C1946 + C1947) * C48245 * C105 +
           C1965 * C106) *
              C48025 * C48378 +
          ((C1944 - (C1943 + C1942) + C1945 - C1946 - C1947) * C48245 * C104 +
           (C1950 - (C1949 + C1948) + C1951 - C1952 - C1953) * C48245 * C105 +
           (C1954 - (C1955 + C1956) + C1957 - C1958 - C1959) * C48245 * C106) *
              C48025 * C48365 +
          (C1965 * C104 +
           (C1956 + C1955 - C1954 - C1957 + C1958 + C1959) * C48245 * C105 +
           (C170 * C1938 + C171 * C1935 - C858 * C1939 - C859 * C1936 +
            (C113 * C522 + C48228 * C541) * C1940 +
            (C113 * C542 + C48228 * C552) * C48345) *
               C48245 * C106) *
              C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C1938 +
            (C113 * C123 + C48228 * C136) * C1935 -
            (C113 * C513 + C48228 * C523) * C1939 -
            (C113 * C524 + C48228 * C543) * C1936 +
            (C113 * C514 + C48228 * C525) * C1940 +
            (C113 * C526 + C48228 * C544) * C48345) *
               C48245 * C104 +
           (C1942 + C1943 - C1944 - C1945 + C1946 + C1947) * C48245 * C105 +
           C1965 * C106) *
              C48381 +
          (((C113 * C1013 + C48228 * C1018) * C1939 -
            ((C113 * C319 + C48228 * C337) * C1935 +
             (C113 * C307 + C48228 * C320) * C1938) +
            (C113 * C1019 + C48228 * C1028) * C1936 -
            (C113 * C1385 + C48228 * C1394) * C1940 -
            (C113 * C1395 + C48228 * C1412) * C48345) *
               C48245 * C104 +
           (C1052 * C1939 - (C372 * C1935 + C373 * C1938) + C1053 * C1936 -
            (C113 * C1386 + C48228 * C1396) * C1940 -
            (C113 * C1397 + C48228 * C1413) * C48345) *
               C48245 * C105 +
           (C1054 * C1939 - (C370 * C1935 + C371 * C1938) + C1056 * C1936 -
            (C113 * C1387 + C48228 * C1398) * C1940 -
            (C113 * C1399 + C48228 * C1414) * C48345) *
               C48245 * C106) *
              C48369 +
          (((C113 * C308 + C48228 * C321) * C1938 +
            (C113 * C322 + C48228 * C338) * C1935 -
            (C113 * C1388 + C48228 * C1400) * C1939 -
            (C113 * C1401 + C48228 * C1415) * C1936 +
            (C113 * C1389 + C48228 * C1402) * C1940 +
            (C113 * C1403 + C48228 * C1416) * C48345) *
               C48245 * C104 +
           (C374 * C1938 + C375 * C1935 - C1708 * C1939 - C1709 * C1936 +
            (C113 * C1391 + C48228 * C1406) * C1940 +
            (C113 * C1407 + C48228 * C1418) * C48345) *
               C48245 * C105 +
           (C376 * C1938 + C377 * C1935 - C1710 * C1939 - C1711 * C1936 +
            (C113 * C1393 + C48228 * C1410) * C1940 +
            (C113 * C1411 + C48228 * C1420) * C48345) *
               C48245 * C106) *
              C48342) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[15] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3467 +
             (C113 * C123 + C48228 * C136) * C3465 -
             (C113 * C513 + C48228 * C523) * C3468 -
             (C113 * C524 + C48228 * C543) * C48129) *
                C48245 * C104 +
            (C3470 + C3471 - C3472 - C3473) * C48245 * C105 + C3492 * C106) *
               C48310 +
           (((C113 * C1013 + C48228 * C1018) * C3468 -
             ((C113 * C319 + C48228 * C337) * C3465 +
              (C113 * C307 + C48228 * C320) * C3467) +
             (C113 * C1019 + C48228 * C1028) * C48129) *
                C48245 * C104 +
            (C3640 - (C3641 + C3642) + C3643) * C48245 * C105 + C3931 * C106) *
               C48087) *
              C48003 +
          (((C3472 - (C3471 + C3470) + C3473) * C48245 * C104 +
            (C3476 - (C3475 + C3474) + C3477) * C48245 * C105 + C3493 * C106) *
               C48310 +
           ((C3642 + C3641 - C3640 - C3643) * C48245 * C104 +
            (C3646 + C3645 - C3644 - C3647) * C48245 * C105 +
            (C3925 + C3926 - C3927 - C3928) * C48245 * C106) *
               C48087) *
              C48011 +
          ((C3492 * C104 + (C3480 + C3479 - C3478 - C3481) * C48245 * C105 +
            (C3482 + C3483 - C3484 - C3485) * C48245 * C106) *
               C48310 +
           (C3931 * C104 + (C3927 - (C3926 + C3925) + C3928) * C48245 * C105 +
            ((C113 * C1017 + C48228 * C1026) * C3468 -
             (C728 * C3465 + C729 * C3467) +
             (C113 * C1027 + C48228 * C1032) * C48129) *
                C48245 * C106) *
               C48087) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C47030 +
             (C113 * C123 + C48228 * C136) * C48125 -
             (C113 * C513 + C48228 * C523) * C47022 -
             (C113 * C524 + C48228 * C543) * C48132 +
             (C113 * C514 + C48228 * C525) * C47036 +
             (C113 * C526 + C48228 * C544) * C4043) *
                C48245 * C104 +
            (C4048 + C4049 - C4050 - C4051 + C4052 + C4053) * C48245 * C105 +
            C4071 * C106) *
               C48310 +
           (((C113 * C1013 + C48228 * C1018) * C47022 -
             ((C113 * C319 + C48228 * C337) * C48125 +
              (C113 * C307 + C48228 * C320) * C47030) +
             (C113 * C1019 + C48228 * C1028) * C48132 -
             (C113 * C1385 + C48228 * C1394) * C47036 -
             (C113 * C1395 + C48228 * C1412) * C4043) *
                C48245 * C104 +
            (C4218 - (C4219 + C4220) + C4221 - C4222 - C4223) * C48245 * C105 +
            (C4224 - (C4225 + C4226) + C4227 - C4228 - C4229) * C48245 * C106) *
               C48087) *
              C2799 +
          (((C4050 - (C4049 + C4048) + C4051 - C4052 - C4053) * C48245 * C104 +
            (C4056 - (C4055 + C4054) + C4057 - C4058 - C4059) * C48245 * C105 +
            (C4060 - (C4061 + C4062) + C4063 - C4064 - C4065) * C48245 * C106) *
               C48310 +
           ((C4220 + C4219 - C4218 - C4221 + C4222 + C4223) * C48245 * C104 +
            (C4226 + C4225 - C4224 - C4227 + C4228 + C4229) * C48245 * C105 +
            (C378 * C47030 + C379 * C48125 - C1057 * C47022 - C1058 * C48132 +
             (C113 * C2317 + C48228 * C2318) * C47036 +
             (C113 * C2319 + C48228 * C2320) * C4043) *
                C48245 * C106) *
               C48087) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3467 +
             (C113 * C123 + C48228 * C136) * C3465 -
             (C113 * C513 + C48228 * C523) * C3468 -
             (C113 * C524 + C48228 * C543) * C48129) *
                C48245 * C104 +
            (C3470 + C3471 - C3472 - C3473) * C48245 * C105 + C3492 * C106) *
               C48381 +
           (((C113 * C1013 + C48228 * C1018) * C3468 -
             ((C113 * C319 + C48228 * C337) * C3465 +
              (C113 * C307 + C48228 * C320) * C3467) +
             (C113 * C1019 + C48228 * C1028) * C48129) *
                C48245 * C104 +
            (C3640 - (C3641 + C3642) + C3643) * C48245 * C105 +
            (C3644 - (C3645 + C3646) + C3647) * C48245 * C106) *
               C48369 +
           (((C113 * C308 + C48228 * C321) * C3467 +
             (C113 * C322 + C48228 * C338) * C3465 -
             (C113 * C1388 + C48228 * C1400) * C3468 -
             (C113 * C1401 + C48228 * C1415) * C48129) *
                C48245 * C104 +
            (C3648 + C3649 - C3650 - C3651) * C48245 * C105 +
            (C3652 + C3653 - C3654 - C3655) * C48245 * C106) *
               C48342) *
              C2799 +
          (((C3472 - (C3471 + C3470) + C3473) * C48245 * C104 +
            (C3476 - (C3475 + C3474) + C3477) * C48245 * C105 + C3493 * C106) *
               C48381 +
           ((C3642 + C3641 - C3640 - C3643) * C48245 * C104 +
            (C3646 + C3645 - C3644 - C3647) * C48245 * C105 +
            (C378 * C3467 + C379 * C3465 - C1057 * C3468 - C1058 * C48129) *
                C48245 * C106) *
               C48369 +
           ((C3650 - (C3649 + C3648) + C3651) * C48245 * C104 +
            (C3654 - (C3653 + C3652) + C3655) * C48245 * C105 +
            ((C113 * C1691 + C48228 * C1692) * C3468 -
             (C380 * C3465 + C381 * C3467) +
             (C113 * C1693 + C48228 * C1694) * C48129) *
                C48245 * C106) *
               C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C3467 +
            (C113 * C123 + C48228 * C136) * C3465 -
            (C113 * C513 + C48228 * C523) * C3468 -
            (C113 * C524 + C48228 * C543) * C48129) *
               C48245 * C104 +
           (C3470 + C3471 - C3472 - C3473) * C48245 * C105 + C3492 * C106) *
              C48025 * C48387 +
          ((C3472 - (C3471 + C3470) + C3473) * C48245 * C104 +
           (C3476 - (C3475 + C3474) + C3477) * C48245 * C105 + C3493 * C106) *
              C48025 * C48380 +
          (C3492 * C104 + (C3480 + C3479 - C3478 - C3481) * C48245 * C105 +
           (C3482 + C3483 - C3484 - C3485) * C48245 * C106) *
              C48025 * C48367 +
          (C3493 * C104 + (C3484 - (C3483 + C3482) + C3485) * C48245 * C105 +
           ((C113 * C833 + C48228 * C834) * C3468 -
            (C172 * C3465 + C173 * C3467) +
            (C113 * C835 + C48228 * C836) * C48129) *
               C48245 * C106) *
              C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C3757 +
            (C113 * C123 + C48228 * C136) * C48389 -
            (C113 * C513 + C48228 * C523) * C3758 -
            (C113 * C524 + C48228 * C543) * C48386 +
            (C113 * C514 + C48228 * C525) * C3759 +
            (C113 * C526 + C48228 * C544) * C48377 -
            (C113 * C2147 + C48228 * C2153) * C3760 -
            (C113 * C2154 + C48228 * C2165) * C48358) *
               C48245 * C104 +
           (C3762 + C3763 - C3764 - C3765 + C3766 + C3767 - C3768 - C3769) *
               C48245 * C105 +
           (C3770 + C3771 - C3772 - C3773 + C3774 + C3775 - C3776 - C3777) *
               C48245 * C106) *
              C48025 * C2799 +
          ((C3764 - (C3763 + C3762) + C3765 - C3766 - C3767 + C3768 + C3769) *
               C48245 * C104 +
           (C3772 - (C3771 + C3770) + C3773 - C3774 - C3775 + C3776 + C3777) *
               C48245 * C105 +
           (C593 * C3758 - (C168 * C48389 + C169 * C3757) + C594 * C48386 -
            C595 * C3759 - C596 * C48377 +
            (C113 * C2451 + C48228 * C2452) * C3760 +
            (C113 * C2453 + C48228 * C2454) * C48358) *
               C48245 * C106) *
              C48025 * C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C47030 +
            (C113 * C123 + C48228 * C136) * C48125 -
            (C113 * C513 + C48228 * C523) * C47022 -
            (C113 * C524 + C48228 * C543) * C48132 +
            (C113 * C514 + C48228 * C525) * C47036 +
            (C113 * C526 + C48228 * C544) * C4043) *
               C48245 * C104 +
           (C4048 + C4049 - C4050 - C4051 + C4052 + C4053) * C48245 * C105 +
           C4071 * C106) *
              C48025 * C48003 +
          ((C4050 - (C4049 + C4048) + C4051 - C4052 - C4053) * C48245 * C104 +
           (C4056 - (C4055 + C4054) + C4057 - C4058 - C4059) * C48245 * C105 +
           (C4060 - (C4061 + C4062) + C4063 - C4064 - C4065) * C48245 * C106) *
              C48025 * C48011 +
          (C4071 * C104 +
           (C4062 + C4061 - C4060 - C4063 + C4064 + C4065) * C48245 * C105 +
           (C170 * C47030 + C171 * C48125 - C858 * C47022 - C859 * C48132 +
            (C113 * C522 + C48228 * C541) * C47036 +
            (C113 * C542 + C48228 * C552) * C4043) *
               C48245 * C106) *
              C48025 * C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C3467 +
            (C113 * C123 + C48228 * C136) * C3465 -
            (C113 * C513 + C48228 * C523) * C3468 -
            (C113 * C524 + C48228 * C543) * C48129) *
               C48245 * C104 +
           (C3470 + C3471 - C3472 - C3473) * C48245 * C105 + C3492 * C106) *
              C48025 * C48387 +
          ((C3472 - (C3471 + C3470) + C3473) * C48245 * C104 +
           (C3476 - (C3475 + C3474) + C3477) * C48245 * C105 + C3493 * C106) *
              C48025 * C48380 +
          (C3492 * C104 + (C3480 + C3479 - C3478 - C3481) * C48245 * C105 +
           (C3482 + C3483 - C3484 - C3485) * C48245 * C106) *
              C48025 * C48367 +
          (C3493 * C104 + (C3484 - (C3483 + C3482) + C3485) * C48245 * C105 +
           ((C113 * C833 + C48228 * C834) * C3468 -
            (C172 * C3465 + C173 * C3467) +
            (C113 * C835 + C48228 * C836) * C48129) *
               C48245 * C106) *
              C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3467 +
             (C113 * C123 + C48228 * C136) * C3465 -
             (C113 * C513 + C48228 * C523) * C3468 -
             (C113 * C524 + C48228 * C543) * C48129) *
                C48245 * C104 +
            (C3470 + C3471 - C3472 - C3473) * C48245 * C105 + C3492 * C106) *
               C48381 +
           (((C113 * C1013 + C48228 * C1018) * C3468 -
             ((C113 * C319 + C48228 * C337) * C3465 +
              (C113 * C307 + C48228 * C320) * C3467) +
             (C113 * C1019 + C48228 * C1028) * C48129) *
                C48245 * C104 +
            (C3640 - (C3641 + C3642) + C3643) * C48245 * C105 +
            (C3644 - (C3645 + C3646) + C3647) * C48245 * C106) *
               C48369 +
           (((C113 * C308 + C48228 * C321) * C3467 +
             (C113 * C322 + C48228 * C338) * C3465 -
             (C113 * C1388 + C48228 * C1400) * C3468 -
             (C113 * C1401 + C48228 * C1415) * C48129) *
                C48245 * C104 +
            (C3648 + C3649 - C3650 - C3651) * C48245 * C105 +
            (C3652 + C3653 - C3654 - C3655) * C48245 * C106) *
               C48342) *
              C2799 +
          (((C3472 - (C3471 + C3470) + C3473) * C48245 * C104 +
            (C3476 - (C3475 + C3474) + C3477) * C48245 * C105 + C3493 * C106) *
               C48381 +
           ((C3642 + C3641 - C3640 - C3643) * C48245 * C104 +
            (C3646 + C3645 - C3644 - C3647) * C48245 * C105 +
            (C378 * C3467 + C379 * C3465 - C1057 * C3468 - C1058 * C48129) *
                C48245 * C106) *
               C48369 +
           ((C3650 - (C3649 + C3648) + C3651) * C48245 * C104 +
            (C3654 - (C3653 + C3652) + C3655) * C48245 * C105 +
            ((C113 * C1691 + C48228 * C1692) * C3468 -
             (C380 * C3465 + C381 * C3467) +
             (C113 * C1693 + C48228 * C1694) * C48129) *
                C48245 * C106) *
               C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C48245 * C104 +
            (C174 + C175) * C48245 * C105 + C187 * C106) *
               C48310 -
           (C396 * C106 + (C384 + C385) * C48245 * C105 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C48245 * C104) *
               C48087) *
              C713 +
          (((C385 + C384) * C48245 * C104 + (C383 + C382) * C48245 * C105 +
            C727 * C106) *
               C48087 -
           (C188 * C106 + (C177 + C176) * C48245 * C105 +
            (C175 + C174) * C48245 * C104) *
               C48310) *
              C714 +
          ((C187 * C104 + (C179 + C178) * C48245 * C105 + C189 * C106) *
               C48310 -
           ((C730 + C731) * C48245 * C106 + (C391 + C390) * C48245 * C105 +
            C396 * C104) *
               C48087) *
              C715 +
          ((C727 * C104 + (C731 + C730) * C48245 * C105 +
            ((C113 * C717 + C48228 * C718) * C114 +
             (C113 * C719 + C48228 * C720) * C48042) *
                C48245 * C106) *
               C48087 -
           ((C182 + C183) * C48245 * C106 + (C181 + C180) * C48245 * C105 +
            C188 * C104) *
               C48310) *
              C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C48245 * C104 +
            (C174 + C175) * C48245 * C105 + C187 * C106) *
               C1519 -
           (C396 * C106 + (C384 + C385) * C48245 * C105 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C48245 * C104) *
               C1520 +
           (((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C48245 * C104 +
            (C386 + C387) * C48245 * C105 + C397 * C106) *
               C1521 -
           ((C1542 + C1543) * C48245 * C106 + (C1544 + C1545) * C48245 * C105 +
            ((C113 * C1261 + C48228 * C1271) * C48042 +
             (C113 * C1253 + C48228 * C1262) * C114) *
                C48245 * C104) *
               C48352) *
              C48296 +
          (((C385 + C384) * C48245 * C104 + (C383 + C382) * C48245 * C105 +
            C727 * C106) *
               C1520 -
           (C188 * C106 + (C177 + C176) * C48245 * C105 +
            (C175 + C174) * C48245 * C104) *
               C1519 -
           ((C392 + C393) * C48245 * C106 + (C389 + C388) * C48245 * C105 +
            (C387 + C386) * C48245 * C104) *
               C1521 +
           ((C1545 + C1544) * C48245 * C104 + (C1543 + C1542) * C48245 * C105 +
            ((C113 * C1525 + C48228 * C1526) * C114 +
             (C113 * C1527 + C48228 * C1528) * C48042) *
                C48245 * C106) *
               C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C831 +
             (C113 * C123 + C48228 * C136) * C48311 -
             (C113 * C513 + C48228 * C523) * C832 -
             (C113 * C524 + C48228 * C543) * C48129) *
                C48245 * C104 +
            (C838 + C839 - C840 - C841) * C48245 * C105 + C866 * C106) *
               C48310 +
           (((C113 * C1013 + C48228 * C1018) * C832 -
             ((C113 * C319 + C48228 * C337) * C48311 +
              (C113 * C307 + C48228 * C320) * C831) +
             (C113 * C1019 + C48228 * C1028) * C48129) *
                C48245 * C104 +
            (C1059 - (C1036 + C1037) + C1060) * C48245 * C105 + C1067 * C106) *
               C48087) *
              C302 +
          (((C840 - (C839 + C838) + C841) * C48245 * C104 +
            (C844 - (C843 + C842) + C845) * C48245 * C105 + C867 * C106) *
               C48310 +
           ((C1037 + C1036 - C1059 - C1060) * C48245 * C104 +
            (C1043 + C1042 - C1061 - C1062) * C48245 * C105 +
            (C1046 + C1047 - C1063 - C1064) * C48245 * C106) *
               C48087) *
              C303 +
          ((C866 * C104 + (C848 + C847 - C846 - C849) * C48245 * C105 +
            (C850 + C851 - C862 - C863) * C48245 * C106) *
               C48310 +
           (C1067 * C104 + (C1063 - (C1047 + C1046) + C1064) * C48245 * C105 +
            ((C113 * C1017 + C48228 * C1026) * C832 -
             (C728 * C48311 + C729 * C831) +
             (C113 * C1027 + C48228 * C1032) * C48129) *
                C48245 * C106) *
               C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C831 +
            (C113 * C123 + C48228 * C136) * C48311 -
            (C113 * C513 + C48228 * C523) * C832 -
            (C113 * C524 + C48228 * C543) * C48129) *
               C48245 * C104 +
           (C838 + C839 - C840 - C841) * C48245 * C105 + C866 * C106) *
              C1519 +
          (((C113 * C1013 + C48228 * C1018) * C832 -
            ((C113 * C319 + C48228 * C337) * C48311 +
             (C113 * C307 + C48228 * C320) * C831) +
            (C113 * C1019 + C48228 * C1028) * C48129) *
               C48245 * C104 +
           (C1059 - (C1036 + C1037) + C1060) * C48245 * C105 + C1067 * C106) *
              C1520 +
          (((C113 * C308 + C48228 * C321) * C831 +
            (C113 * C322 + C48228 * C338) * C48311 -
            (C113 * C1388 + C48228 * C1400) * C832 -
            (C113 * C1401 + C48228 * C1415) * C48129) *
               C48245 * C104 +
           (C1696 + C1697 - C1712 - C1713) * C48245 * C105 +
           (C1702 + C1703 - C1714 - C1715) * C48245 * C106) *
              C1521 +
          (((C113 * C1813 + C48228 * C1816) * C832 -
            ((C113 * C1261 + C48228 * C1271) * C48311 +
             (C113 * C1253 + C48228 * C1262) * C831) +
            (C113 * C1817 + C48228 * C1822) * C48129) *
               C48245 * C104 +
           ((C113 * C1814 + C48228 * C1818) * C832 -
            (C1540 * C48311 + C1541 * C831) +
            (C113 * C1819 + C48228 * C1823) * C48129) *
               C48245 * C105 +
           ((C113 * C1815 + C48228 * C1820) * C832 -
            (C1538 * C48311 + C1539 * C831) +
            (C113 * C1821 + C48228 * C1824) * C48129) *
               C48245 * C106) *
              C48352) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C48245 * C104 +
            (C174 + C175) * C48245 * C105 + C187 * C106) *
               C48381 -
           (C396 * C106 + (C384 + C385) * C48245 * C105 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C48245 * C104) *
               C48369 +
           (((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C48245 * C104 +
            (C386 + C387) * C48245 * C105 + C397 * C106) *
               C48342) *
              C302 +
          (((C385 + C384) * C48245 * C104 + (C383 + C382) * C48245 * C105 +
            (C390 + C391) * C48245 * C106) *
               C48369 -
           (C188 * C106 + (C177 + C176) * C48245 * C105 +
            (C175 + C174) * C48245 * C104) *
               C48381 -
           ((C392 + C393) * C48245 * C106 + (C389 + C388) * C48245 * C105 +
            (C387 + C386) * C48245 * C104) *
               C48342) *
              C303 +
          ((C187 * C104 + (C179 + C178) * C48245 * C105 + C189 * C106) *
               C48381 -
           (((C113 * C331 + C48228 * C343) * C48042 +
             (C113 * C313 + C48228 * C332) * C114) *
                C48245 * C106 +
            (C391 + C390) * C48245 * C105 + C396 * C104) *
               C48369 +
           (C397 * C104 + (C393 + C392) * C48245 * C105 +
            ((C113 * C314 + C48228 * C333) * C114 +
             (C113 * C334 + C48228 * C344) * C48042) *
                C48245 * C106) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C114 +
            (C113 * C123 + C48228 * C136) * C48042) *
               C48245 * C104 +
           (C174 + C175) * C48245 * C105 + C187 * C106) *
              C48025 * C108 -
          (C188 * C106 + (C177 + C176) * C48245 * C105 +
           (C175 + C174) * C48245 * C104) *
              C48025 * C109 +
          (C187 * C104 + (C179 + C178) * C48245 * C105 + C189 * C106) * C48025 *
              C110 -
          ((C182 + C183) * C48245 * C106 + (C181 + C180) * C48245 * C105 +
           C188 * C104) *
              C48025 * C111 +
          (C189 * C104 + (C183 + C182) * C48245 * C105 +
           ((C113 * C121 + C48228 * C134) * C114 +
            (C113 * C135 + C48228 * C142) * C48042) *
               C48245 * C106) *
              C48025 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C510 +
            (C113 * C123 + C48228 * C136) * C48382 -
            (C113 * C513 + C48228 * C523) * C511 -
            (C113 * C524 + C48228 * C543) * C48371 +
            (C113 * C514 + C48228 * C525) * C512 +
            (C113 * C526 + C48228 * C544) * C48345) *
               C48245 * C104 +
           (C554 + C555 - C597 - C598 + C599 + C600) * C48245 * C105 +
           C613 * C106) *
              C48025 * C302 +
          ((C597 - (C555 + C554) + C598 - C599 - C600) * C48245 * C104 +
           (C601 - (C565 + C564) + C602 - C603 - C604) * C48245 * C105 +
           (C605 - (C576 + C577) + C606 - C607 - C608) * C48245 * C106) *
              C48025 * C303 +
          (C613 * C104 +
           (C577 + C576 - C605 - C606 + C607 + C608) * C48245 * C105 +
           (C170 * C510 + C171 * C48382 - (C113 * C521 + C48228 * C539) * C511 -
            (C113 * C540 + C48228 * C551) * C48371 +
            (C113 * C522 + C48228 * C541) * C512 +
            (C113 * C542 + C48228 * C552) * C48345) *
               C48245 * C106) *
              C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C48245 * C104 +
            (C174 + C175) * C48245 * C105 + C187 * C106) *
               C1177 -
           (C396 * C106 + (C384 + C385) * C48245 * C105 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C48245 * C104) *
               C1178 +
           (((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C48245 * C104 +
            (C386 + C387) * C48245 * C105 + C397 * C106) *
               C48342) *
              C48378 +
          (((C385 + C384) * C48245 * C104 + (C383 + C382) * C48245 * C105 +
            C727 * C106) *
               C1178 -
           (C188 * C106 + (C177 + C176) * C48245 * C105 +
            (C175 + C174) * C48245 * C104) *
               C1177 -
           ((C392 + C393) * C48245 * C106 + (C389 + C388) * C48245 * C105 +
            (C387 + C386) * C48245 * C104) *
               C48342) *
              C48365 +
          ((C187 * C104 + (C179 + C178) * C48245 * C105 + C189 * C106) * C1177 -
           ((C730 + C731) * C48245 * C106 + (C391 + C390) * C48245 * C105 +
            C396 * C104) *
               C1178 +
           (C397 * C104 + (C393 + C392) * C48245 * C105 +
            ((C113 * C314 + C48228 * C333) * C114 +
             (C113 * C334 + C48228 * C344) * C48042) *
                C48245 * C106) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C114 +
            (C113 * C123 + C48228 * C136) * C48042) *
               C48245 * C104 +
           (C174 + C175) * C48245 * C105 + C187 * C106) *
              C1245 -
          (C396 * C106 + (C384 + C385) * C48245 * C105 +
           ((C113 * C319 + C48228 * C337) * C48042 +
            (C113 * C307 + C48228 * C320) * C114) *
               C48245 * C104) *
              C1246 +
          (((C113 * C308 + C48228 * C321) * C114 +
            (C113 * C322 + C48228 * C338) * C48042) *
               C48245 * C104 +
           (C386 + C387) * C48245 * C105 + C397 * C106) *
              C1247 -
          (((C113 * C1257 + C48228 * C1269) * C48042 +
            (C113 * C1251 + C48228 * C1258) * C114) *
               C48245 * C106 +
           ((C113 * C1259 + C48228 * C1270) * C48042 +
            (C113 * C1252 + C48228 * C1260) * C114) *
               C48245 * C105 +
           ((C113 * C1261 + C48228 * C1271) * C48042 +
            (C113 * C1253 + C48228 * C1262) * C114) *
               C48245 * C104) *
              C1248 +
          (((C113 * C1254 + C48228 * C1263) * C114 +
            (C113 * C1264 + C48228 * C1272) * C48042) *
               C48245 * C104 +
           ((C113 * C1255 + C48228 * C1265) * C114 +
            (C113 * C1266 + C48228 * C1273) * C48042) *
               C48245 * C105 +
           ((C113 * C1256 + C48228 * C1267) * C114 +
            (C113 * C1268 + C48228 * C1274) * C48042) *
               C48245 * C106) *
              C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C510 +
            (C113 * C123 + C48228 * C136) * C48382 -
            (C113 * C513 + C48228 * C523) * C511 -
            (C113 * C524 + C48228 * C543) * C48371 +
            (C113 * C514 + C48228 * C525) * C512 +
            (C113 * C526 + C48228 * C544) * C48345) *
               C48245 * C104 +
           (C554 + C555 - C597 - C598 + C599 + C600) * C48245 * C105 +
           C613 * C106) *
              C1177 +
          (((C113 * C1013 + C48228 * C1018) * C511 -
            ((C113 * C319 + C48228 * C337) * C48382 +
             (C113 * C307 + C48228 * C320) * C510) +
            (C113 * C1019 + C48228 * C1028) * C48371 -
            (C113 * C1385 + C48228 * C1394) * C512 -
            (C113 * C1395 + C48228 * C1412) * C48345) *
               C48245 * C104 +
           (C1052 * C511 - (C372 * C48382 + C373 * C510) + C1053 * C48371 -
            (C113 * C1386 + C48228 * C1396) * C512 -
            (C113 * C1397 + C48228 * C1413) * C48345) *
               C48245 * C105 +
           (C1054 * C511 - (C370 * C48382 + C371 * C510) + C1056 * C48371 -
            (C113 * C1387 + C48228 * C1398) * C512 -
            (C113 * C1399 + C48228 * C1414) * C48345) *
               C48245 * C106) *
              C1178 +
          (((C113 * C308 + C48228 * C321) * C510 +
            (C113 * C322 + C48228 * C338) * C48382 -
            (C113 * C1388 + C48228 * C1400) * C511 -
            (C113 * C1401 + C48228 * C1415) * C48371 +
            (C113 * C1389 + C48228 * C1402) * C512 +
            (C113 * C1403 + C48228 * C1416) * C48345) *
               C48245 * C104 +
           (C374 * C510 + C375 * C48382 -
            (C113 * C1390 + C48228 * C1404) * C511 -
            (C113 * C1405 + C48228 * C1417) * C48371 +
            (C113 * C1391 + C48228 * C1406) * C512 +
            (C113 * C1407 + C48228 * C1418) * C48345) *
               C48245 * C105 +
           (C376 * C510 + C377 * C48382 -
            (C113 * C1392 + C48228 * C1408) * C511 -
            (C113 * C1409 + C48228 * C1419) * C48371 +
            (C113 * C1393 + C48228 * C1410) * C512 +
            (C113 * C1411 + C48228 * C1420) * C48345) *
               C48245 * C106) *
              C48342) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C831 +
            (C113 * C123 + C48228 * C136) * C48311 -
            (C113 * C513 + C48228 * C523) * C832 -
            (C113 * C524 + C48228 * C543) * C48129) *
               C48245 * C104 +
           (C838 + C839 - C840 - C841) * C48245 * C105 + C866 * C106) *
              C48025 * C713 +
          ((C840 - (C839 + C838) + C841) * C48245 * C104 +
           (C844 - (C843 + C842) + C845) * C48245 * C105 + C867 * C106) *
              C48025 * C714 +
          (C866 * C104 + (C848 + C847 - C846 - C849) * C48245 * C105 +
           (C850 + C851 - C862 - C863) * C48245 * C106) *
              C48025 * C715 +
          (C867 * C104 + (C862 - (C851 + C850) + C863) * C48245 * C105 +
           ((C113 * C833 + C48228 * C834) * C832 -
            (C172 * C48311 + C173 * C831) +
            (C113 * C835 + C48228 * C836) * C48129) *
               C48245 * C106) *
              C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C831 +
             (C113 * C123 + C48228 * C136) * C48311 -
             (C113 * C513 + C48228 * C523) * C832 -
             (C113 * C524 + C48228 * C543) * C48129) *
                C48245 * C104 +
            (C838 + C839 - C840 - C841) * C48245 * C105 + C866 * C106) *
               C1177 +
           (((C113 * C1013 + C48228 * C1018) * C832 -
             ((C113 * C319 + C48228 * C337) * C48311 +
              (C113 * C307 + C48228 * C320) * C831) +
             (C113 * C1019 + C48228 * C1028) * C48129) *
                C48245 * C104 +
            (C1059 - (C1036 + C1037) + C1060) * C48245 * C105 + C1067 * C106) *
               C1178 +
           (((C113 * C308 + C48228 * C321) * C831 +
             (C113 * C322 + C48228 * C338) * C48311 -
             (C113 * C1388 + C48228 * C1400) * C832 -
             (C113 * C1401 + C48228 * C1415) * C48129) *
                C48245 * C104 +
            (C1696 + C1697 - C1712 - C1713) * C48245 * C105 +
            (C1702 + C1703 - C1714 - C1715) * C48245 * C106) *
               C48342) *
              C48296 +
          (((C840 - (C839 + C838) + C841) * C48245 * C104 +
            (C844 - (C843 + C842) + C845) * C48245 * C105 + C867 * C106) *
               C1177 +
           ((C1037 + C1036 - C1059 - C1060) * C48245 * C104 +
            (C1043 + C1042 - C1061 - C1062) * C48245 * C105 +
            (C1046 + C1047 - C1063 - C1064) * C48245 * C106) *
               C1178 +
           ((C1712 - (C1697 + C1696) + C1713) * C48245 * C104 +
            (C1714 - (C1703 + C1702) + C1715) * C48245 * C105 +
            ((C113 * C1691 + C48228 * C1692) * C832 -
             (C380 * C48311 + C381 * C831) +
             (C113 * C1693 + C48228 * C1694) * C48129) *
                C48245 * C106) *
               C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C114 +
            (C113 * C123 + C48228 * C136) * C48042) *
               C48245 * C104 +
           (C174 + C175) * C48245 * C105 + C187 * C106) *
              C48025 * C108 -
          (C188 * C106 + (C177 + C176) * C48245 * C105 +
           (C175 + C174) * C48245 * C104) *
              C48025 * C109 +
          (C187 * C104 + (C179 + C178) * C48245 * C105 + C189 * C106) * C48025 *
              C110 -
          ((C182 + C183) * C48245 * C106 + (C181 + C180) * C48245 * C105 +
           C188 * C104) *
              C48025 * C111 +
          (C189 * C104 + (C183 + C182) * C48245 * C105 +
           ((C113 * C121 + C48228 * C134) * C114 +
            (C113 * C135 + C48228 * C142) * C48042) *
               C48245 * C106) *
              C48025 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C48245 * C104 +
            (C174 + C175) * C48245 * C105 + C187 * C106) *
               C48381 -
           (C396 * C106 + (C384 + C385) * C48245 * C105 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C48245 * C104) *
               C48369 +
           (((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C48245 * C104 +
            (C386 + C387) * C48245 * C105 + C397 * C106) *
               C48342) *
              C302 +
          (((C385 + C384) * C48245 * C104 + (C383 + C382) * C48245 * C105 +
            (C390 + C391) * C48245 * C106) *
               C48369 -
           (C188 * C106 + (C177 + C176) * C48245 * C105 +
            (C175 + C174) * C48245 * C104) *
               C48381 -
           ((C392 + C393) * C48245 * C106 + (C389 + C388) * C48245 * C105 +
            (C387 + C386) * C48245 * C104) *
               C48342) *
              C303 +
          ((C187 * C104 + (C179 + C178) * C48245 * C105 + C189 * C106) *
               C48381 -
           (((C113 * C331 + C48228 * C343) * C48042 +
             (C113 * C313 + C48228 * C332) * C114) *
                C48245 * C106 +
            (C391 + C390) * C48245 * C105 + C396 * C104) *
               C48369 +
           (C397 * C104 + (C393 + C392) * C48245 * C105 +
            ((C113 * C314 + C48228 * C333) * C114 +
             (C113 * C334 + C48228 * C344) * C48042) *
                C48245 * C106) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C48245 * C104 +
            (C174 + C175) * C48245 * C105 + C187 * C106) *
               C1177 -
           (C396 * C106 + (C384 + C385) * C48245 * C105 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C48245 * C104) *
               C1178 +
           (((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C48245 * C104 +
            (C386 + C387) * C48245 * C105 + C397 * C106) *
               C48342) *
              C48378 +
          (((C385 + C384) * C48245 * C104 + (C383 + C382) * C48245 * C105 +
            C727 * C106) *
               C1178 -
           (C188 * C106 + (C177 + C176) * C48245 * C105 +
            (C175 + C174) * C48245 * C104) *
               C1177 -
           ((C392 + C393) * C48245 * C106 + (C389 + C388) * C48245 * C105 +
            (C387 + C386) * C48245 * C104) *
               C48342) *
              C48365 +
          ((C187 * C104 + (C179 + C178) * C48245 * C105 + C189 * C106) * C1177 -
           ((C730 + C731) * C48245 * C106 + (C391 + C390) * C48245 * C105 +
            C396 * C104) *
               C1178 +
           (C397 * C104 + (C393 + C392) * C48245 * C105 +
            ((C113 * C314 + C48228 * C333) * C114 +
             (C113 * C334 + C48228 * C344) * C48042) *
                C48245 * C106) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C114 +
            (C113 * C123 + C48228 * C136) * C48042) *
               C48245 * C104 +
           (C174 + C175) * C48245 * C105 + C187 * C106) *
              C1245 -
          (C396 * C106 + (C384 + C385) * C48245 * C105 +
           ((C113 * C319 + C48228 * C337) * C48042 +
            (C113 * C307 + C48228 * C320) * C114) *
               C48245 * C104) *
              C1246 +
          (((C113 * C308 + C48228 * C321) * C114 +
            (C113 * C322 + C48228 * C338) * C48042) *
               C48245 * C104 +
           (C386 + C387) * C48245 * C105 + C397 * C106) *
              C1247 -
          (((C113 * C1257 + C48228 * C1269) * C48042 +
            (C113 * C1251 + C48228 * C1258) * C114) *
               C48245 * C106 +
           ((C113 * C1259 + C48228 * C1270) * C48042 +
            (C113 * C1252 + C48228 * C1260) * C114) *
               C48245 * C105 +
           ((C113 * C1261 + C48228 * C1271) * C48042 +
            (C113 * C1253 + C48228 * C1262) * C114) *
               C48245 * C104) *
              C1248 +
          (((C113 * C1254 + C48228 * C1263) * C114 +
            (C113 * C1264 + C48228 * C1272) * C48042) *
               C48245 * C104 +
           ((C113 * C1255 + C48228 * C1265) * C114 +
            (C113 * C1266 + C48228 * C1273) * C48042) *
               C48245 * C105 +
           ((C113 * C1256 + C48228 * C1267) * C114 +
            (C113 * C1268 + C48228 * C1274) * C48042) *
               C48245 * C106) *
              C1249) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
                C48329) *
               C48083 -
           (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
                C48329 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C48245 * C5057) *
               C48090 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C5057 +
            ((C5292 + C5293) * C114 + (C5294 + C5295) * C48042) * C48245 *
                C48329) *
               C3071) *
              C48003 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C48245 *
                C5057 +
            ((C5296 + C5297) * C114 + (C5298 + C5299) * C48042) * C48245 *
                C48329) *
               C48090 -
           (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
                C48329 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
                C5057) *
               C48083 -
           (((C5300 + C5301) * C48042 + (C5302 + C5303) * C114) * C48245 *
                C48329 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C48245 *
                C5057) *
               C3071) *
              C48011 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C48245 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48042) * C48245 *
                C48329) *
               C48083 -
           (((C5636 + C5637) * C48042 + (C5638 + C5639) * C114) * C48245 *
                C48329 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C48245 *
                C5057) *
               C48090 +
           (((C5303 + C5302) * C114 + (C5301 + C5300) * C48042) * C48245 *
                C5057 +
            ((C5059 * C312 + C5055 * C330 + C5060 * C1525 + C48360 * C1526) *
                 C114 +
             (C5059 * C329 + C5055 * C342 + C5060 * C1527 + C48360 * C1528) *
                 C48042) *
                C48245 * C48329) *
               C3071) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C831 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48311 -
             (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                 C832 -
             (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                 C48129) *
                C48245 * C5057 +
            ((C5094 + C5095) * C831 + (C5096 + C5097) * C48311 -
             (C5482 + C5483) * C832 - (C5484 + C5485) * C48129) *
                C48245 * C48329) *
               C48083 +
           (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                 C832 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C48311 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C831) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                 C48129) *
                C48245 * C5057 +
            ((C5992 + C5993) * C832 -
             ((C5288 + C5289) * C48311 + (C5290 + C5291) * C831) +
             (C5994 + C5995) * C48129) *
                C48245 * C48329) *
               C48090 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C831 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48311 -
             (C5060 * C1813 + C48360 * C1816 + C5059 * C1388 + C5055 * C1400) *
                 C832 -
             (C5060 * C1817 + C48360 * C1822 + C5059 * C1401 + C5055 * C1415) *
                 C48129) *
                C48245 * C5057 +
            ((C5292 + C5293) * C831 + (C5294 + C5295) * C48311 -
             (C6734 + C6735) * C832 - (C6736 + C6737) * C48129) *
                C48245 * C48329) *
               C3071) *
              C2799 +
          ((((C5483 + C5482) * C832 -
             ((C5097 + C5096) * C48311 + (C5095 + C5094) * C831) +
             (C5485 + C5484) * C48129) *
                C48245 * C5057 +
            ((C5490 + C5491) * C832 -
             ((C5098 + C5099) * C48311 + (C5100 + C5101) * C831) +
             (C5492 + C5493) * C48129) *
                C48245 * C48329) *
               C48083 +
           (((C5291 + C5290) * C831 + (C5289 + C5288) * C48311 -
             (C5993 + C5992) * C832 - (C5995 + C5994) * C48129) *
                C48245 * C5057 +
            ((C5296 + C5297) * C831 + (C5298 + C5299) * C48311 -
             (C5996 + C5997) * C832 - (C5998 + C5999) * C48129) *
                C48245 * C48329) *
               C48090 +
           (((C6735 + C6734) * C832 -
             ((C5295 + C5294) * C48311 + (C5293 + C5292) * C831) +
             (C6737 + C6736) * C48129) *
                C48245 * C5057 +
            ((C5059 * C1392 + C5055 * C1408 + C5060 * C1815 + C48360 * C1820) *
                 C832 -
             ((C5300 + C5301) * C48311 + (C5302 + C5303) * C831) +
             (C5059 * C1409 + C5055 * C1419 + C5060 * C1821 + C48360 * C1824) *
                 C48129) *
                C48245 * C48329) *
               C3071) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
                C48329) *
               C48388 -
           (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
                C48329 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C48245 * C5057) *
               C48384 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C5057 +
            ((C5292 + C5293) * C114 + (C5294 + C5295) * C48042) * C48245 *
                C48329) *
               C48374 -
           (((C6528 + C6529) * C48042 + (C6530 + C6531) * C114) * C48245 *
                C48329 +
            ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                 C48042 +
             (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                 C114) *
                C48245 * C5057) *
               C48352) *
              C2799 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C48245 *
                C5057 +
            ((C5296 + C5297) * C114 + (C5298 + C5299) * C48042) * C48245 *
                C48329) *
               C48384 -
           (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
                C48329 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
                C5057) *
               C48388 -
           (((C5300 + C5301) * C48042 + (C5302 + C5303) * C114) * C48245 *
                C48329 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C48245 *
                C5057) *
               C48374 +
           (((C6531 + C6530) * C114 + (C6529 + C6528) * C48042) * C48245 *
                C5057 +
            ((C5059 * C1251 + C5055 * C1258 + C5060 * C1256 + C48360 * C1267) *
                 C114 +
             (C5059 * C1257 + C5055 * C1269 + C5060 * C1268 + C48360 * C1274) *
                 C48042) *
                C48245 * C48329) *
               C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
                C48329) *
               C2691 -
           (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
                C48329 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C48245 * C5057) *
               C48087) *
              C48387 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C48245 *
                C5057 +
            ((C5296 + C5297) * C114 + (C5298 + C5299) * C48042) * C48245 *
                C48329) *
               C48087 -
           (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
                C48329 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
                C5057) *
               C2691) *
              C48380 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C48245 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48042) * C48245 *
                C48329) *
               C2691 -
           (((C5636 + C5637) * C48042 + (C5638 + C5639) * C114) * C48245 *
                C48329 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C48245 *
                C5057) *
               C48087) *
              C48367 +
          ((((C5639 + C5638) * C114 + (C5637 + C5636) * C48042) * C48245 *
                C5057 +
            ((C5059 * C313 + C5055 * C332 + C5060 * C314 + C48360 * C333) *
                 C114 +
             (C5059 * C331 + C5055 * C343 + C5060 * C334 + C48360 * C344) *
                 C48042) *
                C48245 * C48329) *
               C48087 -
           (((C5106 + C5107) * C48042 + (C5108 + C5109) * C114) * C48245 *
                C48329 +
            ((C5105 + C5104) * C48042 + (C5103 + C5102) * C114) * C48245 *
                C5057) *
               C2691) *
              C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C510 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48382 -
             (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                 C511 -
             (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                 C48371 +
             (C5059 * C514 + C5055 * C525 + C5060 * C1385 + C48360 * C1394) *
                 C512 +
             (C5059 * C526 + C5055 * C544 + C5060 * C1395 + C48360 * C1412) *
                 C48345) *
                C48245 * C5057 +
            ((C5094 + C5095) * C510 + (C5096 + C5097) * C48382 -
             (C5482 + C5483) * C511 - (C5484 + C5485) * C48371 +
             (C5486 + C5487) * C512 + (C5488 + C5489) * C48345) *
                C48245 * C48329) *
               C2691 +
           (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                 C511 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C48382 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C510) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                 C48371 -
             (C5060 * C1389 + C48360 * C1402 + C5059 * C1385 + C5055 * C1394) *
                 C512 -
             (C5060 * C1403 + C48360 * C1416 + C5059 * C1395 + C5055 * C1412) *
                 C48345) *
                C48245 * C5057 +
            ((C5992 + C5993) * C511 -
             ((C5288 + C5289) * C48382 + (C5290 + C5291) * C510) +
             (C5994 + C5995) * C48371 - (C7460 + C7461) * C512 -
             (C7462 + C7463) * C48345) *
                C48245 * C48329) *
               C48087) *
              C2799 +
          ((((C5483 + C5482) * C511 -
             ((C5097 + C5096) * C48382 + (C5095 + C5094) * C510) +
             (C5485 + C5484) * C48371 - (C5487 + C5486) * C512 -
             (C5489 + C5488) * C48345) *
                C48245 * C5057 +
            ((C5490 + C5491) * C511 -
             ((C5098 + C5099) * C48382 + (C5100 + C5101) * C510) +
             (C5492 + C5493) * C48371 - (C5494 + C5495) * C512 -
             (C5496 + C5497) * C48345) *
                C48245 * C48329) *
               C2691 +
           (((C5291 + C5290) * C510 + (C5289 + C5288) * C48382 -
             (C5993 + C5992) * C511 - (C5995 + C5994) * C48371 +
             (C7461 + C7460) * C512 + (C7463 + C7462) * C48345) *
                C48245 * C5057 +
            ((C5296 + C5297) * C510 + (C5298 + C5299) * C48382 -
             (C5996 + C5997) * C511 - (C5998 + C5999) * C48371 +
             (C5059 * C1387 + C5055 * C1398 + C5060 * C1393 + C48360 * C1410) *
                 C512 +
             (C5059 * C1399 + C5055 * C1414 + C5060 * C1411 + C48360 * C1420) *
                 C48345) *
                C48245 * C48329) *
               C48087) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C831 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48311 -
             (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                 C832 -
             (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                 C48129) *
                C48245 * C5057 +
            ((C5094 + C5095) * C831 + (C5096 + C5097) * C48311 -
             (C5482 + C5483) * C832 - (C5484 + C5485) * C48129) *
                C48245 * C48329) *
               C2691 +
           (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                 C832 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C48311 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C831) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                 C48129) *
                C48245 * C5057 +
            ((C5992 + C5993) * C832 -
             ((C5288 + C5289) * C48311 + (C5290 + C5291) * C831) +
             (C5994 + C5995) * C48129) *
                C48245 * C48329) *
               C48087) *
              C48003 +
          ((((C5483 + C5482) * C832 -
             ((C5097 + C5096) * C48311 + (C5095 + C5094) * C831) +
             (C5485 + C5484) * C48129) *
                C48245 * C5057 +
            ((C5490 + C5491) * C832 -
             ((C5098 + C5099) * C48311 + (C5100 + C5101) * C831) +
             (C5492 + C5493) * C48129) *
                C48245 * C48329) *
               C2691 +
           (((C5291 + C5290) * C831 + (C5289 + C5288) * C48311 -
             (C5993 + C5992) * C832 - (C5995 + C5994) * C48129) *
                C48245 * C5057 +
            ((C5296 + C5297) * C831 + (C5298 + C5299) * C48311 -
             (C5996 + C5997) * C832 - (C5998 + C5999) * C48129) *
                C48245 * C48329) *
               C48087) *
              C48011 +
          ((((C5101 + C5100) * C831 + (C5099 + C5098) * C48311 -
             (C5491 + C5490) * C832 - (C5493 + C5492) * C48129) *
                C48245 * C5057 +
            ((C5102 + C5103) * C831 + (C5104 + C5105) * C48311 -
             (C5778 + C5779) * C832 - (C5780 + C5781) * C48129) *
                C48245 * C48329) *
               C2691 +
           (((C5997 + C5996) * C832 -
             ((C5299 + C5298) * C48311 + (C5297 + C5296) * C831) +
             (C5999 + C5998) * C48129) *
                C48245 * C5057 +
            ((C5059 * C1016 + C5055 * C1024 + C5060 * C1691 + C48360 * C1692) *
                 C832 -
             ((C5636 + C5637) * C48311 + (C5638 + C5639) * C831) +
             (C5059 * C1025 + C5055 * C1031 + C5060 * C1693 + C48360 * C1694) *
                 C48129) *
                C48245 * C48329) *
               C48087) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
                C48329) *
               C2691 -
           (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
                C48329 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C48245 * C5057) *
               C48087) *
              C48387 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C48245 *
                C5057 +
            ((C5296 + C5297) * C114 + (C5298 + C5299) * C48042) * C48245 *
                C48329) *
               C48087 -
           (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
                C48329 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
                C5057) *
               C2691) *
              C48380 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C48245 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48042) * C48245 *
                C48329) *
               C2691 -
           (((C5636 + C5637) * C48042 + (C5638 + C5639) * C114) * C48245 *
                C48329 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C48245 *
                C5057) *
               C48087) *
              C48367 +
          ((((C5639 + C5638) * C114 + (C5637 + C5636) * C48042) * C48245 *
                C5057 +
            ((C5059 * C313 + C5055 * C332 + C5060 * C314 + C48360 * C333) *
                 C114 +
             (C5059 * C331 + C5055 * C343 + C5060 * C334 + C48360 * C344) *
                 C48042) *
                C48245 * C48329) *
               C48087 -
           (((C5106 + C5107) * C48042 + (C5108 + C5109) * C114) * C48245 *
                C48329 +
            ((C5105 + C5104) * C48042 + (C5103 + C5102) * C114) * C48245 *
                C5057) *
               C2691) *
              C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
                C48329) *
               C48388 -
           (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
                C48329 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C48245 * C5057) *
               C48384 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C5057 +
            ((C5292 + C5293) * C114 + (C5294 + C5295) * C48042) * C48245 *
                C48329) *
               C48374 -
           (((C6528 + C6529) * C48042 + (C6530 + C6531) * C114) * C48245 *
                C48329 +
            ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                 C48042 +
             (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                 C114) *
                C48245 * C5057) *
               C48352) *
              C2799 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C48245 *
                C5057 +
            ((C5296 + C5297) * C114 + (C5298 + C5299) * C48042) * C48245 *
                C48329) *
               C48384 -
           (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
                C48329 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
                C5057) *
               C48388 -
           (((C5300 + C5301) * C48042 + (C5302 + C5303) * C114) * C48245 *
                C48329 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C48245 *
                C5057) *
               C48374 +
           (((C6531 + C6530) * C114 + (C6529 + C6528) * C48042) * C48245 *
                C5057 +
            ((C5059 * C1251 + C5055 * C1258 + C5060 * C1256 + C48360 * C1267) *
                 C114 +
             (C5059 * C1257 + C5055 * C1269 + C5060 * C1268 + C48360 * C1274) *
                 C48042) *
                C48245 * C48329) *
               C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C3467 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C3465 -
             (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                 C3468 -
             (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                 C48129) *
                C48245 * C5057 +
            ((C5094 + C5095) * C3467 + (C5096 + C5097) * C3465 -
             (C5482 + C5483) * C3468 - (C5484 + C5485) * C48129) *
                C48245 * C48329) *
               C48083 +
           (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                 C3468 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C3465 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C3467) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                 C48129) *
                C48245 * C5057 +
            ((C5992 + C5993) * C3468 -
             ((C5288 + C5289) * C3465 + (C5290 + C5291) * C3467) +
             (C5994 + C5995) * C48129) *
                C48245 * C48329) *
               C48090 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C3467 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C3465 -
             (C5060 * C1813 + C48360 * C1816 + C5059 * C1388 + C5055 * C1400) *
                 C3468 -
             (C5060 * C1817 + C48360 * C1822 + C5059 * C1401 + C5055 * C1415) *
                 C48129) *
                C48245 * C5057 +
            ((C5292 + C5293) * C3467 + (C5294 + C5295) * C3465 -
             (C6734 + C6735) * C3468 - (C6736 + C6737) * C48129) *
                C48245 * C48329) *
               C3071) *
              C48296 +
          ((((C5483 + C5482) * C3468 -
             ((C5097 + C5096) * C3465 + (C5095 + C5094) * C3467) +
             (C5485 + C5484) * C48129) *
                C48245 * C5057 +
            ((C5490 + C5491) * C3468 -
             ((C5098 + C5099) * C3465 + (C5100 + C5101) * C3467) +
             (C5492 + C5493) * C48129) *
                C48245 * C48329) *
               C48083 +
           (((C5291 + C5290) * C3467 + (C5289 + C5288) * C3465 -
             (C5993 + C5992) * C3468 - (C5995 + C5994) * C48129) *
                C48245 * C5057 +
            ((C5296 + C5297) * C3467 + (C5298 + C5299) * C3465 -
             (C5996 + C5997) * C3468 - (C5998 + C5999) * C48129) *
                C48245 * C48329) *
               C48090 +
           (((C6735 + C6734) * C3468 -
             ((C5295 + C5294) * C3465 + (C5293 + C5292) * C3467) +
             (C6737 + C6736) * C48129) *
                C48245 * C5057 +
            ((C5059 * C1392 + C5055 * C1408 + C5060 * C1815 + C48360 * C1820) *
                 C3468 -
             ((C5300 + C5301) * C3465 + (C5302 + C5303) * C3467) +
             (C5059 * C1409 + C5055 * C1419 + C5060 * C1821 + C48360 * C1824) *
                 C48129) *
                C48245 * C48329) *
               C3071) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C47030 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48125 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C47022 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C48132 +
            (C5059 * C514 + C5055 * C525 + C5060 * C1385 + C48360 * C1394) *
                C47036 +
            (C5059 * C526 + C5055 * C544 + C5060 * C1395 + C48360 * C1412) *
                C4043) *
               C48245 * C5057 +
           ((C5094 + C5095) * C47030 + (C5096 + C5097) * C48125 -
            (C5482 + C5483) * C47022 - (C5484 + C5485) * C48132 +
            (C5486 + C5487) * C47036 + (C5488 + C5489) * C4043) *
               C48245 * C48329) *
              C48083 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                C47022 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48125 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C47030) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                C48132 -
            (C5060 * C1389 + C48360 * C1402 + C5059 * C1385 + C5055 * C1394) *
                C47036 -
            (C5060 * C1403 + C48360 * C1416 + C5059 * C1395 + C5055 * C1412) *
                C4043) *
               C48245 * C5057 +
           ((C5992 + C5993) * C47022 -
            ((C5288 + C5289) * C48125 + (C5290 + C5291) * C47030) +
            (C5994 + C5995) * C48132 - (C7460 + C7461) * C47036 -
            (C7462 + C7463) * C4043) *
               C48245 * C48329) *
              C48090 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C47030 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C48125 -
            (C5060 * C1813 + C48360 * C1816 + C5059 * C1388 + C5055 * C1400) *
                C47022 -
            (C5060 * C1817 + C48360 * C1822 + C5059 * C1401 + C5055 * C1415) *
                C48132 +
            (C5059 * C1389 + C5055 * C1402 + C5060 * C6381 + C48360 * C6383) *
                C47036 +
            (C5059 * C1403 + C5055 * C1416 + C5060 * C6384 + C48360 * C6387) *
                C4043) *
               C48245 * C5057 +
           ((C5292 + C5293) * C47030 + (C5294 + C5295) * C48125 -
            (C6734 + C6735) * C47022 - (C6736 + C6737) * C48132 +
            (C5059 * C1391 + C5055 * C1406 + C5060 * C6382 + C48360 * C6385) *
                C47036 +
            (C5059 * C1407 + C5055 * C1418 + C5060 * C6386 + C48360 * C6388) *
                C4043) *
               C48245 * C48329) *
              C3071) *
         C47998) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C3467 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C3465 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C3468 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C48129) *
               C48245 * C5057 +
           ((C5094 + C5095) * C3467 + (C5096 + C5097) * C3465 -
            (C5482 + C5483) * C3468 - (C5484 + C5485) * C48129) *
               C48245 * C48329) *
              C48388 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                C3468 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C3465 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C3467) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                C48129) *
               C48245 * C5057 +
           ((C5992 + C5993) * C3468 -
            ((C5288 + C5289) * C3465 + (C5290 + C5291) * C3467) +
            (C5994 + C5995) * C48129) *
               C48245 * C48329) *
              C48384 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C3467 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C3465 -
            (C5060 * C1813 + C48360 * C1816 + C5059 * C1388 + C5055 * C1400) *
                C3468 -
            (C5060 * C1817 + C48360 * C1822 + C5059 * C1401 + C5055 * C1415) *
                C48129) *
               C48245 * C5057 +
           ((C5292 + C5293) * C3467 + (C5294 + C5295) * C3465 -
            (C6734 + C6735) * C3468 - (C6736 + C6737) * C48129) *
               C48245 * C48329) *
              C48374 +
          (((C5059 * C1813 + C5055 * C1816 + C5060 * C6867 + C48360 * C6869) *
                C3468 -
            ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                 C3465 +
             (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                 C3467) +
            (C5059 * C1817 + C5055 * C1822 + C5060 * C6870 + C48360 * C6873) *
                C48129) *
               C48245 * C5057 +
           ((C5059 * C1814 + C5055 * C1818 + C5060 * C6868 + C48360 * C6871) *
                C3468 -
            ((C6528 + C6529) * C3465 + (C6530 + C6531) * C3467) +
            (C5059 * C1819 + C5055 * C1823 + C5060 * C6872 + C48360 * C6874) *
                C48129) *
               C48245 * C48329) *
              C48352) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C3467 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C3465 -
             (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                 C3468 -
             (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                 C48129) *
                C48245 * C5057 +
            ((C5094 + C5095) * C3467 + (C5096 + C5097) * C3465 -
             (C5482 + C5483) * C3468 - (C5484 + C5485) * C48129) *
                C48245 * C48329) *
               C2691 +
           (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                 C3468 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C3465 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C3467) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                 C48129) *
                C48245 * C5057 +
            ((C5992 + C5993) * C3468 -
             ((C5288 + C5289) * C3465 + (C5290 + C5291) * C3467) +
             (C5994 + C5995) * C48129) *
                C48245 * C48329) *
               C48087) *
              C48378 +
          ((((C5483 + C5482) * C3468 -
             ((C5097 + C5096) * C3465 + (C5095 + C5094) * C3467) +
             (C5485 + C5484) * C48129) *
                C48245 * C5057 +
            ((C5490 + C5491) * C3468 -
             ((C5098 + C5099) * C3465 + (C5100 + C5101) * C3467) +
             (C5492 + C5493) * C48129) *
                C48245 * C48329) *
               C2691 +
           (((C5291 + C5290) * C3467 + (C5289 + C5288) * C3465 -
             (C5993 + C5992) * C3468 - (C5995 + C5994) * C48129) *
                C48245 * C5057 +
            ((C5296 + C5297) * C3467 + (C5298 + C5299) * C3465 -
             (C5996 + C5997) * C3468 - (C5998 + C5999) * C48129) *
                C48245 * C48329) *
               C48087) *
              C48365 +
          ((((C5101 + C5100) * C3467 + (C5099 + C5098) * C3465 -
             (C5491 + C5490) * C3468 - (C5493 + C5492) * C48129) *
                C48245 * C5057 +
            ((C5102 + C5103) * C3467 + (C5104 + C5105) * C3465 -
             (C5778 + C5779) * C3468 - (C5780 + C5781) * C48129) *
                C48245 * C48329) *
               C2691 +
           (((C5997 + C5996) * C3468 -
             ((C5299 + C5298) * C3465 + (C5297 + C5296) * C3467) +
             (C5999 + C5998) * C48129) *
                C48245 * C5057 +
            ((C5059 * C1016 + C5055 * C1024 + C5060 * C1691 + C48360 * C1692) *
                 C3468 -
             ((C5636 + C5637) * C3465 + (C5638 + C5639) * C3467) +
             (C5059 * C1025 + C5055 * C1031 + C5060 * C1693 + C48360 * C1694) *
                 C48129) *
                C48245 * C48329) *
               C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C3757 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48389 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C3758 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C48386 +
            (C5059 * C514 + C5055 * C525 + C5060 * C1385 + C48360 * C1394) *
                C3759 +
            (C5059 * C526 + C5055 * C544 + C5060 * C1395 + C48360 * C1412) *
                C48377 -
            (C5060 * C2581 + C48360 * C2584 + C5059 * C2147 + C5055 * C2153) *
                C3760 -
            (C5060 * C2585 + C48360 * C2590 + C5059 * C2154 + C5055 * C2165) *
                C48358) *
               C48245 * C5057 +
           ((C5094 + C5095) * C3757 + (C5096 + C5097) * C48389 -
            (C5482 + C5483) * C3758 - (C5484 + C5485) * C48386 +
            (C5486 + C5487) * C3759 + (C5488 + C5489) * C48377 -
            (C7602 + C7603) * C3760 - (C7604 + C7605) * C48358) *
               C48245 * C48329) *
              C2691 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                C3758 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48389 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C3757) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                C48386 -
            (C5060 * C1389 + C48360 * C1402 + C5059 * C1385 + C5055 * C1394) *
                C3759 -
            (C5060 * C1403 + C48360 * C1416 + C5059 * C1395 + C5055 * C1412) *
                C48377 +
            (C5059 * C2581 + C5055 * C2584 + C5060 * C7735 + C48360 * C7737) *
                C3760 +
            (C5059 * C2585 + C5055 * C2590 + C5060 * C7738 + C48360 * C7741) *
                C48358) *
               C48245 * C5057 +
           ((C5992 + C5993) * C3758 -
            ((C5288 + C5289) * C48389 + (C5290 + C5291) * C3757) +
            (C5994 + C5995) * C48386 - (C7460 + C7461) * C3759 -
            (C7462 + C7463) * C48377 +
            (C5059 * C2582 + C5055 * C2586 + C5060 * C7736 + C48360 * C7739) *
                C3760 +
            (C5059 * C2587 + C5055 * C2591 + C5060 * C7740 + C48360 * C7742) *
                C48358) *
               C48245 * C48329) *
              C48087) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C47030 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48125 -
             (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                 C47022 -
             (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                 C48132 +
             (C5059 * C514 + C5055 * C525 + C5060 * C1385 + C48360 * C1394) *
                 C47036 +
             (C5059 * C526 + C5055 * C544 + C5060 * C1395 + C48360 * C1412) *
                 C4043) *
                C48245 * C5057 +
            ((C5094 + C5095) * C47030 + (C5096 + C5097) * C48125 -
             (C5482 + C5483) * C47022 - (C5484 + C5485) * C48132 +
             (C5486 + C5487) * C47036 + (C5488 + C5489) * C4043) *
                C48245 * C48329) *
               C2691 +
           (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                 C47022 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C48125 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C47030) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                 C48132 -
             (C5060 * C1389 + C48360 * C1402 + C5059 * C1385 + C5055 * C1394) *
                 C47036 -
             (C5060 * C1403 + C48360 * C1416 + C5059 * C1395 + C5055 * C1412) *
                 C4043) *
                C48245 * C5057 +
            ((C5992 + C5993) * C47022 -
             ((C5288 + C5289) * C48125 + (C5290 + C5291) * C47030) +
             (C5994 + C5995) * C48132 - (C7460 + C7461) * C47036 -
             (C7462 + C7463) * C4043) *
                C48245 * C48329) *
               C48087) *
              C48296 +
          ((((C5483 + C5482) * C47022 -
             ((C5097 + C5096) * C48125 + (C5095 + C5094) * C47030) +
             (C5485 + C5484) * C48132 - (C5487 + C5486) * C47036 -
             (C5489 + C5488) * C4043) *
                C48245 * C5057 +
            ((C5490 + C5491) * C47022 -
             ((C5098 + C5099) * C48125 + (C5100 + C5101) * C47030) +
             (C5492 + C5493) * C48132 - (C5494 + C5495) * C47036 -
             (C5496 + C5497) * C4043) *
                C48245 * C48329) *
               C2691 +
           (((C5291 + C5290) * C47030 + (C5289 + C5288) * C48125 -
             (C5993 + C5992) * C47022 - (C5995 + C5994) * C48132 +
             (C7461 + C7460) * C47036 + (C7463 + C7462) * C4043) *
                C48245 * C5057 +
            ((C5296 + C5297) * C47030 + (C5298 + C5299) * C48125 -
             (C5996 + C5997) * C47022 - (C5998 + C5999) * C48132 +
             (C5059 * C1387 + C5055 * C1398 + C5060 * C1393 + C48360 * C1410) *
                 C47036 +
             (C5059 * C1399 + C5055 * C1414 + C5060 * C1411 + C48360 * C1420) *
                 C4043) *
                C48245 * C48329) *
               C48087) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C3467 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C3465 -
             (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                 C3468 -
             (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                 C48129) *
                C48245 * C5057 +
            ((C5094 + C5095) * C3467 + (C5096 + C5097) * C3465 -
             (C5482 + C5483) * C3468 - (C5484 + C5485) * C48129) *
                C48245 * C48329) *
               C2691 +
           (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                 C3468 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C3465 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C3467) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                 C48129) *
                C48245 * C5057 +
            ((C5992 + C5993) * C3468 -
             ((C5288 + C5289) * C3465 + (C5290 + C5291) * C3467) +
             (C5994 + C5995) * C48129) *
                C48245 * C48329) *
               C48087) *
              C48378 +
          ((((C5483 + C5482) * C3468 -
             ((C5097 + C5096) * C3465 + (C5095 + C5094) * C3467) +
             (C5485 + C5484) * C48129) *
                C48245 * C5057 +
            ((C5490 + C5491) * C3468 -
             ((C5098 + C5099) * C3465 + (C5100 + C5101) * C3467) +
             (C5492 + C5493) * C48129) *
                C48245 * C48329) *
               C2691 +
           (((C5291 + C5290) * C3467 + (C5289 + C5288) * C3465 -
             (C5993 + C5992) * C3468 - (C5995 + C5994) * C48129) *
                C48245 * C5057 +
            ((C5296 + C5297) * C3467 + (C5298 + C5299) * C3465 -
             (C5996 + C5997) * C3468 - (C5998 + C5999) * C48129) *
                C48245 * C48329) *
               C48087) *
              C48365 +
          ((((C5101 + C5100) * C3467 + (C5099 + C5098) * C3465 -
             (C5491 + C5490) * C3468 - (C5493 + C5492) * C48129) *
                C48245 * C5057 +
            ((C5102 + C5103) * C3467 + (C5104 + C5105) * C3465 -
             (C5778 + C5779) * C3468 - (C5780 + C5781) * C48129) *
                C48245 * C48329) *
               C2691 +
           (((C5997 + C5996) * C3468 -
             ((C5299 + C5298) * C3465 + (C5297 + C5296) * C3467) +
             (C5999 + C5998) * C48129) *
                C48245 * C5057 +
            ((C5059 * C1016 + C5055 * C1024 + C5060 * C1691 + C48360 * C1692) *
                 C3468 -
             ((C5636 + C5637) * C3465 + (C5638 + C5639) * C3467) +
             (C5059 * C1025 + C5055 * C1031 + C5060 * C1693 + C48360 * C1694) *
                 C48129) *
                C48245 * C48329) *
               C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C3467 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C3465 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C3468 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C48129) *
               C48245 * C5057 +
           ((C5094 + C5095) * C3467 + (C5096 + C5097) * C3465 -
            (C5482 + C5483) * C3468 - (C5484 + C5485) * C48129) *
               C48245 * C48329) *
              C48388 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                C3468 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C3465 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C3467) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                C48129) *
               C48245 * C5057 +
           ((C5992 + C5993) * C3468 -
            ((C5288 + C5289) * C3465 + (C5290 + C5291) * C3467) +
            (C5994 + C5995) * C48129) *
               C48245 * C48329) *
              C48384 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C3467 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C3465 -
            (C5060 * C1813 + C48360 * C1816 + C5059 * C1388 + C5055 * C1400) *
                C3468 -
            (C5060 * C1817 + C48360 * C1822 + C5059 * C1401 + C5055 * C1415) *
                C48129) *
               C48245 * C5057 +
           ((C5292 + C5293) * C3467 + (C5294 + C5295) * C3465 -
            (C6734 + C6735) * C3468 - (C6736 + C6737) * C48129) *
               C48245 * C48329) *
              C48374 +
          (((C5059 * C1813 + C5055 * C1816 + C5060 * C6867 + C48360 * C6869) *
                C3468 -
            ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                 C3465 +
             (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                 C3467) +
            (C5059 * C1817 + C5055 * C1822 + C5060 * C6870 + C48360 * C6873) *
                C48129) *
               C48245 * C5057 +
           ((C5059 * C1814 + C5055 * C1818 + C5060 * C6868 + C48360 * C6871) *
                C3468 -
            ((C6528 + C6529) * C3465 + (C6530 + C6531) * C3467) +
            (C5059 * C1819 + C5055 * C1823 + C5060 * C6872 + C48360 * C6874) *
                C48129) *
               C48245 * C48329) *
              C48352) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
                C48329) *
               C1519 -
           (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
                C48329 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C48245 * C5057) *
               C1520 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C5057 +
            ((C5292 + C5293) * C114 + (C5294 + C5295) * C48042) * C48245 *
                C48329) *
               C1521 -
           (((C6528 + C6529) * C48042 + (C6530 + C6531) * C114) * C48245 *
                C48329 +
            ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                 C48042 +
             (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                 C114) *
                C48245 * C5057) *
               C48352) *
              C48296 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C48245 *
                C5057 +
            ((C5296 + C5297) * C114 + (C5298 + C5299) * C48042) * C48245 *
                C48329) *
               C1520 -
           (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
                C48329 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
                C5057) *
               C1519 -
           (((C5300 + C5301) * C48042 + (C5302 + C5303) * C114) * C48245 *
                C48329 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C48245 *
                C5057) *
               C1521 +
           (((C6531 + C6530) * C114 + (C6529 + C6528) * C48042) * C48245 *
                C5057 +
            ((C5059 * C1251 + C5055 * C1258 + C5060 * C1256 + C48360 * C1267) *
                 C114 +
             (C5059 * C1257 + C5055 * C1269 + C5060 * C1268 + C48360 * C1274) *
                 C48042) *
                C48245 * C48329) *
               C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
                C48329) *
               C48310 -
           (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
                C48329 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C48245 * C5057) *
               C48087) *
              C713 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C48245 *
                C5057 +
            ((C5296 + C5297) * C114 + (C5298 + C5299) * C48042) * C48245 *
                C48329) *
               C48087 -
           (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
                C48329 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
                C5057) *
               C48310) *
              C714 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C48245 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48042) * C48245 *
                C48329) *
               C48310 -
           (((C5636 + C5637) * C48042 + (C5638 + C5639) * C114) * C48245 *
                C48329 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C48245 *
                C5057) *
               C48087) *
              C715 +
          ((((C5639 + C5638) * C114 + (C5637 + C5636) * C48042) * C48245 *
                C5057 +
            ((C5059 * C313 + C5055 * C332 + C5060 * C314 + C48360 * C333) *
                 C114 +
             (C5059 * C331 + C5055 * C343 + C5060 * C334 + C48360 * C344) *
                 C48042) *
                C48245 * C48329) *
               C48087 -
           (((C5106 + C5107) * C48042 + (C5108 + C5109) * C114) * C48245 *
                C48329 +
            ((C5105 + C5104) * C48042 + (C5103 + C5102) * C114) * C48245 *
                C5057) *
               C48310) *
              C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C1938 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C1935 -
             (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                 C1939 -
             (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                 C1936 +
             (C5059 * C514 + C5055 * C525 + C5060 * C1385 + C48360 * C1394) *
                 C1940 +
             (C5059 * C526 + C5055 * C544 + C5060 * C1395 + C48360 * C1412) *
                 C48345) *
                C48245 * C5057 +
            ((C5094 + C5095) * C1938 + (C5096 + C5097) * C1935 -
             (C5482 + C5483) * C1939 - (C5484 + C5485) * C1936 +
             (C5486 + C5487) * C1940 + (C5488 + C5489) * C48345) *
                C48245 * C48329) *
               C48310 +
           (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                 C1939 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C1935 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C1938) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                 C1936 -
             (C5060 * C1389 + C48360 * C1402 + C5059 * C1385 + C5055 * C1394) *
                 C1940 -
             (C5060 * C1403 + C48360 * C1416 + C5059 * C1395 + C5055 * C1412) *
                 C48345) *
                C48245 * C5057 +
            ((C5992 + C5993) * C1939 -
             ((C5288 + C5289) * C1935 + (C5290 + C5291) * C1938) +
             (C5994 + C5995) * C1936 - (C7460 + C7461) * C1940 -
             (C7462 + C7463) * C48345) *
                C48245 * C48329) *
               C48087) *
              C48296 +
          ((((C5483 + C5482) * C1939 -
             ((C5097 + C5096) * C1935 + (C5095 + C5094) * C1938) +
             (C5485 + C5484) * C1936 - (C5487 + C5486) * C1940 -
             (C5489 + C5488) * C48345) *
                C48245 * C5057 +
            ((C5490 + C5491) * C1939 -
             ((C5098 + C5099) * C1935 + (C5100 + C5101) * C1938) +
             (C5492 + C5493) * C1936 - (C5494 + C5495) * C1940 -
             (C5496 + C5497) * C48345) *
                C48245 * C48329) *
               C48310 +
           (((C5291 + C5290) * C1938 + (C5289 + C5288) * C1935 -
             (C5993 + C5992) * C1939 - (C5995 + C5994) * C1936 +
             (C7461 + C7460) * C1940 + (C7463 + C7462) * C48345) *
                C48245 * C5057 +
            ((C5296 + C5297) * C1938 + (C5298 + C5299) * C1935 -
             (C5996 + C5997) * C1939 - (C5998 + C5999) * C1936 +
             (C5059 * C1387 + C5055 * C1398 + C5060 * C1393 + C48360 * C1410) *
                 C1940 +
             (C5059 * C1399 + C5055 * C1414 + C5060 * C1411 + C48360 * C1420) *
                 C48345) *
                C48245 * C48329) *
               C48087) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C831 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48311 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C832 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C48129) *
               C48245 * C5057 +
           ((C5094 + C5095) * C831 + (C5096 + C5097) * C48311 -
            (C5482 + C5483) * C832 - (C5484 + C5485) * C48129) *
               C48245 * C48329) *
              C1519 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                C832 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48311 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C831) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                C48129) *
               C48245 * C5057 +
           ((C5992 + C5993) * C832 -
            ((C5288 + C5289) * C48311 + (C5290 + C5291) * C831) +
            (C5994 + C5995) * C48129) *
               C48245 * C48329) *
              C1520 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C831 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C48311 -
            (C5060 * C1813 + C48360 * C1816 + C5059 * C1388 + C5055 * C1400) *
                C832 -
            (C5060 * C1817 + C48360 * C1822 + C5059 * C1401 + C5055 * C1415) *
                C48129) *
               C48245 * C5057 +
           ((C5292 + C5293) * C831 + (C5294 + C5295) * C48311 -
            (C6734 + C6735) * C832 - (C6736 + C6737) * C48129) *
               C48245 * C48329) *
              C1521 +
          (((C5059 * C1813 + C5055 * C1816 + C5060 * C6867 + C48360 * C6869) *
                C832 -
            ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                 C48311 +
             (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                 C831) +
            (C5059 * C1817 + C5055 * C1822 + C5060 * C6870 + C48360 * C6873) *
                C48129) *
               C48245 * C5057 +
           ((C5059 * C1814 + C5055 * C1818 + C5060 * C6868 + C48360 * C6871) *
                C832 -
            ((C6528 + C6529) * C48311 + (C6530 + C6531) * C831) +
            (C5059 * C1819 + C5055 * C1823 + C5060 * C6872 + C48360 * C6874) *
                C48129) *
               C48245 * C48329) *
              C48352) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C831 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48311 -
             (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                 C832 -
             (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                 C48129) *
                C48245 * C5057 +
            ((C5094 + C5095) * C831 + (C5096 + C5097) * C48311 -
             (C5482 + C5483) * C832 - (C5484 + C5485) * C48129) *
                C48245 * C48329) *
               C48310 +
           (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                 C832 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C48311 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C831) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                 C48129) *
                C48245 * C5057 +
            ((C5992 + C5993) * C832 -
             ((C5288 + C5289) * C48311 + (C5290 + C5291) * C831) +
             (C5994 + C5995) * C48129) *
                C48245 * C48329) *
               C48087) *
              C302 +
          ((((C5483 + C5482) * C832 -
             ((C5097 + C5096) * C48311 + (C5095 + C5094) * C831) +
             (C5485 + C5484) * C48129) *
                C48245 * C5057 +
            ((C5490 + C5491) * C832 -
             ((C5098 + C5099) * C48311 + (C5100 + C5101) * C831) +
             (C5492 + C5493) * C48129) *
                C48245 * C48329) *
               C48310 +
           (((C5291 + C5290) * C831 + (C5289 + C5288) * C48311 -
             (C5993 + C5992) * C832 - (C5995 + C5994) * C48129) *
                C48245 * C5057 +
            ((C5296 + C5297) * C831 + (C5298 + C5299) * C48311 -
             (C5996 + C5997) * C832 - (C5998 + C5999) * C48129) *
                C48245 * C48329) *
               C48087) *
              C303 +
          ((((C5101 + C5100) * C831 + (C5099 + C5098) * C48311 -
             (C5491 + C5490) * C832 - (C5493 + C5492) * C48129) *
                C48245 * C5057 +
            ((C5102 + C5103) * C831 + (C5104 + C5105) * C48311 -
             (C5778 + C5779) * C832 - (C5780 + C5781) * C48129) *
                C48245 * C48329) *
               C48310 +
           (((C5997 + C5996) * C832 -
             ((C5299 + C5298) * C48311 + (C5297 + C5296) * C831) +
             (C5999 + C5998) * C48129) *
                C48245 * C5057 +
            ((C5059 * C1016 + C5055 * C1024 + C5060 * C1691 + C48360 * C1692) *
                 C832 -
             ((C5636 + C5637) * C48311 + (C5638 + C5639) * C831) +
             (C5059 * C1025 + C5055 * C1031 + C5060 * C1693 + C48360 * C1694) *
                 C48129) *
                C48245 * C48329) *
               C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C2447 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C2443 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C2448 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C2444 +
            (C5059 * C514 + C5055 * C525 + C5060 * C1385 + C48360 * C1394) *
                C2449 +
            (C5059 * C526 + C5055 * C544 + C5060 * C1395 + C48360 * C1412) *
                C2445 -
            (C5060 * C2581 + C48360 * C2584 + C5059 * C2147 + C5055 * C2153) *
                C2450 -
            (C5060 * C2585 + C48360 * C2590 + C5059 * C2154 + C5055 * C2165) *
                C48358) *
               C48245 * C5057 +
           ((C5094 + C5095) * C2447 + (C5096 + C5097) * C2443 -
            (C5482 + C5483) * C2448 - (C5484 + C5485) * C2444 +
            (C5486 + C5487) * C2449 + (C5488 + C5489) * C2445 -
            (C7602 + C7603) * C2450 - (C7604 + C7605) * C48358) *
               C48245 * C48329) *
              C48310 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                C2448 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C2443 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C2447) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                C2444 -
            (C5060 * C1389 + C48360 * C1402 + C5059 * C1385 + C5055 * C1394) *
                C2449 -
            (C5060 * C1403 + C48360 * C1416 + C5059 * C1395 + C5055 * C1412) *
                C2445 +
            (C5059 * C2581 + C5055 * C2584 + C5060 * C7735 + C48360 * C7737) *
                C2450 +
            (C5059 * C2585 + C5055 * C2590 + C5060 * C7738 + C48360 * C7741) *
                C48358) *
               C48245 * C5057 +
           ((C5992 + C5993) * C2448 -
            ((C5288 + C5289) * C2443 + (C5290 + C5291) * C2447) +
            (C5994 + C5995) * C2444 - (C7460 + C7461) * C2449 -
            (C7462 + C7463) * C2445 +
            (C5059 * C2582 + C5055 * C2586 + C5060 * C7736 + C48360 * C7739) *
                C2450 +
            (C5059 * C2587 + C5055 * C2591 + C5060 * C7740 + C48360 * C7742) *
                C48358) *
               C48245 * C48329) *
              C48087) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                    C114 +
                (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                    C48042) *
                   C48245 * C5057 +
               ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
                   C48329) *
                  C48025 * C108 -
              (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
                   C48329 +
               ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
                   C5057) *
                  C48025 * C109 +
              (((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C48245 *
                   C5057 +
               ((C5102 + C5103) * C114 + (C5104 + C5105) * C48042) * C48245 *
                   C48329) *
                  C48025 * C110 -
              (((C5106 + C5107) * C48042 + (C5108 + C5109) * C114) * C48245 *
                   C48329 +
               ((C5105 + C5104) * C48042 + (C5103 + C5102) * C114) * C48245 *
                   C5057) *
                  C48025 * C111 +
              (((C5109 + C5108) * C114 + (C5107 + C5106) * C48042) * C48245 *
                   C5057 +
               ((C5059 * C120 + C5055 * C133 + C5060 * C717 + C48360 * C718) *
                    C114 +
                (C5059 * C132 + C5055 * C141 + C5060 * C719 + C48360 * C720) *
                    C48042) *
                   C48245 * C48329) *
                  C48025 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                     C114 +
                 (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                     C48042) *
                    C48245 * C5057 +
                ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
                    C48329) *
                   C48381 -
               (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
                    C48329 +
                ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                     C48042 +
                 (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                     C114) *
                    C48245 * C5057) *
                   C48369 +
               (((C5059 * C308 + C5055 * C321 + C5060 * C1253 +
                  C48360 * C1262) *
                     C114 +
                 (C5059 * C322 + C5055 * C338 + C5060 * C1261 +
                  C48360 * C1271) *
                     C48042) *
                    C48245 * C5057 +
                ((C5292 + C5293) * C114 + (C5294 + C5295) * C48042) * C48245 *
                    C48329) *
                   C48342) *
                  C302 +
              ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C48245 *
                    C5057 +
                ((C5296 + C5297) * C114 + (C5298 + C5299) * C48042) * C48245 *
                    C48329) *
                   C48369 -
               (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
                    C48329 +
                ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
                    C5057) *
                   C48381 -
               (((C5300 + C5301) * C48042 + (C5302 + C5303) * C114) * C48245 *
                    C48329 +
                ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C48245 *
                    C5057) *
                   C48342) *
                  C303 +
              ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C48245 *
                    C5057 +
                ((C5102 + C5103) * C114 + (C5104 + C5105) * C48042) * C48245 *
                    C48329) *
                   C48381 -
               (((C5060 * C329 + C48360 * C342 + C5059 * C328 + C5055 * C341) *
                     C48042 +
                 (C5060 * C312 + C48360 * C330 + C5059 * C311 + C5055 * C327) *
                     C114) *
                    C48245 * C48329 +
                ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C48245 *
                    C5057) *
                   C48369 +
               (((C5303 + C5302) * C114 + (C5301 + C5300) * C48042) * C48245 *
                    C5057 +
                ((C5059 * C312 + C5055 * C330 + C5060 * C1525 +
                  C48360 * C1526) *
                     C114 +
                 (C5059 * C329 + C5055 * C342 + C5060 * C1527 +
                  C48360 * C1528) *
                     C48042) *
                    C48245 * C48329) *
                   C48342) *
                  C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C510 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48382 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C511 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C48371 +
            (C5059 * C514 + C5055 * C525 + C5060 * C1385 + C48360 * C1394) *
                C512 +
            (C5059 * C526 + C5055 * C544 + C5060 * C1395 + C48360 * C1412) *
                C48345) *
               C48245 * C5057 +
           ((C5094 + C5095) * C510 + (C5096 + C5097) * C48382 -
            (C5482 + C5483) * C511 - (C5484 + C5485) * C48371 +
            (C5486 + C5487) * C512 + (C5488 + C5489) * C48345) *
               C48245 * C48329) *
              C48025 * C302 +
          (((C5483 + C5482) * C511 -
            ((C5097 + C5096) * C48382 + (C5095 + C5094) * C510) +
            (C5485 + C5484) * C48371 - (C5487 + C5486) * C512 -
            (C5489 + C5488) * C48345) *
               C48245 * C5057 +
           ((C5490 + C5491) * C511 -
            ((C5098 + C5099) * C48382 + (C5100 + C5101) * C510) +
            (C5492 + C5493) * C48371 - (C5494 + C5495) * C512 -
            (C5496 + C5497) * C48345) *
               C48245 * C48329) *
              C48025 * C303 +
          (((C5101 + C5100) * C510 + (C5099 + C5098) * C48382 -
            (C5491 + C5490) * C511 - (C5493 + C5492) * C48371 +
            (C5495 + C5494) * C512 + (C5497 + C5496) * C48345) *
               C48245 * C5057 +
           ((C5102 + C5103) * C510 + (C5104 + C5105) * C48382 -
            (C5060 * C1016 + C48360 * C1024 + C5059 * C519 + C5055 * C535) *
                C511 -
            (C5060 * C1025 + C48360 * C1031 + C5059 * C536 + C5055 * C549) *
                C48371 +
            (C5059 * C520 + C5055 * C537 + C5060 * C2317 + C48360 * C2318) *
                C512 +
            (C5059 * C538 + C5055 * C550 + C5060 * C2319 + C48360 * C2320) *
                C48345) *
               C48245 * C48329) *
              C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
                C48329) *
               C1177 -
           (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
                C48329 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C48245 * C5057) *
               C1178 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C5057 +
            ((C5292 + C5293) * C114 + (C5294 + C5295) * C48042) * C48245 *
                C48329) *
               C48342) *
              C48378 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C48245 *
                C5057 +
            ((C5296 + C5297) * C114 + (C5298 + C5299) * C48042) * C48245 *
                C48329) *
               C1178 -
           (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
                C48329 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
                C5057) *
               C1177 -
           (((C5300 + C5301) * C48042 + (C5302 + C5303) * C114) * C48245 *
                C48329 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C48245 *
                C5057) *
               C48342) *
              C48365 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C48245 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48042) * C48245 *
                C48329) *
               C1177 -
           (((C5636 + C5637) * C48042 + (C5638 + C5639) * C114) * C48245 *
                C48329 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C48245 *
                C5057) *
               C1178 +
           (((C5303 + C5302) * C114 + (C5301 + C5300) * C48042) * C48245 *
                C5057 +
            ((C5059 * C312 + C5055 * C330 + C5060 * C1525 + C48360 * C1526) *
                 C114 +
             (C5059 * C329 + C5055 * C342 + C5060 * C1527 + C48360 * C1528) *
                 C48042) *
                C48245 * C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48042) *
               C48245 * C5057 +
           ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
               C48329) *
              C1245 -
          (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
               C48329 +
           ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                C48042 +
            (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                C114) *
               C48245 * C5057) *
              C1246 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C114 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C48042) *
               C48245 * C5057 +
           ((C5292 + C5293) * C114 + (C5294 + C5295) * C48042) * C48245 *
               C48329) *
              C1247 -
          (((C5060 * C1266 + C48360 * C1273 + C5059 * C1259 + C5055 * C1270) *
                C48042 +
            (C5060 * C1255 + C48360 * C1265 + C5059 * C1252 + C5055 * C1260) *
                C114) *
               C48245 * C48329 +
           ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                C48042 +
            (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                C114) *
               C48245 * C5057) *
              C1248 +
          (((C5059 * C1254 + C5055 * C1263 + C5060 * C6227 + C48360 * C6229) *
                C114 +
            (C5059 * C1264 + C5055 * C1272 + C5060 * C6230 + C48360 * C6233) *
                C48042) *
               C48245 * C5057 +
           ((C5059 * C1255 + C5055 * C1265 + C5060 * C6228 + C48360 * C6231) *
                C114 +
            (C5059 * C1266 + C5055 * C1273 + C5060 * C6232 + C48360 * C6234) *
                C48042) *
               C48245 * C48329) *
              C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C510 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48382 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C511 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C48371 +
            (C5059 * C514 + C5055 * C525 + C5060 * C1385 + C48360 * C1394) *
                C512 +
            (C5059 * C526 + C5055 * C544 + C5060 * C1395 + C48360 * C1412) *
                C48345) *
               C48245 * C5057 +
           ((C5094 + C5095) * C510 + (C5096 + C5097) * C48382 -
            (C5482 + C5483) * C511 - (C5484 + C5485) * C48371 +
            (C5486 + C5487) * C512 + (C5488 + C5489) * C48345) *
               C48245 * C48329) *
              C1177 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                C511 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48382 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C510) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                C48371 -
            (C5060 * C1389 + C48360 * C1402 + C5059 * C1385 + C5055 * C1394) *
                C512 -
            (C5060 * C1403 + C48360 * C1416 + C5059 * C1395 + C5055 * C1412) *
                C48345) *
               C48245 * C5057 +
           ((C5992 + C5993) * C511 -
            ((C5288 + C5289) * C48382 + (C5290 + C5291) * C510) +
            (C5994 + C5995) * C48371 -
            (C5060 * C1391 + C48360 * C1406 + C5059 * C1386 + C5055 * C1396) *
                C512 -
            (C5060 * C1407 + C48360 * C1418 + C5059 * C1397 + C5055 * C1413) *
                C48345) *
               C48245 * C48329) *
              C1178 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C510 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C48382 -
            (C5060 * C1813 + C48360 * C1816 + C5059 * C1388 + C5055 * C1400) *
                C511 -
            (C5060 * C1817 + C48360 * C1822 + C5059 * C1401 + C5055 * C1415) *
                C48371 +
            (C5059 * C1389 + C5055 * C1402 + C5060 * C6381 + C48360 * C6383) *
                C512 +
            (C5059 * C1403 + C5055 * C1416 + C5060 * C6384 + C48360 * C6387) *
                C48345) *
               C48245 * C5057 +
           ((C5292 + C5293) * C510 + (C5294 + C5295) * C48382 -
            (C5060 * C1814 + C48360 * C1818 + C5059 * C1390 + C5055 * C1404) *
                C511 -
            (C5060 * C1819 + C48360 * C1823 + C5059 * C1405 + C5055 * C1417) *
                C48371 +
            (C5059 * C1391 + C5055 * C1406 + C5060 * C6382 + C48360 * C6385) *
                C512 +
            (C5059 * C1407 + C5055 * C1418 + C5060 * C6386 + C48360 * C6388) *
                C48345) *
               C48245 * C48329) *
              C48342) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C1938 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C1935 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C1939 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C1936 +
            (C5059 * C514 + C5055 * C525 + C5060 * C1385 + C48360 * C1394) *
                C1940 +
            (C5059 * C526 + C5055 * C544 + C5060 * C1395 + C48360 * C1412) *
                C48345) *
               C48245 * C5057 +
           ((C5094 + C5095) * C1938 + (C5096 + C5097) * C1935 -
            (C5482 + C5483) * C1939 - (C5484 + C5485) * C1936 +
            (C5486 + C5487) * C1940 + (C5488 + C5489) * C48345) *
               C48245 * C48329) *
              C48025 * C48378 +
          (((C5483 + C5482) * C1939 -
            ((C5097 + C5096) * C1935 + (C5095 + C5094) * C1938) +
            (C5485 + C5484) * C1936 - (C5487 + C5486) * C1940 -
            (C5489 + C5488) * C48345) *
               C48245 * C5057 +
           ((C5490 + C5491) * C1939 -
            ((C5098 + C5099) * C1935 + (C5100 + C5101) * C1938) +
            (C5492 + C5493) * C1936 - (C5494 + C5495) * C1940 -
            (C5496 + C5497) * C48345) *
               C48245 * C48329) *
              C48025 * C48365 +
          (((C5101 + C5100) * C1938 + (C5099 + C5098) * C1935 -
            (C5491 + C5490) * C1939 - (C5493 + C5492) * C1936 +
            (C5495 + C5494) * C1940 + (C5497 + C5496) * C48345) *
               C48245 * C5057 +
           ((C5102 + C5103) * C1938 + (C5104 + C5105) * C1935 -
            (C5778 + C5779) * C1939 - (C5780 + C5781) * C1936 +
            (C5059 * C520 + C5055 * C537 + C5060 * C2317 + C48360 * C2318) *
                C1940 +
            (C5059 * C538 + C5055 * C550 + C5060 * C2319 + C48360 * C2320) *
                C48345) *
               C48245 * C48329) *
              C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C1938 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C1935 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C1939 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C1936 +
            (C5059 * C514 + C5055 * C525 + C5060 * C1385 + C48360 * C1394) *
                C1940 +
            (C5059 * C526 + C5055 * C544 + C5060 * C1395 + C48360 * C1412) *
                C48345) *
               C48245 * C5057 +
           ((C5094 + C5095) * C1938 + (C5096 + C5097) * C1935 -
            (C5482 + C5483) * C1939 - (C5484 + C5485) * C1936 +
            (C5486 + C5487) * C1940 + (C5488 + C5489) * C48345) *
               C48245 * C48329) *
              C48381 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                C1939 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C1935 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C1938) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                C1936 -
            (C5060 * C1389 + C48360 * C1402 + C5059 * C1385 + C5055 * C1394) *
                C1940 -
            (C5060 * C1403 + C48360 * C1416 + C5059 * C1395 + C5055 * C1412) *
                C48345) *
               C48245 * C5057 +
           ((C5992 + C5993) * C1939 -
            ((C5288 + C5289) * C1935 + (C5290 + C5291) * C1938) +
            (C5994 + C5995) * C1936 -
            (C5060 * C1391 + C48360 * C1406 + C5059 * C1386 + C5055 * C1396) *
                C1940 -
            (C5060 * C1407 + C48360 * C1418 + C5059 * C1397 + C5055 * C1413) *
                C48345) *
               C48245 * C48329) *
              C48369 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C1938 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C1935 -
            (C5060 * C1813 + C48360 * C1816 + C5059 * C1388 + C5055 * C1400) *
                C1939 -
            (C5060 * C1817 + C48360 * C1822 + C5059 * C1401 + C5055 * C1415) *
                C1936 +
            (C5059 * C1389 + C5055 * C1402 + C5060 * C6381 + C48360 * C6383) *
                C1940 +
            (C5059 * C1403 + C5055 * C1416 + C5060 * C6384 + C48360 * C6387) *
                C48345) *
               C48245 * C5057 +
           ((C5292 + C5293) * C1938 + (C5294 + C5295) * C1935 -
            (C6734 + C6735) * C1939 - (C6736 + C6737) * C1936 +
            (C5059 * C1391 + C5055 * C1406 + C5060 * C6382 + C48360 * C6385) *
                C1940 +
            (C5059 * C1407 + C5055 * C1418 + C5060 * C6386 + C48360 * C6388) *
                C48345) *
               C48245 * C48329) *
              C48342) *
         C47998) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
               C2142 +
           (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
               C2137 -
           (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
               C2143 -
           (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
               C2138 +
           (C5059 * C514 + C5055 * C525 + C5060 * C1385 + C48360 * C1394) *
               C2144 +
           (C5059 * C526 + C5055 * C544 + C5060 * C1395 + C48360 * C1412) *
               C2139 -
           (C5060 * C2581 + C48360 * C2584 + C5059 * C2147 + C5055 * C2153) *
               C2145 -
           (C5060 * C2585 + C48360 * C2590 + C5059 * C2154 + C5055 * C2165) *
               C2140 +
           (C5059 * C2148 + C5055 * C2155 + C5060 * C7249 + C48360 * C7251) *
               C2146 +
           (C5059 * C2156 + C5055 * C2166 + C5060 * C7252 + C48360 * C7255) *
               C2141) *
              C48245 * C5057 +
          ((C5094 + C5095) * C2142 + (C5096 + C5097) * C2137 -
           (C5482 + C5483) * C2143 - (C5484 + C5485) * C2138 +
           (C5486 + C5487) * C2144 + (C5488 + C5489) * C2139 -
           (C5060 * C2582 + C48360 * C2586 + C5059 * C2149 + C5055 * C2157) *
               C2145 -
           (C5060 * C2587 + C48360 * C2591 + C5059 * C2158 + C5055 * C2167) *
               C2140 +
           (C5059 * C2150 + C5055 * C2159 + C5060 * C7250 + C48360 * C7253) *
               C2146 +
           (C5059 * C2160 + C5055 * C2168 + C5060 * C7254 + C48360 * C7256) *
               C2141) *
              C48245 * C48329) *
         C48025 * C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C831 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48311 -
             (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                 C832 -
             (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                 C48129) *
                C48245 * C5057 +
            ((C5094 + C5095) * C831 + (C5096 + C5097) * C48311 -
             (C5482 + C5483) * C832 - (C5484 + C5485) * C48129) *
                C48245 * C48329) *
               C1177 +
           (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                 C832 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C48311 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C831) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                 C48129) *
                C48245 * C5057 +
            ((C5992 + C5993) * C832 -
             ((C5288 + C5289) * C48311 + (C5290 + C5291) * C831) +
             (C5994 + C5995) * C48129) *
                C48245 * C48329) *
               C1178 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C831 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48311 -
             (C5060 * C1813 + C48360 * C1816 + C5059 * C1388 + C5055 * C1400) *
                 C832 -
             (C5060 * C1817 + C48360 * C1822 + C5059 * C1401 + C5055 * C1415) *
                 C48129) *
                C48245 * C5057 +
            ((C5292 + C5293) * C831 + (C5294 + C5295) * C48311 -
             (C6734 + C6735) * C832 - (C6736 + C6737) * C48129) *
                C48245 * C48329) *
               C48342) *
              C48296 +
          ((((C5483 + C5482) * C832 -
             ((C5097 + C5096) * C48311 + (C5095 + C5094) * C831) +
             (C5485 + C5484) * C48129) *
                C48245 * C5057 +
            ((C5490 + C5491) * C832 -
             ((C5098 + C5099) * C48311 + (C5100 + C5101) * C831) +
             (C5492 + C5493) * C48129) *
                C48245 * C48329) *
               C1177 +
           (((C5291 + C5290) * C831 + (C5289 + C5288) * C48311 -
             (C5993 + C5992) * C832 - (C5995 + C5994) * C48129) *
                C48245 * C5057 +
            ((C5296 + C5297) * C831 + (C5298 + C5299) * C48311 -
             (C5996 + C5997) * C832 - (C5998 + C5999) * C48129) *
                C48245 * C48329) *
               C1178 +
           (((C6735 + C6734) * C832 -
             ((C5295 + C5294) * C48311 + (C5293 + C5292) * C831) +
             (C6737 + C6736) * C48129) *
                C48245 * C5057 +
            ((C5059 * C1392 + C5055 * C1408 + C5060 * C1815 + C48360 * C1820) *
                 C832 -
             ((C5300 + C5301) * C48311 + (C5302 + C5303) * C831) +
             (C5059 * C1409 + C5055 * C1419 + C5060 * C1821 + C48360 * C1824) *
                 C48129) *
                C48245 * C48329) *
               C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C831 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48311 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C832 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C48129) *
               C48245 * C5057 +
           ((C5094 + C5095) * C831 + (C5096 + C5097) * C48311 -
            (C5482 + C5483) * C832 - (C5484 + C5485) * C48129) *
               C48245 * C48329) *
              C48025 * C713 +
          (((C5483 + C5482) * C832 -
            ((C5097 + C5096) * C48311 + (C5095 + C5094) * C831) +
            (C5485 + C5484) * C48129) *
               C48245 * C5057 +
           ((C5490 + C5491) * C832 -
            ((C5098 + C5099) * C48311 + (C5100 + C5101) * C831) +
            (C5492 + C5493) * C48129) *
               C48245 * C48329) *
              C48025 * C714 +
          (((C5101 + C5100) * C831 + (C5099 + C5098) * C48311 -
            (C5491 + C5490) * C832 - (C5493 + C5492) * C48129) *
               C48245 * C5057 +
           ((C5102 + C5103) * C831 + (C5104 + C5105) * C48311 -
            (C5778 + C5779) * C832 - (C5780 + C5781) * C48129) *
               C48245 * C48329) *
              C48025 * C715 +
          (((C5779 + C5778) * C832 -
            ((C5105 + C5104) * C48311 + (C5103 + C5102) * C831) +
            (C5781 + C5780) * C48129) *
               C48245 * C5057 +
           ((C5059 * C521 + C5055 * C539 + C5060 * C1017 + C48360 * C1026) *
                C832 -
            ((C5106 + C5107) * C48311 + (C5108 + C5109) * C831) +
            (C5059 * C540 + C5055 * C551 + C5060 * C1027 + C48360 * C1032) *
                C48129) *
               C48245 * C48329) *
              C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C2447 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C2443 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C2448 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C2444 +
            (C5059 * C514 + C5055 * C525 + C5060 * C1385 + C48360 * C1394) *
                C2449 +
            (C5059 * C526 + C5055 * C544 + C5060 * C1395 + C48360 * C1412) *
                C2445 -
            (C5060 * C2581 + C48360 * C2584 + C5059 * C2147 + C5055 * C2153) *
                C2450 -
            (C5060 * C2585 + C48360 * C2590 + C5059 * C2154 + C5055 * C2165) *
                C48358) *
               C48245 * C5057 +
           ((C5094 + C5095) * C2447 + (C5096 + C5097) * C2443 -
            (C5482 + C5483) * C2448 - (C5484 + C5485) * C2444 +
            (C5486 + C5487) * C2449 + (C5488 + C5489) * C2445 -
            (C7602 + C7603) * C2450 - (C7604 + C7605) * C48358) *
               C48245 * C48329) *
              C48025 * C48296 +
          (((C5483 + C5482) * C2448 -
            ((C5097 + C5096) * C2443 + (C5095 + C5094) * C2447) +
            (C5485 + C5484) * C2444 - (C5487 + C5486) * C2449 -
            (C5489 + C5488) * C2445 + (C7603 + C7602) * C2450 +
            (C7605 + C7604) * C48358) *
               C48245 * C5057 +
           ((C5490 + C5491) * C2448 -
            ((C5098 + C5099) * C2443 + (C5100 + C5101) * C2447) +
            (C5492 + C5493) * C2444 - (C5494 + C5495) * C2449 -
            (C5496 + C5497) * C2445 +
            (C5059 * C2151 + C5055 * C2161 + C5060 * C2583 + C48360 * C2588) *
                C2450 +
            (C5059 * C2162 + C5055 * C2169 + C5060 * C2589 + C48360 * C2592) *
                C48358) *
               C48245 * C48329) *
              C48025 * C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
                C48329) *
               C48381 -
           (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
                C48329 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C48245 * C5057) *
               C48369 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C5057 +
            ((C5292 + C5293) * C114 + (C5294 + C5295) * C48042) * C48245 *
                C48329) *
               C48342) *
              C302 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C48245 *
                C5057 +
            ((C5296 + C5297) * C114 + (C5298 + C5299) * C48042) * C48245 *
                C48329) *
               C48369 -
           (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
                C48329 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
                C5057) *
               C48381 -
           (((C5300 + C5301) * C48042 + (C5302 + C5303) * C114) * C48245 *
                C48329 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C48245 *
                C5057) *
               C48342) *
              C303 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C48245 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48042) * C48245 *
                C48329) *
               C48381 -
           (((C5060 * C329 + C48360 * C342 + C5059 * C328 + C5055 * C341) *
                 C48042 +
             (C5060 * C312 + C48360 * C330 + C5059 * C311 + C5055 * C327) *
                 C114) *
                C48245 * C48329 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C48245 *
                C5057) *
               C48369 +
           (((C5303 + C5302) * C114 + (C5301 + C5300) * C48042) * C48245 *
                C5057 +
            ((C5059 * C312 + C5055 * C330 + C5060 * C1525 + C48360 * C1526) *
                 C114 +
             (C5059 * C329 + C5055 * C342 + C5060 * C1527 + C48360 * C1528) *
                 C48042) *
                C48245 * C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48042) *
               C48245 * C5057 +
           ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
               C48329) *
              C48025 * C108 -
          (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
               C48329 +
           ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
               C5057) *
              C48025 * C109 +
          (((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C48245 *
               C5057 +
           ((C5102 + C5103) * C114 + (C5104 + C5105) * C48042) * C48245 *
               C48329) *
              C48025 * C110 -
          (((C5106 + C5107) * C48042 + (C5108 + C5109) * C114) * C48245 *
               C48329 +
           ((C5105 + C5104) * C48042 + (C5103 + C5102) * C114) * C48245 *
               C5057) *
              C48025 * C111 +
          (((C5109 + C5108) * C114 + (C5107 + C5106) * C48042) * C48245 *
               C5057 +
           ((C5059 * C120 + C5055 * C133 + C5060 * C717 + C48360 * C718) *
                C114 +
            (C5059 * C132 + C5055 * C141 + C5060 * C719 + C48360 * C720) *
                C48042) *
               C48245 * C48329) *
              C48025 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
                C48329) *
               C1177 -
           (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
                C48329 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C48245 * C5057) *
               C1178 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C5057 +
            ((C5292 + C5293) * C114 + (C5294 + C5295) * C48042) * C48245 *
                C48329) *
               C48342) *
              C48378 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C48245 *
                C5057 +
            ((C5296 + C5297) * C114 + (C5298 + C5299) * C48042) * C48245 *
                C48329) *
               C1178 -
           (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
                C48329 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
                C5057) *
               C1177 -
           (((C5300 + C5301) * C48042 + (C5302 + C5303) * C114) * C48245 *
                C48329 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C48245 *
                C5057) *
               C48342) *
              C48365 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C48245 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48042) * C48245 *
                C48329) *
               C1177 -
           (((C5636 + C5637) * C48042 + (C5638 + C5639) * C114) * C48245 *
                C48329 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C48245 *
                C5057) *
               C1178 +
           (((C5303 + C5302) * C114 + (C5301 + C5300) * C48042) * C48245 *
                C5057 +
            ((C5059 * C312 + C5055 * C330 + C5060 * C1525 + C48360 * C1526) *
                 C114 +
             (C5059 * C329 + C5055 * C342 + C5060 * C1527 + C48360 * C1528) *
                 C48042) *
                C48245 * C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48042) *
               C48245 * C5057 +
           ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
               C48329) *
              C1245 -
          (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
               C48329 +
           ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                C48042 +
            (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                C114) *
               C48245 * C5057) *
              C1246 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C114 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C48042) *
               C48245 * C5057 +
           ((C5292 + C5293) * C114 + (C5294 + C5295) * C48042) * C48245 *
               C48329) *
              C1247 -
          (((C5060 * C1266 + C48360 * C1273 + C5059 * C1259 + C5055 * C1270) *
                C48042 +
            (C5060 * C1255 + C48360 * C1265 + C5059 * C1252 + C5055 * C1260) *
                C114) *
               C48245 * C48329 +
           ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                C48042 +
            (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                C114) *
               C48245 * C5057) *
              C1248 +
          (((C5059 * C1254 + C5055 * C1263 + C5060 * C6227 + C48360 * C6229) *
                C114 +
            (C5059 * C1264 + C5055 * C1272 + C5060 * C6230 + C48360 * C6233) *
                C48042) *
               C48245 * C5057 +
           ((C5059 * C1255 + C5055 * C1265 + C5060 * C6228 + C48360 * C6231) *
                C114 +
            (C5059 * C1266 + C5055 * C1273 + C5060 * C6232 + C48360 * C6234) *
                C48042) *
               C48245 * C48329) *
              C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C1938 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C1935 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C1939 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C1936 +
            (C5059 * C514 + C5055 * C525 + C5060 * C1385 + C48360 * C1394) *
                C1940 +
            (C5059 * C526 + C5055 * C544 + C5060 * C1395 + C48360 * C1412) *
                C48345) *
               C48245 * C5057 +
           ((C5094 + C5095) * C1938 + (C5096 + C5097) * C1935 -
            (C5482 + C5483) * C1939 - (C5484 + C5485) * C1936 +
            (C5486 + C5487) * C1940 + (C5488 + C5489) * C48345) *
               C48245 * C48329) *
              C48025 * C48378 +
          (((C5483 + C5482) * C1939 -
            ((C5097 + C5096) * C1935 + (C5095 + C5094) * C1938) +
            (C5485 + C5484) * C1936 - (C5487 + C5486) * C1940 -
            (C5489 + C5488) * C48345) *
               C48245 * C5057 +
           ((C5490 + C5491) * C1939 -
            ((C5098 + C5099) * C1935 + (C5100 + C5101) * C1938) +
            (C5492 + C5493) * C1936 - (C5494 + C5495) * C1940 -
            (C5496 + C5497) * C48345) *
               C48245 * C48329) *
              C48025 * C48365 +
          (((C5101 + C5100) * C1938 + (C5099 + C5098) * C1935 -
            (C5491 + C5490) * C1939 - (C5493 + C5492) * C1936 +
            (C5495 + C5494) * C1940 + (C5497 + C5496) * C48345) *
               C48245 * C5057 +
           ((C5102 + C5103) * C1938 + (C5104 + C5105) * C1935 -
            (C5778 + C5779) * C1939 - (C5780 + C5781) * C1936 +
            (C5059 * C520 + C5055 * C537 + C5060 * C2317 + C48360 * C2318) *
                C1940 +
            (C5059 * C538 + C5055 * C550 + C5060 * C2319 + C48360 * C2320) *
                C48345) *
               C48245 * C48329) *
              C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C1938 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C1935 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C1939 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C1936 +
            (C5059 * C514 + C5055 * C525 + C5060 * C1385 + C48360 * C1394) *
                C1940 +
            (C5059 * C526 + C5055 * C544 + C5060 * C1395 + C48360 * C1412) *
                C48345) *
               C48245 * C5057 +
           ((C5094 + C5095) * C1938 + (C5096 + C5097) * C1935 -
            (C5482 + C5483) * C1939 - (C5484 + C5485) * C1936 +
            (C5486 + C5487) * C1940 + (C5488 + C5489) * C48345) *
               C48245 * C48329) *
              C48381 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                C1939 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C1935 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C1938) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                C1936 -
            (C5060 * C1389 + C48360 * C1402 + C5059 * C1385 + C5055 * C1394) *
                C1940 -
            (C5060 * C1403 + C48360 * C1416 + C5059 * C1395 + C5055 * C1412) *
                C48345) *
               C48245 * C5057 +
           ((C5992 + C5993) * C1939 -
            ((C5288 + C5289) * C1935 + (C5290 + C5291) * C1938) +
            (C5994 + C5995) * C1936 -
            (C5060 * C1391 + C48360 * C1406 + C5059 * C1386 + C5055 * C1396) *
                C1940 -
            (C5060 * C1407 + C48360 * C1418 + C5059 * C1397 + C5055 * C1413) *
                C48345) *
               C48245 * C48329) *
              C48369 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C1938 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C1935 -
            (C5060 * C1813 + C48360 * C1816 + C5059 * C1388 + C5055 * C1400) *
                C1939 -
            (C5060 * C1817 + C48360 * C1822 + C5059 * C1401 + C5055 * C1415) *
                C1936 +
            (C5059 * C1389 + C5055 * C1402 + C5060 * C6381 + C48360 * C6383) *
                C1940 +
            (C5059 * C1403 + C5055 * C1416 + C5060 * C6384 + C48360 * C6387) *
                C48345) *
               C48245 * C5057 +
           ((C5292 + C5293) * C1938 + (C5294 + C5295) * C1935 -
            (C6734 + C6735) * C1939 - (C6736 + C6737) * C1936 +
            (C5059 * C1391 + C5055 * C1406 + C5060 * C6382 + C48360 * C6385) *
                C1940 +
            (C5059 * C1407 + C5055 * C1418 + C5060 * C6386 + C48360 * C6388) *
                C48345) *
               C48245 * C48329) *
              C48342) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C3467 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C3465 -
             (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                 C3468 -
             (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                 C48129) *
                C48245 * C5057 +
            ((C5094 + C5095) * C3467 + (C5096 + C5097) * C3465 -
             (C5482 + C5483) * C3468 - (C5484 + C5485) * C48129) *
                C48245 * C48329) *
               C48310 +
           (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                 C3468 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C3465 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C3467) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                 C48129) *
                C48245 * C5057 +
            ((C5992 + C5993) * C3468 -
             ((C5288 + C5289) * C3465 + (C5290 + C5291) * C3467) +
             (C5994 + C5995) * C48129) *
                C48245 * C48329) *
               C48087) *
              C48003 +
          ((((C5483 + C5482) * C3468 -
             ((C5097 + C5096) * C3465 + (C5095 + C5094) * C3467) +
             (C5485 + C5484) * C48129) *
                C48245 * C5057 +
            ((C5490 + C5491) * C3468 -
             ((C5098 + C5099) * C3465 + (C5100 + C5101) * C3467) +
             (C5492 + C5493) * C48129) *
                C48245 * C48329) *
               C48310 +
           (((C5291 + C5290) * C3467 + (C5289 + C5288) * C3465 -
             (C5993 + C5992) * C3468 - (C5995 + C5994) * C48129) *
                C48245 * C5057 +
            ((C5296 + C5297) * C3467 + (C5298 + C5299) * C3465 -
             (C5996 + C5997) * C3468 - (C5998 + C5999) * C48129) *
                C48245 * C48329) *
               C48087) *
              C48011 +
          ((((C5101 + C5100) * C3467 + (C5099 + C5098) * C3465 -
             (C5491 + C5490) * C3468 - (C5493 + C5492) * C48129) *
                C48245 * C5057 +
            ((C5102 + C5103) * C3467 + (C5104 + C5105) * C3465 -
             (C5778 + C5779) * C3468 - (C5780 + C5781) * C48129) *
                C48245 * C48329) *
               C48310 +
           (((C5997 + C5996) * C3468 -
             ((C5299 + C5298) * C3465 + (C5297 + C5296) * C3467) +
             (C5999 + C5998) * C48129) *
                C48245 * C5057 +
            ((C5059 * C1016 + C5055 * C1024 + C5060 * C1691 + C48360 * C1692) *
                 C3468 -
             ((C5636 + C5637) * C3465 + (C5638 + C5639) * C3467) +
             (C5059 * C1025 + C5055 * C1031 + C5060 * C1693 + C48360 * C1694) *
                 C48129) *
                C48245 * C48329) *
               C48087) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C47030 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48125 -
             (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                 C47022 -
             (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                 C48132 +
             (C5059 * C514 + C5055 * C525 + C5060 * C1385 + C48360 * C1394) *
                 C47036 +
             (C5059 * C526 + C5055 * C544 + C5060 * C1395 + C48360 * C1412) *
                 C4043) *
                C48245 * C5057 +
            ((C5094 + C5095) * C47030 + (C5096 + C5097) * C48125 -
             (C5482 + C5483) * C47022 - (C5484 + C5485) * C48132 +
             (C5486 + C5487) * C47036 + (C5488 + C5489) * C4043) *
                C48245 * C48329) *
               C48310 +
           (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                 C47022 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C48125 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C47030) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                 C48132 -
             (C5060 * C1389 + C48360 * C1402 + C5059 * C1385 + C5055 * C1394) *
                 C47036 -
             (C5060 * C1403 + C48360 * C1416 + C5059 * C1395 + C5055 * C1412) *
                 C4043) *
                C48245 * C5057 +
            ((C5992 + C5993) * C47022 -
             ((C5288 + C5289) * C48125 + (C5290 + C5291) * C47030) +
             (C5994 + C5995) * C48132 - (C7460 + C7461) * C47036 -
             (C7462 + C7463) * C4043) *
                C48245 * C48329) *
               C48087) *
              C2799 +
          ((((C5483 + C5482) * C47022 -
             ((C5097 + C5096) * C48125 + (C5095 + C5094) * C47030) +
             (C5485 + C5484) * C48132 - (C5487 + C5486) * C47036 -
             (C5489 + C5488) * C4043) *
                C48245 * C5057 +
            ((C5490 + C5491) * C47022 -
             ((C5098 + C5099) * C48125 + (C5100 + C5101) * C47030) +
             (C5492 + C5493) * C48132 - (C5494 + C5495) * C47036 -
             (C5496 + C5497) * C4043) *
                C48245 * C48329) *
               C48310 +
           (((C5291 + C5290) * C47030 + (C5289 + C5288) * C48125 -
             (C5993 + C5992) * C47022 - (C5995 + C5994) * C48132 +
             (C7461 + C7460) * C47036 + (C7463 + C7462) * C4043) *
                C48245 * C5057 +
            ((C5296 + C5297) * C47030 + (C5298 + C5299) * C48125 -
             (C5996 + C5997) * C47022 - (C5998 + C5999) * C48132 +
             (C5059 * C1387 + C5055 * C1398 + C5060 * C1393 + C48360 * C1410) *
                 C47036 +
             (C5059 * C1399 + C5055 * C1414 + C5060 * C1411 + C48360 * C1420) *
                 C4043) *
                C48245 * C48329) *
               C48087) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C3467 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C3465 -
             (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                 C3468 -
             (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                 C48129) *
                C48245 * C5057 +
            ((C5094 + C5095) * C3467 + (C5096 + C5097) * C3465 -
             (C5482 + C5483) * C3468 - (C5484 + C5485) * C48129) *
                C48245 * C48329) *
               C48381 +
           (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                 C3468 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C3465 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C3467) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                 C48129) *
                C48245 * C5057 +
            ((C5992 + C5993) * C3468 -
             ((C5288 + C5289) * C3465 + (C5290 + C5291) * C3467) +
             (C5994 + C5995) * C48129) *
                C48245 * C48329) *
               C48369 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C3467 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C3465 -
             (C5060 * C1813 + C48360 * C1816 + C5059 * C1388 + C5055 * C1400) *
                 C3468 -
             (C5060 * C1817 + C48360 * C1822 + C5059 * C1401 + C5055 * C1415) *
                 C48129) *
                C48245 * C5057 +
            ((C5292 + C5293) * C3467 + (C5294 + C5295) * C3465 -
             (C6734 + C6735) * C3468 - (C6736 + C6737) * C48129) *
                C48245 * C48329) *
               C48342) *
              C2799 +
          ((((C5483 + C5482) * C3468 -
             ((C5097 + C5096) * C3465 + (C5095 + C5094) * C3467) +
             (C5485 + C5484) * C48129) *
                C48245 * C5057 +
            ((C5490 + C5491) * C3468 -
             ((C5098 + C5099) * C3465 + (C5100 + C5101) * C3467) +
             (C5492 + C5493) * C48129) *
                C48245 * C48329) *
               C48381 +
           (((C5291 + C5290) * C3467 + (C5289 + C5288) * C3465 -
             (C5993 + C5992) * C3468 - (C5995 + C5994) * C48129) *
                C48245 * C5057 +
            ((C5296 + C5297) * C3467 + (C5298 + C5299) * C3465 -
             (C5996 + C5997) * C3468 - (C5998 + C5999) * C48129) *
                C48245 * C48329) *
               C48369 +
           (((C6735 + C6734) * C3468 -
             ((C5295 + C5294) * C3465 + (C5293 + C5292) * C3467) +
             (C6737 + C6736) * C48129) *
                C48245 * C5057 +
            ((C5059 * C1392 + C5055 * C1408 + C5060 * C1815 + C48360 * C1820) *
                 C3468 -
             ((C5300 + C5301) * C3465 + (C5302 + C5303) * C3467) +
             (C5059 * C1409 + C5055 * C1419 + C5060 * C1821 + C48360 * C1824) *
                 C48129) *
                C48245 * C48329) *
               C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C3467 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C3465 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C3468 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C48129) *
               C48245 * C5057 +
           ((C5094 + C5095) * C3467 + (C5096 + C5097) * C3465 -
            (C5482 + C5483) * C3468 - (C5484 + C5485) * C48129) *
               C48245 * C48329) *
              C48025 * C48387 +
          (((C5483 + C5482) * C3468 -
            ((C5097 + C5096) * C3465 + (C5095 + C5094) * C3467) +
            (C5485 + C5484) * C48129) *
               C48245 * C5057 +
           ((C5490 + C5491) * C3468 -
            ((C5098 + C5099) * C3465 + (C5100 + C5101) * C3467) +
            (C5492 + C5493) * C48129) *
               C48245 * C48329) *
              C48025 * C48380 +
          (((C5101 + C5100) * C3467 + (C5099 + C5098) * C3465 -
            (C5491 + C5490) * C3468 - (C5493 + C5492) * C48129) *
               C48245 * C5057 +
           ((C5102 + C5103) * C3467 + (C5104 + C5105) * C3465 -
            (C5778 + C5779) * C3468 - (C5780 + C5781) * C48129) *
               C48245 * C48329) *
              C48025 * C48367 +
          (((C5779 + C5778) * C3468 -
            ((C5105 + C5104) * C3465 + (C5103 + C5102) * C3467) +
            (C5781 + C5780) * C48129) *
               C48245 * C5057 +
           ((C5059 * C521 + C5055 * C539 + C5060 * C1017 + C48360 * C1026) *
                C3468 -
            ((C5106 + C5107) * C3465 + (C5108 + C5109) * C3467) +
            (C5059 * C540 + C5055 * C551 + C5060 * C1027 + C48360 * C1032) *
                C48129) *
               C48245 * C48329) *
              C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C3757 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48389 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C3758 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C48386 +
            (C5059 * C514 + C5055 * C525 + C5060 * C1385 + C48360 * C1394) *
                C3759 +
            (C5059 * C526 + C5055 * C544 + C5060 * C1395 + C48360 * C1412) *
                C48377 -
            (C5060 * C2581 + C48360 * C2584 + C5059 * C2147 + C5055 * C2153) *
                C3760 -
            (C5060 * C2585 + C48360 * C2590 + C5059 * C2154 + C5055 * C2165) *
                C48358) *
               C48245 * C5057 +
           ((C5094 + C5095) * C3757 + (C5096 + C5097) * C48389 -
            (C5482 + C5483) * C3758 - (C5484 + C5485) * C48386 +
            (C5486 + C5487) * C3759 + (C5488 + C5489) * C48377 -
            (C7602 + C7603) * C3760 - (C7604 + C7605) * C48358) *
               C48245 * C48329) *
              C48025 * C2799 +
          (((C5483 + C5482) * C3758 -
            ((C5097 + C5096) * C48389 + (C5095 + C5094) * C3757) +
            (C5485 + C5484) * C48386 - (C5487 + C5486) * C3759 -
            (C5489 + C5488) * C48377 + (C7603 + C7602) * C3760 +
            (C7605 + C7604) * C48358) *
               C48245 * C5057 +
           ((C5490 + C5491) * C3758 -
            ((C5098 + C5099) * C48389 + (C5100 + C5101) * C3757) +
            (C5492 + C5493) * C48386 - (C5494 + C5495) * C3759 -
            (C5496 + C5497) * C48377 +
            (C5059 * C2151 + C5055 * C2161 + C5060 * C2583 + C48360 * C2588) *
                C3760 +
            (C5059 * C2162 + C5055 * C2169 + C5060 * C2589 + C48360 * C2592) *
                C48358) *
               C48245 * C48329) *
              C48025 * C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C47030 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48125 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C47022 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C48132 +
            (C5059 * C514 + C5055 * C525 + C5060 * C1385 + C48360 * C1394) *
                C47036 +
            (C5059 * C526 + C5055 * C544 + C5060 * C1395 + C48360 * C1412) *
                C4043) *
               C48245 * C5057 +
           ((C5094 + C5095) * C47030 + (C5096 + C5097) * C48125 -
            (C5482 + C5483) * C47022 - (C5484 + C5485) * C48132 +
            (C5486 + C5487) * C47036 + (C5488 + C5489) * C4043) *
               C48245 * C48329) *
              C48025 * C48003 +
          (((C5483 + C5482) * C47022 -
            ((C5097 + C5096) * C48125 + (C5095 + C5094) * C47030) +
            (C5485 + C5484) * C48132 - (C5487 + C5486) * C47036 -
            (C5489 + C5488) * C4043) *
               C48245 * C5057 +
           ((C5490 + C5491) * C47022 -
            ((C5098 + C5099) * C48125 + (C5100 + C5101) * C47030) +
            (C5492 + C5493) * C48132 - (C5494 + C5495) * C47036 -
            (C5496 + C5497) * C4043) *
               C48245 * C48329) *
              C48025 * C48011 +
          (((C5101 + C5100) * C47030 + (C5099 + C5098) * C48125 -
            (C5491 + C5490) * C47022 - (C5493 + C5492) * C48132 +
            (C5495 + C5494) * C47036 + (C5497 + C5496) * C4043) *
               C48245 * C5057 +
           ((C5102 + C5103) * C47030 + (C5104 + C5105) * C48125 -
            (C5778 + C5779) * C47022 - (C5780 + C5781) * C48132 +
            (C5059 * C520 + C5055 * C537 + C5060 * C2317 + C48360 * C2318) *
                C47036 +
            (C5059 * C538 + C5055 * C550 + C5060 * C2319 + C48360 * C2320) *
                C4043) *
               C48245 * C48329) *
              C48025 * C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C3467 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C3465 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C3468 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C48129) *
               C48245 * C5057 +
           ((C5094 + C5095) * C3467 + (C5096 + C5097) * C3465 -
            (C5482 + C5483) * C3468 - (C5484 + C5485) * C48129) *
               C48245 * C48329) *
              C48025 * C48387 +
          (((C5483 + C5482) * C3468 -
            ((C5097 + C5096) * C3465 + (C5095 + C5094) * C3467) +
            (C5485 + C5484) * C48129) *
               C48245 * C5057 +
           ((C5490 + C5491) * C3468 -
            ((C5098 + C5099) * C3465 + (C5100 + C5101) * C3467) +
            (C5492 + C5493) * C48129) *
               C48245 * C48329) *
              C48025 * C48380 +
          (((C5101 + C5100) * C3467 + (C5099 + C5098) * C3465 -
            (C5491 + C5490) * C3468 - (C5493 + C5492) * C48129) *
               C48245 * C5057 +
           ((C5102 + C5103) * C3467 + (C5104 + C5105) * C3465 -
            (C5778 + C5779) * C3468 - (C5780 + C5781) * C48129) *
               C48245 * C48329) *
              C48025 * C48367 +
          (((C5779 + C5778) * C3468 -
            ((C5105 + C5104) * C3465 + (C5103 + C5102) * C3467) +
            (C5781 + C5780) * C48129) *
               C48245 * C5057 +
           ((C5059 * C521 + C5055 * C539 + C5060 * C1017 + C48360 * C1026) *
                C3468 -
            ((C5106 + C5107) * C3465 + (C5108 + C5109) * C3467) +
            (C5059 * C540 + C5055 * C551 + C5060 * C1027 + C48360 * C1032) *
                C48129) *
               C48245 * C48329) *
              C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C3467 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C3465 -
             (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                 C3468 -
             (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                 C48129) *
                C48245 * C5057 +
            ((C5094 + C5095) * C3467 + (C5096 + C5097) * C3465 -
             (C5482 + C5483) * C3468 - (C5484 + C5485) * C48129) *
                C48245 * C48329) *
               C48381 +
           (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                 C3468 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C3465 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C3467) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                 C48129) *
                C48245 * C5057 +
            ((C5992 + C5993) * C3468 -
             ((C5288 + C5289) * C3465 + (C5290 + C5291) * C3467) +
             (C5994 + C5995) * C48129) *
                C48245 * C48329) *
               C48369 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C3467 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C3465 -
             (C5060 * C1813 + C48360 * C1816 + C5059 * C1388 + C5055 * C1400) *
                 C3468 -
             (C5060 * C1817 + C48360 * C1822 + C5059 * C1401 + C5055 * C1415) *
                 C48129) *
                C48245 * C5057 +
            ((C5292 + C5293) * C3467 + (C5294 + C5295) * C3465 -
             (C6734 + C6735) * C3468 - (C6736 + C6737) * C48129) *
                C48245 * C48329) *
               C48342) *
              C2799 +
          ((((C5483 + C5482) * C3468 -
             ((C5097 + C5096) * C3465 + (C5095 + C5094) * C3467) +
             (C5485 + C5484) * C48129) *
                C48245 * C5057 +
            ((C5490 + C5491) * C3468 -
             ((C5098 + C5099) * C3465 + (C5100 + C5101) * C3467) +
             (C5492 + C5493) * C48129) *
                C48245 * C48329) *
               C48381 +
           (((C5291 + C5290) * C3467 + (C5289 + C5288) * C3465 -
             (C5993 + C5992) * C3468 - (C5995 + C5994) * C48129) *
                C48245 * C5057 +
            ((C5296 + C5297) * C3467 + (C5298 + C5299) * C3465 -
             (C5996 + C5997) * C3468 - (C5998 + C5999) * C48129) *
                C48245 * C48329) *
               C48369 +
           (((C6735 + C6734) * C3468 -
             ((C5295 + C5294) * C3465 + (C5293 + C5292) * C3467) +
             (C6737 + C6736) * C48129) *
                C48245 * C5057 +
            ((C5059 * C1392 + C5055 * C1408 + C5060 * C1815 + C48360 * C1820) *
                 C3468 -
             ((C5300 + C5301) * C3465 + (C5302 + C5303) * C3467) +
             (C5059 * C1409 + C5055 * C1419 + C5060 * C1821 + C48360 * C1824) *
                 C48129) *
                C48245 * C48329) *
               C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
                C48329) *
               C48310 -
           (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
                C48329 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C48245 * C5057) *
               C48087) *
              C713 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C48245 *
                C5057 +
            ((C5296 + C5297) * C114 + (C5298 + C5299) * C48042) * C48245 *
                C48329) *
               C48087 -
           (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
                C48329 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
                C5057) *
               C48310) *
              C714 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C48245 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48042) * C48245 *
                C48329) *
               C48310 -
           (((C5636 + C5637) * C48042 + (C5638 + C5639) * C114) * C48245 *
                C48329 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C48245 *
                C5057) *
               C48087) *
              C715 +
          ((((C5639 + C5638) * C114 + (C5637 + C5636) * C48042) * C48245 *
                C5057 +
            ((C5059 * C313 + C5055 * C332 + C5060 * C314 + C48360 * C333) *
                 C114 +
             (C5059 * C331 + C5055 * C343 + C5060 * C334 + C48360 * C344) *
                 C48042) *
                C48245 * C48329) *
               C48087 -
           (((C5106 + C5107) * C48042 + (C5108 + C5109) * C114) * C48245 *
                C48329 +
            ((C5105 + C5104) * C48042 + (C5103 + C5102) * C114) * C48245 *
                C5057) *
               C48310) *
              C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
                C48329) *
               C1519 -
           (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
                C48329 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C48245 * C5057) *
               C1520 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C5057 +
            ((C5292 + C5293) * C114 + (C5294 + C5295) * C48042) * C48245 *
                C48329) *
               C1521 -
           (((C6528 + C6529) * C48042 + (C6530 + C6531) * C114) * C48245 *
                C48329 +
            ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                 C48042 +
             (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                 C114) *
                C48245 * C5057) *
               C48352) *
              C48296 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C48245 *
                C5057 +
            ((C5296 + C5297) * C114 + (C5298 + C5299) * C48042) * C48245 *
                C48329) *
               C1520 -
           (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
                C48329 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
                C5057) *
               C1519 -
           (((C5300 + C5301) * C48042 + (C5302 + C5303) * C114) * C48245 *
                C48329 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C48245 *
                C5057) *
               C1521 +
           (((C6531 + C6530) * C114 + (C6529 + C6528) * C48042) * C48245 *
                C5057 +
            ((C5059 * C1251 + C5055 * C1258 + C5060 * C1256 + C48360 * C1267) *
                 C114 +
             (C5059 * C1257 + C5055 * C1269 + C5060 * C1268 + C48360 * C1274) *
                 C48042) *
                C48245 * C48329) *
               C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C831 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48311 -
             (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                 C832 -
             (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                 C48129) *
                C48245 * C5057 +
            ((C5094 + C5095) * C831 + (C5096 + C5097) * C48311 -
             (C5482 + C5483) * C832 - (C5484 + C5485) * C48129) *
                C48245 * C48329) *
               C48310 +
           (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                 C832 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C48311 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C831) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                 C48129) *
                C48245 * C5057 +
            ((C5992 + C5993) * C832 -
             ((C5288 + C5289) * C48311 + (C5290 + C5291) * C831) +
             (C5994 + C5995) * C48129) *
                C48245 * C48329) *
               C48087) *
              C302 +
          ((((C5483 + C5482) * C832 -
             ((C5097 + C5096) * C48311 + (C5095 + C5094) * C831) +
             (C5485 + C5484) * C48129) *
                C48245 * C5057 +
            ((C5490 + C5491) * C832 -
             ((C5098 + C5099) * C48311 + (C5100 + C5101) * C831) +
             (C5492 + C5493) * C48129) *
                C48245 * C48329) *
               C48310 +
           (((C5291 + C5290) * C831 + (C5289 + C5288) * C48311 -
             (C5993 + C5992) * C832 - (C5995 + C5994) * C48129) *
                C48245 * C5057 +
            ((C5296 + C5297) * C831 + (C5298 + C5299) * C48311 -
             (C5996 + C5997) * C832 - (C5998 + C5999) * C48129) *
                C48245 * C48329) *
               C48087) *
              C303 +
          ((((C5101 + C5100) * C831 + (C5099 + C5098) * C48311 -
             (C5491 + C5490) * C832 - (C5493 + C5492) * C48129) *
                C48245 * C5057 +
            ((C5102 + C5103) * C831 + (C5104 + C5105) * C48311 -
             (C5778 + C5779) * C832 - (C5780 + C5781) * C48129) *
                C48245 * C48329) *
               C48310 +
           (((C5997 + C5996) * C832 -
             ((C5299 + C5298) * C48311 + (C5297 + C5296) * C831) +
             (C5999 + C5998) * C48129) *
                C48245 * C5057 +
            ((C5059 * C1016 + C5055 * C1024 + C5060 * C1691 + C48360 * C1692) *
                 C832 -
             ((C5636 + C5637) * C48311 + (C5638 + C5639) * C831) +
             (C5059 * C1025 + C5055 * C1031 + C5060 * C1693 + C48360 * C1694) *
                 C48129) *
                C48245 * C48329) *
               C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C831 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48311 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C832 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C48129) *
               C48245 * C5057 +
           ((C5094 + C5095) * C831 + (C5096 + C5097) * C48311 -
            (C5482 + C5483) * C832 - (C5484 + C5485) * C48129) *
               C48245 * C48329) *
              C1519 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                C832 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48311 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C831) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                C48129) *
               C48245 * C5057 +
           ((C5992 + C5993) * C832 -
            ((C5288 + C5289) * C48311 + (C5290 + C5291) * C831) +
            (C5994 + C5995) * C48129) *
               C48245 * C48329) *
              C1520 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C831 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C48311 -
            (C5060 * C1813 + C48360 * C1816 + C5059 * C1388 + C5055 * C1400) *
                C832 -
            (C5060 * C1817 + C48360 * C1822 + C5059 * C1401 + C5055 * C1415) *
                C48129) *
               C48245 * C5057 +
           ((C5292 + C5293) * C831 + (C5294 + C5295) * C48311 -
            (C6734 + C6735) * C832 - (C6736 + C6737) * C48129) *
               C48245 * C48329) *
              C1521 +
          (((C5059 * C1813 + C5055 * C1816 + C5060 * C6867 + C48360 * C6869) *
                C832 -
            ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                 C48311 +
             (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                 C831) +
            (C5059 * C1817 + C5055 * C1822 + C5060 * C6870 + C48360 * C6873) *
                C48129) *
               C48245 * C5057 +
           ((C5059 * C1814 + C5055 * C1818 + C5060 * C6868 + C48360 * C6871) *
                C832 -
            ((C6528 + C6529) * C48311 + (C6530 + C6531) * C831) +
            (C5059 * C1819 + C5055 * C1823 + C5060 * C6872 + C48360 * C6874) *
                C48129) *
               C48245 * C48329) *
              C48352) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
                C48329) *
               C48381 -
           (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
                C48329 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C48245 * C5057) *
               C48369 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C5057 +
            ((C5292 + C5293) * C114 + (C5294 + C5295) * C48042) * C48245 *
                C48329) *
               C48342) *
              C302 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C48245 *
                C5057 +
            ((C5296 + C5297) * C114 + (C5298 + C5299) * C48042) * C48245 *
                C48329) *
               C48369 -
           (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
                C48329 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
                C5057) *
               C48381 -
           (((C5300 + C5301) * C48042 + (C5302 + C5303) * C114) * C48245 *
                C48329 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C48245 *
                C5057) *
               C48342) *
              C303 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C48245 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48042) * C48245 *
                C48329) *
               C48381 -
           (((C5060 * C329 + C48360 * C342 + C5059 * C328 + C5055 * C341) *
                 C48042 +
             (C5060 * C312 + C48360 * C330 + C5059 * C311 + C5055 * C327) *
                 C114) *
                C48245 * C48329 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C48245 *
                C5057) *
               C48369 +
           (((C5303 + C5302) * C114 + (C5301 + C5300) * C48042) * C48245 *
                C5057 +
            ((C5059 * C312 + C5055 * C330 + C5060 * C1525 + C48360 * C1526) *
                 C114 +
             (C5059 * C329 + C5055 * C342 + C5060 * C1527 + C48360 * C1528) *
                 C48042) *
                C48245 * C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48042) *
               C48245 * C5057 +
           ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
               C48329) *
              C48025 * C108 -
          (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
               C48329 +
           ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
               C5057) *
              C48025 * C109 +
          (((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C48245 *
               C5057 +
           ((C5102 + C5103) * C114 + (C5104 + C5105) * C48042) * C48245 *
               C48329) *
              C48025 * C110 -
          (((C5106 + C5107) * C48042 + (C5108 + C5109) * C114) * C48245 *
               C48329 +
           ((C5105 + C5104) * C48042 + (C5103 + C5102) * C114) * C48245 *
               C5057) *
              C48025 * C111 +
          (((C5109 + C5108) * C114 + (C5107 + C5106) * C48042) * C48245 *
               C5057 +
           ((C5059 * C120 + C5055 * C133 + C5060 * C717 + C48360 * C718) *
                C114 +
            (C5059 * C132 + C5055 * C141 + C5060 * C719 + C48360 * C720) *
                C48042) *
               C48245 * C48329) *
              C48025 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C510 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48382 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C511 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C48371 +
            (C5059 * C514 + C5055 * C525 + C5060 * C1385 + C48360 * C1394) *
                C512 +
            (C5059 * C526 + C5055 * C544 + C5060 * C1395 + C48360 * C1412) *
                C48345) *
               C48245 * C5057 +
           ((C5094 + C5095) * C510 + (C5096 + C5097) * C48382 -
            (C5482 + C5483) * C511 - (C5484 + C5485) * C48371 +
            (C5486 + C5487) * C512 + (C5488 + C5489) * C48345) *
               C48245 * C48329) *
              C48025 * C302 +
          (((C5483 + C5482) * C511 -
            ((C5097 + C5096) * C48382 + (C5095 + C5094) * C510) +
            (C5485 + C5484) * C48371 - (C5487 + C5486) * C512 -
            (C5489 + C5488) * C48345) *
               C48245 * C5057 +
           ((C5490 + C5491) * C511 -
            ((C5098 + C5099) * C48382 + (C5100 + C5101) * C510) +
            (C5492 + C5493) * C48371 - (C5494 + C5495) * C512 -
            (C5496 + C5497) * C48345) *
               C48245 * C48329) *
              C48025 * C303 +
          (((C5101 + C5100) * C510 + (C5099 + C5098) * C48382 -
            (C5491 + C5490) * C511 - (C5493 + C5492) * C48371 +
            (C5495 + C5494) * C512 + (C5497 + C5496) * C48345) *
               C48245 * C5057 +
           ((C5102 + C5103) * C510 + (C5104 + C5105) * C48382 -
            (C5060 * C1016 + C48360 * C1024 + C5059 * C519 + C5055 * C535) *
                C511 -
            (C5060 * C1025 + C48360 * C1031 + C5059 * C536 + C5055 * C549) *
                C48371 +
            (C5059 * C520 + C5055 * C537 + C5060 * C2317 + C48360 * C2318) *
                C512 +
            (C5059 * C538 + C5055 * C550 + C5060 * C2319 + C48360 * C2320) *
                C48345) *
               C48245 * C48329) *
              C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
                C48329) *
               C1177 -
           (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
                C48329 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C48245 * C5057) *
               C1178 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C5057 +
            ((C5292 + C5293) * C114 + (C5294 + C5295) * C48042) * C48245 *
                C48329) *
               C48342) *
              C48378 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C48245 *
                C5057 +
            ((C5296 + C5297) * C114 + (C5298 + C5299) * C48042) * C48245 *
                C48329) *
               C1178 -
           (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
                C48329 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
                C5057) *
               C1177 -
           (((C5300 + C5301) * C48042 + (C5302 + C5303) * C114) * C48245 *
                C48329 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C48245 *
                C5057) *
               C48342) *
              C48365 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C48245 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48042) * C48245 *
                C48329) *
               C1177 -
           (((C5636 + C5637) * C48042 + (C5638 + C5639) * C114) * C48245 *
                C48329 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C48245 *
                C5057) *
               C1178 +
           (((C5303 + C5302) * C114 + (C5301 + C5300) * C48042) * C48245 *
                C5057 +
            ((C5059 * C312 + C5055 * C330 + C5060 * C1525 + C48360 * C1526) *
                 C114 +
             (C5059 * C329 + C5055 * C342 + C5060 * C1527 + C48360 * C1528) *
                 C48042) *
                C48245 * C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48042) *
               C48245 * C5057 +
           ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
               C48329) *
              C1245 -
          (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
               C48329 +
           ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                C48042 +
            (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                C114) *
               C48245 * C5057) *
              C1246 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C114 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C48042) *
               C48245 * C5057 +
           ((C5292 + C5293) * C114 + (C5294 + C5295) * C48042) * C48245 *
               C48329) *
              C1247 -
          (((C5060 * C1266 + C48360 * C1273 + C5059 * C1259 + C5055 * C1270) *
                C48042 +
            (C5060 * C1255 + C48360 * C1265 + C5059 * C1252 + C5055 * C1260) *
                C114) *
               C48245 * C48329 +
           ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                C48042 +
            (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                C114) *
               C48245 * C5057) *
              C1248 +
          (((C5059 * C1254 + C5055 * C1263 + C5060 * C6227 + C48360 * C6229) *
                C114 +
            (C5059 * C1264 + C5055 * C1272 + C5060 * C6230 + C48360 * C6233) *
                C48042) *
               C48245 * C5057 +
           ((C5059 * C1255 + C5055 * C1265 + C5060 * C6228 + C48360 * C6231) *
                C114 +
            (C5059 * C1266 + C5055 * C1273 + C5060 * C6232 + C48360 * C6234) *
                C48042) *
               C48245 * C48329) *
              C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C510 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48382 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C511 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C48371 +
            (C5059 * C514 + C5055 * C525 + C5060 * C1385 + C48360 * C1394) *
                C512 +
            (C5059 * C526 + C5055 * C544 + C5060 * C1395 + C48360 * C1412) *
                C48345) *
               C48245 * C5057 +
           ((C5094 + C5095) * C510 + (C5096 + C5097) * C48382 -
            (C5482 + C5483) * C511 - (C5484 + C5485) * C48371 +
            (C5486 + C5487) * C512 + (C5488 + C5489) * C48345) *
               C48245 * C48329) *
              C1177 +
          (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                C511 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48382 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C510) +
            (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                C48371 -
            (C5060 * C1389 + C48360 * C1402 + C5059 * C1385 + C5055 * C1394) *
                C512 -
            (C5060 * C1403 + C48360 * C1416 + C5059 * C1395 + C5055 * C1412) *
                C48345) *
               C48245 * C5057 +
           ((C5992 + C5993) * C511 -
            ((C5288 + C5289) * C48382 + (C5290 + C5291) * C510) +
            (C5994 + C5995) * C48371 -
            (C5060 * C1391 + C48360 * C1406 + C5059 * C1386 + C5055 * C1396) *
                C512 -
            (C5060 * C1407 + C48360 * C1418 + C5059 * C1397 + C5055 * C1413) *
                C48345) *
               C48245 * C48329) *
              C1178 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C510 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C48382 -
            (C5060 * C1813 + C48360 * C1816 + C5059 * C1388 + C5055 * C1400) *
                C511 -
            (C5060 * C1817 + C48360 * C1822 + C5059 * C1401 + C5055 * C1415) *
                C48371 +
            (C5059 * C1389 + C5055 * C1402 + C5060 * C6381 + C48360 * C6383) *
                C512 +
            (C5059 * C1403 + C5055 * C1416 + C5060 * C6384 + C48360 * C6387) *
                C48345) *
               C48245 * C5057 +
           ((C5292 + C5293) * C510 + (C5294 + C5295) * C48382 -
            (C5060 * C1814 + C48360 * C1818 + C5059 * C1390 + C5055 * C1404) *
                C511 -
            (C5060 * C1819 + C48360 * C1823 + C5059 * C1405 + C5055 * C1417) *
                C48371 +
            (C5059 * C1391 + C5055 * C1406 + C5060 * C6382 + C48360 * C6385) *
                C512 +
            (C5059 * C1407 + C5055 * C1418 + C5060 * C6386 + C48360 * C6388) *
                C48345) *
               C48245 * C48329) *
              C48342) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C831 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48311 -
            (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                C832 -
            (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                C48129) *
               C48245 * C5057 +
           ((C5094 + C5095) * C831 + (C5096 + C5097) * C48311 -
            (C5482 + C5483) * C832 - (C5484 + C5485) * C48129) *
               C48245 * C48329) *
              C48025 * C713 +
          (((C5483 + C5482) * C832 -
            ((C5097 + C5096) * C48311 + (C5095 + C5094) * C831) +
            (C5485 + C5484) * C48129) *
               C48245 * C5057 +
           ((C5490 + C5491) * C832 -
            ((C5098 + C5099) * C48311 + (C5100 + C5101) * C831) +
            (C5492 + C5493) * C48129) *
               C48245 * C48329) *
              C48025 * C714 +
          (((C5101 + C5100) * C831 + (C5099 + C5098) * C48311 -
            (C5491 + C5490) * C832 - (C5493 + C5492) * C48129) *
               C48245 * C5057 +
           ((C5102 + C5103) * C831 + (C5104 + C5105) * C48311 -
            (C5778 + C5779) * C832 - (C5780 + C5781) * C48129) *
               C48245 * C48329) *
              C48025 * C715 +
          (((C5779 + C5778) * C832 -
            ((C5105 + C5104) * C48311 + (C5103 + C5102) * C831) +
            (C5781 + C5780) * C48129) *
               C48245 * C5057 +
           ((C5059 * C521 + C5055 * C539 + C5060 * C1017 + C48360 * C1026) *
                C832 -
            ((C5106 + C5107) * C48311 + (C5108 + C5109) * C831) +
            (C5059 * C540 + C5055 * C551 + C5060 * C1027 + C48360 * C1032) *
                C48129) *
               C48245 * C48329) *
              C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C831 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48311 -
             (C5060 * C1013 + C48360 * C1018 + C5059 * C513 + C5055 * C523) *
                 C832 -
             (C5060 * C1019 + C48360 * C1028 + C5059 * C524 + C5055 * C543) *
                 C48129) *
                C48245 * C5057 +
            ((C5094 + C5095) * C831 + (C5096 + C5097) * C48311 -
             (C5482 + C5483) * C832 - (C5484 + C5485) * C48129) *
                C48245 * C48329) *
               C1177 +
           (((C5059 * C1013 + C5055 * C1018 + C5060 * C1388 + C48360 * C1400) *
                 C832 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C48311 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C831) +
             (C5059 * C1019 + C5055 * C1028 + C5060 * C1401 + C48360 * C1415) *
                 C48129) *
                C48245 * C5057 +
            ((C5992 + C5993) * C832 -
             ((C5288 + C5289) * C48311 + (C5290 + C5291) * C831) +
             (C5994 + C5995) * C48129) *
                C48245 * C48329) *
               C1178 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C831 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48311 -
             (C5060 * C1813 + C48360 * C1816 + C5059 * C1388 + C5055 * C1400) *
                 C832 -
             (C5060 * C1817 + C48360 * C1822 + C5059 * C1401 + C5055 * C1415) *
                 C48129) *
                C48245 * C5057 +
            ((C5292 + C5293) * C831 + (C5294 + C5295) * C48311 -
             (C6734 + C6735) * C832 - (C6736 + C6737) * C48129) *
                C48245 * C48329) *
               C48342) *
              C48296 +
          ((((C5483 + C5482) * C832 -
             ((C5097 + C5096) * C48311 + (C5095 + C5094) * C831) +
             (C5485 + C5484) * C48129) *
                C48245 * C5057 +
            ((C5490 + C5491) * C832 -
             ((C5098 + C5099) * C48311 + (C5100 + C5101) * C831) +
             (C5492 + C5493) * C48129) *
                C48245 * C48329) *
               C1177 +
           (((C5291 + C5290) * C831 + (C5289 + C5288) * C48311 -
             (C5993 + C5992) * C832 - (C5995 + C5994) * C48129) *
                C48245 * C5057 +
            ((C5296 + C5297) * C831 + (C5298 + C5299) * C48311 -
             (C5996 + C5997) * C832 - (C5998 + C5999) * C48129) *
                C48245 * C48329) *
               C1178 +
           (((C6735 + C6734) * C832 -
             ((C5295 + C5294) * C48311 + (C5293 + C5292) * C831) +
             (C6737 + C6736) * C48129) *
                C48245 * C5057 +
            ((C5059 * C1392 + C5055 * C1408 + C5060 * C1815 + C48360 * C1820) *
                 C832 -
             ((C5300 + C5301) * C48311 + (C5302 + C5303) * C831) +
             (C5059 * C1409 + C5055 * C1419 + C5060 * C1821 + C48360 * C1824) *
                 C48129) *
                C48245 * C48329) *
               C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48042) *
               C48245 * C5057 +
           ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
               C48329) *
              C48025 * C108 -
          (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
               C48329 +
           ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
               C5057) *
              C48025 * C109 +
          (((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C48245 *
               C5057 +
           ((C5102 + C5103) * C114 + (C5104 + C5105) * C48042) * C48245 *
               C48329) *
              C48025 * C110 -
          (((C5106 + C5107) * C48042 + (C5108 + C5109) * C114) * C48245 *
               C48329 +
           ((C5105 + C5104) * C48042 + (C5103 + C5102) * C114) * C48245 *
               C5057) *
              C48025 * C111 +
          (((C5109 + C5108) * C114 + (C5107 + C5106) * C48042) * C48245 *
               C5057 +
           ((C5059 * C120 + C5055 * C133 + C5060 * C717 + C48360 * C718) *
                C114 +
            (C5059 * C132 + C5055 * C141 + C5060 * C719 + C48360 * C720) *
                C48042) *
               C48245 * C48329) *
              C48025 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
                C48329) *
               C48381 -
           (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
                C48329 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C48245 * C5057) *
               C48369 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C5057 +
            ((C5292 + C5293) * C114 + (C5294 + C5295) * C48042) * C48245 *
                C48329) *
               C48342) *
              C302 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C48245 *
                C5057 +
            ((C5296 + C5297) * C114 + (C5298 + C5299) * C48042) * C48245 *
                C48329) *
               C48369 -
           (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
                C48329 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
                C5057) *
               C48381 -
           (((C5300 + C5301) * C48042 + (C5302 + C5303) * C114) * C48245 *
                C48329 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C48245 *
                C5057) *
               C48342) *
              C303 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C48245 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48042) * C48245 *
                C48329) *
               C48381 -
           (((C5060 * C329 + C48360 * C342 + C5059 * C328 + C5055 * C341) *
                 C48042 +
             (C5060 * C312 + C48360 * C330 + C5059 * C311 + C5055 * C327) *
                 C114) *
                C48245 * C48329 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C48245 *
                C5057) *
               C48369 +
           (((C5303 + C5302) * C114 + (C5301 + C5300) * C48042) * C48245 *
                C5057 +
            ((C5059 * C312 + C5055 * C330 + C5060 * C1525 + C48360 * C1526) *
                 C114 +
             (C5059 * C329 + C5055 * C342 + C5060 * C1527 + C48360 * C1528) *
                 C48042) *
                C48245 * C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C5057 +
            ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
                C48329) *
               C1177 -
           (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
                C48329 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C48245 * C5057) *
               C1178 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C5057 +
            ((C5292 + C5293) * C114 + (C5294 + C5295) * C48042) * C48245 *
                C48329) *
               C48342) *
              C48378 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C48245 *
                C5057 +
            ((C5296 + C5297) * C114 + (C5298 + C5299) * C48042) * C48245 *
                C48329) *
               C1178 -
           (((C5098 + C5099) * C48042 + (C5100 + C5101) * C114) * C48245 *
                C48329 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C48245 *
                C5057) *
               C1177 -
           (((C5300 + C5301) * C48042 + (C5302 + C5303) * C114) * C48245 *
                C48329 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C48245 *
                C5057) *
               C48342) *
              C48365 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C48245 *
                C5057 +
            ((C5102 + C5103) * C114 + (C5104 + C5105) * C48042) * C48245 *
                C48329) *
               C1177 -
           (((C5636 + C5637) * C48042 + (C5638 + C5639) * C114) * C48245 *
                C48329 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C48245 *
                C5057) *
               C1178 +
           (((C5303 + C5302) * C114 + (C5301 + C5300) * C48042) * C48245 *
                C5057 +
            ((C5059 * C312 + C5055 * C330 + C5060 * C1525 + C48360 * C1526) *
                 C114 +
             (C5059 * C329 + C5055 * C342 + C5060 * C1527 + C48360 * C1528) *
                 C48042) *
                C48245 * C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48042) *
               C48245 * C5057 +
           ((C5094 + C5095) * C114 + (C5096 + C5097) * C48042) * C48245 *
               C48329) *
              C1245 -
          (((C5288 + C5289) * C48042 + (C5290 + C5291) * C114) * C48245 *
               C48329 +
           ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                C48042 +
            (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                C114) *
               C48245 * C5057) *
              C1246 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C114 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C48042) *
               C48245 * C5057 +
           ((C5292 + C5293) * C114 + (C5294 + C5295) * C48042) * C48245 *
               C48329) *
              C1247 -
          (((C5060 * C1266 + C48360 * C1273 + C5059 * C1259 + C5055 * C1270) *
                C48042 +
            (C5060 * C1255 + C48360 * C1265 + C5059 * C1252 + C5055 * C1260) *
                C114) *
               C48245 * C48329 +
           ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                C48042 +
            (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                C114) *
               C48245 * C5057) *
              C1248 +
          (((C5059 * C1254 + C5055 * C1263 + C5060 * C6227 + C48360 * C6229) *
                C114 +
            (C5059 * C1264 + C5055 * C1272 + C5060 * C6230 + C48360 * C6233) *
                C48042) *
               C48245 * C5057 +
           ((C5059 * C1255 + C5055 * C1265 + C5060 * C6228 + C48360 * C6231) *
                C114 +
            (C5059 * C1266 + C5055 * C1273 + C5060 * C6232 + C48360 * C6234) *
                C48042) *
               C48245 * C48329) *
              C1249) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C10789 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C5057 +
            ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
               C48083 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C10789) *
                C5057) *
               C48090 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C10789 +
             (C11998 * C114 + C11999 * C48042) * C48362) *
                C5057 +
            ((C386 + C387) * C10789 + (C10948 + C10949) * C48362) * C48329) *
               C3071) *
              C48003 +
          ((((C385 + C384) * C10789 + (C10947 + C10946) * C48362) * C5057 +
            ((C383 + C382) * C10789 + (C10950 + C10951) * C48362) * C48329) *
               C48090 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
               C48083 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C10789) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C10789) * C5057) *
               C3071) *
              C48011 +
          (((C184 * C10789 + (C10795 + C10794) * C48362) * C5057 +
            ((C179 + C178) * C10789 + (C10796 + C10797) * C48362) * C48329) *
               C48083 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C10789) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C10789) * C5057) *
               C48090 +
           ((C395 * C10789 + (C10953 + C10952) * C48362) * C5057 +
            ((C393 + C392) * C10789 +
             ((C113 * C1691 + C48228 * C1692) * C114 +
              (C113 * C1693 + C48228 * C1694) * C48042) *
                 C48362) *
                C48329) *
               C3071) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C48228 * C122) * C831 +
                      (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
                      C11121 * C48129) *
                         C10789 +
                     (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
                      C11123 * C48129) *
                         C48362) *
                        C5057 +
                    ((C838 + C839 - C840 - C841) * C10789 +
                     (C11386 + C11387 - C11388 - C11389) * C48362) *
                        C48329) *
                       C48083 +
                   (((C11604 * C832 -
                      ((C113 * C319 + C48228 * C337) * C48311 +
                       (C113 * C307 + C48228 * C320) * C831) +
                      C11605 * C48129) *
                         C10789 +
                     (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
                      C11997 * C48129) *
                         C48362) *
                        C5057 +
                    ((C1059 - (C1036 + C1037) + C1060) * C10789 +
                     (C11596 - (C11597 + C11598) + C11599) * C48362) *
                        C48329) *
                       C48090 +
                   ((((C113 * C308 + C48228 * C321) * C831 +
                      (C113 * C322 + C48228 * C338) * C48311 - C11998 * C832 -
                      C11999 * C48129) *
                         C10789 +
                     (C11998 * C831 + C11999 * C48311 - C12000 * C832 -
                      C12001 * C48129) *
                         C48362) *
                        C5057 +
                    ((C1696 + C1697 - C1712 - C1713) * C10789 +
                     (C12336 + C12337 - C12338 - C12339) * C48362) *
                        C48329) *
                       C3071) *
                      C2799 +
                  ((((C840 - (C839 + C838) + C841) * C10789 +
                     (C11388 - (C11387 + C11386) + C11389) * C48362) *
                        C5057 +
                    ((C844 - (C843 + C842) + C845) * C10789 +
                     (C11390 - (C11391 + C11392) + C11393) * C48362) *
                        C48329) *
                       C48083 +
                   (((C1037 + C1036 - C1059 - C1060) * C10789 +
                     (C11598 + C11597 - C11596 - C11599) * C48362) *
                        C5057 +
                    ((C1043 + C1042 - C1061 - C1062) * C10789 +
                     (C11600 + C11601 - C11602 - C11603) * C48362) *
                        C48329) *
                       C48090 +
                   (((C1712 - (C1697 + C1696) + C1713) * C10789 +
                     (C12338 - (C12337 + C12336) + C12339) * C48362) *
                        C5057 +
                    ((C1714 - (C1703 + C1702) + C1715) * C10789 +
                     ((C113 * C1393 + C48228 * C1410) * C832 -
                      (C1711 * C48311 + C1710 * C831) +
                      (C113 * C1411 + C48228 * C1420) * C48129) *
                         C48362) *
                        C48329) *
                       C3071) *
                      C48008)) /
                (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C10789 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C5057 +
            ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
               C48388 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C10789) *
                C5057) *
               C48384 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C10789 +
             (C11998 * C114 + C11999 * C48042) * C48362) *
                C5057 +
            ((C386 + C387) * C10789 + (C10948 + C10949) * C48362) * C48329) *
               C48374 -
           (((C12140 + C12141) * C48362 + (C1544 + C1545) * C10789) * C48329 +
            ((C12475 * C48042 + C12474 * C114) * C48362 +
             ((C113 * C1261 + C48228 * C1271) * C48042 +
              (C113 * C1253 + C48228 * C1262) * C114) *
                 C10789) *
                C5057) *
               C48352) *
              C2799 +
          ((((C385 + C384) * C10789 + (C10947 + C10946) * C48362) * C5057 +
            ((C383 + C382) * C10789 + (C10950 + C10951) * C48362) * C48329) *
               C48384 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
               C48388 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C10789) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C10789) * C5057) *
               C48374 +
           (((C1545 + C1544) * C10789 + (C12141 + C12140) * C48362) * C5057 +
            ((C1543 + C1542) * C10789 +
             ((C113 * C1815 + C48228 * C1820) * C114 +
              (C113 * C1821 + C48228 * C1824) * C48042) *
                 C48362) *
                C48329) *
               C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C10789 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C5057 +
            ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
               C2691 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C10789) *
                C5057) *
               C48087) *
              C48387 +
          ((((C385 + C384) * C10789 + (C10947 + C10946) * C48362) * C5057 +
            ((C383 + C382) * C10789 + (C10950 + C10951) * C48362) * C48329) *
               C48087 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
               C2691) *
              C48380 +
          (((C184 * C10789 + (C10795 + C10794) * C48362) * C5057 +
            ((C179 + C178) * C10789 + (C10796 + C10797) * C48362) * C48329) *
               C2691 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C10789) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C10789) * C5057) *
               C48087) *
              C48367 +
          (((C722 * C10789 + (C11255 + C11254) * C48362) * C5057 +
            ((C731 + C730) * C10789 +
             ((C113 * C1017 + C48228 * C1026) * C114 +
              (C113 * C1027 + C48228 * C1032) * C48042) *
                 C48362) *
                C48329) *
               C48087 -
           (((C10798 + C10799) * C48362 + (C181 + C180) * C10789) * C48329 +
            ((C10797 + C10796) * C48362 + C185 * C10789) * C5057) *
               C2691) *
              C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C510 +
              (C113 * C123 + C48228 * C136) * C48382 - C11120 * C511 -
              C11121 * C48371 + C11122 * C512 + C11123 * C48345) *
                 C10789 +
             (C11120 * C510 + C11121 * C48382 - C11122 * C511 -
              C11123 * C48371 + C12882 * C512 + C12883 * C48345) *
                 C48362) *
                C5057 +
            ((C554 + C555 - C597 - C598 + C599 + C600) * C10789 +
             (C11108 + C11109 - C11110 - C11111 + C11112 + C11113) * C48362) *
                C48329) *
               C2691 +
           (((C11604 * C511 -
              ((C113 * C319 + C48228 * C337) * C48382 +
               (C113 * C307 + C48228 * C320) * C510) +
              C11605 * C48371 - C11996 * C512 - C11997 * C48345) *
                 C10789 +
             (C11996 * C511 - (C11605 * C48382 + C11604 * C510) +
              C11997 * C48371 - C13366 * C512 - C13367 * C48345) *
                 C48362) *
                C5057 +
            ((C2948 - (C2949 + C2950) + C2951 - C2952 - C2953) * C10789 +
             (C13822 - (C13823 + C13824) + C13825 - C13826 - C13827) * C48362) *
                C48329) *
               C48087) *
              C2799 +
          ((((C597 - (C555 + C554) + C598 - C599 - C600) * C10789 +
             (C11110 - (C11109 + C11108) + C11111 - C11112 - C11113) * C48362) *
                C5057 +
            ((C601 - (C565 + C564) + C602 - C603 - C604) * C10789 +
             (C11114 - (C11115 + C11116) + C11117 - C11118 - C11119) * C48362) *
                C48329) *
               C2691 +
           (((C2950 + C2949 - C2948 - C2951 + C2952 + C2953) * C10789 +
             (C13824 + C13823 - C13822 - C13825 + C13826 + C13827) * C48362) *
                C5057 +
            ((C2956 + C2955 - C2954 - C2957 + C2958 + C2959) * C10789 +
             (C1054 * C510 + C1056 * C48382 - C2340 * C511 - C2341 * C48371 +
              (C113 * C2583 + C48228 * C2588) * C512 +
              (C113 * C2589 + C48228 * C2592) * C48345) *
                 C48362) *
                C48329) *
               C48087) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C831 +
              (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
              C11121 * C48129) *
                 C10789 +
             (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
              C11123 * C48129) *
                 C48362) *
                C5057 +
            ((C838 + C839 - C840 - C841) * C10789 +
             (C11386 + C11387 - C11388 - C11389) * C48362) *
                C48329) *
               C2691 +
           (((C11604 * C832 -
              ((C113 * C319 + C48228 * C337) * C48311 +
               (C113 * C307 + C48228 * C320) * C831) +
              C11605 * C48129) *
                 C10789 +
             (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
              C11997 * C48129) *
                 C48362) *
                C5057 +
            ((C1059 - (C1036 + C1037) + C1060) * C10789 +
             (C11596 - (C11597 + C11598) + C11599) * C48362) *
                C48329) *
               C48087) *
              C48003 +
          ((((C840 - (C839 + C838) + C841) * C10789 +
             (C11388 - (C11387 + C11386) + C11389) * C48362) *
                C5057 +
            ((C844 - (C843 + C842) + C845) * C10789 +
             (C11390 - (C11391 + C11392) + C11393) * C48362) *
                C48329) *
               C2691 +
           (((C1037 + C1036 - C1059 - C1060) * C10789 +
             (C11598 + C11597 - C11596 - C11599) * C48362) *
                C5057 +
            ((C1043 + C1042 - C1061 - C1062) * C10789 +
             (C11600 + C11601 - C11602 - C11603) * C48362) *
                C48329) *
               C48087) *
              C48011 +
          (((C864 * C10789 + (C11392 + C11391 - C11390 - C11393) * C48362) *
                C5057 +
            ((C848 + C847 - C846 - C849) * C10789 +
             (C11394 + C11395 - C11396 - C11397) * C48362) *
                C48329) *
               C2691 +
           ((C1066 * C10789 + (C11602 - (C11601 + C11600) + C11603) * C48362) *
                C5057 +
            ((C1063 - (C1047 + C1046) + C1064) * C10789 +
             ((C113 * C2317 + C48228 * C2318) * C832 -
              (C1058 * C48311 + C1057 * C831) +
              (C113 * C2319 + C48228 * C2320) * C48129) *
                 C48362) *
                C48329) *
               C48087) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C10789 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C5057 +
            ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
               C2691 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C10789) *
                C5057) *
               C48087) *
              C48387 +
          ((((C385 + C384) * C10789 + (C10947 + C10946) * C48362) * C5057 +
            ((C383 + C382) * C10789 + (C10950 + C10951) * C48362) * C48329) *
               C48087 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
               C2691) *
              C48380 +
          (((C184 * C10789 + (C10795 + C10794) * C48362) * C5057 +
            ((C179 + C178) * C10789 + (C10796 + C10797) * C48362) * C48329) *
               C2691 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C10789) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C10789) * C5057) *
               C48087) *
              C48367 +
          (((C722 * C10789 + (C11255 + C11254) * C48362) * C5057 +
            ((C731 + C730) * C10789 +
             ((C113 * C1017 + C48228 * C1026) * C114 +
              (C113 * C1027 + C48228 * C1032) * C48042) *
                 C48362) *
                C48329) *
               C48087 -
           (((C10798 + C10799) * C48362 + (C181 + C180) * C10789) * C48329 +
            ((C10797 + C10796) * C48362 + C185 * C10789) * C5057) *
               C2691) *
              C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C10789 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C5057 +
            ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
               C48388 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C10789) *
                C5057) *
               C48384 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C10789 +
             (C11998 * C114 + C11999 * C48042) * C48362) *
                C5057 +
            ((C386 + C387) * C10789 + (C10948 + C10949) * C48362) * C48329) *
               C48374 -
           (((C12140 + C12141) * C48362 + (C1544 + C1545) * C10789) * C48329 +
            ((C12475 * C48042 + C12474 * C114) * C48362 +
             ((C113 * C1261 + C48228 * C1271) * C48042 +
              (C113 * C1253 + C48228 * C1262) * C114) *
                 C10789) *
                C5057) *
               C48352) *
              C2799 +
          ((((C385 + C384) * C10789 + (C10947 + C10946) * C48362) * C5057 +
            ((C383 + C382) * C10789 + (C10950 + C10951) * C48362) * C48329) *
               C48384 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
               C48388 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C10789) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C10789) * C5057) *
               C48374 +
           (((C1545 + C1544) * C10789 + (C12141 + C12140) * C48362) * C5057 +
            ((C1543 + C1542) * C10789 +
             ((C113 * C1815 + C48228 * C1820) * C114 +
              (C113 * C1821 + C48228 * C1824) * C48042) *
                 C48362) *
                C48329) *
               C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C48228 * C122) * C3467 +
                      (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
                      C11121 * C48129) *
                         C10789 +
                     (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
                      C11123 * C48129) *
                         C48362) *
                        C5057 +
                    ((C3470 + C3471 - C3472 - C3473) * C10789 +
                     (C14492 + C14493 - C14494 - C14495) * C48362) *
                        C48329) *
                       C48083 +
                   (((C11604 * C3468 -
                      ((C113 * C319 + C48228 * C337) * C3465 +
                       (C113 * C307 + C48228 * C320) * C3467) +
                      C11605 * C48129) *
                         C10789 +
                     (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
                      C11997 * C48129) *
                         C48362) *
                        C5057 +
                    ((C3640 - (C3641 + C3642) + C3643) * C10789 +
                     (C14698 - (C14699 + C14700) + C14701) * C48362) *
                        C48329) *
                       C48090 +
                   ((((C113 * C308 + C48228 * C321) * C3467 +
                      (C113 * C322 + C48228 * C338) * C3465 - C11998 * C3468 -
                      C11999 * C48129) *
                         C10789 +
                     (C11998 * C3467 + C11999 * C3465 - C12000 * C3468 -
                      C12001 * C48129) *
                         C48362) *
                        C5057 +
                    ((C3648 + C3649 - C3650 - C3651) * C10789 +
                     (C14702 + C14703 - C14704 - C14705) * C48362) *
                        C48329) *
                       C3071) *
                      C48296 +
                  ((((C3472 - (C3471 + C3470) + C3473) * C10789 +
                     (C14494 - (C14493 + C14492) + C14495) * C48362) *
                        C5057 +
                    ((C3476 - (C3475 + C3474) + C3477) * C10789 +
                     (C14496 - (C14497 + C14498) + C14499) * C48362) *
                        C48329) *
                       C48083 +
                   (((C3642 + C3641 - C3640 - C3643) * C10789 +
                     (C14700 + C14699 - C14698 - C14701) * C48362) *
                        C5057 +
                    ((C3646 + C3645 - C3644 - C3647) * C10789 +
                     (C15038 + C15039 - C15040 - C15041) * C48362) *
                        C48329) *
                       C48090 +
                   (((C3650 - (C3649 + C3648) + C3651) * C10789 +
                     (C14704 - (C14703 + C14702) + C14705) * C48362) *
                        C5057 +
                    ((C3654 - (C3653 + C3652) + C3655) * C10789 +
                     ((C113 * C1393 + C48228 * C1410) * C3468 -
                      (C1711 * C3465 + C1710 * C3467) +
                      (C113 * C1411 + C48228 * C1420) * C48129) *
                         C48362) *
                        C48329) *
                       C3071) *
                      C48008)) /
                (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C47030 +
             (C113 * C123 + C48228 * C136) * C48125 - C11120 * C47022 -
             C11121 * C48132 + C11122 * C47036 + C11123 * C4043) *
                C10789 +
            (C11120 * C47030 + C11121 * C48125 - C11122 * C47022 -
             C11123 * C48132 + C12882 * C47036 + C12883 * C4043) *
                C48362) *
               C5057 +
           ((C4048 + C4049 - C4050 - C4051 + C4052 + C4053) * C10789 +
            (C15188 + C15189 - C15190 - C15191 + C15192 + C15193) * C48362) *
               C48329) *
              C48083 +
          (((C11604 * C47022 -
             ((C113 * C319 + C48228 * C337) * C48125 +
              (C113 * C307 + C48228 * C320) * C47030) +
             C11605 * C48132 - C11996 * C47036 - C11997 * C4043) *
                C10789 +
            (C11996 * C47022 - (C11605 * C48125 + C11604 * C47030) +
             C11997 * C48132 - C13366 * C47036 - C13367 * C4043) *
                C48362) *
               C5057 +
           ((C4218 - (C4219 + C4220) + C4221 - C4222 - C4223) * C10789 +
            (C15394 - (C15395 + C15396) + C15397 - C15398 - C15399) * C48362) *
               C48329) *
              C48090 +
          ((((C113 * C308 + C48228 * C321) * C47030 +
             (C113 * C322 + C48228 * C338) * C48125 - C11998 * C47022 -
             C11999 * C48132 + C12000 * C47036 + C12001 * C4043) *
                C10789 +
            (C11998 * C47030 + C11999 * C48125 - C12000 * C47022 -
             C12001 * C48132 + (C113 * C7735 + C48228 * C7737) * C47036 +
             (C113 * C7738 + C48228 * C7741) * C4043) *
                C48362) *
               C5057 +
           ((C374 * C47030 + C375 * C48125 - C1708 * C47022 - C1709 * C48132 +
             C12002 * C47036 + C12003 * C4043) *
                C10789 +
            (C1708 * C47030 + C1709 * C48125 - C12002 * C47022 -
             C12003 * C48132 + (C113 * C7736 + C48228 * C7739) * C47036 +
             (C113 * C7740 + C48228 * C7742) * C4043) *
                C48362) *
               C48329) *
              C3071) *
         C47998) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3467 +
             (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
             C11121 * C48129) *
                C10789 +
            (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
             C11123 * C48129) *
                C48362) *
               C5057 +
           ((C3470 + C3471 - C3472 - C3473) * C10789 +
            (C14492 + C14493 - C14494 - C14495) * C48362) *
               C48329) *
              C48388 +
          (((C11604 * C3468 -
             ((C113 * C319 + C48228 * C337) * C3465 +
              (C113 * C307 + C48228 * C320) * C3467) +
             C11605 * C48129) *
                C10789 +
            (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
             C11997 * C48129) *
                C48362) *
               C5057 +
           ((C3640 - (C3641 + C3642) + C3643) * C10789 +
            (C14698 - (C14699 + C14700) + C14701) * C48362) *
               C48329) *
              C48384 +
          ((((C113 * C308 + C48228 * C321) * C3467 +
             (C113 * C322 + C48228 * C338) * C3465 - C11998 * C3468 -
             C11999 * C48129) *
                C10789 +
            (C11998 * C3467 + C11999 * C3465 - C12000 * C3468 -
             C12001 * C48129) *
                C48362) *
               C5057 +
           ((C3648 + C3649 - C3650 - C3651) * C10789 +
            (C14702 + C14703 - C14704 - C14705) * C48362) *
               C48329) *
              C48374 +
          (((C12474 * C3468 -
             ((C113 * C1261 + C48228 * C1271) * C3465 +
              (C113 * C1253 + C48228 * C1262) * C3467) +
             C12475 * C48129) *
                C10789 +
            ((C113 * C6381 + C48228 * C6383) * C3468 -
             (C12475 * C3465 + C12474 * C3467) +
             (C113 * C6384 + C48228 * C6387) * C48129) *
                C48362) *
               C5057 +
           ((C12139 * C3468 - (C1540 * C3465 + C1541 * C3467) +
             C12138 * C48129) *
                C10789 +
            ((C113 * C6382 + C48228 * C6385) * C3468 -
             (C12138 * C3465 + C12139 * C3467) +
             (C113 * C6386 + C48228 * C6388) * C48129) *
                C48362) *
               C48329) *
              C48352) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C3467 +
              (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
              C11121 * C48129) *
                 C10789 +
             (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
              C11123 * C48129) *
                 C48362) *
                C5057 +
            ((C3470 + C3471 - C3472 - C3473) * C10789 +
             (C14492 + C14493 - C14494 - C14495) * C48362) *
                C48329) *
               C2691 +
           (((C11604 * C3468 -
              ((C113 * C319 + C48228 * C337) * C3465 +
               (C113 * C307 + C48228 * C320) * C3467) +
              C11605 * C48129) *
                 C10789 +
             (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
              C11997 * C48129) *
                 C48362) *
                C5057 +
            ((C3640 - (C3641 + C3642) + C3643) * C10789 +
             (C14698 - (C14699 + C14700) + C14701) * C48362) *
                C48329) *
               C48087) *
              C48378 +
          ((((C3472 - (C3471 + C3470) + C3473) * C10789 +
             (C14494 - (C14493 + C14492) + C14495) * C48362) *
                C5057 +
            ((C3476 - (C3475 + C3474) + C3477) * C10789 +
             (C14496 - (C14497 + C14498) + C14499) * C48362) *
                C48329) *
               C2691 +
           (((C3642 + C3641 - C3640 - C3643) * C10789 +
             (C14700 + C14699 - C14698 - C14701) * C48362) *
                C5057 +
            ((C3646 + C3645 - C3644 - C3647) * C10789 +
             (C15038 + C15039 - C15040 - C15041) * C48362) *
                C48329) *
               C48087) *
              C48365 +
          (((C3490 * C10789 + (C14498 + C14497 - C14496 - C14499) * C48362) *
                C5057 +
            ((C3480 + C3479 - C3478 - C3481) * C10789 +
             (C14500 + C14501 - C14502 - C14503) * C48362) *
                C48329) *
               C2691 +
           ((C3930 * C10789 + (C15040 - (C15039 + C15038) + C15041) * C48362) *
                C5057 +
            ((C3927 - (C3926 + C3925) + C3928) * C10789 +
             ((C113 * C2317 + C48228 * C2318) * C3468 -
              (C1058 * C3465 + C1057 * C3467) +
              (C113 * C2319 + C48228 * C2320) * C48129) *
                 C48362) *
                C48329) *
               C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3757 +
             (C113 * C123 + C48228 * C136) * C48389 - C11120 * C3758 -
             C11121 * C48386 + C11122 * C3759 + C11123 * C48377 -
             C12882 * C3760 - C12883 * C48358) *
                C10789 +
            (C11120 * C3757 + C11121 * C48389 - C11122 * C3758 -
             C11123 * C48386 + C12882 * C3759 + C12883 * C48377 -
             C12884 * C3760 - C12885 * C48358) *
                C48362) *
               C5057 +
           ((C3762 + C3763 - C3764 - C3765 + C3766 + C3767 - C3768 - C3769) *
                C10789 +
            (C14836 + C14837 - C14838 - C14839 + C14840 + C14841 - C14842 -
             C14843) *
                C48362) *
               C48329) *
              C2691 +
          (((C11604 * C3758 -
             ((C113 * C319 + C48228 * C337) * C48389 +
              (C113 * C307 + C48228 * C320) * C3757) +
             C11605 * C48386 - C11996 * C3759 - C11997 * C48377 +
             C13366 * C3760 + C13367 * C48358) *
                C10789 +
            (C11996 * C3758 - (C11605 * C48389 + C11604 * C3757) +
             C11997 * C48386 - C13366 * C3759 - C13367 * C48377 +
             (C113 * C7249 + C48228 * C7251) * C3760 +
             (C113 * C7252 + C48228 * C7255) * C48358) *
                C48362) *
               C5057 +
           ((C1052 * C3758 - (C372 * C48389 + C373 * C3757) + C1053 * C48386 -
             C2338 * C3759 - C2339 * C48377 + C13090 * C3760 +
             C13091 * C48358) *
                C10789 +
            (C2338 * C3758 - (C1053 * C48389 + C1052 * C3757) + C2339 * C48386 -
             C13090 * C3759 - C13091 * C48377 +
             (C113 * C7250 + C48228 * C7253) * C3760 +
             (C113 * C7254 + C48228 * C7256) * C48358) *
                C48362) *
               C48329) *
              C48087) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C47030 +
              (C113 * C123 + C48228 * C136) * C48125 - C11120 * C47022 -
              C11121 * C48132 + C11122 * C47036 + C11123 * C4043) *
                 C10789 +
             (C11120 * C47030 + C11121 * C48125 - C11122 * C47022 -
              C11123 * C48132 + C12882 * C47036 + C12883 * C4043) *
                 C48362) *
                C5057 +
            ((C4048 + C4049 - C4050 - C4051 + C4052 + C4053) * C10789 +
             (C15188 + C15189 - C15190 - C15191 + C15192 + C15193) * C48362) *
                C48329) *
               C2691 +
           (((C11604 * C47022 -
              ((C113 * C319 + C48228 * C337) * C48125 +
               (C113 * C307 + C48228 * C320) * C47030) +
              C11605 * C48132 - C11996 * C47036 - C11997 * C4043) *
                 C10789 +
             (C11996 * C47022 - (C11605 * C48125 + C11604 * C47030) +
              C11997 * C48132 - C13366 * C47036 - C13367 * C4043) *
                 C48362) *
                C5057 +
            ((C4218 - (C4219 + C4220) + C4221 - C4222 - C4223) * C10789 +
             (C15394 - (C15395 + C15396) + C15397 - C15398 - C15399) * C48362) *
                C48329) *
               C48087) *
              C48296 +
          ((((C4050 - (C4049 + C4048) + C4051 - C4052 - C4053) * C10789 +
             (C15190 - (C15189 + C15188) + C15191 - C15192 - C15193) * C48362) *
                C5057 +
            ((C4056 - (C4055 + C4054) + C4057 - C4058 - C4059) * C10789 +
             (C15194 - (C15195 + C15196) + C15197 - C15198 - C15199) * C48362) *
                C48329) *
               C2691 +
           (((C4220 + C4219 - C4218 - C4221 + C4222 + C4223) * C10789 +
             (C15396 + C15395 - C15394 - C15397 + C15398 + C15399) * C48362) *
                C5057 +
            ((C4226 + C4225 - C4224 - C4227 + C4228 + C4229) * C10789 +
             (C1054 * C47030 + C1056 * C48125 - C2340 * C47022 -
              C2341 * C48132 + (C113 * C2583 + C48228 * C2588) * C47036 +
              (C113 * C2589 + C48228 * C2592) * C4043) *
                 C48362) *
                C48329) *
               C48087) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C3467 +
              (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
              C11121 * C48129) *
                 C10789 +
             (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
              C11123 * C48129) *
                 C48362) *
                C5057 +
            ((C3470 + C3471 - C3472 - C3473) * C10789 +
             (C14492 + C14493 - C14494 - C14495) * C48362) *
                C48329) *
               C2691 +
           (((C11604 * C3468 -
              ((C113 * C319 + C48228 * C337) * C3465 +
               (C113 * C307 + C48228 * C320) * C3467) +
              C11605 * C48129) *
                 C10789 +
             (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
              C11997 * C48129) *
                 C48362) *
                C5057 +
            ((C3640 - (C3641 + C3642) + C3643) * C10789 +
             (C14698 - (C14699 + C14700) + C14701) * C48362) *
                C48329) *
               C48087) *
              C48378 +
          ((((C3472 - (C3471 + C3470) + C3473) * C10789 +
             (C14494 - (C14493 + C14492) + C14495) * C48362) *
                C5057 +
            ((C3476 - (C3475 + C3474) + C3477) * C10789 +
             (C14496 - (C14497 + C14498) + C14499) * C48362) *
                C48329) *
               C2691 +
           (((C3642 + C3641 - C3640 - C3643) * C10789 +
             (C14700 + C14699 - C14698 - C14701) * C48362) *
                C5057 +
            ((C3646 + C3645 - C3644 - C3647) * C10789 +
             (C15038 + C15039 - C15040 - C15041) * C48362) *
                C48329) *
               C48087) *
              C48365 +
          (((C3490 * C10789 + (C14498 + C14497 - C14496 - C14499) * C48362) *
                C5057 +
            ((C3480 + C3479 - C3478 - C3481) * C10789 +
             (C14500 + C14501 - C14502 - C14503) * C48362) *
                C48329) *
               C2691 +
           ((C3930 * C10789 + (C15040 - (C15039 + C15038) + C15041) * C48362) *
                C5057 +
            ((C3927 - (C3926 + C3925) + C3928) * C10789 +
             ((C113 * C2317 + C48228 * C2318) * C3468 -
              (C1058 * C3465 + C1057 * C3467) +
              (C113 * C2319 + C48228 * C2320) * C48129) *
                 C48362) *
                C48329) *
               C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3467 +
             (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
             C11121 * C48129) *
                C10789 +
            (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
             C11123 * C48129) *
                C48362) *
               C5057 +
           ((C3470 + C3471 - C3472 - C3473) * C10789 +
            (C14492 + C14493 - C14494 - C14495) * C48362) *
               C48329) *
              C48388 +
          (((C11604 * C3468 -
             ((C113 * C319 + C48228 * C337) * C3465 +
              (C113 * C307 + C48228 * C320) * C3467) +
             C11605 * C48129) *
                C10789 +
            (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
             C11997 * C48129) *
                C48362) *
               C5057 +
           ((C3640 - (C3641 + C3642) + C3643) * C10789 +
            (C14698 - (C14699 + C14700) + C14701) * C48362) *
               C48329) *
              C48384 +
          ((((C113 * C308 + C48228 * C321) * C3467 +
             (C113 * C322 + C48228 * C338) * C3465 - C11998 * C3468 -
             C11999 * C48129) *
                C10789 +
            (C11998 * C3467 + C11999 * C3465 - C12000 * C3468 -
             C12001 * C48129) *
                C48362) *
               C5057 +
           ((C3648 + C3649 - C3650 - C3651) * C10789 +
            (C14702 + C14703 - C14704 - C14705) * C48362) *
               C48329) *
              C48374 +
          (((C12474 * C3468 -
             ((C113 * C1261 + C48228 * C1271) * C3465 +
              (C113 * C1253 + C48228 * C1262) * C3467) +
             C12475 * C48129) *
                C10789 +
            ((C113 * C6381 + C48228 * C6383) * C3468 -
             (C12475 * C3465 + C12474 * C3467) +
             (C113 * C6384 + C48228 * C6387) * C48129) *
                C48362) *
               C5057 +
           ((C12139 * C3468 - (C1540 * C3465 + C1541 * C3467) +
             C12138 * C48129) *
                C10789 +
            ((C113 * C6382 + C48228 * C6385) * C3468 -
             (C12138 * C3465 + C12139 * C3467) +
             (C113 * C6386 + C48228 * C6388) * C48129) *
                C48362) *
               C48329) *
              C48352) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C10789 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C5057 +
            ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
               C1519 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C10789) *
                C5057) *
               C1520 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C10789 +
             (C11998 * C114 + C11999 * C48042) * C48362) *
                C5057 +
            ((C386 + C387) * C10789 + (C10948 + C10949) * C48362) * C48329) *
               C1521 -
           (((C12140 + C12141) * C48362 + (C1544 + C1545) * C10789) * C48329 +
            (((C113 * C1817 + C48228 * C1822) * C48042 +
              (C113 * C1813 + C48228 * C1816) * C114) *
                 C48362 +
             ((C113 * C1261 + C48228 * C1271) * C48042 +
              (C113 * C1253 + C48228 * C1262) * C114) *
                 C10789) *
                C5057) *
               C48352) *
              C48296 +
          ((((C385 + C384) * C10789 + (C10947 + C10946) * C48362) * C5057 +
            ((C383 + C382) * C10789 + (C10950 + C10951) * C48362) * C48329) *
               C1520 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
               C1519 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C10789) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C10789) * C5057) *
               C1521 +
           (((C1545 + C1544) * C10789 + (C12141 + C12140) * C48362) * C5057 +
            ((C1543 + C1542) * C10789 +
             ((C113 * C1815 + C48228 * C1820) * C114 +
              (C113 * C1821 + C48228 * C1824) * C48042) *
                 C48362) *
                C48329) *
               C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C10789 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C5057 +
            ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
               C48310 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
            (((C113 * C1019 + C48228 * C1028) * C48042 +
              (C113 * C1013 + C48228 * C1018) * C114) *
                 C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C10789) *
                C5057) *
               C48087) *
              C713 +
          ((((C385 + C384) * C10789 + (C10947 + C10946) * C48362) * C5057 +
            ((C383 + C382) * C10789 + (C10950 + C10951) * C48362) * C48329) *
               C48087 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
               C48310) *
              C714 +
          (((C184 * C10789 + (C10795 + C10794) * C48362) * C5057 +
            ((C179 + C178) * C10789 + (C10796 + C10797) * C48362) * C48329) *
               C48310 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C10789) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C10789) * C5057) *
               C48087) *
              C715 +
          (((C722 * C10789 + (C11255 + C11254) * C48362) * C5057 +
            ((C731 + C730) * C10789 +
             ((C113 * C1017 + C48228 * C1026) * C114 +
              (C113 * C1027 + C48228 * C1032) * C48042) *
                 C48362) *
                C48329) *
               C48087 -
           (((C10798 + C10799) * C48362 + (C181 + C180) * C10789) * C48329 +
            ((C10797 + C10796) * C48362 + C185 * C10789) * C5057) *
               C48310) *
              C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C1938 +
              (C113 * C123 + C48228 * C136) * C1935 - C11120 * C1939 -
              C11121 * C1936 + C11122 * C1940 + C11123 * C48345) *
                 C10789 +
             (C11120 * C1938 + C11121 * C1935 - C11122 * C1939 -
              C11123 * C1936 + C12882 * C1940 + C12883 * C48345) *
                 C48362) *
                C5057 +
            ((C1942 + C1943 - C1944 - C1945 + C1946 + C1947) * C10789 +
             (C12622 + C12623 - C12624 - C12625 + C12626 + C12627) * C48362) *
                C48329) *
               C48310 +
           (((C11604 * C1939 -
              ((C113 * C319 + C48228 * C337) * C1935 +
               (C113 * C307 + C48228 * C320) * C1938) +
              C11605 * C1936 - C11996 * C1940 - C11997 * C48345) *
                 C10789 +
             (C11996 * C1939 - (C11605 * C1935 + C11604 * C1938) +
              C11997 * C1936 - (C113 * C2581 + C48228 * C2584) * C1940 -
              (C113 * C2585 + C48228 * C2590) * C48345) *
                 C48362) *
                C5057 +
            ((C2322 - (C2323 + C2324) + C2325 - C2342 - C2343) * C10789 +
             (C13082 - (C13083 + C13084) + C13085 - C13092 - C13093) * C48362) *
                C48329) *
               C48087) *
              C48296 +
          ((((C1944 - (C1943 + C1942) + C1945 - C1946 - C1947) * C10789 +
             (C12624 - (C12623 + C12622) + C12625 - C12626 - C12627) * C48362) *
                C5057 +
            ((C1950 - (C1949 + C1948) + C1951 - C1952 - C1953) * C10789 +
             (C12628 - (C12629 + C12630) + C12631 - C12632 - C12633) * C48362) *
                C48329) *
               C48310 +
           (((C2324 + C2323 - C2322 - C2325 + C2342 + C2343) * C10789 +
             (C13084 + C13083 - C13082 - C13085 + C13092 + C13093) * C48362) *
                C5057 +
            ((C2332 + C2331 - C2330 - C2333 + C2344 + C2345) * C10789 +
             (C1054 * C1938 + C1056 * C1935 - C2340 * C1939 - C2341 * C1936 +
              (C113 * C2583 + C48228 * C2588) * C1940 +
              (C113 * C2589 + C48228 * C2592) * C48345) *
                 C48362) *
                C48329) *
               C48087) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C831 +
             (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
             C11121 * C48129) *
                C10789 +
            (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
             C11123 * C48129) *
                C48362) *
               C5057 +
           ((C838 + C839 - C840 - C841) * C10789 +
            (C11386 + C11387 - C11388 - C11389) * C48362) *
               C48329) *
              C1519 +
          (((C11604 * C832 -
             ((C113 * C319 + C48228 * C337) * C48311 +
              (C113 * C307 + C48228 * C320) * C831) +
             C11605 * C48129) *
                C10789 +
            (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
             C11997 * C48129) *
                C48362) *
               C5057 +
           ((C1059 - (C1036 + C1037) + C1060) * C10789 +
            (C11596 - (C11597 + C11598) + C11599) * C48362) *
               C48329) *
              C1520 +
          ((((C113 * C308 + C48228 * C321) * C831 +
             (C113 * C322 + C48228 * C338) * C48311 - C11998 * C832 -
             C11999 * C48129) *
                C10789 +
            (C11998 * C831 + C11999 * C48311 - C12000 * C832 -
             C12001 * C48129) *
                C48362) *
               C5057 +
           ((C1696 + C1697 - C1712 - C1713) * C10789 +
            (C12336 + C12337 - C12338 - C12339) * C48362) *
               C48329) *
              C1521 +
          (((C12474 * C832 -
             ((C113 * C1261 + C48228 * C1271) * C48311 +
              (C113 * C1253 + C48228 * C1262) * C831) +
             C12475 * C48129) *
                C10789 +
            ((C113 * C6381 + C48228 * C6383) * C832 -
             (C12475 * C48311 + C12474 * C831) +
             (C113 * C6384 + C48228 * C6387) * C48129) *
                C48362) *
               C5057 +
           ((C12139 * C832 - (C1540 * C48311 + C1541 * C831) +
             C12138 * C48129) *
                C10789 +
            ((C113 * C6382 + C48228 * C6385) * C832 -
             (C12138 * C48311 + C12139 * C831) +
             (C113 * C6386 + C48228 * C6388) * C48129) *
                C48362) *
               C48329) *
              C48352) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C831 +
              (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
              C11121 * C48129) *
                 C10789 +
             (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
              C11123 * C48129) *
                 C48362) *
                C5057 +
            ((C838 + C839 - C840 - C841) * C10789 +
             (C11386 + C11387 - C11388 - C11389) * C48362) *
                C48329) *
               C48310 +
           (((C11604 * C832 -
              ((C113 * C319 + C48228 * C337) * C48311 +
               (C113 * C307 + C48228 * C320) * C831) +
              C11605 * C48129) *
                 C10789 +
             ((C113 * C1385 + C48228 * C1394) * C832 -
              (C11605 * C48311 + C11604 * C831) +
              (C113 * C1395 + C48228 * C1412) * C48129) *
                 C48362) *
                C5057 +
            ((C1059 - (C1036 + C1037) + C1060) * C10789 +
             (C11596 - (C11597 + C11598) + C11599) * C48362) *
                C48329) *
               C48087) *
              C302 +
          ((((C840 - (C839 + C838) + C841) * C10789 +
             (C11388 - (C11387 + C11386) + C11389) * C48362) *
                C5057 +
            ((C844 - (C843 + C842) + C845) * C10789 +
             (C11390 - (C11391 + C11392) + C11393) * C48362) *
                C48329) *
               C48310 +
           (((C1037 + C1036 - C1059 - C1060) * C10789 +
             (C11598 + C11597 - C11596 - C11599) * C48362) *
                C5057 +
            ((C1043 + C1042 - C1061 - C1062) * C10789 +
             (C11600 + C11601 - C11602 - C11603) * C48362) *
                C48329) *
               C48087) *
              C303 +
          (((C864 * C10789 + (C11392 + C11391 - C11390 - C11393) * C48362) *
                C5057 +
            ((C848 + C847 - C846 - C849) * C10789 +
             (C11394 + C11395 - C11396 - C11397) * C48362) *
                C48329) *
               C48310 +
           ((C1066 * C10789 + (C11602 - (C11601 + C11600) + C11603) * C48362) *
                C5057 +
            ((C1063 - (C1047 + C1046) + C1064) * C10789 +
             ((C113 * C2317 + C48228 * C2318) * C832 -
              (C1058 * C48311 + C1057 * C831) +
              (C113 * C2319 + C48228 * C2320) * C48129) *
                 C48362) *
                C48329) *
               C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C2447 +
             (C113 * C123 + C48228 * C136) * C2443 - C11120 * C2448 -
             C11121 * C2444 + C11122 * C2449 + C11123 * C2445 - C12882 * C2450 -
             C12883 * C48358) *
                C10789 +
            (C11120 * C2447 + C11121 * C2443 - C11122 * C2448 - C11123 * C2444 +
             C12882 * C2449 + C12883 * C2445 - C12884 * C2450 -
             C12885 * C48358) *
                C48362) *
               C5057 +
           ((C2456 + C2457 - C2458 - C2459 + C2460 + C2461 - C2480 - C2481) *
                C10789 +
            (C13224 + C13225 - C13226 - C13227 + C13228 + C13229 - C13230 -
             C13231) *
                C48362) *
               C48329) *
              C48310 +
          (((C11604 * C2448 -
             ((C113 * C319 + C48228 * C337) * C2443 +
              (C113 * C307 + C48228 * C320) * C2447) +
             C11605 * C2444 - C11996 * C2449 - C11997 * C2445 + C13366 * C2450 +
             C13367 * C48358) *
                C10789 +
            (C11996 * C2448 - (C11605 * C2443 + C11604 * C2447) +
             C11997 * C2444 - C13366 * C2449 - C13367 * C2445 +
             (C113 * C7249 + C48228 * C7251) * C2450 +
             (C113 * C7252 + C48228 * C7255) * C48358) *
                C48362) *
               C5057 +
           ((C1052 * C2448 - (C372 * C2443 + C373 * C2447) + C1053 * C2444 -
             C2338 * C2449 - C2339 * C2445 + C13090 * C2450 + C13091 * C48358) *
                C10789 +
            (C2338 * C2448 - (C1053 * C2443 + C1052 * C2447) + C2339 * C2444 -
             C13090 * C2449 - C13091 * C2445 +
             (C113 * C7250 + C48228 * C7253) * C2450 +
             (C113 * C7254 + C48228 * C7256) * C48358) *
                C48362) *
               C48329) *
              C48087) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48228 * C122) * C114 +
                 (C113 * C123 + C48228 * C136) * C48042) *
                    C10789 +
                ((C113 * C513 + C48228 * C523) * C114 +
                 (C113 * C524 + C48228 * C543) * C48042) *
                    C48362) *
                   C5057 +
               ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
                  C48025 * C108 -
              (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
               ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
                  C48025 * C109 +
              ((C184 * C10789 + (C10795 + C10794) * C48362) * C5057 +
               ((C179 + C178) * C10789 + (C10796 + C10797) * C48362) * C48329) *
                  C48025 * C110 -
              (((C10798 + C10799) * C48362 + (C181 + C180) * C10789) * C48329 +
               ((C10797 + C10796) * C48362 + C185 * C10789) * C5057) *
                  C48025 * C111 +
              ((C186 * C10789 + (C10799 + C10798) * C48362) * C5057 +
               ((C183 + C182) * C10789 +
                ((C113 * C833 + C48228 * C834) * C114 +
                 (C113 * C835 + C48228 * C836) * C48042) *
                    C48362) *
                   C48329) *
                  C48025 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((((C113 * C115 + C48228 * C122) * C114 +
                  (C113 * C123 + C48228 * C136) * C48042) *
                     C10789 +
                 ((C113 * C513 + C48228 * C523) * C114 +
                  (C113 * C524 + C48228 * C543) * C48042) *
                     C48362) *
                    C5057 +
                ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) *
                    C48329) *
                   C48381 -
               (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
                (((C113 * C1019 + C48228 * C1028) * C48042 +
                  (C113 * C1013 + C48228 * C1018) * C114) *
                     C48362 +
                 ((C113 * C319 + C48228 * C337) * C48042 +
                  (C113 * C307 + C48228 * C320) * C114) *
                     C10789) *
                    C5057) *
                   C48369 +
               ((((C113 * C308 + C48228 * C321) * C114 +
                  (C113 * C322 + C48228 * C338) * C48042) *
                     C10789 +
                 ((C113 * C1388 + C48228 * C1400) * C114 +
                  (C113 * C1401 + C48228 * C1415) * C48042) *
                     C48362) *
                    C5057 +
                ((C386 + C387) * C10789 + (C10948 + C10949) * C48362) *
                    C48329) *
                   C48342) *
                  C302 +
              ((((C385 + C384) * C10789 + (C10947 + C10946) * C48362) * C5057 +
                ((C383 + C382) * C10789 + (C10950 + C10951) * C48362) *
                    C48329) *
                   C48369 -
               (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
                ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
                   C48381 -
               (((C10952 + C10953) * C48362 + (C389 + C388) * C10789) * C48329 +
                ((C10949 + C10948) * C48362 + (C387 + C386) * C10789) * C5057) *
                   C48342) *
                  C303 +
              (((C184 * C10789 + (C10795 + C10794) * C48362) * C5057 +
                ((C179 + C178) * C10789 + (C10796 + C10797) * C48362) *
                    C48329) *
                   C48381 -
               (((C1058 * C48042 + C1057 * C114) * C48362 +
                 (C391 + C390) * C10789) *
                    C48329 +
                ((C10951 + C10950) * C48362 + C394 * C10789) * C5057) *
                   C48369 +
               ((C395 * C10789 + (C10953 + C10952) * C48362) * C5057 +
                ((C393 + C392) * C10789 +
                 ((C113 * C1691 + C48228 * C1692) * C114 +
                  (C113 * C1693 + C48228 * C1694) * C48042) *
                     C48362) *
                    C48329) *
                   C48342) *
                  C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C510 +
             (C113 * C123 + C48228 * C136) * C48382 - C11120 * C511 -
             C11121 * C48371 + C11122 * C512 + C11123 * C48345) *
                C10789 +
            (C11120 * C510 + C11121 * C48382 - C11122 * C511 - C11123 * C48371 +
             (C113 * C2147 + C48228 * C2153) * C512 +
             (C113 * C2154 + C48228 * C2165) * C48345) *
                C48362) *
               C5057 +
           ((C554 + C555 - C597 - C598 + C599 + C600) * C10789 +
            (C11108 + C11109 - C11110 - C11111 + C11112 + C11113) * C48362) *
               C48329) *
              C48025 * C302 +
          (((C597 - (C555 + C554) + C598 - C599 - C600) * C10789 +
            (C11110 - (C11109 + C11108) + C11111 - C11112 - C11113) * C48362) *
               C5057 +
           ((C601 - (C565 + C564) + C602 - C603 - C604) * C10789 +
            (C11114 - (C11115 + C11116) + C11117 - C11118 - C11119) * C48362) *
               C48329) *
              C48025 * C303 +
          ((C612 * C10789 +
            (C11116 + C11115 - C11114 - C11117 + C11118 + C11119) * C48362) *
               C5057 +
           ((C577 + C576 - C605 - C606 + C607 + C608) * C10789 +
            (C593 * C510 + C594 * C48382 - C595 * C511 - C596 * C48371 +
             (C113 * C2451 + C48228 * C2452) * C512 +
             (C113 * C2453 + C48228 * C2454) * C48345) *
                C48362) *
               C48329) *
              C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C10789 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C5057 +
            ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
               C1177 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C10789) *
                C5057) *
               C1178 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C10789 +
             ((C113 * C1388 + C48228 * C1400) * C114 +
              (C113 * C1401 + C48228 * C1415) * C48042) *
                 C48362) *
                C5057 +
            ((C386 + C387) * C10789 + (C10948 + C10949) * C48362) * C48329) *
               C48342) *
              C48378 +
          ((((C385 + C384) * C10789 + (C10947 + C10946) * C48362) * C5057 +
            ((C383 + C382) * C10789 + (C10950 + C10951) * C48362) * C48329) *
               C1178 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
               C1177 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C10789) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C10789) * C5057) *
               C48342) *
              C48365 +
          (((C184 * C10789 + (C10795 + C10794) * C48362) * C5057 +
            ((C179 + C178) * C10789 + (C10796 + C10797) * C48362) * C48329) *
               C1177 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C10789) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C10789) * C5057) *
               C1178 +
           ((C395 * C10789 + (C10953 + C10952) * C48362) * C5057 +
            ((C393 + C392) * C10789 +
             ((C113 * C1691 + C48228 * C1692) * C114 +
              (C113 * C1693 + C48228 * C1694) * C48042) *
                 C48362) *
                C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C10789 +
            (C11120 * C114 + C11121 * C48042) * C48362) *
               C5057 +
           ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
              C1245 -
          (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
           ((C11605 * C48042 + C11604 * C114) * C48362 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C10789) *
               C5057) *
              C1246 +
          ((((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C10789 +
            ((C113 * C1388 + C48228 * C1400) * C114 +
             (C113 * C1401 + C48228 * C1415) * C48042) *
                C48362) *
               C5057 +
           ((C386 + C387) * C10789 + (C10948 + C10949) * C48362) * C48329) *
              C1247 -
          ((((C113 * C1819 + C48228 * C1823) * C48042 +
             (C113 * C1814 + C48228 * C1818) * C114) *
                C48362 +
            (C1544 + C1545) * C10789) *
               C48329 +
           (((C113 * C1817 + C48228 * C1822) * C48042 +
             (C113 * C1813 + C48228 * C1816) * C114) *
                C48362 +
            ((C113 * C1261 + C48228 * C1271) * C48042 +
             (C113 * C1253 + C48228 * C1262) * C114) *
                C10789) *
               C5057) *
              C1248 +
          ((((C113 * C1254 + C48228 * C1263) * C114 +
             (C113 * C1264 + C48228 * C1272) * C48042) *
                C10789 +
            ((C113 * C6867 + C48228 * C6869) * C114 +
             (C113 * C6870 + C48228 * C6873) * C48042) *
                C48362) *
               C5057 +
           (((C113 * C1255 + C48228 * C1265) * C114 +
             (C113 * C1266 + C48228 * C1273) * C48042) *
                C10789 +
            ((C113 * C6868 + C48228 * C6871) * C114 +
             (C113 * C6872 + C48228 * C6874) * C48042) *
                C48362) *
               C48329) *
              C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C510 +
             (C113 * C123 + C48228 * C136) * C48382 - C11120 * C511 -
             C11121 * C48371 + C11122 * C512 + C11123 * C48345) *
                C10789 +
            (C11120 * C510 + C11121 * C48382 - C11122 * C511 - C11123 * C48371 +
             (C113 * C2147 + C48228 * C2153) * C512 +
             (C113 * C2154 + C48228 * C2165) * C48345) *
                C48362) *
               C5057 +
           ((C554 + C555 - C597 - C598 + C599 + C600) * C10789 +
            (C11108 + C11109 - C11110 - C11111 + C11112 + C11113) * C48362) *
               C48329) *
              C1177 +
          (((C11604 * C511 -
             ((C113 * C319 + C48228 * C337) * C48382 +
              (C113 * C307 + C48228 * C320) * C510) +
             C11605 * C48371 - C11996 * C512 - C11997 * C48345) *
                C10789 +
            (C11996 * C511 - (C11605 * C48382 + C11604 * C510) +
             C11997 * C48371 - (C113 * C2581 + C48228 * C2584) * C512 -
             (C113 * C2585 + C48228 * C2590) * C48345) *
                C48362) *
               C5057 +
           ((C2948 - (C2949 + C2950) + C2951 - C2952 - C2953) * C10789 +
            (C2338 * C511 - (C1053 * C48382 + C1052 * C510) + C2339 * C48371 -
             (C113 * C2582 + C48228 * C2586) * C512 -
             (C113 * C2587 + C48228 * C2591) * C48345) *
                C48362) *
               C48329) *
              C1178 +
          ((((C113 * C308 + C48228 * C321) * C510 +
             (C113 * C322 + C48228 * C338) * C48382 - C11998 * C511 -
             C11999 * C48371 + C12000 * C512 + C12001 * C48345) *
                C10789 +
            (C11998 * C510 + C11999 * C48382 - C12000 * C511 - C12001 * C48371 +
             (C113 * C7735 + C48228 * C7737) * C512 +
             (C113 * C7738 + C48228 * C7741) * C48345) *
                C48362) *
               C5057 +
           ((C374 * C510 + C375 * C48382 - C1708 * C511 - C1709 * C48371 +
             C12002 * C512 + C12003 * C48345) *
                C10789 +
            (C1708 * C510 + C1709 * C48382 - C12002 * C511 - C12003 * C48371 +
             (C113 * C7736 + C48228 * C7739) * C512 +
             (C113 * C7740 + C48228 * C7742) * C48345) *
                C48362) *
               C48329) *
              C48342) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C1938 +
             (C113 * C123 + C48228 * C136) * C1935 - C11120 * C1939 -
             C11121 * C1936 + C11122 * C1940 + C11123 * C48345) *
                C10789 +
            (C11120 * C1938 + C11121 * C1935 - C11122 * C1939 - C11123 * C1936 +
             (C113 * C2147 + C48228 * C2153) * C1940 +
             (C113 * C2154 + C48228 * C2165) * C48345) *
                C48362) *
               C5057 +
           ((C1942 + C1943 - C1944 - C1945 + C1946 + C1947) * C10789 +
            (C12622 + C12623 - C12624 - C12625 + C12626 + C12627) * C48362) *
               C48329) *
              C48025 * C48378 +
          (((C1944 - (C1943 + C1942) + C1945 - C1946 - C1947) * C10789 +
            (C12624 - (C12623 + C12622) + C12625 - C12626 - C12627) * C48362) *
               C5057 +
           ((C1950 - (C1949 + C1948) + C1951 - C1952 - C1953) * C10789 +
            (C12628 - (C12629 + C12630) + C12631 - C12632 - C12633) * C48362) *
               C48329) *
              C48025 * C48365 +
          ((C1964 * C10789 +
            (C12630 + C12629 - C12628 - C12631 + C12632 + C12633) * C48362) *
               C5057 +
           ((C1956 + C1955 - C1954 - C1957 + C1958 + C1959) * C10789 +
            (C593 * C1938 + C594 * C1935 - C595 * C1939 - C596 * C1936 +
             (C113 * C2451 + C48228 * C2452) * C1940 +
             (C113 * C2453 + C48228 * C2454) * C48345) *
                C48362) *
               C48329) *
              C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C1938 +
             (C113 * C123 + C48228 * C136) * C1935 - C11120 * C1939 -
             C11121 * C1936 + C11122 * C1940 + C11123 * C48345) *
                C10789 +
            (C11120 * C1938 + C11121 * C1935 - C11122 * C1939 - C11123 * C1936 +
             (C113 * C2147 + C48228 * C2153) * C1940 +
             (C113 * C2154 + C48228 * C2165) * C48345) *
                C48362) *
               C5057 +
           ((C1942 + C1943 - C1944 - C1945 + C1946 + C1947) * C10789 +
            (C12622 + C12623 - C12624 - C12625 + C12626 + C12627) * C48362) *
               C48329) *
              C48381 +
          (((C11604 * C1939 -
             ((C113 * C319 + C48228 * C337) * C1935 +
              (C113 * C307 + C48228 * C320) * C1938) +
             C11605 * C1936 - C11996 * C1940 - C11997 * C48345) *
                C10789 +
            (C11996 * C1939 - (C11605 * C1935 + C11604 * C1938) +
             C11997 * C1936 - (C113 * C2581 + C48228 * C2584) * C1940 -
             (C113 * C2585 + C48228 * C2590) * C48345) *
                C48362) *
               C5057 +
           ((C2322 - (C2323 + C2324) + C2325 - C2342 - C2343) * C10789 +
            (C2338 * C1939 - (C1053 * C1935 + C1052 * C1938) + C2339 * C1936 -
             (C113 * C2582 + C48228 * C2586) * C1940 -
             (C113 * C2587 + C48228 * C2591) * C48345) *
                C48362) *
               C48329) *
              C48369 +
          ((((C113 * C308 + C48228 * C321) * C1938 +
             (C113 * C322 + C48228 * C338) * C1935 - C11998 * C1939 -
             C11999 * C1936 + C12000 * C1940 + C12001 * C48345) *
                C10789 +
            (C11998 * C1938 + C11999 * C1935 - C12000 * C1939 - C12001 * C1936 +
             (C113 * C7735 + C48228 * C7737) * C1940 +
             (C113 * C7738 + C48228 * C7741) * C48345) *
                C48362) *
               C5057 +
           ((C374 * C1938 + C375 * C1935 - C1708 * C1939 - C1709 * C1936 +
             C12002 * C1940 + C12003 * C48345) *
                C10789 +
            (C1708 * C1938 + C1709 * C1935 - C12002 * C1939 - C12003 * C1936 +
             (C113 * C7736 + C48228 * C7739) * C1940 +
             (C113 * C7740 + C48228 * C7742) * C48345) *
                C48362) *
               C48329) *
              C48342) *
         C47998) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C2142 +
            (C113 * C123 + C48228 * C136) * C2137 - C11120 * C2143 -
            C11121 * C2138 + C11122 * C2144 + C11123 * C2139 - C12882 * C2145 -
            C12883 * C2140 + C12884 * C2146 + C12885 * C2141) *
               C10789 +
           (C11120 * C2142 + C11121 * C2137 - C11122 * C2143 - C11123 * C2138 +
            C12882 * C2144 + C12883 * C2139 - C12884 * C2145 - C12885 * C2140 +
            (C113 * C12861 + C48228 * C12863) * C2146 +
            (C113 * C12864 + C48228 * C12867) * C2141) *
               C48362) *
              C5057 +
          ((C164 * C2142 + C165 * C2137 - C584 * C2143 - C585 * C2138 +
            C586 * C2144 + C587 * C2139 - C2476 * C2145 - C2477 * C2140 +
            C12886 * C2146 + C12887 * C2141) *
               C10789 +
           (C584 * C2142 + C585 * C2137 - C586 * C2143 - C587 * C2138 +
            C2476 * C2144 + C2477 * C2139 - C12886 * C2145 - C12887 * C2140 +
            (C113 * C12862 + C48228 * C12865) * C2146 +
            (C113 * C12866 + C48228 * C12868) * C2141) *
               C48362) *
              C48329) *
         C48025 * C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C831 +
              (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
              C11121 * C48129) *
                 C10789 +
             (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
              C11123 * C48129) *
                 C48362) *
                C5057 +
            ((C838 + C839 - C840 - C841) * C10789 +
             (C11386 + C11387 - C11388 - C11389) * C48362) *
                C48329) *
               C1177 +
           (((C11604 * C832 -
              ((C113 * C319 + C48228 * C337) * C48311 +
               (C113 * C307 + C48228 * C320) * C831) +
              C11605 * C48129) *
                 C10789 +
             (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
              C11997 * C48129) *
                 C48362) *
                C5057 +
            ((C1059 - (C1036 + C1037) + C1060) * C10789 +
             (C11596 - (C11597 + C11598) + C11599) * C48362) *
                C48329) *
               C1178 +
           ((((C113 * C308 + C48228 * C321) * C831 +
              (C113 * C322 + C48228 * C338) * C48311 - C11998 * C832 -
              C11999 * C48129) *
                 C10789 +
             (C11998 * C831 + C11999 * C48311 - C12000 * C832 -
              C12001 * C48129) *
                 C48362) *
                C5057 +
            ((C1696 + C1697 - C1712 - C1713) * C10789 +
             (C12336 + C12337 - C12338 - C12339) * C48362) *
                C48329) *
               C48342) *
              C48296 +
          ((((C840 - (C839 + C838) + C841) * C10789 +
             (C11388 - (C11387 + C11386) + C11389) * C48362) *
                C5057 +
            ((C844 - (C843 + C842) + C845) * C10789 +
             (C11390 - (C11391 + C11392) + C11393) * C48362) *
                C48329) *
               C1177 +
           (((C1037 + C1036 - C1059 - C1060) * C10789 +
             (C11598 + C11597 - C11596 - C11599) * C48362) *
                C5057 +
            ((C1043 + C1042 - C1061 - C1062) * C10789 +
             (C11600 + C11601 - C11602 - C11603) * C48362) *
                C48329) *
               C1178 +
           (((C1712 - (C1697 + C1696) + C1713) * C10789 +
             (C12338 - (C12337 + C12336) + C12339) * C48362) *
                C5057 +
            ((C1714 - (C1703 + C1702) + C1715) * C10789 +
             ((C113 * C1393 + C48228 * C1410) * C832 -
              (C1711 * C48311 + C1710 * C831) +
              (C113 * C1411 + C48228 * C1420) * C48129) *
                 C48362) *
                C48329) *
               C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C831 +
             (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
             C11121 * C48129) *
                C10789 +
            (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
             C11123 * C48129) *
                C48362) *
               C5057 +
           ((C838 + C839 - C840 - C841) * C10789 +
            (C11386 + C11387 - C11388 - C11389) * C48362) *
               C48329) *
              C48025 * C713 +
          (((C840 - (C839 + C838) + C841) * C10789 +
            (C11388 - (C11387 + C11386) + C11389) * C48362) *
               C5057 +
           ((C844 - (C843 + C842) + C845) * C10789 +
            (C11390 - (C11391 + C11392) + C11393) * C48362) *
               C48329) *
              C48025 * C714 +
          ((C864 * C10789 + (C11392 + C11391 - C11390 - C11393) * C48362) *
               C5057 +
           ((C848 + C847 - C846 - C849) * C10789 +
            (C11394 + C11395 - C11396 - C11397) * C48362) *
               C48329) *
              C48025 * C715 +
          ((C865 * C10789 + (C11396 - (C11395 + C11394) + C11397) * C48362) *
               C5057 +
           ((C862 - (C851 + C850) + C863) * C10789 +
            ((C113 * C522 + C48228 * C541) * C832 -
             (C859 * C48311 + C858 * C831) +
             (C113 * C542 + C48228 * C552) * C48129) *
                C48362) *
               C48329) *
              C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C2447 +
             (C113 * C123 + C48228 * C136) * C2443 - C11120 * C2448 -
             C11121 * C2444 + C11122 * C2449 + C11123 * C2445 - C12882 * C2450 -
             C12883 * C48358) *
                C10789 +
            (C11120 * C2447 + C11121 * C2443 - C11122 * C2448 - C11123 * C2444 +
             C12882 * C2449 + C12883 * C2445 - C12884 * C2450 -
             C12885 * C48358) *
                C48362) *
               C5057 +
           ((C2456 + C2457 - C2458 - C2459 + C2460 + C2461 - C2480 - C2481) *
                C10789 +
            (C13224 + C13225 - C13226 - C13227 + C13228 + C13229 - C13230 -
             C13231) *
                C48362) *
               C48329) *
              C48025 * C48296 +
          (((C2458 - (C2457 + C2456) + C2459 - C2460 - C2461 + C2480 + C2481) *
                C10789 +
            (C13226 - (C13225 + C13224) + C13227 - C13228 - C13229 + C13230 +
             C13231) *
                C48362) *
               C5057 +
           ((C2468 - (C2467 + C2466) + C2469 - C2470 - C2471 + C2482 + C2483) *
                C10789 +
            (C591 * C2448 - (C590 * C2443 + C589 * C2447) + C592 * C2444 -
             C2478 * C2449 - C2479 * C2445 +
             (C113 * C2152 + C48228 * C2163) * C2450 +
             (C113 * C2164 + C48228 * C2170) * C48358) *
                C48362) *
               C48329) *
              C48025 * C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C10789 +
             ((C113 * C513 + C48228 * C523) * C114 +
              (C113 * C524 + C48228 * C543) * C48042) *
                 C48362) *
                C5057 +
            ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
               C48381 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
            (((C113 * C1019 + C48228 * C1028) * C48042 +
              (C113 * C1013 + C48228 * C1018) * C114) *
                 C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C10789) *
                C5057) *
               C48369 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C10789 +
             ((C113 * C1388 + C48228 * C1400) * C114 +
              (C113 * C1401 + C48228 * C1415) * C48042) *
                 C48362) *
                C5057 +
            ((C386 + C387) * C10789 + (C10948 + C10949) * C48362) * C48329) *
               C48342) *
              C302 +
          ((((C385 + C384) * C10789 + (C10947 + C10946) * C48362) * C5057 +
            ((C383 + C382) * C10789 + (C10950 + C10951) * C48362) * C48329) *
               C48369 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
               C48381 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C10789) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C10789) * C5057) *
               C48342) *
              C303 +
          (((C184 * C10789 + (C10795 + C10794) * C48362) * C5057 +
            ((C179 + C178) * C10789 + (C10796 + C10797) * C48362) * C48329) *
               C48381 -
           (((C1058 * C48042 + C1057 * C114) * C48362 +
             (C391 + C390) * C10789) *
                C48329 +
            ((C10951 + C10950) * C48362 + C394 * C10789) * C5057) *
               C48369 +
           ((C395 * C10789 + (C10953 + C10952) * C48362) * C5057 +
            ((C393 + C392) * C10789 +
             ((C113 * C1691 + C48228 * C1692) * C114 +
              (C113 * C1693 + C48228 * C1694) * C48042) *
                 C48362) *
                C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C10789 +
            ((C113 * C513 + C48228 * C523) * C114 +
             (C113 * C524 + C48228 * C543) * C48042) *
                C48362) *
               C5057 +
           ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
              C48025 * C108 -
          (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
           ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
              C48025 * C109 +
          ((C184 * C10789 + (C10795 + C10794) * C48362) * C5057 +
           ((C179 + C178) * C10789 + (C10796 + C10797) * C48362) * C48329) *
              C48025 * C110 -
          (((C10798 + C10799) * C48362 + (C181 + C180) * C10789) * C48329 +
           ((C10797 + C10796) * C48362 + C185 * C10789) * C5057) *
              C48025 * C111 +
          ((C186 * C10789 + (C10799 + C10798) * C48362) * C5057 +
           ((C183 + C182) * C10789 + ((C113 * C833 + C48228 * C834) * C114 +
                                      (C113 * C835 + C48228 * C836) * C48042) *
                                         C48362) *
               C48329) *
              C48025 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C10789 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C5057 +
            ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
               C1177 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C10789) *
                C5057) *
               C1178 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C10789 +
             ((C113 * C1388 + C48228 * C1400) * C114 +
              (C113 * C1401 + C48228 * C1415) * C48042) *
                 C48362) *
                C5057 +
            ((C386 + C387) * C10789 + (C10948 + C10949) * C48362) * C48329) *
               C48342) *
              C48378 +
          ((((C385 + C384) * C10789 + (C10947 + C10946) * C48362) * C5057 +
            ((C383 + C382) * C10789 + (C10950 + C10951) * C48362) * C48329) *
               C1178 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
               C1177 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C10789) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C10789) * C5057) *
               C48342) *
              C48365 +
          (((C184 * C10789 + (C10795 + C10794) * C48362) * C5057 +
            ((C179 + C178) * C10789 + (C10796 + C10797) * C48362) * C48329) *
               C1177 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C10789) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C10789) * C5057) *
               C1178 +
           ((C395 * C10789 + (C10953 + C10952) * C48362) * C5057 +
            ((C393 + C392) * C10789 +
             ((C113 * C1691 + C48228 * C1692) * C114 +
              (C113 * C1693 + C48228 * C1694) * C48042) *
                 C48362) *
                C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C10789 +
            (C11120 * C114 + C11121 * C48042) * C48362) *
               C5057 +
           ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
              C1245 -
          (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
           ((C11605 * C48042 + C11604 * C114) * C48362 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C10789) *
               C5057) *
              C1246 +
          ((((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C10789 +
            ((C113 * C1388 + C48228 * C1400) * C114 +
             (C113 * C1401 + C48228 * C1415) * C48042) *
                C48362) *
               C5057 +
           ((C386 + C387) * C10789 + (C10948 + C10949) * C48362) * C48329) *
              C1247 -
          ((((C113 * C1819 + C48228 * C1823) * C48042 +
             (C113 * C1814 + C48228 * C1818) * C114) *
                C48362 +
            (C1544 + C1545) * C10789) *
               C48329 +
           (((C113 * C1817 + C48228 * C1822) * C48042 +
             (C113 * C1813 + C48228 * C1816) * C114) *
                C48362 +
            ((C113 * C1261 + C48228 * C1271) * C48042 +
             (C113 * C1253 + C48228 * C1262) * C114) *
                C10789) *
               C5057) *
              C1248 +
          ((((C113 * C1254 + C48228 * C1263) * C114 +
             (C113 * C1264 + C48228 * C1272) * C48042) *
                C10789 +
            ((C113 * C6867 + C48228 * C6869) * C114 +
             (C113 * C6870 + C48228 * C6873) * C48042) *
                C48362) *
               C5057 +
           (((C113 * C1255 + C48228 * C1265) * C114 +
             (C113 * C1266 + C48228 * C1273) * C48042) *
                C10789 +
            ((C113 * C6868 + C48228 * C6871) * C114 +
             (C113 * C6872 + C48228 * C6874) * C48042) *
                C48362) *
               C48329) *
              C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C1938 +
             (C113 * C123 + C48228 * C136) * C1935 - C11120 * C1939 -
             C11121 * C1936 + C11122 * C1940 + C11123 * C48345) *
                C10789 +
            (C11120 * C1938 + C11121 * C1935 - C11122 * C1939 - C11123 * C1936 +
             (C113 * C2147 + C48228 * C2153) * C1940 +
             (C113 * C2154 + C48228 * C2165) * C48345) *
                C48362) *
               C5057 +
           ((C1942 + C1943 - C1944 - C1945 + C1946 + C1947) * C10789 +
            (C12622 + C12623 - C12624 - C12625 + C12626 + C12627) * C48362) *
               C48329) *
              C48025 * C48378 +
          (((C1944 - (C1943 + C1942) + C1945 - C1946 - C1947) * C10789 +
            (C12624 - (C12623 + C12622) + C12625 - C12626 - C12627) * C48362) *
               C5057 +
           ((C1950 - (C1949 + C1948) + C1951 - C1952 - C1953) * C10789 +
            (C12628 - (C12629 + C12630) + C12631 - C12632 - C12633) * C48362) *
               C48329) *
              C48025 * C48365 +
          ((C1964 * C10789 +
            (C12630 + C12629 - C12628 - C12631 + C12632 + C12633) * C48362) *
               C5057 +
           ((C1956 + C1955 - C1954 - C1957 + C1958 + C1959) * C10789 +
            (C593 * C1938 + C594 * C1935 - C595 * C1939 - C596 * C1936 +
             (C113 * C2451 + C48228 * C2452) * C1940 +
             (C113 * C2453 + C48228 * C2454) * C48345) *
                C48362) *
               C48329) *
              C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C1938 +
             (C113 * C123 + C48228 * C136) * C1935 - C11120 * C1939 -
             C11121 * C1936 + C11122 * C1940 + C11123 * C48345) *
                C10789 +
            (C11120 * C1938 + C11121 * C1935 - C11122 * C1939 - C11123 * C1936 +
             (C113 * C2147 + C48228 * C2153) * C1940 +
             (C113 * C2154 + C48228 * C2165) * C48345) *
                C48362) *
               C5057 +
           ((C1942 + C1943 - C1944 - C1945 + C1946 + C1947) * C10789 +
            (C12622 + C12623 - C12624 - C12625 + C12626 + C12627) * C48362) *
               C48329) *
              C48381 +
          (((C11604 * C1939 -
             ((C113 * C319 + C48228 * C337) * C1935 +
              (C113 * C307 + C48228 * C320) * C1938) +
             C11605 * C1936 - C11996 * C1940 - C11997 * C48345) *
                C10789 +
            (C11996 * C1939 - (C11605 * C1935 + C11604 * C1938) +
             C11997 * C1936 - (C113 * C2581 + C48228 * C2584) * C1940 -
             (C113 * C2585 + C48228 * C2590) * C48345) *
                C48362) *
               C5057 +
           ((C2322 - (C2323 + C2324) + C2325 - C2342 - C2343) * C10789 +
            (C2338 * C1939 - (C1053 * C1935 + C1052 * C1938) + C2339 * C1936 -
             (C113 * C2582 + C48228 * C2586) * C1940 -
             (C113 * C2587 + C48228 * C2591) * C48345) *
                C48362) *
               C48329) *
              C48369 +
          ((((C113 * C308 + C48228 * C321) * C1938 +
             (C113 * C322 + C48228 * C338) * C1935 - C11998 * C1939 -
             C11999 * C1936 + C12000 * C1940 + C12001 * C48345) *
                C10789 +
            (C11998 * C1938 + C11999 * C1935 - C12000 * C1939 - C12001 * C1936 +
             (C113 * C7735 + C48228 * C7737) * C1940 +
             (C113 * C7738 + C48228 * C7741) * C48345) *
                C48362) *
               C5057 +
           ((C374 * C1938 + C375 * C1935 - C1708 * C1939 - C1709 * C1936 +
             C12002 * C1940 + C12003 * C48345) *
                C10789 +
            (C1708 * C1938 + C1709 * C1935 - C12002 * C1939 - C12003 * C1936 +
             (C113 * C7736 + C48228 * C7739) * C1940 +
             (C113 * C7740 + C48228 * C7742) * C48345) *
                C48362) *
               C48329) *
              C48342) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C3467 +
              (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
              C11121 * C48129) *
                 C10789 +
             (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
              C11123 * C48129) *
                 C48362) *
                C5057 +
            ((C3470 + C3471 - C3472 - C3473) * C10789 +
             (C14492 + C14493 - C14494 - C14495) * C48362) *
                C48329) *
               C48310 +
           (((C11604 * C3468 -
              ((C113 * C319 + C48228 * C337) * C3465 +
               (C113 * C307 + C48228 * C320) * C3467) +
              C11605 * C48129) *
                 C10789 +
             (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
              C11997 * C48129) *
                 C48362) *
                C5057 +
            ((C3640 - (C3641 + C3642) + C3643) * C10789 +
             (C14698 - (C14699 + C14700) + C14701) * C48362) *
                C48329) *
               C48087) *
              C48003 +
          ((((C3472 - (C3471 + C3470) + C3473) * C10789 +
             (C14494 - (C14493 + C14492) + C14495) * C48362) *
                C5057 +
            ((C3476 - (C3475 + C3474) + C3477) * C10789 +
             (C14496 - (C14497 + C14498) + C14499) * C48362) *
                C48329) *
               C48310 +
           (((C3642 + C3641 - C3640 - C3643) * C10789 +
             (C14700 + C14699 - C14698 - C14701) * C48362) *
                C5057 +
            ((C3646 + C3645 - C3644 - C3647) * C10789 +
             (C15038 + C15039 - C15040 - C15041) * C48362) *
                C48329) *
               C48087) *
              C48011 +
          (((C3490 * C10789 + (C14498 + C14497 - C14496 - C14499) * C48362) *
                C5057 +
            ((C3480 + C3479 - C3478 - C3481) * C10789 +
             (C14500 + C14501 - C14502 - C14503) * C48362) *
                C48329) *
               C48310 +
           ((C3930 * C10789 + (C15040 - (C15039 + C15038) + C15041) * C48362) *
                C5057 +
            ((C3927 - (C3926 + C3925) + C3928) * C10789 +
             ((C113 * C2317 + C48228 * C2318) * C3468 -
              (C1058 * C3465 + C1057 * C3467) +
              (C113 * C2319 + C48228 * C2320) * C48129) *
                 C48362) *
                C48329) *
               C48087) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C47030 +
              (C113 * C123 + C48228 * C136) * C48125 - C11120 * C47022 -
              C11121 * C48132 + C11122 * C47036 + C11123 * C4043) *
                 C10789 +
             (C11120 * C47030 + C11121 * C48125 - C11122 * C47022 -
              C11123 * C48132 + C12882 * C47036 + C12883 * C4043) *
                 C48362) *
                C5057 +
            ((C4048 + C4049 - C4050 - C4051 + C4052 + C4053) * C10789 +
             (C15188 + C15189 - C15190 - C15191 + C15192 + C15193) * C48362) *
                C48329) *
               C48310 +
           (((C11604 * C47022 -
              ((C113 * C319 + C48228 * C337) * C48125 +
               (C113 * C307 + C48228 * C320) * C47030) +
              C11605 * C48132 - C11996 * C47036 - C11997 * C4043) *
                 C10789 +
             (C11996 * C47022 - (C11605 * C48125 + C11604 * C47030) +
              C11997 * C48132 - C13366 * C47036 - C13367 * C4043) *
                 C48362) *
                C5057 +
            ((C4218 - (C4219 + C4220) + C4221 - C4222 - C4223) * C10789 +
             (C15394 - (C15395 + C15396) + C15397 - C15398 - C15399) * C48362) *
                C48329) *
               C48087) *
              C2799 +
          ((((C4050 - (C4049 + C4048) + C4051 - C4052 - C4053) * C10789 +
             (C15190 - (C15189 + C15188) + C15191 - C15192 - C15193) * C48362) *
                C5057 +
            ((C4056 - (C4055 + C4054) + C4057 - C4058 - C4059) * C10789 +
             (C15194 - (C15195 + C15196) + C15197 - C15198 - C15199) * C48362) *
                C48329) *
               C48310 +
           (((C4220 + C4219 - C4218 - C4221 + C4222 + C4223) * C10789 +
             (C15396 + C15395 - C15394 - C15397 + C15398 + C15399) * C48362) *
                C5057 +
            ((C4226 + C4225 - C4224 - C4227 + C4228 + C4229) * C10789 +
             (C1054 * C47030 + C1056 * C48125 - C2340 * C47022 -
              C2341 * C48132 + (C113 * C2583 + C48228 * C2588) * C47036 +
              (C113 * C2589 + C48228 * C2592) * C4043) *
                 C48362) *
                C48329) *
               C48087) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C3467 +
              (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
              C11121 * C48129) *
                 C10789 +
             (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
              C11123 * C48129) *
                 C48362) *
                C5057 +
            ((C3470 + C3471 - C3472 - C3473) * C10789 +
             (C14492 + C14493 - C14494 - C14495) * C48362) *
                C48329) *
               C48381 +
           (((C11604 * C3468 -
              ((C113 * C319 + C48228 * C337) * C3465 +
               (C113 * C307 + C48228 * C320) * C3467) +
              C11605 * C48129) *
                 C10789 +
             (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
              C11997 * C48129) *
                 C48362) *
                C5057 +
            ((C3640 - (C3641 + C3642) + C3643) * C10789 +
             (C14698 - (C14699 + C14700) + C14701) * C48362) *
                C48329) *
               C48369 +
           ((((C113 * C308 + C48228 * C321) * C3467 +
              (C113 * C322 + C48228 * C338) * C3465 - C11998 * C3468 -
              C11999 * C48129) *
                 C10789 +
             (C11998 * C3467 + C11999 * C3465 - C12000 * C3468 -
              C12001 * C48129) *
                 C48362) *
                C5057 +
            ((C3648 + C3649 - C3650 - C3651) * C10789 +
             (C14702 + C14703 - C14704 - C14705) * C48362) *
                C48329) *
               C48342) *
              C2799 +
          ((((C3472 - (C3471 + C3470) + C3473) * C10789 +
             (C14494 - (C14493 + C14492) + C14495) * C48362) *
                C5057 +
            ((C3476 - (C3475 + C3474) + C3477) * C10789 +
             (C14496 - (C14497 + C14498) + C14499) * C48362) *
                C48329) *
               C48381 +
           (((C3642 + C3641 - C3640 - C3643) * C10789 +
             (C14700 + C14699 - C14698 - C14701) * C48362) *
                C5057 +
            ((C3646 + C3645 - C3644 - C3647) * C10789 +
             (C1054 * C3467 + C1056 * C3465 - C2340 * C3468 - C2341 * C48129) *
                 C48362) *
                C48329) *
               C48369 +
           (((C3650 - (C3649 + C3648) + C3651) * C10789 +
             (C14704 - (C14703 + C14702) + C14705) * C48362) *
                C5057 +
            ((C3654 - (C3653 + C3652) + C3655) * C10789 +
             ((C113 * C1393 + C48228 * C1410) * C3468 -
              (C1711 * C3465 + C1710 * C3467) +
              (C113 * C1411 + C48228 * C1420) * C48129) *
                 C48362) *
                C48329) *
               C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3467 +
             (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
             C11121 * C48129) *
                C10789 +
            (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
             C11123 * C48129) *
                C48362) *
               C5057 +
           ((C3470 + C3471 - C3472 - C3473) * C10789 +
            (C14492 + C14493 - C14494 - C14495) * C48362) *
               C48329) *
              C48025 * C48387 +
          (((C3472 - (C3471 + C3470) + C3473) * C10789 +
            (C14494 - (C14493 + C14492) + C14495) * C48362) *
               C5057 +
           ((C3476 - (C3475 + C3474) + C3477) * C10789 +
            (C14496 - (C14497 + C14498) + C14499) * C48362) *
               C48329) *
              C48025 * C48380 +
          ((C3490 * C10789 + (C14498 + C14497 - C14496 - C14499) * C48362) *
               C5057 +
           ((C3480 + C3479 - C3478 - C3481) * C10789 +
            (C14500 + C14501 - C14502 - C14503) * C48362) *
               C48329) *
              C48025 * C48367 +
          ((C3491 * C10789 + (C14502 - (C14501 + C14500) + C14503) * C48362) *
               C5057 +
           ((C3484 - (C3483 + C3482) + C3485) * C10789 +
            ((C113 * C522 + C48228 * C541) * C3468 -
             (C859 * C3465 + C858 * C3467) +
             (C113 * C542 + C48228 * C552) * C48129) *
                C48362) *
               C48329) *
              C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3757 +
             (C113 * C123 + C48228 * C136) * C48389 - C11120 * C3758 -
             C11121 * C48386 + C11122 * C3759 + C11123 * C48377 -
             C12882 * C3760 - C12883 * C48358) *
                C10789 +
            (C11120 * C3757 + C11121 * C48389 - C11122 * C3758 -
             C11123 * C48386 + C12882 * C3759 + C12883 * C48377 -
             C12884 * C3760 - C12885 * C48358) *
                C48362) *
               C5057 +
           ((C3762 + C3763 - C3764 - C3765 + C3766 + C3767 - C3768 - C3769) *
                C10789 +
            (C14836 + C14837 - C14838 - C14839 + C14840 + C14841 - C14842 -
             C14843) *
                C48362) *
               C48329) *
              C48025 * C2799 +
          (((C3764 - (C3763 + C3762) + C3765 - C3766 - C3767 + C3768 + C3769) *
                C10789 +
            (C14838 - (C14837 + C14836) + C14839 - C14840 - C14841 + C14842 +
             C14843) *
                C48362) *
               C5057 +
           ((C3772 - (C3771 + C3770) + C3773 - C3774 - C3775 + C3776 + C3777) *
                C10789 +
            (C591 * C3758 - (C590 * C48389 + C589 * C3757) + C592 * C48386 -
             C2478 * C3759 - C2479 * C48377 +
             (C113 * C2152 + C48228 * C2163) * C3760 +
             (C113 * C2164 + C48228 * C2170) * C48358) *
                C48362) *
               C48329) *
              C48025 * C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C47030 +
             (C113 * C123 + C48228 * C136) * C48125 - C11120 * C47022 -
             C11121 * C48132 + C11122 * C47036 + C11123 * C4043) *
                C10789 +
            (C11120 * C47030 + C11121 * C48125 - C11122 * C47022 -
             C11123 * C48132 + C12882 * C47036 + C12883 * C4043) *
                C48362) *
               C5057 +
           ((C4048 + C4049 - C4050 - C4051 + C4052 + C4053) * C10789 +
            (C15188 + C15189 - C15190 - C15191 + C15192 + C15193) * C48362) *
               C48329) *
              C48025 * C48003 +
          (((C4050 - (C4049 + C4048) + C4051 - C4052 - C4053) * C10789 +
            (C15190 - (C15189 + C15188) + C15191 - C15192 - C15193) * C48362) *
               C5057 +
           ((C4056 - (C4055 + C4054) + C4057 - C4058 - C4059) * C10789 +
            (C15194 - (C15195 + C15196) + C15197 - C15198 - C15199) * C48362) *
               C48329) *
              C48025 * C48011 +
          ((C4070 * C10789 +
            (C15196 + C15195 - C15194 - C15197 + C15198 + C15199) * C48362) *
               C5057 +
           ((C4062 + C4061 - C4060 - C4063 + C4064 + C4065) * C10789 +
            (C593 * C47030 + C594 * C48125 - C595 * C47022 - C596 * C48132 +
             (C113 * C2451 + C48228 * C2452) * C47036 +
             (C113 * C2453 + C48228 * C2454) * C4043) *
                C48362) *
               C48329) *
              C48025 * C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3467 +
             (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
             C11121 * C48129) *
                C10789 +
            (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
             C11123 * C48129) *
                C48362) *
               C5057 +
           ((C3470 + C3471 - C3472 - C3473) * C10789 +
            (C14492 + C14493 - C14494 - C14495) * C48362) *
               C48329) *
              C48025 * C48387 +
          (((C3472 - (C3471 + C3470) + C3473) * C10789 +
            (C14494 - (C14493 + C14492) + C14495) * C48362) *
               C5057 +
           ((C3476 - (C3475 + C3474) + C3477) * C10789 +
            (C14496 - (C14497 + C14498) + C14499) * C48362) *
               C48329) *
              C48025 * C48380 +
          ((C3490 * C10789 + (C14498 + C14497 - C14496 - C14499) * C48362) *
               C5057 +
           ((C3480 + C3479 - C3478 - C3481) * C10789 +
            (C14500 + C14501 - C14502 - C14503) * C48362) *
               C48329) *
              C48025 * C48367 +
          ((C3491 * C10789 + (C14502 - (C14501 + C14500) + C14503) * C48362) *
               C5057 +
           ((C3484 - (C3483 + C3482) + C3485) * C10789 +
            ((C113 * C522 + C48228 * C541) * C3468 -
             (C859 * C3465 + C858 * C3467) +
             (C113 * C542 + C48228 * C552) * C48129) *
                C48362) *
               C48329) *
              C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C3467 +
              (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
              C11121 * C48129) *
                 C10789 +
             (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
              C11123 * C48129) *
                 C48362) *
                C5057 +
            ((C3470 + C3471 - C3472 - C3473) * C10789 +
             (C14492 + C14493 - C14494 - C14495) * C48362) *
                C48329) *
               C48381 +
           (((C11604 * C3468 -
              ((C113 * C319 + C48228 * C337) * C3465 +
               (C113 * C307 + C48228 * C320) * C3467) +
              C11605 * C48129) *
                 C10789 +
             (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
              C11997 * C48129) *
                 C48362) *
                C5057 +
            ((C3640 - (C3641 + C3642) + C3643) * C10789 +
             (C14698 - (C14699 + C14700) + C14701) * C48362) *
                C48329) *
               C48369 +
           ((((C113 * C308 + C48228 * C321) * C3467 +
              (C113 * C322 + C48228 * C338) * C3465 - C11998 * C3468 -
              C11999 * C48129) *
                 C10789 +
             (C11998 * C3467 + C11999 * C3465 - C12000 * C3468 -
              C12001 * C48129) *
                 C48362) *
                C5057 +
            ((C3648 + C3649 - C3650 - C3651) * C10789 +
             (C14702 + C14703 - C14704 - C14705) * C48362) *
                C48329) *
               C48342) *
              C2799 +
          ((((C3472 - (C3471 + C3470) + C3473) * C10789 +
             (C14494 - (C14493 + C14492) + C14495) * C48362) *
                C5057 +
            ((C3476 - (C3475 + C3474) + C3477) * C10789 +
             (C14496 - (C14497 + C14498) + C14499) * C48362) *
                C48329) *
               C48381 +
           (((C3642 + C3641 - C3640 - C3643) * C10789 +
             (C14700 + C14699 - C14698 - C14701) * C48362) *
                C5057 +
            ((C3646 + C3645 - C3644 - C3647) * C10789 +
             (C1054 * C3467 + C1056 * C3465 - C2340 * C3468 - C2341 * C48129) *
                 C48362) *
                C48329) *
               C48369 +
           (((C3650 - (C3649 + C3648) + C3651) * C10789 +
             (C14704 - (C14703 + C14702) + C14705) * C48362) *
                C5057 +
            ((C3654 - (C3653 + C3652) + C3655) * C10789 +
             ((C113 * C1393 + C48228 * C1410) * C3468 -
              (C1711 * C3465 + C1710 * C3467) +
              (C113 * C1411 + C48228 * C1420) * C48129) *
                 C48362) *
                C48329) *
               C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C10789 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C5057 +
            ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
               C48310 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
            (((C113 * C1019 + C48228 * C1028) * C48042 +
              (C113 * C1013 + C48228 * C1018) * C114) *
                 C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C10789) *
                C5057) *
               C48087) *
              C713 +
          ((((C385 + C384) * C10789 + (C10947 + C10946) * C48362) * C5057 +
            ((C383 + C382) * C10789 + (C10950 + C10951) * C48362) * C48329) *
               C48087 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
               C48310) *
              C714 +
          (((C184 * C10789 + (C10795 + C10794) * C48362) * C5057 +
            ((C179 + C178) * C10789 + (C10796 + C10797) * C48362) * C48329) *
               C48310 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C10789) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C10789) * C5057) *
               C48087) *
              C715 +
          (((C722 * C10789 + (C11255 + C11254) * C48362) * C5057 +
            ((C731 + C730) * C10789 +
             ((C113 * C1017 + C48228 * C1026) * C114 +
              (C113 * C1027 + C48228 * C1032) * C48042) *
                 C48362) *
                C48329) *
               C48087 -
           (((C10798 + C10799) * C48362 + (C181 + C180) * C10789) * C48329 +
            ((C10797 + C10796) * C48362 + C185 * C10789) * C5057) *
               C48310) *
              C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C10789 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C5057 +
            ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
               C1519 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C10789) *
                C5057) *
               C1520 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C10789 +
             (C11998 * C114 + C11999 * C48042) * C48362) *
                C5057 +
            ((C386 + C387) * C10789 + (C10948 + C10949) * C48362) * C48329) *
               C1521 -
           (((C12140 + C12141) * C48362 + (C1544 + C1545) * C10789) * C48329 +
            (((C113 * C1817 + C48228 * C1822) * C48042 +
              (C113 * C1813 + C48228 * C1816) * C114) *
                 C48362 +
             ((C113 * C1261 + C48228 * C1271) * C48042 +
              (C113 * C1253 + C48228 * C1262) * C114) *
                 C10789) *
                C5057) *
               C48352) *
              C48296 +
          ((((C385 + C384) * C10789 + (C10947 + C10946) * C48362) * C5057 +
            ((C383 + C382) * C10789 + (C10950 + C10951) * C48362) * C48329) *
               C1520 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
               C1519 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C10789) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C10789) * C5057) *
               C1521 +
           (((C1545 + C1544) * C10789 + (C12141 + C12140) * C48362) * C5057 +
            ((C1543 + C1542) * C10789 +
             ((C113 * C1815 + C48228 * C1820) * C114 +
              (C113 * C1821 + C48228 * C1824) * C48042) *
                 C48362) *
                C48329) *
               C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C831 +
              (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
              C11121 * C48129) *
                 C10789 +
             (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
              C11123 * C48129) *
                 C48362) *
                C5057 +
            ((C838 + C839 - C840 - C841) * C10789 +
             (C11386 + C11387 - C11388 - C11389) * C48362) *
                C48329) *
               C48310 +
           (((C11604 * C832 -
              ((C113 * C319 + C48228 * C337) * C48311 +
               (C113 * C307 + C48228 * C320) * C831) +
              C11605 * C48129) *
                 C10789 +
             ((C113 * C1385 + C48228 * C1394) * C832 -
              (C11605 * C48311 + C11604 * C831) +
              (C113 * C1395 + C48228 * C1412) * C48129) *
                 C48362) *
                C5057 +
            ((C1059 - (C1036 + C1037) + C1060) * C10789 +
             (C11596 - (C11597 + C11598) + C11599) * C48362) *
                C48329) *
               C48087) *
              C302 +
          ((((C840 - (C839 + C838) + C841) * C10789 +
             (C11388 - (C11387 + C11386) + C11389) * C48362) *
                C5057 +
            ((C844 - (C843 + C842) + C845) * C10789 +
             (C11390 - (C11391 + C11392) + C11393) * C48362) *
                C48329) *
               C48310 +
           (((C1037 + C1036 - C1059 - C1060) * C10789 +
             (C11598 + C11597 - C11596 - C11599) * C48362) *
                C5057 +
            ((C1043 + C1042 - C1061 - C1062) * C10789 +
             (C11600 + C11601 - C11602 - C11603) * C48362) *
                C48329) *
               C48087) *
              C303 +
          (((C864 * C10789 + (C11392 + C11391 - C11390 - C11393) * C48362) *
                C5057 +
            ((C848 + C847 - C846 - C849) * C10789 +
             (C11394 + C11395 - C11396 - C11397) * C48362) *
                C48329) *
               C48310 +
           ((C1066 * C10789 + (C11602 - (C11601 + C11600) + C11603) * C48362) *
                C5057 +
            ((C1063 - (C1047 + C1046) + C1064) * C10789 +
             ((C113 * C2317 + C48228 * C2318) * C832 -
              (C1058 * C48311 + C1057 * C831) +
              (C113 * C2319 + C48228 * C2320) * C48129) *
                 C48362) *
                C48329) *
               C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C831 +
             (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
             C11121 * C48129) *
                C10789 +
            (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
             C11123 * C48129) *
                C48362) *
               C5057 +
           ((C838 + C839 - C840 - C841) * C10789 +
            (C11386 + C11387 - C11388 - C11389) * C48362) *
               C48329) *
              C1519 +
          (((C11604 * C832 -
             ((C113 * C319 + C48228 * C337) * C48311 +
              (C113 * C307 + C48228 * C320) * C831) +
             C11605 * C48129) *
                C10789 +
            (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
             C11997 * C48129) *
                C48362) *
               C5057 +
           ((C1059 - (C1036 + C1037) + C1060) * C10789 +
            (C11596 - (C11597 + C11598) + C11599) * C48362) *
               C48329) *
              C1520 +
          ((((C113 * C308 + C48228 * C321) * C831 +
             (C113 * C322 + C48228 * C338) * C48311 - C11998 * C832 -
             C11999 * C48129) *
                C10789 +
            (C11998 * C831 + C11999 * C48311 - C12000 * C832 -
             C12001 * C48129) *
                C48362) *
               C5057 +
           ((C1696 + C1697 - C1712 - C1713) * C10789 +
            (C12336 + C12337 - C12338 - C12339) * C48362) *
               C48329) *
              C1521 +
          (((C12474 * C832 -
             ((C113 * C1261 + C48228 * C1271) * C48311 +
              (C113 * C1253 + C48228 * C1262) * C831) +
             C12475 * C48129) *
                C10789 +
            ((C113 * C6381 + C48228 * C6383) * C832 -
             (C12475 * C48311 + C12474 * C831) +
             (C113 * C6384 + C48228 * C6387) * C48129) *
                C48362) *
               C5057 +
           ((C12139 * C832 - (C1540 * C48311 + C1541 * C831) +
             C12138 * C48129) *
                C10789 +
            ((C113 * C6382 + C48228 * C6385) * C832 -
             (C12138 * C48311 + C12139 * C831) +
             (C113 * C6386 + C48228 * C6388) * C48129) *
                C48362) *
               C48329) *
              C48352) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C10789 +
             ((C113 * C513 + C48228 * C523) * C114 +
              (C113 * C524 + C48228 * C543) * C48042) *
                 C48362) *
                C5057 +
            ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
               C48381 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
            (((C113 * C1019 + C48228 * C1028) * C48042 +
              (C113 * C1013 + C48228 * C1018) * C114) *
                 C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C10789) *
                C5057) *
               C48369 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C10789 +
             ((C113 * C1388 + C48228 * C1400) * C114 +
              (C113 * C1401 + C48228 * C1415) * C48042) *
                 C48362) *
                C5057 +
            ((C386 + C387) * C10789 + (C10948 + C10949) * C48362) * C48329) *
               C48342) *
              C302 +
          ((((C385 + C384) * C10789 + (C10947 + C10946) * C48362) * C5057 +
            ((C383 + C382) * C10789 + (C10950 + C10951) * C48362) * C48329) *
               C48369 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
               C48381 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C10789) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C10789) * C5057) *
               C48342) *
              C303 +
          (((C184 * C10789 + (C10795 + C10794) * C48362) * C5057 +
            ((C179 + C178) * C10789 + (C10796 + C10797) * C48362) * C48329) *
               C48381 -
           (((C1058 * C48042 + C1057 * C114) * C48362 +
             (C391 + C390) * C10789) *
                C48329 +
            ((C10951 + C10950) * C48362 + C394 * C10789) * C5057) *
               C48369 +
           ((C395 * C10789 + (C10953 + C10952) * C48362) * C5057 +
            ((C393 + C392) * C10789 +
             ((C113 * C1691 + C48228 * C1692) * C114 +
              (C113 * C1693 + C48228 * C1694) * C48042) *
                 C48362) *
                C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C10789 +
            ((C113 * C513 + C48228 * C523) * C114 +
             (C113 * C524 + C48228 * C543) * C48042) *
                C48362) *
               C5057 +
           ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
              C48025 * C108 -
          (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
           ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
              C48025 * C109 +
          ((C184 * C10789 + (C10795 + C10794) * C48362) * C5057 +
           ((C179 + C178) * C10789 + (C10796 + C10797) * C48362) * C48329) *
              C48025 * C110 -
          (((C10798 + C10799) * C48362 + (C181 + C180) * C10789) * C48329 +
           ((C10797 + C10796) * C48362 + C185 * C10789) * C5057) *
              C48025 * C111 +
          ((C186 * C10789 + (C10799 + C10798) * C48362) * C5057 +
           ((C183 + C182) * C10789 + ((C113 * C833 + C48228 * C834) * C114 +
                                      (C113 * C835 + C48228 * C836) * C48042) *
                                         C48362) *
               C48329) *
              C48025 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C510 +
             (C113 * C123 + C48228 * C136) * C48382 - C11120 * C511 -
             C11121 * C48371 + C11122 * C512 + C11123 * C48345) *
                C10789 +
            (C11120 * C510 + C11121 * C48382 - C11122 * C511 - C11123 * C48371 +
             (C113 * C2147 + C48228 * C2153) * C512 +
             (C113 * C2154 + C48228 * C2165) * C48345) *
                C48362) *
               C5057 +
           ((C554 + C555 - C597 - C598 + C599 + C600) * C10789 +
            (C11108 + C11109 - C11110 - C11111 + C11112 + C11113) * C48362) *
               C48329) *
              C48025 * C302 +
          (((C597 - (C555 + C554) + C598 - C599 - C600) * C10789 +
            (C11110 - (C11109 + C11108) + C11111 - C11112 - C11113) * C48362) *
               C5057 +
           ((C601 - (C565 + C564) + C602 - C603 - C604) * C10789 +
            (C11114 - (C11115 + C11116) + C11117 - C11118 - C11119) * C48362) *
               C48329) *
              C48025 * C303 +
          ((C612 * C10789 +
            (C11116 + C11115 - C11114 - C11117 + C11118 + C11119) * C48362) *
               C5057 +
           ((C577 + C576 - C605 - C606 + C607 + C608) * C10789 +
            (C593 * C510 + C594 * C48382 - C595 * C511 - C596 * C48371 +
             (C113 * C2451 + C48228 * C2452) * C512 +
             (C113 * C2453 + C48228 * C2454) * C48345) *
                C48362) *
               C48329) *
              C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C10789 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C5057 +
            ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
               C1177 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C10789) *
                C5057) *
               C1178 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C10789 +
             ((C113 * C1388 + C48228 * C1400) * C114 +
              (C113 * C1401 + C48228 * C1415) * C48042) *
                 C48362) *
                C5057 +
            ((C386 + C387) * C10789 + (C10948 + C10949) * C48362) * C48329) *
               C48342) *
              C48378 +
          ((((C385 + C384) * C10789 + (C10947 + C10946) * C48362) * C5057 +
            ((C383 + C382) * C10789 + (C10950 + C10951) * C48362) * C48329) *
               C1178 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
               C1177 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C10789) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C10789) * C5057) *
               C48342) *
              C48365 +
          (((C184 * C10789 + (C10795 + C10794) * C48362) * C5057 +
            ((C179 + C178) * C10789 + (C10796 + C10797) * C48362) * C48329) *
               C1177 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C10789) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C10789) * C5057) *
               C1178 +
           ((C395 * C10789 + (C10953 + C10952) * C48362) * C5057 +
            ((C393 + C392) * C10789 +
             ((C113 * C1691 + C48228 * C1692) * C114 +
              (C113 * C1693 + C48228 * C1694) * C48042) *
                 C48362) *
                C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C10789 +
            (C11120 * C114 + C11121 * C48042) * C48362) *
               C5057 +
           ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
              C1245 -
          (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
           ((C11605 * C48042 + C11604 * C114) * C48362 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C10789) *
               C5057) *
              C1246 +
          ((((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C10789 +
            ((C113 * C1388 + C48228 * C1400) * C114 +
             (C113 * C1401 + C48228 * C1415) * C48042) *
                C48362) *
               C5057 +
           ((C386 + C387) * C10789 + (C10948 + C10949) * C48362) * C48329) *
              C1247 -
          ((((C113 * C1819 + C48228 * C1823) * C48042 +
             (C113 * C1814 + C48228 * C1818) * C114) *
                C48362 +
            (C1544 + C1545) * C10789) *
               C48329 +
           (((C113 * C1817 + C48228 * C1822) * C48042 +
             (C113 * C1813 + C48228 * C1816) * C114) *
                C48362 +
            ((C113 * C1261 + C48228 * C1271) * C48042 +
             (C113 * C1253 + C48228 * C1262) * C114) *
                C10789) *
               C5057) *
              C1248 +
          ((((C113 * C1254 + C48228 * C1263) * C114 +
             (C113 * C1264 + C48228 * C1272) * C48042) *
                C10789 +
            ((C113 * C6867 + C48228 * C6869) * C114 +
             (C113 * C6870 + C48228 * C6873) * C48042) *
                C48362) *
               C5057 +
           (((C113 * C1255 + C48228 * C1265) * C114 +
             (C113 * C1266 + C48228 * C1273) * C48042) *
                C10789 +
            ((C113 * C6868 + C48228 * C6871) * C114 +
             (C113 * C6872 + C48228 * C6874) * C48042) *
                C48362) *
               C48329) *
              C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C510 +
             (C113 * C123 + C48228 * C136) * C48382 - C11120 * C511 -
             C11121 * C48371 + C11122 * C512 + C11123 * C48345) *
                C10789 +
            (C11120 * C510 + C11121 * C48382 - C11122 * C511 - C11123 * C48371 +
             (C113 * C2147 + C48228 * C2153) * C512 +
             (C113 * C2154 + C48228 * C2165) * C48345) *
                C48362) *
               C5057 +
           ((C554 + C555 - C597 - C598 + C599 + C600) * C10789 +
            (C11108 + C11109 - C11110 - C11111 + C11112 + C11113) * C48362) *
               C48329) *
              C1177 +
          (((C11604 * C511 -
             ((C113 * C319 + C48228 * C337) * C48382 +
              (C113 * C307 + C48228 * C320) * C510) +
             C11605 * C48371 - C11996 * C512 - C11997 * C48345) *
                C10789 +
            (C11996 * C511 - (C11605 * C48382 + C11604 * C510) +
             C11997 * C48371 - (C113 * C2581 + C48228 * C2584) * C512 -
             (C113 * C2585 + C48228 * C2590) * C48345) *
                C48362) *
               C5057 +
           ((C2948 - (C2949 + C2950) + C2951 - C2952 - C2953) * C10789 +
            (C2338 * C511 - (C1053 * C48382 + C1052 * C510) + C2339 * C48371 -
             (C113 * C2582 + C48228 * C2586) * C512 -
             (C113 * C2587 + C48228 * C2591) * C48345) *
                C48362) *
               C48329) *
              C1178 +
          ((((C113 * C308 + C48228 * C321) * C510 +
             (C113 * C322 + C48228 * C338) * C48382 - C11998 * C511 -
             C11999 * C48371 + C12000 * C512 + C12001 * C48345) *
                C10789 +
            (C11998 * C510 + C11999 * C48382 - C12000 * C511 - C12001 * C48371 +
             (C113 * C7735 + C48228 * C7737) * C512 +
             (C113 * C7738 + C48228 * C7741) * C48345) *
                C48362) *
               C5057 +
           ((C374 * C510 + C375 * C48382 - C1708 * C511 - C1709 * C48371 +
             C12002 * C512 + C12003 * C48345) *
                C10789 +
            (C1708 * C510 + C1709 * C48382 - C12002 * C511 - C12003 * C48371 +
             (C113 * C7736 + C48228 * C7739) * C512 +
             (C113 * C7740 + C48228 * C7742) * C48345) *
                C48362) *
               C48329) *
              C48342) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C831 +
             (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
             C11121 * C48129) *
                C10789 +
            (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
             C11123 * C48129) *
                C48362) *
               C5057 +
           ((C838 + C839 - C840 - C841) * C10789 +
            (C11386 + C11387 - C11388 - C11389) * C48362) *
               C48329) *
              C48025 * C713 +
          (((C840 - (C839 + C838) + C841) * C10789 +
            (C11388 - (C11387 + C11386) + C11389) * C48362) *
               C5057 +
           ((C844 - (C843 + C842) + C845) * C10789 +
            (C11390 - (C11391 + C11392) + C11393) * C48362) *
               C48329) *
              C48025 * C714 +
          ((C864 * C10789 + (C11392 + C11391 - C11390 - C11393) * C48362) *
               C5057 +
           ((C848 + C847 - C846 - C849) * C10789 +
            (C11394 + C11395 - C11396 - C11397) * C48362) *
               C48329) *
              C48025 * C715 +
          ((C865 * C10789 + (C11396 - (C11395 + C11394) + C11397) * C48362) *
               C5057 +
           ((C862 - (C851 + C850) + C863) * C10789 +
            ((C113 * C522 + C48228 * C541) * C832 -
             (C859 * C48311 + C858 * C831) +
             (C113 * C542 + C48228 * C552) * C48129) *
                C48362) *
               C48329) *
              C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C831 +
              (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
              C11121 * C48129) *
                 C10789 +
             (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
              C11123 * C48129) *
                 C48362) *
                C5057 +
            ((C838 + C839 - C840 - C841) * C10789 +
             (C11386 + C11387 - C11388 - C11389) * C48362) *
                C48329) *
               C1177 +
           (((C11604 * C832 -
              ((C113 * C319 + C48228 * C337) * C48311 +
               (C113 * C307 + C48228 * C320) * C831) +
              C11605 * C48129) *
                 C10789 +
             (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
              C11997 * C48129) *
                 C48362) *
                C5057 +
            ((C1059 - (C1036 + C1037) + C1060) * C10789 +
             (C11596 - (C11597 + C11598) + C11599) * C48362) *
                C48329) *
               C1178 +
           ((((C113 * C308 + C48228 * C321) * C831 +
              (C113 * C322 + C48228 * C338) * C48311 - C11998 * C832 -
              C11999 * C48129) *
                 C10789 +
             (C11998 * C831 + C11999 * C48311 - C12000 * C832 -
              C12001 * C48129) *
                 C48362) *
                C5057 +
            ((C1696 + C1697 - C1712 - C1713) * C10789 +
             (C12336 + C12337 - C12338 - C12339) * C48362) *
                C48329) *
               C48342) *
              C48296 +
          ((((C840 - (C839 + C838) + C841) * C10789 +
             (C11388 - (C11387 + C11386) + C11389) * C48362) *
                C5057 +
            ((C844 - (C843 + C842) + C845) * C10789 +
             (C11390 - (C11391 + C11392) + C11393) * C48362) *
                C48329) *
               C1177 +
           (((C1037 + C1036 - C1059 - C1060) * C10789 +
             (C11598 + C11597 - C11596 - C11599) * C48362) *
                C5057 +
            ((C1043 + C1042 - C1061 - C1062) * C10789 +
             (C11600 + C11601 - C11602 - C11603) * C48362) *
                C48329) *
               C1178 +
           (((C1712 - (C1697 + C1696) + C1713) * C10789 +
             (C12338 - (C12337 + C12336) + C12339) * C48362) *
                C5057 +
            ((C1714 - (C1703 + C1702) + C1715) * C10789 +
             ((C113 * C1393 + C48228 * C1410) * C832 -
              (C1711 * C48311 + C1710 * C831) +
              (C113 * C1411 + C48228 * C1420) * C48129) *
                 C48362) *
                C48329) *
               C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C10789 +
            ((C113 * C513 + C48228 * C523) * C114 +
             (C113 * C524 + C48228 * C543) * C48042) *
                C48362) *
               C5057 +
           ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
              C48025 * C108 -
          (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
           ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
              C48025 * C109 +
          ((C184 * C10789 + (C10795 + C10794) * C48362) * C5057 +
           ((C179 + C178) * C10789 + (C10796 + C10797) * C48362) * C48329) *
              C48025 * C110 -
          (((C10798 + C10799) * C48362 + (C181 + C180) * C10789) * C48329 +
           ((C10797 + C10796) * C48362 + C185 * C10789) * C5057) *
              C48025 * C111 +
          ((C186 * C10789 + (C10799 + C10798) * C48362) * C5057 +
           ((C183 + C182) * C10789 + ((C113 * C833 + C48228 * C834) * C114 +
                                      (C113 * C835 + C48228 * C836) * C48042) *
                                         C48362) *
               C48329) *
              C48025 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C10789 +
             ((C113 * C513 + C48228 * C523) * C114 +
              (C113 * C524 + C48228 * C543) * C48042) *
                 C48362) *
                C5057 +
            ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
               C48381 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
            (((C113 * C1019 + C48228 * C1028) * C48042 +
              (C113 * C1013 + C48228 * C1018) * C114) *
                 C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C10789) *
                C5057) *
               C48369 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C10789 +
             ((C113 * C1388 + C48228 * C1400) * C114 +
              (C113 * C1401 + C48228 * C1415) * C48042) *
                 C48362) *
                C5057 +
            ((C386 + C387) * C10789 + (C10948 + C10949) * C48362) * C48329) *
               C48342) *
              C302 +
          ((((C385 + C384) * C10789 + (C10947 + C10946) * C48362) * C5057 +
            ((C383 + C382) * C10789 + (C10950 + C10951) * C48362) * C48329) *
               C48369 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
               C48381 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C10789) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C10789) * C5057) *
               C48342) *
              C303 +
          (((C184 * C10789 + (C10795 + C10794) * C48362) * C5057 +
            ((C179 + C178) * C10789 + (C10796 + C10797) * C48362) * C48329) *
               C48381 -
           (((C1058 * C48042 + C1057 * C114) * C48362 +
             (C391 + C390) * C10789) *
                C48329 +
            ((C10951 + C10950) * C48362 + C394 * C10789) * C5057) *
               C48369 +
           ((C395 * C10789 + (C10953 + C10952) * C48362) * C5057 +
            ((C393 + C392) * C10789 +
             ((C113 * C1691 + C48228 * C1692) * C114 +
              (C113 * C1693 + C48228 * C1694) * C48042) *
                 C48362) *
                C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C10789 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C5057 +
            ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
               C1177 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C10789) *
                C5057) *
               C1178 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C10789 +
             ((C113 * C1388 + C48228 * C1400) * C114 +
              (C113 * C1401 + C48228 * C1415) * C48042) *
                 C48362) *
                C5057 +
            ((C386 + C387) * C10789 + (C10948 + C10949) * C48362) * C48329) *
               C48342) *
              C48378 +
          ((((C385 + C384) * C10789 + (C10947 + C10946) * C48362) * C5057 +
            ((C383 + C382) * C10789 + (C10950 + C10951) * C48362) * C48329) *
               C1178 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C10789) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C10789) * C5057) *
               C1177 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C10789) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C10789) * C5057) *
               C48342) *
              C48365 +
          (((C184 * C10789 + (C10795 + C10794) * C48362) * C5057 +
            ((C179 + C178) * C10789 + (C10796 + C10797) * C48362) * C48329) *
               C1177 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C10789) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C10789) * C5057) *
               C1178 +
           ((C395 * C10789 + (C10953 + C10952) * C48362) * C5057 +
            ((C393 + C392) * C10789 +
             ((C113 * C1691 + C48228 * C1692) * C114 +
              (C113 * C1693 + C48228 * C1694) * C48042) *
                 C48362) *
                C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C10789 +
            (C11120 * C114 + C11121 * C48042) * C48362) *
               C5057 +
           ((C174 + C175) * C10789 + (C10792 + C10793) * C48362) * C48329) *
              C1245 -
          (((C10946 + C10947) * C48362 + (C384 + C385) * C10789) * C48329 +
           ((C11605 * C48042 + C11604 * C114) * C48362 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C10789) *
               C5057) *
              C1246 +
          ((((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C10789 +
            ((C113 * C1388 + C48228 * C1400) * C114 +
             (C113 * C1401 + C48228 * C1415) * C48042) *
                C48362) *
               C5057 +
           ((C386 + C387) * C10789 + (C10948 + C10949) * C48362) * C48329) *
              C1247 -
          ((((C113 * C1819 + C48228 * C1823) * C48042 +
             (C113 * C1814 + C48228 * C1818) * C114) *
                C48362 +
            (C1544 + C1545) * C10789) *
               C48329 +
           (((C113 * C1817 + C48228 * C1822) * C48042 +
             (C113 * C1813 + C48228 * C1816) * C114) *
                C48362 +
            ((C113 * C1261 + C48228 * C1271) * C48042 +
             (C113 * C1253 + C48228 * C1262) * C114) *
                C10789) *
               C5057) *
              C1248 +
          ((((C113 * C1254 + C48228 * C1263) * C114 +
             (C113 * C1264 + C48228 * C1272) * C48042) *
                C10789 +
            ((C113 * C6867 + C48228 * C6869) * C114 +
             (C113 * C6870 + C48228 * C6873) * C48042) *
                C48362) *
               C5057 +
           (((C113 * C1255 + C48228 * C1265) * C114 +
             (C113 * C1266 + C48228 * C1273) * C48042) *
                C10789 +
            ((C113 * C6868 + C48228 * C6871) * C114 +
             (C113 * C6872 + C48228 * C6874) * C48042) *
                C48362) *
               C48329) *
              C1249) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C16471 +
            ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
                C48329) *
               C48083 -
           (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) * C48245 *
                C48329 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C48245 * C16471) *
               C48090 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C16471 +
            ((C16706 + C16707) * C114 + (C16708 + C16709) * C48042) * C48245 *
                C48329) *
               C3071) *
              C48003 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C48245 *
                C16471 +
            ((C16710 + C16711) * C114 + (C16712 + C16713) * C48042) * C48245 *
                C48329) *
               C48090 -
           (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) * C48245 *
                C48329 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C48245 *
                C16471) *
               C48083 -
           (((C16714 + C16715) * C48042 + (C16716 + C16717) * C114) * C48245 *
                C48329 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C48245 *
                C16471) *
               C3071) *
              C48011 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C48245 *
                C16471 +
            ((C16516 + C16517) * C114 + (C16518 + C16519) * C48042) * C48245 *
                C48329) *
               C48083 -
           (((C17050 + C17051) * C48042 + (C17052 + C17053) * C114) * C48245 *
                C48329 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C48245 *
                C16471) *
               C48090 +
           (((C16717 + C16716) * C114 + (C16715 + C16714) * C48042) * C48245 *
                C16471 +
            ((C16473 * C312 + C16469 * C330 + C16474 * C1525 + C48360 * C1526) *
                 C114 +
             (C16473 * C329 + C16469 * C342 + C16474 * C1527 + C48360 * C1528) *
                 C48042) *
                C48245 * C48329) *
               C3071) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C831 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48311 -
             (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                 C832 -
             (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                 C48129) *
                C48245 * C16471 +
            ((C16508 + C16509) * C831 + (C16510 + C16511) * C48311 -
             (C16896 + C16897) * C832 - (C16898 + C16899) * C48129) *
                C48245 * C48329) *
               C48083 +
           (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
              C48360 * C1400) *
                 C832 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C48311 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C831) +
             (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
              C48360 * C1415) *
                 C48129) *
                C48245 * C16471 +
            ((C17406 + C17407) * C832 -
             ((C16702 + C16703) * C48311 + (C16704 + C16705) * C831) +
             (C17408 + C17409) * C48129) *
                C48245 * C48329) *
               C48090 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C831 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48311 -
             (C16474 * C1813 + C48360 * C1816 + C16473 * C1388 +
              C16469 * C1400) *
                 C832 -
             (C16474 * C1817 + C48360 * C1822 + C16473 * C1401 +
              C16469 * C1415) *
                 C48129) *
                C48245 * C16471 +
            ((C16706 + C16707) * C831 + (C16708 + C16709) * C48311 -
             (C18132 + C18133) * C832 - (C18134 + C18135) * C48129) *
                C48245 * C48329) *
               C3071) *
              C2799 +
          ((((C16897 + C16896) * C832 -
             ((C16511 + C16510) * C48311 + (C16509 + C16508) * C831) +
             (C16899 + C16898) * C48129) *
                C48245 * C16471 +
            ((C16904 + C16905) * C832 -
             ((C16512 + C16513) * C48311 + (C16514 + C16515) * C831) +
             (C16906 + C16907) * C48129) *
                C48245 * C48329) *
               C48083 +
           (((C16705 + C16704) * C831 + (C16703 + C16702) * C48311 -
             (C17407 + C17406) * C832 - (C17409 + C17408) * C48129) *
                C48245 * C16471 +
            ((C16710 + C16711) * C831 + (C16712 + C16713) * C48311 -
             (C17410 + C17411) * C832 - (C17412 + C17413) * C48129) *
                C48245 * C48329) *
               C48090 +
           (((C18133 + C18132) * C832 -
             ((C16709 + C16708) * C48311 + (C16707 + C16706) * C831) +
             (C18135 + C18134) * C48129) *
                C48245 * C16471 +
            ((C16473 * C1392 + C16469 * C1408 + C16474 * C1815 +
              C48360 * C1820) *
                 C832 -
             ((C16714 + C16715) * C48311 + (C16716 + C16717) * C831) +
             (C16473 * C1409 + C16469 * C1419 + C16474 * C1821 +
              C48360 * C1824) *
                 C48129) *
                C48245 * C48329) *
               C3071) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C16471 +
            ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
                C48329) *
               C48388 -
           (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) * C48245 *
                C48329 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C48245 * C16471) *
               C48384 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C16471 +
            ((C16706 + C16707) * C114 + (C16708 + C16709) * C48042) * C48245 *
                C48329) *
               C48374 -
           (((C17926 + C17927) * C48042 + (C17928 + C17929) * C114) * C48245 *
                C48329 +
            ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
              C16469 * C1271) *
                 C48042 +
             (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
              C16469 * C1262) *
                 C114) *
                C48245 * C16471) *
               C48352) *
              C2799 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C48245 *
                C16471 +
            ((C16710 + C16711) * C114 + (C16712 + C16713) * C48042) * C48245 *
                C48329) *
               C48384 -
           (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) * C48245 *
                C48329 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C48245 *
                C16471) *
               C48388 -
           (((C16714 + C16715) * C48042 + (C16716 + C16717) * C114) * C48245 *
                C48329 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C48245 *
                C16471) *
               C48374 +
           (((C17929 + C17928) * C114 + (C17927 + C17926) * C48042) * C48245 *
                C16471 +
            ((C16473 * C1251 + C16469 * C1258 + C16474 * C1256 +
              C48360 * C1267) *
                 C114 +
             (C16473 * C1257 + C16469 * C1269 + C16474 * C1268 +
              C48360 * C1274) *
                 C48042) *
                C48245 * C48329) *
               C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C16471 +
            ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
                C48329) *
               C2691 -
           (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) * C48245 *
                C48329 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C48245 * C16471) *
               C48087) *
              C48387 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C48245 *
                C16471 +
            ((C16710 + C16711) * C114 + (C16712 + C16713) * C48042) * C48245 *
                C48329) *
               C48087 -
           (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) * C48245 *
                C48329 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C48245 *
                C16471) *
               C2691) *
              C48380 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C48245 *
                C16471 +
            ((C16516 + C16517) * C114 + (C16518 + C16519) * C48042) * C48245 *
                C48329) *
               C2691 -
           (((C17050 + C17051) * C48042 + (C17052 + C17053) * C114) * C48245 *
                C48329 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C48245 *
                C16471) *
               C48087) *
              C48367 +
          ((((C17053 + C17052) * C114 + (C17051 + C17050) * C48042) * C48245 *
                C16471 +
            ((C16473 * C313 + C16469 * C332 + C16474 * C314 + C48360 * C333) *
                 C114 +
             (C16473 * C331 + C16469 * C343 + C16474 * C334 + C48360 * C344) *
                 C48042) *
                C48245 * C48329) *
               C48087 -
           (((C16520 + C16521) * C48042 + (C16522 + C16523) * C114) * C48245 *
                C48329 +
            ((C16519 + C16518) * C48042 + (C16517 + C16516) * C114) * C48245 *
                C16471) *
               C2691) *
              C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C510 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48382 -
             (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                 C511 -
             (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                 C48371 +
             (C16473 * C514 + C16469 * C525 + C16474 * C1385 + C48360 * C1394) *
                 C512 +
             (C16473 * C526 + C16469 * C544 + C16474 * C1395 + C48360 * C1412) *
                 C48345) *
                C48245 * C16471 +
            ((C16508 + C16509) * C510 + (C16510 + C16511) * C48382 -
             (C16896 + C16897) * C511 - (C16898 + C16899) * C48371 +
             (C16900 + C16901) * C512 + (C16902 + C16903) * C48345) *
                C48245 * C48329) *
               C2691 +
           (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
              C48360 * C1400) *
                 C511 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C48382 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C510) +
             (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
              C48360 * C1415) *
                 C48371 -
             (C16474 * C1389 + C48360 * C1402 + C16473 * C1385 +
              C16469 * C1394) *
                 C512 -
             (C16474 * C1403 + C48360 * C1416 + C16473 * C1395 +
              C16469 * C1412) *
                 C48345) *
                C48245 * C16471 +
            ((C17406 + C17407) * C511 -
             ((C16702 + C16703) * C48382 + (C16704 + C16705) * C510) +
             (C17408 + C17409) * C48371 - (C18842 + C18843) * C512 -
             (C18844 + C18845) * C48345) *
                C48245 * C48329) *
               C48087) *
              C2799 +
          ((((C16897 + C16896) * C511 -
             ((C16511 + C16510) * C48382 + (C16509 + C16508) * C510) +
             (C16899 + C16898) * C48371 - (C16901 + C16900) * C512 -
             (C16903 + C16902) * C48345) *
                C48245 * C16471 +
            ((C16904 + C16905) * C511 -
             ((C16512 + C16513) * C48382 + (C16514 + C16515) * C510) +
             (C16906 + C16907) * C48371 - (C16908 + C16909) * C512 -
             (C16910 + C16911) * C48345) *
                C48245 * C48329) *
               C2691 +
           (((C16705 + C16704) * C510 + (C16703 + C16702) * C48382 -
             (C17407 + C17406) * C511 - (C17409 + C17408) * C48371 +
             (C18843 + C18842) * C512 + (C18845 + C18844) * C48345) *
                C48245 * C16471 +
            ((C16710 + C16711) * C510 + (C16712 + C16713) * C48382 -
             (C17410 + C17411) * C511 - (C17412 + C17413) * C48371 +
             (C16473 * C1387 + C16469 * C1398 + C16474 * C1393 +
              C48360 * C1410) *
                 C512 +
             (C16473 * C1399 + C16469 * C1414 + C16474 * C1411 +
              C48360 * C1420) *
                 C48345) *
                C48245 * C48329) *
               C48087) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C831 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48311 -
             (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                 C832 -
             (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                 C48129) *
                C48245 * C16471 +
            ((C16508 + C16509) * C831 + (C16510 + C16511) * C48311 -
             (C16896 + C16897) * C832 - (C16898 + C16899) * C48129) *
                C48245 * C48329) *
               C2691 +
           (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
              C48360 * C1400) *
                 C832 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C48311 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C831) +
             (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
              C48360 * C1415) *
                 C48129) *
                C48245 * C16471 +
            ((C17406 + C17407) * C832 -
             ((C16702 + C16703) * C48311 + (C16704 + C16705) * C831) +
             (C17408 + C17409) * C48129) *
                C48245 * C48329) *
               C48087) *
              C48003 +
          ((((C16897 + C16896) * C832 -
             ((C16511 + C16510) * C48311 + (C16509 + C16508) * C831) +
             (C16899 + C16898) * C48129) *
                C48245 * C16471 +
            ((C16904 + C16905) * C832 -
             ((C16512 + C16513) * C48311 + (C16514 + C16515) * C831) +
             (C16906 + C16907) * C48129) *
                C48245 * C48329) *
               C2691 +
           (((C16705 + C16704) * C831 + (C16703 + C16702) * C48311 -
             (C17407 + C17406) * C832 - (C17409 + C17408) * C48129) *
                C48245 * C16471 +
            ((C16710 + C16711) * C831 + (C16712 + C16713) * C48311 -
             (C17410 + C17411) * C832 - (C17412 + C17413) * C48129) *
                C48245 * C48329) *
               C48087) *
              C48011 +
          ((((C16515 + C16514) * C831 + (C16513 + C16512) * C48311 -
             (C16905 + C16904) * C832 - (C16907 + C16906) * C48129) *
                C48245 * C16471 +
            ((C16516 + C16517) * C831 + (C16518 + C16519) * C48311 -
             (C17192 + C17193) * C832 - (C17194 + C17195) * C48129) *
                C48245 * C48329) *
               C2691 +
           (((C17411 + C17410) * C832 -
             ((C16713 + C16712) * C48311 + (C16711 + C16710) * C831) +
             (C17413 + C17412) * C48129) *
                C48245 * C16471 +
            ((C16473 * C1016 + C16469 * C1024 + C16474 * C1691 +
              C48360 * C1692) *
                 C832 -
             ((C17050 + C17051) * C48311 + (C17052 + C17053) * C831) +
             (C16473 * C1025 + C16469 * C1031 + C16474 * C1693 +
              C48360 * C1694) *
                 C48129) *
                C48245 * C48329) *
               C48087) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C16471 +
            ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
                C48329) *
               C2691 -
           (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) * C48245 *
                C48329 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C48245 * C16471) *
               C48087) *
              C48387 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C48245 *
                C16471 +
            ((C16710 + C16711) * C114 + (C16712 + C16713) * C48042) * C48245 *
                C48329) *
               C48087 -
           (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) * C48245 *
                C48329 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C48245 *
                C16471) *
               C2691) *
              C48380 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C48245 *
                C16471 +
            ((C16516 + C16517) * C114 + (C16518 + C16519) * C48042) * C48245 *
                C48329) *
               C2691 -
           (((C17050 + C17051) * C48042 + (C17052 + C17053) * C114) * C48245 *
                C48329 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C48245 *
                C16471) *
               C48087) *
              C48367 +
          ((((C17053 + C17052) * C114 + (C17051 + C17050) * C48042) * C48245 *
                C16471 +
            ((C16473 * C313 + C16469 * C332 + C16474 * C314 + C48360 * C333) *
                 C114 +
             (C16473 * C331 + C16469 * C343 + C16474 * C334 + C48360 * C344) *
                 C48042) *
                C48245 * C48329) *
               C48087 -
           (((C16520 + C16521) * C48042 + (C16522 + C16523) * C114) * C48245 *
                C48329 +
            ((C16519 + C16518) * C48042 + (C16517 + C16516) * C114) * C48245 *
                C16471) *
               C2691) *
              C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C16471 +
            ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
                C48329) *
               C48388 -
           (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) * C48245 *
                C48329 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C48245 * C16471) *
               C48384 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C16471 +
            ((C16706 + C16707) * C114 + (C16708 + C16709) * C48042) * C48245 *
                C48329) *
               C48374 -
           (((C17926 + C17927) * C48042 + (C17928 + C17929) * C114) * C48245 *
                C48329 +
            ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
              C16469 * C1271) *
                 C48042 +
             (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
              C16469 * C1262) *
                 C114) *
                C48245 * C16471) *
               C48352) *
              C2799 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C48245 *
                C16471 +
            ((C16710 + C16711) * C114 + (C16712 + C16713) * C48042) * C48245 *
                C48329) *
               C48384 -
           (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) * C48245 *
                C48329 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C48245 *
                C16471) *
               C48388 -
           (((C16714 + C16715) * C48042 + (C16716 + C16717) * C114) * C48245 *
                C48329 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C48245 *
                C16471) *
               C48374 +
           (((C17929 + C17928) * C114 + (C17927 + C17926) * C48042) * C48245 *
                C16471 +
            ((C16473 * C1251 + C16469 * C1258 + C16474 * C1256 +
              C48360 * C1267) *
                 C114 +
             (C16473 * C1257 + C16469 * C1269 + C16474 * C1268 +
              C48360 * C1274) *
                 C48042) *
                C48245 * C48329) *
               C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C3467 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C3465 -
             (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                 C3468 -
             (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                 C48129) *
                C48245 * C16471 +
            ((C16508 + C16509) * C3467 + (C16510 + C16511) * C3465 -
             (C16896 + C16897) * C3468 - (C16898 + C16899) * C48129) *
                C48245 * C48329) *
               C48083 +
           (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
              C48360 * C1400) *
                 C3468 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C3465 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C3467) +
             (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
              C48360 * C1415) *
                 C48129) *
                C48245 * C16471 +
            ((C17406 + C17407) * C3468 -
             ((C16702 + C16703) * C3465 + (C16704 + C16705) * C3467) +
             (C17408 + C17409) * C48129) *
                C48245 * C48329) *
               C48090 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C3467 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C3465 -
             (C16474 * C1813 + C48360 * C1816 + C16473 * C1388 +
              C16469 * C1400) *
                 C3468 -
             (C16474 * C1817 + C48360 * C1822 + C16473 * C1401 +
              C16469 * C1415) *
                 C48129) *
                C48245 * C16471 +
            ((C16706 + C16707) * C3467 + (C16708 + C16709) * C3465 -
             (C18132 + C18133) * C3468 - (C18134 + C18135) * C48129) *
                C48245 * C48329) *
               C3071) *
              C48296 +
          ((((C16897 + C16896) * C3468 -
             ((C16511 + C16510) * C3465 + (C16509 + C16508) * C3467) +
             (C16899 + C16898) * C48129) *
                C48245 * C16471 +
            ((C16904 + C16905) * C3468 -
             ((C16512 + C16513) * C3465 + (C16514 + C16515) * C3467) +
             (C16906 + C16907) * C48129) *
                C48245 * C48329) *
               C48083 +
           (((C16705 + C16704) * C3467 + (C16703 + C16702) * C3465 -
             (C17407 + C17406) * C3468 - (C17409 + C17408) * C48129) *
                C48245 * C16471 +
            ((C16710 + C16711) * C3467 + (C16712 + C16713) * C3465 -
             (C17410 + C17411) * C3468 - (C17412 + C17413) * C48129) *
                C48245 * C48329) *
               C48090 +
           (((C18133 + C18132) * C3468 -
             ((C16709 + C16708) * C3465 + (C16707 + C16706) * C3467) +
             (C18135 + C18134) * C48129) *
                C48245 * C16471 +
            ((C16473 * C1392 + C16469 * C1408 + C16474 * C1815 +
              C48360 * C1820) *
                 C3468 -
             ((C16714 + C16715) * C3465 + (C16716 + C16717) * C3467) +
             (C16473 * C1409 + C16469 * C1419 + C16474 * C1821 +
              C48360 * C1824) *
                 C48129) *
                C48245 * C48329) *
               C3071) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C47030 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48125 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C47022 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C48132 +
            (C16473 * C514 + C16469 * C525 + C16474 * C1385 + C48360 * C1394) *
                C47036 +
            (C16473 * C526 + C16469 * C544 + C16474 * C1395 + C48360 * C1412) *
                C4043) *
               C48245 * C16471 +
           ((C16508 + C16509) * C47030 + (C16510 + C16511) * C48125 -
            (C16896 + C16897) * C47022 - (C16898 + C16899) * C48132 +
            (C16900 + C16901) * C47036 + (C16902 + C16903) * C4043) *
               C48245 * C48329) *
              C48083 +
          (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
             C48360 * C1400) *
                C47022 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48125 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C47030) +
            (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
             C48360 * C1415) *
                C48132 -
            (C16474 * C1389 + C48360 * C1402 + C16473 * C1385 +
             C16469 * C1394) *
                C47036 -
            (C16474 * C1403 + C48360 * C1416 + C16473 * C1395 +
             C16469 * C1412) *
                C4043) *
               C48245 * C16471 +
           ((C17406 + C17407) * C47022 -
            ((C16702 + C16703) * C48125 + (C16704 + C16705) * C47030) +
            (C17408 + C17409) * C48132 - (C18842 + C18843) * C47036 -
            (C18844 + C18845) * C4043) *
               C48245 * C48329) *
              C48090 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C47030 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C48125 -
            (C16474 * C1813 + C48360 * C1816 + C16473 * C1388 +
             C16469 * C1400) *
                C47022 -
            (C16474 * C1817 + C48360 * C1822 + C16473 * C1401 +
             C16469 * C1415) *
                C48132 +
            (C16473 * C1389 + C16469 * C1402 + C16474 * C6381 +
             C48360 * C6383) *
                C47036 +
            (C16473 * C1403 + C16469 * C1416 + C16474 * C6384 +
             C48360 * C6387) *
                C4043) *
               C48245 * C16471 +
           ((C16706 + C16707) * C47030 + (C16708 + C16709) * C48125 -
            (C18132 + C18133) * C47022 - (C18134 + C18135) * C48132 +
            (C16473 * C1391 + C16469 * C1406 + C16474 * C6382 +
             C48360 * C6385) *
                C47036 +
            (C16473 * C1407 + C16469 * C1418 + C16474 * C6386 +
             C48360 * C6388) *
                C4043) *
               C48245 * C48329) *
              C3071) *
         C47998) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C3467 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C3465 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C3468 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C48129) *
               C48245 * C16471 +
           ((C16508 + C16509) * C3467 + (C16510 + C16511) * C3465 -
            (C16896 + C16897) * C3468 - (C16898 + C16899) * C48129) *
               C48245 * C48329) *
              C48388 +
          (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
             C48360 * C1400) *
                C3468 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C3465 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C3467) +
            (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
             C48360 * C1415) *
                C48129) *
               C48245 * C16471 +
           ((C17406 + C17407) * C3468 -
            ((C16702 + C16703) * C3465 + (C16704 + C16705) * C3467) +
            (C17408 + C17409) * C48129) *
               C48245 * C48329) *
              C48384 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C3467 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C3465 -
            (C16474 * C1813 + C48360 * C1816 + C16473 * C1388 +
             C16469 * C1400) *
                C3468 -
            (C16474 * C1817 + C48360 * C1822 + C16473 * C1401 +
             C16469 * C1415) *
                C48129) *
               C48245 * C16471 +
           ((C16706 + C16707) * C3467 + (C16708 + C16709) * C3465 -
            (C18132 + C18133) * C3468 - (C18134 + C18135) * C48129) *
               C48245 * C48329) *
              C48374 +
          (((C16473 * C1813 + C16469 * C1816 + C16474 * C6867 +
             C48360 * C6869) *
                C3468 -
            ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
              C16469 * C1271) *
                 C3465 +
             (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
              C16469 * C1262) *
                 C3467) +
            (C16473 * C1817 + C16469 * C1822 + C16474 * C6870 +
             C48360 * C6873) *
                C48129) *
               C48245 * C16471 +
           ((C16473 * C1814 + C16469 * C1818 + C16474 * C6868 +
             C48360 * C6871) *
                C3468 -
            ((C17926 + C17927) * C3465 + (C17928 + C17929) * C3467) +
            (C16473 * C1819 + C16469 * C1823 + C16474 * C6872 +
             C48360 * C6874) *
                C48129) *
               C48245 * C48329) *
              C48352) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C3467 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C3465 -
             (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                 C3468 -
             (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                 C48129) *
                C48245 * C16471 +
            ((C16508 + C16509) * C3467 + (C16510 + C16511) * C3465 -
             (C16896 + C16897) * C3468 - (C16898 + C16899) * C48129) *
                C48245 * C48329) *
               C2691 +
           (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
              C48360 * C1400) *
                 C3468 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C3465 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C3467) +
             (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
              C48360 * C1415) *
                 C48129) *
                C48245 * C16471 +
            ((C17406 + C17407) * C3468 -
             ((C16702 + C16703) * C3465 + (C16704 + C16705) * C3467) +
             (C17408 + C17409) * C48129) *
                C48245 * C48329) *
               C48087) *
              C48378 +
          ((((C16897 + C16896) * C3468 -
             ((C16511 + C16510) * C3465 + (C16509 + C16508) * C3467) +
             (C16899 + C16898) * C48129) *
                C48245 * C16471 +
            ((C16904 + C16905) * C3468 -
             ((C16512 + C16513) * C3465 + (C16514 + C16515) * C3467) +
             (C16906 + C16907) * C48129) *
                C48245 * C48329) *
               C2691 +
           (((C16705 + C16704) * C3467 + (C16703 + C16702) * C3465 -
             (C17407 + C17406) * C3468 - (C17409 + C17408) * C48129) *
                C48245 * C16471 +
            ((C16710 + C16711) * C3467 + (C16712 + C16713) * C3465 -
             (C17410 + C17411) * C3468 - (C17412 + C17413) * C48129) *
                C48245 * C48329) *
               C48087) *
              C48365 +
          ((((C16515 + C16514) * C3467 + (C16513 + C16512) * C3465 -
             (C16905 + C16904) * C3468 - (C16907 + C16906) * C48129) *
                C48245 * C16471 +
            ((C16516 + C16517) * C3467 + (C16518 + C16519) * C3465 -
             (C17192 + C17193) * C3468 - (C17194 + C17195) * C48129) *
                C48245 * C48329) *
               C2691 +
           (((C17411 + C17410) * C3468 -
             ((C16713 + C16712) * C3465 + (C16711 + C16710) * C3467) +
             (C17413 + C17412) * C48129) *
                C48245 * C16471 +
            ((C16473 * C1016 + C16469 * C1024 + C16474 * C1691 +
              C48360 * C1692) *
                 C3468 -
             ((C17050 + C17051) * C3465 + (C17052 + C17053) * C3467) +
             (C16473 * C1025 + C16469 * C1031 + C16474 * C1693 +
              C48360 * C1694) *
                 C48129) *
                C48245 * C48329) *
               C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C3757 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48389 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C3758 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C48386 +
            (C16473 * C514 + C16469 * C525 + C16474 * C1385 + C48360 * C1394) *
                C3759 +
            (C16473 * C526 + C16469 * C544 + C16474 * C1395 + C48360 * C1412) *
                C48377 -
            (C16474 * C2581 + C48360 * C2584 + C16473 * C2147 +
             C16469 * C2153) *
                C3760 -
            (C16474 * C2585 + C48360 * C2590 + C16473 * C2154 +
             C16469 * C2165) *
                C48358) *
               C48245 * C16471 +
           ((C16508 + C16509) * C3757 + (C16510 + C16511) * C48389 -
            (C16896 + C16897) * C3758 - (C16898 + C16899) * C48386 +
            (C16900 + C16901) * C3759 + (C16902 + C16903) * C48377 -
            (C18984 + C18985) * C3760 - (C18986 + C18987) * C48358) *
               C48245 * C48329) *
              C2691 +
          (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
             C48360 * C1400) *
                C3758 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48389 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C3757) +
            (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
             C48360 * C1415) *
                C48386 -
            (C16474 * C1389 + C48360 * C1402 + C16473 * C1385 +
             C16469 * C1394) *
                C3759 -
            (C16474 * C1403 + C48360 * C1416 + C16473 * C1395 +
             C16469 * C1412) *
                C48377 +
            (C16473 * C2581 + C16469 * C2584 + C16474 * C7735 +
             C48360 * C7737) *
                C3760 +
            (C16473 * C2585 + C16469 * C2590 + C16474 * C7738 +
             C48360 * C7741) *
                C48358) *
               C48245 * C16471 +
           ((C17406 + C17407) * C3758 -
            ((C16702 + C16703) * C48389 + (C16704 + C16705) * C3757) +
            (C17408 + C17409) * C48386 - (C18842 + C18843) * C3759 -
            (C18844 + C18845) * C48377 +
            (C16473 * C2582 + C16469 * C2586 + C16474 * C7736 +
             C48360 * C7739) *
                C3760 +
            (C16473 * C2587 + C16469 * C2591 + C16474 * C7740 +
             C48360 * C7742) *
                C48358) *
               C48245 * C48329) *
              C48087) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C47030 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48125 -
             (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                 C47022 -
             (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                 C48132 +
             (C16473 * C514 + C16469 * C525 + C16474 * C1385 + C48360 * C1394) *
                 C47036 +
             (C16473 * C526 + C16469 * C544 + C16474 * C1395 + C48360 * C1412) *
                 C4043) *
                C48245 * C16471 +
            ((C16508 + C16509) * C47030 + (C16510 + C16511) * C48125 -
             (C16896 + C16897) * C47022 - (C16898 + C16899) * C48132 +
             (C16900 + C16901) * C47036 + (C16902 + C16903) * C4043) *
                C48245 * C48329) *
               C2691 +
           (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
              C48360 * C1400) *
                 C47022 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C48125 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C47030) +
             (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
              C48360 * C1415) *
                 C48132 -
             (C16474 * C1389 + C48360 * C1402 + C16473 * C1385 +
              C16469 * C1394) *
                 C47036 -
             (C16474 * C1403 + C48360 * C1416 + C16473 * C1395 +
              C16469 * C1412) *
                 C4043) *
                C48245 * C16471 +
            ((C17406 + C17407) * C47022 -
             ((C16702 + C16703) * C48125 + (C16704 + C16705) * C47030) +
             (C17408 + C17409) * C48132 - (C18842 + C18843) * C47036 -
             (C18844 + C18845) * C4043) *
                C48245 * C48329) *
               C48087) *
              C48296 +
          ((((C16897 + C16896) * C47022 -
             ((C16511 + C16510) * C48125 + (C16509 + C16508) * C47030) +
             (C16899 + C16898) * C48132 - (C16901 + C16900) * C47036 -
             (C16903 + C16902) * C4043) *
                C48245 * C16471 +
            ((C16904 + C16905) * C47022 -
             ((C16512 + C16513) * C48125 + (C16514 + C16515) * C47030) +
             (C16906 + C16907) * C48132 - (C16908 + C16909) * C47036 -
             (C16910 + C16911) * C4043) *
                C48245 * C48329) *
               C2691 +
           (((C16705 + C16704) * C47030 + (C16703 + C16702) * C48125 -
             (C17407 + C17406) * C47022 - (C17409 + C17408) * C48132 +
             (C18843 + C18842) * C47036 + (C18845 + C18844) * C4043) *
                C48245 * C16471 +
            ((C16710 + C16711) * C47030 + (C16712 + C16713) * C48125 -
             (C17410 + C17411) * C47022 - (C17412 + C17413) * C48132 +
             (C16473 * C1387 + C16469 * C1398 + C16474 * C1393 +
              C48360 * C1410) *
                 C47036 +
             (C16473 * C1399 + C16469 * C1414 + C16474 * C1411 +
              C48360 * C1420) *
                 C4043) *
                C48245 * C48329) *
               C48087) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C3467 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C3465 -
             (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                 C3468 -
             (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                 C48129) *
                C48245 * C16471 +
            ((C16508 + C16509) * C3467 + (C16510 + C16511) * C3465 -
             (C16896 + C16897) * C3468 - (C16898 + C16899) * C48129) *
                C48245 * C48329) *
               C2691 +
           (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
              C48360 * C1400) *
                 C3468 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C3465 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C3467) +
             (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
              C48360 * C1415) *
                 C48129) *
                C48245 * C16471 +
            ((C17406 + C17407) * C3468 -
             ((C16702 + C16703) * C3465 + (C16704 + C16705) * C3467) +
             (C17408 + C17409) * C48129) *
                C48245 * C48329) *
               C48087) *
              C48378 +
          ((((C16897 + C16896) * C3468 -
             ((C16511 + C16510) * C3465 + (C16509 + C16508) * C3467) +
             (C16899 + C16898) * C48129) *
                C48245 * C16471 +
            ((C16904 + C16905) * C3468 -
             ((C16512 + C16513) * C3465 + (C16514 + C16515) * C3467) +
             (C16906 + C16907) * C48129) *
                C48245 * C48329) *
               C2691 +
           (((C16705 + C16704) * C3467 + (C16703 + C16702) * C3465 -
             (C17407 + C17406) * C3468 - (C17409 + C17408) * C48129) *
                C48245 * C16471 +
            ((C16710 + C16711) * C3467 + (C16712 + C16713) * C3465 -
             (C17410 + C17411) * C3468 - (C17412 + C17413) * C48129) *
                C48245 * C48329) *
               C48087) *
              C48365 +
          ((((C16515 + C16514) * C3467 + (C16513 + C16512) * C3465 -
             (C16905 + C16904) * C3468 - (C16907 + C16906) * C48129) *
                C48245 * C16471 +
            ((C16516 + C16517) * C3467 + (C16518 + C16519) * C3465 -
             (C17192 + C17193) * C3468 - (C17194 + C17195) * C48129) *
                C48245 * C48329) *
               C2691 +
           (((C17411 + C17410) * C3468 -
             ((C16713 + C16712) * C3465 + (C16711 + C16710) * C3467) +
             (C17413 + C17412) * C48129) *
                C48245 * C16471 +
            ((C16473 * C1016 + C16469 * C1024 + C16474 * C1691 +
              C48360 * C1692) *
                 C3468 -
             ((C17050 + C17051) * C3465 + (C17052 + C17053) * C3467) +
             (C16473 * C1025 + C16469 * C1031 + C16474 * C1693 +
              C48360 * C1694) *
                 C48129) *
                C48245 * C48329) *
               C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C3467 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C3465 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C3468 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C48129) *
               C48245 * C16471 +
           ((C16508 + C16509) * C3467 + (C16510 + C16511) * C3465 -
            (C16896 + C16897) * C3468 - (C16898 + C16899) * C48129) *
               C48245 * C48329) *
              C48388 +
          (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
             C48360 * C1400) *
                C3468 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C3465 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C3467) +
            (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
             C48360 * C1415) *
                C48129) *
               C48245 * C16471 +
           ((C17406 + C17407) * C3468 -
            ((C16702 + C16703) * C3465 + (C16704 + C16705) * C3467) +
            (C17408 + C17409) * C48129) *
               C48245 * C48329) *
              C48384 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C3467 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C3465 -
            (C16474 * C1813 + C48360 * C1816 + C16473 * C1388 +
             C16469 * C1400) *
                C3468 -
            (C16474 * C1817 + C48360 * C1822 + C16473 * C1401 +
             C16469 * C1415) *
                C48129) *
               C48245 * C16471 +
           ((C16706 + C16707) * C3467 + (C16708 + C16709) * C3465 -
            (C18132 + C18133) * C3468 - (C18134 + C18135) * C48129) *
               C48245 * C48329) *
              C48374 +
          (((C16473 * C1813 + C16469 * C1816 + C16474 * C6867 +
             C48360 * C6869) *
                C3468 -
            ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
              C16469 * C1271) *
                 C3465 +
             (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
              C16469 * C1262) *
                 C3467) +
            (C16473 * C1817 + C16469 * C1822 + C16474 * C6870 +
             C48360 * C6873) *
                C48129) *
               C48245 * C16471 +
           ((C16473 * C1814 + C16469 * C1818 + C16474 * C6868 +
             C48360 * C6871) *
                C3468 -
            ((C17926 + C17927) * C3465 + (C17928 + C17929) * C3467) +
            (C16473 * C1819 + C16469 * C1823 + C16474 * C6872 +
             C48360 * C6874) *
                C48129) *
               C48245 * C48329) *
              C48352) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C16471 +
            ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
                C48329) *
               C1519 -
           (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) * C48245 *
                C48329 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C48245 * C16471) *
               C1520 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C16471 +
            ((C16706 + C16707) * C114 + (C16708 + C16709) * C48042) * C48245 *
                C48329) *
               C1521 -
           (((C17926 + C17927) * C48042 + (C17928 + C17929) * C114) * C48245 *
                C48329 +
            ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
              C16469 * C1271) *
                 C48042 +
             (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
              C16469 * C1262) *
                 C114) *
                C48245 * C16471) *
               C48352) *
              C48296 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C48245 *
                C16471 +
            ((C16710 + C16711) * C114 + (C16712 + C16713) * C48042) * C48245 *
                C48329) *
               C1520 -
           (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) * C48245 *
                C48329 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C48245 *
                C16471) *
               C1519 -
           (((C16714 + C16715) * C48042 + (C16716 + C16717) * C114) * C48245 *
                C48329 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C48245 *
                C16471) *
               C1521 +
           (((C17929 + C17928) * C114 + (C17927 + C17926) * C48042) * C48245 *
                C16471 +
            ((C16473 * C1251 + C16469 * C1258 + C16474 * C1256 +
              C48360 * C1267) *
                 C114 +
             (C16473 * C1257 + C16469 * C1269 + C16474 * C1268 +
              C48360 * C1274) *
                 C48042) *
                C48245 * C48329) *
               C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C16471 +
            ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
                C48329) *
               C48310 -
           (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) * C48245 *
                C48329 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C48245 * C16471) *
               C48087) *
              C713 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C48245 *
                C16471 +
            ((C16710 + C16711) * C114 + (C16712 + C16713) * C48042) * C48245 *
                C48329) *
               C48087 -
           (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) * C48245 *
                C48329 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C48245 *
                C16471) *
               C48310) *
              C714 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C48245 *
                C16471 +
            ((C16516 + C16517) * C114 + (C16518 + C16519) * C48042) * C48245 *
                C48329) *
               C48310 -
           (((C17050 + C17051) * C48042 + (C17052 + C17053) * C114) * C48245 *
                C48329 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C48245 *
                C16471) *
               C48087) *
              C715 +
          ((((C17053 + C17052) * C114 + (C17051 + C17050) * C48042) * C48245 *
                C16471 +
            ((C16473 * C313 + C16469 * C332 + C16474 * C314 + C48360 * C333) *
                 C114 +
             (C16473 * C331 + C16469 * C343 + C16474 * C334 + C48360 * C344) *
                 C48042) *
                C48245 * C48329) *
               C48087 -
           (((C16520 + C16521) * C48042 + (C16522 + C16523) * C114) * C48245 *
                C48329 +
            ((C16519 + C16518) * C48042 + (C16517 + C16516) * C114) * C48245 *
                C16471) *
               C48310) *
              C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C1938 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C1935 -
             (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                 C1939 -
             (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                 C1936 +
             (C16473 * C514 + C16469 * C525 + C16474 * C1385 + C48360 * C1394) *
                 C1940 +
             (C16473 * C526 + C16469 * C544 + C16474 * C1395 + C48360 * C1412) *
                 C48345) *
                C48245 * C16471 +
            ((C16508 + C16509) * C1938 + (C16510 + C16511) * C1935 -
             (C16896 + C16897) * C1939 - (C16898 + C16899) * C1936 +
             (C16900 + C16901) * C1940 + (C16902 + C16903) * C48345) *
                C48245 * C48329) *
               C48310 +
           (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
              C48360 * C1400) *
                 C1939 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C1935 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C1938) +
             (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
              C48360 * C1415) *
                 C1936 -
             (C16474 * C1389 + C48360 * C1402 + C16473 * C1385 +
              C16469 * C1394) *
                 C1940 -
             (C16474 * C1403 + C48360 * C1416 + C16473 * C1395 +
              C16469 * C1412) *
                 C48345) *
                C48245 * C16471 +
            ((C17406 + C17407) * C1939 -
             ((C16702 + C16703) * C1935 + (C16704 + C16705) * C1938) +
             (C17408 + C17409) * C1936 - (C18842 + C18843) * C1940 -
             (C18844 + C18845) * C48345) *
                C48245 * C48329) *
               C48087) *
              C48296 +
          ((((C16897 + C16896) * C1939 -
             ((C16511 + C16510) * C1935 + (C16509 + C16508) * C1938) +
             (C16899 + C16898) * C1936 - (C16901 + C16900) * C1940 -
             (C16903 + C16902) * C48345) *
                C48245 * C16471 +
            ((C16904 + C16905) * C1939 -
             ((C16512 + C16513) * C1935 + (C16514 + C16515) * C1938) +
             (C16906 + C16907) * C1936 - (C16908 + C16909) * C1940 -
             (C16910 + C16911) * C48345) *
                C48245 * C48329) *
               C48310 +
           (((C16705 + C16704) * C1938 + (C16703 + C16702) * C1935 -
             (C17407 + C17406) * C1939 - (C17409 + C17408) * C1936 +
             (C18843 + C18842) * C1940 + (C18845 + C18844) * C48345) *
                C48245 * C16471 +
            ((C16710 + C16711) * C1938 + (C16712 + C16713) * C1935 -
             (C17410 + C17411) * C1939 - (C17412 + C17413) * C1936 +
             (C16473 * C1387 + C16469 * C1398 + C16474 * C1393 +
              C48360 * C1410) *
                 C1940 +
             (C16473 * C1399 + C16469 * C1414 + C16474 * C1411 +
              C48360 * C1420) *
                 C48345) *
                C48245 * C48329) *
               C48087) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C831 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48311 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C832 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C48129) *
               C48245 * C16471 +
           ((C16508 + C16509) * C831 + (C16510 + C16511) * C48311 -
            (C16896 + C16897) * C832 - (C16898 + C16899) * C48129) *
               C48245 * C48329) *
              C1519 +
          (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
             C48360 * C1400) *
                C832 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48311 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C831) +
            (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
             C48360 * C1415) *
                C48129) *
               C48245 * C16471 +
           ((C17406 + C17407) * C832 -
            ((C16702 + C16703) * C48311 + (C16704 + C16705) * C831) +
            (C17408 + C17409) * C48129) *
               C48245 * C48329) *
              C1520 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C831 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C48311 -
            (C16474 * C1813 + C48360 * C1816 + C16473 * C1388 +
             C16469 * C1400) *
                C832 -
            (C16474 * C1817 + C48360 * C1822 + C16473 * C1401 +
             C16469 * C1415) *
                C48129) *
               C48245 * C16471 +
           ((C16706 + C16707) * C831 + (C16708 + C16709) * C48311 -
            (C18132 + C18133) * C832 - (C18134 + C18135) * C48129) *
               C48245 * C48329) *
              C1521 +
          (((C16473 * C1813 + C16469 * C1816 + C16474 * C6867 +
             C48360 * C6869) *
                C832 -
            ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
              C16469 * C1271) *
                 C48311 +
             (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
              C16469 * C1262) *
                 C831) +
            (C16473 * C1817 + C16469 * C1822 + C16474 * C6870 +
             C48360 * C6873) *
                C48129) *
               C48245 * C16471 +
           ((C16473 * C1814 + C16469 * C1818 + C16474 * C6868 +
             C48360 * C6871) *
                C832 -
            ((C17926 + C17927) * C48311 + (C17928 + C17929) * C831) +
            (C16473 * C1819 + C16469 * C1823 + C16474 * C6872 +
             C48360 * C6874) *
                C48129) *
               C48245 * C48329) *
              C48352) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C831 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48311 -
             (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                 C832 -
             (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                 C48129) *
                C48245 * C16471 +
            ((C16508 + C16509) * C831 + (C16510 + C16511) * C48311 -
             (C16896 + C16897) * C832 - (C16898 + C16899) * C48129) *
                C48245 * C48329) *
               C48310 +
           (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
              C48360 * C1400) *
                 C832 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C48311 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C831) +
             (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
              C48360 * C1415) *
                 C48129) *
                C48245 * C16471 +
            ((C17406 + C17407) * C832 -
             ((C16702 + C16703) * C48311 + (C16704 + C16705) * C831) +
             (C17408 + C17409) * C48129) *
                C48245 * C48329) *
               C48087) *
              C302 +
          ((((C16897 + C16896) * C832 -
             ((C16511 + C16510) * C48311 + (C16509 + C16508) * C831) +
             (C16899 + C16898) * C48129) *
                C48245 * C16471 +
            ((C16904 + C16905) * C832 -
             ((C16512 + C16513) * C48311 + (C16514 + C16515) * C831) +
             (C16906 + C16907) * C48129) *
                C48245 * C48329) *
               C48310 +
           (((C16705 + C16704) * C831 + (C16703 + C16702) * C48311 -
             (C17407 + C17406) * C832 - (C17409 + C17408) * C48129) *
                C48245 * C16471 +
            ((C16710 + C16711) * C831 + (C16712 + C16713) * C48311 -
             (C17410 + C17411) * C832 - (C17412 + C17413) * C48129) *
                C48245 * C48329) *
               C48087) *
              C303 +
          ((((C16515 + C16514) * C831 + (C16513 + C16512) * C48311 -
             (C16905 + C16904) * C832 - (C16907 + C16906) * C48129) *
                C48245 * C16471 +
            ((C16516 + C16517) * C831 + (C16518 + C16519) * C48311 -
             (C17192 + C17193) * C832 - (C17194 + C17195) * C48129) *
                C48245 * C48329) *
               C48310 +
           (((C17411 + C17410) * C832 -
             ((C16713 + C16712) * C48311 + (C16711 + C16710) * C831) +
             (C17413 + C17412) * C48129) *
                C48245 * C16471 +
            ((C16473 * C1016 + C16469 * C1024 + C16474 * C1691 +
              C48360 * C1692) *
                 C832 -
             ((C17050 + C17051) * C48311 + (C17052 + C17053) * C831) +
             (C16473 * C1025 + C16469 * C1031 + C16474 * C1693 +
              C48360 * C1694) *
                 C48129) *
                C48245 * C48329) *
               C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C2447 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C2443 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C2448 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C2444 +
            (C16473 * C514 + C16469 * C525 + C16474 * C1385 + C48360 * C1394) *
                C2449 +
            (C16473 * C526 + C16469 * C544 + C16474 * C1395 + C48360 * C1412) *
                C2445 -
            (C16474 * C2581 + C48360 * C2584 + C16473 * C2147 +
             C16469 * C2153) *
                C2450 -
            (C16474 * C2585 + C48360 * C2590 + C16473 * C2154 +
             C16469 * C2165) *
                C48358) *
               C48245 * C16471 +
           ((C16508 + C16509) * C2447 + (C16510 + C16511) * C2443 -
            (C16896 + C16897) * C2448 - (C16898 + C16899) * C2444 +
            (C16900 + C16901) * C2449 + (C16902 + C16903) * C2445 -
            (C18984 + C18985) * C2450 - (C18986 + C18987) * C48358) *
               C48245 * C48329) *
              C48310 +
          (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
             C48360 * C1400) *
                C2448 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C2443 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C2447) +
            (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
             C48360 * C1415) *
                C2444 -
            (C16474 * C1389 + C48360 * C1402 + C16473 * C1385 +
             C16469 * C1394) *
                C2449 -
            (C16474 * C1403 + C48360 * C1416 + C16473 * C1395 +
             C16469 * C1412) *
                C2445 +
            (C16473 * C2581 + C16469 * C2584 + C16474 * C7735 +
             C48360 * C7737) *
                C2450 +
            (C16473 * C2585 + C16469 * C2590 + C16474 * C7738 +
             C48360 * C7741) *
                C48358) *
               C48245 * C16471 +
           ((C17406 + C17407) * C2448 -
            ((C16702 + C16703) * C2443 + (C16704 + C16705) * C2447) +
            (C17408 + C17409) * C2444 - (C18842 + C18843) * C2449 -
            (C18844 + C18845) * C2445 +
            (C16473 * C2582 + C16469 * C2586 + C16474 * C7736 +
             C48360 * C7739) *
                C2450 +
            (C16473 * C2587 + C16469 * C2591 + C16474 * C7740 +
             C48360 * C7742) *
                C48358) *
               C48245 * C48329) *
              C48087) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C16473 * C115 + C16469 * C122 + C16474 * C307 +
                 C48360 * C320) *
                    C114 +
                (C16473 * C123 + C16469 * C136 + C16474 * C319 +
                 C48360 * C337) *
                    C48042) *
                   C48245 * C16471 +
               ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) *
                   C48245 * C48329) *
                  C48025 * C108 -
              (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) *
                   C48245 * C48329 +
               ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) *
                   C48245 * C16471) *
                  C48025 * C109 +
              (((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) *
                   C48245 * C16471 +
               ((C16516 + C16517) * C114 + (C16518 + C16519) * C48042) *
                   C48245 * C48329) *
                  C48025 * C110 -
              (((C16520 + C16521) * C48042 + (C16522 + C16523) * C114) *
                   C48245 * C48329 +
               ((C16519 + C16518) * C48042 + (C16517 + C16516) * C114) *
                   C48245 * C16471) *
                  C48025 * C111 +
              (((C16523 + C16522) * C114 + (C16521 + C16520) * C48042) *
                   C48245 * C16471 +
               ((C16473 * C120 + C16469 * C133 + C16474 * C717 +
                 C48360 * C718) *
                    C114 +
                (C16473 * C132 + C16469 * C141 + C16474 * C719 +
                 C48360 * C720) *
                    C48042) *
                   C48245 * C48329) *
                  C48025 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C16473 * C115 + C16469 * C122 + C16474 * C307 +
                  C48360 * C320) *
                     C114 +
                 (C16473 * C123 + C16469 * C136 + C16474 * C319 +
                  C48360 * C337) *
                     C48042) *
                    C48245 * C16471 +
                ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) *
                    C48245 * C48329) *
                   C48381 -
               (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) *
                    C48245 * C48329 +
                ((C16474 * C322 + C48360 * C338 + C16473 * C319 +
                  C16469 * C337) *
                     C48042 +
                 (C16474 * C308 + C48360 * C321 + C16473 * C307 +
                  C16469 * C320) *
                     C114) *
                    C48245 * C16471) *
                   C48369 +
               (((C16473 * C308 + C16469 * C321 + C16474 * C1253 +
                  C48360 * C1262) *
                     C114 +
                 (C16473 * C322 + C16469 * C338 + C16474 * C1261 +
                  C48360 * C1271) *
                     C48042) *
                    C48245 * C16471 +
                ((C16706 + C16707) * C114 + (C16708 + C16709) * C48042) *
                    C48245 * C48329) *
                   C48342) *
                  C302 +
              ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) *
                    C48245 * C16471 +
                ((C16710 + C16711) * C114 + (C16712 + C16713) * C48042) *
                    C48245 * C48329) *
                   C48369 -
               (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) *
                    C48245 * C48329 +
                ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) *
                    C48245 * C16471) *
                   C48381 -
               (((C16714 + C16715) * C48042 + (C16716 + C16717) * C114) *
                    C48245 * C48329 +
                ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) *
                    C48245 * C16471) *
                   C48342) *
                  C303 +
              ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) *
                    C48245 * C16471 +
                ((C16516 + C16517) * C114 + (C16518 + C16519) * C48042) *
                    C48245 * C48329) *
                   C48381 -
               (((C16474 * C329 + C48360 * C342 + C16473 * C328 +
                  C16469 * C341) *
                     C48042 +
                 (C16474 * C312 + C48360 * C330 + C16473 * C311 +
                  C16469 * C327) *
                     C114) *
                    C48245 * C48329 +
                ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) *
                    C48245 * C16471) *
                   C48369 +
               (((C16717 + C16716) * C114 + (C16715 + C16714) * C48042) *
                    C48245 * C16471 +
                ((C16473 * C312 + C16469 * C330 + C16474 * C1525 +
                  C48360 * C1526) *
                     C114 +
                 (C16473 * C329 + C16469 * C342 + C16474 * C1527 +
                  C48360 * C1528) *
                     C48042) *
                    C48245 * C48329) *
                   C48342) *
                  C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C510 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48382 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C511 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C48371 +
            (C16473 * C514 + C16469 * C525 + C16474 * C1385 + C48360 * C1394) *
                C512 +
            (C16473 * C526 + C16469 * C544 + C16474 * C1395 + C48360 * C1412) *
                C48345) *
               C48245 * C16471 +
           ((C16508 + C16509) * C510 + (C16510 + C16511) * C48382 -
            (C16896 + C16897) * C511 - (C16898 + C16899) * C48371 +
            (C16900 + C16901) * C512 + (C16902 + C16903) * C48345) *
               C48245 * C48329) *
              C48025 * C302 +
          (((C16897 + C16896) * C511 -
            ((C16511 + C16510) * C48382 + (C16509 + C16508) * C510) +
            (C16899 + C16898) * C48371 - (C16901 + C16900) * C512 -
            (C16903 + C16902) * C48345) *
               C48245 * C16471 +
           ((C16904 + C16905) * C511 -
            ((C16512 + C16513) * C48382 + (C16514 + C16515) * C510) +
            (C16906 + C16907) * C48371 - (C16908 + C16909) * C512 -
            (C16910 + C16911) * C48345) *
               C48245 * C48329) *
              C48025 * C303 +
          (((C16515 + C16514) * C510 + (C16513 + C16512) * C48382 -
            (C16905 + C16904) * C511 - (C16907 + C16906) * C48371 +
            (C16909 + C16908) * C512 + (C16911 + C16910) * C48345) *
               C48245 * C16471 +
           ((C16516 + C16517) * C510 + (C16518 + C16519) * C48382 -
            (C16474 * C1016 + C48360 * C1024 + C16473 * C519 + C16469 * C535) *
                C511 -
            (C16474 * C1025 + C48360 * C1031 + C16473 * C536 + C16469 * C549) *
                C48371 +
            (C16473 * C520 + C16469 * C537 + C16474 * C2317 + C48360 * C2318) *
                C512 +
            (C16473 * C538 + C16469 * C550 + C16474 * C2319 + C48360 * C2320) *
                C48345) *
               C48245 * C48329) *
              C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C16471 +
            ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
                C48329) *
               C1177 -
           (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) * C48245 *
                C48329 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C48245 * C16471) *
               C1178 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C16471 +
            ((C16706 + C16707) * C114 + (C16708 + C16709) * C48042) * C48245 *
                C48329) *
               C48342) *
              C48378 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C48245 *
                C16471 +
            ((C16710 + C16711) * C114 + (C16712 + C16713) * C48042) * C48245 *
                C48329) *
               C1178 -
           (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) * C48245 *
                C48329 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C48245 *
                C16471) *
               C1177 -
           (((C16714 + C16715) * C48042 + (C16716 + C16717) * C114) * C48245 *
                C48329 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C48245 *
                C16471) *
               C48342) *
              C48365 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C48245 *
                C16471 +
            ((C16516 + C16517) * C114 + (C16518 + C16519) * C48042) * C48245 *
                C48329) *
               C1177 -
           (((C17050 + C17051) * C48042 + (C17052 + C17053) * C114) * C48245 *
                C48329 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C48245 *
                C16471) *
               C1178 +
           (((C16717 + C16716) * C114 + (C16715 + C16714) * C48042) * C48245 *
                C16471 +
            ((C16473 * C312 + C16469 * C330 + C16474 * C1525 + C48360 * C1526) *
                 C114 +
             (C16473 * C329 + C16469 * C342 + C16474 * C1527 + C48360 * C1528) *
                 C48042) *
                C48245 * C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C114 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48042) *
               C48245 * C16471 +
           ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
               C48329) *
              C1245 -
          (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) * C48245 *
               C48329 +
           ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                C48042 +
            (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                C114) *
               C48245 * C16471) *
              C1246 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C114 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C48042) *
               C48245 * C16471 +
           ((C16706 + C16707) * C114 + (C16708 + C16709) * C48042) * C48245 *
               C48329) *
              C1247 -
          (((C16474 * C1266 + C48360 * C1273 + C16473 * C1259 +
             C16469 * C1270) *
                C48042 +
            (C16474 * C1255 + C48360 * C1265 + C16473 * C1252 +
             C16469 * C1260) *
                C114) *
               C48245 * C48329 +
           ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
             C16469 * C1271) *
                C48042 +
            (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
             C16469 * C1262) *
                C114) *
               C48245 * C16471) *
              C1248 +
          (((C16473 * C1254 + C16469 * C1263 + C16474 * C6227 +
             C48360 * C6229) *
                C114 +
            (C16473 * C1264 + C16469 * C1272 + C16474 * C6230 +
             C48360 * C6233) *
                C48042) *
               C48245 * C16471 +
           ((C16473 * C1255 + C16469 * C1265 + C16474 * C6228 +
             C48360 * C6231) *
                C114 +
            (C16473 * C1266 + C16469 * C1273 + C16474 * C6232 +
             C48360 * C6234) *
                C48042) *
               C48245 * C48329) *
              C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C510 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48382 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C511 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C48371 +
            (C16473 * C514 + C16469 * C525 + C16474 * C1385 + C48360 * C1394) *
                C512 +
            (C16473 * C526 + C16469 * C544 + C16474 * C1395 + C48360 * C1412) *
                C48345) *
               C48245 * C16471 +
           ((C16508 + C16509) * C510 + (C16510 + C16511) * C48382 -
            (C16896 + C16897) * C511 - (C16898 + C16899) * C48371 +
            (C16900 + C16901) * C512 + (C16902 + C16903) * C48345) *
               C48245 * C48329) *
              C1177 +
          (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
             C48360 * C1400) *
                C511 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48382 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C510) +
            (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
             C48360 * C1415) *
                C48371 -
            (C16474 * C1389 + C48360 * C1402 + C16473 * C1385 +
             C16469 * C1394) *
                C512 -
            (C16474 * C1403 + C48360 * C1416 + C16473 * C1395 +
             C16469 * C1412) *
                C48345) *
               C48245 * C16471 +
           ((C17406 + C17407) * C511 -
            ((C16702 + C16703) * C48382 + (C16704 + C16705) * C510) +
            (C17408 + C17409) * C48371 -
            (C16474 * C1391 + C48360 * C1406 + C16473 * C1386 +
             C16469 * C1396) *
                C512 -
            (C16474 * C1407 + C48360 * C1418 + C16473 * C1397 +
             C16469 * C1413) *
                C48345) *
               C48245 * C48329) *
              C1178 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C510 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C48382 -
            (C16474 * C1813 + C48360 * C1816 + C16473 * C1388 +
             C16469 * C1400) *
                C511 -
            (C16474 * C1817 + C48360 * C1822 + C16473 * C1401 +
             C16469 * C1415) *
                C48371 +
            (C16473 * C1389 + C16469 * C1402 + C16474 * C6381 +
             C48360 * C6383) *
                C512 +
            (C16473 * C1403 + C16469 * C1416 + C16474 * C6384 +
             C48360 * C6387) *
                C48345) *
               C48245 * C16471 +
           ((C16706 + C16707) * C510 + (C16708 + C16709) * C48382 -
            (C16474 * C1814 + C48360 * C1818 + C16473 * C1390 +
             C16469 * C1404) *
                C511 -
            (C16474 * C1819 + C48360 * C1823 + C16473 * C1405 +
             C16469 * C1417) *
                C48371 +
            (C16473 * C1391 + C16469 * C1406 + C16474 * C6382 +
             C48360 * C6385) *
                C512 +
            (C16473 * C1407 + C16469 * C1418 + C16474 * C6386 +
             C48360 * C6388) *
                C48345) *
               C48245 * C48329) *
              C48342) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C1938 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C1935 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C1939 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C1936 +
            (C16473 * C514 + C16469 * C525 + C16474 * C1385 + C48360 * C1394) *
                C1940 +
            (C16473 * C526 + C16469 * C544 + C16474 * C1395 + C48360 * C1412) *
                C48345) *
               C48245 * C16471 +
           ((C16508 + C16509) * C1938 + (C16510 + C16511) * C1935 -
            (C16896 + C16897) * C1939 - (C16898 + C16899) * C1936 +
            (C16900 + C16901) * C1940 + (C16902 + C16903) * C48345) *
               C48245 * C48329) *
              C48025 * C48378 +
          (((C16897 + C16896) * C1939 -
            ((C16511 + C16510) * C1935 + (C16509 + C16508) * C1938) +
            (C16899 + C16898) * C1936 - (C16901 + C16900) * C1940 -
            (C16903 + C16902) * C48345) *
               C48245 * C16471 +
           ((C16904 + C16905) * C1939 -
            ((C16512 + C16513) * C1935 + (C16514 + C16515) * C1938) +
            (C16906 + C16907) * C1936 - (C16908 + C16909) * C1940 -
            (C16910 + C16911) * C48345) *
               C48245 * C48329) *
              C48025 * C48365 +
          (((C16515 + C16514) * C1938 + (C16513 + C16512) * C1935 -
            (C16905 + C16904) * C1939 - (C16907 + C16906) * C1936 +
            (C16909 + C16908) * C1940 + (C16911 + C16910) * C48345) *
               C48245 * C16471 +
           ((C16516 + C16517) * C1938 + (C16518 + C16519) * C1935 -
            (C17192 + C17193) * C1939 - (C17194 + C17195) * C1936 +
            (C16473 * C520 + C16469 * C537 + C16474 * C2317 + C48360 * C2318) *
                C1940 +
            (C16473 * C538 + C16469 * C550 + C16474 * C2319 + C48360 * C2320) *
                C48345) *
               C48245 * C48329) *
              C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C1938 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C1935 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C1939 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C1936 +
            (C16473 * C514 + C16469 * C525 + C16474 * C1385 + C48360 * C1394) *
                C1940 +
            (C16473 * C526 + C16469 * C544 + C16474 * C1395 + C48360 * C1412) *
                C48345) *
               C48245 * C16471 +
           ((C16508 + C16509) * C1938 + (C16510 + C16511) * C1935 -
            (C16896 + C16897) * C1939 - (C16898 + C16899) * C1936 +
            (C16900 + C16901) * C1940 + (C16902 + C16903) * C48345) *
               C48245 * C48329) *
              C48381 +
          (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
             C48360 * C1400) *
                C1939 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C1935 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C1938) +
            (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
             C48360 * C1415) *
                C1936 -
            (C16474 * C1389 + C48360 * C1402 + C16473 * C1385 +
             C16469 * C1394) *
                C1940 -
            (C16474 * C1403 + C48360 * C1416 + C16473 * C1395 +
             C16469 * C1412) *
                C48345) *
               C48245 * C16471 +
           ((C17406 + C17407) * C1939 -
            ((C16702 + C16703) * C1935 + (C16704 + C16705) * C1938) +
            (C17408 + C17409) * C1936 -
            (C16474 * C1391 + C48360 * C1406 + C16473 * C1386 +
             C16469 * C1396) *
                C1940 -
            (C16474 * C1407 + C48360 * C1418 + C16473 * C1397 +
             C16469 * C1413) *
                C48345) *
               C48245 * C48329) *
              C48369 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C1938 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C1935 -
            (C16474 * C1813 + C48360 * C1816 + C16473 * C1388 +
             C16469 * C1400) *
                C1939 -
            (C16474 * C1817 + C48360 * C1822 + C16473 * C1401 +
             C16469 * C1415) *
                C1936 +
            (C16473 * C1389 + C16469 * C1402 + C16474 * C6381 +
             C48360 * C6383) *
                C1940 +
            (C16473 * C1403 + C16469 * C1416 + C16474 * C6384 +
             C48360 * C6387) *
                C48345) *
               C48245 * C16471 +
           ((C16706 + C16707) * C1938 + (C16708 + C16709) * C1935 -
            (C18132 + C18133) * C1939 - (C18134 + C18135) * C1936 +
            (C16473 * C1391 + C16469 * C1406 + C16474 * C6382 +
             C48360 * C6385) *
                C1940 +
            (C16473 * C1407 + C16469 * C1418 + C16474 * C6386 +
             C48360 * C6388) *
                C48345) *
               C48245 * C48329) *
              C48342) *
         C47998) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
               C2142 +
           (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
               C2137 -
           (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
               C2143 -
           (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
               C2138 +
           (C16473 * C514 + C16469 * C525 + C16474 * C1385 + C48360 * C1394) *
               C2144 +
           (C16473 * C526 + C16469 * C544 + C16474 * C1395 + C48360 * C1412) *
               C2139 -
           (C16474 * C2581 + C48360 * C2584 + C16473 * C2147 + C16469 * C2153) *
               C2145 -
           (C16474 * C2585 + C48360 * C2590 + C16473 * C2154 + C16469 * C2165) *
               C2140 +
           (C16473 * C2148 + C16469 * C2155 + C16474 * C7249 + C48360 * C7251) *
               C2146 +
           (C16473 * C2156 + C16469 * C2166 + C16474 * C7252 + C48360 * C7255) *
               C2141) *
              C48245 * C16471 +
          ((C16508 + C16509) * C2142 + (C16510 + C16511) * C2137 -
           (C16896 + C16897) * C2143 - (C16898 + C16899) * C2138 +
           (C16900 + C16901) * C2144 + (C16902 + C16903) * C2139 -
           (C16474 * C2582 + C48360 * C2586 + C16473 * C2149 + C16469 * C2157) *
               C2145 -
           (C16474 * C2587 + C48360 * C2591 + C16473 * C2158 + C16469 * C2167) *
               C2140 +
           (C16473 * C2150 + C16469 * C2159 + C16474 * C7250 + C48360 * C7253) *
               C2146 +
           (C16473 * C2160 + C16469 * C2168 + C16474 * C7254 + C48360 * C7256) *
               C2141) *
              C48245 * C48329) *
         C48025 * C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C831 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48311 -
             (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                 C832 -
             (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                 C48129) *
                C48245 * C16471 +
            ((C16508 + C16509) * C831 + (C16510 + C16511) * C48311 -
             (C16896 + C16897) * C832 - (C16898 + C16899) * C48129) *
                C48245 * C48329) *
               C1177 +
           (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
              C48360 * C1400) *
                 C832 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C48311 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C831) +
             (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
              C48360 * C1415) *
                 C48129) *
                C48245 * C16471 +
            ((C17406 + C17407) * C832 -
             ((C16702 + C16703) * C48311 + (C16704 + C16705) * C831) +
             (C17408 + C17409) * C48129) *
                C48245 * C48329) *
               C1178 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C831 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48311 -
             (C16474 * C1813 + C48360 * C1816 + C16473 * C1388 +
              C16469 * C1400) *
                 C832 -
             (C16474 * C1817 + C48360 * C1822 + C16473 * C1401 +
              C16469 * C1415) *
                 C48129) *
                C48245 * C16471 +
            ((C16706 + C16707) * C831 + (C16708 + C16709) * C48311 -
             (C18132 + C18133) * C832 - (C18134 + C18135) * C48129) *
                C48245 * C48329) *
               C48342) *
              C48296 +
          ((((C16897 + C16896) * C832 -
             ((C16511 + C16510) * C48311 + (C16509 + C16508) * C831) +
             (C16899 + C16898) * C48129) *
                C48245 * C16471 +
            ((C16904 + C16905) * C832 -
             ((C16512 + C16513) * C48311 + (C16514 + C16515) * C831) +
             (C16906 + C16907) * C48129) *
                C48245 * C48329) *
               C1177 +
           (((C16705 + C16704) * C831 + (C16703 + C16702) * C48311 -
             (C17407 + C17406) * C832 - (C17409 + C17408) * C48129) *
                C48245 * C16471 +
            ((C16710 + C16711) * C831 + (C16712 + C16713) * C48311 -
             (C17410 + C17411) * C832 - (C17412 + C17413) * C48129) *
                C48245 * C48329) *
               C1178 +
           (((C18133 + C18132) * C832 -
             ((C16709 + C16708) * C48311 + (C16707 + C16706) * C831) +
             (C18135 + C18134) * C48129) *
                C48245 * C16471 +
            ((C16473 * C1392 + C16469 * C1408 + C16474 * C1815 +
              C48360 * C1820) *
                 C832 -
             ((C16714 + C16715) * C48311 + (C16716 + C16717) * C831) +
             (C16473 * C1409 + C16469 * C1419 + C16474 * C1821 +
              C48360 * C1824) *
                 C48129) *
                C48245 * C48329) *
               C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C831 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48311 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C832 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C48129) *
               C48245 * C16471 +
           ((C16508 + C16509) * C831 + (C16510 + C16511) * C48311 -
            (C16896 + C16897) * C832 - (C16898 + C16899) * C48129) *
               C48245 * C48329) *
              C48025 * C713 +
          (((C16897 + C16896) * C832 -
            ((C16511 + C16510) * C48311 + (C16509 + C16508) * C831) +
            (C16899 + C16898) * C48129) *
               C48245 * C16471 +
           ((C16904 + C16905) * C832 -
            ((C16512 + C16513) * C48311 + (C16514 + C16515) * C831) +
            (C16906 + C16907) * C48129) *
               C48245 * C48329) *
              C48025 * C714 +
          (((C16515 + C16514) * C831 + (C16513 + C16512) * C48311 -
            (C16905 + C16904) * C832 - (C16907 + C16906) * C48129) *
               C48245 * C16471 +
           ((C16516 + C16517) * C831 + (C16518 + C16519) * C48311 -
            (C17192 + C17193) * C832 - (C17194 + C17195) * C48129) *
               C48245 * C48329) *
              C48025 * C715 +
          (((C17193 + C17192) * C832 -
            ((C16519 + C16518) * C48311 + (C16517 + C16516) * C831) +
            (C17195 + C17194) * C48129) *
               C48245 * C16471 +
           ((C16473 * C521 + C16469 * C539 + C16474 * C1017 + C48360 * C1026) *
                C832 -
            ((C16520 + C16521) * C48311 + (C16522 + C16523) * C831) +
            (C16473 * C540 + C16469 * C551 + C16474 * C1027 + C48360 * C1032) *
                C48129) *
               C48245 * C48329) *
              C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C2447 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C2443 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C2448 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C2444 +
            (C16473 * C514 + C16469 * C525 + C16474 * C1385 + C48360 * C1394) *
                C2449 +
            (C16473 * C526 + C16469 * C544 + C16474 * C1395 + C48360 * C1412) *
                C2445 -
            (C16474 * C2581 + C48360 * C2584 + C16473 * C2147 +
             C16469 * C2153) *
                C2450 -
            (C16474 * C2585 + C48360 * C2590 + C16473 * C2154 +
             C16469 * C2165) *
                C48358) *
               C48245 * C16471 +
           ((C16508 + C16509) * C2447 + (C16510 + C16511) * C2443 -
            (C16896 + C16897) * C2448 - (C16898 + C16899) * C2444 +
            (C16900 + C16901) * C2449 + (C16902 + C16903) * C2445 -
            (C18984 + C18985) * C2450 - (C18986 + C18987) * C48358) *
               C48245 * C48329) *
              C48025 * C48296 +
          (((C16897 + C16896) * C2448 -
            ((C16511 + C16510) * C2443 + (C16509 + C16508) * C2447) +
            (C16899 + C16898) * C2444 - (C16901 + C16900) * C2449 -
            (C16903 + C16902) * C2445 + (C18985 + C18984) * C2450 +
            (C18987 + C18986) * C48358) *
               C48245 * C16471 +
           ((C16904 + C16905) * C2448 -
            ((C16512 + C16513) * C2443 + (C16514 + C16515) * C2447) +
            (C16906 + C16907) * C2444 - (C16908 + C16909) * C2449 -
            (C16910 + C16911) * C2445 +
            (C16473 * C2151 + C16469 * C2161 + C16474 * C2583 +
             C48360 * C2588) *
                C2450 +
            (C16473 * C2162 + C16469 * C2169 + C16474 * C2589 +
             C48360 * C2592) *
                C48358) *
               C48245 * C48329) *
              C48025 * C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C16471 +
            ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
                C48329) *
               C48381 -
           (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) * C48245 *
                C48329 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C48245 * C16471) *
               C48369 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C16471 +
            ((C16706 + C16707) * C114 + (C16708 + C16709) * C48042) * C48245 *
                C48329) *
               C48342) *
              C302 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C48245 *
                C16471 +
            ((C16710 + C16711) * C114 + (C16712 + C16713) * C48042) * C48245 *
                C48329) *
               C48369 -
           (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) * C48245 *
                C48329 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C48245 *
                C16471) *
               C48381 -
           (((C16714 + C16715) * C48042 + (C16716 + C16717) * C114) * C48245 *
                C48329 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C48245 *
                C16471) *
               C48342) *
              C303 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C48245 *
                C16471 +
            ((C16516 + C16517) * C114 + (C16518 + C16519) * C48042) * C48245 *
                C48329) *
               C48381 -
           (((C16474 * C329 + C48360 * C342 + C16473 * C328 + C16469 * C341) *
                 C48042 +
             (C16474 * C312 + C48360 * C330 + C16473 * C311 + C16469 * C327) *
                 C114) *
                C48245 * C48329 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C48245 *
                C16471) *
               C48369 +
           (((C16717 + C16716) * C114 + (C16715 + C16714) * C48042) * C48245 *
                C16471 +
            ((C16473 * C312 + C16469 * C330 + C16474 * C1525 + C48360 * C1526) *
                 C114 +
             (C16473 * C329 + C16469 * C342 + C16474 * C1527 + C48360 * C1528) *
                 C48042) *
                C48245 * C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C114 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48042) *
               C48245 * C16471 +
           ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
               C48329) *
              C48025 * C108 -
          (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) * C48245 *
               C48329 +
           ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C48245 *
               C16471) *
              C48025 * C109 +
          (((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C48245 *
               C16471 +
           ((C16516 + C16517) * C114 + (C16518 + C16519) * C48042) * C48245 *
               C48329) *
              C48025 * C110 -
          (((C16520 + C16521) * C48042 + (C16522 + C16523) * C114) * C48245 *
               C48329 +
           ((C16519 + C16518) * C48042 + (C16517 + C16516) * C114) * C48245 *
               C16471) *
              C48025 * C111 +
          (((C16523 + C16522) * C114 + (C16521 + C16520) * C48042) * C48245 *
               C16471 +
           ((C16473 * C120 + C16469 * C133 + C16474 * C717 + C48360 * C718) *
                C114 +
            (C16473 * C132 + C16469 * C141 + C16474 * C719 + C48360 * C720) *
                C48042) *
               C48245 * C48329) *
              C48025 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C16471 +
            ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
                C48329) *
               C1177 -
           (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) * C48245 *
                C48329 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C48245 * C16471) *
               C1178 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C16471 +
            ((C16706 + C16707) * C114 + (C16708 + C16709) * C48042) * C48245 *
                C48329) *
               C48342) *
              C48378 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C48245 *
                C16471 +
            ((C16710 + C16711) * C114 + (C16712 + C16713) * C48042) * C48245 *
                C48329) *
               C1178 -
           (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) * C48245 *
                C48329 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C48245 *
                C16471) *
               C1177 -
           (((C16714 + C16715) * C48042 + (C16716 + C16717) * C114) * C48245 *
                C48329 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C48245 *
                C16471) *
               C48342) *
              C48365 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C48245 *
                C16471 +
            ((C16516 + C16517) * C114 + (C16518 + C16519) * C48042) * C48245 *
                C48329) *
               C1177 -
           (((C17050 + C17051) * C48042 + (C17052 + C17053) * C114) * C48245 *
                C48329 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C48245 *
                C16471) *
               C1178 +
           (((C16717 + C16716) * C114 + (C16715 + C16714) * C48042) * C48245 *
                C16471 +
            ((C16473 * C312 + C16469 * C330 + C16474 * C1525 + C48360 * C1526) *
                 C114 +
             (C16473 * C329 + C16469 * C342 + C16474 * C1527 + C48360 * C1528) *
                 C48042) *
                C48245 * C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C114 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48042) *
               C48245 * C16471 +
           ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
               C48329) *
              C1245 -
          (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) * C48245 *
               C48329 +
           ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                C48042 +
            (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                C114) *
               C48245 * C16471) *
              C1246 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C114 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C48042) *
               C48245 * C16471 +
           ((C16706 + C16707) * C114 + (C16708 + C16709) * C48042) * C48245 *
               C48329) *
              C1247 -
          (((C16474 * C1266 + C48360 * C1273 + C16473 * C1259 +
             C16469 * C1270) *
                C48042 +
            (C16474 * C1255 + C48360 * C1265 + C16473 * C1252 +
             C16469 * C1260) *
                C114) *
               C48245 * C48329 +
           ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
             C16469 * C1271) *
                C48042 +
            (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
             C16469 * C1262) *
                C114) *
               C48245 * C16471) *
              C1248 +
          (((C16473 * C1254 + C16469 * C1263 + C16474 * C6227 +
             C48360 * C6229) *
                C114 +
            (C16473 * C1264 + C16469 * C1272 + C16474 * C6230 +
             C48360 * C6233) *
                C48042) *
               C48245 * C16471 +
           ((C16473 * C1255 + C16469 * C1265 + C16474 * C6228 +
             C48360 * C6231) *
                C114 +
            (C16473 * C1266 + C16469 * C1273 + C16474 * C6232 +
             C48360 * C6234) *
                C48042) *
               C48245 * C48329) *
              C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C1938 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C1935 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C1939 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C1936 +
            (C16473 * C514 + C16469 * C525 + C16474 * C1385 + C48360 * C1394) *
                C1940 +
            (C16473 * C526 + C16469 * C544 + C16474 * C1395 + C48360 * C1412) *
                C48345) *
               C48245 * C16471 +
           ((C16508 + C16509) * C1938 + (C16510 + C16511) * C1935 -
            (C16896 + C16897) * C1939 - (C16898 + C16899) * C1936 +
            (C16900 + C16901) * C1940 + (C16902 + C16903) * C48345) *
               C48245 * C48329) *
              C48025 * C48378 +
          (((C16897 + C16896) * C1939 -
            ((C16511 + C16510) * C1935 + (C16509 + C16508) * C1938) +
            (C16899 + C16898) * C1936 - (C16901 + C16900) * C1940 -
            (C16903 + C16902) * C48345) *
               C48245 * C16471 +
           ((C16904 + C16905) * C1939 -
            ((C16512 + C16513) * C1935 + (C16514 + C16515) * C1938) +
            (C16906 + C16907) * C1936 - (C16908 + C16909) * C1940 -
            (C16910 + C16911) * C48345) *
               C48245 * C48329) *
              C48025 * C48365 +
          (((C16515 + C16514) * C1938 + (C16513 + C16512) * C1935 -
            (C16905 + C16904) * C1939 - (C16907 + C16906) * C1936 +
            (C16909 + C16908) * C1940 + (C16911 + C16910) * C48345) *
               C48245 * C16471 +
           ((C16516 + C16517) * C1938 + (C16518 + C16519) * C1935 -
            (C17192 + C17193) * C1939 - (C17194 + C17195) * C1936 +
            (C16473 * C520 + C16469 * C537 + C16474 * C2317 + C48360 * C2318) *
                C1940 +
            (C16473 * C538 + C16469 * C550 + C16474 * C2319 + C48360 * C2320) *
                C48345) *
               C48245 * C48329) *
              C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C1938 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C1935 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C1939 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C1936 +
            (C16473 * C514 + C16469 * C525 + C16474 * C1385 + C48360 * C1394) *
                C1940 +
            (C16473 * C526 + C16469 * C544 + C16474 * C1395 + C48360 * C1412) *
                C48345) *
               C48245 * C16471 +
           ((C16508 + C16509) * C1938 + (C16510 + C16511) * C1935 -
            (C16896 + C16897) * C1939 - (C16898 + C16899) * C1936 +
            (C16900 + C16901) * C1940 + (C16902 + C16903) * C48345) *
               C48245 * C48329) *
              C48381 +
          (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
             C48360 * C1400) *
                C1939 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C1935 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C1938) +
            (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
             C48360 * C1415) *
                C1936 -
            (C16474 * C1389 + C48360 * C1402 + C16473 * C1385 +
             C16469 * C1394) *
                C1940 -
            (C16474 * C1403 + C48360 * C1416 + C16473 * C1395 +
             C16469 * C1412) *
                C48345) *
               C48245 * C16471 +
           ((C17406 + C17407) * C1939 -
            ((C16702 + C16703) * C1935 + (C16704 + C16705) * C1938) +
            (C17408 + C17409) * C1936 -
            (C16474 * C1391 + C48360 * C1406 + C16473 * C1386 +
             C16469 * C1396) *
                C1940 -
            (C16474 * C1407 + C48360 * C1418 + C16473 * C1397 +
             C16469 * C1413) *
                C48345) *
               C48245 * C48329) *
              C48369 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C1938 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C1935 -
            (C16474 * C1813 + C48360 * C1816 + C16473 * C1388 +
             C16469 * C1400) *
                C1939 -
            (C16474 * C1817 + C48360 * C1822 + C16473 * C1401 +
             C16469 * C1415) *
                C1936 +
            (C16473 * C1389 + C16469 * C1402 + C16474 * C6381 +
             C48360 * C6383) *
                C1940 +
            (C16473 * C1403 + C16469 * C1416 + C16474 * C6384 +
             C48360 * C6387) *
                C48345) *
               C48245 * C16471 +
           ((C16706 + C16707) * C1938 + (C16708 + C16709) * C1935 -
            (C18132 + C18133) * C1939 - (C18134 + C18135) * C1936 +
            (C16473 * C1391 + C16469 * C1406 + C16474 * C6382 +
             C48360 * C6385) *
                C1940 +
            (C16473 * C1407 + C16469 * C1418 + C16474 * C6386 +
             C48360 * C6388) *
                C48345) *
               C48245 * C48329) *
              C48342) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C3467 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C3465 -
             (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                 C3468 -
             (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                 C48129) *
                C48245 * C16471 +
            ((C16508 + C16509) * C3467 + (C16510 + C16511) * C3465 -
             (C16896 + C16897) * C3468 - (C16898 + C16899) * C48129) *
                C48245 * C48329) *
               C48310 +
           (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
              C48360 * C1400) *
                 C3468 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C3465 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C3467) +
             (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
              C48360 * C1415) *
                 C48129) *
                C48245 * C16471 +
            ((C17406 + C17407) * C3468 -
             ((C16702 + C16703) * C3465 + (C16704 + C16705) * C3467) +
             (C17408 + C17409) * C48129) *
                C48245 * C48329) *
               C48087) *
              C48003 +
          ((((C16897 + C16896) * C3468 -
             ((C16511 + C16510) * C3465 + (C16509 + C16508) * C3467) +
             (C16899 + C16898) * C48129) *
                C48245 * C16471 +
            ((C16904 + C16905) * C3468 -
             ((C16512 + C16513) * C3465 + (C16514 + C16515) * C3467) +
             (C16906 + C16907) * C48129) *
                C48245 * C48329) *
               C48310 +
           (((C16705 + C16704) * C3467 + (C16703 + C16702) * C3465 -
             (C17407 + C17406) * C3468 - (C17409 + C17408) * C48129) *
                C48245 * C16471 +
            ((C16710 + C16711) * C3467 + (C16712 + C16713) * C3465 -
             (C17410 + C17411) * C3468 - (C17412 + C17413) * C48129) *
                C48245 * C48329) *
               C48087) *
              C48011 +
          ((((C16515 + C16514) * C3467 + (C16513 + C16512) * C3465 -
             (C16905 + C16904) * C3468 - (C16907 + C16906) * C48129) *
                C48245 * C16471 +
            ((C16516 + C16517) * C3467 + (C16518 + C16519) * C3465 -
             (C17192 + C17193) * C3468 - (C17194 + C17195) * C48129) *
                C48245 * C48329) *
               C48310 +
           (((C17411 + C17410) * C3468 -
             ((C16713 + C16712) * C3465 + (C16711 + C16710) * C3467) +
             (C17413 + C17412) * C48129) *
                C48245 * C16471 +
            ((C16473 * C1016 + C16469 * C1024 + C16474 * C1691 +
              C48360 * C1692) *
                 C3468 -
             ((C17050 + C17051) * C3465 + (C17052 + C17053) * C3467) +
             (C16473 * C1025 + C16469 * C1031 + C16474 * C1693 +
              C48360 * C1694) *
                 C48129) *
                C48245 * C48329) *
               C48087) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C47030 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48125 -
             (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                 C47022 -
             (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                 C48132 +
             (C16473 * C514 + C16469 * C525 + C16474 * C1385 + C48360 * C1394) *
                 C47036 +
             (C16473 * C526 + C16469 * C544 + C16474 * C1395 + C48360 * C1412) *
                 C4043) *
                C48245 * C16471 +
            ((C16508 + C16509) * C47030 + (C16510 + C16511) * C48125 -
             (C16896 + C16897) * C47022 - (C16898 + C16899) * C48132 +
             (C16900 + C16901) * C47036 + (C16902 + C16903) * C4043) *
                C48245 * C48329) *
               C48310 +
           (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
              C48360 * C1400) *
                 C47022 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C48125 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C47030) +
             (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
              C48360 * C1415) *
                 C48132 -
             (C16474 * C1389 + C48360 * C1402 + C16473 * C1385 +
              C16469 * C1394) *
                 C47036 -
             (C16474 * C1403 + C48360 * C1416 + C16473 * C1395 +
              C16469 * C1412) *
                 C4043) *
                C48245 * C16471 +
            ((C17406 + C17407) * C47022 -
             ((C16702 + C16703) * C48125 + (C16704 + C16705) * C47030) +
             (C17408 + C17409) * C48132 - (C18842 + C18843) * C47036 -
             (C18844 + C18845) * C4043) *
                C48245 * C48329) *
               C48087) *
              C2799 +
          ((((C16897 + C16896) * C47022 -
             ((C16511 + C16510) * C48125 + (C16509 + C16508) * C47030) +
             (C16899 + C16898) * C48132 - (C16901 + C16900) * C47036 -
             (C16903 + C16902) * C4043) *
                C48245 * C16471 +
            ((C16904 + C16905) * C47022 -
             ((C16512 + C16513) * C48125 + (C16514 + C16515) * C47030) +
             (C16906 + C16907) * C48132 - (C16908 + C16909) * C47036 -
             (C16910 + C16911) * C4043) *
                C48245 * C48329) *
               C48310 +
           (((C16705 + C16704) * C47030 + (C16703 + C16702) * C48125 -
             (C17407 + C17406) * C47022 - (C17409 + C17408) * C48132 +
             (C18843 + C18842) * C47036 + (C18845 + C18844) * C4043) *
                C48245 * C16471 +
            ((C16710 + C16711) * C47030 + (C16712 + C16713) * C48125 -
             (C17410 + C17411) * C47022 - (C17412 + C17413) * C48132 +
             (C16473 * C1387 + C16469 * C1398 + C16474 * C1393 +
              C48360 * C1410) *
                 C47036 +
             (C16473 * C1399 + C16469 * C1414 + C16474 * C1411 +
              C48360 * C1420) *
                 C4043) *
                C48245 * C48329) *
               C48087) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C3467 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C3465 -
             (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                 C3468 -
             (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                 C48129) *
                C48245 * C16471 +
            ((C16508 + C16509) * C3467 + (C16510 + C16511) * C3465 -
             (C16896 + C16897) * C3468 - (C16898 + C16899) * C48129) *
                C48245 * C48329) *
               C48381 +
           (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
              C48360 * C1400) *
                 C3468 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C3465 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C3467) +
             (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
              C48360 * C1415) *
                 C48129) *
                C48245 * C16471 +
            ((C17406 + C17407) * C3468 -
             ((C16702 + C16703) * C3465 + (C16704 + C16705) * C3467) +
             (C17408 + C17409) * C48129) *
                C48245 * C48329) *
               C48369 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C3467 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C3465 -
             (C16474 * C1813 + C48360 * C1816 + C16473 * C1388 +
              C16469 * C1400) *
                 C3468 -
             (C16474 * C1817 + C48360 * C1822 + C16473 * C1401 +
              C16469 * C1415) *
                 C48129) *
                C48245 * C16471 +
            ((C16706 + C16707) * C3467 + (C16708 + C16709) * C3465 -
             (C18132 + C18133) * C3468 - (C18134 + C18135) * C48129) *
                C48245 * C48329) *
               C48342) *
              C2799 +
          ((((C16897 + C16896) * C3468 -
             ((C16511 + C16510) * C3465 + (C16509 + C16508) * C3467) +
             (C16899 + C16898) * C48129) *
                C48245 * C16471 +
            ((C16904 + C16905) * C3468 -
             ((C16512 + C16513) * C3465 + (C16514 + C16515) * C3467) +
             (C16906 + C16907) * C48129) *
                C48245 * C48329) *
               C48381 +
           (((C16705 + C16704) * C3467 + (C16703 + C16702) * C3465 -
             (C17407 + C17406) * C3468 - (C17409 + C17408) * C48129) *
                C48245 * C16471 +
            ((C16710 + C16711) * C3467 + (C16712 + C16713) * C3465 -
             (C17410 + C17411) * C3468 - (C17412 + C17413) * C48129) *
                C48245 * C48329) *
               C48369 +
           (((C18133 + C18132) * C3468 -
             ((C16709 + C16708) * C3465 + (C16707 + C16706) * C3467) +
             (C18135 + C18134) * C48129) *
                C48245 * C16471 +
            ((C16473 * C1392 + C16469 * C1408 + C16474 * C1815 +
              C48360 * C1820) *
                 C3468 -
             ((C16714 + C16715) * C3465 + (C16716 + C16717) * C3467) +
             (C16473 * C1409 + C16469 * C1419 + C16474 * C1821 +
              C48360 * C1824) *
                 C48129) *
                C48245 * C48329) *
               C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C3467 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C3465 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C3468 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C48129) *
               C48245 * C16471 +
           ((C16508 + C16509) * C3467 + (C16510 + C16511) * C3465 -
            (C16896 + C16897) * C3468 - (C16898 + C16899) * C48129) *
               C48245 * C48329) *
              C48025 * C48387 +
          (((C16897 + C16896) * C3468 -
            ((C16511 + C16510) * C3465 + (C16509 + C16508) * C3467) +
            (C16899 + C16898) * C48129) *
               C48245 * C16471 +
           ((C16904 + C16905) * C3468 -
            ((C16512 + C16513) * C3465 + (C16514 + C16515) * C3467) +
            (C16906 + C16907) * C48129) *
               C48245 * C48329) *
              C48025 * C48380 +
          (((C16515 + C16514) * C3467 + (C16513 + C16512) * C3465 -
            (C16905 + C16904) * C3468 - (C16907 + C16906) * C48129) *
               C48245 * C16471 +
           ((C16516 + C16517) * C3467 + (C16518 + C16519) * C3465 -
            (C17192 + C17193) * C3468 - (C17194 + C17195) * C48129) *
               C48245 * C48329) *
              C48025 * C48367 +
          (((C17193 + C17192) * C3468 -
            ((C16519 + C16518) * C3465 + (C16517 + C16516) * C3467) +
            (C17195 + C17194) * C48129) *
               C48245 * C16471 +
           ((C16473 * C521 + C16469 * C539 + C16474 * C1017 + C48360 * C1026) *
                C3468 -
            ((C16520 + C16521) * C3465 + (C16522 + C16523) * C3467) +
            (C16473 * C540 + C16469 * C551 + C16474 * C1027 + C48360 * C1032) *
                C48129) *
               C48245 * C48329) *
              C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C3757 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48389 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C3758 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C48386 +
            (C16473 * C514 + C16469 * C525 + C16474 * C1385 + C48360 * C1394) *
                C3759 +
            (C16473 * C526 + C16469 * C544 + C16474 * C1395 + C48360 * C1412) *
                C48377 -
            (C16474 * C2581 + C48360 * C2584 + C16473 * C2147 +
             C16469 * C2153) *
                C3760 -
            (C16474 * C2585 + C48360 * C2590 + C16473 * C2154 +
             C16469 * C2165) *
                C48358) *
               C48245 * C16471 +
           ((C16508 + C16509) * C3757 + (C16510 + C16511) * C48389 -
            (C16896 + C16897) * C3758 - (C16898 + C16899) * C48386 +
            (C16900 + C16901) * C3759 + (C16902 + C16903) * C48377 -
            (C18984 + C18985) * C3760 - (C18986 + C18987) * C48358) *
               C48245 * C48329) *
              C48025 * C2799 +
          (((C16897 + C16896) * C3758 -
            ((C16511 + C16510) * C48389 + (C16509 + C16508) * C3757) +
            (C16899 + C16898) * C48386 - (C16901 + C16900) * C3759 -
            (C16903 + C16902) * C48377 + (C18985 + C18984) * C3760 +
            (C18987 + C18986) * C48358) *
               C48245 * C16471 +
           ((C16904 + C16905) * C3758 -
            ((C16512 + C16513) * C48389 + (C16514 + C16515) * C3757) +
            (C16906 + C16907) * C48386 - (C16908 + C16909) * C3759 -
            (C16910 + C16911) * C48377 +
            (C16473 * C2151 + C16469 * C2161 + C16474 * C2583 +
             C48360 * C2588) *
                C3760 +
            (C16473 * C2162 + C16469 * C2169 + C16474 * C2589 +
             C48360 * C2592) *
                C48358) *
               C48245 * C48329) *
              C48025 * C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C47030 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48125 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C47022 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C48132 +
            (C16473 * C514 + C16469 * C525 + C16474 * C1385 + C48360 * C1394) *
                C47036 +
            (C16473 * C526 + C16469 * C544 + C16474 * C1395 + C48360 * C1412) *
                C4043) *
               C48245 * C16471 +
           ((C16508 + C16509) * C47030 + (C16510 + C16511) * C48125 -
            (C16896 + C16897) * C47022 - (C16898 + C16899) * C48132 +
            (C16900 + C16901) * C47036 + (C16902 + C16903) * C4043) *
               C48245 * C48329) *
              C48025 * C48003 +
          (((C16897 + C16896) * C47022 -
            ((C16511 + C16510) * C48125 + (C16509 + C16508) * C47030) +
            (C16899 + C16898) * C48132 - (C16901 + C16900) * C47036 -
            (C16903 + C16902) * C4043) *
               C48245 * C16471 +
           ((C16904 + C16905) * C47022 -
            ((C16512 + C16513) * C48125 + (C16514 + C16515) * C47030) +
            (C16906 + C16907) * C48132 - (C16908 + C16909) * C47036 -
            (C16910 + C16911) * C4043) *
               C48245 * C48329) *
              C48025 * C48011 +
          (((C16515 + C16514) * C47030 + (C16513 + C16512) * C48125 -
            (C16905 + C16904) * C47022 - (C16907 + C16906) * C48132 +
            (C16909 + C16908) * C47036 + (C16911 + C16910) * C4043) *
               C48245 * C16471 +
           ((C16516 + C16517) * C47030 + (C16518 + C16519) * C48125 -
            (C17192 + C17193) * C47022 - (C17194 + C17195) * C48132 +
            (C16473 * C520 + C16469 * C537 + C16474 * C2317 + C48360 * C2318) *
                C47036 +
            (C16473 * C538 + C16469 * C550 + C16474 * C2319 + C48360 * C2320) *
                C4043) *
               C48245 * C48329) *
              C48025 * C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C3467 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C3465 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C3468 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C48129) *
               C48245 * C16471 +
           ((C16508 + C16509) * C3467 + (C16510 + C16511) * C3465 -
            (C16896 + C16897) * C3468 - (C16898 + C16899) * C48129) *
               C48245 * C48329) *
              C48025 * C48387 +
          (((C16897 + C16896) * C3468 -
            ((C16511 + C16510) * C3465 + (C16509 + C16508) * C3467) +
            (C16899 + C16898) * C48129) *
               C48245 * C16471 +
           ((C16904 + C16905) * C3468 -
            ((C16512 + C16513) * C3465 + (C16514 + C16515) * C3467) +
            (C16906 + C16907) * C48129) *
               C48245 * C48329) *
              C48025 * C48380 +
          (((C16515 + C16514) * C3467 + (C16513 + C16512) * C3465 -
            (C16905 + C16904) * C3468 - (C16907 + C16906) * C48129) *
               C48245 * C16471 +
           ((C16516 + C16517) * C3467 + (C16518 + C16519) * C3465 -
            (C17192 + C17193) * C3468 - (C17194 + C17195) * C48129) *
               C48245 * C48329) *
              C48025 * C48367 +
          (((C17193 + C17192) * C3468 -
            ((C16519 + C16518) * C3465 + (C16517 + C16516) * C3467) +
            (C17195 + C17194) * C48129) *
               C48245 * C16471 +
           ((C16473 * C521 + C16469 * C539 + C16474 * C1017 + C48360 * C1026) *
                C3468 -
            ((C16520 + C16521) * C3465 + (C16522 + C16523) * C3467) +
            (C16473 * C540 + C16469 * C551 + C16474 * C1027 + C48360 * C1032) *
                C48129) *
               C48245 * C48329) *
              C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C3467 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C3465 -
             (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                 C3468 -
             (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                 C48129) *
                C48245 * C16471 +
            ((C16508 + C16509) * C3467 + (C16510 + C16511) * C3465 -
             (C16896 + C16897) * C3468 - (C16898 + C16899) * C48129) *
                C48245 * C48329) *
               C48381 +
           (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
              C48360 * C1400) *
                 C3468 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C3465 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C3467) +
             (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
              C48360 * C1415) *
                 C48129) *
                C48245 * C16471 +
            ((C17406 + C17407) * C3468 -
             ((C16702 + C16703) * C3465 + (C16704 + C16705) * C3467) +
             (C17408 + C17409) * C48129) *
                C48245 * C48329) *
               C48369 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C3467 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C3465 -
             (C16474 * C1813 + C48360 * C1816 + C16473 * C1388 +
              C16469 * C1400) *
                 C3468 -
             (C16474 * C1817 + C48360 * C1822 + C16473 * C1401 +
              C16469 * C1415) *
                 C48129) *
                C48245 * C16471 +
            ((C16706 + C16707) * C3467 + (C16708 + C16709) * C3465 -
             (C18132 + C18133) * C3468 - (C18134 + C18135) * C48129) *
                C48245 * C48329) *
               C48342) *
              C2799 +
          ((((C16897 + C16896) * C3468 -
             ((C16511 + C16510) * C3465 + (C16509 + C16508) * C3467) +
             (C16899 + C16898) * C48129) *
                C48245 * C16471 +
            ((C16904 + C16905) * C3468 -
             ((C16512 + C16513) * C3465 + (C16514 + C16515) * C3467) +
             (C16906 + C16907) * C48129) *
                C48245 * C48329) *
               C48381 +
           (((C16705 + C16704) * C3467 + (C16703 + C16702) * C3465 -
             (C17407 + C17406) * C3468 - (C17409 + C17408) * C48129) *
                C48245 * C16471 +
            ((C16710 + C16711) * C3467 + (C16712 + C16713) * C3465 -
             (C17410 + C17411) * C3468 - (C17412 + C17413) * C48129) *
                C48245 * C48329) *
               C48369 +
           (((C18133 + C18132) * C3468 -
             ((C16709 + C16708) * C3465 + (C16707 + C16706) * C3467) +
             (C18135 + C18134) * C48129) *
                C48245 * C16471 +
            ((C16473 * C1392 + C16469 * C1408 + C16474 * C1815 +
              C48360 * C1820) *
                 C3468 -
             ((C16714 + C16715) * C3465 + (C16716 + C16717) * C3467) +
             (C16473 * C1409 + C16469 * C1419 + C16474 * C1821 +
              C48360 * C1824) *
                 C48129) *
                C48245 * C48329) *
               C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C16471 +
            ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
                C48329) *
               C48310 -
           (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) * C48245 *
                C48329 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C48245 * C16471) *
               C48087) *
              C713 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C48245 *
                C16471 +
            ((C16710 + C16711) * C114 + (C16712 + C16713) * C48042) * C48245 *
                C48329) *
               C48087 -
           (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) * C48245 *
                C48329 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C48245 *
                C16471) *
               C48310) *
              C714 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C48245 *
                C16471 +
            ((C16516 + C16517) * C114 + (C16518 + C16519) * C48042) * C48245 *
                C48329) *
               C48310 -
           (((C17050 + C17051) * C48042 + (C17052 + C17053) * C114) * C48245 *
                C48329 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C48245 *
                C16471) *
               C48087) *
              C715 +
          ((((C17053 + C17052) * C114 + (C17051 + C17050) * C48042) * C48245 *
                C16471 +
            ((C16473 * C313 + C16469 * C332 + C16474 * C314 + C48360 * C333) *
                 C114 +
             (C16473 * C331 + C16469 * C343 + C16474 * C334 + C48360 * C344) *
                 C48042) *
                C48245 * C48329) *
               C48087 -
           (((C16520 + C16521) * C48042 + (C16522 + C16523) * C114) * C48245 *
                C48329 +
            ((C16519 + C16518) * C48042 + (C16517 + C16516) * C114) * C48245 *
                C16471) *
               C48310) *
              C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C16471 +
            ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
                C48329) *
               C1519 -
           (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) * C48245 *
                C48329 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C48245 * C16471) *
               C1520 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C16471 +
            ((C16706 + C16707) * C114 + (C16708 + C16709) * C48042) * C48245 *
                C48329) *
               C1521 -
           (((C17926 + C17927) * C48042 + (C17928 + C17929) * C114) * C48245 *
                C48329 +
            ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
              C16469 * C1271) *
                 C48042 +
             (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
              C16469 * C1262) *
                 C114) *
                C48245 * C16471) *
               C48352) *
              C48296 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C48245 *
                C16471 +
            ((C16710 + C16711) * C114 + (C16712 + C16713) * C48042) * C48245 *
                C48329) *
               C1520 -
           (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) * C48245 *
                C48329 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C48245 *
                C16471) *
               C1519 -
           (((C16714 + C16715) * C48042 + (C16716 + C16717) * C114) * C48245 *
                C48329 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C48245 *
                C16471) *
               C1521 +
           (((C17929 + C17928) * C114 + (C17927 + C17926) * C48042) * C48245 *
                C16471 +
            ((C16473 * C1251 + C16469 * C1258 + C16474 * C1256 +
              C48360 * C1267) *
                 C114 +
             (C16473 * C1257 + C16469 * C1269 + C16474 * C1268 +
              C48360 * C1274) *
                 C48042) *
                C48245 * C48329) *
               C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C831 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48311 -
             (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                 C832 -
             (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                 C48129) *
                C48245 * C16471 +
            ((C16508 + C16509) * C831 + (C16510 + C16511) * C48311 -
             (C16896 + C16897) * C832 - (C16898 + C16899) * C48129) *
                C48245 * C48329) *
               C48310 +
           (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
              C48360 * C1400) *
                 C832 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C48311 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C831) +
             (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
              C48360 * C1415) *
                 C48129) *
                C48245 * C16471 +
            ((C17406 + C17407) * C832 -
             ((C16702 + C16703) * C48311 + (C16704 + C16705) * C831) +
             (C17408 + C17409) * C48129) *
                C48245 * C48329) *
               C48087) *
              C302 +
          ((((C16897 + C16896) * C832 -
             ((C16511 + C16510) * C48311 + (C16509 + C16508) * C831) +
             (C16899 + C16898) * C48129) *
                C48245 * C16471 +
            ((C16904 + C16905) * C832 -
             ((C16512 + C16513) * C48311 + (C16514 + C16515) * C831) +
             (C16906 + C16907) * C48129) *
                C48245 * C48329) *
               C48310 +
           (((C16705 + C16704) * C831 + (C16703 + C16702) * C48311 -
             (C17407 + C17406) * C832 - (C17409 + C17408) * C48129) *
                C48245 * C16471 +
            ((C16710 + C16711) * C831 + (C16712 + C16713) * C48311 -
             (C17410 + C17411) * C832 - (C17412 + C17413) * C48129) *
                C48245 * C48329) *
               C48087) *
              C303 +
          ((((C16515 + C16514) * C831 + (C16513 + C16512) * C48311 -
             (C16905 + C16904) * C832 - (C16907 + C16906) * C48129) *
                C48245 * C16471 +
            ((C16516 + C16517) * C831 + (C16518 + C16519) * C48311 -
             (C17192 + C17193) * C832 - (C17194 + C17195) * C48129) *
                C48245 * C48329) *
               C48310 +
           (((C17411 + C17410) * C832 -
             ((C16713 + C16712) * C48311 + (C16711 + C16710) * C831) +
             (C17413 + C17412) * C48129) *
                C48245 * C16471 +
            ((C16473 * C1016 + C16469 * C1024 + C16474 * C1691 +
              C48360 * C1692) *
                 C832 -
             ((C17050 + C17051) * C48311 + (C17052 + C17053) * C831) +
             (C16473 * C1025 + C16469 * C1031 + C16474 * C1693 +
              C48360 * C1694) *
                 C48129) *
                C48245 * C48329) *
               C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C831 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48311 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C832 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C48129) *
               C48245 * C16471 +
           ((C16508 + C16509) * C831 + (C16510 + C16511) * C48311 -
            (C16896 + C16897) * C832 - (C16898 + C16899) * C48129) *
               C48245 * C48329) *
              C1519 +
          (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
             C48360 * C1400) *
                C832 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48311 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C831) +
            (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
             C48360 * C1415) *
                C48129) *
               C48245 * C16471 +
           ((C17406 + C17407) * C832 -
            ((C16702 + C16703) * C48311 + (C16704 + C16705) * C831) +
            (C17408 + C17409) * C48129) *
               C48245 * C48329) *
              C1520 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C831 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C48311 -
            (C16474 * C1813 + C48360 * C1816 + C16473 * C1388 +
             C16469 * C1400) *
                C832 -
            (C16474 * C1817 + C48360 * C1822 + C16473 * C1401 +
             C16469 * C1415) *
                C48129) *
               C48245 * C16471 +
           ((C16706 + C16707) * C831 + (C16708 + C16709) * C48311 -
            (C18132 + C18133) * C832 - (C18134 + C18135) * C48129) *
               C48245 * C48329) *
              C1521 +
          (((C16473 * C1813 + C16469 * C1816 + C16474 * C6867 +
             C48360 * C6869) *
                C832 -
            ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
              C16469 * C1271) *
                 C48311 +
             (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
              C16469 * C1262) *
                 C831) +
            (C16473 * C1817 + C16469 * C1822 + C16474 * C6870 +
             C48360 * C6873) *
                C48129) *
               C48245 * C16471 +
           ((C16473 * C1814 + C16469 * C1818 + C16474 * C6868 +
             C48360 * C6871) *
                C832 -
            ((C17926 + C17927) * C48311 + (C17928 + C17929) * C831) +
            (C16473 * C1819 + C16469 * C1823 + C16474 * C6872 +
             C48360 * C6874) *
                C48129) *
               C48245 * C48329) *
              C48352) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C16471 +
            ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
                C48329) *
               C48381 -
           (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) * C48245 *
                C48329 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C48245 * C16471) *
               C48369 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C16471 +
            ((C16706 + C16707) * C114 + (C16708 + C16709) * C48042) * C48245 *
                C48329) *
               C48342) *
              C302 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C48245 *
                C16471 +
            ((C16710 + C16711) * C114 + (C16712 + C16713) * C48042) * C48245 *
                C48329) *
               C48369 -
           (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) * C48245 *
                C48329 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C48245 *
                C16471) *
               C48381 -
           (((C16714 + C16715) * C48042 + (C16716 + C16717) * C114) * C48245 *
                C48329 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C48245 *
                C16471) *
               C48342) *
              C303 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C48245 *
                C16471 +
            ((C16516 + C16517) * C114 + (C16518 + C16519) * C48042) * C48245 *
                C48329) *
               C48381 -
           (((C16474 * C329 + C48360 * C342 + C16473 * C328 + C16469 * C341) *
                 C48042 +
             (C16474 * C312 + C48360 * C330 + C16473 * C311 + C16469 * C327) *
                 C114) *
                C48245 * C48329 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C48245 *
                C16471) *
               C48369 +
           (((C16717 + C16716) * C114 + (C16715 + C16714) * C48042) * C48245 *
                C16471 +
            ((C16473 * C312 + C16469 * C330 + C16474 * C1525 + C48360 * C1526) *
                 C114 +
             (C16473 * C329 + C16469 * C342 + C16474 * C1527 + C48360 * C1528) *
                 C48042) *
                C48245 * C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C114 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48042) *
               C48245 * C16471 +
           ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
               C48329) *
              C48025 * C108 -
          (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) * C48245 *
               C48329 +
           ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C48245 *
               C16471) *
              C48025 * C109 +
          (((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C48245 *
               C16471 +
           ((C16516 + C16517) * C114 + (C16518 + C16519) * C48042) * C48245 *
               C48329) *
              C48025 * C110 -
          (((C16520 + C16521) * C48042 + (C16522 + C16523) * C114) * C48245 *
               C48329 +
           ((C16519 + C16518) * C48042 + (C16517 + C16516) * C114) * C48245 *
               C16471) *
              C48025 * C111 +
          (((C16523 + C16522) * C114 + (C16521 + C16520) * C48042) * C48245 *
               C16471 +
           ((C16473 * C120 + C16469 * C133 + C16474 * C717 + C48360 * C718) *
                C114 +
            (C16473 * C132 + C16469 * C141 + C16474 * C719 + C48360 * C720) *
                C48042) *
               C48245 * C48329) *
              C48025 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C510 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48382 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C511 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C48371 +
            (C16473 * C514 + C16469 * C525 + C16474 * C1385 + C48360 * C1394) *
                C512 +
            (C16473 * C526 + C16469 * C544 + C16474 * C1395 + C48360 * C1412) *
                C48345) *
               C48245 * C16471 +
           ((C16508 + C16509) * C510 + (C16510 + C16511) * C48382 -
            (C16896 + C16897) * C511 - (C16898 + C16899) * C48371 +
            (C16900 + C16901) * C512 + (C16902 + C16903) * C48345) *
               C48245 * C48329) *
              C48025 * C302 +
          (((C16897 + C16896) * C511 -
            ((C16511 + C16510) * C48382 + (C16509 + C16508) * C510) +
            (C16899 + C16898) * C48371 - (C16901 + C16900) * C512 -
            (C16903 + C16902) * C48345) *
               C48245 * C16471 +
           ((C16904 + C16905) * C511 -
            ((C16512 + C16513) * C48382 + (C16514 + C16515) * C510) +
            (C16906 + C16907) * C48371 - (C16908 + C16909) * C512 -
            (C16910 + C16911) * C48345) *
               C48245 * C48329) *
              C48025 * C303 +
          (((C16515 + C16514) * C510 + (C16513 + C16512) * C48382 -
            (C16905 + C16904) * C511 - (C16907 + C16906) * C48371 +
            (C16909 + C16908) * C512 + (C16911 + C16910) * C48345) *
               C48245 * C16471 +
           ((C16516 + C16517) * C510 + (C16518 + C16519) * C48382 -
            (C16474 * C1016 + C48360 * C1024 + C16473 * C519 + C16469 * C535) *
                C511 -
            (C16474 * C1025 + C48360 * C1031 + C16473 * C536 + C16469 * C549) *
                C48371 +
            (C16473 * C520 + C16469 * C537 + C16474 * C2317 + C48360 * C2318) *
                C512 +
            (C16473 * C538 + C16469 * C550 + C16474 * C2319 + C48360 * C2320) *
                C48345) *
               C48245 * C48329) *
              C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C16471 +
            ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
                C48329) *
               C1177 -
           (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) * C48245 *
                C48329 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C48245 * C16471) *
               C1178 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C16471 +
            ((C16706 + C16707) * C114 + (C16708 + C16709) * C48042) * C48245 *
                C48329) *
               C48342) *
              C48378 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C48245 *
                C16471 +
            ((C16710 + C16711) * C114 + (C16712 + C16713) * C48042) * C48245 *
                C48329) *
               C1178 -
           (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) * C48245 *
                C48329 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C48245 *
                C16471) *
               C1177 -
           (((C16714 + C16715) * C48042 + (C16716 + C16717) * C114) * C48245 *
                C48329 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C48245 *
                C16471) *
               C48342) *
              C48365 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C48245 *
                C16471 +
            ((C16516 + C16517) * C114 + (C16518 + C16519) * C48042) * C48245 *
                C48329) *
               C1177 -
           (((C17050 + C17051) * C48042 + (C17052 + C17053) * C114) * C48245 *
                C48329 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C48245 *
                C16471) *
               C1178 +
           (((C16717 + C16716) * C114 + (C16715 + C16714) * C48042) * C48245 *
                C16471 +
            ((C16473 * C312 + C16469 * C330 + C16474 * C1525 + C48360 * C1526) *
                 C114 +
             (C16473 * C329 + C16469 * C342 + C16474 * C1527 + C48360 * C1528) *
                 C48042) *
                C48245 * C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C114 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48042) *
               C48245 * C16471 +
           ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
               C48329) *
              C1245 -
          (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) * C48245 *
               C48329 +
           ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                C48042 +
            (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                C114) *
               C48245 * C16471) *
              C1246 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C114 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C48042) *
               C48245 * C16471 +
           ((C16706 + C16707) * C114 + (C16708 + C16709) * C48042) * C48245 *
               C48329) *
              C1247 -
          (((C16474 * C1266 + C48360 * C1273 + C16473 * C1259 +
             C16469 * C1270) *
                C48042 +
            (C16474 * C1255 + C48360 * C1265 + C16473 * C1252 +
             C16469 * C1260) *
                C114) *
               C48245 * C48329 +
           ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
             C16469 * C1271) *
                C48042 +
            (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
             C16469 * C1262) *
                C114) *
               C48245 * C16471) *
              C1248 +
          (((C16473 * C1254 + C16469 * C1263 + C16474 * C6227 +
             C48360 * C6229) *
                C114 +
            (C16473 * C1264 + C16469 * C1272 + C16474 * C6230 +
             C48360 * C6233) *
                C48042) *
               C48245 * C16471 +
           ((C16473 * C1255 + C16469 * C1265 + C16474 * C6228 +
             C48360 * C6231) *
                C114 +
            (C16473 * C1266 + C16469 * C1273 + C16474 * C6232 +
             C48360 * C6234) *
                C48042) *
               C48245 * C48329) *
              C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C510 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48382 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C511 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C48371 +
            (C16473 * C514 + C16469 * C525 + C16474 * C1385 + C48360 * C1394) *
                C512 +
            (C16473 * C526 + C16469 * C544 + C16474 * C1395 + C48360 * C1412) *
                C48345) *
               C48245 * C16471 +
           ((C16508 + C16509) * C510 + (C16510 + C16511) * C48382 -
            (C16896 + C16897) * C511 - (C16898 + C16899) * C48371 +
            (C16900 + C16901) * C512 + (C16902 + C16903) * C48345) *
               C48245 * C48329) *
              C1177 +
          (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
             C48360 * C1400) *
                C511 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48382 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C510) +
            (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
             C48360 * C1415) *
                C48371 -
            (C16474 * C1389 + C48360 * C1402 + C16473 * C1385 +
             C16469 * C1394) *
                C512 -
            (C16474 * C1403 + C48360 * C1416 + C16473 * C1395 +
             C16469 * C1412) *
                C48345) *
               C48245 * C16471 +
           ((C17406 + C17407) * C511 -
            ((C16702 + C16703) * C48382 + (C16704 + C16705) * C510) +
            (C17408 + C17409) * C48371 -
            (C16474 * C1391 + C48360 * C1406 + C16473 * C1386 +
             C16469 * C1396) *
                C512 -
            (C16474 * C1407 + C48360 * C1418 + C16473 * C1397 +
             C16469 * C1413) *
                C48345) *
               C48245 * C48329) *
              C1178 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C510 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C48382 -
            (C16474 * C1813 + C48360 * C1816 + C16473 * C1388 +
             C16469 * C1400) *
                C511 -
            (C16474 * C1817 + C48360 * C1822 + C16473 * C1401 +
             C16469 * C1415) *
                C48371 +
            (C16473 * C1389 + C16469 * C1402 + C16474 * C6381 +
             C48360 * C6383) *
                C512 +
            (C16473 * C1403 + C16469 * C1416 + C16474 * C6384 +
             C48360 * C6387) *
                C48345) *
               C48245 * C16471 +
           ((C16706 + C16707) * C510 + (C16708 + C16709) * C48382 -
            (C16474 * C1814 + C48360 * C1818 + C16473 * C1390 +
             C16469 * C1404) *
                C511 -
            (C16474 * C1819 + C48360 * C1823 + C16473 * C1405 +
             C16469 * C1417) *
                C48371 +
            (C16473 * C1391 + C16469 * C1406 + C16474 * C6382 +
             C48360 * C6385) *
                C512 +
            (C16473 * C1407 + C16469 * C1418 + C16474 * C6386 +
             C48360 * C6388) *
                C48345) *
               C48245 * C48329) *
              C48342) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C831 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48311 -
            (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                C832 -
            (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                C48129) *
               C48245 * C16471 +
           ((C16508 + C16509) * C831 + (C16510 + C16511) * C48311 -
            (C16896 + C16897) * C832 - (C16898 + C16899) * C48129) *
               C48245 * C48329) *
              C48025 * C713 +
          (((C16897 + C16896) * C832 -
            ((C16511 + C16510) * C48311 + (C16509 + C16508) * C831) +
            (C16899 + C16898) * C48129) *
               C48245 * C16471 +
           ((C16904 + C16905) * C832 -
            ((C16512 + C16513) * C48311 + (C16514 + C16515) * C831) +
            (C16906 + C16907) * C48129) *
               C48245 * C48329) *
              C48025 * C714 +
          (((C16515 + C16514) * C831 + (C16513 + C16512) * C48311 -
            (C16905 + C16904) * C832 - (C16907 + C16906) * C48129) *
               C48245 * C16471 +
           ((C16516 + C16517) * C831 + (C16518 + C16519) * C48311 -
            (C17192 + C17193) * C832 - (C17194 + C17195) * C48129) *
               C48245 * C48329) *
              C48025 * C715 +
          (((C17193 + C17192) * C832 -
            ((C16519 + C16518) * C48311 + (C16517 + C16516) * C831) +
            (C17195 + C17194) * C48129) *
               C48245 * C16471 +
           ((C16473 * C521 + C16469 * C539 + C16474 * C1017 + C48360 * C1026) *
                C832 -
            ((C16520 + C16521) * C48311 + (C16522 + C16523) * C831) +
            (C16473 * C540 + C16469 * C551 + C16474 * C1027 + C48360 * C1032) *
                C48129) *
               C48245 * C48329) *
              C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C831 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48311 -
             (C16474 * C1013 + C48360 * C1018 + C16473 * C513 + C16469 * C523) *
                 C832 -
             (C16474 * C1019 + C48360 * C1028 + C16473 * C524 + C16469 * C543) *
                 C48129) *
                C48245 * C16471 +
            ((C16508 + C16509) * C831 + (C16510 + C16511) * C48311 -
             (C16896 + C16897) * C832 - (C16898 + C16899) * C48129) *
                C48245 * C48329) *
               C1177 +
           (((C16473 * C1013 + C16469 * C1018 + C16474 * C1388 +
              C48360 * C1400) *
                 C832 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C48311 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C831) +
             (C16473 * C1019 + C16469 * C1028 + C16474 * C1401 +
              C48360 * C1415) *
                 C48129) *
                C48245 * C16471 +
            ((C17406 + C17407) * C832 -
             ((C16702 + C16703) * C48311 + (C16704 + C16705) * C831) +
             (C17408 + C17409) * C48129) *
                C48245 * C48329) *
               C1178 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C831 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48311 -
             (C16474 * C1813 + C48360 * C1816 + C16473 * C1388 +
              C16469 * C1400) *
                 C832 -
             (C16474 * C1817 + C48360 * C1822 + C16473 * C1401 +
              C16469 * C1415) *
                 C48129) *
                C48245 * C16471 +
            ((C16706 + C16707) * C831 + (C16708 + C16709) * C48311 -
             (C18132 + C18133) * C832 - (C18134 + C18135) * C48129) *
                C48245 * C48329) *
               C48342) *
              C48296 +
          ((((C16897 + C16896) * C832 -
             ((C16511 + C16510) * C48311 + (C16509 + C16508) * C831) +
             (C16899 + C16898) * C48129) *
                C48245 * C16471 +
            ((C16904 + C16905) * C832 -
             ((C16512 + C16513) * C48311 + (C16514 + C16515) * C831) +
             (C16906 + C16907) * C48129) *
                C48245 * C48329) *
               C1177 +
           (((C16705 + C16704) * C831 + (C16703 + C16702) * C48311 -
             (C17407 + C17406) * C832 - (C17409 + C17408) * C48129) *
                C48245 * C16471 +
            ((C16710 + C16711) * C831 + (C16712 + C16713) * C48311 -
             (C17410 + C17411) * C832 - (C17412 + C17413) * C48129) *
                C48245 * C48329) *
               C1178 +
           (((C18133 + C18132) * C832 -
             ((C16709 + C16708) * C48311 + (C16707 + C16706) * C831) +
             (C18135 + C18134) * C48129) *
                C48245 * C16471 +
            ((C16473 * C1392 + C16469 * C1408 + C16474 * C1815 +
              C48360 * C1820) *
                 C832 -
             ((C16714 + C16715) * C48311 + (C16716 + C16717) * C831) +
             (C16473 * C1409 + C16469 * C1419 + C16474 * C1821 +
              C48360 * C1824) *
                 C48129) *
                C48245 * C48329) *
               C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C114 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48042) *
               C48245 * C16471 +
           ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
               C48329) *
              C48025 * C108 -
          (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) * C48245 *
               C48329 +
           ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C48245 *
               C16471) *
              C48025 * C109 +
          (((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C48245 *
               C16471 +
           ((C16516 + C16517) * C114 + (C16518 + C16519) * C48042) * C48245 *
               C48329) *
              C48025 * C110 -
          (((C16520 + C16521) * C48042 + (C16522 + C16523) * C114) * C48245 *
               C48329 +
           ((C16519 + C16518) * C48042 + (C16517 + C16516) * C114) * C48245 *
               C16471) *
              C48025 * C111 +
          (((C16523 + C16522) * C114 + (C16521 + C16520) * C48042) * C48245 *
               C16471 +
           ((C16473 * C120 + C16469 * C133 + C16474 * C717 + C48360 * C718) *
                C114 +
            (C16473 * C132 + C16469 * C141 + C16474 * C719 + C48360 * C720) *
                C48042) *
               C48245 * C48329) *
              C48025 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C16471 +
            ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
                C48329) *
               C48381 -
           (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) * C48245 *
                C48329 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C48245 * C16471) *
               C48369 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C16471 +
            ((C16706 + C16707) * C114 + (C16708 + C16709) * C48042) * C48245 *
                C48329) *
               C48342) *
              C302 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C48245 *
                C16471 +
            ((C16710 + C16711) * C114 + (C16712 + C16713) * C48042) * C48245 *
                C48329) *
               C48369 -
           (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) * C48245 *
                C48329 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C48245 *
                C16471) *
               C48381 -
           (((C16714 + C16715) * C48042 + (C16716 + C16717) * C114) * C48245 *
                C48329 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C48245 *
                C16471) *
               C48342) *
              C303 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C48245 *
                C16471 +
            ((C16516 + C16517) * C114 + (C16518 + C16519) * C48042) * C48245 *
                C48329) *
               C48381 -
           (((C16474 * C329 + C48360 * C342 + C16473 * C328 + C16469 * C341) *
                 C48042 +
             (C16474 * C312 + C48360 * C330 + C16473 * C311 + C16469 * C327) *
                 C114) *
                C48245 * C48329 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C48245 *
                C16471) *
               C48369 +
           (((C16717 + C16716) * C114 + (C16715 + C16714) * C48042) * C48245 *
                C16471 +
            ((C16473 * C312 + C16469 * C330 + C16474 * C1525 + C48360 * C1526) *
                 C114 +
             (C16473 * C329 + C16469 * C342 + C16474 * C1527 + C48360 * C1528) *
                 C48042) *
                C48245 * C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C48245 * C16471 +
            ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
                C48329) *
               C1177 -
           (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) * C48245 *
                C48329 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C48245 * C16471) *
               C1178 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C48245 * C16471 +
            ((C16706 + C16707) * C114 + (C16708 + C16709) * C48042) * C48245 *
                C48329) *
               C48342) *
              C48378 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C48245 *
                C16471 +
            ((C16710 + C16711) * C114 + (C16712 + C16713) * C48042) * C48245 *
                C48329) *
               C1178 -
           (((C16512 + C16513) * C48042 + (C16514 + C16515) * C114) * C48245 *
                C48329 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C48245 *
                C16471) *
               C1177 -
           (((C16714 + C16715) * C48042 + (C16716 + C16717) * C114) * C48245 *
                C48329 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C48245 *
                C16471) *
               C48342) *
              C48365 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C48245 *
                C16471 +
            ((C16516 + C16517) * C114 + (C16518 + C16519) * C48042) * C48245 *
                C48329) *
               C1177 -
           (((C17050 + C17051) * C48042 + (C17052 + C17053) * C114) * C48245 *
                C48329 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C48245 *
                C16471) *
               C1178 +
           (((C16717 + C16716) * C114 + (C16715 + C16714) * C48042) * C48245 *
                C16471 +
            ((C16473 * C312 + C16469 * C330 + C16474 * C1525 + C48360 * C1526) *
                 C114 +
             (C16473 * C329 + C16469 * C342 + C16474 * C1527 + C48360 * C1528) *
                 C48042) *
                C48245 * C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C114 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48042) *
               C48245 * C16471 +
           ((C16508 + C16509) * C114 + (C16510 + C16511) * C48042) * C48245 *
               C48329) *
              C1245 -
          (((C16702 + C16703) * C48042 + (C16704 + C16705) * C114) * C48245 *
               C48329 +
           ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                C48042 +
            (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                C114) *
               C48245 * C16471) *
              C1246 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C114 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C48042) *
               C48245 * C16471 +
           ((C16706 + C16707) * C114 + (C16708 + C16709) * C48042) * C48245 *
               C48329) *
              C1247 -
          (((C16474 * C1266 + C48360 * C1273 + C16473 * C1259 +
             C16469 * C1270) *
                C48042 +
            (C16474 * C1255 + C48360 * C1265 + C16473 * C1252 +
             C16469 * C1260) *
                C114) *
               C48245 * C48329 +
           ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
             C16469 * C1271) *
                C48042 +
            (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
             C16469 * C1262) *
                C114) *
               C48245 * C16471) *
              C1248 +
          (((C16473 * C1254 + C16469 * C1263 + C16474 * C6227 +
             C48360 * C6229) *
                C114 +
            (C16473 * C1264 + C16469 * C1272 + C16474 * C6230 +
             C48360 * C6233) *
                C48042) *
               C48245 * C16471 +
           ((C16473 * C1255 + C16469 * C1265 + C16474 * C6228 +
             C48360 * C6231) *
                C114 +
            (C16473 * C1266 + C16469 * C1273 + C16474 * C6232 +
             C48360 * C6234) *
                C48042) *
               C48245 * C48329) *
              C1249) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C114 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48042) *
                        C48245 * C47981 * C48083 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48042 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C114) *
                        C48245 * C47981 * C48090 +
                    ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                      C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                         C114 +
                     (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                      C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                         C48042) *
                        C48245 * C47981 * C3071) *
                       C48003 +
                   (((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C114 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48042) *
                        C48245 * C47981 * C48090 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48042 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C114) *
                        C48245 * C47981 * C48083 -
                    ((C22149 * C1266 + C22145 * C1273 + C22148 * C1259 +
                      C22144 * C1270 + C22147 * C324 + C22143 * C339) *
                         C48042 +
                     (C22149 * C1255 + C22145 * C1265 + C22148 * C1252 +
                      C22144 * C1260 + C22147 * C309 + C22143 * C323) *
                         C114) *
                        C48245 * C47981 * C3071) *
                       C48011 +
                   (((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                      C22144 * C316 + C22149 * C310 + C22145 * C325) *
                         C114 +
                     (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                      C22144 * C335 + C22149 * C326 + C22145 * C340) *
                         C48042) *
                        C48245 * C47981 * C48083 -
                    ((C22149 * C1257 + C22145 * C1269 + C22148 * C326 +
                      C22144 * C340 + C22147 * C315 + C22143 * C335) *
                         C48042 +
                     (C22149 * C1251 + C22145 * C1258 + C22148 * C310 +
                      C22144 * C325 + C22147 * C305 + C22143 * C316) *
                         C114) *
                        C48245 * C47981 * C48090 +
                    ((C22147 * C310 + C22143 * C325 + C22148 * C1251 +
                      C22144 * C1258 + C22149 * C1256 + C22145 * C1267) *
                         C114 +
                     (C22147 * C326 + C22143 * C340 + C22148 * C1257 +
                      C22144 * C1269 + C22149 * C1268 + C22145 * C1274) *
                         C48042) *
                        C48245 * C47981 * C3071) *
                       C3074)) /
                 (p * q * std::sqrt(p + q));
    d2ee[101] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C831 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48311 -
                     (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                      C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                         C832 -
                     (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                      C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                         C48129) *
                        C48245 * C47981 * C48083 +
                    ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                      C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                         C832 -
                     ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                       C22144 * C338 + C22147 * C319 + C22143 * C337) *
                          C48311 +
                      (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                       C22144 * C321 + C22147 * C307 + C22143 * C320) *
                          C831) +
                     (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                      C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                         C48129) *
                        C48245 * C47981 * C48090 +
                    ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                      C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                         C831 +
                     (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                      C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                         C48311 -
                     (C22149 * C6867 + C22145 * C6869 + C22148 * C1813 +
                      C22144 * C1816 + C22147 * C1388 + C22143 * C1400) *
                         C832 -
                     (C22149 * C6870 + C22145 * C6873 + C22148 * C1817 +
                      C22144 * C1822 + C22147 * C1401 + C22143 * C1415) *
                         C48129) *
                        C48245 * C47981 * C3071) *
                       C2799 +
                   (((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                      C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                         C832 -
                     ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                       C22144 * C336 + C22147 * C125 + C22143 * C137) *
                          C48311 +
                      (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                       C22144 * C318 + C22147 * C116 + C22143 * C124) *
                          C831) +
                     (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                      C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                         C48129) *
                        C48245 * C47981 * C48083 +
                    ((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C831 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48311 -
                     (C22149 * C1814 + C22145 * C1818 + C22148 * C1390 +
                      C22144 * C1404 + C22147 * C1014 + C22143 * C1020) *
                         C832 -
                     (C22149 * C1819 + C22145 * C1823 + C22148 * C1405 +
                      C22144 * C1417 + C22147 * C1021 + C22143 * C1029) *
                         C48129) *
                        C48245 * C47981 * C48090 +
                    ((C22147 * C1390 + C22143 * C1404 + C22148 * C1814 +
                      C22144 * C1818 + C22149 * C6868 + C22145 * C6871) *
                         C832 -
                     ((C22149 * C1266 + C22145 * C1273 + C22148 * C1259 +
                       C22144 * C1270 + C22147 * C324 + C22143 * C339) *
                          C48311 +
                      (C22149 * C1255 + C22145 * C1265 + C22148 * C1252 +
                       C22144 * C1260 + C22147 * C309 + C22143 * C323) *
                          C831) +
                     (C22147 * C1405 + C22143 * C1417 + C22148 * C1819 +
                      C22144 * C1823 + C22149 * C6872 + C22145 * C6874) *
                         C48129) *
                        C48245 * C47981 * C3071) *
                       C48008)) /
                 (p * q * std::sqrt(p + q));
    d2ee[102] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C114 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48042) *
                        C48245 * C47981 * C48388 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48042 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C114) *
                        C48245 * C47981 * C48384 +
                    ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                      C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                         C114 +
                     (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                      C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                         C48042) *
                        C48245 * C47981 * C48374 -
                    ((C22149 * C6230 + C22145 * C6233 + C22148 * C1264 +
                      C22144 * C1272 + C22147 * C1261 + C22143 * C1271) *
                         C48042 +
                     (C22149 * C6227 + C22145 * C6229 + C22148 * C1254 +
                      C22144 * C1263 + C22147 * C1253 + C22143 * C1262) *
                         C114) *
                        C48245 * C47981 * C48352) *
                       C2799 +
                   (((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C114 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48042) *
                        C48245 * C47981 * C48384 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48042 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C114) *
                        C48245 * C47981 * C48388 -
                    ((C22149 * C1266 + C22145 * C1273 + C22148 * C1259 +
                      C22144 * C1270 + C22147 * C324 + C22143 * C339) *
                         C48042 +
                     (C22149 * C1255 + C22145 * C1265 + C22148 * C1252 +
                      C22144 * C1260 + C22147 * C309 + C22143 * C323) *
                         C114) *
                        C48245 * C47981 * C48374 +
                    ((C22147 * C1252 + C22143 * C1260 + C22148 * C1255 +
                      C22144 * C1265 + C22149 * C6228 + C22145 * C6231) *
                         C114 +
                     (C22147 * C1259 + C22143 * C1270 + C22148 * C1266 +
                      C22144 * C1273 + C22149 * C6232 + C22145 * C6234) *
                         C48042) *
                        C48245 * C47981 * C48352) *
                       C48008)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C114 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48042) *
                        C48245 * C47981 * C2691 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48042 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C114) *
                        C48245 * C47981 * C48087) *
                       C48387 +
                   (((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C114 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48042) *
                        C48245 * C47981 * C48087 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48042 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C114) *
                        C48245 * C47981 * C2691) *
                       C48380 +
                   (((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                      C22144 * C316 + C22149 * C310 + C22145 * C325) *
                         C114 +
                     (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                      C22144 * C335 + C22149 * C326 + C22145 * C340) *
                         C48042) *
                        C48245 * C47981 * C2691 -
                    ((C22149 * C1257 + C22145 * C1269 + C22148 * C326 +
                      C22144 * C340 + C22147 * C315 + C22143 * C335) *
                         C48042 +
                     (C22149 * C1251 + C22145 * C1258 + C22148 * C310 +
                      C22144 * C325 + C22147 * C305 + C22143 * C316) *
                         C114) *
                        C48245 * C47981 * C48087) *
                       C48367 +
                   (((C22147 * C311 + C22143 * C327 + C22148 * C312 +
                      C22144 * C330 + C22149 * C1525 + C22145 * C1526) *
                         C114 +
                     (C22147 * C328 + C22143 * C341 + C22148 * C329 +
                      C22144 * C342 + C22149 * C1527 + C22145 * C1528) *
                         C48042) *
                        C48245 * C47981 * C48087 -
                    ((C22149 * C329 + C22145 * C342 + C22148 * C328 +
                      C22144 * C341 + C22147 * C128 + C22143 * C139) *
                         C48042 +
                     (C22149 * C312 + C22145 * C330 + C22148 * C311 +
                      C22144 * C327 + C22147 * C118 + C22143 * C129) *
                         C114) *
                        C48245 * C47981 * C2691) *
                       C48346)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C510 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48382 -
                     (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                      C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                         C511 -
                     (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                      C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                         C48371 +
                     (C22147 * C514 + C22143 * C525 + C22148 * C1385 +
                      C22144 * C1394 + C22149 * C1389 + C22145 * C1402) *
                         C512 +
                     (C22147 * C526 + C22143 * C544 + C22148 * C1395 +
                      C22144 * C1412 + C22149 * C1403 + C22145 * C1416) *
                         C48345) *
                        C48245 * C47981 * C2691 +
                    ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                      C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                         C511 -
                     ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                       C22144 * C338 + C22147 * C319 + C22143 * C337) *
                          C48382 +
                      (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                       C22144 * C321 + C22147 * C307 + C22143 * C320) *
                          C510) +
                     (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                      C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                         C48371 -
                     (C22149 * C6381 + C22145 * C6383 + C22148 * C1389 +
                      C22144 * C1402 + C22147 * C1385 + C22143 * C1394) *
                         C512 -
                     (C22149 * C6384 + C22145 * C6387 + C22148 * C1403 +
                      C22144 * C1416 + C22147 * C1395 + C22143 * C1412) *
                         C48345) *
                        C48245 * C47981 * C48087) *
                       C2799 +
                   (((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                      C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                         C511 -
                     ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                       C22144 * C336 + C22147 * C125 + C22143 * C137) *
                          C48382 +
                      (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                       C22144 * C318 + C22147 * C116 + C22143 * C124) *
                          C510) +
                     (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                      C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                         C48371 -
                     (C22149 * C1391 + C22145 * C1406 + C22148 * C1386 +
                      C22144 * C1396 + C22147 * C516 + C22143 * C529) *
                         C512 -
                     (C22149 * C1407 + C22145 * C1418 + C22148 * C1397 +
                      C22144 * C1413 + C22147 * C530 + C22143 * C546) *
                         C48345) *
                        C48245 * C47981 * C2691 +
                    ((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C510 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48382 -
                     (C22149 * C1814 + C22145 * C1818 + C22148 * C1390 +
                      C22144 * C1404 + C22147 * C1014 + C22143 * C1020) *
                         C511 -
                     (C22149 * C1819 + C22145 * C1823 + C22148 * C1405 +
                      C22144 * C1417 + C22147 * C1021 + C22143 * C1029) *
                         C48371 +
                     (C22147 * C1386 + C22143 * C1396 + C22148 * C1391 +
                      C22144 * C1406 + C22149 * C6382 + C22145 * C6385) *
                         C512 +
                     (C22147 * C1397 + C22143 * C1413 + C22148 * C1407 +
                      C22144 * C1418 + C22149 * C6386 + C22145 * C6388) *
                         C48345) *
                        C48245 * C47981 * C48087) *
                       C48008)) /
                     (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C831 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48311 -
                     (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                      C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                         C832 -
                     (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                      C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                         C48129) *
                        C48245 * C47981 * C2691 +
                    ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                      C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                         C832 -
                     ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                       C22144 * C338 + C22147 * C319 + C22143 * C337) *
                          C48311 +
                      (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                       C22144 * C321 + C22147 * C307 + C22143 * C320) *
                          C831) +
                     (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                      C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                         C48129) *
                        C48245 * C47981 * C48087) *
                       C48003 +
                   (((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                      C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                         C832 -
                     ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                       C22144 * C336 + C22147 * C125 + C22143 * C137) *
                          C48311 +
                      (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                       C22144 * C318 + C22147 * C116 + C22143 * C124) *
                          C831) +
                     (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                      C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                         C48129) *
                        C48245 * C47981 * C2691 +
                    ((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C831 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48311 -
                     (C22149 * C1814 + C22145 * C1818 + C22148 * C1390 +
                      C22144 * C1404 + C22147 * C1014 + C22143 * C1020) *
                         C832 -
                     (C22149 * C1819 + C22145 * C1823 + C22148 * C1405 +
                      C22144 * C1417 + C22147 * C1021 + C22143 * C1029) *
                         C48129) *
                        C48245 * C47981 * C48087) *
                       C48011 +
                   (((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                      C22144 * C316 + C22149 * C310 + C22145 * C325) *
                         C831 +
                     (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                      C22144 * C335 + C22149 * C326 + C22145 * C340) *
                         C48311 -
                     (C22149 * C1392 + C22145 * C1408 + C22148 * C1015 +
                      C22144 * C1022 + C22147 * C517 + C22143 * C531) *
                         C832 -
                     (C22149 * C1409 + C22145 * C1419 + C22148 * C1023 +
                      C22144 * C1030 + C22147 * C532 + C22143 * C547) *
                         C48129) *
                        C48245 * C47981 * C2691 +
                    ((C22147 * C1015 + C22143 * C1022 + C22148 * C1392 +
                      C22144 * C1408 + C22149 * C1815 + C22145 * C1820) *
                         C832 -
                     ((C22149 * C1257 + C22145 * C1269 + C22148 * C326 +
                       C22144 * C340 + C22147 * C315 + C22143 * C335) *
                          C48311 +
                      (C22149 * C1251 + C22145 * C1258 + C22148 * C310 +
                       C22144 * C325 + C22147 * C305 + C22143 * C316) *
                          C831) +
                     (C22147 * C1023 + C22143 * C1030 + C22148 * C1409 +
                      C22144 * C1419 + C22149 * C1821 + C22145 * C1824) *
                         C48129) *
                        C48245 * C47981 * C48087) *
                       C3074)) /
                 (p * q * std::sqrt(p + q));
    d2ee[104] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C114 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48042) *
                        C48245 * C47981 * C2691 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48042 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C114) *
                        C48245 * C47981 * C48087) *
                       C48387 +
                   (((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C114 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48042) *
                        C48245 * C47981 * C48087 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48042 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C114) *
                        C48245 * C47981 * C2691) *
                       C48380 +
                   (((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                      C22144 * C316 + C22149 * C310 + C22145 * C325) *
                         C114 +
                     (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                      C22144 * C335 + C22149 * C326 + C22145 * C340) *
                         C48042) *
                        C48245 * C47981 * C2691 -
                    ((C22149 * C1257 + C22145 * C1269 + C22148 * C326 +
                      C22144 * C340 + C22147 * C315 + C22143 * C335) *
                         C48042 +
                     (C22149 * C1251 + C22145 * C1258 + C22148 * C310 +
                      C22144 * C325 + C22147 * C305 + C22143 * C316) *
                         C114) *
                        C48245 * C47981 * C48087) *
                       C48367 +
                   (((C22147 * C311 + C22143 * C327 + C22148 * C312 +
                      C22144 * C330 + C22149 * C1525 + C22145 * C1526) *
                         C114 +
                     (C22147 * C328 + C22143 * C341 + C22148 * C329 +
                      C22144 * C342 + C22149 * C1527 + C22145 * C1528) *
                         C48042) *
                        C48245 * C47981 * C48087 -
                    ((C22149 * C329 + C22145 * C342 + C22148 * C328 +
                      C22144 * C341 + C22147 * C128 + C22143 * C139) *
                         C48042 +
                     (C22149 * C312 + C22145 * C330 + C22148 * C311 +
                      C22144 * C327 + C22147 * C118 + C22143 * C129) *
                         C114) *
                        C48245 * C47981 * C2691) *
                       C48346)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C114 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48042) *
                        C48245 * C47981 * C48388 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48042 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C114) *
                        C48245 * C47981 * C48384 +
                    ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                      C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                         C114 +
                     (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                      C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                         C48042) *
                        C48245 * C47981 * C48374 -
                    ((C22149 * C6230 + C22145 * C6233 + C22148 * C1264 +
                      C22144 * C1272 + C22147 * C1261 + C22143 * C1271) *
                         C48042 +
                     (C22149 * C6227 + C22145 * C6229 + C22148 * C1254 +
                      C22144 * C1263 + C22147 * C1253 + C22143 * C1262) *
                         C114) *
                        C48245 * C47981 * C48352) *
                       C2799 +
                   (((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C114 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48042) *
                        C48245 * C47981 * C48384 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48042 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C114) *
                        C48245 * C47981 * C48388 -
                    ((C22149 * C1266 + C22145 * C1273 + C22148 * C1259 +
                      C22144 * C1270 + C22147 * C324 + C22143 * C339) *
                         C48042 +
                     (C22149 * C1255 + C22145 * C1265 + C22148 * C1252 +
                      C22144 * C1260 + C22147 * C309 + C22143 * C323) *
                         C114) *
                        C48245 * C47981 * C48374 +
                    ((C22147 * C1252 + C22143 * C1260 + C22148 * C1255 +
                      C22144 * C1265 + C22149 * C6228 + C22145 * C6231) *
                         C114 +
                     (C22147 * C1259 + C22143 * C1270 + C22148 * C1266 +
                      C22144 * C1273 + C22149 * C6232 + C22145 * C6234) *
                         C48042) *
                        C48245 * C47981 * C48352) *
                       C48008)) /
                     (p * q * std::sqrt(p + q));
    d2ee[105] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C3467 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C3465 -
                     (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                      C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                         C3468 -
                     (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                      C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                         C48129) *
                        C48245 * C47981 * C48083 +
                    ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                      C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                         C3468 -
                     ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                       C22144 * C338 + C22147 * C319 + C22143 * C337) *
                          C3465 +
                      (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                       C22144 * C321 + C22147 * C307 + C22143 * C320) *
                          C3467) +
                     (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                      C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                         C48129) *
                        C48245 * C47981 * C48090 +
                    ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                      C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                         C3467 +
                     (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                      C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                         C3465 -
                     (C22149 * C6867 + C22145 * C6869 + C22148 * C1813 +
                      C22144 * C1816 + C22147 * C1388 + C22143 * C1400) *
                         C3468 -
                     (C22149 * C6870 + C22145 * C6873 + C22148 * C1817 +
                      C22144 * C1822 + C22147 * C1401 + C22143 * C1415) *
                         C48129) *
                        C48245 * C47981 * C3071) *
                       C48296 +
                   (((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                      C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                         C3468 -
                     ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                       C22144 * C336 + C22147 * C125 + C22143 * C137) *
                          C3465 +
                      (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                       C22144 * C318 + C22147 * C116 + C22143 * C124) *
                          C3467) +
                     (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                      C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                         C48129) *
                        C48245 * C47981 * C48083 +
                    ((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C3467 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C3465 -
                     (C22149 * C1814 + C22145 * C1818 + C22148 * C1390 +
                      C22144 * C1404 + C22147 * C1014 + C22143 * C1020) *
                         C3468 -
                     (C22149 * C1819 + C22145 * C1823 + C22148 * C1405 +
                      C22144 * C1417 + C22147 * C1021 + C22143 * C1029) *
                         C48129) *
                        C48245 * C47981 * C48090 +
                    ((C22147 * C1390 + C22143 * C1404 + C22148 * C1814 +
                      C22144 * C1818 + C22149 * C6868 + C22145 * C6871) *
                         C3468 -
                     ((C22149 * C1266 + C22145 * C1273 + C22148 * C1259 +
                       C22144 * C1270 + C22147 * C324 + C22143 * C339) *
                          C3465 +
                      (C22149 * C1255 + C22145 * C1265 + C22148 * C1252 +
                       C22144 * C1260 + C22147 * C309 + C22143 * C323) *
                          C3467) +
                     (C22147 * C1405 + C22143 * C1417 + C22148 * C1819 +
                      C22144 * C1823 + C22149 * C6872 + C22145 * C6874) *
                         C48129) *
                        C48245 * C47981 * C3071) *
                       C48008)) /
                 (p * q * std::sqrt(p + q));
    d2ee[106] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C47030 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C48125 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C47022 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C48132 +
                    (C22147 * C514 + C22143 * C525 + C22148 * C1385 +
                     C22144 * C1394 + C22149 * C1389 + C22145 * C1402) *
                        C47036 +
                    (C22147 * C526 + C22143 * C544 + C22148 * C1395 +
                     C22144 * C1412 + C22149 * C1403 + C22145 * C1416) *
                        C4043) *
                       C48245 * C47981 * C48083 +
                   ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                     C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                        C47022 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48125 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C47030) +
                    (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                     C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                        C48132 -
                    (C22149 * C6381 + C22145 * C6383 + C22148 * C1389 +
                     C22144 * C1402 + C22147 * C1385 + C22143 * C1394) *
                        C47036 -
                    (C22149 * C6384 + C22145 * C6387 + C22148 * C1403 +
                     C22144 * C1416 + C22147 * C1395 + C22143 * C1412) *
                        C4043) *
                       C48245 * C47981 * C48090 +
                   ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                     C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                        C47030 +
                    (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                     C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                        C48125 -
                    (C22149 * C6867 + C22145 * C6869 + C22148 * C1813 +
                     C22144 * C1816 + C22147 * C1388 + C22143 * C1400) *
                        C47022 -
                    (C22149 * C6870 + C22145 * C6873 + C22148 * C1817 +
                     C22144 * C1822 + C22147 * C1401 + C22143 * C1415) *
                        C48132 +
                    (C22147 * C1389 + C22143 * C1402 + C22148 * C6381 +
                     C22144 * C6383 + C22149 * C22998 + C22145 * C22999) *
                        C47036 +
                    (C22147 * C1403 + C22143 * C1416 + C22148 * C6384 +
                     C22144 * C6387 + C22149 * C23000 + C22145 * C23001) *
                        C4043) *
                       C48245 * C47981 * C3071) *
                  C47998) /
                 (p * q * std::sqrt(p + q));
    d2ee[107] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C3467 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C3465 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C3468 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C48129) *
                       C48245 * C47981 * C48388 +
                   ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                     C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                        C3468 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C3465 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C3467) +
                    (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                     C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                        C48129) *
                       C48245 * C47981 * C48384 +
                   ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                     C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                        C3467 +
                    (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                     C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                        C3465 -
                    (C22149 * C6867 + C22145 * C6869 + C22148 * C1813 +
                     C22144 * C1816 + C22147 * C1388 + C22143 * C1400) *
                        C3468 -
                    (C22149 * C6870 + C22145 * C6873 + C22148 * C1817 +
                     C22144 * C1822 + C22147 * C1401 + C22143 * C1415) *
                        C48129) *
                       C48245 * C47981 * C48374 +
                   ((C22147 * C1813 + C22143 * C1816 + C22148 * C6867 +
                     C22144 * C6869 + C22149 * C23344 + C22145 * C23345) *
                        C3468 -
                    ((C22149 * C6230 + C22145 * C6233 + C22148 * C1264 +
                      C22144 * C1272 + C22147 * C1261 + C22143 * C1271) *
                         C3465 +
                     (C22149 * C6227 + C22145 * C6229 + C22148 * C1254 +
                      C22144 * C1263 + C22147 * C1253 + C22143 * C1262) *
                         C3467) +
                    (C22147 * C1817 + C22143 * C1822 + C22148 * C6870 +
                     C22144 * C6873 + C22149 * C23346 + C22145 * C23347) *
                        C48129) *
                       C48245 * C47981 * C48352) *
                  C47998) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C3467 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C3465 -
                     (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                      C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                         C3468 -
                     (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                      C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                         C48129) *
                        C48245 * C47981 * C2691 +
                    ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                      C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                         C3468 -
                     ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                       C22144 * C338 + C22147 * C319 + C22143 * C337) *
                          C3465 +
                      (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                       C22144 * C321 + C22147 * C307 + C22143 * C320) *
                          C3467) +
                     (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                      C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                         C48129) *
                        C48245 * C47981 * C48087) *
                       C48378 +
                   (((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                      C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                         C3468 -
                     ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                       C22144 * C336 + C22147 * C125 + C22143 * C137) *
                          C3465 +
                      (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                       C22144 * C318 + C22147 * C116 + C22143 * C124) *
                          C3467) +
                     (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                      C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                         C48129) *
                        C48245 * C47981 * C2691 +
                    ((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C3467 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C3465 -
                     (C22149 * C1814 + C22145 * C1818 + C22148 * C1390 +
                      C22144 * C1404 + C22147 * C1014 + C22143 * C1020) *
                         C3468 -
                     (C22149 * C1819 + C22145 * C1823 + C22148 * C1405 +
                      C22144 * C1417 + C22147 * C1021 + C22143 * C1029) *
                         C48129) *
                        C48245 * C47981 * C48087) *
                       C48365 +
                   (((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                      C22144 * C316 + C22149 * C310 + C22145 * C325) *
                         C3467 +
                     (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                      C22144 * C335 + C22149 * C326 + C22145 * C340) *
                         C3465 -
                     (C22149 * C1392 + C22145 * C1408 + C22148 * C1015 +
                      C22144 * C1022 + C22147 * C517 + C22143 * C531) *
                         C3468 -
                     (C22149 * C1409 + C22145 * C1419 + C22148 * C1023 +
                      C22144 * C1030 + C22147 * C532 + C22143 * C547) *
                         C48129) *
                        C48245 * C47981 * C2691 +
                    ((C22147 * C1015 + C22143 * C1022 + C22148 * C1392 +
                      C22144 * C1408 + C22149 * C1815 + C22145 * C1820) *
                         C3468 -
                     ((C22149 * C1257 + C22145 * C1269 + C22148 * C326 +
                       C22144 * C340 + C22147 * C315 + C22143 * C335) *
                          C3465 +
                      (C22149 * C1251 + C22145 * C1258 + C22148 * C310 +
                       C22144 * C325 + C22147 * C305 + C22143 * C316) *
                          C3467) +
                     (C22147 * C1023 + C22143 * C1030 + C22148 * C1409 +
                      C22144 * C1419 + C22149 * C1821 + C22145 * C1824) *
                         C48129) *
                        C48245 * C47981 * C48087) *
                       C48336)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C3757 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C48389 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C3758 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C48386 +
                    (C22147 * C514 + C22143 * C525 + C22148 * C1385 +
                     C22144 * C1394 + C22149 * C1389 + C22145 * C1402) *
                        C3759 +
                    (C22147 * C526 + C22143 * C544 + C22148 * C1395 +
                     C22144 * C1412 + C22149 * C1403 + C22145 * C1416) *
                        C48377 -
                    (C22149 * C7735 + C22145 * C7737 + C22148 * C2581 +
                     C22144 * C2584 + C22147 * C2147 + C22143 * C2153) *
                        C3760 -
                    (C22149 * C7738 + C22145 * C7741 + C22148 * C2585 +
                     C22144 * C2590 + C22147 * C2154 + C22143 * C2165) *
                        C48358) *
                       C48245 * C47981 * C2691 +
                   ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                     C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                        C3758 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48389 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C3757) +
                    (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                     C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                        C48386 -
                    (C22149 * C6381 + C22145 * C6383 + C22148 * C1389 +
                     C22144 * C1402 + C22147 * C1385 + C22143 * C1394) *
                        C3759 -
                    (C22149 * C6384 + C22145 * C6387 + C22148 * C1403 +
                     C22144 * C1416 + C22147 * C1395 + C22143 * C1412) *
                        C48377 +
                    (C22147 * C2581 + C22143 * C2584 + C22148 * C7735 +
                     C22144 * C7737 + C22149 * C23976 + C22145 * C23977) *
                        C3760 +
                    (C22147 * C2585 + C22143 * C2590 + C22148 * C7738 +
                     C22144 * C7741 + C22149 * C23978 + C22145 * C23979) *
                        C48358) *
                       C48245 * C47981 * C48087) *
                  C47998) /
                     (p * q * std::sqrt(p + q));
    d2ee[108] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C47030 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48125 -
                     (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                      C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                         C47022 -
                     (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                      C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                         C48132 +
                     (C22147 * C514 + C22143 * C525 + C22148 * C1385 +
                      C22144 * C1394 + C22149 * C1389 + C22145 * C1402) *
                         C47036 +
                     (C22147 * C526 + C22143 * C544 + C22148 * C1395 +
                      C22144 * C1412 + C22149 * C1403 + C22145 * C1416) *
                         C4043) *
                        C48245 * C47981 * C2691 +
                    ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                      C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                         C47022 -
                     ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                       C22144 * C338 + C22147 * C319 + C22143 * C337) *
                          C48125 +
                      (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                       C22144 * C321 + C22147 * C307 + C22143 * C320) *
                          C47030) +
                     (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                      C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                         C48132 -
                     (C22149 * C6381 + C22145 * C6383 + C22148 * C1389 +
                      C22144 * C1402 + C22147 * C1385 + C22143 * C1394) *
                         C47036 -
                     (C22149 * C6384 + C22145 * C6387 + C22148 * C1403 +
                      C22144 * C1416 + C22147 * C1395 + C22143 * C1412) *
                         C4043) *
                        C48245 * C47981 * C48087) *
                       C48296 +
                   (((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                      C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                         C47022 -
                     ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                       C22144 * C336 + C22147 * C125 + C22143 * C137) *
                          C48125 +
                      (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                       C22144 * C318 + C22147 * C116 + C22143 * C124) *
                          C47030) +
                     (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                      C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                         C48132 -
                     (C22149 * C1391 + C22145 * C1406 + C22148 * C1386 +
                      C22144 * C1396 + C22147 * C516 + C22143 * C529) *
                         C47036 -
                     (C22149 * C1407 + C22145 * C1418 + C22148 * C1397 +
                      C22144 * C1413 + C22147 * C530 + C22143 * C546) *
                         C4043) *
                        C48245 * C47981 * C2691 +
                    ((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C47030 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48125 -
                     (C22149 * C1814 + C22145 * C1818 + C22148 * C1390 +
                      C22144 * C1404 + C22147 * C1014 + C22143 * C1020) *
                         C47022 -
                     (C22149 * C1819 + C22145 * C1823 + C22148 * C1405 +
                      C22144 * C1417 + C22147 * C1021 + C22143 * C1029) *
                         C48132 +
                     (C22147 * C1386 + C22143 * C1396 + C22148 * C1391 +
                      C22144 * C1406 + C22149 * C6382 + C22145 * C6385) *
                         C47036 +
                     (C22147 * C1397 + C22143 * C1413 + C22148 * C1407 +
                      C22144 * C1418 + C22149 * C6386 + C22145 * C6388) *
                         C4043) *
                        C48245 * C47981 * C48087) *
                       C48008)) /
                 (p * q * std::sqrt(p + q));
    d2ee[109] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C3467 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C3465 -
                     (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                      C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                         C3468 -
                     (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                      C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                         C48129) *
                        C48245 * C47981 * C2691 +
                    ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                      C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                         C3468 -
                     ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                       C22144 * C338 + C22147 * C319 + C22143 * C337) *
                          C3465 +
                      (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                       C22144 * C321 + C22147 * C307 + C22143 * C320) *
                          C3467) +
                     (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                      C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                         C48129) *
                        C48245 * C47981 * C48087) *
                       C48378 +
                   (((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                      C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                         C3468 -
                     ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                       C22144 * C336 + C22147 * C125 + C22143 * C137) *
                          C3465 +
                      (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                       C22144 * C318 + C22147 * C116 + C22143 * C124) *
                          C3467) +
                     (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                      C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                         C48129) *
                        C48245 * C47981 * C2691 +
                    ((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C3467 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C3465 -
                     (C22149 * C1814 + C22145 * C1818 + C22148 * C1390 +
                      C22144 * C1404 + C22147 * C1014 + C22143 * C1020) *
                         C3468 -
                     (C22149 * C1819 + C22145 * C1823 + C22148 * C1405 +
                      C22144 * C1417 + C22147 * C1021 + C22143 * C1029) *
                         C48129) *
                        C48245 * C47981 * C48087) *
                       C48365 +
                   (((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                      C22144 * C316 + C22149 * C310 + C22145 * C325) *
                         C3467 +
                     (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                      C22144 * C335 + C22149 * C326 + C22145 * C340) *
                         C3465 -
                     (C22149 * C1392 + C22145 * C1408 + C22148 * C1015 +
                      C22144 * C1022 + C22147 * C517 + C22143 * C531) *
                         C3468 -
                     (C22149 * C1409 + C22145 * C1419 + C22148 * C1023 +
                      C22144 * C1030 + C22147 * C532 + C22143 * C547) *
                         C48129) *
                        C48245 * C47981 * C2691 +
                    ((C22147 * C1015 + C22143 * C1022 + C22148 * C1392 +
                      C22144 * C1408 + C22149 * C1815 + C22145 * C1820) *
                         C3468 -
                     ((C22149 * C1257 + C22145 * C1269 + C22148 * C326 +
                       C22144 * C340 + C22147 * C315 + C22143 * C335) *
                          C3465 +
                      (C22149 * C1251 + C22145 * C1258 + C22148 * C310 +
                       C22144 * C325 + C22147 * C305 + C22143 * C316) *
                          C3467) +
                     (C22147 * C1023 + C22143 * C1030 + C22148 * C1409 +
                      C22144 * C1419 + C22149 * C1821 + C22145 * C1824) *
                         C48129) *
                        C48245 * C47981 * C48087) *
                       C48336)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C3467 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C3465 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C3468 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C48129) *
                       C48245 * C47981 * C48388 +
                   ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                     C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                        C3468 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C3465 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C3467) +
                    (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                     C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                        C48129) *
                       C48245 * C47981 * C48384 +
                   ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                     C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                        C3467 +
                    (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                     C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                        C3465 -
                    (C22149 * C6867 + C22145 * C6869 + C22148 * C1813 +
                     C22144 * C1816 + C22147 * C1388 + C22143 * C1400) *
                        C3468 -
                    (C22149 * C6870 + C22145 * C6873 + C22148 * C1817 +
                     C22144 * C1822 + C22147 * C1401 + C22143 * C1415) *
                        C48129) *
                       C48245 * C47981 * C48374 +
                   ((C22147 * C1813 + C22143 * C1816 + C22148 * C6867 +
                     C22144 * C6869 + C22149 * C23344 + C22145 * C23345) *
                        C3468 -
                    ((C22149 * C6230 + C22145 * C6233 + C22148 * C1264 +
                      C22144 * C1272 + C22147 * C1261 + C22143 * C1271) *
                         C3465 +
                     (C22149 * C6227 + C22145 * C6229 + C22148 * C1254 +
                      C22144 * C1263 + C22147 * C1253 + C22143 * C1262) *
                         C3467) +
                    (C22147 * C1817 + C22143 * C1822 + C22148 * C6870 +
                     C22144 * C6873 + C22149 * C23346 + C22145 * C23347) *
                        C48129) *
                       C48245 * C47981 * C48352) *
                  C47998) /
                     (p * q * std::sqrt(p + q));
    d2ee[110] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C114 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48042) *
                        C48245 * C47981 * C1519 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48042 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C114) *
                        C48245 * C47981 * C1520 +
                    ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                      C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                         C114 +
                     (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                      C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                         C48042) *
                        C48245 * C47981 * C1521 -
                    ((C22149 * C6230 + C22145 * C6233 + C22148 * C1264 +
                      C22144 * C1272 + C22147 * C1261 + C22143 * C1271) *
                         C48042 +
                     (C22149 * C6227 + C22145 * C6229 + C22148 * C1254 +
                      C22144 * C1263 + C22147 * C1253 + C22143 * C1262) *
                         C114) *
                        C48245 * C47981 * C48352) *
                       C48296 +
                   (((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C114 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48042) *
                        C48245 * C47981 * C1520 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48042 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C114) *
                        C48245 * C47981 * C1519 -
                    ((C22149 * C1266 + C22145 * C1273 + C22148 * C1259 +
                      C22144 * C1270 + C22147 * C324 + C22143 * C339) *
                         C48042 +
                     (C22149 * C1255 + C22145 * C1265 + C22148 * C1252 +
                      C22144 * C1260 + C22147 * C309 + C22143 * C323) *
                         C114) *
                        C48245 * C47981 * C1521 +
                    ((C22147 * C1252 + C22143 * C1260 + C22148 * C1255 +
                      C22144 * C1265 + C22149 * C6228 + C22145 * C6231) *
                         C114 +
                     (C22147 * C1259 + C22143 * C1270 + C22148 * C1266 +
                      C22144 * C1273 + C22149 * C6232 + C22145 * C6234) *
                         C48042) *
                        C48245 * C47981 * C48352) *
                       C48008)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C114 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48042) *
                        C48245 * C47981 * C48310 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48042 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C114) *
                        C48245 * C47981 * C48087) *
                       C713 +
                   (((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C114 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48042) *
                        C48245 * C47981 * C48087 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48042 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C114) *
                        C48245 * C47981 * C48310) *
                       C714 +
                   (((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                      C22144 * C316 + C22149 * C310 + C22145 * C325) *
                         C114 +
                     (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                      C22144 * C335 + C22149 * C326 + C22145 * C340) *
                         C48042) *
                        C48245 * C47981 * C48310 -
                    ((C22149 * C1257 + C22145 * C1269 + C22148 * C326 +
                      C22144 * C340 + C22147 * C315 + C22143 * C335) *
                         C48042 +
                     (C22149 * C1251 + C22145 * C1258 + C22148 * C310 +
                      C22144 * C325 + C22147 * C305 + C22143 * C316) *
                         C114) *
                        C48245 * C47981 * C48087) *
                       C715 +
                   (((C22147 * C311 + C22143 * C327 + C22148 * C312 +
                      C22144 * C330 + C22149 * C1525 + C22145 * C1526) *
                         C114 +
                     (C22147 * C328 + C22143 * C341 + C22148 * C329 +
                      C22144 * C342 + C22149 * C1527 + C22145 * C1528) *
                         C48042) *
                        C48245 * C47981 * C48087 -
                    ((C22149 * C329 + C22145 * C342 + C22148 * C328 +
                      C22144 * C341 + C22147 * C128 + C22143 * C139) *
                         C48042 +
                     (C22149 * C312 + C22145 * C330 + C22148 * C311 +
                      C22144 * C327 + C22147 * C118 + C22143 * C129) *
                         C114) *
                        C48245 * C47981 * C48310) *
                       C48346)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C1938 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C1935 -
                     (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                      C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                         C1939 -
                     (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                      C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                         C1936 +
                     (C22147 * C514 + C22143 * C525 + C22148 * C1385 +
                      C22144 * C1394 + C22149 * C1389 + C22145 * C1402) *
                         C1940 +
                     (C22147 * C526 + C22143 * C544 + C22148 * C1395 +
                      C22144 * C1412 + C22149 * C1403 + C22145 * C1416) *
                         C48345) *
                        C48245 * C47981 * C48310 +
                    ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                      C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                         C1939 -
                     ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                       C22144 * C338 + C22147 * C319 + C22143 * C337) *
                          C1935 +
                      (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                       C22144 * C321 + C22147 * C307 + C22143 * C320) *
                          C1938) +
                     (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                      C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                         C1936 -
                     (C22149 * C6381 + C22145 * C6383 + C22148 * C1389 +
                      C22144 * C1402 + C22147 * C1385 + C22143 * C1394) *
                         C1940 -
                     (C22149 * C6384 + C22145 * C6387 + C22148 * C1403 +
                      C22144 * C1416 + C22147 * C1395 + C22143 * C1412) *
                         C48345) *
                        C48245 * C47981 * C48087) *
                       C48296 +
                   (((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                      C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                         C1939 -
                     ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                       C22144 * C336 + C22147 * C125 + C22143 * C137) *
                          C1935 +
                      (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                       C22144 * C318 + C22147 * C116 + C22143 * C124) *
                          C1938) +
                     (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                      C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                         C1936 -
                     (C22149 * C1391 + C22145 * C1406 + C22148 * C1386 +
                      C22144 * C1396 + C22147 * C516 + C22143 * C529) *
                         C1940 -
                     (C22149 * C1407 + C22145 * C1418 + C22148 * C1397 +
                      C22144 * C1413 + C22147 * C530 + C22143 * C546) *
                         C48345) *
                        C48245 * C47981 * C48310 +
                    ((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C1938 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C1935 -
                     (C22149 * C1814 + C22145 * C1818 + C22148 * C1390 +
                      C22144 * C1404 + C22147 * C1014 + C22143 * C1020) *
                         C1939 -
                     (C22149 * C1819 + C22145 * C1823 + C22148 * C1405 +
                      C22144 * C1417 + C22147 * C1021 + C22143 * C1029) *
                         C1936 +
                     (C22147 * C1386 + C22143 * C1396 + C22148 * C1391 +
                      C22144 * C1406 + C22149 * C6382 + C22145 * C6385) *
                         C1940 +
                     (C22147 * C1397 + C22143 * C1413 + C22148 * C1407 +
                      C22144 * C1418 + C22149 * C6386 + C22145 * C6388) *
                         C48345) *
                        C48245 * C47981 * C48087) *
                       C48008)) /
                     (p * q * std::sqrt(p + q));
    d2ee[111] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C831 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C48311 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C832 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C48129) *
                       C48245 * C47981 * C1519 +
                   ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                     C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                        C832 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48311 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C831) +
                    (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                     C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                        C48129) *
                       C48245 * C47981 * C1520 +
                   ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                     C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                        C831 +
                    (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                     C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                        C48311 -
                    (C22149 * C6867 + C22145 * C6869 + C22148 * C1813 +
                     C22144 * C1816 + C22147 * C1388 + C22143 * C1400) *
                        C832 -
                    (C22149 * C6870 + C22145 * C6873 + C22148 * C1817 +
                     C22144 * C1822 + C22147 * C1401 + C22143 * C1415) *
                        C48129) *
                       C48245 * C47981 * C1521 +
                   ((C22147 * C1813 + C22143 * C1816 + C22148 * C6867 +
                     C22144 * C6869 + C22149 * C23344 + C22145 * C23345) *
                        C832 -
                    ((C22149 * C6230 + C22145 * C6233 + C22148 * C1264 +
                      C22144 * C1272 + C22147 * C1261 + C22143 * C1271) *
                         C48311 +
                     (C22149 * C6227 + C22145 * C6229 + C22148 * C1254 +
                      C22144 * C1263 + C22147 * C1253 + C22143 * C1262) *
                         C831) +
                    (C22147 * C1817 + C22143 * C1822 + C22148 * C6870 +
                     C22144 * C6873 + C22149 * C23346 + C22145 * C23347) *
                        C48129) *
                       C48245 * C47981 * C48352) *
                  C47998) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C831 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48311 -
                     (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                      C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                         C832 -
                     (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                      C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                         C48129) *
                        C48245 * C47981 * C48310 +
                    ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                      C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                         C832 -
                     ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                       C22144 * C338 + C22147 * C319 + C22143 * C337) *
                          C48311 +
                      (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                       C22144 * C321 + C22147 * C307 + C22143 * C320) *
                          C831) +
                     (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                      C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                         C48129) *
                        C48245 * C47981 * C48087) *
                       C302 +
                   (((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                      C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                         C832 -
                     ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                       C22144 * C336 + C22147 * C125 + C22143 * C137) *
                          C48311 +
                      (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                       C22144 * C318 + C22147 * C116 + C22143 * C124) *
                          C831) +
                     (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                      C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                         C48129) *
                        C48245 * C47981 * C48310 +
                    ((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C831 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48311 -
                     (C22149 * C1814 + C22145 * C1818 + C22148 * C1390 +
                      C22144 * C1404 + C22147 * C1014 + C22143 * C1020) *
                         C832 -
                     (C22149 * C1819 + C22145 * C1823 + C22148 * C1405 +
                      C22144 * C1417 + C22147 * C1021 + C22143 * C1029) *
                         C48129) *
                        C48245 * C47981 * C48087) *
                       C303 +
                   (((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                      C22144 * C316 + C22149 * C310 + C22145 * C325) *
                         C831 +
                     (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                      C22144 * C335 + C22149 * C326 + C22145 * C340) *
                         C48311 -
                     (C22149 * C1392 + C22145 * C1408 + C22148 * C1015 +
                      C22144 * C1022 + C22147 * C517 + C22143 * C531) *
                         C832 -
                     (C22149 * C1409 + C22145 * C1419 + C22148 * C1023 +
                      C22144 * C1030 + C22147 * C532 + C22143 * C547) *
                         C48129) *
                        C48245 * C47981 * C48310 +
                    ((C22147 * C1015 + C22143 * C1022 + C22148 * C1392 +
                      C22144 * C1408 + C22149 * C1815 + C22145 * C1820) *
                         C832 -
                     ((C22149 * C1257 + C22145 * C1269 + C22148 * C326 +
                       C22144 * C340 + C22147 * C315 + C22143 * C335) *
                          C48311 +
                      (C22149 * C1251 + C22145 * C1258 + C22148 * C310 +
                       C22144 * C325 + C22147 * C305 + C22143 * C316) *
                          C831) +
                     (C22147 * C1023 + C22143 * C1030 + C22148 * C1409 +
                      C22144 * C1419 + C22149 * C1821 + C22145 * C1824) *
                         C48129) *
                        C48245 * C47981 * C48087) *
                       C48336)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C2447 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C2443 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C2448 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C2444 +
                    (C22147 * C514 + C22143 * C525 + C22148 * C1385 +
                     C22144 * C1394 + C22149 * C1389 + C22145 * C1402) *
                        C2449 +
                    (C22147 * C526 + C22143 * C544 + C22148 * C1395 +
                     C22144 * C1412 + C22149 * C1403 + C22145 * C1416) *
                        C2445 -
                    (C22149 * C7735 + C22145 * C7737 + C22148 * C2581 +
                     C22144 * C2584 + C22147 * C2147 + C22143 * C2153) *
                        C2450 -
                    (C22149 * C7738 + C22145 * C7741 + C22148 * C2585 +
                     C22144 * C2590 + C22147 * C2154 + C22143 * C2165) *
                        C48358) *
                       C48245 * C47981 * C48310 +
                   ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                     C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                        C2448 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C2443 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C2447) +
                    (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                     C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                        C2444 -
                    (C22149 * C6381 + C22145 * C6383 + C22148 * C1389 +
                     C22144 * C1402 + C22147 * C1385 + C22143 * C1394) *
                        C2449 -
                    (C22149 * C6384 + C22145 * C6387 + C22148 * C1403 +
                     C22144 * C1416 + C22147 * C1395 + C22143 * C1412) *
                        C2445 +
                    (C22147 * C2581 + C22143 * C2584 + C22148 * C7735 +
                     C22144 * C7737 + C22149 * C23976 + C22145 * C23977) *
                        C2450 +
                    (C22147 * C2585 + C22143 * C2590 + C22148 * C7738 +
                     C22144 * C7741 + C22149 * C23978 + C22145 * C23979) *
                        C48358) *
                       C48245 * C47981 * C48087) *
                  C47998) /
                     (p * q * std::sqrt(p + q));
    d2ee[112] += (0.5 * std::pow(Pi, 2.5) *
                      (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                         C22144 * C320 + C22149 * C308 + C22145 * C321) *
                            C114 +
                        (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                         C22144 * C337 + C22149 * C322 + C22145 * C338) *
                            C48042) *
                           C48245 * C47981 * C48025 * C108 -
                       ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                         C22144 * C336 + C22147 * C125 + C22143 * C137) *
                            C48042 +
                        (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                         C22144 * C318 + C22147 * C116 + C22143 * C124) *
                            C114) *
                           C48245 * C47981 * C48025 * C109 +
                       ((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                         C22144 * C316 + C22149 * C310 + C22145 * C325) *
                            C114 +
                        (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                         C22144 * C335 + C22149 * C326 + C22145 * C340) *
                            C48042) *
                           C48245 * C47981 * C48025 * C110 -
                       ((C22149 * C329 + C22145 * C342 + C22148 * C328 +
                         C22144 * C341 + C22147 * C128 + C22143 * C139) *
                            C48042 +
                        (C22149 * C312 + C22145 * C330 + C22148 * C311 +
                         C22144 * C327 + C22147 * C118 + C22143 * C129) *
                            C114) *
                           C48245 * C47981 * C48025 * C111 +
                       ((C22147 * C119 + C22143 * C130 + C22148 * C313 +
                         C22144 * C332 + C22149 * C314 + C22145 * C333) *
                            C114 +
                        (C22147 * C131 + C22143 * C140 + C22148 * C331 +
                         C22144 * C343 + C22149 * C334 + C22145 * C344) *
                            C48042) *
                           C48245 * C47981 * C48025 * C112) +
                  0.5 * std::pow(Pi, 2.5) *
                      ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                          C22144 * C320 + C22149 * C308 + C22145 * C321) *
                             C114 +
                         (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                          C22144 * C337 + C22149 * C322 + C22145 * C338) *
                             C48042) *
                            C48245 * C47981 * C48381 -
                        ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                          C22144 * C338 + C22147 * C319 + C22143 * C337) *
                             C48042 +
                         (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                          C22144 * C321 + C22147 * C307 + C22143 * C320) *
                             C114) *
                            C48245 * C47981 * C48369 +
                        ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                          C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                             C114 +
                         (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                          C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                             C48042) *
                            C48245 * C47981 * C48342) *
                           C302 +
                       (((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                          C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                             C114 +
                         (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                          C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                             C48042) *
                            C48245 * C47981 * C48369 -
                        ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                          C22144 * C336 + C22147 * C125 + C22143 * C137) *
                             C48042 +
                         (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                          C22144 * C318 + C22147 * C116 + C22143 * C124) *
                             C114) *
                            C48245 * C47981 * C48381 -
                        ((C22149 * C1266 + C22145 * C1273 + C22148 * C1259 +
                          C22144 * C1270 + C22147 * C324 + C22143 * C339) *
                             C48042 +
                         (C22149 * C1255 + C22145 * C1265 + C22148 * C1252 +
                          C22144 * C1260 + C22147 * C309 + C22143 * C323) *
                             C114) *
                            C48245 * C47981 * C48342) *
                           C303 +
                       (((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                          C22144 * C316 + C22149 * C310 + C22145 * C325) *
                             C114 +
                         (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                          C22144 * C335 + C22149 * C326 + C22145 * C340) *
                             C48042) *
                            C48245 * C47981 * C48381 -
                        ((C22149 * C1257 + C22145 * C1269 + C22148 * C326 +
                          C22144 * C340 + C22147 * C315 + C22143 * C335) *
                             C48042 +
                         (C22149 * C1251 + C22145 * C1258 + C22148 * C310 +
                          C22144 * C325 + C22147 * C305 + C22143 * C316) *
                             C114) *
                            C48245 * C47981 * C48369 +
                        ((C22147 * C310 + C22143 * C325 + C22148 * C1251 +
                          C22144 * C1258 + C22149 * C1256 + C22145 * C1267) *
                             C114 +
                         (C22147 * C326 + C22143 * C340 + C22148 * C1257 +
                          C22144 * C1269 + C22149 * C1268 + C22145 * C1274) *
                             C48042) *
                            C48245 * C47981 * C48342) *
                           C48336)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C510 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C48382 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C511 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C48371 +
                    (C22147 * C514 + C22143 * C525 + C22148 * C1385 +
                     C22144 * C1394 + C22149 * C1389 + C22145 * C1402) *
                        C512 +
                    (C22147 * C526 + C22143 * C544 + C22148 * C1395 +
                     C22144 * C1412 + C22149 * C1403 + C22145 * C1416) *
                        C48345) *
                       C48245 * C47981 * C48025 * C302 +
                   ((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                     C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                        C511 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48382 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C510) +
                    (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                     C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                        C48371 -
                    (C22149 * C1391 + C22145 * C1406 + C22148 * C1386 +
                     C22144 * C1396 + C22147 * C516 + C22143 * C529) *
                        C512 -
                    (C22149 * C1407 + C22145 * C1418 + C22148 * C1397 +
                     C22144 * C1413 + C22147 * C530 + C22143 * C546) *
                        C48345) *
                       C48245 * C47981 * C48025 * C303 +
                   ((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                     C22144 * C316 + C22149 * C310 + C22145 * C325) *
                        C510 +
                    (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                     C22144 * C335 + C22149 * C326 + C22145 * C340) *
                        C48382 -
                    (C22149 * C1392 + C22145 * C1408 + C22148 * C1015 +
                     C22144 * C1022 + C22147 * C517 + C22143 * C531) *
                        C511 -
                    (C22149 * C1409 + C22145 * C1419 + C22148 * C1023 +
                     C22144 * C1030 + C22147 * C532 + C22143 * C547) *
                        C48371 +
                    (C22147 * C518 + C22143 * C533 + C22148 * C1387 +
                     C22144 * C1398 + C22149 * C1393 + C22145 * C1410) *
                        C512 +
                    (C22147 * C534 + C22143 * C548 + C22148 * C1399 +
                     C22144 * C1414 + C22149 * C1411 + C22145 * C1420) *
                        C48345) *
                       C48245 * C47981 * C48025 * C48336)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C114 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48042) *
                        C48245 * C47981 * C1177 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48042 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C114) *
                        C48245 * C47981 * C1178 +
                    ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                      C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                         C114 +
                     (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                      C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                         C48042) *
                        C48245 * C47981 * C48342) *
                       C48378 +
                   (((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C114 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48042) *
                        C48245 * C47981 * C1178 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48042 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C114) *
                        C48245 * C47981 * C1177 -
                    ((C22149 * C1266 + C22145 * C1273 + C22148 * C1259 +
                      C22144 * C1270 + C22147 * C324 + C22143 * C339) *
                         C48042 +
                     (C22149 * C1255 + C22145 * C1265 + C22148 * C1252 +
                      C22144 * C1260 + C22147 * C309 + C22143 * C323) *
                         C114) *
                        C48245 * C47981 * C48342) *
                       C48365 +
                   (((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                      C22144 * C316 + C22149 * C310 + C22145 * C325) *
                         C114 +
                     (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                      C22144 * C335 + C22149 * C326 + C22145 * C340) *
                         C48042) *
                        C48245 * C47981 * C1177 -
                    ((C22149 * C1257 + C22145 * C1269 + C22148 * C326 +
                      C22144 * C340 + C22147 * C315 + C22143 * C335) *
                         C48042 +
                     (C22149 * C1251 + C22145 * C1258 + C22148 * C310 +
                      C22144 * C325 + C22147 * C305 + C22143 * C316) *
                         C114) *
                        C48245 * C47981 * C1178 +
                    ((C22147 * C310 + C22143 * C325 + C22148 * C1251 +
                      C22144 * C1258 + C22149 * C1256 + C22145 * C1267) *
                         C114 +
                     (C22147 * C326 + C22143 * C340 + C22148 * C1257 +
                      C22144 * C1269 + C22149 * C1268 + C22145 * C1274) *
                         C48042) *
                        C48245 * C47981 * C48342) *
                       C48336)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C114 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C48042) *
                       C48245 * C47981 * C1245 -
                   ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                     C22144 * C338 + C22147 * C319 + C22143 * C337) *
                        C48042 +
                    (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                     C22144 * C321 + C22147 * C307 + C22143 * C320) *
                        C114) *
                       C48245 * C47981 * C1246 +
                   ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                     C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                        C114 +
                    (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                     C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                        C48042) *
                       C48245 * C47981 * C1247 -
                   ((C22149 * C6230 + C22145 * C6233 + C22148 * C1264 +
                     C22144 * C1272 + C22147 * C1261 + C22143 * C1271) *
                        C48042 +
                    (C22149 * C6227 + C22145 * C6229 + C22148 * C1254 +
                     C22144 * C1263 + C22147 * C1253 + C22143 * C1262) *
                        C114) *
                       C48245 * C47981 * C1248 +
                   ((C22147 * C1254 + C22143 * C1263 + C22148 * C6227 +
                     C22144 * C6229 + C22149 * C22884 + C22145 * C22885) *
                        C114 +
                    (C22147 * C1264 + C22143 * C1272 + C22148 * C6230 +
                     C22144 * C6233 + C22149 * C22886 + C22145 * C22887) *
                        C48042) *
                       C48245 * C47981 * C1249) *
                  C47998) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C510 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C48382 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C511 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C48371 +
                    (C22147 * C514 + C22143 * C525 + C22148 * C1385 +
                     C22144 * C1394 + C22149 * C1389 + C22145 * C1402) *
                        C512 +
                    (C22147 * C526 + C22143 * C544 + C22148 * C1395 +
                     C22144 * C1412 + C22149 * C1403 + C22145 * C1416) *
                        C48345) *
                       C48245 * C47981 * C1177 +
                   ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                     C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                        C511 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48382 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C510) +
                    (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                     C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                        C48371 -
                    (C22149 * C6381 + C22145 * C6383 + C22148 * C1389 +
                     C22144 * C1402 + C22147 * C1385 + C22143 * C1394) *
                        C512 -
                    (C22149 * C6384 + C22145 * C6387 + C22148 * C1403 +
                     C22144 * C1416 + C22147 * C1395 + C22143 * C1412) *
                        C48345) *
                       C48245 * C47981 * C1178 +
                   ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                     C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                        C510 +
                    (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                     C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                        C48382 -
                    (C22149 * C6867 + C22145 * C6869 + C22148 * C1813 +
                     C22144 * C1816 + C22147 * C1388 + C22143 * C1400) *
                        C511 -
                    (C22149 * C6870 + C22145 * C6873 + C22148 * C1817 +
                     C22144 * C1822 + C22147 * C1401 + C22143 * C1415) *
                        C48371 +
                    (C22147 * C1389 + C22143 * C1402 + C22148 * C6381 +
                     C22144 * C6383 + C22149 * C22998 + C22145 * C22999) *
                        C512 +
                    (C22147 * C1403 + C22143 * C1416 + C22148 * C6384 +
                     C22144 * C6387 + C22149 * C23000 + C22145 * C23001) *
                        C48345) *
                       C48245 * C47981 * C48342) *
                  C47998) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C1938 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C1935 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C1939 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C1936 +
                    (C22147 * C514 + C22143 * C525 + C22148 * C1385 +
                     C22144 * C1394 + C22149 * C1389 + C22145 * C1402) *
                        C1940 +
                    (C22147 * C526 + C22143 * C544 + C22148 * C1395 +
                     C22144 * C1412 + C22149 * C1403 + C22145 * C1416) *
                        C48345) *
                       C48245 * C47981 * C48025 * C48378 +
                   ((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                     C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                        C1939 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C1935 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C1938) +
                    (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                     C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                        C1936 -
                    (C22149 * C1391 + C22145 * C1406 + C22148 * C1386 +
                     C22144 * C1396 + C22147 * C516 + C22143 * C529) *
                        C1940 -
                    (C22149 * C1407 + C22145 * C1418 + C22148 * C1397 +
                     C22144 * C1413 + C22147 * C530 + C22143 * C546) *
                        C48345) *
                       C48245 * C47981 * C48025 * C48365 +
                   ((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                     C22144 * C316 + C22149 * C310 + C22145 * C325) *
                        C1938 +
                    (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                     C22144 * C335 + C22149 * C326 + C22145 * C340) *
                        C1935 -
                    (C22149 * C1392 + C22145 * C1408 + C22148 * C1015 +
                     C22144 * C1022 + C22147 * C517 + C22143 * C531) *
                        C1939 -
                    (C22149 * C1409 + C22145 * C1419 + C22148 * C1023 +
                     C22144 * C1030 + C22147 * C532 + C22143 * C547) *
                        C1936 +
                    (C22147 * C518 + C22143 * C533 + C22148 * C1387 +
                     C22144 * C1398 + C22149 * C1393 + C22145 * C1410) *
                        C1940 +
                    (C22147 * C534 + C22143 * C548 + C22148 * C1399 +
                     C22144 * C1414 + C22149 * C1411 + C22145 * C1420) *
                        C48345) *
                       C48245 * C47981 * C48025 * C48336)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C1938 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C1935 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C1939 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C1936 +
                    (C22147 * C514 + C22143 * C525 + C22148 * C1385 +
                     C22144 * C1394 + C22149 * C1389 + C22145 * C1402) *
                        C1940 +
                    (C22147 * C526 + C22143 * C544 + C22148 * C1395 +
                     C22144 * C1412 + C22149 * C1403 + C22145 * C1416) *
                        C48345) *
                       C48245 * C47981 * C48381 +
                   ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                     C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                        C1939 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C1935 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C1938) +
                    (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                     C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                        C1936 -
                    (C22149 * C6381 + C22145 * C6383 + C22148 * C1389 +
                     C22144 * C1402 + C22147 * C1385 + C22143 * C1394) *
                        C1940 -
                    (C22149 * C6384 + C22145 * C6387 + C22148 * C1403 +
                     C22144 * C1416 + C22147 * C1395 + C22143 * C1412) *
                        C48345) *
                       C48245 * C47981 * C48369 +
                   ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                     C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                        C1938 +
                    (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                     C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                        C1935 -
                    (C22149 * C6867 + C22145 * C6869 + C22148 * C1813 +
                     C22144 * C1816 + C22147 * C1388 + C22143 * C1400) *
                        C1939 -
                    (C22149 * C6870 + C22145 * C6873 + C22148 * C1817 +
                     C22144 * C1822 + C22147 * C1401 + C22143 * C1415) *
                        C1936 +
                    (C22147 * C1389 + C22143 * C1402 + C22148 * C6381 +
                     C22144 * C6383 + C22149 * C22998 + C22145 * C22999) *
                        C1940 +
                    (C22147 * C1403 + C22143 * C1416 + C22148 * C6384 +
                     C22144 * C6387 + C22149 * C23000 + C22145 * C23001) *
                        C48345) *
                       C48245 * C47981 * C48342) *
                  C47998) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  ((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                    C22144 * C320 + C22149 * C308 + C22145 * C321) *
                       C2142 +
                   (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                    C22144 * C337 + C22149 * C322 + C22145 * C338) *
                       C2137 -
                   (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                    C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                       C2143 -
                   (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                    C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                       C2138 +
                   (C22147 * C514 + C22143 * C525 + C22148 * C1385 +
                    C22144 * C1394 + C22149 * C1389 + C22145 * C1402) *
                       C2144 +
                   (C22147 * C526 + C22143 * C544 + C22148 * C1395 +
                    C22144 * C1412 + C22149 * C1403 + C22145 * C1416) *
                       C2139 -
                   (C22149 * C7735 + C22145 * C7737 + C22148 * C2581 +
                    C22144 * C2584 + C22147 * C2147 + C22143 * C2153) *
                       C2145 -
                   (C22149 * C7738 + C22145 * C7741 + C22148 * C2585 +
                    C22144 * C2590 + C22147 * C2154 + C22143 * C2165) *
                       C2140 +
                   (C22147 * C2148 + C22143 * C2155 + C22148 * C7249 +
                    C22144 * C7251 + C22149 * C23630 + C22145 * C23631) *
                       C2146 +
                   (C22147 * C2156 + C22143 * C2166 + C22148 * C7252 +
                    C22144 * C7255 + C22149 * C23632 + C22145 * C23633) *
                       C2141) *
                  C48245 * C47981 * C48025 * C47998) /
                     (p * q * std::sqrt(p + q));
    d2ee[113] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C831 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48311 -
                     (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                      C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                         C832 -
                     (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                      C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                         C48129) *
                        C48245 * C47981 * C1177 +
                    ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                      C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                         C832 -
                     ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                       C22144 * C338 + C22147 * C319 + C22143 * C337) *
                          C48311 +
                      (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                       C22144 * C321 + C22147 * C307 + C22143 * C320) *
                          C831) +
                     (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                      C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                         C48129) *
                        C48245 * C47981 * C1178 +
                    ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                      C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                         C831 +
                     (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                      C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                         C48311 -
                     (C22149 * C6867 + C22145 * C6869 + C22148 * C1813 +
                      C22144 * C1816 + C22147 * C1388 + C22143 * C1400) *
                         C832 -
                     (C22149 * C6870 + C22145 * C6873 + C22148 * C1817 +
                      C22144 * C1822 + C22147 * C1401 + C22143 * C1415) *
                         C48129) *
                        C48245 * C47981 * C48342) *
                       C48296 +
                   (((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                      C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                         C832 -
                     ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                       C22144 * C336 + C22147 * C125 + C22143 * C137) *
                          C48311 +
                      (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                       C22144 * C318 + C22147 * C116 + C22143 * C124) *
                          C831) +
                     (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                      C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                         C48129) *
                        C48245 * C47981 * C1177 +
                    ((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C831 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48311 -
                     (C22149 * C1814 + C22145 * C1818 + C22148 * C1390 +
                      C22144 * C1404 + C22147 * C1014 + C22143 * C1020) *
                         C832 -
                     (C22149 * C1819 + C22145 * C1823 + C22148 * C1405 +
                      C22144 * C1417 + C22147 * C1021 + C22143 * C1029) *
                         C48129) *
                        C48245 * C47981 * C1178 +
                    ((C22147 * C1390 + C22143 * C1404 + C22148 * C1814 +
                      C22144 * C1818 + C22149 * C6868 + C22145 * C6871) *
                         C832 -
                     ((C22149 * C1266 + C22145 * C1273 + C22148 * C1259 +
                       C22144 * C1270 + C22147 * C324 + C22143 * C339) *
                          C48311 +
                      (C22149 * C1255 + C22145 * C1265 + C22148 * C1252 +
                       C22144 * C1260 + C22147 * C309 + C22143 * C323) *
                          C831) +
                     (C22147 * C1405 + C22143 * C1417 + C22148 * C1819 +
                      C22144 * C1823 + C22149 * C6872 + C22145 * C6874) *
                         C48129) *
                        C48245 * C47981 * C48342) *
                       C48008)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C831 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C48311 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C832 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C48129) *
                       C48245 * C47981 * C48025 * C713 +
                   ((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                     C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                        C832 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48311 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C831) +
                    (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                     C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                        C48129) *
                       C48245 * C47981 * C48025 * C714 +
                   ((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                     C22144 * C316 + C22149 * C310 + C22145 * C325) *
                        C831 +
                    (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                     C22144 * C335 + C22149 * C326 + C22145 * C340) *
                        C48311 -
                    (C22149 * C1392 + C22145 * C1408 + C22148 * C1015 +
                     C22144 * C1022 + C22147 * C517 + C22143 * C531) *
                        C832 -
                    (C22149 * C1409 + C22145 * C1419 + C22148 * C1023 +
                     C22144 * C1030 + C22147 * C532 + C22143 * C547) *
                        C48129) *
                       C48245 * C47981 * C48025 * C715 +
                   ((C22147 * C519 + C22143 * C535 + C22148 * C1016 +
                     C22144 * C1024 + C22149 * C1691 + C22145 * C1692) *
                        C832 -
                    ((C22149 * C329 + C22145 * C342 + C22148 * C328 +
                      C22144 * C341 + C22147 * C128 + C22143 * C139) *
                         C48311 +
                     (C22149 * C312 + C22145 * C330 + C22148 * C311 +
                      C22144 * C327 + C22147 * C118 + C22143 * C129) *
                         C831) +
                    (C22147 * C536 + C22143 * C549 + C22148 * C1025 +
                     C22144 * C1031 + C22149 * C1693 + C22145 * C1694) *
                        C48129) *
                       C48245 * C47981 * C48025 * C48346)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C2447 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C2443 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C2448 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C2444 +
                    (C22147 * C514 + C22143 * C525 + C22148 * C1385 +
                     C22144 * C1394 + C22149 * C1389 + C22145 * C1402) *
                        C2449 +
                    (C22147 * C526 + C22143 * C544 + C22148 * C1395 +
                     C22144 * C1412 + C22149 * C1403 + C22145 * C1416) *
                        C2445 -
                    (C22149 * C7735 + C22145 * C7737 + C22148 * C2581 +
                     C22144 * C2584 + C22147 * C2147 + C22143 * C2153) *
                        C2450 -
                    (C22149 * C7738 + C22145 * C7741 + C22148 * C2585 +
                     C22144 * C2590 + C22147 * C2154 + C22143 * C2165) *
                        C48358) *
                       C48245 * C47981 * C48025 * C48296 +
                   ((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                     C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                        C2448 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C2443 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C2447) +
                    (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                     C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                        C2444 -
                    (C22149 * C1391 + C22145 * C1406 + C22148 * C1386 +
                     C22144 * C1396 + C22147 * C516 + C22143 * C529) *
                        C2449 -
                    (C22149 * C1407 + C22145 * C1418 + C22148 * C1397 +
                     C22144 * C1413 + C22147 * C530 + C22143 * C546) *
                        C2445 +
                    (C22147 * C2149 + C22143 * C2157 + C22148 * C2582 +
                     C22144 * C2586 + C22149 * C7736 + C22145 * C7739) *
                        C2450 +
                    (C22147 * C2158 + C22143 * C2167 + C22148 * C2587 +
                     C22144 * C2591 + C22149 * C7740 + C22145 * C7742) *
                        C48358) *
                       C48245 * C47981 * C48025 * C48008)) /
                     (p * q * std::sqrt(p + q));
    d2ee[114] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C114 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48042) *
                        C48245 * C47981 * C48381 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48042 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C114) *
                        C48245 * C47981 * C48369 +
                    ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                      C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                         C114 +
                     (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                      C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                         C48042) *
                        C48245 * C47981 * C48342) *
                       C302 +
                   (((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C114 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48042) *
                        C48245 * C47981 * C48369 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48042 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C114) *
                        C48245 * C47981 * C48381 -
                    ((C22149 * C1266 + C22145 * C1273 + C22148 * C1259 +
                      C22144 * C1270 + C22147 * C324 + C22143 * C339) *
                         C48042 +
                     (C22149 * C1255 + C22145 * C1265 + C22148 * C1252 +
                      C22144 * C1260 + C22147 * C309 + C22143 * C323) *
                         C114) *
                        C48245 * C47981 * C48342) *
                       C303 +
                   (((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                      C22144 * C316 + C22149 * C310 + C22145 * C325) *
                         C114 +
                     (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                      C22144 * C335 + C22149 * C326 + C22145 * C340) *
                         C48042) *
                        C48245 * C47981 * C48381 -
                    ((C22149 * C1257 + C22145 * C1269 + C22148 * C326 +
                      C22144 * C340 + C22147 * C315 + C22143 * C335) *
                         C48042 +
                     (C22149 * C1251 + C22145 * C1258 + C22148 * C310 +
                      C22144 * C325 + C22147 * C305 + C22143 * C316) *
                         C114) *
                        C48245 * C47981 * C48369 +
                    ((C22147 * C310 + C22143 * C325 + C22148 * C1251 +
                      C22144 * C1258 + C22149 * C1256 + C22145 * C1267) *
                         C114 +
                     (C22147 * C326 + C22143 * C340 + C22148 * C1257 +
                      C22144 * C1269 + C22149 * C1268 + C22145 * C1274) *
                         C48042) *
                        C48245 * C47981 * C48342) *
                       C48336)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C114 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C48042) *
                       C48245 * C47981 * C48025 * C108 -
                   ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                     C22144 * C336 + C22147 * C125 + C22143 * C137) *
                        C48042 +
                    (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                     C22144 * C318 + C22147 * C116 + C22143 * C124) *
                        C114) *
                       C48245 * C47981 * C48025 * C109 +
                   ((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                     C22144 * C316 + C22149 * C310 + C22145 * C325) *
                        C114 +
                    (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                     C22144 * C335 + C22149 * C326 + C22145 * C340) *
                        C48042) *
                       C48245 * C47981 * C48025 * C110 -
                   ((C22149 * C329 + C22145 * C342 + C22148 * C328 +
                     C22144 * C341 + C22147 * C128 + C22143 * C139) *
                        C48042 +
                    (C22149 * C312 + C22145 * C330 + C22148 * C311 +
                     C22144 * C327 + C22147 * C118 + C22143 * C129) *
                        C114) *
                       C48245 * C47981 * C48025 * C111 +
                   ((C22147 * C119 + C22143 * C130 + C22148 * C313 +
                     C22144 * C332 + C22149 * C314 + C22145 * C333) *
                        C114 +
                    (C22147 * C131 + C22143 * C140 + C22148 * C331 +
                     C22144 * C343 + C22149 * C334 + C22145 * C344) *
                        C48042) *
                       C48245 * C47981 * C48025 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C114 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48042) *
                        C48245 * C47981 * C1177 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48042 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C114) *
                        C48245 * C47981 * C1178 +
                    ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                      C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                         C114 +
                     (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                      C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                         C48042) *
                        C48245 * C47981 * C48342) *
                       C48378 +
                   (((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C114 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48042) *
                        C48245 * C47981 * C1178 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48042 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C114) *
                        C48245 * C47981 * C1177 -
                    ((C22149 * C1266 + C22145 * C1273 + C22148 * C1259 +
                      C22144 * C1270 + C22147 * C324 + C22143 * C339) *
                         C48042 +
                     (C22149 * C1255 + C22145 * C1265 + C22148 * C1252 +
                      C22144 * C1260 + C22147 * C309 + C22143 * C323) *
                         C114) *
                        C48245 * C47981 * C48342) *
                       C48365 +
                   (((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                      C22144 * C316 + C22149 * C310 + C22145 * C325) *
                         C114 +
                     (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                      C22144 * C335 + C22149 * C326 + C22145 * C340) *
                         C48042) *
                        C48245 * C47981 * C1177 -
                    ((C22149 * C1257 + C22145 * C1269 + C22148 * C326 +
                      C22144 * C340 + C22147 * C315 + C22143 * C335) *
                         C48042 +
                     (C22149 * C1251 + C22145 * C1258 + C22148 * C310 +
                      C22144 * C325 + C22147 * C305 + C22143 * C316) *
                         C114) *
                        C48245 * C47981 * C1178 +
                    ((C22147 * C310 + C22143 * C325 + C22148 * C1251 +
                      C22144 * C1258 + C22149 * C1256 + C22145 * C1267) *
                         C114 +
                     (C22147 * C326 + C22143 * C340 + C22148 * C1257 +
                      C22144 * C1269 + C22149 * C1268 + C22145 * C1274) *
                         C48042) *
                        C48245 * C47981 * C48342) *
                       C48336)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C114 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C48042) *
                       C48245 * C47981 * C1245 -
                   ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                     C22144 * C338 + C22147 * C319 + C22143 * C337) *
                        C48042 +
                    (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                     C22144 * C321 + C22147 * C307 + C22143 * C320) *
                        C114) *
                       C48245 * C47981 * C1246 +
                   ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                     C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                        C114 +
                    (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                     C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                        C48042) *
                       C48245 * C47981 * C1247 -
                   ((C22149 * C6230 + C22145 * C6233 + C22148 * C1264 +
                     C22144 * C1272 + C22147 * C1261 + C22143 * C1271) *
                        C48042 +
                    (C22149 * C6227 + C22145 * C6229 + C22148 * C1254 +
                     C22144 * C1263 + C22147 * C1253 + C22143 * C1262) *
                        C114) *
                       C48245 * C47981 * C1248 +
                   ((C22147 * C1254 + C22143 * C1263 + C22148 * C6227 +
                     C22144 * C6229 + C22149 * C22884 + C22145 * C22885) *
                        C114 +
                    (C22147 * C1264 + C22143 * C1272 + C22148 * C6230 +
                     C22144 * C6233 + C22149 * C22886 + C22145 * C22887) *
                        C48042) *
                       C48245 * C47981 * C1249) *
                  C47998) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C1938 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C1935 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C1939 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C1936 +
                    (C22147 * C514 + C22143 * C525 + C22148 * C1385 +
                     C22144 * C1394 + C22149 * C1389 + C22145 * C1402) *
                        C1940 +
                    (C22147 * C526 + C22143 * C544 + C22148 * C1395 +
                     C22144 * C1412 + C22149 * C1403 + C22145 * C1416) *
                        C48345) *
                       C48245 * C47981 * C48025 * C48378 +
                   ((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                     C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                        C1939 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C1935 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C1938) +
                    (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                     C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                        C1936 -
                    (C22149 * C1391 + C22145 * C1406 + C22148 * C1386 +
                     C22144 * C1396 + C22147 * C516 + C22143 * C529) *
                        C1940 -
                    (C22149 * C1407 + C22145 * C1418 + C22148 * C1397 +
                     C22144 * C1413 + C22147 * C530 + C22143 * C546) *
                        C48345) *
                       C48245 * C47981 * C48025 * C48365 +
                   ((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                     C22144 * C316 + C22149 * C310 + C22145 * C325) *
                        C1938 +
                    (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                     C22144 * C335 + C22149 * C326 + C22145 * C340) *
                        C1935 -
                    (C22149 * C1392 + C22145 * C1408 + C22148 * C1015 +
                     C22144 * C1022 + C22147 * C517 + C22143 * C531) *
                        C1939 -
                    (C22149 * C1409 + C22145 * C1419 + C22148 * C1023 +
                     C22144 * C1030 + C22147 * C532 + C22143 * C547) *
                        C1936 +
                    (C22147 * C518 + C22143 * C533 + C22148 * C1387 +
                     C22144 * C1398 + C22149 * C1393 + C22145 * C1410) *
                        C1940 +
                    (C22147 * C534 + C22143 * C548 + C22148 * C1399 +
                     C22144 * C1414 + C22149 * C1411 + C22145 * C1420) *
                        C48345) *
                       C48245 * C47981 * C48025 * C48336)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C1938 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C1935 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C1939 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C1936 +
                    (C22147 * C514 + C22143 * C525 + C22148 * C1385 +
                     C22144 * C1394 + C22149 * C1389 + C22145 * C1402) *
                        C1940 +
                    (C22147 * C526 + C22143 * C544 + C22148 * C1395 +
                     C22144 * C1412 + C22149 * C1403 + C22145 * C1416) *
                        C48345) *
                       C48245 * C47981 * C48381 +
                   ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                     C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                        C1939 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C1935 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C1938) +
                    (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                     C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                        C1936 -
                    (C22149 * C6381 + C22145 * C6383 + C22148 * C1389 +
                     C22144 * C1402 + C22147 * C1385 + C22143 * C1394) *
                        C1940 -
                    (C22149 * C6384 + C22145 * C6387 + C22148 * C1403 +
                     C22144 * C1416 + C22147 * C1395 + C22143 * C1412) *
                        C48345) *
                       C48245 * C47981 * C48369 +
                   ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                     C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                        C1938 +
                    (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                     C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                        C1935 -
                    (C22149 * C6867 + C22145 * C6869 + C22148 * C1813 +
                     C22144 * C1816 + C22147 * C1388 + C22143 * C1400) *
                        C1939 -
                    (C22149 * C6870 + C22145 * C6873 + C22148 * C1817 +
                     C22144 * C1822 + C22147 * C1401 + C22143 * C1415) *
                        C1936 +
                    (C22147 * C1389 + C22143 * C1402 + C22148 * C6381 +
                     C22144 * C6383 + C22149 * C22998 + C22145 * C22999) *
                        C1940 +
                    (C22147 * C1403 + C22143 * C1416 + C22148 * C6384 +
                     C22144 * C6387 + C22149 * C23000 + C22145 * C23001) *
                        C48345) *
                       C48245 * C47981 * C48342) *
                  C47998) /
                     (p * q * std::sqrt(p + q));
    d2ee[115] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C3467 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C3465 -
                     (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                      C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                         C3468 -
                     (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                      C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                         C48129) *
                        C48245 * C47981 * C48310 +
                    ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                      C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                         C3468 -
                     ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                       C22144 * C338 + C22147 * C319 + C22143 * C337) *
                          C3465 +
                      (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                       C22144 * C321 + C22147 * C307 + C22143 * C320) *
                          C3467) +
                     (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                      C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                         C48129) *
                        C48245 * C47981 * C48087) *
                       C48003 +
                   (((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                      C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                         C3468 -
                     ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                       C22144 * C336 + C22147 * C125 + C22143 * C137) *
                          C3465 +
                      (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                       C22144 * C318 + C22147 * C116 + C22143 * C124) *
                          C3467) +
                     (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                      C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                         C48129) *
                        C48245 * C47981 * C48310 +
                    ((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C3467 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C3465 -
                     (C22149 * C1814 + C22145 * C1818 + C22148 * C1390 +
                      C22144 * C1404 + C22147 * C1014 + C22143 * C1020) *
                         C3468 -
                     (C22149 * C1819 + C22145 * C1823 + C22148 * C1405 +
                      C22144 * C1417 + C22147 * C1021 + C22143 * C1029) *
                         C48129) *
                        C48245 * C47981 * C48087) *
                       C48011 +
                   (((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                      C22144 * C316 + C22149 * C310 + C22145 * C325) *
                         C3467 +
                     (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                      C22144 * C335 + C22149 * C326 + C22145 * C340) *
                         C3465 -
                     (C22149 * C1392 + C22145 * C1408 + C22148 * C1015 +
                      C22144 * C1022 + C22147 * C517 + C22143 * C531) *
                         C3468 -
                     (C22149 * C1409 + C22145 * C1419 + C22148 * C1023 +
                      C22144 * C1030 + C22147 * C532 + C22143 * C547) *
                         C48129) *
                        C48245 * C47981 * C48310 +
                    ((C22147 * C1015 + C22143 * C1022 + C22148 * C1392 +
                      C22144 * C1408 + C22149 * C1815 + C22145 * C1820) *
                         C3468 -
                     ((C22149 * C1257 + C22145 * C1269 + C22148 * C326 +
                       C22144 * C340 + C22147 * C315 + C22143 * C335) *
                          C3465 +
                      (C22149 * C1251 + C22145 * C1258 + C22148 * C310 +
                       C22144 * C325 + C22147 * C305 + C22143 * C316) *
                          C3467) +
                     (C22147 * C1023 + C22143 * C1030 + C22148 * C1409 +
                      C22144 * C1419 + C22149 * C1821 + C22145 * C1824) *
                         C48129) *
                        C48245 * C47981 * C48087) *
                       C3074)) /
                 (p * q * std::sqrt(p + q));
    d2ee[116] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C47030 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48125 -
                     (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                      C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                         C47022 -
                     (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                      C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                         C48132 +
                     (C22147 * C514 + C22143 * C525 + C22148 * C1385 +
                      C22144 * C1394 + C22149 * C1389 + C22145 * C1402) *
                         C47036 +
                     (C22147 * C526 + C22143 * C544 + C22148 * C1395 +
                      C22144 * C1412 + C22149 * C1403 + C22145 * C1416) *
                         C4043) *
                        C48245 * C47981 * C48310 +
                    ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                      C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                         C47022 -
                     ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                       C22144 * C338 + C22147 * C319 + C22143 * C337) *
                          C48125 +
                      (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                       C22144 * C321 + C22147 * C307 + C22143 * C320) *
                          C47030) +
                     (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                      C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                         C48132 -
                     (C22149 * C6381 + C22145 * C6383 + C22148 * C1389 +
                      C22144 * C1402 + C22147 * C1385 + C22143 * C1394) *
                         C47036 -
                     (C22149 * C6384 + C22145 * C6387 + C22148 * C1403 +
                      C22144 * C1416 + C22147 * C1395 + C22143 * C1412) *
                         C4043) *
                        C48245 * C47981 * C48087) *
                       C2799 +
                   (((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                      C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                         C47022 -
                     ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                       C22144 * C336 + C22147 * C125 + C22143 * C137) *
                          C48125 +
                      (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                       C22144 * C318 + C22147 * C116 + C22143 * C124) *
                          C47030) +
                     (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                      C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                         C48132 -
                     (C22149 * C1391 + C22145 * C1406 + C22148 * C1386 +
                      C22144 * C1396 + C22147 * C516 + C22143 * C529) *
                         C47036 -
                     (C22149 * C1407 + C22145 * C1418 + C22148 * C1397 +
                      C22144 * C1413 + C22147 * C530 + C22143 * C546) *
                         C4043) *
                        C48245 * C47981 * C48310 +
                    ((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C47030 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48125 -
                     (C22149 * C1814 + C22145 * C1818 + C22148 * C1390 +
                      C22144 * C1404 + C22147 * C1014 + C22143 * C1020) *
                         C47022 -
                     (C22149 * C1819 + C22145 * C1823 + C22148 * C1405 +
                      C22144 * C1417 + C22147 * C1021 + C22143 * C1029) *
                         C48132 +
                     (C22147 * C1386 + C22143 * C1396 + C22148 * C1391 +
                      C22144 * C1406 + C22149 * C6382 + C22145 * C6385) *
                         C47036 +
                     (C22147 * C1397 + C22143 * C1413 + C22148 * C1407 +
                      C22144 * C1418 + C22149 * C6386 + C22145 * C6388) *
                         C4043) *
                        C48245 * C47981 * C48087) *
                       C48008)) /
                 (p * q * std::sqrt(p + q));
    d2ee[117] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C3467 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C3465 -
                     (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                      C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                         C3468 -
                     (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                      C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                         C48129) *
                        C48245 * C47981 * C48381 +
                    ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                      C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                         C3468 -
                     ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                       C22144 * C338 + C22147 * C319 + C22143 * C337) *
                          C3465 +
                      (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                       C22144 * C321 + C22147 * C307 + C22143 * C320) *
                          C3467) +
                     (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                      C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                         C48129) *
                        C48245 * C47981 * C48369 +
                    ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                      C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                         C3467 +
                     (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                      C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                         C3465 -
                     (C22149 * C6867 + C22145 * C6869 + C22148 * C1813 +
                      C22144 * C1816 + C22147 * C1388 + C22143 * C1400) *
                         C3468 -
                     (C22149 * C6870 + C22145 * C6873 + C22148 * C1817 +
                      C22144 * C1822 + C22147 * C1401 + C22143 * C1415) *
                         C48129) *
                        C48245 * C47981 * C48342) *
                       C2799 +
                   (((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                      C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                         C3468 -
                     ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                       C22144 * C336 + C22147 * C125 + C22143 * C137) *
                          C3465 +
                      (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                       C22144 * C318 + C22147 * C116 + C22143 * C124) *
                          C3467) +
                     (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                      C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                         C48129) *
                        C48245 * C47981 * C48381 +
                    ((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C3467 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C3465 -
                     (C22149 * C1814 + C22145 * C1818 + C22148 * C1390 +
                      C22144 * C1404 + C22147 * C1014 + C22143 * C1020) *
                         C3468 -
                     (C22149 * C1819 + C22145 * C1823 + C22148 * C1405 +
                      C22144 * C1417 + C22147 * C1021 + C22143 * C1029) *
                         C48129) *
                        C48245 * C47981 * C48369 +
                    ((C22147 * C1390 + C22143 * C1404 + C22148 * C1814 +
                      C22144 * C1818 + C22149 * C6868 + C22145 * C6871) *
                         C3468 -
                     ((C22149 * C1266 + C22145 * C1273 + C22148 * C1259 +
                       C22144 * C1270 + C22147 * C324 + C22143 * C339) *
                          C3465 +
                      (C22149 * C1255 + C22145 * C1265 + C22148 * C1252 +
                       C22144 * C1260 + C22147 * C309 + C22143 * C323) *
                          C3467) +
                     (C22147 * C1405 + C22143 * C1417 + C22148 * C1819 +
                      C22144 * C1823 + C22149 * C6872 + C22145 * C6874) *
                         C48129) *
                        C48245 * C47981 * C48342) *
                       C48008)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C3467 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C3465 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C3468 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C48129) *
                       C48245 * C47981 * C48025 * C48387 +
                   ((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                     C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                        C3468 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C3465 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C3467) +
                    (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                     C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                        C48129) *
                       C48245 * C47981 * C48025 * C48380 +
                   ((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                     C22144 * C316 + C22149 * C310 + C22145 * C325) *
                        C3467 +
                    (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                     C22144 * C335 + C22149 * C326 + C22145 * C340) *
                        C3465 -
                    (C22149 * C1392 + C22145 * C1408 + C22148 * C1015 +
                     C22144 * C1022 + C22147 * C517 + C22143 * C531) *
                        C3468 -
                    (C22149 * C1409 + C22145 * C1419 + C22148 * C1023 +
                     C22144 * C1030 + C22147 * C532 + C22143 * C547) *
                        C48129) *
                       C48245 * C47981 * C48025 * C48367 +
                   ((C22147 * C519 + C22143 * C535 + C22148 * C1016 +
                     C22144 * C1024 + C22149 * C1691 + C22145 * C1692) *
                        C3468 -
                    ((C22149 * C329 + C22145 * C342 + C22148 * C328 +
                      C22144 * C341 + C22147 * C128 + C22143 * C139) *
                         C3465 +
                     (C22149 * C312 + C22145 * C330 + C22148 * C311 +
                      C22144 * C327 + C22147 * C118 + C22143 * C129) *
                         C3467) +
                    (C22147 * C536 + C22143 * C549 + C22148 * C1025 +
                     C22144 * C1031 + C22149 * C1693 + C22145 * C1694) *
                        C48129) *
                       C48245 * C47981 * C48025 * C48346)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C3757 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C48389 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C3758 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C48386 +
                    (C22147 * C514 + C22143 * C525 + C22148 * C1385 +
                     C22144 * C1394 + C22149 * C1389 + C22145 * C1402) *
                        C3759 +
                    (C22147 * C526 + C22143 * C544 + C22148 * C1395 +
                     C22144 * C1412 + C22149 * C1403 + C22145 * C1416) *
                        C48377 -
                    (C22149 * C7735 + C22145 * C7737 + C22148 * C2581 +
                     C22144 * C2584 + C22147 * C2147 + C22143 * C2153) *
                        C3760 -
                    (C22149 * C7738 + C22145 * C7741 + C22148 * C2585 +
                     C22144 * C2590 + C22147 * C2154 + C22143 * C2165) *
                        C48358) *
                       C48245 * C47981 * C48025 * C2799 +
                   ((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                     C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                        C3758 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48389 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C3757) +
                    (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                     C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                        C48386 -
                    (C22149 * C1391 + C22145 * C1406 + C22148 * C1386 +
                     C22144 * C1396 + C22147 * C516 + C22143 * C529) *
                        C3759 -
                    (C22149 * C1407 + C22145 * C1418 + C22148 * C1397 +
                     C22144 * C1413 + C22147 * C530 + C22143 * C546) *
                        C48377 +
                    (C22147 * C2149 + C22143 * C2157 + C22148 * C2582 +
                     C22144 * C2586 + C22149 * C7736 + C22145 * C7739) *
                        C3760 +
                    (C22147 * C2158 + C22143 * C2167 + C22148 * C2587 +
                     C22144 * C2591 + C22149 * C7740 + C22145 * C7742) *
                        C48358) *
                       C48245 * C47981 * C48025 * C48008)) /
                     (p * q * std::sqrt(p + q));
    d2ee[118] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C47030 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C48125 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C47022 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C48132 +
                    (C22147 * C514 + C22143 * C525 + C22148 * C1385 +
                     C22144 * C1394 + C22149 * C1389 + C22145 * C1402) *
                        C47036 +
                    (C22147 * C526 + C22143 * C544 + C22148 * C1395 +
                     C22144 * C1412 + C22149 * C1403 + C22145 * C1416) *
                        C4043) *
                       C48245 * C47981 * C48025 * C48003 +
                   ((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                     C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                        C47022 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48125 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C47030) +
                    (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                     C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                        C48132 -
                    (C22149 * C1391 + C22145 * C1406 + C22148 * C1386 +
                     C22144 * C1396 + C22147 * C516 + C22143 * C529) *
                        C47036 -
                    (C22149 * C1407 + C22145 * C1418 + C22148 * C1397 +
                     C22144 * C1413 + C22147 * C530 + C22143 * C546) *
                        C4043) *
                       C48245 * C47981 * C48025 * C48011 +
                   ((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                     C22144 * C316 + C22149 * C310 + C22145 * C325) *
                        C47030 +
                    (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                     C22144 * C335 + C22149 * C326 + C22145 * C340) *
                        C48125 -
                    (C22149 * C1392 + C22145 * C1408 + C22148 * C1015 +
                     C22144 * C1022 + C22147 * C517 + C22143 * C531) *
                        C47022 -
                    (C22149 * C1409 + C22145 * C1419 + C22148 * C1023 +
                     C22144 * C1030 + C22147 * C532 + C22143 * C547) *
                        C48132 +
                    (C22147 * C518 + C22143 * C533 + C22148 * C1387 +
                     C22144 * C1398 + C22149 * C1393 + C22145 * C1410) *
                        C47036 +
                    (C22147 * C534 + C22143 * C548 + C22148 * C1399 +
                     C22144 * C1414 + C22149 * C1411 + C22145 * C1420) *
                        C4043) *
                       C48245 * C47981 * C48025 * C3074)) /
                 (p * q * std::sqrt(p + q));
    d2ee[119] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C3467 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C3465 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C3468 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C48129) *
                       C48245 * C47981 * C48025 * C48387 +
                   ((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                     C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                        C3468 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C3465 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C3467) +
                    (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                     C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                        C48129) *
                       C48245 * C47981 * C48025 * C48380 +
                   ((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                     C22144 * C316 + C22149 * C310 + C22145 * C325) *
                        C3467 +
                    (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                     C22144 * C335 + C22149 * C326 + C22145 * C340) *
                        C3465 -
                    (C22149 * C1392 + C22145 * C1408 + C22148 * C1015 +
                     C22144 * C1022 + C22147 * C517 + C22143 * C531) *
                        C3468 -
                    (C22149 * C1409 + C22145 * C1419 + C22148 * C1023 +
                     C22144 * C1030 + C22147 * C532 + C22143 * C547) *
                        C48129) *
                       C48245 * C47981 * C48025 * C48367 +
                   ((C22147 * C519 + C22143 * C535 + C22148 * C1016 +
                     C22144 * C1024 + C22149 * C1691 + C22145 * C1692) *
                        C3468 -
                    ((C22149 * C329 + C22145 * C342 + C22148 * C328 +
                      C22144 * C341 + C22147 * C128 + C22143 * C139) *
                         C3465 +
                     (C22149 * C312 + C22145 * C330 + C22148 * C311 +
                      C22144 * C327 + C22147 * C118 + C22143 * C129) *
                         C3467) +
                    (C22147 * C536 + C22143 * C549 + C22148 * C1025 +
                     C22144 * C1031 + C22149 * C1693 + C22145 * C1694) *
                        C48129) *
                       C48245 * C47981 * C48025 * C48346)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C3467 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C3465 -
                     (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                      C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                         C3468 -
                     (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                      C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                         C48129) *
                        C48245 * C47981 * C48381 +
                    ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                      C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                         C3468 -
                     ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                       C22144 * C338 + C22147 * C319 + C22143 * C337) *
                          C3465 +
                      (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                       C22144 * C321 + C22147 * C307 + C22143 * C320) *
                          C3467) +
                     (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                      C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                         C48129) *
                        C48245 * C47981 * C48369 +
                    ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                      C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                         C3467 +
                     (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                      C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                         C3465 -
                     (C22149 * C6867 + C22145 * C6869 + C22148 * C1813 +
                      C22144 * C1816 + C22147 * C1388 + C22143 * C1400) *
                         C3468 -
                     (C22149 * C6870 + C22145 * C6873 + C22148 * C1817 +
                      C22144 * C1822 + C22147 * C1401 + C22143 * C1415) *
                         C48129) *
                        C48245 * C47981 * C48342) *
                       C2799 +
                   (((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                      C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                         C3468 -
                     ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                       C22144 * C336 + C22147 * C125 + C22143 * C137) *
                          C3465 +
                      (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                       C22144 * C318 + C22147 * C116 + C22143 * C124) *
                          C3467) +
                     (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                      C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                         C48129) *
                        C48245 * C47981 * C48381 +
                    ((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C3467 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C3465 -
                     (C22149 * C1814 + C22145 * C1818 + C22148 * C1390 +
                      C22144 * C1404 + C22147 * C1014 + C22143 * C1020) *
                         C3468 -
                     (C22149 * C1819 + C22145 * C1823 + C22148 * C1405 +
                      C22144 * C1417 + C22147 * C1021 + C22143 * C1029) *
                         C48129) *
                        C48245 * C47981 * C48369 +
                    ((C22147 * C1390 + C22143 * C1404 + C22148 * C1814 +
                      C22144 * C1818 + C22149 * C6868 + C22145 * C6871) *
                         C3468 -
                     ((C22149 * C1266 + C22145 * C1273 + C22148 * C1259 +
                       C22144 * C1270 + C22147 * C324 + C22143 * C339) *
                          C3465 +
                      (C22149 * C1255 + C22145 * C1265 + C22148 * C1252 +
                       C22144 * C1260 + C22147 * C309 + C22143 * C323) *
                          C3467) +
                     (C22147 * C1405 + C22143 * C1417 + C22148 * C1819 +
                      C22144 * C1823 + C22149 * C6872 + C22145 * C6874) *
                         C48129) *
                        C48245 * C47981 * C48342) *
                       C48008)) /
                     (p * q * std::sqrt(p + q));
    d2ee[120] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C114 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48042) *
                        C48245 * C47981 * C48310 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48042 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C114) *
                        C48245 * C47981 * C48087) *
                       C713 +
                   (((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C114 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48042) *
                        C48245 * C47981 * C48087 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48042 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C114) *
                        C48245 * C47981 * C48310) *
                       C714 +
                   (((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                      C22144 * C316 + C22149 * C310 + C22145 * C325) *
                         C114 +
                     (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                      C22144 * C335 + C22149 * C326 + C22145 * C340) *
                         C48042) *
                        C48245 * C47981 * C48310 -
                    ((C22149 * C1257 + C22145 * C1269 + C22148 * C326 +
                      C22144 * C340 + C22147 * C315 + C22143 * C335) *
                         C48042 +
                     (C22149 * C1251 + C22145 * C1258 + C22148 * C310 +
                      C22144 * C325 + C22147 * C305 + C22143 * C316) *
                         C114) *
                        C48245 * C47981 * C48087) *
                       C715 +
                   (((C22147 * C311 + C22143 * C327 + C22148 * C312 +
                      C22144 * C330 + C22149 * C1525 + C22145 * C1526) *
                         C114 +
                     (C22147 * C328 + C22143 * C341 + C22148 * C329 +
                      C22144 * C342 + C22149 * C1527 + C22145 * C1528) *
                         C48042) *
                        C48245 * C47981 * C48087 -
                    ((C22149 * C329 + C22145 * C342 + C22148 * C328 +
                      C22144 * C341 + C22147 * C128 + C22143 * C139) *
                         C48042 +
                     (C22149 * C312 + C22145 * C330 + C22148 * C311 +
                      C22144 * C327 + C22147 * C118 + C22143 * C129) *
                         C114) *
                        C48245 * C47981 * C48310) *
                       C48346)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C114 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48042) *
                        C48245 * C47981 * C1519 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48042 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C114) *
                        C48245 * C47981 * C1520 +
                    ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                      C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                         C114 +
                     (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                      C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                         C48042) *
                        C48245 * C47981 * C1521 -
                    ((C22149 * C6230 + C22145 * C6233 + C22148 * C1264 +
                      C22144 * C1272 + C22147 * C1261 + C22143 * C1271) *
                         C48042 +
                     (C22149 * C6227 + C22145 * C6229 + C22148 * C1254 +
                      C22144 * C1263 + C22147 * C1253 + C22143 * C1262) *
                         C114) *
                        C48245 * C47981 * C48352) *
                       C48296 +
                   (((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C114 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48042) *
                        C48245 * C47981 * C1520 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48042 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C114) *
                        C48245 * C47981 * C1519 -
                    ((C22149 * C1266 + C22145 * C1273 + C22148 * C1259 +
                      C22144 * C1270 + C22147 * C324 + C22143 * C339) *
                         C48042 +
                     (C22149 * C1255 + C22145 * C1265 + C22148 * C1252 +
                      C22144 * C1260 + C22147 * C309 + C22143 * C323) *
                         C114) *
                        C48245 * C47981 * C1521 +
                    ((C22147 * C1252 + C22143 * C1260 + C22148 * C1255 +
                      C22144 * C1265 + C22149 * C6228 + C22145 * C6231) *
                         C114 +
                     (C22147 * C1259 + C22143 * C1270 + C22148 * C1266 +
                      C22144 * C1273 + C22149 * C6232 + C22145 * C6234) *
                         C48042) *
                        C48245 * C47981 * C48352) *
                       C48008)) /
                     (p * q * std::sqrt(p + q));
    d2ee[121] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C831 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48311 -
                     (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                      C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                         C832 -
                     (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                      C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                         C48129) *
                        C48245 * C47981 * C48310 +
                    ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                      C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                         C832 -
                     ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                       C22144 * C338 + C22147 * C319 + C22143 * C337) *
                          C48311 +
                      (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                       C22144 * C321 + C22147 * C307 + C22143 * C320) *
                          C831) +
                     (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                      C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                         C48129) *
                        C48245 * C47981 * C48087) *
                       C302 +
                   (((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                      C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                         C832 -
                     ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                       C22144 * C336 + C22147 * C125 + C22143 * C137) *
                          C48311 +
                      (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                       C22144 * C318 + C22147 * C116 + C22143 * C124) *
                          C831) +
                     (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                      C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                         C48129) *
                        C48245 * C47981 * C48310 +
                    ((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C831 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48311 -
                     (C22149 * C1814 + C22145 * C1818 + C22148 * C1390 +
                      C22144 * C1404 + C22147 * C1014 + C22143 * C1020) *
                         C832 -
                     (C22149 * C1819 + C22145 * C1823 + C22148 * C1405 +
                      C22144 * C1417 + C22147 * C1021 + C22143 * C1029) *
                         C48129) *
                        C48245 * C47981 * C48087) *
                       C303 +
                   (((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                      C22144 * C316 + C22149 * C310 + C22145 * C325) *
                         C831 +
                     (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                      C22144 * C335 + C22149 * C326 + C22145 * C340) *
                         C48311 -
                     (C22149 * C1392 + C22145 * C1408 + C22148 * C1015 +
                      C22144 * C1022 + C22147 * C517 + C22143 * C531) *
                         C832 -
                     (C22149 * C1409 + C22145 * C1419 + C22148 * C1023 +
                      C22144 * C1030 + C22147 * C532 + C22143 * C547) *
                         C48129) *
                        C48245 * C47981 * C48310 +
                    ((C22147 * C1015 + C22143 * C1022 + C22148 * C1392 +
                      C22144 * C1408 + C22149 * C1815 + C22145 * C1820) *
                         C832 -
                     ((C22149 * C1257 + C22145 * C1269 + C22148 * C326 +
                       C22144 * C340 + C22147 * C315 + C22143 * C335) *
                          C48311 +
                      (C22149 * C1251 + C22145 * C1258 + C22148 * C310 +
                       C22144 * C325 + C22147 * C305 + C22143 * C316) *
                          C831) +
                     (C22147 * C1023 + C22143 * C1030 + C22148 * C1409 +
                      C22144 * C1419 + C22149 * C1821 + C22145 * C1824) *
                         C48129) *
                        C48245 * C47981 * C48087) *
                       C48336)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C831 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C48311 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C832 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C48129) *
                       C48245 * C47981 * C1519 +
                   ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                     C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                        C832 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48311 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C831) +
                    (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                     C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                        C48129) *
                       C48245 * C47981 * C1520 +
                   ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                     C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                        C831 +
                    (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                     C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                        C48311 -
                    (C22149 * C6867 + C22145 * C6869 + C22148 * C1813 +
                     C22144 * C1816 + C22147 * C1388 + C22143 * C1400) *
                        C832 -
                    (C22149 * C6870 + C22145 * C6873 + C22148 * C1817 +
                     C22144 * C1822 + C22147 * C1401 + C22143 * C1415) *
                        C48129) *
                       C48245 * C47981 * C1521 +
                   ((C22147 * C1813 + C22143 * C1816 + C22148 * C6867 +
                     C22144 * C6869 + C22149 * C23344 + C22145 * C23345) *
                        C832 -
                    ((C22149 * C6230 + C22145 * C6233 + C22148 * C1264 +
                      C22144 * C1272 + C22147 * C1261 + C22143 * C1271) *
                         C48311 +
                     (C22149 * C6227 + C22145 * C6229 + C22148 * C1254 +
                      C22144 * C1263 + C22147 * C1253 + C22143 * C1262) *
                         C831) +
                    (C22147 * C1817 + C22143 * C1822 + C22148 * C6870 +
                     C22144 * C6873 + C22149 * C23346 + C22145 * C23347) *
                        C48129) *
                       C48245 * C47981 * C48352) *
                  C47998) /
                     (p * q * std::sqrt(p + q));
    d2ee[122] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C114 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48042) *
                        C48245 * C47981 * C48381 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48042 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C114) *
                        C48245 * C47981 * C48369 +
                    ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                      C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                         C114 +
                     (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                      C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                         C48042) *
                        C48245 * C47981 * C48342) *
                       C302 +
                   (((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C114 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48042) *
                        C48245 * C47981 * C48369 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48042 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C114) *
                        C48245 * C47981 * C48381 -
                    ((C22149 * C1266 + C22145 * C1273 + C22148 * C1259 +
                      C22144 * C1270 + C22147 * C324 + C22143 * C339) *
                         C48042 +
                     (C22149 * C1255 + C22145 * C1265 + C22148 * C1252 +
                      C22144 * C1260 + C22147 * C309 + C22143 * C323) *
                         C114) *
                        C48245 * C47981 * C48342) *
                       C303 +
                   (((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                      C22144 * C316 + C22149 * C310 + C22145 * C325) *
                         C114 +
                     (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                      C22144 * C335 + C22149 * C326 + C22145 * C340) *
                         C48042) *
                        C48245 * C47981 * C48381 -
                    ((C22149 * C1257 + C22145 * C1269 + C22148 * C326 +
                      C22144 * C340 + C22147 * C315 + C22143 * C335) *
                         C48042 +
                     (C22149 * C1251 + C22145 * C1258 + C22148 * C310 +
                      C22144 * C325 + C22147 * C305 + C22143 * C316) *
                         C114) *
                        C48245 * C47981 * C48369 +
                    ((C22147 * C310 + C22143 * C325 + C22148 * C1251 +
                      C22144 * C1258 + C22149 * C1256 + C22145 * C1267) *
                         C114 +
                     (C22147 * C326 + C22143 * C340 + C22148 * C1257 +
                      C22144 * C1269 + C22149 * C1268 + C22145 * C1274) *
                         C48042) *
                        C48245 * C47981 * C48342) *
                       C48336)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C114 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C48042) *
                       C48245 * C47981 * C48025 * C108 -
                   ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                     C22144 * C336 + C22147 * C125 + C22143 * C137) *
                        C48042 +
                    (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                     C22144 * C318 + C22147 * C116 + C22143 * C124) *
                        C114) *
                       C48245 * C47981 * C48025 * C109 +
                   ((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                     C22144 * C316 + C22149 * C310 + C22145 * C325) *
                        C114 +
                    (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                     C22144 * C335 + C22149 * C326 + C22145 * C340) *
                        C48042) *
                       C48245 * C47981 * C48025 * C110 -
                   ((C22149 * C329 + C22145 * C342 + C22148 * C328 +
                     C22144 * C341 + C22147 * C128 + C22143 * C139) *
                        C48042 +
                    (C22149 * C312 + C22145 * C330 + C22148 * C311 +
                     C22144 * C327 + C22147 * C118 + C22143 * C129) *
                        C114) *
                       C48245 * C47981 * C48025 * C111 +
                   ((C22147 * C119 + C22143 * C130 + C22148 * C313 +
                     C22144 * C332 + C22149 * C314 + C22145 * C333) *
                        C114 +
                    (C22147 * C131 + C22143 * C140 + C22148 * C331 +
                     C22144 * C343 + C22149 * C334 + C22145 * C344) *
                        C48042) *
                       C48245 * C47981 * C48025 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C510 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C48382 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C511 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C48371 +
                    (C22147 * C514 + C22143 * C525 + C22148 * C1385 +
                     C22144 * C1394 + C22149 * C1389 + C22145 * C1402) *
                        C512 +
                    (C22147 * C526 + C22143 * C544 + C22148 * C1395 +
                     C22144 * C1412 + C22149 * C1403 + C22145 * C1416) *
                        C48345) *
                       C48245 * C47981 * C48025 * C302 +
                   ((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                     C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                        C511 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48382 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C510) +
                    (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                     C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                        C48371 -
                    (C22149 * C1391 + C22145 * C1406 + C22148 * C1386 +
                     C22144 * C1396 + C22147 * C516 + C22143 * C529) *
                        C512 -
                    (C22149 * C1407 + C22145 * C1418 + C22148 * C1397 +
                     C22144 * C1413 + C22147 * C530 + C22143 * C546) *
                        C48345) *
                       C48245 * C47981 * C48025 * C303 +
                   ((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                     C22144 * C316 + C22149 * C310 + C22145 * C325) *
                        C510 +
                    (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                     C22144 * C335 + C22149 * C326 + C22145 * C340) *
                        C48382 -
                    (C22149 * C1392 + C22145 * C1408 + C22148 * C1015 +
                     C22144 * C1022 + C22147 * C517 + C22143 * C531) *
                        C511 -
                    (C22149 * C1409 + C22145 * C1419 + C22148 * C1023 +
                     C22144 * C1030 + C22147 * C532 + C22143 * C547) *
                        C48371 +
                    (C22147 * C518 + C22143 * C533 + C22148 * C1387 +
                     C22144 * C1398 + C22149 * C1393 + C22145 * C1410) *
                        C512 +
                    (C22147 * C534 + C22143 * C548 + C22148 * C1399 +
                     C22144 * C1414 + C22149 * C1411 + C22145 * C1420) *
                        C48345) *
                       C48245 * C47981 * C48025 * C48336)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C114 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48042) *
                        C48245 * C47981 * C1177 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48042 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C114) *
                        C48245 * C47981 * C1178 +
                    ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                      C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                         C114 +
                     (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                      C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                         C48042) *
                        C48245 * C47981 * C48342) *
                       C48378 +
                   (((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C114 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48042) *
                        C48245 * C47981 * C1178 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48042 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C114) *
                        C48245 * C47981 * C1177 -
                    ((C22149 * C1266 + C22145 * C1273 + C22148 * C1259 +
                      C22144 * C1270 + C22147 * C324 + C22143 * C339) *
                         C48042 +
                     (C22149 * C1255 + C22145 * C1265 + C22148 * C1252 +
                      C22144 * C1260 + C22147 * C309 + C22143 * C323) *
                         C114) *
                        C48245 * C47981 * C48342) *
                       C48365 +
                   (((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                      C22144 * C316 + C22149 * C310 + C22145 * C325) *
                         C114 +
                     (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                      C22144 * C335 + C22149 * C326 + C22145 * C340) *
                         C48042) *
                        C48245 * C47981 * C1177 -
                    ((C22149 * C1257 + C22145 * C1269 + C22148 * C326 +
                      C22144 * C340 + C22147 * C315 + C22143 * C335) *
                         C48042 +
                     (C22149 * C1251 + C22145 * C1258 + C22148 * C310 +
                      C22144 * C325 + C22147 * C305 + C22143 * C316) *
                         C114) *
                        C48245 * C47981 * C1178 +
                    ((C22147 * C310 + C22143 * C325 + C22148 * C1251 +
                      C22144 * C1258 + C22149 * C1256 + C22145 * C1267) *
                         C114 +
                     (C22147 * C326 + C22143 * C340 + C22148 * C1257 +
                      C22144 * C1269 + C22149 * C1268 + C22145 * C1274) *
                         C48042) *
                        C48245 * C47981 * C48342) *
                       C48336)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C114 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C48042) *
                       C48245 * C47981 * C1245 -
                   ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                     C22144 * C338 + C22147 * C319 + C22143 * C337) *
                        C48042 +
                    (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                     C22144 * C321 + C22147 * C307 + C22143 * C320) *
                        C114) *
                       C48245 * C47981 * C1246 +
                   ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                     C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                        C114 +
                    (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                     C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                        C48042) *
                       C48245 * C47981 * C1247 -
                   ((C22149 * C6230 + C22145 * C6233 + C22148 * C1264 +
                     C22144 * C1272 + C22147 * C1261 + C22143 * C1271) *
                        C48042 +
                    (C22149 * C6227 + C22145 * C6229 + C22148 * C1254 +
                     C22144 * C1263 + C22147 * C1253 + C22143 * C1262) *
                        C114) *
                       C48245 * C47981 * C1248 +
                   ((C22147 * C1254 + C22143 * C1263 + C22148 * C6227 +
                     C22144 * C6229 + C22149 * C22884 + C22145 * C22885) *
                        C114 +
                    (C22147 * C1264 + C22143 * C1272 + C22148 * C6230 +
                     C22144 * C6233 + C22149 * C22886 + C22145 * C22887) *
                        C48042) *
                       C48245 * C47981 * C1249) *
                  C47998) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C510 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C48382 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C511 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C48371 +
                    (C22147 * C514 + C22143 * C525 + C22148 * C1385 +
                     C22144 * C1394 + C22149 * C1389 + C22145 * C1402) *
                        C512 +
                    (C22147 * C526 + C22143 * C544 + C22148 * C1395 +
                     C22144 * C1412 + C22149 * C1403 + C22145 * C1416) *
                        C48345) *
                       C48245 * C47981 * C1177 +
                   ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                     C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                        C511 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48382 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C510) +
                    (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                     C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                        C48371 -
                    (C22149 * C6381 + C22145 * C6383 + C22148 * C1389 +
                     C22144 * C1402 + C22147 * C1385 + C22143 * C1394) *
                        C512 -
                    (C22149 * C6384 + C22145 * C6387 + C22148 * C1403 +
                     C22144 * C1416 + C22147 * C1395 + C22143 * C1412) *
                        C48345) *
                       C48245 * C47981 * C1178 +
                   ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                     C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                        C510 +
                    (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                     C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                        C48382 -
                    (C22149 * C6867 + C22145 * C6869 + C22148 * C1813 +
                     C22144 * C1816 + C22147 * C1388 + C22143 * C1400) *
                        C511 -
                    (C22149 * C6870 + C22145 * C6873 + C22148 * C1817 +
                     C22144 * C1822 + C22147 * C1401 + C22143 * C1415) *
                        C48371 +
                    (C22147 * C1389 + C22143 * C1402 + C22148 * C6381 +
                     C22144 * C6383 + C22149 * C22998 + C22145 * C22999) *
                        C512 +
                    (C22147 * C1403 + C22143 * C1416 + C22148 * C6384 +
                     C22144 * C6387 + C22149 * C23000 + C22145 * C23001) *
                        C48345) *
                       C48245 * C47981 * C48342) *
                  C47998) /
                     (p * q * std::sqrt(p + q));
    d2ee[123] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C831 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C48311 -
                    (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                     C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                        C832 -
                    (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                     C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                        C48129) *
                       C48245 * C47981 * C48025 * C713 +
                   ((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                     C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                        C832 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48311 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C831) +
                    (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                     C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                        C48129) *
                       C48245 * C47981 * C48025 * C714 +
                   ((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                     C22144 * C316 + C22149 * C310 + C22145 * C325) *
                        C831 +
                    (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                     C22144 * C335 + C22149 * C326 + C22145 * C340) *
                        C48311 -
                    (C22149 * C1392 + C22145 * C1408 + C22148 * C1015 +
                     C22144 * C1022 + C22147 * C517 + C22143 * C531) *
                        C832 -
                    (C22149 * C1409 + C22145 * C1419 + C22148 * C1023 +
                     C22144 * C1030 + C22147 * C532 + C22143 * C547) *
                        C48129) *
                       C48245 * C47981 * C48025 * C715 +
                   ((C22147 * C519 + C22143 * C535 + C22148 * C1016 +
                     C22144 * C1024 + C22149 * C1691 + C22145 * C1692) *
                        C832 -
                    ((C22149 * C329 + C22145 * C342 + C22148 * C328 +
                      C22144 * C341 + C22147 * C128 + C22143 * C139) *
                         C48311 +
                     (C22149 * C312 + C22145 * C330 + C22148 * C311 +
                      C22144 * C327 + C22147 * C118 + C22143 * C129) *
                         C831) +
                    (C22147 * C536 + C22143 * C549 + C22148 * C1025 +
                     C22144 * C1031 + C22149 * C1693 + C22145 * C1694) *
                        C48129) *
                       C48245 * C47981 * C48025 * C48346)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C831 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48311 -
                     (C22149 * C1388 + C22145 * C1400 + C22148 * C1013 +
                      C22144 * C1018 + C22147 * C513 + C22143 * C523) *
                         C832 -
                     (C22149 * C1401 + C22145 * C1415 + C22148 * C1019 +
                      C22144 * C1028 + C22147 * C524 + C22143 * C543) *
                         C48129) *
                        C48245 * C47981 * C1177 +
                    ((C22147 * C1013 + C22143 * C1018 + C22148 * C1388 +
                      C22144 * C1400 + C22149 * C1813 + C22145 * C1816) *
                         C832 -
                     ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                       C22144 * C338 + C22147 * C319 + C22143 * C337) *
                          C48311 +
                      (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                       C22144 * C321 + C22147 * C307 + C22143 * C320) *
                          C831) +
                     (C22147 * C1019 + C22143 * C1028 + C22148 * C1401 +
                      C22144 * C1415 + C22149 * C1817 + C22145 * C1822) *
                         C48129) *
                        C48245 * C47981 * C1178 +
                    ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                      C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                         C831 +
                     (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                      C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                         C48311 -
                     (C22149 * C6867 + C22145 * C6869 + C22148 * C1813 +
                      C22144 * C1816 + C22147 * C1388 + C22143 * C1400) *
                         C832 -
                     (C22149 * C6870 + C22145 * C6873 + C22148 * C1817 +
                      C22144 * C1822 + C22147 * C1401 + C22143 * C1415) *
                         C48129) *
                        C48245 * C47981 * C48342) *
                       C48296 +
                   (((C22147 * C515 + C22143 * C527 + C22148 * C1014 +
                      C22144 * C1020 + C22149 * C1390 + C22145 * C1404) *
                         C832 -
                     ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                       C22144 * C336 + C22147 * C125 + C22143 * C137) *
                          C48311 +
                      (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                       C22144 * C318 + C22147 * C116 + C22143 * C124) *
                          C831) +
                     (C22147 * C528 + C22143 * C545 + C22148 * C1021 +
                      C22144 * C1029 + C22149 * C1405 + C22145 * C1417) *
                         C48129) *
                        C48245 * C47981 * C1177 +
                    ((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C831 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48311 -
                     (C22149 * C1814 + C22145 * C1818 + C22148 * C1390 +
                      C22144 * C1404 + C22147 * C1014 + C22143 * C1020) *
                         C832 -
                     (C22149 * C1819 + C22145 * C1823 + C22148 * C1405 +
                      C22144 * C1417 + C22147 * C1021 + C22143 * C1029) *
                         C48129) *
                        C48245 * C47981 * C1178 +
                    ((C22147 * C1390 + C22143 * C1404 + C22148 * C1814 +
                      C22144 * C1818 + C22149 * C6868 + C22145 * C6871) *
                         C832 -
                     ((C22149 * C1266 + C22145 * C1273 + C22148 * C1259 +
                       C22144 * C1270 + C22147 * C324 + C22143 * C339) *
                          C48311 +
                      (C22149 * C1255 + C22145 * C1265 + C22148 * C1252 +
                       C22144 * C1260 + C22147 * C309 + C22143 * C323) *
                          C831) +
                     (C22147 * C1405 + C22143 * C1417 + C22148 * C1819 +
                      C22144 * C1823 + C22149 * C6872 + C22145 * C6874) *
                         C48129) *
                        C48245 * C47981 * C48342) *
                       C48008)) /
                     (p * q * std::sqrt(p + q));
    d2ee[124] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C114 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C48042) *
                       C48245 * C47981 * C48025 * C108 -
                   ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                     C22144 * C336 + C22147 * C125 + C22143 * C137) *
                        C48042 +
                    (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                     C22144 * C318 + C22147 * C116 + C22143 * C124) *
                        C114) *
                       C48245 * C47981 * C48025 * C109 +
                   ((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                     C22144 * C316 + C22149 * C310 + C22145 * C325) *
                        C114 +
                    (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                     C22144 * C335 + C22149 * C326 + C22145 * C340) *
                        C48042) *
                       C48245 * C47981 * C48025 * C110 -
                   ((C22149 * C329 + C22145 * C342 + C22148 * C328 +
                     C22144 * C341 + C22147 * C128 + C22143 * C139) *
                        C48042 +
                    (C22149 * C312 + C22145 * C330 + C22148 * C311 +
                     C22144 * C327 + C22147 * C118 + C22143 * C129) *
                        C114) *
                       C48245 * C47981 * C48025 * C111 +
                   ((C22147 * C119 + C22143 * C130 + C22148 * C313 +
                     C22144 * C332 + C22149 * C314 + C22145 * C333) *
                        C114 +
                    (C22147 * C131 + C22143 * C140 + C22148 * C331 +
                     C22144 * C343 + C22149 * C334 + C22145 * C344) *
                        C48042) *
                       C48245 * C47981 * C48025 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C114 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48042) *
                        C48245 * C47981 * C48381 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48042 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C114) *
                        C48245 * C47981 * C48369 +
                    ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                      C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                         C114 +
                     (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                      C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                         C48042) *
                        C48245 * C47981 * C48342) *
                       C302 +
                   (((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C114 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48042) *
                        C48245 * C47981 * C48369 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48042 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C114) *
                        C48245 * C47981 * C48381 -
                    ((C22149 * C1266 + C22145 * C1273 + C22148 * C1259 +
                      C22144 * C1270 + C22147 * C324 + C22143 * C339) *
                         C48042 +
                     (C22149 * C1255 + C22145 * C1265 + C22148 * C1252 +
                      C22144 * C1260 + C22147 * C309 + C22143 * C323) *
                         C114) *
                        C48245 * C47981 * C48342) *
                       C303 +
                   (((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                      C22144 * C316 + C22149 * C310 + C22145 * C325) *
                         C114 +
                     (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                      C22144 * C335 + C22149 * C326 + C22145 * C340) *
                         C48042) *
                        C48245 * C47981 * C48381 -
                    ((C22149 * C1257 + C22145 * C1269 + C22148 * C326 +
                      C22144 * C340 + C22147 * C315 + C22143 * C335) *
                         C48042 +
                     (C22149 * C1251 + C22145 * C1258 + C22148 * C310 +
                      C22144 * C325 + C22147 * C305 + C22143 * C316) *
                         C114) *
                        C48245 * C47981 * C48369 +
                    ((C22147 * C310 + C22143 * C325 + C22148 * C1251 +
                      C22144 * C1258 + C22149 * C1256 + C22145 * C1267) *
                         C114 +
                     (C22147 * C326 + C22143 * C340 + C22148 * C1257 +
                      C22144 * C1269 + C22149 * C1268 + C22145 * C1274) *
                         C48042) *
                        C48245 * C47981 * C48342) *
                       C48336)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                      C22144 * C320 + C22149 * C308 + C22145 * C321) *
                         C114 +
                     (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                      C22144 * C337 + C22149 * C322 + C22145 * C338) *
                         C48042) *
                        C48245 * C47981 * C1177 -
                    ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                      C22144 * C338 + C22147 * C319 + C22143 * C337) *
                         C48042 +
                     (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                      C22144 * C321 + C22147 * C307 + C22143 * C320) *
                         C114) *
                        C48245 * C47981 * C1178 +
                    ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                      C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                         C114 +
                     (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                      C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                         C48042) *
                        C48245 * C47981 * C48342) *
                       C48378 +
                   (((C22147 * C306 + C22143 * C318 + C22148 * C309 +
                      C22144 * C323 + C22149 * C1252 + C22145 * C1260) *
                         C114 +
                     (C22147 * C317 + C22143 * C336 + C22148 * C324 +
                      C22144 * C339 + C22149 * C1259 + C22145 * C1270) *
                         C48042) *
                        C48245 * C47981 * C1178 -
                    ((C22149 * C324 + C22145 * C339 + C22148 * C317 +
                      C22144 * C336 + C22147 * C125 + C22143 * C137) *
                         C48042 +
                     (C22149 * C309 + C22145 * C323 + C22148 * C306 +
                      C22144 * C318 + C22147 * C116 + C22143 * C124) *
                         C114) *
                        C48245 * C47981 * C1177 -
                    ((C22149 * C1266 + C22145 * C1273 + C22148 * C1259 +
                      C22144 * C1270 + C22147 * C324 + C22143 * C339) *
                         C48042 +
                     (C22149 * C1255 + C22145 * C1265 + C22148 * C1252 +
                      C22144 * C1260 + C22147 * C309 + C22143 * C323) *
                         C114) *
                        C48245 * C47981 * C48342) *
                       C48365 +
                   (((C22147 * C117 + C22143 * C126 + C22148 * C305 +
                      C22144 * C316 + C22149 * C310 + C22145 * C325) *
                         C114 +
                     (C22147 * C127 + C22143 * C138 + C22148 * C315 +
                      C22144 * C335 + C22149 * C326 + C22145 * C340) *
                         C48042) *
                        C48245 * C47981 * C1177 -
                    ((C22149 * C1257 + C22145 * C1269 + C22148 * C326 +
                      C22144 * C340 + C22147 * C315 + C22143 * C335) *
                         C48042 +
                     (C22149 * C1251 + C22145 * C1258 + C22148 * C310 +
                      C22144 * C325 + C22147 * C305 + C22143 * C316) *
                         C114) *
                        C48245 * C47981 * C1178 +
                    ((C22147 * C310 + C22143 * C325 + C22148 * C1251 +
                      C22144 * C1258 + C22149 * C1256 + C22145 * C1267) *
                         C114 +
                     (C22147 * C326 + C22143 * C340 + C22148 * C1257 +
                      C22144 * C1269 + C22149 * C1268 + C22145 * C1274) *
                         C48042) *
                        C48245 * C47981 * C48342) *
                       C48336)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C22147 * C115 + C22143 * C122 + C22148 * C307 +
                     C22144 * C320 + C22149 * C308 + C22145 * C321) *
                        C114 +
                    (C22147 * C123 + C22143 * C136 + C22148 * C319 +
                     C22144 * C337 + C22149 * C322 + C22145 * C338) *
                        C48042) *
                       C48245 * C47981 * C1245 -
                   ((C22149 * C1261 + C22145 * C1271 + C22148 * C322 +
                     C22144 * C338 + C22147 * C319 + C22143 * C337) *
                        C48042 +
                    (C22149 * C1253 + C22145 * C1262 + C22148 * C308 +
                     C22144 * C321 + C22147 * C307 + C22143 * C320) *
                        C114) *
                       C48245 * C47981 * C1246 +
                   ((C22147 * C308 + C22143 * C321 + C22148 * C1253 +
                     C22144 * C1262 + C22149 * C1254 + C22145 * C1263) *
                        C114 +
                    (C22147 * C322 + C22143 * C338 + C22148 * C1261 +
                     C22144 * C1271 + C22149 * C1264 + C22145 * C1272) *
                        C48042) *
                       C48245 * C47981 * C1247 -
                   ((C22149 * C6230 + C22145 * C6233 + C22148 * C1264 +
                     C22144 * C1272 + C22147 * C1261 + C22143 * C1271) *
                        C48042 +
                    (C22149 * C6227 + C22145 * C6229 + C22148 * C1254 +
                     C22144 * C1263 + C22147 * C1253 + C22143 * C1262) *
                        C114) *
                       C48245 * C47981 * C1248 +
                   ((C22147 * C1254 + C22143 * C1263 + C22148 * C6227 +
                     C22144 * C6229 + C22149 * C22884 + C22145 * C22885) *
                        C114 +
                    (C22147 * C1264 + C22143 * C1272 + C22148 * C6230 +
                     C22144 * C6233 + C22149 * C22886 + C22145 * C22887) *
                        C48042) *
                       C48245 * C47981 * C1249) *
                  C47998) /
                     (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C10789 +
            ((C26604 + C26603) * C114 + (C26606 + C26605) * C48042) * C48362) *
               C47981 * C48083 -
           (((C27076 + C27075) * C48042 + (C27074 + C27073) * C114) * C48362 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C10789) *
               C47981 * C48090 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C10789 +
            ((C27480 + C27479) * C114 + (C27482 + C27481) * C48042) * C48362) *
               C47981 * C3071) *
              C48003 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C10789 +
            ((C17406 + C17407) * C114 + (C17408 + C17409) * C48042) * C48362) *
               C47981 * C48090 -
           (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) * C48362 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C10789) *
               C47981 * C48083 -
           (((C18134 + C18135) * C48042 + (C18132 + C18133) * C114) * C48362 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C10789) *
               C47981 * C3071) *
              C48011 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C10789 +
            ((C16904 + C16905) * C114 + (C16906 + C16907) * C48042) * C48362) *
               C47981 * C48083 -
           (((C17412 + C17413) * C48042 + (C17410 + C17411) * C114) * C48362 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C10789) *
               C47981 * C48090 +
           (((C16717 + C16716) * C114 + (C16715 + C16714) * C48042) * C10789 +
            ((C16473 * C1392 + C16469 * C1408 + C16474 * C1815 +
              C48360 * C1820) *
                 C114 +
             (C16473 * C1409 + C16469 * C1419 + C16474 * C1821 +
              C48360 * C1824) *
                 C48042) *
                C48362) *
               C47981 * C3071) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C831 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48311 -
             (C26603 + C26604) * C832 - (C26605 + C26606) * C48129) *
                C10789 +
            ((C26604 + C26603) * C831 + (C26606 + C26605) * C48311 -
             (C26608 + C26607) * C832 - (C26610 + C26609) * C48129) *
                C48362) *
               C47981 * C48083 +
           (((C27073 + C27074) * C832 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C48311 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C831) +
             (C27075 + C27076) * C48129) *
                C10789 +
            ((C27476 + C27475) * C832 -
             ((C27076 + C27075) * C48311 + (C27074 + C27073) * C831) +
             (C27478 + C27477) * C48129) *
                C48362) *
               C47981 * C48090 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C831 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48311 -
             (C27479 + C27480) * C832 - (C27481 + C27482) * C48129) *
                C10789 +
            ((C27480 + C27479) * C831 + (C27482 + C27481) * C48311 -
             (C27484 + C27483) * C832 - (C27486 + C27485) * C48129) *
                C48362) *
               C47981 * C3071) *
              C2799 +
          ((((C16897 + C16896) * C832 -
             ((C16511 + C16510) * C48311 + (C16509 + C16508) * C831) +
             (C16899 + C16898) * C48129) *
                C10789 +
            ((C16900 + C16901) * C832 -
             ((C16898 + C16899) * C48311 + (C16896 + C16897) * C831) +
             (C16902 + C16903) * C48129) *
                C48362) *
               C47981 * C48083 +
           (((C16705 + C16704) * C831 + (C16703 + C16702) * C48311 -
             (C17407 + C17406) * C832 - (C17409 + C17408) * C48129) *
                C10789 +
            ((C17406 + C17407) * C831 + (C17408 + C17409) * C48311 -
             (C18842 + C18843) * C832 - (C18844 + C18845) * C48129) *
                C48362) *
               C47981 * C48090 +
           (((C18133 + C18132) * C832 -
             ((C16709 + C16708) * C48311 + (C16707 + C16706) * C831) +
             (C18135 + C18134) * C48129) *
                C10789 +
            ((C16473 * C1391 + C16469 * C1406 + C16474 * C6382 +
              C48360 * C6385) *
                 C832 -
             ((C18134 + C18135) * C48311 + (C18132 + C18133) * C831) +
             (C16473 * C1407 + C16469 * C1418 + C16474 * C6386 +
              C48360 * C6388) *
                 C48129) *
                C48362) *
               C47981 * C3071) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C10789 +
            ((C26604 + C26603) * C114 + (C26606 + C26605) * C48042) * C48362) *
               C47981 * C48388 -
           (((C27076 + C27075) * C48042 + (C27074 + C27073) * C114) * C48362 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C10789) *
               C47981 * C48384 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C10789 +
            ((C27480 + C27479) * C114 + (C27482 + C27481) * C48042) * C48362) *
               C47981 * C48374 -
           (((C27952 + C27951) * C48042 + (C27950 + C27949) * C114) * C48362 +
            ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
              C16469 * C1271) *
                 C48042 +
             (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
              C16469 * C1262) *
                 C114) *
                C10789) *
               C47981 * C48352) *
              C2799 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C10789 +
            ((C17406 + C17407) * C114 + (C17408 + C17409) * C48042) * C48362) *
               C47981 * C48384 -
           (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) * C48362 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C10789) *
               C47981 * C48388 -
           (((C18134 + C18135) * C48042 + (C18132 + C18133) * C114) * C48362 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C10789) *
               C47981 * C48374 +
           (((C17929 + C17928) * C114 + (C17927 + C17926) * C48042) * C10789 +
            ((C16473 * C1814 + C16469 * C1818 + C16474 * C6868 +
              C48360 * C6871) *
                 C114 +
             (C16473 * C1819 + C16469 * C1823 + C16474 * C6872 +
              C48360 * C6874) *
                 C48042) *
                C48362) *
               C47981 * C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C10789 +
            ((C26604 + C26603) * C114 + (C26606 + C26605) * C48042) * C48362) *
               C47981 * C2691 -
           (((C27076 + C27075) * C48042 + (C27074 + C27073) * C114) * C48362 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C10789) *
               C47981 * C48087) *
              C48387 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C10789 +
            ((C17406 + C17407) * C114 + (C17408 + C17409) * C48042) * C48362) *
               C47981 * C48087 -
           (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) * C48362 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C10789) *
               C47981 * C2691) *
              C48380 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C10789 +
            ((C16904 + C16905) * C114 + (C16906 + C16907) * C48042) * C48362) *
               C47981 * C2691 -
           (((C17412 + C17413) * C48042 + (C17410 + C17411) * C114) * C48362 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C10789) *
               C47981 * C48087) *
              C48367 +
          ((((C17053 + C17052) * C114 + (C17051 + C17050) * C48042) * C10789 +
            ((C16473 * C1016 + C16469 * C1024 + C16474 * C1691 +
              C48360 * C1692) *
                 C114 +
             (C16473 * C1025 + C16469 * C1031 + C16474 * C1693 +
              C48360 * C1694) *
                 C48042) *
                C48362) *
               C47981 * C48087 -
           (((C17194 + C17195) * C48042 + (C17192 + C17193) * C114) * C48362 +
            ((C16519 + C16518) * C48042 + (C16517 + C16516) * C114) * C10789) *
               C47981 * C2691) *
              C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C510 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48382 -
             (C26603 + C26604) * C511 - (C26605 + C26606) * C48371 +
             (C26607 + C26608) * C512 + (C26609 + C26610) * C48345) *
                C10789 +
            ((C26604 + C26603) * C510 + (C26606 + C26605) * C48382 -
             (C26608 + C26607) * C511 - (C26610 + C26609) * C48371 +
             (C28348 + C28347) * C512 + (C28350 + C28349) * C48345) *
                C48362) *
               C47981 * C2691 +
           (((C27073 + C27074) * C511 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C48382 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C510) +
             (C27075 + C27076) * C48371 - (C27475 + C27476) * C512 -
             (C27477 + C27478) * C48345) *
                C10789 +
            ((C27476 + C27475) * C511 -
             ((C27076 + C27075) * C48382 + (C27074 + C27073) * C510) +
             (C27478 + C27477) * C48371 - (C28818 + C28817) * C512 -
             (C28820 + C28819) * C48345) *
                C48362) *
               C47981 * C48087) *
              C2799 +
          ((((C16897 + C16896) * C511 -
             ((C16511 + C16510) * C48382 + (C16509 + C16508) * C510) +
             (C16899 + C16898) * C48371 - (C16901 + C16900) * C512 -
             (C16903 + C16902) * C48345) *
                C10789 +
            ((C16900 + C16901) * C511 -
             ((C16898 + C16899) * C48382 + (C16896 + C16897) * C510) +
             (C16902 + C16903) * C48371 - (C18984 + C18985) * C512 -
             (C18986 + C18987) * C48345) *
                C48362) *
               C47981 * C2691 +
           (((C16705 + C16704) * C510 + (C16703 + C16702) * C48382 -
             (C17407 + C17406) * C511 - (C17409 + C17408) * C48371 +
             (C18843 + C18842) * C512 + (C18845 + C18844) * C48345) *
                C10789 +
            ((C17406 + C17407) * C510 + (C17408 + C17409) * C48382 -
             (C18842 + C18843) * C511 - (C18844 + C18845) * C48371 +
             (C16473 * C2582 + C16469 * C2586 + C16474 * C7736 +
              C48360 * C7739) *
                 C512 +
             (C16473 * C2587 + C16469 * C2591 + C16474 * C7740 +
              C48360 * C7742) *
                 C48345) *
                C48362) *
               C47981 * C48087) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C831 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48311 -
             (C26603 + C26604) * C832 - (C26605 + C26606) * C48129) *
                C10789 +
            ((C26604 + C26603) * C831 + (C26606 + C26605) * C48311 -
             (C26608 + C26607) * C832 - (C26610 + C26609) * C48129) *
                C48362) *
               C47981 * C2691 +
           (((C27073 + C27074) * C832 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C48311 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C831) +
             (C27075 + C27076) * C48129) *
                C10789 +
            ((C27476 + C27475) * C832 -
             ((C27076 + C27075) * C48311 + (C27074 + C27073) * C831) +
             (C27478 + C27477) * C48129) *
                C48362) *
               C47981 * C48087) *
              C48003 +
          ((((C16897 + C16896) * C832 -
             ((C16511 + C16510) * C48311 + (C16509 + C16508) * C831) +
             (C16899 + C16898) * C48129) *
                C10789 +
            ((C16900 + C16901) * C832 -
             ((C16898 + C16899) * C48311 + (C16896 + C16897) * C831) +
             (C16902 + C16903) * C48129) *
                C48362) *
               C47981 * C2691 +
           (((C16705 + C16704) * C831 + (C16703 + C16702) * C48311 -
             (C17407 + C17406) * C832 - (C17409 + C17408) * C48129) *
                C10789 +
            ((C17406 + C17407) * C831 + (C17408 + C17409) * C48311 -
             (C18842 + C18843) * C832 - (C18844 + C18845) * C48129) *
                C48362) *
               C47981 * C48087) *
              C48011 +
          ((((C16515 + C16514) * C831 + (C16513 + C16512) * C48311 -
             (C16905 + C16904) * C832 - (C16907 + C16906) * C48129) *
                C10789 +
            ((C16904 + C16905) * C831 + (C16906 + C16907) * C48311 -
             (C16908 + C16909) * C832 - (C16910 + C16911) * C48129) *
                C48362) *
               C47981 * C2691 +
           (((C17411 + C17410) * C832 -
             ((C16713 + C16712) * C48311 + (C16711 + C16710) * C831) +
             (C17413 + C17412) * C48129) *
                C10789 +
            ((C16473 * C1387 + C16469 * C1398 + C16474 * C1393 +
              C48360 * C1410) *
                 C832 -
             ((C17412 + C17413) * C48311 + (C17410 + C17411) * C831) +
             (C16473 * C1399 + C16469 * C1414 + C16474 * C1411 +
              C48360 * C1420) *
                 C48129) *
                C48362) *
               C47981 * C48087) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C10789 +
            ((C26604 + C26603) * C114 + (C26606 + C26605) * C48042) * C48362) *
               C47981 * C2691 -
           (((C27076 + C27075) * C48042 + (C27074 + C27073) * C114) * C48362 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C10789) *
               C47981 * C48087) *
              C48387 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C10789 +
            ((C17406 + C17407) * C114 + (C17408 + C17409) * C48042) * C48362) *
               C47981 * C48087 -
           (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) * C48362 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C10789) *
               C47981 * C2691) *
              C48380 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C10789 +
            ((C16904 + C16905) * C114 + (C16906 + C16907) * C48042) * C48362) *
               C47981 * C2691 -
           (((C17412 + C17413) * C48042 + (C17410 + C17411) * C114) * C48362 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C10789) *
               C47981 * C48087) *
              C48367 +
          ((((C17053 + C17052) * C114 + (C17051 + C17050) * C48042) * C10789 +
            ((C16473 * C1016 + C16469 * C1024 + C16474 * C1691 +
              C48360 * C1692) *
                 C114 +
             (C16473 * C1025 + C16469 * C1031 + C16474 * C1693 +
              C48360 * C1694) *
                 C48042) *
                C48362) *
               C47981 * C48087 -
           (((C17194 + C17195) * C48042 + (C17192 + C17193) * C114) * C48362 +
            ((C16519 + C16518) * C48042 + (C16517 + C16516) * C114) * C10789) *
               C47981 * C2691) *
              C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C10789 +
            ((C26604 + C26603) * C114 + (C26606 + C26605) * C48042) * C48362) *
               C47981 * C48388 -
           (((C27076 + C27075) * C48042 + (C27074 + C27073) * C114) * C48362 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C10789) *
               C47981 * C48384 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C10789 +
            ((C27480 + C27479) * C114 + (C27482 + C27481) * C48042) * C48362) *
               C47981 * C48374 -
           (((C27952 + C27951) * C48042 + (C27950 + C27949) * C114) * C48362 +
            ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
              C16469 * C1271) *
                 C48042 +
             (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
              C16469 * C1262) *
                 C114) *
                C10789) *
               C47981 * C48352) *
              C2799 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C10789 +
            ((C17406 + C17407) * C114 + (C17408 + C17409) * C48042) * C48362) *
               C47981 * C48384 -
           (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) * C48362 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C10789) *
               C47981 * C48388 -
           (((C18134 + C18135) * C48042 + (C18132 + C18133) * C114) * C48362 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C10789) *
               C47981 * C48374 +
           (((C17929 + C17928) * C114 + (C17927 + C17926) * C48042) * C10789 +
            ((C16473 * C1814 + C16469 * C1818 + C16474 * C6868 +
              C48360 * C6871) *
                 C114 +
             (C16473 * C1819 + C16469 * C1823 + C16474 * C6872 +
              C48360 * C6874) *
                 C48042) *
                C48362) *
               C47981 * C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C3467 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C3465 -
             (C26603 + C26604) * C3468 - (C26605 + C26606) * C48129) *
                C10789 +
            ((C26604 + C26603) * C3467 + (C26606 + C26605) * C3465 -
             (C26608 + C26607) * C3468 - (C26610 + C26609) * C48129) *
                C48362) *
               C47981 * C48083 +
           (((C27073 + C27074) * C3468 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C3465 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C3467) +
             (C27075 + C27076) * C48129) *
                C10789 +
            ((C27476 + C27475) * C3468 -
             ((C27076 + C27075) * C3465 + (C27074 + C27073) * C3467) +
             (C27478 + C27477) * C48129) *
                C48362) *
               C47981 * C48090 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C3467 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C3465 -
             (C27479 + C27480) * C3468 - (C27481 + C27482) * C48129) *
                C10789 +
            ((C27480 + C27479) * C3467 + (C27482 + C27481) * C3465 -
             (C27484 + C27483) * C3468 - (C27486 + C27485) * C48129) *
                C48362) *
               C47981 * C3071) *
              C48296 +
          ((((C16897 + C16896) * C3468 -
             ((C16511 + C16510) * C3465 + (C16509 + C16508) * C3467) +
             (C16899 + C16898) * C48129) *
                C10789 +
            ((C16900 + C16901) * C3468 -
             ((C16898 + C16899) * C3465 + (C16896 + C16897) * C3467) +
             (C16902 + C16903) * C48129) *
                C48362) *
               C47981 * C48083 +
           (((C16705 + C16704) * C3467 + (C16703 + C16702) * C3465 -
             (C17407 + C17406) * C3468 - (C17409 + C17408) * C48129) *
                C10789 +
            ((C17406 + C17407) * C3467 + (C17408 + C17409) * C3465 -
             (C18842 + C18843) * C3468 - (C18844 + C18845) * C48129) *
                C48362) *
               C47981 * C48090 +
           (((C18133 + C18132) * C3468 -
             ((C16709 + C16708) * C3465 + (C16707 + C16706) * C3467) +
             (C18135 + C18134) * C48129) *
                C10789 +
            ((C16473 * C1391 + C16469 * C1406 + C16474 * C6382 +
              C48360 * C6385) *
                 C3468 -
             ((C18134 + C18135) * C3465 + (C18132 + C18133) * C3467) +
             (C16473 * C1407 + C16469 * C1418 + C16474 * C6386 +
              C48360 * C6388) *
                 C48129) *
                C48362) *
               C47981 * C3071) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C47030 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48125 -
            (C26603 + C26604) * C47022 - (C26605 + C26606) * C48132 +
            (C26607 + C26608) * C47036 + (C26609 + C26610) * C4043) *
               C10789 +
           ((C26604 + C26603) * C47030 + (C26606 + C26605) * C48125 -
            (C26608 + C26607) * C47022 - (C26610 + C26609) * C48132 +
            (C28348 + C28347) * C47036 + (C28350 + C28349) * C4043) *
               C48362) *
              C47981 * C48083 +
          (((C27073 + C27074) * C47022 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48125 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C47030) +
            (C27075 + C27076) * C48132 - (C27475 + C27476) * C47036 -
            (C27477 + C27478) * C4043) *
               C10789 +
           ((C27476 + C27475) * C47022 -
            ((C27076 + C27075) * C48125 + (C27074 + C27073) * C47030) +
            (C27478 + C27477) * C48132 - (C28818 + C28817) * C47036 -
            (C28820 + C28819) * C4043) *
               C48362) *
              C47981 * C48090 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C47030 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C48125 -
            (C27479 + C27480) * C47022 - (C27481 + C27482) * C48132 +
            (C27483 + C27484) * C47036 + (C27485 + C27486) * C4043) *
               C10789 +
           ((C27480 + C27479) * C47030 + (C27482 + C27481) * C48125 -
            (C27484 + C27483) * C47022 - (C27486 + C27485) * C48132 +
            (C16473 * C7735 + C16469 * C7737 + C16474 * C23976 +
             C48360 * C23977) *
                C47036 +
            (C16473 * C7738 + C16469 * C7741 + C16474 * C23978 +
             C48360 * C23979) *
                C4043) *
               C48362) *
              C47981 * C3071) *
         C47998) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C3467 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C3465 -
            (C26603 + C26604) * C3468 - (C26605 + C26606) * C48129) *
               C10789 +
           ((C26604 + C26603) * C3467 + (C26606 + C26605) * C3465 -
            (C26608 + C26607) * C3468 - (C26610 + C26609) * C48129) *
               C48362) *
              C47981 * C48388 +
          (((C27073 + C27074) * C3468 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C3465 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C3467) +
            (C27075 + C27076) * C48129) *
               C10789 +
           ((C27476 + C27475) * C3468 -
            ((C27076 + C27075) * C3465 + (C27074 + C27073) * C3467) +
            (C27478 + C27477) * C48129) *
               C48362) *
              C47981 * C48384 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C3467 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C3465 -
            (C27479 + C27480) * C3468 - (C27481 + C27482) * C48129) *
               C10789 +
           ((C27480 + C27479) * C3467 + (C27482 + C27481) * C3465 -
            (C27484 + C27483) * C3468 - (C27486 + C27485) * C48129) *
               C48362) *
              C47981 * C48374 +
          (((C27949 + C27950) * C3468 -
            ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
              C16469 * C1271) *
                 C3465 +
             (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
              C16469 * C1262) *
                 C3467) +
            (C27951 + C27952) * C48129) *
               C10789 +
           ((C16473 * C6381 + C16469 * C6383 + C16474 * C22998 +
             C48360 * C22999) *
                C3468 -
            ((C27952 + C27951) * C3465 + (C27950 + C27949) * C3467) +
            (C16473 * C6384 + C16469 * C6387 + C16474 * C23000 +
             C48360 * C23001) *
                C48129) *
               C48362) *
              C47981 * C48352) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C3467 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C3465 -
             (C26603 + C26604) * C3468 - (C26605 + C26606) * C48129) *
                C10789 +
            ((C26604 + C26603) * C3467 + (C26606 + C26605) * C3465 -
             (C26608 + C26607) * C3468 - (C26610 + C26609) * C48129) *
                C48362) *
               C47981 * C2691 +
           (((C27073 + C27074) * C3468 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C3465 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C3467) +
             (C27075 + C27076) * C48129) *
                C10789 +
            ((C27476 + C27475) * C3468 -
             ((C27076 + C27075) * C3465 + (C27074 + C27073) * C3467) +
             (C27478 + C27477) * C48129) *
                C48362) *
               C47981 * C48087) *
              C48378 +
          ((((C16897 + C16896) * C3468 -
             ((C16511 + C16510) * C3465 + (C16509 + C16508) * C3467) +
             (C16899 + C16898) * C48129) *
                C10789 +
            ((C16900 + C16901) * C3468 -
             ((C16898 + C16899) * C3465 + (C16896 + C16897) * C3467) +
             (C16902 + C16903) * C48129) *
                C48362) *
               C47981 * C2691 +
           (((C16705 + C16704) * C3467 + (C16703 + C16702) * C3465 -
             (C17407 + C17406) * C3468 - (C17409 + C17408) * C48129) *
                C10789 +
            ((C17406 + C17407) * C3467 + (C17408 + C17409) * C3465 -
             (C18842 + C18843) * C3468 - (C18844 + C18845) * C48129) *
                C48362) *
               C47981 * C48087) *
              C48365 +
          ((((C16515 + C16514) * C3467 + (C16513 + C16512) * C3465 -
             (C16905 + C16904) * C3468 - (C16907 + C16906) * C48129) *
                C10789 +
            ((C16904 + C16905) * C3467 + (C16906 + C16907) * C3465 -
             (C16908 + C16909) * C3468 - (C16910 + C16911) * C48129) *
                C48362) *
               C47981 * C2691 +
           (((C17411 + C17410) * C3468 -
             ((C16713 + C16712) * C3465 + (C16711 + C16710) * C3467) +
             (C17413 + C17412) * C48129) *
                C10789 +
            ((C16473 * C1387 + C16469 * C1398 + C16474 * C1393 +
              C48360 * C1410) *
                 C3468 -
             ((C17412 + C17413) * C3465 + (C17410 + C17411) * C3467) +
             (C16473 * C1399 + C16469 * C1414 + C16474 * C1411 +
              C48360 * C1420) *
                 C48129) *
                C48362) *
               C47981 * C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C3757 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48389 -
            (C26603 + C26604) * C3758 - (C26605 + C26606) * C48386 +
            (C26607 + C26608) * C3759 + (C26609 + C26610) * C48377 -
            (C28347 + C28348) * C3760 - (C28349 + C28350) * C48358) *
               C10789 +
           ((C26604 + C26603) * C3757 + (C26606 + C26605) * C48389 -
            (C26608 + C26607) * C3758 - (C26610 + C26609) * C48386 +
            (C28348 + C28347) * C3759 + (C28350 + C28349) * C48377 -
            (C28352 + C28351) * C3760 - (C28354 + C28353) * C48358) *
               C48362) *
              C47981 * C2691 +
          (((C27073 + C27074) * C3758 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48389 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C3757) +
            (C27075 + C27076) * C48386 - (C27475 + C27476) * C3759 -
            (C27477 + C27478) * C48377 + (C28817 + C28818) * C3760 +
            (C28819 + C28820) * C48358) *
               C10789 +
           ((C27476 + C27475) * C3758 -
            ((C27076 + C27075) * C48389 + (C27074 + C27073) * C3757) +
            (C27478 + C27477) * C48386 - (C28818 + C28817) * C3759 -
            (C28820 + C28819) * C48377 +
            (C16473 * C7249 + C16469 * C7251 + C16474 * C23630 +
             C48360 * C23631) *
                C3760 +
            (C16473 * C7252 + C16469 * C7255 + C16474 * C23632 +
             C48360 * C23633) *
                C48358) *
               C48362) *
              C47981 * C48087) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C47030 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48125 -
             (C26603 + C26604) * C47022 - (C26605 + C26606) * C48132 +
             (C26607 + C26608) * C47036 + (C26609 + C26610) * C4043) *
                C10789 +
            ((C26604 + C26603) * C47030 + (C26606 + C26605) * C48125 -
             (C26608 + C26607) * C47022 - (C26610 + C26609) * C48132 +
             (C28348 + C28347) * C47036 + (C28350 + C28349) * C4043) *
                C48362) *
               C47981 * C2691 +
           (((C27073 + C27074) * C47022 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C48125 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C47030) +
             (C27075 + C27076) * C48132 - (C27475 + C27476) * C47036 -
             (C27477 + C27478) * C4043) *
                C10789 +
            ((C27476 + C27475) * C47022 -
             ((C27076 + C27075) * C48125 + (C27074 + C27073) * C47030) +
             (C27478 + C27477) * C48132 - (C28818 + C28817) * C47036 -
             (C28820 + C28819) * C4043) *
                C48362) *
               C47981 * C48087) *
              C48296 +
          ((((C16897 + C16896) * C47022 -
             ((C16511 + C16510) * C48125 + (C16509 + C16508) * C47030) +
             (C16899 + C16898) * C48132 - (C16901 + C16900) * C47036 -
             (C16903 + C16902) * C4043) *
                C10789 +
            ((C16900 + C16901) * C47022 -
             ((C16898 + C16899) * C48125 + (C16896 + C16897) * C47030) +
             (C16902 + C16903) * C48132 - (C18984 + C18985) * C47036 -
             (C18986 + C18987) * C4043) *
                C48362) *
               C47981 * C2691 +
           (((C16705 + C16704) * C47030 + (C16703 + C16702) * C48125 -
             (C17407 + C17406) * C47022 - (C17409 + C17408) * C48132 +
             (C18843 + C18842) * C47036 + (C18845 + C18844) * C4043) *
                C10789 +
            ((C17406 + C17407) * C47030 + (C17408 + C17409) * C48125 -
             (C18842 + C18843) * C47022 - (C18844 + C18845) * C48132 +
             (C16473 * C2582 + C16469 * C2586 + C16474 * C7736 +
              C48360 * C7739) *
                 C47036 +
             (C16473 * C2587 + C16469 * C2591 + C16474 * C7740 +
              C48360 * C7742) *
                 C4043) *
                C48362) *
               C47981 * C48087) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C3467 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C3465 -
             (C26603 + C26604) * C3468 - (C26605 + C26606) * C48129) *
                C10789 +
            ((C26604 + C26603) * C3467 + (C26606 + C26605) * C3465 -
             (C26608 + C26607) * C3468 - (C26610 + C26609) * C48129) *
                C48362) *
               C47981 * C2691 +
           (((C27073 + C27074) * C3468 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C3465 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C3467) +
             (C27075 + C27076) * C48129) *
                C10789 +
            ((C27476 + C27475) * C3468 -
             ((C27076 + C27075) * C3465 + (C27074 + C27073) * C3467) +
             (C27478 + C27477) * C48129) *
                C48362) *
               C47981 * C48087) *
              C48378 +
          ((((C16897 + C16896) * C3468 -
             ((C16511 + C16510) * C3465 + (C16509 + C16508) * C3467) +
             (C16899 + C16898) * C48129) *
                C10789 +
            ((C16900 + C16901) * C3468 -
             ((C16898 + C16899) * C3465 + (C16896 + C16897) * C3467) +
             (C16902 + C16903) * C48129) *
                C48362) *
               C47981 * C2691 +
           (((C16705 + C16704) * C3467 + (C16703 + C16702) * C3465 -
             (C17407 + C17406) * C3468 - (C17409 + C17408) * C48129) *
                C10789 +
            ((C17406 + C17407) * C3467 + (C17408 + C17409) * C3465 -
             (C18842 + C18843) * C3468 - (C18844 + C18845) * C48129) *
                C48362) *
               C47981 * C48087) *
              C48365 +
          ((((C16515 + C16514) * C3467 + (C16513 + C16512) * C3465 -
             (C16905 + C16904) * C3468 - (C16907 + C16906) * C48129) *
                C10789 +
            ((C16904 + C16905) * C3467 + (C16906 + C16907) * C3465 -
             (C16908 + C16909) * C3468 - (C16910 + C16911) * C48129) *
                C48362) *
               C47981 * C2691 +
           (((C17411 + C17410) * C3468 -
             ((C16713 + C16712) * C3465 + (C16711 + C16710) * C3467) +
             (C17413 + C17412) * C48129) *
                C10789 +
            ((C16473 * C1387 + C16469 * C1398 + C16474 * C1393 +
              C48360 * C1410) *
                 C3468 -
             ((C17412 + C17413) * C3465 + (C17410 + C17411) * C3467) +
             (C16473 * C1399 + C16469 * C1414 + C16474 * C1411 +
              C48360 * C1420) *
                 C48129) *
                C48362) *
               C47981 * C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C3467 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C3465 -
            (C26603 + C26604) * C3468 - (C26605 + C26606) * C48129) *
               C10789 +
           ((C26604 + C26603) * C3467 + (C26606 + C26605) * C3465 -
            (C26608 + C26607) * C3468 - (C26610 + C26609) * C48129) *
               C48362) *
              C47981 * C48388 +
          (((C27073 + C27074) * C3468 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C3465 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C3467) +
            (C27075 + C27076) * C48129) *
               C10789 +
           ((C27476 + C27475) * C3468 -
            ((C27076 + C27075) * C3465 + (C27074 + C27073) * C3467) +
            (C27478 + C27477) * C48129) *
               C48362) *
              C47981 * C48384 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C3467 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C3465 -
            (C27479 + C27480) * C3468 - (C27481 + C27482) * C48129) *
               C10789 +
           ((C27480 + C27479) * C3467 + (C27482 + C27481) * C3465 -
            (C27484 + C27483) * C3468 - (C27486 + C27485) * C48129) *
               C48362) *
              C47981 * C48374 +
          (((C27949 + C27950) * C3468 -
            ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
              C16469 * C1271) *
                 C3465 +
             (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
              C16469 * C1262) *
                 C3467) +
            (C27951 + C27952) * C48129) *
               C10789 +
           ((C16473 * C6381 + C16469 * C6383 + C16474 * C22998 +
             C48360 * C22999) *
                C3468 -
            ((C27952 + C27951) * C3465 + (C27950 + C27949) * C3467) +
            (C16473 * C6384 + C16469 * C6387 + C16474 * C23000 +
             C48360 * C23001) *
                C48129) *
               C48362) *
              C47981 * C48352) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C10789 +
            ((C26604 + C26603) * C114 + (C26606 + C26605) * C48042) * C48362) *
               C47981 * C1519 -
           (((C27076 + C27075) * C48042 + (C27074 + C27073) * C114) * C48362 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C10789) *
               C47981 * C1520 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C10789 +
            ((C27480 + C27479) * C114 + (C27482 + C27481) * C48042) * C48362) *
               C47981 * C1521 -
           (((C16474 * C6870 + C48360 * C6873 + C16473 * C1817 +
              C16469 * C1822) *
                 C48042 +
             (C16474 * C6867 + C48360 * C6869 + C16473 * C1813 +
              C16469 * C1816) *
                 C114) *
                C48362 +
            ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
              C16469 * C1271) *
                 C48042 +
             (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
              C16469 * C1262) *
                 C114) *
                C10789) *
               C47981 * C48352) *
              C48296 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C10789 +
            ((C17406 + C17407) * C114 + (C17408 + C17409) * C48042) * C48362) *
               C47981 * C1520 -
           (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) * C48362 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C10789) *
               C47981 * C1519 -
           (((C18134 + C18135) * C48042 + (C18132 + C18133) * C114) * C48362 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C10789) *
               C47981 * C1521 +
           (((C17929 + C17928) * C114 + (C17927 + C17926) * C48042) * C10789 +
            ((C16473 * C1814 + C16469 * C1818 + C16474 * C6868 +
              C48360 * C6871) *
                 C114 +
             (C16473 * C1819 + C16469 * C1823 + C16474 * C6872 +
              C48360 * C6874) *
                 C48042) *
                C48362) *
               C47981 * C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C10789 +
            ((C26604 + C26603) * C114 + (C26606 + C26605) * C48042) * C48362) *
               C47981 * C48310 -
           (((C16474 * C1401 + C48360 * C1415 + C16473 * C1019 +
              C16469 * C1028) *
                 C48042 +
             (C16474 * C1388 + C48360 * C1400 + C16473 * C1013 +
              C16469 * C1018) *
                 C114) *
                C48362 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C10789) *
               C47981 * C48087) *
              C713 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C10789 +
            ((C17406 + C17407) * C114 + (C17408 + C17409) * C48042) * C48362) *
               C47981 * C48087 -
           (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) * C48362 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C10789) *
               C47981 * C48310) *
              C714 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C10789 +
            ((C16904 + C16905) * C114 + (C16906 + C16907) * C48042) * C48362) *
               C47981 * C48310 -
           (((C17412 + C17413) * C48042 + (C17410 + C17411) * C114) * C48362 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C10789) *
               C47981 * C48087) *
              C715 +
          ((((C17053 + C17052) * C114 + (C17051 + C17050) * C48042) * C10789 +
            ((C16473 * C1016 + C16469 * C1024 + C16474 * C1691 +
              C48360 * C1692) *
                 C114 +
             (C16473 * C1025 + C16469 * C1031 + C16474 * C1693 +
              C48360 * C1694) *
                 C48042) *
                C48362) *
               C47981 * C48087 -
           (((C17194 + C17195) * C48042 + (C17192 + C17193) * C114) * C48362 +
            ((C16519 + C16518) * C48042 + (C16517 + C16516) * C114) * C10789) *
               C47981 * C48310) *
              C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C1938 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C1935 -
             (C26603 + C26604) * C1939 - (C26605 + C26606) * C1936 +
             (C26607 + C26608) * C1940 + (C26609 + C26610) * C48345) *
                C10789 +
            ((C26604 + C26603) * C1938 + (C26606 + C26605) * C1935 -
             (C26608 + C26607) * C1939 - (C26610 + C26609) * C1936 +
             (C28348 + C28347) * C1940 + (C28350 + C28349) * C48345) *
                C48362) *
               C47981 * C48310 +
           (((C27073 + C27074) * C1939 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C1935 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C1938) +
             (C27075 + C27076) * C1936 - (C27475 + C27476) * C1940 -
             (C27477 + C27478) * C48345) *
                C10789 +
            ((C27476 + C27475) * C1939 -
             ((C27076 + C27075) * C1935 + (C27074 + C27073) * C1938) +
             (C27478 + C27477) * C1936 -
             (C16474 * C7735 + C48360 * C7737 + C16473 * C2581 +
              C16469 * C2584) *
                 C1940 -
             (C16474 * C7738 + C48360 * C7741 + C16473 * C2585 +
              C16469 * C2590) *
                 C48345) *
                C48362) *
               C47981 * C48087) *
              C48296 +
          ((((C16897 + C16896) * C1939 -
             ((C16511 + C16510) * C1935 + (C16509 + C16508) * C1938) +
             (C16899 + C16898) * C1936 - (C16901 + C16900) * C1940 -
             (C16903 + C16902) * C48345) *
                C10789 +
            ((C16900 + C16901) * C1939 -
             ((C16898 + C16899) * C1935 + (C16896 + C16897) * C1938) +
             (C16902 + C16903) * C1936 - (C18984 + C18985) * C1940 -
             (C18986 + C18987) * C48345) *
                C48362) *
               C47981 * C48310 +
           (((C16705 + C16704) * C1938 + (C16703 + C16702) * C1935 -
             (C17407 + C17406) * C1939 - (C17409 + C17408) * C1936 +
             (C18843 + C18842) * C1940 + (C18845 + C18844) * C48345) *
                C10789 +
            ((C17406 + C17407) * C1938 + (C17408 + C17409) * C1935 -
             (C18842 + C18843) * C1939 - (C18844 + C18845) * C1936 +
             (C16473 * C2582 + C16469 * C2586 + C16474 * C7736 +
              C48360 * C7739) *
                 C1940 +
             (C16473 * C2587 + C16469 * C2591 + C16474 * C7740 +
              C48360 * C7742) *
                 C48345) *
                C48362) *
               C47981 * C48087) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C831 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48311 -
            (C26603 + C26604) * C832 - (C26605 + C26606) * C48129) *
               C10789 +
           ((C26604 + C26603) * C831 + (C26606 + C26605) * C48311 -
            (C26608 + C26607) * C832 - (C26610 + C26609) * C48129) *
               C48362) *
              C47981 * C1519 +
          (((C27073 + C27074) * C832 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48311 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C831) +
            (C27075 + C27076) * C48129) *
               C10789 +
           ((C27476 + C27475) * C832 -
            ((C27076 + C27075) * C48311 + (C27074 + C27073) * C831) +
            (C27478 + C27477) * C48129) *
               C48362) *
              C47981 * C1520 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C831 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C48311 -
            (C27479 + C27480) * C832 - (C27481 + C27482) * C48129) *
               C10789 +
           ((C27480 + C27479) * C831 + (C27482 + C27481) * C48311 -
            (C27484 + C27483) * C832 - (C27486 + C27485) * C48129) *
               C48362) *
              C47981 * C1521 +
          (((C27949 + C27950) * C832 -
            ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
              C16469 * C1271) *
                 C48311 +
             (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
              C16469 * C1262) *
                 C831) +
            (C27951 + C27952) * C48129) *
               C10789 +
           ((C16473 * C6381 + C16469 * C6383 + C16474 * C22998 +
             C48360 * C22999) *
                C832 -
            ((C27952 + C27951) * C48311 + (C27950 + C27949) * C831) +
            (C16473 * C6384 + C16469 * C6387 + C16474 * C23000 +
             C48360 * C23001) *
                C48129) *
               C48362) *
              C47981 * C48352) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C831 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48311 -
             (C26603 + C26604) * C832 - (C26605 + C26606) * C48129) *
                C10789 +
            ((C26604 + C26603) * C831 + (C26606 + C26605) * C48311 -
             (C26608 + C26607) * C832 - (C26610 + C26609) * C48129) *
                C48362) *
               C47981 * C48310 +
           (((C27073 + C27074) * C832 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C48311 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C831) +
             (C27075 + C27076) * C48129) *
                C10789 +
            ((C16473 * C1385 + C16469 * C1394 + C16474 * C1389 +
              C48360 * C1402) *
                 C832 -
             ((C27076 + C27075) * C48311 + (C27074 + C27073) * C831) +
             (C16473 * C1395 + C16469 * C1412 + C16474 * C1403 +
              C48360 * C1416) *
                 C48129) *
                C48362) *
               C47981 * C48087) *
              C302 +
          ((((C16897 + C16896) * C832 -
             ((C16511 + C16510) * C48311 + (C16509 + C16508) * C831) +
             (C16899 + C16898) * C48129) *
                C10789 +
            ((C16900 + C16901) * C832 -
             ((C16898 + C16899) * C48311 + (C16896 + C16897) * C831) +
             (C16902 + C16903) * C48129) *
                C48362) *
               C47981 * C48310 +
           (((C16705 + C16704) * C831 + (C16703 + C16702) * C48311 -
             (C17407 + C17406) * C832 - (C17409 + C17408) * C48129) *
                C10789 +
            ((C17406 + C17407) * C831 + (C17408 + C17409) * C48311 -
             (C18842 + C18843) * C832 - (C18844 + C18845) * C48129) *
                C48362) *
               C47981 * C48087) *
              C303 +
          ((((C16515 + C16514) * C831 + (C16513 + C16512) * C48311 -
             (C16905 + C16904) * C832 - (C16907 + C16906) * C48129) *
                C10789 +
            ((C16904 + C16905) * C831 + (C16906 + C16907) * C48311 -
             (C16908 + C16909) * C832 - (C16910 + C16911) * C48129) *
                C48362) *
               C47981 * C48310 +
           (((C17411 + C17410) * C832 -
             ((C16713 + C16712) * C48311 + (C16711 + C16710) * C831) +
             (C17413 + C17412) * C48129) *
                C10789 +
            ((C16473 * C1387 + C16469 * C1398 + C16474 * C1393 +
              C48360 * C1410) *
                 C832 -
             ((C17412 + C17413) * C48311 + (C17410 + C17411) * C831) +
             (C16473 * C1399 + C16469 * C1414 + C16474 * C1411 +
              C48360 * C1420) *
                 C48129) *
                C48362) *
               C47981 * C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C2447 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C2443 -
            (C26603 + C26604) * C2448 - (C26605 + C26606) * C2444 +
            (C26607 + C26608) * C2449 + (C26609 + C26610) * C2445 -
            (C28347 + C28348) * C2450 - (C28349 + C28350) * C48358) *
               C10789 +
           ((C26604 + C26603) * C2447 + (C26606 + C26605) * C2443 -
            (C26608 + C26607) * C2448 - (C26610 + C26609) * C2444 +
            (C28348 + C28347) * C2449 + (C28350 + C28349) * C2445 -
            (C28352 + C28351) * C2450 - (C28354 + C28353) * C48358) *
               C48362) *
              C47981 * C48310 +
          (((C27073 + C27074) * C2448 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C2443 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C2447) +
            (C27075 + C27076) * C2444 - (C27475 + C27476) * C2449 -
            (C27477 + C27478) * C2445 + (C28817 + C28818) * C2450 +
            (C28819 + C28820) * C48358) *
               C10789 +
           ((C27476 + C27475) * C2448 -
            ((C27076 + C27075) * C2443 + (C27074 + C27073) * C2447) +
            (C27478 + C27477) * C2444 - (C28818 + C28817) * C2449 -
            (C28820 + C28819) * C2445 +
            (C16473 * C7249 + C16469 * C7251 + C16474 * C23630 +
             C48360 * C23631) *
                C2450 +
            (C16473 * C7252 + C16469 * C7255 + C16474 * C23632 +
             C48360 * C23633) *
                C48358) *
               C48362) *
              C47981 * C48087) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C16473 * C115 + C16469 * C122 + C16474 * C307 +
                 C48360 * C320) *
                    C114 +
                (C16473 * C123 + C16469 * C136 + C16474 * C319 +
                 C48360 * C337) *
                    C48042) *
                   C10789 +
               ((C16473 * C513 + C16469 * C523 + C16474 * C1013 +
                 C48360 * C1018) *
                    C114 +
                (C16473 * C524 + C16469 * C543 + C16474 * C1019 +
                 C48360 * C1028) *
                    C48042) *
                   C48362) *
                  C47981 * C48025 * C108 -
              (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) *
                   C48362 +
               ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) *
                   C10789) *
                  C47981 * C48025 * C109 +
              (((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) *
                   C10789 +
               ((C16904 + C16905) * C114 + (C16906 + C16907) * C48042) *
                   C48362) *
                  C47981 * C48025 * C110 -
              (((C17194 + C17195) * C48042 + (C17192 + C17193) * C114) *
                   C48362 +
               ((C16519 + C16518) * C48042 + (C16517 + C16516) * C114) *
                   C10789) *
                  C47981 * C48025 * C111 +
              (((C16523 + C16522) * C114 + (C16521 + C16520) * C48042) *
                   C10789 +
               ((C16473 * C521 + C16469 * C539 + C16474 * C1017 +
                 C48360 * C1026) *
                    C114 +
                (C16473 * C540 + C16469 * C551 + C16474 * C1027 +
                 C48360 * C1032) *
                    C48042) *
                   C48362) *
                  C47981 * C48025 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C16473 * C115 + C16469 * C122 + C16474 * C307 +
                  C48360 * C320) *
                     C114 +
                 (C16473 * C123 + C16469 * C136 + C16474 * C319 +
                  C48360 * C337) *
                     C48042) *
                    C10789 +
                ((C16473 * C513 + C16469 * C523 + C16474 * C1013 +
                  C48360 * C1018) *
                     C114 +
                 (C16473 * C524 + C16469 * C543 + C16474 * C1019 +
                  C48360 * C1028) *
                     C48042) *
                    C48362) *
                   C47981 * C48381 -
               (((C16474 * C1401 + C48360 * C1415 + C16473 * C1019 +
                  C16469 * C1028) *
                     C48042 +
                 (C16474 * C1388 + C48360 * C1400 + C16473 * C1013 +
                  C16469 * C1018) *
                     C114) *
                    C48362 +
                ((C16474 * C322 + C48360 * C338 + C16473 * C319 +
                  C16469 * C337) *
                     C48042 +
                 (C16474 * C308 + C48360 * C321 + C16473 * C307 +
                  C16469 * C320) *
                     C114) *
                    C10789) *
                   C47981 * C48369 +
               (((C16473 * C308 + C16469 * C321 + C16474 * C1253 +
                  C48360 * C1262) *
                     C114 +
                 (C16473 * C322 + C16469 * C338 + C16474 * C1261 +
                  C48360 * C1271) *
                     C48042) *
                    C10789 +
                ((C16473 * C1388 + C16469 * C1400 + C16474 * C1813 +
                  C48360 * C1816) *
                     C114 +
                 (C16473 * C1401 + C16469 * C1415 + C16474 * C1817 +
                  C48360 * C1822) *
                     C48042) *
                    C48362) *
                   C47981 * C48342) *
                  C302 +
              ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) *
                    C10789 +
                ((C17406 + C17407) * C114 + (C17408 + C17409) * C48042) *
                    C48362) *
                   C47981 * C48369 -
               (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) *
                    C48362 +
                ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) *
                    C10789) *
                   C47981 * C48381 -
               (((C18134 + C18135) * C48042 + (C18132 + C18133) * C114) *
                    C48362 +
                ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) *
                    C10789) *
                   C47981 * C48342) *
                  C303 +
              ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) *
                    C10789 +
                ((C16904 + C16905) * C114 + (C16906 + C16907) * C48042) *
                    C48362) *
                   C47981 * C48381 -
               (((C17412 + C17413) * C48042 + (C17410 + C17411) * C114) *
                    C48362 +
                ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) *
                    C10789) *
                   C47981 * C48369 +
               (((C16717 + C16716) * C114 + (C16715 + C16714) * C48042) *
                    C10789 +
                ((C16473 * C1392 + C16469 * C1408 + C16474 * C1815 +
                  C48360 * C1820) *
                     C114 +
                 (C16473 * C1409 + C16469 * C1419 + C16474 * C1821 +
                  C48360 * C1824) *
                     C48042) *
                    C48362) *
                   C47981 * C48342) *
                  C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C510 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48382 -
            (C26603 + C26604) * C511 - (C26605 + C26606) * C48371 +
            (C26607 + C26608) * C512 + (C26609 + C26610) * C48345) *
               C10789 +
           ((C26604 + C26603) * C510 + (C26606 + C26605) * C48382 -
            (C26608 + C26607) * C511 - (C26610 + C26609) * C48371 +
            (C16473 * C2147 + C16469 * C2153 + C16474 * C2581 +
             C48360 * C2584) *
                C512 +
            (C16473 * C2154 + C16469 * C2165 + C16474 * C2585 +
             C48360 * C2590) *
                C48345) *
               C48362) *
              C47981 * C48025 * C302 +
          (((C16897 + C16896) * C511 -
            ((C16511 + C16510) * C48382 + (C16509 + C16508) * C510) +
            (C16899 + C16898) * C48371 - (C16901 + C16900) * C512 -
            (C16903 + C16902) * C48345) *
               C10789 +
           ((C16900 + C16901) * C511 -
            ((C16898 + C16899) * C48382 + (C16896 + C16897) * C510) +
            (C16902 + C16903) * C48371 - (C18984 + C18985) * C512 -
            (C18986 + C18987) * C48345) *
               C48362) *
              C47981 * C48025 * C303 +
          (((C16515 + C16514) * C510 + (C16513 + C16512) * C48382 -
            (C16905 + C16904) * C511 - (C16907 + C16906) * C48371 +
            (C16909 + C16908) * C512 + (C16911 + C16910) * C48345) *
               C10789 +
           ((C16904 + C16905) * C510 + (C16906 + C16907) * C48382 -
            (C16908 + C16909) * C511 - (C16910 + C16911) * C48371 +
            (C16473 * C2151 + C16469 * C2161 + C16474 * C2583 +
             C48360 * C2588) *
                C512 +
            (C16473 * C2162 + C16469 * C2169 + C16474 * C2589 +
             C48360 * C2592) *
                C48345) *
               C48362) *
              C47981 * C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C10789 +
            ((C26604 + C26603) * C114 + (C26606 + C26605) * C48042) * C48362) *
               C47981 * C1177 -
           (((C27076 + C27075) * C48042 + (C27074 + C27073) * C114) * C48362 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C10789) *
               C47981 * C1178 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C10789 +
            ((C16473 * C1388 + C16469 * C1400 + C16474 * C1813 +
              C48360 * C1816) *
                 C114 +
             (C16473 * C1401 + C16469 * C1415 + C16474 * C1817 +
              C48360 * C1822) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48378 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C10789 +
            ((C17406 + C17407) * C114 + (C17408 + C17409) * C48042) * C48362) *
               C47981 * C1178 -
           (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) * C48362 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C10789) *
               C47981 * C1177 -
           (((C18134 + C18135) * C48042 + (C18132 + C18133) * C114) * C48362 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C10789) *
               C47981 * C48342) *
              C48365 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C10789 +
            ((C16904 + C16905) * C114 + (C16906 + C16907) * C48042) * C48362) *
               C47981 * C1177 -
           (((C17412 + C17413) * C48042 + (C17410 + C17411) * C114) * C48362 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C10789) *
               C47981 * C1178 +
           (((C16717 + C16716) * C114 + (C16715 + C16714) * C48042) * C10789 +
            ((C16473 * C1392 + C16469 * C1408 + C16474 * C1815 +
              C48360 * C1820) *
                 C114 +
             (C16473 * C1409 + C16469 * C1419 + C16474 * C1821 +
              C48360 * C1824) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C114 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48042) *
               C10789 +
           ((C26604 + C26603) * C114 + (C26606 + C26605) * C48042) * C48362) *
              C47981 * C1245 -
          (((C27076 + C27075) * C48042 + (C27074 + C27073) * C114) * C48362 +
           ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                C48042 +
            (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                C114) *
               C10789) *
              C47981 * C1246 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C114 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C48042) *
               C10789 +
           ((C16473 * C1388 + C16469 * C1400 + C16474 * C1813 +
             C48360 * C1816) *
                C114 +
            (C16473 * C1401 + C16469 * C1415 + C16474 * C1817 +
             C48360 * C1822) *
                C48042) *
               C48362) *
              C47981 * C1247 -
          (((C16474 * C6870 + C48360 * C6873 + C16473 * C1817 +
             C16469 * C1822) *
                C48042 +
            (C16474 * C6867 + C48360 * C6869 + C16473 * C1813 +
             C16469 * C1816) *
                C114) *
               C48362 +
           ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
             C16469 * C1271) *
                C48042 +
            (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
             C16469 * C1262) *
                C114) *
               C10789) *
              C47981 * C1248 +
          (((C16473 * C1254 + C16469 * C1263 + C16474 * C6227 +
             C48360 * C6229) *
                C114 +
            (C16473 * C1264 + C16469 * C1272 + C16474 * C6230 +
             C48360 * C6233) *
                C48042) *
               C10789 +
           ((C16473 * C6867 + C16469 * C6869 + C16474 * C23344 +
             C48360 * C23345) *
                C114 +
            (C16473 * C6870 + C16469 * C6873 + C16474 * C23346 +
             C48360 * C23347) *
                C48042) *
               C48362) *
              C47981 * C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C510 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48382 -
            (C26603 + C26604) * C511 - (C26605 + C26606) * C48371 +
            (C26607 + C26608) * C512 + (C26609 + C26610) * C48345) *
               C10789 +
           ((C26604 + C26603) * C510 + (C26606 + C26605) * C48382 -
            (C26608 + C26607) * C511 - (C26610 + C26609) * C48371 +
            (C16473 * C2147 + C16469 * C2153 + C16474 * C2581 +
             C48360 * C2584) *
                C512 +
            (C16473 * C2154 + C16469 * C2165 + C16474 * C2585 +
             C48360 * C2590) *
                C48345) *
               C48362) *
              C47981 * C1177 +
          (((C27073 + C27074) * C511 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48382 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C510) +
            (C27075 + C27076) * C48371 - (C27475 + C27476) * C512 -
            (C27477 + C27478) * C48345) *
               C10789 +
           ((C27476 + C27475) * C511 -
            ((C27076 + C27075) * C48382 + (C27074 + C27073) * C510) +
            (C27478 + C27477) * C48371 -
            (C16474 * C7735 + C48360 * C7737 + C16473 * C2581 +
             C16469 * C2584) *
                C512 -
            (C16474 * C7738 + C48360 * C7741 + C16473 * C2585 +
             C16469 * C2590) *
                C48345) *
               C48362) *
              C47981 * C1178 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C510 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C48382 -
            (C27479 + C27480) * C511 - (C27481 + C27482) * C48371 +
            (C27483 + C27484) * C512 + (C27485 + C27486) * C48345) *
               C10789 +
           ((C27480 + C27479) * C510 + (C27482 + C27481) * C48382 -
            (C27484 + C27483) * C511 - (C27486 + C27485) * C48371 +
            (C16473 * C7735 + C16469 * C7737 + C16474 * C23976 +
             C48360 * C23977) *
                C512 +
            (C16473 * C7738 + C16469 * C7741 + C16474 * C23978 +
             C48360 * C23979) *
                C48345) *
               C48362) *
              C47981 * C48342) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C1938 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C1935 -
            (C26603 + C26604) * C1939 - (C26605 + C26606) * C1936 +
            (C26607 + C26608) * C1940 + (C26609 + C26610) * C48345) *
               C10789 +
           ((C26604 + C26603) * C1938 + (C26606 + C26605) * C1935 -
            (C26608 + C26607) * C1939 - (C26610 + C26609) * C1936 +
            (C16473 * C2147 + C16469 * C2153 + C16474 * C2581 +
             C48360 * C2584) *
                C1940 +
            (C16473 * C2154 + C16469 * C2165 + C16474 * C2585 +
             C48360 * C2590) *
                C48345) *
               C48362) *
              C47981 * C48025 * C48378 +
          (((C16897 + C16896) * C1939 -
            ((C16511 + C16510) * C1935 + (C16509 + C16508) * C1938) +
            (C16899 + C16898) * C1936 - (C16901 + C16900) * C1940 -
            (C16903 + C16902) * C48345) *
               C10789 +
           ((C16900 + C16901) * C1939 -
            ((C16898 + C16899) * C1935 + (C16896 + C16897) * C1938) +
            (C16902 + C16903) * C1936 - (C18984 + C18985) * C1940 -
            (C18986 + C18987) * C48345) *
               C48362) *
              C47981 * C48025 * C48365 +
          (((C16515 + C16514) * C1938 + (C16513 + C16512) * C1935 -
            (C16905 + C16904) * C1939 - (C16907 + C16906) * C1936 +
            (C16909 + C16908) * C1940 + (C16911 + C16910) * C48345) *
               C10789 +
           ((C16904 + C16905) * C1938 + (C16906 + C16907) * C1935 -
            (C16908 + C16909) * C1939 - (C16910 + C16911) * C1936 +
            (C16473 * C2151 + C16469 * C2161 + C16474 * C2583 +
             C48360 * C2588) *
                C1940 +
            (C16473 * C2162 + C16469 * C2169 + C16474 * C2589 +
             C48360 * C2592) *
                C48345) *
               C48362) *
              C47981 * C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C1938 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C1935 -
            (C26603 + C26604) * C1939 - (C26605 + C26606) * C1936 +
            (C26607 + C26608) * C1940 + (C26609 + C26610) * C48345) *
               C10789 +
           ((C26604 + C26603) * C1938 + (C26606 + C26605) * C1935 -
            (C26608 + C26607) * C1939 - (C26610 + C26609) * C1936 +
            (C16473 * C2147 + C16469 * C2153 + C16474 * C2581 +
             C48360 * C2584) *
                C1940 +
            (C16473 * C2154 + C16469 * C2165 + C16474 * C2585 +
             C48360 * C2590) *
                C48345) *
               C48362) *
              C47981 * C48381 +
          (((C27073 + C27074) * C1939 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C1935 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C1938) +
            (C27075 + C27076) * C1936 - (C27475 + C27476) * C1940 -
            (C27477 + C27478) * C48345) *
               C10789 +
           ((C27476 + C27475) * C1939 -
            ((C27076 + C27075) * C1935 + (C27074 + C27073) * C1938) +
            (C27478 + C27477) * C1936 -
            (C16474 * C7735 + C48360 * C7737 + C16473 * C2581 +
             C16469 * C2584) *
                C1940 -
            (C16474 * C7738 + C48360 * C7741 + C16473 * C2585 +
             C16469 * C2590) *
                C48345) *
               C48362) *
              C47981 * C48369 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C1938 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C1935 -
            (C27479 + C27480) * C1939 - (C27481 + C27482) * C1936 +
            (C27483 + C27484) * C1940 + (C27485 + C27486) * C48345) *
               C10789 +
           ((C27480 + C27479) * C1938 + (C27482 + C27481) * C1935 -
            (C27484 + C27483) * C1939 - (C27486 + C27485) * C1936 +
            (C16473 * C7735 + C16469 * C7737 + C16474 * C23976 +
             C48360 * C23977) *
                C1940 +
            (C16473 * C7738 + C16469 * C7741 + C16474 * C23978 +
             C48360 * C23979) *
                C48345) *
               C48362) *
              C47981 * C48342) *
         C47998) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
               C2142 +
           (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
               C2137 -
           (C26603 + C26604) * C2143 - (C26605 + C26606) * C2138 +
           (C26607 + C26608) * C2144 + (C26609 + C26610) * C2139 -
           (C28347 + C28348) * C2145 - (C28349 + C28350) * C2140 +
           (C28351 + C28352) * C2146 + (C28353 + C28354) * C2141) *
              C10789 +
          ((C26604 + C26603) * C2142 + (C26606 + C26605) * C2137 -
           (C26608 + C26607) * C2143 - (C26610 + C26609) * C2138 +
           (C28348 + C28347) * C2144 + (C28350 + C28349) * C2139 -
           (C28352 + C28351) * C2145 - (C28354 + C28353) * C2140 +
           (C16473 * C12861 + C16469 * C12863 + C16474 * C28326 +
            C48360 * C28327) *
               C2146 +
           (C16473 * C12864 + C16469 * C12867 + C16474 * C28328 +
            C48360 * C28329) *
               C2141) *
              C48362) *
         C47981 * C48025 * C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C831 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48311 -
             (C26603 + C26604) * C832 - (C26605 + C26606) * C48129) *
                C10789 +
            ((C26604 + C26603) * C831 + (C26606 + C26605) * C48311 -
             (C26608 + C26607) * C832 - (C26610 + C26609) * C48129) *
                C48362) *
               C47981 * C1177 +
           (((C27073 + C27074) * C832 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C48311 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C831) +
             (C27075 + C27076) * C48129) *
                C10789 +
            ((C27476 + C27475) * C832 -
             ((C27076 + C27075) * C48311 + (C27074 + C27073) * C831) +
             (C27478 + C27477) * C48129) *
                C48362) *
               C47981 * C1178 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C831 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48311 -
             (C27479 + C27480) * C832 - (C27481 + C27482) * C48129) *
                C10789 +
            ((C27480 + C27479) * C831 + (C27482 + C27481) * C48311 -
             (C27484 + C27483) * C832 - (C27486 + C27485) * C48129) *
                C48362) *
               C47981 * C48342) *
              C48296 +
          ((((C16897 + C16896) * C832 -
             ((C16511 + C16510) * C48311 + (C16509 + C16508) * C831) +
             (C16899 + C16898) * C48129) *
                C10789 +
            ((C16900 + C16901) * C832 -
             ((C16898 + C16899) * C48311 + (C16896 + C16897) * C831) +
             (C16902 + C16903) * C48129) *
                C48362) *
               C47981 * C1177 +
           (((C16705 + C16704) * C831 + (C16703 + C16702) * C48311 -
             (C17407 + C17406) * C832 - (C17409 + C17408) * C48129) *
                C10789 +
            ((C17406 + C17407) * C831 + (C17408 + C17409) * C48311 -
             (C18842 + C18843) * C832 - (C18844 + C18845) * C48129) *
                C48362) *
               C47981 * C1178 +
           (((C18133 + C18132) * C832 -
             ((C16709 + C16708) * C48311 + (C16707 + C16706) * C831) +
             (C18135 + C18134) * C48129) *
                C10789 +
            ((C16473 * C1391 + C16469 * C1406 + C16474 * C6382 +
              C48360 * C6385) *
                 C832 -
             ((C18134 + C18135) * C48311 + (C18132 + C18133) * C831) +
             (C16473 * C1407 + C16469 * C1418 + C16474 * C6386 +
              C48360 * C6388) *
                 C48129) *
                C48362) *
               C47981 * C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C831 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48311 -
            (C26603 + C26604) * C832 - (C26605 + C26606) * C48129) *
               C10789 +
           ((C26604 + C26603) * C831 + (C26606 + C26605) * C48311 -
            (C26608 + C26607) * C832 - (C26610 + C26609) * C48129) *
               C48362) *
              C47981 * C48025 * C713 +
          (((C16897 + C16896) * C832 -
            ((C16511 + C16510) * C48311 + (C16509 + C16508) * C831) +
            (C16899 + C16898) * C48129) *
               C10789 +
           ((C16900 + C16901) * C832 -
            ((C16898 + C16899) * C48311 + (C16896 + C16897) * C831) +
            (C16902 + C16903) * C48129) *
               C48362) *
              C47981 * C48025 * C714 +
          (((C16515 + C16514) * C831 + (C16513 + C16512) * C48311 -
            (C16905 + C16904) * C832 - (C16907 + C16906) * C48129) *
               C10789 +
           ((C16904 + C16905) * C831 + (C16906 + C16907) * C48311 -
            (C16908 + C16909) * C832 - (C16910 + C16911) * C48129) *
               C48362) *
              C47981 * C48025 * C715 +
          (((C17193 + C17192) * C832 -
            ((C16519 + C16518) * C48311 + (C16517 + C16516) * C831) +
            (C17195 + C17194) * C48129) *
               C10789 +
           ((C16473 * C520 + C16469 * C537 + C16474 * C2317 + C48360 * C2318) *
                C832 -
            ((C17194 + C17195) * C48311 + (C17192 + C17193) * C831) +
            (C16473 * C538 + C16469 * C550 + C16474 * C2319 + C48360 * C2320) *
                C48129) *
               C48362) *
              C47981 * C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C2447 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C2443 -
            (C26603 + C26604) * C2448 - (C26605 + C26606) * C2444 +
            (C26607 + C26608) * C2449 + (C26609 + C26610) * C2445 -
            (C28347 + C28348) * C2450 - (C28349 + C28350) * C48358) *
               C10789 +
           ((C26604 + C26603) * C2447 + (C26606 + C26605) * C2443 -
            (C26608 + C26607) * C2448 - (C26610 + C26609) * C2444 +
            (C28348 + C28347) * C2449 + (C28350 + C28349) * C2445 -
            (C28352 + C28351) * C2450 - (C28354 + C28353) * C48358) *
               C48362) *
              C47981 * C48025 * C48296 +
          (((C16897 + C16896) * C2448 -
            ((C16511 + C16510) * C2443 + (C16509 + C16508) * C2447) +
            (C16899 + C16898) * C2444 - (C16901 + C16900) * C2449 -
            (C16903 + C16902) * C2445 + (C18985 + C18984) * C2450 +
            (C18987 + C18986) * C48358) *
               C10789 +
           ((C16900 + C16901) * C2448 -
            ((C16898 + C16899) * C2443 + (C16896 + C16897) * C2447) +
            (C16902 + C16903) * C2444 - (C18984 + C18985) * C2449 -
            (C18986 + C18987) * C2445 +
            (C16473 * C2150 + C16469 * C2159 + C16474 * C7250 +
             C48360 * C7253) *
                C2450 +
            (C16473 * C2160 + C16469 * C2168 + C16474 * C7254 +
             C48360 * C7256) *
                C48358) *
               C48362) *
              C47981 * C48025 * C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C10789 +
            ((C16473 * C513 + C16469 * C523 + C16474 * C1013 + C48360 * C1018) *
                 C114 +
             (C16473 * C524 + C16469 * C543 + C16474 * C1019 + C48360 * C1028) *
                 C48042) *
                C48362) *
               C47981 * C48381 -
           (((C16474 * C1401 + C48360 * C1415 + C16473 * C1019 +
              C16469 * C1028) *
                 C48042 +
             (C16474 * C1388 + C48360 * C1400 + C16473 * C1013 +
              C16469 * C1018) *
                 C114) *
                C48362 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C10789) *
               C47981 * C48369 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C10789 +
            ((C16473 * C1388 + C16469 * C1400 + C16474 * C1813 +
              C48360 * C1816) *
                 C114 +
             (C16473 * C1401 + C16469 * C1415 + C16474 * C1817 +
              C48360 * C1822) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C302 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C10789 +
            ((C17406 + C17407) * C114 + (C17408 + C17409) * C48042) * C48362) *
               C47981 * C48369 -
           (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) * C48362 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C10789) *
               C47981 * C48381 -
           (((C18134 + C18135) * C48042 + (C18132 + C18133) * C114) * C48362 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C10789) *
               C47981 * C48342) *
              C303 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C10789 +
            ((C16904 + C16905) * C114 + (C16906 + C16907) * C48042) * C48362) *
               C47981 * C48381 -
           (((C17412 + C17413) * C48042 + (C17410 + C17411) * C114) * C48362 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C10789) *
               C47981 * C48369 +
           (((C16717 + C16716) * C114 + (C16715 + C16714) * C48042) * C10789 +
            ((C16473 * C1392 + C16469 * C1408 + C16474 * C1815 +
              C48360 * C1820) *
                 C114 +
             (C16473 * C1409 + C16469 * C1419 + C16474 * C1821 +
              C48360 * C1824) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C114 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48042) *
               C10789 +
           ((C16473 * C513 + C16469 * C523 + C16474 * C1013 + C48360 * C1018) *
                C114 +
            (C16473 * C524 + C16469 * C543 + C16474 * C1019 + C48360 * C1028) *
                C48042) *
               C48362) *
              C47981 * C48025 * C108 -
          (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) * C48362 +
           ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C10789) *
              C47981 * C48025 * C109 +
          (((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C10789 +
           ((C16904 + C16905) * C114 + (C16906 + C16907) * C48042) * C48362) *
              C47981 * C48025 * C110 -
          (((C17194 + C17195) * C48042 + (C17192 + C17193) * C114) * C48362 +
           ((C16519 + C16518) * C48042 + (C16517 + C16516) * C114) * C10789) *
              C47981 * C48025 * C111 +
          (((C16523 + C16522) * C114 + (C16521 + C16520) * C48042) * C10789 +
           ((C16473 * C521 + C16469 * C539 + C16474 * C1017 + C48360 * C1026) *
                C114 +
            (C16473 * C540 + C16469 * C551 + C16474 * C1027 + C48360 * C1032) *
                C48042) *
               C48362) *
              C47981 * C48025 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C10789 +
            ((C26604 + C26603) * C114 + (C26606 + C26605) * C48042) * C48362) *
               C47981 * C1177 -
           (((C27076 + C27075) * C48042 + (C27074 + C27073) * C114) * C48362 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C10789) *
               C47981 * C1178 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C10789 +
            ((C16473 * C1388 + C16469 * C1400 + C16474 * C1813 +
              C48360 * C1816) *
                 C114 +
             (C16473 * C1401 + C16469 * C1415 + C16474 * C1817 +
              C48360 * C1822) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48378 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C10789 +
            ((C17406 + C17407) * C114 + (C17408 + C17409) * C48042) * C48362) *
               C47981 * C1178 -
           (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) * C48362 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C10789) *
               C47981 * C1177 -
           (((C18134 + C18135) * C48042 + (C18132 + C18133) * C114) * C48362 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C10789) *
               C47981 * C48342) *
              C48365 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C10789 +
            ((C16904 + C16905) * C114 + (C16906 + C16907) * C48042) * C48362) *
               C47981 * C1177 -
           (((C17412 + C17413) * C48042 + (C17410 + C17411) * C114) * C48362 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C10789) *
               C47981 * C1178 +
           (((C16717 + C16716) * C114 + (C16715 + C16714) * C48042) * C10789 +
            ((C16473 * C1392 + C16469 * C1408 + C16474 * C1815 +
              C48360 * C1820) *
                 C114 +
             (C16473 * C1409 + C16469 * C1419 + C16474 * C1821 +
              C48360 * C1824) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C114 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48042) *
               C10789 +
           ((C26604 + C26603) * C114 + (C26606 + C26605) * C48042) * C48362) *
              C47981 * C1245 -
          (((C27076 + C27075) * C48042 + (C27074 + C27073) * C114) * C48362 +
           ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                C48042 +
            (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                C114) *
               C10789) *
              C47981 * C1246 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C114 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C48042) *
               C10789 +
           ((C16473 * C1388 + C16469 * C1400 + C16474 * C1813 +
             C48360 * C1816) *
                C114 +
            (C16473 * C1401 + C16469 * C1415 + C16474 * C1817 +
             C48360 * C1822) *
                C48042) *
               C48362) *
              C47981 * C1247 -
          (((C16474 * C6870 + C48360 * C6873 + C16473 * C1817 +
             C16469 * C1822) *
                C48042 +
            (C16474 * C6867 + C48360 * C6869 + C16473 * C1813 +
             C16469 * C1816) *
                C114) *
               C48362 +
           ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
             C16469 * C1271) *
                C48042 +
            (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
             C16469 * C1262) *
                C114) *
               C10789) *
              C47981 * C1248 +
          (((C16473 * C1254 + C16469 * C1263 + C16474 * C6227 +
             C48360 * C6229) *
                C114 +
            (C16473 * C1264 + C16469 * C1272 + C16474 * C6230 +
             C48360 * C6233) *
                C48042) *
               C10789 +
           ((C16473 * C6867 + C16469 * C6869 + C16474 * C23344 +
             C48360 * C23345) *
                C114 +
            (C16473 * C6870 + C16469 * C6873 + C16474 * C23346 +
             C48360 * C23347) *
                C48042) *
               C48362) *
              C47981 * C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C1938 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C1935 -
            (C26603 + C26604) * C1939 - (C26605 + C26606) * C1936 +
            (C26607 + C26608) * C1940 + (C26609 + C26610) * C48345) *
               C10789 +
           ((C26604 + C26603) * C1938 + (C26606 + C26605) * C1935 -
            (C26608 + C26607) * C1939 - (C26610 + C26609) * C1936 +
            (C16473 * C2147 + C16469 * C2153 + C16474 * C2581 +
             C48360 * C2584) *
                C1940 +
            (C16473 * C2154 + C16469 * C2165 + C16474 * C2585 +
             C48360 * C2590) *
                C48345) *
               C48362) *
              C47981 * C48025 * C48378 +
          (((C16897 + C16896) * C1939 -
            ((C16511 + C16510) * C1935 + (C16509 + C16508) * C1938) +
            (C16899 + C16898) * C1936 - (C16901 + C16900) * C1940 -
            (C16903 + C16902) * C48345) *
               C10789 +
           ((C16900 + C16901) * C1939 -
            ((C16898 + C16899) * C1935 + (C16896 + C16897) * C1938) +
            (C16902 + C16903) * C1936 - (C18984 + C18985) * C1940 -
            (C18986 + C18987) * C48345) *
               C48362) *
              C47981 * C48025 * C48365 +
          (((C16515 + C16514) * C1938 + (C16513 + C16512) * C1935 -
            (C16905 + C16904) * C1939 - (C16907 + C16906) * C1936 +
            (C16909 + C16908) * C1940 + (C16911 + C16910) * C48345) *
               C10789 +
           ((C16904 + C16905) * C1938 + (C16906 + C16907) * C1935 -
            (C16908 + C16909) * C1939 - (C16910 + C16911) * C1936 +
            (C16473 * C2151 + C16469 * C2161 + C16474 * C2583 +
             C48360 * C2588) *
                C1940 +
            (C16473 * C2162 + C16469 * C2169 + C16474 * C2589 +
             C48360 * C2592) *
                C48345) *
               C48362) *
              C47981 * C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C1938 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C1935 -
            (C26603 + C26604) * C1939 - (C26605 + C26606) * C1936 +
            (C26607 + C26608) * C1940 + (C26609 + C26610) * C48345) *
               C10789 +
           ((C26604 + C26603) * C1938 + (C26606 + C26605) * C1935 -
            (C26608 + C26607) * C1939 - (C26610 + C26609) * C1936 +
            (C16473 * C2147 + C16469 * C2153 + C16474 * C2581 +
             C48360 * C2584) *
                C1940 +
            (C16473 * C2154 + C16469 * C2165 + C16474 * C2585 +
             C48360 * C2590) *
                C48345) *
               C48362) *
              C47981 * C48381 +
          (((C27073 + C27074) * C1939 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C1935 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C1938) +
            (C27075 + C27076) * C1936 - (C27475 + C27476) * C1940 -
            (C27477 + C27478) * C48345) *
               C10789 +
           ((C27476 + C27475) * C1939 -
            ((C27076 + C27075) * C1935 + (C27074 + C27073) * C1938) +
            (C27478 + C27477) * C1936 -
            (C16474 * C7735 + C48360 * C7737 + C16473 * C2581 +
             C16469 * C2584) *
                C1940 -
            (C16474 * C7738 + C48360 * C7741 + C16473 * C2585 +
             C16469 * C2590) *
                C48345) *
               C48362) *
              C47981 * C48369 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C1938 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C1935 -
            (C27479 + C27480) * C1939 - (C27481 + C27482) * C1936 +
            (C27483 + C27484) * C1940 + (C27485 + C27486) * C48345) *
               C10789 +
           ((C27480 + C27479) * C1938 + (C27482 + C27481) * C1935 -
            (C27484 + C27483) * C1939 - (C27486 + C27485) * C1936 +
            (C16473 * C7735 + C16469 * C7737 + C16474 * C23976 +
             C48360 * C23977) *
                C1940 +
            (C16473 * C7738 + C16469 * C7741 + C16474 * C23978 +
             C48360 * C23979) *
                C48345) *
               C48362) *
              C47981 * C48342) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C3467 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C3465 -
             (C26603 + C26604) * C3468 - (C26605 + C26606) * C48129) *
                C10789 +
            ((C26604 + C26603) * C3467 + (C26606 + C26605) * C3465 -
             (C26608 + C26607) * C3468 - (C26610 + C26609) * C48129) *
                C48362) *
               C47981 * C48310 +
           (((C27073 + C27074) * C3468 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C3465 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C3467) +
             (C27075 + C27076) * C48129) *
                C10789 +
            ((C27476 + C27475) * C3468 -
             ((C27076 + C27075) * C3465 + (C27074 + C27073) * C3467) +
             (C27478 + C27477) * C48129) *
                C48362) *
               C47981 * C48087) *
              C48003 +
          ((((C16897 + C16896) * C3468 -
             ((C16511 + C16510) * C3465 + (C16509 + C16508) * C3467) +
             (C16899 + C16898) * C48129) *
                C10789 +
            ((C16900 + C16901) * C3468 -
             ((C16898 + C16899) * C3465 + (C16896 + C16897) * C3467) +
             (C16902 + C16903) * C48129) *
                C48362) *
               C47981 * C48310 +
           (((C16705 + C16704) * C3467 + (C16703 + C16702) * C3465 -
             (C17407 + C17406) * C3468 - (C17409 + C17408) * C48129) *
                C10789 +
            ((C17406 + C17407) * C3467 + (C17408 + C17409) * C3465 -
             (C18842 + C18843) * C3468 - (C18844 + C18845) * C48129) *
                C48362) *
               C47981 * C48087) *
              C48011 +
          ((((C16515 + C16514) * C3467 + (C16513 + C16512) * C3465 -
             (C16905 + C16904) * C3468 - (C16907 + C16906) * C48129) *
                C10789 +
            ((C16904 + C16905) * C3467 + (C16906 + C16907) * C3465 -
             (C16908 + C16909) * C3468 - (C16910 + C16911) * C48129) *
                C48362) *
               C47981 * C48310 +
           (((C17411 + C17410) * C3468 -
             ((C16713 + C16712) * C3465 + (C16711 + C16710) * C3467) +
             (C17413 + C17412) * C48129) *
                C10789 +
            ((C16473 * C1387 + C16469 * C1398 + C16474 * C1393 +
              C48360 * C1410) *
                 C3468 -
             ((C17412 + C17413) * C3465 + (C17410 + C17411) * C3467) +
             (C16473 * C1399 + C16469 * C1414 + C16474 * C1411 +
              C48360 * C1420) *
                 C48129) *
                C48362) *
               C47981 * C48087) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C47030 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48125 -
             (C26603 + C26604) * C47022 - (C26605 + C26606) * C48132 +
             (C26607 + C26608) * C47036 + (C26609 + C26610) * C4043) *
                C10789 +
            ((C26604 + C26603) * C47030 + (C26606 + C26605) * C48125 -
             (C26608 + C26607) * C47022 - (C26610 + C26609) * C48132 +
             (C28348 + C28347) * C47036 + (C28350 + C28349) * C4043) *
                C48362) *
               C47981 * C48310 +
           (((C27073 + C27074) * C47022 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C48125 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C47030) +
             (C27075 + C27076) * C48132 - (C27475 + C27476) * C47036 -
             (C27477 + C27478) * C4043) *
                C10789 +
            ((C27476 + C27475) * C47022 -
             ((C27076 + C27075) * C48125 + (C27074 + C27073) * C47030) +
             (C27478 + C27477) * C48132 - (C28818 + C28817) * C47036 -
             (C28820 + C28819) * C4043) *
                C48362) *
               C47981 * C48087) *
              C2799 +
          ((((C16897 + C16896) * C47022 -
             ((C16511 + C16510) * C48125 + (C16509 + C16508) * C47030) +
             (C16899 + C16898) * C48132 - (C16901 + C16900) * C47036 -
             (C16903 + C16902) * C4043) *
                C10789 +
            ((C16900 + C16901) * C47022 -
             ((C16898 + C16899) * C48125 + (C16896 + C16897) * C47030) +
             (C16902 + C16903) * C48132 - (C18984 + C18985) * C47036 -
             (C18986 + C18987) * C4043) *
                C48362) *
               C47981 * C48310 +
           (((C16705 + C16704) * C47030 + (C16703 + C16702) * C48125 -
             (C17407 + C17406) * C47022 - (C17409 + C17408) * C48132 +
             (C18843 + C18842) * C47036 + (C18845 + C18844) * C4043) *
                C10789 +
            ((C17406 + C17407) * C47030 + (C17408 + C17409) * C48125 -
             (C18842 + C18843) * C47022 - (C18844 + C18845) * C48132 +
             (C16473 * C2582 + C16469 * C2586 + C16474 * C7736 +
              C48360 * C7739) *
                 C47036 +
             (C16473 * C2587 + C16469 * C2591 + C16474 * C7740 +
              C48360 * C7742) *
                 C4043) *
                C48362) *
               C47981 * C48087) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C3467 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C3465 -
             (C26603 + C26604) * C3468 - (C26605 + C26606) * C48129) *
                C10789 +
            ((C26604 + C26603) * C3467 + (C26606 + C26605) * C3465 -
             (C26608 + C26607) * C3468 - (C26610 + C26609) * C48129) *
                C48362) *
               C47981 * C48381 +
           (((C27073 + C27074) * C3468 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C3465 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C3467) +
             (C27075 + C27076) * C48129) *
                C10789 +
            ((C27476 + C27475) * C3468 -
             ((C27076 + C27075) * C3465 + (C27074 + C27073) * C3467) +
             (C27478 + C27477) * C48129) *
                C48362) *
               C47981 * C48369 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C3467 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C3465 -
             (C27479 + C27480) * C3468 - (C27481 + C27482) * C48129) *
                C10789 +
            ((C27480 + C27479) * C3467 + (C27482 + C27481) * C3465 -
             (C27484 + C27483) * C3468 - (C27486 + C27485) * C48129) *
                C48362) *
               C47981 * C48342) *
              C2799 +
          ((((C16897 + C16896) * C3468 -
             ((C16511 + C16510) * C3465 + (C16509 + C16508) * C3467) +
             (C16899 + C16898) * C48129) *
                C10789 +
            ((C16900 + C16901) * C3468 -
             ((C16898 + C16899) * C3465 + (C16896 + C16897) * C3467) +
             (C16902 + C16903) * C48129) *
                C48362) *
               C47981 * C48381 +
           (((C16705 + C16704) * C3467 + (C16703 + C16702) * C3465 -
             (C17407 + C17406) * C3468 - (C17409 + C17408) * C48129) *
                C10789 +
            ((C17406 + C17407) * C3467 + (C17408 + C17409) * C3465 -
             (C18842 + C18843) * C3468 - (C18844 + C18845) * C48129) *
                C48362) *
               C47981 * C48369 +
           (((C18133 + C18132) * C3468 -
             ((C16709 + C16708) * C3465 + (C16707 + C16706) * C3467) +
             (C18135 + C18134) * C48129) *
                C10789 +
            ((C16473 * C1391 + C16469 * C1406 + C16474 * C6382 +
              C48360 * C6385) *
                 C3468 -
             ((C18134 + C18135) * C3465 + (C18132 + C18133) * C3467) +
             (C16473 * C1407 + C16469 * C1418 + C16474 * C6386 +
              C48360 * C6388) *
                 C48129) *
                C48362) *
               C47981 * C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C3467 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C3465 -
            (C26603 + C26604) * C3468 - (C26605 + C26606) * C48129) *
               C10789 +
           ((C26604 + C26603) * C3467 + (C26606 + C26605) * C3465 -
            (C26608 + C26607) * C3468 - (C26610 + C26609) * C48129) *
               C48362) *
              C47981 * C48025 * C48387 +
          (((C16897 + C16896) * C3468 -
            ((C16511 + C16510) * C3465 + (C16509 + C16508) * C3467) +
            (C16899 + C16898) * C48129) *
               C10789 +
           ((C16900 + C16901) * C3468 -
            ((C16898 + C16899) * C3465 + (C16896 + C16897) * C3467) +
            (C16902 + C16903) * C48129) *
               C48362) *
              C47981 * C48025 * C48380 +
          (((C16515 + C16514) * C3467 + (C16513 + C16512) * C3465 -
            (C16905 + C16904) * C3468 - (C16907 + C16906) * C48129) *
               C10789 +
           ((C16904 + C16905) * C3467 + (C16906 + C16907) * C3465 -
            (C16908 + C16909) * C3468 - (C16910 + C16911) * C48129) *
               C48362) *
              C47981 * C48025 * C48367 +
          (((C17193 + C17192) * C3468 -
            ((C16519 + C16518) * C3465 + (C16517 + C16516) * C3467) +
            (C17195 + C17194) * C48129) *
               C10789 +
           ((C16473 * C520 + C16469 * C537 + C16474 * C2317 + C48360 * C2318) *
                C3468 -
            ((C17194 + C17195) * C3465 + (C17192 + C17193) * C3467) +
            (C16473 * C538 + C16469 * C550 + C16474 * C2319 + C48360 * C2320) *
                C48129) *
               C48362) *
              C47981 * C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C3757 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48389 -
            (C26603 + C26604) * C3758 - (C26605 + C26606) * C48386 +
            (C26607 + C26608) * C3759 + (C26609 + C26610) * C48377 -
            (C28347 + C28348) * C3760 - (C28349 + C28350) * C48358) *
               C10789 +
           ((C26604 + C26603) * C3757 + (C26606 + C26605) * C48389 -
            (C26608 + C26607) * C3758 - (C26610 + C26609) * C48386 +
            (C28348 + C28347) * C3759 + (C28350 + C28349) * C48377 -
            (C28352 + C28351) * C3760 - (C28354 + C28353) * C48358) *
               C48362) *
              C47981 * C48025 * C2799 +
          (((C16897 + C16896) * C3758 -
            ((C16511 + C16510) * C48389 + (C16509 + C16508) * C3757) +
            (C16899 + C16898) * C48386 - (C16901 + C16900) * C3759 -
            (C16903 + C16902) * C48377 + (C18985 + C18984) * C3760 +
            (C18987 + C18986) * C48358) *
               C10789 +
           ((C16900 + C16901) * C3758 -
            ((C16898 + C16899) * C48389 + (C16896 + C16897) * C3757) +
            (C16902 + C16903) * C48386 - (C18984 + C18985) * C3759 -
            (C18986 + C18987) * C48377 +
            (C16473 * C2150 + C16469 * C2159 + C16474 * C7250 +
             C48360 * C7253) *
                C3760 +
            (C16473 * C2160 + C16469 * C2168 + C16474 * C7254 +
             C48360 * C7256) *
                C48358) *
               C48362) *
              C47981 * C48025 * C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C47030 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48125 -
            (C26603 + C26604) * C47022 - (C26605 + C26606) * C48132 +
            (C26607 + C26608) * C47036 + (C26609 + C26610) * C4043) *
               C10789 +
           ((C26604 + C26603) * C47030 + (C26606 + C26605) * C48125 -
            (C26608 + C26607) * C47022 - (C26610 + C26609) * C48132 +
            (C28348 + C28347) * C47036 + (C28350 + C28349) * C4043) *
               C48362) *
              C47981 * C48025 * C48003 +
          (((C16897 + C16896) * C47022 -
            ((C16511 + C16510) * C48125 + (C16509 + C16508) * C47030) +
            (C16899 + C16898) * C48132 - (C16901 + C16900) * C47036 -
            (C16903 + C16902) * C4043) *
               C10789 +
           ((C16900 + C16901) * C47022 -
            ((C16898 + C16899) * C48125 + (C16896 + C16897) * C47030) +
            (C16902 + C16903) * C48132 - (C18984 + C18985) * C47036 -
            (C18986 + C18987) * C4043) *
               C48362) *
              C47981 * C48025 * C48011 +
          (((C16515 + C16514) * C47030 + (C16513 + C16512) * C48125 -
            (C16905 + C16904) * C47022 - (C16907 + C16906) * C48132 +
            (C16909 + C16908) * C47036 + (C16911 + C16910) * C4043) *
               C10789 +
           ((C16904 + C16905) * C47030 + (C16906 + C16907) * C48125 -
            (C16908 + C16909) * C47022 - (C16910 + C16911) * C48132 +
            (C16473 * C2151 + C16469 * C2161 + C16474 * C2583 +
             C48360 * C2588) *
                C47036 +
            (C16473 * C2162 + C16469 * C2169 + C16474 * C2589 +
             C48360 * C2592) *
                C4043) *
               C48362) *
              C47981 * C48025 * C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C3467 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C3465 -
            (C26603 + C26604) * C3468 - (C26605 + C26606) * C48129) *
               C10789 +
           ((C26604 + C26603) * C3467 + (C26606 + C26605) * C3465 -
            (C26608 + C26607) * C3468 - (C26610 + C26609) * C48129) *
               C48362) *
              C47981 * C48025 * C48387 +
          (((C16897 + C16896) * C3468 -
            ((C16511 + C16510) * C3465 + (C16509 + C16508) * C3467) +
            (C16899 + C16898) * C48129) *
               C10789 +
           ((C16900 + C16901) * C3468 -
            ((C16898 + C16899) * C3465 + (C16896 + C16897) * C3467) +
            (C16902 + C16903) * C48129) *
               C48362) *
              C47981 * C48025 * C48380 +
          (((C16515 + C16514) * C3467 + (C16513 + C16512) * C3465 -
            (C16905 + C16904) * C3468 - (C16907 + C16906) * C48129) *
               C10789 +
           ((C16904 + C16905) * C3467 + (C16906 + C16907) * C3465 -
            (C16908 + C16909) * C3468 - (C16910 + C16911) * C48129) *
               C48362) *
              C47981 * C48025 * C48367 +
          (((C17193 + C17192) * C3468 -
            ((C16519 + C16518) * C3465 + (C16517 + C16516) * C3467) +
            (C17195 + C17194) * C48129) *
               C10789 +
           ((C16473 * C520 + C16469 * C537 + C16474 * C2317 + C48360 * C2318) *
                C3468 -
            ((C17194 + C17195) * C3465 + (C17192 + C17193) * C3467) +
            (C16473 * C538 + C16469 * C550 + C16474 * C2319 + C48360 * C2320) *
                C48129) *
               C48362) *
              C47981 * C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C3467 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C3465 -
             (C26603 + C26604) * C3468 - (C26605 + C26606) * C48129) *
                C10789 +
            ((C26604 + C26603) * C3467 + (C26606 + C26605) * C3465 -
             (C26608 + C26607) * C3468 - (C26610 + C26609) * C48129) *
                C48362) *
               C47981 * C48381 +
           (((C27073 + C27074) * C3468 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C3465 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C3467) +
             (C27075 + C27076) * C48129) *
                C10789 +
            ((C27476 + C27475) * C3468 -
             ((C27076 + C27075) * C3465 + (C27074 + C27073) * C3467) +
             (C27478 + C27477) * C48129) *
                C48362) *
               C47981 * C48369 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C3467 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C3465 -
             (C27479 + C27480) * C3468 - (C27481 + C27482) * C48129) *
                C10789 +
            ((C27480 + C27479) * C3467 + (C27482 + C27481) * C3465 -
             (C27484 + C27483) * C3468 - (C27486 + C27485) * C48129) *
                C48362) *
               C47981 * C48342) *
              C2799 +
          ((((C16897 + C16896) * C3468 -
             ((C16511 + C16510) * C3465 + (C16509 + C16508) * C3467) +
             (C16899 + C16898) * C48129) *
                C10789 +
            ((C16900 + C16901) * C3468 -
             ((C16898 + C16899) * C3465 + (C16896 + C16897) * C3467) +
             (C16902 + C16903) * C48129) *
                C48362) *
               C47981 * C48381 +
           (((C16705 + C16704) * C3467 + (C16703 + C16702) * C3465 -
             (C17407 + C17406) * C3468 - (C17409 + C17408) * C48129) *
                C10789 +
            ((C17406 + C17407) * C3467 + (C17408 + C17409) * C3465 -
             (C18842 + C18843) * C3468 - (C18844 + C18845) * C48129) *
                C48362) *
               C47981 * C48369 +
           (((C18133 + C18132) * C3468 -
             ((C16709 + C16708) * C3465 + (C16707 + C16706) * C3467) +
             (C18135 + C18134) * C48129) *
                C10789 +
            ((C16473 * C1391 + C16469 * C1406 + C16474 * C6382 +
              C48360 * C6385) *
                 C3468 -
             ((C18134 + C18135) * C3465 + (C18132 + C18133) * C3467) +
             (C16473 * C1407 + C16469 * C1418 + C16474 * C6386 +
              C48360 * C6388) *
                 C48129) *
                C48362) *
               C47981 * C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C10789 +
            ((C26604 + C26603) * C114 + (C26606 + C26605) * C48042) * C48362) *
               C47981 * C48310 -
           (((C16474 * C1401 + C48360 * C1415 + C16473 * C1019 +
              C16469 * C1028) *
                 C48042 +
             (C16474 * C1388 + C48360 * C1400 + C16473 * C1013 +
              C16469 * C1018) *
                 C114) *
                C48362 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C10789) *
               C47981 * C48087) *
              C713 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C10789 +
            ((C17406 + C17407) * C114 + (C17408 + C17409) * C48042) * C48362) *
               C47981 * C48087 -
           (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) * C48362 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C10789) *
               C47981 * C48310) *
              C714 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C10789 +
            ((C16904 + C16905) * C114 + (C16906 + C16907) * C48042) * C48362) *
               C47981 * C48310 -
           (((C17412 + C17413) * C48042 + (C17410 + C17411) * C114) * C48362 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C10789) *
               C47981 * C48087) *
              C715 +
          ((((C17053 + C17052) * C114 + (C17051 + C17050) * C48042) * C10789 +
            ((C16473 * C1016 + C16469 * C1024 + C16474 * C1691 +
              C48360 * C1692) *
                 C114 +
             (C16473 * C1025 + C16469 * C1031 + C16474 * C1693 +
              C48360 * C1694) *
                 C48042) *
                C48362) *
               C47981 * C48087 -
           (((C17194 + C17195) * C48042 + (C17192 + C17193) * C114) * C48362 +
            ((C16519 + C16518) * C48042 + (C16517 + C16516) * C114) * C10789) *
               C47981 * C48310) *
              C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C10789 +
            ((C26604 + C26603) * C114 + (C26606 + C26605) * C48042) * C48362) *
               C47981 * C1519 -
           (((C27076 + C27075) * C48042 + (C27074 + C27073) * C114) * C48362 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C10789) *
               C47981 * C1520 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C10789 +
            ((C27480 + C27479) * C114 + (C27482 + C27481) * C48042) * C48362) *
               C47981 * C1521 -
           (((C16474 * C6870 + C48360 * C6873 + C16473 * C1817 +
              C16469 * C1822) *
                 C48042 +
             (C16474 * C6867 + C48360 * C6869 + C16473 * C1813 +
              C16469 * C1816) *
                 C114) *
                C48362 +
            ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
              C16469 * C1271) *
                 C48042 +
             (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
              C16469 * C1262) *
                 C114) *
                C10789) *
               C47981 * C48352) *
              C48296 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C10789 +
            ((C17406 + C17407) * C114 + (C17408 + C17409) * C48042) * C48362) *
               C47981 * C1520 -
           (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) * C48362 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C10789) *
               C47981 * C1519 -
           (((C18134 + C18135) * C48042 + (C18132 + C18133) * C114) * C48362 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C10789) *
               C47981 * C1521 +
           (((C17929 + C17928) * C114 + (C17927 + C17926) * C48042) * C10789 +
            ((C16473 * C1814 + C16469 * C1818 + C16474 * C6868 +
              C48360 * C6871) *
                 C114 +
             (C16473 * C1819 + C16469 * C1823 + C16474 * C6872 +
              C48360 * C6874) *
                 C48042) *
                C48362) *
               C47981 * C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C831 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48311 -
             (C26603 + C26604) * C832 - (C26605 + C26606) * C48129) *
                C10789 +
            ((C26604 + C26603) * C831 + (C26606 + C26605) * C48311 -
             (C26608 + C26607) * C832 - (C26610 + C26609) * C48129) *
                C48362) *
               C47981 * C48310 +
           (((C27073 + C27074) * C832 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C48311 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C831) +
             (C27075 + C27076) * C48129) *
                C10789 +
            ((C16473 * C1385 + C16469 * C1394 + C16474 * C1389 +
              C48360 * C1402) *
                 C832 -
             ((C27076 + C27075) * C48311 + (C27074 + C27073) * C831) +
             (C16473 * C1395 + C16469 * C1412 + C16474 * C1403 +
              C48360 * C1416) *
                 C48129) *
                C48362) *
               C47981 * C48087) *
              C302 +
          ((((C16897 + C16896) * C832 -
             ((C16511 + C16510) * C48311 + (C16509 + C16508) * C831) +
             (C16899 + C16898) * C48129) *
                C10789 +
            ((C16900 + C16901) * C832 -
             ((C16898 + C16899) * C48311 + (C16896 + C16897) * C831) +
             (C16902 + C16903) * C48129) *
                C48362) *
               C47981 * C48310 +
           (((C16705 + C16704) * C831 + (C16703 + C16702) * C48311 -
             (C17407 + C17406) * C832 - (C17409 + C17408) * C48129) *
                C10789 +
            ((C17406 + C17407) * C831 + (C17408 + C17409) * C48311 -
             (C18842 + C18843) * C832 - (C18844 + C18845) * C48129) *
                C48362) *
               C47981 * C48087) *
              C303 +
          ((((C16515 + C16514) * C831 + (C16513 + C16512) * C48311 -
             (C16905 + C16904) * C832 - (C16907 + C16906) * C48129) *
                C10789 +
            ((C16904 + C16905) * C831 + (C16906 + C16907) * C48311 -
             (C16908 + C16909) * C832 - (C16910 + C16911) * C48129) *
                C48362) *
               C47981 * C48310 +
           (((C17411 + C17410) * C832 -
             ((C16713 + C16712) * C48311 + (C16711 + C16710) * C831) +
             (C17413 + C17412) * C48129) *
                C10789 +
            ((C16473 * C1387 + C16469 * C1398 + C16474 * C1393 +
              C48360 * C1410) *
                 C832 -
             ((C17412 + C17413) * C48311 + (C17410 + C17411) * C831) +
             (C16473 * C1399 + C16469 * C1414 + C16474 * C1411 +
              C48360 * C1420) *
                 C48129) *
                C48362) *
               C47981 * C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C831 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48311 -
            (C26603 + C26604) * C832 - (C26605 + C26606) * C48129) *
               C10789 +
           ((C26604 + C26603) * C831 + (C26606 + C26605) * C48311 -
            (C26608 + C26607) * C832 - (C26610 + C26609) * C48129) *
               C48362) *
              C47981 * C1519 +
          (((C27073 + C27074) * C832 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48311 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C831) +
            (C27075 + C27076) * C48129) *
               C10789 +
           ((C27476 + C27475) * C832 -
            ((C27076 + C27075) * C48311 + (C27074 + C27073) * C831) +
            (C27478 + C27477) * C48129) *
               C48362) *
              C47981 * C1520 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C831 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C48311 -
            (C27479 + C27480) * C832 - (C27481 + C27482) * C48129) *
               C10789 +
           ((C27480 + C27479) * C831 + (C27482 + C27481) * C48311 -
            (C27484 + C27483) * C832 - (C27486 + C27485) * C48129) *
               C48362) *
              C47981 * C1521 +
          (((C27949 + C27950) * C832 -
            ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
              C16469 * C1271) *
                 C48311 +
             (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
              C16469 * C1262) *
                 C831) +
            (C27951 + C27952) * C48129) *
               C10789 +
           ((C16473 * C6381 + C16469 * C6383 + C16474 * C22998 +
             C48360 * C22999) *
                C832 -
            ((C27952 + C27951) * C48311 + (C27950 + C27949) * C831) +
            (C16473 * C6384 + C16469 * C6387 + C16474 * C23000 +
             C48360 * C23001) *
                C48129) *
               C48362) *
              C47981 * C48352) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C10789 +
            ((C16473 * C513 + C16469 * C523 + C16474 * C1013 + C48360 * C1018) *
                 C114 +
             (C16473 * C524 + C16469 * C543 + C16474 * C1019 + C48360 * C1028) *
                 C48042) *
                C48362) *
               C47981 * C48381 -
           (((C16474 * C1401 + C48360 * C1415 + C16473 * C1019 +
              C16469 * C1028) *
                 C48042 +
             (C16474 * C1388 + C48360 * C1400 + C16473 * C1013 +
              C16469 * C1018) *
                 C114) *
                C48362 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C10789) *
               C47981 * C48369 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C10789 +
            ((C16473 * C1388 + C16469 * C1400 + C16474 * C1813 +
              C48360 * C1816) *
                 C114 +
             (C16473 * C1401 + C16469 * C1415 + C16474 * C1817 +
              C48360 * C1822) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C302 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C10789 +
            ((C17406 + C17407) * C114 + (C17408 + C17409) * C48042) * C48362) *
               C47981 * C48369 -
           (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) * C48362 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C10789) *
               C47981 * C48381 -
           (((C18134 + C18135) * C48042 + (C18132 + C18133) * C114) * C48362 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C10789) *
               C47981 * C48342) *
              C303 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C10789 +
            ((C16904 + C16905) * C114 + (C16906 + C16907) * C48042) * C48362) *
               C47981 * C48381 -
           (((C17412 + C17413) * C48042 + (C17410 + C17411) * C114) * C48362 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C10789) *
               C47981 * C48369 +
           (((C16717 + C16716) * C114 + (C16715 + C16714) * C48042) * C10789 +
            ((C16473 * C1392 + C16469 * C1408 + C16474 * C1815 +
              C48360 * C1820) *
                 C114 +
             (C16473 * C1409 + C16469 * C1419 + C16474 * C1821 +
              C48360 * C1824) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C114 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48042) *
               C10789 +
           ((C16473 * C513 + C16469 * C523 + C16474 * C1013 + C48360 * C1018) *
                C114 +
            (C16473 * C524 + C16469 * C543 + C16474 * C1019 + C48360 * C1028) *
                C48042) *
               C48362) *
              C47981 * C48025 * C108 -
          (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) * C48362 +
           ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C10789) *
              C47981 * C48025 * C109 +
          (((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C10789 +
           ((C16904 + C16905) * C114 + (C16906 + C16907) * C48042) * C48362) *
              C47981 * C48025 * C110 -
          (((C17194 + C17195) * C48042 + (C17192 + C17193) * C114) * C48362 +
           ((C16519 + C16518) * C48042 + (C16517 + C16516) * C114) * C10789) *
              C47981 * C48025 * C111 +
          (((C16523 + C16522) * C114 + (C16521 + C16520) * C48042) * C10789 +
           ((C16473 * C521 + C16469 * C539 + C16474 * C1017 + C48360 * C1026) *
                C114 +
            (C16473 * C540 + C16469 * C551 + C16474 * C1027 + C48360 * C1032) *
                C48042) *
               C48362) *
              C47981 * C48025 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C510 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48382 -
            (C26603 + C26604) * C511 - (C26605 + C26606) * C48371 +
            (C26607 + C26608) * C512 + (C26609 + C26610) * C48345) *
               C10789 +
           ((C26604 + C26603) * C510 + (C26606 + C26605) * C48382 -
            (C26608 + C26607) * C511 - (C26610 + C26609) * C48371 +
            (C16473 * C2147 + C16469 * C2153 + C16474 * C2581 +
             C48360 * C2584) *
                C512 +
            (C16473 * C2154 + C16469 * C2165 + C16474 * C2585 +
             C48360 * C2590) *
                C48345) *
               C48362) *
              C47981 * C48025 * C302 +
          (((C16897 + C16896) * C511 -
            ((C16511 + C16510) * C48382 + (C16509 + C16508) * C510) +
            (C16899 + C16898) * C48371 - (C16901 + C16900) * C512 -
            (C16903 + C16902) * C48345) *
               C10789 +
           ((C16900 + C16901) * C511 -
            ((C16898 + C16899) * C48382 + (C16896 + C16897) * C510) +
            (C16902 + C16903) * C48371 - (C18984 + C18985) * C512 -
            (C18986 + C18987) * C48345) *
               C48362) *
              C47981 * C48025 * C303 +
          (((C16515 + C16514) * C510 + (C16513 + C16512) * C48382 -
            (C16905 + C16904) * C511 - (C16907 + C16906) * C48371 +
            (C16909 + C16908) * C512 + (C16911 + C16910) * C48345) *
               C10789 +
           ((C16904 + C16905) * C510 + (C16906 + C16907) * C48382 -
            (C16908 + C16909) * C511 - (C16910 + C16911) * C48371 +
            (C16473 * C2151 + C16469 * C2161 + C16474 * C2583 +
             C48360 * C2588) *
                C512 +
            (C16473 * C2162 + C16469 * C2169 + C16474 * C2589 +
             C48360 * C2592) *
                C48345) *
               C48362) *
              C47981 * C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C10789 +
            ((C26604 + C26603) * C114 + (C26606 + C26605) * C48042) * C48362) *
               C47981 * C1177 -
           (((C27076 + C27075) * C48042 + (C27074 + C27073) * C114) * C48362 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C10789) *
               C47981 * C1178 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C10789 +
            ((C16473 * C1388 + C16469 * C1400 + C16474 * C1813 +
              C48360 * C1816) *
                 C114 +
             (C16473 * C1401 + C16469 * C1415 + C16474 * C1817 +
              C48360 * C1822) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48378 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C10789 +
            ((C17406 + C17407) * C114 + (C17408 + C17409) * C48042) * C48362) *
               C47981 * C1178 -
           (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) * C48362 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C10789) *
               C47981 * C1177 -
           (((C18134 + C18135) * C48042 + (C18132 + C18133) * C114) * C48362 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C10789) *
               C47981 * C48342) *
              C48365 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C10789 +
            ((C16904 + C16905) * C114 + (C16906 + C16907) * C48042) * C48362) *
               C47981 * C1177 -
           (((C17412 + C17413) * C48042 + (C17410 + C17411) * C114) * C48362 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C10789) *
               C47981 * C1178 +
           (((C16717 + C16716) * C114 + (C16715 + C16714) * C48042) * C10789 +
            ((C16473 * C1392 + C16469 * C1408 + C16474 * C1815 +
              C48360 * C1820) *
                 C114 +
             (C16473 * C1409 + C16469 * C1419 + C16474 * C1821 +
              C48360 * C1824) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C114 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48042) *
               C10789 +
           ((C26604 + C26603) * C114 + (C26606 + C26605) * C48042) * C48362) *
              C47981 * C1245 -
          (((C27076 + C27075) * C48042 + (C27074 + C27073) * C114) * C48362 +
           ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                C48042 +
            (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                C114) *
               C10789) *
              C47981 * C1246 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C114 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C48042) *
               C10789 +
           ((C16473 * C1388 + C16469 * C1400 + C16474 * C1813 +
             C48360 * C1816) *
                C114 +
            (C16473 * C1401 + C16469 * C1415 + C16474 * C1817 +
             C48360 * C1822) *
                C48042) *
               C48362) *
              C47981 * C1247 -
          (((C16474 * C6870 + C48360 * C6873 + C16473 * C1817 +
             C16469 * C1822) *
                C48042 +
            (C16474 * C6867 + C48360 * C6869 + C16473 * C1813 +
             C16469 * C1816) *
                C114) *
               C48362 +
           ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
             C16469 * C1271) *
                C48042 +
            (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
             C16469 * C1262) *
                C114) *
               C10789) *
              C47981 * C1248 +
          (((C16473 * C1254 + C16469 * C1263 + C16474 * C6227 +
             C48360 * C6229) *
                C114 +
            (C16473 * C1264 + C16469 * C1272 + C16474 * C6230 +
             C48360 * C6233) *
                C48042) *
               C10789 +
           ((C16473 * C6867 + C16469 * C6869 + C16474 * C23344 +
             C48360 * C23345) *
                C114 +
            (C16473 * C6870 + C16469 * C6873 + C16474 * C23346 +
             C48360 * C23347) *
                C48042) *
               C48362) *
              C47981 * C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C510 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48382 -
            (C26603 + C26604) * C511 - (C26605 + C26606) * C48371 +
            (C26607 + C26608) * C512 + (C26609 + C26610) * C48345) *
               C10789 +
           ((C26604 + C26603) * C510 + (C26606 + C26605) * C48382 -
            (C26608 + C26607) * C511 - (C26610 + C26609) * C48371 +
            (C16473 * C2147 + C16469 * C2153 + C16474 * C2581 +
             C48360 * C2584) *
                C512 +
            (C16473 * C2154 + C16469 * C2165 + C16474 * C2585 +
             C48360 * C2590) *
                C48345) *
               C48362) *
              C47981 * C1177 +
          (((C27073 + C27074) * C511 -
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48382 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C510) +
            (C27075 + C27076) * C48371 - (C27475 + C27476) * C512 -
            (C27477 + C27478) * C48345) *
               C10789 +
           ((C27476 + C27475) * C511 -
            ((C27076 + C27075) * C48382 + (C27074 + C27073) * C510) +
            (C27478 + C27477) * C48371 -
            (C16474 * C7735 + C48360 * C7737 + C16473 * C2581 +
             C16469 * C2584) *
                C512 -
            (C16474 * C7738 + C48360 * C7741 + C16473 * C2585 +
             C16469 * C2590) *
                C48345) *
               C48362) *
              C47981 * C1178 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C510 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C48382 -
            (C27479 + C27480) * C511 - (C27481 + C27482) * C48371 +
            (C27483 + C27484) * C512 + (C27485 + C27486) * C48345) *
               C10789 +
           ((C27480 + C27479) * C510 + (C27482 + C27481) * C48382 -
            (C27484 + C27483) * C511 - (C27486 + C27485) * C48371 +
            (C16473 * C7735 + C16469 * C7737 + C16474 * C23976 +
             C48360 * C23977) *
                C512 +
            (C16473 * C7738 + C16469 * C7741 + C16474 * C23978 +
             C48360 * C23979) *
                C48345) *
               C48362) *
              C47981 * C48342) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C831 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48311 -
            (C26603 + C26604) * C832 - (C26605 + C26606) * C48129) *
               C10789 +
           ((C26604 + C26603) * C831 + (C26606 + C26605) * C48311 -
            (C26608 + C26607) * C832 - (C26610 + C26609) * C48129) *
               C48362) *
              C47981 * C48025 * C713 +
          (((C16897 + C16896) * C832 -
            ((C16511 + C16510) * C48311 + (C16509 + C16508) * C831) +
            (C16899 + C16898) * C48129) *
               C10789 +
           ((C16900 + C16901) * C832 -
            ((C16898 + C16899) * C48311 + (C16896 + C16897) * C831) +
            (C16902 + C16903) * C48129) *
               C48362) *
              C47981 * C48025 * C714 +
          (((C16515 + C16514) * C831 + (C16513 + C16512) * C48311 -
            (C16905 + C16904) * C832 - (C16907 + C16906) * C48129) *
               C10789 +
           ((C16904 + C16905) * C831 + (C16906 + C16907) * C48311 -
            (C16908 + C16909) * C832 - (C16910 + C16911) * C48129) *
               C48362) *
              C47981 * C48025 * C715 +
          (((C17193 + C17192) * C832 -
            ((C16519 + C16518) * C48311 + (C16517 + C16516) * C831) +
            (C17195 + C17194) * C48129) *
               C10789 +
           ((C16473 * C520 + C16469 * C537 + C16474 * C2317 + C48360 * C2318) *
                C832 -
            ((C17194 + C17195) * C48311 + (C17192 + C17193) * C831) +
            (C16473 * C538 + C16469 * C550 + C16474 * C2319 + C48360 * C2320) *
                C48129) *
               C48362) *
              C47981 * C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C831 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48311 -
             (C26603 + C26604) * C832 - (C26605 + C26606) * C48129) *
                C10789 +
            ((C26604 + C26603) * C831 + (C26606 + C26605) * C48311 -
             (C26608 + C26607) * C832 - (C26610 + C26609) * C48129) *
                C48362) *
               C47981 * C1177 +
           (((C27073 + C27074) * C832 -
             ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                  C48311 +
              (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                  C831) +
             (C27075 + C27076) * C48129) *
                C10789 +
            ((C27476 + C27475) * C832 -
             ((C27076 + C27075) * C48311 + (C27074 + C27073) * C831) +
             (C27478 + C27477) * C48129) *
                C48362) *
               C47981 * C1178 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C831 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48311 -
             (C27479 + C27480) * C832 - (C27481 + C27482) * C48129) *
                C10789 +
            ((C27480 + C27479) * C831 + (C27482 + C27481) * C48311 -
             (C27484 + C27483) * C832 - (C27486 + C27485) * C48129) *
                C48362) *
               C47981 * C48342) *
              C48296 +
          ((((C16897 + C16896) * C832 -
             ((C16511 + C16510) * C48311 + (C16509 + C16508) * C831) +
             (C16899 + C16898) * C48129) *
                C10789 +
            ((C16900 + C16901) * C832 -
             ((C16898 + C16899) * C48311 + (C16896 + C16897) * C831) +
             (C16902 + C16903) * C48129) *
                C48362) *
               C47981 * C1177 +
           (((C16705 + C16704) * C831 + (C16703 + C16702) * C48311 -
             (C17407 + C17406) * C832 - (C17409 + C17408) * C48129) *
                C10789 +
            ((C17406 + C17407) * C831 + (C17408 + C17409) * C48311 -
             (C18842 + C18843) * C832 - (C18844 + C18845) * C48129) *
                C48362) *
               C47981 * C1178 +
           (((C18133 + C18132) * C832 -
             ((C16709 + C16708) * C48311 + (C16707 + C16706) * C831) +
             (C18135 + C18134) * C48129) *
                C10789 +
            ((C16473 * C1391 + C16469 * C1406 + C16474 * C6382 +
              C48360 * C6385) *
                 C832 -
             ((C18134 + C18135) * C48311 + (C18132 + C18133) * C831) +
             (C16473 * C1407 + C16469 * C1418 + C16474 * C6386 +
              C48360 * C6388) *
                 C48129) *
                C48362) *
               C47981 * C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C114 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48042) *
               C10789 +
           ((C16473 * C513 + C16469 * C523 + C16474 * C1013 + C48360 * C1018) *
                C114 +
            (C16473 * C524 + C16469 * C543 + C16474 * C1019 + C48360 * C1028) *
                C48042) *
               C48362) *
              C47981 * C48025 * C108 -
          (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) * C48362 +
           ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C10789) *
              C47981 * C48025 * C109 +
          (((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C10789 +
           ((C16904 + C16905) * C114 + (C16906 + C16907) * C48042) * C48362) *
              C47981 * C48025 * C110 -
          (((C17194 + C17195) * C48042 + (C17192 + C17193) * C114) * C48362 +
           ((C16519 + C16518) * C48042 + (C16517 + C16516) * C114) * C10789) *
              C47981 * C48025 * C111 +
          (((C16523 + C16522) * C114 + (C16521 + C16520) * C48042) * C10789 +
           ((C16473 * C521 + C16469 * C539 + C16474 * C1017 + C48360 * C1026) *
                C114 +
            (C16473 * C540 + C16469 * C551 + C16474 * C1027 + C48360 * C1032) *
                C48042) *
               C48362) *
              C47981 * C48025 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C10789 +
            ((C16473 * C513 + C16469 * C523 + C16474 * C1013 + C48360 * C1018) *
                 C114 +
             (C16473 * C524 + C16469 * C543 + C16474 * C1019 + C48360 * C1028) *
                 C48042) *
                C48362) *
               C47981 * C48381 -
           (((C16474 * C1401 + C48360 * C1415 + C16473 * C1019 +
              C16469 * C1028) *
                 C48042 +
             (C16474 * C1388 + C48360 * C1400 + C16473 * C1013 +
              C16469 * C1018) *
                 C114) *
                C48362 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C10789) *
               C47981 * C48369 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C10789 +
            ((C16473 * C1388 + C16469 * C1400 + C16474 * C1813 +
              C48360 * C1816) *
                 C114 +
             (C16473 * C1401 + C16469 * C1415 + C16474 * C1817 +
              C48360 * C1822) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C302 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C10789 +
            ((C17406 + C17407) * C114 + (C17408 + C17409) * C48042) * C48362) *
               C47981 * C48369 -
           (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) * C48362 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C10789) *
               C47981 * C48381 -
           (((C18134 + C18135) * C48042 + (C18132 + C18133) * C114) * C48362 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C10789) *
               C47981 * C48342) *
              C303 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C10789 +
            ((C16904 + C16905) * C114 + (C16906 + C16907) * C48042) * C48362) *
               C47981 * C48381 -
           (((C17412 + C17413) * C48042 + (C17410 + C17411) * C114) * C48362 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C10789) *
               C47981 * C48369 +
           (((C16717 + C16716) * C114 + (C16715 + C16714) * C48042) * C10789 +
            ((C16473 * C1392 + C16469 * C1408 + C16474 * C1815 +
              C48360 * C1820) *
                 C114 +
             (C16473 * C1409 + C16469 * C1419 + C16474 * C1821 +
              C48360 * C1824) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                 C114 +
             (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                 C48042) *
                C10789 +
            ((C26604 + C26603) * C114 + (C26606 + C26605) * C48042) * C48362) *
               C47981 * C1177 -
           (((C27076 + C27075) * C48042 + (C27074 + C27073) * C114) * C48362 +
            ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                 C48042 +
             (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                 C114) *
                C10789) *
               C47981 * C1178 +
           (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                 C114 +
             (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                 C48042) *
                C10789 +
            ((C16473 * C1388 + C16469 * C1400 + C16474 * C1813 +
              C48360 * C1816) *
                 C114 +
             (C16473 * C1401 + C16469 * C1415 + C16474 * C1817 +
              C48360 * C1822) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48378 +
          ((((C16705 + C16704) * C114 + (C16703 + C16702) * C48042) * C10789 +
            ((C17406 + C17407) * C114 + (C17408 + C17409) * C48042) * C48362) *
               C47981 * C1178 -
           (((C16898 + C16899) * C48042 + (C16896 + C16897) * C114) * C48362 +
            ((C16511 + C16510) * C48042 + (C16509 + C16508) * C114) * C10789) *
               C47981 * C1177 -
           (((C18134 + C18135) * C48042 + (C18132 + C18133) * C114) * C48362 +
            ((C16709 + C16708) * C48042 + (C16707 + C16706) * C114) * C10789) *
               C47981 * C48342) *
              C48365 +
          ((((C16515 + C16514) * C114 + (C16513 + C16512) * C48042) * C10789 +
            ((C16904 + C16905) * C114 + (C16906 + C16907) * C48042) * C48362) *
               C47981 * C1177 -
           (((C17412 + C17413) * C48042 + (C17410 + C17411) * C114) * C48362 +
            ((C16713 + C16712) * C48042 + (C16711 + C16710) * C114) * C10789) *
               C47981 * C1178 +
           (((C16717 + C16716) * C114 + (C16715 + C16714) * C48042) * C10789 +
            ((C16473 * C1392 + C16469 * C1408 + C16474 * C1815 +
              C48360 * C1820) *
                 C114 +
             (C16473 * C1409 + C16469 * C1419 + C16474 * C1821 +
              C48360 * C1824) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C16473 * C115 + C16469 * C122 + C16474 * C307 + C48360 * C320) *
                C114 +
            (C16473 * C123 + C16469 * C136 + C16474 * C319 + C48360 * C337) *
                C48042) *
               C10789 +
           ((C26604 + C26603) * C114 + (C26606 + C26605) * C48042) * C48362) *
              C47981 * C1245 -
          (((C27076 + C27075) * C48042 + (C27074 + C27073) * C114) * C48362 +
           ((C16474 * C322 + C48360 * C338 + C16473 * C319 + C16469 * C337) *
                C48042 +
            (C16474 * C308 + C48360 * C321 + C16473 * C307 + C16469 * C320) *
                C114) *
               C10789) *
              C47981 * C1246 +
          (((C16473 * C308 + C16469 * C321 + C16474 * C1253 + C48360 * C1262) *
                C114 +
            (C16473 * C322 + C16469 * C338 + C16474 * C1261 + C48360 * C1271) *
                C48042) *
               C10789 +
           ((C16473 * C1388 + C16469 * C1400 + C16474 * C1813 +
             C48360 * C1816) *
                C114 +
            (C16473 * C1401 + C16469 * C1415 + C16474 * C1817 +
             C48360 * C1822) *
                C48042) *
               C48362) *
              C47981 * C1247 -
          (((C16474 * C6870 + C48360 * C6873 + C16473 * C1817 +
             C16469 * C1822) *
                C48042 +
            (C16474 * C6867 + C48360 * C6869 + C16473 * C1813 +
             C16469 * C1816) *
                C114) *
               C48362 +
           ((C16474 * C1264 + C48360 * C1272 + C16473 * C1261 +
             C16469 * C1271) *
                C48042 +
            (C16474 * C1254 + C48360 * C1263 + C16473 * C1253 +
             C16469 * C1262) *
                C114) *
               C10789) *
              C47981 * C1248 +
          (((C16473 * C1254 + C16469 * C1263 + C16474 * C6227 +
             C48360 * C6229) *
                C114 +
            (C16473 * C1264 + C16469 * C1272 + C16474 * C6230 +
             C48360 * C6233) *
                C48042) *
               C10789 +
           ((C16473 * C6867 + C16469 * C6869 + C16474 * C23344 +
             C48360 * C23345) *
                C114 +
            (C16473 * C6870 + C16469 * C6873 + C16474 * C23346 +
             C48360 * C23347) *
                C48042) *
               C48362) *
              C47981 * C1249) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C31866 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C16471 +
            ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
               C48083 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C31866) *
                C16471) *
               C48090 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C31866 +
             (C11998 * C114 + C11999 * C48042) * C48362) *
                C16471 +
            ((C386 + C387) * C31866 + (C10948 + C10949) * C48362) * C48329) *
               C3071) *
              C48003 +
          ((((C385 + C384) * C31866 + (C10947 + C10946) * C48362) * C16471 +
            ((C383 + C382) * C31866 + (C10950 + C10951) * C48362) * C48329) *
               C48090 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) * C16471) *
               C48083 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C31866) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C31866) * C16471) *
               C3071) *
              C48011 +
          (((C184 * C31866 + (C10795 + C10794) * C48362) * C16471 +
            ((C179 + C178) * C31866 + (C10796 + C10797) * C48362) * C48329) *
               C48083 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C31866) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C31866) * C16471) *
               C48090 +
           ((C395 * C31866 + (C10953 + C10952) * C48362) * C16471 +
            ((C393 + C392) * C31866 +
             ((C113 * C1691 + C48228 * C1692) * C114 +
              (C113 * C1693 + C48228 * C1694) * C48042) *
                 C48362) *
                C48329) *
               C3071) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C115 + C48228 * C122) * C831 +
                       (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
                       C11121 * C48129) *
                          C31866 +
                      (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
                       C11123 * C48129) *
                          C48362) *
                         C16471 +
                     ((C838 + C839 - C840 - C841) * C31866 +
                      (C11386 + C11387 - C11388 - C11389) * C48362) *
                         C48329) *
                        C48083 +
                    (((C11604 * C832 -
                       ((C113 * C319 + C48228 * C337) * C48311 +
                        (C113 * C307 + C48228 * C320) * C831) +
                       C11605 * C48129) *
                          C31866 +
                      (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
                       C11997 * C48129) *
                          C48362) *
                         C16471 +
                     ((C1059 - (C1036 + C1037) + C1060) * C31866 +
                      (C11596 - (C11597 + C11598) + C11599) * C48362) *
                         C48329) *
                        C48090 +
                    ((((C113 * C308 + C48228 * C321) * C831 +
                       (C113 * C322 + C48228 * C338) * C48311 - C11998 * C832 -
                       C11999 * C48129) *
                          C31866 +
                      (C11998 * C831 + C11999 * C48311 - C12000 * C832 -
                       C12001 * C48129) *
                          C48362) *
                         C16471 +
                     ((C1696 + C1697 - C1712 - C1713) * C31866 +
                      (C12336 + C12337 - C12338 - C12339) * C48362) *
                         C48329) *
                        C3071) *
                       C2799 +
                   ((((C840 - (C839 + C838) + C841) * C31866 +
                      (C11388 - (C11387 + C11386) + C11389) * C48362) *
                         C16471 +
                     ((C844 - (C843 + C842) + C845) * C31866 +
                      (C11390 - (C11391 + C11392) + C11393) * C48362) *
                         C48329) *
                        C48083 +
                    (((C1037 + C1036 - C1059 - C1060) * C31866 +
                      (C11598 + C11597 - C11596 - C11599) * C48362) *
                         C16471 +
                     ((C1043 + C1042 - C1061 - C1062) * C31866 +
                      (C11600 + C11601 - C11602 - C11603) * C48362) *
                         C48329) *
                        C48090 +
                    (((C1712 - (C1697 + C1696) + C1713) * C31866 +
                      (C12338 - (C12337 + C12336) + C12339) * C48362) *
                         C16471 +
                     ((C1714 - (C1703 + C1702) + C1715) * C31866 +
                      ((C113 * C1393 + C48228 * C1410) * C832 -
                       (C1711 * C48311 + C1710 * C831) +
                       (C113 * C1411 + C48228 * C1420) * C48129) *
                          C48362) *
                         C48329) *
                        C3071) *
                       C48008)) /
                 (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C31866 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C16471 +
            ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
               C48388 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C31866) *
                C16471) *
               C48384 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C31866 +
             (C11998 * C114 + C11999 * C48042) * C48362) *
                C16471 +
            ((C386 + C387) * C31866 + (C10948 + C10949) * C48362) * C48329) *
               C48374 -
           (((C12140 + C12141) * C48362 + (C1544 + C1545) * C31866) * C48329 +
            ((C12475 * C48042 + C12474 * C114) * C48362 +
             ((C113 * C1261 + C48228 * C1271) * C48042 +
              (C113 * C1253 + C48228 * C1262) * C114) *
                 C31866) *
                C16471) *
               C48352) *
              C2799 +
          ((((C385 + C384) * C31866 + (C10947 + C10946) * C48362) * C16471 +
            ((C383 + C382) * C31866 + (C10950 + C10951) * C48362) * C48329) *
               C48384 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) * C16471) *
               C48388 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C31866) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C31866) * C16471) *
               C48374 +
           (((C1545 + C1544) * C31866 + (C12141 + C12140) * C48362) * C16471 +
            ((C1543 + C1542) * C31866 +
             ((C113 * C1815 + C48228 * C1820) * C114 +
              (C113 * C1821 + C48228 * C1824) * C48042) *
                 C48362) *
                C48329) *
               C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C31866 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C16471 +
            ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
               C2691 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C31866) *
                C16471) *
               C48087) *
              C48387 +
          ((((C385 + C384) * C31866 + (C10947 + C10946) * C48362) * C16471 +
            ((C383 + C382) * C31866 + (C10950 + C10951) * C48362) * C48329) *
               C48087 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) * C16471) *
               C2691) *
              C48380 +
          (((C184 * C31866 + (C10795 + C10794) * C48362) * C16471 +
            ((C179 + C178) * C31866 + (C10796 + C10797) * C48362) * C48329) *
               C2691 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C31866) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C31866) * C16471) *
               C48087) *
              C48367 +
          (((C722 * C31866 + (C11255 + C11254) * C48362) * C16471 +
            ((C731 + C730) * C31866 +
             ((C113 * C1017 + C48228 * C1026) * C114 +
              (C113 * C1027 + C48228 * C1032) * C48042) *
                 C48362) *
                C48329) *
               C48087 -
           (((C10798 + C10799) * C48362 + (C181 + C180) * C31866) * C48329 +
            ((C10797 + C10796) * C48362 + C185 * C31866) * C16471) *
               C2691) *
              C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C510 +
              (C113 * C123 + C48228 * C136) * C48382 - C11120 * C511 -
              C11121 * C48371 + C11122 * C512 + C11123 * C48345) *
                 C31866 +
             (C11120 * C510 + C11121 * C48382 - C11122 * C511 -
              C11123 * C48371 + C12882 * C512 + C12883 * C48345) *
                 C48362) *
                C16471 +
            ((C554 + C555 - C597 - C598 + C599 + C600) * C31866 +
             (C11108 + C11109 - C11110 - C11111 + C11112 + C11113) * C48362) *
                C48329) *
               C2691 +
           (((C11604 * C511 -
              ((C113 * C319 + C48228 * C337) * C48382 +
               (C113 * C307 + C48228 * C320) * C510) +
              C11605 * C48371 - C11996 * C512 - C11997 * C48345) *
                 C31866 +
             (C11996 * C511 - (C11605 * C48382 + C11604 * C510) +
              C11997 * C48371 - C13366 * C512 - C13367 * C48345) *
                 C48362) *
                C16471 +
            ((C2948 - (C2949 + C2950) + C2951 - C2952 - C2953) * C31866 +
             (C13822 - (C13823 + C13824) + C13825 - C13826 - C13827) * C48362) *
                C48329) *
               C48087) *
              C2799 +
          ((((C597 - (C555 + C554) + C598 - C599 - C600) * C31866 +
             (C11110 - (C11109 + C11108) + C11111 - C11112 - C11113) * C48362) *
                C16471 +
            ((C601 - (C565 + C564) + C602 - C603 - C604) * C31866 +
             (C11114 - (C11115 + C11116) + C11117 - C11118 - C11119) * C48362) *
                C48329) *
               C2691 +
           (((C2950 + C2949 - C2948 - C2951 + C2952 + C2953) * C31866 +
             (C13824 + C13823 - C13822 - C13825 + C13826 + C13827) * C48362) *
                C16471 +
            ((C2956 + C2955 - C2954 - C2957 + C2958 + C2959) * C31866 +
             (C1054 * C510 + C1056 * C48382 - C2340 * C511 - C2341 * C48371 +
              (C113 * C2583 + C48228 * C2588) * C512 +
              (C113 * C2589 + C48228 * C2592) * C48345) *
                 C48362) *
                C48329) *
               C48087) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C831 +
              (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
              C11121 * C48129) *
                 C31866 +
             (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
              C11123 * C48129) *
                 C48362) *
                C16471 +
            ((C838 + C839 - C840 - C841) * C31866 +
             (C11386 + C11387 - C11388 - C11389) * C48362) *
                C48329) *
               C2691 +
           (((C11604 * C832 -
              ((C113 * C319 + C48228 * C337) * C48311 +
               (C113 * C307 + C48228 * C320) * C831) +
              C11605 * C48129) *
                 C31866 +
             (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
              C11997 * C48129) *
                 C48362) *
                C16471 +
            ((C1059 - (C1036 + C1037) + C1060) * C31866 +
             (C11596 - (C11597 + C11598) + C11599) * C48362) *
                C48329) *
               C48087) *
              C48003 +
          ((((C840 - (C839 + C838) + C841) * C31866 +
             (C11388 - (C11387 + C11386) + C11389) * C48362) *
                C16471 +
            ((C844 - (C843 + C842) + C845) * C31866 +
             (C11390 - (C11391 + C11392) + C11393) * C48362) *
                C48329) *
               C2691 +
           (((C1037 + C1036 - C1059 - C1060) * C31866 +
             (C11598 + C11597 - C11596 - C11599) * C48362) *
                C16471 +
            ((C1043 + C1042 - C1061 - C1062) * C31866 +
             (C11600 + C11601 - C11602 - C11603) * C48362) *
                C48329) *
               C48087) *
              C48011 +
          (((C864 * C31866 + (C11392 + C11391 - C11390 - C11393) * C48362) *
                C16471 +
            ((C848 + C847 - C846 - C849) * C31866 +
             (C11394 + C11395 - C11396 - C11397) * C48362) *
                C48329) *
               C2691 +
           ((C1066 * C31866 + (C11602 - (C11601 + C11600) + C11603) * C48362) *
                C16471 +
            ((C1063 - (C1047 + C1046) + C1064) * C31866 +
             ((C113 * C2317 + C48228 * C2318) * C832 -
              (C1058 * C48311 + C1057 * C831) +
              (C113 * C2319 + C48228 * C2320) * C48129) *
                 C48362) *
                C48329) *
               C48087) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C31866 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C16471 +
            ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
               C2691 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C31866) *
                C16471) *
               C48087) *
              C48387 +
          ((((C385 + C384) * C31866 + (C10947 + C10946) * C48362) * C16471 +
            ((C383 + C382) * C31866 + (C10950 + C10951) * C48362) * C48329) *
               C48087 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) * C16471) *
               C2691) *
              C48380 +
          (((C184 * C31866 + (C10795 + C10794) * C48362) * C16471 +
            ((C179 + C178) * C31866 + (C10796 + C10797) * C48362) * C48329) *
               C2691 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C31866) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C31866) * C16471) *
               C48087) *
              C48367 +
          (((C722 * C31866 + (C11255 + C11254) * C48362) * C16471 +
            ((C731 + C730) * C31866 +
             ((C113 * C1017 + C48228 * C1026) * C114 +
              (C113 * C1027 + C48228 * C1032) * C48042) *
                 C48362) *
                C48329) *
               C48087 -
           (((C10798 + C10799) * C48362 + (C181 + C180) * C31866) * C48329 +
            ((C10797 + C10796) * C48362 + C185 * C31866) * C16471) *
               C2691) *
              C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C31866 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C16471 +
            ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
               C48388 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C31866) *
                C16471) *
               C48384 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C31866 +
             (C11998 * C114 + C11999 * C48042) * C48362) *
                C16471 +
            ((C386 + C387) * C31866 + (C10948 + C10949) * C48362) * C48329) *
               C48374 -
           (((C12140 + C12141) * C48362 + (C1544 + C1545) * C31866) * C48329 +
            ((C12475 * C48042 + C12474 * C114) * C48362 +
             ((C113 * C1261 + C48228 * C1271) * C48042 +
              (C113 * C1253 + C48228 * C1262) * C114) *
                 C31866) *
                C16471) *
               C48352) *
              C2799 +
          ((((C385 + C384) * C31866 + (C10947 + C10946) * C48362) * C16471 +
            ((C383 + C382) * C31866 + (C10950 + C10951) * C48362) * C48329) *
               C48384 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) * C16471) *
               C48388 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C31866) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C31866) * C16471) *
               C48374 +
           (((C1545 + C1544) * C31866 + (C12141 + C12140) * C48362) * C16471 +
            ((C1543 + C1542) * C31866 +
             ((C113 * C1815 + C48228 * C1820) * C114 +
              (C113 * C1821 + C48228 * C1824) * C48042) *
                 C48362) *
                C48329) *
               C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((((C113 * C115 + C48228 * C122) * C3467 +
                       (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
                       C11121 * C48129) *
                          C31866 +
                      (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
                       C11123 * C48129) *
                          C48362) *
                         C16471 +
                     ((C3470 + C3471 - C3472 - C3473) * C31866 +
                      (C14492 + C14493 - C14494 - C14495) * C48362) *
                         C48329) *
                        C48083 +
                    (((C11604 * C3468 -
                       ((C113 * C319 + C48228 * C337) * C3465 +
                        (C113 * C307 + C48228 * C320) * C3467) +
                       C11605 * C48129) *
                          C31866 +
                      (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
                       C11997 * C48129) *
                          C48362) *
                         C16471 +
                     ((C3640 - (C3641 + C3642) + C3643) * C31866 +
                      (C14698 - (C14699 + C14700) + C14701) * C48362) *
                         C48329) *
                        C48090 +
                    ((((C113 * C308 + C48228 * C321) * C3467 +
                       (C113 * C322 + C48228 * C338) * C3465 - C11998 * C3468 -
                       C11999 * C48129) *
                          C31866 +
                      (C11998 * C3467 + C11999 * C3465 - C12000 * C3468 -
                       C12001 * C48129) *
                          C48362) *
                         C16471 +
                     ((C3648 + C3649 - C3650 - C3651) * C31866 +
                      (C14702 + C14703 - C14704 - C14705) * C48362) *
                         C48329) *
                        C3071) *
                       C48296 +
                   ((((C3472 - (C3471 + C3470) + C3473) * C31866 +
                      (C14494 - (C14493 + C14492) + C14495) * C48362) *
                         C16471 +
                     ((C3476 - (C3475 + C3474) + C3477) * C31866 +
                      (C14496 - (C14497 + C14498) + C14499) * C48362) *
                         C48329) *
                        C48083 +
                    (((C3642 + C3641 - C3640 - C3643) * C31866 +
                      (C14700 + C14699 - C14698 - C14701) * C48362) *
                         C16471 +
                     ((C3646 + C3645 - C3644 - C3647) * C31866 +
                      (C15038 + C15039 - C15040 - C15041) * C48362) *
                         C48329) *
                        C48090 +
                    (((C3650 - (C3649 + C3648) + C3651) * C31866 +
                      (C14704 - (C14703 + C14702) + C14705) * C48362) *
                         C16471 +
                     ((C3654 - (C3653 + C3652) + C3655) * C31866 +
                      ((C113 * C1393 + C48228 * C1410) * C3468 -
                       (C1711 * C3465 + C1710 * C3467) +
                       (C113 * C1411 + C48228 * C1420) * C48129) *
                          C48362) *
                         C48329) *
                        C3071) *
                       C48008)) /
                 (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C47030 +
             (C113 * C123 + C48228 * C136) * C48125 - C11120 * C47022 -
             C11121 * C48132 + C11122 * C47036 + C11123 * C4043) *
                C31866 +
            (C11120 * C47030 + C11121 * C48125 - C11122 * C47022 -
             C11123 * C48132 + C12882 * C47036 + C12883 * C4043) *
                C48362) *
               C16471 +
           ((C4048 + C4049 - C4050 - C4051 + C4052 + C4053) * C31866 +
            (C15188 + C15189 - C15190 - C15191 + C15192 + C15193) * C48362) *
               C48329) *
              C48083 +
          (((C11604 * C47022 -
             ((C113 * C319 + C48228 * C337) * C48125 +
              (C113 * C307 + C48228 * C320) * C47030) +
             C11605 * C48132 - C11996 * C47036 - C11997 * C4043) *
                C31866 +
            (C11996 * C47022 - (C11605 * C48125 + C11604 * C47030) +
             C11997 * C48132 - C13366 * C47036 - C13367 * C4043) *
                C48362) *
               C16471 +
           ((C4218 - (C4219 + C4220) + C4221 - C4222 - C4223) * C31866 +
            (C15394 - (C15395 + C15396) + C15397 - C15398 - C15399) * C48362) *
               C48329) *
              C48090 +
          ((((C113 * C308 + C48228 * C321) * C47030 +
             (C113 * C322 + C48228 * C338) * C48125 - C11998 * C47022 -
             C11999 * C48132 + C12000 * C47036 + C12001 * C4043) *
                C31866 +
            (C11998 * C47030 + C11999 * C48125 - C12000 * C47022 -
             C12001 * C48132 + (C113 * C7735 + C48228 * C7737) * C47036 +
             (C113 * C7738 + C48228 * C7741) * C4043) *
                C48362) *
               C16471 +
           ((C374 * C47030 + C375 * C48125 - C1708 * C47022 - C1709 * C48132 +
             C12002 * C47036 + C12003 * C4043) *
                C31866 +
            (C1708 * C47030 + C1709 * C48125 - C12002 * C47022 -
             C12003 * C48132 + (C113 * C7736 + C48228 * C7739) * C47036 +
             (C113 * C7740 + C48228 * C7742) * C4043) *
                C48362) *
               C48329) *
              C3071) *
         C47998) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3467 +
             (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
             C11121 * C48129) *
                C31866 +
            (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
             C11123 * C48129) *
                C48362) *
               C16471 +
           ((C3470 + C3471 - C3472 - C3473) * C31866 +
            (C14492 + C14493 - C14494 - C14495) * C48362) *
               C48329) *
              C48388 +
          (((C11604 * C3468 -
             ((C113 * C319 + C48228 * C337) * C3465 +
              (C113 * C307 + C48228 * C320) * C3467) +
             C11605 * C48129) *
                C31866 +
            (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
             C11997 * C48129) *
                C48362) *
               C16471 +
           ((C3640 - (C3641 + C3642) + C3643) * C31866 +
            (C14698 - (C14699 + C14700) + C14701) * C48362) *
               C48329) *
              C48384 +
          ((((C113 * C308 + C48228 * C321) * C3467 +
             (C113 * C322 + C48228 * C338) * C3465 - C11998 * C3468 -
             C11999 * C48129) *
                C31866 +
            (C11998 * C3467 + C11999 * C3465 - C12000 * C3468 -
             C12001 * C48129) *
                C48362) *
               C16471 +
           ((C3648 + C3649 - C3650 - C3651) * C31866 +
            (C14702 + C14703 - C14704 - C14705) * C48362) *
               C48329) *
              C48374 +
          (((C12474 * C3468 -
             ((C113 * C1261 + C48228 * C1271) * C3465 +
              (C113 * C1253 + C48228 * C1262) * C3467) +
             C12475 * C48129) *
                C31866 +
            ((C113 * C6381 + C48228 * C6383) * C3468 -
             (C12475 * C3465 + C12474 * C3467) +
             (C113 * C6384 + C48228 * C6387) * C48129) *
                C48362) *
               C16471 +
           ((C12139 * C3468 - (C1540 * C3465 + C1541 * C3467) +
             C12138 * C48129) *
                C31866 +
            ((C113 * C6382 + C48228 * C6385) * C3468 -
             (C12138 * C3465 + C12139 * C3467) +
             (C113 * C6386 + C48228 * C6388) * C48129) *
                C48362) *
               C48329) *
              C48352) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C3467 +
              (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
              C11121 * C48129) *
                 C31866 +
             (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
              C11123 * C48129) *
                 C48362) *
                C16471 +
            ((C3470 + C3471 - C3472 - C3473) * C31866 +
             (C14492 + C14493 - C14494 - C14495) * C48362) *
                C48329) *
               C2691 +
           (((C11604 * C3468 -
              ((C113 * C319 + C48228 * C337) * C3465 +
               (C113 * C307 + C48228 * C320) * C3467) +
              C11605 * C48129) *
                 C31866 +
             (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
              C11997 * C48129) *
                 C48362) *
                C16471 +
            ((C3640 - (C3641 + C3642) + C3643) * C31866 +
             (C14698 - (C14699 + C14700) + C14701) * C48362) *
                C48329) *
               C48087) *
              C48378 +
          ((((C3472 - (C3471 + C3470) + C3473) * C31866 +
             (C14494 - (C14493 + C14492) + C14495) * C48362) *
                C16471 +
            ((C3476 - (C3475 + C3474) + C3477) * C31866 +
             (C14496 - (C14497 + C14498) + C14499) * C48362) *
                C48329) *
               C2691 +
           (((C3642 + C3641 - C3640 - C3643) * C31866 +
             (C14700 + C14699 - C14698 - C14701) * C48362) *
                C16471 +
            ((C3646 + C3645 - C3644 - C3647) * C31866 +
             (C15038 + C15039 - C15040 - C15041) * C48362) *
                C48329) *
               C48087) *
              C48365 +
          (((C3490 * C31866 + (C14498 + C14497 - C14496 - C14499) * C48362) *
                C16471 +
            ((C3480 + C3479 - C3478 - C3481) * C31866 +
             (C14500 + C14501 - C14502 - C14503) * C48362) *
                C48329) *
               C2691 +
           ((C3930 * C31866 + (C15040 - (C15039 + C15038) + C15041) * C48362) *
                C16471 +
            ((C3927 - (C3926 + C3925) + C3928) * C31866 +
             ((C113 * C2317 + C48228 * C2318) * C3468 -
              (C1058 * C3465 + C1057 * C3467) +
              (C113 * C2319 + C48228 * C2320) * C48129) *
                 C48362) *
                C48329) *
               C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3757 +
             (C113 * C123 + C48228 * C136) * C48389 - C11120 * C3758 -
             C11121 * C48386 + C11122 * C3759 + C11123 * C48377 -
             C12882 * C3760 - C12883 * C48358) *
                C31866 +
            (C11120 * C3757 + C11121 * C48389 - C11122 * C3758 -
             C11123 * C48386 + C12882 * C3759 + C12883 * C48377 -
             C12884 * C3760 - C12885 * C48358) *
                C48362) *
               C16471 +
           ((C3762 + C3763 - C3764 - C3765 + C3766 + C3767 - C3768 - C3769) *
                C31866 +
            (C14836 + C14837 - C14838 - C14839 + C14840 + C14841 - C14842 -
             C14843) *
                C48362) *
               C48329) *
              C2691 +
          (((C11604 * C3758 -
             ((C113 * C319 + C48228 * C337) * C48389 +
              (C113 * C307 + C48228 * C320) * C3757) +
             C11605 * C48386 - C11996 * C3759 - C11997 * C48377 +
             C13366 * C3760 + C13367 * C48358) *
                C31866 +
            (C11996 * C3758 - (C11605 * C48389 + C11604 * C3757) +
             C11997 * C48386 - C13366 * C3759 - C13367 * C48377 +
             (C113 * C7249 + C48228 * C7251) * C3760 +
             (C113 * C7252 + C48228 * C7255) * C48358) *
                C48362) *
               C16471 +
           ((C1052 * C3758 - (C372 * C48389 + C373 * C3757) + C1053 * C48386 -
             C2338 * C3759 - C2339 * C48377 + C13090 * C3760 +
             C13091 * C48358) *
                C31866 +
            (C2338 * C3758 - (C1053 * C48389 + C1052 * C3757) + C2339 * C48386 -
             C13090 * C3759 - C13091 * C48377 +
             (C113 * C7250 + C48228 * C7253) * C3760 +
             (C113 * C7254 + C48228 * C7256) * C48358) *
                C48362) *
               C48329) *
              C48087) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C47030 +
              (C113 * C123 + C48228 * C136) * C48125 - C11120 * C47022 -
              C11121 * C48132 + C11122 * C47036 + C11123 * C4043) *
                 C31866 +
             (C11120 * C47030 + C11121 * C48125 - C11122 * C47022 -
              C11123 * C48132 + C12882 * C47036 + C12883 * C4043) *
                 C48362) *
                C16471 +
            ((C4048 + C4049 - C4050 - C4051 + C4052 + C4053) * C31866 +
             (C15188 + C15189 - C15190 - C15191 + C15192 + C15193) * C48362) *
                C48329) *
               C2691 +
           (((C11604 * C47022 -
              ((C113 * C319 + C48228 * C337) * C48125 +
               (C113 * C307 + C48228 * C320) * C47030) +
              C11605 * C48132 - C11996 * C47036 - C11997 * C4043) *
                 C31866 +
             (C11996 * C47022 - (C11605 * C48125 + C11604 * C47030) +
              C11997 * C48132 - C13366 * C47036 - C13367 * C4043) *
                 C48362) *
                C16471 +
            ((C4218 - (C4219 + C4220) + C4221 - C4222 - C4223) * C31866 +
             (C15394 - (C15395 + C15396) + C15397 - C15398 - C15399) * C48362) *
                C48329) *
               C48087) *
              C48296 +
          ((((C4050 - (C4049 + C4048) + C4051 - C4052 - C4053) * C31866 +
             (C15190 - (C15189 + C15188) + C15191 - C15192 - C15193) * C48362) *
                C16471 +
            ((C4056 - (C4055 + C4054) + C4057 - C4058 - C4059) * C31866 +
             (C15194 - (C15195 + C15196) + C15197 - C15198 - C15199) * C48362) *
                C48329) *
               C2691 +
           (((C4220 + C4219 - C4218 - C4221 + C4222 + C4223) * C31866 +
             (C15396 + C15395 - C15394 - C15397 + C15398 + C15399) * C48362) *
                C16471 +
            ((C4226 + C4225 - C4224 - C4227 + C4228 + C4229) * C31866 +
             (C1054 * C47030 + C1056 * C48125 - C2340 * C47022 -
              C2341 * C48132 + (C113 * C2583 + C48228 * C2588) * C47036 +
              (C113 * C2589 + C48228 * C2592) * C4043) *
                 C48362) *
                C48329) *
               C48087) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C3467 +
              (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
              C11121 * C48129) *
                 C31866 +
             (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
              C11123 * C48129) *
                 C48362) *
                C16471 +
            ((C3470 + C3471 - C3472 - C3473) * C31866 +
             (C14492 + C14493 - C14494 - C14495) * C48362) *
                C48329) *
               C2691 +
           (((C11604 * C3468 -
              ((C113 * C319 + C48228 * C337) * C3465 +
               (C113 * C307 + C48228 * C320) * C3467) +
              C11605 * C48129) *
                 C31866 +
             (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
              C11997 * C48129) *
                 C48362) *
                C16471 +
            ((C3640 - (C3641 + C3642) + C3643) * C31866 +
             (C14698 - (C14699 + C14700) + C14701) * C48362) *
                C48329) *
               C48087) *
              C48378 +
          ((((C3472 - (C3471 + C3470) + C3473) * C31866 +
             (C14494 - (C14493 + C14492) + C14495) * C48362) *
                C16471 +
            ((C3476 - (C3475 + C3474) + C3477) * C31866 +
             (C14496 - (C14497 + C14498) + C14499) * C48362) *
                C48329) *
               C2691 +
           (((C3642 + C3641 - C3640 - C3643) * C31866 +
             (C14700 + C14699 - C14698 - C14701) * C48362) *
                C16471 +
            ((C3646 + C3645 - C3644 - C3647) * C31866 +
             (C15038 + C15039 - C15040 - C15041) * C48362) *
                C48329) *
               C48087) *
              C48365 +
          (((C3490 * C31866 + (C14498 + C14497 - C14496 - C14499) * C48362) *
                C16471 +
            ((C3480 + C3479 - C3478 - C3481) * C31866 +
             (C14500 + C14501 - C14502 - C14503) * C48362) *
                C48329) *
               C2691 +
           ((C3930 * C31866 + (C15040 - (C15039 + C15038) + C15041) * C48362) *
                C16471 +
            ((C3927 - (C3926 + C3925) + C3928) * C31866 +
             ((C113 * C2317 + C48228 * C2318) * C3468 -
              (C1058 * C3465 + C1057 * C3467) +
              (C113 * C2319 + C48228 * C2320) * C48129) *
                 C48362) *
                C48329) *
               C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3467 +
             (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
             C11121 * C48129) *
                C31866 +
            (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
             C11123 * C48129) *
                C48362) *
               C16471 +
           ((C3470 + C3471 - C3472 - C3473) * C31866 +
            (C14492 + C14493 - C14494 - C14495) * C48362) *
               C48329) *
              C48388 +
          (((C11604 * C3468 -
             ((C113 * C319 + C48228 * C337) * C3465 +
              (C113 * C307 + C48228 * C320) * C3467) +
             C11605 * C48129) *
                C31866 +
            (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
             C11997 * C48129) *
                C48362) *
               C16471 +
           ((C3640 - (C3641 + C3642) + C3643) * C31866 +
            (C14698 - (C14699 + C14700) + C14701) * C48362) *
               C48329) *
              C48384 +
          ((((C113 * C308 + C48228 * C321) * C3467 +
             (C113 * C322 + C48228 * C338) * C3465 - C11998 * C3468 -
             C11999 * C48129) *
                C31866 +
            (C11998 * C3467 + C11999 * C3465 - C12000 * C3468 -
             C12001 * C48129) *
                C48362) *
               C16471 +
           ((C3648 + C3649 - C3650 - C3651) * C31866 +
            (C14702 + C14703 - C14704 - C14705) * C48362) *
               C48329) *
              C48374 +
          (((C12474 * C3468 -
             ((C113 * C1261 + C48228 * C1271) * C3465 +
              (C113 * C1253 + C48228 * C1262) * C3467) +
             C12475 * C48129) *
                C31866 +
            ((C113 * C6381 + C48228 * C6383) * C3468 -
             (C12475 * C3465 + C12474 * C3467) +
             (C113 * C6384 + C48228 * C6387) * C48129) *
                C48362) *
               C16471 +
           ((C12139 * C3468 - (C1540 * C3465 + C1541 * C3467) +
             C12138 * C48129) *
                C31866 +
            ((C113 * C6382 + C48228 * C6385) * C3468 -
             (C12138 * C3465 + C12139 * C3467) +
             (C113 * C6386 + C48228 * C6388) * C48129) *
                C48362) *
               C48329) *
              C48352) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C31866 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C16471 +
            ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
               C1519 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C31866) *
                C16471) *
               C1520 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C31866 +
             (C11998 * C114 + C11999 * C48042) * C48362) *
                C16471 +
            ((C386 + C387) * C31866 + (C10948 + C10949) * C48362) * C48329) *
               C1521 -
           (((C12140 + C12141) * C48362 + (C1544 + C1545) * C31866) * C48329 +
            ((C12475 * C48042 + C12474 * C114) * C48362 +
             ((C113 * C1261 + C48228 * C1271) * C48042 +
              (C113 * C1253 + C48228 * C1262) * C114) *
                 C31866) *
                C16471) *
               C48352) *
              C48296 +
          ((((C385 + C384) * C31866 + (C10947 + C10946) * C48362) * C16471 +
            ((C383 + C382) * C31866 + (C10950 + C10951) * C48362) * C48329) *
               C1520 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) * C16471) *
               C1519 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C31866) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C31866) * C16471) *
               C1521 +
           (((C1545 + C1544) * C31866 + (C12141 + C12140) * C48362) * C16471 +
            ((C1543 + C1542) * C31866 +
             ((C113 * C1815 + C48228 * C1820) * C114 +
              (C113 * C1821 + C48228 * C1824) * C48042) *
                 C48362) *
                C48329) *
               C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C31866 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C16471 +
            ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
               C48310 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C31866) *
                C16471) *
               C48087) *
              C713 +
          ((((C385 + C384) * C31866 + (C10947 + C10946) * C48362) * C16471 +
            ((C383 + C382) * C31866 + (C10950 + C10951) * C48362) * C48329) *
               C48087 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) * C16471) *
               C48310) *
              C714 +
          (((C184 * C31866 + (C10795 + C10794) * C48362) * C16471 +
            ((C179 + C178) * C31866 + (C10796 + C10797) * C48362) * C48329) *
               C48310 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C31866) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C31866) * C16471) *
               C48087) *
              C715 +
          (((C722 * C31866 + (C11255 + C11254) * C48362) * C16471 +
            ((C731 + C730) * C31866 +
             ((C113 * C1017 + C48228 * C1026) * C114 +
              (C113 * C1027 + C48228 * C1032) * C48042) *
                 C48362) *
                C48329) *
               C48087 -
           (((C10798 + C10799) * C48362 + (C181 + C180) * C31866) * C48329 +
            ((C10797 + C10796) * C48362 + C185 * C31866) * C16471) *
               C48310) *
              C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C1938 +
              (C113 * C123 + C48228 * C136) * C1935 - C11120 * C1939 -
              C11121 * C1936 + C11122 * C1940 + C11123 * C48345) *
                 C31866 +
             (C11120 * C1938 + C11121 * C1935 - C11122 * C1939 -
              C11123 * C1936 + C12882 * C1940 + C12883 * C48345) *
                 C48362) *
                C16471 +
            ((C1942 + C1943 - C1944 - C1945 + C1946 + C1947) * C31866 +
             (C12622 + C12623 - C12624 - C12625 + C12626 + C12627) * C48362) *
                C48329) *
               C48310 +
           (((C11604 * C1939 -
              ((C113 * C319 + C48228 * C337) * C1935 +
               (C113 * C307 + C48228 * C320) * C1938) +
              C11605 * C1936 - C11996 * C1940 - C11997 * C48345) *
                 C31866 +
             (C11996 * C1939 - (C11605 * C1935 + C11604 * C1938) +
              C11997 * C1936 - C13366 * C1940 - C13367 * C48345) *
                 C48362) *
                C16471 +
            ((C2322 - (C2323 + C2324) + C2325 - C2342 - C2343) * C31866 +
             (C13082 - (C13083 + C13084) + C13085 - C13092 - C13093) * C48362) *
                C48329) *
               C48087) *
              C48296 +
          ((((C1944 - (C1943 + C1942) + C1945 - C1946 - C1947) * C31866 +
             (C12624 - (C12623 + C12622) + C12625 - C12626 - C12627) * C48362) *
                C16471 +
            ((C1950 - (C1949 + C1948) + C1951 - C1952 - C1953) * C31866 +
             (C12628 - (C12629 + C12630) + C12631 - C12632 - C12633) * C48362) *
                C48329) *
               C48310 +
           (((C2324 + C2323 - C2322 - C2325 + C2342 + C2343) * C31866 +
             (C13084 + C13083 - C13082 - C13085 + C13092 + C13093) * C48362) *
                C16471 +
            ((C2332 + C2331 - C2330 - C2333 + C2344 + C2345) * C31866 +
             (C1054 * C1938 + C1056 * C1935 - C2340 * C1939 - C2341 * C1936 +
              (C113 * C2583 + C48228 * C2588) * C1940 +
              (C113 * C2589 + C48228 * C2592) * C48345) *
                 C48362) *
                C48329) *
               C48087) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C831 +
             (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
             C11121 * C48129) *
                C31866 +
            (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
             C11123 * C48129) *
                C48362) *
               C16471 +
           ((C838 + C839 - C840 - C841) * C31866 +
            (C11386 + C11387 - C11388 - C11389) * C48362) *
               C48329) *
              C1519 +
          (((C11604 * C832 -
             ((C113 * C319 + C48228 * C337) * C48311 +
              (C113 * C307 + C48228 * C320) * C831) +
             C11605 * C48129) *
                C31866 +
            (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
             C11997 * C48129) *
                C48362) *
               C16471 +
           ((C1059 - (C1036 + C1037) + C1060) * C31866 +
            (C11596 - (C11597 + C11598) + C11599) * C48362) *
               C48329) *
              C1520 +
          ((((C113 * C308 + C48228 * C321) * C831 +
             (C113 * C322 + C48228 * C338) * C48311 - C11998 * C832 -
             C11999 * C48129) *
                C31866 +
            (C11998 * C831 + C11999 * C48311 - C12000 * C832 -
             C12001 * C48129) *
                C48362) *
               C16471 +
           ((C1696 + C1697 - C1712 - C1713) * C31866 +
            (C12336 + C12337 - C12338 - C12339) * C48362) *
               C48329) *
              C1521 +
          (((C12474 * C832 -
             ((C113 * C1261 + C48228 * C1271) * C48311 +
              (C113 * C1253 + C48228 * C1262) * C831) +
             C12475 * C48129) *
                C31866 +
            ((C113 * C6381 + C48228 * C6383) * C832 -
             (C12475 * C48311 + C12474 * C831) +
             (C113 * C6384 + C48228 * C6387) * C48129) *
                C48362) *
               C16471 +
           ((C12139 * C832 - (C1540 * C48311 + C1541 * C831) +
             C12138 * C48129) *
                C31866 +
            ((C113 * C6382 + C48228 * C6385) * C832 -
             (C12138 * C48311 + C12139 * C831) +
             (C113 * C6386 + C48228 * C6388) * C48129) *
                C48362) *
               C48329) *
              C48352) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C831 +
              (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
              C11121 * C48129) *
                 C31866 +
             (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
              C11123 * C48129) *
                 C48362) *
                C16471 +
            ((C838 + C839 - C840 - C841) * C31866 +
             (C11386 + C11387 - C11388 - C11389) * C48362) *
                C48329) *
               C48310 +
           (((C11604 * C832 -
              ((C113 * C319 + C48228 * C337) * C48311 +
               (C113 * C307 + C48228 * C320) * C831) +
              C11605 * C48129) *
                 C31866 +
             (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
              C11997 * C48129) *
                 C48362) *
                C16471 +
            ((C1059 - (C1036 + C1037) + C1060) * C31866 +
             (C11596 - (C11597 + C11598) + C11599) * C48362) *
                C48329) *
               C48087) *
              C302 +
          ((((C840 - (C839 + C838) + C841) * C31866 +
             (C11388 - (C11387 + C11386) + C11389) * C48362) *
                C16471 +
            ((C844 - (C843 + C842) + C845) * C31866 +
             (C11390 - (C11391 + C11392) + C11393) * C48362) *
                C48329) *
               C48310 +
           (((C1037 + C1036 - C1059 - C1060) * C31866 +
             (C11598 + C11597 - C11596 - C11599) * C48362) *
                C16471 +
            ((C1043 + C1042 - C1061 - C1062) * C31866 +
             (C11600 + C11601 - C11602 - C11603) * C48362) *
                C48329) *
               C48087) *
              C303 +
          (((C864 * C31866 + (C11392 + C11391 - C11390 - C11393) * C48362) *
                C16471 +
            ((C848 + C847 - C846 - C849) * C31866 +
             (C11394 + C11395 - C11396 - C11397) * C48362) *
                C48329) *
               C48310 +
           ((C1066 * C31866 + (C11602 - (C11601 + C11600) + C11603) * C48362) *
                C16471 +
            ((C1063 - (C1047 + C1046) + C1064) * C31866 +
             ((C113 * C2317 + C48228 * C2318) * C832 -
              (C1058 * C48311 + C1057 * C831) +
              (C113 * C2319 + C48228 * C2320) * C48129) *
                 C48362) *
                C48329) *
               C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C2447 +
             (C113 * C123 + C48228 * C136) * C2443 - C11120 * C2448 -
             C11121 * C2444 + C11122 * C2449 + C11123 * C2445 - C12882 * C2450 -
             C12883 * C48358) *
                C31866 +
            (C11120 * C2447 + C11121 * C2443 - C11122 * C2448 - C11123 * C2444 +
             C12882 * C2449 + C12883 * C2445 - C12884 * C2450 -
             C12885 * C48358) *
                C48362) *
               C16471 +
           ((C2456 + C2457 - C2458 - C2459 + C2460 + C2461 - C2480 - C2481) *
                C31866 +
            (C13224 + C13225 - C13226 - C13227 + C13228 + C13229 - C13230 -
             C13231) *
                C48362) *
               C48329) *
              C48310 +
          (((C11604 * C2448 -
             ((C113 * C319 + C48228 * C337) * C2443 +
              (C113 * C307 + C48228 * C320) * C2447) +
             C11605 * C2444 - C11996 * C2449 - C11997 * C2445 + C13366 * C2450 +
             C13367 * C48358) *
                C31866 +
            (C11996 * C2448 - (C11605 * C2443 + C11604 * C2447) +
             C11997 * C2444 - C13366 * C2449 - C13367 * C2445 +
             (C113 * C7249 + C48228 * C7251) * C2450 +
             (C113 * C7252 + C48228 * C7255) * C48358) *
                C48362) *
               C16471 +
           ((C1052 * C2448 - (C372 * C2443 + C373 * C2447) + C1053 * C2444 -
             C2338 * C2449 - C2339 * C2445 + C13090 * C2450 + C13091 * C48358) *
                C31866 +
            (C2338 * C2448 - (C1053 * C2443 + C1052 * C2447) + C2339 * C2444 -
             C13090 * C2449 - C13091 * C2445 +
             (C113 * C7250 + C48228 * C7253) * C2450 +
             (C113 * C7254 + C48228 * C7256) * C48358) *
                C48362) *
               C48329) *
              C48087) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48228 * C122) * C114 +
                 (C113 * C123 + C48228 * C136) * C48042) *
                    C31866 +
                (C11120 * C114 + C11121 * C48042) * C48362) *
                   C16471 +
               ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
                  C48025 * C108 -
              (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
               ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) * C16471) *
                  C48025 * C109 +
              ((C184 * C31866 + (C10795 + C10794) * C48362) * C16471 +
               ((C179 + C178) * C31866 + (C10796 + C10797) * C48362) * C48329) *
                  C48025 * C110 -
              (((C10798 + C10799) * C48362 + (C181 + C180) * C31866) * C48329 +
               ((C10797 + C10796) * C48362 + C185 * C31866) * C16471) *
                  C48025 * C111 +
              ((C186 * C31866 + (C10799 + C10798) * C48362) * C16471 +
               ((C183 + C182) * C31866 +
                ((C113 * C833 + C48228 * C834) * C114 +
                 (C113 * C835 + C48228 * C836) * C48042) *
                    C48362) *
                   C48329) *
                  C48025 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((((C113 * C115 + C48228 * C122) * C114 +
                  (C113 * C123 + C48228 * C136) * C48042) *
                     C31866 +
                 (C11120 * C114 + C11121 * C48042) * C48362) *
                    C16471 +
                ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) *
                    C48329) *
                   C48381 -
               (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
                ((C11605 * C48042 + C11604 * C114) * C48362 +
                 ((C113 * C319 + C48228 * C337) * C48042 +
                  (C113 * C307 + C48228 * C320) * C114) *
                     C31866) *
                    C16471) *
                   C48369 +
               ((((C113 * C308 + C48228 * C321) * C114 +
                  (C113 * C322 + C48228 * C338) * C48042) *
                     C31866 +
                 (C11998 * C114 + C11999 * C48042) * C48362) *
                    C16471 +
                ((C386 + C387) * C31866 + (C10948 + C10949) * C48362) *
                    C48329) *
                   C48342) *
                  C302 +
              ((((C385 + C384) * C31866 + (C10947 + C10946) * C48362) * C16471 +
                ((C383 + C382) * C31866 + (C10950 + C10951) * C48362) *
                    C48329) *
                   C48369 -
               (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
                ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) *
                    C16471) *
                   C48381 -
               (((C10952 + C10953) * C48362 + (C389 + C388) * C31866) * C48329 +
                ((C10949 + C10948) * C48362 + (C387 + C386) * C31866) *
                    C16471) *
                   C48342) *
                  C303 +
              (((C184 * C31866 + (C10795 + C10794) * C48362) * C16471 +
                ((C179 + C178) * C31866 + (C10796 + C10797) * C48362) *
                    C48329) *
                   C48381 -
               (((C11254 + C11255) * C48362 + (C391 + C390) * C31866) * C48329 +
                ((C10951 + C10950) * C48362 + C394 * C31866) * C16471) *
                   C48369 +
               ((C395 * C31866 + (C10953 + C10952) * C48362) * C16471 +
                ((C393 + C392) * C31866 +
                 ((C113 * C1691 + C48228 * C1692) * C114 +
                  (C113 * C1693 + C48228 * C1694) * C48042) *
                     C48362) *
                    C48329) *
                   C48342) *
                  C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C510 +
             (C113 * C123 + C48228 * C136) * C48382 - C11120 * C511 -
             C11121 * C48371 + C11122 * C512 + C11123 * C48345) *
                C31866 +
            (C11120 * C510 + C11121 * C48382 - C11122 * C511 - C11123 * C48371 +
             C12882 * C512 + C12883 * C48345) *
                C48362) *
               C16471 +
           ((C554 + C555 - C597 - C598 + C599 + C600) * C31866 +
            (C11108 + C11109 - C11110 - C11111 + C11112 + C11113) * C48362) *
               C48329) *
              C48025 * C302 +
          (((C597 - (C555 + C554) + C598 - C599 - C600) * C31866 +
            (C11110 - (C11109 + C11108) + C11111 - C11112 - C11113) * C48362) *
               C16471 +
           ((C601 - (C565 + C564) + C602 - C603 - C604) * C31866 +
            (C11114 - (C11115 + C11116) + C11117 - C11118 - C11119) * C48362) *
               C48329) *
              C48025 * C303 +
          ((C612 * C31866 +
            (C11116 + C11115 - C11114 - C11117 + C11118 + C11119) * C48362) *
               C16471 +
           ((C577 + C576 - C605 - C606 + C607 + C608) * C31866 +
            (C593 * C510 + C594 * C48382 - C595 * C511 - C596 * C48371 +
             (C113 * C2451 + C48228 * C2452) * C512 +
             (C113 * C2453 + C48228 * C2454) * C48345) *
                C48362) *
               C48329) *
              C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C31866 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C16471 +
            ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
               C1177 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C31866) *
                C16471) *
               C1178 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C31866 +
             (C11998 * C114 + C11999 * C48042) * C48362) *
                C16471 +
            ((C386 + C387) * C31866 + (C10948 + C10949) * C48362) * C48329) *
               C48342) *
              C48378 +
          ((((C385 + C384) * C31866 + (C10947 + C10946) * C48362) * C16471 +
            ((C383 + C382) * C31866 + (C10950 + C10951) * C48362) * C48329) *
               C1178 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) * C16471) *
               C1177 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C31866) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C31866) * C16471) *
               C48342) *
              C48365 +
          (((C184 * C31866 + (C10795 + C10794) * C48362) * C16471 +
            ((C179 + C178) * C31866 + (C10796 + C10797) * C48362) * C48329) *
               C1177 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C31866) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C31866) * C16471) *
               C1178 +
           ((C395 * C31866 + (C10953 + C10952) * C48362) * C16471 +
            ((C393 + C392) * C31866 +
             ((C113 * C1691 + C48228 * C1692) * C114 +
              (C113 * C1693 + C48228 * C1694) * C48042) *
                 C48362) *
                C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C31866 +
            (C11120 * C114 + C11121 * C48042) * C48362) *
               C16471 +
           ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
              C1245 -
          (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
           ((C11605 * C48042 + C11604 * C114) * C48362 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C31866) *
               C16471) *
              C1246 +
          ((((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C31866 +
            (C11998 * C114 + C11999 * C48042) * C48362) *
               C16471 +
           ((C386 + C387) * C31866 + (C10948 + C10949) * C48362) * C48329) *
              C1247 -
          (((C12140 + C12141) * C48362 + (C1544 + C1545) * C31866) * C48329 +
           ((C12475 * C48042 + C12474 * C114) * C48362 +
            ((C113 * C1261 + C48228 * C1271) * C48042 +
             (C113 * C1253 + C48228 * C1262) * C114) *
                C31866) *
               C16471) *
              C1248 +
          ((((C113 * C1254 + C48228 * C1263) * C114 +
             (C113 * C1264 + C48228 * C1272) * C48042) *
                C31866 +
            ((C113 * C6867 + C48228 * C6869) * C114 +
             (C113 * C6870 + C48228 * C6873) * C48042) *
                C48362) *
               C16471 +
           (((C113 * C1255 + C48228 * C1265) * C114 +
             (C113 * C1266 + C48228 * C1273) * C48042) *
                C31866 +
            ((C113 * C6868 + C48228 * C6871) * C114 +
             (C113 * C6872 + C48228 * C6874) * C48042) *
                C48362) *
               C48329) *
              C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C510 +
             (C113 * C123 + C48228 * C136) * C48382 - C11120 * C511 -
             C11121 * C48371 + C11122 * C512 + C11123 * C48345) *
                C31866 +
            (C11120 * C510 + C11121 * C48382 - C11122 * C511 - C11123 * C48371 +
             C12882 * C512 + C12883 * C48345) *
                C48362) *
               C16471 +
           ((C554 + C555 - C597 - C598 + C599 + C600) * C31866 +
            (C11108 + C11109 - C11110 - C11111 + C11112 + C11113) * C48362) *
               C48329) *
              C1177 +
          (((C11604 * C511 -
             ((C113 * C319 + C48228 * C337) * C48382 +
              (C113 * C307 + C48228 * C320) * C510) +
             C11605 * C48371 - C11996 * C512 - C11997 * C48345) *
                C31866 +
            (C11996 * C511 - (C11605 * C48382 + C11604 * C510) +
             C11997 * C48371 - C13366 * C512 - C13367 * C48345) *
                C48362) *
               C16471 +
           ((C2948 - (C2949 + C2950) + C2951 - C2952 - C2953) * C31866 +
            (C13822 - (C13823 + C13824) + C13825 - C13826 - C13827) * C48362) *
               C48329) *
              C1178 +
          ((((C113 * C308 + C48228 * C321) * C510 +
             (C113 * C322 + C48228 * C338) * C48382 - C11998 * C511 -
             C11999 * C48371 + C12000 * C512 + C12001 * C48345) *
                C31866 +
            (C11998 * C510 + C11999 * C48382 - C12000 * C511 - C12001 * C48371 +
             (C113 * C7735 + C48228 * C7737) * C512 +
             (C113 * C7738 + C48228 * C7741) * C48345) *
                C48362) *
               C16471 +
           ((C374 * C510 + C375 * C48382 - C1708 * C511 - C1709 * C48371 +
             C12002 * C512 + C12003 * C48345) *
                C31866 +
            (C1708 * C510 + C1709 * C48382 - C12002 * C511 - C12003 * C48371 +
             (C113 * C7736 + C48228 * C7739) * C512 +
             (C113 * C7740 + C48228 * C7742) * C48345) *
                C48362) *
               C48329) *
              C48342) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C1938 +
             (C113 * C123 + C48228 * C136) * C1935 - C11120 * C1939 -
             C11121 * C1936 + C11122 * C1940 + C11123 * C48345) *
                C31866 +
            (C11120 * C1938 + C11121 * C1935 - C11122 * C1939 - C11123 * C1936 +
             C12882 * C1940 + C12883 * C48345) *
                C48362) *
               C16471 +
           ((C1942 + C1943 - C1944 - C1945 + C1946 + C1947) * C31866 +
            (C12622 + C12623 - C12624 - C12625 + C12626 + C12627) * C48362) *
               C48329) *
              C48025 * C48378 +
          (((C1944 - (C1943 + C1942) + C1945 - C1946 - C1947) * C31866 +
            (C12624 - (C12623 + C12622) + C12625 - C12626 - C12627) * C48362) *
               C16471 +
           ((C1950 - (C1949 + C1948) + C1951 - C1952 - C1953) * C31866 +
            (C12628 - (C12629 + C12630) + C12631 - C12632 - C12633) * C48362) *
               C48329) *
              C48025 * C48365 +
          ((C1964 * C31866 +
            (C12630 + C12629 - C12628 - C12631 + C12632 + C12633) * C48362) *
               C16471 +
           ((C1956 + C1955 - C1954 - C1957 + C1958 + C1959) * C31866 +
            (C593 * C1938 + C594 * C1935 - C595 * C1939 - C596 * C1936 +
             (C113 * C2451 + C48228 * C2452) * C1940 +
             (C113 * C2453 + C48228 * C2454) * C48345) *
                C48362) *
               C48329) *
              C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C1938 +
             (C113 * C123 + C48228 * C136) * C1935 - C11120 * C1939 -
             C11121 * C1936 + C11122 * C1940 + C11123 * C48345) *
                C31866 +
            (C11120 * C1938 + C11121 * C1935 - C11122 * C1939 - C11123 * C1936 +
             C12882 * C1940 + C12883 * C48345) *
                C48362) *
               C16471 +
           ((C1942 + C1943 - C1944 - C1945 + C1946 + C1947) * C31866 +
            (C12622 + C12623 - C12624 - C12625 + C12626 + C12627) * C48362) *
               C48329) *
              C48381 +
          (((C11604 * C1939 -
             ((C113 * C319 + C48228 * C337) * C1935 +
              (C113 * C307 + C48228 * C320) * C1938) +
             C11605 * C1936 - C11996 * C1940 - C11997 * C48345) *
                C31866 +
            (C11996 * C1939 - (C11605 * C1935 + C11604 * C1938) +
             C11997 * C1936 - C13366 * C1940 - C13367 * C48345) *
                C48362) *
               C16471 +
           ((C2322 - (C2323 + C2324) + C2325 - C2342 - C2343) * C31866 +
            (C13082 - (C13083 + C13084) + C13085 - C13092 - C13093) * C48362) *
               C48329) *
              C48369 +
          ((((C113 * C308 + C48228 * C321) * C1938 +
             (C113 * C322 + C48228 * C338) * C1935 - C11998 * C1939 -
             C11999 * C1936 + C12000 * C1940 + C12001 * C48345) *
                C31866 +
            (C11998 * C1938 + C11999 * C1935 - C12000 * C1939 - C12001 * C1936 +
             (C113 * C7735 + C48228 * C7737) * C1940 +
             (C113 * C7738 + C48228 * C7741) * C48345) *
                C48362) *
               C16471 +
           ((C374 * C1938 + C375 * C1935 - C1708 * C1939 - C1709 * C1936 +
             C12002 * C1940 + C12003 * C48345) *
                C31866 +
            (C1708 * C1938 + C1709 * C1935 - C12002 * C1939 - C12003 * C1936 +
             (C113 * C7736 + C48228 * C7739) * C1940 +
             (C113 * C7740 + C48228 * C7742) * C48345) *
                C48362) *
               C48329) *
              C48342) *
         C47998) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C2142 +
            (C113 * C123 + C48228 * C136) * C2137 - C11120 * C2143 -
            C11121 * C2138 + C11122 * C2144 + C11123 * C2139 - C12882 * C2145 -
            C12883 * C2140 + C12884 * C2146 + C12885 * C2141) *
               C31866 +
           (C11120 * C2142 + C11121 * C2137 - C11122 * C2143 - C11123 * C2138 +
            C12882 * C2144 + C12883 * C2139 - C12884 * C2145 - C12885 * C2140 +
            (C113 * C12861 + C48228 * C12863) * C2146 +
            (C113 * C12864 + C48228 * C12867) * C2141) *
               C48362) *
              C16471 +
          ((C164 * C2142 + C165 * C2137 - C584 * C2143 - C585 * C2138 +
            C586 * C2144 + C587 * C2139 - C2476 * C2145 - C2477 * C2140 +
            C12886 * C2146 + C12887 * C2141) *
               C31866 +
           (C584 * C2142 + C585 * C2137 - C586 * C2143 - C587 * C2138 +
            C2476 * C2144 + C2477 * C2139 - C12886 * C2145 - C12887 * C2140 +
            (C113 * C12862 + C48228 * C12865) * C2146 +
            (C113 * C12866 + C48228 * C12868) * C2141) *
               C48362) *
              C48329) *
         C48025 * C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C831 +
              (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
              C11121 * C48129) *
                 C31866 +
             (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
              C11123 * C48129) *
                 C48362) *
                C16471 +
            ((C838 + C839 - C840 - C841) * C31866 +
             (C11386 + C11387 - C11388 - C11389) * C48362) *
                C48329) *
               C1177 +
           (((C11604 * C832 -
              ((C113 * C319 + C48228 * C337) * C48311 +
               (C113 * C307 + C48228 * C320) * C831) +
              C11605 * C48129) *
                 C31866 +
             (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
              C11997 * C48129) *
                 C48362) *
                C16471 +
            ((C1059 - (C1036 + C1037) + C1060) * C31866 +
             (C11596 - (C11597 + C11598) + C11599) * C48362) *
                C48329) *
               C1178 +
           ((((C113 * C308 + C48228 * C321) * C831 +
              (C113 * C322 + C48228 * C338) * C48311 - C11998 * C832 -
              C11999 * C48129) *
                 C31866 +
             (C11998 * C831 + C11999 * C48311 - C12000 * C832 -
              C12001 * C48129) *
                 C48362) *
                C16471 +
            ((C1696 + C1697 - C1712 - C1713) * C31866 +
             (C12336 + C12337 - C12338 - C12339) * C48362) *
                C48329) *
               C48342) *
              C48296 +
          ((((C840 - (C839 + C838) + C841) * C31866 +
             (C11388 - (C11387 + C11386) + C11389) * C48362) *
                C16471 +
            ((C844 - (C843 + C842) + C845) * C31866 +
             (C11390 - (C11391 + C11392) + C11393) * C48362) *
                C48329) *
               C1177 +
           (((C1037 + C1036 - C1059 - C1060) * C31866 +
             (C11598 + C11597 - C11596 - C11599) * C48362) *
                C16471 +
            ((C1043 + C1042 - C1061 - C1062) * C31866 +
             (C11600 + C11601 - C11602 - C11603) * C48362) *
                C48329) *
               C1178 +
           (((C1712 - (C1697 + C1696) + C1713) * C31866 +
             (C12338 - (C12337 + C12336) + C12339) * C48362) *
                C16471 +
            ((C1714 - (C1703 + C1702) + C1715) * C31866 +
             ((C113 * C1393 + C48228 * C1410) * C832 -
              (C1711 * C48311 + C1710 * C831) +
              (C113 * C1411 + C48228 * C1420) * C48129) *
                 C48362) *
                C48329) *
               C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C831 +
             (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
             C11121 * C48129) *
                C31866 +
            (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
             C11123 * C48129) *
                C48362) *
               C16471 +
           ((C838 + C839 - C840 - C841) * C31866 +
            (C11386 + C11387 - C11388 - C11389) * C48362) *
               C48329) *
              C48025 * C713 +
          (((C840 - (C839 + C838) + C841) * C31866 +
            (C11388 - (C11387 + C11386) + C11389) * C48362) *
               C16471 +
           ((C844 - (C843 + C842) + C845) * C31866 +
            (C11390 - (C11391 + C11392) + C11393) * C48362) *
               C48329) *
              C48025 * C714 +
          ((C864 * C31866 + (C11392 + C11391 - C11390 - C11393) * C48362) *
               C16471 +
           ((C848 + C847 - C846 - C849) * C31866 +
            (C11394 + C11395 - C11396 - C11397) * C48362) *
               C48329) *
              C48025 * C715 +
          ((C865 * C31866 + (C11396 - (C11395 + C11394) + C11397) * C48362) *
               C16471 +
           ((C862 - (C851 + C850) + C863) * C31866 +
            ((C113 * C522 + C48228 * C541) * C832 -
             (C859 * C48311 + C858 * C831) +
             (C113 * C542 + C48228 * C552) * C48129) *
                C48362) *
               C48329) *
              C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C2447 +
             (C113 * C123 + C48228 * C136) * C2443 - C11120 * C2448 -
             C11121 * C2444 + C11122 * C2449 + C11123 * C2445 - C12882 * C2450 -
             C12883 * C48358) *
                C31866 +
            (C11120 * C2447 + C11121 * C2443 - C11122 * C2448 - C11123 * C2444 +
             C12882 * C2449 + C12883 * C2445 - C12884 * C2450 -
             C12885 * C48358) *
                C48362) *
               C16471 +
           ((C2456 + C2457 - C2458 - C2459 + C2460 + C2461 - C2480 - C2481) *
                C31866 +
            (C13224 + C13225 - C13226 - C13227 + C13228 + C13229 - C13230 -
             C13231) *
                C48362) *
               C48329) *
              C48025 * C48296 +
          (((C2458 - (C2457 + C2456) + C2459 - C2460 - C2461 + C2480 + C2481) *
                C31866 +
            (C13226 - (C13225 + C13224) + C13227 - C13228 - C13229 + C13230 +
             C13231) *
                C48362) *
               C16471 +
           ((C2468 - (C2467 + C2466) + C2469 - C2470 - C2471 + C2482 + C2483) *
                C31866 +
            (C591 * C2448 - (C590 * C2443 + C589 * C2447) + C592 * C2444 -
             C2478 * C2449 - C2479 * C2445 +
             (C113 * C2152 + C48228 * C2163) * C2450 +
             (C113 * C2164 + C48228 * C2170) * C48358) *
                C48362) *
               C48329) *
              C48025 * C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C31866 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C16471 +
            ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
               C48381 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C31866) *
                C16471) *
               C48369 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C31866 +
             (C11998 * C114 + C11999 * C48042) * C48362) *
                C16471 +
            ((C386 + C387) * C31866 + (C10948 + C10949) * C48362) * C48329) *
               C48342) *
              C302 +
          ((((C385 + C384) * C31866 + (C10947 + C10946) * C48362) * C16471 +
            ((C383 + C382) * C31866 + (C10950 + C10951) * C48362) * C48329) *
               C48369 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) * C16471) *
               C48381 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C31866) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C31866) * C16471) *
               C48342) *
              C303 +
          (((C184 * C31866 + (C10795 + C10794) * C48362) * C16471 +
            ((C179 + C178) * C31866 + (C10796 + C10797) * C48362) * C48329) *
               C48381 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C31866) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C31866) * C16471) *
               C48369 +
           ((C395 * C31866 + (C10953 + C10952) * C48362) * C16471 +
            ((C393 + C392) * C31866 +
             ((C113 * C1691 + C48228 * C1692) * C114 +
              (C113 * C1693 + C48228 * C1694) * C48042) *
                 C48362) *
                C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C31866 +
            (C11120 * C114 + C11121 * C48042) * C48362) *
               C16471 +
           ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
              C48025 * C108 -
          (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
           ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) * C16471) *
              C48025 * C109 +
          ((C184 * C31866 + (C10795 + C10794) * C48362) * C16471 +
           ((C179 + C178) * C31866 + (C10796 + C10797) * C48362) * C48329) *
              C48025 * C110 -
          (((C10798 + C10799) * C48362 + (C181 + C180) * C31866) * C48329 +
           ((C10797 + C10796) * C48362 + C185 * C31866) * C16471) *
              C48025 * C111 +
          ((C186 * C31866 + (C10799 + C10798) * C48362) * C16471 +
           ((C183 + C182) * C31866 + ((C113 * C833 + C48228 * C834) * C114 +
                                      (C113 * C835 + C48228 * C836) * C48042) *
                                         C48362) *
               C48329) *
              C48025 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C31866 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C16471 +
            ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
               C1177 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C31866) *
                C16471) *
               C1178 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C31866 +
             (C11998 * C114 + C11999 * C48042) * C48362) *
                C16471 +
            ((C386 + C387) * C31866 + (C10948 + C10949) * C48362) * C48329) *
               C48342) *
              C48378 +
          ((((C385 + C384) * C31866 + (C10947 + C10946) * C48362) * C16471 +
            ((C383 + C382) * C31866 + (C10950 + C10951) * C48362) * C48329) *
               C1178 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) * C16471) *
               C1177 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C31866) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C31866) * C16471) *
               C48342) *
              C48365 +
          (((C184 * C31866 + (C10795 + C10794) * C48362) * C16471 +
            ((C179 + C178) * C31866 + (C10796 + C10797) * C48362) * C48329) *
               C1177 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C31866) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C31866) * C16471) *
               C1178 +
           ((C395 * C31866 + (C10953 + C10952) * C48362) * C16471 +
            ((C393 + C392) * C31866 +
             ((C113 * C1691 + C48228 * C1692) * C114 +
              (C113 * C1693 + C48228 * C1694) * C48042) *
                 C48362) *
                C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C31866 +
            (C11120 * C114 + C11121 * C48042) * C48362) *
               C16471 +
           ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
              C1245 -
          (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
           ((C11605 * C48042 + C11604 * C114) * C48362 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C31866) *
               C16471) *
              C1246 +
          ((((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C31866 +
            (C11998 * C114 + C11999 * C48042) * C48362) *
               C16471 +
           ((C386 + C387) * C31866 + (C10948 + C10949) * C48362) * C48329) *
              C1247 -
          (((C12140 + C12141) * C48362 + (C1544 + C1545) * C31866) * C48329 +
           ((C12475 * C48042 + C12474 * C114) * C48362 +
            ((C113 * C1261 + C48228 * C1271) * C48042 +
             (C113 * C1253 + C48228 * C1262) * C114) *
                C31866) *
               C16471) *
              C1248 +
          ((((C113 * C1254 + C48228 * C1263) * C114 +
             (C113 * C1264 + C48228 * C1272) * C48042) *
                C31866 +
            ((C113 * C6867 + C48228 * C6869) * C114 +
             (C113 * C6870 + C48228 * C6873) * C48042) *
                C48362) *
               C16471 +
           (((C113 * C1255 + C48228 * C1265) * C114 +
             (C113 * C1266 + C48228 * C1273) * C48042) *
                C31866 +
            ((C113 * C6868 + C48228 * C6871) * C114 +
             (C113 * C6872 + C48228 * C6874) * C48042) *
                C48362) *
               C48329) *
              C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C1938 +
             (C113 * C123 + C48228 * C136) * C1935 - C11120 * C1939 -
             C11121 * C1936 + C11122 * C1940 + C11123 * C48345) *
                C31866 +
            (C11120 * C1938 + C11121 * C1935 - C11122 * C1939 - C11123 * C1936 +
             C12882 * C1940 + C12883 * C48345) *
                C48362) *
               C16471 +
           ((C1942 + C1943 - C1944 - C1945 + C1946 + C1947) * C31866 +
            (C12622 + C12623 - C12624 - C12625 + C12626 + C12627) * C48362) *
               C48329) *
              C48025 * C48378 +
          (((C1944 - (C1943 + C1942) + C1945 - C1946 - C1947) * C31866 +
            (C12624 - (C12623 + C12622) + C12625 - C12626 - C12627) * C48362) *
               C16471 +
           ((C1950 - (C1949 + C1948) + C1951 - C1952 - C1953) * C31866 +
            (C12628 - (C12629 + C12630) + C12631 - C12632 - C12633) * C48362) *
               C48329) *
              C48025 * C48365 +
          ((C1964 * C31866 +
            (C12630 + C12629 - C12628 - C12631 + C12632 + C12633) * C48362) *
               C16471 +
           ((C1956 + C1955 - C1954 - C1957 + C1958 + C1959) * C31866 +
            (C593 * C1938 + C594 * C1935 - C595 * C1939 - C596 * C1936 +
             (C113 * C2451 + C48228 * C2452) * C1940 +
             (C113 * C2453 + C48228 * C2454) * C48345) *
                C48362) *
               C48329) *
              C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C1938 +
             (C113 * C123 + C48228 * C136) * C1935 - C11120 * C1939 -
             C11121 * C1936 + C11122 * C1940 + C11123 * C48345) *
                C31866 +
            (C11120 * C1938 + C11121 * C1935 - C11122 * C1939 - C11123 * C1936 +
             C12882 * C1940 + C12883 * C48345) *
                C48362) *
               C16471 +
           ((C1942 + C1943 - C1944 - C1945 + C1946 + C1947) * C31866 +
            (C12622 + C12623 - C12624 - C12625 + C12626 + C12627) * C48362) *
               C48329) *
              C48381 +
          (((C11604 * C1939 -
             ((C113 * C319 + C48228 * C337) * C1935 +
              (C113 * C307 + C48228 * C320) * C1938) +
             C11605 * C1936 - C11996 * C1940 - C11997 * C48345) *
                C31866 +
            (C11996 * C1939 - (C11605 * C1935 + C11604 * C1938) +
             C11997 * C1936 - C13366 * C1940 - C13367 * C48345) *
                C48362) *
               C16471 +
           ((C2322 - (C2323 + C2324) + C2325 - C2342 - C2343) * C31866 +
            (C13082 - (C13083 + C13084) + C13085 - C13092 - C13093) * C48362) *
               C48329) *
              C48369 +
          ((((C113 * C308 + C48228 * C321) * C1938 +
             (C113 * C322 + C48228 * C338) * C1935 - C11998 * C1939 -
             C11999 * C1936 + C12000 * C1940 + C12001 * C48345) *
                C31866 +
            (C11998 * C1938 + C11999 * C1935 - C12000 * C1939 - C12001 * C1936 +
             (C113 * C7735 + C48228 * C7737) * C1940 +
             (C113 * C7738 + C48228 * C7741) * C48345) *
                C48362) *
               C16471 +
           ((C374 * C1938 + C375 * C1935 - C1708 * C1939 - C1709 * C1936 +
             C12002 * C1940 + C12003 * C48345) *
                C31866 +
            (C1708 * C1938 + C1709 * C1935 - C12002 * C1939 - C12003 * C1936 +
             (C113 * C7736 + C48228 * C7739) * C1940 +
             (C113 * C7740 + C48228 * C7742) * C48345) *
                C48362) *
               C48329) *
              C48342) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C3467 +
              (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
              C11121 * C48129) *
                 C31866 +
             (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
              C11123 * C48129) *
                 C48362) *
                C16471 +
            ((C3470 + C3471 - C3472 - C3473) * C31866 +
             (C14492 + C14493 - C14494 - C14495) * C48362) *
                C48329) *
               C48310 +
           (((C11604 * C3468 -
              ((C113 * C319 + C48228 * C337) * C3465 +
               (C113 * C307 + C48228 * C320) * C3467) +
              C11605 * C48129) *
                 C31866 +
             (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
              C11997 * C48129) *
                 C48362) *
                C16471 +
            ((C3640 - (C3641 + C3642) + C3643) * C31866 +
             (C14698 - (C14699 + C14700) + C14701) * C48362) *
                C48329) *
               C48087) *
              C48003 +
          ((((C3472 - (C3471 + C3470) + C3473) * C31866 +
             (C14494 - (C14493 + C14492) + C14495) * C48362) *
                C16471 +
            ((C3476 - (C3475 + C3474) + C3477) * C31866 +
             (C14496 - (C14497 + C14498) + C14499) * C48362) *
                C48329) *
               C48310 +
           (((C3642 + C3641 - C3640 - C3643) * C31866 +
             (C14700 + C14699 - C14698 - C14701) * C48362) *
                C16471 +
            ((C3646 + C3645 - C3644 - C3647) * C31866 +
             (C15038 + C15039 - C15040 - C15041) * C48362) *
                C48329) *
               C48087) *
              C48011 +
          (((C3490 * C31866 + (C14498 + C14497 - C14496 - C14499) * C48362) *
                C16471 +
            ((C3480 + C3479 - C3478 - C3481) * C31866 +
             (C14500 + C14501 - C14502 - C14503) * C48362) *
                C48329) *
               C48310 +
           ((C3930 * C31866 + (C15040 - (C15039 + C15038) + C15041) * C48362) *
                C16471 +
            ((C3927 - (C3926 + C3925) + C3928) * C31866 +
             ((C113 * C2317 + C48228 * C2318) * C3468 -
              (C1058 * C3465 + C1057 * C3467) +
              (C113 * C2319 + C48228 * C2320) * C48129) *
                 C48362) *
                C48329) *
               C48087) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C47030 +
              (C113 * C123 + C48228 * C136) * C48125 - C11120 * C47022 -
              C11121 * C48132 + C11122 * C47036 + C11123 * C4043) *
                 C31866 +
             (C11120 * C47030 + C11121 * C48125 - C11122 * C47022 -
              C11123 * C48132 + C12882 * C47036 + C12883 * C4043) *
                 C48362) *
                C16471 +
            ((C4048 + C4049 - C4050 - C4051 + C4052 + C4053) * C31866 +
             (C15188 + C15189 - C15190 - C15191 + C15192 + C15193) * C48362) *
                C48329) *
               C48310 +
           (((C11604 * C47022 -
              ((C113 * C319 + C48228 * C337) * C48125 +
               (C113 * C307 + C48228 * C320) * C47030) +
              C11605 * C48132 - C11996 * C47036 - C11997 * C4043) *
                 C31866 +
             (C11996 * C47022 - (C11605 * C48125 + C11604 * C47030) +
              C11997 * C48132 - C13366 * C47036 - C13367 * C4043) *
                 C48362) *
                C16471 +
            ((C4218 - (C4219 + C4220) + C4221 - C4222 - C4223) * C31866 +
             (C15394 - (C15395 + C15396) + C15397 - C15398 - C15399) * C48362) *
                C48329) *
               C48087) *
              C2799 +
          ((((C4050 - (C4049 + C4048) + C4051 - C4052 - C4053) * C31866 +
             (C15190 - (C15189 + C15188) + C15191 - C15192 - C15193) * C48362) *
                C16471 +
            ((C4056 - (C4055 + C4054) + C4057 - C4058 - C4059) * C31866 +
             (C15194 - (C15195 + C15196) + C15197 - C15198 - C15199) * C48362) *
                C48329) *
               C48310 +
           (((C4220 + C4219 - C4218 - C4221 + C4222 + C4223) * C31866 +
             (C15396 + C15395 - C15394 - C15397 + C15398 + C15399) * C48362) *
                C16471 +
            ((C4226 + C4225 - C4224 - C4227 + C4228 + C4229) * C31866 +
             (C1054 * C47030 + C1056 * C48125 - C2340 * C47022 -
              C2341 * C48132 + (C113 * C2583 + C48228 * C2588) * C47036 +
              (C113 * C2589 + C48228 * C2592) * C4043) *
                 C48362) *
                C48329) *
               C48087) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C3467 +
              (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
              C11121 * C48129) *
                 C31866 +
             (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
              C11123 * C48129) *
                 C48362) *
                C16471 +
            ((C3470 + C3471 - C3472 - C3473) * C31866 +
             (C14492 + C14493 - C14494 - C14495) * C48362) *
                C48329) *
               C48381 +
           (((C11604 * C3468 -
              ((C113 * C319 + C48228 * C337) * C3465 +
               (C113 * C307 + C48228 * C320) * C3467) +
              C11605 * C48129) *
                 C31866 +
             (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
              C11997 * C48129) *
                 C48362) *
                C16471 +
            ((C3640 - (C3641 + C3642) + C3643) * C31866 +
             (C14698 - (C14699 + C14700) + C14701) * C48362) *
                C48329) *
               C48369 +
           ((((C113 * C308 + C48228 * C321) * C3467 +
              (C113 * C322 + C48228 * C338) * C3465 - C11998 * C3468 -
              C11999 * C48129) *
                 C31866 +
             (C11998 * C3467 + C11999 * C3465 - C12000 * C3468 -
              C12001 * C48129) *
                 C48362) *
                C16471 +
            ((C3648 + C3649 - C3650 - C3651) * C31866 +
             (C14702 + C14703 - C14704 - C14705) * C48362) *
                C48329) *
               C48342) *
              C2799 +
          ((((C3472 - (C3471 + C3470) + C3473) * C31866 +
             (C14494 - (C14493 + C14492) + C14495) * C48362) *
                C16471 +
            ((C3476 - (C3475 + C3474) + C3477) * C31866 +
             (C14496 - (C14497 + C14498) + C14499) * C48362) *
                C48329) *
               C48381 +
           (((C3642 + C3641 - C3640 - C3643) * C31866 +
             (C14700 + C14699 - C14698 - C14701) * C48362) *
                C16471 +
            ((C3646 + C3645 - C3644 - C3647) * C31866 +
             (C15038 + C15039 - C15040 - C15041) * C48362) *
                C48329) *
               C48369 +
           (((C3650 - (C3649 + C3648) + C3651) * C31866 +
             (C14704 - (C14703 + C14702) + C14705) * C48362) *
                C16471 +
            ((C3654 - (C3653 + C3652) + C3655) * C31866 +
             ((C113 * C1393 + C48228 * C1410) * C3468 -
              (C1711 * C3465 + C1710 * C3467) +
              (C113 * C1411 + C48228 * C1420) * C48129) *
                 C48362) *
                C48329) *
               C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3467 +
             (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
             C11121 * C48129) *
                C31866 +
            (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
             C11123 * C48129) *
                C48362) *
               C16471 +
           ((C3470 + C3471 - C3472 - C3473) * C31866 +
            (C14492 + C14493 - C14494 - C14495) * C48362) *
               C48329) *
              C48025 * C48387 +
          (((C3472 - (C3471 + C3470) + C3473) * C31866 +
            (C14494 - (C14493 + C14492) + C14495) * C48362) *
               C16471 +
           ((C3476 - (C3475 + C3474) + C3477) * C31866 +
            (C14496 - (C14497 + C14498) + C14499) * C48362) *
               C48329) *
              C48025 * C48380 +
          ((C3490 * C31866 + (C14498 + C14497 - C14496 - C14499) * C48362) *
               C16471 +
           ((C3480 + C3479 - C3478 - C3481) * C31866 +
            (C14500 + C14501 - C14502 - C14503) * C48362) *
               C48329) *
              C48025 * C48367 +
          ((C3491 * C31866 + (C14502 - (C14501 + C14500) + C14503) * C48362) *
               C16471 +
           ((C3484 - (C3483 + C3482) + C3485) * C31866 +
            ((C113 * C522 + C48228 * C541) * C3468 -
             (C859 * C3465 + C858 * C3467) +
             (C113 * C542 + C48228 * C552) * C48129) *
                C48362) *
               C48329) *
              C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3757 +
             (C113 * C123 + C48228 * C136) * C48389 - C11120 * C3758 -
             C11121 * C48386 + C11122 * C3759 + C11123 * C48377 -
             C12882 * C3760 - C12883 * C48358) *
                C31866 +
            (C11120 * C3757 + C11121 * C48389 - C11122 * C3758 -
             C11123 * C48386 + C12882 * C3759 + C12883 * C48377 -
             C12884 * C3760 - C12885 * C48358) *
                C48362) *
               C16471 +
           ((C3762 + C3763 - C3764 - C3765 + C3766 + C3767 - C3768 - C3769) *
                C31866 +
            (C14836 + C14837 - C14838 - C14839 + C14840 + C14841 - C14842 -
             C14843) *
                C48362) *
               C48329) *
              C48025 * C2799 +
          (((C3764 - (C3763 + C3762) + C3765 - C3766 - C3767 + C3768 + C3769) *
                C31866 +
            (C14838 - (C14837 + C14836) + C14839 - C14840 - C14841 + C14842 +
             C14843) *
                C48362) *
               C16471 +
           ((C3772 - (C3771 + C3770) + C3773 - C3774 - C3775 + C3776 + C3777) *
                C31866 +
            (C591 * C3758 - (C590 * C48389 + C589 * C3757) + C592 * C48386 -
             C2478 * C3759 - C2479 * C48377 +
             (C113 * C2152 + C48228 * C2163) * C3760 +
             (C113 * C2164 + C48228 * C2170) * C48358) *
                C48362) *
               C48329) *
              C48025 * C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C47030 +
             (C113 * C123 + C48228 * C136) * C48125 - C11120 * C47022 -
             C11121 * C48132 + C11122 * C47036 + C11123 * C4043) *
                C31866 +
            (C11120 * C47030 + C11121 * C48125 - C11122 * C47022 -
             C11123 * C48132 + C12882 * C47036 + C12883 * C4043) *
                C48362) *
               C16471 +
           ((C4048 + C4049 - C4050 - C4051 + C4052 + C4053) * C31866 +
            (C15188 + C15189 - C15190 - C15191 + C15192 + C15193) * C48362) *
               C48329) *
              C48025 * C48003 +
          (((C4050 - (C4049 + C4048) + C4051 - C4052 - C4053) * C31866 +
            (C15190 - (C15189 + C15188) + C15191 - C15192 - C15193) * C48362) *
               C16471 +
           ((C4056 - (C4055 + C4054) + C4057 - C4058 - C4059) * C31866 +
            (C15194 - (C15195 + C15196) + C15197 - C15198 - C15199) * C48362) *
               C48329) *
              C48025 * C48011 +
          ((C4070 * C31866 +
            (C15196 + C15195 - C15194 - C15197 + C15198 + C15199) * C48362) *
               C16471 +
           ((C4062 + C4061 - C4060 - C4063 + C4064 + C4065) * C31866 +
            (C593 * C47030 + C594 * C48125 - C595 * C47022 - C596 * C48132 +
             (C113 * C2451 + C48228 * C2452) * C47036 +
             (C113 * C2453 + C48228 * C2454) * C4043) *
                C48362) *
               C48329) *
              C48025 * C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3467 +
             (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
             C11121 * C48129) *
                C31866 +
            (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
             C11123 * C48129) *
                C48362) *
               C16471 +
           ((C3470 + C3471 - C3472 - C3473) * C31866 +
            (C14492 + C14493 - C14494 - C14495) * C48362) *
               C48329) *
              C48025 * C48387 +
          (((C3472 - (C3471 + C3470) + C3473) * C31866 +
            (C14494 - (C14493 + C14492) + C14495) * C48362) *
               C16471 +
           ((C3476 - (C3475 + C3474) + C3477) * C31866 +
            (C14496 - (C14497 + C14498) + C14499) * C48362) *
               C48329) *
              C48025 * C48380 +
          ((C3490 * C31866 + (C14498 + C14497 - C14496 - C14499) * C48362) *
               C16471 +
           ((C3480 + C3479 - C3478 - C3481) * C31866 +
            (C14500 + C14501 - C14502 - C14503) * C48362) *
               C48329) *
              C48025 * C48367 +
          ((C3491 * C31866 + (C14502 - (C14501 + C14500) + C14503) * C48362) *
               C16471 +
           ((C3484 - (C3483 + C3482) + C3485) * C31866 +
            ((C113 * C522 + C48228 * C541) * C3468 -
             (C859 * C3465 + C858 * C3467) +
             (C113 * C542 + C48228 * C552) * C48129) *
                C48362) *
               C48329) *
              C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C3467 +
              (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
              C11121 * C48129) *
                 C31866 +
             (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
              C11123 * C48129) *
                 C48362) *
                C16471 +
            ((C3470 + C3471 - C3472 - C3473) * C31866 +
             (C14492 + C14493 - C14494 - C14495) * C48362) *
                C48329) *
               C48381 +
           (((C11604 * C3468 -
              ((C113 * C319 + C48228 * C337) * C3465 +
               (C113 * C307 + C48228 * C320) * C3467) +
              C11605 * C48129) *
                 C31866 +
             (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
              C11997 * C48129) *
                 C48362) *
                C16471 +
            ((C3640 - (C3641 + C3642) + C3643) * C31866 +
             (C14698 - (C14699 + C14700) + C14701) * C48362) *
                C48329) *
               C48369 +
           ((((C113 * C308 + C48228 * C321) * C3467 +
              (C113 * C322 + C48228 * C338) * C3465 - C11998 * C3468 -
              C11999 * C48129) *
                 C31866 +
             (C11998 * C3467 + C11999 * C3465 - C12000 * C3468 -
              C12001 * C48129) *
                 C48362) *
                C16471 +
            ((C3648 + C3649 - C3650 - C3651) * C31866 +
             (C14702 + C14703 - C14704 - C14705) * C48362) *
                C48329) *
               C48342) *
              C2799 +
          ((((C3472 - (C3471 + C3470) + C3473) * C31866 +
             (C14494 - (C14493 + C14492) + C14495) * C48362) *
                C16471 +
            ((C3476 - (C3475 + C3474) + C3477) * C31866 +
             (C14496 - (C14497 + C14498) + C14499) * C48362) *
                C48329) *
               C48381 +
           (((C3642 + C3641 - C3640 - C3643) * C31866 +
             (C14700 + C14699 - C14698 - C14701) * C48362) *
                C16471 +
            ((C3646 + C3645 - C3644 - C3647) * C31866 +
             (C15038 + C15039 - C15040 - C15041) * C48362) *
                C48329) *
               C48369 +
           (((C3650 - (C3649 + C3648) + C3651) * C31866 +
             (C14704 - (C14703 + C14702) + C14705) * C48362) *
                C16471 +
            ((C3654 - (C3653 + C3652) + C3655) * C31866 +
             ((C113 * C1393 + C48228 * C1410) * C3468 -
              (C1711 * C3465 + C1710 * C3467) +
              (C113 * C1411 + C48228 * C1420) * C48129) *
                 C48362) *
                C48329) *
               C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C31866 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C16471 +
            ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
               C48310 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C31866) *
                C16471) *
               C48087) *
              C713 +
          ((((C385 + C384) * C31866 + (C10947 + C10946) * C48362) * C16471 +
            ((C383 + C382) * C31866 + (C10950 + C10951) * C48362) * C48329) *
               C48087 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) * C16471) *
               C48310) *
              C714 +
          (((C184 * C31866 + (C10795 + C10794) * C48362) * C16471 +
            ((C179 + C178) * C31866 + (C10796 + C10797) * C48362) * C48329) *
               C48310 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C31866) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C31866) * C16471) *
               C48087) *
              C715 +
          (((C722 * C31866 + (C11255 + C11254) * C48362) * C16471 +
            ((C731 + C730) * C31866 +
             ((C113 * C1017 + C48228 * C1026) * C114 +
              (C113 * C1027 + C48228 * C1032) * C48042) *
                 C48362) *
                C48329) *
               C48087 -
           (((C10798 + C10799) * C48362 + (C181 + C180) * C31866) * C48329 +
            ((C10797 + C10796) * C48362 + C185 * C31866) * C16471) *
               C48310) *
              C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C31866 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C16471 +
            ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
               C1519 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C31866) *
                C16471) *
               C1520 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C31866 +
             (C11998 * C114 + C11999 * C48042) * C48362) *
                C16471 +
            ((C386 + C387) * C31866 + (C10948 + C10949) * C48362) * C48329) *
               C1521 -
           (((C12140 + C12141) * C48362 + (C1544 + C1545) * C31866) * C48329 +
            ((C12475 * C48042 + C12474 * C114) * C48362 +
             ((C113 * C1261 + C48228 * C1271) * C48042 +
              (C113 * C1253 + C48228 * C1262) * C114) *
                 C31866) *
                C16471) *
               C48352) *
              C48296 +
          ((((C385 + C384) * C31866 + (C10947 + C10946) * C48362) * C16471 +
            ((C383 + C382) * C31866 + (C10950 + C10951) * C48362) * C48329) *
               C1520 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) * C16471) *
               C1519 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C31866) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C31866) * C16471) *
               C1521 +
           (((C1545 + C1544) * C31866 + (C12141 + C12140) * C48362) * C16471 +
            ((C1543 + C1542) * C31866 +
             ((C113 * C1815 + C48228 * C1820) * C114 +
              (C113 * C1821 + C48228 * C1824) * C48042) *
                 C48362) *
                C48329) *
               C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C831 +
              (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
              C11121 * C48129) *
                 C31866 +
             (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
              C11123 * C48129) *
                 C48362) *
                C16471 +
            ((C838 + C839 - C840 - C841) * C31866 +
             (C11386 + C11387 - C11388 - C11389) * C48362) *
                C48329) *
               C48310 +
           (((C11604 * C832 -
              ((C113 * C319 + C48228 * C337) * C48311 +
               (C113 * C307 + C48228 * C320) * C831) +
              C11605 * C48129) *
                 C31866 +
             (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
              C11997 * C48129) *
                 C48362) *
                C16471 +
            ((C1059 - (C1036 + C1037) + C1060) * C31866 +
             (C11596 - (C11597 + C11598) + C11599) * C48362) *
                C48329) *
               C48087) *
              C302 +
          ((((C840 - (C839 + C838) + C841) * C31866 +
             (C11388 - (C11387 + C11386) + C11389) * C48362) *
                C16471 +
            ((C844 - (C843 + C842) + C845) * C31866 +
             (C11390 - (C11391 + C11392) + C11393) * C48362) *
                C48329) *
               C48310 +
           (((C1037 + C1036 - C1059 - C1060) * C31866 +
             (C11598 + C11597 - C11596 - C11599) * C48362) *
                C16471 +
            ((C1043 + C1042 - C1061 - C1062) * C31866 +
             (C11600 + C11601 - C11602 - C11603) * C48362) *
                C48329) *
               C48087) *
              C303 +
          (((C864 * C31866 + (C11392 + C11391 - C11390 - C11393) * C48362) *
                C16471 +
            ((C848 + C847 - C846 - C849) * C31866 +
             (C11394 + C11395 - C11396 - C11397) * C48362) *
                C48329) *
               C48310 +
           ((C1066 * C31866 + (C11602 - (C11601 + C11600) + C11603) * C48362) *
                C16471 +
            ((C1063 - (C1047 + C1046) + C1064) * C31866 +
             ((C113 * C2317 + C48228 * C2318) * C832 -
              (C1058 * C48311 + C1057 * C831) +
              (C113 * C2319 + C48228 * C2320) * C48129) *
                 C48362) *
                C48329) *
               C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C831 +
             (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
             C11121 * C48129) *
                C31866 +
            (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
             C11123 * C48129) *
                C48362) *
               C16471 +
           ((C838 + C839 - C840 - C841) * C31866 +
            (C11386 + C11387 - C11388 - C11389) * C48362) *
               C48329) *
              C1519 +
          (((C11604 * C832 -
             ((C113 * C319 + C48228 * C337) * C48311 +
              (C113 * C307 + C48228 * C320) * C831) +
             C11605 * C48129) *
                C31866 +
            (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
             C11997 * C48129) *
                C48362) *
               C16471 +
           ((C1059 - (C1036 + C1037) + C1060) * C31866 +
            (C11596 - (C11597 + C11598) + C11599) * C48362) *
               C48329) *
              C1520 +
          ((((C113 * C308 + C48228 * C321) * C831 +
             (C113 * C322 + C48228 * C338) * C48311 - C11998 * C832 -
             C11999 * C48129) *
                C31866 +
            (C11998 * C831 + C11999 * C48311 - C12000 * C832 -
             C12001 * C48129) *
                C48362) *
               C16471 +
           ((C1696 + C1697 - C1712 - C1713) * C31866 +
            (C12336 + C12337 - C12338 - C12339) * C48362) *
               C48329) *
              C1521 +
          (((C12474 * C832 -
             ((C113 * C1261 + C48228 * C1271) * C48311 +
              (C113 * C1253 + C48228 * C1262) * C831) +
             C12475 * C48129) *
                C31866 +
            ((C113 * C6381 + C48228 * C6383) * C832 -
             (C12475 * C48311 + C12474 * C831) +
             (C113 * C6384 + C48228 * C6387) * C48129) *
                C48362) *
               C16471 +
           ((C12139 * C832 - (C1540 * C48311 + C1541 * C831) +
             C12138 * C48129) *
                C31866 +
            ((C113 * C6382 + C48228 * C6385) * C832 -
             (C12138 * C48311 + C12139 * C831) +
             (C113 * C6386 + C48228 * C6388) * C48129) *
                C48362) *
               C48329) *
              C48352) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C31866 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C16471 +
            ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
               C48381 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C31866) *
                C16471) *
               C48369 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C31866 +
             (C11998 * C114 + C11999 * C48042) * C48362) *
                C16471 +
            ((C386 + C387) * C31866 + (C10948 + C10949) * C48362) * C48329) *
               C48342) *
              C302 +
          ((((C385 + C384) * C31866 + (C10947 + C10946) * C48362) * C16471 +
            ((C383 + C382) * C31866 + (C10950 + C10951) * C48362) * C48329) *
               C48369 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) * C16471) *
               C48381 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C31866) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C31866) * C16471) *
               C48342) *
              C303 +
          (((C184 * C31866 + (C10795 + C10794) * C48362) * C16471 +
            ((C179 + C178) * C31866 + (C10796 + C10797) * C48362) * C48329) *
               C48381 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C31866) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C31866) * C16471) *
               C48369 +
           ((C395 * C31866 + (C10953 + C10952) * C48362) * C16471 +
            ((C393 + C392) * C31866 +
             ((C113 * C1691 + C48228 * C1692) * C114 +
              (C113 * C1693 + C48228 * C1694) * C48042) *
                 C48362) *
                C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C31866 +
            (C11120 * C114 + C11121 * C48042) * C48362) *
               C16471 +
           ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
              C48025 * C108 -
          (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
           ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) * C16471) *
              C48025 * C109 +
          ((C184 * C31866 + (C10795 + C10794) * C48362) * C16471 +
           ((C179 + C178) * C31866 + (C10796 + C10797) * C48362) * C48329) *
              C48025 * C110 -
          (((C10798 + C10799) * C48362 + (C181 + C180) * C31866) * C48329 +
           ((C10797 + C10796) * C48362 + C185 * C31866) * C16471) *
              C48025 * C111 +
          ((C186 * C31866 + (C10799 + C10798) * C48362) * C16471 +
           ((C183 + C182) * C31866 + ((C113 * C833 + C48228 * C834) * C114 +
                                      (C113 * C835 + C48228 * C836) * C48042) *
                                         C48362) *
               C48329) *
              C48025 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C510 +
             (C113 * C123 + C48228 * C136) * C48382 - C11120 * C511 -
             C11121 * C48371 + C11122 * C512 + C11123 * C48345) *
                C31866 +
            (C11120 * C510 + C11121 * C48382 - C11122 * C511 - C11123 * C48371 +
             C12882 * C512 + C12883 * C48345) *
                C48362) *
               C16471 +
           ((C554 + C555 - C597 - C598 + C599 + C600) * C31866 +
            (C11108 + C11109 - C11110 - C11111 + C11112 + C11113) * C48362) *
               C48329) *
              C48025 * C302 +
          (((C597 - (C555 + C554) + C598 - C599 - C600) * C31866 +
            (C11110 - (C11109 + C11108) + C11111 - C11112 - C11113) * C48362) *
               C16471 +
           ((C601 - (C565 + C564) + C602 - C603 - C604) * C31866 +
            (C11114 - (C11115 + C11116) + C11117 - C11118 - C11119) * C48362) *
               C48329) *
              C48025 * C303 +
          ((C612 * C31866 +
            (C11116 + C11115 - C11114 - C11117 + C11118 + C11119) * C48362) *
               C16471 +
           ((C577 + C576 - C605 - C606 + C607 + C608) * C31866 +
            (C593 * C510 + C594 * C48382 - C595 * C511 - C596 * C48371 +
             (C113 * C2451 + C48228 * C2452) * C512 +
             (C113 * C2453 + C48228 * C2454) * C48345) *
                C48362) *
               C48329) *
              C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C31866 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C16471 +
            ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
               C1177 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C31866) *
                C16471) *
               C1178 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C31866 +
             (C11998 * C114 + C11999 * C48042) * C48362) *
                C16471 +
            ((C386 + C387) * C31866 + (C10948 + C10949) * C48362) * C48329) *
               C48342) *
              C48378 +
          ((((C385 + C384) * C31866 + (C10947 + C10946) * C48362) * C16471 +
            ((C383 + C382) * C31866 + (C10950 + C10951) * C48362) * C48329) *
               C1178 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) * C16471) *
               C1177 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C31866) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C31866) * C16471) *
               C48342) *
              C48365 +
          (((C184 * C31866 + (C10795 + C10794) * C48362) * C16471 +
            ((C179 + C178) * C31866 + (C10796 + C10797) * C48362) * C48329) *
               C1177 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C31866) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C31866) * C16471) *
               C1178 +
           ((C395 * C31866 + (C10953 + C10952) * C48362) * C16471 +
            ((C393 + C392) * C31866 +
             ((C113 * C1691 + C48228 * C1692) * C114 +
              (C113 * C1693 + C48228 * C1694) * C48042) *
                 C48362) *
                C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C31866 +
            (C11120 * C114 + C11121 * C48042) * C48362) *
               C16471 +
           ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
              C1245 -
          (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
           ((C11605 * C48042 + C11604 * C114) * C48362 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C31866) *
               C16471) *
              C1246 +
          ((((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C31866 +
            (C11998 * C114 + C11999 * C48042) * C48362) *
               C16471 +
           ((C386 + C387) * C31866 + (C10948 + C10949) * C48362) * C48329) *
              C1247 -
          (((C12140 + C12141) * C48362 + (C1544 + C1545) * C31866) * C48329 +
           ((C12475 * C48042 + C12474 * C114) * C48362 +
            ((C113 * C1261 + C48228 * C1271) * C48042 +
             (C113 * C1253 + C48228 * C1262) * C114) *
                C31866) *
               C16471) *
              C1248 +
          ((((C113 * C1254 + C48228 * C1263) * C114 +
             (C113 * C1264 + C48228 * C1272) * C48042) *
                C31866 +
            ((C113 * C6867 + C48228 * C6869) * C114 +
             (C113 * C6870 + C48228 * C6873) * C48042) *
                C48362) *
               C16471 +
           (((C113 * C1255 + C48228 * C1265) * C114 +
             (C113 * C1266 + C48228 * C1273) * C48042) *
                C31866 +
            ((C113 * C6868 + C48228 * C6871) * C114 +
             (C113 * C6872 + C48228 * C6874) * C48042) *
                C48362) *
               C48329) *
              C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C510 +
             (C113 * C123 + C48228 * C136) * C48382 - C11120 * C511 -
             C11121 * C48371 + C11122 * C512 + C11123 * C48345) *
                C31866 +
            (C11120 * C510 + C11121 * C48382 - C11122 * C511 - C11123 * C48371 +
             C12882 * C512 + C12883 * C48345) *
                C48362) *
               C16471 +
           ((C554 + C555 - C597 - C598 + C599 + C600) * C31866 +
            (C11108 + C11109 - C11110 - C11111 + C11112 + C11113) * C48362) *
               C48329) *
              C1177 +
          (((C11604 * C511 -
             ((C113 * C319 + C48228 * C337) * C48382 +
              (C113 * C307 + C48228 * C320) * C510) +
             C11605 * C48371 - C11996 * C512 - C11997 * C48345) *
                C31866 +
            (C11996 * C511 - (C11605 * C48382 + C11604 * C510) +
             C11997 * C48371 - C13366 * C512 - C13367 * C48345) *
                C48362) *
               C16471 +
           ((C2948 - (C2949 + C2950) + C2951 - C2952 - C2953) * C31866 +
            (C13822 - (C13823 + C13824) + C13825 - C13826 - C13827) * C48362) *
               C48329) *
              C1178 +
          ((((C113 * C308 + C48228 * C321) * C510 +
             (C113 * C322 + C48228 * C338) * C48382 - C11998 * C511 -
             C11999 * C48371 + C12000 * C512 + C12001 * C48345) *
                C31866 +
            (C11998 * C510 + C11999 * C48382 - C12000 * C511 - C12001 * C48371 +
             (C113 * C7735 + C48228 * C7737) * C512 +
             (C113 * C7738 + C48228 * C7741) * C48345) *
                C48362) *
               C16471 +
           ((C374 * C510 + C375 * C48382 - C1708 * C511 - C1709 * C48371 +
             C12002 * C512 + C12003 * C48345) *
                C31866 +
            (C1708 * C510 + C1709 * C48382 - C12002 * C511 - C12003 * C48371 +
             (C113 * C7736 + C48228 * C7739) * C512 +
             (C113 * C7740 + C48228 * C7742) * C48345) *
                C48362) *
               C48329) *
              C48342) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C831 +
             (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
             C11121 * C48129) *
                C31866 +
            (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
             C11123 * C48129) *
                C48362) *
               C16471 +
           ((C838 + C839 - C840 - C841) * C31866 +
            (C11386 + C11387 - C11388 - C11389) * C48362) *
               C48329) *
              C48025 * C713 +
          (((C840 - (C839 + C838) + C841) * C31866 +
            (C11388 - (C11387 + C11386) + C11389) * C48362) *
               C16471 +
           ((C844 - (C843 + C842) + C845) * C31866 +
            (C11390 - (C11391 + C11392) + C11393) * C48362) *
               C48329) *
              C48025 * C714 +
          ((C864 * C31866 + (C11392 + C11391 - C11390 - C11393) * C48362) *
               C16471 +
           ((C848 + C847 - C846 - C849) * C31866 +
            (C11394 + C11395 - C11396 - C11397) * C48362) *
               C48329) *
              C48025 * C715 +
          ((C865 * C31866 + (C11396 - (C11395 + C11394) + C11397) * C48362) *
               C16471 +
           ((C862 - (C851 + C850) + C863) * C31866 +
            ((C113 * C522 + C48228 * C541) * C832 -
             (C859 * C48311 + C858 * C831) +
             (C113 * C542 + C48228 * C552) * C48129) *
                C48362) *
               C48329) *
              C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C831 +
              (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
              C11121 * C48129) *
                 C31866 +
             (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
              C11123 * C48129) *
                 C48362) *
                C16471 +
            ((C838 + C839 - C840 - C841) * C31866 +
             (C11386 + C11387 - C11388 - C11389) * C48362) *
                C48329) *
               C1177 +
           (((C11604 * C832 -
              ((C113 * C319 + C48228 * C337) * C48311 +
               (C113 * C307 + C48228 * C320) * C831) +
              C11605 * C48129) *
                 C31866 +
             (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
              C11997 * C48129) *
                 C48362) *
                C16471 +
            ((C1059 - (C1036 + C1037) + C1060) * C31866 +
             (C11596 - (C11597 + C11598) + C11599) * C48362) *
                C48329) *
               C1178 +
           ((((C113 * C308 + C48228 * C321) * C831 +
              (C113 * C322 + C48228 * C338) * C48311 - C11998 * C832 -
              C11999 * C48129) *
                 C31866 +
             (C11998 * C831 + C11999 * C48311 - C12000 * C832 -
              C12001 * C48129) *
                 C48362) *
                C16471 +
            ((C1696 + C1697 - C1712 - C1713) * C31866 +
             (C12336 + C12337 - C12338 - C12339) * C48362) *
                C48329) *
               C48342) *
              C48296 +
          ((((C840 - (C839 + C838) + C841) * C31866 +
             (C11388 - (C11387 + C11386) + C11389) * C48362) *
                C16471 +
            ((C844 - (C843 + C842) + C845) * C31866 +
             (C11390 - (C11391 + C11392) + C11393) * C48362) *
                C48329) *
               C1177 +
           (((C1037 + C1036 - C1059 - C1060) * C31866 +
             (C11598 + C11597 - C11596 - C11599) * C48362) *
                C16471 +
            ((C1043 + C1042 - C1061 - C1062) * C31866 +
             (C11600 + C11601 - C11602 - C11603) * C48362) *
                C48329) *
               C1178 +
           (((C1712 - (C1697 + C1696) + C1713) * C31866 +
             (C12338 - (C12337 + C12336) + C12339) * C48362) *
                C16471 +
            ((C1714 - (C1703 + C1702) + C1715) * C31866 +
             ((C113 * C1393 + C48228 * C1410) * C832 -
              (C1711 * C48311 + C1710 * C831) +
              (C113 * C1411 + C48228 * C1420) * C48129) *
                 C48362) *
                C48329) *
               C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C31866 +
            (C11120 * C114 + C11121 * C48042) * C48362) *
               C16471 +
           ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
              C48025 * C108 -
          (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
           ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) * C16471) *
              C48025 * C109 +
          ((C184 * C31866 + (C10795 + C10794) * C48362) * C16471 +
           ((C179 + C178) * C31866 + (C10796 + C10797) * C48362) * C48329) *
              C48025 * C110 -
          (((C10798 + C10799) * C48362 + (C181 + C180) * C31866) * C48329 +
           ((C10797 + C10796) * C48362 + C185 * C31866) * C16471) *
              C48025 * C111 +
          ((C186 * C31866 + (C10799 + C10798) * C48362) * C16471 +
           ((C183 + C182) * C31866 + ((C113 * C833 + C48228 * C834) * C114 +
                                      (C113 * C835 + C48228 * C836) * C48042) *
                                         C48362) *
               C48329) *
              C48025 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C31866 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C16471 +
            ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
               C48381 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C31866) *
                C16471) *
               C48369 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C31866 +
             (C11998 * C114 + C11999 * C48042) * C48362) *
                C16471 +
            ((C386 + C387) * C31866 + (C10948 + C10949) * C48362) * C48329) *
               C48342) *
              C302 +
          ((((C385 + C384) * C31866 + (C10947 + C10946) * C48362) * C16471 +
            ((C383 + C382) * C31866 + (C10950 + C10951) * C48362) * C48329) *
               C48369 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) * C16471) *
               C48381 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C31866) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C31866) * C16471) *
               C48342) *
              C303 +
          (((C184 * C31866 + (C10795 + C10794) * C48362) * C16471 +
            ((C179 + C178) * C31866 + (C10796 + C10797) * C48362) * C48329) *
               C48381 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C31866) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C31866) * C16471) *
               C48369 +
           ((C395 * C31866 + (C10953 + C10952) * C48362) * C16471 +
            ((C393 + C392) * C31866 +
             ((C113 * C1691 + C48228 * C1692) * C114 +
              (C113 * C1693 + C48228 * C1694) * C48042) *
                 C48362) *
                C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48228 * C122) * C114 +
              (C113 * C123 + C48228 * C136) * C48042) *
                 C31866 +
             (C11120 * C114 + C11121 * C48042) * C48362) *
                C16471 +
            ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
               C1177 -
           (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
            ((C11605 * C48042 + C11604 * C114) * C48362 +
             ((C113 * C319 + C48228 * C337) * C48042 +
              (C113 * C307 + C48228 * C320) * C114) *
                 C31866) *
                C16471) *
               C1178 +
           ((((C113 * C308 + C48228 * C321) * C114 +
              (C113 * C322 + C48228 * C338) * C48042) *
                 C31866 +
             (C11998 * C114 + C11999 * C48042) * C48362) *
                C16471 +
            ((C386 + C387) * C31866 + (C10948 + C10949) * C48362) * C48329) *
               C48342) *
              C48378 +
          ((((C385 + C384) * C31866 + (C10947 + C10946) * C48362) * C16471 +
            ((C383 + C382) * C31866 + (C10950 + C10951) * C48362) * C48329) *
               C1178 -
           (((C10794 + C10795) * C48362 + (C177 + C176) * C31866) * C48329 +
            ((C10793 + C10792) * C48362 + (C175 + C174) * C31866) * C16471) *
               C1177 -
           (((C10952 + C10953) * C48362 + (C389 + C388) * C31866) * C48329 +
            ((C10949 + C10948) * C48362 + (C387 + C386) * C31866) * C16471) *
               C48342) *
              C48365 +
          (((C184 * C31866 + (C10795 + C10794) * C48362) * C16471 +
            ((C179 + C178) * C31866 + (C10796 + C10797) * C48362) * C48329) *
               C1177 -
           (((C11254 + C11255) * C48362 + (C391 + C390) * C31866) * C48329 +
            ((C10951 + C10950) * C48362 + C394 * C31866) * C16471) *
               C1178 +
           ((C395 * C31866 + (C10953 + C10952) * C48362) * C16471 +
            ((C393 + C392) * C31866 +
             ((C113 * C1691 + C48228 * C1692) * C114 +
              (C113 * C1693 + C48228 * C1694) * C48042) *
                 C48362) *
                C48329) *
               C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C31866 +
            (C11120 * C114 + C11121 * C48042) * C48362) *
               C16471 +
           ((C174 + C175) * C31866 + (C10792 + C10793) * C48362) * C48329) *
              C1245 -
          (((C10946 + C10947) * C48362 + (C384 + C385) * C31866) * C48329 +
           ((C11605 * C48042 + C11604 * C114) * C48362 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C31866) *
               C16471) *
              C1246 +
          ((((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C31866 +
            (C11998 * C114 + C11999 * C48042) * C48362) *
               C16471 +
           ((C386 + C387) * C31866 + (C10948 + C10949) * C48362) * C48329) *
              C1247 -
          (((C12140 + C12141) * C48362 + (C1544 + C1545) * C31866) * C48329 +
           ((C12475 * C48042 + C12474 * C114) * C48362 +
            ((C113 * C1261 + C48228 * C1271) * C48042 +
             (C113 * C1253 + C48228 * C1262) * C114) *
                C31866) *
               C16471) *
              C1248 +
          ((((C113 * C1254 + C48228 * C1263) * C114 +
             (C113 * C1264 + C48228 * C1272) * C48042) *
                C31866 +
            ((C113 * C6867 + C48228 * C6869) * C114 +
             (C113 * C6870 + C48228 * C6873) * C48042) *
                C48362) *
               C16471 +
           (((C113 * C1255 + C48228 * C1265) * C114 +
             (C113 * C1266 + C48228 * C1273) * C48042) *
                C31866 +
            ((C113 * C6868 + C48228 * C6871) * C114 +
             (C113 * C6872 + C48228 * C6874) * C48042) *
                C48362) *
               C48329) *
              C1249) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C31866 +
            ((C37626 + C37625) * C114 + (C37628 + C37627) * C48042) * C48362) *
               C47981 * C48083 -
           (((C38098 + C38097) * C48042 + (C38096 + C38095) * C114) * C48362 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C31866) *
               C47981 * C48090 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C31866 +
            ((C38502 + C38501) * C114 + (C38504 + C38503) * C48042) * C48362) *
               C47981 * C3071) *
              C48003 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C31866 +
            ((C5992 + C5993) * C114 + (C5994 + C5995) * C48042) * C48362) *
               C47981 * C48090 -
           (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
               C47981 * C48083 -
           (((C6736 + C6737) * C48042 + (C6734 + C6735) * C114) * C48362 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C31866) *
               C47981 * C3071) *
              C48011 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C31866 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48042) * C48362) *
               C47981 * C48083 -
           (((C5998 + C5999) * C48042 + (C5996 + C5997) * C114) * C48362 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C31866) *
               C47981 * C48090 +
           (((C5303 + C5302) * C114 + (C5301 + C5300) * C48042) * C31866 +
            ((C5059 * C1392 + C5055 * C1408 + C5060 * C1815 + C48360 * C1820) *
                 C114 +
             (C5059 * C1409 + C5055 * C1419 + C5060 * C1821 + C48360 * C1824) *
                 C48042) *
                C48362) *
               C47981 * C3071) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C831 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48311 -
             (C37625 + C37626) * C832 - (C37627 + C37628) * C48129) *
                C31866 +
            ((C37626 + C37625) * C831 + (C37628 + C37627) * C48311 -
             (C37630 + C37629) * C832 - (C37632 + C37631) * C48129) *
                C48362) *
               C47981 * C48083 +
           (((C38095 + C38096) * C832 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C48311 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C831) +
             (C38097 + C38098) * C48129) *
                C31866 +
            ((C38498 + C38497) * C832 -
             ((C38098 + C38097) * C48311 + (C38096 + C38095) * C831) +
             (C38500 + C38499) * C48129) *
                C48362) *
               C47981 * C48090 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C831 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48311 -
             (C38501 + C38502) * C832 - (C38503 + C38504) * C48129) *
                C31866 +
            ((C38502 + C38501) * C831 + (C38504 + C38503) * C48311 -
             (C38506 + C38505) * C832 - (C38508 + C38507) * C48129) *
                C48362) *
               C47981 * C3071) *
              C2799 +
          ((((C5483 + C5482) * C832 -
             ((C5097 + C5096) * C48311 + (C5095 + C5094) * C831) +
             (C5485 + C5484) * C48129) *
                C31866 +
            ((C5486 + C5487) * C832 -
             ((C5484 + C5485) * C48311 + (C5482 + C5483) * C831) +
             (C5488 + C5489) * C48129) *
                C48362) *
               C47981 * C48083 +
           (((C5291 + C5290) * C831 + (C5289 + C5288) * C48311 -
             (C5993 + C5992) * C832 - (C5995 + C5994) * C48129) *
                C31866 +
            ((C5992 + C5993) * C831 + (C5994 + C5995) * C48311 -
             (C7460 + C7461) * C832 - (C7462 + C7463) * C48129) *
                C48362) *
               C47981 * C48090 +
           (((C6735 + C6734) * C832 -
             ((C5295 + C5294) * C48311 + (C5293 + C5292) * C831) +
             (C6737 + C6736) * C48129) *
                C31866 +
            ((C5059 * C1391 + C5055 * C1406 + C5060 * C6382 + C48360 * C6385) *
                 C832 -
             ((C6736 + C6737) * C48311 + (C6734 + C6735) * C831) +
             (C5059 * C1407 + C5055 * C1418 + C5060 * C6386 + C48360 * C6388) *
                 C48129) *
                C48362) *
               C47981 * C3071) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C31866 +
            ((C37626 + C37625) * C114 + (C37628 + C37627) * C48042) * C48362) *
               C47981 * C48388 -
           (((C38098 + C38097) * C48042 + (C38096 + C38095) * C114) * C48362 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C31866) *
               C47981 * C48384 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C31866 +
            ((C38502 + C38501) * C114 + (C38504 + C38503) * C48042) * C48362) *
               C47981 * C48374 -
           (((C38974 + C38973) * C48042 + (C38972 + C38971) * C114) * C48362 +
            ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                 C48042 +
             (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                 C114) *
                C31866) *
               C47981 * C48352) *
              C2799 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C31866 +
            ((C5992 + C5993) * C114 + (C5994 + C5995) * C48042) * C48362) *
               C47981 * C48384 -
           (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
               C47981 * C48388 -
           (((C6736 + C6737) * C48042 + (C6734 + C6735) * C114) * C48362 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C31866) *
               C47981 * C48374 +
           (((C6531 + C6530) * C114 + (C6529 + C6528) * C48042) * C31866 +
            ((C5059 * C1814 + C5055 * C1818 + C5060 * C6868 + C48360 * C6871) *
                 C114 +
             (C5059 * C1819 + C5055 * C1823 + C5060 * C6872 + C48360 * C6874) *
                 C48042) *
                C48362) *
               C47981 * C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C31866 +
            ((C37626 + C37625) * C114 + (C37628 + C37627) * C48042) * C48362) *
               C47981 * C2691 -
           (((C38098 + C38097) * C48042 + (C38096 + C38095) * C114) * C48362 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C31866) *
               C47981 * C48087) *
              C48387 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C31866 +
            ((C5992 + C5993) * C114 + (C5994 + C5995) * C48042) * C48362) *
               C47981 * C48087 -
           (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
               C47981 * C2691) *
              C48380 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C31866 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48042) * C48362) *
               C47981 * C2691 -
           (((C5998 + C5999) * C48042 + (C5996 + C5997) * C114) * C48362 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C31866) *
               C47981 * C48087) *
              C48367 +
          ((((C5639 + C5638) * C114 + (C5637 + C5636) * C48042) * C31866 +
            ((C5059 * C1016 + C5055 * C1024 + C5060 * C1691 + C48360 * C1692) *
                 C114 +
             (C5059 * C1025 + C5055 * C1031 + C5060 * C1693 + C48360 * C1694) *
                 C48042) *
                C48362) *
               C47981 * C48087 -
           (((C5780 + C5781) * C48042 + (C5778 + C5779) * C114) * C48362 +
            ((C5105 + C5104) * C48042 + (C5103 + C5102) * C114) * C31866) *
               C47981 * C2691) *
              C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C510 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48382 -
             (C37625 + C37626) * C511 - (C37627 + C37628) * C48371 +
             (C37629 + C37630) * C512 + (C37631 + C37632) * C48345) *
                C31866 +
            ((C37626 + C37625) * C510 + (C37628 + C37627) * C48382 -
             (C37630 + C37629) * C511 - (C37632 + C37631) * C48371 +
             (C39366 + C39365) * C512 + (C39368 + C39367) * C48345) *
                C48362) *
               C47981 * C2691 +
           (((C38095 + C38096) * C511 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C48382 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C510) +
             (C38097 + C38098) * C48371 - (C38497 + C38498) * C512 -
             (C38499 + C38500) * C48345) *
                C31866 +
            ((C38498 + C38497) * C511 -
             ((C38098 + C38097) * C48382 + (C38096 + C38095) * C510) +
             (C38500 + C38499) * C48371 - (C39836 + C39835) * C512 -
             (C39838 + C39837) * C48345) *
                C48362) *
               C47981 * C48087) *
              C2799 +
          ((((C5483 + C5482) * C511 -
             ((C5097 + C5096) * C48382 + (C5095 + C5094) * C510) +
             (C5485 + C5484) * C48371 - (C5487 + C5486) * C512 -
             (C5489 + C5488) * C48345) *
                C31866 +
            ((C5486 + C5487) * C511 -
             ((C5484 + C5485) * C48382 + (C5482 + C5483) * C510) +
             (C5488 + C5489) * C48371 - (C7602 + C7603) * C512 -
             (C7604 + C7605) * C48345) *
                C48362) *
               C47981 * C2691 +
           (((C5291 + C5290) * C510 + (C5289 + C5288) * C48382 -
             (C5993 + C5992) * C511 - (C5995 + C5994) * C48371 +
             (C7461 + C7460) * C512 + (C7463 + C7462) * C48345) *
                C31866 +
            ((C5992 + C5993) * C510 + (C5994 + C5995) * C48382 -
             (C7460 + C7461) * C511 - (C7462 + C7463) * C48371 +
             (C5059 * C2582 + C5055 * C2586 + C5060 * C7736 + C48360 * C7739) *
                 C512 +
             (C5059 * C2587 + C5055 * C2591 + C5060 * C7740 + C48360 * C7742) *
                 C48345) *
                C48362) *
               C47981 * C48087) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C831 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48311 -
             (C37625 + C37626) * C832 - (C37627 + C37628) * C48129) *
                C31866 +
            ((C37626 + C37625) * C831 + (C37628 + C37627) * C48311 -
             (C37630 + C37629) * C832 - (C37632 + C37631) * C48129) *
                C48362) *
               C47981 * C2691 +
           (((C38095 + C38096) * C832 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C48311 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C831) +
             (C38097 + C38098) * C48129) *
                C31866 +
            ((C38498 + C38497) * C832 -
             ((C38098 + C38097) * C48311 + (C38096 + C38095) * C831) +
             (C38500 + C38499) * C48129) *
                C48362) *
               C47981 * C48087) *
              C48003 +
          ((((C5483 + C5482) * C832 -
             ((C5097 + C5096) * C48311 + (C5095 + C5094) * C831) +
             (C5485 + C5484) * C48129) *
                C31866 +
            ((C5486 + C5487) * C832 -
             ((C5484 + C5485) * C48311 + (C5482 + C5483) * C831) +
             (C5488 + C5489) * C48129) *
                C48362) *
               C47981 * C2691 +
           (((C5291 + C5290) * C831 + (C5289 + C5288) * C48311 -
             (C5993 + C5992) * C832 - (C5995 + C5994) * C48129) *
                C31866 +
            ((C5992 + C5993) * C831 + (C5994 + C5995) * C48311 -
             (C7460 + C7461) * C832 - (C7462 + C7463) * C48129) *
                C48362) *
               C47981 * C48087) *
              C48011 +
          ((((C5101 + C5100) * C831 + (C5099 + C5098) * C48311 -
             (C5491 + C5490) * C832 - (C5493 + C5492) * C48129) *
                C31866 +
            ((C5490 + C5491) * C831 + (C5492 + C5493) * C48311 -
             (C5494 + C5495) * C832 - (C5496 + C5497) * C48129) *
                C48362) *
               C47981 * C2691 +
           (((C5997 + C5996) * C832 -
             ((C5299 + C5298) * C48311 + (C5297 + C5296) * C831) +
             (C5999 + C5998) * C48129) *
                C31866 +
            ((C5059 * C1387 + C5055 * C1398 + C5060 * C1393 + C48360 * C1410) *
                 C832 -
             ((C5998 + C5999) * C48311 + (C5996 + C5997) * C831) +
             (C5059 * C1399 + C5055 * C1414 + C5060 * C1411 + C48360 * C1420) *
                 C48129) *
                C48362) *
               C47981 * C48087) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C31866 +
            ((C37626 + C37625) * C114 + (C37628 + C37627) * C48042) * C48362) *
               C47981 * C2691 -
           (((C38098 + C38097) * C48042 + (C38096 + C38095) * C114) * C48362 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C31866) *
               C47981 * C48087) *
              C48387 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C31866 +
            ((C5992 + C5993) * C114 + (C5994 + C5995) * C48042) * C48362) *
               C47981 * C48087 -
           (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
               C47981 * C2691) *
              C48380 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C31866 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48042) * C48362) *
               C47981 * C2691 -
           (((C5998 + C5999) * C48042 + (C5996 + C5997) * C114) * C48362 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C31866) *
               C47981 * C48087) *
              C48367 +
          ((((C5639 + C5638) * C114 + (C5637 + C5636) * C48042) * C31866 +
            ((C5059 * C1016 + C5055 * C1024 + C5060 * C1691 + C48360 * C1692) *
                 C114 +
             (C5059 * C1025 + C5055 * C1031 + C5060 * C1693 + C48360 * C1694) *
                 C48042) *
                C48362) *
               C47981 * C48087 -
           (((C5780 + C5781) * C48042 + (C5778 + C5779) * C114) * C48362 +
            ((C5105 + C5104) * C48042 + (C5103 + C5102) * C114) * C31866) *
               C47981 * C2691) *
              C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C31866 +
            ((C37626 + C37625) * C114 + (C37628 + C37627) * C48042) * C48362) *
               C47981 * C48388 -
           (((C38098 + C38097) * C48042 + (C38096 + C38095) * C114) * C48362 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C31866) *
               C47981 * C48384 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C31866 +
            ((C38502 + C38501) * C114 + (C38504 + C38503) * C48042) * C48362) *
               C47981 * C48374 -
           (((C38974 + C38973) * C48042 + (C38972 + C38971) * C114) * C48362 +
            ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                 C48042 +
             (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                 C114) *
                C31866) *
               C47981 * C48352) *
              C2799 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C31866 +
            ((C5992 + C5993) * C114 + (C5994 + C5995) * C48042) * C48362) *
               C47981 * C48384 -
           (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
               C47981 * C48388 -
           (((C6736 + C6737) * C48042 + (C6734 + C6735) * C114) * C48362 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C31866) *
               C47981 * C48374 +
           (((C6531 + C6530) * C114 + (C6529 + C6528) * C48042) * C31866 +
            ((C5059 * C1814 + C5055 * C1818 + C5060 * C6868 + C48360 * C6871) *
                 C114 +
             (C5059 * C1819 + C5055 * C1823 + C5060 * C6872 + C48360 * C6874) *
                 C48042) *
                C48362) *
               C47981 * C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C3467 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C3465 -
             (C37625 + C37626) * C3468 - (C37627 + C37628) * C48129) *
                C31866 +
            ((C37626 + C37625) * C3467 + (C37628 + C37627) * C3465 -
             (C37630 + C37629) * C3468 - (C37632 + C37631) * C48129) *
                C48362) *
               C47981 * C48083 +
           (((C38095 + C38096) * C3468 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C3465 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C3467) +
             (C38097 + C38098) * C48129) *
                C31866 +
            ((C38498 + C38497) * C3468 -
             ((C38098 + C38097) * C3465 + (C38096 + C38095) * C3467) +
             (C38500 + C38499) * C48129) *
                C48362) *
               C47981 * C48090 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C3467 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C3465 -
             (C38501 + C38502) * C3468 - (C38503 + C38504) * C48129) *
                C31866 +
            ((C38502 + C38501) * C3467 + (C38504 + C38503) * C3465 -
             (C38506 + C38505) * C3468 - (C38508 + C38507) * C48129) *
                C48362) *
               C47981 * C3071) *
              C48296 +
          ((((C5483 + C5482) * C3468 -
             ((C5097 + C5096) * C3465 + (C5095 + C5094) * C3467) +
             (C5485 + C5484) * C48129) *
                C31866 +
            ((C5486 + C5487) * C3468 -
             ((C5484 + C5485) * C3465 + (C5482 + C5483) * C3467) +
             (C5488 + C5489) * C48129) *
                C48362) *
               C47981 * C48083 +
           (((C5291 + C5290) * C3467 + (C5289 + C5288) * C3465 -
             (C5993 + C5992) * C3468 - (C5995 + C5994) * C48129) *
                C31866 +
            ((C5992 + C5993) * C3467 + (C5994 + C5995) * C3465 -
             (C7460 + C7461) * C3468 - (C7462 + C7463) * C48129) *
                C48362) *
               C47981 * C48090 +
           (((C6735 + C6734) * C3468 -
             ((C5295 + C5294) * C3465 + (C5293 + C5292) * C3467) +
             (C6737 + C6736) * C48129) *
                C31866 +
            ((C5059 * C1391 + C5055 * C1406 + C5060 * C6382 + C48360 * C6385) *
                 C3468 -
             ((C6736 + C6737) * C3465 + (C6734 + C6735) * C3467) +
             (C5059 * C1407 + C5055 * C1418 + C5060 * C6386 + C48360 * C6388) *
                 C48129) *
                C48362) *
               C47981 * C3071) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C47030 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48125 -
            (C37625 + C37626) * C47022 - (C37627 + C37628) * C48132 +
            (C37629 + C37630) * C47036 + (C37631 + C37632) * C4043) *
               C31866 +
           ((C37626 + C37625) * C47030 + (C37628 + C37627) * C48125 -
            (C37630 + C37629) * C47022 - (C37632 + C37631) * C48132 +
            (C39366 + C39365) * C47036 + (C39368 + C39367) * C4043) *
               C48362) *
              C47981 * C48083 +
          (((C38095 + C38096) * C47022 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48125 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C47030) +
            (C38097 + C38098) * C48132 - (C38497 + C38498) * C47036 -
            (C38499 + C38500) * C4043) *
               C31866 +
           ((C38498 + C38497) * C47022 -
            ((C38098 + C38097) * C48125 + (C38096 + C38095) * C47030) +
            (C38500 + C38499) * C48132 - (C39836 + C39835) * C47036 -
            (C39838 + C39837) * C4043) *
               C48362) *
              C47981 * C48090 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C47030 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C48125 -
            (C38501 + C38502) * C47022 - (C38503 + C38504) * C48132 +
            (C38505 + C38506) * C47036 + (C38507 + C38508) * C4043) *
               C31866 +
           ((C38502 + C38501) * C47030 + (C38504 + C38503) * C48125 -
            (C38506 + C38505) * C47022 - (C38508 + C38507) * C48132 +
            (C5059 * C7735 + C5055 * C7737 + C5060 * C23976 + C48360 * C23977) *
                C47036 +
            (C5059 * C7738 + C5055 * C7741 + C5060 * C23978 + C48360 * C23979) *
                C4043) *
               C48362) *
              C47981 * C3071) *
         C47998) /
        (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C3467 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C3465 -
            (C37625 + C37626) * C3468 - (C37627 + C37628) * C48129) *
               C31866 +
           ((C37626 + C37625) * C3467 + (C37628 + C37627) * C3465 -
            (C37630 + C37629) * C3468 - (C37632 + C37631) * C48129) *
               C48362) *
              C47981 * C48388 +
          (((C38095 + C38096) * C3468 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C3465 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C3467) +
            (C38097 + C38098) * C48129) *
               C31866 +
           ((C38498 + C38497) * C3468 -
            ((C38098 + C38097) * C3465 + (C38096 + C38095) * C3467) +
            (C38500 + C38499) * C48129) *
               C48362) *
              C47981 * C48384 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C3467 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C3465 -
            (C38501 + C38502) * C3468 - (C38503 + C38504) * C48129) *
               C31866 +
           ((C38502 + C38501) * C3467 + (C38504 + C38503) * C3465 -
            (C38506 + C38505) * C3468 - (C38508 + C38507) * C48129) *
               C48362) *
              C47981 * C48374 +
          (((C38971 + C38972) * C3468 -
            ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                 C3465 +
             (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                 C3467) +
            (C38973 + C38974) * C48129) *
               C31866 +
           ((C5059 * C6381 + C5055 * C6383 + C5060 * C22998 + C48360 * C22999) *
                C3468 -
            ((C38974 + C38973) * C3465 + (C38972 + C38971) * C3467) +
            (C5059 * C6384 + C5055 * C6387 + C5060 * C23000 + C48360 * C23001) *
                C48129) *
               C48362) *
              C47981 * C48352) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C3467 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C3465 -
             (C37625 + C37626) * C3468 - (C37627 + C37628) * C48129) *
                C31866 +
            ((C37626 + C37625) * C3467 + (C37628 + C37627) * C3465 -
             (C37630 + C37629) * C3468 - (C37632 + C37631) * C48129) *
                C48362) *
               C47981 * C2691 +
           (((C38095 + C38096) * C3468 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C3465 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C3467) +
             (C38097 + C38098) * C48129) *
                C31866 +
            ((C38498 + C38497) * C3468 -
             ((C38098 + C38097) * C3465 + (C38096 + C38095) * C3467) +
             (C38500 + C38499) * C48129) *
                C48362) *
               C47981 * C48087) *
              C48378 +
          ((((C5483 + C5482) * C3468 -
             ((C5097 + C5096) * C3465 + (C5095 + C5094) * C3467) +
             (C5485 + C5484) * C48129) *
                C31866 +
            ((C5486 + C5487) * C3468 -
             ((C5484 + C5485) * C3465 + (C5482 + C5483) * C3467) +
             (C5488 + C5489) * C48129) *
                C48362) *
               C47981 * C2691 +
           (((C5291 + C5290) * C3467 + (C5289 + C5288) * C3465 -
             (C5993 + C5992) * C3468 - (C5995 + C5994) * C48129) *
                C31866 +
            ((C5992 + C5993) * C3467 + (C5994 + C5995) * C3465 -
             (C7460 + C7461) * C3468 - (C7462 + C7463) * C48129) *
                C48362) *
               C47981 * C48087) *
              C48365 +
          ((((C5101 + C5100) * C3467 + (C5099 + C5098) * C3465 -
             (C5491 + C5490) * C3468 - (C5493 + C5492) * C48129) *
                C31866 +
            ((C5490 + C5491) * C3467 + (C5492 + C5493) * C3465 -
             (C5494 + C5495) * C3468 - (C5496 + C5497) * C48129) *
                C48362) *
               C47981 * C2691 +
           (((C5997 + C5996) * C3468 -
             ((C5299 + C5298) * C3465 + (C5297 + C5296) * C3467) +
             (C5999 + C5998) * C48129) *
                C31866 +
            ((C5059 * C1387 + C5055 * C1398 + C5060 * C1393 + C48360 * C1410) *
                 C3468 -
             ((C5998 + C5999) * C3465 + (C5996 + C5997) * C3467) +
             (C5059 * C1399 + C5055 * C1414 + C5060 * C1411 + C48360 * C1420) *
                 C48129) *
                C48362) *
               C47981 * C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C3757 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48389 -
            (C37625 + C37626) * C3758 - (C37627 + C37628) * C48386 +
            (C37629 + C37630) * C3759 + (C37631 + C37632) * C48377 -
            (C39365 + C39366) * C3760 - (C39367 + C39368) * C48358) *
               C31866 +
           ((C37626 + C37625) * C3757 + (C37628 + C37627) * C48389 -
            (C37630 + C37629) * C3758 - (C37632 + C37631) * C48386 +
            (C39366 + C39365) * C3759 + (C39368 + C39367) * C48377 -
            (C39370 + C39369) * C3760 - (C39372 + C39371) * C48358) *
               C48362) *
              C47981 * C2691 +
          (((C38095 + C38096) * C3758 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48389 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C3757) +
            (C38097 + C38098) * C48386 - (C38497 + C38498) * C3759 -
            (C38499 + C38500) * C48377 + (C39835 + C39836) * C3760 +
            (C39837 + C39838) * C48358) *
               C31866 +
           ((C38498 + C38497) * C3758 -
            ((C38098 + C38097) * C48389 + (C38096 + C38095) * C3757) +
            (C38500 + C38499) * C48386 - (C39836 + C39835) * C3759 -
            (C39838 + C39837) * C48377 +
            (C5059 * C7249 + C5055 * C7251 + C5060 * C23630 + C48360 * C23631) *
                C3760 +
            (C5059 * C7252 + C5055 * C7255 + C5060 * C23632 + C48360 * C23633) *
                C48358) *
               C48362) *
              C47981 * C48087) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C47030 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48125 -
             (C37625 + C37626) * C47022 - (C37627 + C37628) * C48132 +
             (C37629 + C37630) * C47036 + (C37631 + C37632) * C4043) *
                C31866 +
            ((C37626 + C37625) * C47030 + (C37628 + C37627) * C48125 -
             (C37630 + C37629) * C47022 - (C37632 + C37631) * C48132 +
             (C39366 + C39365) * C47036 + (C39368 + C39367) * C4043) *
                C48362) *
               C47981 * C2691 +
           (((C38095 + C38096) * C47022 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C48125 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C47030) +
             (C38097 + C38098) * C48132 - (C38497 + C38498) * C47036 -
             (C38499 + C38500) * C4043) *
                C31866 +
            ((C38498 + C38497) * C47022 -
             ((C38098 + C38097) * C48125 + (C38096 + C38095) * C47030) +
             (C38500 + C38499) * C48132 - (C39836 + C39835) * C47036 -
             (C39838 + C39837) * C4043) *
                C48362) *
               C47981 * C48087) *
              C48296 +
          ((((C5483 + C5482) * C47022 -
             ((C5097 + C5096) * C48125 + (C5095 + C5094) * C47030) +
             (C5485 + C5484) * C48132 - (C5487 + C5486) * C47036 -
             (C5489 + C5488) * C4043) *
                C31866 +
            ((C5486 + C5487) * C47022 -
             ((C5484 + C5485) * C48125 + (C5482 + C5483) * C47030) +
             (C5488 + C5489) * C48132 - (C7602 + C7603) * C47036 -
             (C7604 + C7605) * C4043) *
                C48362) *
               C47981 * C2691 +
           (((C5291 + C5290) * C47030 + (C5289 + C5288) * C48125 -
             (C5993 + C5992) * C47022 - (C5995 + C5994) * C48132 +
             (C7461 + C7460) * C47036 + (C7463 + C7462) * C4043) *
                C31866 +
            ((C5992 + C5993) * C47030 + (C5994 + C5995) * C48125 -
             (C7460 + C7461) * C47022 - (C7462 + C7463) * C48132 +
             (C5059 * C2582 + C5055 * C2586 + C5060 * C7736 + C48360 * C7739) *
                 C47036 +
             (C5059 * C2587 + C5055 * C2591 + C5060 * C7740 + C48360 * C7742) *
                 C4043) *
                C48362) *
               C47981 * C48087) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C3467 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C3465 -
             (C37625 + C37626) * C3468 - (C37627 + C37628) * C48129) *
                C31866 +
            ((C37626 + C37625) * C3467 + (C37628 + C37627) * C3465 -
             (C37630 + C37629) * C3468 - (C37632 + C37631) * C48129) *
                C48362) *
               C47981 * C2691 +
           (((C38095 + C38096) * C3468 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C3465 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C3467) +
             (C38097 + C38098) * C48129) *
                C31866 +
            ((C38498 + C38497) * C3468 -
             ((C38098 + C38097) * C3465 + (C38096 + C38095) * C3467) +
             (C38500 + C38499) * C48129) *
                C48362) *
               C47981 * C48087) *
              C48378 +
          ((((C5483 + C5482) * C3468 -
             ((C5097 + C5096) * C3465 + (C5095 + C5094) * C3467) +
             (C5485 + C5484) * C48129) *
                C31866 +
            ((C5486 + C5487) * C3468 -
             ((C5484 + C5485) * C3465 + (C5482 + C5483) * C3467) +
             (C5488 + C5489) * C48129) *
                C48362) *
               C47981 * C2691 +
           (((C5291 + C5290) * C3467 + (C5289 + C5288) * C3465 -
             (C5993 + C5992) * C3468 - (C5995 + C5994) * C48129) *
                C31866 +
            ((C5992 + C5993) * C3467 + (C5994 + C5995) * C3465 -
             (C7460 + C7461) * C3468 - (C7462 + C7463) * C48129) *
                C48362) *
               C47981 * C48087) *
              C48365 +
          ((((C5101 + C5100) * C3467 + (C5099 + C5098) * C3465 -
             (C5491 + C5490) * C3468 - (C5493 + C5492) * C48129) *
                C31866 +
            ((C5490 + C5491) * C3467 + (C5492 + C5493) * C3465 -
             (C5494 + C5495) * C3468 - (C5496 + C5497) * C48129) *
                C48362) *
               C47981 * C2691 +
           (((C5997 + C5996) * C3468 -
             ((C5299 + C5298) * C3465 + (C5297 + C5296) * C3467) +
             (C5999 + C5998) * C48129) *
                C31866 +
            ((C5059 * C1387 + C5055 * C1398 + C5060 * C1393 + C48360 * C1410) *
                 C3468 -
             ((C5998 + C5999) * C3465 + (C5996 + C5997) * C3467) +
             (C5059 * C1399 + C5055 * C1414 + C5060 * C1411 + C48360 * C1420) *
                 C48129) *
                C48362) *
               C47981 * C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C3467 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C3465 -
            (C37625 + C37626) * C3468 - (C37627 + C37628) * C48129) *
               C31866 +
           ((C37626 + C37625) * C3467 + (C37628 + C37627) * C3465 -
            (C37630 + C37629) * C3468 - (C37632 + C37631) * C48129) *
               C48362) *
              C47981 * C48388 +
          (((C38095 + C38096) * C3468 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C3465 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C3467) +
            (C38097 + C38098) * C48129) *
               C31866 +
           ((C38498 + C38497) * C3468 -
            ((C38098 + C38097) * C3465 + (C38096 + C38095) * C3467) +
            (C38500 + C38499) * C48129) *
               C48362) *
              C47981 * C48384 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C3467 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C3465 -
            (C38501 + C38502) * C3468 - (C38503 + C38504) * C48129) *
               C31866 +
           ((C38502 + C38501) * C3467 + (C38504 + C38503) * C3465 -
            (C38506 + C38505) * C3468 - (C38508 + C38507) * C48129) *
               C48362) *
              C47981 * C48374 +
          (((C38971 + C38972) * C3468 -
            ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                 C3465 +
             (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                 C3467) +
            (C38973 + C38974) * C48129) *
               C31866 +
           ((C5059 * C6381 + C5055 * C6383 + C5060 * C22998 + C48360 * C22999) *
                C3468 -
            ((C38974 + C38973) * C3465 + (C38972 + C38971) * C3467) +
            (C5059 * C6384 + C5055 * C6387 + C5060 * C23000 + C48360 * C23001) *
                C48129) *
               C48362) *
              C47981 * C48352) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C31866 +
            ((C37626 + C37625) * C114 + (C37628 + C37627) * C48042) * C48362) *
               C47981 * C1519 -
           (((C38098 + C38097) * C48042 + (C38096 + C38095) * C114) * C48362 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C31866) *
               C47981 * C1520 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C31866 +
            ((C38502 + C38501) * C114 + (C38504 + C38503) * C48042) * C48362) *
               C47981 * C1521 -
           (((C5060 * C6870 + C48360 * C6873 + C5059 * C1817 + C5055 * C1822) *
                 C48042 +
             (C5060 * C6867 + C48360 * C6869 + C5059 * C1813 + C5055 * C1816) *
                 C114) *
                C48362 +
            ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                 C48042 +
             (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                 C114) *
                C31866) *
               C47981 * C48352) *
              C48296 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C31866 +
            ((C5992 + C5993) * C114 + (C5994 + C5995) * C48042) * C48362) *
               C47981 * C1520 -
           (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
               C47981 * C1519 -
           (((C6736 + C6737) * C48042 + (C6734 + C6735) * C114) * C48362 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C31866) *
               C47981 * C1521 +
           (((C6531 + C6530) * C114 + (C6529 + C6528) * C48042) * C31866 +
            ((C5059 * C1814 + C5055 * C1818 + C5060 * C6868 + C48360 * C6871) *
                 C114 +
             (C5059 * C1819 + C5055 * C1823 + C5060 * C6872 + C48360 * C6874) *
                 C48042) *
                C48362) *
               C47981 * C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C31866 +
            ((C37626 + C37625) * C114 + (C37628 + C37627) * C48042) * C48362) *
               C47981 * C48310 -
           (((C5060 * C1401 + C48360 * C1415 + C5059 * C1019 + C5055 * C1028) *
                 C48042 +
             (C5060 * C1388 + C48360 * C1400 + C5059 * C1013 + C5055 * C1018) *
                 C114) *
                C48362 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C31866) *
               C47981 * C48087) *
              C713 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C31866 +
            ((C5992 + C5993) * C114 + (C5994 + C5995) * C48042) * C48362) *
               C47981 * C48087 -
           (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
               C47981 * C48310) *
              C714 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C31866 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48042) * C48362) *
               C47981 * C48310 -
           (((C5998 + C5999) * C48042 + (C5996 + C5997) * C114) * C48362 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C31866) *
               C47981 * C48087) *
              C715 +
          ((((C5639 + C5638) * C114 + (C5637 + C5636) * C48042) * C31866 +
            ((C5059 * C1016 + C5055 * C1024 + C5060 * C1691 + C48360 * C1692) *
                 C114 +
             (C5059 * C1025 + C5055 * C1031 + C5060 * C1693 + C48360 * C1694) *
                 C48042) *
                C48362) *
               C47981 * C48087 -
           (((C5780 + C5781) * C48042 + (C5778 + C5779) * C114) * C48362 +
            ((C5105 + C5104) * C48042 + (C5103 + C5102) * C114) * C31866) *
               C47981 * C48310) *
              C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C1938 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C1935 -
             (C37625 + C37626) * C1939 - (C37627 + C37628) * C1936 +
             (C37629 + C37630) * C1940 + (C37631 + C37632) * C48345) *
                C31866 +
            ((C37626 + C37625) * C1938 + (C37628 + C37627) * C1935 -
             (C37630 + C37629) * C1939 - (C37632 + C37631) * C1936 +
             (C39366 + C39365) * C1940 + (C39368 + C39367) * C48345) *
                C48362) *
               C47981 * C48310 +
           (((C38095 + C38096) * C1939 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C1935 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C1938) +
             (C38097 + C38098) * C1936 - (C38497 + C38498) * C1940 -
             (C38499 + C38500) * C48345) *
                C31866 +
            ((C38498 + C38497) * C1939 -
             ((C38098 + C38097) * C1935 + (C38096 + C38095) * C1938) +
             (C38500 + C38499) * C1936 -
             (C5060 * C7735 + C48360 * C7737 + C5059 * C2581 + C5055 * C2584) *
                 C1940 -
             (C5060 * C7738 + C48360 * C7741 + C5059 * C2585 + C5055 * C2590) *
                 C48345) *
                C48362) *
               C47981 * C48087) *
              C48296 +
          ((((C5483 + C5482) * C1939 -
             ((C5097 + C5096) * C1935 + (C5095 + C5094) * C1938) +
             (C5485 + C5484) * C1936 - (C5487 + C5486) * C1940 -
             (C5489 + C5488) * C48345) *
                C31866 +
            ((C5486 + C5487) * C1939 -
             ((C5484 + C5485) * C1935 + (C5482 + C5483) * C1938) +
             (C5488 + C5489) * C1936 - (C7602 + C7603) * C1940 -
             (C7604 + C7605) * C48345) *
                C48362) *
               C47981 * C48310 +
           (((C5291 + C5290) * C1938 + (C5289 + C5288) * C1935 -
             (C5993 + C5992) * C1939 - (C5995 + C5994) * C1936 +
             (C7461 + C7460) * C1940 + (C7463 + C7462) * C48345) *
                C31866 +
            ((C5992 + C5993) * C1938 + (C5994 + C5995) * C1935 -
             (C7460 + C7461) * C1939 - (C7462 + C7463) * C1936 +
             (C5059 * C2582 + C5055 * C2586 + C5060 * C7736 + C48360 * C7739) *
                 C1940 +
             (C5059 * C2587 + C5055 * C2591 + C5060 * C7740 + C48360 * C7742) *
                 C48345) *
                C48362) *
               C47981 * C48087) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C831 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48311 -
            (C37625 + C37626) * C832 - (C37627 + C37628) * C48129) *
               C31866 +
           ((C37626 + C37625) * C831 + (C37628 + C37627) * C48311 -
            (C37630 + C37629) * C832 - (C37632 + C37631) * C48129) *
               C48362) *
              C47981 * C1519 +
          (((C38095 + C38096) * C832 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48311 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C831) +
            (C38097 + C38098) * C48129) *
               C31866 +
           ((C38498 + C38497) * C832 -
            ((C38098 + C38097) * C48311 + (C38096 + C38095) * C831) +
            (C38500 + C38499) * C48129) *
               C48362) *
              C47981 * C1520 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C831 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C48311 -
            (C38501 + C38502) * C832 - (C38503 + C38504) * C48129) *
               C31866 +
           ((C38502 + C38501) * C831 + (C38504 + C38503) * C48311 -
            (C38506 + C38505) * C832 - (C38508 + C38507) * C48129) *
               C48362) *
              C47981 * C1521 +
          (((C38971 + C38972) * C832 -
            ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                 C48311 +
             (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                 C831) +
            (C38973 + C38974) * C48129) *
               C31866 +
           ((C5059 * C6381 + C5055 * C6383 + C5060 * C22998 + C48360 * C22999) *
                C832 -
            ((C38974 + C38973) * C48311 + (C38972 + C38971) * C831) +
            (C5059 * C6384 + C5055 * C6387 + C5060 * C23000 + C48360 * C23001) *
                C48129) *
               C48362) *
              C47981 * C48352) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C831 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48311 -
             (C37625 + C37626) * C832 - (C37627 + C37628) * C48129) *
                C31866 +
            ((C37626 + C37625) * C831 + (C37628 + C37627) * C48311 -
             (C37630 + C37629) * C832 - (C37632 + C37631) * C48129) *
                C48362) *
               C47981 * C48310 +
           (((C38095 + C38096) * C832 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C48311 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C831) +
             (C38097 + C38098) * C48129) *
                C31866 +
            ((C5059 * C1385 + C5055 * C1394 + C5060 * C1389 + C48360 * C1402) *
                 C832 -
             ((C38098 + C38097) * C48311 + (C38096 + C38095) * C831) +
             (C5059 * C1395 + C5055 * C1412 + C5060 * C1403 + C48360 * C1416) *
                 C48129) *
                C48362) *
               C47981 * C48087) *
              C302 +
          ((((C5483 + C5482) * C832 -
             ((C5097 + C5096) * C48311 + (C5095 + C5094) * C831) +
             (C5485 + C5484) * C48129) *
                C31866 +
            ((C5486 + C5487) * C832 -
             ((C5484 + C5485) * C48311 + (C5482 + C5483) * C831) +
             (C5488 + C5489) * C48129) *
                C48362) *
               C47981 * C48310 +
           (((C5291 + C5290) * C831 + (C5289 + C5288) * C48311 -
             (C5993 + C5992) * C832 - (C5995 + C5994) * C48129) *
                C31866 +
            ((C5992 + C5993) * C831 + (C5994 + C5995) * C48311 -
             (C7460 + C7461) * C832 - (C7462 + C7463) * C48129) *
                C48362) *
               C47981 * C48087) *
              C303 +
          ((((C5101 + C5100) * C831 + (C5099 + C5098) * C48311 -
             (C5491 + C5490) * C832 - (C5493 + C5492) * C48129) *
                C31866 +
            ((C5490 + C5491) * C831 + (C5492 + C5493) * C48311 -
             (C5494 + C5495) * C832 - (C5496 + C5497) * C48129) *
                C48362) *
               C47981 * C48310 +
           (((C5997 + C5996) * C832 -
             ((C5299 + C5298) * C48311 + (C5297 + C5296) * C831) +
             (C5999 + C5998) * C48129) *
                C31866 +
            ((C5059 * C1387 + C5055 * C1398 + C5060 * C1393 + C48360 * C1410) *
                 C832 -
             ((C5998 + C5999) * C48311 + (C5996 + C5997) * C831) +
             (C5059 * C1399 + C5055 * C1414 + C5060 * C1411 + C48360 * C1420) *
                 C48129) *
                C48362) *
               C47981 * C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C2447 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C2443 -
            (C37625 + C37626) * C2448 - (C37627 + C37628) * C2444 +
            (C37629 + C37630) * C2449 + (C37631 + C37632) * C2445 -
            (C39365 + C39366) * C2450 - (C39367 + C39368) * C48358) *
               C31866 +
           ((C37626 + C37625) * C2447 + (C37628 + C37627) * C2443 -
            (C37630 + C37629) * C2448 - (C37632 + C37631) * C2444 +
            (C39366 + C39365) * C2449 + (C39368 + C39367) * C2445 -
            (C39370 + C39369) * C2450 - (C39372 + C39371) * C48358) *
               C48362) *
              C47981 * C48310 +
          (((C38095 + C38096) * C2448 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C2443 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C2447) +
            (C38097 + C38098) * C2444 - (C38497 + C38498) * C2449 -
            (C38499 + C38500) * C2445 + (C39835 + C39836) * C2450 +
            (C39837 + C39838) * C48358) *
               C31866 +
           ((C38498 + C38497) * C2448 -
            ((C38098 + C38097) * C2443 + (C38096 + C38095) * C2447) +
            (C38500 + C38499) * C2444 - (C39836 + C39835) * C2449 -
            (C39838 + C39837) * C2445 +
            (C5059 * C7249 + C5055 * C7251 + C5060 * C23630 + C48360 * C23631) *
                C2450 +
            (C5059 * C7252 + C5055 * C7255 + C5060 * C23632 + C48360 * C23633) *
                C48358) *
               C48362) *
              C47981 * C48087) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                    C114 +
                (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                    C48042) *
                   C31866 +
               ((C5059 * C513 + C5055 * C523 + C5060 * C1013 + C48360 * C1018) *
                    C114 +
                (C5059 * C524 + C5055 * C543 + C5060 * C1019 + C48360 * C1028) *
                    C48042) *
                   C48362) *
                  C47981 * C48025 * C108 -
              (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
               ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
                  C47981 * C48025 * C109 +
              (((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C31866 +
               ((C5490 + C5491) * C114 + (C5492 + C5493) * C48042) * C48362) *
                  C47981 * C48025 * C110 -
              (((C5780 + C5781) * C48042 + (C5778 + C5779) * C114) * C48362 +
               ((C5105 + C5104) * C48042 + (C5103 + C5102) * C114) * C31866) *
                  C47981 * C48025 * C111 +
              (((C5109 + C5108) * C114 + (C5107 + C5106) * C48042) * C31866 +
               ((C5059 * C521 + C5055 * C539 + C5060 * C1017 + C48360 * C1026) *
                    C114 +
                (C5059 * C540 + C5055 * C551 + C5060 * C1027 + C48360 * C1032) *
                    C48042) *
                   C48362) *
                  C47981 * C48025 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                     C114 +
                 (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                     C48042) *
                    C31866 +
                ((C5059 * C513 + C5055 * C523 + C5060 * C1013 +
                  C48360 * C1018) *
                     C114 +
                 (C5059 * C524 + C5055 * C543 + C5060 * C1019 +
                  C48360 * C1028) *
                     C48042) *
                    C48362) *
                   C47981 * C48381 -
               (((C5060 * C1401 + C48360 * C1415 + C5059 * C1019 +
                  C5055 * C1028) *
                     C48042 +
                 (C5060 * C1388 + C48360 * C1400 + C5059 * C1013 +
                  C5055 * C1018) *
                     C114) *
                    C48362 +
                ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                     C48042 +
                 (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                     C114) *
                    C31866) *
                   C47981 * C48369 +
               (((C5059 * C308 + C5055 * C321 + C5060 * C1253 +
                  C48360 * C1262) *
                     C114 +
                 (C5059 * C322 + C5055 * C338 + C5060 * C1261 +
                  C48360 * C1271) *
                     C48042) *
                    C31866 +
                ((C5059 * C1388 + C5055 * C1400 + C5060 * C1813 +
                  C48360 * C1816) *
                     C114 +
                 (C5059 * C1401 + C5055 * C1415 + C5060 * C1817 +
                  C48360 * C1822) *
                     C48042) *
                    C48362) *
                   C47981 * C48342) *
                  C302 +
              ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C31866 +
                ((C5992 + C5993) * C114 + (C5994 + C5995) * C48042) * C48362) *
                   C47981 * C48369 -
               (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
                ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
                   C47981 * C48381 -
               (((C6736 + C6737) * C48042 + (C6734 + C6735) * C114) * C48362 +
                ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C31866) *
                   C47981 * C48342) *
                  C303 +
              ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C31866 +
                ((C5490 + C5491) * C114 + (C5492 + C5493) * C48042) * C48362) *
                   C47981 * C48381 -
               (((C5998 + C5999) * C48042 + (C5996 + C5997) * C114) * C48362 +
                ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C31866) *
                   C47981 * C48369 +
               (((C5303 + C5302) * C114 + (C5301 + C5300) * C48042) * C31866 +
                ((C5059 * C1392 + C5055 * C1408 + C5060 * C1815 +
                  C48360 * C1820) *
                     C114 +
                 (C5059 * C1409 + C5055 * C1419 + C5060 * C1821 +
                  C48360 * C1824) *
                     C48042) *
                    C48362) *
                   C47981 * C48342) *
                  C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C510 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48382 -
            (C37625 + C37626) * C511 - (C37627 + C37628) * C48371 +
            (C37629 + C37630) * C512 + (C37631 + C37632) * C48345) *
               C31866 +
           ((C37626 + C37625) * C510 + (C37628 + C37627) * C48382 -
            (C37630 + C37629) * C511 - (C37632 + C37631) * C48371 +
            (C5059 * C2147 + C5055 * C2153 + C5060 * C2581 + C48360 * C2584) *
                C512 +
            (C5059 * C2154 + C5055 * C2165 + C5060 * C2585 + C48360 * C2590) *
                C48345) *
               C48362) *
              C47981 * C48025 * C302 +
          (((C5483 + C5482) * C511 -
            ((C5097 + C5096) * C48382 + (C5095 + C5094) * C510) +
            (C5485 + C5484) * C48371 - (C5487 + C5486) * C512 -
            (C5489 + C5488) * C48345) *
               C31866 +
           ((C5486 + C5487) * C511 -
            ((C5484 + C5485) * C48382 + (C5482 + C5483) * C510) +
            (C5488 + C5489) * C48371 - (C7602 + C7603) * C512 -
            (C7604 + C7605) * C48345) *
               C48362) *
              C47981 * C48025 * C303 +
          (((C5101 + C5100) * C510 + (C5099 + C5098) * C48382 -
            (C5491 + C5490) * C511 - (C5493 + C5492) * C48371 +
            (C5495 + C5494) * C512 + (C5497 + C5496) * C48345) *
               C31866 +
           ((C5490 + C5491) * C510 + (C5492 + C5493) * C48382 -
            (C5494 + C5495) * C511 - (C5496 + C5497) * C48371 +
            (C5059 * C2151 + C5055 * C2161 + C5060 * C2583 + C48360 * C2588) *
                C512 +
            (C5059 * C2162 + C5055 * C2169 + C5060 * C2589 + C48360 * C2592) *
                C48345) *
               C48362) *
              C47981 * C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C31866 +
            ((C37626 + C37625) * C114 + (C37628 + C37627) * C48042) * C48362) *
               C47981 * C1177 -
           (((C38098 + C38097) * C48042 + (C38096 + C38095) * C114) * C48362 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C31866) *
               C47981 * C1178 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C31866 +
            ((C5059 * C1388 + C5055 * C1400 + C5060 * C1813 + C48360 * C1816) *
                 C114 +
             (C5059 * C1401 + C5055 * C1415 + C5060 * C1817 + C48360 * C1822) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48378 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C31866 +
            ((C5992 + C5993) * C114 + (C5994 + C5995) * C48042) * C48362) *
               C47981 * C1178 -
           (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
               C47981 * C1177 -
           (((C6736 + C6737) * C48042 + (C6734 + C6735) * C114) * C48362 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C31866) *
               C47981 * C48342) *
              C48365 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C31866 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48042) * C48362) *
               C47981 * C1177 -
           (((C5998 + C5999) * C48042 + (C5996 + C5997) * C114) * C48362 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C31866) *
               C47981 * C1178 +
           (((C5303 + C5302) * C114 + (C5301 + C5300) * C48042) * C31866 +
            ((C5059 * C1392 + C5055 * C1408 + C5060 * C1815 + C48360 * C1820) *
                 C114 +
             (C5059 * C1409 + C5055 * C1419 + C5060 * C1821 + C48360 * C1824) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48042) *
               C31866 +
           ((C37626 + C37625) * C114 + (C37628 + C37627) * C48042) * C48362) *
              C47981 * C1245 -
          (((C38098 + C38097) * C48042 + (C38096 + C38095) * C114) * C48362 +
           ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                C48042 +
            (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                C114) *
               C31866) *
              C47981 * C1246 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C114 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C48042) *
               C31866 +
           ((C5059 * C1388 + C5055 * C1400 + C5060 * C1813 + C48360 * C1816) *
                C114 +
            (C5059 * C1401 + C5055 * C1415 + C5060 * C1817 + C48360 * C1822) *
                C48042) *
               C48362) *
              C47981 * C1247 -
          (((C5060 * C6870 + C48360 * C6873 + C5059 * C1817 + C5055 * C1822) *
                C48042 +
            (C5060 * C6867 + C48360 * C6869 + C5059 * C1813 + C5055 * C1816) *
                C114) *
               C48362 +
           ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                C48042 +
            (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                C114) *
               C31866) *
              C47981 * C1248 +
          (((C5059 * C1254 + C5055 * C1263 + C5060 * C6227 + C48360 * C6229) *
                C114 +
            (C5059 * C1264 + C5055 * C1272 + C5060 * C6230 + C48360 * C6233) *
                C48042) *
               C31866 +
           ((C5059 * C6867 + C5055 * C6869 + C5060 * C23344 + C48360 * C23345) *
                C114 +
            (C5059 * C6870 + C5055 * C6873 + C5060 * C23346 + C48360 * C23347) *
                C48042) *
               C48362) *
              C47981 * C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C510 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48382 -
            (C37625 + C37626) * C511 - (C37627 + C37628) * C48371 +
            (C37629 + C37630) * C512 + (C37631 + C37632) * C48345) *
               C31866 +
           ((C37626 + C37625) * C510 + (C37628 + C37627) * C48382 -
            (C37630 + C37629) * C511 - (C37632 + C37631) * C48371 +
            (C5059 * C2147 + C5055 * C2153 + C5060 * C2581 + C48360 * C2584) *
                C512 +
            (C5059 * C2154 + C5055 * C2165 + C5060 * C2585 + C48360 * C2590) *
                C48345) *
               C48362) *
              C47981 * C1177 +
          (((C38095 + C38096) * C511 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48382 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C510) +
            (C38097 + C38098) * C48371 - (C38497 + C38498) * C512 -
            (C38499 + C38500) * C48345) *
               C31866 +
           ((C38498 + C38497) * C511 -
            ((C38098 + C38097) * C48382 + (C38096 + C38095) * C510) +
            (C38500 + C38499) * C48371 -
            (C5060 * C7735 + C48360 * C7737 + C5059 * C2581 + C5055 * C2584) *
                C512 -
            (C5060 * C7738 + C48360 * C7741 + C5059 * C2585 + C5055 * C2590) *
                C48345) *
               C48362) *
              C47981 * C1178 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C510 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C48382 -
            (C38501 + C38502) * C511 - (C38503 + C38504) * C48371 +
            (C38505 + C38506) * C512 + (C38507 + C38508) * C48345) *
               C31866 +
           ((C38502 + C38501) * C510 + (C38504 + C38503) * C48382 -
            (C38506 + C38505) * C511 - (C38508 + C38507) * C48371 +
            (C5059 * C7735 + C5055 * C7737 + C5060 * C23976 + C48360 * C23977) *
                C512 +
            (C5059 * C7738 + C5055 * C7741 + C5060 * C23978 + C48360 * C23979) *
                C48345) *
               C48362) *
              C47981 * C48342) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C1938 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C1935 -
            (C37625 + C37626) * C1939 - (C37627 + C37628) * C1936 +
            (C37629 + C37630) * C1940 + (C37631 + C37632) * C48345) *
               C31866 +
           ((C37626 + C37625) * C1938 + (C37628 + C37627) * C1935 -
            (C37630 + C37629) * C1939 - (C37632 + C37631) * C1936 +
            (C5059 * C2147 + C5055 * C2153 + C5060 * C2581 + C48360 * C2584) *
                C1940 +
            (C5059 * C2154 + C5055 * C2165 + C5060 * C2585 + C48360 * C2590) *
                C48345) *
               C48362) *
              C47981 * C48025 * C48378 +
          (((C5483 + C5482) * C1939 -
            ((C5097 + C5096) * C1935 + (C5095 + C5094) * C1938) +
            (C5485 + C5484) * C1936 - (C5487 + C5486) * C1940 -
            (C5489 + C5488) * C48345) *
               C31866 +
           ((C5486 + C5487) * C1939 -
            ((C5484 + C5485) * C1935 + (C5482 + C5483) * C1938) +
            (C5488 + C5489) * C1936 - (C7602 + C7603) * C1940 -
            (C7604 + C7605) * C48345) *
               C48362) *
              C47981 * C48025 * C48365 +
          (((C5101 + C5100) * C1938 + (C5099 + C5098) * C1935 -
            (C5491 + C5490) * C1939 - (C5493 + C5492) * C1936 +
            (C5495 + C5494) * C1940 + (C5497 + C5496) * C48345) *
               C31866 +
           ((C5490 + C5491) * C1938 + (C5492 + C5493) * C1935 -
            (C5494 + C5495) * C1939 - (C5496 + C5497) * C1936 +
            (C5059 * C2151 + C5055 * C2161 + C5060 * C2583 + C48360 * C2588) *
                C1940 +
            (C5059 * C2162 + C5055 * C2169 + C5060 * C2589 + C48360 * C2592) *
                C48345) *
               C48362) *
              C47981 * C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C1938 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C1935 -
            (C37625 + C37626) * C1939 - (C37627 + C37628) * C1936 +
            (C37629 + C37630) * C1940 + (C37631 + C37632) * C48345) *
               C31866 +
           ((C37626 + C37625) * C1938 + (C37628 + C37627) * C1935 -
            (C37630 + C37629) * C1939 - (C37632 + C37631) * C1936 +
            (C5059 * C2147 + C5055 * C2153 + C5060 * C2581 + C48360 * C2584) *
                C1940 +
            (C5059 * C2154 + C5055 * C2165 + C5060 * C2585 + C48360 * C2590) *
                C48345) *
               C48362) *
              C47981 * C48381 +
          (((C38095 + C38096) * C1939 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C1935 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C1938) +
            (C38097 + C38098) * C1936 - (C38497 + C38498) * C1940 -
            (C38499 + C38500) * C48345) *
               C31866 +
           ((C38498 + C38497) * C1939 -
            ((C38098 + C38097) * C1935 + (C38096 + C38095) * C1938) +
            (C38500 + C38499) * C1936 -
            (C5060 * C7735 + C48360 * C7737 + C5059 * C2581 + C5055 * C2584) *
                C1940 -
            (C5060 * C7738 + C48360 * C7741 + C5059 * C2585 + C5055 * C2590) *
                C48345) *
               C48362) *
              C47981 * C48369 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C1938 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C1935 -
            (C38501 + C38502) * C1939 - (C38503 + C38504) * C1936 +
            (C38505 + C38506) * C1940 + (C38507 + C38508) * C48345) *
               C31866 +
           ((C38502 + C38501) * C1938 + (C38504 + C38503) * C1935 -
            (C38506 + C38505) * C1939 - (C38508 + C38507) * C1936 +
            (C5059 * C7735 + C5055 * C7737 + C5060 * C23976 + C48360 * C23977) *
                C1940 +
            (C5059 * C7738 + C5055 * C7741 + C5060 * C23978 + C48360 * C23979) *
                C48345) *
               C48362) *
              C47981 * C48342) *
         C47998) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
               C2142 +
           (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
               C2137 -
           (C37625 + C37626) * C2143 - (C37627 + C37628) * C2138 +
           (C37629 + C37630) * C2144 + (C37631 + C37632) * C2139 -
           (C39365 + C39366) * C2145 - (C39367 + C39368) * C2140 +
           (C39369 + C39370) * C2146 + (C39371 + C39372) * C2141) *
              C31866 +
          ((C37626 + C37625) * C2142 + (C37628 + C37627) * C2137 -
           (C37630 + C37629) * C2143 - (C37632 + C37631) * C2138 +
           (C39366 + C39365) * C2144 + (C39368 + C39367) * C2139 -
           (C39370 + C39369) * C2145 - (C39372 + C39371) * C2140 +
           (C5059 * C12861 + C5055 * C12863 + C5060 * C28326 +
            C48360 * C28327) *
               C2146 +
           (C5059 * C12864 + C5055 * C12867 + C5060 * C28328 +
            C48360 * C28329) *
               C2141) *
              C48362) *
         C47981 * C48025 * C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C831 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48311 -
             (C37625 + C37626) * C832 - (C37627 + C37628) * C48129) *
                C31866 +
            ((C37626 + C37625) * C831 + (C37628 + C37627) * C48311 -
             (C37630 + C37629) * C832 - (C37632 + C37631) * C48129) *
                C48362) *
               C47981 * C1177 +
           (((C38095 + C38096) * C832 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C48311 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C831) +
             (C38097 + C38098) * C48129) *
                C31866 +
            ((C38498 + C38497) * C832 -
             ((C38098 + C38097) * C48311 + (C38096 + C38095) * C831) +
             (C38500 + C38499) * C48129) *
                C48362) *
               C47981 * C1178 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C831 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48311 -
             (C38501 + C38502) * C832 - (C38503 + C38504) * C48129) *
                C31866 +
            ((C38502 + C38501) * C831 + (C38504 + C38503) * C48311 -
             (C38506 + C38505) * C832 - (C38508 + C38507) * C48129) *
                C48362) *
               C47981 * C48342) *
              C48296 +
          ((((C5483 + C5482) * C832 -
             ((C5097 + C5096) * C48311 + (C5095 + C5094) * C831) +
             (C5485 + C5484) * C48129) *
                C31866 +
            ((C5486 + C5487) * C832 -
             ((C5484 + C5485) * C48311 + (C5482 + C5483) * C831) +
             (C5488 + C5489) * C48129) *
                C48362) *
               C47981 * C1177 +
           (((C5291 + C5290) * C831 + (C5289 + C5288) * C48311 -
             (C5993 + C5992) * C832 - (C5995 + C5994) * C48129) *
                C31866 +
            ((C5992 + C5993) * C831 + (C5994 + C5995) * C48311 -
             (C7460 + C7461) * C832 - (C7462 + C7463) * C48129) *
                C48362) *
               C47981 * C1178 +
           (((C6735 + C6734) * C832 -
             ((C5295 + C5294) * C48311 + (C5293 + C5292) * C831) +
             (C6737 + C6736) * C48129) *
                C31866 +
            ((C5059 * C1391 + C5055 * C1406 + C5060 * C6382 + C48360 * C6385) *
                 C832 -
             ((C6736 + C6737) * C48311 + (C6734 + C6735) * C831) +
             (C5059 * C1407 + C5055 * C1418 + C5060 * C6386 + C48360 * C6388) *
                 C48129) *
                C48362) *
               C47981 * C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C831 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48311 -
            (C37625 + C37626) * C832 - (C37627 + C37628) * C48129) *
               C31866 +
           ((C37626 + C37625) * C831 + (C37628 + C37627) * C48311 -
            (C37630 + C37629) * C832 - (C37632 + C37631) * C48129) *
               C48362) *
              C47981 * C48025 * C713 +
          (((C5483 + C5482) * C832 -
            ((C5097 + C5096) * C48311 + (C5095 + C5094) * C831) +
            (C5485 + C5484) * C48129) *
               C31866 +
           ((C5486 + C5487) * C832 -
            ((C5484 + C5485) * C48311 + (C5482 + C5483) * C831) +
            (C5488 + C5489) * C48129) *
               C48362) *
              C47981 * C48025 * C714 +
          (((C5101 + C5100) * C831 + (C5099 + C5098) * C48311 -
            (C5491 + C5490) * C832 - (C5493 + C5492) * C48129) *
               C31866 +
           ((C5490 + C5491) * C831 + (C5492 + C5493) * C48311 -
            (C5494 + C5495) * C832 - (C5496 + C5497) * C48129) *
               C48362) *
              C47981 * C48025 * C715 +
          (((C5779 + C5778) * C832 -
            ((C5105 + C5104) * C48311 + (C5103 + C5102) * C831) +
            (C5781 + C5780) * C48129) *
               C31866 +
           ((C5059 * C520 + C5055 * C537 + C5060 * C2317 + C48360 * C2318) *
                C832 -
            ((C5780 + C5781) * C48311 + (C5778 + C5779) * C831) +
            (C5059 * C538 + C5055 * C550 + C5060 * C2319 + C48360 * C2320) *
                C48129) *
               C48362) *
              C47981 * C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C2447 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C2443 -
            (C37625 + C37626) * C2448 - (C37627 + C37628) * C2444 +
            (C37629 + C37630) * C2449 + (C37631 + C37632) * C2445 -
            (C39365 + C39366) * C2450 - (C39367 + C39368) * C48358) *
               C31866 +
           ((C37626 + C37625) * C2447 + (C37628 + C37627) * C2443 -
            (C37630 + C37629) * C2448 - (C37632 + C37631) * C2444 +
            (C39366 + C39365) * C2449 + (C39368 + C39367) * C2445 -
            (C39370 + C39369) * C2450 - (C39372 + C39371) * C48358) *
               C48362) *
              C47981 * C48025 * C48296 +
          (((C5483 + C5482) * C2448 -
            ((C5097 + C5096) * C2443 + (C5095 + C5094) * C2447) +
            (C5485 + C5484) * C2444 - (C5487 + C5486) * C2449 -
            (C5489 + C5488) * C2445 + (C7603 + C7602) * C2450 +
            (C7605 + C7604) * C48358) *
               C31866 +
           ((C5486 + C5487) * C2448 -
            ((C5484 + C5485) * C2443 + (C5482 + C5483) * C2447) +
            (C5488 + C5489) * C2444 - (C7602 + C7603) * C2449 -
            (C7604 + C7605) * C2445 +
            (C5059 * C2150 + C5055 * C2159 + C5060 * C7250 + C48360 * C7253) *
                C2450 +
            (C5059 * C2160 + C5055 * C2168 + C5060 * C7254 + C48360 * C7256) *
                C48358) *
               C48362) *
              C47981 * C48025 * C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C31866 +
            ((C5059 * C513 + C5055 * C523 + C5060 * C1013 + C48360 * C1018) *
                 C114 +
             (C5059 * C524 + C5055 * C543 + C5060 * C1019 + C48360 * C1028) *
                 C48042) *
                C48362) *
               C47981 * C48381 -
           (((C5060 * C1401 + C48360 * C1415 + C5059 * C1019 + C5055 * C1028) *
                 C48042 +
             (C5060 * C1388 + C48360 * C1400 + C5059 * C1013 + C5055 * C1018) *
                 C114) *
                C48362 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C31866) *
               C47981 * C48369 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C31866 +
            ((C5059 * C1388 + C5055 * C1400 + C5060 * C1813 + C48360 * C1816) *
                 C114 +
             (C5059 * C1401 + C5055 * C1415 + C5060 * C1817 + C48360 * C1822) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C302 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C31866 +
            ((C5992 + C5993) * C114 + (C5994 + C5995) * C48042) * C48362) *
               C47981 * C48369 -
           (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
               C47981 * C48381 -
           (((C6736 + C6737) * C48042 + (C6734 + C6735) * C114) * C48362 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C31866) *
               C47981 * C48342) *
              C303 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C31866 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48042) * C48362) *
               C47981 * C48381 -
           (((C5998 + C5999) * C48042 + (C5996 + C5997) * C114) * C48362 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C31866) *
               C47981 * C48369 +
           (((C5303 + C5302) * C114 + (C5301 + C5300) * C48042) * C31866 +
            ((C5059 * C1392 + C5055 * C1408 + C5060 * C1815 + C48360 * C1820) *
                 C114 +
             (C5059 * C1409 + C5055 * C1419 + C5060 * C1821 + C48360 * C1824) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48042) *
               C31866 +
           ((C5059 * C513 + C5055 * C523 + C5060 * C1013 + C48360 * C1018) *
                C114 +
            (C5059 * C524 + C5055 * C543 + C5060 * C1019 + C48360 * C1028) *
                C48042) *
               C48362) *
              C47981 * C48025 * C108 -
          (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
           ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
              C47981 * C48025 * C109 +
          (((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C31866 +
           ((C5490 + C5491) * C114 + (C5492 + C5493) * C48042) * C48362) *
              C47981 * C48025 * C110 -
          (((C5780 + C5781) * C48042 + (C5778 + C5779) * C114) * C48362 +
           ((C5105 + C5104) * C48042 + (C5103 + C5102) * C114) * C31866) *
              C47981 * C48025 * C111 +
          (((C5109 + C5108) * C114 + (C5107 + C5106) * C48042) * C31866 +
           ((C5059 * C521 + C5055 * C539 + C5060 * C1017 + C48360 * C1026) *
                C114 +
            (C5059 * C540 + C5055 * C551 + C5060 * C1027 + C48360 * C1032) *
                C48042) *
               C48362) *
              C47981 * C48025 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C31866 +
            ((C37626 + C37625) * C114 + (C37628 + C37627) * C48042) * C48362) *
               C47981 * C1177 -
           (((C38098 + C38097) * C48042 + (C38096 + C38095) * C114) * C48362 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C31866) *
               C47981 * C1178 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C31866 +
            ((C5059 * C1388 + C5055 * C1400 + C5060 * C1813 + C48360 * C1816) *
                 C114 +
             (C5059 * C1401 + C5055 * C1415 + C5060 * C1817 + C48360 * C1822) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48378 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C31866 +
            ((C5992 + C5993) * C114 + (C5994 + C5995) * C48042) * C48362) *
               C47981 * C1178 -
           (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
               C47981 * C1177 -
           (((C6736 + C6737) * C48042 + (C6734 + C6735) * C114) * C48362 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C31866) *
               C47981 * C48342) *
              C48365 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C31866 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48042) * C48362) *
               C47981 * C1177 -
           (((C5998 + C5999) * C48042 + (C5996 + C5997) * C114) * C48362 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C31866) *
               C47981 * C1178 +
           (((C5303 + C5302) * C114 + (C5301 + C5300) * C48042) * C31866 +
            ((C5059 * C1392 + C5055 * C1408 + C5060 * C1815 + C48360 * C1820) *
                 C114 +
             (C5059 * C1409 + C5055 * C1419 + C5060 * C1821 + C48360 * C1824) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48042) *
               C31866 +
           ((C37626 + C37625) * C114 + (C37628 + C37627) * C48042) * C48362) *
              C47981 * C1245 -
          (((C38098 + C38097) * C48042 + (C38096 + C38095) * C114) * C48362 +
           ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                C48042 +
            (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                C114) *
               C31866) *
              C47981 * C1246 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C114 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C48042) *
               C31866 +
           ((C5059 * C1388 + C5055 * C1400 + C5060 * C1813 + C48360 * C1816) *
                C114 +
            (C5059 * C1401 + C5055 * C1415 + C5060 * C1817 + C48360 * C1822) *
                C48042) *
               C48362) *
              C47981 * C1247 -
          (((C5060 * C6870 + C48360 * C6873 + C5059 * C1817 + C5055 * C1822) *
                C48042 +
            (C5060 * C6867 + C48360 * C6869 + C5059 * C1813 + C5055 * C1816) *
                C114) *
               C48362 +
           ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                C48042 +
            (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                C114) *
               C31866) *
              C47981 * C1248 +
          (((C5059 * C1254 + C5055 * C1263 + C5060 * C6227 + C48360 * C6229) *
                C114 +
            (C5059 * C1264 + C5055 * C1272 + C5060 * C6230 + C48360 * C6233) *
                C48042) *
               C31866 +
           ((C5059 * C6867 + C5055 * C6869 + C5060 * C23344 + C48360 * C23345) *
                C114 +
            (C5059 * C6870 + C5055 * C6873 + C5060 * C23346 + C48360 * C23347) *
                C48042) *
               C48362) *
              C47981 * C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C1938 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C1935 -
            (C37625 + C37626) * C1939 - (C37627 + C37628) * C1936 +
            (C37629 + C37630) * C1940 + (C37631 + C37632) * C48345) *
               C31866 +
           ((C37626 + C37625) * C1938 + (C37628 + C37627) * C1935 -
            (C37630 + C37629) * C1939 - (C37632 + C37631) * C1936 +
            (C5059 * C2147 + C5055 * C2153 + C5060 * C2581 + C48360 * C2584) *
                C1940 +
            (C5059 * C2154 + C5055 * C2165 + C5060 * C2585 + C48360 * C2590) *
                C48345) *
               C48362) *
              C47981 * C48025 * C48378 +
          (((C5483 + C5482) * C1939 -
            ((C5097 + C5096) * C1935 + (C5095 + C5094) * C1938) +
            (C5485 + C5484) * C1936 - (C5487 + C5486) * C1940 -
            (C5489 + C5488) * C48345) *
               C31866 +
           ((C5486 + C5487) * C1939 -
            ((C5484 + C5485) * C1935 + (C5482 + C5483) * C1938) +
            (C5488 + C5489) * C1936 - (C7602 + C7603) * C1940 -
            (C7604 + C7605) * C48345) *
               C48362) *
              C47981 * C48025 * C48365 +
          (((C5101 + C5100) * C1938 + (C5099 + C5098) * C1935 -
            (C5491 + C5490) * C1939 - (C5493 + C5492) * C1936 +
            (C5495 + C5494) * C1940 + (C5497 + C5496) * C48345) *
               C31866 +
           ((C5490 + C5491) * C1938 + (C5492 + C5493) * C1935 -
            (C5494 + C5495) * C1939 - (C5496 + C5497) * C1936 +
            (C5059 * C2151 + C5055 * C2161 + C5060 * C2583 + C48360 * C2588) *
                C1940 +
            (C5059 * C2162 + C5055 * C2169 + C5060 * C2589 + C48360 * C2592) *
                C48345) *
               C48362) *
              C47981 * C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C1938 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C1935 -
            (C37625 + C37626) * C1939 - (C37627 + C37628) * C1936 +
            (C37629 + C37630) * C1940 + (C37631 + C37632) * C48345) *
               C31866 +
           ((C37626 + C37625) * C1938 + (C37628 + C37627) * C1935 -
            (C37630 + C37629) * C1939 - (C37632 + C37631) * C1936 +
            (C5059 * C2147 + C5055 * C2153 + C5060 * C2581 + C48360 * C2584) *
                C1940 +
            (C5059 * C2154 + C5055 * C2165 + C5060 * C2585 + C48360 * C2590) *
                C48345) *
               C48362) *
              C47981 * C48381 +
          (((C38095 + C38096) * C1939 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C1935 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C1938) +
            (C38097 + C38098) * C1936 - (C38497 + C38498) * C1940 -
            (C38499 + C38500) * C48345) *
               C31866 +
           ((C38498 + C38497) * C1939 -
            ((C38098 + C38097) * C1935 + (C38096 + C38095) * C1938) +
            (C38500 + C38499) * C1936 -
            (C5060 * C7735 + C48360 * C7737 + C5059 * C2581 + C5055 * C2584) *
                C1940 -
            (C5060 * C7738 + C48360 * C7741 + C5059 * C2585 + C5055 * C2590) *
                C48345) *
               C48362) *
              C47981 * C48369 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C1938 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C1935 -
            (C38501 + C38502) * C1939 - (C38503 + C38504) * C1936 +
            (C38505 + C38506) * C1940 + (C38507 + C38508) * C48345) *
               C31866 +
           ((C38502 + C38501) * C1938 + (C38504 + C38503) * C1935 -
            (C38506 + C38505) * C1939 - (C38508 + C38507) * C1936 +
            (C5059 * C7735 + C5055 * C7737 + C5060 * C23976 + C48360 * C23977) *
                C1940 +
            (C5059 * C7738 + C5055 * C7741 + C5060 * C23978 + C48360 * C23979) *
                C48345) *
               C48362) *
              C47981 * C48342) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C3467 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C3465 -
             (C37625 + C37626) * C3468 - (C37627 + C37628) * C48129) *
                C31866 +
            ((C37626 + C37625) * C3467 + (C37628 + C37627) * C3465 -
             (C37630 + C37629) * C3468 - (C37632 + C37631) * C48129) *
                C48362) *
               C47981 * C48310 +
           (((C38095 + C38096) * C3468 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C3465 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C3467) +
             (C38097 + C38098) * C48129) *
                C31866 +
            ((C38498 + C38497) * C3468 -
             ((C38098 + C38097) * C3465 + (C38096 + C38095) * C3467) +
             (C38500 + C38499) * C48129) *
                C48362) *
               C47981 * C48087) *
              C48003 +
          ((((C5483 + C5482) * C3468 -
             ((C5097 + C5096) * C3465 + (C5095 + C5094) * C3467) +
             (C5485 + C5484) * C48129) *
                C31866 +
            ((C5486 + C5487) * C3468 -
             ((C5484 + C5485) * C3465 + (C5482 + C5483) * C3467) +
             (C5488 + C5489) * C48129) *
                C48362) *
               C47981 * C48310 +
           (((C5291 + C5290) * C3467 + (C5289 + C5288) * C3465 -
             (C5993 + C5992) * C3468 - (C5995 + C5994) * C48129) *
                C31866 +
            ((C5992 + C5993) * C3467 + (C5994 + C5995) * C3465 -
             (C7460 + C7461) * C3468 - (C7462 + C7463) * C48129) *
                C48362) *
               C47981 * C48087) *
              C48011 +
          ((((C5101 + C5100) * C3467 + (C5099 + C5098) * C3465 -
             (C5491 + C5490) * C3468 - (C5493 + C5492) * C48129) *
                C31866 +
            ((C5490 + C5491) * C3467 + (C5492 + C5493) * C3465 -
             (C5494 + C5495) * C3468 - (C5496 + C5497) * C48129) *
                C48362) *
               C47981 * C48310 +
           (((C5997 + C5996) * C3468 -
             ((C5299 + C5298) * C3465 + (C5297 + C5296) * C3467) +
             (C5999 + C5998) * C48129) *
                C31866 +
            ((C5059 * C1387 + C5055 * C1398 + C5060 * C1393 + C48360 * C1410) *
                 C3468 -
             ((C5998 + C5999) * C3465 + (C5996 + C5997) * C3467) +
             (C5059 * C1399 + C5055 * C1414 + C5060 * C1411 + C48360 * C1420) *
                 C48129) *
                C48362) *
               C47981 * C48087) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C47030 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48125 -
             (C37625 + C37626) * C47022 - (C37627 + C37628) * C48132 +
             (C37629 + C37630) * C47036 + (C37631 + C37632) * C4043) *
                C31866 +
            ((C37626 + C37625) * C47030 + (C37628 + C37627) * C48125 -
             (C37630 + C37629) * C47022 - (C37632 + C37631) * C48132 +
             (C39366 + C39365) * C47036 + (C39368 + C39367) * C4043) *
                C48362) *
               C47981 * C48310 +
           (((C38095 + C38096) * C47022 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C48125 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C47030) +
             (C38097 + C38098) * C48132 - (C38497 + C38498) * C47036 -
             (C38499 + C38500) * C4043) *
                C31866 +
            ((C38498 + C38497) * C47022 -
             ((C38098 + C38097) * C48125 + (C38096 + C38095) * C47030) +
             (C38500 + C38499) * C48132 - (C39836 + C39835) * C47036 -
             (C39838 + C39837) * C4043) *
                C48362) *
               C47981 * C48087) *
              C2799 +
          ((((C5483 + C5482) * C47022 -
             ((C5097 + C5096) * C48125 + (C5095 + C5094) * C47030) +
             (C5485 + C5484) * C48132 - (C5487 + C5486) * C47036 -
             (C5489 + C5488) * C4043) *
                C31866 +
            ((C5486 + C5487) * C47022 -
             ((C5484 + C5485) * C48125 + (C5482 + C5483) * C47030) +
             (C5488 + C5489) * C48132 - (C7602 + C7603) * C47036 -
             (C7604 + C7605) * C4043) *
                C48362) *
               C47981 * C48310 +
           (((C5291 + C5290) * C47030 + (C5289 + C5288) * C48125 -
             (C5993 + C5992) * C47022 - (C5995 + C5994) * C48132 +
             (C7461 + C7460) * C47036 + (C7463 + C7462) * C4043) *
                C31866 +
            ((C5992 + C5993) * C47030 + (C5994 + C5995) * C48125 -
             (C7460 + C7461) * C47022 - (C7462 + C7463) * C48132 +
             (C5059 * C2582 + C5055 * C2586 + C5060 * C7736 + C48360 * C7739) *
                 C47036 +
             (C5059 * C2587 + C5055 * C2591 + C5060 * C7740 + C48360 * C7742) *
                 C4043) *
                C48362) *
               C47981 * C48087) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C3467 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C3465 -
             (C37625 + C37626) * C3468 - (C37627 + C37628) * C48129) *
                C31866 +
            ((C37626 + C37625) * C3467 + (C37628 + C37627) * C3465 -
             (C37630 + C37629) * C3468 - (C37632 + C37631) * C48129) *
                C48362) *
               C47981 * C48381 +
           (((C38095 + C38096) * C3468 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C3465 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C3467) +
             (C38097 + C38098) * C48129) *
                C31866 +
            ((C38498 + C38497) * C3468 -
             ((C38098 + C38097) * C3465 + (C38096 + C38095) * C3467) +
             (C38500 + C38499) * C48129) *
                C48362) *
               C47981 * C48369 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C3467 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C3465 -
             (C38501 + C38502) * C3468 - (C38503 + C38504) * C48129) *
                C31866 +
            ((C38502 + C38501) * C3467 + (C38504 + C38503) * C3465 -
             (C38506 + C38505) * C3468 - (C38508 + C38507) * C48129) *
                C48362) *
               C47981 * C48342) *
              C2799 +
          ((((C5483 + C5482) * C3468 -
             ((C5097 + C5096) * C3465 + (C5095 + C5094) * C3467) +
             (C5485 + C5484) * C48129) *
                C31866 +
            ((C5486 + C5487) * C3468 -
             ((C5484 + C5485) * C3465 + (C5482 + C5483) * C3467) +
             (C5488 + C5489) * C48129) *
                C48362) *
               C47981 * C48381 +
           (((C5291 + C5290) * C3467 + (C5289 + C5288) * C3465 -
             (C5993 + C5992) * C3468 - (C5995 + C5994) * C48129) *
                C31866 +
            ((C5992 + C5993) * C3467 + (C5994 + C5995) * C3465 -
             (C7460 + C7461) * C3468 - (C7462 + C7463) * C48129) *
                C48362) *
               C47981 * C48369 +
           (((C6735 + C6734) * C3468 -
             ((C5295 + C5294) * C3465 + (C5293 + C5292) * C3467) +
             (C6737 + C6736) * C48129) *
                C31866 +
            ((C5059 * C1391 + C5055 * C1406 + C5060 * C6382 + C48360 * C6385) *
                 C3468 -
             ((C6736 + C6737) * C3465 + (C6734 + C6735) * C3467) +
             (C5059 * C1407 + C5055 * C1418 + C5060 * C6386 + C48360 * C6388) *
                 C48129) *
                C48362) *
               C47981 * C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C3467 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C3465 -
            (C37625 + C37626) * C3468 - (C37627 + C37628) * C48129) *
               C31866 +
           ((C37626 + C37625) * C3467 + (C37628 + C37627) * C3465 -
            (C37630 + C37629) * C3468 - (C37632 + C37631) * C48129) *
               C48362) *
              C47981 * C48025 * C48387 +
          (((C5483 + C5482) * C3468 -
            ((C5097 + C5096) * C3465 + (C5095 + C5094) * C3467) +
            (C5485 + C5484) * C48129) *
               C31866 +
           ((C5486 + C5487) * C3468 -
            ((C5484 + C5485) * C3465 + (C5482 + C5483) * C3467) +
            (C5488 + C5489) * C48129) *
               C48362) *
              C47981 * C48025 * C48380 +
          (((C5101 + C5100) * C3467 + (C5099 + C5098) * C3465 -
            (C5491 + C5490) * C3468 - (C5493 + C5492) * C48129) *
               C31866 +
           ((C5490 + C5491) * C3467 + (C5492 + C5493) * C3465 -
            (C5494 + C5495) * C3468 - (C5496 + C5497) * C48129) *
               C48362) *
              C47981 * C48025 * C48367 +
          (((C5779 + C5778) * C3468 -
            ((C5105 + C5104) * C3465 + (C5103 + C5102) * C3467) +
            (C5781 + C5780) * C48129) *
               C31866 +
           ((C5059 * C520 + C5055 * C537 + C5060 * C2317 + C48360 * C2318) *
                C3468 -
            ((C5780 + C5781) * C3465 + (C5778 + C5779) * C3467) +
            (C5059 * C538 + C5055 * C550 + C5060 * C2319 + C48360 * C2320) *
                C48129) *
               C48362) *
              C47981 * C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C3757 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48389 -
            (C37625 + C37626) * C3758 - (C37627 + C37628) * C48386 +
            (C37629 + C37630) * C3759 + (C37631 + C37632) * C48377 -
            (C39365 + C39366) * C3760 - (C39367 + C39368) * C48358) *
               C31866 +
           ((C37626 + C37625) * C3757 + (C37628 + C37627) * C48389 -
            (C37630 + C37629) * C3758 - (C37632 + C37631) * C48386 +
            (C39366 + C39365) * C3759 + (C39368 + C39367) * C48377 -
            (C39370 + C39369) * C3760 - (C39372 + C39371) * C48358) *
               C48362) *
              C47981 * C48025 * C2799 +
          (((C5483 + C5482) * C3758 -
            ((C5097 + C5096) * C48389 + (C5095 + C5094) * C3757) +
            (C5485 + C5484) * C48386 - (C5487 + C5486) * C3759 -
            (C5489 + C5488) * C48377 + (C7603 + C7602) * C3760 +
            (C7605 + C7604) * C48358) *
               C31866 +
           ((C5486 + C5487) * C3758 -
            ((C5484 + C5485) * C48389 + (C5482 + C5483) * C3757) +
            (C5488 + C5489) * C48386 - (C7602 + C7603) * C3759 -
            (C7604 + C7605) * C48377 +
            (C5059 * C2150 + C5055 * C2159 + C5060 * C7250 + C48360 * C7253) *
                C3760 +
            (C5059 * C2160 + C5055 * C2168 + C5060 * C7254 + C48360 * C7256) *
                C48358) *
               C48362) *
              C47981 * C48025 * C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C47030 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48125 -
            (C37625 + C37626) * C47022 - (C37627 + C37628) * C48132 +
            (C37629 + C37630) * C47036 + (C37631 + C37632) * C4043) *
               C31866 +
           ((C37626 + C37625) * C47030 + (C37628 + C37627) * C48125 -
            (C37630 + C37629) * C47022 - (C37632 + C37631) * C48132 +
            (C39366 + C39365) * C47036 + (C39368 + C39367) * C4043) *
               C48362) *
              C47981 * C48025 * C48003 +
          (((C5483 + C5482) * C47022 -
            ((C5097 + C5096) * C48125 + (C5095 + C5094) * C47030) +
            (C5485 + C5484) * C48132 - (C5487 + C5486) * C47036 -
            (C5489 + C5488) * C4043) *
               C31866 +
           ((C5486 + C5487) * C47022 -
            ((C5484 + C5485) * C48125 + (C5482 + C5483) * C47030) +
            (C5488 + C5489) * C48132 - (C7602 + C7603) * C47036 -
            (C7604 + C7605) * C4043) *
               C48362) *
              C47981 * C48025 * C48011 +
          (((C5101 + C5100) * C47030 + (C5099 + C5098) * C48125 -
            (C5491 + C5490) * C47022 - (C5493 + C5492) * C48132 +
            (C5495 + C5494) * C47036 + (C5497 + C5496) * C4043) *
               C31866 +
           ((C5490 + C5491) * C47030 + (C5492 + C5493) * C48125 -
            (C5494 + C5495) * C47022 - (C5496 + C5497) * C48132 +
            (C5059 * C2151 + C5055 * C2161 + C5060 * C2583 + C48360 * C2588) *
                C47036 +
            (C5059 * C2162 + C5055 * C2169 + C5060 * C2589 + C48360 * C2592) *
                C4043) *
               C48362) *
              C47981 * C48025 * C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C3467 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C3465 -
            (C37625 + C37626) * C3468 - (C37627 + C37628) * C48129) *
               C31866 +
           ((C37626 + C37625) * C3467 + (C37628 + C37627) * C3465 -
            (C37630 + C37629) * C3468 - (C37632 + C37631) * C48129) *
               C48362) *
              C47981 * C48025 * C48387 +
          (((C5483 + C5482) * C3468 -
            ((C5097 + C5096) * C3465 + (C5095 + C5094) * C3467) +
            (C5485 + C5484) * C48129) *
               C31866 +
           ((C5486 + C5487) * C3468 -
            ((C5484 + C5485) * C3465 + (C5482 + C5483) * C3467) +
            (C5488 + C5489) * C48129) *
               C48362) *
              C47981 * C48025 * C48380 +
          (((C5101 + C5100) * C3467 + (C5099 + C5098) * C3465 -
            (C5491 + C5490) * C3468 - (C5493 + C5492) * C48129) *
               C31866 +
           ((C5490 + C5491) * C3467 + (C5492 + C5493) * C3465 -
            (C5494 + C5495) * C3468 - (C5496 + C5497) * C48129) *
               C48362) *
              C47981 * C48025 * C48367 +
          (((C5779 + C5778) * C3468 -
            ((C5105 + C5104) * C3465 + (C5103 + C5102) * C3467) +
            (C5781 + C5780) * C48129) *
               C31866 +
           ((C5059 * C520 + C5055 * C537 + C5060 * C2317 + C48360 * C2318) *
                C3468 -
            ((C5780 + C5781) * C3465 + (C5778 + C5779) * C3467) +
            (C5059 * C538 + C5055 * C550 + C5060 * C2319 + C48360 * C2320) *
                C48129) *
               C48362) *
              C47981 * C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C3467 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C3465 -
             (C37625 + C37626) * C3468 - (C37627 + C37628) * C48129) *
                C31866 +
            ((C37626 + C37625) * C3467 + (C37628 + C37627) * C3465 -
             (C37630 + C37629) * C3468 - (C37632 + C37631) * C48129) *
                C48362) *
               C47981 * C48381 +
           (((C38095 + C38096) * C3468 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C3465 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C3467) +
             (C38097 + C38098) * C48129) *
                C31866 +
            ((C38498 + C38497) * C3468 -
             ((C38098 + C38097) * C3465 + (C38096 + C38095) * C3467) +
             (C38500 + C38499) * C48129) *
                C48362) *
               C47981 * C48369 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C3467 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C3465 -
             (C38501 + C38502) * C3468 - (C38503 + C38504) * C48129) *
                C31866 +
            ((C38502 + C38501) * C3467 + (C38504 + C38503) * C3465 -
             (C38506 + C38505) * C3468 - (C38508 + C38507) * C48129) *
                C48362) *
               C47981 * C48342) *
              C2799 +
          ((((C5483 + C5482) * C3468 -
             ((C5097 + C5096) * C3465 + (C5095 + C5094) * C3467) +
             (C5485 + C5484) * C48129) *
                C31866 +
            ((C5486 + C5487) * C3468 -
             ((C5484 + C5485) * C3465 + (C5482 + C5483) * C3467) +
             (C5488 + C5489) * C48129) *
                C48362) *
               C47981 * C48381 +
           (((C5291 + C5290) * C3467 + (C5289 + C5288) * C3465 -
             (C5993 + C5992) * C3468 - (C5995 + C5994) * C48129) *
                C31866 +
            ((C5992 + C5993) * C3467 + (C5994 + C5995) * C3465 -
             (C7460 + C7461) * C3468 - (C7462 + C7463) * C48129) *
                C48362) *
               C47981 * C48369 +
           (((C6735 + C6734) * C3468 -
             ((C5295 + C5294) * C3465 + (C5293 + C5292) * C3467) +
             (C6737 + C6736) * C48129) *
                C31866 +
            ((C5059 * C1391 + C5055 * C1406 + C5060 * C6382 + C48360 * C6385) *
                 C3468 -
             ((C6736 + C6737) * C3465 + (C6734 + C6735) * C3467) +
             (C5059 * C1407 + C5055 * C1418 + C5060 * C6386 + C48360 * C6388) *
                 C48129) *
                C48362) *
               C47981 * C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C31866 +
            ((C37626 + C37625) * C114 + (C37628 + C37627) * C48042) * C48362) *
               C47981 * C48310 -
           (((C5060 * C1401 + C48360 * C1415 + C5059 * C1019 + C5055 * C1028) *
                 C48042 +
             (C5060 * C1388 + C48360 * C1400 + C5059 * C1013 + C5055 * C1018) *
                 C114) *
                C48362 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C31866) *
               C47981 * C48087) *
              C713 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C31866 +
            ((C5992 + C5993) * C114 + (C5994 + C5995) * C48042) * C48362) *
               C47981 * C48087 -
           (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
               C47981 * C48310) *
              C714 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C31866 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48042) * C48362) *
               C47981 * C48310 -
           (((C5998 + C5999) * C48042 + (C5996 + C5997) * C114) * C48362 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C31866) *
               C47981 * C48087) *
              C715 +
          ((((C5639 + C5638) * C114 + (C5637 + C5636) * C48042) * C31866 +
            ((C5059 * C1016 + C5055 * C1024 + C5060 * C1691 + C48360 * C1692) *
                 C114 +
             (C5059 * C1025 + C5055 * C1031 + C5060 * C1693 + C48360 * C1694) *
                 C48042) *
                C48362) *
               C47981 * C48087 -
           (((C5780 + C5781) * C48042 + (C5778 + C5779) * C114) * C48362 +
            ((C5105 + C5104) * C48042 + (C5103 + C5102) * C114) * C31866) *
               C47981 * C48310) *
              C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C31866 +
            ((C37626 + C37625) * C114 + (C37628 + C37627) * C48042) * C48362) *
               C47981 * C1519 -
           (((C38098 + C38097) * C48042 + (C38096 + C38095) * C114) * C48362 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C31866) *
               C47981 * C1520 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C31866 +
            ((C38502 + C38501) * C114 + (C38504 + C38503) * C48042) * C48362) *
               C47981 * C1521 -
           (((C5060 * C6870 + C48360 * C6873 + C5059 * C1817 + C5055 * C1822) *
                 C48042 +
             (C5060 * C6867 + C48360 * C6869 + C5059 * C1813 + C5055 * C1816) *
                 C114) *
                C48362 +
            ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                 C48042 +
             (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                 C114) *
                C31866) *
               C47981 * C48352) *
              C48296 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C31866 +
            ((C5992 + C5993) * C114 + (C5994 + C5995) * C48042) * C48362) *
               C47981 * C1520 -
           (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
               C47981 * C1519 -
           (((C6736 + C6737) * C48042 + (C6734 + C6735) * C114) * C48362 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C31866) *
               C47981 * C1521 +
           (((C6531 + C6530) * C114 + (C6529 + C6528) * C48042) * C31866 +
            ((C5059 * C1814 + C5055 * C1818 + C5060 * C6868 + C48360 * C6871) *
                 C114 +
             (C5059 * C1819 + C5055 * C1823 + C5060 * C6872 + C48360 * C6874) *
                 C48042) *
                C48362) *
               C47981 * C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C831 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48311 -
             (C37625 + C37626) * C832 - (C37627 + C37628) * C48129) *
                C31866 +
            ((C37626 + C37625) * C831 + (C37628 + C37627) * C48311 -
             (C37630 + C37629) * C832 - (C37632 + C37631) * C48129) *
                C48362) *
               C47981 * C48310 +
           (((C38095 + C38096) * C832 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C48311 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C831) +
             (C38097 + C38098) * C48129) *
                C31866 +
            ((C5059 * C1385 + C5055 * C1394 + C5060 * C1389 + C48360 * C1402) *
                 C832 -
             ((C38098 + C38097) * C48311 + (C38096 + C38095) * C831) +
             (C5059 * C1395 + C5055 * C1412 + C5060 * C1403 + C48360 * C1416) *
                 C48129) *
                C48362) *
               C47981 * C48087) *
              C302 +
          ((((C5483 + C5482) * C832 -
             ((C5097 + C5096) * C48311 + (C5095 + C5094) * C831) +
             (C5485 + C5484) * C48129) *
                C31866 +
            ((C5486 + C5487) * C832 -
             ((C5484 + C5485) * C48311 + (C5482 + C5483) * C831) +
             (C5488 + C5489) * C48129) *
                C48362) *
               C47981 * C48310 +
           (((C5291 + C5290) * C831 + (C5289 + C5288) * C48311 -
             (C5993 + C5992) * C832 - (C5995 + C5994) * C48129) *
                C31866 +
            ((C5992 + C5993) * C831 + (C5994 + C5995) * C48311 -
             (C7460 + C7461) * C832 - (C7462 + C7463) * C48129) *
                C48362) *
               C47981 * C48087) *
              C303 +
          ((((C5101 + C5100) * C831 + (C5099 + C5098) * C48311 -
             (C5491 + C5490) * C832 - (C5493 + C5492) * C48129) *
                C31866 +
            ((C5490 + C5491) * C831 + (C5492 + C5493) * C48311 -
             (C5494 + C5495) * C832 - (C5496 + C5497) * C48129) *
                C48362) *
               C47981 * C48310 +
           (((C5997 + C5996) * C832 -
             ((C5299 + C5298) * C48311 + (C5297 + C5296) * C831) +
             (C5999 + C5998) * C48129) *
                C31866 +
            ((C5059 * C1387 + C5055 * C1398 + C5060 * C1393 + C48360 * C1410) *
                 C832 -
             ((C5998 + C5999) * C48311 + (C5996 + C5997) * C831) +
             (C5059 * C1399 + C5055 * C1414 + C5060 * C1411 + C48360 * C1420) *
                 C48129) *
                C48362) *
               C47981 * C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C831 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48311 -
            (C37625 + C37626) * C832 - (C37627 + C37628) * C48129) *
               C31866 +
           ((C37626 + C37625) * C831 + (C37628 + C37627) * C48311 -
            (C37630 + C37629) * C832 - (C37632 + C37631) * C48129) *
               C48362) *
              C47981 * C1519 +
          (((C38095 + C38096) * C832 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48311 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C831) +
            (C38097 + C38098) * C48129) *
               C31866 +
           ((C38498 + C38497) * C832 -
            ((C38098 + C38097) * C48311 + (C38096 + C38095) * C831) +
            (C38500 + C38499) * C48129) *
               C48362) *
              C47981 * C1520 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C831 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C48311 -
            (C38501 + C38502) * C832 - (C38503 + C38504) * C48129) *
               C31866 +
           ((C38502 + C38501) * C831 + (C38504 + C38503) * C48311 -
            (C38506 + C38505) * C832 - (C38508 + C38507) * C48129) *
               C48362) *
              C47981 * C1521 +
          (((C38971 + C38972) * C832 -
            ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                 C48311 +
             (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                 C831) +
            (C38973 + C38974) * C48129) *
               C31866 +
           ((C5059 * C6381 + C5055 * C6383 + C5060 * C22998 + C48360 * C22999) *
                C832 -
            ((C38974 + C38973) * C48311 + (C38972 + C38971) * C831) +
            (C5059 * C6384 + C5055 * C6387 + C5060 * C23000 + C48360 * C23001) *
                C48129) *
               C48362) *
              C47981 * C48352) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C31866 +
            ((C5059 * C513 + C5055 * C523 + C5060 * C1013 + C48360 * C1018) *
                 C114 +
             (C5059 * C524 + C5055 * C543 + C5060 * C1019 + C48360 * C1028) *
                 C48042) *
                C48362) *
               C47981 * C48381 -
           (((C5060 * C1401 + C48360 * C1415 + C5059 * C1019 + C5055 * C1028) *
                 C48042 +
             (C5060 * C1388 + C48360 * C1400 + C5059 * C1013 + C5055 * C1018) *
                 C114) *
                C48362 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C31866) *
               C47981 * C48369 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C31866 +
            ((C5059 * C1388 + C5055 * C1400 + C5060 * C1813 + C48360 * C1816) *
                 C114 +
             (C5059 * C1401 + C5055 * C1415 + C5060 * C1817 + C48360 * C1822) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C302 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C31866 +
            ((C5992 + C5993) * C114 + (C5994 + C5995) * C48042) * C48362) *
               C47981 * C48369 -
           (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
               C47981 * C48381 -
           (((C6736 + C6737) * C48042 + (C6734 + C6735) * C114) * C48362 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C31866) *
               C47981 * C48342) *
              C303 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C31866 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48042) * C48362) *
               C47981 * C48381 -
           (((C5998 + C5999) * C48042 + (C5996 + C5997) * C114) * C48362 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C31866) *
               C47981 * C48369 +
           (((C5303 + C5302) * C114 + (C5301 + C5300) * C48042) * C31866 +
            ((C5059 * C1392 + C5055 * C1408 + C5060 * C1815 + C48360 * C1820) *
                 C114 +
             (C5059 * C1409 + C5055 * C1419 + C5060 * C1821 + C48360 * C1824) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48042) *
               C31866 +
           ((C5059 * C513 + C5055 * C523 + C5060 * C1013 + C48360 * C1018) *
                C114 +
            (C5059 * C524 + C5055 * C543 + C5060 * C1019 + C48360 * C1028) *
                C48042) *
               C48362) *
              C47981 * C48025 * C108 -
          (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
           ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
              C47981 * C48025 * C109 +
          (((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C31866 +
           ((C5490 + C5491) * C114 + (C5492 + C5493) * C48042) * C48362) *
              C47981 * C48025 * C110 -
          (((C5780 + C5781) * C48042 + (C5778 + C5779) * C114) * C48362 +
           ((C5105 + C5104) * C48042 + (C5103 + C5102) * C114) * C31866) *
              C47981 * C48025 * C111 +
          (((C5109 + C5108) * C114 + (C5107 + C5106) * C48042) * C31866 +
           ((C5059 * C521 + C5055 * C539 + C5060 * C1017 + C48360 * C1026) *
                C114 +
            (C5059 * C540 + C5055 * C551 + C5060 * C1027 + C48360 * C1032) *
                C48042) *
               C48362) *
              C47981 * C48025 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C510 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48382 -
            (C37625 + C37626) * C511 - (C37627 + C37628) * C48371 +
            (C37629 + C37630) * C512 + (C37631 + C37632) * C48345) *
               C31866 +
           ((C37626 + C37625) * C510 + (C37628 + C37627) * C48382 -
            (C37630 + C37629) * C511 - (C37632 + C37631) * C48371 +
            (C5059 * C2147 + C5055 * C2153 + C5060 * C2581 + C48360 * C2584) *
                C512 +
            (C5059 * C2154 + C5055 * C2165 + C5060 * C2585 + C48360 * C2590) *
                C48345) *
               C48362) *
              C47981 * C48025 * C302 +
          (((C5483 + C5482) * C511 -
            ((C5097 + C5096) * C48382 + (C5095 + C5094) * C510) +
            (C5485 + C5484) * C48371 - (C5487 + C5486) * C512 -
            (C5489 + C5488) * C48345) *
               C31866 +
           ((C5486 + C5487) * C511 -
            ((C5484 + C5485) * C48382 + (C5482 + C5483) * C510) +
            (C5488 + C5489) * C48371 - (C7602 + C7603) * C512 -
            (C7604 + C7605) * C48345) *
               C48362) *
              C47981 * C48025 * C303 +
          (((C5101 + C5100) * C510 + (C5099 + C5098) * C48382 -
            (C5491 + C5490) * C511 - (C5493 + C5492) * C48371 +
            (C5495 + C5494) * C512 + (C5497 + C5496) * C48345) *
               C31866 +
           ((C5490 + C5491) * C510 + (C5492 + C5493) * C48382 -
            (C5494 + C5495) * C511 - (C5496 + C5497) * C48371 +
            (C5059 * C2151 + C5055 * C2161 + C5060 * C2583 + C48360 * C2588) *
                C512 +
            (C5059 * C2162 + C5055 * C2169 + C5060 * C2589 + C48360 * C2592) *
                C48345) *
               C48362) *
              C47981 * C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C31866 +
            ((C37626 + C37625) * C114 + (C37628 + C37627) * C48042) * C48362) *
               C47981 * C1177 -
           (((C38098 + C38097) * C48042 + (C38096 + C38095) * C114) * C48362 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C31866) *
               C47981 * C1178 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C31866 +
            ((C5059 * C1388 + C5055 * C1400 + C5060 * C1813 + C48360 * C1816) *
                 C114 +
             (C5059 * C1401 + C5055 * C1415 + C5060 * C1817 + C48360 * C1822) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48378 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C31866 +
            ((C5992 + C5993) * C114 + (C5994 + C5995) * C48042) * C48362) *
               C47981 * C1178 -
           (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
               C47981 * C1177 -
           (((C6736 + C6737) * C48042 + (C6734 + C6735) * C114) * C48362 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C31866) *
               C47981 * C48342) *
              C48365 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C31866 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48042) * C48362) *
               C47981 * C1177 -
           (((C5998 + C5999) * C48042 + (C5996 + C5997) * C114) * C48362 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C31866) *
               C47981 * C1178 +
           (((C5303 + C5302) * C114 + (C5301 + C5300) * C48042) * C31866 +
            ((C5059 * C1392 + C5055 * C1408 + C5060 * C1815 + C48360 * C1820) *
                 C114 +
             (C5059 * C1409 + C5055 * C1419 + C5060 * C1821 + C48360 * C1824) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48042) *
               C31866 +
           ((C37626 + C37625) * C114 + (C37628 + C37627) * C48042) * C48362) *
              C47981 * C1245 -
          (((C38098 + C38097) * C48042 + (C38096 + C38095) * C114) * C48362 +
           ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                C48042 +
            (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                C114) *
               C31866) *
              C47981 * C1246 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C114 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C48042) *
               C31866 +
           ((C5059 * C1388 + C5055 * C1400 + C5060 * C1813 + C48360 * C1816) *
                C114 +
            (C5059 * C1401 + C5055 * C1415 + C5060 * C1817 + C48360 * C1822) *
                C48042) *
               C48362) *
              C47981 * C1247 -
          (((C5060 * C6870 + C48360 * C6873 + C5059 * C1817 + C5055 * C1822) *
                C48042 +
            (C5060 * C6867 + C48360 * C6869 + C5059 * C1813 + C5055 * C1816) *
                C114) *
               C48362 +
           ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                C48042 +
            (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                C114) *
               C31866) *
              C47981 * C1248 +
          (((C5059 * C1254 + C5055 * C1263 + C5060 * C6227 + C48360 * C6229) *
                C114 +
            (C5059 * C1264 + C5055 * C1272 + C5060 * C6230 + C48360 * C6233) *
                C48042) *
               C31866 +
           ((C5059 * C6867 + C5055 * C6869 + C5060 * C23344 + C48360 * C23345) *
                C114 +
            (C5059 * C6870 + C5055 * C6873 + C5060 * C23346 + C48360 * C23347) *
                C48042) *
               C48362) *
              C47981 * C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C510 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48382 -
            (C37625 + C37626) * C511 - (C37627 + C37628) * C48371 +
            (C37629 + C37630) * C512 + (C37631 + C37632) * C48345) *
               C31866 +
           ((C37626 + C37625) * C510 + (C37628 + C37627) * C48382 -
            (C37630 + C37629) * C511 - (C37632 + C37631) * C48371 +
            (C5059 * C2147 + C5055 * C2153 + C5060 * C2581 + C48360 * C2584) *
                C512 +
            (C5059 * C2154 + C5055 * C2165 + C5060 * C2585 + C48360 * C2590) *
                C48345) *
               C48362) *
              C47981 * C1177 +
          (((C38095 + C38096) * C511 -
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48382 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C510) +
            (C38097 + C38098) * C48371 - (C38497 + C38498) * C512 -
            (C38499 + C38500) * C48345) *
               C31866 +
           ((C38498 + C38497) * C511 -
            ((C38098 + C38097) * C48382 + (C38096 + C38095) * C510) +
            (C38500 + C38499) * C48371 -
            (C5060 * C7735 + C48360 * C7737 + C5059 * C2581 + C5055 * C2584) *
                C512 -
            (C5060 * C7738 + C48360 * C7741 + C5059 * C2585 + C5055 * C2590) *
                C48345) *
               C48362) *
              C47981 * C1178 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C510 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C48382 -
            (C38501 + C38502) * C511 - (C38503 + C38504) * C48371 +
            (C38505 + C38506) * C512 + (C38507 + C38508) * C48345) *
               C31866 +
           ((C38502 + C38501) * C510 + (C38504 + C38503) * C48382 -
            (C38506 + C38505) * C511 - (C38508 + C38507) * C48371 +
            (C5059 * C7735 + C5055 * C7737 + C5060 * C23976 + C48360 * C23977) *
                C512 +
            (C5059 * C7738 + C5055 * C7741 + C5060 * C23978 + C48360 * C23979) *
                C48345) *
               C48362) *
              C47981 * C48342) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C831 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48311 -
            (C37625 + C37626) * C832 - (C37627 + C37628) * C48129) *
               C31866 +
           ((C37626 + C37625) * C831 + (C37628 + C37627) * C48311 -
            (C37630 + C37629) * C832 - (C37632 + C37631) * C48129) *
               C48362) *
              C47981 * C48025 * C713 +
          (((C5483 + C5482) * C832 -
            ((C5097 + C5096) * C48311 + (C5095 + C5094) * C831) +
            (C5485 + C5484) * C48129) *
               C31866 +
           ((C5486 + C5487) * C832 -
            ((C5484 + C5485) * C48311 + (C5482 + C5483) * C831) +
            (C5488 + C5489) * C48129) *
               C48362) *
              C47981 * C48025 * C714 +
          (((C5101 + C5100) * C831 + (C5099 + C5098) * C48311 -
            (C5491 + C5490) * C832 - (C5493 + C5492) * C48129) *
               C31866 +
           ((C5490 + C5491) * C831 + (C5492 + C5493) * C48311 -
            (C5494 + C5495) * C832 - (C5496 + C5497) * C48129) *
               C48362) *
              C47981 * C48025 * C715 +
          (((C5779 + C5778) * C832 -
            ((C5105 + C5104) * C48311 + (C5103 + C5102) * C831) +
            (C5781 + C5780) * C48129) *
               C31866 +
           ((C5059 * C520 + C5055 * C537 + C5060 * C2317 + C48360 * C2318) *
                C832 -
            ((C5780 + C5781) * C48311 + (C5778 + C5779) * C831) +
            (C5059 * C538 + C5055 * C550 + C5060 * C2319 + C48360 * C2320) *
                C48129) *
               C48362) *
              C47981 * C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C831 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48311 -
             (C37625 + C37626) * C832 - (C37627 + C37628) * C48129) *
                C31866 +
            ((C37626 + C37625) * C831 + (C37628 + C37627) * C48311 -
             (C37630 + C37629) * C832 - (C37632 + C37631) * C48129) *
                C48362) *
               C47981 * C1177 +
           (((C38095 + C38096) * C832 -
             ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                  C48311 +
              (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                  C831) +
             (C38097 + C38098) * C48129) *
                C31866 +
            ((C38498 + C38497) * C832 -
             ((C38098 + C38097) * C48311 + (C38096 + C38095) * C831) +
             (C38500 + C38499) * C48129) *
                C48362) *
               C47981 * C1178 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C831 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48311 -
             (C38501 + C38502) * C832 - (C38503 + C38504) * C48129) *
                C31866 +
            ((C38502 + C38501) * C831 + (C38504 + C38503) * C48311 -
             (C38506 + C38505) * C832 - (C38508 + C38507) * C48129) *
                C48362) *
               C47981 * C48342) *
              C48296 +
          ((((C5483 + C5482) * C832 -
             ((C5097 + C5096) * C48311 + (C5095 + C5094) * C831) +
             (C5485 + C5484) * C48129) *
                C31866 +
            ((C5486 + C5487) * C832 -
             ((C5484 + C5485) * C48311 + (C5482 + C5483) * C831) +
             (C5488 + C5489) * C48129) *
                C48362) *
               C47981 * C1177 +
           (((C5291 + C5290) * C831 + (C5289 + C5288) * C48311 -
             (C5993 + C5992) * C832 - (C5995 + C5994) * C48129) *
                C31866 +
            ((C5992 + C5993) * C831 + (C5994 + C5995) * C48311 -
             (C7460 + C7461) * C832 - (C7462 + C7463) * C48129) *
                C48362) *
               C47981 * C1178 +
           (((C6735 + C6734) * C832 -
             ((C5295 + C5294) * C48311 + (C5293 + C5292) * C831) +
             (C6737 + C6736) * C48129) *
                C31866 +
            ((C5059 * C1391 + C5055 * C1406 + C5060 * C6382 + C48360 * C6385) *
                 C832 -
             ((C6736 + C6737) * C48311 + (C6734 + C6735) * C831) +
             (C5059 * C1407 + C5055 * C1418 + C5060 * C6386 + C48360 * C6388) *
                 C48129) *
                C48362) *
               C47981 * C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48042) *
               C31866 +
           ((C5059 * C513 + C5055 * C523 + C5060 * C1013 + C48360 * C1018) *
                C114 +
            (C5059 * C524 + C5055 * C543 + C5060 * C1019 + C48360 * C1028) *
                C48042) *
               C48362) *
              C47981 * C48025 * C108 -
          (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
           ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
              C47981 * C48025 * C109 +
          (((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C31866 +
           ((C5490 + C5491) * C114 + (C5492 + C5493) * C48042) * C48362) *
              C47981 * C48025 * C110 -
          (((C5780 + C5781) * C48042 + (C5778 + C5779) * C114) * C48362 +
           ((C5105 + C5104) * C48042 + (C5103 + C5102) * C114) * C31866) *
              C47981 * C48025 * C111 +
          (((C5109 + C5108) * C114 + (C5107 + C5106) * C48042) * C31866 +
           ((C5059 * C521 + C5055 * C539 + C5060 * C1017 + C48360 * C1026) *
                C114 +
            (C5059 * C540 + C5055 * C551 + C5060 * C1027 + C48360 * C1032) *
                C48042) *
               C48362) *
              C47981 * C48025 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C31866 +
            ((C5059 * C513 + C5055 * C523 + C5060 * C1013 + C48360 * C1018) *
                 C114 +
             (C5059 * C524 + C5055 * C543 + C5060 * C1019 + C48360 * C1028) *
                 C48042) *
                C48362) *
               C47981 * C48381 -
           (((C5060 * C1401 + C48360 * C1415 + C5059 * C1019 + C5055 * C1028) *
                 C48042 +
             (C5060 * C1388 + C48360 * C1400 + C5059 * C1013 + C5055 * C1018) *
                 C114) *
                C48362 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C31866) *
               C47981 * C48369 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C31866 +
            ((C5059 * C1388 + C5055 * C1400 + C5060 * C1813 + C48360 * C1816) *
                 C114 +
             (C5059 * C1401 + C5055 * C1415 + C5060 * C1817 + C48360 * C1822) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C302 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C31866 +
            ((C5992 + C5993) * C114 + (C5994 + C5995) * C48042) * C48362) *
               C47981 * C48369 -
           (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
               C47981 * C48381 -
           (((C6736 + C6737) * C48042 + (C6734 + C6735) * C114) * C48362 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C31866) *
               C47981 * C48342) *
              C303 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C31866 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48042) * C48362) *
               C47981 * C48381 -
           (((C5998 + C5999) * C48042 + (C5996 + C5997) * C114) * C48362 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C31866) *
               C47981 * C48369 +
           (((C5303 + C5302) * C114 + (C5301 + C5300) * C48042) * C31866 +
            ((C5059 * C1392 + C5055 * C1408 + C5060 * C1815 + C48360 * C1820) *
                 C114 +
             (C5059 * C1409 + C5055 * C1419 + C5060 * C1821 + C48360 * C1824) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                 C114 +
             (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                 C48042) *
                C31866 +
            ((C37626 + C37625) * C114 + (C37628 + C37627) * C48042) * C48362) *
               C47981 * C1177 -
           (((C38098 + C38097) * C48042 + (C38096 + C38095) * C114) * C48362 +
            ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                 C48042 +
             (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                 C114) *
                C31866) *
               C47981 * C1178 +
           (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                 C114 +
             (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                 C48042) *
                C31866 +
            ((C5059 * C1388 + C5055 * C1400 + C5060 * C1813 + C48360 * C1816) *
                 C114 +
             (C5059 * C1401 + C5055 * C1415 + C5060 * C1817 + C48360 * C1822) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48378 +
          ((((C5291 + C5290) * C114 + (C5289 + C5288) * C48042) * C31866 +
            ((C5992 + C5993) * C114 + (C5994 + C5995) * C48042) * C48362) *
               C47981 * C1178 -
           (((C5484 + C5485) * C48042 + (C5482 + C5483) * C114) * C48362 +
            ((C5097 + C5096) * C48042 + (C5095 + C5094) * C114) * C31866) *
               C47981 * C1177 -
           (((C6736 + C6737) * C48042 + (C6734 + C6735) * C114) * C48362 +
            ((C5295 + C5294) * C48042 + (C5293 + C5292) * C114) * C31866) *
               C47981 * C48342) *
              C48365 +
          ((((C5101 + C5100) * C114 + (C5099 + C5098) * C48042) * C31866 +
            ((C5490 + C5491) * C114 + (C5492 + C5493) * C48042) * C48362) *
               C47981 * C1177 -
           (((C5998 + C5999) * C48042 + (C5996 + C5997) * C114) * C48362 +
            ((C5299 + C5298) * C48042 + (C5297 + C5296) * C114) * C31866) *
               C47981 * C1178 +
           (((C5303 + C5302) * C114 + (C5301 + C5300) * C48042) * C31866 +
            ((C5059 * C1392 + C5055 * C1408 + C5060 * C1815 + C48360 * C1820) *
                 C114 +
             (C5059 * C1409 + C5055 * C1419 + C5060 * C1821 + C48360 * C1824) *
                 C48042) *
                C48362) *
               C47981 * C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C5059 * C115 + C5055 * C122 + C5060 * C307 + C48360 * C320) *
                C114 +
            (C5059 * C123 + C5055 * C136 + C5060 * C319 + C48360 * C337) *
                C48042) *
               C31866 +
           ((C37626 + C37625) * C114 + (C37628 + C37627) * C48042) * C48362) *
              C47981 * C1245 -
          (((C38098 + C38097) * C48042 + (C38096 + C38095) * C114) * C48362 +
           ((C5060 * C322 + C48360 * C338 + C5059 * C319 + C5055 * C337) *
                C48042 +
            (C5060 * C308 + C48360 * C321 + C5059 * C307 + C5055 * C320) *
                C114) *
               C31866) *
              C47981 * C1246 +
          (((C5059 * C308 + C5055 * C321 + C5060 * C1253 + C48360 * C1262) *
                C114 +
            (C5059 * C322 + C5055 * C338 + C5060 * C1261 + C48360 * C1271) *
                C48042) *
               C31866 +
           ((C5059 * C1388 + C5055 * C1400 + C5060 * C1813 + C48360 * C1816) *
                C114 +
            (C5059 * C1401 + C5055 * C1415 + C5060 * C1817 + C48360 * C1822) *
                C48042) *
               C48362) *
              C47981 * C1247 -
          (((C5060 * C6870 + C48360 * C6873 + C5059 * C1817 + C5055 * C1822) *
                C48042 +
            (C5060 * C6867 + C48360 * C6869 + C5059 * C1813 + C5055 * C1816) *
                C114) *
               C48362 +
           ((C5060 * C1264 + C48360 * C1272 + C5059 * C1261 + C5055 * C1271) *
                C48042 +
            (C5060 * C1254 + C48360 * C1263 + C5059 * C1253 + C5055 * C1262) *
                C114) *
               C31866) *
              C47981 * C1248 +
          (((C5059 * C1254 + C5055 * C1263 + C5060 * C6227 + C48360 * C6229) *
                C114 +
            (C5059 * C1264 + C5055 * C1272 + C5060 * C6230 + C48360 * C6233) *
                C48042) *
               C31866 +
           ((C5059 * C6867 + C5055 * C6869 + C5060 * C23344 + C48360 * C23345) *
                C114 +
            (C5059 * C6870 + C5055 * C6873 + C5060 * C23346 + C48360 * C23347) *
                C48042) *
               C48362) *
              C47981 * C1249) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[200] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48228 * C122) * C114 +
                      (C113 * C123 + C48228 * C136) * C48042) *
                         C42864 +
                     (C11120 * C114 + C11121 * C48042) * C42865 +
                     (C11122 * C114 + C11123 * C48042) * C42866) *
                        C47981 * C48083 -
                    ((C11997 * C48042 + C11996 * C114) * C42866 +
                     (C11605 * C48042 + C11604 * C114) * C42865 +
                     ((C113 * C319 + C48228 * C337) * C48042 +
                      (C113 * C307 + C48228 * C320) * C114) *
                         C42864) *
                        C47981 * C48090 +
                    (((C113 * C308 + C48228 * C321) * C114 +
                      (C113 * C322 + C48228 * C338) * C48042) *
                         C42864 +
                     (C11998 * C114 + C11999 * C48042) * C42865 +
                     (C12000 * C114 + C12001 * C48042) * C42866) *
                        C47981 * C3071) *
                       C48003 +
                   (((C385 + C384) * C42864 + (C10947 + C10946) * C42865 +
                     (C2338 * C114 + C2339 * C48042) * C42866) *
                        C47981 * C48090 -
                    ((C587 * C48042 + C586 * C114) * C42866 +
                     (C10793 + C10792) * C42865 + (C175 + C174) * C42864) *
                        C47981 * C48083 -
                    ((C12003 * C48042 + C12002 * C114) * C42866 +
                     (C10949 + C10948) * C42865 + (C387 + C386) * C42864) *
                        C47981 * C3071) *
                       C48011 +
                   ((C184 * C42864 + (C10795 + C10794) * C42865 +
                     (C591 * C114 + C592 * C48042) * C42866) *
                        C47981 * C48083 -
                    ((C2341 * C48042 + C2340 * C114) * C42866 +
                     (C10951 + C10950) * C42865 + C394 * C42864) *
                        C47981 * C48090 +
                    (C395 * C42864 + (C10953 + C10952) * C42865 +
                     ((C113 * C1393 + C48228 * C1410) * C114 +
                      (C113 * C1411 + C48228 * C1420) * C48042) *
                         C42866) *
                        C47981 * C3071) *
                       C3074)) /
                 (p * q * std::sqrt(p + q));
    d2ee[201] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C831 +
             (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
             C11121 * C48129) *
                C42864 +
            (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
             C11123 * C48129) *
                C42865 +
            (C11122 * C831 + C11123 * C48311 - C12882 * C832 -
             C12883 * C48129) *
                C42866) *
               C47981 * C48083 +
           ((C11604 * C832 -
             ((C113 * C319 + C48228 * C337) * C48311 +
              (C113 * C307 + C48228 * C320) * C831) +
             C11605 * C48129) *
                C42864 +
            (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
             C11997 * C48129) *
                C42865 +
            (C13366 * C832 - (C11997 * C48311 + C11996 * C831) +
             C13367 * C48129) *
                C42866) *
               C47981 * C48090 +
           (((C113 * C308 + C48228 * C321) * C831 +
             (C113 * C322 + C48228 * C338) * C48311 - C11998 * C832 -
             C11999 * C48129) *
                C42864 +
            (C11998 * C831 + C11999 * C48311 - C12000 * C832 -
             C12001 * C48129) *
                C42865 +
            (C12000 * C831 + C12001 * C48311 - C43716 * C832 -
             C43717 * C48129) *
                C42866) *
               C47981 * C3071) *
              C2799 +
          (((C840 - (C839 + C838) + C841) * C42864 +
            (C11388 - (C11387 + C11386) + C11389) * C42865 +
            (C2476 * C832 - (C587 * C48311 + C586 * C831) + C2477 * C48129) *
                C42866) *
               C47981 * C48083 +
           ((C1037 + C1036 - C1059 - C1060) * C42864 +
            (C11598 + C11597 - C11596 - C11599) * C42865 +
            (C2338 * C831 + C2339 * C48311 - C13090 * C832 - C13091 * C48129) *
                C42866) *
               C47981 * C48090 +
           ((C1712 - (C1697 + C1696) + C1713) * C42864 +
            (C12338 - (C12337 + C12336) + C12339) * C42865 +
            ((C113 * C7736 + C48228 * C7739) * C832 -
             (C12003 * C48311 + C12002 * C831) +
             (C113 * C7740 + C48228 * C7742) * C48129) *
                C42866) *
               C47981 * C3071) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[202] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C42864 +
            (C11120 * C114 + C11121 * C48042) * C42865 +
            (C11122 * C114 + C11123 * C48042) * C42866) *
               C47981 * C48388 -
           ((C11997 * C48042 + C11996 * C114) * C42866 +
            (C11605 * C48042 + C11604 * C114) * C42865 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C42864) *
               C47981 * C48384 +
           (((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C42864 +
            (C11998 * C114 + C11999 * C48042) * C42865 +
            (C12000 * C114 + C12001 * C48042) * C42866) *
               C47981 * C48374 -
           ((C44065 * C48042 + C44064 * C114) * C42866 +
            (C12475 * C48042 + C12474 * C114) * C42865 +
            ((C113 * C1261 + C48228 * C1271) * C48042 +
             (C113 * C1253 + C48228 * C1262) * C114) *
                C42864) *
               C47981 * C48352) *
              C2799 +
          (((C385 + C384) * C42864 + (C10947 + C10946) * C42865 +
            (C2338 * C114 + C2339 * C48042) * C42866) *
               C47981 * C48384 -
           ((C587 * C48042 + C586 * C114) * C42866 +
            (C10793 + C10792) * C42865 + (C175 + C174) * C42864) *
               C47981 * C48388 -
           ((C12003 * C48042 + C12002 * C114) * C42866 +
            (C10949 + C10948) * C42865 + (C387 + C386) * C42864) *
               C47981 * C48374 +
           ((C1545 + C1544) * C42864 + (C12141 + C12140) * C42865 +
            ((C113 * C6382 + C48228 * C6385) * C114 +
             (C113 * C6386 + C48228 * C6388) * C48042) *
                C42866) *
               C47981 * C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C42864 +
            (C11120 * C114 + C11121 * C48042) * C42865 +
            (C11122 * C114 + C11123 * C48042) * C42866) *
               C47981 * C2691 -
           ((C11997 * C48042 + C11996 * C114) * C42866 +
            (C11605 * C48042 + C11604 * C114) * C42865 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C42864) *
               C47981 * C48087) *
              C48387 +
          (((C385 + C384) * C42864 + (C10947 + C10946) * C42865 +
            (C2338 * C114 + C2339 * C48042) * C42866) *
               C47981 * C48087 -
           ((C587 * C48042 + C586 * C114) * C42866 +
            (C10793 + C10792) * C42865 + (C175 + C174) * C42864) *
               C47981 * C2691) *
              C48380 +
          ((C184 * C42864 + (C10795 + C10794) * C42865 +
            (C591 * C114 + C592 * C48042) * C42866) *
               C47981 * C2691 -
           ((C2341 * C48042 + C2340 * C114) * C42866 +
            (C10951 + C10950) * C42865 + C394 * C42864) *
               C47981 * C48087) *
              C48367 +
          ((C722 * C42864 + (C11255 + C11254) * C42865 +
            ((C113 * C2317 + C48228 * C2318) * C114 +
             (C113 * C2319 + C48228 * C2320) * C48042) *
                C42866) *
               C47981 * C48087 -
           ((C596 * C48042 + C595 * C114) * C42866 +
            (C10797 + C10796) * C42865 + C185 * C42864) *
               C47981 * C2691) *
              C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C510 +
             (C113 * C123 + C48228 * C136) * C48382 - C11120 * C511 -
             C11121 * C48371 + C11122 * C512 + C11123 * C48345) *
                C42864 +
            (C11120 * C510 + C11121 * C48382 - C11122 * C511 - C11123 * C48371 +
             C12882 * C512 + C12883 * C48345) *
                C42865 +
            (C11122 * C510 + C11123 * C48382 - C12882 * C511 - C12883 * C48371 +
             C12884 * C512 + C12885 * C48345) *
                C42866) *
               C47981 * C2691 +
           ((C11604 * C511 -
             ((C113 * C319 + C48228 * C337) * C48382 +
              (C113 * C307 + C48228 * C320) * C510) +
             C11605 * C48371 - C11996 * C512 - C11997 * C48345) *
                C42864 +
            (C11996 * C511 - (C11605 * C48382 + C11604 * C510) +
             C11997 * C48371 - C13366 * C512 - C13367 * C48345) *
                C42865 +
            (C13366 * C511 - (C11997 * C48382 + C11996 * C510) +
             C13367 * C48371 - C44704 * C512 - C44705 * C48345) *
                C42866) *
               C47981 * C48087) *
              C2799 +
          (((C597 - (C555 + C554) + C598 - C599 - C600) * C42864 +
            (C11110 - (C11109 + C11108) + C11111 - C11112 - C11113) * C42865 +
            (C2476 * C511 - (C587 * C48382 + C586 * C510) + C2477 * C48371 -
             C12886 * C512 - C12887 * C48345) *
                C42866) *
               C47981 * C2691 +
           ((C2950 + C2949 - C2948 - C2951 + C2952 + C2953) * C42864 +
            (C13824 + C13823 - C13822 - C13825 + C13826 + C13827) * C42865 +
            (C2338 * C510 + C2339 * C48382 - C13090 * C511 - C13091 * C48371 +
             (C113 * C7250 + C48228 * C7253) * C512 +
             (C113 * C7254 + C48228 * C7256) * C48345) *
                C42866) *
               C47981 * C48087) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[203] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C831 +
             (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
             C11121 * C48129) *
                C42864 +
            (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
             C11123 * C48129) *
                C42865 +
            (C11122 * C831 + C11123 * C48311 - C12882 * C832 -
             C12883 * C48129) *
                C42866) *
               C47981 * C2691 +
           ((C11604 * C832 -
             ((C113 * C319 + C48228 * C337) * C48311 +
              (C113 * C307 + C48228 * C320) * C831) +
             C11605 * C48129) *
                C42864 +
            (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
             C11997 * C48129) *
                C42865 +
            (C13366 * C832 - (C11997 * C48311 + C11996 * C831) +
             C13367 * C48129) *
                C42866) *
               C47981 * C48087) *
              C48003 +
          (((C840 - (C839 + C838) + C841) * C42864 +
            (C11388 - (C11387 + C11386) + C11389) * C42865 +
            (C2476 * C832 - (C587 * C48311 + C586 * C831) + C2477 * C48129) *
                C42866) *
               C47981 * C2691 +
           ((C1037 + C1036 - C1059 - C1060) * C42864 +
            (C11598 + C11597 - C11596 - C11599) * C42865 +
            (C2338 * C831 + C2339 * C48311 - C13090 * C832 - C13091 * C48129) *
                C42866) *
               C47981 * C48087) *
              C48011 +
          ((C864 * C42864 + (C11392 + C11391 - C11390 - C11393) * C42865 +
            (C591 * C831 + C592 * C48311 - C2478 * C832 - C2479 * C48129) *
                C42866) *
               C47981 * C2691 +
           (C1066 * C42864 + (C11602 - (C11601 + C11600) + C11603) * C42865 +
            ((C113 * C2583 + C48228 * C2588) * C832 -
             (C2341 * C48311 + C2340 * C831) +
             (C113 * C2589 + C48228 * C2592) * C48129) *
                C42866) *
               C47981 * C48087) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[204] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48228 * C122) * C114 +
                      (C113 * C123 + C48228 * C136) * C48042) *
                         C42864 +
                     (C11120 * C114 + C11121 * C48042) * C42865 +
                     (C11122 * C114 + C11123 * C48042) * C42866) *
                        C47981 * C2691 -
                    ((C11997 * C48042 + C11996 * C114) * C42866 +
                     (C11605 * C48042 + C11604 * C114) * C42865 +
                     ((C113 * C319 + C48228 * C337) * C48042 +
                      (C113 * C307 + C48228 * C320) * C114) *
                         C42864) *
                        C47981 * C48087) *
                       C48387 +
                   (((C385 + C384) * C42864 + (C10947 + C10946) * C42865 +
                     (C2338 * C114 + C2339 * C48042) * C42866) *
                        C47981 * C48087 -
                    ((C587 * C48042 + C586 * C114) * C42866 +
                     (C10793 + C10792) * C42865 + (C175 + C174) * C42864) *
                        C47981 * C2691) *
                       C48380 +
                   ((C184 * C42864 + (C10795 + C10794) * C42865 +
                     (C591 * C114 + C592 * C48042) * C42866) *
                        C47981 * C2691 -
                    ((C2341 * C48042 + C2340 * C114) * C42866 +
                     (C10951 + C10950) * C42865 + C394 * C42864) *
                        C47981 * C48087) *
                       C48367 +
                   ((C722 * C42864 + (C11255 + C11254) * C42865 +
                     ((C113 * C2317 + C48228 * C2318) * C114 +
                      (C113 * C2319 + C48228 * C2320) * C48042) *
                         C42866) *
                        C47981 * C48087 -
                    ((C596 * C48042 + C595 * C114) * C42866 +
                     (C10797 + C10796) * C42865 + C185 * C42864) *
                        C47981 * C2691) *
                       C48346)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48228 * C122) * C114 +
                      (C113 * C123 + C48228 * C136) * C48042) *
                         C42864 +
                     (C11120 * C114 + C11121 * C48042) * C42865 +
                     (C11122 * C114 + C11123 * C48042) * C42866) *
                        C47981 * C48388 -
                    ((C11997 * C48042 + C11996 * C114) * C42866 +
                     (C11605 * C48042 + C11604 * C114) * C42865 +
                     ((C113 * C319 + C48228 * C337) * C48042 +
                      (C113 * C307 + C48228 * C320) * C114) *
                         C42864) *
                        C47981 * C48384 +
                    (((C113 * C308 + C48228 * C321) * C114 +
                      (C113 * C322 + C48228 * C338) * C48042) *
                         C42864 +
                     (C11998 * C114 + C11999 * C48042) * C42865 +
                     (C12000 * C114 + C12001 * C48042) * C42866) *
                        C47981 * C48374 -
                    ((C44065 * C48042 + C44064 * C114) * C42866 +
                     (C12475 * C48042 + C12474 * C114) * C42865 +
                     ((C113 * C1261 + C48228 * C1271) * C48042 +
                      (C113 * C1253 + C48228 * C1262) * C114) *
                         C42864) *
                        C47981 * C48352) *
                       C2799 +
                   (((C385 + C384) * C42864 + (C10947 + C10946) * C42865 +
                     (C2338 * C114 + C2339 * C48042) * C42866) *
                        C47981 * C48384 -
                    ((C587 * C48042 + C586 * C114) * C42866 +
                     (C10793 + C10792) * C42865 + (C175 + C174) * C42864) *
                        C47981 * C48388 -
                    ((C12003 * C48042 + C12002 * C114) * C42866 +
                     (C10949 + C10948) * C42865 + (C387 + C386) * C42864) *
                        C47981 * C48374 +
                    ((C1545 + C1544) * C42864 + (C12141 + C12140) * C42865 +
                     ((C113 * C6382 + C48228 * C6385) * C114 +
                      (C113 * C6386 + C48228 * C6388) * C48042) *
                         C42866) *
                        C47981 * C48352) *
                       C48008)) /
                     (p * q * std::sqrt(p + q));
    d2ee[205] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3467 +
             (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
             C11121 * C48129) *
                C42864 +
            (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
             C11123 * C48129) *
                C42865 +
            (C11122 * C3467 + C11123 * C3465 - C12882 * C3468 -
             C12883 * C48129) *
                C42866) *
               C47981 * C48083 +
           ((C11604 * C3468 -
             ((C113 * C319 + C48228 * C337) * C3465 +
              (C113 * C307 + C48228 * C320) * C3467) +
             C11605 * C48129) *
                C42864 +
            (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
             C11997 * C48129) *
                C42865 +
            (C13366 * C3468 - (C11997 * C3465 + C11996 * C3467) +
             C13367 * C48129) *
                C42866) *
               C47981 * C48090 +
           (((C113 * C308 + C48228 * C321) * C3467 +
             (C113 * C322 + C48228 * C338) * C3465 - C11998 * C3468 -
             C11999 * C48129) *
                C42864 +
            (C11998 * C3467 + C11999 * C3465 - C12000 * C3468 -
             C12001 * C48129) *
                C42865 +
            (C12000 * C3467 + C12001 * C3465 - C43716 * C3468 -
             C43717 * C48129) *
                C42866) *
               C47981 * C3071) *
              C48296 +
          (((C3472 - (C3471 + C3470) + C3473) * C42864 +
            (C14494 - (C14493 + C14492) + C14495) * C42865 +
            (C2476 * C3468 - (C587 * C3465 + C586 * C3467) + C2477 * C48129) *
                C42866) *
               C47981 * C48083 +
           ((C3642 + C3641 - C3640 - C3643) * C42864 +
            (C14700 + C14699 - C14698 - C14701) * C42865 +
            (C2338 * C3467 + C2339 * C3465 - C13090 * C3468 - C13091 * C48129) *
                C42866) *
               C47981 * C48090 +
           ((C3650 - (C3649 + C3648) + C3651) * C42864 +
            (C14704 - (C14703 + C14702) + C14705) * C42865 +
            ((C113 * C7736 + C48228 * C7739) * C3468 -
             (C12003 * C3465 + C12002 * C3467) +
             (C113 * C7740 + C48228 * C7742) * C48129) *
                C42866) *
               C47981 * C3071) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[206] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C47030 +
            (C113 * C123 + C48228 * C136) * C48125 - C11120 * C47022 -
            C11121 * C48132 + C11122 * C47036 + C11123 * C4043) *
               C42864 +
           (C11120 * C47030 + C11121 * C48125 - C11122 * C47022 -
            C11123 * C48132 + C12882 * C47036 + C12883 * C4043) *
               C42865 +
           (C11122 * C47030 + C11123 * C48125 - C12882 * C47022 -
            C12883 * C48132 + C12884 * C47036 + C12885 * C4043) *
               C42866) *
              C47981 * C48083 +
          ((C11604 * C47022 -
            ((C113 * C319 + C48228 * C337) * C48125 +
             (C113 * C307 + C48228 * C320) * C47030) +
            C11605 * C48132 - C11996 * C47036 - C11997 * C4043) *
               C42864 +
           (C11996 * C47022 - (C11605 * C48125 + C11604 * C47030) +
            C11997 * C48132 - C13366 * C47036 - C13367 * C4043) *
               C42865 +
           (C13366 * C47022 - (C11997 * C48125 + C11996 * C47030) +
            C13367 * C48132 - C44704 * C47036 - C44705 * C4043) *
               C42866) *
              C47981 * C48090 +
          (((C113 * C308 + C48228 * C321) * C47030 +
            (C113 * C322 + C48228 * C338) * C48125 - C11998 * C47022 -
            C11999 * C48132 + C12000 * C47036 + C12001 * C4043) *
               C42864 +
           (C11998 * C47030 + C11999 * C48125 - C12000 * C47022 -
            C12001 * C48132 + C43716 * C47036 + C43717 * C4043) *
               C42865 +
           (C12000 * C47030 + C12001 * C48125 - C43716 * C47022 -
            C43717 * C48132 + (C113 * C23630 + C48228 * C23631) * C47036 +
            (C113 * C23632 + C48228 * C23633) * C4043) *
               C42866) *
              C47981 * C3071) *
         C47998) /
        (p * q * std::sqrt(p + q));
    d2ee[207] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C3467 +
            (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
            C11121 * C48129) *
               C42864 +
           (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
            C11123 * C48129) *
               C42865 +
           (C11122 * C3467 + C11123 * C3465 - C12882 * C3468 -
            C12883 * C48129) *
               C42866) *
              C47981 * C48388 +
          ((C11604 * C3468 -
            ((C113 * C319 + C48228 * C337) * C3465 +
             (C113 * C307 + C48228 * C320) * C3467) +
            C11605 * C48129) *
               C42864 +
           (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
            C11997 * C48129) *
               C42865 +
           (C13366 * C3468 - (C11997 * C3465 + C11996 * C3467) +
            C13367 * C48129) *
               C42866) *
              C47981 * C48384 +
          (((C113 * C308 + C48228 * C321) * C3467 +
            (C113 * C322 + C48228 * C338) * C3465 - C11998 * C3468 -
            C11999 * C48129) *
               C42864 +
           (C11998 * C3467 + C11999 * C3465 - C12000 * C3468 -
            C12001 * C48129) *
               C42865 +
           (C12000 * C3467 + C12001 * C3465 - C43716 * C3468 -
            C43717 * C48129) *
               C42866) *
              C47981 * C48374 +
          ((C12474 * C3468 -
            ((C113 * C1261 + C48228 * C1271) * C3465 +
             (C113 * C1253 + C48228 * C1262) * C3467) +
            C12475 * C48129) *
               C42864 +
           (C44064 * C3468 - (C12475 * C3465 + C12474 * C3467) +
            C44065 * C48129) *
               C42865 +
           ((C113 * C23976 + C48228 * C23977) * C3468 -
            (C44065 * C3465 + C44064 * C3467) +
            (C113 * C23978 + C48228 * C23979) * C48129) *
               C42866) *
              C47981 * C48352) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3467 +
             (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
             C11121 * C48129) *
                C42864 +
            (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
             C11123 * C48129) *
                C42865 +
            (C11122 * C3467 + C11123 * C3465 - C12882 * C3468 -
             C12883 * C48129) *
                C42866) *
               C47981 * C2691 +
           ((C11604 * C3468 -
             ((C113 * C319 + C48228 * C337) * C3465 +
              (C113 * C307 + C48228 * C320) * C3467) +
             C11605 * C48129) *
                C42864 +
            (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
             C11997 * C48129) *
                C42865 +
            (C13366 * C3468 - (C11997 * C3465 + C11996 * C3467) +
             C13367 * C48129) *
                C42866) *
               C47981 * C48087) *
              C48378 +
          (((C3472 - (C3471 + C3470) + C3473) * C42864 +
            (C14494 - (C14493 + C14492) + C14495) * C42865 +
            (C2476 * C3468 - (C587 * C3465 + C586 * C3467) + C2477 * C48129) *
                C42866) *
               C47981 * C2691 +
           ((C3642 + C3641 - C3640 - C3643) * C42864 +
            (C14700 + C14699 - C14698 - C14701) * C42865 +
            (C2338 * C3467 + C2339 * C3465 - C13090 * C3468 - C13091 * C48129) *
                C42866) *
               C47981 * C48087) *
              C48365 +
          ((C3490 * C42864 + (C14498 + C14497 - C14496 - C14499) * C42865 +
            (C591 * C3467 + C592 * C3465 - C2478 * C3468 - C2479 * C48129) *
                C42866) *
               C47981 * C2691 +
           (C3930 * C42864 + (C15040 - (C15039 + C15038) + C15041) * C42865 +
            ((C113 * C2583 + C48228 * C2588) * C3468 -
             (C2341 * C3465 + C2340 * C3467) +
             (C113 * C2589 + C48228 * C2592) * C48129) *
                C42866) *
               C47981 * C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C3757 +
            (C113 * C123 + C48228 * C136) * C48389 - C11120 * C3758 -
            C11121 * C48386 + C11122 * C3759 + C11123 * C48377 -
            C12882 * C3760 - C12883 * C48358) *
               C42864 +
           (C11120 * C3757 + C11121 * C48389 - C11122 * C3758 -
            C11123 * C48386 + C12882 * C3759 + C12883 * C48377 -
            C12884 * C3760 - C12885 * C48358) *
               C42865 +
           (C11122 * C3757 + C11123 * C48389 - C12882 * C3758 -
            C12883 * C48386 + C12884 * C3759 + C12885 * C48377 -
            C44356 * C3760 - C44357 * C48358) *
               C42866) *
              C47981 * C2691 +
          ((C11604 * C3758 -
            ((C113 * C319 + C48228 * C337) * C48389 +
             (C113 * C307 + C48228 * C320) * C3757) +
            C11605 * C48386 - C11996 * C3759 - C11997 * C48377 +
            C13366 * C3760 + C13367 * C48358) *
               C42864 +
           (C11996 * C3758 - (C11605 * C48389 + C11604 * C3757) +
            C11997 * C48386 - C13366 * C3759 - C13367 * C48377 +
            C44704 * C3760 + C44705 * C48358) *
               C42865 +
           (C13366 * C3758 - (C11997 * C48389 + C11996 * C3757) +
            C13367 * C48386 - C44704 * C3759 - C44705 * C48377 +
            (C113 * C28326 + C48228 * C28327) * C3760 +
            (C113 * C28328 + C48228 * C28329) * C48358) *
               C42866) *
              C47981 * C48087) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[208] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C47030 +
             (C113 * C123 + C48228 * C136) * C48125 - C11120 * C47022 -
             C11121 * C48132 + C11122 * C47036 + C11123 * C4043) *
                C42864 +
            (C11120 * C47030 + C11121 * C48125 - C11122 * C47022 -
             C11123 * C48132 + C12882 * C47036 + C12883 * C4043) *
                C42865 +
            (C11122 * C47030 + C11123 * C48125 - C12882 * C47022 -
             C12883 * C48132 + C12884 * C47036 + C12885 * C4043) *
                C42866) *
               C47981 * C2691 +
           ((C11604 * C47022 -
             ((C113 * C319 + C48228 * C337) * C48125 +
              (C113 * C307 + C48228 * C320) * C47030) +
             C11605 * C48132 - C11996 * C47036 - C11997 * C4043) *
                C42864 +
            (C11996 * C47022 - (C11605 * C48125 + C11604 * C47030) +
             C11997 * C48132 - C13366 * C47036 - C13367 * C4043) *
                C42865 +
            (C13366 * C47022 - (C11997 * C48125 + C11996 * C47030) +
             C13367 * C48132 - C44704 * C47036 - C44705 * C4043) *
                C42866) *
               C47981 * C48087) *
              C48296 +
          (((C4050 - (C4049 + C4048) + C4051 - C4052 - C4053) * C42864 +
            (C15190 - (C15189 + C15188) + C15191 - C15192 - C15193) * C42865 +
            (C2476 * C47022 - (C587 * C48125 + C586 * C47030) + C2477 * C48132 -
             C12886 * C47036 - C12887 * C4043) *
                C42866) *
               C47981 * C2691 +
           ((C4220 + C4219 - C4218 - C4221 + C4222 + C4223) * C42864 +
            (C15396 + C15395 - C15394 - C15397 + C15398 + C15399) * C42865 +
            (C2338 * C47030 + C2339 * C48125 - C13090 * C47022 -
             C13091 * C48132 + (C113 * C7250 + C48228 * C7253) * C47036 +
             (C113 * C7254 + C48228 * C7256) * C4043) *
                C42866) *
               C47981 * C48087) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[209] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3467 +
             (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
             C11121 * C48129) *
                C42864 +
            (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
             C11123 * C48129) *
                C42865 +
            (C11122 * C3467 + C11123 * C3465 - C12882 * C3468 -
             C12883 * C48129) *
                C42866) *
               C47981 * C2691 +
           ((C11604 * C3468 -
             ((C113 * C319 + C48228 * C337) * C3465 +
              (C113 * C307 + C48228 * C320) * C3467) +
             C11605 * C48129) *
                C42864 +
            (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
             C11997 * C48129) *
                C42865 +
            (C13366 * C3468 - (C11997 * C3465 + C11996 * C3467) +
             C13367 * C48129) *
                C42866) *
               C47981 * C48087) *
              C48378 +
          (((C3472 - (C3471 + C3470) + C3473) * C42864 +
            (C14494 - (C14493 + C14492) + C14495) * C42865 +
            (C2476 * C3468 - (C587 * C3465 + C586 * C3467) + C2477 * C48129) *
                C42866) *
               C47981 * C2691 +
           ((C3642 + C3641 - C3640 - C3643) * C42864 +
            (C14700 + C14699 - C14698 - C14701) * C42865 +
            (C2338 * C3467 + C2339 * C3465 - C13090 * C3468 - C13091 * C48129) *
                C42866) *
               C47981 * C48087) *
              C48365 +
          ((C3490 * C42864 + (C14498 + C14497 - C14496 - C14499) * C42865 +
            (C591 * C3467 + C592 * C3465 - C2478 * C3468 - C2479 * C48129) *
                C42866) *
               C47981 * C2691 +
           (C3930 * C42864 + (C15040 - (C15039 + C15038) + C15041) * C42865 +
            ((C113 * C2583 + C48228 * C2588) * C3468 -
             (C2341 * C3465 + C2340 * C3467) +
             (C113 * C2589 + C48228 * C2592) * C48129) *
                C42866) *
               C47981 * C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C3467 +
            (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
            C11121 * C48129) *
               C42864 +
           (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
            C11123 * C48129) *
               C42865 +
           (C11122 * C3467 + C11123 * C3465 - C12882 * C3468 -
            C12883 * C48129) *
               C42866) *
              C47981 * C48388 +
          ((C11604 * C3468 -
            ((C113 * C319 + C48228 * C337) * C3465 +
             (C113 * C307 + C48228 * C320) * C3467) +
            C11605 * C48129) *
               C42864 +
           (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
            C11997 * C48129) *
               C42865 +
           (C13366 * C3468 - (C11997 * C3465 + C11996 * C3467) +
            C13367 * C48129) *
               C42866) *
              C47981 * C48384 +
          (((C113 * C308 + C48228 * C321) * C3467 +
            (C113 * C322 + C48228 * C338) * C3465 - C11998 * C3468 -
            C11999 * C48129) *
               C42864 +
           (C11998 * C3467 + C11999 * C3465 - C12000 * C3468 -
            C12001 * C48129) *
               C42865 +
           (C12000 * C3467 + C12001 * C3465 - C43716 * C3468 -
            C43717 * C48129) *
               C42866) *
              C47981 * C48374 +
          ((C12474 * C3468 -
            ((C113 * C1261 + C48228 * C1271) * C3465 +
             (C113 * C1253 + C48228 * C1262) * C3467) +
            C12475 * C48129) *
               C42864 +
           (C44064 * C3468 - (C12475 * C3465 + C12474 * C3467) +
            C44065 * C48129) *
               C42865 +
           ((C113 * C23976 + C48228 * C23977) * C3468 -
            (C44065 * C3465 + C44064 * C3467) +
            (C113 * C23978 + C48228 * C23979) * C48129) *
               C42866) *
              C47981 * C48352) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[210] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C42864 +
            (C11120 * C114 + C11121 * C48042) * C42865 +
            (C11122 * C114 + C11123 * C48042) * C42866) *
               C47981 * C1519 -
           ((C11997 * C48042 + C11996 * C114) * C42866 +
            (C11605 * C48042 + C11604 * C114) * C42865 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C42864) *
               C47981 * C1520 +
           (((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C42864 +
            (C11998 * C114 + C11999 * C48042) * C42865 +
            (C12000 * C114 + C12001 * C48042) * C42866) *
               C47981 * C1521 -
           (((C113 * C6384 + C48228 * C6387) * C48042 +
             (C113 * C6381 + C48228 * C6383) * C114) *
                C42866 +
            (C12475 * C48042 + C12474 * C114) * C42865 +
            ((C113 * C1261 + C48228 * C1271) * C48042 +
             (C113 * C1253 + C48228 * C1262) * C114) *
                C42864) *
               C47981 * C48352) *
              C48296 +
          (((C385 + C384) * C42864 + (C10947 + C10946) * C42865 +
            (C2338 * C114 + C2339 * C48042) * C42866) *
               C47981 * C1520 -
           ((C587 * C48042 + C586 * C114) * C42866 +
            (C10793 + C10792) * C42865 + (C175 + C174) * C42864) *
               C47981 * C1519 -
           ((C12003 * C48042 + C12002 * C114) * C42866 +
            (C10949 + C10948) * C42865 + (C387 + C386) * C42864) *
               C47981 * C1521 +
           ((C1545 + C1544) * C42864 + (C12141 + C12140) * C42865 +
            ((C113 * C6382 + C48228 * C6385) * C114 +
             (C113 * C6386 + C48228 * C6388) * C48042) *
                C42866) *
               C47981 * C48352) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C42864 +
            (C11120 * C114 + C11121 * C48042) * C42865 +
            (C11122 * C114 + C11123 * C48042) * C42866) *
               C47981 * C48310 -
           ((C11997 * C48042 + C11996 * C114) * C42866 +
            (C11605 * C48042 + C11604 * C114) * C42865 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C42864) *
               C47981 * C48087) *
              C713 +
          (((C385 + C384) * C42864 + (C10947 + C10946) * C42865 +
            (C2338 * C114 + C2339 * C48042) * C42866) *
               C47981 * C48087 -
           ((C587 * C48042 + C586 * C114) * C42866 +
            (C10793 + C10792) * C42865 + (C175 + C174) * C42864) *
               C47981 * C48310) *
              C714 +
          ((C184 * C42864 + (C10795 + C10794) * C42865 +
            (C591 * C114 + C592 * C48042) * C42866) *
               C47981 * C48310 -
           ((C2341 * C48042 + C2340 * C114) * C42866 +
            (C10951 + C10950) * C42865 + C394 * C42864) *
               C47981 * C48087) *
              C715 +
          ((C722 * C42864 + (C11255 + C11254) * C42865 +
            ((C113 * C2317 + C48228 * C2318) * C114 +
             (C113 * C2319 + C48228 * C2320) * C48042) *
                C42866) *
               C47981 * C48087 -
           ((C596 * C48042 + C595 * C114) * C42866 +
            (C10797 + C10796) * C42865 + C185 * C42864) *
               C47981 * C48310) *
              C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C1938 +
             (C113 * C123 + C48228 * C136) * C1935 - C11120 * C1939 -
             C11121 * C1936 + C11122 * C1940 + C11123 * C48345) *
                C42864 +
            (C11120 * C1938 + C11121 * C1935 - C11122 * C1939 - C11123 * C1936 +
             C12882 * C1940 + C12883 * C48345) *
                C42865 +
            (C11122 * C1938 + C11123 * C1935 - C12882 * C1939 - C12883 * C1936 +
             C12884 * C1940 + C12885 * C48345) *
                C42866) *
               C47981 * C48310 +
           ((C11604 * C1939 -
             ((C113 * C319 + C48228 * C337) * C1935 +
              (C113 * C307 + C48228 * C320) * C1938) +
             C11605 * C1936 - C11996 * C1940 - C11997 * C48345) *
                C42864 +
            (C11996 * C1939 - (C11605 * C1935 + C11604 * C1938) +
             C11997 * C1936 - C13366 * C1940 - C13367 * C48345) *
                C42865 +
            (C13366 * C1939 - (C11997 * C1935 + C11996 * C1938) +
             C13367 * C1936 - (C113 * C7249 + C48228 * C7251) * C1940 -
             (C113 * C7252 + C48228 * C7255) * C48345) *
                C42866) *
               C47981 * C48087) *
              C48296 +
          (((C1944 - (C1943 + C1942) + C1945 - C1946 - C1947) * C42864 +
            (C12624 - (C12623 + C12622) + C12625 - C12626 - C12627) * C42865 +
            (C2476 * C1939 - (C587 * C1935 + C586 * C1938) + C2477 * C1936 -
             C12886 * C1940 - C12887 * C48345) *
                C42866) *
               C47981 * C48310 +
           ((C2324 + C2323 - C2322 - C2325 + C2342 + C2343) * C42864 +
            (C13084 + C13083 - C13082 - C13085 + C13092 + C13093) * C42865 +
            (C2338 * C1938 + C2339 * C1935 - C13090 * C1939 - C13091 * C1936 +
             (C113 * C7250 + C48228 * C7253) * C1940 +
             (C113 * C7254 + C48228 * C7256) * C48345) *
                C42866) *
               C47981 * C48087) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[211] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C831 +
            (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
            C11121 * C48129) *
               C42864 +
           (C11120 * C831 + C11121 * C48311 - C11122 * C832 - C11123 * C48129) *
               C42865 +
           (C11122 * C831 + C11123 * C48311 - C12882 * C832 - C12883 * C48129) *
               C42866) *
              C47981 * C1519 +
          ((C11604 * C832 -
            ((C113 * C319 + C48228 * C337) * C48311 +
             (C113 * C307 + C48228 * C320) * C831) +
            C11605 * C48129) *
               C42864 +
           (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
            C11997 * C48129) *
               C42865 +
           (C13366 * C832 - (C11997 * C48311 + C11996 * C831) +
            C13367 * C48129) *
               C42866) *
              C47981 * C1520 +
          (((C113 * C308 + C48228 * C321) * C831 +
            (C113 * C322 + C48228 * C338) * C48311 - C11998 * C832 -
            C11999 * C48129) *
               C42864 +
           (C11998 * C831 + C11999 * C48311 - C12000 * C832 - C12001 * C48129) *
               C42865 +
           (C12000 * C831 + C12001 * C48311 - C43716 * C832 - C43717 * C48129) *
               C42866) *
              C47981 * C1521 +
          ((C12474 * C832 -
            ((C113 * C1261 + C48228 * C1271) * C48311 +
             (C113 * C1253 + C48228 * C1262) * C831) +
            C12475 * C48129) *
               C42864 +
           (C44064 * C832 - (C12475 * C48311 + C12474 * C831) +
            C44065 * C48129) *
               C42865 +
           ((C113 * C23976 + C48228 * C23977) * C832 -
            (C44065 * C48311 + C44064 * C831) +
            (C113 * C23978 + C48228 * C23979) * C48129) *
               C42866) *
              C47981 * C48352) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C831 +
             (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
             C11121 * C48129) *
                C42864 +
            (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
             C11123 * C48129) *
                C42865 +
            (C11122 * C831 + C11123 * C48311 - C12882 * C832 -
             C12883 * C48129) *
                C42866) *
               C47981 * C48310 +
           ((C11604 * C832 -
             ((C113 * C319 + C48228 * C337) * C48311 +
              (C113 * C307 + C48228 * C320) * C831) +
             C11605 * C48129) *
                C42864 +
            (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
             C11997 * C48129) *
                C42865 +
            (C13366 * C832 - (C11997 * C48311 + C11996 * C831) +
             C13367 * C48129) *
                C42866) *
               C47981 * C48087) *
              C302 +
          (((C840 - (C839 + C838) + C841) * C42864 +
            (C11388 - (C11387 + C11386) + C11389) * C42865 +
            (C2476 * C832 - (C587 * C48311 + C586 * C831) + C2477 * C48129) *
                C42866) *
               C47981 * C48310 +
           ((C1037 + C1036 - C1059 - C1060) * C42864 +
            (C11598 + C11597 - C11596 - C11599) * C42865 +
            (C2338 * C831 + C2339 * C48311 - C13090 * C832 - C13091 * C48129) *
                C42866) *
               C47981 * C48087) *
              C303 +
          ((C864 * C42864 + (C11392 + C11391 - C11390 - C11393) * C42865 +
            (C591 * C831 + C592 * C48311 - C2478 * C832 - C2479 * C48129) *
                C42866) *
               C47981 * C48310 +
           (C1066 * C42864 + (C11602 - (C11601 + C11600) + C11603) * C42865 +
            ((C113 * C2583 + C48228 * C2588) * C832 -
             (C2341 * C48311 + C2340 * C831) +
             (C113 * C2589 + C48228 * C2592) * C48129) *
                C42866) *
               C47981 * C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C2447 +
            (C113 * C123 + C48228 * C136) * C2443 - C11120 * C2448 -
            C11121 * C2444 + C11122 * C2449 + C11123 * C2445 - C12882 * C2450 -
            C12883 * C48358) *
               C42864 +
           (C11120 * C2447 + C11121 * C2443 - C11122 * C2448 - C11123 * C2444 +
            C12882 * C2449 + C12883 * C2445 - C12884 * C2450 -
            C12885 * C48358) *
               C42865 +
           (C11122 * C2447 + C11123 * C2443 - C12882 * C2448 - C12883 * C2444 +
            C12884 * C2449 + C12885 * C2445 - C44356 * C2450 -
            C44357 * C48358) *
               C42866) *
              C47981 * C48310 +
          ((C11604 * C2448 -
            ((C113 * C319 + C48228 * C337) * C2443 +
             (C113 * C307 + C48228 * C320) * C2447) +
            C11605 * C2444 - C11996 * C2449 - C11997 * C2445 + C13366 * C2450 +
            C13367 * C48358) *
               C42864 +
           (C11996 * C2448 - (C11605 * C2443 + C11604 * C2447) +
            C11997 * C2444 - C13366 * C2449 - C13367 * C2445 + C44704 * C2450 +
            C44705 * C48358) *
               C42865 +
           (C13366 * C2448 - (C11997 * C2443 + C11996 * C2447) +
            C13367 * C2444 - C44704 * C2449 - C44705 * C2445 +
            (C113 * C28326 + C48228 * C28327) * C2450 +
            (C113 * C28328 + C48228 * C28329) * C48358) *
               C42866) *
              C47981 * C48087) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[212] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C48228 * C122) * C114 +
                (C113 * C123 + C48228 * C136) * C48042) *
                   C42864 +
               (C11120 * C114 + C11121 * C48042) * C42865 +
               (C11122 * C114 + C11123 * C48042) * C42866) *
                  C47981 * C48025 * C108 -
              ((C587 * C48042 + C586 * C114) * C42866 +
               (C10793 + C10792) * C42865 + (C175 + C174) * C42864) *
                  C47981 * C48025 * C109 +
              (C184 * C42864 + (C10795 + C10794) * C42865 +
               (C591 * C114 + C592 * C48042) * C42866) *
                  C47981 * C48025 * C110 -
              ((C596 * C48042 + C595 * C114) * C42866 +
               (C10797 + C10796) * C42865 + C185 * C42864) *
                  C47981 * C48025 * C111 +
              (C186 * C42864 + (C10799 + C10798) * C42865 +
               ((C113 * C522 + C48228 * C541) * C114 +
                (C113 * C542 + C48228 * C552) * C48042) *
                   C42866) *
                  C47981 * C48025 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48228 * C122) * C114 +
                 (C113 * C123 + C48228 * C136) * C48042) *
                    C42864 +
                (C11120 * C114 + C11121 * C48042) * C42865 +
                (C11122 * C114 + C11123 * C48042) * C42866) *
                   C47981 * C48381 -
               ((C11997 * C48042 + C11996 * C114) * C42866 +
                (C11605 * C48042 + C11604 * C114) * C42865 +
                ((C113 * C319 + C48228 * C337) * C48042 +
                 (C113 * C307 + C48228 * C320) * C114) *
                    C42864) *
                   C47981 * C48369 +
               (((C113 * C308 + C48228 * C321) * C114 +
                 (C113 * C322 + C48228 * C338) * C48042) *
                    C42864 +
                (C11998 * C114 + C11999 * C48042) * C42865 +
                (C12000 * C114 + C12001 * C48042) * C42866) *
                   C47981 * C48342) *
                  C302 +
              (((C385 + C384) * C42864 + (C10947 + C10946) * C42865 +
                (C2338 * C114 + C2339 * C48042) * C42866) *
                   C47981 * C48369 -
               ((C587 * C48042 + C586 * C114) * C42866 +
                (C10793 + C10792) * C42865 + (C175 + C174) * C42864) *
                   C47981 * C48381 -
               ((C12003 * C48042 + C12002 * C114) * C42866 +
                (C10949 + C10948) * C42865 + (C387 + C386) * C42864) *
                   C47981 * C48342) *
                  C303 +
              ((C184 * C42864 + (C10795 + C10794) * C42865 +
                (C591 * C114 + C592 * C48042) * C42866) *
                   C47981 * C48381 -
               ((C2341 * C48042 + C2340 * C114) * C42866 +
                (C10951 + C10950) * C42865 + C394 * C42864) *
                   C47981 * C48369 +
               (C395 * C42864 + (C10953 + C10952) * C42865 +
                ((C113 * C1393 + C48228 * C1410) * C114 +
                 (C113 * C1411 + C48228 * C1420) * C48042) *
                    C42866) *
                   C47981 * C48342) *
                  C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C510 +
            (C113 * C123 + C48228 * C136) * C48382 - C11120 * C511 -
            C11121 * C48371 + C11122 * C512 + C11123 * C48345) *
               C42864 +
           (C11120 * C510 + C11121 * C48382 - C11122 * C511 - C11123 * C48371 +
            C12882 * C512 + C12883 * C48345) *
               C42865 +
           (C11122 * C510 + C11123 * C48382 - C12882 * C511 - C12883 * C48371 +
            C12884 * C512 + C12885 * C48345) *
               C42866) *
              C47981 * C48025 * C302 +
          ((C597 - (C555 + C554) + C598 - C599 - C600) * C42864 +
           (C11110 - (C11109 + C11108) + C11111 - C11112 - C11113) * C42865 +
           (C2476 * C511 - (C587 * C48382 + C586 * C510) + C2477 * C48371 -
            C12886 * C512 - C12887 * C48345) *
               C42866) *
              C47981 * C48025 * C303 +
          (C612 * C42864 +
           (C11116 + C11115 - C11114 - C11117 + C11118 + C11119) * C42865 +
           (C591 * C510 + C592 * C48382 - C2478 * C511 - C2479 * C48371 +
            (C113 * C2152 + C48228 * C2163) * C512 +
            (C113 * C2164 + C48228 * C2170) * C48345) *
               C42866) *
              C47981 * C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C42864 +
            (C11120 * C114 + C11121 * C48042) * C42865 +
            (C11122 * C114 + C11123 * C48042) * C42866) *
               C47981 * C1177 -
           ((C11997 * C48042 + C11996 * C114) * C42866 +
            (C11605 * C48042 + C11604 * C114) * C42865 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C42864) *
               C47981 * C1178 +
           (((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C42864 +
            (C11998 * C114 + C11999 * C48042) * C42865 +
            (C12000 * C114 + C12001 * C48042) * C42866) *
               C47981 * C48342) *
              C48378 +
          (((C385 + C384) * C42864 + (C10947 + C10946) * C42865 +
            (C2338 * C114 + C2339 * C48042) * C42866) *
               C47981 * C1178 -
           ((C587 * C48042 + C586 * C114) * C42866 +
            (C10793 + C10792) * C42865 + (C175 + C174) * C42864) *
               C47981 * C1177 -
           ((C12003 * C48042 + C12002 * C114) * C42866 +
            (C10949 + C10948) * C42865 + (C387 + C386) * C42864) *
               C47981 * C48342) *
              C48365 +
          ((C184 * C42864 + (C10795 + C10794) * C42865 +
            (C591 * C114 + C592 * C48042) * C42866) *
               C47981 * C1177 -
           ((C2341 * C48042 + C2340 * C114) * C42866 +
            (C10951 + C10950) * C42865 + C394 * C42864) *
               C47981 * C1178 +
           (C395 * C42864 + (C10953 + C10952) * C42865 +
            ((C113 * C1393 + C48228 * C1410) * C114 +
             (C113 * C1411 + C48228 * C1420) * C48042) *
                C42866) *
               C47981 * C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C114 +
            (C113 * C123 + C48228 * C136) * C48042) *
               C42864 +
           (C11120 * C114 + C11121 * C48042) * C42865 +
           (C11122 * C114 + C11123 * C48042) * C42866) *
              C47981 * C1245 -
          ((C11997 * C48042 + C11996 * C114) * C42866 +
           (C11605 * C48042 + C11604 * C114) * C42865 +
           ((C113 * C319 + C48228 * C337) * C48042 +
            (C113 * C307 + C48228 * C320) * C114) *
               C42864) *
              C47981 * C1246 +
          (((C113 * C308 + C48228 * C321) * C114 +
            (C113 * C322 + C48228 * C338) * C48042) *
               C42864 +
           (C11998 * C114 + C11999 * C48042) * C42865 +
           (C12000 * C114 + C12001 * C48042) * C42866) *
              C47981 * C1247 -
          (((C113 * C6384 + C48228 * C6387) * C48042 +
            (C113 * C6381 + C48228 * C6383) * C114) *
               C42866 +
           (C12475 * C48042 + C12474 * C114) * C42865 +
           ((C113 * C1261 + C48228 * C1271) * C48042 +
            (C113 * C1253 + C48228 * C1262) * C114) *
               C42864) *
              C47981 * C1248 +
          (((C113 * C1254 + C48228 * C1263) * C114 +
            (C113 * C1264 + C48228 * C1272) * C48042) *
               C42864 +
           ((C113 * C6867 + C48228 * C6869) * C114 +
            (C113 * C6870 + C48228 * C6873) * C48042) *
               C42865 +
           ((C113 * C22998 + C48228 * C22999) * C114 +
            (C113 * C23000 + C48228 * C23001) * C48042) *
               C42866) *
              C47981 * C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C510 +
            (C113 * C123 + C48228 * C136) * C48382 - C11120 * C511 -
            C11121 * C48371 + C11122 * C512 + C11123 * C48345) *
               C42864 +
           (C11120 * C510 + C11121 * C48382 - C11122 * C511 - C11123 * C48371 +
            C12882 * C512 + C12883 * C48345) *
               C42865 +
           (C11122 * C510 + C11123 * C48382 - C12882 * C511 - C12883 * C48371 +
            C12884 * C512 + C12885 * C48345) *
               C42866) *
              C47981 * C1177 +
          ((C11604 * C511 -
            ((C113 * C319 + C48228 * C337) * C48382 +
             (C113 * C307 + C48228 * C320) * C510) +
            C11605 * C48371 - C11996 * C512 - C11997 * C48345) *
               C42864 +
           (C11996 * C511 - (C11605 * C48382 + C11604 * C510) +
            C11997 * C48371 - C13366 * C512 - C13367 * C48345) *
               C42865 +
           (C13366 * C511 - (C11997 * C48382 + C11996 * C510) +
            C13367 * C48371 - (C113 * C7249 + C48228 * C7251) * C512 -
            (C113 * C7252 + C48228 * C7255) * C48345) *
               C42866) *
              C47981 * C1178 +
          (((C113 * C308 + C48228 * C321) * C510 +
            (C113 * C322 + C48228 * C338) * C48382 - C11998 * C511 -
            C11999 * C48371 + C12000 * C512 + C12001 * C48345) *
               C42864 +
           (C11998 * C510 + C11999 * C48382 - C12000 * C511 - C12001 * C48371 +
            C43716 * C512 + C43717 * C48345) *
               C42865 +
           (C12000 * C510 + C12001 * C48382 - C43716 * C511 - C43717 * C48371 +
            (C113 * C23630 + C48228 * C23631) * C512 +
            (C113 * C23632 + C48228 * C23633) * C48345) *
               C42866) *
              C47981 * C48342) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C1938 +
            (C113 * C123 + C48228 * C136) * C1935 - C11120 * C1939 -
            C11121 * C1936 + C11122 * C1940 + C11123 * C48345) *
               C42864 +
           (C11120 * C1938 + C11121 * C1935 - C11122 * C1939 - C11123 * C1936 +
            C12882 * C1940 + C12883 * C48345) *
               C42865 +
           (C11122 * C1938 + C11123 * C1935 - C12882 * C1939 - C12883 * C1936 +
            C12884 * C1940 + C12885 * C48345) *
               C42866) *
              C47981 * C48025 * C48378 +
          ((C1944 - (C1943 + C1942) + C1945 - C1946 - C1947) * C42864 +
           (C12624 - (C12623 + C12622) + C12625 - C12626 - C12627) * C42865 +
           (C2476 * C1939 - (C587 * C1935 + C586 * C1938) + C2477 * C1936 -
            C12886 * C1940 - C12887 * C48345) *
               C42866) *
              C47981 * C48025 * C48365 +
          (C1964 * C42864 +
           (C12630 + C12629 - C12628 - C12631 + C12632 + C12633) * C42865 +
           (C591 * C1938 + C592 * C1935 - C2478 * C1939 - C2479 * C1936 +
            (C113 * C2152 + C48228 * C2163) * C1940 +
            (C113 * C2164 + C48228 * C2170) * C48345) *
               C42866) *
              C47981 * C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C1938 +
            (C113 * C123 + C48228 * C136) * C1935 - C11120 * C1939 -
            C11121 * C1936 + C11122 * C1940 + C11123 * C48345) *
               C42864 +
           (C11120 * C1938 + C11121 * C1935 - C11122 * C1939 - C11123 * C1936 +
            C12882 * C1940 + C12883 * C48345) *
               C42865 +
           (C11122 * C1938 + C11123 * C1935 - C12882 * C1939 - C12883 * C1936 +
            C12884 * C1940 + C12885 * C48345) *
               C42866) *
              C47981 * C48381 +
          ((C11604 * C1939 -
            ((C113 * C319 + C48228 * C337) * C1935 +
             (C113 * C307 + C48228 * C320) * C1938) +
            C11605 * C1936 - C11996 * C1940 - C11997 * C48345) *
               C42864 +
           (C11996 * C1939 - (C11605 * C1935 + C11604 * C1938) +
            C11997 * C1936 - C13366 * C1940 - C13367 * C48345) *
               C42865 +
           (C13366 * C1939 - (C11997 * C1935 + C11996 * C1938) +
            C13367 * C1936 - (C113 * C7249 + C48228 * C7251) * C1940 -
            (C113 * C7252 + C48228 * C7255) * C48345) *
               C42866) *
              C47981 * C48369 +
          (((C113 * C308 + C48228 * C321) * C1938 +
            (C113 * C322 + C48228 * C338) * C1935 - C11998 * C1939 -
            C11999 * C1936 + C12000 * C1940 + C12001 * C48345) *
               C42864 +
           (C11998 * C1938 + C11999 * C1935 - C12000 * C1939 - C12001 * C1936 +
            C43716 * C1940 + C43717 * C48345) *
               C42865 +
           (C12000 * C1938 + C12001 * C1935 - C43716 * C1939 - C43717 * C1936 +
            (C113 * C23630 + C48228 * C23631) * C1940 +
            (C113 * C23632 + C48228 * C23633) * C48345) *
               C42866) *
              C47981 * C48342) *
         C47998) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48228 * C122) * C2142 +
           (C113 * C123 + C48228 * C136) * C2137 - C11120 * C2143 -
           C11121 * C2138 + C11122 * C2144 + C11123 * C2139 - C12882 * C2145 -
           C12883 * C2140 + C12884 * C2146 + C12885 * C2141) *
              C42864 +
          (C11120 * C2142 + C11121 * C2137 - C11122 * C2143 - C11123 * C2138 +
           C12882 * C2144 + C12883 * C2139 - C12884 * C2145 - C12885 * C2140 +
           C44356 * C2146 + C44357 * C2141) *
              C42865 +
          (C11122 * C2142 + C11123 * C2137 - C12882 * C2143 - C12883 * C2138 +
           C12884 * C2144 + C12885 * C2139 - C44356 * C2145 - C44357 * C2140 +
           (C113 * C44347 + C48228 * C44348) * C2146 +
           (C113 * C44349 + C48228 * C44350) * C2141) *
              C42866) *
         C47981 * C48025 * C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[213] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C831 +
             (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
             C11121 * C48129) *
                C42864 +
            (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
             C11123 * C48129) *
                C42865 +
            (C11122 * C831 + C11123 * C48311 - C12882 * C832 -
             C12883 * C48129) *
                C42866) *
               C47981 * C1177 +
           ((C11604 * C832 -
             ((C113 * C319 + C48228 * C337) * C48311 +
              (C113 * C307 + C48228 * C320) * C831) +
             C11605 * C48129) *
                C42864 +
            (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
             C11997 * C48129) *
                C42865 +
            (C13366 * C832 - (C11997 * C48311 + C11996 * C831) +
             C13367 * C48129) *
                C42866) *
               C47981 * C1178 +
           (((C113 * C308 + C48228 * C321) * C831 +
             (C113 * C322 + C48228 * C338) * C48311 - C11998 * C832 -
             C11999 * C48129) *
                C42864 +
            (C11998 * C831 + C11999 * C48311 - C12000 * C832 -
             C12001 * C48129) *
                C42865 +
            (C12000 * C831 + C12001 * C48311 - C43716 * C832 -
             C43717 * C48129) *
                C42866) *
               C47981 * C48342) *
              C48296 +
          (((C840 - (C839 + C838) + C841) * C42864 +
            (C11388 - (C11387 + C11386) + C11389) * C42865 +
            (C2476 * C832 - (C587 * C48311 + C586 * C831) + C2477 * C48129) *
                C42866) *
               C47981 * C1177 +
           ((C1037 + C1036 - C1059 - C1060) * C42864 +
            (C11598 + C11597 - C11596 - C11599) * C42865 +
            (C2338 * C831 + C2339 * C48311 - C13090 * C832 - C13091 * C48129) *
                C42866) *
               C47981 * C1178 +
           ((C1712 - (C1697 + C1696) + C1713) * C42864 +
            (C12338 - (C12337 + C12336) + C12339) * C42865 +
            ((C113 * C7736 + C48228 * C7739) * C832 -
             (C12003 * C48311 + C12002 * C831) +
             (C113 * C7740 + C48228 * C7742) * C48129) *
                C42866) *
               C47981 * C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C831 +
            (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
            C11121 * C48129) *
               C42864 +
           (C11120 * C831 + C11121 * C48311 - C11122 * C832 - C11123 * C48129) *
               C42865 +
           (C11122 * C831 + C11123 * C48311 - C12882 * C832 - C12883 * C48129) *
               C42866) *
              C47981 * C48025 * C713 +
          ((C840 - (C839 + C838) + C841) * C42864 +
           (C11388 - (C11387 + C11386) + C11389) * C42865 +
           (C2476 * C832 - (C587 * C48311 + C586 * C831) + C2477 * C48129) *
               C42866) *
              C47981 * C48025 * C714 +
          (C864 * C42864 + (C11392 + C11391 - C11390 - C11393) * C42865 +
           (C591 * C831 + C592 * C48311 - C2478 * C832 - C2479 * C48129) *
               C42866) *
              C47981 * C48025 * C715 +
          (C865 * C42864 + (C11396 - (C11395 + C11394) + C11397) * C42865 +
           ((C113 * C2451 + C48228 * C2452) * C832 -
            (C596 * C48311 + C595 * C831) +
            (C113 * C2453 + C48228 * C2454) * C48129) *
               C42866) *
              C47981 * C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C2447 +
            (C113 * C123 + C48228 * C136) * C2443 - C11120 * C2448 -
            C11121 * C2444 + C11122 * C2449 + C11123 * C2445 - C12882 * C2450 -
            C12883 * C48358) *
               C42864 +
           (C11120 * C2447 + C11121 * C2443 - C11122 * C2448 - C11123 * C2444 +
            C12882 * C2449 + C12883 * C2445 - C12884 * C2450 -
            C12885 * C48358) *
               C42865 +
           (C11122 * C2447 + C11123 * C2443 - C12882 * C2448 - C12883 * C2444 +
            C12884 * C2449 + C12885 * C2445 - C44356 * C2450 -
            C44357 * C48358) *
               C42866) *
              C47981 * C48025 * C48296 +
          ((C2458 - (C2457 + C2456) + C2459 - C2460 - C2461 + C2480 + C2481) *
               C42864 +
           (C13226 - (C13225 + C13224) + C13227 - C13228 - C13229 + C13230 +
            C13231) *
               C42865 +
           (C2476 * C2448 - (C587 * C2443 + C586 * C2447) + C2477 * C2444 -
            C12886 * C2449 - C12887 * C2445 +
            (C113 * C12862 + C48228 * C12865) * C2450 +
            (C113 * C12866 + C48228 * C12868) * C48358) *
               C42866) *
              C47981 * C48025 * C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[214] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C42864 +
            (C11120 * C114 + C11121 * C48042) * C42865 +
            (C11122 * C114 + C11123 * C48042) * C42866) *
               C47981 * C48381 -
           ((C11997 * C48042 + C11996 * C114) * C42866 +
            (C11605 * C48042 + C11604 * C114) * C42865 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C42864) *
               C47981 * C48369 +
           (((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C42864 +
            (C11998 * C114 + C11999 * C48042) * C42865 +
            (C12000 * C114 + C12001 * C48042) * C42866) *
               C47981 * C48342) *
              C302 +
          (((C385 + C384) * C42864 + (C10947 + C10946) * C42865 +
            (C2338 * C114 + C2339 * C48042) * C42866) *
               C47981 * C48369 -
           ((C587 * C48042 + C586 * C114) * C42866 +
            (C10793 + C10792) * C42865 + (C175 + C174) * C42864) *
               C47981 * C48381 -
           ((C12003 * C48042 + C12002 * C114) * C42866 +
            (C10949 + C10948) * C42865 + (C387 + C386) * C42864) *
               C47981 * C48342) *
              C303 +
          ((C184 * C42864 + (C10795 + C10794) * C42865 +
            (C591 * C114 + C592 * C48042) * C42866) *
               C47981 * C48381 -
           ((C2341 * C48042 + C2340 * C114) * C42866 +
            (C10951 + C10950) * C42865 + C394 * C42864) *
               C47981 * C48369 +
           (C395 * C42864 + (C10953 + C10952) * C42865 +
            ((C113 * C1393 + C48228 * C1410) * C114 +
             (C113 * C1411 + C48228 * C1420) * C48042) *
                C42866) *
               C47981 * C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C114 +
            (C113 * C123 + C48228 * C136) * C48042) *
               C42864 +
           (C11120 * C114 + C11121 * C48042) * C42865 +
           (C11122 * C114 + C11123 * C48042) * C42866) *
              C47981 * C48025 * C108 -
          ((C587 * C48042 + C586 * C114) * C42866 + (C10793 + C10792) * C42865 +
           (C175 + C174) * C42864) *
              C47981 * C48025 * C109 +
          (C184 * C42864 + (C10795 + C10794) * C42865 +
           (C591 * C114 + C592 * C48042) * C42866) *
              C47981 * C48025 * C110 -
          ((C596 * C48042 + C595 * C114) * C42866 + (C10797 + C10796) * C42865 +
           C185 * C42864) *
              C47981 * C48025 * C111 +
          (C186 * C42864 + (C10799 + C10798) * C42865 +
           ((C113 * C522 + C48228 * C541) * C114 +
            (C113 * C542 + C48228 * C552) * C48042) *
               C42866) *
              C47981 * C48025 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C42864 +
            (C11120 * C114 + C11121 * C48042) * C42865 +
            (C11122 * C114 + C11123 * C48042) * C42866) *
               C47981 * C1177 -
           ((C11997 * C48042 + C11996 * C114) * C42866 +
            (C11605 * C48042 + C11604 * C114) * C42865 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C42864) *
               C47981 * C1178 +
           (((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C42864 +
            (C11998 * C114 + C11999 * C48042) * C42865 +
            (C12000 * C114 + C12001 * C48042) * C42866) *
               C47981 * C48342) *
              C48378 +
          (((C385 + C384) * C42864 + (C10947 + C10946) * C42865 +
            (C2338 * C114 + C2339 * C48042) * C42866) *
               C47981 * C1178 -
           ((C587 * C48042 + C586 * C114) * C42866 +
            (C10793 + C10792) * C42865 + (C175 + C174) * C42864) *
               C47981 * C1177 -
           ((C12003 * C48042 + C12002 * C114) * C42866 +
            (C10949 + C10948) * C42865 + (C387 + C386) * C42864) *
               C47981 * C48342) *
              C48365 +
          ((C184 * C42864 + (C10795 + C10794) * C42865 +
            (C591 * C114 + C592 * C48042) * C42866) *
               C47981 * C1177 -
           ((C2341 * C48042 + C2340 * C114) * C42866 +
            (C10951 + C10950) * C42865 + C394 * C42864) *
               C47981 * C1178 +
           (C395 * C42864 + (C10953 + C10952) * C42865 +
            ((C113 * C1393 + C48228 * C1410) * C114 +
             (C113 * C1411 + C48228 * C1420) * C48042) *
                C42866) *
               C47981 * C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C114 +
            (C113 * C123 + C48228 * C136) * C48042) *
               C42864 +
           (C11120 * C114 + C11121 * C48042) * C42865 +
           (C11122 * C114 + C11123 * C48042) * C42866) *
              C47981 * C1245 -
          ((C11997 * C48042 + C11996 * C114) * C42866 +
           (C11605 * C48042 + C11604 * C114) * C42865 +
           ((C113 * C319 + C48228 * C337) * C48042 +
            (C113 * C307 + C48228 * C320) * C114) *
               C42864) *
              C47981 * C1246 +
          (((C113 * C308 + C48228 * C321) * C114 +
            (C113 * C322 + C48228 * C338) * C48042) *
               C42864 +
           (C11998 * C114 + C11999 * C48042) * C42865 +
           (C12000 * C114 + C12001 * C48042) * C42866) *
              C47981 * C1247 -
          (((C113 * C6384 + C48228 * C6387) * C48042 +
            (C113 * C6381 + C48228 * C6383) * C114) *
               C42866 +
           (C12475 * C48042 + C12474 * C114) * C42865 +
           ((C113 * C1261 + C48228 * C1271) * C48042 +
            (C113 * C1253 + C48228 * C1262) * C114) *
               C42864) *
              C47981 * C1248 +
          (((C113 * C1254 + C48228 * C1263) * C114 +
            (C113 * C1264 + C48228 * C1272) * C48042) *
               C42864 +
           ((C113 * C6867 + C48228 * C6869) * C114 +
            (C113 * C6870 + C48228 * C6873) * C48042) *
               C42865 +
           ((C113 * C22998 + C48228 * C22999) * C114 +
            (C113 * C23000 + C48228 * C23001) * C48042) *
               C42866) *
              C47981 * C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C1938 +
            (C113 * C123 + C48228 * C136) * C1935 - C11120 * C1939 -
            C11121 * C1936 + C11122 * C1940 + C11123 * C48345) *
               C42864 +
           (C11120 * C1938 + C11121 * C1935 - C11122 * C1939 - C11123 * C1936 +
            C12882 * C1940 + C12883 * C48345) *
               C42865 +
           (C11122 * C1938 + C11123 * C1935 - C12882 * C1939 - C12883 * C1936 +
            C12884 * C1940 + C12885 * C48345) *
               C42866) *
              C47981 * C48025 * C48378 +
          ((C1944 - (C1943 + C1942) + C1945 - C1946 - C1947) * C42864 +
           (C12624 - (C12623 + C12622) + C12625 - C12626 - C12627) * C42865 +
           (C2476 * C1939 - (C587 * C1935 + C586 * C1938) + C2477 * C1936 -
            C12886 * C1940 - C12887 * C48345) *
               C42866) *
              C47981 * C48025 * C48365 +
          (C1964 * C42864 +
           (C12630 + C12629 - C12628 - C12631 + C12632 + C12633) * C42865 +
           (C591 * C1938 + C592 * C1935 - C2478 * C1939 - C2479 * C1936 +
            (C113 * C2152 + C48228 * C2163) * C1940 +
            (C113 * C2164 + C48228 * C2170) * C48345) *
               C42866) *
              C47981 * C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C1938 +
            (C113 * C123 + C48228 * C136) * C1935 - C11120 * C1939 -
            C11121 * C1936 + C11122 * C1940 + C11123 * C48345) *
               C42864 +
           (C11120 * C1938 + C11121 * C1935 - C11122 * C1939 - C11123 * C1936 +
            C12882 * C1940 + C12883 * C48345) *
               C42865 +
           (C11122 * C1938 + C11123 * C1935 - C12882 * C1939 - C12883 * C1936 +
            C12884 * C1940 + C12885 * C48345) *
               C42866) *
              C47981 * C48381 +
          ((C11604 * C1939 -
            ((C113 * C319 + C48228 * C337) * C1935 +
             (C113 * C307 + C48228 * C320) * C1938) +
            C11605 * C1936 - C11996 * C1940 - C11997 * C48345) *
               C42864 +
           (C11996 * C1939 - (C11605 * C1935 + C11604 * C1938) +
            C11997 * C1936 - C13366 * C1940 - C13367 * C48345) *
               C42865 +
           (C13366 * C1939 - (C11997 * C1935 + C11996 * C1938) +
            C13367 * C1936 - (C113 * C7249 + C48228 * C7251) * C1940 -
            (C113 * C7252 + C48228 * C7255) * C48345) *
               C42866) *
              C47981 * C48369 +
          (((C113 * C308 + C48228 * C321) * C1938 +
            (C113 * C322 + C48228 * C338) * C1935 - C11998 * C1939 -
            C11999 * C1936 + C12000 * C1940 + C12001 * C48345) *
               C42864 +
           (C11998 * C1938 + C11999 * C1935 - C12000 * C1939 - C12001 * C1936 +
            C43716 * C1940 + C43717 * C48345) *
               C42865 +
           (C12000 * C1938 + C12001 * C1935 - C43716 * C1939 - C43717 * C1936 +
            (C113 * C23630 + C48228 * C23631) * C1940 +
            (C113 * C23632 + C48228 * C23633) * C48345) *
               C42866) *
              C47981 * C48342) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[215] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3467 +
             (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
             C11121 * C48129) *
                C42864 +
            (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
             C11123 * C48129) *
                C42865 +
            (C11122 * C3467 + C11123 * C3465 - C12882 * C3468 -
             C12883 * C48129) *
                C42866) *
               C47981 * C48310 +
           ((C11604 * C3468 -
             ((C113 * C319 + C48228 * C337) * C3465 +
              (C113 * C307 + C48228 * C320) * C3467) +
             C11605 * C48129) *
                C42864 +
            (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
             C11997 * C48129) *
                C42865 +
            (C13366 * C3468 - (C11997 * C3465 + C11996 * C3467) +
             C13367 * C48129) *
                C42866) *
               C47981 * C48087) *
              C48003 +
          (((C3472 - (C3471 + C3470) + C3473) * C42864 +
            (C14494 - (C14493 + C14492) + C14495) * C42865 +
            (C2476 * C3468 - (C587 * C3465 + C586 * C3467) + C2477 * C48129) *
                C42866) *
               C47981 * C48310 +
           ((C3642 + C3641 - C3640 - C3643) * C42864 +
            (C14700 + C14699 - C14698 - C14701) * C42865 +
            (C2338 * C3467 + C2339 * C3465 - C13090 * C3468 - C13091 * C48129) *
                C42866) *
               C47981 * C48087) *
              C48011 +
          ((C3490 * C42864 + (C14498 + C14497 - C14496 - C14499) * C42865 +
            (C591 * C3467 + C592 * C3465 - C2478 * C3468 - C2479 * C48129) *
                C42866) *
               C47981 * C48310 +
           (C3930 * C42864 + (C15040 - (C15039 + C15038) + C15041) * C42865 +
            ((C113 * C2583 + C48228 * C2588) * C3468 -
             (C2341 * C3465 + C2340 * C3467) +
             (C113 * C2589 + C48228 * C2592) * C48129) *
                C42866) *
               C47981 * C48087) *
              C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[216] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C47030 +
             (C113 * C123 + C48228 * C136) * C48125 - C11120 * C47022 -
             C11121 * C48132 + C11122 * C47036 + C11123 * C4043) *
                C42864 +
            (C11120 * C47030 + C11121 * C48125 - C11122 * C47022 -
             C11123 * C48132 + C12882 * C47036 + C12883 * C4043) *
                C42865 +
            (C11122 * C47030 + C11123 * C48125 - C12882 * C47022 -
             C12883 * C48132 + C12884 * C47036 + C12885 * C4043) *
                C42866) *
               C47981 * C48310 +
           ((C11604 * C47022 -
             ((C113 * C319 + C48228 * C337) * C48125 +
              (C113 * C307 + C48228 * C320) * C47030) +
             C11605 * C48132 - C11996 * C47036 - C11997 * C4043) *
                C42864 +
            (C11996 * C47022 - (C11605 * C48125 + C11604 * C47030) +
             C11997 * C48132 - C13366 * C47036 - C13367 * C4043) *
                C42865 +
            (C13366 * C47022 - (C11997 * C48125 + C11996 * C47030) +
             C13367 * C48132 - C44704 * C47036 - C44705 * C4043) *
                C42866) *
               C47981 * C48087) *
              C2799 +
          (((C4050 - (C4049 + C4048) + C4051 - C4052 - C4053) * C42864 +
            (C15190 - (C15189 + C15188) + C15191 - C15192 - C15193) * C42865 +
            (C2476 * C47022 - (C587 * C48125 + C586 * C47030) + C2477 * C48132 -
             C12886 * C47036 - C12887 * C4043) *
                C42866) *
               C47981 * C48310 +
           ((C4220 + C4219 - C4218 - C4221 + C4222 + C4223) * C42864 +
            (C15396 + C15395 - C15394 - C15397 + C15398 + C15399) * C42865 +
            (C2338 * C47030 + C2339 * C48125 - C13090 * C47022 -
             C13091 * C48132 + (C113 * C7250 + C48228 * C7253) * C47036 +
             (C113 * C7254 + C48228 * C7256) * C4043) *
                C42866) *
               C47981 * C48087) *
              C48008)) /
        (p * q * std::sqrt(p + q));
    d2ee[217] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3467 +
             (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
             C11121 * C48129) *
                C42864 +
            (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
             C11123 * C48129) *
                C42865 +
            (C11122 * C3467 + C11123 * C3465 - C12882 * C3468 -
             C12883 * C48129) *
                C42866) *
               C47981 * C48381 +
           ((C11604 * C3468 -
             ((C113 * C319 + C48228 * C337) * C3465 +
              (C113 * C307 + C48228 * C320) * C3467) +
             C11605 * C48129) *
                C42864 +
            (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
             C11997 * C48129) *
                C42865 +
            (C13366 * C3468 - (C11997 * C3465 + C11996 * C3467) +
             C13367 * C48129) *
                C42866) *
               C47981 * C48369 +
           (((C113 * C308 + C48228 * C321) * C3467 +
             (C113 * C322 + C48228 * C338) * C3465 - C11998 * C3468 -
             C11999 * C48129) *
                C42864 +
            (C11998 * C3467 + C11999 * C3465 - C12000 * C3468 -
             C12001 * C48129) *
                C42865 +
            (C12000 * C3467 + C12001 * C3465 - C43716 * C3468 -
             C43717 * C48129) *
                C42866) *
               C47981 * C48342) *
              C2799 +
          (((C3472 - (C3471 + C3470) + C3473) * C42864 +
            (C14494 - (C14493 + C14492) + C14495) * C42865 +
            (C2476 * C3468 - (C587 * C3465 + C586 * C3467) + C2477 * C48129) *
                C42866) *
               C47981 * C48381 +
           ((C3642 + C3641 - C3640 - C3643) * C42864 +
            (C14700 + C14699 - C14698 - C14701) * C42865 +
            (C2338 * C3467 + C2339 * C3465 - C13090 * C3468 - C13091 * C48129) *
                C42866) *
               C47981 * C48369 +
           ((C3650 - (C3649 + C3648) + C3651) * C42864 +
            (C14704 - (C14703 + C14702) + C14705) * C42865 +
            ((C113 * C7736 + C48228 * C7739) * C3468 -
             (C12003 * C3465 + C12002 * C3467) +
             (C113 * C7740 + C48228 * C7742) * C48129) *
                C42866) *
               C47981 * C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C3467 +
            (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
            C11121 * C48129) *
               C42864 +
           (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
            C11123 * C48129) *
               C42865 +
           (C11122 * C3467 + C11123 * C3465 - C12882 * C3468 -
            C12883 * C48129) *
               C42866) *
              C47981 * C48025 * C48387 +
          ((C3472 - (C3471 + C3470) + C3473) * C42864 +
           (C14494 - (C14493 + C14492) + C14495) * C42865 +
           (C2476 * C3468 - (C587 * C3465 + C586 * C3467) + C2477 * C48129) *
               C42866) *
              C47981 * C48025 * C48380 +
          (C3490 * C42864 + (C14498 + C14497 - C14496 - C14499) * C42865 +
           (C591 * C3467 + C592 * C3465 - C2478 * C3468 - C2479 * C48129) *
               C42866) *
              C47981 * C48025 * C48367 +
          (C3491 * C42864 + (C14502 - (C14501 + C14500) + C14503) * C42865 +
           ((C113 * C2451 + C48228 * C2452) * C3468 -
            (C596 * C3465 + C595 * C3467) +
            (C113 * C2453 + C48228 * C2454) * C48129) *
               C42866) *
              C47981 * C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C3757 +
            (C113 * C123 + C48228 * C136) * C48389 - C11120 * C3758 -
            C11121 * C48386 + C11122 * C3759 + C11123 * C48377 -
            C12882 * C3760 - C12883 * C48358) *
               C42864 +
           (C11120 * C3757 + C11121 * C48389 - C11122 * C3758 -
            C11123 * C48386 + C12882 * C3759 + C12883 * C48377 -
            C12884 * C3760 - C12885 * C48358) *
               C42865 +
           (C11122 * C3757 + C11123 * C48389 - C12882 * C3758 -
            C12883 * C48386 + C12884 * C3759 + C12885 * C48377 -
            C44356 * C3760 - C44357 * C48358) *
               C42866) *
              C47981 * C48025 * C2799 +
          ((C3764 - (C3763 + C3762) + C3765 - C3766 - C3767 + C3768 + C3769) *
               C42864 +
           (C14838 - (C14837 + C14836) + C14839 - C14840 - C14841 + C14842 +
            C14843) *
               C42865 +
           (C2476 * C3758 - (C587 * C48389 + C586 * C3757) + C2477 * C48386 -
            C12886 * C3759 - C12887 * C48377 +
            (C113 * C12862 + C48228 * C12865) * C3760 +
            (C113 * C12866 + C48228 * C12868) * C48358) *
               C42866) *
              C47981 * C48025 * C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[218] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C47030 +
            (C113 * C123 + C48228 * C136) * C48125 - C11120 * C47022 -
            C11121 * C48132 + C11122 * C47036 + C11123 * C4043) *
               C42864 +
           (C11120 * C47030 + C11121 * C48125 - C11122 * C47022 -
            C11123 * C48132 + C12882 * C47036 + C12883 * C4043) *
               C42865 +
           (C11122 * C47030 + C11123 * C48125 - C12882 * C47022 -
            C12883 * C48132 + C12884 * C47036 + C12885 * C4043) *
               C42866) *
              C47981 * C48025 * C48003 +
          ((C4050 - (C4049 + C4048) + C4051 - C4052 - C4053) * C42864 +
           (C15190 - (C15189 + C15188) + C15191 - C15192 - C15193) * C42865 +
           (C2476 * C47022 - (C587 * C48125 + C586 * C47030) + C2477 * C48132 -
            C12886 * C47036 - C12887 * C4043) *
               C42866) *
              C47981 * C48025 * C48011 +
          (C4070 * C42864 +
           (C15196 + C15195 - C15194 - C15197 + C15198 + C15199) * C42865 +
           (C591 * C47030 + C592 * C48125 - C2478 * C47022 - C2479 * C48132 +
            (C113 * C2152 + C48228 * C2163) * C47036 +
            (C113 * C2164 + C48228 * C2170) * C4043) *
               C42866) *
              C47981 * C48025 * C3074)) /
        (p * q * std::sqrt(p + q));
    d2ee[219] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C3467 +
            (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
            C11121 * C48129) *
               C42864 +
           (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
            C11123 * C48129) *
               C42865 +
           (C11122 * C3467 + C11123 * C3465 - C12882 * C3468 -
            C12883 * C48129) *
               C42866) *
              C47981 * C48025 * C48387 +
          ((C3472 - (C3471 + C3470) + C3473) * C42864 +
           (C14494 - (C14493 + C14492) + C14495) * C42865 +
           (C2476 * C3468 - (C587 * C3465 + C586 * C3467) + C2477 * C48129) *
               C42866) *
              C47981 * C48025 * C48380 +
          (C3490 * C42864 + (C14498 + C14497 - C14496 - C14499) * C42865 +
           (C591 * C3467 + C592 * C3465 - C2478 * C3468 - C2479 * C48129) *
               C42866) *
              C47981 * C48025 * C48367 +
          (C3491 * C42864 + (C14502 - (C14501 + C14500) + C14503) * C42865 +
           ((C113 * C2451 + C48228 * C2452) * C3468 -
            (C596 * C3465 + C595 * C3467) +
            (C113 * C2453 + C48228 * C2454) * C48129) *
               C42866) *
              C47981 * C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C3467 +
             (C113 * C123 + C48228 * C136) * C3465 - C11120 * C3468 -
             C11121 * C48129) *
                C42864 +
            (C11120 * C3467 + C11121 * C3465 - C11122 * C3468 -
             C11123 * C48129) *
                C42865 +
            (C11122 * C3467 + C11123 * C3465 - C12882 * C3468 -
             C12883 * C48129) *
                C42866) *
               C47981 * C48381 +
           ((C11604 * C3468 -
             ((C113 * C319 + C48228 * C337) * C3465 +
              (C113 * C307 + C48228 * C320) * C3467) +
             C11605 * C48129) *
                C42864 +
            (C11996 * C3468 - (C11605 * C3465 + C11604 * C3467) +
             C11997 * C48129) *
                C42865 +
            (C13366 * C3468 - (C11997 * C3465 + C11996 * C3467) +
             C13367 * C48129) *
                C42866) *
               C47981 * C48369 +
           (((C113 * C308 + C48228 * C321) * C3467 +
             (C113 * C322 + C48228 * C338) * C3465 - C11998 * C3468 -
             C11999 * C48129) *
                C42864 +
            (C11998 * C3467 + C11999 * C3465 - C12000 * C3468 -
             C12001 * C48129) *
                C42865 +
            (C12000 * C3467 + C12001 * C3465 - C43716 * C3468 -
             C43717 * C48129) *
                C42866) *
               C47981 * C48342) *
              C2799 +
          (((C3472 - (C3471 + C3470) + C3473) * C42864 +
            (C14494 - (C14493 + C14492) + C14495) * C42865 +
            (C2476 * C3468 - (C587 * C3465 + C586 * C3467) + C2477 * C48129) *
                C42866) *
               C47981 * C48381 +
           ((C3642 + C3641 - C3640 - C3643) * C42864 +
            (C14700 + C14699 - C14698 - C14701) * C42865 +
            (C2338 * C3467 + C2339 * C3465 - C13090 * C3468 - C13091 * C48129) *
                C42866) *
               C47981 * C48369 +
           ((C3650 - (C3649 + C3648) + C3651) * C42864 +
            (C14704 - (C14703 + C14702) + C14705) * C42865 +
            ((C113 * C7736 + C48228 * C7739) * C3468 -
             (C12003 * C3465 + C12002 * C3467) +
             (C113 * C7740 + C48228 * C7742) * C48129) *
                C42866) *
               C47981 * C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[220] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48228 * C122) * C114 +
                      (C113 * C123 + C48228 * C136) * C48042) *
                         C42864 +
                     (C11120 * C114 + C11121 * C48042) * C42865 +
                     (C11122 * C114 + C11123 * C48042) * C42866) *
                        C47981 * C48310 -
                    ((C11997 * C48042 + C11996 * C114) * C42866 +
                     (C11605 * C48042 + C11604 * C114) * C42865 +
                     ((C113 * C319 + C48228 * C337) * C48042 +
                      (C113 * C307 + C48228 * C320) * C114) *
                         C42864) *
                        C47981 * C48087) *
                       C713 +
                   (((C385 + C384) * C42864 + (C10947 + C10946) * C42865 +
                     (C2338 * C114 + C2339 * C48042) * C42866) *
                        C47981 * C48087 -
                    ((C587 * C48042 + C586 * C114) * C42866 +
                     (C10793 + C10792) * C42865 + (C175 + C174) * C42864) *
                        C47981 * C48310) *
                       C714 +
                   ((C184 * C42864 + (C10795 + C10794) * C42865 +
                     (C591 * C114 + C592 * C48042) * C42866) *
                        C47981 * C48310 -
                    ((C2341 * C48042 + C2340 * C114) * C42866 +
                     (C10951 + C10950) * C42865 + C394 * C42864) *
                        C47981 * C48087) *
                       C715 +
                   ((C722 * C42864 + (C11255 + C11254) * C42865 +
                     ((C113 * C2317 + C48228 * C2318) * C114 +
                      (C113 * C2319 + C48228 * C2320) * C48042) *
                         C42866) *
                        C47981 * C48087 -
                    ((C596 * C48042 + C595 * C114) * C42866 +
                     (C10797 + C10796) * C42865 + C185 * C42864) *
                        C47981 * C48310) *
                       C48346)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48228 * C122) * C114 +
                      (C113 * C123 + C48228 * C136) * C48042) *
                         C42864 +
                     (C11120 * C114 + C11121 * C48042) * C42865 +
                     (C11122 * C114 + C11123 * C48042) * C42866) *
                        C47981 * C1519 -
                    ((C11997 * C48042 + C11996 * C114) * C42866 +
                     (C11605 * C48042 + C11604 * C114) * C42865 +
                     ((C113 * C319 + C48228 * C337) * C48042 +
                      (C113 * C307 + C48228 * C320) * C114) *
                         C42864) *
                        C47981 * C1520 +
                    (((C113 * C308 + C48228 * C321) * C114 +
                      (C113 * C322 + C48228 * C338) * C48042) *
                         C42864 +
                     (C11998 * C114 + C11999 * C48042) * C42865 +
                     (C12000 * C114 + C12001 * C48042) * C42866) *
                        C47981 * C1521 -
                    (((C113 * C6384 + C48228 * C6387) * C48042 +
                      (C113 * C6381 + C48228 * C6383) * C114) *
                         C42866 +
                     (C12475 * C48042 + C12474 * C114) * C42865 +
                     ((C113 * C1261 + C48228 * C1271) * C48042 +
                      (C113 * C1253 + C48228 * C1262) * C114) *
                         C42864) *
                        C47981 * C48352) *
                       C48296 +
                   (((C385 + C384) * C42864 + (C10947 + C10946) * C42865 +
                     (C2338 * C114 + C2339 * C48042) * C42866) *
                        C47981 * C1520 -
                    ((C587 * C48042 + C586 * C114) * C42866 +
                     (C10793 + C10792) * C42865 + (C175 + C174) * C42864) *
                        C47981 * C1519 -
                    ((C12003 * C48042 + C12002 * C114) * C42866 +
                     (C10949 + C10948) * C42865 + (C387 + C386) * C42864) *
                        C47981 * C1521 +
                    ((C1545 + C1544) * C42864 + (C12141 + C12140) * C42865 +
                     ((C113 * C6382 + C48228 * C6385) * C114 +
                      (C113 * C6386 + C48228 * C6388) * C48042) *
                         C42866) *
                        C47981 * C48352) *
                       C48008)) /
                     (p * q * std::sqrt(p + q));
    d2ee[221] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C831 +
             (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
             C11121 * C48129) *
                C42864 +
            (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
             C11123 * C48129) *
                C42865 +
            (C11122 * C831 + C11123 * C48311 - C12882 * C832 -
             C12883 * C48129) *
                C42866) *
               C47981 * C48310 +
           ((C11604 * C832 -
             ((C113 * C319 + C48228 * C337) * C48311 +
              (C113 * C307 + C48228 * C320) * C831) +
             C11605 * C48129) *
                C42864 +
            (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
             C11997 * C48129) *
                C42865 +
            (C13366 * C832 - (C11997 * C48311 + C11996 * C831) +
             C13367 * C48129) *
                C42866) *
               C47981 * C48087) *
              C302 +
          (((C840 - (C839 + C838) + C841) * C42864 +
            (C11388 - (C11387 + C11386) + C11389) * C42865 +
            (C2476 * C832 - (C587 * C48311 + C586 * C831) + C2477 * C48129) *
                C42866) *
               C47981 * C48310 +
           ((C1037 + C1036 - C1059 - C1060) * C42864 +
            (C11598 + C11597 - C11596 - C11599) * C42865 +
            (C2338 * C831 + C2339 * C48311 - C13090 * C832 - C13091 * C48129) *
                C42866) *
               C47981 * C48087) *
              C303 +
          ((C864 * C42864 + (C11392 + C11391 - C11390 - C11393) * C42865 +
            (C591 * C831 + C592 * C48311 - C2478 * C832 - C2479 * C48129) *
                C42866) *
               C47981 * C48310 +
           (C1066 * C42864 + (C11602 - (C11601 + C11600) + C11603) * C42865 +
            ((C113 * C2583 + C48228 * C2588) * C832 -
             (C2341 * C48311 + C2340 * C831) +
             (C113 * C2589 + C48228 * C2592) * C48129) *
                C42866) *
               C47981 * C48087) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C831 +
            (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
            C11121 * C48129) *
               C42864 +
           (C11120 * C831 + C11121 * C48311 - C11122 * C832 - C11123 * C48129) *
               C42865 +
           (C11122 * C831 + C11123 * C48311 - C12882 * C832 - C12883 * C48129) *
               C42866) *
              C47981 * C1519 +
          ((C11604 * C832 -
            ((C113 * C319 + C48228 * C337) * C48311 +
             (C113 * C307 + C48228 * C320) * C831) +
            C11605 * C48129) *
               C42864 +
           (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
            C11997 * C48129) *
               C42865 +
           (C13366 * C832 - (C11997 * C48311 + C11996 * C831) +
            C13367 * C48129) *
               C42866) *
              C47981 * C1520 +
          (((C113 * C308 + C48228 * C321) * C831 +
            (C113 * C322 + C48228 * C338) * C48311 - C11998 * C832 -
            C11999 * C48129) *
               C42864 +
           (C11998 * C831 + C11999 * C48311 - C12000 * C832 - C12001 * C48129) *
               C42865 +
           (C12000 * C831 + C12001 * C48311 - C43716 * C832 - C43717 * C48129) *
               C42866) *
              C47981 * C1521 +
          ((C12474 * C832 -
            ((C113 * C1261 + C48228 * C1271) * C48311 +
             (C113 * C1253 + C48228 * C1262) * C831) +
            C12475 * C48129) *
               C42864 +
           (C44064 * C832 - (C12475 * C48311 + C12474 * C831) +
            C44065 * C48129) *
               C42865 +
           ((C113 * C23976 + C48228 * C23977) * C832 -
            (C44065 * C48311 + C44064 * C831) +
            (C113 * C23978 + C48228 * C23979) * C48129) *
               C42866) *
              C47981 * C48352) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[222] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C42864 +
            (C11120 * C114 + C11121 * C48042) * C42865 +
            (C11122 * C114 + C11123 * C48042) * C42866) *
               C47981 * C48381 -
           ((C11997 * C48042 + C11996 * C114) * C42866 +
            (C11605 * C48042 + C11604 * C114) * C42865 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C42864) *
               C47981 * C48369 +
           (((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C42864 +
            (C11998 * C114 + C11999 * C48042) * C42865 +
            (C12000 * C114 + C12001 * C48042) * C42866) *
               C47981 * C48342) *
              C302 +
          (((C385 + C384) * C42864 + (C10947 + C10946) * C42865 +
            (C2338 * C114 + C2339 * C48042) * C42866) *
               C47981 * C48369 -
           ((C587 * C48042 + C586 * C114) * C42866 +
            (C10793 + C10792) * C42865 + (C175 + C174) * C42864) *
               C47981 * C48381 -
           ((C12003 * C48042 + C12002 * C114) * C42866 +
            (C10949 + C10948) * C42865 + (C387 + C386) * C42864) *
               C47981 * C48342) *
              C303 +
          ((C184 * C42864 + (C10795 + C10794) * C42865 +
            (C591 * C114 + C592 * C48042) * C42866) *
               C47981 * C48381 -
           ((C2341 * C48042 + C2340 * C114) * C42866 +
            (C10951 + C10950) * C42865 + C394 * C42864) *
               C47981 * C48369 +
           (C395 * C42864 + (C10953 + C10952) * C42865 +
            ((C113 * C1393 + C48228 * C1410) * C114 +
             (C113 * C1411 + C48228 * C1420) * C48042) *
                C42866) *
               C47981 * C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C114 +
            (C113 * C123 + C48228 * C136) * C48042) *
               C42864 +
           (C11120 * C114 + C11121 * C48042) * C42865 +
           (C11122 * C114 + C11123 * C48042) * C42866) *
              C47981 * C48025 * C108 -
          ((C587 * C48042 + C586 * C114) * C42866 + (C10793 + C10792) * C42865 +
           (C175 + C174) * C42864) *
              C47981 * C48025 * C109 +
          (C184 * C42864 + (C10795 + C10794) * C42865 +
           (C591 * C114 + C592 * C48042) * C42866) *
              C47981 * C48025 * C110 -
          ((C596 * C48042 + C595 * C114) * C42866 + (C10797 + C10796) * C42865 +
           C185 * C42864) *
              C47981 * C48025 * C111 +
          (C186 * C42864 + (C10799 + C10798) * C42865 +
           ((C113 * C522 + C48228 * C541) * C114 +
            (C113 * C542 + C48228 * C552) * C48042) *
               C42866) *
              C47981 * C48025 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C510 +
            (C113 * C123 + C48228 * C136) * C48382 - C11120 * C511 -
            C11121 * C48371 + C11122 * C512 + C11123 * C48345) *
               C42864 +
           (C11120 * C510 + C11121 * C48382 - C11122 * C511 - C11123 * C48371 +
            C12882 * C512 + C12883 * C48345) *
               C42865 +
           (C11122 * C510 + C11123 * C48382 - C12882 * C511 - C12883 * C48371 +
            C12884 * C512 + C12885 * C48345) *
               C42866) *
              C47981 * C48025 * C302 +
          ((C597 - (C555 + C554) + C598 - C599 - C600) * C42864 +
           (C11110 - (C11109 + C11108) + C11111 - C11112 - C11113) * C42865 +
           (C2476 * C511 - (C587 * C48382 + C586 * C510) + C2477 * C48371 -
            C12886 * C512 - C12887 * C48345) *
               C42866) *
              C47981 * C48025 * C303 +
          (C612 * C42864 +
           (C11116 + C11115 - C11114 - C11117 + C11118 + C11119) * C42865 +
           (C591 * C510 + C592 * C48382 - C2478 * C511 - C2479 * C48371 +
            (C113 * C2152 + C48228 * C2163) * C512 +
            (C113 * C2164 + C48228 * C2170) * C48345) *
               C42866) *
              C47981 * C48025 * C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C114 +
             (C113 * C123 + C48228 * C136) * C48042) *
                C42864 +
            (C11120 * C114 + C11121 * C48042) * C42865 +
            (C11122 * C114 + C11123 * C48042) * C42866) *
               C47981 * C1177 -
           ((C11997 * C48042 + C11996 * C114) * C42866 +
            (C11605 * C48042 + C11604 * C114) * C42865 +
            ((C113 * C319 + C48228 * C337) * C48042 +
             (C113 * C307 + C48228 * C320) * C114) *
                C42864) *
               C47981 * C1178 +
           (((C113 * C308 + C48228 * C321) * C114 +
             (C113 * C322 + C48228 * C338) * C48042) *
                C42864 +
            (C11998 * C114 + C11999 * C48042) * C42865 +
            (C12000 * C114 + C12001 * C48042) * C42866) *
               C47981 * C48342) *
              C48378 +
          (((C385 + C384) * C42864 + (C10947 + C10946) * C42865 +
            (C2338 * C114 + C2339 * C48042) * C42866) *
               C47981 * C1178 -
           ((C587 * C48042 + C586 * C114) * C42866 +
            (C10793 + C10792) * C42865 + (C175 + C174) * C42864) *
               C47981 * C1177 -
           ((C12003 * C48042 + C12002 * C114) * C42866 +
            (C10949 + C10948) * C42865 + (C387 + C386) * C42864) *
               C47981 * C48342) *
              C48365 +
          ((C184 * C42864 + (C10795 + C10794) * C42865 +
            (C591 * C114 + C592 * C48042) * C42866) *
               C47981 * C1177 -
           ((C2341 * C48042 + C2340 * C114) * C42866 +
            (C10951 + C10950) * C42865 + C394 * C42864) *
               C47981 * C1178 +
           (C395 * C42864 + (C10953 + C10952) * C42865 +
            ((C113 * C1393 + C48228 * C1410) * C114 +
             (C113 * C1411 + C48228 * C1420) * C48042) *
                C42866) *
               C47981 * C48342) *
              C48336)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C114 +
            (C113 * C123 + C48228 * C136) * C48042) *
               C42864 +
           (C11120 * C114 + C11121 * C48042) * C42865 +
           (C11122 * C114 + C11123 * C48042) * C42866) *
              C47981 * C1245 -
          ((C11997 * C48042 + C11996 * C114) * C42866 +
           (C11605 * C48042 + C11604 * C114) * C42865 +
           ((C113 * C319 + C48228 * C337) * C48042 +
            (C113 * C307 + C48228 * C320) * C114) *
               C42864) *
              C47981 * C1246 +
          (((C113 * C308 + C48228 * C321) * C114 +
            (C113 * C322 + C48228 * C338) * C48042) *
               C42864 +
           (C11998 * C114 + C11999 * C48042) * C42865 +
           (C12000 * C114 + C12001 * C48042) * C42866) *
              C47981 * C1247 -
          (((C113 * C6384 + C48228 * C6387) * C48042 +
            (C113 * C6381 + C48228 * C6383) * C114) *
               C42866 +
           (C12475 * C48042 + C12474 * C114) * C42865 +
           ((C113 * C1261 + C48228 * C1271) * C48042 +
            (C113 * C1253 + C48228 * C1262) * C114) *
               C42864) *
              C47981 * C1248 +
          (((C113 * C1254 + C48228 * C1263) * C114 +
            (C113 * C1264 + C48228 * C1272) * C48042) *
               C42864 +
           ((C113 * C6867 + C48228 * C6869) * C114 +
            (C113 * C6870 + C48228 * C6873) * C48042) *
               C42865 +
           ((C113 * C22998 + C48228 * C22999) * C114 +
            (C113 * C23000 + C48228 * C23001) * C48042) *
               C42866) *
              C47981 * C1249) *
         C47998) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C510 +
            (C113 * C123 + C48228 * C136) * C48382 - C11120 * C511 -
            C11121 * C48371 + C11122 * C512 + C11123 * C48345) *
               C42864 +
           (C11120 * C510 + C11121 * C48382 - C11122 * C511 - C11123 * C48371 +
            C12882 * C512 + C12883 * C48345) *
               C42865 +
           (C11122 * C510 + C11123 * C48382 - C12882 * C511 - C12883 * C48371 +
            C12884 * C512 + C12885 * C48345) *
               C42866) *
              C47981 * C1177 +
          ((C11604 * C511 -
            ((C113 * C319 + C48228 * C337) * C48382 +
             (C113 * C307 + C48228 * C320) * C510) +
            C11605 * C48371 - C11996 * C512 - C11997 * C48345) *
               C42864 +
           (C11996 * C511 - (C11605 * C48382 + C11604 * C510) +
            C11997 * C48371 - C13366 * C512 - C13367 * C48345) *
               C42865 +
           (C13366 * C511 - (C11997 * C48382 + C11996 * C510) +
            C13367 * C48371 - (C113 * C7249 + C48228 * C7251) * C512 -
            (C113 * C7252 + C48228 * C7255) * C48345) *
               C42866) *
              C47981 * C1178 +
          (((C113 * C308 + C48228 * C321) * C510 +
            (C113 * C322 + C48228 * C338) * C48382 - C11998 * C511 -
            C11999 * C48371 + C12000 * C512 + C12001 * C48345) *
               C42864 +
           (C11998 * C510 + C11999 * C48382 - C12000 * C511 - C12001 * C48371 +
            C43716 * C512 + C43717 * C48345) *
               C42865 +
           (C12000 * C510 + C12001 * C48382 - C43716 * C511 - C43717 * C48371 +
            (C113 * C23630 + C48228 * C23631) * C512 +
            (C113 * C23632 + C48228 * C23633) * C48345) *
               C42866) *
              C47981 * C48342) *
         C47998) /
            (p * q * std::sqrt(p + q));
    d2ee[223] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48228 * C122) * C831 +
            (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
            C11121 * C48129) *
               C42864 +
           (C11120 * C831 + C11121 * C48311 - C11122 * C832 - C11123 * C48129) *
               C42865 +
           (C11122 * C831 + C11123 * C48311 - C12882 * C832 - C12883 * C48129) *
               C42866) *
              C47981 * C48025 * C713 +
          ((C840 - (C839 + C838) + C841) * C42864 +
           (C11388 - (C11387 + C11386) + C11389) * C42865 +
           (C2476 * C832 - (C587 * C48311 + C586 * C831) + C2477 * C48129) *
               C42866) *
              C47981 * C48025 * C714 +
          (C864 * C42864 + (C11392 + C11391 - C11390 - C11393) * C42865 +
           (C591 * C831 + C592 * C48311 - C2478 * C832 - C2479 * C48129) *
               C42866) *
              C47981 * C48025 * C715 +
          (C865 * C42864 + (C11396 - (C11395 + C11394) + C11397) * C42865 +
           ((C113 * C2451 + C48228 * C2452) * C832 -
            (C596 * C48311 + C595 * C831) +
            (C113 * C2453 + C48228 * C2454) * C48129) *
               C42866) *
              C47981 * C48025 * C48346)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48228 * C122) * C831 +
             (C113 * C123 + C48228 * C136) * C48311 - C11120 * C832 -
             C11121 * C48129) *
                C42864 +
            (C11120 * C831 + C11121 * C48311 - C11122 * C832 -
             C11123 * C48129) *
                C42865 +
            (C11122 * C831 + C11123 * C48311 - C12882 * C832 -
             C12883 * C48129) *
                C42866) *
               C47981 * C1177 +
           ((C11604 * C832 -
             ((C113 * C319 + C48228 * C337) * C48311 +
              (C113 * C307 + C48228 * C320) * C831) +
             C11605 * C48129) *
                C42864 +
            (C11996 * C832 - (C11605 * C48311 + C11604 * C831) +
             C11997 * C48129) *
                C42865 +
            (C13366 * C832 - (C11997 * C48311 + C11996 * C831) +
             C13367 * C48129) *
                C42866) *
               C47981 * C1178 +
           (((C113 * C308 + C48228 * C321) * C831 +
             (C113 * C322 + C48228 * C338) * C48311 - C11998 * C832 -
             C11999 * C48129) *
                C42864 +
            (C11998 * C831 + C11999 * C48311 - C12000 * C832 -
             C12001 * C48129) *
                C42865 +
            (C12000 * C831 + C12001 * C48311 - C43716 * C832 -
             C43717 * C48129) *
                C42866) *
               C47981 * C48342) *
              C48296 +
          (((C840 - (C839 + C838) + C841) * C42864 +
            (C11388 - (C11387 + C11386) + C11389) * C42865 +
            (C2476 * C832 - (C587 * C48311 + C586 * C831) + C2477 * C48129) *
                C42866) *
               C47981 * C1177 +
           ((C1037 + C1036 - C1059 - C1060) * C42864 +
            (C11598 + C11597 - C11596 - C11599) * C42865 +
            (C2338 * C831 + C2339 * C48311 - C13090 * C832 - C13091 * C48129) *
                C42866) *
               C47981 * C1178 +
           ((C1712 - (C1697 + C1696) + C1713) * C42864 +
            (C12338 - (C12337 + C12336) + C12339) * C42865 +
            ((C113 * C7736 + C48228 * C7739) * C832 -
             (C12003 * C48311 + C12002 * C831) +
             (C113 * C7740 + C48228 * C7742) * C48129) *
                C42866) *
               C47981 * C48342) *
              C48008)) /
            (p * q * std::sqrt(p + q));
    d2ee[224] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C48228 * C122) * C114 +
                     (C113 * C123 + C48228 * C136) * C48042) *
                        C42864 +
                    (C11120 * C114 + C11121 * C48042) * C42865 +
                    (C11122 * C114 + C11123 * C48042) * C42866) *
                       C47981 * C48025 * C108 -
                   ((C587 * C48042 + C586 * C114) * C42866 +
                    (C10793 + C10792) * C42865 + (C175 + C174) * C42864) *
                       C47981 * C48025 * C109 +
                   (C184 * C42864 + (C10795 + C10794) * C42865 +
                    (C591 * C114 + C592 * C48042) * C42866) *
                       C47981 * C48025 * C110 -
                   ((C596 * C48042 + C595 * C114) * C42866 +
                    (C10797 + C10796) * C42865 + C185 * C42864) *
                       C47981 * C48025 * C111 +
                   (C186 * C42864 + (C10799 + C10798) * C42865 +
                    ((C113 * C522 + C48228 * C541) * C114 +
                     (C113 * C542 + C48228 * C552) * C48042) *
                        C42866) *
                       C47981 * C48025 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48228 * C122) * C114 +
                      (C113 * C123 + C48228 * C136) * C48042) *
                         C42864 +
                     (C11120 * C114 + C11121 * C48042) * C42865 +
                     (C11122 * C114 + C11123 * C48042) * C42866) *
                        C47981 * C48381 -
                    ((C11997 * C48042 + C11996 * C114) * C42866 +
                     (C11605 * C48042 + C11604 * C114) * C42865 +
                     ((C113 * C319 + C48228 * C337) * C48042 +
                      (C113 * C307 + C48228 * C320) * C114) *
                         C42864) *
                        C47981 * C48369 +
                    (((C113 * C308 + C48228 * C321) * C114 +
                      (C113 * C322 + C48228 * C338) * C48042) *
                         C42864 +
                     (C11998 * C114 + C11999 * C48042) * C42865 +
                     (C12000 * C114 + C12001 * C48042) * C42866) *
                        C47981 * C48342) *
                       C302 +
                   (((C385 + C384) * C42864 + (C10947 + C10946) * C42865 +
                     (C2338 * C114 + C2339 * C48042) * C42866) *
                        C47981 * C48369 -
                    ((C587 * C48042 + C586 * C114) * C42866 +
                     (C10793 + C10792) * C42865 + (C175 + C174) * C42864) *
                        C47981 * C48381 -
                    ((C12003 * C48042 + C12002 * C114) * C42866 +
                     (C10949 + C10948) * C42865 + (C387 + C386) * C42864) *
                        C47981 * C48342) *
                       C303 +
                   ((C184 * C42864 + (C10795 + C10794) * C42865 +
                     (C591 * C114 + C592 * C48042) * C42866) *
                        C47981 * C48381 -
                    ((C2341 * C48042 + C2340 * C114) * C42866 +
                     (C10951 + C10950) * C42865 + C394 * C42864) *
                        C47981 * C48369 +
                    (C395 * C42864 + (C10953 + C10952) * C42865 +
                     ((C113 * C1393 + C48228 * C1410) * C114 +
                      (C113 * C1411 + C48228 * C1420) * C48042) *
                         C42866) *
                        C47981 * C48342) *
                       C48336)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48228 * C122) * C114 +
                      (C113 * C123 + C48228 * C136) * C48042) *
                         C42864 +
                     (C11120 * C114 + C11121 * C48042) * C42865 +
                     (C11122 * C114 + C11123 * C48042) * C42866) *
                        C47981 * C1177 -
                    ((C11997 * C48042 + C11996 * C114) * C42866 +
                     (C11605 * C48042 + C11604 * C114) * C42865 +
                     ((C113 * C319 + C48228 * C337) * C48042 +
                      (C113 * C307 + C48228 * C320) * C114) *
                         C42864) *
                        C47981 * C1178 +
                    (((C113 * C308 + C48228 * C321) * C114 +
                      (C113 * C322 + C48228 * C338) * C48042) *
                         C42864 +
                     (C11998 * C114 + C11999 * C48042) * C42865 +
                     (C12000 * C114 + C12001 * C48042) * C42866) *
                        C47981 * C48342) *
                       C48378 +
                   (((C385 + C384) * C42864 + (C10947 + C10946) * C42865 +
                     (C2338 * C114 + C2339 * C48042) * C42866) *
                        C47981 * C1178 -
                    ((C587 * C48042 + C586 * C114) * C42866 +
                     (C10793 + C10792) * C42865 + (C175 + C174) * C42864) *
                        C47981 * C1177 -
                    ((C12003 * C48042 + C12002 * C114) * C42866 +
                     (C10949 + C10948) * C42865 + (C387 + C386) * C42864) *
                        C47981 * C48342) *
                       C48365 +
                   ((C184 * C42864 + (C10795 + C10794) * C42865 +
                     (C591 * C114 + C592 * C48042) * C42866) *
                        C47981 * C1177 -
                    ((C2341 * C48042 + C2340 * C114) * C42866 +
                     (C10951 + C10950) * C42865 + C394 * C42864) *
                        C47981 * C1178 +
                    (C395 * C42864 + (C10953 + C10952) * C42865 +
                     ((C113 * C1393 + C48228 * C1410) * C114 +
                      (C113 * C1411 + C48228 * C1420) * C48042) *
                         C42866) *
                        C47981 * C48342) *
                       C48336)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C48228 * C122) * C114 +
                     (C113 * C123 + C48228 * C136) * C48042) *
                        C42864 +
                    (C11120 * C114 + C11121 * C48042) * C42865 +
                    (C11122 * C114 + C11123 * C48042) * C42866) *
                       C47981 * C1245 -
                   ((C11997 * C48042 + C11996 * C114) * C42866 +
                    (C11605 * C48042 + C11604 * C114) * C42865 +
                    ((C113 * C319 + C48228 * C337) * C48042 +
                     (C113 * C307 + C48228 * C320) * C114) *
                        C42864) *
                       C47981 * C1246 +
                   (((C113 * C308 + C48228 * C321) * C114 +
                     (C113 * C322 + C48228 * C338) * C48042) *
                        C42864 +
                    (C11998 * C114 + C11999 * C48042) * C42865 +
                    (C12000 * C114 + C12001 * C48042) * C42866) *
                       C47981 * C1247 -
                   (((C113 * C6384 + C48228 * C6387) * C48042 +
                     (C113 * C6381 + C48228 * C6383) * C114) *
                        C42866 +
                    (C12475 * C48042 + C12474 * C114) * C42865 +
                    ((C113 * C1261 + C48228 * C1271) * C48042 +
                     (C113 * C1253 + C48228 * C1262) * C114) *
                        C42864) *
                       C47981 * C1248 +
                   (((C113 * C1254 + C48228 * C1263) * C114 +
                     (C113 * C1264 + C48228 * C1272) * C48042) *
                        C42864 +
                    ((C113 * C6867 + C48228 * C6869) * C114 +
                     (C113 * C6870 + C48228 * C6873) * C48042) *
                        C42865 +
                    ((C113 * C22998 + C48228 * C22999) * C114 +
                     (C113 * C23000 + C48228 * C23001) * C48042) *
                        C42866) *
                       C47981 * C1249) *
                  C47998) /
                     (p * q * std::sqrt(p + q));
}
