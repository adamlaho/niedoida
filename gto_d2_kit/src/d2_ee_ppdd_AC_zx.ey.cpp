/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AC_zx.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_13_31(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46960 = 0 * ce;
    const double C46959 = ce * de;
    const double C46958 = 0 * de;
    const double C46957 = 0 * de;
    const double C46956 = ce + de;
    const double C46955 = 0 * de;
    const double C46954 = xC - xD;
    const double C47015 = 0 * de;
    const double C47075 = ae + be;
    const double C47074 = zA - zB;
    const double C47089 = ae * be;
    const double C47087 = 0 * be;
    const double C47103 = zP - zQ;
    const double C47102 = p + q;
    const double C47101 = p * q;
    const double C47100 = xP - xQ;
    const double C47108 = bs[3];
    const double C47119 = bs[4];
    const double C47127 = bs[5];
    const double C47146 = bs[6];
    const double C47176 = bs[7];
    const double C47302 = yP - yQ;
    const double C47570 = bs[2];
    const double C119 = bs[0];
    const double C48005 = xA - xB;
    const double C48030 = yC - yD;
    const double C48042 = zC - zD;
    const double C48212 = yA - yB;
    const double C46967 = C46960 / C46956;
    const double C46964 = C46958 / C46956;
    const double C46962 = 2 * C46956;
    const double C46961 = std::pow(C46956, 2);
    const double C46966 = C46959 * C46954;
    const double C46965 = C46954 * C46958;
    const double C46963 = C46954 * C46957;
    const double C47979 = C46954 * de;
    const double C47978 = C46954 * ce;
    const double C47977 = std::pow(C46954, 2);
    const double C47016 = C47015 / C46956;
    const double C47088 = std::pow(C47075, 2);
    const double C47111 = C46956 * C47075;
    const double C140 = (-(std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                           (zP - zQ) * (xP - xQ) * ae * ce) /
                         C46956) /
                        C47075;
    const double C48015 = 2 * C47075;
    const double C48246 = std::pow(C47074, 2);
    const double C48332 = C47074 * be;
    const double C48330 = C47074 * ae;
    const double C47091 = C47089 * C47074;
    const double C47109 = C47103 * ae;
    const double C47344 = std::pow(C47103, 2);
    const double C47104 = 2 * C47101;
    const double C47110 = C47103 * C47100;
    const double C47129 = std::pow(C47100, 2);
    const double C47220 = C47100 * ce;
    const double C47311 = std::pow(C47302, 2);
    const double C48006 = std::pow(C48005, 2);
    const double C48309 = C48005 * be;
    const double C48308 = C48005 * ae;
    const double C48031 = std::pow(C48030, 2);
    const double C48086 = C48030 * de;
    const double C48084 = C48030 * ce;
    const double C48043 = std::pow(C48042, 2);
    const double C48126 = C48042 * de;
    const double C48124 = C48042 * ce;
    const double C48231 = std::pow(C48212, 2);
    const double C48331 = C48212 * be;
    const double C48329 = C48212 * ae;
    const double C47991 = std::pow(C46962, -1);
    const double C48303 = std::pow(C46962, -2);
    const double C46968 = 2 * C46961;
    const double C48307 = C46961 * C46962;
    const double C48306 = 4 * C46961;
    const double C46970 = C46965 / C46956;
    const double C46969 = C46963 / C46956;
    const double C48296 = std::pow(C47978, 2);
    const double C47980 = C47977 * C46959;
    const double C47090 = 2 * C47088;
    const double C48310 = std::pow(C48015, -1);
    const double C48247 = C48246 * C47089;
    const double C47113 = C47108 * C47109;
    const double C47121 = C47119 * C47109;
    const double C47132 = C47127 * C47109;
    const double C47152 = C47146 * C47109;
    const double C47184 = C47176 * C47109;
    const double C47105 = C47104 / C47102;
    const double C126 = (-(bs[1] * C47109 * C47104) / C47102) / C47075;
    const double C120 = -(C47100 * bs[1] * C47104) / C47102;
    const double C297 = -(C47302 * bs[1] * C47104) / C47102;
    const double C486 = -(C47103 * bs[1] * C47104) / C47102;
    const double C47114 = C47110 * ae;
    const double C47223 = C47119 * C47220;
    const double C47227 = C47127 * C47220;
    const double C47237 = C47108 * C47220;
    const double C47250 = C47146 * C47220;
    const double C47270 = C47176 * C47220;
    const double C127 = (bs[1] * C47220 * C47104) / (C47102 * C46956);
    const double C48007 = C48006 * C47089;
    const double C48032 = C48031 * C46959;
    const double C48311 = std::pow(C48084, 2);
    const double C48044 = C48043 * C46959;
    const double C48313 = std::pow(C48124, 2);
    const double C48232 = C48231 * C47089;
    const double C46977 = C46958 / C46968;
    const double C46974 = C46957 / C46968;
    const double C46973 = C46955 / C46968;
    const double C48342 = 4 * C48307;
    const double C48341 = C46956 * C48306;
    const double C46975 = 0 - C46970;
    const double C46972 = 0 - C46969;
    const double C47981 = C47980 / C46956;
    const double C48248 = C48247 / C47075;
    const double C47107 = -C47105;
    const double C47118 = std::pow(C47105, 4);
    const double C47145 = std::pow(C47105, 6);
    const double C141 =
        (-(C47100 * std::pow(-C47105, 3) * bs[3] * C47103 * C47100 * ae * ce) /
         C46956) /
            C47075 -
        (std::pow(C47105, 2) * bs[2] * C47103 * ae * ce) / (C46956 * C47075);
    const double C47571 = std::pow(C47105, 2);
    const double C128 =
        (C47100 * std::pow(C47105, 2) * bs[2] * C47109) / C47075;
    const double C129 =
        (ce * bs[1] * C47104) / (C47102 * C46956) -
        (C47100 * std::pow(C47105, 2) * bs[2] * C47220) / C46956;
    const double C47116 = C47114 * ce;
    const double C48008 = C48007 / C47075;
    const double C48033 = C48032 / C46956;
    const double C48045 = C48044 / C46956;
    const double C48233 = C48232 / C47075;
    const double C46980 = C46975 * ce;
    const double C46979 = C46972 * ce;
    const double C47982 = -C47981;
    const double C48249 = -C48248;
    const double C47112 = std::pow(C47107, 3);
    const double C47126 = std::pow(C47107, 5);
    const double C47175 = std::pow(C47107, 7);
    const double C47123 = C47118 * C47121;
    const double C47224 = C47119 * C47118;
    const double C47225 = C47118 * C47223;
    const double C47155 = C47145 * C47152;
    const double C47255 = C47145 * C47250;
    const double C47271 = C47146 * C47145;
    const double C47572 = C47570 * C47571;
    const double C307 = -(C47302 * C47571 * C47570 * C47220) / C46956;
    const double C308 = (C47302 * C47571 * C47570 * C47109) / C47075;
    const double C496 = -(C47103 * C47571 * C47570 * C47220) / C46956;
    const double C497 = (C47103 * C47571 * C47570 * C47109) / C47075 -
                        (ae * bs[1] * C47104) / (C47102 * C47075);
    const double C47120 = C47119 * C47116;
    const double C47130 = C47127 * C47116;
    const double C47149 = C47146 * C47116;
    const double C47181 = C47176 * C47116;
    const double C48009 = -C48008;
    const double C48034 = -C48033;
    const double C48046 = -C48045;
    const double C48234 = -C48233;
    const double C46984 = C46980 / C46956;
    const double C46983 = C46979 / C46956;
    const double C47983 = std::exp(C47982);
    const double C48250 = std::exp(C48249);
    const double C47115 = C47112 * C47113;
    const double C47221 = C47108 * C47112;
    const double C47238 = C47112 * C47237;
    const double C326 =
        (-((yP - yQ) * C47112 * C47108 * C47116) / C46956) / C47075;
    const double C515 =
        (-(C47103 * C47112 * C47108 * C47116) / C46956) / C47075 -
        (ae * std::pow(C47105, 2) * bs[2] * C47100 * ce) / C47111;
    const double C47134 = C47126 * C47132;
    const double C47230 = C47127 * C47126;
    const double C47231 = C47126 * C47227;
    const double C47188 = C47175 * C47184;
    const double C47275 = C47175 * C47270;
    const double C47128 = C47123 * ce;
    const double C47125 = C47100 * C47123;
    const double C47700 = C47103 * C47123;
    const double C47729 = C47302 * C47123;
    const double C47229 = C47100 * C47224;
    const double C47228 = C47224 * ce;
    const double C47578 = C47224 * C47129;
    const double C47672 = C47224 * C47311;
    const double C47703 = C47224 * C47344;
    const double C47730 = C47302 * C47224;
    const double C47793 = C47103 * C47224;
    const double C47792 = C47224 * ae;
    const double C47240 = C47100 * C47225;
    const double C47319 = C47302 * C47225;
    const double C47343 = ae * C47225;
    const double C47341 = C47103 * C47225;
    const double C47158 = C47155 * C47129;
    const double C47177 = C47155 * ce;
    const double C47173 = C47100 * C47155;
    const double C47822 = C47155 * C47311;
    const double C47850 = C47302 * C47155;
    const double C47868 = C47103 * C47155;
    const double C47258 = C47100 * C47255;
    const double C47391 = C47255 * C47311;
    const double C47411 = C47302 * C47255;
    const double C47436 = C47255 * C47344;
    const double C47536 = ae * C47255;
    const double C47534 = C47103 * C47255;
    const double C47278 = C47271 * C47129;
    const double C47277 = C47100 * C47271;
    const double C47276 = C47271 * ce;
    const double C47830 = C47271 * C47311;
    const double C47853 = C47302 * C47271;
    const double C47872 = C47271 * C47344;
    const double C121 = C47572 * C47129 - (bs[1] * C47104) / C47102;
    const double C296 = C47302 * C47100 * C47572;
    const double C301 = C47572 * C47311 - (bs[1] * C47104) / C47102;
    const double C485 = C47103 * C47100 * C47572;
    const double C490 = C47572 * C47344 - (bs[1] * C47104) / C47102;
    const double C935 = C47103 * C47302 * C47572;
    const double C47122 = C47118 * C47120;
    const double C47133 = C47126 * C47130;
    const double C47154 = C47145 * C47149;
    const double C47187 = C47175 * C47181;
    const double C48010 = std::exp(C48009);
    const double C48035 = std::exp(C48034);
    const double C48047 = std::exp(C48046);
    const double C48235 = std::exp(C48234);
    const double C46988 = C46984 - C46974;
    const double C46987 = C46983 - C46973;
    const double C46971 = C46966 * C47983;
    const double C47985 = C47983 * C47978;
    const double C47984 = C47983 / C46962;
    const double C47993 = C47991 * C47983;
    const double C48299 = C47983 * C47979;
    const double C48339 = C48303 * C47983;
    const double C48333 = C47983 * C48296;
    const double C151 = C48250 * C141;
    const double C149 = C48250 * C128;
    const double C4931 = C48250 * C308;
    const double C47092 = C47091 * C48250;
    const double C113 = -(2 * ae * be * (zA - zB) * C48250) / (ae + be);
    const double C10633 =
        ((C48250 - (C47074 * 2 * ae * be * C47074 * C48250) / C47075) * ae) /
            C47075 -
        (0 * be) / (2 * std::pow(C47075, 2));
    const double C10634 =
        (0 * ae) / C47075 - (ae * be * C47074 * C48250) / std::pow(C47075, 2);
    const double C31647 =
        (-(0 * be) / C47075) / (2 * C47075) -
        ((C48250 - (C47074 * 2 * ae * be * C47074 * C48250) / C47075) * be) /
            C47075;
    const double C31648 =
        (-(2 * ae * be * C47074 * C48250) / C47075) / (2 * C47075) -
        (0 * be) / C47075;
    const double C48367 = C48310 * C48250;
    const double C48366 = C48250 * C48330;
    const double C31645 = -(C48250 * C48332) / C47075;
    const double C142 =
        (-(C47100 * C47115 * ce) / C46956) / C47075 -
        (C47112 * C47108 * C47116) / C47111 +
        C47100 * ((-(C47100 * std::pow(C47105, 4) * bs[4] * C47116) / C46956) /
                      C47075 -
                  (C47115 * ce) / C47111);
    const double C130 =
        (std::pow(C47105, 2) * bs[2] * C47109 + C47115 * C47129) / C47075;
    const double C132 =
        (2 * C47100 * C47115 + C47100 * (C47115 + C47123 * C47129)) / C47075;
    const double C306 = (C47302 * C47100 * C47115) / C47075;
    const double C310 = (C47302 * (C47115 + C47123 * C47129)) / C47075;
    const double C316 = (C47571 * C47570 * C47109 + C47115 * C47311) / C47075;
    const double C495 =
        (C47103 * C47100 * C47115 + C47100 * C47572 * ae) / C47075;
    const double C505 =
        (C47571 * C47570 * C47109 + C47103 * (C47103 * C47115 + C47572 * ae) +
         C47103 * C47572 * ae) /
        C47075;
    const double C940 =
        (C47103 * C47302 * C47115 + C47302 * C47572 * ae) / C47075;
    const double C1172 =
        (2 * C47302 * C47115 + C47302 * (C47115 + C47123 * C47311)) / C47075;
    const double C47241 = C47221 * ce;
    const double C47577 = C47100 * C47221;
    const double C47664 = C47302 * C47221;
    const double C47702 = C47103 * C47221;
    const double C47701 = C47221 * ae;
    const double C499 = (C47103 * (C47115 + C47123 * C47129) +
                         (C47572 + C47221 * C47129) * ae) /
                        C47075;
    const double C1315 = (C47103 * (C47115 + C47123 * C47311) +
                          (C47572 + C47221 * C47311) * ae) /
                         C47075;
    const double C2026 =
        (2 * (C47103 * C47115 + C47572 * ae) +
         C47103 * (C47115 + C47103 * (C47103 * C47123 + C47221 * ae) +
                   C47103 * C47221 * ae) +
         (C47572 + C47221 * C47344) * ae) /
        C47075;
    const double C122 =
        2 * C47100 * C47572 + C47100 * (C47572 + C47221 * C47129);
    const double C298 = C47302 * (C47572 + C47221 * C47129);
    const double C487 = C47103 * (C47572 + C47221 * C47129);
    const double C1163 =
        2 * C47302 * C47572 + C47302 * (C47572 + C47221 * C47311);
    const double C1300 = C47103 * (C47572 + C47221 * C47311);
    const double C2017 =
        2 * C47103 * C47572 + C47103 * (C47572 + C47221 * C47344);
    const double C131 = -(C47100 * (C47100 * C47238 + C47572 * ce) +
                          C47571 * C47570 * C47220 + C47100 * C47572 * ce) /
                        C46956;
    const double C309 = -(C47302 * (C47100 * C47238 + C47572 * ce)) / C46956;
    const double C317 = -(C47238 * C47311 + C47571 * C47570 * C47220) / C46956;
    const double C498 = -(C47103 * (C47100 * C47238 + C47572 * ce)) / C46956;
    const double C506 = -(C47238 * C47344 + C47571 * C47570 * C47220) / C46956;
    const double C941 = -(C47103 * C47302 * C47238) / C46956;
    const double C1171 = (-2 * C47302 * C47238) / C46956 -
                         (C47302 * (C47225 * C47311 + C47238)) / C46956;
    const double C1314 = -(C47103 * (C47225 * C47311 + C47238)) / C46956;
    const double C2025 = (-2 * C47103 * C47238) / C46956 -
                         (C47103 * (C47225 * C47344 + C47238)) / C46956;
    const double C4933 = C48250 * C326;
    const double C47136 = C47134 * C47129;
    const double C47147 = C47134 * ce;
    const double C47143 = C47100 * C47134;
    const double C47741 = C47134 * C47311;
    const double C47767 = C47302 * C47134;
    const double C47791 = C47103 * C47134;
    const double C1173 =
        (3 * (C47115 + C47123 * C47311) +
         C47302 * (2 * C47302 * C47123 + C47302 * (C47123 + C47134 * C47311))) /
        C47075;
    const double C47232 = C47230 * C47129;
    const double C47252 = C47100 * C47230;
    const double C47251 = C47230 * ce;
    const double C47750 = C47230 * C47311;
    const double C47770 = C47302 * C47230;
    const double C47794 = C47230 * C47344;
    const double C47870 = C47103 * C47230;
    const double C47869 = C47230 * ae;
    const double C47233 = C47100 * C47231;
    const double C47324 = C47231 * C47311;
    const double C47347 = C47231 * C47344;
    const double C47373 = C47302 * C47231;
    const double C47435 = ae * C47231;
    const double C47433 = C47103 * C47231;
    const double C47191 = C47188 * C47129;
    const double C47279 = C47100 * C47275;
    const double C47486 = C47275 * C47311;
    const double C47510 = C47302 * C47275;
    const double C47538 = C47275 * C47344;
    const double C47131 = C47128 / C47111;
    const double C318 = (C47100 * C47115 + C47125 * C47311) / C47075;
    const double C47245 = C47229 * ce;
    const double C47582 = 2 * C47229;
    const double C47661 = C47302 * C47229;
    const double C47710 = C47103 * C47229;
    const double C47709 = C47229 * ae;
    const double C47579 = C47221 + C47578;
    const double C47673 = C47221 + C47672;
    const double C47705 = C47221 + C47703;
    const double C47749 = 2 * C47730;
    const double C47769 = C47103 * C47730;
    const double C47768 = C47730 * ae;
    const double C47798 = 2 * C47793;
    const double C47796 = C47793 * ae;
    const double C1308 = -(C47319 * C47344 + C47302 * C47238) / C46956;
    const double C47346 = C47343 / C47111;
    const double C47161 = C47134 + C47158;
    const double C47182 = C47177 / C47111;
    const double C47183 = 2 * C47173;
    const double C47180 = C47173 * ce;
    const double C47745 = C47173 * C47311;
    const double C47777 = C47302 * C47173;
    const double C47806 = C47103 * C47173;
    const double C47823 = C47134 + C47822;
    const double C47854 = C47103 * C47850;
    const double C47393 = C47391 + C47231;
    const double C47414 = C47411 * C47344;
    const double C47485 = -2 * C47411;
    const double C47509 = ae * C47411;
    const double C47506 = C47103 * C47411;
    const double C47441 = C47436 + C47231;
    const double C47542 = C47536 / C47111;
    const double C47544 = -2 * C47534;
    const double C47540 = ae * C47534;
    const double C47281 = C47230 + C47278;
    const double C47280 = C47277 * ce;
    const double C47757 = C47277 * C47311;
    const double C47780 = C47302 * C47277;
    const double C47809 = C47277 * C47344;
    const double C47831 = C47230 + C47830;
    const double C47856 = C47853 * C47344;
    const double C47876 = C47230 + C47872;
    const double C143 =
        2 * ((-(C47100 * C47122) / C46956) / C47075 - (C47115 * ce) / C47111) -
        ((C47115 + C47123 * std::pow(C47100, 2)) * ce) / C47111 +
        C47100 *
            ((-(C47100 * C47123 * ce) / C46956) / C47075 - C47122 / C47111 +
             C47100 *
                 ((-(C47100 * std::pow(C47107, 5) * bs[5] * C47116) / C46956) /
                      C47075 -
                  (C47123 * ce) / C47111));
    const double C327 = (yP - yQ) * ((-(C47100 * C47122) / C46956) / C47075 -
                                     (C47115 * ce) / C47111);
    const double C331 = (-(C47122 * std::pow(yP - yQ, 2)) / C46956) / C47075 -
                        (C47112 * C47108 * C47116) / C47111;
    const double C516 = C47103 * ((-(C47100 * C47122) / C46956) / C47075 -
                                  (C47115 * ce) / C47111) -
                        (ae * (C47100 * C47112 * C47108 * C47100 * ce +
                               bs[2] * std::pow(C47105, 2) * ce)) /
                            C47111;
    const double C520 = (-(ae * C47103 * C47238) / C46956) / C47075 -
                        (C47112 * C47108 * C47116) / C47111 +
                        C47103 * ((-(C47103 * C47122) / C46956) / C47075 -
                                  (ae * C47238) / C47111);
    const double C950 = (-(C47103 * C47302 * C47122) / C46956) / C47075 -
                        (ae * C47302 * C47238) / C47111;
    const double C47135 = C47100 * C47133;
    const double C47144 = C47133 / C47111;
    const double C47342 = C47103 * C47133;
    const double C47372 = C47302 * C47133;
    const double C1181 =
        (-2 * C47302 * C47122) / C47111 +
        C47302 * ((-(C47133 * std::pow(C47302, 2)) / C46956) / C47075 -
                  C47122 / C47111);
    const double C1324 =
        (-(ae * C47103 * C47319) / C46956) / C47075 -
        (C47302 * C47122) / C47111 +
        C47103 * ((-(C47103 * C47302 * C47133) / C46956) / C47075 -
                  (ae * C47319) / C47111);
    const double C1327 =
        C47103 * ((-(C47133 * C47311) / C46956) / C47075 - C47122 / C47111) -
        (ae * (C47225 * C47311 + C47238)) / C47111;
    const double C2035 =
        2 * ((-(C47103 * C47122) / C46956) / C47075 - (ae * C47238) / C47111) -
        (ae * (C47225 * std::pow(C47103, 2) + C47238)) / C47111 +
        C47103 *
            ((-(ae * C47103 * C47225) / C46956) / C47075 - C47122 / C47111 +
             C47103 * ((-(C47103 * C47133) / C46956) / C47075 -
                       (ae * C47225) / C47111));
    const double C47157 = C47100 * C47154;
    const double C47174 = C47154 / C47111;
    const double C47381 = C47154 * C47311;
    const double C47409 = C47302 * C47154;
    const double C47434 = C47103 * C47154;
    const double C47190 = C47100 * C47187;
    const double C47475 = C47187 * C47311;
    const double C47508 = C47302 * C47187;
    const double C47535 = C47103 * C47187;
    const double C48344 = C48310 * C48010;
    const double C48343 = C48010 * C48308;
    const double C4779 = -(C48010 * C48309) / C47075;
    const double C48085 = C48035 / C46962;
    const double C48087 = C48035 * C48084;
    const double C48094 = C47991 * C48035;
    const double C48317 = C48035 * C48086;
    const double C48347 = C48303 * C48035;
    const double C48345 = C48035 * C48311;
    const double C48125 = C48047 / C46962;
    const double C48127 = C48047 * C48124;
    const double C48134 = C47991 * C48047;
    const double C48323 = C48047 * C48126;
    const double C48350 = C48303 * C48047;
    const double C48348 = C48047 * C48313;
    const double C48365 = C48310 * C48235;
    const double C48364 = C48235 * C48329;
    const double C16333 = -(C48235 * C48331) / C47075;
    const double C46993 = C46988 / C46962;
    const double C46992 = C46954 * C46988;
    const double C46991 = C46987 + C46964;
    const double C46978 = C46971 / C46961;
    const double C46976 = 2 * C46971;
    const double C47986 = C47985 * C47979;
    const double C47992 = C47985 / C46968;
    const double C48300 = C47991 * C47985;
    const double C48298 = C47985 / C46956;
    const double C287 = (C47983 * std::pow(C47979, 2)) / C46961 + C47984;
    const double C47994 = C47993 * C47979;
    const double C48304 = C47978 * C47993;
    const double C48302 = 2 * C47993;
    const double C48351 = C47993 / C48306;
    const double C106 = C47993 / C48342;
    const double C2901 = C47993 / C46962;
    const double C48335 = C48299 / C46956;
    const double C288 = (-2 * C47991 * C48299) / C46956;
    const double C48368 = C48333 / C46961;
    const double C42890 = ((0 * ae) / C47075 - C47092 / C47088) / (2 * C47075) -
                          (0 * be) / C47075;
    const double C152 = C113 * C121;
    const double C150 = C113 * C129;
    const double C148 = C113 * C120;
    const double C337 = C113 * C296;
    const double C526 = C113 * C485;
    const double C4947 = C113 * C301;
    const double C4932 = C113 * C307;
    const double C4930 = C113 * C297;
    const double C5585 = C113 * C935;
    const double C10644 = C10633 * C121;
    const double C10642 = C10633 * C129;
    const double C10638 = C10633 * C120;
    const double C10830 = C10633 * C296;
    const double C11024 = C10633 * C485;
    const double C26234 = C10633 * C301;
    const double C26224 = C10633 * C307;
    const double C26220 = C10633 * C297;
    const double C26850 = C10633 * C935;
    const double C10636 = C10634 * C485;
    const double C26222 = C10634 * C935;
    const double C31658 = C31647 * C121;
    const double C31656 = C31647 * C129;
    const double C31652 = C31647 * C120;
    const double C31844 = C31647 * C296;
    const double C32038 = C31647 * C485;
    const double C37498 = C31647 * C301;
    const double C37488 = C31647 * C307;
    const double C37484 = C31647 * C297;
    const double C38114 = C31647 * C935;
    const double C31650 = C31648 * C485;
    const double C37486 = C31648 * C935;
    const double C42889 =
        (((C48250 - (C47074 * 2 * C47092) / C47075) * ae) / C47075 -
         C47087 / C47090) /
            (2 * C47075) -
        ((C47074 * ((0 * ae) / C47075 - C47092 / C47088) + C48367) * be) /
            C47075;
    const double C42887 = C48367 / C48015;
    const double C10631 = C48366 / C47075;
    const double C42885 = C48250 / C48015 - (C48366 * C48332) / C47088;
    const double C42886 = C48366 / C47090 - (C48367 * C48332) / C47075;
    const double C31657 = C31645 * C141;
    const double C31653 = C31645 * C128;
    const double C37489 = C31645 * C326;
    const double C37485 = C31645 * C308;
    const double C155 = C48250 * C142;
    const double C31663 = C31645 * C142;
    const double C153 = C48250 * C130;
    const double C31659 = C31645 * C130;
    const double C157 = C48250 * C132;
    const double C31669 = C31645 * C132;
    const double C338 = C48250 * C306;
    const double C31845 = C31645 * C306;
    const double C342 = C48250 * C310;
    const double C31855 = C31645 * C310;
    const double C4948 = C48250 * C316;
    const double C37499 = C31645 * C316;
    const double C527 = C48250 * C495;
    const double C10637 = C48367 * C495;
    const double C31651 = C48367 * C495;
    const double C32039 = C31645 * C495;
    const double C5586 = C48250 * C940;
    const double C26223 = C48367 * C940;
    const double C37487 = C48367 * C940;
    const double C38115 = C31645 * C940;
    const double C5869 = C48250 * C1172;
    const double C38349 = C31645 * C1172;
    const double C47242 = C47240 + C47241;
    const double C507 =
        (C47100 * C47115 + C47103 * (C47103 * C47125 + C47577 * ae) +
         C47103 * C47577 * ae) /
        C47075;
    const double C942 =
        (C47103 * C47302 * C47125 + C47302 * C47577 * ae) / C47075;
    const double C302 = C47100 * C47572 + C47577 * C47311;
    const double C491 = C47100 * C47572 + C47577 * C47344;
    const double C936 = C47103 * C47302 * C47577;
    const double C1162 =
        2 * C47302 * C47577 + C47302 * (C47577 + C47229 * C47311);
    const double C1299 = C47103 * (C47577 + C47229 * C47311);
    const double C2016 =
        2 * C47103 * C47577 + C47103 * (C47577 + C47229 * C47344);
    const double C1309 =
        (C47302 * C47115 + C47103 * (C47103 * C47302 * C47123 + C47664 * ae) +
         C47103 * C47664 * ae) /
        C47075;
    const double C2420 =
        (2 * (C47103 * C47729 + C47664 * ae) +
         C47103 * (C47729 + C47103 * (C47103 * C47302 * C47134 + C47730 * ae) +
                   C47103 * C47730 * ae) +
         (C47664 + C47730 * C47344) * ae) /
        C47075;
    const double C1297 = C47302 * C47572 + C47664 * C47344;
    const double C2417 =
        2 * C47103 * C47664 + C47103 * (C47664 + C47730 * C47344);
    const double C47704 = C47700 + C47701;
    const double C531 = C48250 * C499;
    const double C10647 = C48367 * C499;
    const double C31661 = C48367 * C499;
    const double C32049 = C31645 * C499;
    const double C6059 = C48250 * C1315;
    const double C26233 = C48367 * C1315;
    const double C37497 = C48367 * C1315;
    const double C38527 = C31645 * C1315;
    const double C156 = C113 * C122;
    const double C10654 = C10633 * C122;
    const double C31668 = C31647 * C122;
    const double C341 = C113 * C298;
    const double C10840 = C10633 * C298;
    const double C31854 = C31647 * C298;
    const double C530 = C113 * C487;
    const double C10646 = C10634 * C487;
    const double C11034 = C10633 * C487;
    const double C31660 = C31648 * C487;
    const double C32048 = C31647 * C487;
    const double C5868 = C113 * C1163;
    const double C27084 = C10633 * C1163;
    const double C38348 = C31647 * C1163;
    const double C6058 = C113 * C1300;
    const double C26232 = C10634 * C1300;
    const double C27262 = C10633 * C1300;
    const double C37496 = C31648 * C1300;
    const double C38526 = C31647 * C1300;
    const double C154 = C113 * C131;
    const double C10648 = C10633 * C131;
    const double C31662 = C31647 * C131;
    const double C339 = C113 * C309;
    const double C10834 = C10633 * C309;
    const double C31848 = C31647 * C309;
    const double C4945 = C113 * C317;
    const double C26230 = C10633 * C317;
    const double C37494 = C31647 * C317;
    const double C528 = C113 * C498;
    const double C10640 = C10634 * C498;
    const double C11028 = C10633 * C498;
    const double C31654 = C31648 * C498;
    const double C32042 = C31647 * C498;
    const double C5583 = C113 * C941;
    const double C26226 = C10634 * C941;
    const double C26846 = C10633 * C941;
    const double C37490 = C31648 * C941;
    const double C38110 = C31647 * C941;
    const double C5870 = C113 * C1171;
    const double C27088 = C10633 * C1171;
    const double C38352 = C31647 * C1171;
    const double C6060 = C113 * C1314;
    const double C26228 = C10634 * C1314;
    const double C27266 = C10633 * C1314;
    const double C37492 = C31648 * C1314;
    const double C38530 = C31647 * C1314;
    const double C47138 = C47123 + C47136;
    const double C47150 = C47147 / C47111;
    const double C47151 = 2 * C47143;
    const double C47148 = C47143 * ce;
    const double C47708 = C47103 * C47143;
    const double C47733 = C47302 * C47143;
    const double C1170 =
        (2 * C47302 * C47125 + C47302 * (C47125 + C47143 * C47311)) / C47075;
    const double C1175 =
        (3 * (C47125 + C47143 * C47311) +
         C47302 * (2 * C47302 * C47143 + C47302 * (C47143 + C47173 * C47311))) /
        C47075;
    const double C1313 = (C47103 * (C47125 + C47143 * C47311) +
                          (C47577 + C47229 * C47311) * ae) /
                         C47075;
    const double C2024 =
        (2 * (C47103 * C47125 + C47577 * ae) +
         C47103 * (C47125 + C47103 * (C47103 * C47143 + C47229 * ae) +
                   C47103 * C47229 * ae) +
         (C47577 + C47229 * C47344) * ae) /
        C47075;
    const double C47742 = C47123 + C47741;
    const double C47771 = C47103 * C47767;
    const double C47821 = 2 * C47767;
    const double C47795 = C47791 + C47792;
    const double C5881 = C48250 * C1173;
    const double C38363 = C31645 * C1173;
    const double C47234 = C47224 + C47232;
    const double C47256 = C47252 * ce;
    const double C47272 = 2 * C47252;
    const double C47676 = C47252 * C47311;
    const double C47711 = C47252 * C47344;
    const double C47734 = C47302 * C47252;
    const double C47808 = C47103 * C47252;
    const double C47807 = C47252 * ae;
    const double C47259 = C47258 + C47251;
    const double C47751 = C47224 + C47750;
    const double C47772 = C47770 * C47344;
    const double C47829 = 2 * C47770;
    const double C47852 = C47103 * C47770;
    const double C47851 = C47770 * ae;
    const double C47797 = C47224 + C47794;
    const double C47877 = 2 * C47870;
    const double C47875 = C47870 * ae;
    const double C47874 = C47868 + C47869;
    const double C47235 = C47233 + C47228;
    const double C47325 = C47324 + C47225;
    const double C47349 = C47347 + C47225;
    const double C47390 = -2 * C47373;
    const double C47410 = ae * C47373;
    const double C47408 = C47103 * C47373;
    const double C2421 = (-2 * C47103 * C47319) / C46956 -
                         (C47103 * (C47373 * C47344 + C47319)) / C46956;
    const double C47439 = C47435 / C47111;
    const double C47440 = -2 * C47433;
    const double C47437 = ae * C47433;
    const double C47194 = C47155 + C47191;
    const double C47282 = C47279 + C47276;
    const double C47489 = C47486 + C47255;
    const double C47515 = C47510 * C47344;
    const double C47545 = C47538 + C47255;
    const double C350 = C48250 * C318;
    const double C31863 = C31645 * C318;
    const double C1307 =
        (C47302 * C47125 + C47103 * (C47103 * C47302 * C47143 + C47661 * ae) +
         C47103 * C47661 * ae) /
        C47075;
    const double C1296 = C47302 * C47577 + C47661 * C47344;
    const double C123 = 3 * (C47572 + C47221 * C47129) +
                        C47100 * (2 * C47577 + C47100 * C47579);
    const double C299 = C47302 * (2 * C47577 + C47100 * C47579);
    const double C303 = C47572 + C47221 * C47129 + C47579 * C47311;
    const double C488 = C47103 * (2 * C47577 + C47100 * C47579);
    const double C492 = C47572 + C47221 * C47129 + C47579 * C47344;
    const double C937 = C47103 * C47302 * C47579;
    const double C1316 =
        (C47115 + C47123 * C47311 +
         C47103 * (C47103 * (C47123 + C47134 * C47311) + C47673 * ae) +
         C47103 * C47673 * ae) /
        C47075;
    const double C1716 =
        (C47103 * (2 * C47302 * C47123 + C47302 * (C47123 + C47134 * C47311)) +
         (2 * C47664 + C47302 * C47673) * ae) /
        C47075;
    const double C1164 = 3 * (C47572 + C47221 * C47311) +
                         C47302 * (2 * C47664 + C47302 * C47673);
    const double C1301 = C47572 + C47221 * C47311 + C47673 * C47344;
    const double C1713 = C47103 * (2 * C47664 + C47302 * C47673);
    const double C2018 = 3 * (C47572 + C47221 * C47344) +
                         C47103 * (2 * C47702 + C47103 * C47705);
    const double C6054 = C113 * C1308;
    const double C26844 = C10634 * C1308;
    const double C27258 = C10633 * C1308;
    const double C38108 = C31648 * C1308;
    const double C38522 = C31647 * C1308;
    const double C47164 = C47100 * C47161;
    const double C47178 = 3 * C47161;
    const double C47172 = C47161 * ce;
    const double C47716 = C47103 * C47161;
    const double C47737 = C47302 * C47161;
    const double C47186 = C47180 / C46956;
    const double C47746 = C47143 + C47745;
    const double C47781 = C47103 * C47777;
    const double C47824 = C47302 * C47823;
    const double C47840 = C47103 * C47823;
    const double C47394 = C47302 * C47393;
    const double C47484 = -3 * C47393;
    const double C47499 = ae * C47393;
    const double C47497 = C47103 * C47393;
    const double C47416 = C47414 + C47373;
    const double C47488 = C47485 / C46956;
    const double C47513 = C47509 / C47111;
    const double C47514 = -2 * C47506;
    const double C47511 = ae * C47506;
    const double C47445 = C47103 * C47441;
    const double C47537 = -3 * C47441;
    const double C47533 = ae * C47441;
    const double C47549 = C47544 / C46956;
    const double C47547 = C47540 / C46956;
    const double C47284 = C47100 * C47281;
    const double C47283 = C47281 * ce;
    const double C47680 = C47281 * C47311;
    const double C47719 = C47281 * C47344;
    const double C47738 = C47302 * C47281;
    const double C47758 = C47252 + C47757;
    const double C47782 = C47780 * C47344;
    const double C47812 = C47252 + C47809;
    const double C47832 = C47302 * C47831;
    const double C47843 = C47831 * C47344;
    const double C47859 = C47770 + C47856;
    const double C47879 = C47103 * C47876;
    const double C159 = C48250 * C143;
    const double C31673 = C31645 * C143;
    const double C340 = C48250 * C327;
    const double C31849 = C31645 * C327;
    const double C4946 = C48250 * C331;
    const double C37495 = C31645 * C331;
    const double C529 = C48250 * C516;
    const double C10641 = C48367 * C516;
    const double C31655 = C48367 * C516;
    const double C32043 = C31645 * C516;
    const double C5584 = C48250 * C950;
    const double C26227 = C48367 * C950;
    const double C37491 = C48367 * C950;
    const double C38111 = C31645 * C950;
    const double C47137 = C47135 / C46956;
    const double C1182 =
        3 * ((-(C47133 * C47311) / C46956) / C47075 - C47122 / C47111) +
        C47302 * ((-2 * C47302 * C47133) / C47111 +
                  C47302 * ((-(C47154 * C47311) / C46956) / C47075 - C47144));
    const double C47345 = C47342 / C46956;
    const double C2426 =
        2 * ((-(C47103 * C47372) / C46956) / C47075 - (ae * C47319) / C47111) -
        (ae * (C47373 * C47344 + C47319)) / C47111 +
        C47103 *
            ((-(ae * C47103 * C47373) / C46956) / C47075 - C47372 / C47111 +
             C47103 * ((-(C47103 * C47302 * C47154) / C46956) / C47075 -
                       (ae * C47373) / C47111));
    const double C5871 = C48250 * C1181;
    const double C38353 = C31645 * C1181;
    const double C6055 = C48250 * C1324;
    const double C26845 = C48367 * C1324;
    const double C38109 = C48367 * C1324;
    const double C38523 = C31645 * C1324;
    const double C6061 = C48250 * C1327;
    const double C26229 = C48367 * C1327;
    const double C37493 = C48367 * C1327;
    const double C38531 = C31645 * C1327;
    const double C47160 = C47157 / C46956;
    const double C47382 = C47381 / C46956;
    const double C47412 = C47103 * C47409;
    const double C47474 = -2 * C47409;
    const double C47507 = C47409 / C47111;
    const double C47438 = C47434 / C46956;
    const double C47193 = C47190 / C46956;
    const double C47477 = C47475 / C46956;
    const double C47512 = C47103 * C47508;
    const double C47541 = C47535 / C46956;
    const double C109 = C48344 / C48015;
    const double C107 = C48010 / C48015 - (C48343 * C48309) / C47088;
    const double C108 = C48343 / C47090 - (C48344 * C48309) / C47075;
    const double C16331 = C48343 / C47075;
    const double C1086 = (C48035 * std::pow(C48086, 2)) / C46961 + C48085;
    const double C48088 = C48087 * C48086;
    const double C48093 = C48087 / C46968;
    const double C48315 = C48087 / C46956;
    const double C48312 = C47991 * C48087;
    const double C48095 = C48094 * C48086;
    const double C48321 = C48084 * C48094;
    const double C48320 = 2 * C48094;
    const double C48357 = C48094 / C48306;
    const double C1159 = C48094 / C48342;
    const double C2904 = C48094 / C46962;
    const double C48353 = C48317 / C46956;
    const double C1087 = (-2 * C47991 * C48317) / C46956;
    const double C48373 = C48345 / C46961;
    const double C1835 = (C48047 * std::pow(C48126, 2)) / C46961 + C48125;
    const double C48128 = C48127 * C48126;
    const double C48133 = C48127 / C46968;
    const double C48316 = C48127 / C46956;
    const double C48314 = C47991 * C48127;
    const double C48135 = C48134 * C48126;
    const double C48327 = C48124 * C48134;
    const double C48326 = 2 * C48134;
    const double C48363 = C48134 / C48306;
    const double C2014 = C48134 / C48342;
    const double C3806 = C48134 / C46962;
    const double C48359 = C48323 / C46956;
    const double C1836 = (-2 * C47991 * C48323) / C46956;
    const double C48375 = C48348 / C46961;
    const double C21766 = C48365 / C48015;
    const double C4781 = C48364 / C47075;
    const double C21764 = C48235 / C48015 - (C48364 * C48331) / C47088;
    const double C21765 = C48364 / C47090 - (C48365 * C48331) / C47075;
    const double C46997 = C46992 + 0;
    const double C46996 = C46991 / C46962;
    const double C46982 = C46967 - C46978;
    const double C46981 = C46954 * C46976;
    const double C295 =
        ((-C46976 / C46956) / C46962 - (0 * de) / C46956) / C46962 -
        (0 * de) / C46956;
    const double C1160 = -C46976 / C46956;
    const double C2642 = (-C46976 / C46956) / C46962 - (0 * de) / C46956;
    const double C47987 = C47986 / C46961;
    const double C48336 = 2 * C48300;
    const double C47995 = C47994 / C46956;
    const double C48340 = C48304 / C46968;
    const double C48369 = C48298 - C48335;
    const double C2635 = -C48335;
    const double C48383 = C48368 + C47984;
    const double C169 = C150 + C151;
    const double C168 = C148 + C149;
    const double C4959 = C4932 + C4933;
    const double C4958 = C4930 + C4931;
    const double C10659 = C10631 * C143;
    const double C10655 = C10631 * C132;
    const double C10649 = C10631 * C142;
    const double C10645 = C10631 * C130;
    const double C10643 = C10631 * C141;
    const double C10639 = C10631 * C128;
    const double C10849 = C10631 * C318;
    const double C10841 = C10631 * C310;
    const double C10835 = C10631 * C327;
    const double C10831 = C10631 * C306;
    const double C11035 = C10631 * C499;
    const double C11029 = C10631 * C516;
    const double C11025 = C10631 * C495;
    const double C26235 = C10631 * C316;
    const double C26231 = C10631 * C331;
    const double C26225 = C10631 * C326;
    const double C26221 = C10631 * C308;
    const double C26851 = C10631 * C940;
    const double C26847 = C10631 * C950;
    const double C27099 = C10631 * C1173;
    const double C27089 = C10631 * C1181;
    const double C27085 = C10631 * C1172;
    const double C27267 = C10631 * C1327;
    const double C27263 = C10631 * C1315;
    const double C27259 = C10631 * C1324;
    const double C42888 =
        (((0 - (C47074 * C47087) / C47075) * ae) / C47075 - (0 * be) / C47090) /
            (2 * C47075) -
        ((C47074 * (((C48250 - (C47074 * 2 * C47092) / C47075) * ae) / C47075 -
                    C47087 / C47090) +
          C10631) *
         be) /
            C47075 +
        (0 * ae) / C47075 - C47092 / C47088;
    const double C31685 = C31656 + C31657;
    const double C31683 = C31652 + C31653;
    const double C37502 = C37488 + C37489;
    const double C37500 = C37484 + C37485;
    const double C170 = C152 + C153;
    const double C31686 = C31658 + C31659;
    const double C361 = C337 + C338;
    const double C31876 = C31844 + C31845;
    const double C4961 = C4947 + C4948;
    const double C37507 = C37498 + C37499;
    const double C550 = C526 + C527;
    const double C10668 = C10636 + C10637;
    const double C31682 = C31650 + C31651;
    const double C32070 = C32038 + C32039;
    const double C5597 = C5585 + C5586;
    const double C26237 = C26222 + C26223;
    const double C37501 = C37486 + C37487;
    const double C38119 = C38114 + C38115;
    const double C133 =
        (-2 * (C47100 * C47238 + C47572 * ce)) / C46956 -
        (C47100 * (C47100 * C47242 + C47238 + C47100 * C47221 * ce)) / C46956 -
        ((C47572 + C47221 * C47129) * ce) / C46956;
    const double C311 =
        -(C47302 * (C47100 * C47242 + C47238 + C47577 * ce)) / C46956;
    const double C319 =
        -(C47242 * C47311 + C47100 * C47238 + C47572 * ce) / C46956;
    const double C500 =
        -(C47103 * (C47100 * C47242 + C47238 + C47577 * ce)) / C46956;
    const double C508 =
        -(C47242 * C47344 + C47100 * C47238 + C47572 * ce) / C46956;
    const double C943 = -(C47103 * C47302 * C47242) / C46956;
    const double C539 = C48250 * C507;
    const double C11043 = C10631 * C507;
    const double C11027 = C48367 * C507;
    const double C32057 = C31645 * C507;
    const double C32041 = C48367 * C507;
    const double C957 = C48250 * C942;
    const double C10833 = C48367 * C942;
    const double C11553 = C10631 * C942;
    const double C31847 = C48367 * C942;
    const double C32567 = C31645 * C942;
    const double C349 = C113 * C302;
    const double C10848 = C10633 * C302;
    const double C31862 = C31647 * C302;
    const double C538 = C113 * C491;
    const double C11042 = C10633 * C491;
    const double C11026 = C10634 * C491;
    const double C32056 = C31647 * C491;
    const double C32040 = C31648 * C491;
    const double C956 = C113 * C936;
    const double C10832 = C10634 * C936;
    const double C11552 = C10633 * C936;
    const double C31846 = C31648 * C936;
    const double C32566 = C31647 * C936;
    const double C1442 = C113 * C1162;
    const double C12078 = C10633 * C1162;
    const double C33092 = C31647 * C1162;
    const double C1604 = C113 * C1299;
    const double C10846 = C10634 * C1299;
    const double C12284 = C10633 * C1299;
    const double C31860 = C31648 * C1299;
    const double C33298 = C31647 * C1299;
    const double C2308 = C113 * C2016;
    const double C11040 = C10634 * C2016;
    const double C13144 = C10633 * C2016;
    const double C32054 = C31648 * C2016;
    const double C34150 = C31647 * C2016;
    const double C6053 = C48250 * C1309;
    const double C26849 = C48367 * C1309;
    const double C27255 = C10631 * C1309;
    const double C38113 = C48367 * C1309;
    const double C38519 = C31645 * C1309;
    const double C7469 = C48250 * C2420;
    const double C27257 = C48367 * C2420;
    const double C28595 = C10631 * C2420;
    const double C38521 = C48367 * C2420;
    const double C39855 = C31645 * C2420;
    const double C6052 = C113 * C1297;
    const double C26848 = C10634 * C1297;
    const double C27254 = C10633 * C1297;
    const double C38112 = C31648 * C1297;
    const double C38518 = C31647 * C1297;
    const double C7468 = C113 * C2417;
    const double C27256 = C10634 * C2417;
    const double C28594 = C10633 * C2417;
    const double C38520 = C31648 * C2417;
    const double C39854 = C31647 * C2417;
    const double C2027 =
        (3 * (C47115 + C47103 * C47704 + C47702 * ae) +
         C47103 * (2 * C47704 +
                   C47103 * (C47123 + C47103 * (C47103 * C47134 + C47224 * ae) +
                             C47103 * C47224 * ae) +
                   C47705 * ae) +
         (2 * C47702 + C47103 * C47705) * ae) /
        C47075;
    const double C172 = C156 + C157;
    const double C31691 = C31668 + C31669;
    const double C363 = C341 + C342;
    const double C31881 = C31854 + C31855;
    const double C552 = C530 + C531;
    const double C10673 = C10646 + C10647;
    const double C31687 = C31660 + C31661;
    const double C32075 = C32048 + C32049;
    const double C5882 = C5868 + C5869;
    const double C38364 = C38348 + C38349;
    const double C6074 = C6058 + C6059;
    const double C26242 = C26232 + C26233;
    const double C37506 = C37496 + C37497;
    const double C38546 = C38526 + C38527;
    const double C171 = C154 + C155;
    const double C31688 = C31662 + C31663;
    const double C134 = (3 * (C47115 + C47123 * C47129) +
                         C47100 * (2 * C47125 + C47100 * C47138)) /
                        C47075;
    const double C312 = (C47302 * (2 * C47125 + C47100 * C47138)) / C47075;
    const double C320 = (C47115 + C47123 * C47129 + C47138 * C47311) / C47075;
    const double C501 = (C47103 * (2 * C47125 + C47100 * C47138) +
                         (2 * C47577 + C47100 * C47579) * ae) /
                        C47075;
    const double C509 =
        (C47115 + C47123 * C47129 + C47103 * (C47103 * C47138 + C47579 * ae) +
         C47103 * C47579 * ae) /
        C47075;
    const double C944 =
        (C47103 * C47302 * C47138 + C47302 * C47579 * ae) / C47075;
    const double C1168 =
        (2 * C47302 * C47138 + C47302 * (C47138 + C47161 * C47311)) / C47075;
    const double C47153 = C47148 / C46956;
    const double C47712 = C47708 + C47709;
    const double C1443 = C48250 * C1170;
    const double C12079 = C10631 * C1170;
    const double C33093 = C31645 * C1170;
    const double C5877 = C48250 * C1175;
    const double C1605 = C48250 * C1313;
    const double C10847 = C48367 * C1313;
    const double C12285 = C10631 * C1313;
    const double C31861 = C48367 * C1313;
    const double C33299 = C31645 * C1313;
    const double C2309 = C48250 * C2024;
    const double C11041 = C48367 * C2024;
    const double C13145 = C10631 * C2024;
    const double C32055 = C48367 * C2024;
    const double C34151 = C31645 * C2024;
    const double C5853 =
        (4 * (2 * C47729 + C47302 * C47742) +
         C47302 *
             (3 * C47742 + C47302 * (2 * C47302 * C47134 +
                                     C47302 * (C47134 + C47155 * C47311)))) /
        C47075;
    const double C47773 = C47771 + C47768;
    const double C47799 = C47103 * C47795;
    const double C47867 = 2 * C47795;
    const double C47253 = C47234 * ce;
    const double C47583 = C47100 * C47234;
    const double C47587 = 3 * C47234;
    const double C47658 = C47302 * C47234;
    const double C47718 = C47103 * C47234;
    const double C47717 = C47234 * ae;
    const double C1311 = (C47103 * (C47138 + C47161 * C47311) +
                          (C47579 + C47234 * C47311) * ae) /
                         C47075;
    const double C2022 =
        (2 * (C47103 * C47138 + C47579 * ae) +
         C47103 * (C47138 + C47103 * (C47103 * C47161 + C47234 * ae) +
                   C47103 * C47234 * ae) +
         (C47579 + C47234 * C47344) * ae) /
        C47075;
    const double C1161 =
        2 * C47302 * C47579 + C47302 * (C47579 + C47234 * C47311);
    const double C1298 = C47103 * (C47579 + C47234 * C47311);
    const double C2015 =
        2 * C47103 * C47579 + C47103 * (C47579 + C47234 * C47344);
    const double C47677 = C47229 + C47676;
    const double C47713 = C47229 + C47711;
    const double C47756 = 2 * C47734;
    const double C47779 = C47103 * C47734;
    const double C47778 = C47734 * ae;
    const double C2422 =
        (2 * (C47103 * C47733 + C47661 * ae) +
         C47103 * (C47733 + C47103 * (C47103 * C47302 * C47173 + C47734 * ae) +
                   C47103 * C47734 * ae) +
         (C47661 + C47734 * C47344) * ae) /
        C47075;
    const double C2418 =
        2 * C47103 * C47661 + C47103 * (C47661 + C47734 * C47344);
    const double C47813 = 2 * C47808;
    const double C47811 = C47808 * ae;
    const double C47810 = C47806 + C47807;
    const double C47260 = C47100 * C47259;
    const double C47269 = -2 * C47259;
    const double C47327 = C47259 * C47311;
    const double C47356 = C47259 * C47344;
    const double C47376 = C47302 * C47259;
    const double C47458 = ae * C47259;
    const double C47456 = C47103 * C47259;
    const double C47752 = C47302 * C47751;
    const double C47828 = 3 * C47751;
    const double C47842 = C47103 * C47751;
    const double C47841 = C47751 * ae;
    const double C7457 =
        (2 * (C47103 * C47742 + C47673 * ae) +
         C47103 *
             (C47742 +
              C47103 * (C47103 * (C47134 + C47155 * C47311) + C47751 * ae) +
              C47103 * C47751 * ae) +
         (C47673 + C47751 * C47344) * ae) /
        C47075;
    const double C7455 =
        2 * C47103 * C47673 + C47103 * (C47673 + C47751 * C47344);
    const double C47774 = C47730 + C47772;
    const double C47857 = 2 * C47852;
    const double C47855 = C47852 * ae;
    const double C47858 = C47854 + C47851;
    const double C47800 = C47103 * C47797;
    const double C47873 = 3 * C47797;
    const double C47871 = C47797 * ae;
    const double C47878 = C47103 * C47874;
    const double C47244 = C47100 * C47235;
    const double C47249 = -2 * C47235;
    const double C47317 = C47302 * C47235;
    const double C47355 = ae * C47235;
    const double C47353 = C47103 * C47235;
    const double C1169 = (-2 * C47302 * C47242) / C46956 -
                         (C47302 * (C47235 * C47311 + C47242)) / C46956;
    const double C1312 = -(C47103 * (C47235 * C47311 + C47242)) / C46956;
    const double C2023 = (-2 * C47103 * C47242) / C46956 -
                         (C47103 * (C47235 * C47344 + C47242)) / C46956;
    const double C1328 =
        (-(C47133 * C47311) / C46956) / C47075 - C47122 / C47111 -
        (ae * C47103 * C47325) / C47111 +
        C47103 * (C47103 * ((-(C47154 * C47311) / C46956) / C47075 - C47144) -
                  (ae * C47325) / C47111);
    const double C1722 =
        (((-2 * C47319) / C46956 - (C47302 * C47325) / C46956) * ae) / C47075 +
        C47103 * ((-2 * C47302 * C47133) / C47111 +
                  C47302 * ((-(C47154 * C47311) / C46956) / C47075 - C47144));
    const double C1174 =
        (-3 * (C47225 * C47311 + C47238)) / C46956 +
        C47302 * ((-2 * C47319) / C46956 - (C47302 * C47325) / C46956);
    const double C1317 = -(C47325 * C47344 + C47225 * C47311 + C47238) / C46956;
    const double C1717 =
        C47103 * ((-2 * C47319) / C46956 - (C47302 * C47325) / C46956);
    const double C7458 = (-2 * C47103 * C47325) / C46956 -
                         (C47103 * (C47393 * C47344 + C47325)) / C46956;
    const double C2028 =
        (-3 * (C47225 * C47344 + C47238)) / C46956 +
        C47103 * ((-2 * C47341) / C46956 - (C47103 * C47349) / C46956);
    const double C47392 = C47390 / C46956;
    const double C47413 = C47410 / C47111;
    const double C7466 = C113 * C2421;
    const double C27260 = C10634 * C2421;
    const double C28590 = C10633 * C2421;
    const double C38524 = C31648 * C2421;
    const double C39850 = C31647 * C2421;
    const double C47444 = C47440 / C46956;
    const double C47442 = C47437 / C46956;
    const double C47197 = C47100 * C47194;
    const double C1177 =
        (3 * (C47138 + C47161 * C47311) +
         C47302 * (2 * C47302 * C47161 + C47302 * (C47161 + C47194 * C47311))) /
        C47075;
    const double C47285 = C47100 * C47282;
    const double C47399 = C47282 * C47311;
    const double C47424 = C47302 * C47282;
    const double C47459 = C47282 * C47344;
    const double C47490 = C47302 * C47489;
    const double C47500 = C47489 * C47344;
    const double C47519 = C47515 + C47411;
    const double C47550 = C47103 * C47545;
    const double C2191 = C48250 * C1307;
    const double C11551 = C48367 * C1307;
    const double C13003 = C10631 * C1307;
    const double C32565 = C48367 * C1307;
    const double C34009 = C31645 * C1307;
    const double C2190 = C113 * C1296;
    const double C11550 = C10634 * C1296;
    const double C13002 = C10633 * C1296;
    const double C32564 = C31648 * C1296;
    const double C34008 = C31647 * C1296;
    const double C160 = C113 * C123;
    const double C10660 = C10633 * C123;
    const double C31674 = C31647 * C123;
    const double C345 = C113 * C299;
    const double C11202 = C10633 * C299;
    const double C32216 = C31647 * C299;
    const double C353 = C113 * C303;
    const double C10854 = C10633 * C303;
    const double C31868 = C31647 * C303;
    const double C534 = C113 * C488;
    const double C10652 = C10634 * C488;
    const double C11344 = C10633 * C488;
    const double C31666 = C31648 * C488;
    const double C32358 = C31647 * C488;
    const double C542 = C113 * C492;
    const double C11048 = C10633 * C492;
    const double C11032 = C10634 * C492;
    const double C32062 = C31647 * C492;
    const double C32046 = C31648 * C492;
    const double C960 = C113 * C937;
    const double C10838 = C10634 * C937;
    const double C11558 = C10633 * C937;
    const double C31852 = C31648 * C937;
    const double C32572 = C31647 * C937;
    const double C6071 = C48250 * C1316;
    const double C27277 = C10631 * C1316;
    const double C27265 = C48367 * C1316;
    const double C38541 = C31645 * C1316;
    const double C38529 = C48367 * C1316;
    const double C6601 = C48250 * C1716;
    const double C27087 = C48367 * C1716;
    const double C27751 = C10631 * C1716;
    const double C38351 = C48367 * C1716;
    const double C39015 = C31645 * C1716;
    const double C5880 = C113 * C1164;
    const double C27098 = C10633 * C1164;
    const double C38362 = C31647 * C1164;
    const double C6070 = C113 * C1301;
    const double C27276 = C10633 * C1301;
    const double C27264 = C10634 * C1301;
    const double C38540 = C31647 * C1301;
    const double C38528 = C31648 * C1301;
    const double C6600 = C113 * C1713;
    const double C27086 = C10634 * C1713;
    const double C27750 = C10633 * C1713;
    const double C38350 = C31648 * C1713;
    const double C39014 = C31647 * C1713;
    const double C47166 = C47151 + C47164;
    const double C47179 = C47172 / C47111;
    const double C47189 = -C47186;
    const double C5855 =
        (4 * (2 * C47733 + C47302 * C47746) +
         C47302 * (3 * C47746 +
                   C47302 * (2 * C47302 * C47173 +
                             C47302 * (C47173 + C47100 * C47188 * C47311)))) /
        C47075;
    const double C47825 = C47821 + C47824;
    const double C47395 = C47394 / C46956;
    const double C47487 = C47484 / C46956;
    const double C47501 = C47499 / C47111;
    const double C6982 =
        (-3 * (C47373 * C47344 + C47319)) / C46956 +
        C47103 * ((-2 * C47408) / C46956 - (C47103 * C47416) / C46956);
    const double C47518 = C47514 / C46956;
    const double C47516 = C47511 / C46956;
    const double C47448 = C47445 / C46956;
    const double C47543 = C47537 / C46956;
    const double C47539 = C47533 / C47111;
    const double C47551 = -C47547;
    const double C47287 = C47272 + C47284;
    const double C47286 = C47283 / C46956;
    const double C47681 = C47234 + C47680;
    const double C47721 = C47234 + C47719;
    const double C47759 = C47302 * C47758;
    const double C47784 = C47734 + C47782;
    const double C47815 = C47103 * C47812;
    const double C47833 = C47829 + C47832;
    const double C47845 = C47751 + C47843;
    const double C47861 = C47103 * C47859;
    const double C47881 = C47877 + C47879;
    const double C362 = C339 + C340;
    const double C31878 = C31848 + C31849;
    const double C4960 = C4945 + C4946;
    const double C37505 = C37494 + C37495;
    const double C551 = C528 + C529;
    const double C10670 = C10640 + C10641;
    const double C31684 = C31654 + C31655;
    const double C32072 = C32042 + C32043;
    const double C5596 = C5583 + C5584;
    const double C26239 = C26226 + C26227;
    const double C37503 = C37490 + C37491;
    const double C38117 = C38110 + C38111;
    const double C47139 = -C47137;
    const double C5879 = C48250 * C1182;
    const double C27095 = C10631 * C1182;
    const double C38359 = C31645 * C1182;
    const double C47348 = -C47345;
    const double C7467 = C48250 * C2426;
    const double C27261 = C48367 * C2426;
    const double C28591 = C10631 * C2426;
    const double C38525 = C48367 * C2426;
    const double C39851 = C31645 * C2426;
    const double C5883 = C5870 + C5871;
    const double C38366 = C38352 + C38353;
    const double C6073 = C6054 + C6055;
    const double C26852 = C26844 + C26845;
    const double C38116 = C38108 + C38109;
    const double C38544 = C38522 + C38523;
    const double C6075 = C6060 + C6061;
    const double C26240 = C26228 + C26229;
    const double C37504 = C37492 + C37493;
    const double C38548 = C38530 + C38531;
    const double C47163 = -C47160;
    const double C47383 = -C47382;
    const double C47415 = C47412 / C46956;
    const double C47476 = C47474 / C47111;
    const double C47443 = -C47438;
    const double C47196 = -C47193;
    const double C47478 = -C47477;
    const double C47517 = C47512 / C46956;
    const double C47548 = -C47541;
    const double C48089 = C48088 / C46961;
    const double C48346 = 2 * C48312;
    const double C48096 = C48095 / C46956;
    const double C48356 = C48321 / C46968;
    const double C48377 = C48315 - C48353;
    const double C2531 = -C48353;
    const double C48386 = C48373 + C48085;
    const double C48129 = C48128 / C46961;
    const double C48349 = 2 * C48314;
    const double C48136 = C48135 / C46956;
    const double C48362 = C48327 / C46968;
    const double C48380 = C48316 - C48359;
    const double C3298 = -C48359;
    const double C48387 = C48375 + C48125;
    const double C47000 = C46997 * de;
    const double C46986 = C46954 * C46982;
    const double C47014 = C46982 / C46962;
    const double C46985 = C46981 / C46956;
    const double C47988 = C47984 - C47987;
    const double C48370 = C48336 / C46956;
    const double C47996 = C47992 - C47995;
    const double C48384 = C48369 / C46962;
    const double C4963 = C4959 * C287;
    const double C5747 = C4959 * C48383;
    const double C5861 = C4959 * C47983;
    const double C6219 = C4959 * C48298;
    const double C7751 = C4959 * C2635;
    const double C5860 = C4958 * C1160;
    const double C10677 = C10654 + C10655;
    const double C10674 = C10648 + C10649;
    const double C10672 = C10644 + C10645;
    const double C10671 = C10642 + C10643;
    const double C10669 = C10638 + C10639;
    const double C10867 = C10840 + C10841;
    const double C10864 = C10834 + C10835;
    const double C10862 = C10830 + C10831;
    const double C11061 = C11034 + C11035;
    const double C11058 = C11028 + C11029;
    const double C11056 = C11024 + C11025;
    const double C26243 = C26234 + C26235;
    const double C26241 = C26230 + C26231;
    const double C26238 = C26224 + C26225;
    const double C26236 = C26220 + C26221;
    const double C26855 = C26850 + C26851;
    const double C26853 = C26846 + C26847;
    const double C27102 = C27088 + C27089;
    const double C27100 = C27084 + C27085;
    const double C27284 = C27266 + C27267;
    const double C27282 = C27262 + C27263;
    const double C27280 = C27258 + C27259;
    const double C5862 = C361 * C1160;
    const double C6220 = C361 * C46982;
    const double C7752 = C361 * C2642;
    const double C5867 = C4961 * C1160;
    const double C6051 = C5597 * C1160;
    const double C158 = C113 * C133;
    const double C10658 = C10633 * C133;
    const double C31672 = C31647 * C133;
    const double C343 = C113 * C311;
    const double C10844 = C10633 * C311;
    const double C31858 = C31647 * C311;
    const double C351 = C113 * C319;
    const double C10852 = C10633 * C319;
    const double C31866 = C31647 * C319;
    const double C532 = C113 * C500;
    const double C10650 = C10634 * C500;
    const double C11038 = C10633 * C500;
    const double C31664 = C31648 * C500;
    const double C32052 = C31647 * C500;
    const double C540 = C113 * C508;
    const double C11046 = C10633 * C508;
    const double C11030 = C10634 * C508;
    const double C32060 = C31647 * C508;
    const double C32044 = C31648 * C508;
    const double C958 = C113 * C943;
    const double C10836 = C10634 * C943;
    const double C11556 = C10633 * C943;
    const double C31850 = C31648 * C943;
    const double C32570 = C31647 * C943;
    const double C367 = C349 + C350;
    const double C10871 = C10848 + C10849;
    const double C31885 = C31862 + C31863;
    const double C556 = C538 + C539;
    const double C11065 = C11042 + C11043;
    const double C11057 = C11026 + C11027;
    const double C32079 = C32056 + C32057;
    const double C32071 = C32040 + C32041;
    const double C968 = C956 + C957;
    const double C10863 = C10832 + C10833;
    const double C11567 = C11552 + C11553;
    const double C31877 = C31846 + C31847;
    const double C32581 = C32566 + C32567;
    const double C6072 = C6052 + C6053;
    const double C26854 = C26848 + C26849;
    const double C27278 = C27254 + C27255;
    const double C38118 = C38112 + C38113;
    const double C38542 = C38518 + C38519;
    const double C7471 = C7468 + C7469;
    const double C27279 = C27256 + C27257;
    const double C28599 = C28594 + C28595;
    const double C38543 = C38520 + C38521;
    const double C39859 = C39854 + C39855;
    const double C4936 = C363 * C295;
    const double C6224 = C363 * C46982;
    const double C7756 = C363 * C2642;
    const double C5888 = C5882 * C1160;
    const double C6082 = C6074 * C1160;
    const double C161 = C48250 * C134;
    const double C10661 = C10631 * C134;
    const double C31675 = C31645 * C134;
    const double C346 = C48250 * C312;
    const double C11203 = C10631 * C312;
    const double C32217 = C31645 * C312;
    const double C354 = C48250 * C320;
    const double C10855 = C10631 * C320;
    const double C31869 = C31645 * C320;
    const double C535 = C48250 * C501;
    const double C10653 = C48367 * C501;
    const double C11345 = C10631 * C501;
    const double C31667 = C48367 * C501;
    const double C32359 = C31645 * C501;
    const double C543 = C48250 * C509;
    const double C11049 = C10631 * C509;
    const double C11033 = C48367 * C509;
    const double C32063 = C31645 * C509;
    const double C32047 = C48367 * C509;
    const double C961 = C48250 * C944;
    const double C10839 = C48367 * C944;
    const double C11559 = C10631 * C944;
    const double C31853 = C48367 * C944;
    const double C32573 = C31645 * C944;
    const double C1447 = C48250 * C1168;
    const double C47156 = -C47153;
    const double C1450 = C1442 + C1443;
    const double C12086 = C12078 + C12079;
    const double C33100 = C33092 + C33093;
    const double C1612 = C1604 + C1605;
    const double C10870 = C10846 + C10847;
    const double C12292 = C12284 + C12285;
    const double C31884 = C31860 + C31861;
    const double C33306 = C33298 + C33299;
    const double C2316 = C2308 + C2309;
    const double C11064 = C11040 + C11041;
    const double C13152 = C13144 + C13145;
    const double C32078 = C32054 + C32055;
    const double C34158 = C34150 + C34151;
    const double C22550 = C48250 * C5853;
    const double C47801 = C47123 + C47799;
    const double C47257 = C47253 / C46956;
    const double C47584 = C47582 + C47583;
    const double C1305 =
        (C47302 * C47138 + C47103 * (C47103 * C47302 * C47161 + C47658 * ae) +
         C47103 * C47658 * ae) /
        C47075;
    const double C2424 =
        (2 * (C47103 * C47737 + C47658 * ae) +
         C47103 * (C47737 + C47103 * (C47103 * C47302 * C47194 + C47738 * ae) +
                   C47103 * C47738 * ae) +
         (C47658 + C47738 * C47344) * ae) /
        C47075;
    const double C1295 = C47302 * C47579 + C47658 * C47344;
    const double C2419 =
        2 * C47103 * C47658 + C47103 * (C47658 + C47738 * C47344);
    const double C47720 = C47716 + C47717;
    const double C1609 = C48250 * C1311;
    const double C10857 = C48367 * C1311;
    const double C31871 = C48367 * C1311;
    const double C2313 = C48250 * C2022;
    const double C11051 = C48367 * C2022;
    const double C32065 = C48367 * C2022;
    const double C1446 = C113 * C1161;
    const double C1608 = C113 * C1298;
    const double C10856 = C10634 * C1298;
    const double C31870 = C31648 * C1298;
    const double C2312 = C113 * C2015;
    const double C11050 = C10634 * C2015;
    const double C32064 = C31648 * C2015;
    const double C1318 =
        (C47125 + C47143 * C47311 +
         C47103 * (C47103 * (C47143 + C47173 * C47311) + C47677 * ae) +
         C47103 * C47677 * ae) /
        C47075;
    const double C1718 =
        (C47103 * (2 * C47302 * C47143 + C47302 * (C47143 + C47173 * C47311)) +
         (2 * C47661 + C47302 * C47677) * ae) /
        C47075;
    const double C7459 =
        (2 * (C47103 * C47746 + C47677 * ae) +
         C47103 * (C47746 +
                   C47103 * (C47103 * (C47173 + C47100 * C47188 * C47311) +
                             C47758 * ae) +
                   C47103 * C47758 * ae) +
         (C47677 + C47758 * C47344) * ae) /
        C47075;
    const double C1165 = 3 * (C47577 + C47229 * C47311) +
                         C47302 * (2 * C47661 + C47302 * C47677);
    const double C1302 = C47577 + C47229 * C47311 + C47677 * C47344;
    const double C1714 = C47103 * (2 * C47661 + C47302 * C47677);
    const double C7456 =
        2 * C47103 * C47677 + C47103 * (C47677 + C47758 * C47344);
    const double C2029 =
        (3 * (C47125 + C47103 * C47712 + C47710 * ae) +
         C47103 * (2 * C47712 +
                   C47103 * (C47143 + C47103 * (C47103 * C47173 + C47252 * ae) +
                             C47103 * C47252 * ae) +
                   C47713 * ae) +
         (2 * C47710 + C47103 * C47713) * ae) /
        C47075;
    const double C2019 = 3 * (C47577 + C47229 * C47344) +
                         C47103 * (2 * C47710 + C47103 * C47713);
    const double C47783 = C47781 + C47778;
    const double C7321 = C48250 * C2422;
    const double C13005 = C48367 * C2422;
    const double C34011 = C48367 * C2422;
    const double C7320 = C113 * C2418;
    const double C13004 = C10634 * C2418;
    const double C34010 = C31648 * C2418;
    const double C47814 = C47103 * C47810;
    const double C47261 = C47260 + C47231;
    const double C47274 = C47269 / C46956;
    const double C47328 = C47327 + C47235;
    const double C47358 = C47356 + C47235;
    const double C47398 = -2 * C47376;
    const double C47423 = ae * C47376;
    const double C47421 = C47103 * C47376;
    const double C47461 = C47458 / C47111;
    const double C47462 = -2 * C47456;
    const double C47460 = ae * C47456;
    const double C47753 = C47749 + C47752;
    const double C47844 = C47840 + C47841;
    const double C23699 = C48250 * C7457;
    const double C27275 = C48367 * C7457;
    const double C38539 = C48367 * C7457;
    const double C23698 = C113 * C7455;
    const double C27274 = C10634 * C7455;
    const double C38538 = C31648 * C7455;
    const double C6981 =
        (3 * (C47729 + C47103 * C47773 + C47769 * ae) +
         C47103 * (2 * C47773 +
                   C47103 * (C47767 +
                             C47103 * (C47103 * C47302 * C47155 + C47770 * ae) +
                             C47103 * C47770 * ae) +
                   C47774 * ae) +
         (2 * C47769 + C47103 * C47774) * ae) /
        C47075;
    const double C6979 = 3 * (C47664 + C47730 * C47344) +
                         C47103 * (2 * C47769 + C47103 * C47774);
    const double C47860 = C47103 * C47858;
    const double C47802 = C47798 + C47800;
    const double C47880 = C47134 + C47878;
    const double C47246 = C47244 + C47225;
    const double C47254 = C47249 / C46956;
    const double C1306 = -(C47317 * C47344 + C47302 * C47242) / C46956;
    const double C2423 = (-2 * C47103 * C47317) / C46956 -
                         (C47103 * (C47376 * C47344 + C47317)) / C46956;
    const double C47357 = C47355 / C47111;
    const double C1444 = C113 * C1169;
    const double C12082 = C10633 * C1169;
    const double C33096 = C31647 * C1169;
    const double C1606 = C113 * C1312;
    const double C10850 = C10634 * C1312;
    const double C12288 = C10633 * C1312;
    const double C31864 = C31648 * C1312;
    const double C33302 = C31647 * C1312;
    const double C2310 = C113 * C2023;
    const double C11044 = C10634 * C2023;
    const double C13148 = C10633 * C2023;
    const double C32058 = C31648 * C2023;
    const double C34154 = C31647 * C2023;
    const double C6069 = C48250 * C1328;
    const double C27273 = C10631 * C1328;
    const double C27269 = C48367 * C1328;
    const double C38537 = C31645 * C1328;
    const double C38533 = C48367 * C1328;
    const double C6599 = C48250 * C1722;
    const double C27091 = C48367 * C1722;
    const double C27747 = C10631 * C1722;
    const double C38355 = C48367 * C1722;
    const double C39011 = C31645 * C1722;
    const double C5878 = C113 * C1174;
    const double C27094 = C10633 * C1174;
    const double C38358 = C31647 * C1174;
    const double C6068 = C113 * C1317;
    const double C27272 = C10633 * C1317;
    const double C27268 = C10634 * C1317;
    const double C38536 = C31647 * C1317;
    const double C38532 = C31648 * C1317;
    const double C6598 = C113 * C1717;
    const double C27090 = C10634 * C1717;
    const double C27746 = C10633 * C1717;
    const double C38354 = C31648 * C1717;
    const double C39010 = C31647 * C1717;
    const double C23696 = C113 * C7458;
    const double C27270 = C10634 * C7458;
    const double C38534 = C31648 * C7458;
    const double C47446 = -C47442;
    const double C47199 = C47183 + C47197;
    const double C47288 = C47285 + C47255;
    const double C47401 = C47399 + C47259;
    const double C47427 = C47424 * C47344;
    const double C47463 = C47459 + C47259;
    const double C47491 = C47490 / C46956;
    const double C47502 = C47500 + C47393;
    const double C47522 = C47103 * C47519;
    const double C47553 = C47550 / C46956;
    const double C2198 = C2190 + C2191;
    const double C11566 = C11550 + C11551;
    const double C13010 = C13002 + C13003;
    const double C32580 = C32564 + C32565;
    const double C34016 = C34008 + C34009;
    const double C5887 = C5880 + C5881;
    const double C27107 = C27098 + C27099;
    const double C38371 = C38362 + C38363;
    const double C6079 = C6070 + C6071;
    const double C27289 = C27276 + C27277;
    const double C27283 = C27264 + C27265;
    const double C38553 = C38540 + C38541;
    const double C38547 = C38528 + C38529;
    const double C6603 = C6600 + C6601;
    const double C27101 = C27086 + C27087;
    const double C27755 = C27750 + C27751;
    const double C38365 = C38350 + C38351;
    const double C39019 = C39014 + C39015;
    const double C136 = (4 * (2 * C47125 + C47100 * C47138) +
                         C47100 * (3 * C47138 + C47100 * C47166)) /
                        C47075;
    const double C314 = (C47302 * (3 * C47138 + C47100 * C47166)) / C47075;
    const double C322 =
        (2 * C47125 + C47100 * C47138 + C47166 * C47311) / C47075;
    const double C47192 = C47189 / C47075;
    const double C22540 =
        (5 * (3 * C47742 + C47302 * C47825) +
         C47302 * (4 * C47825 +
                   C47302 * (3 * C47823 +
                             C47302 * (2 * C47302 * C47155 +
                                       C47302 * (C47155 + C47188 * C47311))))) /
        C47075;
    const double C47396 = C47392 - C47395;
    const double C28588 = C10634 * C6982;
    const double C39848 = C31648 * C6982;
    const double C47520 = -C47516;
    const double C47451 = C47444 - C47448;
    const double C47554 = C47551 / C47075;
    const double C47289 = C47287 * ce;
    const double C47588 = C47100 * C47287;
    const double C47724 = C47302 * C47287;
    const double C1320 =
        (C47138 + C47161 * C47311 +
         C47103 * (C47103 * (C47161 + C47194 * C47311) + C47681 * ae) +
         C47103 * C47681 * ae) /
        C47075;
    const double C1720 =
        (C47103 * (2 * C47302 * C47161 + C47302 * (C47161 + C47194 * C47311)) +
         (2 * C47658 + C47302 * C47681) * ae) /
        C47075;
    const double C1166 = 3 * (C47579 + C47234 * C47311) +
                         C47302 * (2 * C47658 + C47302 * C47681);
    const double C1303 = C47579 + C47234 * C47311 + C47681 * C47344;
    const double C1715 = C47103 * (2 * C47658 + C47302 * C47681);
    const double C2020 = 3 * (C47579 + C47234 * C47344) +
                         C47103 * (2 * C47718 + C47103 * C47721);
    const double C47760 = C47756 + C47759;
    const double C6980 = 3 * (C47661 + C47734 * C47344) +
                         C47103 * (2 * C47779 + C47103 * C47784);
    const double C47817 = C47813 + C47815;
    const double C47834 = C47302 * C47833;
    const double C23341 = 3 * (C47673 + C47751 * C47344) +
                          C47103 * (2 * C47842 + C47103 * C47845);
    const double C47863 = C47857 + C47861;
    const double C47883 = C47103 * C47881;
    const double C4939 = C362 * C287;
    const double C4935 = C362 * C288;
    const double C5753 = C362 * C48383;
    const double C5863 = C362 * C47983;
    const double C6223 = C362 * C48298;
    const double C6221 = C362 * C47993;
    const double C7755 = C362 * C2635;
    const double C7753 = C362 * C47993;
    const double C4964 = C4960 * C287;
    const double C5759 = C4960 * C48383;
    const double C5866 = C4960 * C47983;
    const double C6227 = C4960 * C48298;
    const double C7759 = C4960 * C2635;
    const double C5598 = C5596 * C287;
    const double C6050 = C5596 * C47983;
    const double C6437 = C5596 * C48298;
    const double C7969 = C5596 * C2635;
    const double C9745 = C5596 * C48383;
    const double C47140 = C47139 / C47075;
    const double C47350 = C47348 / C47075;
    const double C7470 = C7466 + C7467;
    const double C27281 = C27260 + C27261;
    const double C28597 = C28590 + C28591;
    const double C38545 = C38524 + C38525;
    const double C39857 = C39850 + C39851;
    const double C5889 = C5883 * C47983;
    const double C6235 = C5883 * C48298;
    const double C7767 = C5883 * C2635;
    const double C21880 = C5883 * C287;
    const double C22468 = C5883 * C48383;
    const double C6081 = C6073 * C47983;
    const double C7183 = C6073 * C48298;
    const double C7977 = C6073 * C2635;
    const double C6083 = C6075 * C47983;
    const double C6445 = C6075 * C48298;
    const double C8555 = C6075 * C2635;
    const double C22351 = C6075 * C287;
    const double C25389 = C6075 * C48383;
    const double C47165 = C47163 / C47075;
    const double C47384 = C47383 / C47075;
    const double C47417 = -C47415;
    const double C47447 = C47443 / C47075;
    const double C47198 = C47196 / C47075;
    const double C47479 = C47478 / C47075;
    const double C47521 = -C47517;
    const double C47552 = C47548 / C47075;
    const double C48090 = C48085 - C48089;
    const double C48374 = C48346 / C46956;
    const double C48097 = C48093 - C48096;
    const double C48388 = C48377 / C46962;
    const double C48130 = C48125 - C48129;
    const double C48376 = C48349 / C46956;
    const double C48137 = C48133 - C48136;
    const double C48390 = C48380 / C46962;
    const double C47002 = C47000 / C46956;
    const double C46990 = C46986 + C47993;
    const double C47017 = C47014 - C47016;
    const double C1091 = C47014 + (0 * ce) / C46956;
    const double C46989 = C47983 - C46985;
    const double C8143 = C4960 * C47988;
    const double C8137 = C362 * C47988;
    const double C8131 = C4959 * C47988;
    const double C8349 = C5596 * C47988;
    const double C24182 = C5883 * C47988;
    const double C24339 = C6075 * C47988;
    const double C48297 = C47988 * C47978;
    const double C48338 = C48302 + C47988;
    const double C5749 = C362 * C48370;
    const double C8133 = C362 * C47996;
    const double C48305 = C47996 / C46962;
    const double C48301 = C47996 * C47978;
    const double C659 = C48384 - (C47988 * C47979) / C46956;
    const double C173 = C158 + C159;
    const double C10679 = C10658 + C10659;
    const double C31693 = C31672 + C31673;
    const double C5865 = C367 * C1160;
    const double C6226 = C367 * C46982;
    const double C7758 = C367 * C2642;
    const double C6049 = C968 * C1160;
    const double C6436 = C968 * C46982;
    const double C7968 = C968 * C2642;
    const double C6080 = C6072 * C1160;
    const double C7473 = C7471 * C1160;
    const double C174 = C160 + C161;
    const double C10680 = C10660 + C10661;
    const double C31694 = C31674 + C31675;
    const double C365 = C345 + C346;
    const double C11210 = C11202 + C11203;
    const double C32224 = C32216 + C32217;
    const double C369 = C353 + C354;
    const double C10874 = C10854 + C10855;
    const double C31888 = C31868 + C31869;
    const double C554 = C534 + C535;
    const double C10676 = C10652 + C10653;
    const double C11352 = C11344 + C11345;
    const double C31690 = C31666 + C31667;
    const double C32366 = C32358 + C32359;
    const double C558 = C542 + C543;
    const double C11068 = C11048 + C11049;
    const double C11060 = C11032 + C11033;
    const double C32082 = C32062 + C32063;
    const double C32074 = C32046 + C32047;
    const double C970 = C960 + C961;
    const double C10866 = C10838 + C10839;
    const double C11570 = C11558 + C11559;
    const double C31880 = C31852 + C31853;
    const double C32584 = C32572 + C32573;
    const double C47159 = C47156 / C47075;
    const double C5872 = C1450 * C1160;
    const double C6236 = C1450 * C46982;
    const double C7768 = C1450 * C2642;
    const double C6062 = C1612 * C1160;
    const double C6446 = C1612 * C46982;
    const double C8556 = C1612 * C2642;
    const double C47803 = C47801 + C47796;
    const double C503 = (C47103 * (3 * C47138 + C47100 * C47166) +
                         (3 * C47579 + C47100 * C47584) * ae) /
                        C47075;
    const double C511 =
        (2 * C47125 + C47100 * C47138 +
         C47103 * (C47103 * C47166 + C47584 * ae) + C47103 * C47584 * ae) /
        C47075;
    const double C946 =
        (C47103 * C47302 * C47166 + C47302 * C47584 * ae) / C47075;
    const double C124 = 4 * (2 * C47577 + C47100 * C47579) +
                        C47100 * (3 * C47579 + C47100 * C47584);
    const double C300 = C47302 * (3 * C47579 + C47100 * C47584);
    const double C304 = 2 * C47577 + C47100 * C47579 + C47584 * C47311;
    const double C489 = C47103 * (3 * C47579 + C47100 * C47584);
    const double C493 = 2 * C47577 + C47100 * C47579 + C47584 * C47344;
    const double C938 = C47103 * C47302 * C47584;
    const double C1437 =
        2 * C47302 * C47584 + C47302 * (C47584 + C47287 * C47311);
    const double C1599 = C47103 * (C47584 + C47287 * C47311);
    const double C2303 =
        2 * C47103 * C47584 + C47103 * (C47584 + C47287 * C47344);
    const double C2195 = C48250 * C1305;
    const double C11561 = C48367 * C1305;
    const double C32575 = C48367 * C1305;
    const double C2194 = C113 * C1295;
    const double C11560 = C10634 * C1295;
    const double C32574 = C31648 * C1295;
    const double C2031 =
        (3 * (C47138 + C47103 * C47720 + C47718 * ae) +
         C47103 * (2 * C47720 +
                   C47103 * (C47161 + C47103 * (C47103 * C47194 + C47281 * ae) +
                             C47103 * C47281 * ae) +
                   C47721 * ae) +
         (2 * C47718 + C47103 * C47721) * ae) /
        C47075;
    const double C1452 = C1446 + C1447;
    const double C1614 = C1608 + C1609;
    const double C10875 = C10856 + C10857;
    const double C31889 = C31870 + C31871;
    const double C2318 = C2312 + C2313;
    const double C11069 = C11050 + C11051;
    const double C32083 = C32064 + C32065;
    const double C6067 = C48250 * C1318;
    const double C12287 = C48367 * C1318;
    const double C33301 = C48367 * C1318;
    const double C6453 = C48250 * C1718;
    const double C12081 = C48367 * C1718;
    const double C33095 = C48367 * C1718;
    const double C5876 = C113 * C1165;
    const double C6066 = C113 * C1302;
    const double C12286 = C10634 * C1302;
    const double C33300 = C31648 * C1302;
    const double C6452 = C113 * C1714;
    const double C12080 = C10634 * C1714;
    const double C33094 = C31648 * C1714;
    const double C13147 = C48367 * C2029;
    const double C34153 = C48367 * C2029;
    const double C13146 = C10634 * C2019;
    const double C34152 = C31648 * C2019;
    const double C6983 =
        (3 * (C47733 + C47103 * C47783 + C47779 * ae) +
         C47103 * (2 * C47783 +
                   C47103 * (C47777 +
                             C47103 * (C47103 * C47302 * C47100 * C47188 +
                                       C47780 * ae) +
                             C47103 * C47780 * ae) +
                   C47784 * ae) +
         (2 * C47779 + C47103 * C47784) * ae) /
        C47075;
    const double C7324 = C7320 + C7321;
    const double C13011 = C13004 + C13005;
    const double C34017 = C34010 + C34011;
    const double C47816 = C47143 + C47814;
    const double C47262 = C47261 + C47256;
    const double C1176 =
        (-3 * (C47235 * C47311 + C47242)) / C46956 +
        C47302 * ((-2 * C47317) / C46956 - (C47302 * C47328) / C46956);
    const double C1319 = -(C47328 * C47344 + C47235 * C47311 + C47242) / C46956;
    const double C1719 =
        C47103 * ((-2 * C47317) / C46956 - (C47302 * C47328) / C46956);
    const double C2030 =
        (-3 * (C47235 * C47344 + C47242)) / C46956 +
        C47103 * ((-2 * C47353) / C46956 - (C47103 * C47358) / C46956);
    const double C47400 = C47398 / C46956;
    const double C47426 = C47423 / C47111;
    const double C47466 = C47462 / C46956;
    const double C47464 = C47460 / C47111;
    const double C6041 =
        (2 * C47729 + C47302 * C47742 +
         C47103 * (C47103 * (2 * C47302 * C47134 +
                             C47302 * (C47134 + C47155 * C47311)) +
                   C47753 * ae) +
         C47103 * C47753 * ae) /
        C47075;
    const double C6589 =
        (C47103 *
             (3 * C47742 + C47302 * (2 * C47302 * C47134 +
                                     C47302 * (C47134 + C47155 * C47311))) +
         (3 * C47673 + C47302 * C47753) * ae) /
        C47075;
    const double C23692 =
        (2 * (C47103 * C47825 + C47753 * ae) +
         C47103 * (C47825 +
                   C47103 * (C47103 * (2 * C47302 * C47155 +
                                       C47302 * (C47155 + C47188 * C47311)) +
                             C47833 * ae) +
                   C47103 * C47833 * ae) +
         (C47753 + C47833 * C47344) * ae) /
        C47075;
    const double C5851 = 4 * (2 * C47664 + C47302 * C47673) +
                         C47302 * (3 * C47673 + C47302 * C47753);
    const double C6039 = 2 * C47664 + C47302 * C47673 + C47753 * C47344;
    const double C6587 = C47103 * (3 * C47673 + C47302 * C47753);
    const double C23691 =
        2 * C47103 * C47753 + C47103 * (C47753 + C47833 * C47344);
    const double C23342 =
        (3 * (C47742 + C47103 * C47844 + C47842 * ae) +
         C47103 * (2 * C47844 +
                   C47103 * (C47823 +
                             C47103 * (C47103 * (C47155 + C47188 * C47311) +
                                       C47831 * ae) +
                             C47103 * C47831 * ae) +
                   C47845 * ae) +
         (2 * C47842 + C47103 * C47845) * ae) /
        C47075;
    const double C23701 = C23698 + C23699;
    const double C27288 = C27274 + C27275;
    const double C38552 = C38538 + C38539;
    const double C28593 = C48367 * C6981;
    const double C39853 = C48367 * C6981;
    const double C28592 = C10634 * C6979;
    const double C39852 = C31648 * C6979;
    const double C47862 = C47767 + C47860;
    const double C12799 = 4 * (2 * C47702 + C47103 * C47705) +
                          C47103 * (3 * C47705 + C47103 * C47802);
    const double C47882 = C47880 + C47875;
    const double C47247 = C47246 + C47245;
    const double C2192 = C113 * C1306;
    const double C11554 = C10634 * C1306;
    const double C13006 = C10633 * C1306;
    const double C32568 = C31648 * C1306;
    const double C34012 = C31647 * C1306;
    const double C7322 = C113 * C2423;
    const double C13008 = C10634 * C2423;
    const double C34014 = C31648 * C2423;
    const double C5886 = C5878 + C5879;
    const double C27105 = C27094 + C27095;
    const double C38369 = C38358 + C38359;
    const double C6078 = C6068 + C6069;
    const double C27287 = C27272 + C27273;
    const double C27285 = C27268 + C27269;
    const double C38551 = C38536 + C38537;
    const double C38549 = C38532 + C38533;
    const double C6602 = C6598 + C6599;
    const double C27103 = C27090 + C27091;
    const double C27753 = C27746 + C27747;
    const double C38367 = C38354 + C38355;
    const double C39017 = C39010 + C39011;
    const double C47449 = C47446 / C47075;
    const double C47201 = C47100 * C47199;
    const double C1438 =
        (2 * C47302 * C47166 + C47302 * (C47166 + C47199 * C47311)) / C47075;
    const double C1600 = (C47103 * (C47166 + C47199 * C47311) +
                          (C47584 + C47287 * C47311) * ae) /
                         C47075;
    const double C2304 =
        (2 * (C47103 * C47166 + C47584 * ae) +
         C47103 * (C47166 + C47103 * (C47103 * C47199 + C47287 * ae) +
                   C47103 * C47287 * ae) +
         (C47584 + C47287 * C47344) * ae) /
        C47075;
    const double C47290 = C47288 + C47280;
    const double C47402 = C47302 * C47401;
    const double C7460 = (-2 * C47103 * C47328) / C46956 -
                         (C47103 * (C47401 * C47344 + C47328)) / C46956;
    const double C47429 = C47427 + C47376;
    const double C47467 = C47103 * C47463;
    const double C47492 = C47488 - C47491;
    const double C23343 =
        (-3 * (C47393 * C47344 + C47325)) / C46956 +
        C47103 * ((-2 * C47497) / C46956 - (C47103 * C47502) / C46956);
    const double C47525 = C47522 / C46956;
    const double C47556 = C47549 - C47553;
    const double C6056 = C2198 * C1160;
    const double C7184 = C2198 * C46982;
    const double C7978 = C2198 * C2642;
    const double C5893 = C5887 * C1160;
    const double C6087 = C6079 * C1160;
    const double C6605 = C6603 * C1160;
    const double C165 = C48250 * C136;
    const double C675 = C48250 * C314;
    const double C358 = C48250 * C322;
    const double C47195 = C47192 - C47174;
    const double C5854 =
        4 * ((-2 * C47319) / C46956 - (C47302 * C47325) / C46956) +
        C47302 * ((-3 * C47325) / C46956 + C47302 * C47396);
    const double C6042 =
        (-2 * C47319) / C46956 - (C47302 * C47325) / C46956 + C47396 * C47344;
    const double C6590 = C47103 * ((-3 * C47325) / C46956 + C47302 * C47396);
    const double C47523 = C47520 / C47075;
    const double C12802 =
        4 * ((-2 * C47341) / C46956 - (C47103 * C47349) / C46956) +
        C47103 * ((-3 * C47349) / C46956 + C47103 * C47451);
    const double C47557 = C47554 - C47174;
    const double C47291 = C47289 / C46956;
    const double C47589 = C47587 + C47588;
    const double C2186 =
        (C47302 * C47166 + C47103 * (C47103 * C47302 * C47199 + C47724 * ae) +
         C47103 * C47724 * ae) /
        C47075;
    const double C2185 = C47302 * C47584 + C47724 * C47344;
    const double C6043 =
        (2 * C47733 + C47302 * C47746 +
         C47103 * (C47103 * (2 * C47302 * C47173 +
                             C47302 * (C47173 + C47100 * C47188 * C47311)) +
                   C47760 * ae) +
         C47103 * C47760 * ae) /
        C47075;
    const double C6591 =
        (C47103 * (3 * C47746 +
                   C47302 * (2 * C47302 * C47173 +
                             C47302 * (C47173 + C47100 * C47188 * C47311))) +
         (3 * C47677 + C47302 * C47760) * ae) /
        C47075;
    const double C5852 = 4 * (2 * C47661 + C47302 * C47677) +
                         C47302 * (3 * C47677 + C47302 * C47760);
    const double C6040 = 2 * C47661 + C47302 * C47677 + C47760 * C47344;
    const double C6588 = C47103 * (3 * C47677 + C47302 * C47760);
    const double C12800 = 4 * (2 * C47710 + C47103 * C47713) +
                          C47103 * (3 * C47713 + C47103 * C47817);
    const double C47835 = C47828 + C47834;
    const double C28129 = 4 * (2 * C47769 + C47103 * C47774) +
                          C47103 * (3 * C47774 + C47103 * C47863);
    const double C47885 = C47873 + C47883;
    const double C22544 = C5867 + C5866;
    const double C47141 = C47140 - C47131;
    const double C47351 = C47350 - C47346;
    const double C7472 = C7470 * C47983;
    const double C22545 = C5889 + C5888;
    const double C22672 = C6083 + C6082;
    const double C47167 = C47165 - C47150;
    const double C47385 = C47384 - C47144;
    const double C47418 = C47417 / C47075;
    const double C47450 = C47447 - C47439;
    const double C47200 = C47198 - C47182;
    const double C47480 = C47479 - C47174;
    const double C47524 = C47521 / C47075;
    const double C47555 = C47552 - C47542;
    const double C48318 = C48090 * C48084;
    const double C48355 = C48320 + C48090;
    const double C48322 = C48097 / C46962;
    const double C48319 = C48097 * C48084;
    const double C1431 = C48388 - (C48090 * C48086) / C46956;
    const double C48324 = C48130 * C48124;
    const double C48361 = C48326 + C48130;
    const double C48328 = C48137 / C46962;
    const double C48325 = C48137 * C48124;
    const double C2299 = C48390 - (C48130 * C48126) / C46956;
    const double C47005 = C46996 - C47002;
    const double C46995 = C46990 * de;
    const double C8134 = C363 * C47017;
    const double C118 =
        (C47017 / C46962 + (0 * ce) / C46956) / C46962 - (0 * de) / C46956;
    const double C668 = C47017 / C46962 - (0 * de) / C46956;
    const double C2536 = C47017 / C46962 + (0 * ce) / C46956;
    const double C5750 = C363 * C1091;
    const double C46994 = C46989 * ce;
    const double C293 =
        ((-C46957 / C46956) / C46962 - (C46975 * de) / C46956) / C46962 -
        ((C46954 * ((-C46964) / C46962 - (C46989 * de) / C46956) + C2635) *
         de) /
            C46956 +
        (-C46976 / C46956) / C46962 - (0 * de) / C46956;
    const double C294 =
        ((-C46964) / C46962 - (C46989 * de) / C46956) / C46962 -
        ((C46954 * ((-C46976 / C46956) / C46962 - (0 * de) / C46956) + C47993) *
         de) /
            C46956;
    const double C2641 = (-C46964) / C46962 - (C46989 * de) / C46956;
    const double C48334 = C48297 / C46956;
    const double C48371 = C48338 / C46962;
    const double C48372 = C48340 + C48305;
    const double C661 = C48305 - C47994 / C46968;
    const double C48337 = C48301 / C46956;
    const double C5251 = C362 * C659;
    const double C5243 = C4959 * C659;
    const double C22099 = C4960 * C659;
    const double C4942 = C365 * C295;
    const double C5756 = C365 * C1091;
    const double C8140 = C365 * C47017;
    const double C4950 = C369 * C295;
    const double C5762 = C369 * C1091;
    const double C6230 = C369 * C46982;
    const double C7762 = C369 * C2642;
    const double C8146 = C369 * C47017;
    const double C5588 = C970 * C295;
    const double C6440 = C970 * C46982;
    const double C7972 = C970 * C2642;
    const double C8352 = C970 * C47017;
    const double C9748 = C970 * C1091;
    const double C47162 = C47159 - C47144;
    const double C12801 =
        (4 * (2 * C47704 + C47103 * C47803 + C47705 * ae) +
         C47103 *
             (3 * C47803 +
              C47103 *
                  (2 * C47795 +
                   C47103 * (C47134 + C47103 * (C47103 * C47155 + C47230 * ae) +
                             C47103 * C47230 * ae) +
                   C47797 * ae) +
              C47802 * ae) +
         (3 * C47705 + C47103 * C47802) * ae) /
        C47075;
    const double C785 = C48250 * C503;
    const double C10663 = C48367 * C503;
    const double C31677 = C48367 * C503;
    const double C547 = C48250 * C511;
    const double C11347 = C48367 * C511;
    const double C32361 = C48367 * C511;
    const double C965 = C48250 * C946;
    const double C11205 = C48367 * C946;
    const double C32219 = C48367 * C946;
    const double C164 = C113 * C124;
    const double C674 = C113 * C300;
    const double C357 = C113 * C304;
    const double C784 = C113 * C489;
    const double C10662 = C10634 * C489;
    const double C31676 = C31648 * C489;
    const double C546 = C113 * C493;
    const double C11346 = C10634 * C493;
    const double C32360 = C31648 * C493;
    const double C964 = C113 * C938;
    const double C11204 = C10634 * C938;
    const double C32218 = C31648 * C938;
    const double C2200 = C2194 + C2195;
    const double C11571 = C11560 + C11561;
    const double C32585 = C32574 + C32575;
    const double C6240 = C1452 * C46982;
    const double C7772 = C1452 * C2642;
    const double C21883 = C1452 * C295;
    const double C22471 = C1452 * C1091;
    const double C24185 = C1452 * C47017;
    const double C6450 = C1614 * C46982;
    const double C8560 = C1614 * C2642;
    const double C22354 = C1614 * C295;
    const double C24342 = C1614 * C47017;
    const double C25392 = C1614 * C1091;
    const double C5885 = C5876 + C5877;
    const double C6077 = C6066 + C6067;
    const double C12293 = C12286 + C12287;
    const double C33307 = C33300 + C33301;
    const double C6456 = C6452 + C6453;
    const double C12087 = C12080 + C12081;
    const double C33101 = C33094 + C33095;
    const double C13153 = C13146 + C13147;
    const double C34159 = C34152 + C34153;
    const double C7465 = C7324 * C1160;
    const double C47818 = C47816 + C47811;
    const double C47263 = C47100 * C47262;
    const double C47268 = -3 * C47262;
    const double C47315 = C47302 * C47262;
    const double C47363 = ae * C47262;
    const double C47361 = C47103 * C47262;
    const double C5874 = C113 * C1176;
    const double C6064 = C113 * C1319;
    const double C12290 = C10634 * C1319;
    const double C33304 = C31648 * C1319;
    const double C6454 = C113 * C1719;
    const double C12084 = C10634 * C1719;
    const double C33098 = C31648 * C1719;
    const double C13150 = C10634 * C2030;
    const double C34156 = C31648 * C2030;
    const double C22677 = C48250 * C6041;
    const double C27749 = C48367 * C6041;
    const double C39013 = C48367 * C6041;
    const double C23054 = C48250 * C6589;
    const double C27097 = C48367 * C6589;
    const double C38361 = C48367 * C6589;
    const double C22549 = C113 * C5851;
    const double C22676 = C113 * C6039;
    const double C27748 = C10634 * C6039;
    const double C39012 = C31648 * C6039;
    const double C23053 = C113 * C6587;
    const double C27096 = C10634 * C6587;
    const double C38360 = C31648 * C6587;
    const double C23703 = C23701 * C1160;
    const double C28598 = C28592 + C28593;
    const double C39858 = C39852 + C39853;
    const double C47864 = C47862 + C47855;
    const double C47884 = C47103 * C47882;
    const double C135 =
        (-3 * (C47100 * C47242 + C47238 + C47577 * ce)) / C46956 +
        C47100 * ((-2 * C47242) / C46956 - (C47100 * C47247) / C46956 -
                  (C47579 * ce) / C46956) -
        ((2 * C47577 + C47100 * C47579) * ce) / C46956;
    const double C313 =
        C47302 * ((-2 * C47242) / C46956 - (C47100 * C47247) / C46956 -
                  (C47579 * ce) / C46956);
    const double C321 =
        -(C47247 * C47311 + C47100 * C47242 + C47238 + C47577 * ce) / C46956;
    const double C502 =
        C47103 * ((-2 * C47242) / C46956 - (C47100 * C47247) / C46956 -
                  (C47579 * ce) / C46956);
    const double C510 =
        -(C47247 * C47344 + C47100 * C47242 + C47238 + C47577 * ce) / C46956;
    const double C945 = -(C47103 * C47302 * C47247) / C46956;
    const double C1167 = (-2 * C47302 * C47247) / C46956 -
                         (C47302 * (C47262 * C47311 + C47247)) / C46956;
    const double C1310 = -(C47103 * (C47262 * C47311 + C47247)) / C46956;
    const double C2021 = (-2 * C47103 * C47247) / C46956 -
                         (C47103 * (C47262 * C47344 + C47247)) / C46956;
    const double C5892 = C5886 * C47983;
    const double C22785 = C5886 * C48298;
    const double C23911 = C5886 * C2635;
    const double C6086 = C6078 * C47983;
    const double C23493 = C6078 * C48298;
    const double C24067 = C6078 * C2635;
    const double C6604 = C6602 * C47983;
    const double C22942 = C6602 * C48298;
    const double C24492 = C6602 * C2635;
    const double C47452 = C47449 - C47144;
    const double C47203 = C47178 + C47201;
    const double C47292 = C47100 * C47290;
    const double C47330 = C47290 * C47311;
    const double C47364 = C47290 * C47344;
    const double C47379 = C47302 * C47290;
    const double C47403 = C47402 / C46956;
    const double C6984 =
        (-3 * (C47376 * C47344 + C47317)) / C46956 +
        C47103 * ((-2 * C47421) / C46956 - (C47103 * C47429) / C46956);
    const double C47470 = C47467 / C46956;
    const double C47493 = C47302 * C47492;
    const double C23693 =
        2 * C47103 * C47396 + C47103 * (C47396 + C47492 * C47344);
    const double C47528 = C47518 - C47525;
    const double C47559 = C47103 * C47556;
    const double C22547 = C113 * C5854;
    const double C22674 = C113 * C6042;
    const double C27744 = C10634 * C6042;
    const double C39008 = C31648 * C6042;
    const double C23051 = C113 * C6590;
    const double C27092 = C10634 * C6590;
    const double C38356 = C31648 * C6590;
    const double C47526 = C47523 - C47507;
    const double C125 = 5 * (3 * C47579 + C47100 * C47584) +
                        C47100 * (4 * C47584 + C47100 * C47589);
    const double C305 = 3 * C47579 + C47100 * C47584 + C47589 * C47311;
    const double C494 = 3 * C47579 + C47100 * C47584 + C47589 * C47344;
    const double C669 = C47302 * (4 * C47584 + C47100 * C47589);
    const double C779 = C47103 * (4 * C47584 + C47100 * C47589);
    const double C939 = C47103 * C47302 * C47589;
    const double C22668 =
        (3 * C47742 + C47302 * C47825 +
         C47103 * (C47103 * (3 * C47823 +
                             C47302 * (2 * C47302 * C47155 +
                                       C47302 * (C47155 + C47188 * C47311))) +
                   C47835 * ae) +
         C47103 * C47835 * ae) /
        C47075;
    const double C23046 =
        (C47103 * (4 * C47825 +
                   C47302 * (3 * C47823 +
                             C47302 * (2 * C47302 * C47155 +
                                       C47302 * (C47155 + C47188 * C47311)))) +
         (4 * C47753 + C47302 * C47835) * ae) /
        C47075;
    const double C22539 = 5 * (3 * C47673 + C47302 * C47753) +
                          C47302 * (4 * C47753 + C47302 * C47835);
    const double C22667 = 3 * C47673 + C47302 * C47753 + C47835 * C47344;
    const double C23045 = C47103 * (4 * C47753 + C47302 * C47835);
    const double C44359 = 5 * (3 * C47705 + C47103 * C47802) +
                          C47103 * (4 * C47802 + C47103 * C47885);
    const double C22551 = C22544 * C48010;
    const double C144 =
        3 * ((-(C47125 * ce) / C46956) / C47075 - C47122 / C47111 +
             C47100 * C47141) -
        ((2 * C47125 + C47100 * C47138) * ce) / C47111 +
        C47100 *
            (2 * C47141 - (C47138 * ce) / C47111 +
             C47100 *
                 ((-(C47100 * C47134 * ce) / C46956) / C47075 -
                  C47133 / C47111 +
                  C47100 * ((-(C47100 * std::pow(C47105, 6) * bs[6] * C47116) /
                             C46956) /
                                C47075 -
                            (C47134 * ce) / C47111)));
    const double C328 = (yP - yQ) * ((-(C47125 * ce) / C46956) / C47075 -
                                     C47122 / C47111 + C47100 * C47141);
    const double C332 = (-(C47100 * C47122) / C46956) / C47075 -
                        (C47115 * ce) / C47111 + C47141 * std::pow(yP - yQ, 2);
    const double C517 =
        C47103 * ((-(C47125 * ce) / C46956) / C47075 - C47122 / C47111 +
                  C47100 * C47141) -
        (ae * (C47100 * (C47100 * C47118 * C47119 * C47220 + C47221 * ce) +
               C47112 * C47108 * C47220 + C47100 * C47221 * ce)) /
            C47111;
    const double C521 = (-(C47100 * C47122) / C46956) / C47075 -
                        (C47115 * ce) / C47111 -
                        (ae * C47103 * C47242) / C47111 +
                        C47103 * (C47103 * C47141 - (ae * C47242) / C47111);
    const double C951 =
        C47103 * C47302 * C47141 - (ae * C47302 * C47242) / C47111;
    const double C2036 =
        3 * ((-(ae * C47341) / C46956) / C47075 - C47122 / C47111 +
             C47103 * C47351) +
        (((-2 * C47341) / C46956 - (C47103 * C47349) / C46956) * ae) / C47075 +
        C47103 *
            (2 * C47351 - (ae * C47349) / C47111 +
             C47103 * ((-(ae * C47103 * C47231) / C46956) / C47075 - C47144 +
                       C47103 * ((-(C47103 * C47154) / C46956) / C47075 -
                                 (ae * C47231) / C47111)));
    const double C22552 = C22545 * C48010;
    const double C22678 = C22672 * C48010;
    const double C47168 = C47100 * C47167;
    const double C47171 = 2 * C47167;
    const double C47354 = C47103 * C47167;
    const double C47375 = C47302 * C47167;
    const double C47468 = C47167 - C47464;
    const double C1180 =
        2 * C47302 * C47141 + C47302 * (C47141 + C47167 * std::pow(C47302, 2));
    const double C1323 =
        C47302 * C47141 - (ae * C47103 * C47317) / C47111 +
        C47103 * (C47103 * C47302 * C47167 - (ae * C47317) / C47111);
    const double C1326 = C47103 * (C47141 + C47167 * C47311) -
                         (ae * (C47235 * C47311 + C47242)) / C47111;
    const double C2034 =
        2 * (C47103 * C47141 - (ae * C47242) / C47111) -
        (ae * (C47235 * std::pow(C47103, 2) + C47242)) / C47111 +
        C47103 * (C47141 - (ae * C47103 * C47235) / C47111 +
                  C47103 * (C47103 * C47167 - (ae * C47235) / C47111));
    const double C5857 =
        4 * ((-2 * C47372) / C47111 + C47302 * C47385) +
        C47302 * (3 * C47385 +
                  C47302 * ((-2 * C47302 * C47154) / C47111 +
                            C47302 * ((-(C47187 * C47311) / C46956) / C47075 -
                                      C47174)));
    const double C6045 =
        (-2 * C47372) / C47111 + C47302 * C47385 +
        (C47103 * C47396 * ae) / C47075 +
        C47103 * ((C47396 * ae) / C47075 +
                  C47103 * ((-2 * C47302 * C47154) / C47111 +
                            C47302 * ((-(C47187 * C47311) / C46956) / C47075 -
                                      C47174)));
    const double C6593 =
        (((-3 * C47325) / C46956 + C47302 * C47396) * ae) / C47075 +
        C47103 * (3 * C47385 +
                  C47302 * ((-2 * C47302 * C47154) / C47111 +
                            C47302 * ((-(C47187 * C47311) / C46956) / C47075 -
                                      C47174)));
    const double C7461 =
        2 * (C47103 * C47385 - (ae * C47325) / C47111) -
        (ae * (C47393 * C47344 + C47325)) / C47111 +
        C47103 * (C47385 - (ae * C47103 * C47393) / C47111 +
                  C47103 * (C47103 * ((-(C47187 * C47311) / C46956) / C47075 -
                                      C47174) -
                            (ae * C47393) / C47111));
    const double C47419 = C47418 - C47413;
    const double C47453 = C47103 * C47450;
    const double C47532 = 2 * C47450;
    const double C47202 = C47100 * C47200;
    const double C47387 = C47200 * C47311;
    const double C47422 = C47302 * C47200;
    const double C47457 = C47103 * C47200;
    const double C1183 =
        3 * (C47141 + C47167 * C47311) +
        C47302 * (2 * C47302 * C47167 + C47302 * (C47167 + C47200 * C47311));
    const double C1329 =
        C47141 + C47167 * C47311 - (ae * C47103 * C47328) / C47111 +
        C47103 * (C47103 * (C47167 + C47200 * C47311) - (ae * C47328) / C47111);
    const double C1723 =
        (((-2 * C47317) / C46956 - (C47302 * C47328) / C46956) * ae) / C47075 +
        C47103 * (2 * C47302 * C47167 + C47302 * (C47167 + C47200 * C47311));
    const double C47481 = C47302 * C47480;
    const double C47498 = C47103 * C47480;
    const double C47527 = C47524 - C47513;
    const double C47558 = C47103 * C47555;
    const double C48352 = C48318 / C46956;
    const double C48378 = C48355 / C46962;
    const double C48379 = C48356 + C48322;
    const double C1433 = C48322 - C48095 / C46968;
    const double C48354 = C48319 / C46956;
    const double C48358 = C48324 / C46956;
    const double C48381 = C48361 / C46962;
    const double C48382 = C48362 + C48328;
    const double C2301 = C48328 - C48135 / C46968;
    const double C48360 = C48325 / C46956;
    const double C46999 = C46995 / C46956;
    const double C5248 = C365 * C668;
    const double C7610 = C365 * C2536;
    const double C46998 = C46994 / C46956;
    const double C4954 = C367 * C293;
    const double C4938 = C361 * C293;
    const double C4965 = C4961 * C293;
    const double C4962 = C4958 * C293;
    const double C5592 = C968 * C293;
    const double C5599 = C5597 * C293;
    const double C21881 = C5882 * C293;
    const double C22352 = C6074 * C293;
    const double C4952 = C369 * C294;
    const double C4944 = C367 * C294;
    const double C4940 = C363 * C294;
    const double C4934 = C361 * C294;
    const double C5590 = C970 * C294;
    const double C5582 = C968 * C294;
    const double C21879 = C1450 * C294;
    const double C22350 = C1612 * C294;
    const double C7770 = C1450 * C2641;
    const double C7766 = C5882 * C2641;
    const double C7764 = C367 * C2641;
    const double C7760 = C4961 * C2641;
    const double C7754 = C361 * C2641;
    const double C7750 = C4958 * C2641;
    const double C7980 = C2198 * C2641;
    const double C7976 = C6072 * C2641;
    const double C7974 = C968 * C2641;
    const double C7970 = C5597 * C2641;
    const double C8558 = C1612 * C2641;
    const double C8554 = C6074 * C2641;
    const double C23910 = C5887 * C2641;
    const double C24066 = C6079 * C2641;
    const double C24491 = C6603 * C2641;
    const double C48392 = C48334 + C48384;
    const double C660 = C48371 - (C47996 * C47979) / C46956;
    const double C105 = C48372 / C46962 - C47994 / C48341;
    const double C48385 = C48337 + C48371;
    const double C176 = C164 + C165;
    const double C678 = C674 + C675;
    const double C371 = C357 + C358;
    const double C788 = C784 + C785;
    const double C10681 = C10662 + C10663;
    const double C31695 = C31676 + C31677;
    const double C560 = C546 + C547;
    const double C11353 = C11346 + C11347;
    const double C32367 = C32360 + C32361;
    const double C972 = C964 + C965;
    const double C11211 = C11204 + C11205;
    const double C32225 = C32218 + C32219;
    const double C7188 = C2200 * C46982;
    const double C7982 = C2200 * C2642;
    const double C5891 = C5885 * C1160;
    const double C22786 = C5885 * C46982;
    const double C23912 = C5885 * C2642;
    const double C6085 = C6077 * C1160;
    const double C23494 = C6077 * C46982;
    const double C24068 = C6077 * C2642;
    const double C6597 = C6456 * C1160;
    const double C22943 = C6456 * C46982;
    const double C24493 = C6456 * C2642;
    const double C12803 =
        (4 * (2 * C47712 + C47103 * C47818 + C47713 * ae) +
         C47103 * (3 * C47818 +
                   C47103 * (2 * C47810 +
                             C47103 * (C47173 +
                                       C47103 * (C47103 * C47100 * C47188 +
                                                 C47277 * ae) +
                                       C47103 * C47277 * ae) +
                             C47812 * ae) +
                   C47817 * ae) +
         (3 * C47713 + C47103 * C47817) * ae) /
        C47075;
    const double C47264 = C47263 / C46956;
    const double C47273 = C47268 / C46956;
    const double C1304 = -(C47315 * C47344 + C47302 * C47247) / C46956;
    const double C47365 = C47363 / C47111;
    const double C22555 = C22549 + C22550;
    const double C22681 = C22676 + C22677;
    const double C27754 = C27748 + C27749;
    const double C39018 = C39012 + C39013;
    const double C23057 = C23053 + C23054;
    const double C27106 = C27096 + C27097;
    const double C38370 = C38360 + C38361;
    const double C28130 =
        (4 * (2 * C47773 + C47103 * C47864 + C47774 * ae) +
         C47103 * (3 * C47864 +
                   C47103 * (2 * C47858 +
                             C47103 * (C47850 +
                                       C47103 * (C47103 * C47302 * C47188 +
                                                 C47853 * ae) +
                                       C47103 * C47853 * ae) +
                             C47859 * ae) +
                   C47863 * ae) +
         (3 * C47774 + C47103 * C47863) * ae) /
        C47075;
    const double C47886 = C47867 + C47884;
    const double C162 = C113 * C135;
    const double C10664 = C10633 * C135;
    const double C31678 = C31647 * C135;
    const double C347 = C113 * C313;
    const double C11206 = C10633 * C313;
    const double C32220 = C31647 * C313;
    const double C355 = C113 * C321;
    const double C10858 = C10633 * C321;
    const double C31872 = C31647 * C321;
    const double C536 = C113 * C502;
    const double C10656 = C10634 * C502;
    const double C11348 = C10633 * C502;
    const double C31670 = C31648 * C502;
    const double C32362 = C31647 * C502;
    const double C544 = C113 * C510;
    const double C11052 = C10633 * C510;
    const double C11036 = C10634 * C510;
    const double C32066 = C31647 * C510;
    const double C32050 = C31648 * C510;
    const double C962 = C113 * C945;
    const double C10842 = C10634 * C945;
    const double C11562 = C10633 * C945;
    const double C31856 = C31648 * C945;
    const double C32576 = C31647 * C945;
    const double C1448 = C113 * C1167;
    const double C1610 = C113 * C1310;
    const double C10860 = C10634 * C1310;
    const double C31874 = C31648 * C1310;
    const double C2314 = C113 * C2021;
    const double C11054 = C10634 * C2021;
    const double C32068 = C31648 * C2021;
    const double C22546 = C5893 + C5892;
    const double C22673 = C6087 + C6086;
    const double C23050 = C6605 + C6604;
    const double C138 = (5 * (3 * C47138 + C47100 * C47166) +
                         C47100 * (4 * C47166 + C47100 * C47203)) /
                        C47075;
    const double C324 =
        (3 * C47138 + C47100 * C47166 + C47203 * C47311) / C47075;
    const double C513 =
        (3 * C47138 + C47100 * C47166 +
         C47103 * (C47103 * C47203 + C47589 * ae) + C47103 * C47589 * ae) /
        C47075;
    const double C670 = (C47302 * (4 * C47166 + C47100 * C47203)) / C47075;
    const double C780 = (C47103 * (4 * C47166 + C47100 * C47203) +
                         (4 * C47584 + C47100 * C47589) * ae) /
                        C47075;
    const double C948 =
        (C47103 * C47302 * C47203 + C47302 * C47589 * ae) / C47075;
    const double C47293 = C47292 / C46956;
    const double C47331 = C47330 + C47262;
    const double C47366 = C47364 + C47262;
    const double C2425 = (-2 * C47103 * C47315) / C46956 -
                         (C47103 * (C47379 * C47344 + C47315)) / C46956;
    const double C47404 = C47400 - C47403;
    const double C47472 = C47466 - C47470;
    const double C47494 = C47487 + C47493;
    const double C28131 =
        4 * ((-2 * C47408) / C46956 - (C47103 * C47416) / C46956) +
        C47103 * ((-3 * C47416) / C46956 + C47103 * C47528);
    const double C47561 = C47543 + C47559;
    const double C163 = C48250 * C144;
    const double C10665 = C10631 * C144;
    const double C31679 = C31645 * C144;
    const double C344 = C48250 * C328;
    const double C10845 = C10631 * C328;
    const double C31859 = C31645 * C328;
    const double C352 = C48250 * C332;
    const double C10853 = C10631 * C332;
    const double C31867 = C31645 * C332;
    const double C533 = C48250 * C517;
    const double C10651 = C48367 * C517;
    const double C11039 = C10631 * C517;
    const double C31665 = C48367 * C517;
    const double C32053 = C31645 * C517;
    const double C541 = C48250 * C521;
    const double C11047 = C10631 * C521;
    const double C11031 = C48367 * C521;
    const double C32061 = C31645 * C521;
    const double C32045 = C48367 * C521;
    const double C959 = C48250 * C951;
    const double C10837 = C48367 * C951;
    const double C11557 = C10631 * C951;
    const double C31851 = C48367 * C951;
    const double C32571 = C31645 * C951;
    const double C47169 = C47162 + C47168;
    const double C47185 = C47171 - C47179;
    const double C47359 = C47354 - C47357;
    const double C2427 =
        2 * (C47103 * C47375 - (ae * C47317) / C47111) -
        (ae * (C47376 * C47344 + C47317)) / C47111 +
        C47103 * (C47375 - (ae * C47103 * C47376) / C47111 +
                  C47103 * (C47103 * C47302 * C47200 - (ae * C47376) / C47111));
    const double C1445 = C48250 * C1180;
    const double C12083 = C10631 * C1180;
    const double C33097 = C31645 * C1180;
    const double C2193 = C48250 * C1323;
    const double C11555 = C48367 * C1323;
    const double C13007 = C10631 * C1323;
    const double C32569 = C48367 * C1323;
    const double C34013 = C31645 * C1323;
    const double C1607 = C48250 * C1326;
    const double C10851 = C48367 * C1326;
    const double C12289 = C10631 * C1326;
    const double C31865 = C48367 * C1326;
    const double C33303 = C31645 * C1326;
    const double C2311 = C48250 * C2034;
    const double C11045 = C48367 * C2034;
    const double C13149 = C10631 * C2034;
    const double C32059 = C48367 * C2034;
    const double C34155 = C31645 * C2034;
    const double C22548 = C48250 * C5857;
    const double C22675 = C48250 * C6045;
    const double C27745 = C48367 * C6045;
    const double C39009 = C48367 * C6045;
    const double C23052 = C48250 * C6593;
    const double C27093 = C48367 * C6593;
    const double C38357 = C48367 * C6593;
    const double C23697 = C48250 * C7461;
    const double C27271 = C48367 * C7461;
    const double C38535 = C48367 * C7461;
    const double C6985 =
        3 * ((-(ae * C47408) / C46956) / C47075 - C47372 / C47111 +
             C47103 * C47419) +
        (((-2 * C47408) / C46956 - (C47103 * C47416) / C46956) * ae) / C47075 +
        C47103 * (2 * C47419 - (ae * C47416) / C47111 +
                  C47103 * ((-(ae * C47103 * C47411) / C46956) / C47075 -
                            C47409 / C47111 +
                            C47103 * ((-(C47103 * C47302 * C47187) / C46956) /
                                          C47075 -
                                      (ae * C47411) / C47111)));
    const double C47454 = C47452 + C47453;
    const double C47546 = C47532 - C47539;
    const double C47204 = C47195 + C47202;
    const double C47388 = C47167 + C47387;
    const double C47425 = C47103 * C47422;
    const double C47465 = C47457 - C47461;
    const double C5875 = C48250 * C1183;
    const double C6065 = C48250 * C1329;
    const double C12291 = C48367 * C1329;
    const double C33305 = C48367 * C1329;
    const double C6455 = C48250 * C1723;
    const double C12085 = C48367 * C1723;
    const double C33099 = C48367 * C1723;
    const double C47482 = C47476 + C47481;
    const double C47503 = C47498 - C47501;
    const double C47529 = C47103 * C47527;
    const double C47560 = C47557 + C47558;
    const double C48393 = C48352 + C48388;
    const double C1432 = C48378 - (C48097 * C48086) / C46956;
    const double C1158 = C48379 / C46962 - C48095 / C48341;
    const double C48389 = C48354 + C48378;
    const double C48394 = C48358 + C48390;
    const double C2300 = C48381 - (C48137 * C48126) / C46956;
    const double C2013 = C48382 / C46962 - C48135 / C48341;
    const double C48391 = C48360 + C48381;
    const double C47001 = C46998 - C46977;
    const double C21878 = C4965 + C4964;
    const double C23909 = C7767 + C7766;
    const double C23908 = C7760 + C7759;
    const double C24490 = C8555 + C8554;
    const double C7613 = C362 * C48392;
    const double C7605 = C4959 * C48392;
    const double C23803 = C4960 * C48392;
    const double C102 =
        (C48383 + 2 * C47988) / C46962 - (C48392 * C47979) / C46956;
    const double C5245 = C362 * C660;
    const double C7607 = C362 * C48385;
    const double C103 =
        (C48370 + 2 * C47996 + C48392) / C46962 - (C48385 * C47979) / C46956;
    const double C104 = (C48339 + C47993 / C46956 + C48385) / C46962 -
                        (C48372 * C47979) / C46956;
    const double C5256 = C678 * C668;
    const double C7618 = C678 * C2536;
    const double C4956 = C371 * C295;
    const double C5768 = C371 * C1091;
    const double C8152 = C371 * C47017;
    const double C22104 = C371 * C668;
    const double C23808 = C371 * C2536;
    const double C5594 = C972 * C295;
    const double C8358 = C972 * C47017;
    const double C9754 = C972 * C1091;
    const double C47265 = C47254 - C47264;
    const double C2196 = C113 * C1304;
    const double C11564 = C10634 * C1304;
    const double C32578 = C31648 * C1304;
    const double C22557 = C22555 * C1160;
    const double C22683 = C22681 * C1160;
    const double C23059 = C23057 * C1160;
    const double C47887 = C47886 + C47871;
    const double C22553 = C22546 * C48010;
    const double C22679 = C22673 * C48010;
    const double C23055 = C23050 * C48010;
    const double C47294 = C47274 - C47293;
    const double C1178 =
        (-3 * (C47262 * C47311 + C47247)) / C46956 +
        C47302 * ((-2 * C47315) / C46956 - (C47302 * C47331) / C46956);
    const double C1321 = -(C47331 * C47344 + C47262 * C47311 + C47247) / C46956;
    const double C1721 =
        C47103 * ((-2 * C47315) / C46956 - (C47302 * C47331) / C46956);
    const double C2032 =
        (-3 * (C47262 * C47344 + C47247)) / C46956 +
        C47103 * ((-2 * C47361) / C46956 - (C47103 * C47366) / C46956);
    const double C5856 =
        4 * ((-2 * C47317) / C46956 - (C47302 * C47328) / C46956) +
        C47302 * ((-3 * C47328) / C46956 + C47302 * C47404);
    const double C6044 =
        (-2 * C47317) / C46956 - (C47302 * C47328) / C46956 + C47404 * C47344;
    const double C6592 = C47103 * ((-3 * C47328) / C46956 + C47302 * C47404);
    const double C12804 =
        4 * ((-2 * C47353) / C46956 - (C47103 * C47358) / C46956) +
        C47103 * ((-3 * C47358) / C46956 + C47103 * C47472);
    const double C22541 = 5 * ((-3 * C47325) / C46956 + C47302 * C47396) +
                          C47302 * (4 * C47396 + C47302 * C47494);
    const double C22669 =
        (-3 * C47325) / C46956 + C47302 * C47396 + C47494 * C47344;
    const double C23047 = C47103 * (4 * C47396 + C47302 * C47494);
    const double C44361 = 5 * ((-3 * C47349) / C46956 + C47103 * C47451) +
                          C47103 * (4 * C47451 + C47103 * C47561);
    const double C175 = C162 + C163;
    const double C10682 = C10664 + C10665;
    const double C31696 = C31678 + C31679;
    const double C364 = C343 + C344;
    const double C10869 = C10844 + C10845;
    const double C31883 = C31858 + C31859;
    const double C368 = C351 + C352;
    const double C10873 = C10852 + C10853;
    const double C31887 = C31866 + C31867;
    const double C553 = C532 + C533;
    const double C10675 = C10650 + C10651;
    const double C11063 = C11038 + C11039;
    const double C31689 = C31664 + C31665;
    const double C32077 = C32052 + C32053;
    const double C557 = C540 + C541;
    const double C11067 = C11046 + C11047;
    const double C11059 = C11030 + C11031;
    const double C32081 = C32060 + C32061;
    const double C32073 = C32044 + C32045;
    const double C969 = C958 + C959;
    const double C10865 = C10836 + C10837;
    const double C11569 = C11556 + C11557;
    const double C31879 = C31850 + C31851;
    const double C32583 = C32570 + C32571;
    const double C145 =
        4 * (2 * C47141 - (C47138 * ce) / C47111 + C47100 * C47169) -
        ((3 * C47138 + C47100 * C47166) * ce) / C47111 +
        C47100 *
            (3 * C47169 - (C47166 * ce) / C47111 +
             C47100 * (2 * C47167 - (C47161 * ce) / C47111 +
                       C47100 * ((-(C47100 * C47155 * ce) / C46956) / C47075 -
                                 C47154 / C47111 +
                                 C47100 * ((-(C47100 * std::pow(C47107, 7) *
                                              bs[7] * C47116) /
                                            C46956) /
                                               C47075 -
                                           (C47155 * ce) / C47111))));
    const double C329 =
        (yP - yQ) * (2 * C47141 - (C47138 * ce) / C47111 + C47100 * C47169);
    const double C333 = (-(C47125 * ce) / C46956) / C47075 - C47122 / C47111 +
                        C47100 * C47141 + C47169 * std::pow(yP - yQ, 2);
    const double C518 =
        (((-2 * (C47100 * C47225 + C47221 * ce)) / C46956 -
          (C47100 *
           (C47100 * (C47100 * C47126 * C47127 * C47220 + C47224 * ce) +
            C47225 + C47100 * C47224 * ce)) /
              C46956 -
          ((C47221 + C47224 * C47129) * ce) / C46956) *
         ae) /
            C47075 +
        C47103 * (2 * C47141 - (C47138 * ce) / C47111 + C47100 * C47169);
    const double C522 = (-(C47125 * ce) / C46956) / C47075 - C47122 / C47111 +
                        C47100 * C47141 - (ae * C47103 * C47247) / C47111 +
                        C47103 * (C47103 * C47169 - (ae * C47247) / C47111);
    const double C952 =
        C47103 * C47302 * C47169 - (ae * C47302 * C47247) / C47111;
    const double C2037 =
        3 * (C47141 - (ae * C47353) / C47111 + C47103 * C47359) +
        (((-2 * C47353) / C46956 - (C47103 * C47358) / C46956) * ae) / C47075 +
        C47103 *
            (2 * C47359 - (ae * C47358) / C47111 +
             C47103 * (C47167 - (ae * C47103 * C47259) / C47111 +
                       C47103 * (C47103 * C47200 - (ae * C47259) / C47111)));
    const double C7323 = C48250 * C2427;
    const double C13009 = C48367 * C2427;
    const double C34015 = C48367 * C2427;
    const double C1451 = C1444 + C1445;
    const double C12088 = C12082 + C12083;
    const double C33102 = C33096 + C33097;
    const double C2199 = C2192 + C2193;
    const double C11568 = C11554 + C11555;
    const double C13012 = C13006 + C13007;
    const double C32582 = C32568 + C32569;
    const double C34018 = C34012 + C34013;
    const double C1613 = C1606 + C1607;
    const double C10872 = C10850 + C10851;
    const double C12294 = C12288 + C12289;
    const double C31886 = C31864 + C31865;
    const double C33308 = C33302 + C33303;
    const double C2317 = C2310 + C2311;
    const double C11066 = C11044 + C11045;
    const double C13154 = C13148 + C13149;
    const double C32080 = C32058 + C32059;
    const double C34160 = C34154 + C34155;
    const double C22554 = C22547 + C22548;
    const double C22680 = C22674 + C22675;
    const double C27752 = C27744 + C27745;
    const double C39016 = C39008 + C39009;
    const double C23056 = C23051 + C23052;
    const double C27104 = C27092 + C27093;
    const double C38368 = C38356 + C38357;
    const double C23700 = C23696 + C23697;
    const double C27286 = C27270 + C27271;
    const double C38550 = C38534 + C38535;
    const double C28589 = C48367 * C6985;
    const double C39849 = C48367 * C6985;
    const double C12805 =
        4 * (2 * C47351 - (ae * C47349) / C47111 + C47103 * C47454) +
        (((-3 * C47349) / C46956 + C47103 * C47451) * ae) / C47075 +
        C47103 *
            (3 * C47454 + (C47451 * ae) / C47075 +
             C47103 *
                 (2 * C47450 - (ae * C47441) / C47111 +
                  C47103 *
                      ((-(ae * C47103 * C47255) / C46956) / C47075 - C47174 +
                       C47103 * ((-(C47103 * C47187) / C46956) / C47075 -
                                 (ae * C47255) / C47111))));
    const double C47205 = C47100 * C47204;
    const double C47362 = C47103 * C47204;
    const double C47378 = C47302 * C47204;
    const double C1179 =
        2 * C47302 * C47169 + C47302 * (C47169 + C47204 * std::pow(C47302, 2));
    const double C1184 =
        3 * (C47169 + C47204 * C47311) +
        C47302 *
            (2 * C47302 * C47204 +
             C47302 *
                 (C47204 +
                  ((-(C47100 * C47188 * ce) / C46956) / C47075 -
                   C47187 / C47111 +
                   C47100 * ((-(C47100 * std::pow(C47105, 8) * bs[8] * C47116) /
                              C46956) /
                                 C47075 -
                             (C47188 * ce) / C47111)) *
                      C47311));
    const double C1322 =
        C47302 * C47169 - (ae * C47103 * C47315) / C47111 +
        C47103 * (C47103 * C47302 * C47204 - (ae * C47315) / C47111);
    const double C1325 = C47103 * (C47169 + C47204 * C47311) -
                         (ae * (C47262 * C47311 + C47247)) / C47111;
    const double C1330 =
        C47169 + C47204 * C47311 - (ae * C47103 * C47331) / C47111 +
        C47103 *
            (C47103 *
                 (C47204 +
                  ((-(C47100 * C47188 * ce) / C46956) / C47075 -
                   C47187 / C47111 +
                   C47100 * ((-(C47100 * std::pow(C47105, 8) * bs[8] * C47116) /
                              C46956) /
                                 C47075 -
                             (C47188 * ce) / C47111)) *
                      C47311) -
             (ae * C47331) / C47111);
    const double C1724 =
        (((-2 * C47315) / C46956 - (C47302 * C47331) / C46956) * ae) / C47075 +
        C47103 *
            (2 * C47302 * C47204 +
             C47302 *
                 (C47204 +
                  ((-(C47100 * C47188 * ce) / C46956) / C47075 -
                   C47187 / C47111 +
                   C47100 * ((-(C47100 * std::pow(C47105, 8) * bs[8] * C47116) /
                              C46956) /
                                 C47075 -
                             (C47188 * ce) / C47111)) *
                      C47311));
    const double C2033 =
        2 * (C47103 * C47169 - (ae * C47247) / C47111) -
        (ae * (C47262 * std::pow(C47103, 2) + C47247)) / C47111 +
        C47103 * (C47169 - (ae * C47103 * C47262) / C47111 +
                  C47103 * (C47103 * C47204 - (ae * C47262) / C47111));
    const double C5858 =
        4 * (2 * C47375 + C47302 * C47388) +
        C47302 *
            (3 * C47388 +
             C47302 * (2 * C47302 * C47200 +
                       C47302 * (C47200 + ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46956) /
                                               C47075 -
                                           (C47188 * ce) / C47111) *
                                              C47311)));
    const double C6046 =
        2 * C47375 + C47302 * C47388 + (C47103 * C47404 * ae) / C47075 +
        C47103 *
            ((C47404 * ae) / C47075 +
             C47103 * (2 * C47302 * C47200 +
                       C47302 * (C47200 + ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46956) /
                                               C47075 -
                                           (C47188 * ce) / C47111) *
                                              C47311)));
    const double C6594 =
        (((-3 * C47328) / C46956 + C47302 * C47404) * ae) / C47075 +
        C47103 *
            (3 * C47388 +
             C47302 * (2 * C47302 * C47200 +
                       C47302 * (C47200 + ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46956) /
                                               C47075 -
                                           (C47188 * ce) / C47111) *
                                              C47311)));
    const double C7462 =
        2 * (C47103 * C47388 - (ae * C47328) / C47111) -
        (ae * (C47401 * C47344 + C47328)) / C47111 +
        C47103 *
            (C47388 - (ae * C47103 * C47401) / C47111 +
             C47103 * (C47103 * (C47200 + ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46956) /
                                               C47075 -
                                           (C47188 * ce) / C47111) *
                                              C47311) -
                       (ae * C47401) / C47111));
    const double C47428 = C47425 - C47426;
    const double C47469 = C47103 * C47465;
    const double C5884 = C5874 + C5875;
    const double C6076 = C6064 + C6065;
    const double C12295 = C12290 + C12291;
    const double C33309 = C33304 + C33305;
    const double C6457 = C6454 + C6455;
    const double C12089 = C12084 + C12085;
    const double C33103 = C33098 + C33099;
    const double C22542 =
        5 * (3 * C47385 + C47302 * C47482) +
        C47302 * (4 * C47482 +
                  C47302 * (3 * C47480 +
                            C47302 * ((-2 * C47302 * C47187) / C47111 +
                                      C47302 * ((-(std::pow(C47105, 8) * bs[8] *
                                                   C47116 * C47311) /
                                                 C46956) /
                                                    C47075 -
                                                C47187 / C47111))));
    const double C22670 =
        3 * C47385 + C47302 * C47482 + (C47103 * C47494 * ae) / C47075 +
        C47103 * ((C47494 * ae) / C47075 +
                  C47103 * (3 * C47480 +
                            C47302 * ((-2 * C47302 * C47187) / C47111 +
                                      C47302 * ((-(std::pow(C47105, 8) * bs[8] *
                                                   C47116 * C47311) /
                                                 C46956) /
                                                    C47075 -
                                                C47187 / C47111))));
    const double C23048 =
        ((4 * C47396 + C47302 * C47494) * ae) / C47075 +
        C47103 * (4 * C47482 +
                  C47302 * (3 * C47480 +
                            C47302 * ((-2 * C47302 * C47187) / C47111 +
                                      C47302 * ((-(std::pow(C47105, 8) * bs[8] *
                                                   C47116 * C47311) /
                                                 C46956) /
                                                    C47075 -
                                                C47187 / C47111))));
    const double C23694 =
        2 * ((C47396 * ae) / C47075 + C47103 * C47482) +
        ((C47396 + C47492 * C47344) * ae) / C47075 +
        C47103 * (C47482 + (C47103 * C47492 * ae) / C47075 +
                  C47103 * ((C47492 * ae) / C47075 +
                            C47103 * ((-2 * C47302 * C47187) / C47111 +
                                      C47302 * ((-(std::pow(C47105, 8) * bs[8] *
                                                   C47116 * C47311) /
                                                 C46956) /
                                                    C47075 -
                                                C47187 / C47111))));
    const double C23344 =
        3 * (C47385 - (ae * C47497) / C47111 + C47103 * C47503) +
        (((-2 * C47497) / C46956 - (C47103 * C47502) / C46956) * ae) / C47075 +
        C47103 * (2 * C47503 - (ae * C47502) / C47111 +
                  C47103 * (C47480 - (ae * C47103 * C47489) / C47111 +
                            C47103 * (C47103 * ((-(std::pow(C47105, 8) * bs[8] *
                                                   C47116 * C47311) /
                                                 C46956) /
                                                    C47075 -
                                                C47187 / C47111) -
                                      (ae * C47489) / C47111)));
    const double C47530 = C47526 + C47529;
    const double C47562 = C47103 * C47560;
    const double C1155 =
        (C48386 + 2 * C48090) / C46962 - (C48393 * C48086) / C46956;
    const double C1156 =
        (C48374 + 2 * C48097 + C48393) / C46962 - (C48389 * C48086) / C46956;
    const double C1157 = (C48347 + C48094 / C46956 + C48389) / C46962 -
                         (C48379 * C48086) / C46956;
    const double C2010 =
        (C48387 + 2 * C48130) / C46962 - (C48394 * C48126) / C46956;
    const double C2011 =
        (C48376 + 2 * C48137 + C48394) / C46962 - (C48391 * C48126) / C46956;
    const double C2012 = (C48350 + C48134 / C46956 + C48391) / C46962 -
                         (C48382 * C48126) / C46956;
    const double C6238 = C1450 * C47001;
    const double C6234 = C5882 * C47001;
    const double C6232 = C367 * C47001;
    const double C6228 = C4961 * C47001;
    const double C6222 = C361 * C47001;
    const double C6218 = C4958 * C47001;
    const double C6448 = C1612 * C47001;
    const double C6444 = C6074 * C47001;
    const double C6442 = C968 * C47001;
    const double C6438 = C5597 * C47001;
    const double C7186 = C2198 * C47001;
    const double C7182 = C6072 * C47001;
    const double C22784 = C5887 * C47001;
    const double C22941 = C6603 * C47001;
    const double C23492 = C6079 * C47001;
    const double C47004 = C47001 / C46962;
    const double C47003 = C46954 * C47001;
    const double C21885 = C21878 - C4944;
    const double C23915 = C7768 - C23909;
    const double C23914 = C23908 - C7758;
    const double C24495 = C8556 - C24490;
    const double C47266 = C47265 - C47257;
    const double C44360 =
        (5 * (3 * C47803 + C47103 * C47887 + C47802 * ae) +
         C47103 * (4 * C47887 +
                   C47103 * (3 * C47882 +
                             C47103 * (2 * C47874 +
                                       C47103 * (C47155 +
                                                 C47103 * (C47103 * C47188 +
                                                           C47271 * ae) +
                                                 C47103 * C47271 * ae) +
                                       C47876 * ae) +
                             C47881 * ae) +
                   C47885 * ae) +
         (4 * C47802 + C47103 * C47885) * ae) /
        C47075;
    const double C47295 = C47294 - C47286;
    const double C4941 = C364 * C288;
    const double C4937 = C364 * C48339;
    const double C5253 = C364 * C660;
    const double C5247 = C364 * C661;
    const double C5755 = C364 * C48370;
    const double C5751 = C364 * C48339;
    const double C6225 = C364 * C47993;
    const double C7615 = C364 * C48385;
    const double C7609 = C364 * C48372;
    const double C7757 = C364 * C47993;
    const double C8139 = C364 * C47996;
    const double C8135 = C364 * C2901;
    const double C4953 = C368 * C287;
    const double C4949 = C368 * C288;
    const double C5765 = C368 * C48383;
    const double C5761 = C368 * C48370;
    const double C5864 = C368 * C47983;
    const double C6231 = C368 * C48298;
    const double C6229 = C368 * C47993;
    const double C7763 = C368 * C2635;
    const double C7761 = C368 * C47993;
    const double C8149 = C368 * C47988;
    const double C8145 = C368 * C47996;
    const double C22101 = C368 * C660;
    const double C23805 = C368 * C48385;
    const double C5591 = C969 * C287;
    const double C5587 = C969 * C288;
    const double C6048 = C969 * C47983;
    const double C6441 = C969 * C48298;
    const double C6439 = C969 * C47993;
    const double C7973 = C969 * C2635;
    const double C7971 = C969 * C47993;
    const double C8355 = C969 * C47988;
    const double C8351 = C969 * C47996;
    const double C9751 = C969 * C48383;
    const double C9747 = C969 * C48370;
    const double C167 = C48250 * C145;
    const double C348 = C48250 * C329;
    const double C11207 = C10631 * C329;
    const double C32221 = C31645 * C329;
    const double C356 = C48250 * C333;
    const double C10859 = C10631 * C333;
    const double C31873 = C31645 * C333;
    const double C537 = C48250 * C518;
    const double C10657 = C48367 * C518;
    const double C11349 = C10631 * C518;
    const double C31671 = C48367 * C518;
    const double C32363 = C31645 * C518;
    const double C545 = C48250 * C522;
    const double C11053 = C10631 * C522;
    const double C11037 = C48367 * C522;
    const double C32067 = C31645 * C522;
    const double C32051 = C48367 * C522;
    const double C963 = C48250 * C952;
    const double C10843 = C48367 * C952;
    const double C11563 = C10631 * C952;
    const double C31857 = C48367 * C952;
    const double C32577 = C31645 * C952;
    const double C13151 = C48367 * C2037;
    const double C34157 = C48367 * C2037;
    const double C7325 = C7322 + C7323;
    const double C13013 = C13008 + C13009;
    const double C34019 = C34014 + C34015;
    const double C5873 = C1451 * C47983;
    const double C6239 = C1451 * C48298;
    const double C6237 = C1451 * C47993;
    const double C7771 = C1451 * C2635;
    const double C7769 = C1451 * C47993;
    const double C21882 = C1451 * C288;
    const double C22470 = C1451 * C48370;
    const double C24184 = C1451 * C47996;
    const double C6057 = C2199 * C47983;
    const double C7187 = C2199 * C48298;
    const double C7185 = C2199 * C47993;
    const double C7981 = C2199 * C2635;
    const double C7979 = C2199 * C47993;
    const double C6063 = C1613 * C47983;
    const double C6449 = C1613 * C48298;
    const double C6447 = C1613 * C47993;
    const double C8559 = C1613 * C2635;
    const double C8557 = C1613 * C47993;
    const double C22353 = C1613 * C288;
    const double C24341 = C1613 * C47996;
    const double C25391 = C1613 * C48370;
    const double C22556 = C22554 * C47983;
    const double C22682 = C22680 * C47983;
    const double C23058 = C23056 * C47983;
    const double C23702 = C23700 * C47983;
    const double C28596 = C28588 + C28589;
    const double C39856 = C39848 + C39849;
    const double C47206 = C47185 + C47205;
    const double C47367 = C47362 - C47365;
    const double C2428 =
        2 * (C47103 * C47378 - (ae * C47315) / C47111) -
        (ae * (C47379 * C47344 + C47315)) / C47111 +
        C47103 * (C47378 - (ae * C47103 * C47379) / C47111 +
                  C47103 * (C47103 * C47302 *
                                ((-(C47100 * C47188 * ce) / C46956) / C47075 -
                                 C47187 / C47111 +
                                 C47100 * ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46956) /
                                               C47075 -
                                           (C47188 * ce) / C47111)) -
                            (ae * C47379) / C47111));
    const double C1449 = C48250 * C1179;
    const double C2197 = C48250 * C1322;
    const double C11565 = C48367 * C1322;
    const double C32579 = C48367 * C1322;
    const double C1611 = C48250 * C1325;
    const double C10861 = C48367 * C1325;
    const double C31875 = C48367 * C1325;
    const double C2315 = C48250 * C2033;
    const double C11055 = C48367 * C2033;
    const double C32069 = C48367 * C2033;
    const double C6986 =
        3 * (C47375 - (ae * C47421) / C47111 + C47103 * C47428) +
        (((-2 * C47421) / C46956 - (C47103 * C47429) / C46956) * ae) / C47075 +
        C47103 * (2 * C47428 - (ae * C47429) / C47111 +
                  C47103 * (C47422 - (ae * C47103 * C47424) / C47111 +
                            C47103 * (C47103 * C47302 *
                                          ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46956) /
                                               C47075 -
                                           (C47188 * ce) / C47111) -
                                      (ae * C47424) / C47111)));
    const double C47471 = C47468 + C47469;
    const double C5890 = C5884 * C47983;
    const double C22787 = C5884 * C47993;
    const double C23913 = C5884 * C47993;
    const double C6084 = C6076 * C47983;
    const double C23495 = C6076 * C47993;
    const double C24069 = C6076 * C47993;
    const double C6596 = C6457 * C47983;
    const double C22944 = C6457 * C47993;
    const double C24494 = C6457 * C47993;
    const double C28132 =
        4 * (2 * C47419 - (ae * C47416) / C47111 + C47103 * C47530) +
        (((-3 * C47416) / C46956 + C47103 * C47528) * ae) / C47075 +
        C47103 *
            (3 * C47530 + (C47528 * ae) / C47075 +
             C47103 *
                 (2 * C47527 - (ae * C47519) / C47111 +
                  C47103 * ((-(ae * C47103 * C47510) / C46956) / C47075 -
                            C47508 / C47111 +
                            C47103 * ((-(C47103 * C47302 * std::pow(C47105, 8) *
                                         bs[8] * C47116) /
                                       C46956) /
                                          C47075 -
                                      (ae * C47510) / C47111))));
    const double C47563 = C47546 + C47562;
    const double C22783 = C6235 + C6234;
    const double C22782 = C6228 + C6227;
    const double C22940 = C6445 + C6444;
    const double C47007 = C47004 - C46999;
    const double C1090 = C47004 + (C46990 * ce) / C46956;
    const double C47006 = C47003 + C48298;
    const double C137 =
        4 * ((-2 * C47242) / C46956 - (C47100 * C47247) / C46956 -
             (C47579 * ce) / C46956) +
        C47100 * ((-3 * C47247) / C46956 + C47100 * C47266 -
                  (C47584 * ce) / C46956) -
        ((3 * C47579 + C47100 * C47584) * ce) / C46956;
    const double C315 = C47302 * ((-3 * C47247) / C46956 + C47100 * C47266 -
                                  (C47584 * ce) / C46956);
    const double C323 = (-2 * C47242) / C46956 - (C47100 * C47247) / C46956 -
                        (C47579 * ce) / C46956 + C47266 * C47311;
    const double C504 = C47103 * ((-3 * C47247) / C46956 + C47100 * C47266 -
                                  (C47584 * ce) / C46956);
    const double C512 = (-2 * C47242) / C46956 - (C47100 * C47247) / C46956 -
                        (C47579 * ce) / C46956 + C47266 * C47344;
    const double C947 = C47103 * C47302 * C47266;
    const double C47296 = C47100 * C47295;
    const double C47369 = C47302 * C47295;
    const double C1439 =
        2 * C47302 * C47266 + C47302 * (C47266 + C47295 * C47311);
    const double C1601 = C47103 * (C47266 + C47295 * C47311);
    const double C2305 =
        2 * C47103 * C47266 + C47103 * (C47266 + C47295 * C47344);
    const double C21886 = C21885 - C4949;
    const double C23916 = C23914 - C7761;
    const double C366 = C347 + C348;
    const double C11212 = C11206 + C11207;
    const double C32226 = C32220 + C32221;
    const double C370 = C355 + C356;
    const double C10876 = C10858 + C10859;
    const double C31890 = C31872 + C31873;
    const double C555 = C536 + C537;
    const double C10678 = C10656 + C10657;
    const double C11354 = C11348 + C11349;
    const double C31692 = C31670 + C31671;
    const double C32368 = C32362 + C32363;
    const double C559 = C544 + C545;
    const double C11070 = C11052 + C11053;
    const double C11062 = C11036 + C11037;
    const double C32084 = C32066 + C32067;
    const double C32076 = C32050 + C32051;
    const double C971 = C962 + C963;
    const double C10868 = C10842 + C10843;
    const double C11572 = C11562 + C11563;
    const double C31882 = C31856 + C31857;
    const double C32586 = C32576 + C32577;
    const double C13155 = C13150 + C13151;
    const double C34161 = C34156 + C34157;
    const double C7464 = C7325 * C47983;
    const double C23917 = C23915 + C7769;
    const double C24496 = C24495 + C8557;
    const double C146 =
        5 * (3 * C47169 - (C47166 * ce) / C47111 + C47100 * C47206) -
        ((4 * C47166 + C47100 * C47203) * ce) / C47111 +
        C47100 *
            (4 * C47206 - (C47203 * ce) / C47111 +
             C47100 *
                 (3 * C47204 - (C47199 * ce) / C47111 +
                  C47100 *
                      (2 * C47200 - (C47194 * ce) / C47111 +
                       C47100 * ((-(C47100 * C47188 * ce) / C46956) / C47075 -
                                 C47187 / C47111 +
                                 C47100 * ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46956) /
                                               C47075 -
                                           (C47188 * ce) / C47111)))));
    const double C330 =
        (yP - yQ) * (3 * C47169 - (C47166 * ce) / C47111 + C47100 * C47206);
    const double C334 = 2 * C47141 - (C47138 * ce) / C47111 + C47100 * C47169 +
                        C47206 * std::pow(yP - yQ, 2);
    const double C335 =
        3 * C47169 - (C47166 * ce) / C47111 + C47100 * C47206 +
        (3 * C47204 - (C47199 * ce) / C47111 +
         C47100 *
             (2 * C47200 - (C47194 * ce) / C47111 +
              C47100 *
                  ((-(C47100 * C47188 * ce) / C46956) / C47075 -
                   C47187 / C47111 +
                   C47100 * ((-(C47100 * std::pow(C47105, 8) * bs[8] * C47116) /
                              C46956) /
                                 C47075 -
                             (C47188 * ce) / C47111)))) *
            std::pow(yP - yQ, 2);
    const double C519 =
        (((-3 * (C47100 * C47235 + C47225 + C47229 * ce)) / C46956 +
          C47100 * ((-2 * C47235) / C46956 -
                    (C47100 * (C47100 * (C47100 * C47145 * C47146 * C47220 +
                                         C47230 * ce) +
                               C47231 + C47100 * C47230 * ce)) /
                        C46956 -
                    (C47234 * ce) / C46956) -
          ((2 * C47229 + C47100 * C47234) * ce) / C46956) *
         ae) /
            C47075 +
        C47103 * (3 * C47169 - (C47166 * ce) / C47111 + C47100 * C47206);
    const double C523 = 2 * C47141 - (C47138 * ce) / C47111 + C47100 * C47169 +
                        (C47103 * C47266 * ae) / C47075 +
                        C47103 * ((C47266 * ae) / C47075 + C47103 * C47206);
    const double C672 =
        (yP - yQ) *
        (4 * C47206 - (C47203 * ce) / C47111 +
         C47100 *
             (3 * C47204 - (C47199 * ce) / C47111 +
              C47100 * (2 * C47200 - (C47194 * ce) / C47111 +
                        C47100 * ((-(C47100 * C47188 * ce) / C46956) / C47075 -
                                  C47187 / C47111 +
                                  C47100 * ((-(C47100 * std::pow(C47105, 8) *
                                               bs[8] * C47116) /
                                             C46956) /
                                                C47075 -
                                            (C47188 * ce) / C47111)))));
    const double C953 =
        (C47302 * C47266 * ae) / C47075 + C47103 * C47302 * C47206;
    const double C1440 =
        2 * C47302 * C47206 +
        C47302 *
            (C47206 +
             (2 * C47200 - (C47194 * ce) / C47111 +
              C47100 *
                  ((-(C47100 * C47188 * ce) / C46956) / C47075 -
                   C47187 / C47111 +
                   C47100 * ((-(C47100 * std::pow(C47105, 8) * bs[8] * C47116) /
                              C46956) /
                                 C47075 -
                             (C47188 * ce) / C47111))) *
                 C47311);
    const double C1602 =
        ((C47266 + C47295 * C47311) * ae) / C47075 +
        C47103 *
            (C47206 +
             (2 * C47200 - (C47194 * ce) / C47111 +
              C47100 *
                  ((-(C47100 * C47188 * ce) / C46956) / C47075 -
                   C47187 / C47111 +
                   C47100 * ((-(C47100 * std::pow(C47105, 8) * bs[8] * C47116) /
                              C46956) /
                                 C47075 -
                             (C47188 * ce) / C47111))) *
                 C47311);
    const double C2306 =
        2 * ((C47266 * ae) / C47075 + C47103 * C47206) +
        ((C47266 + C47295 * C47344) * ae) / C47075 +
        C47103 *
            (C47206 + (C47103 * C47295 * ae) / C47075 +
             C47103 *
                 ((C47295 * ae) / C47075 +
                  C47103 *
                      (2 * C47200 - (C47194 * ce) / C47111 +
                       C47100 * ((-(C47100 * C47188 * ce) / C46956) / C47075 -
                                 C47187 / C47111 +
                                 C47100 * ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46956) /
                                               C47075 -
                                           (C47188 * ce) / C47111)))));
    const double C2038 =
        3 * (C47169 - (ae * C47361) / C47111 + C47103 * C47367) +
        (((-2 * C47361) / C46956 - (C47103 * C47366) / C46956) * ae) / C47075 +
        C47103 *
            (2 * C47367 - (ae * C47366) / C47111 +
             C47103 *
                 (C47204 - (ae * C47103 * C47290) / C47111 +
                  C47103 *
                      (C47103 * ((-(C47100 * C47188 * ce) / C46956) / C47075 -
                                 C47187 / C47111 +
                                 C47100 * ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46956) /
                                               C47075 -
                                           (C47188 * ce) / C47111)) -
                       (ae * C47290) / C47111)));
    const double C1453 = C1448 + C1449;
    const double C2201 = C2196 + C2197;
    const double C11573 = C11564 + C11565;
    const double C32587 = C32578 + C32579;
    const double C1615 = C1610 + C1611;
    const double C10877 = C10860 + C10861;
    const double C31891 = C31874 + C31875;
    const double C2319 = C2314 + C2315;
    const double C11071 = C11054 + C11055;
    const double C32085 = C32068 + C32069;
    const double C12806 =
        4 * (2 * C47359 - (ae * C47358) / C47111 + C47103 * C47471) +
        (((-3 * C47358) / C46956 + C47103 * C47472) * ae) / C47075 +
        C47103 *
            (3 * C47471 + (C47472 * ae) / C47075 +
             C47103 *
                 (2 * C47465 - (ae * C47463) / C47111 +
                  C47103 *
                      (C47200 - (ae * C47103 * C47282) / C47111 +
                       C47103 * (C47103 * ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46956) /
                                               C47075 -
                                           (C47188 * ce) / C47111) -
                                 (ae * C47282) / C47111))));
    const double C44362 =
        5 * (3 * C47454 + (C47451 * ae) / C47075 + C47103 * C47563) +
        ((4 * C47451 + C47103 * C47561) * ae) / C47075 +
        C47103 *
            (4 * C47563 + (C47561 * ae) / C47075 +
             C47103 *
                 (3 * C47560 + (C47556 * ae) / C47075 +
                  C47103 *
                      (2 * C47555 - (ae * C47545) / C47111 +
                       C47103 * ((-(ae * C47103 * C47275) / C46956) / C47075 -
                                 C47187 / C47111 +
                                 C47103 * ((-(C47103 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46956) /
                                               C47075 -
                                           (ae * C47275) / C47111)))));
    const double C22789 = C6236 - C22783;
    const double C22788 = C22782 - C6226;
    const double C22945 = C6446 - C22940;
    const double C8148 = C369 * C47007;
    const double C8142 = C367 * C47007;
    const double C8138 = C363 * C47007;
    const double C8132 = C361 * C47007;
    const double C8354 = C970 * C47007;
    const double C8348 = C968 * C47007;
    const double C24181 = C1450 * C47007;
    const double C24338 = C1612 * C47007;
    const double C117 =
        (C47007 / C46962 + ((C46954 * C47017 + C2901) * ce) / C46956) / C46962 -
        ((C46954 * (C47017 / C46962 + (0 * ce) / C46956) + C48351) * de) /
            C46956;
    const double C667 =
        C47007 / C46962 - ((C46954 * C47017 + C2901) * de) / C46956;
    const double C2535 =
        C47007 / C46962 + ((C46954 * C47017 + C2901) * ce) / C46956;
    const double C5764 = C369 * C1090;
    const double C5758 = C367 * C1090;
    const double C5754 = C363 * C1090;
    const double C5748 = C361 * C1090;
    const double C9750 = C970 * C1090;
    const double C9744 = C968 * C1090;
    const double C22467 = C1450 * C1090;
    const double C25388 = C1612 * C1090;
    const double C47008 = C47006 * de;
    const double C1089 = C46993 + (C47006 * ce) / C46956 + C46982;
    const double C166 = C113 * C137;
    const double C676 = C113 * C315;
    const double C359 = C113 * C323;
    const double C786 = C113 * C504;
    const double C10666 = C10634 * C504;
    const double C31680 = C31648 * C504;
    const double C548 = C113 * C512;
    const double C11350 = C10634 * C512;
    const double C32364 = C31648 * C512;
    const double C966 = C113 * C947;
    const double C11208 = C10634 * C947;
    const double C32222 = C31648 * C947;
    const double C47297 = C47273 + C47296;
    const double C2188 =
        C47302 * C47206 + (C47103 * C47369 * ae) / C47075 +
        C47103 * ((C47369 * ae) / C47075 +
                  C47103 * C47302 *
                      (2 * C47200 - (C47194 * ce) / C47111 +
                       C47100 * ((-(C47100 * C47188 * ce) / C46956) / C47075 -
                                 C47187 / C47111 +
                                 C47100 * ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46956) /
                                               C47075 -
                                           (C47188 * ce) / C47111))));
    const double C2187 = C47302 * C47266 + C47369 * C47344;
    const double C21887 = C21886 + C4950;
    const double C23918 = C23916 * C48010;
    const double C4943 = C366 * C48339;
    const double C5255 = C366 * C661;
    const double C5249 = C366 * C48351;
    const double C5757 = C366 * C48339;
    const double C7617 = C366 * C48372;
    const double C7611 = C366 * C48351;
    const double C8141 = C366 * C2901;
    const double C4955 = C370 * C288;
    const double C4951 = C370 * C48339;
    const double C5767 = C370 * C48370;
    const double C5763 = C370 * C48339;
    const double C6233 = C370 * C47993;
    const double C7765 = C370 * C47993;
    const double C8151 = C370 * C47996;
    const double C8147 = C370 * C2901;
    const double C22103 = C370 * C661;
    const double C23807 = C370 * C48372;
    const double C5593 = C971 * C288;
    const double C5589 = C971 * C48339;
    const double C6443 = C971 * C47993;
    const double C7975 = C971 * C47993;
    const double C8357 = C971 * C47996;
    const double C8353 = C971 * C2901;
    const double C9753 = C971 * C48370;
    const double C9749 = C971 * C48339;
    const double C23919 = C23917 * C48010;
    const double C24497 = C24496 * C48010;
    const double C677 = C48250 * C330;
    const double C360 = C48250 * C334;
    const double C787 = C48250 * C519;
    const double C10667 = C48367 * C519;
    const double C31681 = C48367 * C519;
    const double C549 = C48250 * C523;
    const double C11351 = C48367 * C523;
    const double C32365 = C48367 * C523;
    const double C967 = C48250 * C953;
    const double C11209 = C48367 * C953;
    const double C32223 = C48367 * C953;
    const double C6241 = C1453 * C47993;
    const double C7773 = C1453 * C47993;
    const double C21884 = C1453 * C48339;
    const double C22472 = C1453 * C48339;
    const double C24186 = C1453 * C2901;
    const double C7189 = C2201 * C47993;
    const double C7983 = C2201 * C47993;
    const double C6451 = C1615 * C47993;
    const double C8561 = C1615 * C47993;
    const double C22355 = C1615 * C48339;
    const double C24343 = C1615 * C2901;
    const double C25393 = C1615 * C48339;
    const double C22791 = C22789 + C6237;
    const double C22790 = C22788 - C6229;
    const double C22946 = C22945 + C6447;
    const double C5254 = C365 * C667;
    const double C5246 = C363 * C667;
    const double C22102 = C369 * C667;
    const double C7616 = C365 * C2535;
    const double C7608 = C363 * C2535;
    const double C23806 = C369 * C2535;
    const double C47009 = C47008 / C46956;
    const double C5766 = C367 * C1089;
    const double C5760 = C4961 * C1089;
    const double C5752 = C361 * C1089;
    const double C5746 = C4958 * C1089;
    const double C9752 = C968 * C1089;
    const double C9746 = C5597 * C1089;
    const double C22469 = C5882 * C1089;
    const double C25390 = C6074 * C1089;
    const double C177 = C166 + C167;
    const double C47298 = C47297 - C47291;
    const double C21888 = C21887 + C4951;
    const double C679 = C676 + C677;
    const double C372 = C359 + C360;
    const double C789 = C786 + C787;
    const double C10683 = C10666 + C10667;
    const double C31697 = C31680 + C31681;
    const double C561 = C548 + C549;
    const double C11355 = C11350 + C11351;
    const double C32369 = C32364 + C32365;
    const double C973 = C966 + C967;
    const double C11213 = C11208 + C11209;
    const double C32227 = C32222 + C32223;
    const double C22793 = C22791 * C48010;
    const double C22792 = C22790 * C48010;
    const double C22947 = C22946 * C48010;
    const double C47010 = C46993 - C47009;
    const double C22466 = C5760 + C5759;
    const double C524 =
        3 * C47169 - (C47166 * ce) / C47111 + C47100 * C47206 +
        (C47103 * C47298 * ae) / C47075 +
        C47103 *
            ((C47298 * ae) / C47075 +
             C47103 *
                 (3 * C47204 - (C47199 * ce) / C47111 +
                  C47100 *
                      (2 * C47200 - (C47194 * ce) / C47111 +
                       C47100 * ((-(C47100 * C47188 * ce) / C46956) / C47075 -
                                 C47187 / C47111 +
                                 C47100 * ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46956) /
                                               C47075 -
                                           (C47188 * ce) / C47111)))));
    const double C782 =
        ((4 * C47266 + C47100 * C47298 -
          ((3 * C47234 + C47100 * C47287) * ce) / C46956) *
         ae) /
            C47075 +
        C47103 *
            (4 * C47206 - (C47203 * ce) / C47111 +
             C47100 *
                 (3 * C47204 - (C47199 * ce) / C47111 +
                  C47100 *
                      (2 * C47200 - (C47194 * ce) / C47111 +
                       C47100 * ((-(C47100 * C47188 * ce) / C46956) / C47075 -
                                 C47187 / C47111 +
                                 C47100 * ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46956) /
                                               C47075 -
                                           (C47188 * ce) / C47111)))));
    const double C954 =
        (C47302 * C47298 * ae) / C47075 +
        C47103 * C47302 *
            (3 * C47204 - (C47199 * ce) / C47111 +
             C47100 * (2 * C47200 - (C47194 * ce) / C47111 +
                       C47100 * ((-(C47100 * C47188 * ce) / C46956) / C47075 -
                                 C47187 / C47111 +
                                 C47100 * ((-(C47100 * std::pow(C47105, 8) *
                                              bs[8] * C47116) /
                                            C46956) /
                                               C47075 -
                                           (C47188 * ce) / C47111))));
    const double C139 =
        5 * ((-3 * C47247) / C46956 + C47100 * C47266 -
             (C47584 * ce) / C46956) +
        C47100 * (4 * C47266 + C47100 * C47298 - (C47589 * ce) / C46956) -
        ((4 * C47584 + C47100 * C47589) * ce) / C46956;
    const double C325 = (-3 * C47247) / C46956 + C47100 * C47266 -
                        (C47584 * ce) / C46956 + C47298 * C47311;
    const double C514 = (-3 * C47247) / C46956 + C47100 * C47266 -
                        (C47584 * ce) / C46956 + C47298 * C47344;
    const double C671 =
        C47302 * (4 * C47266 + C47100 * C47298 - (C47589 * ce) / C46956);
    const double C781 =
        C47103 * (4 * C47266 + C47100 * C47298 - (C47589 * ce) / C46956);
    const double C949 = C47103 * C47302 * C47298;
    const double C21889 = C21888 * C48010;
    const double C5257 = C679 * C48351;
    const double C7619 = C679 * C48351;
    const double C4957 = C372 * C48339;
    const double C5769 = C372 * C48339;
    const double C8153 = C372 * C2901;
    const double C22105 = C372 * C48351;
    const double C23809 = C372 * C48351;
    const double C5595 = C973 * C48339;
    const double C8359 = C973 * C2901;
    const double C9755 = C973 * C48339;
    const double C47011 = C47010 + C46982;
    const double C22473 = C22466 - C5758;
    const double C8150 = C367 * C47011;
    const double C8144 = C4961 * C47011;
    const double C8136 = C361 * C47011;
    const double C8130 = C4958 * C47011;
    const double C8356 = C968 * C47011;
    const double C8350 = C5597 * C47011;
    const double C24183 = C5882 * C47011;
    const double C24340 = C6074 * C47011;
    const double C114 =
        (((((0 - (C46954 * C46955) / C46956) * ce) / C46956 -
           (0 * de) / C46968 + (2 * C46957) / C46956) /
              C46962 -
          ((C46954 * C46991 + 0) * de) / C46956 + C46974 - C46984) /
             C46962 +
         ((C46954 * C47005 + 0) * ce) / C46956) /
            C46962 -
        ((C46954 * (C47005 / C46962 +
                    ((C46954 * C47011 + C47988) * ce) / C46956 + C47007) +
          C48392) *
         de) /
            C46956 +
        C47011 / C46962 + ((C46954 * C47007 + C47996) * ce) / C46956 +
        2 * (C46982 / C46962 - (0 * de) / C46956);
    const double C115 =
        (C47005 / C46962 + ((C46954 * C47011 + C47988) * ce) / C46956 +
         C47007) /
            C46962 -
        ((C46954 * (C47011 / C46962 +
                    ((C46954 * C47007 + C47996) * ce) / C46956 + 2 * C47017) +
          C48385) *
         de) /
            C46956 +
        2 * (C47007 / C46962 + ((C46954 * C47017 + C2901) * ce) / C46956);
    const double C116 =
        (C47011 / C46962 + ((C46954 * C47007 + C47996) * ce) / C46956 +
         2 * C47017) /
            C46962 -
        ((C46954 *
              (C47007 / C46962 + ((C46954 * C47017 + C2901) * ce) / C46956) +
          C48372) *
         de) /
            C46956 +
        3 * (C47017 / C46962 + (0 * ce) / C46956);
    const double C665 =
        C47005 / C46962 - ((C46954 * C47011 + C47988) * de) / C46956 + C47007;
    const double C666 = C47011 / C46962 -
                        ((C46954 * C47007 + C47996) * de) / C46956 + 2 * C47017;
    const double C2533 =
        C47005 / C46962 + ((C46954 * C47011 + C47988) * ce) / C46956 + C47007;
    const double C2534 = C47011 / C46962 +
                         ((C46954 * C47007 + C47996) * ce) / C46956 +
                         2 * C47017;
    const double C22474 = C22473 - C5761;
    const double C24180 = C8144 + C8143;
    const double C5250 = C361 * C665;
    const double C5242 = C4958 * C665;
    const double C22098 = C4961 * C665;
    const double C5252 = C363 * C666;
    const double C5244 = C361 * C666;
    const double C22100 = C367 * C666;
    const double C7612 = C361 * C2533;
    const double C7604 = C4958 * C2533;
    const double C23802 = C4961 * C2533;
    const double C7614 = C363 * C2534;
    const double C7606 = C361 * C2534;
    const double C23804 = C367 * C2534;
    const double C22475 = C22474 + C5762;
    const double C24187 = C24180 - C8142;
    const double C22476 = C22475 + C5763;
    const double C24188 = C24187 - C8145;
    const double C22477 = C22476 * C48010;
    const double C24189 = C24188 + C8146;
    const double C24190 = C24189 + C8147;
    const double C24191 = C24190 * C48010;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C119 + C48250 * C126) * C47011 +
                   (C113 * C127 + C48250 * C140) * C47988 - C168 * C47007 -
                   C169 * C47996 + C170 * C47017 + C171 * C2901) *
                      C107 +
                  (C168 * C47011 + C169 * C47988 - C170 * C47007 -
                   C171 * C47996 + C172 * C47017 + C173 * C2901) *
                      C108 +
                  (C170 * C47011 + C171 * C47988 - C172 * C47007 -
                   C173 * C47996 + C174 * C47017 + C175 * C2901) *
                      C109) *
                     C48235 * C48047 * C48090 +
                 ((C361 * C47007 -
                   ((C113 * C307 + C48250 * C326) * C47988 +
                    (C113 * C297 + C48250 * C308) * C47011) +
                   C362 * C47996 - C363 * C47017 - C364 * C2901) *
                      C107 +
                  (C363 * C47007 - (C362 * C47988 + C361 * C47011) +
                   C364 * C47996 - C365 * C47017 - C366 * C2901) *
                      C108 +
                  (C365 * C47007 - (C364 * C47988 + C363 * C47011) +
                   C366 * C47996 - C678 * C47017 - C679 * C2901) *
                      C109) *
                     C48235 * C48047 * C48097 +
                 (((C113 * C301 + C48250 * C316) * C47011 +
                   (C113 * C317 + C48250 * C331) * C47988 - C367 * C47007 -
                   C368 * C47996 + C369 * C47017 + C370 * C2901) *
                      C107 +
                  (C367 * C47011 + C368 * C47988 - C369 * C47007 -
                   C370 * C47996 + C371 * C47017 + C372 * C2901) *
                      C108 +
                  (C369 * C47011 + C370 * C47988 - C371 * C47007 -
                   C372 * C47996 + (C113 * C305 + C48250 * C324) * C47017 +
                   (C113 * C325 + C48250 * C335) * C2901) *
                      C109) *
                     C48235 * C48047 * C2904)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2641 +
             (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
             C169 * C47993) *
                C107 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                C108 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C47993) *
                C109) *
               C48235 * C48316 +
           ((C550 * C2642 -
             ((C113 * C496 + C48250 * C515) * C2635 +
              (C113 * C486 + C48250 * C497) * C2641) +
             C551 * C47993) *
                C107 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47993) *
                C108 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C47993) *
                C109) *
               C48235 * C48134) *
              C48090 +
          (((C361 * C2642 -
             ((C113 * C307 + C48250 * C326) * C2635 +
              (C113 * C297 + C48250 * C308) * C2641) +
             C362 * C47993) *
                C107 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47993) *
                C108 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C47993) *
                C109) *
               C48235 * C48316 +
           (((C113 * C935 + C48250 * C940) * C2641 +
             (C113 * C941 + C48250 * C950) * C2635 - C968 * C2642 -
             C969 * C47993) *
                C107 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C47993) *
                C108 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C47993) *
                C109) *
               C48235 * C48134) *
              C48097 +
          ((((C113 * C301 + C48250 * C316) * C2641 +
             (C113 * C317 + C48250 * C331) * C2635 - C367 * C2642 -
             C368 * C47993) *
                C107 +
            (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C47993) *
                C108 +
            (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C47993) *
                C109) *
               C48235 * C48316 +
           ((C1612 * C2642 -
             ((C113 * C1314 + C48250 * C1327) * C2635 +
              (C113 * C1300 + C48250 * C1315) * C2641) +
             C1613 * C47993) *
                C107 +
            (C1614 * C2642 - (C1613 * C2635 + C1612 * C2641) + C1615 * C47993) *
                C108 +
            ((C113 * C1599 + C48250 * C1600) * C2642 -
             (C1615 * C2635 + C1614 * C2641) +
             (C113 * C1601 + C48250 * C1602) * C47993) *
                C109) *
               C48235 * C48134) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C2641 +
            (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
            C169 * C47993) *
               C107 +
           (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) * C108 +
           (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C47993) *
               C109) *
              C48235 * C48047 * C48393 +
          ((C361 * C2642 -
            ((C113 * C307 + C48250 * C326) * C2635 +
             (C113 * C297 + C48250 * C308) * C2641) +
            C362 * C47993) *
               C107 +
           (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47993) *
               C108 +
           (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C47993) *
               C109) *
              C48235 * C48047 * C48389 +
          (((C113 * C301 + C48250 * C316) * C2641 +
            (C113 * C317 + C48250 * C331) * C2635 - C367 * C2642 -
            C368 * C47993) *
               C107 +
           (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C47993) * C108 +
           (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C47993) *
               C109) *
              C48235 * C48047 * C48379 +
          ((C1450 * C2642 -
            ((C113 * C1171 + C48250 * C1181) * C2635 +
             (C113 * C1163 + C48250 * C1172) * C2641) +
            C1451 * C47993) *
               C107 +
           (C1452 * C2642 - (C1451 * C2635 + C1450 * C2641) + C1453 * C47993) *
               C108 +
           ((C113 * C1437 + C48250 * C1438) * C2642 -
            (C1453 * C2635 + C1452 * C2641) +
            (C113 * C1439 + C48250 * C1440) * C47993) *
               C109) *
              C48235 * C48047 * C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C2533 +
            (C113 * C127 + C48250 * C140) * C48392 - C168 * C2534 -
            C169 * C48385 + C170 * C2535 + C171 * C48372 - C172 * C2536 -
            C173 * C48351) *
               C107 +
           (C168 * C2533 + C169 * C48392 - C170 * C2534 - C171 * C48385 +
            C172 * C2535 + C173 * C48372 - C174 * C2536 - C175 * C48351) *
               C108 +
           (C170 * C2533 + C171 * C48392 - C172 * C2534 - C173 * C48385 +
            C174 * C2535 + C175 * C48372 - C176 * C2536 - C177 * C48351) *
               C109) *
              C48235 * C48047 * C2531 +
          ((C361 * C2534 -
            ((C113 * C307 + C48250 * C326) * C48392 +
             (C113 * C297 + C48250 * C308) * C2533) +
            C362 * C48385 - C363 * C2535 - C364 * C48372 + C365 * C2536 +
            C366 * C48351) *
               C107 +
           (C363 * C2534 - (C362 * C48392 + C361 * C2533) + C364 * C48385 -
            C365 * C2535 - C366 * C48372 + C678 * C2536 + C679 * C48351) *
               C108 +
           (C365 * C2534 - (C364 * C48392 + C363 * C2533) + C366 * C48385 -
            C678 * C2535 - C679 * C48372 +
            (C113 * C669 + C48250 * C670) * C2536 +
            (C113 * C671 + C48250 * C672) * C48351) *
               C109) *
              C48235 * C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2641 +
             (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
             C169 * C47993) *
                C107 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                C108 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C47993) *
                C109) *
               C48235 * C48387 +
           ((C550 * C2642 -
             ((C113 * C496 + C48250 * C515) * C2635 +
              (C113 * C486 + C48250 * C497) * C2641) +
             C551 * C47993) *
                C107 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47993) *
                C108 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C47993) *
                C109) *
               C48235 * C48376 +
           (((C113 * C490 + C48250 * C505) * C2641 +
             (C113 * C506 + C48250 * C520) * C2635 - C556 * C2642 -
             C557 * C47993) *
                C107 +
            (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C47993) *
                C108 +
            (C558 * C2641 + C559 * C2635 - C560 * C2642 - C561 * C47993) *
                C109) *
               C48235 * C48350) *
              C2531 +
          (((C361 * C2642 -
             ((C113 * C307 + C48250 * C326) * C2635 +
              (C113 * C297 + C48250 * C308) * C2641) +
             C362 * C47993) *
                C107 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47993) *
                C108 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C47993) *
                C109) *
               C48235 * C48387 +
           (((C113 * C935 + C48250 * C940) * C2641 +
             (C113 * C941 + C48250 * C950) * C2635 - C968 * C2642 -
             C969 * C47993) *
                C107 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C47993) *
                C108 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C47993) *
                C109) *
               C48235 * C48376 +
           ((C2198 * C2642 -
             ((C113 * C1308 + C48250 * C1324) * C2635 +
              (C113 * C1297 + C48250 * C1309) * C2641) +
             C2199 * C47993) *
                C107 +
            (C2200 * C2642 - (C2199 * C2635 + C2198 * C2641) + C2201 * C47993) *
                C108 +
            ((C113 * C2185 + C48250 * C2186) * C2642 -
             (C2201 * C2635 + C2200 * C2641) +
             (C113 * C2187 + C48250 * C2188) * C47993) *
                C109) *
               C48235 * C48350) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C119 + C48250 * C126) * C47011 +
                    (C113 * C127 + C48250 * C140) * C47988 - C168 * C47007 -
                    C169 * C47996 + C170 * C47017 + C171 * C2901) *
                       C107 +
                   (C168 * C47011 + C169 * C47988 - C170 * C47007 -
                    C171 * C47996 + C172 * C47017 + C173 * C2901) *
                       C108 +
                   (C170 * C47011 + C171 * C47988 - C172 * C47007 -
                    C173 * C47996 + C174 * C47017 + C175 * C2901) *
                       C109) *
                      C48235 * C48316 +
                  ((C550 * C47007 -
                    ((C113 * C496 + C48250 * C515) * C47988 +
                     (C113 * C486 + C48250 * C497) * C47011) +
                    C551 * C47996 - C552 * C47017 - C553 * C2901) *
                       C107 +
                   (C552 * C47007 - (C551 * C47988 + C550 * C47011) +
                    C553 * C47996 - C554 * C47017 - C555 * C2901) *
                       C108 +
                   (C554 * C47007 - (C553 * C47988 + C552 * C47011) +
                    C555 * C47996 - C788 * C47017 - C789 * C2901) *
                       C109) *
                      C48235 * C48134) *
                     C2531 +
                 (((C361 * C47007 -
                    ((C113 * C307 + C48250 * C326) * C47988 +
                     (C113 * C297 + C48250 * C308) * C47011) +
                    C362 * C47996 - C363 * C47017 - C364 * C2901) *
                       C107 +
                   (C363 * C47007 - (C362 * C47988 + C361 * C47011) +
                    C364 * C47996 - C365 * C47017 - C366 * C2901) *
                       C108 +
                   (C365 * C47007 - (C364 * C47988 + C363 * C47011) +
                    C366 * C47996 - C678 * C47017 - C679 * C2901) *
                       C109) *
                      C48235 * C48316 +
                  (((C113 * C935 + C48250 * C940) * C47011 +
                    (C113 * C941 + C48250 * C950) * C47988 - C968 * C47007 -
                    C969 * C47996 + C970 * C47017 + C971 * C2901) *
                       C107 +
                   (C968 * C47011 + C969 * C47988 - C970 * C47007 -
                    C971 * C47996 + C972 * C47017 + C973 * C2901) *
                       C108 +
                   (C970 * C47011 + C971 * C47988 - C972 * C47007 -
                    C973 * C47996 + (C113 * C939 + C48250 * C948) * C47017 +
                    (C113 * C949 + C48250 * C954) * C2901) *
                       C109) *
                      C48235 * C48134) *
                     C48094)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C2533 +
            (C113 * C127 + C48250 * C140) * C48392 - C168 * C2534 -
            C169 * C48385 + C170 * C2535 + C171 * C48372 - C172 * C2536 -
            C173 * C48351) *
               C107 +
           (C168 * C2533 + C169 * C48392 - C170 * C2534 - C171 * C48385 +
            C172 * C2535 + C173 * C48372 - C174 * C2536 - C175 * C48351) *
               C108 +
           (C170 * C2533 + C171 * C48392 - C172 * C2534 - C173 * C48385 +
            C174 * C2535 + C175 * C48372 - C176 * C2536 - C177 * C48351) *
               C109) *
              C48235 * C48047 * C2531 +
          ((C361 * C2534 -
            ((C113 * C307 + C48250 * C326) * C48392 +
             (C113 * C297 + C48250 * C308) * C2533) +
            C362 * C48385 - C363 * C2535 - C364 * C48372 + C365 * C2536 +
            C366 * C48351) *
               C107 +
           (C363 * C2534 - (C362 * C48392 + C361 * C2533) + C364 * C48385 -
            C365 * C2535 - C366 * C48372 + C678 * C2536 + C679 * C48351) *
               C108 +
           (C365 * C2534 - (C364 * C48392 + C363 * C2533) + C366 * C48385 -
            C678 * C2535 - C679 * C48372 +
            (C113 * C669 + C48250 * C670) * C2536 +
            (C113 * C671 + C48250 * C672) * C48351) *
               C109) *
              C48235 * C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C2641 +
            (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
            C169 * C47993) *
               C107 +
           (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) * C108 +
           (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C47993) *
               C109) *
              C48235 * C48047 * C48393 +
          ((C361 * C2642 -
            ((C113 * C307 + C48250 * C326) * C2635 +
             (C113 * C297 + C48250 * C308) * C2641) +
            C362 * C47993) *
               C107 +
           (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47993) *
               C108 +
           (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C47993) *
               C109) *
              C48235 * C48047 * C48389 +
          (((C113 * C301 + C48250 * C316) * C2641 +
            (C113 * C317 + C48250 * C331) * C2635 - C367 * C2642 -
            C368 * C47993) *
               C107 +
           (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C47993) * C108 +
           (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C47993) *
               C109) *
              C48235 * C48047 * C48379 +
          ((C1450 * C2642 -
            ((C113 * C1171 + C48250 * C1181) * C2635 +
             (C113 * C1163 + C48250 * C1172) * C2641) +
            C1451 * C47993) *
               C107 +
           (C1452 * C2642 - (C1451 * C2635 + C1450 * C2641) + C1453 * C47993) *
               C108 +
           ((C113 * C1437 + C48250 * C1438) * C2642 -
            (C1453 * C2635 + C1452 * C2641) +
            (C113 * C1439 + C48250 * C1440) * C47993) *
               C109) *
              C48235 * C48047 * C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C47001 +
             (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
             C169 * C47993) *
                C107 +
            (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                C108 +
            (C170 * C47001 + C171 * C48298 - C172 * C46982 - C173 * C47993) *
                C109) *
               C48235 * C3298 +
           ((C550 * C46982 -
             ((C113 * C496 + C48250 * C515) * C48298 +
              (C113 * C486 + C48250 * C497) * C47001) +
             C551 * C47993) *
                C107 +
            (C552 * C46982 - (C551 * C48298 + C550 * C47001) + C553 * C47993) *
                C108 +
            (C554 * C46982 - (C553 * C48298 + C552 * C47001) + C555 * C47993) *
                C109) *
               C48235 * C48134) *
              C48090 +
          (((C361 * C46982 -
             ((C113 * C307 + C48250 * C326) * C48298 +
              (C113 * C297 + C48250 * C308) * C47001) +
             C362 * C47993) *
                C107 +
            (C363 * C46982 - (C362 * C48298 + C361 * C47001) + C364 * C47993) *
                C108 +
            (C365 * C46982 - (C364 * C48298 + C363 * C47001) + C366 * C47993) *
                C109) *
               C48235 * C3298 +
           (((C113 * C935 + C48250 * C940) * C47001 +
             (C113 * C941 + C48250 * C950) * C48298 - C968 * C46982 -
             C969 * C47993) *
                C107 +
            (C968 * C47001 + C969 * C48298 - C970 * C46982 - C971 * C47993) *
                C108 +
            (C970 * C47001 + C971 * C48298 - C972 * C46982 - C973 * C47993) *
                C109) *
               C48235 * C48134) *
              C48097 +
          ((((C113 * C301 + C48250 * C316) * C47001 +
             (C113 * C317 + C48250 * C331) * C48298 - C367 * C46982 -
             C368 * C47993) *
                C107 +
            (C367 * C47001 + C368 * C48298 - C369 * C46982 - C370 * C47993) *
                C108 +
            (C369 * C47001 + C370 * C48298 - C371 * C46982 - C372 * C47993) *
                C109) *
               C48235 * C3298 +
           ((C1612 * C46982 -
             ((C113 * C1314 + C48250 * C1327) * C48298 +
              (C113 * C1300 + C48250 * C1315) * C47001) +
             C1613 * C47993) *
                C107 +
            (C1614 * C46982 - (C1613 * C48298 + C1612 * C47001) +
             C1615 * C47993) *
                C108 +
            ((C113 * C1599 + C48250 * C1600) * C46982 -
             (C1615 * C48298 + C1614 * C47001) +
             (C113 * C1601 + C48250 * C1602) * C47993) *
                C109) *
               C48235 * C48134) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C119 + C48250 * C126) * C1160 +
                    (C113 * C127 + C48250 * C140) * C47983) *
                       C107 +
                   (C168 * C1160 + C169 * C47983) * C108 +
                   (C170 * C1160 + C171 * C47983) * C109) *
                      C48235 * C48130 -
                  ((C553 * C47983 + C552 * C1160) * C109 +
                   (C551 * C47983 + C550 * C1160) * C108 +
                   ((C113 * C496 + C48250 * C515) * C47983 +
                    (C113 * C486 + C48250 * C497) * C1160) *
                       C107) *
                      C48235 * C48137 +
                  (((C113 * C490 + C48250 * C505) * C1160 +
                    (C113 * C506 + C48250 * C520) * C47983) *
                       C107 +
                   (C556 * C1160 + C557 * C47983) * C108 +
                   (C558 * C1160 + C559 * C47983) * C109) *
                      C48235 * C3806) *
                     C48090 +
                 ((((C113 * C935 + C48250 * C940) * C1160 +
                    (C113 * C941 + C48250 * C950) * C47983) *
                       C107 +
                   (C968 * C1160 + C969 * C47983) * C108 +
                   (C970 * C1160 + C971 * C47983) * C109) *
                      C48235 * C48137 -
                  ((C364 * C47983 + C363 * C1160) * C109 +
                   (C362 * C47983 + C361 * C1160) * C108 +
                   ((C113 * C307 + C48250 * C326) * C47983 +
                    (C113 * C297 + C48250 * C308) * C1160) *
                       C107) *
                      C48235 * C48130 -
                  ((C2201 * C47983 + C2200 * C1160) * C109 +
                   (C2199 * C47983 + C2198 * C1160) * C108 +
                   ((C113 * C1308 + C48250 * C1324) * C47983 +
                    (C113 * C1297 + C48250 * C1309) * C1160) *
                       C107) *
                      C48235 * C3806) *
                     C48097 +
                 ((((C113 * C301 + C48250 * C316) * C1160 +
                    (C113 * C317 + C48250 * C331) * C47983) *
                       C107 +
                   (C367 * C1160 + C368 * C47983) * C108 +
                   (C369 * C1160 + C370 * C47983) * C109) *
                      C48235 * C48130 -
                  ((C1615 * C47983 + C1614 * C1160) * C109 +
                   (C1613 * C47983 + C1612 * C1160) * C108 +
                   ((C113 * C1314 + C48250 * C1327) * C47983 +
                    (C113 * C1300 + C48250 * C1315) * C1160) *
                       C107) *
                      C48235 * C48137 +
                  (((C113 * C1301 + C48250 * C1316) * C1160 +
                    (C113 * C1317 + C48250 * C1328) * C47983) *
                       C107 +
                   ((C113 * C1302 + C48250 * C1318) * C1160 +
                    (C113 * C1319 + C48250 * C1329) * C47983) *
                       C108 +
                   ((C113 * C1303 + C48250 * C1320) * C1160 +
                    (C113 * C1321 + C48250 * C1330) * C47983) *
                       C109) *
                      C48235 * C3806) *
                     C2904)) /
               (p * q * std::sqrt(p + q));
    d2ee[7] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C119 + C48250 * C126) * C1160 +
                    (C113 * C127 + C48250 * C140) * C47983) *
                       C107 +
                   (C168 * C1160 + C169 * C47983) * C108 +
                   (C170 * C1160 + C171 * C47983) * C109) *
                      C48235 * C3298 -
                  ((C553 * C47983 + C552 * C1160) * C109 +
                   (C551 * C47983 + C550 * C1160) * C108 +
                   ((C113 * C496 + C48250 * C515) * C47983 +
                    (C113 * C486 + C48250 * C497) * C1160) *
                       C107) *
                      C48235 * C48134) *
                     C48393 +
                 ((((C113 * C935 + C48250 * C940) * C1160 +
                    (C113 * C941 + C48250 * C950) * C47983) *
                       C107 +
                   (C968 * C1160 + C969 * C47983) * C108 +
                   (C970 * C1160 + C971 * C47983) * C109) *
                      C48235 * C48134 -
                  ((C364 * C47983 + C363 * C1160) * C109 +
                   (C362 * C47983 + C361 * C1160) * C108 +
                   ((C113 * C307 + C48250 * C326) * C47983 +
                    (C113 * C297 + C48250 * C308) * C1160) *
                       C107) *
                      C48235 * C3298) *
                     C48389 +
                 ((((C113 * C301 + C48250 * C316) * C1160 +
                    (C113 * C317 + C48250 * C331) * C47983) *
                       C107 +
                   (C367 * C1160 + C368 * C47983) * C108 +
                   (C369 * C1160 + C370 * C47983) * C109) *
                      C48235 * C3298 -
                  ((C1615 * C47983 + C1614 * C1160) * C109 +
                   (C1613 * C47983 + C1612 * C1160) * C108 +
                   ((C113 * C1314 + C48250 * C1327) * C47983 +
                    (C113 * C1300 + C48250 * C1315) * C1160) *
                       C107) *
                      C48235 * C48134) *
                     C48379 +
                 ((((C113 * C1713 + C48250 * C1716) * C1160 +
                    (C113 * C1717 + C48250 * C1722) * C47983) *
                       C107 +
                   ((C113 * C1714 + C48250 * C1718) * C1160 +
                    (C113 * C1719 + C48250 * C1723) * C47983) *
                       C108 +
                   ((C113 * C1715 + C48250 * C1720) * C1160 +
                    (C113 * C1721 + C48250 * C1724) * C47983) *
                       C109) *
                      C48235 * C48134 -
                  ((C1453 * C47983 + C1452 * C1160) * C109 +
                   (C1451 * C47983 + C1450 * C1160) * C108 +
                   ((C113 * C1171 + C48250 * C1181) * C47983 +
                    (C113 * C1163 + C48250 * C1172) * C1160) *
                       C107) *
                      C48235 * C3298) *
                     C48357)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C119 + C48250 * C126) * C1089 +
                    (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
                    C169 * C48370 + C170 * C1091 + C171 * C48339) *
                       C107 +
                   (C168 * C1089 + C169 * C48383 - C170 * C1090 -
                    C171 * C48370 + C172 * C1091 + C173 * C48339) *
                       C108 +
                   (C170 * C1089 + C171 * C48383 - C172 * C1090 -
                    C173 * C48370 + C174 * C1091 + C175 * C48339) *
                       C109) *
                      C48235 * C3298 +
                  ((C550 * C1090 -
                    ((C113 * C496 + C48250 * C515) * C48383 +
                     (C113 * C486 + C48250 * C497) * C1089) +
                    C551 * C48370 - C552 * C1091 - C553 * C48339) *
                       C107 +
                   (C552 * C1090 - (C551 * C48383 + C550 * C1089) +
                    C553 * C48370 - C554 * C1091 - C555 * C48339) *
                       C108 +
                   (C554 * C1090 - (C553 * C48383 + C552 * C1089) +
                    C555 * C48370 - C788 * C1091 - C789 * C48339) *
                       C109) *
                      C48235 * C48134) *
                     C2531 +
                 (((C361 * C1090 -
                    ((C113 * C307 + C48250 * C326) * C48383 +
                     (C113 * C297 + C48250 * C308) * C1089) +
                    C362 * C48370 - C363 * C1091 - C364 * C48339) *
                       C107 +
                   (C363 * C1090 - (C362 * C48383 + C361 * C1089) +
                    C364 * C48370 - C365 * C1091 - C366 * C48339) *
                       C108 +
                   (C365 * C1090 - (C364 * C48383 + C363 * C1089) +
                    C366 * C48370 - C678 * C1091 - C679 * C48339) *
                       C109) *
                      C48235 * C3298 +
                  (((C113 * C935 + C48250 * C940) * C1089 +
                    (C113 * C941 + C48250 * C950) * C48383 - C968 * C1090 -
                    C969 * C48370 + C970 * C1091 + C971 * C48339) *
                       C107 +
                   (C968 * C1089 + C969 * C48383 - C970 * C1090 -
                    C971 * C48370 + C972 * C1091 + C973 * C48339) *
                       C108 +
                   (C970 * C1089 + C971 * C48383 - C972 * C1090 -
                    C973 * C48370 + (C113 * C939 + C48250 * C948) * C1091 +
                    (C113 * C949 + C48250 * C954) * C48339) *
                       C109) *
                      C48235 * C48134) *
                     C48094)) /
                   (p * q * std::sqrt(p + q)) +
               (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C119 + C48250 * C126) * C1160 +
                    (C113 * C127 + C48250 * C140) * C47983) *
                       C107 +
                   (C168 * C1160 + C169 * C47983) * C108 +
                   (C170 * C1160 + C171 * C47983) * C109) *
                      C48235 * C48394 -
                  ((C553 * C47983 + C552 * C1160) * C109 +
                   (C551 * C47983 + C550 * C1160) * C108 +
                   ((C113 * C496 + C48250 * C515) * C47983 +
                    (C113 * C486 + C48250 * C497) * C1160) *
                       C107) *
                      C48235 * C48391 +
                  (((C113 * C490 + C48250 * C505) * C1160 +
                    (C113 * C506 + C48250 * C520) * C47983) *
                       C107 +
                   (C556 * C1160 + C557 * C47983) * C108 +
                   (C558 * C1160 + C559 * C47983) * C109) *
                      C48235 * C48382 -
                  ((C2319 * C47983 + C2318 * C1160) * C109 +
                   (C2317 * C47983 + C2316 * C1160) * C108 +
                   ((C113 * C2025 + C48250 * C2035) * C47983 +
                    (C113 * C2017 + C48250 * C2026) * C1160) *
                       C107) *
                      C48235 * C48363) *
                     C2531 +
                 ((((C113 * C935 + C48250 * C940) * C1160 +
                    (C113 * C941 + C48250 * C950) * C47983) *
                       C107 +
                   (C968 * C1160 + C969 * C47983) * C108 +
                   (C970 * C1160 + C971 * C47983) * C109) *
                      C48235 * C48391 -
                  ((C364 * C47983 + C363 * C1160) * C109 +
                   (C362 * C47983 + C361 * C1160) * C108 +
                   ((C113 * C307 + C48250 * C326) * C47983 +
                    (C113 * C297 + C48250 * C308) * C1160) *
                       C107) *
                      C48235 * C48394 -
                  ((C2201 * C47983 + C2200 * C1160) * C109 +
                   (C2199 * C47983 + C2198 * C1160) * C108 +
                   ((C113 * C1308 + C48250 * C1324) * C47983 +
                    (C113 * C1297 + C48250 * C1309) * C1160) *
                       C107) *
                      C48235 * C48382 +
                  (((C113 * C2417 + C48250 * C2420) * C1160 +
                    (C113 * C2421 + C48250 * C2426) * C47983) *
                       C107 +
                   ((C113 * C2418 + C48250 * C2422) * C1160 +
                    (C113 * C2423 + C48250 * C2427) * C47983) *
                       C108 +
                   ((C113 * C2419 + C48250 * C2424) * C1160 +
                    (C113 * C2425 + C48250 * C2428) * C47983) *
                       C109) *
                      C48235 * C48363) *
                     C48094)) /
                   (p * q * std::sqrt(p + q));
    d2ee[8] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C47001 +
             (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
             C169 * C47993) *
                C107 +
            (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                C108 +
            (C170 * C47001 + C171 * C48298 - C172 * C46982 - C173 * C47993) *
                C109) *
               C48235 * C48130 +
           ((C550 * C46982 -
             ((C113 * C496 + C48250 * C515) * C48298 +
              (C113 * C486 + C48250 * C497) * C47001) +
             C551 * C47993) *
                C107 +
            (C552 * C46982 - (C551 * C48298 + C550 * C47001) + C553 * C47993) *
                C108 +
            (C554 * C46982 - (C553 * C48298 + C552 * C47001) + C555 * C47993) *
                C109) *
               C48235 * C48137 +
           (((C113 * C490 + C48250 * C505) * C47001 +
             (C113 * C506 + C48250 * C520) * C48298 - C556 * C46982 -
             C557 * C47993) *
                C107 +
            (C556 * C47001 + C557 * C48298 - C558 * C46982 - C559 * C47993) *
                C108 +
            (C558 * C47001 + C559 * C48298 - C560 * C46982 - C561 * C47993) *
                C109) *
               C48235 * C3806) *
              C2531 +
          (((C361 * C46982 -
             ((C113 * C307 + C48250 * C326) * C48298 +
              (C113 * C297 + C48250 * C308) * C47001) +
             C362 * C47993) *
                C107 +
            (C363 * C46982 - (C362 * C48298 + C361 * C47001) + C364 * C47993) *
                C108 +
            (C365 * C46982 - (C364 * C48298 + C363 * C47001) + C366 * C47993) *
                C109) *
               C48235 * C48130 +
           (((C113 * C935 + C48250 * C940) * C47001 +
             (C113 * C941 + C48250 * C950) * C48298 - C968 * C46982 -
             C969 * C47993) *
                C107 +
            (C968 * C47001 + C969 * C48298 - C970 * C46982 - C971 * C47993) *
                C108 +
            (C970 * C47001 + C971 * C48298 - C972 * C46982 - C973 * C47993) *
                C109) *
               C48235 * C48137 +
           ((C2198 * C46982 -
             ((C113 * C1308 + C48250 * C1324) * C48298 +
              (C113 * C1297 + C48250 * C1309) * C47001) +
             C2199 * C47993) *
                C107 +
            (C2200 * C46982 - (C2199 * C48298 + C2198 * C47001) +
             C2201 * C47993) *
                C108 +
            ((C113 * C2185 + C48250 * C2186) * C46982 -
             (C2201 * C48298 + C2200 * C47001) +
             (C113 * C2187 + C48250 * C2188) * C47993) *
                C109) *
               C48235 * C3806) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C119 + C48250 * C126) * C1089 +
                    (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
                    C169 * C48370 + C170 * C1091 + C171 * C48339) *
                       C107 +
                   (C168 * C1089 + C169 * C48383 - C170 * C1090 -
                    C171 * C48370 + C172 * C1091 + C173 * C48339) *
                       C108 +
                   (C170 * C1089 + C171 * C48383 - C172 * C1090 -
                    C173 * C48370 + C174 * C1091 + C175 * C48339) *
                       C109) *
                      C48235 * C3298 +
                  ((C550 * C1090 -
                    ((C113 * C496 + C48250 * C515) * C48383 +
                     (C113 * C486 + C48250 * C497) * C1089) +
                    C551 * C48370 - C552 * C1091 - C553 * C48339) *
                       C107 +
                   (C552 * C1090 - (C551 * C48383 + C550 * C1089) +
                    C553 * C48370 - C554 * C1091 - C555 * C48339) *
                       C108 +
                   (C554 * C1090 - (C553 * C48383 + C552 * C1089) +
                    C555 * C48370 - C788 * C1091 - C789 * C48339) *
                       C109) *
                      C48235 * C48134) *
                     C2531 +
                 (((C361 * C1090 -
                    ((C113 * C307 + C48250 * C326) * C48383 +
                     (C113 * C297 + C48250 * C308) * C1089) +
                    C362 * C48370 - C363 * C1091 - C364 * C48339) *
                       C107 +
                   (C363 * C1090 - (C362 * C48383 + C361 * C1089) +
                    C364 * C48370 - C365 * C1091 - C366 * C48339) *
                       C108 +
                   (C365 * C1090 - (C364 * C48383 + C363 * C1089) +
                    C366 * C48370 - C678 * C1091 - C679 * C48339) *
                       C109) *
                      C48235 * C3298 +
                  (((C113 * C935 + C48250 * C940) * C1089 +
                    (C113 * C941 + C48250 * C950) * C48383 - C968 * C1090 -
                    C969 * C48370 + C970 * C1091 + C971 * C48339) *
                       C107 +
                   (C968 * C1089 + C969 * C48383 - C970 * C1090 -
                    C971 * C48370 + C972 * C1091 + C973 * C48339) *
                       C108 +
                   (C970 * C1089 + C971 * C48383 - C972 * C1090 -
                    C973 * C48370 + (C113 * C939 + C48250 * C948) * C1091 +
                    (C113 * C949 + C48250 * C954) * C48339) *
                       C109) *
                      C48235 * C48134) *
                     C48094)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C119 + C48250 * C126) * C1160 +
                    (C113 * C127 + C48250 * C140) * C47983) *
                       C107 +
                   (C168 * C1160 + C169 * C47983) * C108 +
                   (C170 * C1160 + C171 * C47983) * C109) *
                      C48235 * C3298 -
                  ((C553 * C47983 + C552 * C1160) * C109 +
                   (C551 * C47983 + C550 * C1160) * C108 +
                   ((C113 * C496 + C48250 * C515) * C47983 +
                    (C113 * C486 + C48250 * C497) * C1160) *
                       C107) *
                      C48235 * C48134) *
                     C48393 +
                 ((((C113 * C935 + C48250 * C940) * C1160 +
                    (C113 * C941 + C48250 * C950) * C47983) *
                       C107 +
                   (C968 * C1160 + C969 * C47983) * C108 +
                   (C970 * C1160 + C971 * C47983) * C109) *
                      C48235 * C48134 -
                  ((C364 * C47983 + C363 * C1160) * C109 +
                   (C362 * C47983 + C361 * C1160) * C108 +
                   ((C113 * C307 + C48250 * C326) * C47983 +
                    (C113 * C297 + C48250 * C308) * C1160) *
                       C107) *
                      C48235 * C3298) *
                     C48389 +
                 ((((C113 * C301 + C48250 * C316) * C1160 +
                    (C113 * C317 + C48250 * C331) * C47983) *
                       C107 +
                   (C367 * C1160 + C368 * C47983) * C108 +
                   (C369 * C1160 + C370 * C47983) * C109) *
                      C48235 * C3298 -
                  ((C1615 * C47983 + C1614 * C1160) * C109 +
                   (C1613 * C47983 + C1612 * C1160) * C108 +
                   ((C113 * C1314 + C48250 * C1327) * C47983 +
                    (C113 * C1300 + C48250 * C1315) * C1160) *
                       C107) *
                      C48235 * C48134) *
                     C48379 +
                 ((((C113 * C1713 + C48250 * C1716) * C1160 +
                    (C113 * C1717 + C48250 * C1722) * C47983) *
                       C107 +
                   ((C113 * C1714 + C48250 * C1718) * C1160 +
                    (C113 * C1719 + C48250 * C1723) * C47983) *
                       C108 +
                   ((C113 * C1715 + C48250 * C1720) * C1160 +
                    (C113 * C1721 + C48250 * C1724) * C47983) *
                       C109) *
                      C48235 * C48134 -
                  ((C1453 * C47983 + C1452 * C1160) * C109 +
                   (C1451 * C47983 + C1450 * C1160) * C108 +
                   ((C113 * C1171 + C48250 * C1181) * C47983 +
                    (C113 * C1163 + C48250 * C1172) * C1160) *
                       C107) *
                      C48235 * C3298) *
                     C48357)) /
                   (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C47001 +
            (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
            C169 * C47993) *
               C107 +
           (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
               C108 +
           (C170 * C47001 + C171 * C48298 - C172 * C46982 - C173 * C47993) *
               C109) *
              C48235 * C48047 * C1431 +
          ((C361 * C46982 -
            ((C113 * C307 + C48250 * C326) * C48298 +
             (C113 * C297 + C48250 * C308) * C47001) +
            C362 * C47993) *
               C107 +
           (C363 * C46982 - (C362 * C48298 + C361 * C47001) + C364 * C47993) *
               C108 +
           (C365 * C46982 - (C364 * C48298 + C363 * C47001) + C366 * C47993) *
               C109) *
              C48235 * C48047 * C1432 +
          (((C113 * C301 + C48250 * C316) * C47001 +
            (C113 * C317 + C48250 * C331) * C48298 - C367 * C46982 -
            C368 * C47993) *
               C107 +
           (C367 * C47001 + C368 * C48298 - C369 * C46982 - C370 * C47993) *
               C108 +
           (C369 * C47001 + C370 * C48298 - C371 * C46982 - C372 * C47993) *
               C109) *
              C48235 * C48047 * C1433 +
          ((C1450 * C46982 -
            ((C113 * C1171 + C48250 * C1181) * C48298 +
             (C113 * C1163 + C48250 * C1172) * C47001) +
            C1451 * C47993) *
               C107 +
           (C1452 * C46982 - (C1451 * C48298 + C1450 * C47001) +
            C1453 * C47993) *
               C108 +
           ((C113 * C1437 + C48250 * C1438) * C46982 -
            (C1453 * C48298 + C1452 * C47001) +
            (C113 * C1439 + C48250 * C1440) * C47993) *
               C109) *
              C48235 * C48047 * C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C665 +
            (C113 * C127 + C48250 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48351) *
               C107 +
           (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
            C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48351) *
               C108 +
           (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
            C174 * C667 + C175 * C661 - C176 * C668 - C177 * C48351) *
               C109) *
              C48235 * C48047 * C48315 +
          ((C361 * C666 -
            ((C113 * C307 + C48250 * C326) * C659 +
             (C113 * C297 + C48250 * C308) * C665) +
            C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
            C366 * C48351) *
               C107 +
           (C363 * C666 - (C362 * C659 + C361 * C665) + C364 * C660 -
            C365 * C667 - C366 * C661 + C678 * C668 + C679 * C48351) *
               C108 +
           (C365 * C666 - (C364 * C659 + C363 * C665) + C366 * C660 -
            C678 * C667 - C679 * C661 + (C113 * C669 + C48250 * C670) * C668 +
            (C113 * C671 + C48250 * C672) * C48351) *
               C109) *
              C48235 * C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C47001 +
             (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
             C169 * C47993) *
                C107 +
            (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                C108 +
            (C170 * C47001 + C171 * C48298 - C172 * C46982 - C173 * C47993) *
                C109) *
               C48235 * C1835 +
           ((C550 * C46982 -
             ((C113 * C496 + C48250 * C515) * C48298 +
              (C113 * C486 + C48250 * C497) * C47001) +
             C551 * C47993) *
                C107 +
            (C552 * C46982 - (C551 * C48298 + C550 * C47001) + C553 * C47993) *
                C108 +
            (C554 * C46982 - (C553 * C48298 + C552 * C47001) + C555 * C47993) *
                C109) *
               C48235 * C1836 +
           (((C113 * C490 + C48250 * C505) * C47001 +
             (C113 * C506 + C48250 * C520) * C48298 - C556 * C46982 -
             C557 * C47993) *
                C107 +
            (C556 * C47001 + C557 * C48298 - C558 * C46982 - C559 * C47993) *
                C108 +
            (C558 * C47001 + C559 * C48298 - C560 * C46982 - C561 * C47993) *
                C109) *
               C48235 * C48350) *
              C48315 +
          (((C361 * C46982 -
             ((C113 * C307 + C48250 * C326) * C48298 +
              (C113 * C297 + C48250 * C308) * C47001) +
             C362 * C47993) *
                C107 +
            (C363 * C46982 - (C362 * C48298 + C361 * C47001) + C364 * C47993) *
                C108 +
            (C365 * C46982 - (C364 * C48298 + C363 * C47001) + C366 * C47993) *
                C109) *
               C48235 * C1835 +
           (((C113 * C935 + C48250 * C940) * C47001 +
             (C113 * C941 + C48250 * C950) * C48298 - C968 * C46982 -
             C969 * C47993) *
                C107 +
            (C968 * C47001 + C969 * C48298 - C970 * C46982 - C971 * C47993) *
                C108 +
            (C970 * C47001 + C971 * C48298 - C972 * C46982 - C973 * C47993) *
                C109) *
               C48235 * C1836 +
           ((C2198 * C46982 -
             ((C113 * C1308 + C48250 * C1324) * C48298 +
              (C113 * C1297 + C48250 * C1309) * C47001) +
             C2199 * C47993) *
                C107 +
            (C2200 * C46982 - (C2199 * C48298 + C2198 * C47001) +
             C2201 * C47993) *
                C108 +
            ((C113 * C2185 + C48250 * C2186) * C46982 -
             (C2201 * C48298 + C2200 * C47001) +
             (C113 * C2187 + C48250 * C2188) * C47993) *
                C109) *
               C48235 * C48350) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48250 * C126) * C1160 +
                     (C113 * C127 + C48250 * C140) * C47983) *
                        C107 +
                    (C168 * C1160 + C169 * C47983) * C108 +
                    (C170 * C1160 + C171 * C47983) * C109) *
                       C48235 * C48316 -
                   ((C553 * C47983 + C552 * C1160) * C109 +
                    (C551 * C47983 + C550 * C1160) * C108 +
                    ((C113 * C496 + C48250 * C515) * C47983 +
                     (C113 * C486 + C48250 * C497) * C1160) *
                        C107) *
                       C48235 * C48134) *
                      C1431 +
                  ((((C113 * C935 + C48250 * C940) * C1160 +
                     (C113 * C941 + C48250 * C950) * C47983) *
                        C107 +
                    (C968 * C1160 + C969 * C47983) * C108 +
                    (C970 * C1160 + C971 * C47983) * C109) *
                       C48235 * C48134 -
                   ((C364 * C47983 + C363 * C1160) * C109 +
                    (C362 * C47983 + C361 * C1160) * C108 +
                    ((C113 * C307 + C48250 * C326) * C47983 +
                     (C113 * C297 + C48250 * C308) * C1160) *
                        C107) *
                       C48235 * C48316) *
                      C1432 +
                  ((((C113 * C301 + C48250 * C316) * C1160 +
                     (C113 * C317 + C48250 * C331) * C47983) *
                        C107 +
                    (C367 * C1160 + C368 * C47983) * C108 +
                    (C369 * C1160 + C370 * C47983) * C109) *
                       C48235 * C48316 -
                   ((C1615 * C47983 + C1614 * C1160) * C109 +
                    (C1613 * C47983 + C1612 * C1160) * C108 +
                    ((C113 * C1314 + C48250 * C1327) * C47983 +
                     (C113 * C1300 + C48250 * C1315) * C1160) *
                        C107) *
                       C48235 * C48134) *
                      C1433 +
                  ((((C113 * C1713 + C48250 * C1716) * C1160 +
                     (C113 * C1717 + C48250 * C1722) * C47983) *
                        C107 +
                    ((C113 * C1714 + C48250 * C1718) * C1160 +
                     (C113 * C1719 + C48250 * C1723) * C47983) *
                        C108 +
                    ((C113 * C1715 + C48250 * C1720) * C1160 +
                     (C113 * C1721 + C48250 * C1724) * C47983) *
                        C109) *
                       C48235 * C48134 -
                   ((C1453 * C47983 + C1452 * C1160) * C109 +
                    (C1451 * C47983 + C1450 * C1160) * C108 +
                    ((C113 * C1171 + C48250 * C1181) * C47983 +
                     (C113 * C1163 + C48250 * C1172) * C1160) *
                        C107) *
                       C48235 * C48316) *
                      C48357)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48250 * C126) * C293 +
                     (C113 * C127 + C48250 * C140) * C287 - C168 * C294 -
                     C169 * C288 + C170 * C295 + C171 * C48339) *
                        C107 +
                    (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                     C172 * C295 + C173 * C48339) *
                        C108 +
                    (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                     C174 * C295 + C175 * C48339) *
                        C109) *
                       C48235 * C48316 +
                   ((C550 * C294 -
                     ((C113 * C496 + C48250 * C515) * C287 +
                      (C113 * C486 + C48250 * C497) * C293) +
                     C551 * C288 - C552 * C295 - C553 * C48339) *
                        C107 +
                    (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
                     C554 * C295 - C555 * C48339) *
                        C108 +
                    (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
                     C788 * C295 - C789 * C48339) *
                        C109) *
                       C48235 * C48134) *
                      C48315 +
                  (((C361 * C294 -
                     ((C113 * C307 + C48250 * C326) * C287 +
                      (C113 * C297 + C48250 * C308) * C293) +
                     C362 * C288 - C363 * C295 - C364 * C48339) *
                        C107 +
                    (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                     C365 * C295 - C366 * C48339) *
                        C108 +
                    (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                     C678 * C295 - C679 * C48339) *
                        C109) *
                       C48235 * C48316 +
                   (((C113 * C935 + C48250 * C940) * C293 +
                     (C113 * C941 + C48250 * C950) * C287 - C968 * C294 -
                     C969 * C288 + C970 * C295 + C971 * C48339) *
                        C107 +
                    (C968 * C293 + C969 * C287 - C970 * C294 - C971 * C288 +
                     C972 * C295 + C973 * C48339) *
                        C108 +
                    (C970 * C293 + C971 * C287 - C972 * C294 - C973 * C288 +
                     (C113 * C939 + C48250 * C948) * C295 +
                     (C113 * C949 + C48250 * C954) * C48339) *
                        C109) *
                       C48235 * C48134) *
                      C48094)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48250 * C126) * C1160 +
                     (C113 * C127 + C48250 * C140) * C47983) *
                        C107 +
                    (C168 * C1160 + C169 * C47983) * C108 +
                    (C170 * C1160 + C171 * C47983) * C109) *
                       C48235 * C2299 -
                   ((C553 * C47983 + C552 * C1160) * C109 +
                    (C551 * C47983 + C550 * C1160) * C108 +
                    ((C113 * C496 + C48250 * C515) * C47983 +
                     (C113 * C486 + C48250 * C497) * C1160) *
                        C107) *
                       C48235 * C2300 +
                   (((C113 * C490 + C48250 * C505) * C1160 +
                     (C113 * C506 + C48250 * C520) * C47983) *
                        C107 +
                    (C556 * C1160 + C557 * C47983) * C108 +
                    (C558 * C1160 + C559 * C47983) * C109) *
                       C48235 * C2301 -
                   ((C2319 * C47983 + C2318 * C1160) * C109 +
                    (C2317 * C47983 + C2316 * C1160) * C108 +
                    ((C113 * C2025 + C48250 * C2035) * C47983 +
                     (C113 * C2017 + C48250 * C2026) * C1160) *
                        C107) *
                       C48235 * C48363) *
                      C48315 +
                  ((((C113 * C935 + C48250 * C940) * C1160 +
                     (C113 * C941 + C48250 * C950) * C47983) *
                        C107 +
                    (C968 * C1160 + C969 * C47983) * C108 +
                    (C970 * C1160 + C971 * C47983) * C109) *
                       C48235 * C2300 -
                   ((C364 * C47983 + C363 * C1160) * C109 +
                    (C362 * C47983 + C361 * C1160) * C108 +
                    ((C113 * C307 + C48250 * C326) * C47983 +
                     (C113 * C297 + C48250 * C308) * C1160) *
                        C107) *
                       C48235 * C2299 -
                   ((C2201 * C47983 + C2200 * C1160) * C109 +
                    (C2199 * C47983 + C2198 * C1160) * C108 +
                    ((C113 * C1308 + C48250 * C1324) * C47983 +
                     (C113 * C1297 + C48250 * C1309) * C1160) *
                        C107) *
                       C48235 * C2301 +
                   (((C113 * C2417 + C48250 * C2420) * C1160 +
                     (C113 * C2421 + C48250 * C2426) * C47983) *
                        C107 +
                    ((C113 * C2418 + C48250 * C2422) * C1160 +
                     (C113 * C2423 + C48250 * C2427) * C47983) *
                        C108 +
                    ((C113 * C2419 + C48250 * C2424) * C1160 +
                     (C113 * C2425 + C48250 * C2428) * C47983) *
                        C109) *
                       C48235 * C48363) *
                      C48094)) /
                    (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C48250 * C126) * C114 +
               (C113 * C127 + C48250 * C140) * C102 - C168 * C115 -
               C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
               C173 * C105 + C174 * C118 + C175 * C106) *
                  C107 +
              (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
               C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
               C176 * C118 + C177 * C106) *
                  C108 +
              (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 +
               C174 * C116 + C175 * C104 - C176 * C117 - C177 * C105 +
               (C113 * C125 + C48250 * C138) * C118 +
               (C113 * C139 + C48250 * C146) * C106) *
                  C109) *
             C48235 * C48047 * C48035 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C48250 * C126) * C293 +
                (C113 * C127 + C48250 * C140) * C287 - C168 * C294 -
                C169 * C288 + C170 * C295 + C171 * C48339) *
                   C107 +
               (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                C172 * C295 + C173 * C48339) *
                   C108 +
               (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                C174 * C295 + C175 * C48339) *
                   C109) *
                  C48235 * C48047 * C48386 +
              ((C361 * C294 -
                ((C113 * C307 + C48250 * C326) * C287 +
                 (C113 * C297 + C48250 * C308) * C293) +
                C362 * C288 - C363 * C295 - C364 * C48339) *
                   C107 +
               (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                C365 * C295 - C366 * C48339) *
                   C108 +
               (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                (C113 * C300 + C48250 * C314) * C295 -
                (C113 * C315 + C48250 * C330) * C48339) *
                   C109) *
                  C48235 * C48047 * C48374 +
              (((C113 * C301 + C48250 * C316) * C293 +
                (C113 * C317 + C48250 * C331) * C287 - C367 * C294 -
                C368 * C288 + C369 * C295 + C370 * C48339) *
                   C107 +
               (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                C371 * C295 + C372 * C48339) *
                   C108 +
               (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
                (C113 * C305 + C48250 * C324) * C295 +
                (C113 * C325 + C48250 * C335) * C48339) *
                   C109) *
                  C48235 * C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C293 +
            (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C48339) *
               C107 +
           (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
            C172 * C295 + C173 * C48339) *
               C108 +
           (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
            C174 * C295 + C175 * C48339) *
               C109) *
              C48235 * C48387 +
          ((C550 * C294 -
            ((C113 * C496 + C48250 * C515) * C287 +
             (C113 * C486 + C48250 * C497) * C293) +
            C551 * C288 - C552 * C295 - C553 * C48339) *
               C107 +
           (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
            C554 * C295 - C555 * C48339) *
               C108 +
           (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
            (C113 * C489 + C48250 * C503) * C295 -
            (C113 * C504 + C48250 * C519) * C48339) *
               C109) *
              C48235 * C48376 +
          (((C113 * C490 + C48250 * C505) * C293 +
            (C113 * C506 + C48250 * C520) * C287 - C556 * C294 - C557 * C288 +
            C558 * C295 + C559 * C48339) *
               C107 +
           (C556 * C293 + C557 * C287 - C558 * C294 - C559 * C288 +
            C560 * C295 + C561 * C48339) *
               C108 +
           (C558 * C293 + C559 * C287 - C560 * C294 - C561 * C288 +
            (C113 * C494 + C48250 * C513) * C295 +
            (C113 * C514 + C48250 * C524) * C48339) *
               C109) *
              C48235 * C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C1089 +
            (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
            C169 * C48370 + C170 * C1091 + C171 * C48339) *
               C107 +
           (C168 * C1089 + C169 * C48383 - C170 * C1090 - C171 * C48370 +
            C172 * C1091 + C173 * C48339) *
               C108 +
           (C170 * C1089 + C171 * C48383 - C172 * C1090 - C173 * C48370 +
            C174 * C1091 + C175 * C48339) *
               C109) *
              C48235 * C48047 * C1086 +
          ((C361 * C1090 -
            ((C113 * C307 + C48250 * C326) * C48383 +
             (C113 * C297 + C48250 * C308) * C1089) +
            C362 * C48370 - C363 * C1091 - C364 * C48339) *
               C107 +
           (C363 * C1090 - (C362 * C48383 + C361 * C1089) + C364 * C48370 -
            C365 * C1091 - C366 * C48339) *
               C108 +
           (C365 * C1090 - (C364 * C48383 + C363 * C1089) + C366 * C48370 -
            C678 * C1091 - C679 * C48339) *
               C109) *
              C48235 * C48047 * C1087 +
          (((C113 * C301 + C48250 * C316) * C1089 +
            (C113 * C317 + C48250 * C331) * C48383 - C367 * C1090 -
            C368 * C48370 + C369 * C1091 + C370 * C48339) *
               C107 +
           (C367 * C1089 + C368 * C48383 - C369 * C1090 - C370 * C48370 +
            C371 * C1091 + C372 * C48339) *
               C108 +
           (C369 * C1089 + C370 * C48383 - C371 * C1090 - C372 * C48370 +
            (C113 * C305 + C48250 * C324) * C1091 +
            (C113 * C325 + C48250 * C335) * C48339) *
               C109) *
              C48235 * C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C1160 +
            (C113 * C127 + C48250 * C140) * C47983) *
               C107 +
           (C168 * C1160 + C169 * C47983) * C108 +
           (C170 * C1160 + C171 * C47983) * C109) *
              C48235 * C48047 * C1155 -
          ((C364 * C47983 + C363 * C1160) * C109 +
           (C362 * C47983 + C361 * C1160) * C108 +
           ((C113 * C307 + C48250 * C326) * C47983 +
            (C113 * C297 + C48250 * C308) * C1160) *
               C107) *
              C48235 * C48047 * C1156 +
          (((C113 * C301 + C48250 * C316) * C1160 +
            (C113 * C317 + C48250 * C331) * C47983) *
               C107 +
           (C367 * C1160 + C368 * C47983) * C108 +
           (C369 * C1160 + C370 * C47983) * C109) *
              C48235 * C48047 * C1157 -
          (((C113 * C1167 + C48250 * C1179) * C47983 +
            (C113 * C1161 + C48250 * C1168) * C1160) *
               C109 +
           ((C113 * C1169 + C48250 * C1180) * C47983 +
            (C113 * C1162 + C48250 * C1170) * C1160) *
               C108 +
           ((C113 * C1171 + C48250 * C1181) * C47983 +
            (C113 * C1163 + C48250 * C1172) * C1160) *
               C107) *
              C48235 * C48047 * C1158 +
          (((C113 * C1164 + C48250 * C1173) * C1160 +
            (C113 * C1174 + C48250 * C1182) * C47983) *
               C107 +
           ((C113 * C1165 + C48250 * C1175) * C1160 +
            (C113 * C1176 + C48250 * C1183) * C47983) *
               C108 +
           ((C113 * C1166 + C48250 * C1177) * C1160 +
            (C113 * C1178 + C48250 * C1184) * C47983) *
               C109) *
              C48235 * C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C113 * C119 + C48250 * C126) * C1160 +
                                 (C113 * C127 + C48250 * C140) * C47983) *
                                    C107 +
                                (C168 * C1160 + C169 * C47983) * C108 +
                                (C170 * C1160 + C171 * C47983) * C109) *
                                   C48235 * C48387 -
                               ((C553 * C47983 + C552 * C1160) * C109 +
                                (C551 * C47983 + C550 * C1160) * C108 +
                                ((C113 * C496 + C48250 * C515) * C47983 +
                                 (C113 * C486 + C48250 * C497) * C1160) *
                                    C107) *
                                   C48235 * C48376 +
                               (((C113 * C490 + C48250 * C505) * C1160 +
                                 (C113 * C506 + C48250 * C520) * C47983) *
                                    C107 +
                                (C556 * C1160 + C557 * C47983) * C108 +
                                (C558 * C1160 + C559 * C47983) * C109) *
                                   C48235 * C48350) *
                                  C1086 +
                              ((((C113 * C935 + C48250 * C940) * C1160 +
                                 (C113 * C941 + C48250 * C950) * C47983) *
                                    C107 +
                                (C968 * C1160 + C969 * C47983) * C108 +
                                (C970 * C1160 + C971 * C47983) * C109) *
                                   C48235 * C48376 -
                               ((C364 * C47983 + C363 * C1160) * C109 +
                                (C362 * C47983 + C361 * C1160) * C108 +
                                ((C113 * C307 + C48250 * C326) * C47983 +
                                 (C113 * C297 + C48250 * C308) * C1160) *
                                    C107) *
                                   C48235 * C48387 -
                               (((C113 * C1304 + C48250 * C1322) * C47983 +
                                 (C113 * C1295 + C48250 * C1305) * C1160) *
                                    C109 +
                                ((C113 * C1306 + C48250 * C1323) * C47983 +
                                 (C113 * C1296 + C48250 * C1307) * C1160) *
                                    C108 +
                                ((C113 * C1308 + C48250 * C1324) * C47983 +
                                 (C113 * C1297 + C48250 * C1309) * C1160) *
                                    C107) *
                                   C48235 * C48350) *
                                  C1087 +
                              ((((C113 * C301 + C48250 * C316) * C1160 +
                                 (C113 * C317 + C48250 * C331) * C47983) *
                                    C107 +
                                (C367 * C1160 + C368 * C47983) * C108 +
                                (C369 * C1160 + C370 * C47983) * C109) *
                                   C48235 * C48387 -
                               (((C113 * C1310 + C48250 * C1325) * C47983 +
                                 (C113 * C1298 + C48250 * C1311) * C1160) *
                                    C109 +
                                ((C113 * C1312 + C48250 * C1326) * C47983 +
                                 (C113 * C1299 + C48250 * C1313) * C1160) *
                                    C108 +
                                ((C113 * C1314 + C48250 * C1327) * C47983 +
                                 (C113 * C1300 + C48250 * C1315) * C1160) *
                                    C107) *
                                   C48235 * C48376 +
                               (((C113 * C1301 + C48250 * C1316) * C1160 +
                                 (C113 * C1317 + C48250 * C1328) * C47983) *
                                    C107 +
                                ((C113 * C1302 + C48250 * C1318) * C1160 +
                                 (C113 * C1319 + C48250 * C1329) * C47983) *
                                    C108 +
                                ((C113 * C1303 + C48250 * C1320) * C1160 +
                                 (C113 * C1321 + C48250 * C1330) * C47983) *
                                    C109) *
                                   C48235 * C48350) *
                                  C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C1089 +
            (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
            C169 * C48370 + C170 * C1091 + C171 * C48339) *
               C107 +
           (C168 * C1089 + C169 * C48383 - C170 * C1090 - C171 * C48370 +
            C172 * C1091 + C173 * C48339) *
               C108 +
           (C170 * C1089 + C171 * C48383 - C172 * C1090 - C173 * C48370 +
            C174 * C1091 + C175 * C48339) *
               C109) *
              C48235 * C1835 +
          ((C550 * C1090 -
            ((C113 * C496 + C48250 * C515) * C48383 +
             (C113 * C486 + C48250 * C497) * C1089) +
            C551 * C48370 - C552 * C1091 - C553 * C48339) *
               C107 +
           (C552 * C1090 - (C551 * C48383 + C550 * C1089) + C553 * C48370 -
            C554 * C1091 - C555 * C48339) *
               C108 +
           (C554 * C1090 - (C553 * C48383 + C552 * C1089) + C555 * C48370 -
            C788 * C1091 - C789 * C48339) *
               C109) *
              C48235 * C1836 +
          (((C113 * C490 + C48250 * C505) * C1089 +
            (C113 * C506 + C48250 * C520) * C48383 - C556 * C1090 -
            C557 * C48370 + C558 * C1091 + C559 * C48339) *
               C107 +
           (C556 * C1089 + C557 * C48383 - C558 * C1090 - C559 * C48370 +
            C560 * C1091 + C561 * C48339) *
               C108 +
           (C558 * C1089 + C559 * C48383 - C560 * C1090 - C561 * C48370 +
            (C113 * C494 + C48250 * C513) * C1091 +
            (C113 * C514 + C48250 * C524) * C48339) *
               C109) *
              C48235 * C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) * (((((C113 * C119 + C48250 * C126) * C1160 +
                                 (C113 * C127 + C48250 * C140) * C47983) *
                                    C107 +
                                (C168 * C1160 + C169 * C47983) * C108 +
                                (C170 * C1160 + C171 * C47983) * C109) *
                                   C48235 * C1835 -
                               ((C553 * C47983 + C552 * C1160) * C109 +
                                (C551 * C47983 + C550 * C1160) * C108 +
                                ((C113 * C496 + C48250 * C515) * C47983 +
                                 (C113 * C486 + C48250 * C497) * C1160) *
                                    C107) *
                                   C48235 * C1836 +
                               (((C113 * C490 + C48250 * C505) * C1160 +
                                 (C113 * C506 + C48250 * C520) * C47983) *
                                    C107 +
                                (C556 * C1160 + C557 * C47983) * C108 +
                                (C558 * C1160 + C559 * C47983) * C109) *
                                   C48235 * C48350) *
                                  C48386 +
                              ((((C113 * C935 + C48250 * C940) * C1160 +
                                 (C113 * C941 + C48250 * C950) * C47983) *
                                    C107 +
                                (C968 * C1160 + C969 * C47983) * C108 +
                                (C970 * C1160 + C971 * C47983) * C109) *
                                   C48235 * C1836 -
                               ((C364 * C47983 + C363 * C1160) * C109 +
                                (C362 * C47983 + C361 * C1160) * C108 +
                                ((C113 * C307 + C48250 * C326) * C47983 +
                                 (C113 * C297 + C48250 * C308) * C1160) *
                                    C107) *
                                   C48235 * C1835 -
                               (((C113 * C1304 + C48250 * C1322) * C47983 +
                                 (C113 * C1295 + C48250 * C1305) * C1160) *
                                    C109 +
                                ((C113 * C1306 + C48250 * C1323) * C47983 +
                                 (C113 * C1296 + C48250 * C1307) * C1160) *
                                    C108 +
                                ((C113 * C1308 + C48250 * C1324) * C47983 +
                                 (C113 * C1297 + C48250 * C1309) * C1160) *
                                    C107) *
                                   C48235 * C48350) *
                                  C48374 +
                              ((((C113 * C301 + C48250 * C316) * C1160 +
                                 (C113 * C317 + C48250 * C331) * C47983) *
                                    C107 +
                                (C367 * C1160 + C368 * C47983) * C108 +
                                (C369 * C1160 + C370 * C47983) * C109) *
                                   C48235 * C1835 -
                               ((C1615 * C47983 + C1614 * C1160) * C109 +
                                (C1613 * C47983 + C1612 * C1160) * C108 +
                                ((C113 * C1314 + C48250 * C1327) * C47983 +
                                 (C113 * C1300 + C48250 * C1315) * C1160) *
                                    C107) *
                                   C48235 * C1836 +
                               (((C113 * C1301 + C48250 * C1316) * C1160 +
                                 (C113 * C1317 + C48250 * C1328) * C47983) *
                                    C107 +
                                ((C113 * C1302 + C48250 * C1318) * C1160 +
                                 (C113 * C1319 + C48250 * C1329) * C47983) *
                                    C108 +
                                ((C113 * C1303 + C48250 * C1320) * C1160 +
                                 (C113 * C1321 + C48250 * C1330) * C47983) *
                                    C109) *
                                   C48235 * C48350) *
                                  C48347)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C1160 +
            (C113 * C127 + C48250 * C140) * C47983) *
               C107 +
           (C168 * C1160 + C169 * C47983) * C108 +
           (C170 * C1160 + C171 * C47983) * C109) *
              C48235 * C2010 -
          ((C553 * C47983 + C552 * C1160) * C109 +
           (C551 * C47983 + C550 * C1160) * C108 +
           ((C113 * C496 + C48250 * C515) * C47983 +
            (C113 * C486 + C48250 * C497) * C1160) *
               C107) *
              C48235 * C2011 +
          (((C113 * C490 + C48250 * C505) * C1160 +
            (C113 * C506 + C48250 * C520) * C47983) *
               C107 +
           (C556 * C1160 + C557 * C47983) * C108 +
           (C558 * C1160 + C559 * C47983) * C109) *
              C48235 * C2012 -
          (((C113 * C2021 + C48250 * C2033) * C47983 +
            (C113 * C2015 + C48250 * C2022) * C1160) *
               C109 +
           ((C113 * C2023 + C48250 * C2034) * C47983 +
            (C113 * C2016 + C48250 * C2024) * C1160) *
               C108 +
           ((C113 * C2025 + C48250 * C2035) * C47983 +
            (C113 * C2017 + C48250 * C2026) * C1160) *
               C107) *
              C48235 * C2013 +
          (((C113 * C2018 + C48250 * C2027) * C1160 +
            (C113 * C2028 + C48250 * C2036) * C47983) *
               C107 +
           ((C113 * C2019 + C48250 * C2029) * C1160 +
            (C113 * C2030 + C48250 * C2037) * C47983) *
               C108 +
           ((C113 * C2020 + C48250 * C2031) * C1160 +
            (C113 * C2032 + C48250 * C2038) * C47983) *
               C109) *
              C48235 * C2014) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C47001 +
             (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
             C169 * C47993) *
                C107 +
            (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                C108 +
            (C170 * C47001 + C171 * C48298 - C172 * C46982 - C173 * C47993) *
                C109) *
               C48235 * C48316 +
           ((C550 * C46982 -
             ((C113 * C496 + C48250 * C515) * C48298 +
              (C113 * C486 + C48250 * C497) * C47001) +
             C551 * C47993) *
                C107 +
            (C552 * C46982 - (C551 * C48298 + C550 * C47001) + C553 * C47993) *
                C108 +
            (C554 * C46982 - (C553 * C48298 + C552 * C47001) + C555 * C47993) *
                C109) *
               C48235 * C48134) *
              C1086 +
          (((C361 * C46982 -
             ((C113 * C307 + C48250 * C326) * C48298 +
              (C113 * C297 + C48250 * C308) * C47001) +
             C362 * C47993) *
                C107 +
            (C363 * C46982 - (C362 * C48298 + C361 * C47001) + C364 * C47993) *
                C108 +
            (C365 * C46982 - (C364 * C48298 + C363 * C47001) + C366 * C47993) *
                C109) *
               C48235 * C48316 +
           (((C113 * C935 + C48250 * C940) * C47001 +
             (C113 * C941 + C48250 * C950) * C48298 - C968 * C46982 -
             C969 * C47993) *
                C107 +
            (C968 * C47001 + C969 * C48298 - C970 * C46982 - C971 * C47993) *
                C108 +
            (C970 * C47001 + C971 * C48298 - C972 * C46982 - C973 * C47993) *
                C109) *
               C48235 * C48134) *
              C1087 +
          ((((C113 * C301 + C48250 * C316) * C47001 +
             (C113 * C317 + C48250 * C331) * C48298 - C367 * C46982 -
             C368 * C47993) *
                C107 +
            (C367 * C47001 + C368 * C48298 - C369 * C46982 - C370 * C47993) *
                C108 +
            (C369 * C47001 + C370 * C48298 - C371 * C46982 - C372 * C47993) *
                C109) *
               C48235 * C48316 +
           ((C1612 * C46982 -
             ((C113 * C1314 + C48250 * C1327) * C48298 +
              (C113 * C1300 + C48250 * C1315) * C47001) +
             C1613 * C47993) *
                C107 +
            (C1614 * C46982 - (C1613 * C48298 + C1612 * C47001) +
             C1615 * C47993) *
                C108 +
            ((C113 * C1599 + C48250 * C1600) * C46982 -
             (C1615 * C48298 + C1614 * C47001) +
             (C113 * C1601 + C48250 * C1602) * C47993) *
                C109) *
               C48235 * C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C665 +
            (C113 * C127 + C48250 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48351) *
               C107 +
           (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
            C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48351) *
               C108 +
           (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
            C174 * C667 + C175 * C661 - C176 * C668 - C177 * C48351) *
               C109) *
              C48235 * C48316 +
          ((C550 * C666 -
            ((C113 * C496 + C48250 * C515) * C659 +
             (C113 * C486 + C48250 * C497) * C665) +
            C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
            C555 * C48351) *
               C107 +
           (C552 * C666 - (C551 * C659 + C550 * C665) + C553 * C660 -
            C554 * C667 - C555 * C661 + C788 * C668 + C789 * C48351) *
               C108 +
           (C554 * C666 - (C553 * C659 + C552 * C665) + C555 * C660 -
            C788 * C667 - C789 * C661 + (C113 * C779 + C48250 * C780) * C668 +
            (C113 * C781 + C48250 * C782) * C48351) *
               C109) *
              C48235 * C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C47001 +
            (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
            C169 * C47993) *
               C107 +
           (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
               C108 +
           (C170 * C47001 + C171 * C48298 - C172 * C46982 - C173 * C47993) *
               C109) *
              C48235 * C2299 +
          ((C550 * C46982 -
            ((C113 * C496 + C48250 * C515) * C48298 +
             (C113 * C486 + C48250 * C497) * C47001) +
            C551 * C47993) *
               C107 +
           (C552 * C46982 - (C551 * C48298 + C550 * C47001) + C553 * C47993) *
               C108 +
           (C554 * C46982 - (C553 * C48298 + C552 * C47001) + C555 * C47993) *
               C109) *
              C48235 * C2300 +
          (((C113 * C490 + C48250 * C505) * C47001 +
            (C113 * C506 + C48250 * C520) * C48298 - C556 * C46982 -
            C557 * C47993) *
               C107 +
           (C556 * C47001 + C557 * C48298 - C558 * C46982 - C559 * C47993) *
               C108 +
           (C558 * C47001 + C559 * C48298 - C560 * C46982 - C561 * C47993) *
               C109) *
              C48235 * C2301 +
          ((C2316 * C46982 -
            ((C113 * C2025 + C48250 * C2035) * C48298 +
             (C113 * C2017 + C48250 * C2026) * C47001) +
            C2317 * C47993) *
               C107 +
           (C2318 * C46982 - (C2317 * C48298 + C2316 * C47001) +
            C2319 * C47993) *
               C108 +
           ((C113 * C2303 + C48250 * C2304) * C46982 -
            (C2319 * C48298 + C2318 * C47001) +
            (C113 * C2305 + C48250 * C2306) * C47993) *
               C109) *
              C48235 * C48363) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[14] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48250 * C126) * C293 +
                    (C113 * C127 + C48250 * C140) * C287 - C168 * C294 -
                    C169 * C288 + C170 * C295 + C171 * C48339) *
                       C107 +
                   (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                    C172 * C295 + C173 * C48339) *
                       C108 +
                   (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                    C174 * C295 + C175 * C48339) *
                       C109) *
                      C48235 * C48047 * C48386 +
                  ((C361 * C294 -
                    ((C113 * C307 + C48250 * C326) * C287 +
                     (C113 * C297 + C48250 * C308) * C293) +
                    C362 * C288 - C363 * C295 - C364 * C48339) *
                       C107 +
                   (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                    C365 * C295 - C366 * C48339) *
                       C108 +
                   (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                    (C113 * C300 + C48250 * C314) * C295 -
                    (C113 * C315 + C48250 * C330) * C48339) *
                       C109) *
                      C48235 * C48047 * C48374 +
                  (((C113 * C301 + C48250 * C316) * C293 +
                    (C113 * C317 + C48250 * C331) * C287 - C367 * C294 -
                    C368 * C288 + C369 * C295 + C370 * C48339) *
                       C107 +
                   (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                    C371 * C295 + C372 * C48339) *
                       C108 +
                   (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
                    (C113 * C305 + C48250 * C324) * C295 +
                    (C113 * C325 + C48250 * C335) * C48339) *
                       C109) *
                      C48235 * C48047 * C48347)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C119 + C48250 * C126) * C114 +
                   (C113 * C127 + C48250 * C140) * C102 - C168 * C115 -
                   C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                   C173 * C105 + C174 * C118 + C175 * C106) *
                      C107 +
                  (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
                   C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
                   C176 * C118 + C177 * C106) *
                      C108 +
                  (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 +
                   C174 * C116 + C175 * C104 - C176 * C117 - C177 * C105 +
                   (C113 * C125 + C48250 * C138) * C118 +
                   (C113 * C139 + C48250 * C146) * C106) *
                      C109) *
                 C48235 * C48047 * C48035) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48250 * C126) * C1089 +
                    (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
                    C169 * C48370 + C170 * C1091 + C171 * C48339) *
                       C107 +
                   (C168 * C1089 + C169 * C48383 - C170 * C1090 -
                    C171 * C48370 + C172 * C1091 + C173 * C48339) *
                       C108 +
                   (C170 * C1089 + C171 * C48383 - C172 * C1090 -
                    C173 * C48370 + C174 * C1091 + C175 * C48339) *
                       C109) *
                      C48235 * C48047 * C1086 +
                  ((C361 * C1090 -
                    ((C113 * C307 + C48250 * C326) * C48383 +
                     (C113 * C297 + C48250 * C308) * C1089) +
                    C362 * C48370 - C363 * C1091 - C364 * C48339) *
                       C107 +
                   (C363 * C1090 - (C362 * C48383 + C361 * C1089) +
                    C364 * C48370 - C365 * C1091 - C366 * C48339) *
                       C108 +
                   (C365 * C1090 - (C364 * C48383 + C363 * C1089) +
                    C366 * C48370 - C678 * C1091 - C679 * C48339) *
                       C109) *
                      C48235 * C48047 * C1087 +
                  (((C113 * C301 + C48250 * C316) * C1089 +
                    (C113 * C317 + C48250 * C331) * C48383 - C367 * C1090 -
                    C368 * C48370 + C369 * C1091 + C370 * C48339) *
                       C107 +
                   (C367 * C1089 + C368 * C48383 - C369 * C1090 -
                    C370 * C48370 + C371 * C1091 + C372 * C48339) *
                       C108 +
                   (C369 * C1089 + C370 * C48383 - C371 * C1090 -
                    C372 * C48370 + (C113 * C305 + C48250 * C324) * C1091 +
                    (C113 * C325 + C48250 * C335) * C48339) *
                       C109) *
                      C48235 * C48047 * C48347)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48250 * C126) * C1160 +
                    (C113 * C127 + C48250 * C140) * C47983) *
                       C107 +
                   (C168 * C1160 + C169 * C47983) * C108 +
                   (C170 * C1160 + C171 * C47983) * C109) *
                      C48235 * C48047 * C1155 -
                  ((C364 * C47983 + C363 * C1160) * C109 +
                   (C362 * C47983 + C361 * C1160) * C108 +
                   ((C113 * C307 + C48250 * C326) * C47983 +
                    (C113 * C297 + C48250 * C308) * C1160) *
                       C107) *
                      C48235 * C48047 * C1156 +
                  (((C113 * C301 + C48250 * C316) * C1160 +
                    (C113 * C317 + C48250 * C331) * C47983) *
                       C107 +
                   (C367 * C1160 + C368 * C47983) * C108 +
                   (C369 * C1160 + C370 * C47983) * C109) *
                      C48235 * C48047 * C1157 -
                  (((C113 * C1167 + C48250 * C1179) * C47983 +
                    (C113 * C1161 + C48250 * C1168) * C1160) *
                       C109 +
                   ((C113 * C1169 + C48250 * C1180) * C47983 +
                    (C113 * C1162 + C48250 * C1170) * C1160) *
                       C108 +
                   ((C113 * C1171 + C48250 * C1181) * C47983 +
                    (C113 * C1163 + C48250 * C1172) * C1160) *
                       C107) *
                      C48235 * C48047 * C1158 +
                  (((C113 * C1164 + C48250 * C1173) * C1160 +
                    (C113 * C1174 + C48250 * C1182) * C47983) *
                       C107 +
                   ((C113 * C1165 + C48250 * C1175) * C1160 +
                    (C113 * C1176 + C48250 * C1183) * C47983) *
                       C108 +
                   ((C113 * C1166 + C48250 * C1177) * C1160 +
                    (C113 * C1178 + C48250 * C1184) * C47983) *
                       C109) *
                      C48235 * C48047 * C1159)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48250 * C126) * C1089 +
                    (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
                    C169 * C48370 + C170 * C1091 + C171 * C48339) *
                       C107 +
                   (C168 * C1089 + C169 * C48383 - C170 * C1090 -
                    C171 * C48370 + C172 * C1091 + C173 * C48339) *
                       C108 +
                   (C170 * C1089 + C171 * C48383 - C172 * C1090 -
                    C173 * C48370 + C174 * C1091 + C175 * C48339) *
                       C109) *
                      C48235 * C1835 +
                  ((C550 * C1090 -
                    ((C113 * C496 + C48250 * C515) * C48383 +
                     (C113 * C486 + C48250 * C497) * C1089) +
                    C551 * C48370 - C552 * C1091 - C553 * C48339) *
                       C107 +
                   (C552 * C1090 - (C551 * C48383 + C550 * C1089) +
                    C553 * C48370 - C554 * C1091 - C555 * C48339) *
                       C108 +
                   (C554 * C1090 - (C553 * C48383 + C552 * C1089) +
                    C555 * C48370 - C788 * C1091 - C789 * C48339) *
                       C109) *
                      C48235 * C1836 +
                  (((C113 * C490 + C48250 * C505) * C1089 +
                    (C113 * C506 + C48250 * C520) * C48383 - C556 * C1090 -
                    C557 * C48370 + C558 * C1091 + C559 * C48339) *
                       C107 +
                   (C556 * C1089 + C557 * C48383 - C558 * C1090 -
                    C559 * C48370 + C560 * C1091 + C561 * C48339) *
                       C108 +
                   (C558 * C1089 + C559 * C48383 - C560 * C1090 -
                    C561 * C48370 + (C113 * C494 + C48250 * C513) * C1091 +
                    (C113 * C514 + C48250 * C524) * C48339) *
                       C109) *
                      C48235 * C48350) *
                 C48035) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48250 * C126) * C1160 +
                     (C113 * C127 + C48250 * C140) * C47983) *
                        C107 +
                    (C168 * C1160 + C169 * C47983) * C108 +
                    (C170 * C1160 + C171 * C47983) * C109) *
                       C48235 * C1835 -
                   ((C553 * C47983 + C552 * C1160) * C109 +
                    (C551 * C47983 + C550 * C1160) * C108 +
                    ((C113 * C496 + C48250 * C515) * C47983 +
                     (C113 * C486 + C48250 * C497) * C1160) *
                        C107) *
                       C48235 * C1836 +
                   (((C113 * C490 + C48250 * C505) * C1160 +
                     (C113 * C506 + C48250 * C520) * C47983) *
                        C107 +
                    (C556 * C1160 + C557 * C47983) * C108 +
                    (C558 * C1160 + C559 * C47983) * C109) *
                       C48235 * C48350) *
                      C48386 +
                  ((((C113 * C935 + C48250 * C940) * C1160 +
                     (C113 * C941 + C48250 * C950) * C47983) *
                        C107 +
                    (C968 * C1160 + C969 * C47983) * C108 +
                    (C970 * C1160 + C971 * C47983) * C109) *
                       C48235 * C1836 -
                   ((C364 * C47983 + C363 * C1160) * C109 +
                    (C362 * C47983 + C361 * C1160) * C108 +
                    ((C113 * C307 + C48250 * C326) * C47983 +
                     (C113 * C297 + C48250 * C308) * C1160) *
                        C107) *
                       C48235 * C1835 -
                   (((C113 * C1304 + C48250 * C1322) * C47983 +
                     (C113 * C1295 + C48250 * C1305) * C1160) *
                        C109 +
                    ((C113 * C1306 + C48250 * C1323) * C47983 +
                     (C113 * C1296 + C48250 * C1307) * C1160) *
                        C108 +
                    ((C113 * C1308 + C48250 * C1324) * C47983 +
                     (C113 * C1297 + C48250 * C1309) * C1160) *
                        C107) *
                       C48235 * C48350) *
                      C48374 +
                  ((((C113 * C301 + C48250 * C316) * C1160 +
                     (C113 * C317 + C48250 * C331) * C47983) *
                        C107 +
                    (C367 * C1160 + C368 * C47983) * C108 +
                    (C369 * C1160 + C370 * C47983) * C109) *
                       C48235 * C1835 -
                   ((C1615 * C47983 + C1614 * C1160) * C109 +
                    (C1613 * C47983 + C1612 * C1160) * C108 +
                    ((C113 * C1314 + C48250 * C1327) * C47983 +
                     (C113 * C1300 + C48250 * C1315) * C1160) *
                        C107) *
                       C48235 * C1836 +
                   (((C113 * C1301 + C48250 * C1316) * C1160 +
                     (C113 * C1317 + C48250 * C1328) * C47983) *
                        C107 +
                    ((C113 * C1302 + C48250 * C1318) * C1160 +
                     (C113 * C1319 + C48250 * C1329) * C47983) *
                        C108 +
                    ((C113 * C1303 + C48250 * C1320) * C1160 +
                     (C113 * C1321 + C48250 * C1330) * C47983) *
                        C109) *
                       C48235 * C48350) *
                      C48347)) /
                    (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48250 * C126) * C47011 +
                     (C113 * C127 + C48250 * C140) * C47988 - C168 * C47007 -
                     C169 * C47996 + C170 * C47017 + C171 * C2901) *
                        C107 +
                    (C168 * C47011 + C169 * C47988 - C170 * C47007 -
                     C171 * C47996 + C172 * C47017 + C173 * C2901) *
                        C108 +
                    (C170 * C47011 + C171 * C47988 - C172 * C47007 -
                     C173 * C47996 + C174 * C47017 + C175 * C2901) *
                        C109) *
                       C48235 * C3298 +
                   ((C550 * C47007 -
                     ((C113 * C496 + C48250 * C515) * C47988 +
                      (C113 * C486 + C48250 * C497) * C47011) +
                     C551 * C47996 - C552 * C47017 - C553 * C2901) *
                        C107 +
                    (C552 * C47007 - (C551 * C47988 + C550 * C47011) +
                     C553 * C47996 - C554 * C47017 - C555 * C2901) *
                        C108 +
                    (C554 * C47007 - (C553 * C47988 + C552 * C47011) +
                     C555 * C47996 - C788 * C47017 - C789 * C2901) *
                        C109) *
                       C48235 * C48134) *
                      C48315 +
                  (((C361 * C47007 -
                     ((C113 * C307 + C48250 * C326) * C47988 +
                      (C113 * C297 + C48250 * C308) * C47011) +
                     C362 * C47996 - C363 * C47017 - C364 * C2901) *
                        C107 +
                    (C363 * C47007 - (C362 * C47988 + C361 * C47011) +
                     C364 * C47996 - C365 * C47017 - C366 * C2901) *
                        C108 +
                    (C365 * C47007 - (C364 * C47988 + C363 * C47011) +
                     C366 * C47996 - C678 * C47017 - C679 * C2901) *
                        C109) *
                       C48235 * C3298 +
                   (((C113 * C935 + C48250 * C940) * C47011 +
                     (C113 * C941 + C48250 * C950) * C47988 - C968 * C47007 -
                     C969 * C47996 + C970 * C47017 + C971 * C2901) *
                        C107 +
                    (C968 * C47011 + C969 * C47988 - C970 * C47007 -
                     C971 * C47996 + C972 * C47017 + C973 * C2901) *
                        C108 +
                    (C970 * C47011 + C971 * C47988 - C972 * C47007 -
                     C973 * C47996 + (C113 * C939 + C48250 * C948) * C47017 +
                     (C113 * C949 + C48250 * C954) * C2901) *
                        C109) *
                       C48235 * C48134) *
                      C48094)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2641 +
             (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
             C169 * C47993) *
                C107 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                C108 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C47993) *
                C109) *
               C48235 * C48130 +
           ((C550 * C2642 -
             ((C113 * C496 + C48250 * C515) * C2635 +
              (C113 * C486 + C48250 * C497) * C2641) +
             C551 * C47993) *
                C107 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47993) *
                C108 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C47993) *
                C109) *
               C48235 * C48137 +
           (((C113 * C490 + C48250 * C505) * C2641 +
             (C113 * C506 + C48250 * C520) * C2635 - C556 * C2642 -
             C557 * C47993) *
                C107 +
            (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C47993) *
                C108 +
            (C558 * C2641 + C559 * C2635 - C560 * C2642 - C561 * C47993) *
                C109) *
               C48235 * C3806) *
              C48315 +
          (((C361 * C2642 -
             ((C113 * C307 + C48250 * C326) * C2635 +
              (C113 * C297 + C48250 * C308) * C2641) +
             C362 * C47993) *
                C107 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47993) *
                C108 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C47993) *
                C109) *
               C48235 * C48130 +
           (((C113 * C935 + C48250 * C940) * C2641 +
             (C113 * C941 + C48250 * C950) * C2635 - C968 * C2642 -
             C969 * C47993) *
                C107 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C47993) *
                C108 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C47993) *
                C109) *
               C48235 * C48137 +
           ((C2198 * C2642 -
             ((C113 * C1308 + C48250 * C1324) * C2635 +
              (C113 * C1297 + C48250 * C1309) * C2641) +
             C2199 * C47993) *
                C107 +
            (C2200 * C2642 - (C2199 * C2635 + C2198 * C2641) + C2201 * C47993) *
                C108 +
            ((C113 * C2185 + C48250 * C2186) * C2642 -
             (C2201 * C2635 + C2200 * C2641) +
             (C113 * C2187 + C48250 * C2188) * C47993) *
                C109) *
               C48235 * C3806) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2641 +
             (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
             C169 * C47993) *
                C107 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                C108 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C47993) *
                C109) *
               C48235 * C3298 +
           ((C550 * C2642 -
             ((C113 * C496 + C48250 * C515) * C2635 +
              (C113 * C486 + C48250 * C497) * C2641) +
             C551 * C47993) *
                C107 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47993) *
                C108 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C47993) *
                C109) *
               C48235 * C48134) *
              C48386 +
          (((C361 * C2642 -
             ((C113 * C307 + C48250 * C326) * C2635 +
              (C113 * C297 + C48250 * C308) * C2641) +
             C362 * C47993) *
                C107 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47993) *
                C108 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C47993) *
                C109) *
               C48235 * C3298 +
           (((C113 * C935 + C48250 * C940) * C2641 +
             (C113 * C941 + C48250 * C950) * C2635 - C968 * C2642 -
             C969 * C47993) *
                C107 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C47993) *
                C108 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C47993) *
                C109) *
               C48235 * C48134) *
              C48374 +
          ((((C113 * C301 + C48250 * C316) * C2641 +
             (C113 * C317 + C48250 * C331) * C2635 - C367 * C2642 -
             C368 * C47993) *
                C107 +
            (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C47993) *
                C108 +
            (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C47993) *
                C109) *
               C48235 * C3298 +
           ((C1612 * C2642 -
             ((C113 * C1314 + C48250 * C1327) * C2635 +
              (C113 * C1300 + C48250 * C1315) * C2641) +
             C1613 * C47993) *
                C107 +
            (C1614 * C2642 - (C1613 * C2635 + C1612 * C2641) + C1615 * C47993) *
                C108 +
            ((C113 * C1599 + C48250 * C1600) * C2642 -
             (C1615 * C2635 + C1614 * C2641) +
             (C113 * C1601 + C48250 * C1602) * C47993) *
                C109) *
               C48235 * C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C2533 +
            (C113 * C127 + C48250 * C140) * C48392 - C168 * C2534 -
            C169 * C48385 + C170 * C2535 + C171 * C48372 - C172 * C2536 -
            C173 * C48351) *
               C107 +
           (C168 * C2533 + C169 * C48392 - C170 * C2534 - C171 * C48385 +
            C172 * C2535 + C173 * C48372 - C174 * C2536 - C175 * C48351) *
               C108 +
           (C170 * C2533 + C171 * C48392 - C172 * C2534 - C173 * C48385 +
            C174 * C2535 + C175 * C48372 - C176 * C2536 - C177 * C48351) *
               C109) *
              C48235 * C3298 +
          ((C550 * C2534 -
            ((C113 * C496 + C48250 * C515) * C48392 +
             (C113 * C486 + C48250 * C497) * C2533) +
            C551 * C48385 - C552 * C2535 - C553 * C48372 + C554 * C2536 +
            C555 * C48351) *
               C107 +
           (C552 * C2534 - (C551 * C48392 + C550 * C2533) + C553 * C48385 -
            C554 * C2535 - C555 * C48372 + C788 * C2536 + C789 * C48351) *
               C108 +
           (C554 * C2534 - (C553 * C48392 + C552 * C2533) + C555 * C48385 -
            C788 * C2535 - C789 * C48372 +
            (C113 * C779 + C48250 * C780) * C2536 +
            (C113 * C781 + C48250 * C782) * C48351) *
               C109) *
              C48235 * C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C2641 +
            (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
            C169 * C47993) *
               C107 +
           (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) * C108 +
           (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C47993) *
               C109) *
              C48235 * C48394 +
          ((C550 * C2642 -
            ((C113 * C496 + C48250 * C515) * C2635 +
             (C113 * C486 + C48250 * C497) * C2641) +
            C551 * C47993) *
               C107 +
           (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47993) *
               C108 +
           (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C47993) *
               C109) *
              C48235 * C48391 +
          (((C113 * C490 + C48250 * C505) * C2641 +
            (C113 * C506 + C48250 * C520) * C2635 - C556 * C2642 -
            C557 * C47993) *
               C107 +
           (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C47993) * C108 +
           (C558 * C2641 + C559 * C2635 - C560 * C2642 - C561 * C47993) *
               C109) *
              C48235 * C48382 +
          ((C2316 * C2642 -
            ((C113 * C2025 + C48250 * C2035) * C2635 +
             (C113 * C2017 + C48250 * C2026) * C2641) +
            C2317 * C47993) *
               C107 +
           (C2318 * C2642 - (C2317 * C2635 + C2316 * C2641) + C2319 * C47993) *
               C108 +
           ((C113 * C2303 + C48250 * C2304) * C2642 -
            (C2319 * C2635 + C2318 * C2641) +
            (C113 * C2305 + C48250 * C2306) * C47993) *
               C109) *
              C48235 * C48363) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48250 * C126) * C47011 +
                    (C113 * C127 + C48250 * C140) * C47988 - C168 * C47007 -
                    C169 * C47996 + C170 * C47017 + C171 * C2901) *
                       C107 +
                   (C168 * C47011 + C169 * C47988 - C170 * C47007 -
                    C171 * C47996 + C172 * C47017 + C173 * C2901) *
                       C108 +
                   (C170 * C47011 + C171 * C47988 - C172 * C47007 -
                    C173 * C47996 + C174 * C47017 + C175 * C2901) *
                       C109) *
                      C48235 * C48130 +
                  ((C550 * C47007 -
                    ((C113 * C496 + C48250 * C515) * C47988 +
                     (C113 * C486 + C48250 * C497) * C47011) +
                    C551 * C47996 - C552 * C47017 - C553 * C2901) *
                       C107 +
                   (C552 * C47007 - (C551 * C47988 + C550 * C47011) +
                    C553 * C47996 - C554 * C47017 - C555 * C2901) *
                       C108 +
                   (C554 * C47007 - (C553 * C47988 + C552 * C47011) +
                    C555 * C47996 - C788 * C47017 - C789 * C2901) *
                       C109) *
                      C48235 * C48137 +
                  (((C113 * C490 + C48250 * C505) * C47011 +
                    (C113 * C506 + C48250 * C520) * C47988 - C556 * C47007 -
                    C557 * C47996 + C558 * C47017 + C559 * C2901) *
                       C107 +
                   (C556 * C47011 + C557 * C47988 - C558 * C47007 -
                    C559 * C47996 + C560 * C47017 + C561 * C2901) *
                       C108 +
                   (C558 * C47011 + C559 * C47988 - C560 * C47007 -
                    C561 * C47996 + (C113 * C494 + C48250 * C513) * C47017 +
                    (C113 * C514 + C48250 * C524) * C2901) *
                       C109) *
                      C48235 * C3806) *
                 C48035) /
                (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C2533 +
            (C113 * C127 + C48250 * C140) * C48392 - C168 * C2534 -
            C169 * C48385 + C170 * C2535 + C171 * C48372 - C172 * C2536 -
            C173 * C48351) *
               C107 +
           (C168 * C2533 + C169 * C48392 - C170 * C2534 - C171 * C48385 +
            C172 * C2535 + C173 * C48372 - C174 * C2536 - C175 * C48351) *
               C108 +
           (C170 * C2533 + C171 * C48392 - C172 * C2534 - C173 * C48385 +
            C174 * C2535 + C175 * C48372 - C176 * C2536 - C177 * C48351) *
               C109) *
              C48235 * C3298 +
          ((C550 * C2534 -
            ((C113 * C496 + C48250 * C515) * C48392 +
             (C113 * C486 + C48250 * C497) * C2533) +
            C551 * C48385 - C552 * C2535 - C553 * C48372 + C554 * C2536 +
            C555 * C48351) *
               C107 +
           (C552 * C2534 - (C551 * C48392 + C550 * C2533) + C553 * C48385 -
            C554 * C2535 - C555 * C48372 + C788 * C2536 + C789 * C48351) *
               C108 +
           (C554 * C2534 - (C553 * C48392 + C552 * C2533) + C555 * C48385 -
            C788 * C2535 - C789 * C48372 +
            (C113 * C779 + C48250 * C780) * C2536 +
            (C113 * C781 + C48250 * C782) * C48351) *
               C109) *
              C48235 * C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2641 +
             (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
             C169 * C47993) *
                C107 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                C108 +
            (C170 * C2641 + C171 * C2635 - C172 * C2642 - C173 * C47993) *
                C109) *
               C48235 * C3298 +
           ((C550 * C2642 -
             ((C113 * C496 + C48250 * C515) * C2635 +
              (C113 * C486 + C48250 * C497) * C2641) +
             C551 * C47993) *
                C107 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47993) *
                C108 +
            (C554 * C2642 - (C553 * C2635 + C552 * C2641) + C555 * C47993) *
                C109) *
               C48235 * C48134) *
              C48386 +
          (((C361 * C2642 -
             ((C113 * C307 + C48250 * C326) * C2635 +
              (C113 * C297 + C48250 * C308) * C2641) +
             C362 * C47993) *
                C107 +
            (C363 * C2642 - (C362 * C2635 + C361 * C2641) + C364 * C47993) *
                C108 +
            (C365 * C2642 - (C364 * C2635 + C363 * C2641) + C366 * C47993) *
                C109) *
               C48235 * C3298 +
           (((C113 * C935 + C48250 * C940) * C2641 +
             (C113 * C941 + C48250 * C950) * C2635 - C968 * C2642 -
             C969 * C47993) *
                C107 +
            (C968 * C2641 + C969 * C2635 - C970 * C2642 - C971 * C47993) *
                C108 +
            (C970 * C2641 + C971 * C2635 - C972 * C2642 - C973 * C47993) *
                C109) *
               C48235 * C48134) *
              C48374 +
          ((((C113 * C301 + C48250 * C316) * C2641 +
             (C113 * C317 + C48250 * C331) * C2635 - C367 * C2642 -
             C368 * C47993) *
                C107 +
            (C367 * C2641 + C368 * C2635 - C369 * C2642 - C370 * C47993) *
                C108 +
            (C369 * C2641 + C370 * C2635 - C371 * C2642 - C372 * C47993) *
                C109) *
               C48235 * C3298 +
           ((C1612 * C2642 -
             ((C113 * C1314 + C48250 * C1327) * C2635 +
              (C113 * C1300 + C48250 * C1315) * C2641) +
             C1613 * C47993) *
                C107 +
            (C1614 * C2642 - (C1613 * C2635 + C1612 * C2641) + C1615 * C47993) *
                C108 +
            ((C113 * C1599 + C48250 * C1600) * C2642 -
             (C1615 * C2635 + C1614 * C2641) +
             (C113 * C1601 + C48250 * C1602) * C47993) *
                C109) *
               C48235 * C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C665 +
            (C113 * C127 + C48250 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48351) *
               C107 +
           (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
            C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48351) *
               C108 +
           (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
            C174 * C667 + C175 * C661 - C176 * C668 - C177 * C48351) *
               C109) *
              C48235 * C48047 * C48315 +
          ((C361 * C666 -
            ((C113 * C307 + C48250 * C326) * C659 +
             (C113 * C297 + C48250 * C308) * C665) +
            C362 * C660 - C363 * C667 - C364 * C661 + C365 * C668 +
            C366 * C48351) *
               C107 +
           (C363 * C666 - (C362 * C659 + C361 * C665) + C364 * C660 -
            C365 * C667 - C366 * C661 + C678 * C668 + C679 * C48351) *
               C108 +
           (C365 * C666 - (C364 * C659 + C363 * C665) + C366 * C660 -
            C678 * C667 - C679 * C661 + (C113 * C669 + C48250 * C670) * C668 +
            (C113 * C671 + C48250 * C672) * C48351) *
               C109) *
              C48235 * C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C47001 +
            (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
            C169 * C47993) *
               C107 +
           (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
               C108 +
           (C170 * C47001 + C171 * C48298 - C172 * C46982 - C173 * C47993) *
               C109) *
              C48235 * C48047 * C1431 +
          ((C361 * C46982 -
            ((C113 * C307 + C48250 * C326) * C48298 +
             (C113 * C297 + C48250 * C308) * C47001) +
            C362 * C47993) *
               C107 +
           (C363 * C46982 - (C362 * C48298 + C361 * C47001) + C364 * C47993) *
               C108 +
           (C365 * C46982 - (C364 * C48298 + C363 * C47001) + C366 * C47993) *
               C109) *
              C48235 * C48047 * C1432 +
          (((C113 * C301 + C48250 * C316) * C47001 +
            (C113 * C317 + C48250 * C331) * C48298 - C367 * C46982 -
            C368 * C47993) *
               C107 +
           (C367 * C47001 + C368 * C48298 - C369 * C46982 - C370 * C47993) *
               C108 +
           (C369 * C47001 + C370 * C48298 - C371 * C46982 - C372 * C47993) *
               C109) *
              C48235 * C48047 * C1433 +
          ((C1450 * C46982 -
            ((C113 * C1171 + C48250 * C1181) * C48298 +
             (C113 * C1163 + C48250 * C1172) * C47001) +
            C1451 * C47993) *
               C107 +
           (C1452 * C46982 - (C1451 * C48298 + C1450 * C47001) +
            C1453 * C47993) *
               C108 +
           ((C113 * C1437 + C48250 * C1438) * C46982 -
            (C1453 * C48298 + C1452 * C47001) +
            (C113 * C1439 + C48250 * C1440) * C47993) *
               C109) *
              C48235 * C48047 * C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48250 * C126) * C293 +
                     (C113 * C127 + C48250 * C140) * C287 - C168 * C294 -
                     C169 * C288 + C170 * C295 + C171 * C48339) *
                        C107 +
                    (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                     C172 * C295 + C173 * C48339) *
                        C108 +
                    (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                     C174 * C295 + C175 * C48339) *
                        C109) *
                       C48235 * C48316 +
                   ((C550 * C294 -
                     ((C113 * C496 + C48250 * C515) * C287 +
                      (C113 * C486 + C48250 * C497) * C293) +
                     C551 * C288 - C552 * C295 - C553 * C48339) *
                        C107 +
                    (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
                     C554 * C295 - C555 * C48339) *
                        C108 +
                    (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
                     C788 * C295 - C789 * C48339) *
                        C109) *
                       C48235 * C48134) *
                      C48315 +
                  (((C361 * C294 -
                     ((C113 * C307 + C48250 * C326) * C287 +
                      (C113 * C297 + C48250 * C308) * C293) +
                     C362 * C288 - C363 * C295 - C364 * C48339) *
                        C107 +
                    (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                     C365 * C295 - C366 * C48339) *
                        C108 +
                    (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                     C678 * C295 - C679 * C48339) *
                        C109) *
                       C48235 * C48316 +
                   (((C113 * C935 + C48250 * C940) * C293 +
                     (C113 * C941 + C48250 * C950) * C287 - C968 * C294 -
                     C969 * C288 + C970 * C295 + C971 * C48339) *
                        C107 +
                    (C968 * C293 + C969 * C287 - C970 * C294 - C971 * C288 +
                     C972 * C295 + C973 * C48339) *
                        C108 +
                    (C970 * C293 + C971 * C287 - C972 * C294 - C973 * C288 +
                     (C113 * C939 + C48250 * C948) * C295 +
                     (C113 * C949 + C48250 * C954) * C48339) *
                        C109) *
                       C48235 * C48134) *
                      C48094)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48250 * C126) * C1160 +
                     (C113 * C127 + C48250 * C140) * C47983) *
                        C107 +
                    (C168 * C1160 + C169 * C47983) * C108 +
                    (C170 * C1160 + C171 * C47983) * C109) *
                       C48235 * C48316 -
                   ((C553 * C47983 + C552 * C1160) * C109 +
                    (C551 * C47983 + C550 * C1160) * C108 +
                    ((C113 * C496 + C48250 * C515) * C47983 +
                     (C113 * C486 + C48250 * C497) * C1160) *
                        C107) *
                       C48235 * C48134) *
                      C1431 +
                  ((((C113 * C935 + C48250 * C940) * C1160 +
                     (C113 * C941 + C48250 * C950) * C47983) *
                        C107 +
                    (C968 * C1160 + C969 * C47983) * C108 +
                    (C970 * C1160 + C971 * C47983) * C109) *
                       C48235 * C48134 -
                   ((C364 * C47983 + C363 * C1160) * C109 +
                    (C362 * C47983 + C361 * C1160) * C108 +
                    ((C113 * C307 + C48250 * C326) * C47983 +
                     (C113 * C297 + C48250 * C308) * C1160) *
                        C107) *
                       C48235 * C48316) *
                      C1432 +
                  ((((C113 * C301 + C48250 * C316) * C1160 +
                     (C113 * C317 + C48250 * C331) * C47983) *
                        C107 +
                    (C367 * C1160 + C368 * C47983) * C108 +
                    (C369 * C1160 + C370 * C47983) * C109) *
                       C48235 * C48316 -
                   ((C1615 * C47983 + C1614 * C1160) * C109 +
                    (C1613 * C47983 + C1612 * C1160) * C108 +
                    ((C113 * C1314 + C48250 * C1327) * C47983 +
                     (C113 * C1300 + C48250 * C1315) * C1160) *
                        C107) *
                       C48235 * C48134) *
                      C1433 +
                  ((((C113 * C1713 + C48250 * C1716) * C1160 +
                     (C113 * C1717 + C48250 * C1722) * C47983) *
                        C107 +
                    ((C113 * C1714 + C48250 * C1718) * C1160 +
                     (C113 * C1719 + C48250 * C1723) * C47983) *
                        C108 +
                    ((C113 * C1715 + C48250 * C1720) * C1160 +
                     (C113 * C1721 + C48250 * C1724) * C47983) *
                        C109) *
                       C48235 * C48134 -
                   ((C1453 * C47983 + C1452 * C1160) * C109 +
                    (C1451 * C47983 + C1450 * C1160) * C108 +
                    ((C113 * C1171 + C48250 * C1181) * C47983 +
                     (C113 * C1163 + C48250 * C1172) * C1160) *
                        C107) *
                       C48235 * C48316) *
                      C48357)) /
                    (p * q * std::sqrt(p + q));
    d2ee[22] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48250 * C126) * C293 +
                    (C113 * C127 + C48250 * C140) * C287 - C168 * C294 -
                    C169 * C288 + C170 * C295 + C171 * C48339) *
                       C107 +
                   (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                    C172 * C295 + C173 * C48339) *
                       C108 +
                   (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                    C174 * C295 + C175 * C48339) *
                       C109) *
                      C48235 * C48047 * C48386 +
                  ((C361 * C294 -
                    ((C113 * C307 + C48250 * C326) * C287 +
                     (C113 * C297 + C48250 * C308) * C293) +
                    C362 * C288 - C363 * C295 - C364 * C48339) *
                       C107 +
                   (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                    C365 * C295 - C366 * C48339) *
                       C108 +
                   (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                    (C113 * C300 + C48250 * C314) * C295 -
                    (C113 * C315 + C48250 * C330) * C48339) *
                       C109) *
                      C48235 * C48047 * C48374 +
                  (((C113 * C301 + C48250 * C316) * C293 +
                    (C113 * C317 + C48250 * C331) * C287 - C367 * C294 -
                    C368 * C288 + C369 * C295 + C370 * C48339) *
                       C107 +
                   (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                    C371 * C295 + C372 * C48339) *
                       C108 +
                   (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
                    (C113 * C305 + C48250 * C324) * C295 +
                    (C113 * C325 + C48250 * C335) * C48339) *
                       C109) *
                      C48235 * C48047 * C48347)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C119 + C48250 * C126) * C114 +
                   (C113 * C127 + C48250 * C140) * C102 - C168 * C115 -
                   C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                   C173 * C105 + C174 * C118 + C175 * C106) *
                      C107 +
                  (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
                   C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
                   C176 * C118 + C177 * C106) *
                      C108 +
                  (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 +
                   C174 * C116 + C175 * C104 - C176 * C117 - C177 * C105 +
                   (C113 * C125 + C48250 * C138) * C118 +
                   (C113 * C139 + C48250 * C146) * C106) *
                      C109) *
                 C48235 * C48047 * C48035) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48250 * C126) * C293 +
                    (C113 * C127 + C48250 * C140) * C287 - C168 * C294 -
                    C169 * C288 + C170 * C295 + C171 * C48339) *
                       C107 +
                   (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                    C172 * C295 + C173 * C48339) *
                       C108 +
                   (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                    C174 * C295 + C175 * C48339) *
                       C109) *
                      C48235 * C48387 +
                  ((C550 * C294 -
                    ((C113 * C496 + C48250 * C515) * C287 +
                     (C113 * C486 + C48250 * C497) * C293) +
                    C551 * C288 - C552 * C295 - C553 * C48339) *
                       C107 +
                   (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
                    C554 * C295 - C555 * C48339) *
                       C108 +
                   (C554 * C294 - (C553 * C287 + C552 * C293) + C555 * C288 -
                    (C113 * C489 + C48250 * C503) * C295 -
                    (C113 * C504 + C48250 * C519) * C48339) *
                       C109) *
                      C48235 * C48376 +
                  (((C113 * C490 + C48250 * C505) * C293 +
                    (C113 * C506 + C48250 * C520) * C287 - C556 * C294 -
                    C557 * C288 + C558 * C295 + C559 * C48339) *
                       C107 +
                   (C556 * C293 + C557 * C287 - C558 * C294 - C559 * C288 +
                    C560 * C295 + C561 * C48339) *
                       C108 +
                   (C558 * C293 + C559 * C287 - C560 * C294 - C561 * C288 +
                    (C113 * C494 + C48250 * C513) * C295 +
                    (C113 * C514 + C48250 * C524) * C48339) *
                       C109) *
                      C48235 * C48350) *
                 C48035) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48250 * C126) * C1089 +
                    (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
                    C169 * C48370 + C170 * C1091 + C171 * C48339) *
                       C107 +
                   (C168 * C1089 + C169 * C48383 - C170 * C1090 -
                    C171 * C48370 + C172 * C1091 + C173 * C48339) *
                       C108 +
                   (C170 * C1089 + C171 * C48383 - C172 * C1090 -
                    C173 * C48370 + C174 * C1091 + C175 * C48339) *
                       C109) *
                      C48235 * C48047 * C1086 +
                  ((C361 * C1090 -
                    ((C113 * C307 + C48250 * C326) * C48383 +
                     (C113 * C297 + C48250 * C308) * C1089) +
                    C362 * C48370 - C363 * C1091 - C364 * C48339) *
                       C107 +
                   (C363 * C1090 - (C362 * C48383 + C361 * C1089) +
                    C364 * C48370 - C365 * C1091 - C366 * C48339) *
                       C108 +
                   (C365 * C1090 - (C364 * C48383 + C363 * C1089) +
                    C366 * C48370 - C678 * C1091 - C679 * C48339) *
                       C109) *
                      C48235 * C48047 * C1087 +
                  (((C113 * C301 + C48250 * C316) * C1089 +
                    (C113 * C317 + C48250 * C331) * C48383 - C367 * C1090 -
                    C368 * C48370 + C369 * C1091 + C370 * C48339) *
                       C107 +
                   (C367 * C1089 + C368 * C48383 - C369 * C1090 -
                    C370 * C48370 + C371 * C1091 + C372 * C48339) *
                       C108 +
                   (C369 * C1089 + C370 * C48383 - C371 * C1090 -
                    C372 * C48370 + (C113 * C305 + C48250 * C324) * C1091 +
                    (C113 * C325 + C48250 * C335) * C48339) *
                       C109) *
                      C48235 * C48047 * C48347)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48250 * C126) * C1160 +
                    (C113 * C127 + C48250 * C140) * C47983) *
                       C107 +
                   (C168 * C1160 + C169 * C47983) * C108 +
                   (C170 * C1160 + C171 * C47983) * C109) *
                      C48235 * C48047 * C1155 -
                  ((C364 * C47983 + C363 * C1160) * C109 +
                   (C362 * C47983 + C361 * C1160) * C108 +
                   ((C113 * C307 + C48250 * C326) * C47983 +
                    (C113 * C297 + C48250 * C308) * C1160) *
                       C107) *
                      C48235 * C48047 * C1156 +
                  (((C113 * C301 + C48250 * C316) * C1160 +
                    (C113 * C317 + C48250 * C331) * C47983) *
                       C107 +
                   (C367 * C1160 + C368 * C47983) * C108 +
                   (C369 * C1160 + C370 * C47983) * C109) *
                      C48235 * C48047 * C1157 -
                  (((C113 * C1167 + C48250 * C1179) * C47983 +
                    (C113 * C1161 + C48250 * C1168) * C1160) *
                       C109 +
                   ((C113 * C1169 + C48250 * C1180) * C47983 +
                    (C113 * C1162 + C48250 * C1170) * C1160) *
                       C108 +
                   ((C113 * C1171 + C48250 * C1181) * C47983 +
                    (C113 * C1163 + C48250 * C1172) * C1160) *
                       C107) *
                      C48235 * C48047 * C1158 +
                  (((C113 * C1164 + C48250 * C1173) * C1160 +
                    (C113 * C1174 + C48250 * C1182) * C47983) *
                       C107 +
                   ((C113 * C1165 + C48250 * C1175) * C1160 +
                    (C113 * C1176 + C48250 * C1183) * C47983) *
                       C108 +
                   ((C113 * C1166 + C48250 * C1177) * C1160 +
                    (C113 * C1178 + C48250 * C1184) * C47983) *
                       C109) *
                      C48235 * C48047 * C1159)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C119 + C48250 * C126) * C1160 +
                     (C113 * C127 + C48250 * C140) * C47983) *
                        C107 +
                    (C168 * C1160 + C169 * C47983) * C108 +
                    (C170 * C1160 + C171 * C47983) * C109) *
                       C48235 * C48387 -
                   ((C553 * C47983 + C552 * C1160) * C109 +
                    (C551 * C47983 + C550 * C1160) * C108 +
                    ((C113 * C496 + C48250 * C515) * C47983 +
                     (C113 * C486 + C48250 * C497) * C1160) *
                        C107) *
                       C48235 * C48376 +
                   (((C113 * C490 + C48250 * C505) * C1160 +
                     (C113 * C506 + C48250 * C520) * C47983) *
                        C107 +
                    (C556 * C1160 + C557 * C47983) * C108 +
                    (C558 * C1160 + C559 * C47983) * C109) *
                       C48235 * C48350) *
                      C1086 +
                  ((((C113 * C935 + C48250 * C940) * C1160 +
                     (C113 * C941 + C48250 * C950) * C47983) *
                        C107 +
                    (C968 * C1160 + C969 * C47983) * C108 +
                    (C970 * C1160 + C971 * C47983) * C109) *
                       C48235 * C48376 -
                   ((C364 * C47983 + C363 * C1160) * C109 +
                    (C362 * C47983 + C361 * C1160) * C108 +
                    ((C113 * C307 + C48250 * C326) * C47983 +
                     (C113 * C297 + C48250 * C308) * C1160) *
                        C107) *
                       C48235 * C48387 -
                   (((C113 * C1304 + C48250 * C1322) * C47983 +
                     (C113 * C1295 + C48250 * C1305) * C1160) *
                        C109 +
                    ((C113 * C1306 + C48250 * C1323) * C47983 +
                     (C113 * C1296 + C48250 * C1307) * C1160) *
                        C108 +
                    ((C113 * C1308 + C48250 * C1324) * C47983 +
                     (C113 * C1297 + C48250 * C1309) * C1160) *
                        C107) *
                       C48235 * C48350) *
                      C1087 +
                  ((((C113 * C301 + C48250 * C316) * C1160 +
                     (C113 * C317 + C48250 * C331) * C47983) *
                        C107 +
                    (C367 * C1160 + C368 * C47983) * C108 +
                    (C369 * C1160 + C370 * C47983) * C109) *
                       C48235 * C48387 -
                   (((C113 * C1310 + C48250 * C1325) * C47983 +
                     (C113 * C1298 + C48250 * C1311) * C1160) *
                        C109 +
                    ((C113 * C1312 + C48250 * C1326) * C47983 +
                     (C113 * C1299 + C48250 * C1313) * C1160) *
                        C108 +
                    ((C113 * C1314 + C48250 * C1327) * C47983 +
                     (C113 * C1300 + C48250 * C1315) * C1160) *
                        C107) *
                       C48235 * C48376 +
                   (((C113 * C1301 + C48250 * C1316) * C1160 +
                     (C113 * C1317 + C48250 * C1328) * C47983) *
                        C107 +
                    ((C113 * C1302 + C48250 * C1318) * C1160 +
                     (C113 * C1319 + C48250 * C1329) * C47983) *
                        C108 +
                    ((C113 * C1303 + C48250 * C1320) * C1160 +
                     (C113 * C1321 + C48250 * C1330) * C47983) *
                        C109) *
                       C48235 * C48350) *
                      C48347)) /
                    (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C665 +
            (C113 * C127 + C48250 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48351) *
               C107 +
           (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
            C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48351) *
               C108 +
           (C170 * C665 + C171 * C659 - C172 * C666 - C173 * C660 +
            C174 * C667 + C175 * C661 - C176 * C668 - C177 * C48351) *
               C109) *
              C48235 * C48316 +
          ((C550 * C666 -
            ((C113 * C496 + C48250 * C515) * C659 +
             (C113 * C486 + C48250 * C497) * C665) +
            C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
            C555 * C48351) *
               C107 +
           (C552 * C666 - (C551 * C659 + C550 * C665) + C553 * C660 -
            C554 * C667 - C555 * C661 + C788 * C668 + C789 * C48351) *
               C108 +
           (C554 * C666 - (C553 * C659 + C552 * C665) + C555 * C660 -
            C788 * C667 - C789 * C661 + (C113 * C779 + C48250 * C780) * C668 +
            (C113 * C781 + C48250 * C782) * C48351) *
               C109) *
              C48235 * C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C47001 +
             (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
             C169 * C47993) *
                C107 +
            (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                C108 +
            (C170 * C47001 + C171 * C48298 - C172 * C46982 - C173 * C47993) *
                C109) *
               C48235 * C48316 +
           ((C550 * C46982 -
             ((C113 * C496 + C48250 * C515) * C48298 +
              (C113 * C486 + C48250 * C497) * C47001) +
             C551 * C47993) *
                C107 +
            (C552 * C46982 - (C551 * C48298 + C550 * C47001) + C553 * C47993) *
                C108 +
            (C554 * C46982 - (C553 * C48298 + C552 * C47001) + C555 * C47993) *
                C109) *
               C48235 * C48134) *
              C1086 +
          (((C361 * C46982 -
             ((C113 * C307 + C48250 * C326) * C48298 +
              (C113 * C297 + C48250 * C308) * C47001) +
             C362 * C47993) *
                C107 +
            (C363 * C46982 - (C362 * C48298 + C361 * C47001) + C364 * C47993) *
                C108 +
            (C365 * C46982 - (C364 * C48298 + C363 * C47001) + C366 * C47993) *
                C109) *
               C48235 * C48316 +
           (((C113 * C935 + C48250 * C940) * C47001 +
             (C113 * C941 + C48250 * C950) * C48298 - C968 * C46982 -
             C969 * C47993) *
                C107 +
            (C968 * C47001 + C969 * C48298 - C970 * C46982 - C971 * C47993) *
                C108 +
            (C970 * C47001 + C971 * C48298 - C972 * C46982 - C973 * C47993) *
                C109) *
               C48235 * C48134) *
              C1087 +
          ((((C113 * C301 + C48250 * C316) * C47001 +
             (C113 * C317 + C48250 * C331) * C48298 - C367 * C46982 -
             C368 * C47993) *
                C107 +
            (C367 * C47001 + C368 * C48298 - C369 * C46982 - C370 * C47993) *
                C108 +
            (C369 * C47001 + C370 * C48298 - C371 * C46982 - C372 * C47993) *
                C109) *
               C48235 * C48316 +
           ((C1612 * C46982 -
             ((C113 * C1314 + C48250 * C1327) * C48298 +
              (C113 * C1300 + C48250 * C1315) * C47001) +
             C1613 * C47993) *
                C107 +
            (C1614 * C46982 - (C1613 * C48298 + C1612 * C47001) +
             C1615 * C47993) *
                C108 +
            ((C113 * C1599 + C48250 * C1600) * C46982 -
             (C1615 * C48298 + C1614 * C47001) +
             (C113 * C1601 + C48250 * C1602) * C47993) *
                C109) *
               C48235 * C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 (((C113 * C119 + C48250 * C126) * C114 +
                   (C113 * C127 + C48250 * C140) * C102 - C168 * C115 -
                   C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                   C173 * C105 + C174 * C118 + C175 * C106) *
                      C107 +
                  (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
                   C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
                   C176 * C118 + C177 * C106) *
                      C108 +
                  (C170 * C114 + C171 * C102 - C172 * C115 - C173 * C103 +
                   C174 * C116 + C175 * C104 - C176 * C117 - C177 * C105 +
                   (C113 * C125 + C48250 * C138) * C118 +
                   (C113 * C139 + C48250 * C146) * C106) *
                      C109) *
                 C48235 * C48047 * C48035) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48250 * C126) * C293 +
                    (C113 * C127 + C48250 * C140) * C287 - C168 * C294 -
                    C169 * C288 + C170 * C295 + C171 * C48339) *
                       C107 +
                   (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                    C172 * C295 + C173 * C48339) *
                       C108 +
                   (C170 * C293 + C171 * C287 - C172 * C294 - C173 * C288 +
                    C174 * C295 + C175 * C48339) *
                       C109) *
                      C48235 * C48047 * C48386 +
                  ((C361 * C294 -
                    ((C113 * C307 + C48250 * C326) * C287 +
                     (C113 * C297 + C48250 * C308) * C293) +
                    C362 * C288 - C363 * C295 - C364 * C48339) *
                       C107 +
                   (C363 * C294 - (C362 * C287 + C361 * C293) + C364 * C288 -
                    C365 * C295 - C366 * C48339) *
                       C108 +
                   (C365 * C294 - (C364 * C287 + C363 * C293) + C366 * C288 -
                    (C113 * C300 + C48250 * C314) * C295 -
                    (C113 * C315 + C48250 * C330) * C48339) *
                       C109) *
                      C48235 * C48047 * C48374 +
                  (((C113 * C301 + C48250 * C316) * C293 +
                    (C113 * C317 + C48250 * C331) * C287 - C367 * C294 -
                    C368 * C288 + C369 * C295 + C370 * C48339) *
                       C107 +
                   (C367 * C293 + C368 * C287 - C369 * C294 - C370 * C288 +
                    C371 * C295 + C372 * C48339) *
                       C108 +
                   (C369 * C293 + C370 * C287 - C371 * C294 - C372 * C288 +
                    (C113 * C305 + C48250 * C324) * C295 +
                    (C113 * C325 + C48250 * C335) * C48339) *
                       C109) *
                      C48235 * C48047 * C48347)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48250 * C126) * C1089 +
                    (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
                    C169 * C48370 + C170 * C1091 + C171 * C48339) *
                       C107 +
                   (C168 * C1089 + C169 * C48383 - C170 * C1090 -
                    C171 * C48370 + C172 * C1091 + C173 * C48339) *
                       C108 +
                   (C170 * C1089 + C171 * C48383 - C172 * C1090 -
                    C173 * C48370 + C174 * C1091 + C175 * C48339) *
                       C109) *
                      C48235 * C48047 * C1086 +
                  ((C361 * C1090 -
                    ((C113 * C307 + C48250 * C326) * C48383 +
                     (C113 * C297 + C48250 * C308) * C1089) +
                    C362 * C48370 - C363 * C1091 - C364 * C48339) *
                       C107 +
                   (C363 * C1090 - (C362 * C48383 + C361 * C1089) +
                    C364 * C48370 - C365 * C1091 - C366 * C48339) *
                       C108 +
                   (C365 * C1090 - (C364 * C48383 + C363 * C1089) +
                    C366 * C48370 - C678 * C1091 - C679 * C48339) *
                       C109) *
                      C48235 * C48047 * C1087 +
                  (((C113 * C301 + C48250 * C316) * C1089 +
                    (C113 * C317 + C48250 * C331) * C48383 - C367 * C1090 -
                    C368 * C48370 + C369 * C1091 + C370 * C48339) *
                       C107 +
                   (C367 * C1089 + C368 * C48383 - C369 * C1090 -
                    C370 * C48370 + C371 * C1091 + C372 * C48339) *
                       C108 +
                   (C369 * C1089 + C370 * C48383 - C371 * C1090 -
                    C372 * C48370 + (C113 * C305 + C48250 * C324) * C1091 +
                    (C113 * C325 + C48250 * C335) * C48339) *
                       C109) *
                      C48235 * C48047 * C48347)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C119 + C48250 * C126) * C1160 +
                    (C113 * C127 + C48250 * C140) * C47983) *
                       C107 +
                   (C168 * C1160 + C169 * C47983) * C108 +
                   (C170 * C1160 + C171 * C47983) * C109) *
                      C48235 * C48047 * C1155 -
                  ((C364 * C47983 + C363 * C1160) * C109 +
                   (C362 * C47983 + C361 * C1160) * C108 +
                   ((C113 * C307 + C48250 * C326) * C47983 +
                    (C113 * C297 + C48250 * C308) * C1160) *
                       C107) *
                      C48235 * C48047 * C1156 +
                  (((C113 * C301 + C48250 * C316) * C1160 +
                    (C113 * C317 + C48250 * C331) * C47983) *
                       C107 +
                   (C367 * C1160 + C368 * C47983) * C108 +
                   (C369 * C1160 + C370 * C47983) * C109) *
                      C48235 * C48047 * C1157 -
                  (((C113 * C1167 + C48250 * C1179) * C47983 +
                    (C113 * C1161 + C48250 * C1168) * C1160) *
                       C109 +
                   ((C113 * C1169 + C48250 * C1180) * C47983 +
                    (C113 * C1162 + C48250 * C1170) * C1160) *
                       C108 +
                   ((C113 * C1171 + C48250 * C1181) * C47983 +
                    (C113 * C1163 + C48250 * C1172) * C1160) *
                       C107) *
                      C48235 * C48047 * C1158 +
                  (((C113 * C1164 + C48250 * C1173) * C1160 +
                    (C113 * C1174 + C48250 * C1182) * C47983) *
                       C107 +
                   ((C113 * C1165 + C48250 * C1175) * C1160 +
                    (C113 * C1176 + C48250 * C1183) * C47983) *
                       C108 +
                   ((C113 * C1166 + C48250 * C1177) * C1160 +
                    (C113 * C1178 + C48250 * C1184) * C47983) *
                       C109) *
                      C48235 * C48047 * C1159)) /
                    (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C47011 +
             (C113 * C127 + C48250 * C140) * C47988 - C168 * C47007 -
             C169 * C47996 + C170 * C47017 + C171 * C2901) *
                C4779 +
            (C168 * C47011 + C169 * C47988 - C170 * C47007 - C171 * C47996 +
             C172 * C47017 + C173 * C2901) *
                C48344) *
               C4781 +
           ((C8130 + C8131 - C8132 - C8133 + C8134 + C8135) * C4779 +
            (C8136 + C8137 - C8138 - C8139 + C8140 + C8141) * C48344) *
               C48365) *
              C48047 * C48090 +
          (((C8132 - (C8131 + C8130) + C8133 - C8134 - C8135) * C4779 +
            (C8138 - (C8137 + C8136) + C8139 - C8140 - C8141) * C48344) *
               C4781 +
           ((C8142 - (C8143 + C8144) + C8145 - C8146 - C8147) * C4779 +
            (C8148 - (C8149 + C8150) + C8151 - C8152 - C8153) * C48344) *
               C48365) *
              C48047 * C48097 +
          (((C8144 + C8143 - C8142 - C8145 + C8146 + C8147) * C4779 +
            (C8150 + C8149 - C8148 - C8151 + C8152 + C8153) * C48344) *
               C4781 +
           ((C5882 * C47011 + C5883 * C47988 - C1450 * C47007 - C1451 * C47996 +
             C1452 * C47017 + C1453 * C2901) *
                C4779 +
            (C1450 * C47011 + C1451 * C47988 - C1452 * C47007 - C1453 * C47996 +
             (C113 * C1437 + C48250 * C1438) * C47017 +
             (C113 * C1439 + C48250 * C1440) * C2901) *
                C48344) *
               C48365) *
              C48047 * C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C2641 +
              (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
              C169 * C47993) *
                 C4779 +
             (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                 C48344) *
                C4781 +
            ((C7750 + C7751 - C7752 - C7753) * C4779 +
             (C7754 + C7755 - C7756 - C7757) * C48344) *
                C48365) *
               C48316 +
           (((C550 * C2642 -
              ((C113 * C496 + C48250 * C515) * C2635 +
               (C113 * C486 + C48250 * C497) * C2641) +
              C551 * C47993) *
                 C4779 +
             (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47993) *
                 C48344) *
                C4781 +
            ((C7968 - (C7969 + C7970) + C7971) * C4779 +
             (C7972 - (C7973 + C7974) + C7975) * C48344) *
                C48365) *
               C48134) *
              C48090 +
          ((((C7752 - (C7751 + C7750) + C7753) * C4779 +
             (C7756 - (C7755 + C7754) + C7757) * C48344) *
                C4781 +
            ((C7758 - (C7759 + C7760) + C7761) * C4779 +
             (C7762 - (C7763 + C7764) + C7765) * C48344) *
                C48365) *
               C48316 +
           (((C7970 + C7969 - C7968 - C7971) * C4779 +
             (C7974 + C7973 - C7972 - C7975) * C48344) *
                C4781 +
            ((C8554 + C8555 - C8556 - C8557) * C4779 +
             (C8558 + C8559 - C8560 - C8561) * C48344) *
                C48365) *
               C48134) *
              C48097 +
          ((((C7760 + C7759 - C7758 - C7761) * C4779 +
             (C7764 + C7763 - C7762 - C7765) * C48344) *
                C4781 +
            ((C7766 + C7767 - C7768 - C7769) * C4779 +
             (C7770 + C7771 - C7772 - C7773) * C48344) *
                C48365) *
               C48316 +
           (((C8556 - (C8555 + C8554) + C8557) * C4779 +
             (C8560 - (C8559 + C8558) + C8561) * C48344) *
                C4781 +
            ((C6456 * C2642 - (C6602 * C2635 + C6603 * C2641) +
              C6457 * C47993) *
                 C4779 +
             ((C113 * C1715 + C48250 * C1720) * C2642 -
              (C6457 * C2635 + C6456 * C2641) +
              (C113 * C1721 + C48250 * C1724) * C47993) *
                 C48344) *
                C48365) *
               C48134) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2641 +
             (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
             C169 * C47993) *
                C4779 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                C48344) *
               C4781 +
           ((C7750 + C7751 - C7752 - C7753) * C4779 +
            (C7754 + C7755 - C7756 - C7757) * C48344) *
               C48365) *
              C48047 * C48393 +
          (((C7752 - (C7751 + C7750) + C7753) * C4779 +
            (C7756 - (C7755 + C7754) + C7757) * C48344) *
               C4781 +
           ((C7758 - (C7759 + C7760) + C7761) * C4779 +
            (C7762 - (C7763 + C7764) + C7765) * C48344) *
               C48365) *
              C48047 * C48389 +
          (((C7760 + C7759 - C7758 - C7761) * C4779 +
            (C7764 + C7763 - C7762 - C7765) * C48344) *
               C4781 +
           ((C7766 + C7767 - C7768 - C7769) * C4779 +
            (C7770 + C7771 - C7772 - C7773) * C48344) *
               C48365) *
              C48047 * C48379 +
          (((C7768 - (C7767 + C7766) + C7769) * C4779 +
            (C7772 - (C7771 + C7770) + C7773) * C48344) *
               C4781 +
           ((C5885 * C2642 - (C5886 * C2635 + C5887 * C2641) + C5884 * C47993) *
                C4779 +
            ((C113 * C1166 + C48250 * C1177) * C2642 -
             (C5884 * C2635 + C5885 * C2641) +
             (C113 * C1178 + C48250 * C1184) * C47993) *
                C48344) *
               C48365) *
              C48047 * C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2533 +
             (C113 * C127 + C48250 * C140) * C48392 - C168 * C2534 -
             C169 * C48385 + C170 * C2535 + C171 * C48372 - C172 * C2536 -
             C173 * C48351) *
                C4779 +
            (C168 * C2533 + C169 * C48392 - C170 * C2534 - C171 * C48385 +
             C172 * C2535 + C173 * C48372 - C174 * C2536 - C175 * C48351) *
                C48344) *
               C4781 +
           ((C7604 + C7605 - C7606 - C7607 + C7608 + C7609 - C7610 - C7611) *
                C4779 +
            (C7612 + C7613 - C7614 - C7615 + C7616 + C7617 - C7618 - C7619) *
                C48344) *
               C48365) *
              C48047 * C2531 +
          (((C7606 - (C7605 + C7604) + C7607 - C7608 - C7609 + C7610 + C7611) *
                C4779 +
            (C7614 - (C7613 + C7612) + C7615 - C7616 - C7617 + C7618 + C7619) *
                C48344) *
               C4781 +
           ((C367 * C2534 - (C4960 * C48392 + C4961 * C2533) + C368 * C48385 -
             C369 * C2535 - C370 * C48372 + C371 * C2536 + C372 * C48351) *
                C4779 +
            (C369 * C2534 - (C368 * C48392 + C367 * C2533) + C370 * C48385 -
             C371 * C2535 - C372 * C48372 +
             (C113 * C305 + C48250 * C324) * C2536 +
             (C113 * C325 + C48250 * C335) * C48351) *
                C48344) *
               C48365) *
              C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C2641 +
              (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
              C169 * C47993) *
                 C4779 +
             (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                 C48344) *
                C4781 +
            ((C7750 + C7751 - C7752 - C7753) * C4779 +
             (C7754 + C7755 - C7756 - C7757) * C48344) *
                C48365) *
               C48387 +
           (((C550 * C2642 -
              ((C113 * C496 + C48250 * C515) * C2635 +
               (C113 * C486 + C48250 * C497) * C2641) +
              C551 * C47993) *
                 C4779 +
             (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47993) *
                 C48344) *
                C4781 +
            ((C7968 - (C7969 + C7970) + C7971) * C4779 +
             (C7972 - (C7973 + C7974) + C7975) * C48344) *
                C48365) *
               C48376 +
           ((((C113 * C490 + C48250 * C505) * C2641 +
              (C113 * C506 + C48250 * C520) * C2635 - C556 * C2642 -
              C557 * C47993) *
                 C4779 +
             (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C47993) *
                 C48344) *
                C4781 +
            ((C7976 + C7977 - C7978 - C7979) * C4779 +
             (C7980 + C7981 - C7982 - C7983) * C48344) *
                C48365) *
               C48350) *
              C2531 +
          ((((C7752 - (C7751 + C7750) + C7753) * C4779 +
             (C7756 - (C7755 + C7754) + C7757) * C48344) *
                C4781 +
            ((C7758 - (C7759 + C7760) + C7761) * C4779 +
             (C7762 - (C7763 + C7764) + C7765) * C48344) *
                C48365) *
               C48387 +
           (((C7970 + C7969 - C7968 - C7971) * C4779 +
             (C7974 + C7973 - C7972 - C7975) * C48344) *
                C4781 +
            ((C6074 * C2641 + C6075 * C2635 - C1612 * C2642 - C1613 * C47993) *
                 C4779 +
             (C1612 * C2641 + C1613 * C2635 - C1614 * C2642 - C1615 * C47993) *
                 C48344) *
                C48365) *
               C48376 +
           (((C7978 - (C7977 + C7976) + C7979) * C4779 +
             (C7982 - (C7981 + C7980) + C7983) * C48344) *
                C4781 +
            ((C6077 * C2642 - (C6078 * C2635 + C6079 * C2641) +
              C6076 * C47993) *
                 C4779 +
             ((C113 * C1303 + C48250 * C1320) * C2642 -
              (C6076 * C2635 + C6077 * C2641) +
              (C113 * C1321 + C48250 * C1330) * C47993) *
                 C48344) *
                C48365) *
               C48350) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C47011 +
              (C113 * C127 + C48250 * C140) * C47988 - C168 * C47007 -
              C169 * C47996 + C170 * C47017 + C171 * C2901) *
                 C4779 +
             (C168 * C47011 + C169 * C47988 - C170 * C47007 - C171 * C47996 +
              C172 * C47017 + C173 * C2901) *
                 C48344) *
                C4781 +
            ((C8130 + C8131 - C8132 - C8133 + C8134 + C8135) * C4779 +
             (C8136 + C8137 - C8138 - C8139 + C8140 + C8141) * C48344) *
                C48365) *
               C48316 +
           (((C550 * C47007 -
              ((C113 * C496 + C48250 * C515) * C47988 +
               (C113 * C486 + C48250 * C497) * C47011) +
              C551 * C47996 - C552 * C47017 - C553 * C2901) *
                 C4779 +
             (C552 * C47007 - (C551 * C47988 + C550 * C47011) + C553 * C47996 -
              C554 * C47017 - C555 * C2901) *
                 C48344) *
                C4781 +
            ((C8348 - (C8349 + C8350) + C8351 - C8352 - C8353) * C4779 +
             (C8354 - (C8355 + C8356) + C8357 - C8358 - C8359) * C48344) *
                C48365) *
               C48134) *
              C2531 +
          ((((C8132 - (C8131 + C8130) + C8133 - C8134 - C8135) * C4779 +
             (C8138 - (C8137 + C8136) + C8139 - C8140 - C8141) * C48344) *
                C4781 +
            ((C8142 - (C8143 + C8144) + C8145 - C8146 - C8147) * C4779 +
             (C8148 - (C8149 + C8150) + C8151 - C8152 - C8153) * C48344) *
                C48365) *
               C48316 +
           (((C8350 + C8349 - C8348 - C8351 + C8352 + C8353) * C4779 +
             (C8356 + C8355 - C8354 - C8357 + C8358 + C8359) * C48344) *
                C4781 +
            ((C6074 * C47011 + C6075 * C47988 - C1612 * C47007 -
              C1613 * C47996 + C1614 * C47017 + C1615 * C2901) *
                 C4779 +
             (C1612 * C47011 + C1613 * C47988 - C1614 * C47007 -
              C1615 * C47996 + (C113 * C1599 + C48250 * C1600) * C47017 +
              (C113 * C1601 + C48250 * C1602) * C2901) *
                 C48344) *
                C48365) *
               C48134) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2533 +
             (C113 * C127 + C48250 * C140) * C48392 - C168 * C2534 -
             C169 * C48385 + C170 * C2535 + C171 * C48372 - C172 * C2536 -
             C173 * C48351) *
                C4779 +
            (C168 * C2533 + C169 * C48392 - C170 * C2534 - C171 * C48385 +
             C172 * C2535 + C173 * C48372 - C174 * C2536 - C175 * C48351) *
                C48344) *
               C4781 +
           ((C7604 + C7605 - C7606 - C7607 + C7608 + C7609 - C7610 - C7611) *
                C4779 +
            (C7612 + C7613 - C7614 - C7615 + C7616 + C7617 - C7618 - C7619) *
                C48344) *
               C48365) *
              C48047 * C2531 +
          (((C7606 - (C7605 + C7604) + C7607 - C7608 - C7609 + C7610 + C7611) *
                C4779 +
            (C7614 - (C7613 + C7612) + C7615 - C7616 - C7617 + C7618 + C7619) *
                C48344) *
               C4781 +
           ((C367 * C2534 - (C4960 * C48392 + C4961 * C2533) + C368 * C48385 -
             C369 * C2535 - C370 * C48372 + C371 * C2536 + C372 * C48351) *
                C4779 +
            (C369 * C2534 - (C368 * C48392 + C367 * C2533) + C370 * C48385 -
             C371 * C2535 - C372 * C48372 +
             (C113 * C305 + C48250 * C324) * C2536 +
             (C113 * C325 + C48250 * C335) * C48351) *
                C48344) *
               C48365) *
              C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2641 +
             (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
             C169 * C47993) *
                C4779 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                C48344) *
               C4781 +
           ((C7750 + C7751 - C7752 - C7753) * C4779 +
            (C7754 + C7755 - C7756 - C7757) * C48344) *
               C48365) *
              C48047 * C48393 +
          (((C7752 - (C7751 + C7750) + C7753) * C4779 +
            (C7756 - (C7755 + C7754) + C7757) * C48344) *
               C4781 +
           ((C7758 - (C7759 + C7760) + C7761) * C4779 +
            (C7762 - (C7763 + C7764) + C7765) * C48344) *
               C48365) *
              C48047 * C48389 +
          (((C7760 + C7759 - C7758 - C7761) * C4779 +
            (C7764 + C7763 - C7762 - C7765) * C48344) *
               C4781 +
           ((C7766 + C7767 - C7768 - C7769) * C4779 +
            (C7770 + C7771 - C7772 - C7773) * C48344) *
               C48365) *
              C48047 * C48379 +
          (((C7768 - (C7767 + C7766) + C7769) * C4779 +
            (C7772 - (C7771 + C7770) + C7773) * C48344) *
               C4781 +
           ((C5885 * C2642 - (C5886 * C2635 + C5887 * C2641) + C5884 * C47993) *
                C4779 +
            ((C113 * C1166 + C48250 * C1177) * C2642 -
             (C5884 * C2635 + C5885 * C2641) +
             (C113 * C1178 + C48250 * C1184) * C47993) *
                C48344) *
               C48365) *
              C48047 * C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C47001 +
              (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
              C169 * C47993) *
                 C4779 +
             (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                 C48344) *
                C4781 +
            ((C6218 + C6219 - C6220 - C6221) * C4779 +
             (C6222 + C6223 - C6224 - C6225) * C48344) *
                C48365) *
               C3298 +
           (((C550 * C46982 -
              ((C113 * C496 + C48250 * C515) * C48298 +
               (C113 * C486 + C48250 * C497) * C47001) +
              C551 * C47993) *
                 C4779 +
             (C552 * C46982 - (C551 * C48298 + C550 * C47001) + C553 * C47993) *
                 C48344) *
                C4781 +
            ((C6436 - (C6437 + C6438) + C6439) * C4779 +
             (C6440 - (C6441 + C6442) + C6443) * C48344) *
                C48365) *
               C48134) *
              C48090 +
          ((((C6220 - (C6219 + C6218) + C6221) * C4779 +
             (C6224 - (C6223 + C6222) + C6225) * C48344) *
                C4781 +
            ((C6226 - (C6227 + C6228) + C6229) * C4779 +
             (C6230 - (C6231 + C6232) + C6233) * C48344) *
                C48365) *
               C3298 +
           (((C6438 + C6437 - C6436 - C6439) * C4779 +
             (C6442 + C6441 - C6440 - C6443) * C48344) *
                C4781 +
            ((C6444 + C6445 - C6446 - C6447) * C4779 +
             (C6448 + C6449 - C6450 - C6451) * C48344) *
                C48365) *
               C48134) *
              C48097 +
          ((((C6228 + C6227 - C6226 - C6229) * C4779 +
             (C6232 + C6231 - C6230 - C6233) * C48344) *
                C4781 +
            ((C6234 + C6235 - C6236 - C6237) * C4779 +
             (C6238 + C6239 - C6240 - C6241) * C48344) *
                C48365) *
               C3298 +
           (((C6446 - (C6445 + C6444) + C6447) * C4779 +
             (C6450 - (C6449 + C6448) + C6451) * C48344) *
                C4781 +
            ((C6456 * C46982 - (C6602 * C48298 + C6603 * C47001) +
              C6457 * C47993) *
                 C4779 +
             ((C113 * C1715 + C48250 * C1720) * C46982 -
              (C6457 * C48298 + C6456 * C47001) +
              (C113 * C1721 + C48250 * C1724) * C47993) *
                 C48344) *
                C48365) *
               C48134) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C4779 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C4781 +
            ((C5860 + C5861) * C4779 + (C5862 + C5863) * C48344) * C48365) *
               C48130 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C4779) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C4779) *
                C4781) *
               C48137 +
           ((((C113 * C490 + C48250 * C505) * C1160 +
              (C113 * C506 + C48250 * C520) * C47983) *
                 C4779 +
             (C556 * C1160 + C557 * C47983) * C48344) *
                C4781 +
            ((C6080 + C6081) * C4779 + (C6056 + C6057) * C48344) * C48365) *
               C3806) *
              C48090 +
          ((((C6051 + C6050) * C4779 + (C6049 + C6048) * C48344) * C4781 +
            ((C6082 + C6083) * C4779 + (C6062 + C6063) * C48344) * C48365) *
               C48137 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C4779) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C4779) * C4781) *
               C48130 -
           (((C6084 + C6085) * C48344 + (C6086 + C6087) * C4779) * C48365 +
            ((C6057 + C6056) * C48344 + (C6081 + C6080) * C4779) * C4781) *
               C3806) *
              C48097 +
          ((((C5867 + C5866) * C4779 + (C5865 + C5864) * C48344) * C4781 +
            ((C5888 + C5889) * C4779 + (C5872 + C5873) * C48344) * C48365) *
               C48130 -
           (((C6596 + C6597) * C48344 + (C6604 + C6605) * C4779) * C48365 +
            ((C6063 + C6062) * C48344 + (C6083 + C6082) * C4779) * C4781) *
               C48137 +
           (((C6087 + C6086) * C4779 + (C6085 + C6084) * C48344) * C4781 +
            (((C113 * C6039 + C48250 * C6041) * C1160 +
              (C113 * C6042 + C48250 * C6045) * C47983) *
                 C4779 +
             ((C113 * C6040 + C48250 * C6043) * C1160 +
              (C113 * C6044 + C48250 * C6046) * C47983) *
                 C48344) *
                C48365) *
               C3806) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C4779 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C4781 +
            ((C5860 + C5861) * C4779 + (C5862 + C5863) * C48344) * C48365) *
               C3298 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C4779) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C4779) *
                C4781) *
               C48134) *
              C48393 +
          ((((C6051 + C6050) * C4779 + (C6049 + C6048) * C48344) * C4781 +
            ((C6082 + C6083) * C4779 + (C6062 + C6063) * C48344) * C48365) *
               C48134 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C4779) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C4779) * C4781) *
               C3298) *
              C48389 +
          ((((C5867 + C5866) * C4779 + (C5865 + C5864) * C48344) * C4781 +
            ((C5888 + C5889) * C4779 + (C5872 + C5873) * C48344) * C48365) *
               C3298 -
           (((C6596 + C6597) * C48344 + (C6604 + C6605) * C4779) * C48365 +
            ((C6063 + C6062) * C48344 + (C6083 + C6082) * C4779) * C4781) *
               C48134) *
              C48379 +
          ((((C6605 + C6604) * C4779 + (C6597 + C6596) * C48344) * C4781 +
            (((C113 * C6587 + C48250 * C6589) * C1160 +
              (C113 * C6590 + C48250 * C6593) * C47983) *
                 C4779 +
             ((C113 * C6588 + C48250 * C6591) * C1160 +
              (C113 * C6592 + C48250 * C6594) * C47983) *
                 C48344) *
                C48365) *
               C48134 -
           (((C5890 + C5891) * C48344 + (C5892 + C5893) * C4779) * C48365 +
            ((C5873 + C5872) * C48344 + (C5889 + C5888) * C4779) * C4781) *
               C3298) *
              C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1089 +
              (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
              C169 * C48370 + C170 * C1091 + C171 * C48339) *
                 C4779 +
             (C168 * C1089 + C169 * C48383 - C170 * C1090 - C171 * C48370 +
              C172 * C1091 + C173 * C48339) *
                 C48344) *
                C4781 +
            ((C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C4779 +
             (C5752 + C5753 - C5754 - C5755 + C5756 + C5757) * C48344) *
                C48365) *
               C3298 +
           (((C550 * C1090 -
              ((C113 * C496 + C48250 * C515) * C48383 +
               (C113 * C486 + C48250 * C497) * C1089) +
              C551 * C48370 - C552 * C1091 - C553 * C48339) *
                 C4779 +
             (C552 * C1090 - (C551 * C48383 + C550 * C1089) + C553 * C48370 -
              C554 * C1091 - C555 * C48339) *
                 C48344) *
                C4781 +
            ((C9744 - (C9745 + C9746) + C9747 - C9748 - C9749) * C4779 +
             (C9750 - (C9751 + C9752) + C9753 - C9754 - C9755) * C48344) *
                C48365) *
               C48134) *
              C2531 +
          ((((C5748 - (C5747 + C5746) + C5749 - C5750 - C5751) * C4779 +
             (C5754 - (C5753 + C5752) + C5755 - C5756 - C5757) * C48344) *
                C4781 +
            ((C5758 - (C5759 + C5760) + C5761 - C5762 - C5763) * C4779 +
             (C5764 - (C5765 + C5766) + C5767 - C5768 - C5769) * C48344) *
                C48365) *
               C3298 +
           (((C9746 + C9745 - C9744 - C9747 + C9748 + C9749) * C4779 +
             (C9752 + C9751 - C9750 - C9753 + C9754 + C9755) * C48344) *
                C4781 +
            ((C6074 * C1089 + C6075 * C48383 - C1612 * C1090 - C1613 * C48370 +
              C1614 * C1091 + C1615 * C48339) *
                 C4779 +
             (C1612 * C1089 + C1613 * C48383 - C1614 * C1090 - C1615 * C48370 +
              (C113 * C1599 + C48250 * C1600) * C1091 +
              (C113 * C1601 + C48250 * C1602) * C48339) *
                 C48344) *
                C48365) *
               C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C4779 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C4781 +
            ((C5860 + C5861) * C4779 + (C5862 + C5863) * C48344) * C48365) *
               C48394 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C4779) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C4779) *
                C4781) *
               C48391 +
           ((((C113 * C490 + C48250 * C505) * C1160 +
              (C113 * C506 + C48250 * C520) * C47983) *
                 C4779 +
             (C556 * C1160 + C557 * C47983) * C48344) *
                C4781 +
            ((C6080 + C6081) * C4779 + (C6056 + C6057) * C48344) * C48365) *
               C48382 -
           (((C7464 + C7465) * C48344 + (C7472 + C7473) * C4779) * C48365 +
            ((C2317 * C47983 + C2316 * C1160) * C48344 +
             ((C113 * C2025 + C48250 * C2035) * C47983 +
              (C113 * C2017 + C48250 * C2026) * C1160) *
                 C4779) *
                C4781) *
               C48363) *
              C2531 +
          ((((C6051 + C6050) * C4779 + (C6049 + C6048) * C48344) * C4781 +
            ((C6082 + C6083) * C4779 + (C6062 + C6063) * C48344) * C48365) *
               C48391 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C4779) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C4779) * C4781) *
               C48394 -
           (((C6084 + C6085) * C48344 + (C6086 + C6087) * C4779) * C48365 +
            ((C6057 + C6056) * C48344 + (C6081 + C6080) * C4779) * C4781) *
               C48382 +
           (((C7473 + C7472) * C4779 + (C7465 + C7464) * C48344) * C4781 +
            (((C113 * C7455 + C48250 * C7457) * C1160 +
              (C113 * C7458 + C48250 * C7461) * C47983) *
                 C4779 +
             ((C113 * C7456 + C48250 * C7459) * C1160 +
              (C113 * C7460 + C48250 * C7462) * C47983) *
                 C48344) *
                C48365) *
               C48363) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C47001 +
              (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
              C169 * C47993) *
                 C4779 +
             (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                 C48344) *
                C4781 +
            ((C6218 + C6219 - C6220 - C6221) * C4779 +
             (C6222 + C6223 - C6224 - C6225) * C48344) *
                C48365) *
               C48130 +
           (((C550 * C46982 -
              ((C113 * C496 + C48250 * C515) * C48298 +
               (C113 * C486 + C48250 * C497) * C47001) +
              C551 * C47993) *
                 C4779 +
             (C552 * C46982 - (C551 * C48298 + C550 * C47001) + C553 * C47993) *
                 C48344) *
                C4781 +
            ((C6436 - (C6437 + C6438) + C6439) * C4779 +
             (C6440 - (C6441 + C6442) + C6443) * C48344) *
                C48365) *
               C48137 +
           ((((C113 * C490 + C48250 * C505) * C47001 +
              (C113 * C506 + C48250 * C520) * C48298 - C556 * C46982 -
              C557 * C47993) *
                 C4779 +
             (C556 * C47001 + C557 * C48298 - C558 * C46982 - C559 * C47993) *
                 C48344) *
                C4781 +
            ((C7182 + C7183 - C7184 - C7185) * C4779 +
             (C7186 + C7187 - C7188 - C7189) * C48344) *
                C48365) *
               C3806) *
              C2531 +
          ((((C6220 - (C6219 + C6218) + C6221) * C4779 +
             (C6224 - (C6223 + C6222) + C6225) * C48344) *
                C4781 +
            ((C6226 - (C6227 + C6228) + C6229) * C4779 +
             (C6230 - (C6231 + C6232) + C6233) * C48344) *
                C48365) *
               C48130 +
           (((C6438 + C6437 - C6436 - C6439) * C4779 +
             (C6442 + C6441 - C6440 - C6443) * C48344) *
                C4781 +
            ((C6444 + C6445 - C6446 - C6447) * C4779 +
             (C6448 + C6449 - C6450 - C6451) * C48344) *
                C48365) *
               C48137 +
           (((C7184 - (C7183 + C7182) + C7185) * C4779 +
             (C7188 - (C7187 + C7186) + C7189) * C48344) *
                C4781 +
            ((C6077 * C46982 - (C6078 * C48298 + C6079 * C47001) +
              C6076 * C47993) *
                 C4779 +
             ((C113 * C1303 + C48250 * C1320) * C46982 -
              (C6076 * C48298 + C6077 * C47001) +
              (C113 * C1321 + C48250 * C1330) * C47993) *
                 C48344) *
                C48365) *
               C3806) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1089 +
              (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
              C169 * C48370 + C170 * C1091 + C171 * C48339) *
                 C4779 +
             (C168 * C1089 + C169 * C48383 - C170 * C1090 - C171 * C48370 +
              C172 * C1091 + C173 * C48339) *
                 C48344) *
                C4781 +
            ((C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C4779 +
             (C5752 + C5753 - C5754 - C5755 + C5756 + C5757) * C48344) *
                C48365) *
               C3298 +
           (((C550 * C1090 -
              ((C113 * C496 + C48250 * C515) * C48383 +
               (C113 * C486 + C48250 * C497) * C1089) +
              C551 * C48370 - C552 * C1091 - C553 * C48339) *
                 C4779 +
             (C552 * C1090 - (C551 * C48383 + C550 * C1089) + C553 * C48370 -
              C554 * C1091 - C555 * C48339) *
                 C48344) *
                C4781 +
            ((C9744 - (C9745 + C9746) + C9747 - C9748 - C9749) * C4779 +
             (C9750 - (C9751 + C9752) + C9753 - C9754 - C9755) * C48344) *
                C48365) *
               C48134) *
              C2531 +
          ((((C5748 - (C5747 + C5746) + C5749 - C5750 - C5751) * C4779 +
             (C5754 - (C5753 + C5752) + C5755 - C5756 - C5757) * C48344) *
                C4781 +
            ((C5758 - (C5759 + C5760) + C5761 - C5762 - C5763) * C4779 +
             (C5764 - (C5765 + C5766) + C5767 - C5768 - C5769) * C48344) *
                C48365) *
               C3298 +
           (((C9746 + C9745 - C9744 - C9747 + C9748 + C9749) * C4779 +
             (C9752 + C9751 - C9750 - C9753 + C9754 + C9755) * C48344) *
                C4781 +
            ((C6074 * C1089 + C6075 * C48383 - C1612 * C1090 - C1613 * C48370 +
              C1614 * C1091 + C1615 * C48339) *
                 C4779 +
             (C1612 * C1089 + C1613 * C48383 - C1614 * C1090 - C1615 * C48370 +
              (C113 * C1599 + C48250 * C1600) * C1091 +
              (C113 * C1601 + C48250 * C1602) * C48339) *
                 C48344) *
                C48365) *
               C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C4779 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C4781 +
            ((C5860 + C5861) * C4779 + (C5862 + C5863) * C48344) * C48365) *
               C3298 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C4779) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C4779) *
                C4781) *
               C48134) *
              C48393 +
          ((((C6051 + C6050) * C4779 + (C6049 + C6048) * C48344) * C4781 +
            ((C6082 + C6083) * C4779 + (C6062 + C6063) * C48344) * C48365) *
               C48134 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C4779) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C4779) * C4781) *
               C3298) *
              C48389 +
          ((((C5867 + C5866) * C4779 + (C5865 + C5864) * C48344) * C4781 +
            ((C5888 + C5889) * C4779 + (C5872 + C5873) * C48344) * C48365) *
               C3298 -
           (((C6596 + C6597) * C48344 + (C6604 + C6605) * C4779) * C48365 +
            ((C6063 + C6062) * C48344 + (C6083 + C6082) * C4779) * C4781) *
               C48134) *
              C48379 +
          ((((C6605 + C6604) * C4779 + (C6597 + C6596) * C48344) * C4781 +
            (((C113 * C6587 + C48250 * C6589) * C1160 +
              (C113 * C6590 + C48250 * C6593) * C47983) *
                 C4779 +
             ((C113 * C6588 + C48250 * C6591) * C1160 +
              (C113 * C6592 + C48250 * C6594) * C47983) *
                 C48344) *
                C48365) *
               C48134 -
           (((C5890 + C5891) * C48344 + (C5892 + C5893) * C4779) * C48365 +
            ((C5873 + C5872) * C48344 + (C5889 + C5888) * C4779) * C4781) *
               C3298) *
              C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C47001 +
             (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
             C169 * C47993) *
                C4779 +
            (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                C48344) *
               C4781 +
           ((C6218 + C6219 - C6220 - C6221) * C4779 +
            (C6222 + C6223 - C6224 - C6225) * C48344) *
               C48365) *
              C48047 * C1431 +
          (((C6220 - (C6219 + C6218) + C6221) * C4779 +
            (C6224 - (C6223 + C6222) + C6225) * C48344) *
               C4781 +
           ((C6226 - (C6227 + C6228) + C6229) * C4779 +
            (C6230 - (C6231 + C6232) + C6233) * C48344) *
               C48365) *
              C48047 * C1432 +
          (((C6228 + C6227 - C6226 - C6229) * C4779 +
            (C6232 + C6231 - C6230 - C6233) * C48344) *
               C4781 +
           ((C6234 + C6235 - C6236 - C6237) * C4779 +
            (C6238 + C6239 - C6240 - C6241) * C48344) *
               C48365) *
              C48047 * C1433 +
          (((C6236 - (C6235 + C6234) + C6237) * C4779 +
            (C6240 - (C6239 + C6238) + C6241) * C48344) *
               C4781 +
           ((C5885 * C46982 - (C5886 * C48298 + C5887 * C47001) +
             C5884 * C47993) *
                C4779 +
            ((C113 * C1166 + C48250 * C1177) * C46982 -
             (C5884 * C48298 + C5885 * C47001) +
             (C113 * C1178 + C48250 * C1184) * C47993) *
                C48344) *
               C48365) *
              C48047 * C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C665 +
             (C113 * C127 + C48250 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48351) *
                C4779 +
            (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48351) *
                C48344) *
               C4781 +
           ((C5242 + C5243 - C5244 - C5245 + C5246 + C5247 - C5248 - C5249) *
                C4779 +
            (C5250 + C5251 - C5252 - C5253 + C5254 + C5255 - C5256 - C5257) *
                C48344) *
               C48365) *
              C48047 * C48315 +
          (((C5244 - (C5243 + C5242) + C5245 - C5246 - C5247 + C5248 + C5249) *
                C4779 +
            (C5252 - (C5251 + C5250) + C5253 - C5254 - C5255 + C5256 + C5257) *
                C48344) *
               C4781 +
           ((C367 * C666 - (C4960 * C659 + C4961 * C665) + C368 * C660 -
             C369 * C667 - C370 * C661 + C371 * C668 + C372 * C48351) *
                C4779 +
            (C369 * C666 - (C368 * C659 + C367 * C665) + C370 * C660 -
             C371 * C667 - C372 * C661 + (C113 * C305 + C48250 * C324) * C668 +
             (C113 * C325 + C48250 * C335) * C48351) *
                C48344) *
               C48365) *
              C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C47001 +
              (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
              C169 * C47993) *
                 C4779 +
             (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                 C48344) *
                C4781 +
            ((C6218 + C6219 - C6220 - C6221) * C4779 +
             (C6222 + C6223 - C6224 - C6225) * C48344) *
                C48365) *
               C1835 +
           (((C550 * C46982 -
              ((C113 * C496 + C48250 * C515) * C48298 +
               (C113 * C486 + C48250 * C497) * C47001) +
              C551 * C47993) *
                 C4779 +
             (C552 * C46982 - (C551 * C48298 + C550 * C47001) + C553 * C47993) *
                 C48344) *
                C4781 +
            ((C6436 - (C6437 + C6438) + C6439) * C4779 +
             (C6440 - (C6441 + C6442) + C6443) * C48344) *
                C48365) *
               C1836 +
           ((((C113 * C490 + C48250 * C505) * C47001 +
              (C113 * C506 + C48250 * C520) * C48298 - C556 * C46982 -
              C557 * C47993) *
                 C4779 +
             (C556 * C47001 + C557 * C48298 - C558 * C46982 - C559 * C47993) *
                 C48344) *
                C4781 +
            ((C7182 + C7183 - C7184 - C7185) * C4779 +
             (C7186 + C7187 - C7188 - C7189) * C48344) *
                C48365) *
               C48350) *
              C48315 +
          ((((C6220 - (C6219 + C6218) + C6221) * C4779 +
             (C6224 - (C6223 + C6222) + C6225) * C48344) *
                C4781 +
            ((C6226 - (C6227 + C6228) + C6229) * C4779 +
             (C6230 - (C6231 + C6232) + C6233) * C48344) *
                C48365) *
               C1835 +
           (((C6438 + C6437 - C6436 - C6439) * C4779 +
             (C6442 + C6441 - C6440 - C6443) * C48344) *
                C4781 +
            ((C6444 + C6445 - C6446 - C6447) * C4779 +
             (C6448 + C6449 - C6450 - C6451) * C48344) *
                C48365) *
               C1836 +
           (((C7184 - (C7183 + C7182) + C7185) * C4779 +
             (C7188 - (C7187 + C7186) + C7189) * C48344) *
                C4781 +
            ((C6077 * C46982 - (C6078 * C48298 + C6079 * C47001) +
              C6076 * C47993) *
                 C4779 +
             ((C113 * C1303 + C48250 * C1320) * C46982 -
              (C6076 * C48298 + C6077 * C47001) +
              (C113 * C1321 + C48250 * C1330) * C47993) *
                 C48344) *
                C48365) *
               C48350) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C4779 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C4781 +
            ((C5860 + C5861) * C4779 + (C5862 + C5863) * C48344) * C48365) *
               C48316 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C4779) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C4779) *
                C4781) *
               C48134) *
              C1431 +
          ((((C6051 + C6050) * C4779 + (C6049 + C6048) * C48344) * C4781 +
            ((C6082 + C6083) * C4779 + (C6062 + C6063) * C48344) * C48365) *
               C48134 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C4779) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C4779) * C4781) *
               C48316) *
              C1432 +
          ((((C5867 + C5866) * C4779 + (C5865 + C5864) * C48344) * C4781 +
            ((C5888 + C5889) * C4779 + (C5872 + C5873) * C48344) * C48365) *
               C48316 -
           (((C6596 + C6597) * C48344 + (C6604 + C6605) * C4779) * C48365 +
            ((C6063 + C6062) * C48344 + (C6083 + C6082) * C4779) * C4781) *
               C48134) *
              C1433 +
          ((((C6605 + C6604) * C4779 + (C6597 + C6596) * C48344) * C4781 +
            (((C113 * C6587 + C48250 * C6589) * C1160 +
              (C113 * C6590 + C48250 * C6593) * C47983) *
                 C4779 +
             ((C113 * C6588 + C48250 * C6591) * C1160 +
              (C113 * C6592 + C48250 * C6594) * C47983) *
                 C48344) *
                C48365) *
               C48134 -
           (((C5890 + C5891) * C48344 + (C5892 + C5893) * C4779) * C48365 +
            ((C5873 + C5872) * C48344 + (C5889 + C5888) * C4779) * C4781) *
               C48316) *
              C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C293 +
              (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
              C170 * C295 + C171 * C48339) *
                 C4779 +
             (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
              C172 * C295 + C173 * C48339) *
                 C48344) *
                C4781 +
            ((C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C4779 +
             (C4938 + C4939 - C4940 - C4941 + C4942 + C4943) * C48344) *
                C48365) *
               C48316 +
           (((C550 * C294 -
              ((C113 * C496 + C48250 * C515) * C287 +
               (C113 * C486 + C48250 * C497) * C293) +
              C551 * C288 - C552 * C295 - C553 * C48339) *
                 C4779 +
             (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
              C554 * C295 - C555 * C48339) *
                 C48344) *
                C4781 +
            ((C5582 - (C5598 + C5599) + C5587 - C5588 - C5589) * C4779 +
             (C5590 - (C5591 + C5592) + C5593 - C5594 - C5595) * C48344) *
                C48365) *
               C48134) *
              C48315 +
          ((((C4934 - (C4963 + C4962) + C4935 - C4936 - C4937) * C4779 +
             (C4940 - (C4939 + C4938) + C4941 - C4942 - C4943) * C48344) *
                C4781 +
            ((C4944 - (C4964 + C4965) + C4949 - C4950 - C4951) * C4779 +
             (C4952 - (C4953 + C4954) + C4955 - C4956 - C4957) * C48344) *
                C48365) *
               C48316 +
           (((C5599 + C5598 - C5582 - C5587 + C5588 + C5589) * C4779 +
             (C5592 + C5591 - C5590 - C5593 + C5594 + C5595) * C48344) *
                C4781 +
            (((C113 * C1300 + C48250 * C1315) * C293 +
              (C113 * C1314 + C48250 * C1327) * C287 - C1612 * C294 -
              C1613 * C288 + C1614 * C295 + C1615 * C48339) *
                 C4779 +
             (C1612 * C293 + C1613 * C287 - C1614 * C294 - C1615 * C288 +
              (C113 * C1599 + C48250 * C1600) * C295 +
              (C113 * C1601 + C48250 * C1602) * C48339) *
                 C48344) *
                C48365) *
               C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C4779 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C4781 +
            ((C5860 + C5861) * C4779 + (C5862 + C5863) * C48344) * C48365) *
               C2299 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C4779) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C4779) *
                C4781) *
               C2300 +
           ((((C113 * C490 + C48250 * C505) * C1160 +
              (C113 * C506 + C48250 * C520) * C47983) *
                 C4779 +
             (C556 * C1160 + C557 * C47983) * C48344) *
                C4781 +
            ((C6080 + C6081) * C4779 + (C6056 + C6057) * C48344) * C48365) *
               C2301 -
           (((C7464 + C7465) * C48344 + (C7472 + C7473) * C4779) * C48365 +
            ((C2317 * C47983 + C2316 * C1160) * C48344 +
             ((C113 * C2025 + C48250 * C2035) * C47983 +
              (C113 * C2017 + C48250 * C2026) * C1160) *
                 C4779) *
                C4781) *
               C48363) *
              C48315 +
          ((((C6051 + C6050) * C4779 + (C6049 + C6048) * C48344) * C4781 +
            ((C6082 + C6083) * C4779 + (C6062 + C6063) * C48344) * C48365) *
               C2300 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C4779) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C4779) * C4781) *
               C2299 -
           (((C6084 + C6085) * C48344 + (C6086 + C6087) * C4779) * C48365 +
            ((C6057 + C6056) * C48344 + (C6081 + C6080) * C4779) * C4781) *
               C2301 +
           (((C7473 + C7472) * C4779 + (C7465 + C7464) * C48344) * C4781 +
            (((C113 * C7455 + C48250 * C7457) * C1160 +
              (C113 * C7458 + C48250 * C7461) * C47983) *
                 C4779 +
             ((C113 * C7456 + C48250 * C7459) * C1160 +
              (C113 * C7460 + C48250 * C7462) * C47983) *
                 C48344) *
                C48365) *
               C48363) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C48250 * C126) * C114 +
                (C113 * C127 + C48250 * C140) * C102 - C168 * C115 -
                C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C4779 +
               (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
                C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
                C176 * C118 + C177 * C106) *
                   C48344) *
                  C4781 +
              (((C113 * C297 + C48250 * C308) * C114 +
                (C113 * C307 + C48250 * C326) * C102 - C361 * C115 -
                C362 * C103 + C363 * C116 + C364 * C104 - C365 * C117 -
                C366 * C105 + C678 * C118 + C679 * C106) *
                   C4779 +
               (C361 * C114 + C362 * C102 - C363 * C115 - C364 * C103 +
                C365 * C116 + C366 * C104 - C678 * C117 - C679 * C105 +
                (C113 * C669 + C48250 * C670) * C118 +
                (C113 * C671 + C48250 * C672) * C106) *
                   C48344) *
                  C48365) *
             C48047 * C48035 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C48250 * C126) * C293 +
                 (C113 * C127 + C48250 * C140) * C287 - C168 * C294 -
                 C169 * C288 + C170 * C295 + C171 * C48339) *
                    C4779 +
                (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                 C172 * C295 + C173 * C48339) *
                    C48344) *
                   C4781 +
               ((C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C4779 +
                (C4938 + C4939 - C4940 - C4941 + C4942 + C4943) * C48344) *
                   C48365) *
                  C48047 * C48386 +
              (((C4934 - (C4963 + C4962) + C4935 - C4936 - C4937) * C4779 +
                (C4940 - (C4939 + C4938) + C4941 - C4942 - C4943) * C48344) *
                   C4781 +
               ((C4944 - (C4964 + C4965) + C4949 - C4950 - C4951) * C4779 +
                (C4952 - (C4953 + C4954) + C4955 - C4956 - C4957) * C48344) *
                   C48365) *
                  C48047 * C48374 +
              (((C4965 + C4964 - C4944 - C4949 + C4950 + C4951) * C4779 +
                (C4954 + C4953 - C4952 - C4955 + C4956 + C4957) * C48344) *
                   C4781 +
               (((C113 * C1163 + C48250 * C1172) * C293 +
                 (C113 * C1171 + C48250 * C1181) * C287 - C1450 * C294 -
                 C1451 * C288 + C1452 * C295 + C1453 * C48339) *
                    C4779 +
                (C1450 * C293 + C1451 * C287 - C1452 * C294 - C1453 * C288 +
                 (C113 * C1437 + C48250 * C1438) * C295 +
                 (C113 * C1439 + C48250 * C1440) * C48339) *
                    C48344) *
                   C48365) *
                  C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C293 +
             (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48339) *
                C4779 +
            (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C48339) *
                C48344) *
               C4781 +
           ((C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C4779 +
            (C4938 + C4939 - C4940 - C4941 + C4942 + C4943) * C48344) *
               C48365) *
              C48387 +
          (((C550 * C294 -
             ((C113 * C496 + C48250 * C515) * C287 +
              (C113 * C486 + C48250 * C497) * C293) +
             C551 * C288 - C552 * C295 - C553 * C48339) *
                C4779 +
            (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
             C554 * C295 - C555 * C48339) *
                C48344) *
               C4781 +
           ((C968 * C294 -
             ((C113 * C941 + C48250 * C950) * C287 +
              (C113 * C935 + C48250 * C940) * C293) +
             C969 * C288 - C970 * C295 - C971 * C48339) *
                C4779 +
            (C970 * C294 - (C969 * C287 + C968 * C293) + C971 * C288 -
             C972 * C295 - C973 * C48339) *
                C48344) *
               C48365) *
              C48376 +
          ((((C113 * C490 + C48250 * C505) * C293 +
             (C113 * C506 + C48250 * C520) * C287 - C556 * C294 - C557 * C288 +
             C558 * C295 + C559 * C48339) *
                C4779 +
            (C556 * C293 + C557 * C287 - C558 * C294 - C559 * C288 +
             C560 * C295 + C561 * C48339) *
                C48344) *
               C4781 +
           (((C113 * C1297 + C48250 * C1309) * C293 +
             (C113 * C1308 + C48250 * C1324) * C287 - C2198 * C294 -
             C2199 * C288 + C2200 * C295 + C2201 * C48339) *
                C4779 +
            (C2198 * C293 + C2199 * C287 - C2200 * C294 - C2201 * C288 +
             (C113 * C2185 + C48250 * C2186) * C295 +
             (C113 * C2187 + C48250 * C2188) * C48339) *
                C48344) *
               C48365) *
              C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1089 +
             (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
             C169 * C48370 + C170 * C1091 + C171 * C48339) *
                C4779 +
            (C168 * C1089 + C169 * C48383 - C170 * C1090 - C171 * C48370 +
             C172 * C1091 + C173 * C48339) *
                C48344) *
               C4781 +
           ((C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C4779 +
            (C5752 + C5753 - C5754 - C5755 + C5756 + C5757) * C48344) *
               C48365) *
              C48047 * C1086 +
          (((C5748 - (C5747 + C5746) + C5749 - C5750 - C5751) * C4779 +
            (C5754 - (C5753 + C5752) + C5755 - C5756 - C5757) * C48344) *
               C4781 +
           ((C5758 - (C5759 + C5760) + C5761 - C5762 - C5763) * C4779 +
            (C5764 - (C5765 + C5766) + C5767 - C5768 - C5769) * C48344) *
               C48365) *
              C48047 * C1087 +
          (((C5760 + C5759 - C5758 - C5761 + C5762 + C5763) * C4779 +
            (C5766 + C5765 - C5764 - C5767 + C5768 + C5769) * C48344) *
               C4781 +
           (((C113 * C1163 + C48250 * C1172) * C1089 +
             (C113 * C1171 + C48250 * C1181) * C48383 - C1450 * C1090 -
             C1451 * C48370 + C1452 * C1091 + C1453 * C48339) *
                C4779 +
            (C1450 * C1089 + C1451 * C48383 - C1452 * C1090 - C1453 * C48370 +
             (C113 * C1437 + C48250 * C1438) * C1091 +
             (C113 * C1439 + C48250 * C1440) * C48339) *
                C48344) *
               C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1160 +
             (C113 * C127 + C48250 * C140) * C47983) *
                C4779 +
            (C168 * C1160 + C169 * C47983) * C48344) *
               C4781 +
           ((C5860 + C5861) * C4779 + (C5862 + C5863) * C48344) * C48365) *
              C48047 * C1155 -
          (((C5864 + C5865) * C48344 + (C5866 + C5867) * C4779) * C48365 +
           ((C5863 + C5862) * C48344 + (C5861 + C5860) * C4779) * C4781) *
              C48047 * C1156 +
          (((C5867 + C5866) * C4779 + (C5865 + C5864) * C48344) * C4781 +
           ((C5888 + C5889) * C4779 + (C5872 + C5873) * C48344) * C48365) *
              C48047 * C1157 -
          (((C5890 + C5891) * C48344 + (C5892 + C5893) * C4779) * C48365 +
           ((C5873 + C5872) * C48344 + (C5889 + C5888) * C4779) * C4781) *
              C48047 * C1158 +
          (((C5893 + C5892) * C4779 + (C5891 + C5890) * C48344) * C4781 +
           (((C113 * C5851 + C48250 * C5853) * C1160 +
             (C113 * C5854 + C48250 * C5857) * C47983) *
                C4779 +
            ((C113 * C5852 + C48250 * C5855) * C1160 +
             (C113 * C5856 + C48250 * C5858) * C47983) *
                C48344) *
               C48365) *
              C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C4779 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C4781 +
            ((C5860 + C5861) * C4779 + (C5862 + C5863) * C48344) * C48365) *
               C48387 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C4779) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C4779) *
                C4781) *
               C48376 +
           ((((C113 * C490 + C48250 * C505) * C1160 +
              (C113 * C506 + C48250 * C520) * C47983) *
                 C4779 +
             (C556 * C1160 + C557 * C47983) * C48344) *
                C4781 +
            ((C6080 + C6081) * C4779 + (C6056 + C6057) * C48344) * C48365) *
               C48350) *
              C1086 +
          ((((C6051 + C6050) * C4779 + (C6049 + C6048) * C48344) * C4781 +
            ((C6082 + C6083) * C4779 + (C6062 + C6063) * C48344) * C48365) *
               C48376 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C4779) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C4779) * C4781) *
               C48387 -
           (((C6084 + C6085) * C48344 + (C6086 + C6087) * C4779) * C48365 +
            ((C6057 + C6056) * C48344 + (C6081 + C6080) * C4779) * C4781) *
               C48350) *
              C1087 +
          ((((C5867 + C5866) * C4779 + (C5865 + C5864) * C48344) * C4781 +
            ((C5888 + C5889) * C4779 + (C5872 + C5873) * C48344) * C48365) *
               C48387 -
           ((((C113 * C1719 + C48250 * C1723) * C47983 +
              (C113 * C1714 + C48250 * C1718) * C1160) *
                 C48344 +
             ((C113 * C1717 + C48250 * C1722) * C47983 +
              (C113 * C1713 + C48250 * C1716) * C1160) *
                 C4779) *
                C48365 +
            ((C6063 + C6062) * C48344 + (C6083 + C6082) * C4779) * C4781) *
               C48376 +
           (((C6087 + C6086) * C4779 + (C6085 + C6084) * C48344) * C4781 +
            (((C113 * C6039 + C48250 * C6041) * C1160 +
              (C113 * C6042 + C48250 * C6045) * C47983) *
                 C4779 +
             ((C113 * C6040 + C48250 * C6043) * C1160 +
              (C113 * C6044 + C48250 * C6046) * C47983) *
                 C48344) *
                C48365) *
               C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1089 +
             (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
             C169 * C48370 + C170 * C1091 + C171 * C48339) *
                C4779 +
            (C168 * C1089 + C169 * C48383 - C170 * C1090 - C171 * C48370 +
             C172 * C1091 + C173 * C48339) *
                C48344) *
               C4781 +
           ((C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C4779 +
            (C5752 + C5753 - C5754 - C5755 + C5756 + C5757) * C48344) *
               C48365) *
              C1835 +
          (((C550 * C1090 -
             ((C113 * C496 + C48250 * C515) * C48383 +
              (C113 * C486 + C48250 * C497) * C1089) +
             C551 * C48370 - C552 * C1091 - C553 * C48339) *
                C4779 +
            (C552 * C1090 - (C551 * C48383 + C550 * C1089) + C553 * C48370 -
             C554 * C1091 - C555 * C48339) *
                C48344) *
               C4781 +
           ((C968 * C1090 - (C5596 * C48383 + C5597 * C1089) + C969 * C48370 -
             C970 * C1091 - C971 * C48339) *
                C4779 +
            (C970 * C1090 - (C969 * C48383 + C968 * C1089) + C971 * C48370 -
             C972 * C1091 - C973 * C48339) *
                C48344) *
               C48365) *
              C1836 +
          ((((C113 * C490 + C48250 * C505) * C1089 +
             (C113 * C506 + C48250 * C520) * C48383 - C556 * C1090 -
             C557 * C48370 + C558 * C1091 + C559 * C48339) *
                C4779 +
            (C556 * C1089 + C557 * C48383 - C558 * C1090 - C559 * C48370 +
             C560 * C1091 + C561 * C48339) *
                C48344) *
               C4781 +
           ((C6072 * C1089 + C6073 * C48383 - C2198 * C1090 - C2199 * C48370 +
             C2200 * C1091 + C2201 * C48339) *
                C4779 +
            (C2198 * C1089 + C2199 * C48383 - C2200 * C1090 - C2201 * C48370 +
             (C113 * C2185 + C48250 * C2186) * C1091 +
             (C113 * C2187 + C48250 * C2188) * C48339) *
                C48344) *
               C48365) *
              C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C4779 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C4781 +
            ((C5860 + C5861) * C4779 + (C5862 + C5863) * C48344) * C48365) *
               C1835 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C4779) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C4779) *
                C4781) *
               C1836 +
           ((((C113 * C490 + C48250 * C505) * C1160 +
              (C113 * C506 + C48250 * C520) * C47983) *
                 C4779 +
             (C556 * C1160 + C557 * C47983) * C48344) *
                C4781 +
            ((C6080 + C6081) * C4779 + (C6056 + C6057) * C48344) * C48365) *
               C48350) *
              C48386 +
          ((((C6051 + C6050) * C4779 + (C6049 + C6048) * C48344) * C4781 +
            ((C6082 + C6083) * C4779 + (C6062 + C6063) * C48344) * C48365) *
               C1836 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C4779) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C4779) * C4781) *
               C1835 -
           (((C6084 + C6085) * C48344 + (C6086 + C6087) * C4779) * C48365 +
            ((C6057 + C6056) * C48344 + (C6081 + C6080) * C4779) * C4781) *
               C48350) *
              C48374 +
          ((((C5867 + C5866) * C4779 + (C5865 + C5864) * C48344) * C4781 +
            ((C5888 + C5889) * C4779 + (C5872 + C5873) * C48344) * C48365) *
               C1835 -
           (((C6596 + C6597) * C48344 + (C6604 + C6605) * C4779) * C48365 +
            ((C6063 + C6062) * C48344 + (C6083 + C6082) * C4779) * C4781) *
               C1836 +
           (((C6087 + C6086) * C4779 + (C6085 + C6084) * C48344) * C4781 +
            (((C113 * C6039 + C48250 * C6041) * C1160 +
              (C113 * C6042 + C48250 * C6045) * C47983) *
                 C4779 +
             ((C113 * C6040 + C48250 * C6043) * C1160 +
              (C113 * C6044 + C48250 * C6046) * C47983) *
                 C48344) *
                C48365) *
               C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1160 +
             (C113 * C127 + C48250 * C140) * C47983) *
                C4779 +
            (C168 * C1160 + C169 * C47983) * C48344) *
               C4781 +
           ((C5860 + C5861) * C4779 + (C5862 + C5863) * C48344) * C48365) *
              C2010 -
          (((C6048 + C6049) * C48344 + (C6050 + C6051) * C4779) * C48365 +
           ((C551 * C47983 + C550 * C1160) * C48344 +
            ((C113 * C496 + C48250 * C515) * C47983 +
             (C113 * C486 + C48250 * C497) * C1160) *
                C4779) *
               C4781) *
              C2011 +
          ((((C113 * C490 + C48250 * C505) * C1160 +
             (C113 * C506 + C48250 * C520) * C47983) *
                C4779 +
            (C556 * C1160 + C557 * C47983) * C48344) *
               C4781 +
           ((C6080 + C6081) * C4779 + (C6056 + C6057) * C48344) * C48365) *
              C2012 -
          ((((C113 * C2423 + C48250 * C2427) * C47983 +
             (C113 * C2418 + C48250 * C2422) * C1160) *
                C48344 +
            ((C113 * C2421 + C48250 * C2426) * C47983 +
             (C113 * C2417 + C48250 * C2420) * C1160) *
                C4779) *
               C48365 +
           ((C2317 * C47983 + C2316 * C1160) * C48344 +
            ((C113 * C2025 + C48250 * C2035) * C47983 +
             (C113 * C2017 + C48250 * C2026) * C1160) *
                C4779) *
               C4781) *
              C2013 +
          ((((C113 * C2018 + C48250 * C2027) * C1160 +
             (C113 * C2028 + C48250 * C2036) * C47983) *
                C4779 +
            ((C113 * C2019 + C48250 * C2029) * C1160 +
             (C113 * C2030 + C48250 * C2037) * C47983) *
                C48344) *
               C4781 +
           (((C113 * C6979 + C48250 * C6981) * C1160 +
             (C113 * C6982 + C48250 * C6985) * C47983) *
                C4779 +
            ((C113 * C6980 + C48250 * C6983) * C1160 +
             (C113 * C6984 + C48250 * C6986) * C47983) *
                C48344) *
               C48365) *
              C2014) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C47001 +
              (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
              C169 * C47993) *
                 C4779 +
             (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                 C48344) *
                C4781 +
            ((C6218 + C6219 - C6220 - C6221) * C4779 +
             (C6222 + C6223 - C6224 - C6225) * C48344) *
                C48365) *
               C48316 +
           (((C550 * C46982 -
              ((C113 * C496 + C48250 * C515) * C48298 +
               (C113 * C486 + C48250 * C497) * C47001) +
              C551 * C47993) *
                 C4779 +
             (C552 * C46982 - (C551 * C48298 + C550 * C47001) + C553 * C47993) *
                 C48344) *
                C4781 +
            ((C6436 - (C6437 + C6438) + C6439) * C4779 +
             (C6440 - (C6441 + C6442) + C6443) * C48344) *
                C48365) *
               C48134) *
              C1086 +
          ((((C6220 - (C6219 + C6218) + C6221) * C4779 +
             (C6224 - (C6223 + C6222) + C6225) * C48344) *
                C4781 +
            ((C6226 - (C6227 + C6228) + C6229) * C4779 +
             (C6230 - (C6231 + C6232) + C6233) * C48344) *
                C48365) *
               C48316 +
           (((C6438 + C6437 - C6436 - C6439) * C4779 +
             (C6442 + C6441 - C6440 - C6443) * C48344) *
                C4781 +
            ((C6444 + C6445 - C6446 - C6447) * C4779 +
             (C6448 + C6449 - C6450 - C6451) * C48344) *
                C48365) *
               C48134) *
              C1087 +
          ((((C6228 + C6227 - C6226 - C6229) * C4779 +
             (C6232 + C6231 - C6230 - C6233) * C48344) *
                C4781 +
            ((C6234 + C6235 - C6236 - C6237) * C4779 +
             (C6238 + C6239 - C6240 - C6241) * C48344) *
                C48365) *
               C48316 +
           (((C6446 - (C6445 + C6444) + C6447) * C4779 +
             (C6450 - (C6449 + C6448) + C6451) * C48344) *
                C4781 +
            ((C6456 * C46982 -
              ((C113 * C1717 + C48250 * C1722) * C48298 +
               (C113 * C1713 + C48250 * C1716) * C47001) +
              C6457 * C47993) *
                 C4779 +
             ((C113 * C1715 + C48250 * C1720) * C46982 -
              (C6457 * C48298 + C6456 * C47001) +
              (C113 * C1721 + C48250 * C1724) * C47993) *
                 C48344) *
                C48365) *
               C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C665 +
             (C113 * C127 + C48250 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48351) *
                C4779 +
            (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48351) *
                C48344) *
               C4781 +
           ((C5242 + C5243 - C5244 - C5245 + C5246 + C5247 - C5248 - C5249) *
                C4779 +
            (C5250 + C5251 - C5252 - C5253 + C5254 + C5255 - C5256 - C5257) *
                C48344) *
               C48365) *
              C48316 +
          (((C550 * C666 -
             ((C113 * C496 + C48250 * C515) * C659 +
              (C113 * C486 + C48250 * C497) * C665) +
             C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
             C555 * C48351) *
                C4779 +
            (C552 * C666 - (C551 * C659 + C550 * C665) + C553 * C660 -
             C554 * C667 - C555 * C661 + C788 * C668 + C789 * C48351) *
                C48344) *
               C4781 +
           ((C968 * C666 -
             ((C113 * C941 + C48250 * C950) * C659 +
              (C113 * C935 + C48250 * C940) * C665) +
             C969 * C660 - C970 * C667 - C971 * C661 + C972 * C668 +
             C973 * C48351) *
                C4779 +
            (C970 * C666 - (C969 * C659 + C968 * C665) + C971 * C660 -
             C972 * C667 - C973 * C661 + (C113 * C939 + C48250 * C948) * C668 +
             (C113 * C949 + C48250 * C954) * C48351) *
                C48344) *
               C48365) *
              C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C47001 +
             (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
             C169 * C47993) *
                C4779 +
            (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                C48344) *
               C4781 +
           ((C6218 + C6219 - C6220 - C6221) * C4779 +
            (C6222 + C6223 - C6224 - C6225) * C48344) *
               C48365) *
              C2299 +
          (((C550 * C46982 -
             ((C113 * C496 + C48250 * C515) * C48298 +
              (C113 * C486 + C48250 * C497) * C47001) +
             C551 * C47993) *
                C4779 +
            (C552 * C46982 - (C551 * C48298 + C550 * C47001) + C553 * C47993) *
                C48344) *
               C4781 +
           ((C6436 - (C6437 + C6438) + C6439) * C4779 +
            (C6440 - (C6441 + C6442) + C6443) * C48344) *
               C48365) *
              C2300 +
          ((((C113 * C490 + C48250 * C505) * C47001 +
             (C113 * C506 + C48250 * C520) * C48298 - C556 * C46982 -
             C557 * C47993) *
                C4779 +
            (C556 * C47001 + C557 * C48298 - C558 * C46982 - C559 * C47993) *
                C48344) *
               C4781 +
           ((C7182 + C7183 - C7184 - C7185) * C4779 +
            (C7186 + C7187 - C7188 - C7189) * C48344) *
               C48365) *
              C2301 +
          (((C2316 * C46982 -
             ((C113 * C2025 + C48250 * C2035) * C48298 +
              (C113 * C2017 + C48250 * C2026) * C47001) +
             C2317 * C47993) *
                C4779 +
            (C2318 * C46982 - (C2317 * C48298 + C2316 * C47001) +
             C2319 * C47993) *
                C48344) *
               C4781 +
           ((C7324 * C46982 -
             ((C113 * C2421 + C48250 * C2426) * C48298 +
              (C113 * C2417 + C48250 * C2420) * C47001) +
             C7325 * C47993) *
                C4779 +
            ((C113 * C2419 + C48250 * C2424) * C46982 -
             (C7325 * C48298 + C7324 * C47001) +
             (C113 * C2425 + C48250 * C2428) * C47993) *
                C48344) *
               C48365) *
              C48363) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C293 +
             (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48339) *
                C4779 +
            (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C48339) *
                C48344) *
               C4781 +
           ((C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C4779 +
            (C4938 + C4939 - C4940 - C4941 + C4942 + C4943) * C48344) *
               C48365) *
              C48047 * C48386 +
          (((C4934 - (C4963 + C4962) + C4935 - C4936 - C4937) * C4779 +
            (C4940 - (C4939 + C4938) + C4941 - C4942 - C4943) * C48344) *
               C4781 +
           ((C4944 - (C4964 + C4965) + C4949 - C4950 - C4951) * C4779 +
            (C4952 - (C4953 + C4954) + C4955 - C4956 - C4957) * C48344) *
               C48365) *
              C48047 * C48374 +
          (((C4965 + C4964 - C4944 - C4949 + C4950 + C4951) * C4779 +
            (C4954 + C4953 - C4952 - C4955 + C4956 + C4957) * C48344) *
               C4781 +
           (((C113 * C1163 + C48250 * C1172) * C293 +
             (C113 * C1171 + C48250 * C1181) * C287 - C1450 * C294 -
             C1451 * C288 + C1452 * C295 + C1453 * C48339) *
                C4779 +
            (C1450 * C293 + C1451 * C287 - C1452 * C294 - C1453 * C288 +
             (C113 * C1437 + C48250 * C1438) * C295 +
             (C113 * C1439 + C48250 * C1440) * C48339) *
                C48344) *
               C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C114 +
            (C113 * C127 + C48250 * C140) * C102 - C168 * C115 - C169 * C103 +
            C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 +
            C174 * C118 + C175 * C106) *
               C4779 +
           (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
            C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
            C176 * C118 + C177 * C106) *
               C48344) *
              C4781 +
          (((C113 * C297 + C48250 * C308) * C114 +
            (C113 * C307 + C48250 * C326) * C102 - C361 * C115 - C362 * C103 +
            C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 +
            C678 * C118 + C679 * C106) *
               C4779 +
           (C361 * C114 + C362 * C102 - C363 * C115 - C364 * C103 +
            C365 * C116 + C366 * C104 - C678 * C117 - C679 * C105 +
            (C113 * C669 + C48250 * C670) * C118 +
            (C113 * C671 + C48250 * C672) * C106) *
               C48344) *
              C48365) *
         C48047 * C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1089 +
             (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
             C169 * C48370 + C170 * C1091 + C171 * C48339) *
                C4779 +
            (C168 * C1089 + C169 * C48383 - C170 * C1090 - C171 * C48370 +
             C172 * C1091 + C173 * C48339) *
                C48344) *
               C4781 +
           ((C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C4779 +
            (C5752 + C5753 - C5754 - C5755 + C5756 + C5757) * C48344) *
               C48365) *
              C48047 * C1086 +
          (((C5748 - (C5747 + C5746) + C5749 - C5750 - C5751) * C4779 +
            (C5754 - (C5753 + C5752) + C5755 - C5756 - C5757) * C48344) *
               C4781 +
           ((C5758 - (C5759 + C5760) + C5761 - C5762 - C5763) * C4779 +
            (C5764 - (C5765 + C5766) + C5767 - C5768 - C5769) * C48344) *
               C48365) *
              C48047 * C1087 +
          (((C5760 + C5759 - C5758 - C5761 + C5762 + C5763) * C4779 +
            (C5766 + C5765 - C5764 - C5767 + C5768 + C5769) * C48344) *
               C4781 +
           (((C113 * C1163 + C48250 * C1172) * C1089 +
             (C113 * C1171 + C48250 * C1181) * C48383 - C1450 * C1090 -
             C1451 * C48370 + C1452 * C1091 + C1453 * C48339) *
                C4779 +
            (C1450 * C1089 + C1451 * C48383 - C1452 * C1090 - C1453 * C48370 +
             (C113 * C1437 + C48250 * C1438) * C1091 +
             (C113 * C1439 + C48250 * C1440) * C48339) *
                C48344) *
               C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1160 +
             (C113 * C127 + C48250 * C140) * C47983) *
                C4779 +
            (C168 * C1160 + C169 * C47983) * C48344) *
               C4781 +
           ((C5860 + C5861) * C4779 + (C5862 + C5863) * C48344) * C48365) *
              C48047 * C1155 -
          (((C5864 + C5865) * C48344 + (C5866 + C5867) * C4779) * C48365 +
           ((C5863 + C5862) * C48344 + (C5861 + C5860) * C4779) * C4781) *
              C48047 * C1156 +
          (((C5867 + C5866) * C4779 + (C5865 + C5864) * C48344) * C4781 +
           ((C5888 + C5889) * C4779 + (C5872 + C5873) * C48344) * C48365) *
              C48047 * C1157 -
          (((C5890 + C5891) * C48344 + (C5892 + C5893) * C4779) * C48365 +
           ((C5873 + C5872) * C48344 + (C5889 + C5888) * C4779) * C4781) *
              C48047 * C1158 +
          (((C5893 + C5892) * C4779 + (C5891 + C5890) * C48344) * C4781 +
           (((C113 * C5851 + C48250 * C5853) * C1160 +
             (C113 * C5854 + C48250 * C5857) * C47983) *
                C4779 +
            ((C113 * C5852 + C48250 * C5855) * C1160 +
             (C113 * C5856 + C48250 * C5858) * C47983) *
                C48344) *
               C48365) *
              C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1089 +
             (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
             C169 * C48370 + C170 * C1091 + C171 * C48339) *
                C4779 +
            (C168 * C1089 + C169 * C48383 - C170 * C1090 - C171 * C48370 +
             C172 * C1091 + C173 * C48339) *
                C48344) *
               C4781 +
           ((C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C4779 +
            (C5752 + C5753 - C5754 - C5755 + C5756 + C5757) * C48344) *
               C48365) *
              C1835 +
          (((C550 * C1090 -
             ((C113 * C496 + C48250 * C515) * C48383 +
              (C113 * C486 + C48250 * C497) * C1089) +
             C551 * C48370 - C552 * C1091 - C553 * C48339) *
                C4779 +
            (C552 * C1090 - (C551 * C48383 + C550 * C1089) + C553 * C48370 -
             C554 * C1091 - C555 * C48339) *
                C48344) *
               C4781 +
           ((C968 * C1090 - (C5596 * C48383 + C5597 * C1089) + C969 * C48370 -
             C970 * C1091 - C971 * C48339) *
                C4779 +
            (C970 * C1090 - (C969 * C48383 + C968 * C1089) + C971 * C48370 -
             C972 * C1091 - C973 * C48339) *
                C48344) *
               C48365) *
              C1836 +
          ((((C113 * C490 + C48250 * C505) * C1089 +
             (C113 * C506 + C48250 * C520) * C48383 - C556 * C1090 -
             C557 * C48370 + C558 * C1091 + C559 * C48339) *
                C4779 +
            (C556 * C1089 + C557 * C48383 - C558 * C1090 - C559 * C48370 +
             C560 * C1091 + C561 * C48339) *
                C48344) *
               C4781 +
           ((C6072 * C1089 + C6073 * C48383 - C2198 * C1090 - C2199 * C48370 +
             C2200 * C1091 + C2201 * C48339) *
                C4779 +
            (C2198 * C1089 + C2199 * C48383 - C2200 * C1090 - C2201 * C48370 +
             (C113 * C2185 + C48250 * C2186) * C1091 +
             (C113 * C2187 + C48250 * C2188) * C48339) *
                C48344) *
               C48365) *
              C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C4779 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C4781 +
            ((C5860 + C5861) * C4779 + (C5862 + C5863) * C48344) * C48365) *
               C1835 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C4779) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C4779) *
                C4781) *
               C1836 +
           ((((C113 * C490 + C48250 * C505) * C1160 +
              (C113 * C506 + C48250 * C520) * C47983) *
                 C4779 +
             (C556 * C1160 + C557 * C47983) * C48344) *
                C4781 +
            ((C6080 + C6081) * C4779 + (C6056 + C6057) * C48344) * C48365) *
               C48350) *
              C48386 +
          ((((C6051 + C6050) * C4779 + (C6049 + C6048) * C48344) * C4781 +
            ((C6082 + C6083) * C4779 + (C6062 + C6063) * C48344) * C48365) *
               C1836 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C4779) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C4779) * C4781) *
               C1835 -
           (((C6084 + C6085) * C48344 + (C6086 + C6087) * C4779) * C48365 +
            ((C6057 + C6056) * C48344 + (C6081 + C6080) * C4779) * C4781) *
               C48350) *
              C48374 +
          ((((C5867 + C5866) * C4779 + (C5865 + C5864) * C48344) * C4781 +
            ((C5888 + C5889) * C4779 + (C5872 + C5873) * C48344) * C48365) *
               C1835 -
           (((C6596 + C6597) * C48344 + (C6604 + C6605) * C4779) * C48365 +
            ((C6063 + C6062) * C48344 + (C6083 + C6082) * C4779) * C4781) *
               C1836 +
           (((C6087 + C6086) * C4779 + (C6085 + C6084) * C48344) * C4781 +
            (((C113 * C6039 + C48250 * C6041) * C1160 +
              (C113 * C6042 + C48250 * C6045) * C47983) *
                 C4779 +
             ((C113 * C6040 + C48250 * C6043) * C1160 +
              (C113 * C6044 + C48250 * C6046) * C47983) *
                 C48344) *
                C48365) *
               C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C47011 +
              (C113 * C127 + C48250 * C140) * C47988 - C168 * C47007 -
              C169 * C47996 + C170 * C47017 + C171 * C2901) *
                 C4779 +
             (C168 * C47011 + C169 * C47988 - C170 * C47007 - C171 * C47996 +
              C172 * C47017 + C173 * C2901) *
                 C48344) *
                C4781 +
            ((C8130 + C8131 - C8132 - C8133 + C8134 + C8135) * C4779 +
             (C8136 + C8137 - C8138 - C8139 + C8140 + C8141) * C48344) *
                C48365) *
               C3298 +
           (((C550 * C47007 -
              ((C113 * C496 + C48250 * C515) * C47988 +
               (C113 * C486 + C48250 * C497) * C47011) +
              C551 * C47996 - C552 * C47017 - C553 * C2901) *
                 C4779 +
             (C552 * C47007 - (C551 * C47988 + C550 * C47011) + C553 * C47996 -
              C554 * C47017 - C555 * C2901) *
                 C48344) *
                C4781 +
            ((C8348 - (C8349 + C8350) + C8351 - C8352 - C8353) * C4779 +
             (C8354 - (C8355 + C8356) + C8357 - C8358 - C8359) * C48344) *
                C48365) *
               C48134) *
              C48315 +
          ((((C8132 - (C8131 + C8130) + C8133 - C8134 - C8135) * C4779 +
             (C8138 - (C8137 + C8136) + C8139 - C8140 - C8141) * C48344) *
                C4781 +
            ((C8142 - (C8143 + C8144) + C8145 - C8146 - C8147) * C4779 +
             (C8148 - (C8149 + C8150) + C8151 - C8152 - C8153) * C48344) *
                C48365) *
               C3298 +
           (((C8350 + C8349 - C8348 - C8351 + C8352 + C8353) * C4779 +
             (C8356 + C8355 - C8354 - C8357 + C8358 + C8359) * C48344) *
                C4781 +
            ((C6074 * C47011 + C6075 * C47988 - C1612 * C47007 -
              C1613 * C47996 + C1614 * C47017 + C1615 * C2901) *
                 C4779 +
             (C1612 * C47011 + C1613 * C47988 - C1614 * C47007 -
              C1615 * C47996 + (C113 * C1599 + C48250 * C1600) * C47017 +
              (C113 * C1601 + C48250 * C1602) * C2901) *
                 C48344) *
                C48365) *
               C48134) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C2641 +
              (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
              C169 * C47993) *
                 C4779 +
             (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                 C48344) *
                C4781 +
            ((C7750 + C7751 - C7752 - C7753) * C4779 +
             (C7754 + C7755 - C7756 - C7757) * C48344) *
                C48365) *
               C48130 +
           (((C550 * C2642 -
              ((C113 * C496 + C48250 * C515) * C2635 +
               (C113 * C486 + C48250 * C497) * C2641) +
              C551 * C47993) *
                 C4779 +
             (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47993) *
                 C48344) *
                C4781 +
            ((C7968 - (C7969 + C7970) + C7971) * C4779 +
             (C7972 - (C7973 + C7974) + C7975) * C48344) *
                C48365) *
               C48137 +
           ((((C113 * C490 + C48250 * C505) * C2641 +
              (C113 * C506 + C48250 * C520) * C2635 - C556 * C2642 -
              C557 * C47993) *
                 C4779 +
             (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C47993) *
                 C48344) *
                C4781 +
            ((C7976 + C7977 - C7978 - C7979) * C4779 +
             (C7980 + C7981 - C7982 - C7983) * C48344) *
                C48365) *
               C3806) *
              C48315 +
          ((((C7752 - (C7751 + C7750) + C7753) * C4779 +
             (C7756 - (C7755 + C7754) + C7757) * C48344) *
                C4781 +
            ((C7758 - (C7759 + C7760) + C7761) * C4779 +
             (C7762 - (C7763 + C7764) + C7765) * C48344) *
                C48365) *
               C48130 +
           (((C7970 + C7969 - C7968 - C7971) * C4779 +
             (C7974 + C7973 - C7972 - C7975) * C48344) *
                C4781 +
            ((C8554 + C8555 - C8556 - C8557) * C4779 +
             (C8558 + C8559 - C8560 - C8561) * C48344) *
                C48365) *
               C48137 +
           (((C7978 - (C7977 + C7976) + C7979) * C4779 +
             (C7982 - (C7981 + C7980) + C7983) * C48344) *
                C4781 +
            ((C6077 * C2642 - (C6078 * C2635 + C6079 * C2641) +
              C6076 * C47993) *
                 C4779 +
             ((C113 * C1303 + C48250 * C1320) * C2642 -
              (C6076 * C2635 + C6077 * C2641) +
              (C113 * C1321 + C48250 * C1330) * C47993) *
                 C48344) *
                C48365) *
               C3806) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C2641 +
              (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
              C169 * C47993) *
                 C4779 +
             (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                 C48344) *
                C4781 +
            ((C7750 + C7751 - C7752 - C7753) * C4779 +
             (C7754 + C7755 - C7756 - C7757) * C48344) *
                C48365) *
               C3298 +
           (((C550 * C2642 -
              ((C113 * C496 + C48250 * C515) * C2635 +
               (C113 * C486 + C48250 * C497) * C2641) +
              C551 * C47993) *
                 C4779 +
             (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47993) *
                 C48344) *
                C4781 +
            ((C7968 - (C7969 + C7970) + C7971) * C4779 +
             (C7972 - (C7973 + C7974) + C7975) * C48344) *
                C48365) *
               C48134) *
              C48386 +
          ((((C7752 - (C7751 + C7750) + C7753) * C4779 +
             (C7756 - (C7755 + C7754) + C7757) * C48344) *
                C4781 +
            ((C7758 - (C7759 + C7760) + C7761) * C4779 +
             (C7762 - (C7763 + C7764) + C7765) * C48344) *
                C48365) *
               C3298 +
           (((C7970 + C7969 - C7968 - C7971) * C4779 +
             (C7974 + C7973 - C7972 - C7975) * C48344) *
                C4781 +
            ((C8554 + C8555 - C8556 - C8557) * C4779 +
             (C8558 + C8559 - C8560 - C8561) * C48344) *
                C48365) *
               C48134) *
              C48374 +
          ((((C7760 + C7759 - C7758 - C7761) * C4779 +
             (C7764 + C7763 - C7762 - C7765) * C48344) *
                C4781 +
            ((C7766 + C7767 - C7768 - C7769) * C4779 +
             (C7770 + C7771 - C7772 - C7773) * C48344) *
                C48365) *
               C3298 +
           (((C8556 - (C8555 + C8554) + C8557) * C4779 +
             (C8560 - (C8559 + C8558) + C8561) * C48344) *
                C4781 +
            ((C6456 * C2642 - (C6602 * C2635 + C6603 * C2641) +
              C6457 * C47993) *
                 C4779 +
             ((C113 * C1715 + C48250 * C1720) * C2642 -
              (C6457 * C2635 + C6456 * C2641) +
              (C113 * C1721 + C48250 * C1724) * C47993) *
                 C48344) *
                C48365) *
               C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2533 +
             (C113 * C127 + C48250 * C140) * C48392 - C168 * C2534 -
             C169 * C48385 + C170 * C2535 + C171 * C48372 - C172 * C2536 -
             C173 * C48351) *
                C4779 +
            (C168 * C2533 + C169 * C48392 - C170 * C2534 - C171 * C48385 +
             C172 * C2535 + C173 * C48372 - C174 * C2536 - C175 * C48351) *
                C48344) *
               C4781 +
           ((C7604 + C7605 - C7606 - C7607 + C7608 + C7609 - C7610 - C7611) *
                C4779 +
            (C7612 + C7613 - C7614 - C7615 + C7616 + C7617 - C7618 - C7619) *
                C48344) *
               C48365) *
              C3298 +
          (((C550 * C2534 -
             ((C113 * C496 + C48250 * C515) * C48392 +
              (C113 * C486 + C48250 * C497) * C2533) +
             C551 * C48385 - C552 * C2535 - C553 * C48372 + C554 * C2536 +
             C555 * C48351) *
                C4779 +
            (C552 * C2534 - (C551 * C48392 + C550 * C2533) + C553 * C48385 -
             C554 * C2535 - C555 * C48372 + C788 * C2536 + C789 * C48351) *
                C48344) *
               C4781 +
           ((C968 * C2534 - (C5596 * C48392 + C5597 * C2533) + C969 * C48385 -
             C970 * C2535 - C971 * C48372 + C972 * C2536 + C973 * C48351) *
                C4779 +
            (C970 * C2534 - (C969 * C48392 + C968 * C2533) + C971 * C48385 -
             C972 * C2535 - C973 * C48372 +
             (C113 * C939 + C48250 * C948) * C2536 +
             (C113 * C949 + C48250 * C954) * C48351) *
                C48344) *
               C48365) *
              C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2641 +
             (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
             C169 * C47993) *
                C4779 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                C48344) *
               C4781 +
           ((C7750 + C7751 - C7752 - C7753) * C4779 +
            (C7754 + C7755 - C7756 - C7757) * C48344) *
               C48365) *
              C48394 +
          (((C550 * C2642 -
             ((C113 * C496 + C48250 * C515) * C2635 +
              (C113 * C486 + C48250 * C497) * C2641) +
             C551 * C47993) *
                C4779 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47993) *
                C48344) *
               C4781 +
           ((C7968 - (C7969 + C7970) + C7971) * C4779 +
            (C7972 - (C7973 + C7974) + C7975) * C48344) *
               C48365) *
              C48391 +
          ((((C113 * C490 + C48250 * C505) * C2641 +
             (C113 * C506 + C48250 * C520) * C2635 - C556 * C2642 -
             C557 * C47993) *
                C4779 +
            (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C47993) *
                C48344) *
               C4781 +
           ((C7976 + C7977 - C7978 - C7979) * C4779 +
            (C7980 + C7981 - C7982 - C7983) * C48344) *
               C48365) *
              C48382 +
          (((C2316 * C2642 -
             ((C113 * C2025 + C48250 * C2035) * C2635 +
              (C113 * C2017 + C48250 * C2026) * C2641) +
             C2317 * C47993) *
                C4779 +
            (C2318 * C2642 - (C2317 * C2635 + C2316 * C2641) + C2319 * C47993) *
                C48344) *
               C4781 +
           ((C7324 * C2642 - (C7470 * C2635 + C7471 * C2641) + C7325 * C47993) *
                C4779 +
            ((C113 * C2419 + C48250 * C2424) * C2642 -
             (C7325 * C2635 + C7324 * C2641) +
             (C113 * C2425 + C48250 * C2428) * C47993) *
                C48344) *
               C48365) *
              C48363) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C47011 +
             (C113 * C127 + C48250 * C140) * C47988 - C168 * C47007 -
             C169 * C47996 + C170 * C47017 + C171 * C2901) *
                C4779 +
            (C168 * C47011 + C169 * C47988 - C170 * C47007 - C171 * C47996 +
             C172 * C47017 + C173 * C2901) *
                C48344) *
               C4781 +
           ((C8130 + C8131 - C8132 - C8133 + C8134 + C8135) * C4779 +
            (C8136 + C8137 - C8138 - C8139 + C8140 + C8141) * C48344) *
               C48365) *
              C48130 +
          (((C550 * C47007 -
             ((C113 * C496 + C48250 * C515) * C47988 +
              (C113 * C486 + C48250 * C497) * C47011) +
             C551 * C47996 - C552 * C47017 - C553 * C2901) *
                C4779 +
            (C552 * C47007 - (C551 * C47988 + C550 * C47011) + C553 * C47996 -
             C554 * C47017 - C555 * C2901) *
                C48344) *
               C4781 +
           ((C8348 - (C8349 + C8350) + C8351 - C8352 - C8353) * C4779 +
            (C8354 - (C8355 + C8356) + C8357 - C8358 - C8359) * C48344) *
               C48365) *
              C48137 +
          ((((C113 * C490 + C48250 * C505) * C47011 +
             (C113 * C506 + C48250 * C520) * C47988 - C556 * C47007 -
             C557 * C47996 + C558 * C47017 + C559 * C2901) *
                C4779 +
            (C556 * C47011 + C557 * C47988 - C558 * C47007 - C559 * C47996 +
             C560 * C47017 + C561 * C2901) *
                C48344) *
               C4781 +
           ((C6072 * C47011 + C6073 * C47988 - C2198 * C47007 - C2199 * C47996 +
             C2200 * C47017 + C2201 * C2901) *
                C4779 +
            (C2198 * C47011 + C2199 * C47988 - C2200 * C47007 - C2201 * C47996 +
             (C113 * C2185 + C48250 * C2186) * C47017 +
             (C113 * C2187 + C48250 * C2188) * C2901) *
                C48344) *
               C48365) *
              C3806) *
         C48035) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2533 +
             (C113 * C127 + C48250 * C140) * C48392 - C168 * C2534 -
             C169 * C48385 + C170 * C2535 + C171 * C48372 - C172 * C2536 -
             C173 * C48351) *
                C4779 +
            (C168 * C2533 + C169 * C48392 - C170 * C2534 - C171 * C48385 +
             C172 * C2535 + C173 * C48372 - C174 * C2536 - C175 * C48351) *
                C48344) *
               C4781 +
           ((C7604 + C7605 - C7606 - C7607 + C7608 + C7609 - C7610 - C7611) *
                C4779 +
            (C7612 + C7613 - C7614 - C7615 + C7616 + C7617 - C7618 - C7619) *
                C48344) *
               C48365) *
              C3298 +
          (((C550 * C2534 -
             ((C113 * C496 + C48250 * C515) * C48392 +
              (C113 * C486 + C48250 * C497) * C2533) +
             C551 * C48385 - C552 * C2535 - C553 * C48372 + C554 * C2536 +
             C555 * C48351) *
                C4779 +
            (C552 * C2534 - (C551 * C48392 + C550 * C2533) + C553 * C48385 -
             C554 * C2535 - C555 * C48372 + C788 * C2536 + C789 * C48351) *
                C48344) *
               C4781 +
           ((C968 * C2534 - (C5596 * C48392 + C5597 * C2533) + C969 * C48385 -
             C970 * C2535 - C971 * C48372 + C972 * C2536 + C973 * C48351) *
                C4779 +
            (C970 * C2534 - (C969 * C48392 + C968 * C2533) + C971 * C48385 -
             C972 * C2535 - C973 * C48372 +
             (C113 * C939 + C48250 * C948) * C2536 +
             (C113 * C949 + C48250 * C954) * C48351) *
                C48344) *
               C48365) *
              C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C2641 +
              (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
              C169 * C47993) *
                 C4779 +
             (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                 C48344) *
                C4781 +
            ((C7750 + C7751 - C7752 - C7753) * C4779 +
             (C7754 + C7755 - C7756 - C7757) * C48344) *
                C48365) *
               C3298 +
           (((C550 * C2642 -
              ((C113 * C496 + C48250 * C515) * C2635 +
               (C113 * C486 + C48250 * C497) * C2641) +
              C551 * C47993) *
                 C4779 +
             (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47993) *
                 C48344) *
                C4781 +
            ((C7968 - (C7969 + C7970) + C7971) * C4779 +
             (C7972 - (C7973 + C7974) + C7975) * C48344) *
                C48365) *
               C48134) *
              C48386 +
          ((((C7752 - (C7751 + C7750) + C7753) * C4779 +
             (C7756 - (C7755 + C7754) + C7757) * C48344) *
                C4781 +
            ((C7758 - (C7759 + C7760) + C7761) * C4779 +
             (C7762 - (C7763 + C7764) + C7765) * C48344) *
                C48365) *
               C3298 +
           (((C7970 + C7969 - C7968 - C7971) * C4779 +
             (C7974 + C7973 - C7972 - C7975) * C48344) *
                C4781 +
            ((C8554 + C8555 - C8556 - C8557) * C4779 +
             (C8558 + C8559 - C8560 - C8561) * C48344) *
                C48365) *
               C48134) *
              C48374 +
          ((((C7760 + C7759 - C7758 - C7761) * C4779 +
             (C7764 + C7763 - C7762 - C7765) * C48344) *
                C4781 +
            ((C7766 + C7767 - C7768 - C7769) * C4779 +
             (C7770 + C7771 - C7772 - C7773) * C48344) *
                C48365) *
               C3298 +
           (((C8556 - (C8555 + C8554) + C8557) * C4779 +
             (C8560 - (C8559 + C8558) + C8561) * C48344) *
                C4781 +
            ((C6456 * C2642 - (C6602 * C2635 + C6603 * C2641) +
              C6457 * C47993) *
                 C4779 +
             ((C113 * C1715 + C48250 * C1720) * C2642 -
              (C6457 * C2635 + C6456 * C2641) +
              (C113 * C1721 + C48250 * C1724) * C47993) *
                 C48344) *
                C48365) *
               C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C665 +
             (C113 * C127 + C48250 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48351) *
                C4779 +
            (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48351) *
                C48344) *
               C4781 +
           ((C5242 + C5243 - C5244 - C5245 + C5246 + C5247 - C5248 - C5249) *
                C4779 +
            (C5250 + C5251 - C5252 - C5253 + C5254 + C5255 - C5256 - C5257) *
                C48344) *
               C48365) *
              C48047 * C48315 +
          (((C5244 - (C5243 + C5242) + C5245 - C5246 - C5247 + C5248 + C5249) *
                C4779 +
            (C5252 - (C5251 + C5250) + C5253 - C5254 - C5255 + C5256 + C5257) *
                C48344) *
               C4781 +
           ((C367 * C666 - (C4960 * C659 + C4961 * C665) + C368 * C660 -
             C369 * C667 - C370 * C661 + C371 * C668 + C372 * C48351) *
                C4779 +
            (C369 * C666 - (C368 * C659 + C367 * C665) + C370 * C660 -
             C371 * C667 - C372 * C661 + (C113 * C305 + C48250 * C324) * C668 +
             (C113 * C325 + C48250 * C335) * C48351) *
                C48344) *
               C48365) *
              C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C47001 +
             (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
             C169 * C47993) *
                C4779 +
            (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                C48344) *
               C4781 +
           ((C6218 + C6219 - C6220 - C6221) * C4779 +
            (C6222 + C6223 - C6224 - C6225) * C48344) *
               C48365) *
              C48047 * C1431 +
          (((C6220 - (C6219 + C6218) + C6221) * C4779 +
            (C6224 - (C6223 + C6222) + C6225) * C48344) *
               C4781 +
           ((C6226 - (C6227 + C6228) + C6229) * C4779 +
            (C6230 - (C6231 + C6232) + C6233) * C48344) *
               C48365) *
              C48047 * C1432 +
          (((C6228 + C6227 - C6226 - C6229) * C4779 +
            (C6232 + C6231 - C6230 - C6233) * C48344) *
               C4781 +
           ((C6234 + C6235 - C6236 - C6237) * C4779 +
            (C6238 + C6239 - C6240 - C6241) * C48344) *
               C48365) *
              C48047 * C1433 +
          (((C6236 - (C6235 + C6234) + C6237) * C4779 +
            (C6240 - (C6239 + C6238) + C6241) * C48344) *
               C4781 +
           ((C5885 * C46982 - (C5886 * C48298 + C5887 * C47001) +
             C5884 * C47993) *
                C4779 +
            ((C113 * C1166 + C48250 * C1177) * C46982 -
             (C5884 * C48298 + C5885 * C47001) +
             (C113 * C1178 + C48250 * C1184) * C47993) *
                C48344) *
               C48365) *
              C48047 * C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C293 +
              (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
              C170 * C295 + C171 * C48339) *
                 C4779 +
             (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
              C172 * C295 + C173 * C48339) *
                 C48344) *
                C4781 +
            ((C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C4779 +
             (C4938 + C4939 - C4940 - C4941 + C4942 + C4943) * C48344) *
                C48365) *
               C48316 +
           (((C550 * C294 -
              ((C113 * C496 + C48250 * C515) * C287 +
               (C113 * C486 + C48250 * C497) * C293) +
              C551 * C288 - C552 * C295 - C553 * C48339) *
                 C4779 +
             (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
              C554 * C295 - C555 * C48339) *
                 C48344) *
                C4781 +
            ((C5582 - (C5598 + C5599) + C5587 - C5588 - C5589) * C4779 +
             (C5590 - (C5591 + C5592) + C5593 - C5594 - C5595) * C48344) *
                C48365) *
               C48134) *
              C48315 +
          ((((C4934 - (C4963 + C4962) + C4935 - C4936 - C4937) * C4779 +
             (C4940 - (C4939 + C4938) + C4941 - C4942 - C4943) * C48344) *
                C4781 +
            ((C4944 - (C4964 + C4965) + C4949 - C4950 - C4951) * C4779 +
             (C4952 - (C4953 + C4954) + C4955 - C4956 - C4957) * C48344) *
                C48365) *
               C48316 +
           (((C5599 + C5598 - C5582 - C5587 + C5588 + C5589) * C4779 +
             (C5592 + C5591 - C5590 - C5593 + C5594 + C5595) * C48344) *
                C4781 +
            (((C113 * C1300 + C48250 * C1315) * C293 +
              (C113 * C1314 + C48250 * C1327) * C287 - C1612 * C294 -
              C1613 * C288 + C1614 * C295 + C1615 * C48339) *
                 C4779 +
             (C1612 * C293 + C1613 * C287 - C1614 * C294 - C1615 * C288 +
              (C113 * C1599 + C48250 * C1600) * C295 +
              (C113 * C1601 + C48250 * C1602) * C48339) *
                 C48344) *
                C48365) *
               C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C4779 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C4781 +
            ((C5860 + C5861) * C4779 + (C5862 + C5863) * C48344) * C48365) *
               C48316 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C4779) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C4779) *
                C4781) *
               C48134) *
              C1431 +
          ((((C6051 + C6050) * C4779 + (C6049 + C6048) * C48344) * C4781 +
            ((C6082 + C6083) * C4779 + (C6062 + C6063) * C48344) * C48365) *
               C48134 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C4779) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C4779) * C4781) *
               C48316) *
              C1432 +
          ((((C5867 + C5866) * C4779 + (C5865 + C5864) * C48344) * C4781 +
            ((C5888 + C5889) * C4779 + (C5872 + C5873) * C48344) * C48365) *
               C48316 -
           (((C6596 + C6597) * C48344 + (C6604 + C6605) * C4779) * C48365 +
            ((C6063 + C6062) * C48344 + (C6083 + C6082) * C4779) * C4781) *
               C48134) *
              C1433 +
          ((((C6605 + C6604) * C4779 + (C6597 + C6596) * C48344) * C4781 +
            (((C113 * C6587 + C48250 * C6589) * C1160 +
              (C113 * C6590 + C48250 * C6593) * C47983) *
                 C4779 +
             ((C113 * C6588 + C48250 * C6591) * C1160 +
              (C113 * C6592 + C48250 * C6594) * C47983) *
                 C48344) *
                C48365) *
               C48134 -
           (((C5890 + C5891) * C48344 + (C5892 + C5893) * C4779) * C48365 +
            ((C5873 + C5872) * C48344 + (C5889 + C5888) * C4779) * C4781) *
               C48316) *
              C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C293 +
             (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48339) *
                C4779 +
            (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C48339) *
                C48344) *
               C4781 +
           ((C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C4779 +
            (C4938 + C4939 - C4940 - C4941 + C4942 + C4943) * C48344) *
               C48365) *
              C48047 * C48386 +
          (((C4934 - (C4963 + C4962) + C4935 - C4936 - C4937) * C4779 +
            (C4940 - (C4939 + C4938) + C4941 - C4942 - C4943) * C48344) *
               C4781 +
           ((C4944 - (C4964 + C4965) + C4949 - C4950 - C4951) * C4779 +
            (C4952 - (C4953 + C4954) + C4955 - C4956 - C4957) * C48344) *
               C48365) *
              C48047 * C48374 +
          (((C4965 + C4964 - C4944 - C4949 + C4950 + C4951) * C4779 +
            (C4954 + C4953 - C4952 - C4955 + C4956 + C4957) * C48344) *
               C4781 +
           (((C113 * C1163 + C48250 * C1172) * C293 +
             (C113 * C1171 + C48250 * C1181) * C287 - C1450 * C294 -
             C1451 * C288 + C1452 * C295 + C1453 * C48339) *
                C4779 +
            (C1450 * C293 + C1451 * C287 - C1452 * C294 - C1453 * C288 +
             (C113 * C1437 + C48250 * C1438) * C295 +
             (C113 * C1439 + C48250 * C1440) * C48339) *
                C48344) *
               C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C114 +
            (C113 * C127 + C48250 * C140) * C102 - C168 * C115 - C169 * C103 +
            C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 +
            C174 * C118 + C175 * C106) *
               C4779 +
           (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
            C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
            C176 * C118 + C177 * C106) *
               C48344) *
              C4781 +
          (((C113 * C297 + C48250 * C308) * C114 +
            (C113 * C307 + C48250 * C326) * C102 - C361 * C115 - C362 * C103 +
            C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 +
            C678 * C118 + C679 * C106) *
               C4779 +
           (C361 * C114 + C362 * C102 - C363 * C115 - C364 * C103 +
            C365 * C116 + C366 * C104 - C678 * C117 - C679 * C105 +
            (C113 * C669 + C48250 * C670) * C118 +
            (C113 * C671 + C48250 * C672) * C106) *
               C48344) *
              C48365) *
         C48047 * C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C293 +
             (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48339) *
                C4779 +
            (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C48339) *
                C48344) *
               C4781 +
           ((C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C4779 +
            (C4938 + C4939 - C4940 - C4941 + C4942 + C4943) * C48344) *
               C48365) *
              C48387 +
          (((C550 * C294 -
             ((C113 * C496 + C48250 * C515) * C287 +
              (C113 * C486 + C48250 * C497) * C293) +
             C551 * C288 - C552 * C295 - C553 * C48339) *
                C4779 +
            (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
             C554 * C295 - C555 * C48339) *
                C48344) *
               C4781 +
           ((C968 * C294 -
             ((C113 * C941 + C48250 * C950) * C287 +
              (C113 * C935 + C48250 * C940) * C293) +
             C969 * C288 - C970 * C295 - C971 * C48339) *
                C4779 +
            (C970 * C294 - (C969 * C287 + C968 * C293) + C971 * C288 -
             C972 * C295 - C973 * C48339) *
                C48344) *
               C48365) *
              C48376 +
          ((((C113 * C490 + C48250 * C505) * C293 +
             (C113 * C506 + C48250 * C520) * C287 - C556 * C294 - C557 * C288 +
             C558 * C295 + C559 * C48339) *
                C4779 +
            (C556 * C293 + C557 * C287 - C558 * C294 - C559 * C288 +
             C560 * C295 + C561 * C48339) *
                C48344) *
               C4781 +
           (((C113 * C1297 + C48250 * C1309) * C293 +
             (C113 * C1308 + C48250 * C1324) * C287 - C2198 * C294 -
             C2199 * C288 + C2200 * C295 + C2201 * C48339) *
                C4779 +
            (C2198 * C293 + C2199 * C287 - C2200 * C294 - C2201 * C288 +
             (C113 * C2185 + C48250 * C2186) * C295 +
             (C113 * C2187 + C48250 * C2188) * C48339) *
                C48344) *
               C48365) *
              C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1089 +
             (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
             C169 * C48370 + C170 * C1091 + C171 * C48339) *
                C4779 +
            (C168 * C1089 + C169 * C48383 - C170 * C1090 - C171 * C48370 +
             C172 * C1091 + C173 * C48339) *
                C48344) *
               C4781 +
           ((C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C4779 +
            (C5752 + C5753 - C5754 - C5755 + C5756 + C5757) * C48344) *
               C48365) *
              C48047 * C1086 +
          (((C5748 - (C5747 + C5746) + C5749 - C5750 - C5751) * C4779 +
            (C5754 - (C5753 + C5752) + C5755 - C5756 - C5757) * C48344) *
               C4781 +
           ((C5758 - (C5759 + C5760) + C5761 - C5762 - C5763) * C4779 +
            (C5764 - (C5765 + C5766) + C5767 - C5768 - C5769) * C48344) *
               C48365) *
              C48047 * C1087 +
          (((C5760 + C5759 - C5758 - C5761 + C5762 + C5763) * C4779 +
            (C5766 + C5765 - C5764 - C5767 + C5768 + C5769) * C48344) *
               C4781 +
           (((C113 * C1163 + C48250 * C1172) * C1089 +
             (C113 * C1171 + C48250 * C1181) * C48383 - C1450 * C1090 -
             C1451 * C48370 + C1452 * C1091 + C1453 * C48339) *
                C4779 +
            (C1450 * C1089 + C1451 * C48383 - C1452 * C1090 - C1453 * C48370 +
             (C113 * C1437 + C48250 * C1438) * C1091 +
             (C113 * C1439 + C48250 * C1440) * C48339) *
                C48344) *
               C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1160 +
             (C113 * C127 + C48250 * C140) * C47983) *
                C4779 +
            (C168 * C1160 + C169 * C47983) * C48344) *
               C4781 +
           ((C5860 + C5861) * C4779 + (C5862 + C5863) * C48344) * C48365) *
              C48047 * C1155 -
          (((C5864 + C5865) * C48344 + (C5866 + C5867) * C4779) * C48365 +
           ((C5863 + C5862) * C48344 + (C5861 + C5860) * C4779) * C4781) *
              C48047 * C1156 +
          (((C5867 + C5866) * C4779 + (C5865 + C5864) * C48344) * C4781 +
           ((C5888 + C5889) * C4779 + (C5872 + C5873) * C48344) * C48365) *
              C48047 * C1157 -
          (((C5890 + C5891) * C48344 + (C5892 + C5893) * C4779) * C48365 +
           ((C5873 + C5872) * C48344 + (C5889 + C5888) * C4779) * C4781) *
              C48047 * C1158 +
          (((C5893 + C5892) * C4779 + (C5891 + C5890) * C48344) * C4781 +
           (((C113 * C5851 + C48250 * C5853) * C1160 +
             (C113 * C5854 + C48250 * C5857) * C47983) *
                C4779 +
            ((C113 * C5852 + C48250 * C5855) * C1160 +
             (C113 * C5856 + C48250 * C5858) * C47983) *
                C48344) *
               C48365) *
              C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C4779 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C4781 +
            ((C5860 + C5861) * C4779 + (C5862 + C5863) * C48344) * C48365) *
               C48387 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C4779) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C4779) *
                C4781) *
               C48376 +
           ((((C113 * C490 + C48250 * C505) * C1160 +
              (C113 * C506 + C48250 * C520) * C47983) *
                 C4779 +
             (C556 * C1160 + C557 * C47983) * C48344) *
                C4781 +
            ((C6080 + C6081) * C4779 + (C6056 + C6057) * C48344) * C48365) *
               C48350) *
              C1086 +
          ((((C6051 + C6050) * C4779 + (C6049 + C6048) * C48344) * C4781 +
            ((C6082 + C6083) * C4779 + (C6062 + C6063) * C48344) * C48365) *
               C48376 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C4779) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C4779) * C4781) *
               C48387 -
           (((C6084 + C6085) * C48344 + (C6086 + C6087) * C4779) * C48365 +
            ((C6057 + C6056) * C48344 + (C6081 + C6080) * C4779) * C4781) *
               C48350) *
              C1087 +
          ((((C5867 + C5866) * C4779 + (C5865 + C5864) * C48344) * C4781 +
            ((C5888 + C5889) * C4779 + (C5872 + C5873) * C48344) * C48365) *
               C48387 -
           ((((C113 * C1719 + C48250 * C1723) * C47983 +
              (C113 * C1714 + C48250 * C1718) * C1160) *
                 C48344 +
             ((C113 * C1717 + C48250 * C1722) * C47983 +
              (C113 * C1713 + C48250 * C1716) * C1160) *
                 C4779) *
                C48365 +
            ((C6063 + C6062) * C48344 + (C6083 + C6082) * C4779) * C4781) *
               C48376 +
           (((C6087 + C6086) * C4779 + (C6085 + C6084) * C48344) * C4781 +
            (((C113 * C6039 + C48250 * C6041) * C1160 +
              (C113 * C6042 + C48250 * C6045) * C47983) *
                 C4779 +
             ((C113 * C6040 + C48250 * C6043) * C1160 +
              (C113 * C6044 + C48250 * C6046) * C47983) *
                 C48344) *
                C48365) *
               C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C665 +
             (C113 * C127 + C48250 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48351) *
                C4779 +
            (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48351) *
                C48344) *
               C4781 +
           ((C5242 + C5243 - C5244 - C5245 + C5246 + C5247 - C5248 - C5249) *
                C4779 +
            (C5250 + C5251 - C5252 - C5253 + C5254 + C5255 - C5256 - C5257) *
                C48344) *
               C48365) *
              C48316 +
          (((C550 * C666 -
             ((C113 * C496 + C48250 * C515) * C659 +
              (C113 * C486 + C48250 * C497) * C665) +
             C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
             C555 * C48351) *
                C4779 +
            (C552 * C666 - (C551 * C659 + C550 * C665) + C553 * C660 -
             C554 * C667 - C555 * C661 + C788 * C668 + C789 * C48351) *
                C48344) *
               C4781 +
           ((C968 * C666 -
             ((C113 * C941 + C48250 * C950) * C659 +
              (C113 * C935 + C48250 * C940) * C665) +
             C969 * C660 - C970 * C667 - C971 * C661 + C972 * C668 +
             C973 * C48351) *
                C4779 +
            (C970 * C666 - (C969 * C659 + C968 * C665) + C971 * C660 -
             C972 * C667 - C973 * C661 + (C113 * C939 + C48250 * C948) * C668 +
             (C113 * C949 + C48250 * C954) * C48351) *
                C48344) *
               C48365) *
              C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C47001 +
              (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
              C169 * C47993) *
                 C4779 +
             (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                 C48344) *
                C4781 +
            ((C6218 + C6219 - C6220 - C6221) * C4779 +
             (C6222 + C6223 - C6224 - C6225) * C48344) *
                C48365) *
               C48316 +
           (((C550 * C46982 -
              ((C113 * C496 + C48250 * C515) * C48298 +
               (C113 * C486 + C48250 * C497) * C47001) +
              C551 * C47993) *
                 C4779 +
             (C552 * C46982 - (C551 * C48298 + C550 * C47001) + C553 * C47993) *
                 C48344) *
                C4781 +
            ((C6436 - (C6437 + C6438) + C6439) * C4779 +
             (C6440 - (C6441 + C6442) + C6443) * C48344) *
                C48365) *
               C48134) *
              C1086 +
          ((((C6220 - (C6219 + C6218) + C6221) * C4779 +
             (C6224 - (C6223 + C6222) + C6225) * C48344) *
                C4781 +
            ((C6226 - (C6227 + C6228) + C6229) * C4779 +
             (C6230 - (C6231 + C6232) + C6233) * C48344) *
                C48365) *
               C48316 +
           (((C6438 + C6437 - C6436 - C6439) * C4779 +
             (C6442 + C6441 - C6440 - C6443) * C48344) *
                C4781 +
            ((C6444 + C6445 - C6446 - C6447) * C4779 +
             (C6448 + C6449 - C6450 - C6451) * C48344) *
                C48365) *
               C48134) *
              C1087 +
          ((((C6228 + C6227 - C6226 - C6229) * C4779 +
             (C6232 + C6231 - C6230 - C6233) * C48344) *
                C4781 +
            ((C6234 + C6235 - C6236 - C6237) * C4779 +
             (C6238 + C6239 - C6240 - C6241) * C48344) *
                C48365) *
               C48316 +
           (((C6446 - (C6445 + C6444) + C6447) * C4779 +
             (C6450 - (C6449 + C6448) + C6451) * C48344) *
                C4781 +
            ((C6456 * C46982 -
              ((C113 * C1717 + C48250 * C1722) * C48298 +
               (C113 * C1713 + C48250 * C1716) * C47001) +
              C6457 * C47993) *
                 C4779 +
             ((C113 * C1715 + C48250 * C1720) * C46982 -
              (C6457 * C48298 + C6456 * C47001) +
              (C113 * C1721 + C48250 * C1724) * C47993) *
                 C48344) *
                C48365) *
               C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C114 +
            (C113 * C127 + C48250 * C140) * C102 - C168 * C115 - C169 * C103 +
            C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 +
            C174 * C118 + C175 * C106) *
               C4779 +
           (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
            C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
            C176 * C118 + C177 * C106) *
               C48344) *
              C4781 +
          (((C113 * C297 + C48250 * C308) * C114 +
            (C113 * C307 + C48250 * C326) * C102 - C361 * C115 - C362 * C103 +
            C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 +
            C678 * C118 + C679 * C106) *
               C4779 +
           (C361 * C114 + C362 * C102 - C363 * C115 - C364 * C103 +
            C365 * C116 + C366 * C104 - C678 * C117 - C679 * C105 +
            (C113 * C669 + C48250 * C670) * C118 +
            (C113 * C671 + C48250 * C672) * C106) *
               C48344) *
              C48365) *
         C48047 * C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C293 +
             (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48339) *
                C4779 +
            (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C48339) *
                C48344) *
               C4781 +
           ((C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C4779 +
            (C4938 + C4939 - C4940 - C4941 + C4942 + C4943) * C48344) *
               C48365) *
              C48047 * C48386 +
          (((C4934 - (C4963 + C4962) + C4935 - C4936 - C4937) * C4779 +
            (C4940 - (C4939 + C4938) + C4941 - C4942 - C4943) * C48344) *
               C4781 +
           ((C4944 - (C4964 + C4965) + C4949 - C4950 - C4951) * C4779 +
            (C4952 - (C4953 + C4954) + C4955 - C4956 - C4957) * C48344) *
               C48365) *
              C48047 * C48374 +
          (((C4965 + C4964 - C4944 - C4949 + C4950 + C4951) * C4779 +
            (C4954 + C4953 - C4952 - C4955 + C4956 + C4957) * C48344) *
               C4781 +
           (((C113 * C1163 + C48250 * C1172) * C293 +
             (C113 * C1171 + C48250 * C1181) * C287 - C1450 * C294 -
             C1451 * C288 + C1452 * C295 + C1453 * C48339) *
                C4779 +
            (C1450 * C293 + C1451 * C287 - C1452 * C294 - C1453 * C288 +
             (C113 * C1437 + C48250 * C1438) * C295 +
             (C113 * C1439 + C48250 * C1440) * C48339) *
                C48344) *
               C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1089 +
             (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
             C169 * C48370 + C170 * C1091 + C171 * C48339) *
                C4779 +
            (C168 * C1089 + C169 * C48383 - C170 * C1090 - C171 * C48370 +
             C172 * C1091 + C173 * C48339) *
                C48344) *
               C4781 +
           ((C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C4779 +
            (C5752 + C5753 - C5754 - C5755 + C5756 + C5757) * C48344) *
               C48365) *
              C48047 * C1086 +
          (((C5748 - (C5747 + C5746) + C5749 - C5750 - C5751) * C4779 +
            (C5754 - (C5753 + C5752) + C5755 - C5756 - C5757) * C48344) *
               C4781 +
           ((C5758 - (C5759 + C5760) + C5761 - C5762 - C5763) * C4779 +
            (C5764 - (C5765 + C5766) + C5767 - C5768 - C5769) * C48344) *
               C48365) *
              C48047 * C1087 +
          (((C5760 + C5759 - C5758 - C5761 + C5762 + C5763) * C4779 +
            (C5766 + C5765 - C5764 - C5767 + C5768 + C5769) * C48344) *
               C4781 +
           (((C113 * C1163 + C48250 * C1172) * C1089 +
             (C113 * C1171 + C48250 * C1181) * C48383 - C1450 * C1090 -
             C1451 * C48370 + C1452 * C1091 + C1453 * C48339) *
                C4779 +
            (C1450 * C1089 + C1451 * C48383 - C1452 * C1090 - C1453 * C48370 +
             (C113 * C1437 + C48250 * C1438) * C1091 +
             (C113 * C1439 + C48250 * C1440) * C48339) *
                C48344) *
               C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1160 +
             (C113 * C127 + C48250 * C140) * C47983) *
                C4779 +
            (C168 * C1160 + C169 * C47983) * C48344) *
               C4781 +
           ((C5860 + C5861) * C4779 + (C5862 + C5863) * C48344) * C48365) *
              C48047 * C1155 -
          (((C5864 + C5865) * C48344 + (C5866 + C5867) * C4779) * C48365 +
           ((C5863 + C5862) * C48344 + (C5861 + C5860) * C4779) * C4781) *
              C48047 * C1156 +
          (((C5867 + C5866) * C4779 + (C5865 + C5864) * C48344) * C4781 +
           ((C5888 + C5889) * C4779 + (C5872 + C5873) * C48344) * C48365) *
              C48047 * C1157 -
          (((C5890 + C5891) * C48344 + (C5892 + C5893) * C4779) * C48365 +
           ((C5873 + C5872) * C48344 + (C5889 + C5888) * C4779) * C4781) *
              C48047 * C1158 +
          (((C5893 + C5892) * C4779 + (C5891 + C5890) * C48344) * C4781 +
           (((C113 * C5851 + C48250 * C5853) * C1160 +
             (C113 * C5854 + C48250 * C5857) * C47983) *
                C4779 +
            ((C113 * C5852 + C48250 * C5855) * C1160 +
             (C113 * C5856 + C48250 * C5858) * C47983) *
                C48344) *
               C48365) *
              C48047 * C1159)) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C47011 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C47988 -
            (C10668 + C10669) * C47007 - (C10670 + C10671) * C47996 +
            (C10672 + C10673) * C47017 + (C10674 + C10675) * C2901) *
               C4779 +
           ((C10669 + C10668) * C47011 + (C10671 + C10670) * C47988 -
            (C10673 + C10672) * C47007 - (C10675 + C10674) * C47996 +
            (C10677 + C10676) * C47017 + (C10679 + C10678) * C2901) *
               C48344) *
              C48235 * C48047 * C48090 +
          (((C10862 + C10863) * C47007 -
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C47988 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C47011) +
            (C10864 + C10865) * C47996 - (C10866 + C10867) * C47017 -
            (C10868 + C10869) * C2901) *
               C4779 +
           ((C10867 + C10866) * C47007 -
            ((C10865 + C10864) * C47988 + (C10863 + C10862) * C47011) +
            (C10869 + C10868) * C47996 - (C11211 + C11210) * C47017 -
            (C11213 + C11212) * C2901) *
               C48344) *
              C48235 * C48047 * C48097 +
          (((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                C47011 +
            (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                C47988 -
            (C10870 + C10871) * C47007 - (C10872 + C10873) * C47996 +
            (C10874 + C10875) * C47017 + (C10876 + C10877) * C2901) *
               C4779 +
           ((C10871 + C10870) * C47011 + (C10873 + C10872) * C47988 -
            (C10875 + C10874) * C47007 - (C10877 + C10876) * C47996 +
            (C10633 * C304 + C10631 * C322 + C10634 * C1599 + C48367 * C1600) *
                C47017 +
            (C10633 * C323 + C10631 * C334 + C10634 * C1601 + C48367 * C1602) *
                C2901) *
               C48344) *
              C48235 * C48047 * C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C2641 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C2635 -
             (C10668 + C10669) * C2642 - (C10670 + C10671) * C47993) *
                C4779 +
            ((C10669 + C10668) * C2641 + (C10671 + C10670) * C2635 -
             (C10673 + C10672) * C2642 - (C10675 + C10674) * C47993) *
                C48344) *
               C48235 * C48316 +
           (((C11056 + C11057) * C2642 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C2635 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C2641) +
             (C11058 + C11059) * C47993) *
                C4779 +
            ((C11061 + C11060) * C2642 -
             ((C11059 + C11058) * C2635 + (C11057 + C11056) * C2641) +
             (C11063 + C11062) * C47993) *
                C48344) *
               C48235 * C48134) *
              C48090 +
          ((((C10862 + C10863) * C2642 -
             ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                  C2635 +
              (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                  C2641) +
             (C10864 + C10865) * C47993) *
                C4779 +
            ((C10867 + C10866) * C2642 -
             ((C10865 + C10864) * C2635 + (C10863 + C10862) * C2641) +
             (C10869 + C10868) * C47993) *
                C48344) *
               C48235 * C48316 +
           (((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C2641 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C2635 -
             (C11566 + C11567) * C2642 - (C11568 + C11569) * C47993) *
                C4779 +
            ((C11567 + C11566) * C2641 + (C11569 + C11568) * C2635 -
             (C11571 + C11570) * C2642 - (C11573 + C11572) * C47993) *
                C48344) *
               C48235 * C48134) *
              C48097 +
          ((((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                 C2641 +
             (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                 C2635 -
             (C10870 + C10871) * C2642 - (C10872 + C10873) * C47993) *
                C4779 +
            ((C10871 + C10870) * C2641 + (C10873 + C10872) * C2635 -
             (C10875 + C10874) * C2642 - (C10877 + C10876) * C47993) *
                C48344) *
               C48235 * C48316 +
           (((C12292 + C12293) * C2642 -
             ((C10634 * C1317 + C48367 * C1328 + C10633 * C1314 +
               C10631 * C1327) *
                  C2635 +
              (C10634 * C1301 + C48367 * C1316 + C10633 * C1300 +
               C10631 * C1315) *
                  C2641) +
             (C12294 + C12295) * C47993) *
                C4779 +
            ((C10633 * C1298 + C10631 * C1311 + C10634 * C1303 +
              C48367 * C1320) *
                 C2642 -
             ((C12295 + C12294) * C2635 + (C12293 + C12292) * C2641) +
             (C10633 * C1310 + C10631 * C1325 + C10634 * C1321 +
              C48367 * C1330) *
                 C47993) *
                C48344) *
               C48235 * C48134) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C2641 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C2635 -
            (C10668 + C10669) * C2642 - (C10670 + C10671) * C47993) *
               C4779 +
           ((C10669 + C10668) * C2641 + (C10671 + C10670) * C2635 -
            (C10673 + C10672) * C2642 - (C10675 + C10674) * C47993) *
               C48344) *
              C48235 * C48047 * C48393 +
          (((C10862 + C10863) * C2642 -
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C2635 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C2641) +
            (C10864 + C10865) * C47993) *
               C4779 +
           ((C10867 + C10866) * C2642 -
            ((C10865 + C10864) * C2635 + (C10863 + C10862) * C2641) +
            (C10869 + C10868) * C47993) *
               C48344) *
              C48235 * C48047 * C48389 +
          (((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                C2641 +
            (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                C2635 -
            (C10870 + C10871) * C2642 - (C10872 + C10873) * C47993) *
               C4779 +
           ((C10871 + C10870) * C2641 + (C10873 + C10872) * C2635 -
            (C10875 + C10874) * C2642 - (C10877 + C10876) * C47993) *
               C48344) *
              C48235 * C48047 * C48379 +
          (((C12086 + C12087) * C2642 -
            ((C10634 * C1717 + C48367 * C1722 + C10633 * C1171 +
              C10631 * C1181) *
                 C2635 +
             (C10634 * C1713 + C48367 * C1716 + C10633 * C1163 +
              C10631 * C1172) *
                 C2641) +
            (C12088 + C12089) * C47993) *
               C4779 +
           ((C10633 * C1161 + C10631 * C1168 + C10634 * C1715 +
             C48367 * C1720) *
                C2642 -
            ((C12089 + C12088) * C2635 + (C12087 + C12086) * C2641) +
            (C10633 * C1167 + C10631 * C1179 + C10634 * C1721 +
             C48367 * C1724) *
                C47993) *
               C48344) *
              C48235 * C48047 * C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C2533 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48392 -
            (C10668 + C10669) * C2534 - (C10670 + C10671) * C48385 +
            (C10672 + C10673) * C2535 + (C10674 + C10675) * C48372 -
            (C10676 + C10677) * C2536 - (C10678 + C10679) * C48351) *
               C4779 +
           ((C10669 + C10668) * C2533 + (C10671 + C10670) * C48392 -
            (C10673 + C10672) * C2534 - (C10675 + C10674) * C48385 +
            (C10677 + C10676) * C2535 + (C10679 + C10678) * C48372 -
            (C10681 + C10680) * C2536 - (C10683 + C10682) * C48351) *
               C48344) *
              C48235 * C48047 * C2531 +
          (((C10862 + C10863) * C2534 -
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C48392 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C2533) +
            (C10864 + C10865) * C48385 - (C10866 + C10867) * C2535 -
            (C10868 + C10869) * C48372 + (C11210 + C11211) * C2536 +
            (C11212 + C11213) * C48351) *
               C4779 +
           ((C10867 + C10866) * C2534 -
            ((C10865 + C10864) * C48392 + (C10863 + C10862) * C2533) +
            (C10869 + C10868) * C48385 - (C11211 + C11210) * C2535 -
            (C11213 + C11212) * C48372 +
            (C10633 * C300 + C10631 * C314 + C10634 * C939 + C48367 * C948) *
                C2536 +
            (C10633 * C315 + C10631 * C330 + C10634 * C949 + C48367 * C954) *
                C48351) *
               C48344) *
              C48235 * C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C2641 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C2635 -
             (C10668 + C10669) * C2642 - (C10670 + C10671) * C47993) *
                C4779 +
            ((C10669 + C10668) * C2641 + (C10671 + C10670) * C2635 -
             (C10673 + C10672) * C2642 - (C10675 + C10674) * C47993) *
                C48344) *
               C48235 * C48387 +
           (((C11056 + C11057) * C2642 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C2635 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C2641) +
             (C11058 + C11059) * C47993) *
                C4779 +
            ((C11061 + C11060) * C2642 -
             ((C11059 + C11058) * C2635 + (C11057 + C11056) * C2641) +
             (C11063 + C11062) * C47993) *
                C48344) *
               C48235 * C48376 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C2641 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C2635 -
             (C11064 + C11065) * C2642 - (C11066 + C11067) * C47993) *
                C4779 +
            ((C11065 + C11064) * C2641 + (C11067 + C11066) * C2635 -
             (C11069 + C11068) * C2642 - (C11071 + C11070) * C47993) *
                C48344) *
               C48235 * C48350) *
              C2531 +
          ((((C10862 + C10863) * C2642 -
             ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                  C2635 +
              (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                  C2641) +
             (C10864 + C10865) * C47993) *
                C4779 +
            ((C10867 + C10866) * C2642 -
             ((C10865 + C10864) * C2635 + (C10863 + C10862) * C2641) +
             (C10869 + C10868) * C47993) *
                C48344) *
               C48235 * C48387 +
           (((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C2641 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C2635 -
             (C11566 + C11567) * C2642 - (C11568 + C11569) * C47993) *
                C4779 +
            ((C11567 + C11566) * C2641 + (C11569 + C11568) * C2635 -
             (C11571 + C11570) * C2642 - (C11573 + C11572) * C47993) *
                C48344) *
               C48235 * C48376 +
           (((C13010 + C13011) * C2642 -
             ((C10634 * C2421 + C48367 * C2426 + C10633 * C1308 +
               C10631 * C1324) *
                  C2635 +
              (C10634 * C2417 + C48367 * C2420 + C10633 * C1297 +
               C10631 * C1309) *
                  C2641) +
             (C13012 + C13013) * C47993) *
                C4779 +
            ((C10633 * C1295 + C10631 * C1305 + C10634 * C2419 +
              C48367 * C2424) *
                 C2642 -
             ((C13013 + C13012) * C2635 + (C13011 + C13010) * C2641) +
             (C10633 * C1304 + C10631 * C1322 + C10634 * C2425 +
              C48367 * C2428) *
                 C47993) *
                C48344) *
               C48235 * C48350) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C47011 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47988 -
             (C10668 + C10669) * C47007 - (C10670 + C10671) * C47996 +
             (C10672 + C10673) * C47017 + (C10674 + C10675) * C2901) *
                C4779 +
            ((C10669 + C10668) * C47011 + (C10671 + C10670) * C47988 -
             (C10673 + C10672) * C47007 - (C10675 + C10674) * C47996 +
             (C10677 + C10676) * C47017 + (C10679 + C10678) * C2901) *
                C48344) *
               C48235 * C48316 +
           (((C11056 + C11057) * C47007 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C47988 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C47011) +
             (C11058 + C11059) * C47996 - (C11060 + C11061) * C47017 -
             (C11062 + C11063) * C2901) *
                C4779 +
            ((C11061 + C11060) * C47007 -
             ((C11059 + C11058) * C47988 + (C11057 + C11056) * C47011) +
             (C11063 + C11062) * C47996 - (C11353 + C11352) * C47017 -
             (C11355 + C11354) * C2901) *
                C48344) *
               C48235 * C48134) *
              C2531 +
          ((((C10862 + C10863) * C47007 -
             ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                  C47988 +
              (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                  C47011) +
             (C10864 + C10865) * C47996 - (C10866 + C10867) * C47017 -
             (C10868 + C10869) * C2901) *
                C4779 +
            ((C10867 + C10866) * C47007 -
             ((C10865 + C10864) * C47988 + (C10863 + C10862) * C47011) +
             (C10869 + C10868) * C47996 - (C11211 + C11210) * C47017 -
             (C11213 + C11212) * C2901) *
                C48344) *
               C48235 * C48316 +
           (((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C47011 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C47988 -
             (C11566 + C11567) * C47007 - (C11568 + C11569) * C47996 +
             (C11570 + C11571) * C47017 + (C11572 + C11573) * C2901) *
                C4779 +
            ((C11567 + C11566) * C47011 + (C11569 + C11568) * C47988 -
             (C11571 + C11570) * C47007 - (C11573 + C11572) * C47996 +
             (C10633 * C938 + C10631 * C946 + C10634 * C2185 + C48367 * C2186) *
                 C47017 +
             (C10633 * C947 + C10631 * C953 + C10634 * C2187 + C48367 * C2188) *
                 C2901) *
                C48344) *
               C48235 * C48134) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C2533 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48392 -
            (C10668 + C10669) * C2534 - (C10670 + C10671) * C48385 +
            (C10672 + C10673) * C2535 + (C10674 + C10675) * C48372 -
            (C10676 + C10677) * C2536 - (C10678 + C10679) * C48351) *
               C4779 +
           ((C10669 + C10668) * C2533 + (C10671 + C10670) * C48392 -
            (C10673 + C10672) * C2534 - (C10675 + C10674) * C48385 +
            (C10677 + C10676) * C2535 + (C10679 + C10678) * C48372 -
            (C10681 + C10680) * C2536 - (C10683 + C10682) * C48351) *
               C48344) *
              C48235 * C48047 * C2531 +
          (((C10862 + C10863) * C2534 -
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C48392 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C2533) +
            (C10864 + C10865) * C48385 - (C10866 + C10867) * C2535 -
            (C10868 + C10869) * C48372 + (C11210 + C11211) * C2536 +
            (C11212 + C11213) * C48351) *
               C4779 +
           ((C10867 + C10866) * C2534 -
            ((C10865 + C10864) * C48392 + (C10863 + C10862) * C2533) +
            (C10869 + C10868) * C48385 - (C11211 + C11210) * C2535 -
            (C11213 + C11212) * C48372 +
            (C10633 * C300 + C10631 * C314 + C10634 * C939 + C48367 * C948) *
                C2536 +
            (C10633 * C315 + C10631 * C330 + C10634 * C949 + C48367 * C954) *
                C48351) *
               C48344) *
              C48235 * C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C2641 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C2635 -
            (C10668 + C10669) * C2642 - (C10670 + C10671) * C47993) *
               C4779 +
           ((C10669 + C10668) * C2641 + (C10671 + C10670) * C2635 -
            (C10673 + C10672) * C2642 - (C10675 + C10674) * C47993) *
               C48344) *
              C48235 * C48047 * C48393 +
          (((C10862 + C10863) * C2642 -
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C2635 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C2641) +
            (C10864 + C10865) * C47993) *
               C4779 +
           ((C10867 + C10866) * C2642 -
            ((C10865 + C10864) * C2635 + (C10863 + C10862) * C2641) +
            (C10869 + C10868) * C47993) *
               C48344) *
              C48235 * C48047 * C48389 +
          (((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                C2641 +
            (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                C2635 -
            (C10870 + C10871) * C2642 - (C10872 + C10873) * C47993) *
               C4779 +
           ((C10871 + C10870) * C2641 + (C10873 + C10872) * C2635 -
            (C10875 + C10874) * C2642 - (C10877 + C10876) * C47993) *
               C48344) *
              C48235 * C48047 * C48379 +
          (((C12086 + C12087) * C2642 -
            ((C10634 * C1717 + C48367 * C1722 + C10633 * C1171 +
              C10631 * C1181) *
                 C2635 +
             (C10634 * C1713 + C48367 * C1716 + C10633 * C1163 +
              C10631 * C1172) *
                 C2641) +
            (C12088 + C12089) * C47993) *
               C4779 +
           ((C10633 * C1161 + C10631 * C1168 + C10634 * C1715 +
             C48367 * C1720) *
                C2642 -
            ((C12089 + C12088) * C2635 + (C12087 + C12086) * C2641) +
            (C10633 * C1167 + C10631 * C1179 + C10634 * C1721 +
             C48367 * C1724) *
                C47993) *
               C48344) *
              C48235 * C48047 * C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C47001 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C48298 -
             (C10668 + C10669) * C46982 - (C10670 + C10671) * C47993) *
                C4779 +
            ((C10669 + C10668) * C47001 + (C10671 + C10670) * C48298 -
             (C10673 + C10672) * C46982 - (C10675 + C10674) * C47993) *
                C48344) *
               C48235 * C3298 +
           (((C11056 + C11057) * C46982 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C48298 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C47001) +
             (C11058 + C11059) * C47993) *
                C4779 +
            ((C11061 + C11060) * C46982 -
             ((C11059 + C11058) * C48298 + (C11057 + C11056) * C47001) +
             (C11063 + C11062) * C47993) *
                C48344) *
               C48235 * C48134) *
              C48090 +
          ((((C10862 + C10863) * C46982 -
             ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                  C48298 +
              (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                  C47001) +
             (C10864 + C10865) * C47993) *
                C4779 +
            ((C10867 + C10866) * C46982 -
             ((C10865 + C10864) * C48298 + (C10863 + C10862) * C47001) +
             (C10869 + C10868) * C47993) *
                C48344) *
               C48235 * C3298 +
           (((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C47001 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C48298 -
             (C11566 + C11567) * C46982 - (C11568 + C11569) * C47993) *
                C4779 +
            ((C11567 + C11566) * C47001 + (C11569 + C11568) * C48298 -
             (C11571 + C11570) * C46982 - (C11573 + C11572) * C47993) *
                C48344) *
               C48235 * C48134) *
              C48097 +
          ((((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                 C47001 +
             (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                 C48298 -
             (C10870 + C10871) * C46982 - (C10872 + C10873) * C47993) *
                C4779 +
            ((C10871 + C10870) * C47001 + (C10873 + C10872) * C48298 -
             (C10875 + C10874) * C46982 - (C10877 + C10876) * C47993) *
                C48344) *
               C48235 * C3298 +
           (((C12292 + C12293) * C46982 -
             ((C10634 * C1317 + C48367 * C1328 + C10633 * C1314 +
               C10631 * C1327) *
                  C48298 +
              (C10634 * C1301 + C48367 * C1316 + C10633 * C1300 +
               C10631 * C1315) *
                  C47001) +
             (C12294 + C12295) * C47993) *
                C4779 +
            ((C10633 * C1298 + C10631 * C1311 + C10634 * C1303 +
              C48367 * C1320) *
                 C46982 -
             ((C12295 + C12294) * C48298 + (C12293 + C12292) * C47001) +
             (C10633 * C1310 + C10631 * C1325 + C10634 * C1321 +
              C48367 * C1330) *
                 C47993) *
                C48344) *
               C48235 * C48134) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C4779 +
            ((C10669 + C10668) * C1160 + (C10671 + C10670) * C47983) * C48344) *
               C48235 * C48130 -
           (((C11059 + C11058) * C47983 + (C11057 + C11056) * C1160) * C48344 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C4779) *
               C48235 * C48137 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C1160 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C47983) *
                C4779 +
            ((C11065 + C11064) * C1160 + (C11067 + C11066) * C47983) * C48344) *
               C48235 * C3806) *
              C48090 +
          ((((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C1160 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C47983) *
                C4779 +
            ((C11567 + C11566) * C1160 + (C11569 + C11568) * C47983) * C48344) *
               C48235 * C48137 -
           (((C10865 + C10864) * C47983 + (C10863 + C10862) * C1160) * C48344 +
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C47983 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C1160) *
                C4779) *
               C48235 * C48130 -
           (((C13013 + C13012) * C47983 + (C13011 + C13010) * C1160) * C48344 +
            ((C10634 * C2421 + C48367 * C2426 + C10633 * C1308 +
              C10631 * C1324) *
                 C47983 +
             (C10634 * C2417 + C48367 * C2420 + C10633 * C1297 +
              C10631 * C1309) *
                 C1160) *
                C4779) *
               C48235 * C3806) *
              C48097 +
          ((((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                 C1160 +
             (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                 C47983) *
                C4779 +
            ((C10871 + C10870) * C1160 + (C10873 + C10872) * C47983) * C48344) *
               C48235 * C48130 -
           (((C12295 + C12294) * C47983 + (C12293 + C12292) * C1160) * C48344 +
            ((C10634 * C1317 + C48367 * C1328 + C10633 * C1314 +
              C10631 * C1327) *
                 C47983 +
             (C10634 * C1301 + C48367 * C1316 + C10633 * C1300 +
              C10631 * C1315) *
                 C1160) *
                C4779) *
               C48235 * C48137 +
           (((C10633 * C1301 + C10631 * C1316 + C10634 * C7455 +
              C48367 * C7457) *
                 C1160 +
             (C10633 * C1317 + C10631 * C1328 + C10634 * C7458 +
              C48367 * C7461) *
                 C47983) *
                C4779 +
            ((C10633 * C1302 + C10631 * C1318 + C10634 * C7456 +
              C48367 * C7459) *
                 C1160 +
             (C10633 * C1319 + C10631 * C1329 + C10634 * C7460 +
              C48367 * C7462) *
                 C47983) *
                C48344) *
               C48235 * C3806) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C4779 +
            ((C10669 + C10668) * C1160 + (C10671 + C10670) * C47983) * C48344) *
               C48235 * C3298 -
           (((C11059 + C11058) * C47983 + (C11057 + C11056) * C1160) * C48344 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C4779) *
               C48235 * C48134) *
              C48393 +
          ((((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C1160 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C47983) *
                C4779 +
            ((C11567 + C11566) * C1160 + (C11569 + C11568) * C47983) * C48344) *
               C48235 * C48134 -
           (((C10865 + C10864) * C47983 + (C10863 + C10862) * C1160) * C48344 +
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C47983 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C1160) *
                C4779) *
               C48235 * C3298) *
              C48389 +
          ((((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                 C1160 +
             (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                 C47983) *
                C4779 +
            ((C10871 + C10870) * C1160 + (C10873 + C10872) * C47983) * C48344) *
               C48235 * C3298 -
           (((C12295 + C12294) * C47983 + (C12293 + C12292) * C1160) * C48344 +
            ((C10634 * C1317 + C48367 * C1328 + C10633 * C1314 +
              C10631 * C1327) *
                 C47983 +
             (C10634 * C1301 + C48367 * C1316 + C10633 * C1300 +
              C10631 * C1315) *
                 C1160) *
                C4779) *
               C48235 * C48134) *
              C48379 +
          ((((C10633 * C1713 + C10631 * C1716 + C10634 * C6039 +
              C48367 * C6041) *
                 C1160 +
             (C10633 * C1717 + C10631 * C1722 + C10634 * C6042 +
              C48367 * C6045) *
                 C47983) *
                C4779 +
            ((C10633 * C1714 + C10631 * C1718 + C10634 * C6040 +
              C48367 * C6043) *
                 C1160 +
             (C10633 * C1719 + C10631 * C1723 + C10634 * C6044 +
              C48367 * C6046) *
                 C47983) *
                C48344) *
               C48235 * C48134 -
           (((C12089 + C12088) * C47983 + (C12087 + C12086) * C1160) * C48344 +
            ((C10634 * C1717 + C48367 * C1722 + C10633 * C1171 +
              C10631 * C1181) *
                 C47983 +
             (C10634 * C1713 + C48367 * C1716 + C10633 * C1163 +
              C10631 * C1172) *
                 C1160) *
                C4779) *
               C48235 * C3298) *
              C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1089 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C48383 -
             (C10668 + C10669) * C1090 - (C10670 + C10671) * C48370 +
             (C10672 + C10673) * C1091 + (C10674 + C10675) * C48339) *
                C4779 +
            ((C10669 + C10668) * C1089 + (C10671 + C10670) * C48383 -
             (C10673 + C10672) * C1090 - (C10675 + C10674) * C48370 +
             (C10677 + C10676) * C1091 + (C10679 + C10678) * C48339) *
                C48344) *
               C48235 * C3298 +
           (((C11056 + C11057) * C1090 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C48383 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C1089) +
             (C11058 + C11059) * C48370 - (C11060 + C11061) * C1091 -
             (C11062 + C11063) * C48339) *
                C4779 +
            ((C11061 + C11060) * C1090 -
             ((C11059 + C11058) * C48383 + (C11057 + C11056) * C1089) +
             (C11063 + C11062) * C48370 - (C11353 + C11352) * C1091 -
             (C11355 + C11354) * C48339) *
                C48344) *
               C48235 * C48134) *
              C2531 +
          ((((C10862 + C10863) * C1090 -
             ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                  C48383 +
              (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                  C1089) +
             (C10864 + C10865) * C48370 - (C10866 + C10867) * C1091 -
             (C10868 + C10869) * C48339) *
                C4779 +
            ((C10867 + C10866) * C1090 -
             ((C10865 + C10864) * C48383 + (C10863 + C10862) * C1089) +
             (C10869 + C10868) * C48370 - (C11211 + C11210) * C1091 -
             (C11213 + C11212) * C48339) *
                C48344) *
               C48235 * C3298 +
           (((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C1089 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C48383 -
             (C11566 + C11567) * C1090 - (C11568 + C11569) * C48370 +
             (C11570 + C11571) * C1091 + (C11572 + C11573) * C48339) *
                C4779 +
            ((C11567 + C11566) * C1089 + (C11569 + C11568) * C48383 -
             (C11571 + C11570) * C1090 - (C11573 + C11572) * C48370 +
             (C10633 * C938 + C10631 * C946 + C10634 * C2185 + C48367 * C2186) *
                 C1091 +
             (C10633 * C947 + C10631 * C953 + C10634 * C2187 + C48367 * C2188) *
                 C48339) *
                C48344) *
               C48235 * C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C4779 +
            ((C10669 + C10668) * C1160 + (C10671 + C10670) * C47983) * C48344) *
               C48235 * C48394 -
           (((C11059 + C11058) * C47983 + (C11057 + C11056) * C1160) * C48344 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C4779) *
               C48235 * C48391 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C1160 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C47983) *
                C4779 +
            ((C11065 + C11064) * C1160 + (C11067 + C11066) * C47983) * C48344) *
               C48235 * C48382 -
           (((C13155 + C13154) * C47983 + (C13153 + C13152) * C1160) * C48344 +
            ((C10634 * C2028 + C48367 * C2036 + C10633 * C2025 +
              C10631 * C2035) *
                 C47983 +
             (C10634 * C2018 + C48367 * C2027 + C10633 * C2017 +
              C10631 * C2026) *
                 C1160) *
                C4779) *
               C48235 * C48363) *
              C2531 +
          ((((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C1160 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C47983) *
                C4779 +
            ((C11567 + C11566) * C1160 + (C11569 + C11568) * C47983) * C48344) *
               C48235 * C48391 -
           (((C10865 + C10864) * C47983 + (C10863 + C10862) * C1160) * C48344 +
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C47983 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C1160) *
                C4779) *
               C48235 * C48394 -
           (((C13013 + C13012) * C47983 + (C13011 + C13010) * C1160) * C48344 +
            ((C10634 * C2421 + C48367 * C2426 + C10633 * C1308 +
              C10631 * C1324) *
                 C47983 +
             (C10634 * C2417 + C48367 * C2420 + C10633 * C1297 +
              C10631 * C1309) *
                 C1160) *
                C4779) *
               C48235 * C48382 +
           (((C10633 * C2417 + C10631 * C2420 + C10634 * C6979 +
              C48367 * C6981) *
                 C1160 +
             (C10633 * C2421 + C10631 * C2426 + C10634 * C6982 +
              C48367 * C6985) *
                 C47983) *
                C4779 +
            ((C10633 * C2418 + C10631 * C2422 + C10634 * C6980 +
              C48367 * C6983) *
                 C1160 +
             (C10633 * C2423 + C10631 * C2427 + C10634 * C6984 +
              C48367 * C6986) *
                 C47983) *
                C48344) *
               C48235 * C48363) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C47001 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C48298 -
             (C10668 + C10669) * C46982 - (C10670 + C10671) * C47993) *
                C4779 +
            ((C10669 + C10668) * C47001 + (C10671 + C10670) * C48298 -
             (C10673 + C10672) * C46982 - (C10675 + C10674) * C47993) *
                C48344) *
               C48235 * C48130 +
           (((C11056 + C11057) * C46982 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C48298 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C47001) +
             (C11058 + C11059) * C47993) *
                C4779 +
            ((C11061 + C11060) * C46982 -
             ((C11059 + C11058) * C48298 + (C11057 + C11056) * C47001) +
             (C11063 + C11062) * C47993) *
                C48344) *
               C48235 * C48137 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C47001 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C48298 -
             (C11064 + C11065) * C46982 - (C11066 + C11067) * C47993) *
                C4779 +
            ((C11065 + C11064) * C47001 + (C11067 + C11066) * C48298 -
             (C11069 + C11068) * C46982 - (C11071 + C11070) * C47993) *
                C48344) *
               C48235 * C3806) *
              C2531 +
          ((((C10862 + C10863) * C46982 -
             ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                  C48298 +
              (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                  C47001) +
             (C10864 + C10865) * C47993) *
                C4779 +
            ((C10867 + C10866) * C46982 -
             ((C10865 + C10864) * C48298 + (C10863 + C10862) * C47001) +
             (C10869 + C10868) * C47993) *
                C48344) *
               C48235 * C48130 +
           (((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C47001 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C48298 -
             (C11566 + C11567) * C46982 - (C11568 + C11569) * C47993) *
                C4779 +
            ((C11567 + C11566) * C47001 + (C11569 + C11568) * C48298 -
             (C11571 + C11570) * C46982 - (C11573 + C11572) * C47993) *
                C48344) *
               C48235 * C48137 +
           (((C13010 + C13011) * C46982 -
             ((C10634 * C2421 + C48367 * C2426 + C10633 * C1308 +
               C10631 * C1324) *
                  C48298 +
              (C10634 * C2417 + C48367 * C2420 + C10633 * C1297 +
               C10631 * C1309) *
                  C47001) +
             (C13012 + C13013) * C47993) *
                C4779 +
            ((C10633 * C1295 + C10631 * C1305 + C10634 * C2419 +
              C48367 * C2424) *
                 C46982 -
             ((C13013 + C13012) * C48298 + (C13011 + C13010) * C47001) +
             (C10633 * C1304 + C10631 * C1322 + C10634 * C2425 +
              C48367 * C2428) *
                 C47993) *
                C48344) *
               C48235 * C3806) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1089 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C48383 -
             (C10668 + C10669) * C1090 - (C10670 + C10671) * C48370 +
             (C10672 + C10673) * C1091 + (C10674 + C10675) * C48339) *
                C4779 +
            ((C10669 + C10668) * C1089 + (C10671 + C10670) * C48383 -
             (C10673 + C10672) * C1090 - (C10675 + C10674) * C48370 +
             (C10677 + C10676) * C1091 + (C10679 + C10678) * C48339) *
                C48344) *
               C48235 * C3298 +
           (((C11056 + C11057) * C1090 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C48383 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C1089) +
             (C11058 + C11059) * C48370 - (C11060 + C11061) * C1091 -
             (C11062 + C11063) * C48339) *
                C4779 +
            ((C11061 + C11060) * C1090 -
             ((C11059 + C11058) * C48383 + (C11057 + C11056) * C1089) +
             (C11063 + C11062) * C48370 - (C11353 + C11352) * C1091 -
             (C11355 + C11354) * C48339) *
                C48344) *
               C48235 * C48134) *
              C2531 +
          ((((C10862 + C10863) * C1090 -
             ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                  C48383 +
              (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                  C1089) +
             (C10864 + C10865) * C48370 - (C10866 + C10867) * C1091 -
             (C10868 + C10869) * C48339) *
                C4779 +
            ((C10867 + C10866) * C1090 -
             ((C10865 + C10864) * C48383 + (C10863 + C10862) * C1089) +
             (C10869 + C10868) * C48370 - (C11211 + C11210) * C1091 -
             (C11213 + C11212) * C48339) *
                C48344) *
               C48235 * C3298 +
           (((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C1089 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C48383 -
             (C11566 + C11567) * C1090 - (C11568 + C11569) * C48370 +
             (C11570 + C11571) * C1091 + (C11572 + C11573) * C48339) *
                C4779 +
            ((C11567 + C11566) * C1089 + (C11569 + C11568) * C48383 -
             (C11571 + C11570) * C1090 - (C11573 + C11572) * C48370 +
             (C10633 * C938 + C10631 * C946 + C10634 * C2185 + C48367 * C2186) *
                 C1091 +
             (C10633 * C947 + C10631 * C953 + C10634 * C2187 + C48367 * C2188) *
                 C48339) *
                C48344) *
               C48235 * C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C4779 +
            ((C10669 + C10668) * C1160 + (C10671 + C10670) * C47983) * C48344) *
               C48235 * C3298 -
           (((C11059 + C11058) * C47983 + (C11057 + C11056) * C1160) * C48344 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C4779) *
               C48235 * C48134) *
              C48393 +
          ((((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C1160 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C47983) *
                C4779 +
            ((C11567 + C11566) * C1160 + (C11569 + C11568) * C47983) * C48344) *
               C48235 * C48134 -
           (((C10865 + C10864) * C47983 + (C10863 + C10862) * C1160) * C48344 +
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C47983 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C1160) *
                C4779) *
               C48235 * C3298) *
              C48389 +
          ((((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                 C1160 +
             (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                 C47983) *
                C4779 +
            ((C10871 + C10870) * C1160 + (C10873 + C10872) * C47983) * C48344) *
               C48235 * C3298 -
           (((C12295 + C12294) * C47983 + (C12293 + C12292) * C1160) * C48344 +
            ((C10634 * C1317 + C48367 * C1328 + C10633 * C1314 +
              C10631 * C1327) *
                 C47983 +
             (C10634 * C1301 + C48367 * C1316 + C10633 * C1300 +
              C10631 * C1315) *
                 C1160) *
                C4779) *
               C48235 * C48134) *
              C48379 +
          ((((C10633 * C1713 + C10631 * C1716 + C10634 * C6039 +
              C48367 * C6041) *
                 C1160 +
             (C10633 * C1717 + C10631 * C1722 + C10634 * C6042 +
              C48367 * C6045) *
                 C47983) *
                C4779 +
            ((C10633 * C1714 + C10631 * C1718 + C10634 * C6040 +
              C48367 * C6043) *
                 C1160 +
             (C10633 * C1719 + C10631 * C1723 + C10634 * C6044 +
              C48367 * C6046) *
                 C47983) *
                C48344) *
               C48235 * C48134 -
           (((C12089 + C12088) * C47983 + (C12087 + C12086) * C1160) * C48344 +
            ((C10634 * C1717 + C48367 * C1722 + C10633 * C1171 +
              C10631 * C1181) *
                 C47983 +
             (C10634 * C1713 + C48367 * C1716 + C10633 * C1163 +
              C10631 * C1172) *
                 C1160) *
                C4779) *
               C48235 * C3298) *
              C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C47001 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48298 -
            (C10668 + C10669) * C46982 - (C10670 + C10671) * C47993) *
               C4779 +
           ((C10669 + C10668) * C47001 + (C10671 + C10670) * C48298 -
            (C10673 + C10672) * C46982 - (C10675 + C10674) * C47993) *
               C48344) *
              C48235 * C48047 * C1431 +
          (((C10862 + C10863) * C46982 -
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C48298 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C47001) +
            (C10864 + C10865) * C47993) *
               C4779 +
           ((C10867 + C10866) * C46982 -
            ((C10865 + C10864) * C48298 + (C10863 + C10862) * C47001) +
            (C10869 + C10868) * C47993) *
               C48344) *
              C48235 * C48047 * C1432 +
          (((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                C47001 +
            (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                C48298 -
            (C10870 + C10871) * C46982 - (C10872 + C10873) * C47993) *
               C4779 +
           ((C10871 + C10870) * C47001 + (C10873 + C10872) * C48298 -
            (C10875 + C10874) * C46982 - (C10877 + C10876) * C47993) *
               C48344) *
              C48235 * C48047 * C1433 +
          (((C12086 + C12087) * C46982 -
            ((C10634 * C1717 + C48367 * C1722 + C10633 * C1171 +
              C10631 * C1181) *
                 C48298 +
             (C10634 * C1713 + C48367 * C1716 + C10633 * C1163 +
              C10631 * C1172) *
                 C47001) +
            (C12088 + C12089) * C47993) *
               C4779 +
           ((C10633 * C1161 + C10631 * C1168 + C10634 * C1715 +
             C48367 * C1720) *
                C46982 -
            ((C12089 + C12088) * C48298 + (C12087 + C12086) * C47001) +
            (C10633 * C1167 + C10631 * C1179 + C10634 * C1721 +
             C48367 * C1724) *
                C47993) *
               C48344) *
              C48235 * C48047 * C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C665 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C659 -
            (C10668 + C10669) * C666 - (C10670 + C10671) * C660 +
            (C10672 + C10673) * C667 + (C10674 + C10675) * C661 -
            (C10676 + C10677) * C668 - (C10678 + C10679) * C48351) *
               C4779 +
           ((C10669 + C10668) * C665 + (C10671 + C10670) * C659 -
            (C10673 + C10672) * C666 - (C10675 + C10674) * C660 +
            (C10677 + C10676) * C667 + (C10679 + C10678) * C661 -
            (C10681 + C10680) * C668 - (C10683 + C10682) * C48351) *
               C48344) *
              C48235 * C48047 * C48315 +
          (((C10862 + C10863) * C666 -
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C659 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C665) +
            (C10864 + C10865) * C660 - (C10866 + C10867) * C667 -
            (C10868 + C10869) * C661 + (C11210 + C11211) * C668 +
            (C11212 + C11213) * C48351) *
               C4779 +
           ((C10867 + C10866) * C666 -
            ((C10865 + C10864) * C659 + (C10863 + C10862) * C665) +
            (C10869 + C10868) * C660 - (C11211 + C11210) * C667 -
            (C11213 + C11212) * C661 +
            (C10633 * C300 + C10631 * C314 + C10634 * C939 + C48367 * C948) *
                C668 +
            (C10633 * C315 + C10631 * C330 + C10634 * C949 + C48367 * C954) *
                C48351) *
               C48344) *
              C48235 * C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C47001 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C48298 -
             (C10668 + C10669) * C46982 - (C10670 + C10671) * C47993) *
                C4779 +
            ((C10669 + C10668) * C47001 + (C10671 + C10670) * C48298 -
             (C10673 + C10672) * C46982 - (C10675 + C10674) * C47993) *
                C48344) *
               C48235 * C1835 +
           (((C11056 + C11057) * C46982 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C48298 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C47001) +
             (C11058 + C11059) * C47993) *
                C4779 +
            ((C11061 + C11060) * C46982 -
             ((C11059 + C11058) * C48298 + (C11057 + C11056) * C47001) +
             (C11063 + C11062) * C47993) *
                C48344) *
               C48235 * C1836 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C47001 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C48298 -
             (C11064 + C11065) * C46982 - (C11066 + C11067) * C47993) *
                C4779 +
            ((C11065 + C11064) * C47001 + (C11067 + C11066) * C48298 -
             (C11069 + C11068) * C46982 - (C11071 + C11070) * C47993) *
                C48344) *
               C48235 * C48350) *
              C48315 +
          ((((C10862 + C10863) * C46982 -
             ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                  C48298 +
              (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                  C47001) +
             (C10864 + C10865) * C47993) *
                C4779 +
            ((C10867 + C10866) * C46982 -
             ((C10865 + C10864) * C48298 + (C10863 + C10862) * C47001) +
             (C10869 + C10868) * C47993) *
                C48344) *
               C48235 * C1835 +
           (((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C47001 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C48298 -
             (C11566 + C11567) * C46982 - (C11568 + C11569) * C47993) *
                C4779 +
            ((C11567 + C11566) * C47001 + (C11569 + C11568) * C48298 -
             (C11571 + C11570) * C46982 - (C11573 + C11572) * C47993) *
                C48344) *
               C48235 * C1836 +
           (((C13010 + C13011) * C46982 -
             ((C10634 * C2421 + C48367 * C2426 + C10633 * C1308 +
               C10631 * C1324) *
                  C48298 +
              (C10634 * C2417 + C48367 * C2420 + C10633 * C1297 +
               C10631 * C1309) *
                  C47001) +
             (C13012 + C13013) * C47993) *
                C4779 +
            ((C10633 * C1295 + C10631 * C1305 + C10634 * C2419 +
              C48367 * C2424) *
                 C46982 -
             ((C13013 + C13012) * C48298 + (C13011 + C13010) * C47001) +
             (C10633 * C1304 + C10631 * C1322 + C10634 * C2425 +
              C48367 * C2428) *
                 C47993) *
                C48344) *
               C48235 * C48350) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C4779 +
            ((C10669 + C10668) * C1160 + (C10671 + C10670) * C47983) * C48344) *
               C48235 * C48316 -
           (((C11059 + C11058) * C47983 + (C11057 + C11056) * C1160) * C48344 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C4779) *
               C48235 * C48134) *
              C1431 +
          ((((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C1160 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C47983) *
                C4779 +
            ((C11567 + C11566) * C1160 + (C11569 + C11568) * C47983) * C48344) *
               C48235 * C48134 -
           (((C10865 + C10864) * C47983 + (C10863 + C10862) * C1160) * C48344 +
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C47983 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C1160) *
                C4779) *
               C48235 * C48316) *
              C1432 +
          ((((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                 C1160 +
             (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                 C47983) *
                C4779 +
            ((C10871 + C10870) * C1160 + (C10873 + C10872) * C47983) * C48344) *
               C48235 * C48316 -
           (((C12295 + C12294) * C47983 + (C12293 + C12292) * C1160) * C48344 +
            ((C10634 * C1317 + C48367 * C1328 + C10633 * C1314 +
              C10631 * C1327) *
                 C47983 +
             (C10634 * C1301 + C48367 * C1316 + C10633 * C1300 +
              C10631 * C1315) *
                 C1160) *
                C4779) *
               C48235 * C48134) *
              C1433 +
          ((((C10633 * C1713 + C10631 * C1716 + C10634 * C6039 +
              C48367 * C6041) *
                 C1160 +
             (C10633 * C1717 + C10631 * C1722 + C10634 * C6042 +
              C48367 * C6045) *
                 C47983) *
                C4779 +
            ((C10633 * C1714 + C10631 * C1718 + C10634 * C6040 +
              C48367 * C6043) *
                 C1160 +
             (C10633 * C1719 + C10631 * C1723 + C10634 * C6044 +
              C48367 * C6046) *
                 C47983) *
                C48344) *
               C48235 * C48134 -
           (((C12089 + C12088) * C47983 + (C12087 + C12086) * C1160) * C48344 +
            ((C10634 * C1717 + C48367 * C1722 + C10633 * C1171 +
              C10631 * C1181) *
                 C47983 +
             (C10634 * C1713 + C48367 * C1716 + C10633 * C1163 +
              C10631 * C1172) *
                 C1160) *
                C4779) *
               C48235 * C48316) *
              C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C293 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C287 -
             (C10668 + C10669) * C294 - (C10670 + C10671) * C288 +
             (C10672 + C10673) * C295 + (C10674 + C10675) * C48339) *
                C4779 +
            ((C10669 + C10668) * C293 + (C10671 + C10670) * C287 -
             (C10673 + C10672) * C294 - (C10675 + C10674) * C288 +
             (C10677 + C10676) * C295 + (C10679 + C10678) * C48339) *
                C48344) *
               C48235 * C48316 +
           (((C11056 + C11057) * C294 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C287 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C293) +
             (C11058 + C11059) * C288 - (C11060 + C11061) * C295 -
             (C11062 + C11063) * C48339) *
                C4779 +
            ((C11061 + C11060) * C294 -
             ((C11059 + C11058) * C287 + (C11057 + C11056) * C293) +
             (C11063 + C11062) * C288 - (C11353 + C11352) * C295 -
             (C11355 + C11354) * C48339) *
                C48344) *
               C48235 * C48134) *
              C48315 +
          ((((C10862 + C10863) * C294 -
             ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                  C287 +
              (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                  C293) +
             (C10864 + C10865) * C288 - (C10866 + C10867) * C295 -
             (C10868 + C10869) * C48339) *
                C4779 +
            ((C10867 + C10866) * C294 -
             ((C10865 + C10864) * C287 + (C10863 + C10862) * C293) +
             (C10869 + C10868) * C288 - (C11211 + C11210) * C295 -
             (C11213 + C11212) * C48339) *
                C48344) *
               C48235 * C48316 +
           (((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C293 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C287 -
             (C11566 + C11567) * C294 - (C11568 + C11569) * C288 +
             (C11570 + C11571) * C295 + (C11572 + C11573) * C48339) *
                C4779 +
            ((C11567 + C11566) * C293 + (C11569 + C11568) * C287 -
             (C11571 + C11570) * C294 - (C11573 + C11572) * C288 +
             (C10633 * C938 + C10631 * C946 + C10634 * C2185 + C48367 * C2186) *
                 C295 +
             (C10633 * C947 + C10631 * C953 + C10634 * C2187 + C48367 * C2188) *
                 C48339) *
                C48344) *
               C48235 * C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C4779 +
            ((C10669 + C10668) * C1160 + (C10671 + C10670) * C47983) * C48344) *
               C48235 * C2299 -
           (((C11059 + C11058) * C47983 + (C11057 + C11056) * C1160) * C48344 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C4779) *
               C48235 * C2300 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C1160 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C47983) *
                C4779 +
            ((C11065 + C11064) * C1160 + (C11067 + C11066) * C47983) * C48344) *
               C48235 * C2301 -
           (((C13155 + C13154) * C47983 + (C13153 + C13152) * C1160) * C48344 +
            ((C10634 * C2028 + C48367 * C2036 + C10633 * C2025 +
              C10631 * C2035) *
                 C47983 +
             (C10634 * C2018 + C48367 * C2027 + C10633 * C2017 +
              C10631 * C2026) *
                 C1160) *
                C4779) *
               C48235 * C48363) *
              C48315 +
          ((((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C1160 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C47983) *
                C4779 +
            ((C11567 + C11566) * C1160 + (C11569 + C11568) * C47983) * C48344) *
               C48235 * C2300 -
           (((C10865 + C10864) * C47983 + (C10863 + C10862) * C1160) * C48344 +
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C47983 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C1160) *
                C4779) *
               C48235 * C2299 -
           (((C13013 + C13012) * C47983 + (C13011 + C13010) * C1160) * C48344 +
            ((C10634 * C2421 + C48367 * C2426 + C10633 * C1308 +
              C10631 * C1324) *
                 C47983 +
             (C10634 * C2417 + C48367 * C2420 + C10633 * C1297 +
              C10631 * C1309) *
                 C1160) *
                C4779) *
               C48235 * C2301 +
           (((C10633 * C2417 + C10631 * C2420 + C10634 * C6979 +
              C48367 * C6981) *
                 C1160 +
             (C10633 * C2421 + C10631 * C2426 + C10634 * C6982 +
              C48367 * C6985) *
                 C47983) *
                C4779 +
            ((C10633 * C2418 + C10631 * C2422 + C10634 * C6980 +
              C48367 * C6983) *
                 C1160 +
             (C10633 * C2423 + C10631 * C2427 + C10634 * C6984 +
              C48367 * C6986) *
                 C47983) *
                C48344) *
               C48235 * C48363) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                   C114 +
               (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                   C102 -
               (C10668 + C10669) * C115 - (C10670 + C10671) * C103 +
               (C10672 + C10673) * C116 + (C10674 + C10675) * C104 -
               (C10676 + C10677) * C117 - (C10678 + C10679) * C105 +
               (C10680 + C10681) * C118 + (C10682 + C10683) * C106) *
                  C4779 +
              ((C10669 + C10668) * C114 + (C10671 + C10670) * C102 -
               (C10673 + C10672) * C115 - (C10675 + C10674) * C103 +
               (C10677 + C10676) * C116 + (C10679 + C10678) * C104 -
               (C10681 + C10680) * C117 - (C10683 + C10682) * C105 +
               (C10633 * C124 + C10631 * C136 + C10634 * C779 + C48367 * C780) *
                   C118 +
               (C10633 * C137 + C10631 * C145 + C10634 * C781 + C48367 * C782) *
                   C106) *
                  C48344) *
             C48235 * C48047 * C48035 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C10633 * C119 + C10631 * C126 + C10634 * C486 +
                 C48367 * C497) *
                    C293 +
                (C10633 * C127 + C10631 * C140 + C10634 * C496 +
                 C48367 * C515) *
                    C287 -
                (C10668 + C10669) * C294 - (C10670 + C10671) * C288 +
                (C10672 + C10673) * C295 + (C10674 + C10675) * C48339) *
                   C4779 +
               ((C10669 + C10668) * C293 + (C10671 + C10670) * C287 -
                (C10673 + C10672) * C294 - (C10675 + C10674) * C288 +
                (C10677 + C10676) * C295 + (C10679 + C10678) * C48339) *
                   C48344) *
                  C48235 * C48047 * C48386 +
              (((C10862 + C10863) * C294 -
                ((C10634 * C941 + C48367 * C950 + C10633 * C307 +
                  C10631 * C326) *
                     C287 +
                 (C10634 * C935 + C48367 * C940 + C10633 * C297 +
                  C10631 * C308) *
                     C293) +
                (C10864 + C10865) * C288 - (C10866 + C10867) * C295 -
                (C10868 + C10869) * C48339) *
                   C4779 +
               ((C10867 + C10866) * C294 -
                ((C10865 + C10864) * C287 + (C10863 + C10862) * C293) +
                (C10869 + C10868) * C288 -
                (C10634 * C938 + C48367 * C946 + C10633 * C299 +
                 C10631 * C312) *
                    C295 -
                (C10634 * C947 + C48367 * C953 + C10633 * C313 +
                 C10631 * C329) *
                    C48339) *
                   C48344) *
                  C48235 * C48047 * C48374 +
              (((C10633 * C301 + C10631 * C316 + C10634 * C1300 +
                 C48367 * C1315) *
                    C293 +
                (C10633 * C317 + C10631 * C331 + C10634 * C1314 +
                 C48367 * C1327) *
                    C287 -
                (C10870 + C10871) * C294 - (C10872 + C10873) * C288 +
                (C10874 + C10875) * C295 + (C10876 + C10877) * C48339) *
                   C4779 +
               ((C10871 + C10870) * C293 + (C10873 + C10872) * C287 -
                (C10875 + C10874) * C294 - (C10877 + C10876) * C288 +
                (C10633 * C304 + C10631 * C322 + C10634 * C1599 +
                 C48367 * C1600) *
                    C295 +
                (C10633 * C323 + C10631 * C334 + C10634 * C1601 +
                 C48367 * C1602) *
                    C48339) *
                   C48344) *
                  C48235 * C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C293 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C287 -
            (C10668 + C10669) * C294 - (C10670 + C10671) * C288 +
            (C10672 + C10673) * C295 + (C10674 + C10675) * C48339) *
               C4779 +
           ((C10669 + C10668) * C293 + (C10671 + C10670) * C287 -
            (C10673 + C10672) * C294 - (C10675 + C10674) * C288 +
            (C10677 + C10676) * C295 + (C10679 + C10678) * C48339) *
               C48344) *
              C48235 * C48387 +
          (((C11056 + C11057) * C294 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C287 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C293) +
            (C11058 + C11059) * C288 - (C11060 + C11061) * C295 -
            (C11062 + C11063) * C48339) *
               C4779 +
           ((C11061 + C11060) * C294 -
            ((C11059 + C11058) * C287 + (C11057 + C11056) * C293) +
            (C11063 + C11062) * C288 -
            (C10634 * C493 + C48367 * C511 + C10633 * C488 + C10631 * C501) *
                C295 -
            (C10634 * C512 + C48367 * C523 + C10633 * C502 + C10631 * C518) *
                C48339) *
               C48344) *
              C48235 * C48376 +
          (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                C293 +
            (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                C287 -
            (C11064 + C11065) * C294 - (C11066 + C11067) * C288 +
            (C11068 + C11069) * C295 + (C11070 + C11071) * C48339) *
               C4779 +
           ((C11065 + C11064) * C293 + (C11067 + C11066) * C287 -
            (C11069 + C11068) * C294 - (C11071 + C11070) * C288 +
            (C10633 * C493 + C10631 * C511 + C10634 * C2303 + C48367 * C2304) *
                C295 +
            (C10633 * C512 + C10631 * C523 + C10634 * C2305 + C48367 * C2306) *
                C48339) *
               C48344) *
              C48235 * C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1089 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48383 -
            (C10668 + C10669) * C1090 - (C10670 + C10671) * C48370 +
            (C10672 + C10673) * C1091 + (C10674 + C10675) * C48339) *
               C4779 +
           ((C10669 + C10668) * C1089 + (C10671 + C10670) * C48383 -
            (C10673 + C10672) * C1090 - (C10675 + C10674) * C48370 +
            (C10677 + C10676) * C1091 + (C10679 + C10678) * C48339) *
               C48344) *
              C48235 * C48047 * C1086 +
          (((C10862 + C10863) * C1090 -
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C48383 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C1089) +
            (C10864 + C10865) * C48370 - (C10866 + C10867) * C1091 -
            (C10868 + C10869) * C48339) *
               C4779 +
           ((C10867 + C10866) * C1090 -
            ((C10865 + C10864) * C48383 + (C10863 + C10862) * C1089) +
            (C10869 + C10868) * C48370 - (C11211 + C11210) * C1091 -
            (C11213 + C11212) * C48339) *
               C48344) *
              C48235 * C48047 * C1087 +
          (((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                C1089 +
            (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                C48383 -
            (C10870 + C10871) * C1090 - (C10872 + C10873) * C48370 +
            (C10874 + C10875) * C1091 + (C10876 + C10877) * C48339) *
               C4779 +
           ((C10871 + C10870) * C1089 + (C10873 + C10872) * C48383 -
            (C10875 + C10874) * C1090 - (C10877 + C10876) * C48370 +
            (C10633 * C304 + C10631 * C322 + C10634 * C1599 + C48367 * C1600) *
                C1091 +
            (C10633 * C323 + C10631 * C334 + C10634 * C1601 + C48367 * C1602) *
                C48339) *
               C48344) *
              C48235 * C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1160 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C47983) *
               C4779 +
           ((C10669 + C10668) * C1160 + (C10671 + C10670) * C47983) * C48344) *
              C48235 * C48047 * C1155 -
          (((C10865 + C10864) * C47983 + (C10863 + C10862) * C1160) * C48344 +
           ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                C47983 +
            (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                C1160) *
               C4779) *
              C48235 * C48047 * C1156 +
          (((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                C1160 +
            (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                C47983) *
               C4779 +
           ((C10871 + C10870) * C1160 + (C10873 + C10872) * C47983) * C48344) *
              C48235 * C48047 * C1157 -
          (((C10634 * C1719 + C48367 * C1723 + C10633 * C1169 +
             C10631 * C1180) *
                C47983 +
            (C10634 * C1714 + C48367 * C1718 + C10633 * C1162 +
             C10631 * C1170) *
                C1160) *
               C48344 +
           ((C10634 * C1717 + C48367 * C1722 + C10633 * C1171 +
             C10631 * C1181) *
                C47983 +
            (C10634 * C1713 + C48367 * C1716 + C10633 * C1163 +
             C10631 * C1172) *
                C1160) *
               C4779) *
              C48235 * C48047 * C1158 +
          (((C10633 * C1164 + C10631 * C1173 + C10634 * C6587 +
             C48367 * C6589) *
                C1160 +
            (C10633 * C1174 + C10631 * C1182 + C10634 * C6590 +
             C48367 * C6593) *
                C47983) *
               C4779 +
           ((C10633 * C1165 + C10631 * C1175 + C10634 * C6588 +
             C48367 * C6591) *
                C1160 +
            (C10633 * C1176 + C10631 * C1183 + C10634 * C6592 +
             C48367 * C6594) *
                C47983) *
               C48344) *
              C48235 * C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C4779 +
            ((C10669 + C10668) * C1160 + (C10671 + C10670) * C47983) * C48344) *
               C48235 * C48387 -
           (((C11059 + C11058) * C47983 + (C11057 + C11056) * C1160) * C48344 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C4779) *
               C48235 * C48376 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C1160 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C47983) *
                C4779 +
            ((C11065 + C11064) * C1160 + (C11067 + C11066) * C47983) * C48344) *
               C48235 * C48350) *
              C1086 +
          ((((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C1160 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C47983) *
                C4779 +
            ((C11567 + C11566) * C1160 + (C11569 + C11568) * C47983) * C48344) *
               C48235 * C48376 -
           (((C10865 + C10864) * C47983 + (C10863 + C10862) * C1160) * C48344 +
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C47983 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C1160) *
                C4779) *
               C48235 * C48387 -
           (((C10634 * C2423 + C48367 * C2427 + C10633 * C1306 +
              C10631 * C1323) *
                 C47983 +
             (C10634 * C2418 + C48367 * C2422 + C10633 * C1296 +
              C10631 * C1307) *
                 C1160) *
                C48344 +
            ((C10634 * C2421 + C48367 * C2426 + C10633 * C1308 +
              C10631 * C1324) *
                 C47983 +
             (C10634 * C2417 + C48367 * C2420 + C10633 * C1297 +
              C10631 * C1309) *
                 C1160) *
                C4779) *
               C48235 * C48350) *
              C1087 +
          ((((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                 C1160 +
             (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                 C47983) *
                C4779 +
            ((C10871 + C10870) * C1160 + (C10873 + C10872) * C47983) * C48344) *
               C48235 * C48387 -
           (((C10634 * C1319 + C48367 * C1329 + C10633 * C1312 +
              C10631 * C1326) *
                 C47983 +
             (C10634 * C1302 + C48367 * C1318 + C10633 * C1299 +
              C10631 * C1313) *
                 C1160) *
                C48344 +
            ((C10634 * C1317 + C48367 * C1328 + C10633 * C1314 +
              C10631 * C1327) *
                 C47983 +
             (C10634 * C1301 + C48367 * C1316 + C10633 * C1300 +
              C10631 * C1315) *
                 C1160) *
                C4779) *
               C48235 * C48376 +
           (((C10633 * C1301 + C10631 * C1316 + C10634 * C7455 +
              C48367 * C7457) *
                 C1160 +
             (C10633 * C1317 + C10631 * C1328 + C10634 * C7458 +
              C48367 * C7461) *
                 C47983) *
                C4779 +
            ((C10633 * C1302 + C10631 * C1318 + C10634 * C7456 +
              C48367 * C7459) *
                 C1160 +
             (C10633 * C1319 + C10631 * C1329 + C10634 * C7460 +
              C48367 * C7462) *
                 C47983) *
                C48344) *
               C48235 * C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1089 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48383 -
            (C10668 + C10669) * C1090 - (C10670 + C10671) * C48370 +
            (C10672 + C10673) * C1091 + (C10674 + C10675) * C48339) *
               C4779 +
           ((C10669 + C10668) * C1089 + (C10671 + C10670) * C48383 -
            (C10673 + C10672) * C1090 - (C10675 + C10674) * C48370 +
            (C10677 + C10676) * C1091 + (C10679 + C10678) * C48339) *
               C48344) *
              C48235 * C1835 +
          (((C11056 + C11057) * C1090 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C48383 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1089) +
            (C11058 + C11059) * C48370 - (C11060 + C11061) * C1091 -
            (C11062 + C11063) * C48339) *
               C4779 +
           ((C11061 + C11060) * C1090 -
            ((C11059 + C11058) * C48383 + (C11057 + C11056) * C1089) +
            (C11063 + C11062) * C48370 - (C11353 + C11352) * C1091 -
            (C11355 + C11354) * C48339) *
               C48344) *
              C48235 * C1836 +
          (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                C1089 +
            (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                C48383 -
            (C11064 + C11065) * C1090 - (C11066 + C11067) * C48370 +
            (C11068 + C11069) * C1091 + (C11070 + C11071) * C48339) *
               C4779 +
           ((C11065 + C11064) * C1089 + (C11067 + C11066) * C48383 -
            (C11069 + C11068) * C1090 - (C11071 + C11070) * C48370 +
            (C10633 * C493 + C10631 * C511 + C10634 * C2303 + C48367 * C2304) *
                C1091 +
            (C10633 * C512 + C10631 * C523 + C10634 * C2305 + C48367 * C2306) *
                C48339) *
               C48344) *
              C48235 * C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C4779 +
            ((C10669 + C10668) * C1160 + (C10671 + C10670) * C47983) * C48344) *
               C48235 * C1835 -
           (((C11059 + C11058) * C47983 + (C11057 + C11056) * C1160) * C48344 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C4779) *
               C48235 * C1836 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C1160 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C47983) *
                C4779 +
            ((C11065 + C11064) * C1160 + (C11067 + C11066) * C47983) * C48344) *
               C48235 * C48350) *
              C48386 +
          ((((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C1160 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C47983) *
                C4779 +
            ((C11567 + C11566) * C1160 + (C11569 + C11568) * C47983) * C48344) *
               C48235 * C1836 -
           (((C10865 + C10864) * C47983 + (C10863 + C10862) * C1160) * C48344 +
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C47983 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C1160) *
                C4779) *
               C48235 * C1835 -
           (((C10634 * C2423 + C48367 * C2427 + C10633 * C1306 +
              C10631 * C1323) *
                 C47983 +
             (C10634 * C2418 + C48367 * C2422 + C10633 * C1296 +
              C10631 * C1307) *
                 C1160) *
                C48344 +
            ((C10634 * C2421 + C48367 * C2426 + C10633 * C1308 +
              C10631 * C1324) *
                 C47983 +
             (C10634 * C2417 + C48367 * C2420 + C10633 * C1297 +
              C10631 * C1309) *
                 C1160) *
                C4779) *
               C48235 * C48350) *
              C48374 +
          ((((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                 C1160 +
             (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                 C47983) *
                C4779 +
            ((C10871 + C10870) * C1160 + (C10873 + C10872) * C47983) * C48344) *
               C48235 * C1835 -
           (((C12295 + C12294) * C47983 + (C12293 + C12292) * C1160) * C48344 +
            ((C10634 * C1317 + C48367 * C1328 + C10633 * C1314 +
              C10631 * C1327) *
                 C47983 +
             (C10634 * C1301 + C48367 * C1316 + C10633 * C1300 +
              C10631 * C1315) *
                 C1160) *
                C4779) *
               C48235 * C1836 +
           (((C10633 * C1301 + C10631 * C1316 + C10634 * C7455 +
              C48367 * C7457) *
                 C1160 +
             (C10633 * C1317 + C10631 * C1328 + C10634 * C7458 +
              C48367 * C7461) *
                 C47983) *
                C4779 +
            ((C10633 * C1302 + C10631 * C1318 + C10634 * C7456 +
              C48367 * C7459) *
                 C1160 +
             (C10633 * C1319 + C10631 * C1329 + C10634 * C7460 +
              C48367 * C7462) *
                 C47983) *
                C48344) *
               C48235 * C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1160 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C47983) *
               C4779 +
           ((C10669 + C10668) * C1160 + (C10671 + C10670) * C47983) * C48344) *
              C48235 * C2010 -
          (((C11059 + C11058) * C47983 + (C11057 + C11056) * C1160) * C48344 +
           ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                C47983 +
            (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                C1160) *
               C4779) *
              C48235 * C2011 +
          (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                C1160 +
            (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                C47983) *
               C4779 +
           ((C11065 + C11064) * C1160 + (C11067 + C11066) * C47983) * C48344) *
              C48235 * C2012 -
          (((C10634 * C2030 + C48367 * C2037 + C10633 * C2023 +
             C10631 * C2034) *
                C47983 +
            (C10634 * C2019 + C48367 * C2029 + C10633 * C2016 +
             C10631 * C2024) *
                C1160) *
               C48344 +
           ((C10634 * C2028 + C48367 * C2036 + C10633 * C2025 +
             C10631 * C2035) *
                C47983 +
            (C10634 * C2018 + C48367 * C2027 + C10633 * C2017 +
             C10631 * C2026) *
                C1160) *
               C4779) *
              C48235 * C2013 +
          (((C10633 * C2018 + C10631 * C2027 + C10634 * C12799 +
             C48367 * C12801) *
                C1160 +
            (C10633 * C2028 + C10631 * C2036 + C10634 * C12802 +
             C48367 * C12805) *
                C47983) *
               C4779 +
           ((C10633 * C2019 + C10631 * C2029 + C10634 * C12800 +
             C48367 * C12803) *
                C1160 +
            (C10633 * C2030 + C10631 * C2037 + C10634 * C12804 +
             C48367 * C12806) *
                C47983) *
               C48344) *
              C48235 * C2014) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C47001 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C48298 -
             (C10668 + C10669) * C46982 - (C10670 + C10671) * C47993) *
                C4779 +
            ((C10669 + C10668) * C47001 + (C10671 + C10670) * C48298 -
             (C10673 + C10672) * C46982 - (C10675 + C10674) * C47993) *
                C48344) *
               C48235 * C48316 +
           (((C11056 + C11057) * C46982 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C48298 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C47001) +
             (C11058 + C11059) * C47993) *
                C4779 +
            ((C11061 + C11060) * C46982 -
             ((C11059 + C11058) * C48298 + (C11057 + C11056) * C47001) +
             (C11063 + C11062) * C47993) *
                C48344) *
               C48235 * C48134) *
              C1086 +
          ((((C10862 + C10863) * C46982 -
             ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                  C48298 +
              (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                  C47001) +
             (C10864 + C10865) * C47993) *
                C4779 +
            ((C10867 + C10866) * C46982 -
             ((C10865 + C10864) * C48298 + (C10863 + C10862) * C47001) +
             (C10869 + C10868) * C47993) *
                C48344) *
               C48235 * C48316 +
           (((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C47001 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C48298 -
             (C11566 + C11567) * C46982 - (C11568 + C11569) * C47993) *
                C4779 +
            ((C11567 + C11566) * C47001 + (C11569 + C11568) * C48298 -
             (C11571 + C11570) * C46982 - (C11573 + C11572) * C47993) *
                C48344) *
               C48235 * C48134) *
              C1087 +
          ((((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                 C47001 +
             (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                 C48298 -
             (C10870 + C10871) * C46982 - (C10872 + C10873) * C47993) *
                C4779 +
            ((C10871 + C10870) * C47001 + (C10873 + C10872) * C48298 -
             (C10875 + C10874) * C46982 - (C10877 + C10876) * C47993) *
                C48344) *
               C48235 * C48316 +
           (((C12292 + C12293) * C46982 -
             ((C10634 * C1317 + C48367 * C1328 + C10633 * C1314 +
               C10631 * C1327) *
                  C48298 +
              (C10634 * C1301 + C48367 * C1316 + C10633 * C1300 +
               C10631 * C1315) *
                  C47001) +
             (C12294 + C12295) * C47993) *
                C4779 +
            ((C10633 * C1298 + C10631 * C1311 + C10634 * C1303 +
              C48367 * C1320) *
                 C46982 -
             ((C12295 + C12294) * C48298 + (C12293 + C12292) * C47001) +
             (C10633 * C1310 + C10631 * C1325 + C10634 * C1321 +
              C48367 * C1330) *
                 C47993) *
                C48344) *
               C48235 * C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C665 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C659 -
            (C10668 + C10669) * C666 - (C10670 + C10671) * C660 +
            (C10672 + C10673) * C667 + (C10674 + C10675) * C661 -
            (C10676 + C10677) * C668 - (C10678 + C10679) * C48351) *
               C4779 +
           ((C10669 + C10668) * C665 + (C10671 + C10670) * C659 -
            (C10673 + C10672) * C666 - (C10675 + C10674) * C660 +
            (C10677 + C10676) * C667 + (C10679 + C10678) * C661 -
            (C10681 + C10680) * C668 - (C10683 + C10682) * C48351) *
               C48344) *
              C48235 * C48316 +
          (((C11056 + C11057) * C666 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C659 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C665) +
            (C11058 + C11059) * C660 - (C11060 + C11061) * C667 -
            (C11062 + C11063) * C661 + (C11352 + C11353) * C668 +
            (C11354 + C11355) * C48351) *
               C4779 +
           ((C11061 + C11060) * C666 -
            ((C11059 + C11058) * C659 + (C11057 + C11056) * C665) +
            (C11063 + C11062) * C660 - (C11353 + C11352) * C667 -
            (C11355 + C11354) * C661 +
            (C10633 * C489 + C10631 * C503 + C10634 * C494 + C48367 * C513) *
                C668 +
            (C10633 * C504 + C10631 * C519 + C10634 * C514 + C48367 * C524) *
                C48351) *
               C48344) *
              C48235 * C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C47001 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48298 -
            (C10668 + C10669) * C46982 - (C10670 + C10671) * C47993) *
               C4779 +
           ((C10669 + C10668) * C47001 + (C10671 + C10670) * C48298 -
            (C10673 + C10672) * C46982 - (C10675 + C10674) * C47993) *
               C48344) *
              C48235 * C2299 +
          (((C11056 + C11057) * C46982 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C48298 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C47001) +
            (C11058 + C11059) * C47993) *
               C4779 +
           ((C11061 + C11060) * C46982 -
            ((C11059 + C11058) * C48298 + (C11057 + C11056) * C47001) +
            (C11063 + C11062) * C47993) *
               C48344) *
              C48235 * C2300 +
          (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                C47001 +
            (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                C48298 -
            (C11064 + C11065) * C46982 - (C11066 + C11067) * C47993) *
               C4779 +
           ((C11065 + C11064) * C47001 + (C11067 + C11066) * C48298 -
            (C11069 + C11068) * C46982 - (C11071 + C11070) * C47993) *
               C48344) *
              C48235 * C2301 +
          (((C13152 + C13153) * C46982 -
            ((C10634 * C2028 + C48367 * C2036 + C10633 * C2025 +
              C10631 * C2035) *
                 C48298 +
             (C10634 * C2018 + C48367 * C2027 + C10633 * C2017 +
              C10631 * C2026) *
                 C47001) +
            (C13154 + C13155) * C47993) *
               C4779 +
           ((C10633 * C2015 + C10631 * C2022 + C10634 * C2020 +
             C48367 * C2031) *
                C46982 -
            ((C13155 + C13154) * C48298 + (C13153 + C13152) * C47001) +
            (C10633 * C2021 + C10631 * C2033 + C10634 * C2032 +
             C48367 * C2038) *
                C47993) *
               C48344) *
              C48235 * C48363) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C293 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C287 -
            (C10668 + C10669) * C294 - (C10670 + C10671) * C288 +
            (C10672 + C10673) * C295 + (C10674 + C10675) * C48339) *
               C4779 +
           ((C10669 + C10668) * C293 + (C10671 + C10670) * C287 -
            (C10673 + C10672) * C294 - (C10675 + C10674) * C288 +
            (C10677 + C10676) * C295 + (C10679 + C10678) * C48339) *
               C48344) *
              C48235 * C48047 * C48386 +
          (((C10862 + C10863) * C294 -
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C287 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C293) +
            (C10864 + C10865) * C288 - (C10866 + C10867) * C295 -
            (C10868 + C10869) * C48339) *
               C4779 +
           ((C10867 + C10866) * C294 -
            ((C10865 + C10864) * C287 + (C10863 + C10862) * C293) +
            (C10869 + C10868) * C288 -
            (C10634 * C938 + C48367 * C946 + C10633 * C299 + C10631 * C312) *
                C295 -
            (C10634 * C947 + C48367 * C953 + C10633 * C313 + C10631 * C329) *
                C48339) *
               C48344) *
              C48235 * C48047 * C48374 +
          (((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                C293 +
            (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                C287 -
            (C10870 + C10871) * C294 - (C10872 + C10873) * C288 +
            (C10874 + C10875) * C295 + (C10876 + C10877) * C48339) *
               C4779 +
           ((C10871 + C10870) * C293 + (C10873 + C10872) * C287 -
            (C10875 + C10874) * C294 - (C10877 + C10876) * C288 +
            (C10633 * C304 + C10631 * C322 + C10634 * C1599 + C48367 * C1600) *
                C295 +
            (C10633 * C323 + C10631 * C334 + C10634 * C1601 + C48367 * C1602) *
                C48339) *
               C48344) *
              C48235 * C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
               C114 +
           (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
               C102 -
           (C10668 + C10669) * C115 - (C10670 + C10671) * C103 +
           (C10672 + C10673) * C116 + (C10674 + C10675) * C104 -
           (C10676 + C10677) * C117 - (C10678 + C10679) * C105 +
           (C10680 + C10681) * C118 + (C10682 + C10683) * C106) *
              C4779 +
          ((C10669 + C10668) * C114 + (C10671 + C10670) * C102 -
           (C10673 + C10672) * C115 - (C10675 + C10674) * C103 +
           (C10677 + C10676) * C116 + (C10679 + C10678) * C104 -
           (C10681 + C10680) * C117 - (C10683 + C10682) * C105 +
           (C10633 * C124 + C10631 * C136 + C10634 * C779 + C48367 * C780) *
               C118 +
           (C10633 * C137 + C10631 * C145 + C10634 * C781 + C48367 * C782) *
               C106) *
              C48344) *
         C48235 * C48047 * C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1089 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48383 -
            (C10668 + C10669) * C1090 - (C10670 + C10671) * C48370 +
            (C10672 + C10673) * C1091 + (C10674 + C10675) * C48339) *
               C4779 +
           ((C10669 + C10668) * C1089 + (C10671 + C10670) * C48383 -
            (C10673 + C10672) * C1090 - (C10675 + C10674) * C48370 +
            (C10677 + C10676) * C1091 + (C10679 + C10678) * C48339) *
               C48344) *
              C48235 * C48047 * C1086 +
          (((C10862 + C10863) * C1090 -
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C48383 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C1089) +
            (C10864 + C10865) * C48370 - (C10866 + C10867) * C1091 -
            (C10868 + C10869) * C48339) *
               C4779 +
           ((C10867 + C10866) * C1090 -
            ((C10865 + C10864) * C48383 + (C10863 + C10862) * C1089) +
            (C10869 + C10868) * C48370 - (C11211 + C11210) * C1091 -
            (C11213 + C11212) * C48339) *
               C48344) *
              C48235 * C48047 * C1087 +
          (((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                C1089 +
            (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                C48383 -
            (C10870 + C10871) * C1090 - (C10872 + C10873) * C48370 +
            (C10874 + C10875) * C1091 + (C10876 + C10877) * C48339) *
               C4779 +
           ((C10871 + C10870) * C1089 + (C10873 + C10872) * C48383 -
            (C10875 + C10874) * C1090 - (C10877 + C10876) * C48370 +
            (C10633 * C304 + C10631 * C322 + C10634 * C1599 + C48367 * C1600) *
                C1091 +
            (C10633 * C323 + C10631 * C334 + C10634 * C1601 + C48367 * C1602) *
                C48339) *
               C48344) *
              C48235 * C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1160 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C47983) *
               C4779 +
           ((C10669 + C10668) * C1160 + (C10671 + C10670) * C47983) * C48344) *
              C48235 * C48047 * C1155 -
          (((C10865 + C10864) * C47983 + (C10863 + C10862) * C1160) * C48344 +
           ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                C47983 +
            (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                C1160) *
               C4779) *
              C48235 * C48047 * C1156 +
          (((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                C1160 +
            (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                C47983) *
               C4779 +
           ((C10871 + C10870) * C1160 + (C10873 + C10872) * C47983) * C48344) *
              C48235 * C48047 * C1157 -
          (((C10634 * C1719 + C48367 * C1723 + C10633 * C1169 +
             C10631 * C1180) *
                C47983 +
            (C10634 * C1714 + C48367 * C1718 + C10633 * C1162 +
             C10631 * C1170) *
                C1160) *
               C48344 +
           ((C10634 * C1717 + C48367 * C1722 + C10633 * C1171 +
             C10631 * C1181) *
                C47983 +
            (C10634 * C1713 + C48367 * C1716 + C10633 * C1163 +
             C10631 * C1172) *
                C1160) *
               C4779) *
              C48235 * C48047 * C1158 +
          (((C10633 * C1164 + C10631 * C1173 + C10634 * C6587 +
             C48367 * C6589) *
                C1160 +
            (C10633 * C1174 + C10631 * C1182 + C10634 * C6590 +
             C48367 * C6593) *
                C47983) *
               C4779 +
           ((C10633 * C1165 + C10631 * C1175 + C10634 * C6588 +
             C48367 * C6591) *
                C1160 +
            (C10633 * C1176 + C10631 * C1183 + C10634 * C6592 +
             C48367 * C6594) *
                C47983) *
               C48344) *
              C48235 * C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1089 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48383 -
            (C10668 + C10669) * C1090 - (C10670 + C10671) * C48370 +
            (C10672 + C10673) * C1091 + (C10674 + C10675) * C48339) *
               C4779 +
           ((C10669 + C10668) * C1089 + (C10671 + C10670) * C48383 -
            (C10673 + C10672) * C1090 - (C10675 + C10674) * C48370 +
            (C10677 + C10676) * C1091 + (C10679 + C10678) * C48339) *
               C48344) *
              C48235 * C1835 +
          (((C11056 + C11057) * C1090 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C48383 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1089) +
            (C11058 + C11059) * C48370 - (C11060 + C11061) * C1091 -
            (C11062 + C11063) * C48339) *
               C4779 +
           ((C11061 + C11060) * C1090 -
            ((C11059 + C11058) * C48383 + (C11057 + C11056) * C1089) +
            (C11063 + C11062) * C48370 - (C11353 + C11352) * C1091 -
            (C11355 + C11354) * C48339) *
               C48344) *
              C48235 * C1836 +
          (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                C1089 +
            (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                C48383 -
            (C11064 + C11065) * C1090 - (C11066 + C11067) * C48370 +
            (C11068 + C11069) * C1091 + (C11070 + C11071) * C48339) *
               C4779 +
           ((C11065 + C11064) * C1089 + (C11067 + C11066) * C48383 -
            (C11069 + C11068) * C1090 - (C11071 + C11070) * C48370 +
            (C10633 * C493 + C10631 * C511 + C10634 * C2303 + C48367 * C2304) *
                C1091 +
            (C10633 * C512 + C10631 * C523 + C10634 * C2305 + C48367 * C2306) *
                C48339) *
               C48344) *
              C48235 * C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C4779 +
            ((C10669 + C10668) * C1160 + (C10671 + C10670) * C47983) * C48344) *
               C48235 * C1835 -
           (((C11059 + C11058) * C47983 + (C11057 + C11056) * C1160) * C48344 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C4779) *
               C48235 * C1836 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C1160 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C47983) *
                C4779 +
            ((C11065 + C11064) * C1160 + (C11067 + C11066) * C47983) * C48344) *
               C48235 * C48350) *
              C48386 +
          ((((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C1160 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C47983) *
                C4779 +
            ((C11567 + C11566) * C1160 + (C11569 + C11568) * C47983) * C48344) *
               C48235 * C1836 -
           (((C10865 + C10864) * C47983 + (C10863 + C10862) * C1160) * C48344 +
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C47983 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C1160) *
                C4779) *
               C48235 * C1835 -
           (((C10634 * C2423 + C48367 * C2427 + C10633 * C1306 +
              C10631 * C1323) *
                 C47983 +
             (C10634 * C2418 + C48367 * C2422 + C10633 * C1296 +
              C10631 * C1307) *
                 C1160) *
                C48344 +
            ((C10634 * C2421 + C48367 * C2426 + C10633 * C1308 +
              C10631 * C1324) *
                 C47983 +
             (C10634 * C2417 + C48367 * C2420 + C10633 * C1297 +
              C10631 * C1309) *
                 C1160) *
                C4779) *
               C48235 * C48350) *
              C48374 +
          ((((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                 C1160 +
             (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                 C47983) *
                C4779 +
            ((C10871 + C10870) * C1160 + (C10873 + C10872) * C47983) * C48344) *
               C48235 * C1835 -
           (((C12295 + C12294) * C47983 + (C12293 + C12292) * C1160) * C48344 +
            ((C10634 * C1317 + C48367 * C1328 + C10633 * C1314 +
              C10631 * C1327) *
                 C47983 +
             (C10634 * C1301 + C48367 * C1316 + C10633 * C1300 +
              C10631 * C1315) *
                 C1160) *
                C4779) *
               C48235 * C1836 +
           (((C10633 * C1301 + C10631 * C1316 + C10634 * C7455 +
              C48367 * C7457) *
                 C1160 +
             (C10633 * C1317 + C10631 * C1328 + C10634 * C7458 +
              C48367 * C7461) *
                 C47983) *
                C4779 +
            ((C10633 * C1302 + C10631 * C1318 + C10634 * C7456 +
              C48367 * C7459) *
                 C1160 +
             (C10633 * C1319 + C10631 * C1329 + C10634 * C7460 +
              C48367 * C7462) *
                 C47983) *
                C48344) *
               C48235 * C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C47011 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47988 -
             (C10668 + C10669) * C47007 - (C10670 + C10671) * C47996 +
             (C10672 + C10673) * C47017 + (C10674 + C10675) * C2901) *
                C4779 +
            ((C10669 + C10668) * C47011 + (C10671 + C10670) * C47988 -
             (C10673 + C10672) * C47007 - (C10675 + C10674) * C47996 +
             (C10677 + C10676) * C47017 + (C10679 + C10678) * C2901) *
                C48344) *
               C48235 * C3298 +
           (((C11056 + C11057) * C47007 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C47988 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C47011) +
             (C11058 + C11059) * C47996 - (C11060 + C11061) * C47017 -
             (C11062 + C11063) * C2901) *
                C4779 +
            ((C11061 + C11060) * C47007 -
             ((C11059 + C11058) * C47988 + (C11057 + C11056) * C47011) +
             (C11063 + C11062) * C47996 - (C11353 + C11352) * C47017 -
             (C11355 + C11354) * C2901) *
                C48344) *
               C48235 * C48134) *
              C48315 +
          ((((C10862 + C10863) * C47007 -
             ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                  C47988 +
              (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                  C47011) +
             (C10864 + C10865) * C47996 - (C10866 + C10867) * C47017 -
             (C10868 + C10869) * C2901) *
                C4779 +
            ((C10867 + C10866) * C47007 -
             ((C10865 + C10864) * C47988 + (C10863 + C10862) * C47011) +
             (C10869 + C10868) * C47996 - (C11211 + C11210) * C47017 -
             (C11213 + C11212) * C2901) *
                C48344) *
               C48235 * C3298 +
           (((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C47011 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C47988 -
             (C11566 + C11567) * C47007 - (C11568 + C11569) * C47996 +
             (C11570 + C11571) * C47017 + (C11572 + C11573) * C2901) *
                C4779 +
            ((C11567 + C11566) * C47011 + (C11569 + C11568) * C47988 -
             (C11571 + C11570) * C47007 - (C11573 + C11572) * C47996 +
             (C10633 * C938 + C10631 * C946 + C10634 * C2185 + C48367 * C2186) *
                 C47017 +
             (C10633 * C947 + C10631 * C953 + C10634 * C2187 + C48367 * C2188) *
                 C2901) *
                C48344) *
               C48235 * C48134) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C2641 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C2635 -
             (C10668 + C10669) * C2642 - (C10670 + C10671) * C47993) *
                C4779 +
            ((C10669 + C10668) * C2641 + (C10671 + C10670) * C2635 -
             (C10673 + C10672) * C2642 - (C10675 + C10674) * C47993) *
                C48344) *
               C48235 * C48130 +
           (((C11056 + C11057) * C2642 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C2635 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C2641) +
             (C11058 + C11059) * C47993) *
                C4779 +
            ((C11061 + C11060) * C2642 -
             ((C11059 + C11058) * C2635 + (C11057 + C11056) * C2641) +
             (C11063 + C11062) * C47993) *
                C48344) *
               C48235 * C48137 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C2641 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C2635 -
             (C11064 + C11065) * C2642 - (C11066 + C11067) * C47993) *
                C4779 +
            ((C11065 + C11064) * C2641 + (C11067 + C11066) * C2635 -
             (C11069 + C11068) * C2642 - (C11071 + C11070) * C47993) *
                C48344) *
               C48235 * C3806) *
              C48315 +
          ((((C10862 + C10863) * C2642 -
             ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                  C2635 +
              (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                  C2641) +
             (C10864 + C10865) * C47993) *
                C4779 +
            ((C10867 + C10866) * C2642 -
             ((C10865 + C10864) * C2635 + (C10863 + C10862) * C2641) +
             (C10869 + C10868) * C47993) *
                C48344) *
               C48235 * C48130 +
           (((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C2641 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C2635 -
             (C11566 + C11567) * C2642 - (C11568 + C11569) * C47993) *
                C4779 +
            ((C11567 + C11566) * C2641 + (C11569 + C11568) * C2635 -
             (C11571 + C11570) * C2642 - (C11573 + C11572) * C47993) *
                C48344) *
               C48235 * C48137 +
           (((C13010 + C13011) * C2642 -
             ((C10634 * C2421 + C48367 * C2426 + C10633 * C1308 +
               C10631 * C1324) *
                  C2635 +
              (C10634 * C2417 + C48367 * C2420 + C10633 * C1297 +
               C10631 * C1309) *
                  C2641) +
             (C13012 + C13013) * C47993) *
                C4779 +
            ((C10633 * C1295 + C10631 * C1305 + C10634 * C2419 +
              C48367 * C2424) *
                 C2642 -
             ((C13013 + C13012) * C2635 + (C13011 + C13010) * C2641) +
             (C10633 * C1304 + C10631 * C1322 + C10634 * C2425 +
              C48367 * C2428) *
                 C47993) *
                C48344) *
               C48235 * C3806) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C2641 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C2635 -
             (C10668 + C10669) * C2642 - (C10670 + C10671) * C47993) *
                C4779 +
            ((C10669 + C10668) * C2641 + (C10671 + C10670) * C2635 -
             (C10673 + C10672) * C2642 - (C10675 + C10674) * C47993) *
                C48344) *
               C48235 * C3298 +
           (((C11056 + C11057) * C2642 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C2635 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C2641) +
             (C11058 + C11059) * C47993) *
                C4779 +
            ((C11061 + C11060) * C2642 -
             ((C11059 + C11058) * C2635 + (C11057 + C11056) * C2641) +
             (C11063 + C11062) * C47993) *
                C48344) *
               C48235 * C48134) *
              C48386 +
          ((((C10862 + C10863) * C2642 -
             ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                  C2635 +
              (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                  C2641) +
             (C10864 + C10865) * C47993) *
                C4779 +
            ((C10867 + C10866) * C2642 -
             ((C10865 + C10864) * C2635 + (C10863 + C10862) * C2641) +
             (C10869 + C10868) * C47993) *
                C48344) *
               C48235 * C3298 +
           (((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C2641 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C2635 -
             (C11566 + C11567) * C2642 - (C11568 + C11569) * C47993) *
                C4779 +
            ((C11567 + C11566) * C2641 + (C11569 + C11568) * C2635 -
             (C11571 + C11570) * C2642 - (C11573 + C11572) * C47993) *
                C48344) *
               C48235 * C48134) *
              C48374 +
          ((((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                 C2641 +
             (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                 C2635 -
             (C10870 + C10871) * C2642 - (C10872 + C10873) * C47993) *
                C4779 +
            ((C10871 + C10870) * C2641 + (C10873 + C10872) * C2635 -
             (C10875 + C10874) * C2642 - (C10877 + C10876) * C47993) *
                C48344) *
               C48235 * C3298 +
           (((C12292 + C12293) * C2642 -
             ((C10634 * C1317 + C48367 * C1328 + C10633 * C1314 +
               C10631 * C1327) *
                  C2635 +
              (C10634 * C1301 + C48367 * C1316 + C10633 * C1300 +
               C10631 * C1315) *
                  C2641) +
             (C12294 + C12295) * C47993) *
                C4779 +
            ((C10633 * C1298 + C10631 * C1311 + C10634 * C1303 +
              C48367 * C1320) *
                 C2642 -
             ((C12295 + C12294) * C2635 + (C12293 + C12292) * C2641) +
             (C10633 * C1310 + C10631 * C1325 + C10634 * C1321 +
              C48367 * C1330) *
                 C47993) *
                C48344) *
               C48235 * C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C2533 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48392 -
            (C10668 + C10669) * C2534 - (C10670 + C10671) * C48385 +
            (C10672 + C10673) * C2535 + (C10674 + C10675) * C48372 -
            (C10676 + C10677) * C2536 - (C10678 + C10679) * C48351) *
               C4779 +
           ((C10669 + C10668) * C2533 + (C10671 + C10670) * C48392 -
            (C10673 + C10672) * C2534 - (C10675 + C10674) * C48385 +
            (C10677 + C10676) * C2535 + (C10679 + C10678) * C48372 -
            (C10681 + C10680) * C2536 - (C10683 + C10682) * C48351) *
               C48344) *
              C48235 * C3298 +
          (((C11056 + C11057) * C2534 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C48392 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C2533) +
            (C11058 + C11059) * C48385 - (C11060 + C11061) * C2535 -
            (C11062 + C11063) * C48372 + (C11352 + C11353) * C2536 +
            (C11354 + C11355) * C48351) *
               C4779 +
           ((C11061 + C11060) * C2534 -
            ((C11059 + C11058) * C48392 + (C11057 + C11056) * C2533) +
            (C11063 + C11062) * C48385 - (C11353 + C11352) * C2535 -
            (C11355 + C11354) * C48372 +
            (C10633 * C489 + C10631 * C503 + C10634 * C494 + C48367 * C513) *
                C2536 +
            (C10633 * C504 + C10631 * C519 + C10634 * C514 + C48367 * C524) *
                C48351) *
               C48344) *
              C48235 * C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C2641 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C2635 -
            (C10668 + C10669) * C2642 - (C10670 + C10671) * C47993) *
               C4779 +
           ((C10669 + C10668) * C2641 + (C10671 + C10670) * C2635 -
            (C10673 + C10672) * C2642 - (C10675 + C10674) * C47993) *
               C48344) *
              C48235 * C48394 +
          (((C11056 + C11057) * C2642 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C2635 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C2641) +
            (C11058 + C11059) * C47993) *
               C4779 +
           ((C11061 + C11060) * C2642 -
            ((C11059 + C11058) * C2635 + (C11057 + C11056) * C2641) +
            (C11063 + C11062) * C47993) *
               C48344) *
              C48235 * C48391 +
          (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                C2641 +
            (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                C2635 -
            (C11064 + C11065) * C2642 - (C11066 + C11067) * C47993) *
               C4779 +
           ((C11065 + C11064) * C2641 + (C11067 + C11066) * C2635 -
            (C11069 + C11068) * C2642 - (C11071 + C11070) * C47993) *
               C48344) *
              C48235 * C48382 +
          (((C13152 + C13153) * C2642 -
            ((C10634 * C2028 + C48367 * C2036 + C10633 * C2025 +
              C10631 * C2035) *
                 C2635 +
             (C10634 * C2018 + C48367 * C2027 + C10633 * C2017 +
              C10631 * C2026) *
                 C2641) +
            (C13154 + C13155) * C47993) *
               C4779 +
           ((C10633 * C2015 + C10631 * C2022 + C10634 * C2020 +
             C48367 * C2031) *
                C2642 -
            ((C13155 + C13154) * C2635 + (C13153 + C13152) * C2641) +
            (C10633 * C2021 + C10631 * C2033 + C10634 * C2032 +
             C48367 * C2038) *
                C47993) *
               C48344) *
              C48235 * C48363) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C47011 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C47988 -
            (C10668 + C10669) * C47007 - (C10670 + C10671) * C47996 +
            (C10672 + C10673) * C47017 + (C10674 + C10675) * C2901) *
               C4779 +
           ((C10669 + C10668) * C47011 + (C10671 + C10670) * C47988 -
            (C10673 + C10672) * C47007 - (C10675 + C10674) * C47996 +
            (C10677 + C10676) * C47017 + (C10679 + C10678) * C2901) *
               C48344) *
              C48235 * C48130 +
          (((C11056 + C11057) * C47007 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47988 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C47011) +
            (C11058 + C11059) * C47996 - (C11060 + C11061) * C47017 -
            (C11062 + C11063) * C2901) *
               C4779 +
           ((C11061 + C11060) * C47007 -
            ((C11059 + C11058) * C47988 + (C11057 + C11056) * C47011) +
            (C11063 + C11062) * C47996 - (C11353 + C11352) * C47017 -
            (C11355 + C11354) * C2901) *
               C48344) *
              C48235 * C48137 +
          (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                C47011 +
            (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                C47988 -
            (C11064 + C11065) * C47007 - (C11066 + C11067) * C47996 +
            (C11068 + C11069) * C47017 + (C11070 + C11071) * C2901) *
               C4779 +
           ((C11065 + C11064) * C47011 + (C11067 + C11066) * C47988 -
            (C11069 + C11068) * C47007 - (C11071 + C11070) * C47996 +
            (C10633 * C493 + C10631 * C511 + C10634 * C2303 + C48367 * C2304) *
                C47017 +
            (C10633 * C512 + C10631 * C523 + C10634 * C2305 + C48367 * C2306) *
                C2901) *
               C48344) *
              C48235 * C3806) *
         C48035) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C2533 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48392 -
            (C10668 + C10669) * C2534 - (C10670 + C10671) * C48385 +
            (C10672 + C10673) * C2535 + (C10674 + C10675) * C48372 -
            (C10676 + C10677) * C2536 - (C10678 + C10679) * C48351) *
               C4779 +
           ((C10669 + C10668) * C2533 + (C10671 + C10670) * C48392 -
            (C10673 + C10672) * C2534 - (C10675 + C10674) * C48385 +
            (C10677 + C10676) * C2535 + (C10679 + C10678) * C48372 -
            (C10681 + C10680) * C2536 - (C10683 + C10682) * C48351) *
               C48344) *
              C48235 * C3298 +
          (((C11056 + C11057) * C2534 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C48392 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C2533) +
            (C11058 + C11059) * C48385 - (C11060 + C11061) * C2535 -
            (C11062 + C11063) * C48372 + (C11352 + C11353) * C2536 +
            (C11354 + C11355) * C48351) *
               C4779 +
           ((C11061 + C11060) * C2534 -
            ((C11059 + C11058) * C48392 + (C11057 + C11056) * C2533) +
            (C11063 + C11062) * C48385 - (C11353 + C11352) * C2535 -
            (C11355 + C11354) * C48372 +
            (C10633 * C489 + C10631 * C503 + C10634 * C494 + C48367 * C513) *
                C2536 +
            (C10633 * C504 + C10631 * C519 + C10634 * C514 + C48367 * C524) *
                C48351) *
               C48344) *
              C48235 * C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C2641 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C2635 -
             (C10668 + C10669) * C2642 - (C10670 + C10671) * C47993) *
                C4779 +
            ((C10669 + C10668) * C2641 + (C10671 + C10670) * C2635 -
             (C10673 + C10672) * C2642 - (C10675 + C10674) * C47993) *
                C48344) *
               C48235 * C3298 +
           (((C11056 + C11057) * C2642 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C2635 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C2641) +
             (C11058 + C11059) * C47993) *
                C4779 +
            ((C11061 + C11060) * C2642 -
             ((C11059 + C11058) * C2635 + (C11057 + C11056) * C2641) +
             (C11063 + C11062) * C47993) *
                C48344) *
               C48235 * C48134) *
              C48386 +
          ((((C10862 + C10863) * C2642 -
             ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                  C2635 +
              (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                  C2641) +
             (C10864 + C10865) * C47993) *
                C4779 +
            ((C10867 + C10866) * C2642 -
             ((C10865 + C10864) * C2635 + (C10863 + C10862) * C2641) +
             (C10869 + C10868) * C47993) *
                C48344) *
               C48235 * C3298 +
           (((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C2641 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C2635 -
             (C11566 + C11567) * C2642 - (C11568 + C11569) * C47993) *
                C4779 +
            ((C11567 + C11566) * C2641 + (C11569 + C11568) * C2635 -
             (C11571 + C11570) * C2642 - (C11573 + C11572) * C47993) *
                C48344) *
               C48235 * C48134) *
              C48374 +
          ((((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                 C2641 +
             (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                 C2635 -
             (C10870 + C10871) * C2642 - (C10872 + C10873) * C47993) *
                C4779 +
            ((C10871 + C10870) * C2641 + (C10873 + C10872) * C2635 -
             (C10875 + C10874) * C2642 - (C10877 + C10876) * C47993) *
                C48344) *
               C48235 * C3298 +
           (((C12292 + C12293) * C2642 -
             ((C10634 * C1317 + C48367 * C1328 + C10633 * C1314 +
               C10631 * C1327) *
                  C2635 +
              (C10634 * C1301 + C48367 * C1316 + C10633 * C1300 +
               C10631 * C1315) *
                  C2641) +
             (C12294 + C12295) * C47993) *
                C4779 +
            ((C10633 * C1298 + C10631 * C1311 + C10634 * C1303 +
              C48367 * C1320) *
                 C2642 -
             ((C12295 + C12294) * C2635 + (C12293 + C12292) * C2641) +
             (C10633 * C1310 + C10631 * C1325 + C10634 * C1321 +
              C48367 * C1330) *
                 C47993) *
                C48344) *
               C48235 * C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C665 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C659 -
            (C10668 + C10669) * C666 - (C10670 + C10671) * C660 +
            (C10672 + C10673) * C667 + (C10674 + C10675) * C661 -
            (C10676 + C10677) * C668 - (C10678 + C10679) * C48351) *
               C4779 +
           ((C10669 + C10668) * C665 + (C10671 + C10670) * C659 -
            (C10673 + C10672) * C666 - (C10675 + C10674) * C660 +
            (C10677 + C10676) * C667 + (C10679 + C10678) * C661 -
            (C10681 + C10680) * C668 - (C10683 + C10682) * C48351) *
               C48344) *
              C48235 * C48047 * C48315 +
          (((C10862 + C10863) * C666 -
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C659 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C665) +
            (C10864 + C10865) * C660 - (C10866 + C10867) * C667 -
            (C10868 + C10869) * C661 + (C11210 + C11211) * C668 +
            (C11212 + C11213) * C48351) *
               C4779 +
           ((C10867 + C10866) * C666 -
            ((C10865 + C10864) * C659 + (C10863 + C10862) * C665) +
            (C10869 + C10868) * C660 - (C11211 + C11210) * C667 -
            (C11213 + C11212) * C661 +
            (C10633 * C300 + C10631 * C314 + C10634 * C939 + C48367 * C948) *
                C668 +
            (C10633 * C315 + C10631 * C330 + C10634 * C949 + C48367 * C954) *
                C48351) *
               C48344) *
              C48235 * C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C47001 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48298 -
            (C10668 + C10669) * C46982 - (C10670 + C10671) * C47993) *
               C4779 +
           ((C10669 + C10668) * C47001 + (C10671 + C10670) * C48298 -
            (C10673 + C10672) * C46982 - (C10675 + C10674) * C47993) *
               C48344) *
              C48235 * C48047 * C1431 +
          (((C10862 + C10863) * C46982 -
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C48298 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C47001) +
            (C10864 + C10865) * C47993) *
               C4779 +
           ((C10867 + C10866) * C46982 -
            ((C10865 + C10864) * C48298 + (C10863 + C10862) * C47001) +
            (C10869 + C10868) * C47993) *
               C48344) *
              C48235 * C48047 * C1432 +
          (((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                C47001 +
            (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                C48298 -
            (C10870 + C10871) * C46982 - (C10872 + C10873) * C47993) *
               C4779 +
           ((C10871 + C10870) * C47001 + (C10873 + C10872) * C48298 -
            (C10875 + C10874) * C46982 - (C10877 + C10876) * C47993) *
               C48344) *
              C48235 * C48047 * C1433 +
          (((C12086 + C12087) * C46982 -
            ((C10634 * C1717 + C48367 * C1722 + C10633 * C1171 +
              C10631 * C1181) *
                 C48298 +
             (C10634 * C1713 + C48367 * C1716 + C10633 * C1163 +
              C10631 * C1172) *
                 C47001) +
            (C12088 + C12089) * C47993) *
               C4779 +
           ((C10633 * C1161 + C10631 * C1168 + C10634 * C1715 +
             C48367 * C1720) *
                C46982 -
            ((C12089 + C12088) * C48298 + (C12087 + C12086) * C47001) +
            (C10633 * C1167 + C10631 * C1179 + C10634 * C1721 +
             C48367 * C1724) *
                C47993) *
               C48344) *
              C48235 * C48047 * C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C293 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C287 -
             (C10668 + C10669) * C294 - (C10670 + C10671) * C288 +
             (C10672 + C10673) * C295 + (C10674 + C10675) * C48339) *
                C4779 +
            ((C10669 + C10668) * C293 + (C10671 + C10670) * C287 -
             (C10673 + C10672) * C294 - (C10675 + C10674) * C288 +
             (C10677 + C10676) * C295 + (C10679 + C10678) * C48339) *
                C48344) *
               C48235 * C48316 +
           (((C11056 + C11057) * C294 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C287 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C293) +
             (C11058 + C11059) * C288 - (C11060 + C11061) * C295 -
             (C11062 + C11063) * C48339) *
                C4779 +
            ((C11061 + C11060) * C294 -
             ((C11059 + C11058) * C287 + (C11057 + C11056) * C293) +
             (C11063 + C11062) * C288 - (C11353 + C11352) * C295 -
             (C11355 + C11354) * C48339) *
                C48344) *
               C48235 * C48134) *
              C48315 +
          ((((C10862 + C10863) * C294 -
             ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                  C287 +
              (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                  C293) +
             (C10864 + C10865) * C288 - (C10866 + C10867) * C295 -
             (C10868 + C10869) * C48339) *
                C4779 +
            ((C10867 + C10866) * C294 -
             ((C10865 + C10864) * C287 + (C10863 + C10862) * C293) +
             (C10869 + C10868) * C288 - (C11211 + C11210) * C295 -
             (C11213 + C11212) * C48339) *
                C48344) *
               C48235 * C48316 +
           (((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C293 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C287 -
             (C11566 + C11567) * C294 - (C11568 + C11569) * C288 +
             (C11570 + C11571) * C295 + (C11572 + C11573) * C48339) *
                C4779 +
            ((C11567 + C11566) * C293 + (C11569 + C11568) * C287 -
             (C11571 + C11570) * C294 - (C11573 + C11572) * C288 +
             (C10633 * C938 + C10631 * C946 + C10634 * C2185 + C48367 * C2186) *
                 C295 +
             (C10633 * C947 + C10631 * C953 + C10634 * C2187 + C48367 * C2188) *
                 C48339) *
                C48344) *
               C48235 * C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C4779 +
            ((C10669 + C10668) * C1160 + (C10671 + C10670) * C47983) * C48344) *
               C48235 * C48316 -
           (((C11059 + C11058) * C47983 + (C11057 + C11056) * C1160) * C48344 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C4779) *
               C48235 * C48134) *
              C1431 +
          ((((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C1160 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C47983) *
                C4779 +
            ((C11567 + C11566) * C1160 + (C11569 + C11568) * C47983) * C48344) *
               C48235 * C48134 -
           (((C10865 + C10864) * C47983 + (C10863 + C10862) * C1160) * C48344 +
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C47983 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C1160) *
                C4779) *
               C48235 * C48316) *
              C1432 +
          ((((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                 C1160 +
             (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                 C47983) *
                C4779 +
            ((C10871 + C10870) * C1160 + (C10873 + C10872) * C47983) * C48344) *
               C48235 * C48316 -
           (((C12295 + C12294) * C47983 + (C12293 + C12292) * C1160) * C48344 +
            ((C10634 * C1317 + C48367 * C1328 + C10633 * C1314 +
              C10631 * C1327) *
                 C47983 +
             (C10634 * C1301 + C48367 * C1316 + C10633 * C1300 +
              C10631 * C1315) *
                 C1160) *
                C4779) *
               C48235 * C48134) *
              C1433 +
          ((((C10633 * C1713 + C10631 * C1716 + C10634 * C6039 +
              C48367 * C6041) *
                 C1160 +
             (C10633 * C1717 + C10631 * C1722 + C10634 * C6042 +
              C48367 * C6045) *
                 C47983) *
                C4779 +
            ((C10633 * C1714 + C10631 * C1718 + C10634 * C6040 +
              C48367 * C6043) *
                 C1160 +
             (C10633 * C1719 + C10631 * C1723 + C10634 * C6044 +
              C48367 * C6046) *
                 C47983) *
                C48344) *
               C48235 * C48134 -
           (((C12089 + C12088) * C47983 + (C12087 + C12086) * C1160) * C48344 +
            ((C10634 * C1717 + C48367 * C1722 + C10633 * C1171 +
              C10631 * C1181) *
                 C47983 +
             (C10634 * C1713 + C48367 * C1716 + C10633 * C1163 +
              C10631 * C1172) *
                 C1160) *
                C4779) *
               C48235 * C48316) *
              C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C293 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C287 -
            (C10668 + C10669) * C294 - (C10670 + C10671) * C288 +
            (C10672 + C10673) * C295 + (C10674 + C10675) * C48339) *
               C4779 +
           ((C10669 + C10668) * C293 + (C10671 + C10670) * C287 -
            (C10673 + C10672) * C294 - (C10675 + C10674) * C288 +
            (C10677 + C10676) * C295 + (C10679 + C10678) * C48339) *
               C48344) *
              C48235 * C48047 * C48386 +
          (((C10862 + C10863) * C294 -
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C287 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C293) +
            (C10864 + C10865) * C288 - (C10866 + C10867) * C295 -
            (C10868 + C10869) * C48339) *
               C4779 +
           ((C10867 + C10866) * C294 -
            ((C10865 + C10864) * C287 + (C10863 + C10862) * C293) +
            (C10869 + C10868) * C288 -
            (C10634 * C938 + C48367 * C946 + C10633 * C299 + C10631 * C312) *
                C295 -
            (C10634 * C947 + C48367 * C953 + C10633 * C313 + C10631 * C329) *
                C48339) *
               C48344) *
              C48235 * C48047 * C48374 +
          (((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                C293 +
            (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                C287 -
            (C10870 + C10871) * C294 - (C10872 + C10873) * C288 +
            (C10874 + C10875) * C295 + (C10876 + C10877) * C48339) *
               C4779 +
           ((C10871 + C10870) * C293 + (C10873 + C10872) * C287 -
            (C10875 + C10874) * C294 - (C10877 + C10876) * C288 +
            (C10633 * C304 + C10631 * C322 + C10634 * C1599 + C48367 * C1600) *
                C295 +
            (C10633 * C323 + C10631 * C334 + C10634 * C1601 + C48367 * C1602) *
                C48339) *
               C48344) *
              C48235 * C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
               C114 +
           (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
               C102 -
           (C10668 + C10669) * C115 - (C10670 + C10671) * C103 +
           (C10672 + C10673) * C116 + (C10674 + C10675) * C104 -
           (C10676 + C10677) * C117 - (C10678 + C10679) * C105 +
           (C10680 + C10681) * C118 + (C10682 + C10683) * C106) *
              C4779 +
          ((C10669 + C10668) * C114 + (C10671 + C10670) * C102 -
           (C10673 + C10672) * C115 - (C10675 + C10674) * C103 +
           (C10677 + C10676) * C116 + (C10679 + C10678) * C104 -
           (C10681 + C10680) * C117 - (C10683 + C10682) * C105 +
           (C10633 * C124 + C10631 * C136 + C10634 * C779 + C48367 * C780) *
               C118 +
           (C10633 * C137 + C10631 * C145 + C10634 * C781 + C48367 * C782) *
               C106) *
              C48344) *
         C48235 * C48047 * C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C293 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C287 -
            (C10668 + C10669) * C294 - (C10670 + C10671) * C288 +
            (C10672 + C10673) * C295 + (C10674 + C10675) * C48339) *
               C4779 +
           ((C10669 + C10668) * C293 + (C10671 + C10670) * C287 -
            (C10673 + C10672) * C294 - (C10675 + C10674) * C288 +
            (C10677 + C10676) * C295 + (C10679 + C10678) * C48339) *
               C48344) *
              C48235 * C48387 +
          (((C11056 + C11057) * C294 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C287 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C293) +
            (C11058 + C11059) * C288 - (C11060 + C11061) * C295 -
            (C11062 + C11063) * C48339) *
               C4779 +
           ((C11061 + C11060) * C294 -
            ((C11059 + C11058) * C287 + (C11057 + C11056) * C293) +
            (C11063 + C11062) * C288 -
            (C10634 * C493 + C48367 * C511 + C10633 * C488 + C10631 * C501) *
                C295 -
            (C10634 * C512 + C48367 * C523 + C10633 * C502 + C10631 * C518) *
                C48339) *
               C48344) *
              C48235 * C48376 +
          (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                C293 +
            (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                C287 -
            (C11064 + C11065) * C294 - (C11066 + C11067) * C288 +
            (C11068 + C11069) * C295 + (C11070 + C11071) * C48339) *
               C4779 +
           ((C11065 + C11064) * C293 + (C11067 + C11066) * C287 -
            (C11069 + C11068) * C294 - (C11071 + C11070) * C288 +
            (C10633 * C493 + C10631 * C511 + C10634 * C2303 + C48367 * C2304) *
                C295 +
            (C10633 * C512 + C10631 * C523 + C10634 * C2305 + C48367 * C2306) *
                C48339) *
               C48344) *
              C48235 * C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1089 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48383 -
            (C10668 + C10669) * C1090 - (C10670 + C10671) * C48370 +
            (C10672 + C10673) * C1091 + (C10674 + C10675) * C48339) *
               C4779 +
           ((C10669 + C10668) * C1089 + (C10671 + C10670) * C48383 -
            (C10673 + C10672) * C1090 - (C10675 + C10674) * C48370 +
            (C10677 + C10676) * C1091 + (C10679 + C10678) * C48339) *
               C48344) *
              C48235 * C48047 * C1086 +
          (((C10862 + C10863) * C1090 -
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C48383 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C1089) +
            (C10864 + C10865) * C48370 - (C10866 + C10867) * C1091 -
            (C10868 + C10869) * C48339) *
               C4779 +
           ((C10867 + C10866) * C1090 -
            ((C10865 + C10864) * C48383 + (C10863 + C10862) * C1089) +
            (C10869 + C10868) * C48370 - (C11211 + C11210) * C1091 -
            (C11213 + C11212) * C48339) *
               C48344) *
              C48235 * C48047 * C1087 +
          (((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                C1089 +
            (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                C48383 -
            (C10870 + C10871) * C1090 - (C10872 + C10873) * C48370 +
            (C10874 + C10875) * C1091 + (C10876 + C10877) * C48339) *
               C4779 +
           ((C10871 + C10870) * C1089 + (C10873 + C10872) * C48383 -
            (C10875 + C10874) * C1090 - (C10877 + C10876) * C48370 +
            (C10633 * C304 + C10631 * C322 + C10634 * C1599 + C48367 * C1600) *
                C1091 +
            (C10633 * C323 + C10631 * C334 + C10634 * C1601 + C48367 * C1602) *
                C48339) *
               C48344) *
              C48235 * C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1160 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C47983) *
               C4779 +
           ((C10669 + C10668) * C1160 + (C10671 + C10670) * C47983) * C48344) *
              C48235 * C48047 * C1155 -
          (((C10865 + C10864) * C47983 + (C10863 + C10862) * C1160) * C48344 +
           ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                C47983 +
            (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                C1160) *
               C4779) *
              C48235 * C48047 * C1156 +
          (((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                C1160 +
            (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                C47983) *
               C4779 +
           ((C10871 + C10870) * C1160 + (C10873 + C10872) * C47983) * C48344) *
              C48235 * C48047 * C1157 -
          (((C10634 * C1719 + C48367 * C1723 + C10633 * C1169 +
             C10631 * C1180) *
                C47983 +
            (C10634 * C1714 + C48367 * C1718 + C10633 * C1162 +
             C10631 * C1170) *
                C1160) *
               C48344 +
           ((C10634 * C1717 + C48367 * C1722 + C10633 * C1171 +
             C10631 * C1181) *
                C47983 +
            (C10634 * C1713 + C48367 * C1716 + C10633 * C1163 +
             C10631 * C1172) *
                C1160) *
               C4779) *
              C48235 * C48047 * C1158 +
          (((C10633 * C1164 + C10631 * C1173 + C10634 * C6587 +
             C48367 * C6589) *
                C1160 +
            (C10633 * C1174 + C10631 * C1182 + C10634 * C6590 +
             C48367 * C6593) *
                C47983) *
               C4779 +
           ((C10633 * C1165 + C10631 * C1175 + C10634 * C6588 +
             C48367 * C6591) *
                C1160 +
            (C10633 * C1176 + C10631 * C1183 + C10634 * C6592 +
             C48367 * C6594) *
                C47983) *
               C48344) *
              C48235 * C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C4779 +
            ((C10669 + C10668) * C1160 + (C10671 + C10670) * C47983) * C48344) *
               C48235 * C48387 -
           (((C11059 + C11058) * C47983 + (C11057 + C11056) * C1160) * C48344 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C4779) *
               C48235 * C48376 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C1160 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C47983) *
                C4779 +
            ((C11065 + C11064) * C1160 + (C11067 + C11066) * C47983) * C48344) *
               C48235 * C48350) *
              C1086 +
          ((((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C1160 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C47983) *
                C4779 +
            ((C11567 + C11566) * C1160 + (C11569 + C11568) * C47983) * C48344) *
               C48235 * C48376 -
           (((C10865 + C10864) * C47983 + (C10863 + C10862) * C1160) * C48344 +
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C47983 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C1160) *
                C4779) *
               C48235 * C48387 -
           (((C10634 * C2423 + C48367 * C2427 + C10633 * C1306 +
              C10631 * C1323) *
                 C47983 +
             (C10634 * C2418 + C48367 * C2422 + C10633 * C1296 +
              C10631 * C1307) *
                 C1160) *
                C48344 +
            ((C10634 * C2421 + C48367 * C2426 + C10633 * C1308 +
              C10631 * C1324) *
                 C47983 +
             (C10634 * C2417 + C48367 * C2420 + C10633 * C1297 +
              C10631 * C1309) *
                 C1160) *
                C4779) *
               C48235 * C48350) *
              C1087 +
          ((((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                 C1160 +
             (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                 C47983) *
                C4779 +
            ((C10871 + C10870) * C1160 + (C10873 + C10872) * C47983) * C48344) *
               C48235 * C48387 -
           (((C10634 * C1319 + C48367 * C1329 + C10633 * C1312 +
              C10631 * C1326) *
                 C47983 +
             (C10634 * C1302 + C48367 * C1318 + C10633 * C1299 +
              C10631 * C1313) *
                 C1160) *
                C48344 +
            ((C10634 * C1317 + C48367 * C1328 + C10633 * C1314 +
              C10631 * C1327) *
                 C47983 +
             (C10634 * C1301 + C48367 * C1316 + C10633 * C1300 +
              C10631 * C1315) *
                 C1160) *
                C4779) *
               C48235 * C48376 +
           (((C10633 * C1301 + C10631 * C1316 + C10634 * C7455 +
              C48367 * C7457) *
                 C1160 +
             (C10633 * C1317 + C10631 * C1328 + C10634 * C7458 +
              C48367 * C7461) *
                 C47983) *
                C4779 +
            ((C10633 * C1302 + C10631 * C1318 + C10634 * C7456 +
              C48367 * C7459) *
                 C1160 +
             (C10633 * C1319 + C10631 * C1329 + C10634 * C7460 +
              C48367 * C7462) *
                 C47983) *
                C48344) *
               C48235 * C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C665 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C659 -
            (C10668 + C10669) * C666 - (C10670 + C10671) * C660 +
            (C10672 + C10673) * C667 + (C10674 + C10675) * C661 -
            (C10676 + C10677) * C668 - (C10678 + C10679) * C48351) *
               C4779 +
           ((C10669 + C10668) * C665 + (C10671 + C10670) * C659 -
            (C10673 + C10672) * C666 - (C10675 + C10674) * C660 +
            (C10677 + C10676) * C667 + (C10679 + C10678) * C661 -
            (C10681 + C10680) * C668 - (C10683 + C10682) * C48351) *
               C48344) *
              C48235 * C48316 +
          (((C11056 + C11057) * C666 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C659 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C665) +
            (C11058 + C11059) * C660 - (C11060 + C11061) * C667 -
            (C11062 + C11063) * C661 + (C11352 + C11353) * C668 +
            (C11354 + C11355) * C48351) *
               C4779 +
           ((C11061 + C11060) * C666 -
            ((C11059 + C11058) * C659 + (C11057 + C11056) * C665) +
            (C11063 + C11062) * C660 - (C11353 + C11352) * C667 -
            (C11355 + C11354) * C661 +
            (C10633 * C489 + C10631 * C503 + C10634 * C494 + C48367 * C513) *
                C668 +
            (C10633 * C504 + C10631 * C519 + C10634 * C514 + C48367 * C524) *
                C48351) *
               C48344) *
              C48235 * C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C47001 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C48298 -
             (C10668 + C10669) * C46982 - (C10670 + C10671) * C47993) *
                C4779 +
            ((C10669 + C10668) * C47001 + (C10671 + C10670) * C48298 -
             (C10673 + C10672) * C46982 - (C10675 + C10674) * C47993) *
                C48344) *
               C48235 * C48316 +
           (((C11056 + C11057) * C46982 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C48298 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C47001) +
             (C11058 + C11059) * C47993) *
                C4779 +
            ((C11061 + C11060) * C46982 -
             ((C11059 + C11058) * C48298 + (C11057 + C11056) * C47001) +
             (C11063 + C11062) * C47993) *
                C48344) *
               C48235 * C48134) *
              C1086 +
          ((((C10862 + C10863) * C46982 -
             ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                  C48298 +
              (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                  C47001) +
             (C10864 + C10865) * C47993) *
                C4779 +
            ((C10867 + C10866) * C46982 -
             ((C10865 + C10864) * C48298 + (C10863 + C10862) * C47001) +
             (C10869 + C10868) * C47993) *
                C48344) *
               C48235 * C48316 +
           (((C10633 * C935 + C10631 * C940 + C10634 * C1297 + C48367 * C1309) *
                 C47001 +
             (C10633 * C941 + C10631 * C950 + C10634 * C1308 + C48367 * C1324) *
                 C48298 -
             (C11566 + C11567) * C46982 - (C11568 + C11569) * C47993) *
                C4779 +
            ((C11567 + C11566) * C47001 + (C11569 + C11568) * C48298 -
             (C11571 + C11570) * C46982 - (C11573 + C11572) * C47993) *
                C48344) *
               C48235 * C48134) *
              C1087 +
          ((((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                 C47001 +
             (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                 C48298 -
             (C10870 + C10871) * C46982 - (C10872 + C10873) * C47993) *
                C4779 +
            ((C10871 + C10870) * C47001 + (C10873 + C10872) * C48298 -
             (C10875 + C10874) * C46982 - (C10877 + C10876) * C47993) *
                C48344) *
               C48235 * C48316 +
           (((C12292 + C12293) * C46982 -
             ((C10634 * C1317 + C48367 * C1328 + C10633 * C1314 +
               C10631 * C1327) *
                  C48298 +
              (C10634 * C1301 + C48367 * C1316 + C10633 * C1300 +
               C10631 * C1315) *
                  C47001) +
             (C12294 + C12295) * C47993) *
                C4779 +
            ((C10633 * C1298 + C10631 * C1311 + C10634 * C1303 +
              C48367 * C1320) *
                 C46982 -
             ((C12295 + C12294) * C48298 + (C12293 + C12292) * C47001) +
             (C10633 * C1310 + C10631 * C1325 + C10634 * C1321 +
              C48367 * C1330) *
                 C47993) *
                C48344) *
               C48235 * C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
               C114 +
           (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
               C102 -
           (C10668 + C10669) * C115 - (C10670 + C10671) * C103 +
           (C10672 + C10673) * C116 + (C10674 + C10675) * C104 -
           (C10676 + C10677) * C117 - (C10678 + C10679) * C105 +
           (C10680 + C10681) * C118 + (C10682 + C10683) * C106) *
              C4779 +
          ((C10669 + C10668) * C114 + (C10671 + C10670) * C102 -
           (C10673 + C10672) * C115 - (C10675 + C10674) * C103 +
           (C10677 + C10676) * C116 + (C10679 + C10678) * C104 -
           (C10681 + C10680) * C117 - (C10683 + C10682) * C105 +
           (C10633 * C124 + C10631 * C136 + C10634 * C779 + C48367 * C780) *
               C118 +
           (C10633 * C137 + C10631 * C145 + C10634 * C781 + C48367 * C782) *
               C106) *
              C48344) *
         C48235 * C48047 * C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C293 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C287 -
            (C10668 + C10669) * C294 - (C10670 + C10671) * C288 +
            (C10672 + C10673) * C295 + (C10674 + C10675) * C48339) *
               C4779 +
           ((C10669 + C10668) * C293 + (C10671 + C10670) * C287 -
            (C10673 + C10672) * C294 - (C10675 + C10674) * C288 +
            (C10677 + C10676) * C295 + (C10679 + C10678) * C48339) *
               C48344) *
              C48235 * C48047 * C48386 +
          (((C10862 + C10863) * C294 -
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C287 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C293) +
            (C10864 + C10865) * C288 - (C10866 + C10867) * C295 -
            (C10868 + C10869) * C48339) *
               C4779 +
           ((C10867 + C10866) * C294 -
            ((C10865 + C10864) * C287 + (C10863 + C10862) * C293) +
            (C10869 + C10868) * C288 -
            (C10634 * C938 + C48367 * C946 + C10633 * C299 + C10631 * C312) *
                C295 -
            (C10634 * C947 + C48367 * C953 + C10633 * C313 + C10631 * C329) *
                C48339) *
               C48344) *
              C48235 * C48047 * C48374 +
          (((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                C293 +
            (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                C287 -
            (C10870 + C10871) * C294 - (C10872 + C10873) * C288 +
            (C10874 + C10875) * C295 + (C10876 + C10877) * C48339) *
               C4779 +
           ((C10871 + C10870) * C293 + (C10873 + C10872) * C287 -
            (C10875 + C10874) * C294 - (C10877 + C10876) * C288 +
            (C10633 * C304 + C10631 * C322 + C10634 * C1599 + C48367 * C1600) *
                C295 +
            (C10633 * C323 + C10631 * C334 + C10634 * C1601 + C48367 * C1602) *
                C48339) *
               C48344) *
              C48235 * C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1089 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48383 -
            (C10668 + C10669) * C1090 - (C10670 + C10671) * C48370 +
            (C10672 + C10673) * C1091 + (C10674 + C10675) * C48339) *
               C4779 +
           ((C10669 + C10668) * C1089 + (C10671 + C10670) * C48383 -
            (C10673 + C10672) * C1090 - (C10675 + C10674) * C48370 +
            (C10677 + C10676) * C1091 + (C10679 + C10678) * C48339) *
               C48344) *
              C48235 * C48047 * C1086 +
          (((C10862 + C10863) * C1090 -
            ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                 C48383 +
             (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                 C1089) +
            (C10864 + C10865) * C48370 - (C10866 + C10867) * C1091 -
            (C10868 + C10869) * C48339) *
               C4779 +
           ((C10867 + C10866) * C1090 -
            ((C10865 + C10864) * C48383 + (C10863 + C10862) * C1089) +
            (C10869 + C10868) * C48370 - (C11211 + C11210) * C1091 -
            (C11213 + C11212) * C48339) *
               C48344) *
              C48235 * C48047 * C1087 +
          (((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                C1089 +
            (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                C48383 -
            (C10870 + C10871) * C1090 - (C10872 + C10873) * C48370 +
            (C10874 + C10875) * C1091 + (C10876 + C10877) * C48339) *
               C4779 +
           ((C10871 + C10870) * C1089 + (C10873 + C10872) * C48383 -
            (C10875 + C10874) * C1090 - (C10877 + C10876) * C48370 +
            (C10633 * C304 + C10631 * C322 + C10634 * C1599 + C48367 * C1600) *
                C1091 +
            (C10633 * C323 + C10631 * C334 + C10634 * C1601 + C48367 * C1602) *
                C48339) *
               C48344) *
              C48235 * C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1160 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C47983) *
               C4779 +
           ((C10669 + C10668) * C1160 + (C10671 + C10670) * C47983) * C48344) *
              C48235 * C48047 * C1155 -
          (((C10865 + C10864) * C47983 + (C10863 + C10862) * C1160) * C48344 +
           ((C10634 * C941 + C48367 * C950 + C10633 * C307 + C10631 * C326) *
                C47983 +
            (C10634 * C935 + C48367 * C940 + C10633 * C297 + C10631 * C308) *
                C1160) *
               C4779) *
              C48235 * C48047 * C1156 +
          (((C10633 * C301 + C10631 * C316 + C10634 * C1300 + C48367 * C1315) *
                C1160 +
            (C10633 * C317 + C10631 * C331 + C10634 * C1314 + C48367 * C1327) *
                C47983) *
               C4779 +
           ((C10871 + C10870) * C1160 + (C10873 + C10872) * C47983) * C48344) *
              C48235 * C48047 * C1157 -
          (((C10634 * C1719 + C48367 * C1723 + C10633 * C1169 +
             C10631 * C1180) *
                C47983 +
            (C10634 * C1714 + C48367 * C1718 + C10633 * C1162 +
             C10631 * C1170) *
                C1160) *
               C48344 +
           ((C10634 * C1717 + C48367 * C1722 + C10633 * C1171 +
             C10631 * C1181) *
                C47983 +
            (C10634 * C1713 + C48367 * C1716 + C10633 * C1163 +
             C10631 * C1172) *
                C1160) *
               C4779) *
              C48235 * C48047 * C1158 +
          (((C10633 * C1164 + C10631 * C1173 + C10634 * C6587 +
             C48367 * C6589) *
                C1160 +
            (C10633 * C1174 + C10631 * C1182 + C10634 * C6590 +
             C48367 * C6593) *
                C47983) *
               C4779 +
           ((C10633 * C1165 + C10631 * C1175 + C10634 * C6588 +
             C48367 * C6591) *
                C1160 +
            (C10633 * C1176 + C10631 * C1183 + C10634 * C6592 +
             C48367 * C6594) *
                C47983) *
               C48344) *
              C48235 * C48047 * C1159)) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C47011 +
             (C113 * C127 + C48250 * C140) * C47988 - C168 * C47007 -
             C169 * C47996 + C170 * C47017 + C171 * C2901) *
                C16331 +
            (C168 * C47011 + C169 * C47988 - C170 * C47007 - C171 * C47996 +
             C172 * C47017 + C173 * C2901) *
                C48344) *
               C16333 +
           ((C8130 + C8131 - C8132 - C8133 + C8134 + C8135) * C16331 +
            (C8136 + C8137 - C8138 - C8139 + C8140 + C8141) * C48344) *
               C48365) *
              C48047 * C48090 +
          (((C8132 - (C8131 + C8130) + C8133 - C8134 - C8135) * C16331 +
            (C8138 - (C8137 + C8136) + C8139 - C8140 - C8141) * C48344) *
               C16333 +
           ((C8142 - (C8143 + C8144) + C8145 - C8146 - C8147) * C16331 +
            (C8148 - (C8149 + C8150) + C8151 - C8152 - C8153) * C48344) *
               C48365) *
              C48047 * C48097 +
          (((C8144 + C8143 - C8142 - C8145 + C8146 + C8147) * C16331 +
            (C8150 + C8149 - C8148 - C8151 + C8152 + C8153) * C48344) *
               C16333 +
           ((C5882 * C47011 + C5883 * C47988 - C1450 * C47007 - C1451 * C47996 +
             C1452 * C47017 + C1453 * C2901) *
                C16331 +
            (C1450 * C47011 + C1451 * C47988 - C1452 * C47007 - C1453 * C47996 +
             (C113 * C1437 + C48250 * C1438) * C47017 +
             (C113 * C1439 + C48250 * C1440) * C2901) *
                C48344) *
               C48365) *
              C48047 * C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C2641 +
              (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
              C169 * C47993) *
                 C16331 +
             (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                 C48344) *
                C16333 +
            ((C7750 + C7751 - C7752 - C7753) * C16331 +
             (C7754 + C7755 - C7756 - C7757) * C48344) *
                C48365) *
               C48316 +
           (((C550 * C2642 -
              ((C113 * C496 + C48250 * C515) * C2635 +
               (C113 * C486 + C48250 * C497) * C2641) +
              C551 * C47993) *
                 C16331 +
             (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47993) *
                 C48344) *
                C16333 +
            ((C7968 - (C7969 + C7970) + C7971) * C16331 +
             (C7972 - (C7973 + C7974) + C7975) * C48344) *
                C48365) *
               C48134) *
              C48090 +
          ((((C7752 - (C7751 + C7750) + C7753) * C16331 +
             (C7756 - (C7755 + C7754) + C7757) * C48344) *
                C16333 +
            ((C7758 - (C7759 + C7760) + C7761) * C16331 +
             (C7762 - (C7763 + C7764) + C7765) * C48344) *
                C48365) *
               C48316 +
           (((C7970 + C7969 - C7968 - C7971) * C16331 +
             (C7974 + C7973 - C7972 - C7975) * C48344) *
                C16333 +
            ((C8554 + C8555 - C8556 - C8557) * C16331 +
             (C8558 + C8559 - C8560 - C8561) * C48344) *
                C48365) *
               C48134) *
              C48097 +
          ((((C7760 + C7759 - C7758 - C7761) * C16331 +
             (C7764 + C7763 - C7762 - C7765) * C48344) *
                C16333 +
            ((C7766 + C7767 - C7768 - C7769) * C16331 +
             (C7770 + C7771 - C7772 - C7773) * C48344) *
                C48365) *
               C48316 +
           (((C8556 - (C8555 + C8554) + C8557) * C16331 +
             (C8560 - (C8559 + C8558) + C8561) * C48344) *
                C16333 +
            ((C6456 * C2642 - (C6602 * C2635 + C6603 * C2641) +
              C6457 * C47993) *
                 C16331 +
             ((C113 * C1715 + C48250 * C1720) * C2642 -
              (C6457 * C2635 + C6456 * C2641) +
              (C113 * C1721 + C48250 * C1724) * C47993) *
                 C48344) *
                C48365) *
               C48134) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2641 +
             (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
             C169 * C47993) *
                C16331 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                C48344) *
               C16333 +
           ((C7750 + C7751 - C7752 - C7753) * C16331 +
            (C7754 + C7755 - C7756 - C7757) * C48344) *
               C48365) *
              C48047 * C48393 +
          (((C7752 - (C7751 + C7750) + C7753) * C16331 +
            (C7756 - (C7755 + C7754) + C7757) * C48344) *
               C16333 +
           ((C7758 - (C7759 + C7760) + C7761) * C16331 +
            (C7762 - (C7763 + C7764) + C7765) * C48344) *
               C48365) *
              C48047 * C48389 +
          (((C7760 + C7759 - C7758 - C7761) * C16331 +
            (C7764 + C7763 - C7762 - C7765) * C48344) *
               C16333 +
           ((C7766 + C7767 - C7768 - C7769) * C16331 +
            (C7770 + C7771 - C7772 - C7773) * C48344) *
               C48365) *
              C48047 * C48379 +
          (((C7768 - (C7767 + C7766) + C7769) * C16331 +
            (C7772 - (C7771 + C7770) + C7773) * C48344) *
               C16333 +
           ((C5885 * C2642 - (C5886 * C2635 + C5887 * C2641) + C5884 * C47993) *
                C16331 +
            ((C113 * C1166 + C48250 * C1177) * C2642 -
             (C5884 * C2635 + C5885 * C2641) +
             (C113 * C1178 + C48250 * C1184) * C47993) *
                C48344) *
               C48365) *
              C48047 * C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2533 +
             (C113 * C127 + C48250 * C140) * C48392 - C168 * C2534 -
             C169 * C48385 + C170 * C2535 + C171 * C48372 - C172 * C2536 -
             C173 * C48351) *
                C16331 +
            (C168 * C2533 + C169 * C48392 - C170 * C2534 - C171 * C48385 +
             C172 * C2535 + C173 * C48372 - C174 * C2536 - C175 * C48351) *
                C48344) *
               C16333 +
           ((C7604 + C7605 - C7606 - C7607 + C7608 + C7609 - C7610 - C7611) *
                C16331 +
            (C7612 + C7613 - C7614 - C7615 + C7616 + C7617 - C7618 - C7619) *
                C48344) *
               C48365) *
              C48047 * C2531 +
          (((C7606 - (C7605 + C7604) + C7607 - C7608 - C7609 + C7610 + C7611) *
                C16331 +
            (C7614 - (C7613 + C7612) + C7615 - C7616 - C7617 + C7618 + C7619) *
                C48344) *
               C16333 +
           ((C367 * C2534 - (C4960 * C48392 + C4961 * C2533) + C368 * C48385 -
             C369 * C2535 - C370 * C48372 + C371 * C2536 + C372 * C48351) *
                C16331 +
            (C369 * C2534 - (C368 * C48392 + C367 * C2533) + C370 * C48385 -
             C371 * C2535 - C372 * C48372 +
             (C113 * C305 + C48250 * C324) * C2536 +
             (C113 * C325 + C48250 * C335) * C48351) *
                C48344) *
               C48365) *
              C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C2641 +
              (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
              C169 * C47993) *
                 C16331 +
             (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                 C48344) *
                C16333 +
            ((C7750 + C7751 - C7752 - C7753) * C16331 +
             (C7754 + C7755 - C7756 - C7757) * C48344) *
                C48365) *
               C48387 +
           (((C550 * C2642 -
              ((C113 * C496 + C48250 * C515) * C2635 +
               (C113 * C486 + C48250 * C497) * C2641) +
              C551 * C47993) *
                 C16331 +
             (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47993) *
                 C48344) *
                C16333 +
            ((C7968 - (C7969 + C7970) + C7971) * C16331 +
             (C7972 - (C7973 + C7974) + C7975) * C48344) *
                C48365) *
               C48376 +
           ((((C113 * C490 + C48250 * C505) * C2641 +
              (C113 * C506 + C48250 * C520) * C2635 - C556 * C2642 -
              C557 * C47993) *
                 C16331 +
             (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C47993) *
                 C48344) *
                C16333 +
            ((C7976 + C7977 - C7978 - C7979) * C16331 +
             (C7980 + C7981 - C7982 - C7983) * C48344) *
                C48365) *
               C48350) *
              C2531 +
          ((((C7752 - (C7751 + C7750) + C7753) * C16331 +
             (C7756 - (C7755 + C7754) + C7757) * C48344) *
                C16333 +
            ((C7758 - (C7759 + C7760) + C7761) * C16331 +
             (C7762 - (C7763 + C7764) + C7765) * C48344) *
                C48365) *
               C48387 +
           (((C7970 + C7969 - C7968 - C7971) * C16331 +
             (C7974 + C7973 - C7972 - C7975) * C48344) *
                C16333 +
            ((C8554 + C8555 - C8556 - C8557) * C16331 +
             (C8558 + C8559 - C8560 - C8561) * C48344) *
                C48365) *
               C48376 +
           (((C7978 - (C7977 + C7976) + C7979) * C16331 +
             (C7982 - (C7981 + C7980) + C7983) * C48344) *
                C16333 +
            ((C6077 * C2642 - (C6078 * C2635 + C6079 * C2641) +
              C6076 * C47993) *
                 C16331 +
             ((C113 * C1303 + C48250 * C1320) * C2642 -
              (C6076 * C2635 + C6077 * C2641) +
              (C113 * C1321 + C48250 * C1330) * C47993) *
                 C48344) *
                C48365) *
               C48350) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C47011 +
              (C113 * C127 + C48250 * C140) * C47988 - C168 * C47007 -
              C169 * C47996 + C170 * C47017 + C171 * C2901) *
                 C16331 +
             (C168 * C47011 + C169 * C47988 - C170 * C47007 - C171 * C47996 +
              C172 * C47017 + C173 * C2901) *
                 C48344) *
                C16333 +
            ((C8130 + C8131 - C8132 - C8133 + C8134 + C8135) * C16331 +
             (C8136 + C8137 - C8138 - C8139 + C8140 + C8141) * C48344) *
                C48365) *
               C48316 +
           (((C550 * C47007 -
              ((C113 * C496 + C48250 * C515) * C47988 +
               (C113 * C486 + C48250 * C497) * C47011) +
              C551 * C47996 - C552 * C47017 - C553 * C2901) *
                 C16331 +
             (C552 * C47007 - (C551 * C47988 + C550 * C47011) + C553 * C47996 -
              C554 * C47017 - C555 * C2901) *
                 C48344) *
                C16333 +
            ((C8348 - (C8349 + C8350) + C8351 - C8352 - C8353) * C16331 +
             (C8354 - (C8355 + C8356) + C8357 - C8358 - C8359) * C48344) *
                C48365) *
               C48134) *
              C2531 +
          ((((C8132 - (C8131 + C8130) + C8133 - C8134 - C8135) * C16331 +
             (C8138 - (C8137 + C8136) + C8139 - C8140 - C8141) * C48344) *
                C16333 +
            ((C8142 - (C8143 + C8144) + C8145 - C8146 - C8147) * C16331 +
             (C8148 - (C8149 + C8150) + C8151 - C8152 - C8153) * C48344) *
                C48365) *
               C48316 +
           (((C8350 + C8349 - C8348 - C8351 + C8352 + C8353) * C16331 +
             (C8356 + C8355 - C8354 - C8357 + C8358 + C8359) * C48344) *
                C16333 +
            ((C6074 * C47011 + C6075 * C47988 - C1612 * C47007 -
              C1613 * C47996 + C1614 * C47017 + C1615 * C2901) *
                 C16331 +
             (C1612 * C47011 + C1613 * C47988 - C1614 * C47007 -
              C1615 * C47996 + (C113 * C1599 + C48250 * C1600) * C47017 +
              (C113 * C1601 + C48250 * C1602) * C2901) *
                 C48344) *
                C48365) *
               C48134) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2533 +
             (C113 * C127 + C48250 * C140) * C48392 - C168 * C2534 -
             C169 * C48385 + C170 * C2535 + C171 * C48372 - C172 * C2536 -
             C173 * C48351) *
                C16331 +
            (C168 * C2533 + C169 * C48392 - C170 * C2534 - C171 * C48385 +
             C172 * C2535 + C173 * C48372 - C174 * C2536 - C175 * C48351) *
                C48344) *
               C16333 +
           ((C7604 + C7605 - C7606 - C7607 + C7608 + C7609 - C7610 - C7611) *
                C16331 +
            (C7612 + C7613 - C7614 - C7615 + C7616 + C7617 - C7618 - C7619) *
                C48344) *
               C48365) *
              C48047 * C2531 +
          (((C7606 - (C7605 + C7604) + C7607 - C7608 - C7609 + C7610 + C7611) *
                C16331 +
            (C7614 - (C7613 + C7612) + C7615 - C7616 - C7617 + C7618 + C7619) *
                C48344) *
               C16333 +
           ((C367 * C2534 - (C4960 * C48392 + C4961 * C2533) + C368 * C48385 -
             C369 * C2535 - C370 * C48372 + C371 * C2536 + C372 * C48351) *
                C16331 +
            (C369 * C2534 - (C368 * C48392 + C367 * C2533) + C370 * C48385 -
             C371 * C2535 - C372 * C48372 +
             (C113 * C305 + C48250 * C324) * C2536 +
             (C113 * C325 + C48250 * C335) * C48351) *
                C48344) *
               C48365) *
              C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2641 +
             (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
             C169 * C47993) *
                C16331 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                C48344) *
               C16333 +
           ((C7750 + C7751 - C7752 - C7753) * C16331 +
            (C7754 + C7755 - C7756 - C7757) * C48344) *
               C48365) *
              C48047 * C48393 +
          (((C7752 - (C7751 + C7750) + C7753) * C16331 +
            (C7756 - (C7755 + C7754) + C7757) * C48344) *
               C16333 +
           ((C7758 - (C7759 + C7760) + C7761) * C16331 +
            (C7762 - (C7763 + C7764) + C7765) * C48344) *
               C48365) *
              C48047 * C48389 +
          (((C7760 + C7759 - C7758 - C7761) * C16331 +
            (C7764 + C7763 - C7762 - C7765) * C48344) *
               C16333 +
           ((C7766 + C7767 - C7768 - C7769) * C16331 +
            (C7770 + C7771 - C7772 - C7773) * C48344) *
               C48365) *
              C48047 * C48379 +
          (((C7768 - (C7767 + C7766) + C7769) * C16331 +
            (C7772 - (C7771 + C7770) + C7773) * C48344) *
               C16333 +
           ((C5885 * C2642 - (C5886 * C2635 + C5887 * C2641) + C5884 * C47993) *
                C16331 +
            ((C113 * C1166 + C48250 * C1177) * C2642 -
             (C5884 * C2635 + C5885 * C2641) +
             (C113 * C1178 + C48250 * C1184) * C47993) *
                C48344) *
               C48365) *
              C48047 * C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C47001 +
              (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
              C169 * C47993) *
                 C16331 +
             (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                 C48344) *
                C16333 +
            ((C6218 + C6219 - C6220 - C6221) * C16331 +
             (C6222 + C6223 - C6224 - C6225) * C48344) *
                C48365) *
               C3298 +
           (((C550 * C46982 -
              ((C113 * C496 + C48250 * C515) * C48298 +
               (C113 * C486 + C48250 * C497) * C47001) +
              C551 * C47993) *
                 C16331 +
             (C552 * C46982 - (C551 * C48298 + C550 * C47001) + C553 * C47993) *
                 C48344) *
                C16333 +
            ((C6436 - (C6437 + C6438) + C6439) * C16331 +
             (C6440 - (C6441 + C6442) + C6443) * C48344) *
                C48365) *
               C48134) *
              C48090 +
          ((((C6220 - (C6219 + C6218) + C6221) * C16331 +
             (C6224 - (C6223 + C6222) + C6225) * C48344) *
                C16333 +
            ((C6226 - (C6227 + C6228) + C6229) * C16331 +
             (C6230 - (C6231 + C6232) + C6233) * C48344) *
                C48365) *
               C3298 +
           (((C6438 + C6437 - C6436 - C6439) * C16331 +
             (C6442 + C6441 - C6440 - C6443) * C48344) *
                C16333 +
            ((C6444 + C6445 - C6446 - C6447) * C16331 +
             (C6448 + C6449 - C6450 - C6451) * C48344) *
                C48365) *
               C48134) *
              C48097 +
          ((((C6228 + C6227 - C6226 - C6229) * C16331 +
             (C6232 + C6231 - C6230 - C6233) * C48344) *
                C16333 +
            ((C6234 + C6235 - C6236 - C6237) * C16331 +
             (C6238 + C6239 - C6240 - C6241) * C48344) *
                C48365) *
               C3298 +
           (((C6446 - (C6445 + C6444) + C6447) * C16331 +
             (C6450 - (C6449 + C6448) + C6451) * C48344) *
                C16333 +
            ((C6456 * C46982 - (C6602 * C48298 + C6603 * C47001) +
              C6457 * C47993) *
                 C16331 +
             ((C113 * C1715 + C48250 * C1720) * C46982 -
              (C6457 * C48298 + C6456 * C47001) +
              (C113 * C1721 + C48250 * C1724) * C47993) *
                 C48344) *
                C48365) *
               C48134) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C16331 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C16333 +
            ((C5860 + C5861) * C16331 + (C5862 + C5863) * C48344) * C48365) *
               C48130 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C16331) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C16331) *
                C16333) *
               C48137 +
           ((((C113 * C490 + C48250 * C505) * C1160 +
              (C113 * C506 + C48250 * C520) * C47983) *
                 C16331 +
             (C556 * C1160 + C557 * C47983) * C48344) *
                C16333 +
            ((C6080 + C6081) * C16331 + (C6056 + C6057) * C48344) * C48365) *
               C3806) *
              C48090 +
          ((((C6051 + C6050) * C16331 + (C6049 + C6048) * C48344) * C16333 +
            ((C6082 + C6083) * C16331 + (C6062 + C6063) * C48344) * C48365) *
               C48137 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C16331) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C16331) * C16333) *
               C48130 -
           (((C6084 + C6085) * C48344 + (C6086 + C6087) * C16331) * C48365 +
            ((C6057 + C6056) * C48344 + (C6081 + C6080) * C16331) * C16333) *
               C3806) *
              C48097 +
          ((((C5867 + C5866) * C16331 + (C5865 + C5864) * C48344) * C16333 +
            ((C5888 + C5889) * C16331 + (C5872 + C5873) * C48344) * C48365) *
               C48130 -
           (((C6596 + C6597) * C48344 + (C6604 + C6605) * C16331) * C48365 +
            ((C6063 + C6062) * C48344 + (C6083 + C6082) * C16331) * C16333) *
               C48137 +
           (((C6087 + C6086) * C16331 + (C6085 + C6084) * C48344) * C16333 +
            (((C113 * C6039 + C48250 * C6041) * C1160 +
              (C113 * C6042 + C48250 * C6045) * C47983) *
                 C16331 +
             ((C113 * C6040 + C48250 * C6043) * C1160 +
              (C113 * C6044 + C48250 * C6046) * C47983) *
                 C48344) *
                C48365) *
               C3806) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C16331 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C16333 +
            ((C5860 + C5861) * C16331 + (C5862 + C5863) * C48344) * C48365) *
               C3298 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C16331) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C16331) *
                C16333) *
               C48134) *
              C48393 +
          ((((C6051 + C6050) * C16331 + (C6049 + C6048) * C48344) * C16333 +
            ((C6082 + C6083) * C16331 + (C6062 + C6063) * C48344) * C48365) *
               C48134 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C16331) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C16331) * C16333) *
               C3298) *
              C48389 +
          ((((C5867 + C5866) * C16331 + (C5865 + C5864) * C48344) * C16333 +
            ((C5888 + C5889) * C16331 + (C5872 + C5873) * C48344) * C48365) *
               C3298 -
           (((C6596 + C6597) * C48344 + (C6604 + C6605) * C16331) * C48365 +
            ((C6063 + C6062) * C48344 + (C6083 + C6082) * C16331) * C16333) *
               C48134) *
              C48379 +
          ((((C6605 + C6604) * C16331 + (C6597 + C6596) * C48344) * C16333 +
            (((C113 * C6587 + C48250 * C6589) * C1160 +
              (C113 * C6590 + C48250 * C6593) * C47983) *
                 C16331 +
             ((C113 * C6588 + C48250 * C6591) * C1160 +
              (C113 * C6592 + C48250 * C6594) * C47983) *
                 C48344) *
                C48365) *
               C48134 -
           (((C5890 + C5891) * C48344 + (C5892 + C5893) * C16331) * C48365 +
            ((C5873 + C5872) * C48344 + (C5889 + C5888) * C16331) * C16333) *
               C3298) *
              C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1089 +
              (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
              C169 * C48370 + C170 * C1091 + C171 * C48339) *
                 C16331 +
             (C168 * C1089 + C169 * C48383 - C170 * C1090 - C171 * C48370 +
              C172 * C1091 + C173 * C48339) *
                 C48344) *
                C16333 +
            ((C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C16331 +
             (C5752 + C5753 - C5754 - C5755 + C5756 + C5757) * C48344) *
                C48365) *
               C3298 +
           (((C550 * C1090 -
              ((C113 * C496 + C48250 * C515) * C48383 +
               (C113 * C486 + C48250 * C497) * C1089) +
              C551 * C48370 - C552 * C1091 - C553 * C48339) *
                 C16331 +
             (C552 * C1090 - (C551 * C48383 + C550 * C1089) + C553 * C48370 -
              C554 * C1091 - C555 * C48339) *
                 C48344) *
                C16333 +
            ((C9744 - (C9745 + C9746) + C9747 - C9748 - C9749) * C16331 +
             (C9750 - (C9751 + C9752) + C9753 - C9754 - C9755) * C48344) *
                C48365) *
               C48134) *
              C2531 +
          ((((C5748 - (C5747 + C5746) + C5749 - C5750 - C5751) * C16331 +
             (C5754 - (C5753 + C5752) + C5755 - C5756 - C5757) * C48344) *
                C16333 +
            ((C5758 - (C5759 + C5760) + C5761 - C5762 - C5763) * C16331 +
             (C5764 - (C5765 + C5766) + C5767 - C5768 - C5769) * C48344) *
                C48365) *
               C3298 +
           (((C9746 + C9745 - C9744 - C9747 + C9748 + C9749) * C16331 +
             (C9752 + C9751 - C9750 - C9753 + C9754 + C9755) * C48344) *
                C16333 +
            ((C6074 * C1089 + C6075 * C48383 - C1612 * C1090 - C1613 * C48370 +
              C1614 * C1091 + C1615 * C48339) *
                 C16331 +
             (C1612 * C1089 + C1613 * C48383 - C1614 * C1090 - C1615 * C48370 +
              (C113 * C1599 + C48250 * C1600) * C1091 +
              (C113 * C1601 + C48250 * C1602) * C48339) *
                 C48344) *
                C48365) *
               C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C16331 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C16333 +
            ((C5860 + C5861) * C16331 + (C5862 + C5863) * C48344) * C48365) *
               C48394 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C16331) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C16331) *
                C16333) *
               C48391 +
           ((((C113 * C490 + C48250 * C505) * C1160 +
              (C113 * C506 + C48250 * C520) * C47983) *
                 C16331 +
             (C556 * C1160 + C557 * C47983) * C48344) *
                C16333 +
            ((C6080 + C6081) * C16331 + (C6056 + C6057) * C48344) * C48365) *
               C48382 -
           (((C7464 + C7465) * C48344 + (C7472 + C7473) * C16331) * C48365 +
            ((C2317 * C47983 + C2316 * C1160) * C48344 +
             ((C113 * C2025 + C48250 * C2035) * C47983 +
              (C113 * C2017 + C48250 * C2026) * C1160) *
                 C16331) *
                C16333) *
               C48363) *
              C2531 +
          ((((C6051 + C6050) * C16331 + (C6049 + C6048) * C48344) * C16333 +
            ((C6082 + C6083) * C16331 + (C6062 + C6063) * C48344) * C48365) *
               C48391 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C16331) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C16331) * C16333) *
               C48394 -
           (((C6084 + C6085) * C48344 + (C6086 + C6087) * C16331) * C48365 +
            ((C6057 + C6056) * C48344 + (C6081 + C6080) * C16331) * C16333) *
               C48382 +
           (((C7473 + C7472) * C16331 + (C7465 + C7464) * C48344) * C16333 +
            (((C113 * C7455 + C48250 * C7457) * C1160 +
              (C113 * C7458 + C48250 * C7461) * C47983) *
                 C16331 +
             ((C113 * C7456 + C48250 * C7459) * C1160 +
              (C113 * C7460 + C48250 * C7462) * C47983) *
                 C48344) *
                C48365) *
               C48363) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C47001 +
              (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
              C169 * C47993) *
                 C16331 +
             (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                 C48344) *
                C16333 +
            ((C6218 + C6219 - C6220 - C6221) * C16331 +
             (C6222 + C6223 - C6224 - C6225) * C48344) *
                C48365) *
               C48130 +
           (((C550 * C46982 -
              ((C113 * C496 + C48250 * C515) * C48298 +
               (C113 * C486 + C48250 * C497) * C47001) +
              C551 * C47993) *
                 C16331 +
             (C552 * C46982 - (C551 * C48298 + C550 * C47001) + C553 * C47993) *
                 C48344) *
                C16333 +
            ((C6436 - (C6437 + C6438) + C6439) * C16331 +
             (C6440 - (C6441 + C6442) + C6443) * C48344) *
                C48365) *
               C48137 +
           ((((C113 * C490 + C48250 * C505) * C47001 +
              (C113 * C506 + C48250 * C520) * C48298 - C556 * C46982 -
              C557 * C47993) *
                 C16331 +
             (C556 * C47001 + C557 * C48298 - C558 * C46982 - C559 * C47993) *
                 C48344) *
                C16333 +
            ((C7182 + C7183 - C7184 - C7185) * C16331 +
             (C7186 + C7187 - C7188 - C7189) * C48344) *
                C48365) *
               C3806) *
              C2531 +
          ((((C6220 - (C6219 + C6218) + C6221) * C16331 +
             (C6224 - (C6223 + C6222) + C6225) * C48344) *
                C16333 +
            ((C6226 - (C6227 + C6228) + C6229) * C16331 +
             (C6230 - (C6231 + C6232) + C6233) * C48344) *
                C48365) *
               C48130 +
           (((C6438 + C6437 - C6436 - C6439) * C16331 +
             (C6442 + C6441 - C6440 - C6443) * C48344) *
                C16333 +
            ((C6444 + C6445 - C6446 - C6447) * C16331 +
             (C6448 + C6449 - C6450 - C6451) * C48344) *
                C48365) *
               C48137 +
           (((C7184 - (C7183 + C7182) + C7185) * C16331 +
             (C7188 - (C7187 + C7186) + C7189) * C48344) *
                C16333 +
            ((C6077 * C46982 - (C6078 * C48298 + C6079 * C47001) +
              C6076 * C47993) *
                 C16331 +
             ((C113 * C1303 + C48250 * C1320) * C46982 -
              (C6076 * C48298 + C6077 * C47001) +
              (C113 * C1321 + C48250 * C1330) * C47993) *
                 C48344) *
                C48365) *
               C3806) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1089 +
              (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
              C169 * C48370 + C170 * C1091 + C171 * C48339) *
                 C16331 +
             (C168 * C1089 + C169 * C48383 - C170 * C1090 - C171 * C48370 +
              C172 * C1091 + C173 * C48339) *
                 C48344) *
                C16333 +
            ((C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C16331 +
             (C5752 + C5753 - C5754 - C5755 + C5756 + C5757) * C48344) *
                C48365) *
               C3298 +
           (((C550 * C1090 -
              ((C113 * C496 + C48250 * C515) * C48383 +
               (C113 * C486 + C48250 * C497) * C1089) +
              C551 * C48370 - C552 * C1091 - C553 * C48339) *
                 C16331 +
             (C552 * C1090 - (C551 * C48383 + C550 * C1089) + C553 * C48370 -
              C554 * C1091 - C555 * C48339) *
                 C48344) *
                C16333 +
            ((C9744 - (C9745 + C9746) + C9747 - C9748 - C9749) * C16331 +
             (C9750 - (C9751 + C9752) + C9753 - C9754 - C9755) * C48344) *
                C48365) *
               C48134) *
              C2531 +
          ((((C5748 - (C5747 + C5746) + C5749 - C5750 - C5751) * C16331 +
             (C5754 - (C5753 + C5752) + C5755 - C5756 - C5757) * C48344) *
                C16333 +
            ((C5758 - (C5759 + C5760) + C5761 - C5762 - C5763) * C16331 +
             (C5764 - (C5765 + C5766) + C5767 - C5768 - C5769) * C48344) *
                C48365) *
               C3298 +
           (((C9746 + C9745 - C9744 - C9747 + C9748 + C9749) * C16331 +
             (C9752 + C9751 - C9750 - C9753 + C9754 + C9755) * C48344) *
                C16333 +
            ((C6074 * C1089 + C6075 * C48383 - C1612 * C1090 - C1613 * C48370 +
              C1614 * C1091 + C1615 * C48339) *
                 C16331 +
             (C1612 * C1089 + C1613 * C48383 - C1614 * C1090 - C1615 * C48370 +
              (C113 * C1599 + C48250 * C1600) * C1091 +
              (C113 * C1601 + C48250 * C1602) * C48339) *
                 C48344) *
                C48365) *
               C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C16331 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C16333 +
            ((C5860 + C5861) * C16331 + (C5862 + C5863) * C48344) * C48365) *
               C3298 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C16331) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C16331) *
                C16333) *
               C48134) *
              C48393 +
          ((((C6051 + C6050) * C16331 + (C6049 + C6048) * C48344) * C16333 +
            ((C6082 + C6083) * C16331 + (C6062 + C6063) * C48344) * C48365) *
               C48134 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C16331) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C16331) * C16333) *
               C3298) *
              C48389 +
          ((((C5867 + C5866) * C16331 + (C5865 + C5864) * C48344) * C16333 +
            ((C5888 + C5889) * C16331 + (C5872 + C5873) * C48344) * C48365) *
               C3298 -
           (((C6596 + C6597) * C48344 + (C6604 + C6605) * C16331) * C48365 +
            ((C6063 + C6062) * C48344 + (C6083 + C6082) * C16331) * C16333) *
               C48134) *
              C48379 +
          ((((C6605 + C6604) * C16331 + (C6597 + C6596) * C48344) * C16333 +
            (((C113 * C6587 + C48250 * C6589) * C1160 +
              (C113 * C6590 + C48250 * C6593) * C47983) *
                 C16331 +
             ((C113 * C6588 + C48250 * C6591) * C1160 +
              (C113 * C6592 + C48250 * C6594) * C47983) *
                 C48344) *
                C48365) *
               C48134 -
           (((C5890 + C5891) * C48344 + (C5892 + C5893) * C16331) * C48365 +
            ((C5873 + C5872) * C48344 + (C5889 + C5888) * C16331) * C16333) *
               C3298) *
              C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C47001 +
             (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
             C169 * C47993) *
                C16331 +
            (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                C48344) *
               C16333 +
           ((C6218 + C6219 - C6220 - C6221) * C16331 +
            (C6222 + C6223 - C6224 - C6225) * C48344) *
               C48365) *
              C48047 * C1431 +
          (((C6220 - (C6219 + C6218) + C6221) * C16331 +
            (C6224 - (C6223 + C6222) + C6225) * C48344) *
               C16333 +
           ((C6226 - (C6227 + C6228) + C6229) * C16331 +
            (C6230 - (C6231 + C6232) + C6233) * C48344) *
               C48365) *
              C48047 * C1432 +
          (((C6228 + C6227 - C6226 - C6229) * C16331 +
            (C6232 + C6231 - C6230 - C6233) * C48344) *
               C16333 +
           ((C6234 + C6235 - C6236 - C6237) * C16331 +
            (C6238 + C6239 - C6240 - C6241) * C48344) *
               C48365) *
              C48047 * C1433 +
          (((C6236 - (C6235 + C6234) + C6237) * C16331 +
            (C6240 - (C6239 + C6238) + C6241) * C48344) *
               C16333 +
           ((C5885 * C46982 - (C5886 * C48298 + C5887 * C47001) +
             C5884 * C47993) *
                C16331 +
            ((C113 * C1166 + C48250 * C1177) * C46982 -
             (C5884 * C48298 + C5885 * C47001) +
             (C113 * C1178 + C48250 * C1184) * C47993) *
                C48344) *
               C48365) *
              C48047 * C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C665 +
             (C113 * C127 + C48250 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48351) *
                C16331 +
            (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48351) *
                C48344) *
               C16333 +
           ((C5242 + C5243 - C5244 - C5245 + C5246 + C5247 - C5248 - C5249) *
                C16331 +
            (C5250 + C5251 - C5252 - C5253 + C5254 + C5255 - C5256 - C5257) *
                C48344) *
               C48365) *
              C48047 * C48315 +
          (((C5244 - (C5243 + C5242) + C5245 - C5246 - C5247 + C5248 + C5249) *
                C16331 +
            (C5252 - (C5251 + C5250) + C5253 - C5254 - C5255 + C5256 + C5257) *
                C48344) *
               C16333 +
           ((C367 * C666 - (C4960 * C659 + C4961 * C665) + C368 * C660 -
             C369 * C667 - C370 * C661 + C371 * C668 + C372 * C48351) *
                C16331 +
            (C369 * C666 - (C368 * C659 + C367 * C665) + C370 * C660 -
             C371 * C667 - C372 * C661 + (C113 * C305 + C48250 * C324) * C668 +
             (C113 * C325 + C48250 * C335) * C48351) *
                C48344) *
               C48365) *
              C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C47001 +
              (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
              C169 * C47993) *
                 C16331 +
             (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                 C48344) *
                C16333 +
            ((C6218 + C6219 - C6220 - C6221) * C16331 +
             (C6222 + C6223 - C6224 - C6225) * C48344) *
                C48365) *
               C1835 +
           (((C550 * C46982 -
              ((C113 * C496 + C48250 * C515) * C48298 +
               (C113 * C486 + C48250 * C497) * C47001) +
              C551 * C47993) *
                 C16331 +
             (C552 * C46982 - (C551 * C48298 + C550 * C47001) + C553 * C47993) *
                 C48344) *
                C16333 +
            ((C6436 - (C6437 + C6438) + C6439) * C16331 +
             (C6440 - (C6441 + C6442) + C6443) * C48344) *
                C48365) *
               C1836 +
           ((((C113 * C490 + C48250 * C505) * C47001 +
              (C113 * C506 + C48250 * C520) * C48298 - C556 * C46982 -
              C557 * C47993) *
                 C16331 +
             (C556 * C47001 + C557 * C48298 - C558 * C46982 - C559 * C47993) *
                 C48344) *
                C16333 +
            ((C7182 + C7183 - C7184 - C7185) * C16331 +
             (C7186 + C7187 - C7188 - C7189) * C48344) *
                C48365) *
               C48350) *
              C48315 +
          ((((C6220 - (C6219 + C6218) + C6221) * C16331 +
             (C6224 - (C6223 + C6222) + C6225) * C48344) *
                C16333 +
            ((C6226 - (C6227 + C6228) + C6229) * C16331 +
             (C6230 - (C6231 + C6232) + C6233) * C48344) *
                C48365) *
               C1835 +
           (((C6438 + C6437 - C6436 - C6439) * C16331 +
             (C6442 + C6441 - C6440 - C6443) * C48344) *
                C16333 +
            ((C6444 + C6445 - C6446 - C6447) * C16331 +
             (C6448 + C6449 - C6450 - C6451) * C48344) *
                C48365) *
               C1836 +
           (((C7184 - (C7183 + C7182) + C7185) * C16331 +
             (C7188 - (C7187 + C7186) + C7189) * C48344) *
                C16333 +
            ((C6077 * C46982 - (C6078 * C48298 + C6079 * C47001) +
              C6076 * C47993) *
                 C16331 +
             ((C113 * C1303 + C48250 * C1320) * C46982 -
              (C6076 * C48298 + C6077 * C47001) +
              (C113 * C1321 + C48250 * C1330) * C47993) *
                 C48344) *
                C48365) *
               C48350) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C16331 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C16333 +
            ((C5860 + C5861) * C16331 + (C5862 + C5863) * C48344) * C48365) *
               C48316 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C16331) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C16331) *
                C16333) *
               C48134) *
              C1431 +
          ((((C6051 + C6050) * C16331 + (C6049 + C6048) * C48344) * C16333 +
            ((C6082 + C6083) * C16331 + (C6062 + C6063) * C48344) * C48365) *
               C48134 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C16331) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C16331) * C16333) *
               C48316) *
              C1432 +
          ((((C5867 + C5866) * C16331 + (C5865 + C5864) * C48344) * C16333 +
            ((C5888 + C5889) * C16331 + (C5872 + C5873) * C48344) * C48365) *
               C48316 -
           (((C6596 + C6597) * C48344 + (C6604 + C6605) * C16331) * C48365 +
            ((C6063 + C6062) * C48344 + (C6083 + C6082) * C16331) * C16333) *
               C48134) *
              C1433 +
          ((((C6605 + C6604) * C16331 + (C6597 + C6596) * C48344) * C16333 +
            (((C113 * C6587 + C48250 * C6589) * C1160 +
              (C113 * C6590 + C48250 * C6593) * C47983) *
                 C16331 +
             ((C113 * C6588 + C48250 * C6591) * C1160 +
              (C113 * C6592 + C48250 * C6594) * C47983) *
                 C48344) *
                C48365) *
               C48134 -
           (((C5890 + C5891) * C48344 + (C5892 + C5893) * C16331) * C48365 +
            ((C5873 + C5872) * C48344 + (C5889 + C5888) * C16331) * C16333) *
               C48316) *
              C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C293 +
              (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
              C170 * C295 + C171 * C48339) *
                 C16331 +
             (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
              C172 * C295 + C173 * C48339) *
                 C48344) *
                C16333 +
            ((C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C16331 +
             (C4938 + C4939 - C4940 - C4941 + C4942 + C4943) * C48344) *
                C48365) *
               C48316 +
           (((C550 * C294 -
              ((C113 * C496 + C48250 * C515) * C287 +
               (C113 * C486 + C48250 * C497) * C293) +
              C551 * C288 - C552 * C295 - C553 * C48339) *
                 C16331 +
             (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
              C554 * C295 - C555 * C48339) *
                 C48344) *
                C16333 +
            ((C5582 - (C5598 + C5599) + C5587 - C5588 - C5589) * C16331 +
             (C5590 - (C5591 + C5592) + C5593 - C5594 - C5595) * C48344) *
                C48365) *
               C48134) *
              C48315 +
          ((((C4934 - (C4963 + C4962) + C4935 - C4936 - C4937) * C16331 +
             (C4940 - (C4939 + C4938) + C4941 - C4942 - C4943) * C48344) *
                C16333 +
            ((C4944 - (C4964 + C4965) + C4949 - C4950 - C4951) * C16331 +
             (C4952 - (C4953 + C4954) + C4955 - C4956 - C4957) * C48344) *
                C48365) *
               C48316 +
           (((C5599 + C5598 - C5582 - C5587 + C5588 + C5589) * C16331 +
             (C5592 + C5591 - C5590 - C5593 + C5594 + C5595) * C48344) *
                C16333 +
            ((C6074 * C293 + C6075 * C287 - C1612 * C294 - C1613 * C288 +
              C1614 * C295 + C1615 * C48339) *
                 C16331 +
             (C1612 * C293 + C1613 * C287 - C1614 * C294 - C1615 * C288 +
              (C113 * C1599 + C48250 * C1600) * C295 +
              (C113 * C1601 + C48250 * C1602) * C48339) *
                 C48344) *
                C48365) *
               C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C16331 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C16333 +
            ((C5860 + C5861) * C16331 + (C5862 + C5863) * C48344) * C48365) *
               C2299 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C16331) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C16331) *
                C16333) *
               C2300 +
           ((((C113 * C490 + C48250 * C505) * C1160 +
              (C113 * C506 + C48250 * C520) * C47983) *
                 C16331 +
             (C556 * C1160 + C557 * C47983) * C48344) *
                C16333 +
            ((C6080 + C6081) * C16331 + (C6056 + C6057) * C48344) * C48365) *
               C2301 -
           (((C7464 + C7465) * C48344 + (C7472 + C7473) * C16331) * C48365 +
            ((C2317 * C47983 + C2316 * C1160) * C48344 +
             ((C113 * C2025 + C48250 * C2035) * C47983 +
              (C113 * C2017 + C48250 * C2026) * C1160) *
                 C16331) *
                C16333) *
               C48363) *
              C48315 +
          ((((C6051 + C6050) * C16331 + (C6049 + C6048) * C48344) * C16333 +
            ((C6082 + C6083) * C16331 + (C6062 + C6063) * C48344) * C48365) *
               C2300 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C16331) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C16331) * C16333) *
               C2299 -
           (((C6084 + C6085) * C48344 + (C6086 + C6087) * C16331) * C48365 +
            ((C6057 + C6056) * C48344 + (C6081 + C6080) * C16331) * C16333) *
               C2301 +
           (((C7473 + C7472) * C16331 + (C7465 + C7464) * C48344) * C16333 +
            (((C113 * C7455 + C48250 * C7457) * C1160 +
              (C113 * C7458 + C48250 * C7461) * C47983) *
                 C16331 +
             ((C113 * C7456 + C48250 * C7459) * C1160 +
              (C113 * C7460 + C48250 * C7462) * C47983) *
                 C48344) *
                C48365) *
               C48363) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C48250 * C126) * C114 +
                (C113 * C127 + C48250 * C140) * C102 - C168 * C115 -
                C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
                C173 * C105 + C174 * C118 + C175 * C106) *
                   C16331 +
               (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
                C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
                C176 * C118 + C177 * C106) *
                   C48344) *
                  C16333 +
              ((C4958 * C114 + C4959 * C102 - C361 * C115 - C362 * C103 +
                C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 +
                C678 * C118 + C679 * C106) *
                   C16331 +
               (C361 * C114 + C362 * C102 - C363 * C115 - C364 * C103 +
                C365 * C116 + C366 * C104 - C678 * C117 - C679 * C105 +
                (C113 * C669 + C48250 * C670) * C118 +
                (C113 * C671 + C48250 * C672) * C106) *
                   C48344) *
                  C48365) *
             C48047 * C48035 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C119 + C48250 * C126) * C293 +
                 (C113 * C127 + C48250 * C140) * C287 - C168 * C294 -
                 C169 * C288 + C170 * C295 + C171 * C48339) *
                    C16331 +
                (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
                 C172 * C295 + C173 * C48339) *
                    C48344) *
                   C16333 +
               ((C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C16331 +
                (C4938 + C4939 - C4940 - C4941 + C4942 + C4943) * C48344) *
                   C48365) *
                  C48047 * C48386 +
              (((C4934 - (C4963 + C4962) + C4935 - C4936 - C4937) * C16331 +
                (C4940 - (C4939 + C4938) + C4941 - C4942 - C4943) * C48344) *
                   C16333 +
               ((C4944 - (C4964 + C4965) + C4949 - C4950 - C4951) * C16331 +
                (C4952 - (C4953 + C4954) + C4955 - C4956 - C4957) * C48344) *
                   C48365) *
                  C48047 * C48374 +
              (((C4965 + C4964 - C4944 - C4949 + C4950 + C4951) * C16331 +
                (C4954 + C4953 - C4952 - C4955 + C4956 + C4957) * C48344) *
                   C16333 +
               ((C5882 * C293 + C5883 * C287 - C1450 * C294 - C1451 * C288 +
                 C1452 * C295 + C1453 * C48339) *
                    C16331 +
                (C1450 * C293 + C1451 * C287 - C1452 * C294 - C1453 * C288 +
                 (C113 * C1437 + C48250 * C1438) * C295 +
                 (C113 * C1439 + C48250 * C1440) * C48339) *
                    C48344) *
                   C48365) *
                  C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C293 +
             (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48339) *
                C16331 +
            (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C48339) *
                C48344) *
               C16333 +
           ((C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C16331 +
            (C4938 + C4939 - C4940 - C4941 + C4942 + C4943) * C48344) *
               C48365) *
              C48387 +
          (((C550 * C294 -
             ((C113 * C496 + C48250 * C515) * C287 +
              (C113 * C486 + C48250 * C497) * C293) +
             C551 * C288 - C552 * C295 - C553 * C48339) *
                C16331 +
            (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
             C554 * C295 - C555 * C48339) *
                C48344) *
               C16333 +
           ((C5582 - (C5598 + C5599) + C5587 - C5588 - C5589) * C16331 +
            (C5590 - (C5591 + C5592) + C5593 - C5594 - C5595) * C48344) *
               C48365) *
              C48376 +
          ((((C113 * C490 + C48250 * C505) * C293 +
             (C113 * C506 + C48250 * C520) * C287 - C556 * C294 - C557 * C288 +
             C558 * C295 + C559 * C48339) *
                C16331 +
            (C556 * C293 + C557 * C287 - C558 * C294 - C559 * C288 +
             C560 * C295 + C561 * C48339) *
                C48344) *
               C16333 +
           ((C6072 * C293 + C6073 * C287 - C2198 * C294 - C2199 * C288 +
             C2200 * C295 + C2201 * C48339) *
                C16331 +
            (C2198 * C293 + C2199 * C287 - C2200 * C294 - C2201 * C288 +
             (C113 * C2185 + C48250 * C2186) * C295 +
             (C113 * C2187 + C48250 * C2188) * C48339) *
                C48344) *
               C48365) *
              C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1089 +
             (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
             C169 * C48370 + C170 * C1091 + C171 * C48339) *
                C16331 +
            (C168 * C1089 + C169 * C48383 - C170 * C1090 - C171 * C48370 +
             C172 * C1091 + C173 * C48339) *
                C48344) *
               C16333 +
           ((C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C16331 +
            (C5752 + C5753 - C5754 - C5755 + C5756 + C5757) * C48344) *
               C48365) *
              C48047 * C1086 +
          (((C5748 - (C5747 + C5746) + C5749 - C5750 - C5751) * C16331 +
            (C5754 - (C5753 + C5752) + C5755 - C5756 - C5757) * C48344) *
               C16333 +
           ((C5758 - (C5759 + C5760) + C5761 - C5762 - C5763) * C16331 +
            (C5764 - (C5765 + C5766) + C5767 - C5768 - C5769) * C48344) *
               C48365) *
              C48047 * C1087 +
          (((C5760 + C5759 - C5758 - C5761 + C5762 + C5763) * C16331 +
            (C5766 + C5765 - C5764 - C5767 + C5768 + C5769) * C48344) *
               C16333 +
           ((C5882 * C1089 + C5883 * C48383 - C1450 * C1090 - C1451 * C48370 +
             C1452 * C1091 + C1453 * C48339) *
                C16331 +
            (C1450 * C1089 + C1451 * C48383 - C1452 * C1090 - C1453 * C48370 +
             (C113 * C1437 + C48250 * C1438) * C1091 +
             (C113 * C1439 + C48250 * C1440) * C48339) *
                C48344) *
               C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1160 +
             (C113 * C127 + C48250 * C140) * C47983) *
                C16331 +
            (C168 * C1160 + C169 * C47983) * C48344) *
               C16333 +
           ((C5860 + C5861) * C16331 + (C5862 + C5863) * C48344) * C48365) *
              C48047 * C1155 -
          (((C5864 + C5865) * C48344 + (C5866 + C5867) * C16331) * C48365 +
           ((C5863 + C5862) * C48344 + (C5861 + C5860) * C16331) * C16333) *
              C48047 * C1156 +
          (((C5867 + C5866) * C16331 + (C5865 + C5864) * C48344) * C16333 +
           ((C5888 + C5889) * C16331 + (C5872 + C5873) * C48344) * C48365) *
              C48047 * C1157 -
          (((C5890 + C5891) * C48344 + (C5892 + C5893) * C16331) * C48365 +
           ((C5873 + C5872) * C48344 + (C5889 + C5888) * C16331) * C16333) *
              C48047 * C1158 +
          (((C5893 + C5892) * C16331 + (C5891 + C5890) * C48344) * C16333 +
           (((C113 * C5851 + C48250 * C5853) * C1160 +
             (C113 * C5854 + C48250 * C5857) * C47983) *
                C16331 +
            ((C113 * C5852 + C48250 * C5855) * C1160 +
             (C113 * C5856 + C48250 * C5858) * C47983) *
                C48344) *
               C48365) *
              C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C16331 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C16333 +
            ((C5860 + C5861) * C16331 + (C5862 + C5863) * C48344) * C48365) *
               C48387 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C16331) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C16331) *
                C16333) *
               C48376 +
           ((((C113 * C490 + C48250 * C505) * C1160 +
              (C113 * C506 + C48250 * C520) * C47983) *
                 C16331 +
             (C556 * C1160 + C557 * C47983) * C48344) *
                C16333 +
            ((C6080 + C6081) * C16331 + (C6056 + C6057) * C48344) * C48365) *
               C48350) *
              C1086 +
          ((((C6051 + C6050) * C16331 + (C6049 + C6048) * C48344) * C16333 +
            ((C6082 + C6083) * C16331 + (C6062 + C6063) * C48344) * C48365) *
               C48376 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C16331) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C16331) * C16333) *
               C48387 -
           (((C6084 + C6085) * C48344 + (C6086 + C6087) * C16331) * C48365 +
            ((C6057 + C6056) * C48344 + (C6081 + C6080) * C16331) * C16333) *
               C48350) *
              C1087 +
          ((((C5867 + C5866) * C16331 + (C5865 + C5864) * C48344) * C16333 +
            ((C5888 + C5889) * C16331 + (C5872 + C5873) * C48344) * C48365) *
               C48387 -
           (((C6596 + C6597) * C48344 + (C6604 + C6605) * C16331) * C48365 +
            ((C6063 + C6062) * C48344 + (C6083 + C6082) * C16331) * C16333) *
               C48376 +
           (((C6087 + C6086) * C16331 + (C6085 + C6084) * C48344) * C16333 +
            (((C113 * C6039 + C48250 * C6041) * C1160 +
              (C113 * C6042 + C48250 * C6045) * C47983) *
                 C16331 +
             ((C113 * C6040 + C48250 * C6043) * C1160 +
              (C113 * C6044 + C48250 * C6046) * C47983) *
                 C48344) *
                C48365) *
               C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1089 +
             (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
             C169 * C48370 + C170 * C1091 + C171 * C48339) *
                C16331 +
            (C168 * C1089 + C169 * C48383 - C170 * C1090 - C171 * C48370 +
             C172 * C1091 + C173 * C48339) *
                C48344) *
               C16333 +
           ((C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C16331 +
            (C5752 + C5753 - C5754 - C5755 + C5756 + C5757) * C48344) *
               C48365) *
              C1835 +
          (((C550 * C1090 -
             ((C113 * C496 + C48250 * C515) * C48383 +
              (C113 * C486 + C48250 * C497) * C1089) +
             C551 * C48370 - C552 * C1091 - C553 * C48339) *
                C16331 +
            (C552 * C1090 - (C551 * C48383 + C550 * C1089) + C553 * C48370 -
             C554 * C1091 - C555 * C48339) *
                C48344) *
               C16333 +
           ((C9744 - (C9745 + C9746) + C9747 - C9748 - C9749) * C16331 +
            (C9750 - (C9751 + C9752) + C9753 - C9754 - C9755) * C48344) *
               C48365) *
              C1836 +
          ((((C113 * C490 + C48250 * C505) * C1089 +
             (C113 * C506 + C48250 * C520) * C48383 - C556 * C1090 -
             C557 * C48370 + C558 * C1091 + C559 * C48339) *
                C16331 +
            (C556 * C1089 + C557 * C48383 - C558 * C1090 - C559 * C48370 +
             C560 * C1091 + C561 * C48339) *
                C48344) *
               C16333 +
           ((C6072 * C1089 + C6073 * C48383 - C2198 * C1090 - C2199 * C48370 +
             C2200 * C1091 + C2201 * C48339) *
                C16331 +
            (C2198 * C1089 + C2199 * C48383 - C2200 * C1090 - C2201 * C48370 +
             (C113 * C2185 + C48250 * C2186) * C1091 +
             (C113 * C2187 + C48250 * C2188) * C48339) *
                C48344) *
               C48365) *
              C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C16331 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C16333 +
            ((C5860 + C5861) * C16331 + (C5862 + C5863) * C48344) * C48365) *
               C1835 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C16331) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C16331) *
                C16333) *
               C1836 +
           ((((C113 * C490 + C48250 * C505) * C1160 +
              (C113 * C506 + C48250 * C520) * C47983) *
                 C16331 +
             (C556 * C1160 + C557 * C47983) * C48344) *
                C16333 +
            ((C6080 + C6081) * C16331 + (C6056 + C6057) * C48344) * C48365) *
               C48350) *
              C48386 +
          ((((C6051 + C6050) * C16331 + (C6049 + C6048) * C48344) * C16333 +
            ((C6082 + C6083) * C16331 + (C6062 + C6063) * C48344) * C48365) *
               C1836 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C16331) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C16331) * C16333) *
               C1835 -
           (((C6084 + C6085) * C48344 + (C6086 + C6087) * C16331) * C48365 +
            ((C6057 + C6056) * C48344 + (C6081 + C6080) * C16331) * C16333) *
               C48350) *
              C48374 +
          ((((C5867 + C5866) * C16331 + (C5865 + C5864) * C48344) * C16333 +
            ((C5888 + C5889) * C16331 + (C5872 + C5873) * C48344) * C48365) *
               C1835 -
           (((C6596 + C6597) * C48344 + (C6604 + C6605) * C16331) * C48365 +
            ((C6063 + C6062) * C48344 + (C6083 + C6082) * C16331) * C16333) *
               C1836 +
           (((C6087 + C6086) * C16331 + (C6085 + C6084) * C48344) * C16333 +
            (((C113 * C6039 + C48250 * C6041) * C1160 +
              (C113 * C6042 + C48250 * C6045) * C47983) *
                 C16331 +
             ((C113 * C6040 + C48250 * C6043) * C1160 +
              (C113 * C6044 + C48250 * C6046) * C47983) *
                 C48344) *
                C48365) *
               C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1160 +
             (C113 * C127 + C48250 * C140) * C47983) *
                C16331 +
            (C168 * C1160 + C169 * C47983) * C48344) *
               C16333 +
           ((C5860 + C5861) * C16331 + (C5862 + C5863) * C48344) * C48365) *
              C2010 -
          (((C6048 + C6049) * C48344 + (C6050 + C6051) * C16331) * C48365 +
           ((C551 * C47983 + C550 * C1160) * C48344 +
            ((C113 * C496 + C48250 * C515) * C47983 +
             (C113 * C486 + C48250 * C497) * C1160) *
                C16331) *
               C16333) *
              C2011 +
          ((((C113 * C490 + C48250 * C505) * C1160 +
             (C113 * C506 + C48250 * C520) * C47983) *
                C16331 +
            (C556 * C1160 + C557 * C47983) * C48344) *
               C16333 +
           ((C6080 + C6081) * C16331 + (C6056 + C6057) * C48344) * C48365) *
              C2012 -
          (((C7464 + C7465) * C48344 + (C7472 + C7473) * C16331) * C48365 +
           ((C2317 * C47983 + C2316 * C1160) * C48344 +
            ((C113 * C2025 + C48250 * C2035) * C47983 +
             (C113 * C2017 + C48250 * C2026) * C1160) *
                C16331) *
               C16333) *
              C2013 +
          ((((C113 * C2018 + C48250 * C2027) * C1160 +
             (C113 * C2028 + C48250 * C2036) * C47983) *
                C16331 +
            ((C113 * C2019 + C48250 * C2029) * C1160 +
             (C113 * C2030 + C48250 * C2037) * C47983) *
                C48344) *
               C16333 +
           (((C113 * C6979 + C48250 * C6981) * C1160 +
             (C113 * C6982 + C48250 * C6985) * C47983) *
                C16331 +
            ((C113 * C6980 + C48250 * C6983) * C1160 +
             (C113 * C6984 + C48250 * C6986) * C47983) *
                C48344) *
               C48365) *
              C2014) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C47001 +
              (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
              C169 * C47993) *
                 C16331 +
             (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                 C48344) *
                C16333 +
            ((C6218 + C6219 - C6220 - C6221) * C16331 +
             (C6222 + C6223 - C6224 - C6225) * C48344) *
                C48365) *
               C48316 +
           (((C550 * C46982 -
              ((C113 * C496 + C48250 * C515) * C48298 +
               (C113 * C486 + C48250 * C497) * C47001) +
              C551 * C47993) *
                 C16331 +
             (C552 * C46982 - (C551 * C48298 + C550 * C47001) + C553 * C47993) *
                 C48344) *
                C16333 +
            ((C6436 - (C6437 + C6438) + C6439) * C16331 +
             (C6440 - (C6441 + C6442) + C6443) * C48344) *
                C48365) *
               C48134) *
              C1086 +
          ((((C6220 - (C6219 + C6218) + C6221) * C16331 +
             (C6224 - (C6223 + C6222) + C6225) * C48344) *
                C16333 +
            ((C6226 - (C6227 + C6228) + C6229) * C16331 +
             (C6230 - (C6231 + C6232) + C6233) * C48344) *
                C48365) *
               C48316 +
           (((C6438 + C6437 - C6436 - C6439) * C16331 +
             (C6442 + C6441 - C6440 - C6443) * C48344) *
                C16333 +
            ((C6444 + C6445 - C6446 - C6447) * C16331 +
             (C6448 + C6449 - C6450 - C6451) * C48344) *
                C48365) *
               C48134) *
              C1087 +
          ((((C6228 + C6227 - C6226 - C6229) * C16331 +
             (C6232 + C6231 - C6230 - C6233) * C48344) *
                C16333 +
            ((C6234 + C6235 - C6236 - C6237) * C16331 +
             (C6238 + C6239 - C6240 - C6241) * C48344) *
                C48365) *
               C48316 +
           (((C6446 - (C6445 + C6444) + C6447) * C16331 +
             (C6450 - (C6449 + C6448) + C6451) * C48344) *
                C16333 +
            ((C6456 * C46982 - (C6602 * C48298 + C6603 * C47001) +
              C6457 * C47993) *
                 C16331 +
             ((C113 * C1715 + C48250 * C1720) * C46982 -
              (C6457 * C48298 + C6456 * C47001) +
              (C113 * C1721 + C48250 * C1724) * C47993) *
                 C48344) *
                C48365) *
               C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C665 +
             (C113 * C127 + C48250 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48351) *
                C16331 +
            (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48351) *
                C48344) *
               C16333 +
           ((C5242 + C5243 - C5244 - C5245 + C5246 + C5247 - C5248 - C5249) *
                C16331 +
            (C5250 + C5251 - C5252 - C5253 + C5254 + C5255 - C5256 - C5257) *
                C48344) *
               C48365) *
              C48316 +
          (((C550 * C666 -
             ((C113 * C496 + C48250 * C515) * C659 +
              (C113 * C486 + C48250 * C497) * C665) +
             C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
             C555 * C48351) *
                C16331 +
            (C552 * C666 - (C551 * C659 + C550 * C665) + C553 * C660 -
             C554 * C667 - C555 * C661 + C788 * C668 + C789 * C48351) *
                C48344) *
               C16333 +
           ((C968 * C666 - (C5596 * C659 + C5597 * C665) + C969 * C660 -
             C970 * C667 - C971 * C661 + C972 * C668 + C973 * C48351) *
                C16331 +
            (C970 * C666 - (C969 * C659 + C968 * C665) + C971 * C660 -
             C972 * C667 - C973 * C661 + (C113 * C939 + C48250 * C948) * C668 +
             (C113 * C949 + C48250 * C954) * C48351) *
                C48344) *
               C48365) *
              C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C47001 +
             (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
             C169 * C47993) *
                C16331 +
            (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                C48344) *
               C16333 +
           ((C6218 + C6219 - C6220 - C6221) * C16331 +
            (C6222 + C6223 - C6224 - C6225) * C48344) *
               C48365) *
              C2299 +
          (((C550 * C46982 -
             ((C113 * C496 + C48250 * C515) * C48298 +
              (C113 * C486 + C48250 * C497) * C47001) +
             C551 * C47993) *
                C16331 +
            (C552 * C46982 - (C551 * C48298 + C550 * C47001) + C553 * C47993) *
                C48344) *
               C16333 +
           ((C6436 - (C6437 + C6438) + C6439) * C16331 +
            (C6440 - (C6441 + C6442) + C6443) * C48344) *
               C48365) *
              C2300 +
          ((((C113 * C490 + C48250 * C505) * C47001 +
             (C113 * C506 + C48250 * C520) * C48298 - C556 * C46982 -
             C557 * C47993) *
                C16331 +
            (C556 * C47001 + C557 * C48298 - C558 * C46982 - C559 * C47993) *
                C48344) *
               C16333 +
           ((C7182 + C7183 - C7184 - C7185) * C16331 +
            (C7186 + C7187 - C7188 - C7189) * C48344) *
               C48365) *
              C2301 +
          (((C2316 * C46982 -
             ((C113 * C2025 + C48250 * C2035) * C48298 +
              (C113 * C2017 + C48250 * C2026) * C47001) +
             C2317 * C47993) *
                C16331 +
            (C2318 * C46982 - (C2317 * C48298 + C2316 * C47001) +
             C2319 * C47993) *
                C48344) *
               C16333 +
           ((C7324 * C46982 - (C7470 * C48298 + C7471 * C47001) +
             C7325 * C47993) *
                C16331 +
            ((C113 * C2419 + C48250 * C2424) * C46982 -
             (C7325 * C48298 + C7324 * C47001) +
             (C113 * C2425 + C48250 * C2428) * C47993) *
                C48344) *
               C48365) *
              C48363) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C293 +
             (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48339) *
                C16331 +
            (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C48339) *
                C48344) *
               C16333 +
           ((C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C16331 +
            (C4938 + C4939 - C4940 - C4941 + C4942 + C4943) * C48344) *
               C48365) *
              C48047 * C48386 +
          (((C4934 - (C4963 + C4962) + C4935 - C4936 - C4937) * C16331 +
            (C4940 - (C4939 + C4938) + C4941 - C4942 - C4943) * C48344) *
               C16333 +
           ((C4944 - (C4964 + C4965) + C4949 - C4950 - C4951) * C16331 +
            (C4952 - (C4953 + C4954) + C4955 - C4956 - C4957) * C48344) *
               C48365) *
              C48047 * C48374 +
          (((C4965 + C4964 - C4944 - C4949 + C4950 + C4951) * C16331 +
            (C4954 + C4953 - C4952 - C4955 + C4956 + C4957) * C48344) *
               C16333 +
           ((C5882 * C293 + C5883 * C287 - C1450 * C294 - C1451 * C288 +
             C1452 * C295 + C1453 * C48339) *
                C16331 +
            (C1450 * C293 + C1451 * C287 - C1452 * C294 - C1453 * C288 +
             (C113 * C1437 + C48250 * C1438) * C295 +
             (C113 * C1439 + C48250 * C1440) * C48339) *
                C48344) *
               C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C114 +
            (C113 * C127 + C48250 * C140) * C102 - C168 * C115 - C169 * C103 +
            C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 +
            C174 * C118 + C175 * C106) *
               C16331 +
           (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
            C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
            C176 * C118 + C177 * C106) *
               C48344) *
              C16333 +
          ((C4958 * C114 + C4959 * C102 - C361 * C115 - C362 * C103 +
            C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 +
            C678 * C118 + C679 * C106) *
               C16331 +
           (C361 * C114 + C362 * C102 - C363 * C115 - C364 * C103 +
            C365 * C116 + C366 * C104 - C678 * C117 - C679 * C105 +
            (C113 * C669 + C48250 * C670) * C118 +
            (C113 * C671 + C48250 * C672) * C106) *
               C48344) *
              C48365) *
         C48047 * C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1089 +
             (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
             C169 * C48370 + C170 * C1091 + C171 * C48339) *
                C16331 +
            (C168 * C1089 + C169 * C48383 - C170 * C1090 - C171 * C48370 +
             C172 * C1091 + C173 * C48339) *
                C48344) *
               C16333 +
           ((C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C16331 +
            (C5752 + C5753 - C5754 - C5755 + C5756 + C5757) * C48344) *
               C48365) *
              C48047 * C1086 +
          (((C5748 - (C5747 + C5746) + C5749 - C5750 - C5751) * C16331 +
            (C5754 - (C5753 + C5752) + C5755 - C5756 - C5757) * C48344) *
               C16333 +
           ((C5758 - (C5759 + C5760) + C5761 - C5762 - C5763) * C16331 +
            (C5764 - (C5765 + C5766) + C5767 - C5768 - C5769) * C48344) *
               C48365) *
              C48047 * C1087 +
          (((C5760 + C5759 - C5758 - C5761 + C5762 + C5763) * C16331 +
            (C5766 + C5765 - C5764 - C5767 + C5768 + C5769) * C48344) *
               C16333 +
           ((C5882 * C1089 + C5883 * C48383 - C1450 * C1090 - C1451 * C48370 +
             C1452 * C1091 + C1453 * C48339) *
                C16331 +
            (C1450 * C1089 + C1451 * C48383 - C1452 * C1090 - C1453 * C48370 +
             (C113 * C1437 + C48250 * C1438) * C1091 +
             (C113 * C1439 + C48250 * C1440) * C48339) *
                C48344) *
               C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1160 +
             (C113 * C127 + C48250 * C140) * C47983) *
                C16331 +
            (C168 * C1160 + C169 * C47983) * C48344) *
               C16333 +
           ((C5860 + C5861) * C16331 + (C5862 + C5863) * C48344) * C48365) *
              C48047 * C1155 -
          (((C5864 + C5865) * C48344 + (C5866 + C5867) * C16331) * C48365 +
           ((C5863 + C5862) * C48344 + (C5861 + C5860) * C16331) * C16333) *
              C48047 * C1156 +
          (((C5867 + C5866) * C16331 + (C5865 + C5864) * C48344) * C16333 +
           ((C5888 + C5889) * C16331 + (C5872 + C5873) * C48344) * C48365) *
              C48047 * C1157 -
          (((C5890 + C5891) * C48344 + (C5892 + C5893) * C16331) * C48365 +
           ((C5873 + C5872) * C48344 + (C5889 + C5888) * C16331) * C16333) *
              C48047 * C1158 +
          (((C5893 + C5892) * C16331 + (C5891 + C5890) * C48344) * C16333 +
           (((C113 * C5851 + C48250 * C5853) * C1160 +
             (C113 * C5854 + C48250 * C5857) * C47983) *
                C16331 +
            ((C113 * C5852 + C48250 * C5855) * C1160 +
             (C113 * C5856 + C48250 * C5858) * C47983) *
                C48344) *
               C48365) *
              C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1089 +
             (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
             C169 * C48370 + C170 * C1091 + C171 * C48339) *
                C16331 +
            (C168 * C1089 + C169 * C48383 - C170 * C1090 - C171 * C48370 +
             C172 * C1091 + C173 * C48339) *
                C48344) *
               C16333 +
           ((C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C16331 +
            (C5752 + C5753 - C5754 - C5755 + C5756 + C5757) * C48344) *
               C48365) *
              C1835 +
          (((C550 * C1090 -
             ((C113 * C496 + C48250 * C515) * C48383 +
              (C113 * C486 + C48250 * C497) * C1089) +
             C551 * C48370 - C552 * C1091 - C553 * C48339) *
                C16331 +
            (C552 * C1090 - (C551 * C48383 + C550 * C1089) + C553 * C48370 -
             C554 * C1091 - C555 * C48339) *
                C48344) *
               C16333 +
           ((C9744 - (C9745 + C9746) + C9747 - C9748 - C9749) * C16331 +
            (C9750 - (C9751 + C9752) + C9753 - C9754 - C9755) * C48344) *
               C48365) *
              C1836 +
          ((((C113 * C490 + C48250 * C505) * C1089 +
             (C113 * C506 + C48250 * C520) * C48383 - C556 * C1090 -
             C557 * C48370 + C558 * C1091 + C559 * C48339) *
                C16331 +
            (C556 * C1089 + C557 * C48383 - C558 * C1090 - C559 * C48370 +
             C560 * C1091 + C561 * C48339) *
                C48344) *
               C16333 +
           ((C6072 * C1089 + C6073 * C48383 - C2198 * C1090 - C2199 * C48370 +
             C2200 * C1091 + C2201 * C48339) *
                C16331 +
            (C2198 * C1089 + C2199 * C48383 - C2200 * C1090 - C2201 * C48370 +
             (C113 * C2185 + C48250 * C2186) * C1091 +
             (C113 * C2187 + C48250 * C2188) * C48339) *
                C48344) *
               C48365) *
              C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C16331 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C16333 +
            ((C5860 + C5861) * C16331 + (C5862 + C5863) * C48344) * C48365) *
               C1835 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C16331) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C16331) *
                C16333) *
               C1836 +
           ((((C113 * C490 + C48250 * C505) * C1160 +
              (C113 * C506 + C48250 * C520) * C47983) *
                 C16331 +
             (C556 * C1160 + C557 * C47983) * C48344) *
                C16333 +
            ((C6080 + C6081) * C16331 + (C6056 + C6057) * C48344) * C48365) *
               C48350) *
              C48386 +
          ((((C6051 + C6050) * C16331 + (C6049 + C6048) * C48344) * C16333 +
            ((C6082 + C6083) * C16331 + (C6062 + C6063) * C48344) * C48365) *
               C1836 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C16331) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C16331) * C16333) *
               C1835 -
           (((C6084 + C6085) * C48344 + (C6086 + C6087) * C16331) * C48365 +
            ((C6057 + C6056) * C48344 + (C6081 + C6080) * C16331) * C16333) *
               C48350) *
              C48374 +
          ((((C5867 + C5866) * C16331 + (C5865 + C5864) * C48344) * C16333 +
            ((C5888 + C5889) * C16331 + (C5872 + C5873) * C48344) * C48365) *
               C1835 -
           (((C6596 + C6597) * C48344 + (C6604 + C6605) * C16331) * C48365 +
            ((C6063 + C6062) * C48344 + (C6083 + C6082) * C16331) * C16333) *
               C1836 +
           (((C6087 + C6086) * C16331 + (C6085 + C6084) * C48344) * C16333 +
            (((C113 * C6039 + C48250 * C6041) * C1160 +
              (C113 * C6042 + C48250 * C6045) * C47983) *
                 C16331 +
             ((C113 * C6040 + C48250 * C6043) * C1160 +
              (C113 * C6044 + C48250 * C6046) * C47983) *
                 C48344) *
                C48365) *
               C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C47011 +
              (C113 * C127 + C48250 * C140) * C47988 - C168 * C47007 -
              C169 * C47996 + C170 * C47017 + C171 * C2901) *
                 C16331 +
             (C168 * C47011 + C169 * C47988 - C170 * C47007 - C171 * C47996 +
              C172 * C47017 + C173 * C2901) *
                 C48344) *
                C16333 +
            ((C8130 + C8131 - C8132 - C8133 + C8134 + C8135) * C16331 +
             (C8136 + C8137 - C8138 - C8139 + C8140 + C8141) * C48344) *
                C48365) *
               C3298 +
           (((C550 * C47007 -
              ((C113 * C496 + C48250 * C515) * C47988 +
               (C113 * C486 + C48250 * C497) * C47011) +
              C551 * C47996 - C552 * C47017 - C553 * C2901) *
                 C16331 +
             (C552 * C47007 - (C551 * C47988 + C550 * C47011) + C553 * C47996 -
              C554 * C47017 - C555 * C2901) *
                 C48344) *
                C16333 +
            ((C8348 - (C8349 + C8350) + C8351 - C8352 - C8353) * C16331 +
             (C8354 - (C8355 + C8356) + C8357 - C8358 - C8359) * C48344) *
                C48365) *
               C48134) *
              C48315 +
          ((((C8132 - (C8131 + C8130) + C8133 - C8134 - C8135) * C16331 +
             (C8138 - (C8137 + C8136) + C8139 - C8140 - C8141) * C48344) *
                C16333 +
            ((C8142 - (C8143 + C8144) + C8145 - C8146 - C8147) * C16331 +
             (C8148 - (C8149 + C8150) + C8151 - C8152 - C8153) * C48344) *
                C48365) *
               C3298 +
           (((C8350 + C8349 - C8348 - C8351 + C8352 + C8353) * C16331 +
             (C8356 + C8355 - C8354 - C8357 + C8358 + C8359) * C48344) *
                C16333 +
            ((C6074 * C47011 + C6075 * C47988 - C1612 * C47007 -
              C1613 * C47996 + C1614 * C47017 + C1615 * C2901) *
                 C16331 +
             (C1612 * C47011 + C1613 * C47988 - C1614 * C47007 -
              C1615 * C47996 + (C113 * C1599 + C48250 * C1600) * C47017 +
              (C113 * C1601 + C48250 * C1602) * C2901) *
                 C48344) *
                C48365) *
               C48134) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C2641 +
              (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
              C169 * C47993) *
                 C16331 +
             (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                 C48344) *
                C16333 +
            ((C7750 + C7751 - C7752 - C7753) * C16331 +
             (C7754 + C7755 - C7756 - C7757) * C48344) *
                C48365) *
               C48130 +
           (((C550 * C2642 -
              ((C113 * C496 + C48250 * C515) * C2635 +
               (C113 * C486 + C48250 * C497) * C2641) +
              C551 * C47993) *
                 C16331 +
             (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47993) *
                 C48344) *
                C16333 +
            ((C7968 - (C7969 + C7970) + C7971) * C16331 +
             (C7972 - (C7973 + C7974) + C7975) * C48344) *
                C48365) *
               C48137 +
           ((((C113 * C490 + C48250 * C505) * C2641 +
              (C113 * C506 + C48250 * C520) * C2635 - C556 * C2642 -
              C557 * C47993) *
                 C16331 +
             (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C47993) *
                 C48344) *
                C16333 +
            ((C7976 + C7977 - C7978 - C7979) * C16331 +
             (C7980 + C7981 - C7982 - C7983) * C48344) *
                C48365) *
               C3806) *
              C48315 +
          ((((C7752 - (C7751 + C7750) + C7753) * C16331 +
             (C7756 - (C7755 + C7754) + C7757) * C48344) *
                C16333 +
            ((C7758 - (C7759 + C7760) + C7761) * C16331 +
             (C7762 - (C7763 + C7764) + C7765) * C48344) *
                C48365) *
               C48130 +
           (((C7970 + C7969 - C7968 - C7971) * C16331 +
             (C7974 + C7973 - C7972 - C7975) * C48344) *
                C16333 +
            ((C8554 + C8555 - C8556 - C8557) * C16331 +
             (C8558 + C8559 - C8560 - C8561) * C48344) *
                C48365) *
               C48137 +
           (((C7978 - (C7977 + C7976) + C7979) * C16331 +
             (C7982 - (C7981 + C7980) + C7983) * C48344) *
                C16333 +
            ((C6077 * C2642 - (C6078 * C2635 + C6079 * C2641) +
              C6076 * C47993) *
                 C16331 +
             ((C113 * C1303 + C48250 * C1320) * C2642 -
              (C6076 * C2635 + C6077 * C2641) +
              (C113 * C1321 + C48250 * C1330) * C47993) *
                 C48344) *
                C48365) *
               C3806) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C2641 +
              (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
              C169 * C47993) *
                 C16331 +
             (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                 C48344) *
                C16333 +
            ((C7750 + C7751 - C7752 - C7753) * C16331 +
             (C7754 + C7755 - C7756 - C7757) * C48344) *
                C48365) *
               C3298 +
           (((C550 * C2642 -
              ((C113 * C496 + C48250 * C515) * C2635 +
               (C113 * C486 + C48250 * C497) * C2641) +
              C551 * C47993) *
                 C16331 +
             (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47993) *
                 C48344) *
                C16333 +
            ((C7968 - (C7969 + C7970) + C7971) * C16331 +
             (C7972 - (C7973 + C7974) + C7975) * C48344) *
                C48365) *
               C48134) *
              C48386 +
          ((((C7752 - (C7751 + C7750) + C7753) * C16331 +
             (C7756 - (C7755 + C7754) + C7757) * C48344) *
                C16333 +
            ((C7758 - (C7759 + C7760) + C7761) * C16331 +
             (C7762 - (C7763 + C7764) + C7765) * C48344) *
                C48365) *
               C3298 +
           (((C7970 + C7969 - C7968 - C7971) * C16331 +
             (C7974 + C7973 - C7972 - C7975) * C48344) *
                C16333 +
            ((C8554 + C8555 - C8556 - C8557) * C16331 +
             (C8558 + C8559 - C8560 - C8561) * C48344) *
                C48365) *
               C48134) *
              C48374 +
          ((((C7760 + C7759 - C7758 - C7761) * C16331 +
             (C7764 + C7763 - C7762 - C7765) * C48344) *
                C16333 +
            ((C7766 + C7767 - C7768 - C7769) * C16331 +
             (C7770 + C7771 - C7772 - C7773) * C48344) *
                C48365) *
               C3298 +
           (((C8556 - (C8555 + C8554) + C8557) * C16331 +
             (C8560 - (C8559 + C8558) + C8561) * C48344) *
                C16333 +
            ((C6456 * C2642 - (C6602 * C2635 + C6603 * C2641) +
              C6457 * C47993) *
                 C16331 +
             ((C113 * C1715 + C48250 * C1720) * C2642 -
              (C6457 * C2635 + C6456 * C2641) +
              (C113 * C1721 + C48250 * C1724) * C47993) *
                 C48344) *
                C48365) *
               C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2533 +
             (C113 * C127 + C48250 * C140) * C48392 - C168 * C2534 -
             C169 * C48385 + C170 * C2535 + C171 * C48372 - C172 * C2536 -
             C173 * C48351) *
                C16331 +
            (C168 * C2533 + C169 * C48392 - C170 * C2534 - C171 * C48385 +
             C172 * C2535 + C173 * C48372 - C174 * C2536 - C175 * C48351) *
                C48344) *
               C16333 +
           ((C7604 + C7605 - C7606 - C7607 + C7608 + C7609 - C7610 - C7611) *
                C16331 +
            (C7612 + C7613 - C7614 - C7615 + C7616 + C7617 - C7618 - C7619) *
                C48344) *
               C48365) *
              C3298 +
          (((C550 * C2534 -
             ((C113 * C496 + C48250 * C515) * C48392 +
              (C113 * C486 + C48250 * C497) * C2533) +
             C551 * C48385 - C552 * C2535 - C553 * C48372 + C554 * C2536 +
             C555 * C48351) *
                C16331 +
            (C552 * C2534 - (C551 * C48392 + C550 * C2533) + C553 * C48385 -
             C554 * C2535 - C555 * C48372 + C788 * C2536 + C789 * C48351) *
                C48344) *
               C16333 +
           ((C968 * C2534 - (C5596 * C48392 + C5597 * C2533) + C969 * C48385 -
             C970 * C2535 - C971 * C48372 + C972 * C2536 + C973 * C48351) *
                C16331 +
            (C970 * C2534 - (C969 * C48392 + C968 * C2533) + C971 * C48385 -
             C972 * C2535 - C973 * C48372 +
             (C113 * C939 + C48250 * C948) * C2536 +
             (C113 * C949 + C48250 * C954) * C48351) *
                C48344) *
               C48365) *
              C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2641 +
             (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
             C169 * C47993) *
                C16331 +
            (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                C48344) *
               C16333 +
           ((C7750 + C7751 - C7752 - C7753) * C16331 +
            (C7754 + C7755 - C7756 - C7757) * C48344) *
               C48365) *
              C48394 +
          (((C550 * C2642 -
             ((C113 * C496 + C48250 * C515) * C2635 +
              (C113 * C486 + C48250 * C497) * C2641) +
             C551 * C47993) *
                C16331 +
            (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47993) *
                C48344) *
               C16333 +
           ((C7968 - (C7969 + C7970) + C7971) * C16331 +
            (C7972 - (C7973 + C7974) + C7975) * C48344) *
               C48365) *
              C48391 +
          ((((C113 * C490 + C48250 * C505) * C2641 +
             (C113 * C506 + C48250 * C520) * C2635 - C556 * C2642 -
             C557 * C47993) *
                C16331 +
            (C556 * C2641 + C557 * C2635 - C558 * C2642 - C559 * C47993) *
                C48344) *
               C16333 +
           ((C7976 + C7977 - C7978 - C7979) * C16331 +
            (C7980 + C7981 - C7982 - C7983) * C48344) *
               C48365) *
              C48382 +
          (((C2316 * C2642 -
             ((C113 * C2025 + C48250 * C2035) * C2635 +
              (C113 * C2017 + C48250 * C2026) * C2641) +
             C2317 * C47993) *
                C16331 +
            (C2318 * C2642 - (C2317 * C2635 + C2316 * C2641) + C2319 * C47993) *
                C48344) *
               C16333 +
           ((C7324 * C2642 - (C7470 * C2635 + C7471 * C2641) + C7325 * C47993) *
                C16331 +
            ((C113 * C2419 + C48250 * C2424) * C2642 -
             (C7325 * C2635 + C7324 * C2641) +
             (C113 * C2425 + C48250 * C2428) * C47993) *
                C48344) *
               C48365) *
              C48363) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C47011 +
             (C113 * C127 + C48250 * C140) * C47988 - C168 * C47007 -
             C169 * C47996 + C170 * C47017 + C171 * C2901) *
                C16331 +
            (C168 * C47011 + C169 * C47988 - C170 * C47007 - C171 * C47996 +
             C172 * C47017 + C173 * C2901) *
                C48344) *
               C16333 +
           ((C8130 + C8131 - C8132 - C8133 + C8134 + C8135) * C16331 +
            (C8136 + C8137 - C8138 - C8139 + C8140 + C8141) * C48344) *
               C48365) *
              C48130 +
          (((C550 * C47007 -
             ((C113 * C496 + C48250 * C515) * C47988 +
              (C113 * C486 + C48250 * C497) * C47011) +
             C551 * C47996 - C552 * C47017 - C553 * C2901) *
                C16331 +
            (C552 * C47007 - (C551 * C47988 + C550 * C47011) + C553 * C47996 -
             C554 * C47017 - C555 * C2901) *
                C48344) *
               C16333 +
           ((C8348 - (C8349 + C8350) + C8351 - C8352 - C8353) * C16331 +
            (C8354 - (C8355 + C8356) + C8357 - C8358 - C8359) * C48344) *
               C48365) *
              C48137 +
          ((((C113 * C490 + C48250 * C505) * C47011 +
             (C113 * C506 + C48250 * C520) * C47988 - C556 * C47007 -
             C557 * C47996 + C558 * C47017 + C559 * C2901) *
                C16331 +
            (C556 * C47011 + C557 * C47988 - C558 * C47007 - C559 * C47996 +
             C560 * C47017 + C561 * C2901) *
                C48344) *
               C16333 +
           ((C6072 * C47011 + C6073 * C47988 - C2198 * C47007 - C2199 * C47996 +
             C2200 * C47017 + C2201 * C2901) *
                C16331 +
            (C2198 * C47011 + C2199 * C47988 - C2200 * C47007 - C2201 * C47996 +
             (C113 * C2185 + C48250 * C2186) * C47017 +
             (C113 * C2187 + C48250 * C2188) * C2901) *
                C48344) *
               C48365) *
              C3806) *
         C48035) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2533 +
             (C113 * C127 + C48250 * C140) * C48392 - C168 * C2534 -
             C169 * C48385 + C170 * C2535 + C171 * C48372 - C172 * C2536 -
             C173 * C48351) *
                C16331 +
            (C168 * C2533 + C169 * C48392 - C170 * C2534 - C171 * C48385 +
             C172 * C2535 + C173 * C48372 - C174 * C2536 - C175 * C48351) *
                C48344) *
               C16333 +
           ((C7604 + C7605 - C7606 - C7607 + C7608 + C7609 - C7610 - C7611) *
                C16331 +
            (C7612 + C7613 - C7614 - C7615 + C7616 + C7617 - C7618 - C7619) *
                C48344) *
               C48365) *
              C3298 +
          (((C550 * C2534 -
             ((C113 * C496 + C48250 * C515) * C48392 +
              (C113 * C486 + C48250 * C497) * C2533) +
             C551 * C48385 - C552 * C2535 - C553 * C48372 + C554 * C2536 +
             C555 * C48351) *
                C16331 +
            (C552 * C2534 - (C551 * C48392 + C550 * C2533) + C553 * C48385 -
             C554 * C2535 - C555 * C48372 + C788 * C2536 + C789 * C48351) *
                C48344) *
               C16333 +
           ((C968 * C2534 - (C5596 * C48392 + C5597 * C2533) + C969 * C48385 -
             C970 * C2535 - C971 * C48372 + C972 * C2536 + C973 * C48351) *
                C16331 +
            (C970 * C2534 - (C969 * C48392 + C968 * C2533) + C971 * C48385 -
             C972 * C2535 - C973 * C48372 +
             (C113 * C939 + C48250 * C948) * C2536 +
             (C113 * C949 + C48250 * C954) * C48351) *
                C48344) *
               C48365) *
              C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C2641 +
              (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
              C169 * C47993) *
                 C16331 +
             (C168 * C2641 + C169 * C2635 - C170 * C2642 - C171 * C47993) *
                 C48344) *
                C16333 +
            ((C7750 + C7751 - C7752 - C7753) * C16331 +
             (C7754 + C7755 - C7756 - C7757) * C48344) *
                C48365) *
               C3298 +
           (((C550 * C2642 -
              ((C113 * C496 + C48250 * C515) * C2635 +
               (C113 * C486 + C48250 * C497) * C2641) +
              C551 * C47993) *
                 C16331 +
             (C552 * C2642 - (C551 * C2635 + C550 * C2641) + C553 * C47993) *
                 C48344) *
                C16333 +
            ((C7968 - (C7969 + C7970) + C7971) * C16331 +
             (C7972 - (C7973 + C7974) + C7975) * C48344) *
                C48365) *
               C48134) *
              C48386 +
          ((((C7752 - (C7751 + C7750) + C7753) * C16331 +
             (C7756 - (C7755 + C7754) + C7757) * C48344) *
                C16333 +
            ((C7758 - (C7759 + C7760) + C7761) * C16331 +
             (C7762 - (C7763 + C7764) + C7765) * C48344) *
                C48365) *
               C3298 +
           (((C7970 + C7969 - C7968 - C7971) * C16331 +
             (C7974 + C7973 - C7972 - C7975) * C48344) *
                C16333 +
            ((C8554 + C8555 - C8556 - C8557) * C16331 +
             (C8558 + C8559 - C8560 - C8561) * C48344) *
                C48365) *
               C48134) *
              C48374 +
          ((((C7760 + C7759 - C7758 - C7761) * C16331 +
             (C7764 + C7763 - C7762 - C7765) * C48344) *
                C16333 +
            ((C7766 + C7767 - C7768 - C7769) * C16331 +
             (C7770 + C7771 - C7772 - C7773) * C48344) *
                C48365) *
               C3298 +
           (((C8556 - (C8555 + C8554) + C8557) * C16331 +
             (C8560 - (C8559 + C8558) + C8561) * C48344) *
                C16333 +
            ((C6456 * C2642 - (C6602 * C2635 + C6603 * C2641) +
              C6457 * C47993) *
                 C16331 +
             ((C113 * C1715 + C48250 * C1720) * C2642 -
              (C6457 * C2635 + C6456 * C2641) +
              (C113 * C1721 + C48250 * C1724) * C47993) *
                 C48344) *
                C48365) *
               C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C665 +
             (C113 * C127 + C48250 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48351) *
                C16331 +
            (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48351) *
                C48344) *
               C16333 +
           ((C5242 + C5243 - C5244 - C5245 + C5246 + C5247 - C5248 - C5249) *
                C16331 +
            (C5250 + C5251 - C5252 - C5253 + C5254 + C5255 - C5256 - C5257) *
                C48344) *
               C48365) *
              C48047 * C48315 +
          (((C5244 - (C5243 + C5242) + C5245 - C5246 - C5247 + C5248 + C5249) *
                C16331 +
            (C5252 - (C5251 + C5250) + C5253 - C5254 - C5255 + C5256 + C5257) *
                C48344) *
               C16333 +
           ((C367 * C666 - (C4960 * C659 + C4961 * C665) + C368 * C660 -
             C369 * C667 - C370 * C661 + C371 * C668 + C372 * C48351) *
                C16331 +
            (C369 * C666 - (C368 * C659 + C367 * C665) + C370 * C660 -
             C371 * C667 - C372 * C661 + (C113 * C305 + C48250 * C324) * C668 +
             (C113 * C325 + C48250 * C335) * C48351) *
                C48344) *
               C48365) *
              C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C47001 +
             (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
             C169 * C47993) *
                C16331 +
            (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                C48344) *
               C16333 +
           ((C6218 + C6219 - C6220 - C6221) * C16331 +
            (C6222 + C6223 - C6224 - C6225) * C48344) *
               C48365) *
              C48047 * C1431 +
          (((C6220 - (C6219 + C6218) + C6221) * C16331 +
            (C6224 - (C6223 + C6222) + C6225) * C48344) *
               C16333 +
           ((C6226 - (C6227 + C6228) + C6229) * C16331 +
            (C6230 - (C6231 + C6232) + C6233) * C48344) *
               C48365) *
              C48047 * C1432 +
          (((C6228 + C6227 - C6226 - C6229) * C16331 +
            (C6232 + C6231 - C6230 - C6233) * C48344) *
               C16333 +
           ((C6234 + C6235 - C6236 - C6237) * C16331 +
            (C6238 + C6239 - C6240 - C6241) * C48344) *
               C48365) *
              C48047 * C1433 +
          (((C6236 - (C6235 + C6234) + C6237) * C16331 +
            (C6240 - (C6239 + C6238) + C6241) * C48344) *
               C16333 +
           ((C5885 * C46982 - (C5886 * C48298 + C5887 * C47001) +
             C5884 * C47993) *
                C16331 +
            ((C113 * C1166 + C48250 * C1177) * C46982 -
             (C5884 * C48298 + C5885 * C47001) +
             (C113 * C1178 + C48250 * C1184) * C47993) *
                C48344) *
               C48365) *
              C48047 * C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C293 +
              (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
              C170 * C295 + C171 * C48339) *
                 C16331 +
             (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
              C172 * C295 + C173 * C48339) *
                 C48344) *
                C16333 +
            ((C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C16331 +
             (C4938 + C4939 - C4940 - C4941 + C4942 + C4943) * C48344) *
                C48365) *
               C48316 +
           (((C550 * C294 -
              ((C113 * C496 + C48250 * C515) * C287 +
               (C113 * C486 + C48250 * C497) * C293) +
              C551 * C288 - C552 * C295 - C553 * C48339) *
                 C16331 +
             (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
              C554 * C295 - C555 * C48339) *
                 C48344) *
                C16333 +
            ((C5582 - (C5598 + C5599) + C5587 - C5588 - C5589) * C16331 +
             (C5590 - (C5591 + C5592) + C5593 - C5594 - C5595) * C48344) *
                C48365) *
               C48134) *
              C48315 +
          ((((C4934 - (C4963 + C4962) + C4935 - C4936 - C4937) * C16331 +
             (C4940 - (C4939 + C4938) + C4941 - C4942 - C4943) * C48344) *
                C16333 +
            ((C4944 - (C4964 + C4965) + C4949 - C4950 - C4951) * C16331 +
             (C4952 - (C4953 + C4954) + C4955 - C4956 - C4957) * C48344) *
                C48365) *
               C48316 +
           (((C5599 + C5598 - C5582 - C5587 + C5588 + C5589) * C16331 +
             (C5592 + C5591 - C5590 - C5593 + C5594 + C5595) * C48344) *
                C16333 +
            ((C6074 * C293 + C6075 * C287 - C1612 * C294 - C1613 * C288 +
              C1614 * C295 + C1615 * C48339) *
                 C16331 +
             (C1612 * C293 + C1613 * C287 - C1614 * C294 - C1615 * C288 +
              (C113 * C1599 + C48250 * C1600) * C295 +
              (C113 * C1601 + C48250 * C1602) * C48339) *
                 C48344) *
                C48365) *
               C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C16331 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C16333 +
            ((C5860 + C5861) * C16331 + (C5862 + C5863) * C48344) * C48365) *
               C48316 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C16331) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C16331) *
                C16333) *
               C48134) *
              C1431 +
          ((((C6051 + C6050) * C16331 + (C6049 + C6048) * C48344) * C16333 +
            ((C6082 + C6083) * C16331 + (C6062 + C6063) * C48344) * C48365) *
               C48134 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C16331) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C16331) * C16333) *
               C48316) *
              C1432 +
          ((((C5867 + C5866) * C16331 + (C5865 + C5864) * C48344) * C16333 +
            ((C5888 + C5889) * C16331 + (C5872 + C5873) * C48344) * C48365) *
               C48316 -
           (((C6596 + C6597) * C48344 + (C6604 + C6605) * C16331) * C48365 +
            ((C6063 + C6062) * C48344 + (C6083 + C6082) * C16331) * C16333) *
               C48134) *
              C1433 +
          ((((C6605 + C6604) * C16331 + (C6597 + C6596) * C48344) * C16333 +
            (((C113 * C6587 + C48250 * C6589) * C1160 +
              (C113 * C6590 + C48250 * C6593) * C47983) *
                 C16331 +
             ((C113 * C6588 + C48250 * C6591) * C1160 +
              (C113 * C6592 + C48250 * C6594) * C47983) *
                 C48344) *
                C48365) *
               C48134 -
           (((C5890 + C5891) * C48344 + (C5892 + C5893) * C16331) * C48365 +
            ((C5873 + C5872) * C48344 + (C5889 + C5888) * C16331) * C16333) *
               C48316) *
              C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C293 +
             (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48339) *
                C16331 +
            (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C48339) *
                C48344) *
               C16333 +
           ((C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C16331 +
            (C4938 + C4939 - C4940 - C4941 + C4942 + C4943) * C48344) *
               C48365) *
              C48047 * C48386 +
          (((C4934 - (C4963 + C4962) + C4935 - C4936 - C4937) * C16331 +
            (C4940 - (C4939 + C4938) + C4941 - C4942 - C4943) * C48344) *
               C16333 +
           ((C4944 - (C4964 + C4965) + C4949 - C4950 - C4951) * C16331 +
            (C4952 - (C4953 + C4954) + C4955 - C4956 - C4957) * C48344) *
               C48365) *
              C48047 * C48374 +
          (((C4965 + C4964 - C4944 - C4949 + C4950 + C4951) * C16331 +
            (C4954 + C4953 - C4952 - C4955 + C4956 + C4957) * C48344) *
               C16333 +
           ((C5882 * C293 + C5883 * C287 - C1450 * C294 - C1451 * C288 +
             C1452 * C295 + C1453 * C48339) *
                C16331 +
            (C1450 * C293 + C1451 * C287 - C1452 * C294 - C1453 * C288 +
             (C113 * C1437 + C48250 * C1438) * C295 +
             (C113 * C1439 + C48250 * C1440) * C48339) *
                C48344) *
               C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C114 +
            (C113 * C127 + C48250 * C140) * C102 - C168 * C115 - C169 * C103 +
            C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 +
            C174 * C118 + C175 * C106) *
               C16331 +
           (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
            C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
            C176 * C118 + C177 * C106) *
               C48344) *
              C16333 +
          ((C4958 * C114 + C4959 * C102 - C361 * C115 - C362 * C103 +
            C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 +
            C678 * C118 + C679 * C106) *
               C16331 +
           (C361 * C114 + C362 * C102 - C363 * C115 - C364 * C103 +
            C365 * C116 + C366 * C104 - C678 * C117 - C679 * C105 +
            (C113 * C669 + C48250 * C670) * C118 +
            (C113 * C671 + C48250 * C672) * C106) *
               C48344) *
              C48365) *
         C48047 * C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C293 +
             (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48339) *
                C16331 +
            (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C48339) *
                C48344) *
               C16333 +
           ((C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C16331 +
            (C4938 + C4939 - C4940 - C4941 + C4942 + C4943) * C48344) *
               C48365) *
              C48387 +
          (((C550 * C294 -
             ((C113 * C496 + C48250 * C515) * C287 +
              (C113 * C486 + C48250 * C497) * C293) +
             C551 * C288 - C552 * C295 - C553 * C48339) *
                C16331 +
            (C552 * C294 - (C551 * C287 + C550 * C293) + C553 * C288 -
             C554 * C295 - C555 * C48339) *
                C48344) *
               C16333 +
           ((C5582 - (C5598 + C5599) + C5587 - C5588 - C5589) * C16331 +
            (C5590 - (C5591 + C5592) + C5593 - C5594 - C5595) * C48344) *
               C48365) *
              C48376 +
          ((((C113 * C490 + C48250 * C505) * C293 +
             (C113 * C506 + C48250 * C520) * C287 - C556 * C294 - C557 * C288 +
             C558 * C295 + C559 * C48339) *
                C16331 +
            (C556 * C293 + C557 * C287 - C558 * C294 - C559 * C288 +
             C560 * C295 + C561 * C48339) *
                C48344) *
               C16333 +
           ((C6072 * C293 + C6073 * C287 - C2198 * C294 - C2199 * C288 +
             C2200 * C295 + C2201 * C48339) *
                C16331 +
            (C2198 * C293 + C2199 * C287 - C2200 * C294 - C2201 * C288 +
             (C113 * C2185 + C48250 * C2186) * C295 +
             (C113 * C2187 + C48250 * C2188) * C48339) *
                C48344) *
               C48365) *
              C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1089 +
             (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
             C169 * C48370 + C170 * C1091 + C171 * C48339) *
                C16331 +
            (C168 * C1089 + C169 * C48383 - C170 * C1090 - C171 * C48370 +
             C172 * C1091 + C173 * C48339) *
                C48344) *
               C16333 +
           ((C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C16331 +
            (C5752 + C5753 - C5754 - C5755 + C5756 + C5757) * C48344) *
               C48365) *
              C48047 * C1086 +
          (((C5748 - (C5747 + C5746) + C5749 - C5750 - C5751) * C16331 +
            (C5754 - (C5753 + C5752) + C5755 - C5756 - C5757) * C48344) *
               C16333 +
           ((C5758 - (C5759 + C5760) + C5761 - C5762 - C5763) * C16331 +
            (C5764 - (C5765 + C5766) + C5767 - C5768 - C5769) * C48344) *
               C48365) *
              C48047 * C1087 +
          (((C5760 + C5759 - C5758 - C5761 + C5762 + C5763) * C16331 +
            (C5766 + C5765 - C5764 - C5767 + C5768 + C5769) * C48344) *
               C16333 +
           ((C5882 * C1089 + C5883 * C48383 - C1450 * C1090 - C1451 * C48370 +
             C1452 * C1091 + C1453 * C48339) *
                C16331 +
            (C1450 * C1089 + C1451 * C48383 - C1452 * C1090 - C1453 * C48370 +
             (C113 * C1437 + C48250 * C1438) * C1091 +
             (C113 * C1439 + C48250 * C1440) * C48339) *
                C48344) *
               C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1160 +
             (C113 * C127 + C48250 * C140) * C47983) *
                C16331 +
            (C168 * C1160 + C169 * C47983) * C48344) *
               C16333 +
           ((C5860 + C5861) * C16331 + (C5862 + C5863) * C48344) * C48365) *
              C48047 * C1155 -
          (((C5864 + C5865) * C48344 + (C5866 + C5867) * C16331) * C48365 +
           ((C5863 + C5862) * C48344 + (C5861 + C5860) * C16331) * C16333) *
              C48047 * C1156 +
          (((C5867 + C5866) * C16331 + (C5865 + C5864) * C48344) * C16333 +
           ((C5888 + C5889) * C16331 + (C5872 + C5873) * C48344) * C48365) *
              C48047 * C1157 -
          (((C5890 + C5891) * C48344 + (C5892 + C5893) * C16331) * C48365 +
           ((C5873 + C5872) * C48344 + (C5889 + C5888) * C16331) * C16333) *
              C48047 * C1158 +
          (((C5893 + C5892) * C16331 + (C5891 + C5890) * C48344) * C16333 +
           (((C113 * C5851 + C48250 * C5853) * C1160 +
             (C113 * C5854 + C48250 * C5857) * C47983) *
                C16331 +
            ((C113 * C5852 + C48250 * C5855) * C1160 +
             (C113 * C5856 + C48250 * C5858) * C47983) *
                C48344) *
               C48365) *
              C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C1160 +
              (C113 * C127 + C48250 * C140) * C47983) *
                 C16331 +
             (C168 * C1160 + C169 * C47983) * C48344) *
                C16333 +
            ((C5860 + C5861) * C16331 + (C5862 + C5863) * C48344) * C48365) *
               C48387 -
           (((C6048 + C6049) * C48344 + (C6050 + C6051) * C16331) * C48365 +
            ((C551 * C47983 + C550 * C1160) * C48344 +
             ((C113 * C496 + C48250 * C515) * C47983 +
              (C113 * C486 + C48250 * C497) * C1160) *
                 C16331) *
                C16333) *
               C48376 +
           ((((C113 * C490 + C48250 * C505) * C1160 +
              (C113 * C506 + C48250 * C520) * C47983) *
                 C16331 +
             (C556 * C1160 + C557 * C47983) * C48344) *
                C16333 +
            ((C6080 + C6081) * C16331 + (C6056 + C6057) * C48344) * C48365) *
               C48350) *
              C1086 +
          ((((C6051 + C6050) * C16331 + (C6049 + C6048) * C48344) * C16333 +
            ((C6082 + C6083) * C16331 + (C6062 + C6063) * C48344) * C48365) *
               C48376 -
           (((C5864 + C5865) * C48344 + (C5866 + C5867) * C16331) * C48365 +
            ((C5863 + C5862) * C48344 + (C5861 + C5860) * C16331) * C16333) *
               C48387 -
           (((C6084 + C6085) * C48344 + (C6086 + C6087) * C16331) * C48365 +
            ((C6057 + C6056) * C48344 + (C6081 + C6080) * C16331) * C16333) *
               C48350) *
              C1087 +
          ((((C5867 + C5866) * C16331 + (C5865 + C5864) * C48344) * C16333 +
            ((C5888 + C5889) * C16331 + (C5872 + C5873) * C48344) * C48365) *
               C48387 -
           (((C6596 + C6597) * C48344 + (C6604 + C6605) * C16331) * C48365 +
            ((C6063 + C6062) * C48344 + (C6083 + C6082) * C16331) * C16333) *
               C48376 +
           (((C6087 + C6086) * C16331 + (C6085 + C6084) * C48344) * C16333 +
            (((C113 * C6039 + C48250 * C6041) * C1160 +
              (C113 * C6042 + C48250 * C6045) * C47983) *
                 C16331 +
             ((C113 * C6040 + C48250 * C6043) * C1160 +
              (C113 * C6044 + C48250 * C6046) * C47983) *
                 C48344) *
                C48365) *
               C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C665 +
             (C113 * C127 + C48250 * C140) * C659 - C168 * C666 - C169 * C660 +
             C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48351) *
                C16331 +
            (C168 * C665 + C169 * C659 - C170 * C666 - C171 * C660 +
             C172 * C667 + C173 * C661 - C174 * C668 - C175 * C48351) *
                C48344) *
               C16333 +
           ((C5242 + C5243 - C5244 - C5245 + C5246 + C5247 - C5248 - C5249) *
                C16331 +
            (C5250 + C5251 - C5252 - C5253 + C5254 + C5255 - C5256 - C5257) *
                C48344) *
               C48365) *
              C48316 +
          (((C550 * C666 -
             ((C113 * C496 + C48250 * C515) * C659 +
              (C113 * C486 + C48250 * C497) * C665) +
             C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
             C555 * C48351) *
                C16331 +
            (C552 * C666 - (C551 * C659 + C550 * C665) + C553 * C660 -
             C554 * C667 - C555 * C661 + C788 * C668 + C789 * C48351) *
                C48344) *
               C16333 +
           ((C968 * C666 - (C5596 * C659 + C5597 * C665) + C969 * C660 -
             C970 * C667 - C971 * C661 + C972 * C668 + C973 * C48351) *
                C16331 +
            (C970 * C666 - (C969 * C659 + C968 * C665) + C971 * C660 -
             C972 * C667 - C973 * C661 + (C113 * C939 + C48250 * C948) * C668 +
             (C113 * C949 + C48250 * C954) * C48351) *
                C48344) *
               C48365) *
              C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C119 + C48250 * C126) * C47001 +
              (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
              C169 * C47993) *
                 C16331 +
             (C168 * C47001 + C169 * C48298 - C170 * C46982 - C171 * C47993) *
                 C48344) *
                C16333 +
            ((C6218 + C6219 - C6220 - C6221) * C16331 +
             (C6222 + C6223 - C6224 - C6225) * C48344) *
                C48365) *
               C48316 +
           (((C550 * C46982 -
              ((C113 * C496 + C48250 * C515) * C48298 +
               (C113 * C486 + C48250 * C497) * C47001) +
              C551 * C47993) *
                 C16331 +
             (C552 * C46982 - (C551 * C48298 + C550 * C47001) + C553 * C47993) *
                 C48344) *
                C16333 +
            ((C6436 - (C6437 + C6438) + C6439) * C16331 +
             (C6440 - (C6441 + C6442) + C6443) * C48344) *
                C48365) *
               C48134) *
              C1086 +
          ((((C6220 - (C6219 + C6218) + C6221) * C16331 +
             (C6224 - (C6223 + C6222) + C6225) * C48344) *
                C16333 +
            ((C6226 - (C6227 + C6228) + C6229) * C16331 +
             (C6230 - (C6231 + C6232) + C6233) * C48344) *
                C48365) *
               C48316 +
           (((C6438 + C6437 - C6436 - C6439) * C16331 +
             (C6442 + C6441 - C6440 - C6443) * C48344) *
                C16333 +
            ((C6444 + C6445 - C6446 - C6447) * C16331 +
             (C6448 + C6449 - C6450 - C6451) * C48344) *
                C48365) *
               C48134) *
              C1087 +
          ((((C6228 + C6227 - C6226 - C6229) * C16331 +
             (C6232 + C6231 - C6230 - C6233) * C48344) *
                C16333 +
            ((C6234 + C6235 - C6236 - C6237) * C16331 +
             (C6238 + C6239 - C6240 - C6241) * C48344) *
                C48365) *
               C48316 +
           (((C6446 - (C6445 + C6444) + C6447) * C16331 +
             (C6450 - (C6449 + C6448) + C6451) * C48344) *
                C16333 +
            ((C6456 * C46982 - (C6602 * C48298 + C6603 * C47001) +
              C6457 * C47993) *
                 C16331 +
             ((C113 * C1715 + C48250 * C1720) * C46982 -
              (C6457 * C48298 + C6456 * C47001) +
              (C113 * C1721 + C48250 * C1724) * C47993) *
                 C48344) *
                C48365) *
               C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C114 +
            (C113 * C127 + C48250 * C140) * C102 - C168 * C115 - C169 * C103 +
            C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 +
            C174 * C118 + C175 * C106) *
               C16331 +
           (C168 * C114 + C169 * C102 - C170 * C115 - C171 * C103 +
            C172 * C116 + C173 * C104 - C174 * C117 - C175 * C105 +
            C176 * C118 + C177 * C106) *
               C48344) *
              C16333 +
          ((C4958 * C114 + C4959 * C102 - C361 * C115 - C362 * C103 +
            C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 +
            C678 * C118 + C679 * C106) *
               C16331 +
           (C361 * C114 + C362 * C102 - C363 * C115 - C364 * C103 +
            C365 * C116 + C366 * C104 - C678 * C117 - C679 * C105 +
            (C113 * C669 + C48250 * C670) * C118 +
            (C113 * C671 + C48250 * C672) * C106) *
               C48344) *
              C48365) *
         C48047 * C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C293 +
             (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48339) *
                C16331 +
            (C168 * C293 + C169 * C287 - C170 * C294 - C171 * C288 +
             C172 * C295 + C173 * C48339) *
                C48344) *
               C16333 +
           ((C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C16331 +
            (C4938 + C4939 - C4940 - C4941 + C4942 + C4943) * C48344) *
               C48365) *
              C48047 * C48386 +
          (((C4934 - (C4963 + C4962) + C4935 - C4936 - C4937) * C16331 +
            (C4940 - (C4939 + C4938) + C4941 - C4942 - C4943) * C48344) *
               C16333 +
           ((C4944 - (C4964 + C4965) + C4949 - C4950 - C4951) * C16331 +
            (C4952 - (C4953 + C4954) + C4955 - C4956 - C4957) * C48344) *
               C48365) *
              C48047 * C48374 +
          (((C4965 + C4964 - C4944 - C4949 + C4950 + C4951) * C16331 +
            (C4954 + C4953 - C4952 - C4955 + C4956 + C4957) * C48344) *
               C16333 +
           ((C5882 * C293 + C5883 * C287 - C1450 * C294 - C1451 * C288 +
             C1452 * C295 + C1453 * C48339) *
                C16331 +
            (C1450 * C293 + C1451 * C287 - C1452 * C294 - C1453 * C288 +
             (C113 * C1437 + C48250 * C1438) * C295 +
             (C113 * C1439 + C48250 * C1440) * C48339) *
                C48344) *
               C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1089 +
             (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
             C169 * C48370 + C170 * C1091 + C171 * C48339) *
                C16331 +
            (C168 * C1089 + C169 * C48383 - C170 * C1090 - C171 * C48370 +
             C172 * C1091 + C173 * C48339) *
                C48344) *
               C16333 +
           ((C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C16331 +
            (C5752 + C5753 - C5754 - C5755 + C5756 + C5757) * C48344) *
               C48365) *
              C48047 * C1086 +
          (((C5748 - (C5747 + C5746) + C5749 - C5750 - C5751) * C16331 +
            (C5754 - (C5753 + C5752) + C5755 - C5756 - C5757) * C48344) *
               C16333 +
           ((C5758 - (C5759 + C5760) + C5761 - C5762 - C5763) * C16331 +
            (C5764 - (C5765 + C5766) + C5767 - C5768 - C5769) * C48344) *
               C48365) *
              C48047 * C1087 +
          (((C5760 + C5759 - C5758 - C5761 + C5762 + C5763) * C16331 +
            (C5766 + C5765 - C5764 - C5767 + C5768 + C5769) * C48344) *
               C16333 +
           ((C5882 * C1089 + C5883 * C48383 - C1450 * C1090 - C1451 * C48370 +
             C1452 * C1091 + C1453 * C48339) *
                C16331 +
            (C1450 * C1089 + C1451 * C48383 - C1452 * C1090 - C1453 * C48370 +
             (C113 * C1437 + C48250 * C1438) * C1091 +
             (C113 * C1439 + C48250 * C1440) * C48339) *
                C48344) *
               C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1160 +
             (C113 * C127 + C48250 * C140) * C47983) *
                C16331 +
            (C168 * C1160 + C169 * C47983) * C48344) *
               C16333 +
           ((C5860 + C5861) * C16331 + (C5862 + C5863) * C48344) * C48365) *
              C48047 * C1155 -
          (((C5864 + C5865) * C48344 + (C5866 + C5867) * C16331) * C48365 +
           ((C5863 + C5862) * C48344 + (C5861 + C5860) * C16331) * C16333) *
              C48047 * C1156 +
          (((C5867 + C5866) * C16331 + (C5865 + C5864) * C48344) * C16333 +
           ((C5888 + C5889) * C16331 + (C5872 + C5873) * C48344) * C48365) *
              C48047 * C1157 -
          (((C5890 + C5891) * C48344 + (C5892 + C5893) * C16331) * C48365 +
           ((C5873 + C5872) * C48344 + (C5889 + C5888) * C16331) * C16333) *
              C48047 * C1158 +
          (((C5893 + C5892) * C16331 + (C5891 + C5890) * C48344) * C16333 +
           (((C113 * C5851 + C48250 * C5853) * C1160 +
             (C113 * C5854 + C48250 * C5857) * C47983) *
                C16331 +
            ((C113 * C5852 + C48250 * C5855) * C1160 +
             (C113 * C5856 + C48250 * C5858) * C47983) *
                C48344) *
               C48365) *
              C48047 * C1159)) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C47011 +
            (C113 * C127 + C48250 * C140) * C47988 - C168 * C47007 -
            C169 * C47996 + C170 * C47017 + C171 * C2901) *
               C48010 * C21764 +
           (C8130 + C8131 - C8132 - C8133 + C8134 + C8135) * C48010 * C21765 +
           C24191 * C21766) *
              C48047 * C48090 +
          ((C8132 - (C8131 + C8130) + C8133 - C8134 - C8135) * C48010 * C21764 +
           (C8142 - (C8143 + C8144) + C8145 - C8146 - C8147) * C48010 * C21765 +
           (C24181 - (C24182 + C24183) + C24184 - C24185 - C24186) * C48010 *
               C21766) *
              C48047 * C48097 +
          (C24191 * C21764 +
           (C24183 + C24182 - C24181 - C24184 + C24185 + C24186) * C48010 *
               C21765 +
           (C5887 * C47011 + C5886 * C47988 - C5885 * C47007 - C5884 * C47996 +
            (C113 * C1166 + C48250 * C1177) * C47017 +
            (C113 * C1178 + C48250 * C1184) * C2901) *
               C48010 * C21766) *
              C48047 * C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[101] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C48250 * C126) * C2641 +
                      (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
                      C169 * C47993) *
                         C48010 * C21764 +
                     (C7750 + C7751 - C7752 - C7753) * C48010 * C21765 +
                     C23918 * C21766) *
                        C48316 +
                    ((C550 * C2642 -
                      ((C113 * C496 + C48250 * C515) * C2635 +
                       (C113 * C486 + C48250 * C497) * C2641) +
                      C551 * C47993) *
                         C48010 * C21764 +
                     (C7968 - (C7969 + C7970) + C7971) * C48010 * C21765 +
                     C24497 * C21766) *
                        C48134) *
                       C48090 +
                   (((C7752 - (C7751 + C7750) + C7753) * C48010 * C21764 +
                     (C7758 - (C7759 + C7760) + C7761) * C48010 * C21765 +
                     C23919 * C21766) *
                        C48316 +
                    ((C7970 + C7969 - C7968 - C7971) * C48010 * C21764 +
                     (C8554 + C8555 - C8556 - C8557) * C48010 * C21765 +
                     (C24491 + C24492 - C24493 - C24494) * C48010 * C21766) *
                        C48134) *
                       C48097 +
                   ((C23918 * C21764 +
                     (C7766 + C7767 - C7768 - C7769) * C48010 * C21765 +
                     (C23910 + C23911 - C23912 - C23913) * C48010 * C21766) *
                        C48316 +
                    (C24497 * C21764 +
                     (C24493 - (C24492 + C24491) + C24494) * C48010 * C21765 +
                     ((C113 * C6588 + C48250 * C6591) * C2642 -
                      (C23056 * C2635 + C23057 * C2641) +
                      (C113 * C6592 + C48250 * C6594) * C47993) *
                         C48010 * C21766) *
                        C48134) *
                       C2904)) /
                 (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C2641 +
            (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
            C169 * C47993) *
               C48010 * C21764 +
           (C7750 + C7751 - C7752 - C7753) * C48010 * C21765 +
           C23918 * C21766) *
              C48047 * C48393 +
          ((C7752 - (C7751 + C7750) + C7753) * C48010 * C21764 +
           (C7758 - (C7759 + C7760) + C7761) * C48010 * C21765 +
           C23919 * C21766) *
              C48047 * C48389 +
          (C23918 * C21764 + (C7766 + C7767 - C7768 - C7769) * C48010 * C21765 +
           (C23910 + C23911 - C23912 - C23913) * C48010 * C21766) *
              C48047 * C48379 +
          (C23919 * C21764 +
           (C23912 - (C23911 + C23910) + C23913) * C48010 * C21765 +
           ((C113 * C5852 + C48250 * C5855) * C2642 -
            (C22554 * C2635 + C22555 * C2641) +
            (C113 * C5856 + C48250 * C5858) * C47993) *
               C48010 * C21766) *
              C48047 * C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C2533 +
            (C113 * C127 + C48250 * C140) * C48392 - C168 * C2534 -
            C169 * C48385 + C170 * C2535 + C171 * C48372 - C172 * C2536 -
            C173 * C48351) *
               C48010 * C21764 +
           (C7604 + C7605 - C7606 - C7607 + C7608 + C7609 - C7610 - C7611) *
               C48010 * C21765 +
           (C23802 + C23803 - C23804 - C23805 + C23806 + C23807 - C23808 -
            C23809) *
               C48010 * C21766) *
              C48047 * C2531 +
          ((C7606 - (C7605 + C7604) + C7607 - C7608 - C7609 + C7610 + C7611) *
               C48010 * C21764 +
           (C23804 - (C23803 + C23802) + C23805 - C23806 - C23807 + C23808 +
            C23809) *
               C48010 * C21765 +
           (C1450 * C2534 - (C5883 * C48392 + C5882 * C2533) + C1451 * C48385 -
            C1452 * C2535 - C1453 * C48372 +
            (C113 * C1437 + C48250 * C1438) * C2536 +
            (C113 * C1439 + C48250 * C1440) * C48351) *
               C48010 * C21766) *
              C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2641 +
             (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
             C169 * C47993) *
                C48010 * C21764 +
            (C7750 + C7751 - C7752 - C7753) * C48010 * C21765 +
            C23918 * C21766) *
               C48387 +
           ((C550 * C2642 -
             ((C113 * C496 + C48250 * C515) * C2635 +
              (C113 * C486 + C48250 * C497) * C2641) +
             C551 * C47993) *
                C48010 * C21764 +
            (C7968 - (C7969 + C7970) + C7971) * C48010 * C21765 +
            (C8556 - (C8555 + C8554) + C8557) * C48010 * C21766) *
               C48376 +
           (((C113 * C490 + C48250 * C505) * C2641 +
             (C113 * C506 + C48250 * C520) * C2635 - C556 * C2642 -
             C557 * C47993) *
                C48010 * C21764 +
            (C7976 + C7977 - C7978 - C7979) * C48010 * C21765 +
            (C24066 + C24067 - C24068 - C24069) * C48010 * C21766) *
               C48350) *
              C2531 +
          (((C7752 - (C7751 + C7750) + C7753) * C48010 * C21764 +
            (C7758 - (C7759 + C7760) + C7761) * C48010 * C21765 +
            C23919 * C21766) *
               C48387 +
           ((C7970 + C7969 - C7968 - C7971) * C48010 * C21764 +
            (C8554 + C8555 - C8556 - C8557) * C48010 * C21765 +
            (C6603 * C2641 + C6602 * C2635 - C6456 * C2642 - C6457 * C47993) *
                C48010 * C21766) *
               C48376 +
           ((C7978 - (C7977 + C7976) + C7979) * C48010 * C21764 +
            (C24068 - (C24067 + C24066) + C24069) * C48010 * C21765 +
            ((C113 * C6040 + C48250 * C6043) * C2642 -
             (C22680 * C2635 + C22681 * C2641) +
             (C113 * C6044 + C48250 * C6046) * C47993) *
                C48010 * C21766) *
               C48350) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C47011 +
             (C113 * C127 + C48250 * C140) * C47988 - C168 * C47007 -
             C169 * C47996 + C170 * C47017 + C171 * C2901) *
                C48010 * C21764 +
            (C8130 + C8131 - C8132 - C8133 + C8134 + C8135) * C48010 * C21765 +
            C24191 * C21766) *
               C48316 +
           ((C550 * C47007 -
             ((C113 * C496 + C48250 * C515) * C47988 +
              (C113 * C486 + C48250 * C497) * C47011) +
             C551 * C47996 - C552 * C47017 - C553 * C2901) *
                C48010 * C21764 +
            (C8348 - (C8349 + C8350) + C8351 - C8352 - C8353) * C48010 *
                C21765 +
            (C24338 - (C24339 + C24340) + C24341 - C24342 - C24343) * C48010 *
                C21766) *
               C48134) *
              C2531 +
          (((C8132 - (C8131 + C8130) + C8133 - C8134 - C8135) * C48010 *
                C21764 +
            (C8142 - (C8143 + C8144) + C8145 - C8146 - C8147) * C48010 *
                C21765 +
            (C24181 - (C24182 + C24183) + C24184 - C24185 - C24186) * C48010 *
                C21766) *
               C48316 +
           ((C8350 + C8349 - C8348 - C8351 + C8352 + C8353) * C48010 * C21764 +
            (C24340 + C24339 - C24338 - C24341 + C24342 + C24343) * C48010 *
                C21765 +
            (C6603 * C47011 + C6602 * C47988 - C6456 * C47007 - C6457 * C47996 +
             (C113 * C1715 + C48250 * C1720) * C47017 +
             (C113 * C1721 + C48250 * C1724) * C2901) *
                C48010 * C21766) *
               C48134) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C2533 +
            (C113 * C127 + C48250 * C140) * C48392 - C168 * C2534 -
            C169 * C48385 + C170 * C2535 + C171 * C48372 - C172 * C2536 -
            C173 * C48351) *
               C48010 * C21764 +
           (C7604 + C7605 - C7606 - C7607 + C7608 + C7609 - C7610 - C7611) *
               C48010 * C21765 +
           (C23802 + C23803 - C23804 - C23805 + C23806 + C23807 - C23808 -
            C23809) *
               C48010 * C21766) *
              C48047 * C2531 +
          ((C7606 - (C7605 + C7604) + C7607 - C7608 - C7609 + C7610 + C7611) *
               C48010 * C21764 +
           (C23804 - (C23803 + C23802) + C23805 - C23806 - C23807 + C23808 +
            C23809) *
               C48010 * C21765 +
           (C1450 * C2534 - (C5883 * C48392 + C5882 * C2533) + C1451 * C48385 -
            C1452 * C2535 - C1453 * C48372 +
            (C113 * C1437 + C48250 * C1438) * C2536 +
            (C113 * C1439 + C48250 * C1440) * C48351) *
               C48010 * C21766) *
              C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C2641 +
            (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
            C169 * C47993) *
               C48010 * C21764 +
           (C7750 + C7751 - C7752 - C7753) * C48010 * C21765 +
           C23918 * C21766) *
              C48047 * C48393 +
          ((C7752 - (C7751 + C7750) + C7753) * C48010 * C21764 +
           (C7758 - (C7759 + C7760) + C7761) * C48010 * C21765 +
           C23919 * C21766) *
              C48047 * C48389 +
          (C23918 * C21764 + (C7766 + C7767 - C7768 - C7769) * C48010 * C21765 +
           (C23910 + C23911 - C23912 - C23913) * C48010 * C21766) *
              C48047 * C48379 +
          (C23919 * C21764 +
           (C23912 - (C23911 + C23910) + C23913) * C48010 * C21765 +
           ((C113 * C5852 + C48250 * C5855) * C2642 -
            (C22554 * C2635 + C22555 * C2641) +
            (C113 * C5856 + C48250 * C5858) * C47993) *
               C48010 * C21766) *
              C48047 * C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[105] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C48250 * C126) * C47001 +
                      (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
                      C169 * C47993) *
                         C48010 * C21764 +
                     (C6218 + C6219 - C6220 - C6221) * C48010 * C21765 +
                     C22792 * C21766) *
                        C3298 +
                    ((C550 * C46982 -
                      ((C113 * C496 + C48250 * C515) * C48298 +
                       (C113 * C486 + C48250 * C497) * C47001) +
                      C551 * C47993) *
                         C48010 * C21764 +
                     (C6436 - (C6437 + C6438) + C6439) * C48010 * C21765 +
                     C22947 * C21766) *
                        C48134) *
                       C48090 +
                   (((C6220 - (C6219 + C6218) + C6221) * C48010 * C21764 +
                     (C6226 - (C6227 + C6228) + C6229) * C48010 * C21765 +
                     C22793 * C21766) *
                        C3298 +
                    ((C6438 + C6437 - C6436 - C6439) * C48010 * C21764 +
                     (C6444 + C6445 - C6446 - C6447) * C48010 * C21765 +
                     (C22941 + C22942 - C22943 - C22944) * C48010 * C21766) *
                        C48134) *
                       C48097 +
                   ((C22792 * C21764 +
                     (C6234 + C6235 - C6236 - C6237) * C48010 * C21765 +
                     (C22784 + C22785 - C22786 - C22787) * C48010 * C21766) *
                        C3298 +
                    (C22947 * C21764 +
                     (C22943 - (C22942 + C22941) + C22944) * C48010 * C21765 +
                     ((C113 * C6588 + C48250 * C6591) * C46982 -
                      (C23056 * C48298 + C23057 * C47001) +
                      (C113 * C6592 + C48250 * C6594) * C47993) *
                         C48010 * C21766) *
                        C48134) *
                       C2904)) /
                 (p * q * std::sqrt(p + q));
    d2ee[106] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C48250 * C126) * C1160 +
                      (C113 * C127 + C48250 * C140) * C47983) *
                         C48010 * C21764 +
                     (C5860 + C5861) * C48010 * C21765 + C22551 * C21766) *
                        C48130 -
                    (C22678 * C21766 + (C6050 + C6051) * C48010 * C21765 +
                     ((C113 * C496 + C48250 * C515) * C47983 +
                      (C113 * C486 + C48250 * C497) * C1160) *
                         C48010 * C21764) *
                        C48137 +
                    (((C113 * C490 + C48250 * C505) * C1160 +
                      (C113 * C506 + C48250 * C520) * C47983) *
                         C48010 * C21764 +
                     (C6080 + C6081) * C48010 * C21765 + C22679 * C21766) *
                        C3806) *
                       C48090 +
                   (((C6051 + C6050) * C48010 * C21764 +
                     (C6082 + C6083) * C48010 * C21765 + C23055 * C21766) *
                        C48137 -
                    (C22552 * C21766 + (C5866 + C5867) * C48010 * C21765 +
                     (C5861 + C5860) * C48010 * C21764) *
                        C48130 -
                    ((C22682 + C22683) * C48010 * C21766 +
                     (C6086 + C6087) * C48010 * C21765 +
                     (C6081 + C6080) * C48010 * C21764) *
                        C3806) *
                       C48097 +
                   ((C22551 * C21764 + (C5888 + C5889) * C48010 * C21765 +
                     C22553 * C21766) *
                        C48130 -
                    ((C23058 + C23059) * C48010 * C21766 +
                     (C6604 + C6605) * C48010 * C21765 + C22678 * C21764) *
                        C48137 +
                    (C22679 * C21764 + (C22683 + C22682) * C48010 * C21765 +
                     ((C113 * C22667 + C48250 * C22668) * C1160 +
                      (C113 * C22669 + C48250 * C22670) * C47983) *
                         C48010 * C21766) *
                        C3806) *
                       C2904)) /
                 (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1160 +
             (C113 * C127 + C48250 * C140) * C47983) *
                C48010 * C21764 +
            (C5860 + C5861) * C48010 * C21765 + C22551 * C21766) *
               C3298 -
           (C22678 * C21766 + (C6050 + C6051) * C48010 * C21765 +
            ((C113 * C496 + C48250 * C515) * C47983 +
             (C113 * C486 + C48250 * C497) * C1160) *
                C48010 * C21764) *
               C48134) *
              C48393 +
          (((C6051 + C6050) * C48010 * C21764 +
            (C6082 + C6083) * C48010 * C21765 + C23055 * C21766) *
               C48134 -
           (C22552 * C21766 + (C5866 + C5867) * C48010 * C21765 +
            (C5861 + C5860) * C48010 * C21764) *
               C3298) *
              C48389 +
          ((C22551 * C21764 + (C5888 + C5889) * C48010 * C21765 +
            C22553 * C21766) *
               C3298 -
           ((C23058 + C23059) * C48010 * C21766 +
            (C6604 + C6605) * C48010 * C21765 + C22678 * C21764) *
               C48134) *
              C48379 +
          ((C23055 * C21764 + (C23059 + C23058) * C48010 * C21765 +
            ((C113 * C23045 + C48250 * C23046) * C1160 +
             (C113 * C23047 + C48250 * C23048) * C47983) *
                C48010 * C21766) *
               C48134 -
           ((C22556 + C22557) * C48010 * C21766 +
            (C5892 + C5893) * C48010 * C21765 + C22552 * C21764) *
               C3298) *
              C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1089 +
             (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
             C169 * C48370 + C170 * C1091 + C171 * C48339) *
                C48010 * C21764 +
            (C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C48010 * C21765 +
            C22477 * C21766) *
               C3298 +
           ((C550 * C1090 -
             ((C113 * C496 + C48250 * C515) * C48383 +
              (C113 * C486 + C48250 * C497) * C1089) +
             C551 * C48370 - C552 * C1091 - C553 * C48339) *
                C48010 * C21764 +
            (C9744 - (C9745 + C9746) + C9747 - C9748 - C9749) * C48010 *
                C21765 +
            (C25388 - (C25389 + C25390) + C25391 - C25392 - C25393) * C48010 *
                C21766) *
               C48134) *
              C2531 +
          (((C5748 - (C5747 + C5746) + C5749 - C5750 - C5751) * C48010 *
                C21764 +
            (C5758 - (C5759 + C5760) + C5761 - C5762 - C5763) * C48010 *
                C21765 +
            (C22467 - (C22468 + C22469) + C22470 - C22471 - C22472) * C48010 *
                C21766) *
               C3298 +
           ((C9746 + C9745 - C9744 - C9747 + C9748 + C9749) * C48010 * C21764 +
            (C25390 + C25389 - C25388 - C25391 + C25392 + C25393) * C48010 *
                C21765 +
            (C6603 * C1089 + C6602 * C48383 - C6456 * C1090 - C6457 * C48370 +
             (C113 * C1715 + C48250 * C1720) * C1091 +
             (C113 * C1721 + C48250 * C1724) * C48339) *
                C48010 * C21766) *
               C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1160 +
             (C113 * C127 + C48250 * C140) * C47983) *
                C48010 * C21764 +
            (C5860 + C5861) * C48010 * C21765 + C22551 * C21766) *
               C48394 -
           (C22678 * C21766 + (C6050 + C6051) * C48010 * C21765 +
            ((C113 * C496 + C48250 * C515) * C47983 +
             (C113 * C486 + C48250 * C497) * C1160) *
                C48010 * C21764) *
               C48391 +
           (((C113 * C490 + C48250 * C505) * C1160 +
             (C113 * C506 + C48250 * C520) * C47983) *
                C48010 * C21764 +
            (C6080 + C6081) * C48010 * C21765 + C22679 * C21766) *
               C48382 -
           ((C23702 + C23703) * C48010 * C21766 +
            (C7472 + C7473) * C48010 * C21765 +
            ((C113 * C2025 + C48250 * C2035) * C47983 +
             (C113 * C2017 + C48250 * C2026) * C1160) *
                C48010 * C21764) *
               C48363) *
              C2531 +
          (((C6051 + C6050) * C48010 * C21764 +
            (C6082 + C6083) * C48010 * C21765 + C23055 * C21766) *
               C48391 -
           (C22552 * C21766 + (C5866 + C5867) * C48010 * C21765 +
            (C5861 + C5860) * C48010 * C21764) *
               C48394 -
           ((C22682 + C22683) * C48010 * C21766 +
            (C6086 + C6087) * C48010 * C21765 +
            (C6081 + C6080) * C48010 * C21764) *
               C48382 +
           ((C7473 + C7472) * C48010 * C21764 +
            (C23703 + C23702) * C48010 * C21765 +
            ((C113 * C23691 + C48250 * C23692) * C1160 +
             (C113 * C23693 + C48250 * C23694) * C47983) *
                C48010 * C21766) *
               C48363) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C48250 * C126) * C47001 +
                      (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
                      C169 * C47993) *
                         C48010 * C21764 +
                     (C6218 + C6219 - C6220 - C6221) * C48010 * C21765 +
                     C22792 * C21766) *
                        C48130 +
                    ((C550 * C46982 -
                      ((C113 * C496 + C48250 * C515) * C48298 +
                       (C113 * C486 + C48250 * C497) * C47001) +
                      C551 * C47993) *
                         C48010 * C21764 +
                     (C6436 - (C6437 + C6438) + C6439) * C48010 * C21765 +
                     C22947 * C21766) *
                        C48137 +
                    (((C113 * C490 + C48250 * C505) * C47001 +
                      (C113 * C506 + C48250 * C520) * C48298 - C556 * C46982 -
                      C557 * C47993) *
                         C48010 * C21764 +
                     (C7182 + C7183 - C7184 - C7185) * C48010 * C21765 +
                     (C23492 + C23493 - C23494 - C23495) * C48010 * C21766) *
                        C3806) *
                       C2531 +
                   (((C6220 - (C6219 + C6218) + C6221) * C48010 * C21764 +
                     (C6226 - (C6227 + C6228) + C6229) * C48010 * C21765 +
                     C22793 * C21766) *
                        C48130 +
                    ((C6438 + C6437 - C6436 - C6439) * C48010 * C21764 +
                     (C6444 + C6445 - C6446 - C6447) * C48010 * C21765 +
                     (C22941 + C22942 - C22943 - C22944) * C48010 * C21766) *
                        C48137 +
                    ((C7184 - (C7183 + C7182) + C7185) * C48010 * C21764 +
                     (C23494 - (C23493 + C23492) + C23495) * C48010 * C21765 +
                     ((C113 * C6040 + C48250 * C6043) * C46982 -
                      (C22680 * C48298 + C22681 * C47001) +
                      (C113 * C6044 + C48250 * C6046) * C47993) *
                         C48010 * C21766) *
                        C3806) *
                       C48094)) /
                 (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1089 +
             (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
             C169 * C48370 + C170 * C1091 + C171 * C48339) *
                C48010 * C21764 +
            (C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C48010 * C21765 +
            C22477 * C21766) *
               C3298 +
           ((C550 * C1090 -
             ((C113 * C496 + C48250 * C515) * C48383 +
              (C113 * C486 + C48250 * C497) * C1089) +
             C551 * C48370 - C552 * C1091 - C553 * C48339) *
                C48010 * C21764 +
            (C9744 - (C9745 + C9746) + C9747 - C9748 - C9749) * C48010 *
                C21765 +
            (C25388 - (C25389 + C25390) + C25391 - C25392 - C25393) * C48010 *
                C21766) *
               C48134) *
              C2531 +
          (((C5748 - (C5747 + C5746) + C5749 - C5750 - C5751) * C48010 *
                C21764 +
            (C5758 - (C5759 + C5760) + C5761 - C5762 - C5763) * C48010 *
                C21765 +
            (C22467 - (C22468 + C22469) + C22470 - C22471 - C22472) * C48010 *
                C21766) *
               C3298 +
           ((C9746 + C9745 - C9744 - C9747 + C9748 + C9749) * C48010 * C21764 +
            (C25390 + C25389 - C25388 - C25391 + C25392 + C25393) * C48010 *
                C21765 +
            (C6603 * C1089 + C6602 * C48383 - C6456 * C1090 - C6457 * C48370 +
             (C113 * C1715 + C48250 * C1720) * C1091 +
             (C113 * C1721 + C48250 * C1724) * C48339) *
                C48010 * C21766) *
               C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1160 +
             (C113 * C127 + C48250 * C140) * C47983) *
                C48010 * C21764 +
            (C5860 + C5861) * C48010 * C21765 + C22551 * C21766) *
               C3298 -
           (C22678 * C21766 + (C6050 + C6051) * C48010 * C21765 +
            ((C113 * C496 + C48250 * C515) * C47983 +
             (C113 * C486 + C48250 * C497) * C1160) *
                C48010 * C21764) *
               C48134) *
              C48393 +
          (((C6051 + C6050) * C48010 * C21764 +
            (C6082 + C6083) * C48010 * C21765 + C23055 * C21766) *
               C48134 -
           (C22552 * C21766 + (C5866 + C5867) * C48010 * C21765 +
            (C5861 + C5860) * C48010 * C21764) *
               C3298) *
              C48389 +
          ((C22551 * C21764 + (C5888 + C5889) * C48010 * C21765 +
            C22553 * C21766) *
               C3298 -
           ((C23058 + C23059) * C48010 * C21766 +
            (C6604 + C6605) * C48010 * C21765 + C22678 * C21764) *
               C48134) *
              C48379 +
          ((C23055 * C21764 + (C23059 + C23058) * C48010 * C21765 +
            ((C113 * C23045 + C48250 * C23046) * C1160 +
             (C113 * C23047 + C48250 * C23048) * C47983) *
                C48010 * C21766) *
               C48134 -
           ((C22556 + C22557) * C48010 * C21766 +
            (C5892 + C5893) * C48010 * C21765 + C22552 * C21764) *
               C3298) *
              C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C47001 +
            (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
            C169 * C47993) *
               C48010 * C21764 +
           (C6218 + C6219 - C6220 - C6221) * C48010 * C21765 +
           C22792 * C21766) *
              C48047 * C1431 +
          ((C6220 - (C6219 + C6218) + C6221) * C48010 * C21764 +
           (C6226 - (C6227 + C6228) + C6229) * C48010 * C21765 +
           C22793 * C21766) *
              C48047 * C1432 +
          (C22792 * C21764 + (C6234 + C6235 - C6236 - C6237) * C48010 * C21765 +
           (C22784 + C22785 - C22786 - C22787) * C48010 * C21766) *
              C48047 * C1433 +
          (C22793 * C21764 +
           (C22786 - (C22785 + C22784) + C22787) * C48010 * C21765 +
           ((C113 * C5852 + C48250 * C5855) * C46982 -
            (C22554 * C48298 + C22555 * C47001) +
            (C113 * C5856 + C48250 * C5858) * C47993) *
               C48010 * C21766) *
              C48047 * C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C665 +
            (C113 * C127 + C48250 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48351) *
               C48010 * C21764 +
           (C5242 + C5243 - C5244 - C5245 + C5246 + C5247 - C5248 - C5249) *
               C48010 * C21765 +
           (C22098 + C22099 - C22100 - C22101 + C22102 + C22103 - C22104 -
            C22105) *
               C48010 * C21766) *
              C48047 * C48315 +
          ((C5244 - (C5243 + C5242) + C5245 - C5246 - C5247 + C5248 + C5249) *
               C48010 * C21764 +
           (C22100 - (C22099 + C22098) + C22101 - C22102 - C22103 + C22104 +
            C22105) *
               C48010 * C21765 +
           (C1450 * C666 - (C5883 * C659 + C5882 * C665) + C1451 * C660 -
            C1452 * C667 - C1453 * C661 +
            (C113 * C1437 + C48250 * C1438) * C668 +
            (C113 * C1439 + C48250 * C1440) * C48351) *
               C48010 * C21766) *
              C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C47001 +
             (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
             C169 * C47993) *
                C48010 * C21764 +
            (C6218 + C6219 - C6220 - C6221) * C48010 * C21765 +
            C22792 * C21766) *
               C1835 +
           ((C550 * C46982 -
             ((C113 * C496 + C48250 * C515) * C48298 +
              (C113 * C486 + C48250 * C497) * C47001) +
             C551 * C47993) *
                C48010 * C21764 +
            (C6436 - (C6437 + C6438) + C6439) * C48010 * C21765 +
            C22947 * C21766) *
               C1836 +
           (((C113 * C490 + C48250 * C505) * C47001 +
             (C113 * C506 + C48250 * C520) * C48298 - C556 * C46982 -
             C557 * C47993) *
                C48010 * C21764 +
            (C7182 + C7183 - C7184 - C7185) * C48010 * C21765 +
            (C23492 + C23493 - C23494 - C23495) * C48010 * C21766) *
               C48350) *
              C48315 +
          (((C6220 - (C6219 + C6218) + C6221) * C48010 * C21764 +
            (C6226 - (C6227 + C6228) + C6229) * C48010 * C21765 +
            C22793 * C21766) *
               C1835 +
           ((C6438 + C6437 - C6436 - C6439) * C48010 * C21764 +
            (C6444 + C6445 - C6446 - C6447) * C48010 * C21765 +
            (C22941 + C22942 - C22943 - C22944) * C48010 * C21766) *
               C1836 +
           ((C7184 - (C7183 + C7182) + C7185) * C48010 * C21764 +
            (C23494 - (C23493 + C23492) + C23495) * C48010 * C21765 +
            ((C113 * C6040 + C48250 * C6043) * C46982 -
             (C22680 * C48298 + C22681 * C47001) +
             (C113 * C6044 + C48250 * C6046) * C47993) *
                C48010 * C21766) *
               C48350) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1160 +
             (C113 * C127 + C48250 * C140) * C47983) *
                C48010 * C21764 +
            (C5860 + C5861) * C48010 * C21765 + C22551 * C21766) *
               C48316 -
           (C22678 * C21766 + (C6050 + C6051) * C48010 * C21765 +
            ((C113 * C496 + C48250 * C515) * C47983 +
             (C113 * C486 + C48250 * C497) * C1160) *
                C48010 * C21764) *
               C48134) *
              C1431 +
          (((C6051 + C6050) * C48010 * C21764 +
            (C6082 + C6083) * C48010 * C21765 + C23055 * C21766) *
               C48134 -
           (C22552 * C21766 + (C5866 + C5867) * C48010 * C21765 +
            (C5861 + C5860) * C48010 * C21764) *
               C48316) *
              C1432 +
          ((C22551 * C21764 + (C5888 + C5889) * C48010 * C21765 +
            C22553 * C21766) *
               C48316 -
           ((C23058 + C23059) * C48010 * C21766 +
            (C6604 + C6605) * C48010 * C21765 + C22678 * C21764) *
               C48134) *
              C1433 +
          ((C23055 * C21764 + (C23059 + C23058) * C48010 * C21765 +
            ((C113 * C23045 + C48250 * C23046) * C1160 +
             (C113 * C23047 + C48250 * C23048) * C47983) *
                C48010 * C21766) *
               C48134 -
           ((C22556 + C22557) * C48010 * C21766 +
            (C5892 + C5893) * C48010 * C21765 + C22552 * C21764) *
               C48316) *
              C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C293 +
             (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48339) *
                C48010 * C21764 +
            (C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C48010 * C21765 +
            C21889 * C21766) *
               C48316 +
           ((C550 * C294 -
             ((C113 * C496 + C48250 * C515) * C287 +
              (C113 * C486 + C48250 * C497) * C293) +
             C551 * C288 - C552 * C295 - C553 * C48339) *
                C48010 * C21764 +
            (C5582 - (C5598 + C5599) + C5587 - C5588 - C5589) * C48010 *
                C21765 +
            (C22350 - (C22351 + C22352) + C22353 - C22354 - C22355) * C48010 *
                C21766) *
               C48134) *
              C48315 +
          (((C4934 - (C4963 + C4962) + C4935 - C4936 - C4937) * C48010 *
                C21764 +
            (C4944 - (C4964 + C4965) + C4949 - C4950 - C4951) * C48010 *
                C21765 +
            (C21879 - (C21880 + C21881) + C21882 - C21883 - C21884) * C48010 *
                C21766) *
               C48316 +
           ((C5599 + C5598 - C5582 - C5587 + C5588 + C5589) * C48010 * C21764 +
            (C22352 + C22351 - C22350 - C22353 + C22354 + C22355) * C48010 *
                C21765 +
            (C6603 * C293 + C6602 * C287 - C6456 * C294 - C6457 * C288 +
             (C113 * C1715 + C48250 * C1720) * C295 +
             (C113 * C1721 + C48250 * C1724) * C48339) *
                C48010 * C21766) *
               C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1160 +
             (C113 * C127 + C48250 * C140) * C47983) *
                C48010 * C21764 +
            (C5860 + C5861) * C48010 * C21765 + C22551 * C21766) *
               C2299 -
           (C22678 * C21766 + (C6050 + C6051) * C48010 * C21765 +
            ((C113 * C496 + C48250 * C515) * C47983 +
             (C113 * C486 + C48250 * C497) * C1160) *
                C48010 * C21764) *
               C2300 +
           (((C113 * C490 + C48250 * C505) * C1160 +
             (C113 * C506 + C48250 * C520) * C47983) *
                C48010 * C21764 +
            (C6080 + C6081) * C48010 * C21765 + C22679 * C21766) *
               C2301 -
           ((C23702 + C23703) * C48010 * C21766 +
            (C7472 + C7473) * C48010 * C21765 +
            ((C113 * C2025 + C48250 * C2035) * C47983 +
             (C113 * C2017 + C48250 * C2026) * C1160) *
                C48010 * C21764) *
               C48363) *
              C48315 +
          (((C6051 + C6050) * C48010 * C21764 +
            (C6082 + C6083) * C48010 * C21765 + C23055 * C21766) *
               C2300 -
           (C22552 * C21766 + (C5866 + C5867) * C48010 * C21765 +
            (C5861 + C5860) * C48010 * C21764) *
               C2299 -
           ((C22682 + C22683) * C48010 * C21766 +
            (C6086 + C6087) * C48010 * C21765 +
            (C6081 + C6080) * C48010 * C21764) *
               C2301 +
           ((C7473 + C7472) * C48010 * C21764 +
            (C23703 + C23702) * C48010 * C21765 +
            ((C113 * C23691 + C48250 * C23692) * C1160 +
             (C113 * C23693 + C48250 * C23694) * C47983) *
                C48010 * C21766) *
               C48363) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C113 * C119 + C48250 * C126) * C114 +
               (C113 * C127 + C48250 * C140) * C102 - C168 * C115 -
               C169 * C103 + C170 * C116 + C171 * C104 - C172 * C117 -
               C173 * C105 + C174 * C118 + C175 * C106) *
                  C48010 * C21764 +
              (C4958 * C114 + C4959 * C102 - C361 * C115 - C362 * C103 +
               C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 +
               C678 * C118 + C679 * C106) *
                  C48010 * C21765 +
              (C4961 * C114 + C4960 * C102 - C367 * C115 - C368 * C103 +
               C369 * C116 + C370 * C104 - C371 * C117 - C372 * C105 +
               (C113 * C305 + C48250 * C324) * C118 +
               (C113 * C325 + C48250 * C335) * C106) *
                  C48010 * C21766) *
             C48047 * C48035 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C119 + C48250 * C126) * C293 +
                (C113 * C127 + C48250 * C140) * C287 - C168 * C294 -
                C169 * C288 + C170 * C295 + C171 * C48339) *
                   C48010 * C21764 +
               (C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C48010 *
                   C21765 +
               C21889 * C21766) *
                  C48047 * C48386 +
              ((C4934 - (C4963 + C4962) + C4935 - C4936 - C4937) * C48010 *
                   C21764 +
               (C4944 - (C4964 + C4965) + C4949 - C4950 - C4951) * C48010 *
                   C21765 +
               (C21879 - (C21880 + C21881) + C21882 - C21883 - C21884) *
                   C48010 * C21766) *
                  C48047 * C48374 +
              (C21889 * C21764 +
               (C21881 + C21880 - C21879 - C21882 + C21883 + C21884) * C48010 *
                   C21765 +
               (C5887 * C293 + C5886 * C287 - C5885 * C294 - C5884 * C288 +
                (C113 * C1166 + C48250 * C1177) * C295 +
                (C113 * C1178 + C48250 * C1184) * C48339) *
                   C48010 * C21766) *
                  C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C293 +
            (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C48339) *
               C48010 * C21764 +
           (C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C48010 * C21765 +
           C21889 * C21766) *
              C48387 +
          ((C550 * C294 -
            ((C113 * C496 + C48250 * C515) * C287 +
             (C113 * C486 + C48250 * C497) * C293) +
            C551 * C288 - C552 * C295 - C553 * C48339) *
               C48010 * C21764 +
           (C5582 - (C5598 + C5599) + C5587 - C5588 - C5589) * C48010 * C21765 +
           (C1612 * C294 - (C6075 * C287 + C6074 * C293) + C1613 * C288 -
            C1614 * C295 - C1615 * C48339) *
               C48010 * C21766) *
              C48376 +
          (((C113 * C490 + C48250 * C505) * C293 +
            (C113 * C506 + C48250 * C520) * C287 - C556 * C294 - C557 * C288 +
            C558 * C295 + C559 * C48339) *
               C48010 * C21764 +
           (C6072 * C293 + C6073 * C287 - C2198 * C294 - C2199 * C288 +
            C2200 * C295 + C2201 * C48339) *
               C48010 * C21765 +
           (C6079 * C293 + C6078 * C287 - C6077 * C294 - C6076 * C288 +
            (C113 * C1303 + C48250 * C1320) * C295 +
            (C113 * C1321 + C48250 * C1330) * C48339) *
               C48010 * C21766) *
              C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C1089 +
            (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
            C169 * C48370 + C170 * C1091 + C171 * C48339) *
               C48010 * C21764 +
           (C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C48010 * C21765 +
           C22477 * C21766) *
              C48047 * C1086 +
          ((C5748 - (C5747 + C5746) + C5749 - C5750 - C5751) * C48010 * C21764 +
           (C5758 - (C5759 + C5760) + C5761 - C5762 - C5763) * C48010 * C21765 +
           (C22467 - (C22468 + C22469) + C22470 - C22471 - C22472) * C48010 *
               C21766) *
              C48047 * C1087 +
          (C22477 * C21764 +
           (C22469 + C22468 - C22467 - C22470 + C22471 + C22472) * C48010 *
               C21765 +
           (C5887 * C1089 + C5886 * C48383 - C5885 * C1090 - C5884 * C48370 +
            (C113 * C1166 + C48250 * C1177) * C1091 +
            (C113 * C1178 + C48250 * C1184) * C48339) *
               C48010 * C21766) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C1160 +
            (C113 * C127 + C48250 * C140) * C47983) *
               C48010 * C21764 +
           (C5860 + C5861) * C48010 * C21765 + C22551 * C21766) *
              C48047 * C1155 -
          (C22552 * C21766 + (C5866 + C5867) * C48010 * C21765 +
           (C5861 + C5860) * C48010 * C21764) *
              C48047 * C1156 +
          (C22551 * C21764 + (C5888 + C5889) * C48010 * C21765 +
           C22553 * C21766) *
              C48047 * C1157 -
          ((C22556 + C22557) * C48010 * C21766 +
           (C5892 + C5893) * C48010 * C21765 + C22552 * C21764) *
              C48047 * C1158 +
          (C22553 * C21764 + (C22557 + C22556) * C48010 * C21765 +
           ((C113 * C22539 + C48250 * C22540) * C1160 +
            (C113 * C22541 + C48250 * C22542) * C47983) *
               C48010 * C21766) *
              C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1160 +
             (C113 * C127 + C48250 * C140) * C47983) *
                C48010 * C21764 +
            (C5860 + C5861) * C48010 * C21765 + C22551 * C21766) *
               C48387 -
           (C22678 * C21766 + (C6050 + C6051) * C48010 * C21765 +
            ((C113 * C496 + C48250 * C515) * C47983 +
             (C113 * C486 + C48250 * C497) * C1160) *
                C48010 * C21764) *
               C48376 +
           (((C113 * C490 + C48250 * C505) * C1160 +
             (C113 * C506 + C48250 * C520) * C47983) *
                C48010 * C21764 +
            (C6080 + C6081) * C48010 * C21765 + C22679 * C21766) *
               C48350) *
              C1086 +
          (((C6051 + C6050) * C48010 * C21764 +
            (C6082 + C6083) * C48010 * C21765 +
            (C6605 + C6604) * C48010 * C21766) *
               C48376 -
           (C22552 * C21766 + (C5866 + C5867) * C48010 * C21765 +
            (C5861 + C5860) * C48010 * C21764) *
               C48387 -
           ((C22682 + C22683) * C48010 * C21766 +
            (C6086 + C6087) * C48010 * C21765 +
            (C6081 + C6080) * C48010 * C21764) *
               C48350) *
              C1087 +
          ((C22551 * C21764 + (C5888 + C5889) * C48010 * C21765 +
            C22553 * C21766) *
               C48387 -
           (((C113 * C6590 + C48250 * C6593) * C47983 +
             (C113 * C6587 + C48250 * C6589) * C1160) *
                C48010 * C21766 +
            (C6604 + C6605) * C48010 * C21765 + C22678 * C21764) *
               C48376 +
           (C22679 * C21764 + (C22683 + C22682) * C48010 * C21765 +
            ((C113 * C22667 + C48250 * C22668) * C1160 +
             (C113 * C22669 + C48250 * C22670) * C47983) *
                C48010 * C21766) *
               C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C1089 +
            (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
            C169 * C48370 + C170 * C1091 + C171 * C48339) *
               C48010 * C21764 +
           (C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C48010 * C21765 +
           C22477 * C21766) *
              C1835 +
          ((C550 * C1090 -
            ((C113 * C496 + C48250 * C515) * C48383 +
             (C113 * C486 + C48250 * C497) * C1089) +
            C551 * C48370 - C552 * C1091 - C553 * C48339) *
               C48010 * C21764 +
           (C9744 - (C9745 + C9746) + C9747 - C9748 - C9749) * C48010 * C21765 +
           (C1612 * C1090 - (C6075 * C48383 + C6074 * C1089) + C1613 * C48370 -
            C1614 * C1091 - C1615 * C48339) *
               C48010 * C21766) *
              C1836 +
          (((C113 * C490 + C48250 * C505) * C1089 +
            (C113 * C506 + C48250 * C520) * C48383 - C556 * C1090 -
            C557 * C48370 + C558 * C1091 + C559 * C48339) *
               C48010 * C21764 +
           (C6072 * C1089 + C6073 * C48383 - C2198 * C1090 - C2199 * C48370 +
            C2200 * C1091 + C2201 * C48339) *
               C48010 * C21765 +
           (C6079 * C1089 + C6078 * C48383 - C6077 * C1090 - C6076 * C48370 +
            (C113 * C1303 + C48250 * C1320) * C1091 +
            (C113 * C1321 + C48250 * C1330) * C48339) *
               C48010 * C21766) *
              C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1160 +
             (C113 * C127 + C48250 * C140) * C47983) *
                C48010 * C21764 +
            (C5860 + C5861) * C48010 * C21765 + C22551 * C21766) *
               C1835 -
           (C22678 * C21766 + (C6050 + C6051) * C48010 * C21765 +
            ((C113 * C496 + C48250 * C515) * C47983 +
             (C113 * C486 + C48250 * C497) * C1160) *
                C48010 * C21764) *
               C1836 +
           (((C113 * C490 + C48250 * C505) * C1160 +
             (C113 * C506 + C48250 * C520) * C47983) *
                C48010 * C21764 +
            (C6080 + C6081) * C48010 * C21765 + C22679 * C21766) *
               C48350) *
              C48386 +
          (((C6051 + C6050) * C48010 * C21764 +
            (C6082 + C6083) * C48010 * C21765 + C23055 * C21766) *
               C1836 -
           (C22552 * C21766 + (C5866 + C5867) * C48010 * C21765 +
            (C5861 + C5860) * C48010 * C21764) *
               C1835 -
           ((C22682 + C22683) * C48010 * C21766 +
            (C6086 + C6087) * C48010 * C21765 +
            (C6081 + C6080) * C48010 * C21764) *
               C48350) *
              C48374 +
          ((C22551 * C21764 + (C5888 + C5889) * C48010 * C21765 +
            C22553 * C21766) *
               C1835 -
           ((C23058 + C23059) * C48010 * C21766 +
            (C6604 + C6605) * C48010 * C21765 + C22678 * C21764) *
               C1836 +
           (C22679 * C21764 + (C22683 + C22682) * C48010 * C21765 +
            ((C113 * C22667 + C48250 * C22668) * C1160 +
             (C113 * C22669 + C48250 * C22670) * C47983) *
                C48010 * C21766) *
               C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C1160 +
            (C113 * C127 + C48250 * C140) * C47983) *
               C48010 * C21764 +
           (C5860 + C5861) * C48010 * C21765 + C22551 * C21766) *
              C2010 -
          (C22678 * C21766 + (C6050 + C6051) * C48010 * C21765 +
           ((C113 * C496 + C48250 * C515) * C47983 +
            (C113 * C486 + C48250 * C497) * C1160) *
               C48010 * C21764) *
              C2011 +
          (((C113 * C490 + C48250 * C505) * C1160 +
            (C113 * C506 + C48250 * C520) * C47983) *
               C48010 * C21764 +
           (C6080 + C6081) * C48010 * C21765 + C22679 * C21766) *
              C2012 -
          (((C113 * C7458 + C48250 * C7461) * C47983 +
            (C113 * C7455 + C48250 * C7457) * C1160) *
               C48010 * C21766 +
           (C7472 + C7473) * C48010 * C21765 +
           ((C113 * C2025 + C48250 * C2035) * C47983 +
            (C113 * C2017 + C48250 * C2026) * C1160) *
               C48010 * C21764) *
              C2013 +
          (((C113 * C2018 + C48250 * C2027) * C1160 +
            (C113 * C2028 + C48250 * C2036) * C47983) *
               C48010 * C21764 +
           ((C113 * C6979 + C48250 * C6981) * C1160 +
            (C113 * C6982 + C48250 * C6985) * C47983) *
               C48010 * C21765 +
           ((C113 * C23341 + C48250 * C23342) * C1160 +
            (C113 * C23343 + C48250 * C23344) * C47983) *
               C48010 * C21766) *
              C2014) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C47001 +
             (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
             C169 * C47993) *
                C48010 * C21764 +
            (C6218 + C6219 - C6220 - C6221) * C48010 * C21765 +
            C22792 * C21766) *
               C48316 +
           ((C550 * C46982 -
             ((C113 * C496 + C48250 * C515) * C48298 +
              (C113 * C486 + C48250 * C497) * C47001) +
             C551 * C47993) *
                C48010 * C21764 +
            (C6436 - (C6437 + C6438) + C6439) * C48010 * C21765 +
            C22947 * C21766) *
               C48134) *
              C1086 +
          (((C6220 - (C6219 + C6218) + C6221) * C48010 * C21764 +
            (C6226 - (C6227 + C6228) + C6229) * C48010 * C21765 +
            C22793 * C21766) *
               C48316 +
           ((C6438 + C6437 - C6436 - C6439) * C48010 * C21764 +
            (C6444 + C6445 - C6446 - C6447) * C48010 * C21765 +
            (C22941 + C22942 - C22943 - C22944) * C48010 * C21766) *
               C48134) *
              C1087 +
          ((C22792 * C21764 +
            (C6234 + C6235 - C6236 - C6237) * C48010 * C21765 +
            (C22784 + C22785 - C22786 - C22787) * C48010 * C21766) *
               C48316 +
           (C22947 * C21764 +
            (C22943 - (C22942 + C22941) + C22944) * C48010 * C21765 +
            ((C113 * C6588 + C48250 * C6591) * C46982 -
             ((C113 * C6590 + C48250 * C6593) * C48298 +
              (C113 * C6587 + C48250 * C6589) * C47001) +
             (C113 * C6592 + C48250 * C6594) * C47993) *
                C48010 * C21766) *
               C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C665 +
            (C113 * C127 + C48250 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48351) *
               C48010 * C21764 +
           (C5242 + C5243 - C5244 - C5245 + C5246 + C5247 - C5248 - C5249) *
               C48010 * C21765 +
           (C22098 + C22099 - C22100 - C22101 + C22102 + C22103 - C22104 -
            C22105) *
               C48010 * C21766) *
              C48316 +
          ((C550 * C666 -
            ((C113 * C496 + C48250 * C515) * C659 +
             (C113 * C486 + C48250 * C497) * C665) +
            C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
            C555 * C48351) *
               C48010 * C21764 +
           (C968 * C666 - (C5596 * C659 + C5597 * C665) + C969 * C660 -
            C970 * C667 - C971 * C661 + C972 * C668 + C973 * C48351) *
               C48010 * C21765 +
           (C1612 * C666 - (C6075 * C659 + C6074 * C665) + C1613 * C660 -
            C1614 * C667 - C1615 * C661 +
            (C113 * C1599 + C48250 * C1600) * C668 +
            (C113 * C1601 + C48250 * C1602) * C48351) *
               C48010 * C21766) *
              C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C47001 +
            (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
            C169 * C47993) *
               C48010 * C21764 +
           (C6218 + C6219 - C6220 - C6221) * C48010 * C21765 +
           C22792 * C21766) *
              C2299 +
          ((C550 * C46982 -
            ((C113 * C496 + C48250 * C515) * C48298 +
             (C113 * C486 + C48250 * C497) * C47001) +
            C551 * C47993) *
               C48010 * C21764 +
           (C6436 - (C6437 + C6438) + C6439) * C48010 * C21765 +
           C22947 * C21766) *
              C2300 +
          (((C113 * C490 + C48250 * C505) * C47001 +
            (C113 * C506 + C48250 * C520) * C48298 - C556 * C46982 -
            C557 * C47993) *
               C48010 * C21764 +
           (C7182 + C7183 - C7184 - C7185) * C48010 * C21765 +
           (C23492 + C23493 - C23494 - C23495) * C48010 * C21766) *
              C2301 +
          ((C2316 * C46982 -
            ((C113 * C2025 + C48250 * C2035) * C48298 +
             (C113 * C2017 + C48250 * C2026) * C47001) +
            C2317 * C47993) *
               C48010 * C21764 +
           (C7324 * C46982 - (C7470 * C48298 + C7471 * C47001) +
            C7325 * C47993) *
               C48010 * C21765 +
           ((C113 * C7456 + C48250 * C7459) * C46982 -
            ((C113 * C7458 + C48250 * C7461) * C48298 +
             (C113 * C7455 + C48250 * C7457) * C47001) +
            (C113 * C7460 + C48250 * C7462) * C47993) *
               C48010 * C21766) *
              C48363) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C293 +
            (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C48339) *
               C48010 * C21764 +
           (C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C48010 * C21765 +
           C21889 * C21766) *
              C48047 * C48386 +
          ((C4934 - (C4963 + C4962) + C4935 - C4936 - C4937) * C48010 * C21764 +
           (C4944 - (C4964 + C4965) + C4949 - C4950 - C4951) * C48010 * C21765 +
           (C21879 - (C21880 + C21881) + C21882 - C21883 - C21884) * C48010 *
               C21766) *
              C48047 * C48374 +
          (C21889 * C21764 +
           (C21881 + C21880 - C21879 - C21882 + C21883 + C21884) * C48010 *
               C21765 +
           (C5887 * C293 + C5886 * C287 - C5885 * C294 - C5884 * C288 +
            (C113 * C1166 + C48250 * C1177) * C295 +
            (C113 * C1178 + C48250 * C1184) * C48339) *
               C48010 * C21766) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C48250 * C126) * C114 +
           (C113 * C127 + C48250 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C48010 * C21764 +
          (C4958 * C114 + C4959 * C102 - C361 * C115 - C362 * C103 +
           C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 + C678 * C118 +
           C679 * C106) *
              C48010 * C21765 +
          (C4961 * C114 + C4960 * C102 - C367 * C115 - C368 * C103 +
           C369 * C116 + C370 * C104 - C371 * C117 - C372 * C105 +
           (C113 * C305 + C48250 * C324) * C118 +
           (C113 * C325 + C48250 * C335) * C106) *
              C48010 * C21766) *
         C48047 * C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C1089 +
            (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
            C169 * C48370 + C170 * C1091 + C171 * C48339) *
               C48010 * C21764 +
           (C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C48010 * C21765 +
           C22477 * C21766) *
              C48047 * C1086 +
          ((C5748 - (C5747 + C5746) + C5749 - C5750 - C5751) * C48010 * C21764 +
           (C5758 - (C5759 + C5760) + C5761 - C5762 - C5763) * C48010 * C21765 +
           (C22467 - (C22468 + C22469) + C22470 - C22471 - C22472) * C48010 *
               C21766) *
              C48047 * C1087 +
          (C22477 * C21764 +
           (C22469 + C22468 - C22467 - C22470 + C22471 + C22472) * C48010 *
               C21765 +
           (C5887 * C1089 + C5886 * C48383 - C5885 * C1090 - C5884 * C48370 +
            (C113 * C1166 + C48250 * C1177) * C1091 +
            (C113 * C1178 + C48250 * C1184) * C48339) *
               C48010 * C21766) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C1160 +
            (C113 * C127 + C48250 * C140) * C47983) *
               C48010 * C21764 +
           (C5860 + C5861) * C48010 * C21765 + C22551 * C21766) *
              C48047 * C1155 -
          (C22552 * C21766 + (C5866 + C5867) * C48010 * C21765 +
           (C5861 + C5860) * C48010 * C21764) *
              C48047 * C1156 +
          (C22551 * C21764 + (C5888 + C5889) * C48010 * C21765 +
           C22553 * C21766) *
              C48047 * C1157 -
          ((C22556 + C22557) * C48010 * C21766 +
           (C5892 + C5893) * C48010 * C21765 + C22552 * C21764) *
              C48047 * C1158 +
          (C22553 * C21764 + (C22557 + C22556) * C48010 * C21765 +
           ((C113 * C22539 + C48250 * C22540) * C1160 +
            (C113 * C22541 + C48250 * C22542) * C47983) *
               C48010 * C21766) *
              C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C1089 +
            (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
            C169 * C48370 + C170 * C1091 + C171 * C48339) *
               C48010 * C21764 +
           (C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C48010 * C21765 +
           C22477 * C21766) *
              C1835 +
          ((C550 * C1090 -
            ((C113 * C496 + C48250 * C515) * C48383 +
             (C113 * C486 + C48250 * C497) * C1089) +
            C551 * C48370 - C552 * C1091 - C553 * C48339) *
               C48010 * C21764 +
           (C9744 - (C9745 + C9746) + C9747 - C9748 - C9749) * C48010 * C21765 +
           (C1612 * C1090 - (C6075 * C48383 + C6074 * C1089) + C1613 * C48370 -
            C1614 * C1091 - C1615 * C48339) *
               C48010 * C21766) *
              C1836 +
          (((C113 * C490 + C48250 * C505) * C1089 +
            (C113 * C506 + C48250 * C520) * C48383 - C556 * C1090 -
            C557 * C48370 + C558 * C1091 + C559 * C48339) *
               C48010 * C21764 +
           (C6072 * C1089 + C6073 * C48383 - C2198 * C1090 - C2199 * C48370 +
            C2200 * C1091 + C2201 * C48339) *
               C48010 * C21765 +
           (C6079 * C1089 + C6078 * C48383 - C6077 * C1090 - C6076 * C48370 +
            (C113 * C1303 + C48250 * C1320) * C1091 +
            (C113 * C1321 + C48250 * C1330) * C48339) *
               C48010 * C21766) *
              C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1160 +
             (C113 * C127 + C48250 * C140) * C47983) *
                C48010 * C21764 +
            (C5860 + C5861) * C48010 * C21765 + C22551 * C21766) *
               C1835 -
           (C22678 * C21766 + (C6050 + C6051) * C48010 * C21765 +
            ((C113 * C496 + C48250 * C515) * C47983 +
             (C113 * C486 + C48250 * C497) * C1160) *
                C48010 * C21764) *
               C1836 +
           (((C113 * C490 + C48250 * C505) * C1160 +
             (C113 * C506 + C48250 * C520) * C47983) *
                C48010 * C21764 +
            (C6080 + C6081) * C48010 * C21765 + C22679 * C21766) *
               C48350) *
              C48386 +
          (((C6051 + C6050) * C48010 * C21764 +
            (C6082 + C6083) * C48010 * C21765 + C23055 * C21766) *
               C1836 -
           (C22552 * C21766 + (C5866 + C5867) * C48010 * C21765 +
            (C5861 + C5860) * C48010 * C21764) *
               C1835 -
           ((C22682 + C22683) * C48010 * C21766 +
            (C6086 + C6087) * C48010 * C21765 +
            (C6081 + C6080) * C48010 * C21764) *
               C48350) *
              C48374 +
          ((C22551 * C21764 + (C5888 + C5889) * C48010 * C21765 +
            C22553 * C21766) *
               C1835 -
           ((C23058 + C23059) * C48010 * C21766 +
            (C6604 + C6605) * C48010 * C21765 + C22678 * C21764) *
               C1836 +
           (C22679 * C21764 + (C22683 + C22682) * C48010 * C21765 +
            ((C113 * C22667 + C48250 * C22668) * C1160 +
             (C113 * C22669 + C48250 * C22670) * C47983) *
                C48010 * C21766) *
               C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C47011 +
             (C113 * C127 + C48250 * C140) * C47988 - C168 * C47007 -
             C169 * C47996 + C170 * C47017 + C171 * C2901) *
                C48010 * C21764 +
            (C8130 + C8131 - C8132 - C8133 + C8134 + C8135) * C48010 * C21765 +
            C24191 * C21766) *
               C3298 +
           ((C550 * C47007 -
             ((C113 * C496 + C48250 * C515) * C47988 +
              (C113 * C486 + C48250 * C497) * C47011) +
             C551 * C47996 - C552 * C47017 - C553 * C2901) *
                C48010 * C21764 +
            (C8348 - (C8349 + C8350) + C8351 - C8352 - C8353) * C48010 *
                C21765 +
            (C24338 - (C24339 + C24340) + C24341 - C24342 - C24343) * C48010 *
                C21766) *
               C48134) *
              C48315 +
          (((C8132 - (C8131 + C8130) + C8133 - C8134 - C8135) * C48010 *
                C21764 +
            (C8142 - (C8143 + C8144) + C8145 - C8146 - C8147) * C48010 *
                C21765 +
            (C24181 - (C24182 + C24183) + C24184 - C24185 - C24186) * C48010 *
                C21766) *
               C3298 +
           ((C8350 + C8349 - C8348 - C8351 + C8352 + C8353) * C48010 * C21764 +
            (C24340 + C24339 - C24338 - C24341 + C24342 + C24343) * C48010 *
                C21765 +
            (C6603 * C47011 + C6602 * C47988 - C6456 * C47007 - C6457 * C47996 +
             (C113 * C1715 + C48250 * C1720) * C47017 +
             (C113 * C1721 + C48250 * C1724) * C2901) *
                C48010 * C21766) *
               C48134) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[116] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C119 + C48250 * C126) * C2641 +
                      (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
                      C169 * C47993) *
                         C48010 * C21764 +
                     (C7750 + C7751 - C7752 - C7753) * C48010 * C21765 +
                     C23918 * C21766) *
                        C48130 +
                    ((C550 * C2642 -
                      ((C113 * C496 + C48250 * C515) * C2635 +
                       (C113 * C486 + C48250 * C497) * C2641) +
                      C551 * C47993) *
                         C48010 * C21764 +
                     (C7968 - (C7969 + C7970) + C7971) * C48010 * C21765 +
                     C24497 * C21766) *
                        C48137 +
                    (((C113 * C490 + C48250 * C505) * C2641 +
                      (C113 * C506 + C48250 * C520) * C2635 - C556 * C2642 -
                      C557 * C47993) *
                         C48010 * C21764 +
                     (C7976 + C7977 - C7978 - C7979) * C48010 * C21765 +
                     (C24066 + C24067 - C24068 - C24069) * C48010 * C21766) *
                        C3806) *
                       C48315 +
                   (((C7752 - (C7751 + C7750) + C7753) * C48010 * C21764 +
                     (C7758 - (C7759 + C7760) + C7761) * C48010 * C21765 +
                     C23919 * C21766) *
                        C48130 +
                    ((C7970 + C7969 - C7968 - C7971) * C48010 * C21764 +
                     (C8554 + C8555 - C8556 - C8557) * C48010 * C21765 +
                     (C24491 + C24492 - C24493 - C24494) * C48010 * C21766) *
                        C48137 +
                    ((C7978 - (C7977 + C7976) + C7979) * C48010 * C21764 +
                     (C24068 - (C24067 + C24066) + C24069) * C48010 * C21765 +
                     ((C113 * C6040 + C48250 * C6043) * C2642 -
                      (C22680 * C2635 + C22681 * C2641) +
                      (C113 * C6044 + C48250 * C6046) * C47993) *
                         C48010 * C21766) *
                        C3806) *
                       C48094)) /
                 (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2641 +
             (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
             C169 * C47993) *
                C48010 * C21764 +
            (C7750 + C7751 - C7752 - C7753) * C48010 * C21765 +
            C23918 * C21766) *
               C3298 +
           ((C550 * C2642 -
             ((C113 * C496 + C48250 * C515) * C2635 +
              (C113 * C486 + C48250 * C497) * C2641) +
             C551 * C47993) *
                C48010 * C21764 +
            (C7968 - (C7969 + C7970) + C7971) * C48010 * C21765 +
            C24497 * C21766) *
               C48134) *
              C48386 +
          (((C7752 - (C7751 + C7750) + C7753) * C48010 * C21764 +
            (C7758 - (C7759 + C7760) + C7761) * C48010 * C21765 +
            C23919 * C21766) *
               C3298 +
           ((C7970 + C7969 - C7968 - C7971) * C48010 * C21764 +
            (C8554 + C8555 - C8556 - C8557) * C48010 * C21765 +
            (C24491 + C24492 - C24493 - C24494) * C48010 * C21766) *
               C48134) *
              C48374 +
          ((C23918 * C21764 +
            (C7766 + C7767 - C7768 - C7769) * C48010 * C21765 +
            (C23910 + C23911 - C23912 - C23913) * C48010 * C21766) *
               C3298 +
           (C24497 * C21764 +
            (C24493 - (C24492 + C24491) + C24494) * C48010 * C21765 +
            ((C113 * C6588 + C48250 * C6591) * C2642 -
             (C23056 * C2635 + C23057 * C2641) +
             (C113 * C6592 + C48250 * C6594) * C47993) *
                C48010 * C21766) *
               C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C2533 +
            (C113 * C127 + C48250 * C140) * C48392 - C168 * C2534 -
            C169 * C48385 + C170 * C2535 + C171 * C48372 - C172 * C2536 -
            C173 * C48351) *
               C48010 * C21764 +
           (C7604 + C7605 - C7606 - C7607 + C7608 + C7609 - C7610 - C7611) *
               C48010 * C21765 +
           (C23802 + C23803 - C23804 - C23805 + C23806 + C23807 - C23808 -
            C23809) *
               C48010 * C21766) *
              C3298 +
          ((C550 * C2534 -
            ((C113 * C496 + C48250 * C515) * C48392 +
             (C113 * C486 + C48250 * C497) * C2533) +
            C551 * C48385 - C552 * C2535 - C553 * C48372 + C554 * C2536 +
            C555 * C48351) *
               C48010 * C21764 +
           (C968 * C2534 - (C5596 * C48392 + C5597 * C2533) + C969 * C48385 -
            C970 * C2535 - C971 * C48372 + C972 * C2536 + C973 * C48351) *
               C48010 * C21765 +
           (C1612 * C2534 - (C6075 * C48392 + C6074 * C2533) + C1613 * C48385 -
            C1614 * C2535 - C1615 * C48372 +
            (C113 * C1599 + C48250 * C1600) * C2536 +
            (C113 * C1601 + C48250 * C1602) * C48351) *
               C48010 * C21766) *
              C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C2641 +
            (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
            C169 * C47993) *
               C48010 * C21764 +
           (C7750 + C7751 - C7752 - C7753) * C48010 * C21765 +
           C23918 * C21766) *
              C48394 +
          ((C550 * C2642 -
            ((C113 * C496 + C48250 * C515) * C2635 +
             (C113 * C486 + C48250 * C497) * C2641) +
            C551 * C47993) *
               C48010 * C21764 +
           (C7968 - (C7969 + C7970) + C7971) * C48010 * C21765 +
           C24497 * C21766) *
              C48391 +
          (((C113 * C490 + C48250 * C505) * C2641 +
            (C113 * C506 + C48250 * C520) * C2635 - C556 * C2642 -
            C557 * C47993) *
               C48010 * C21764 +
           (C7976 + C7977 - C7978 - C7979) * C48010 * C21765 +
           (C24066 + C24067 - C24068 - C24069) * C48010 * C21766) *
              C48382 +
          ((C2316 * C2642 -
            ((C113 * C2025 + C48250 * C2035) * C2635 +
             (C113 * C2017 + C48250 * C2026) * C2641) +
            C2317 * C47993) *
               C48010 * C21764 +
           (C7324 * C2642 - (C7470 * C2635 + C7471 * C2641) + C7325 * C47993) *
               C48010 * C21765 +
           ((C113 * C7456 + C48250 * C7459) * C2642 -
            (C23700 * C2635 + C23701 * C2641) +
            (C113 * C7460 + C48250 * C7462) * C47993) *
               C48010 * C21766) *
              C48363) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C47011 +
            (C113 * C127 + C48250 * C140) * C47988 - C168 * C47007 -
            C169 * C47996 + C170 * C47017 + C171 * C2901) *
               C48010 * C21764 +
           (C8130 + C8131 - C8132 - C8133 + C8134 + C8135) * C48010 * C21765 +
           C24191 * C21766) *
              C48130 +
          ((C550 * C47007 -
            ((C113 * C496 + C48250 * C515) * C47988 +
             (C113 * C486 + C48250 * C497) * C47011) +
            C551 * C47996 - C552 * C47017 - C553 * C2901) *
               C48010 * C21764 +
           (C8348 - (C8349 + C8350) + C8351 - C8352 - C8353) * C48010 * C21765 +
           (C24338 - (C24339 + C24340) + C24341 - C24342 - C24343) * C48010 *
               C21766) *
              C48137 +
          (((C113 * C490 + C48250 * C505) * C47011 +
            (C113 * C506 + C48250 * C520) * C47988 - C556 * C47007 -
            C557 * C47996 + C558 * C47017 + C559 * C2901) *
               C48010 * C21764 +
           (C6072 * C47011 + C6073 * C47988 - C2198 * C47007 - C2199 * C47996 +
            C2200 * C47017 + C2201 * C2901) *
               C48010 * C21765 +
           (C6079 * C47011 + C6078 * C47988 - C6077 * C47007 - C6076 * C47996 +
            (C113 * C1303 + C48250 * C1320) * C47017 +
            (C113 * C1321 + C48250 * C1330) * C2901) *
               C48010 * C21766) *
              C3806) *
         C48035) /
        (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C2533 +
            (C113 * C127 + C48250 * C140) * C48392 - C168 * C2534 -
            C169 * C48385 + C170 * C2535 + C171 * C48372 - C172 * C2536 -
            C173 * C48351) *
               C48010 * C21764 +
           (C7604 + C7605 - C7606 - C7607 + C7608 + C7609 - C7610 - C7611) *
               C48010 * C21765 +
           (C23802 + C23803 - C23804 - C23805 + C23806 + C23807 - C23808 -
            C23809) *
               C48010 * C21766) *
              C3298 +
          ((C550 * C2534 -
            ((C113 * C496 + C48250 * C515) * C48392 +
             (C113 * C486 + C48250 * C497) * C2533) +
            C551 * C48385 - C552 * C2535 - C553 * C48372 + C554 * C2536 +
            C555 * C48351) *
               C48010 * C21764 +
           (C968 * C2534 - (C5596 * C48392 + C5597 * C2533) + C969 * C48385 -
            C970 * C2535 - C971 * C48372 + C972 * C2536 + C973 * C48351) *
               C48010 * C21765 +
           (C1612 * C2534 - (C6075 * C48392 + C6074 * C2533) + C1613 * C48385 -
            C1614 * C2535 - C1615 * C48372 +
            (C113 * C1599 + C48250 * C1600) * C2536 +
            (C113 * C1601 + C48250 * C1602) * C48351) *
               C48010 * C21766) *
              C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C2641 +
             (C113 * C127 + C48250 * C140) * C2635 - C168 * C2642 -
             C169 * C47993) *
                C48010 * C21764 +
            (C7750 + C7751 - C7752 - C7753) * C48010 * C21765 +
            C23918 * C21766) *
               C3298 +
           ((C550 * C2642 -
             ((C113 * C496 + C48250 * C515) * C2635 +
              (C113 * C486 + C48250 * C497) * C2641) +
             C551 * C47993) *
                C48010 * C21764 +
            (C7968 - (C7969 + C7970) + C7971) * C48010 * C21765 +
            C24497 * C21766) *
               C48134) *
              C48386 +
          (((C7752 - (C7751 + C7750) + C7753) * C48010 * C21764 +
            (C7758 - (C7759 + C7760) + C7761) * C48010 * C21765 +
            C23919 * C21766) *
               C3298 +
           ((C7970 + C7969 - C7968 - C7971) * C48010 * C21764 +
            (C8554 + C8555 - C8556 - C8557) * C48010 * C21765 +
            (C24491 + C24492 - C24493 - C24494) * C48010 * C21766) *
               C48134) *
              C48374 +
          ((C23918 * C21764 +
            (C7766 + C7767 - C7768 - C7769) * C48010 * C21765 +
            (C23910 + C23911 - C23912 - C23913) * C48010 * C21766) *
               C3298 +
           (C24497 * C21764 +
            (C24493 - (C24492 + C24491) + C24494) * C48010 * C21765 +
            ((C113 * C6588 + C48250 * C6591) * C2642 -
             (C23056 * C2635 + C23057 * C2641) +
             (C113 * C6592 + C48250 * C6594) * C47993) *
                C48010 * C21766) *
               C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C665 +
            (C113 * C127 + C48250 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48351) *
               C48010 * C21764 +
           (C5242 + C5243 - C5244 - C5245 + C5246 + C5247 - C5248 - C5249) *
               C48010 * C21765 +
           (C22098 + C22099 - C22100 - C22101 + C22102 + C22103 - C22104 -
            C22105) *
               C48010 * C21766) *
              C48047 * C48315 +
          ((C5244 - (C5243 + C5242) + C5245 - C5246 - C5247 + C5248 + C5249) *
               C48010 * C21764 +
           (C22100 - (C22099 + C22098) + C22101 - C22102 - C22103 + C22104 +
            C22105) *
               C48010 * C21765 +
           (C1450 * C666 - (C5883 * C659 + C5882 * C665) + C1451 * C660 -
            C1452 * C667 - C1453 * C661 +
            (C113 * C1437 + C48250 * C1438) * C668 +
            (C113 * C1439 + C48250 * C1440) * C48351) *
               C48010 * C21766) *
              C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C47001 +
            (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
            C169 * C47993) *
               C48010 * C21764 +
           (C6218 + C6219 - C6220 - C6221) * C48010 * C21765 +
           C22792 * C21766) *
              C48047 * C1431 +
          ((C6220 - (C6219 + C6218) + C6221) * C48010 * C21764 +
           (C6226 - (C6227 + C6228) + C6229) * C48010 * C21765 +
           C22793 * C21766) *
              C48047 * C1432 +
          (C22792 * C21764 + (C6234 + C6235 - C6236 - C6237) * C48010 * C21765 +
           (C22784 + C22785 - C22786 - C22787) * C48010 * C21766) *
              C48047 * C1433 +
          (C22793 * C21764 +
           (C22786 - (C22785 + C22784) + C22787) * C48010 * C21765 +
           ((C113 * C5852 + C48250 * C5855) * C46982 -
            (C22554 * C48298 + C22555 * C47001) +
            (C113 * C5856 + C48250 * C5858) * C47993) *
               C48010 * C21766) *
              C48047 * C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C293 +
             (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
             C170 * C295 + C171 * C48339) *
                C48010 * C21764 +
            (C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C48010 * C21765 +
            C21889 * C21766) *
               C48316 +
           ((C550 * C294 -
             ((C113 * C496 + C48250 * C515) * C287 +
              (C113 * C486 + C48250 * C497) * C293) +
             C551 * C288 - C552 * C295 - C553 * C48339) *
                C48010 * C21764 +
            (C5582 - (C5598 + C5599) + C5587 - C5588 - C5589) * C48010 *
                C21765 +
            (C22350 - (C22351 + C22352) + C22353 - C22354 - C22355) * C48010 *
                C21766) *
               C48134) *
              C48315 +
          (((C4934 - (C4963 + C4962) + C4935 - C4936 - C4937) * C48010 *
                C21764 +
            (C4944 - (C4964 + C4965) + C4949 - C4950 - C4951) * C48010 *
                C21765 +
            (C21879 - (C21880 + C21881) + C21882 - C21883 - C21884) * C48010 *
                C21766) *
               C48316 +
           ((C5599 + C5598 - C5582 - C5587 + C5588 + C5589) * C48010 * C21764 +
            (C22352 + C22351 - C22350 - C22353 + C22354 + C22355) * C48010 *
                C21765 +
            (C6603 * C293 + C6602 * C287 - C6456 * C294 - C6457 * C288 +
             (C113 * C1715 + C48250 * C1720) * C295 +
             (C113 * C1721 + C48250 * C1724) * C48339) *
                C48010 * C21766) *
               C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1160 +
             (C113 * C127 + C48250 * C140) * C47983) *
                C48010 * C21764 +
            (C5860 + C5861) * C48010 * C21765 + C22551 * C21766) *
               C48316 -
           (C22678 * C21766 + (C6050 + C6051) * C48010 * C21765 +
            ((C113 * C496 + C48250 * C515) * C47983 +
             (C113 * C486 + C48250 * C497) * C1160) *
                C48010 * C21764) *
               C48134) *
              C1431 +
          (((C6051 + C6050) * C48010 * C21764 +
            (C6082 + C6083) * C48010 * C21765 + C23055 * C21766) *
               C48134 -
           (C22552 * C21766 + (C5866 + C5867) * C48010 * C21765 +
            (C5861 + C5860) * C48010 * C21764) *
               C48316) *
              C1432 +
          ((C22551 * C21764 + (C5888 + C5889) * C48010 * C21765 +
            C22553 * C21766) *
               C48316 -
           ((C23058 + C23059) * C48010 * C21766 +
            (C6604 + C6605) * C48010 * C21765 + C22678 * C21764) *
               C48134) *
              C1433 +
          ((C23055 * C21764 + (C23059 + C23058) * C48010 * C21765 +
            ((C113 * C23045 + C48250 * C23046) * C1160 +
             (C113 * C23047 + C48250 * C23048) * C47983) *
                C48010 * C21766) *
               C48134 -
           ((C22556 + C22557) * C48010 * C21766 +
            (C5892 + C5893) * C48010 * C21765 + C22552 * C21764) *
               C48316) *
              C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C293 +
            (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C48339) *
               C48010 * C21764 +
           (C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C48010 * C21765 +
           C21889 * C21766) *
              C48047 * C48386 +
          ((C4934 - (C4963 + C4962) + C4935 - C4936 - C4937) * C48010 * C21764 +
           (C4944 - (C4964 + C4965) + C4949 - C4950 - C4951) * C48010 * C21765 +
           (C21879 - (C21880 + C21881) + C21882 - C21883 - C21884) * C48010 *
               C21766) *
              C48047 * C48374 +
          (C21889 * C21764 +
           (C21881 + C21880 - C21879 - C21882 + C21883 + C21884) * C48010 *
               C21765 +
           (C5887 * C293 + C5886 * C287 - C5885 * C294 - C5884 * C288 +
            (C113 * C1166 + C48250 * C1177) * C295 +
            (C113 * C1178 + C48250 * C1184) * C48339) *
               C48010 * C21766) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C48250 * C126) * C114 +
           (C113 * C127 + C48250 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C48010 * C21764 +
          (C4958 * C114 + C4959 * C102 - C361 * C115 - C362 * C103 +
           C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 + C678 * C118 +
           C679 * C106) *
              C48010 * C21765 +
          (C4961 * C114 + C4960 * C102 - C367 * C115 - C368 * C103 +
           C369 * C116 + C370 * C104 - C371 * C117 - C372 * C105 +
           (C113 * C305 + C48250 * C324) * C118 +
           (C113 * C325 + C48250 * C335) * C106) *
              C48010 * C21766) *
         C48047 * C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C293 +
            (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C48339) *
               C48010 * C21764 +
           (C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C48010 * C21765 +
           C21889 * C21766) *
              C48387 +
          ((C550 * C294 -
            ((C113 * C496 + C48250 * C515) * C287 +
             (C113 * C486 + C48250 * C497) * C293) +
            C551 * C288 - C552 * C295 - C553 * C48339) *
               C48010 * C21764 +
           (C5582 - (C5598 + C5599) + C5587 - C5588 - C5589) * C48010 * C21765 +
           (C1612 * C294 - (C6075 * C287 + C6074 * C293) + C1613 * C288 -
            C1614 * C295 - C1615 * C48339) *
               C48010 * C21766) *
              C48376 +
          (((C113 * C490 + C48250 * C505) * C293 +
            (C113 * C506 + C48250 * C520) * C287 - C556 * C294 - C557 * C288 +
            C558 * C295 + C559 * C48339) *
               C48010 * C21764 +
           (C6072 * C293 + C6073 * C287 - C2198 * C294 - C2199 * C288 +
            C2200 * C295 + C2201 * C48339) *
               C48010 * C21765 +
           (C6079 * C293 + C6078 * C287 - C6077 * C294 - C6076 * C288 +
            (C113 * C1303 + C48250 * C1320) * C295 +
            (C113 * C1321 + C48250 * C1330) * C48339) *
               C48010 * C21766) *
              C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C1089 +
            (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
            C169 * C48370 + C170 * C1091 + C171 * C48339) *
               C48010 * C21764 +
           (C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C48010 * C21765 +
           C22477 * C21766) *
              C48047 * C1086 +
          ((C5748 - (C5747 + C5746) + C5749 - C5750 - C5751) * C48010 * C21764 +
           (C5758 - (C5759 + C5760) + C5761 - C5762 - C5763) * C48010 * C21765 +
           (C22467 - (C22468 + C22469) + C22470 - C22471 - C22472) * C48010 *
               C21766) *
              C48047 * C1087 +
          (C22477 * C21764 +
           (C22469 + C22468 - C22467 - C22470 + C22471 + C22472) * C48010 *
               C21765 +
           (C5887 * C1089 + C5886 * C48383 - C5885 * C1090 - C5884 * C48370 +
            (C113 * C1166 + C48250 * C1177) * C1091 +
            (C113 * C1178 + C48250 * C1184) * C48339) *
               C48010 * C21766) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C1160 +
            (C113 * C127 + C48250 * C140) * C47983) *
               C48010 * C21764 +
           (C5860 + C5861) * C48010 * C21765 + C22551 * C21766) *
              C48047 * C1155 -
          (C22552 * C21766 + (C5866 + C5867) * C48010 * C21765 +
           (C5861 + C5860) * C48010 * C21764) *
              C48047 * C1156 +
          (C22551 * C21764 + (C5888 + C5889) * C48010 * C21765 +
           C22553 * C21766) *
              C48047 * C1157 -
          ((C22556 + C22557) * C48010 * C21766 +
           (C5892 + C5893) * C48010 * C21765 + C22552 * C21764) *
              C48047 * C1158 +
          (C22553 * C21764 + (C22557 + C22556) * C48010 * C21765 +
           ((C113 * C22539 + C48250 * C22540) * C1160 +
            (C113 * C22541 + C48250 * C22542) * C47983) *
               C48010 * C21766) *
              C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C1160 +
             (C113 * C127 + C48250 * C140) * C47983) *
                C48010 * C21764 +
            (C5860 + C5861) * C48010 * C21765 + C22551 * C21766) *
               C48387 -
           (C22678 * C21766 + (C6050 + C6051) * C48010 * C21765 +
            ((C113 * C496 + C48250 * C515) * C47983 +
             (C113 * C486 + C48250 * C497) * C1160) *
                C48010 * C21764) *
               C48376 +
           (((C113 * C490 + C48250 * C505) * C1160 +
             (C113 * C506 + C48250 * C520) * C47983) *
                C48010 * C21764 +
            (C6080 + C6081) * C48010 * C21765 + C22679 * C21766) *
               C48350) *
              C1086 +
          (((C6051 + C6050) * C48010 * C21764 +
            (C6082 + C6083) * C48010 * C21765 +
            (C6605 + C6604) * C48010 * C21766) *
               C48376 -
           (C22552 * C21766 + (C5866 + C5867) * C48010 * C21765 +
            (C5861 + C5860) * C48010 * C21764) *
               C48387 -
           ((C22682 + C22683) * C48010 * C21766 +
            (C6086 + C6087) * C48010 * C21765 +
            (C6081 + C6080) * C48010 * C21764) *
               C48350) *
              C1087 +
          ((C22551 * C21764 + (C5888 + C5889) * C48010 * C21765 +
            C22553 * C21766) *
               C48387 -
           (((C113 * C6590 + C48250 * C6593) * C47983 +
             (C113 * C6587 + C48250 * C6589) * C1160) *
                C48010 * C21766 +
            (C6604 + C6605) * C48010 * C21765 + C22678 * C21764) *
               C48376 +
           (C22679 * C21764 + (C22683 + C22682) * C48010 * C21765 +
            ((C113 * C22667 + C48250 * C22668) * C1160 +
             (C113 * C22669 + C48250 * C22670) * C47983) *
                C48010 * C21766) *
               C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C665 +
            (C113 * C127 + C48250 * C140) * C659 - C168 * C666 - C169 * C660 +
            C170 * C667 + C171 * C661 - C172 * C668 - C173 * C48351) *
               C48010 * C21764 +
           (C5242 + C5243 - C5244 - C5245 + C5246 + C5247 - C5248 - C5249) *
               C48010 * C21765 +
           (C22098 + C22099 - C22100 - C22101 + C22102 + C22103 - C22104 -
            C22105) *
               C48010 * C21766) *
              C48316 +
          ((C550 * C666 -
            ((C113 * C496 + C48250 * C515) * C659 +
             (C113 * C486 + C48250 * C497) * C665) +
            C551 * C660 - C552 * C667 - C553 * C661 + C554 * C668 +
            C555 * C48351) *
               C48010 * C21764 +
           (C968 * C666 - (C5596 * C659 + C5597 * C665) + C969 * C660 -
            C970 * C667 - C971 * C661 + C972 * C668 + C973 * C48351) *
               C48010 * C21765 +
           (C1612 * C666 - (C6075 * C659 + C6074 * C665) + C1613 * C660 -
            C1614 * C667 - C1615 * C661 +
            (C113 * C1599 + C48250 * C1600) * C668 +
            (C113 * C1601 + C48250 * C1602) * C48351) *
               C48010 * C21766) *
              C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C119 + C48250 * C126) * C47001 +
             (C113 * C127 + C48250 * C140) * C48298 - C168 * C46982 -
             C169 * C47993) *
                C48010 * C21764 +
            (C6218 + C6219 - C6220 - C6221) * C48010 * C21765 +
            C22792 * C21766) *
               C48316 +
           ((C550 * C46982 -
             ((C113 * C496 + C48250 * C515) * C48298 +
              (C113 * C486 + C48250 * C497) * C47001) +
             C551 * C47993) *
                C48010 * C21764 +
            (C6436 - (C6437 + C6438) + C6439) * C48010 * C21765 +
            C22947 * C21766) *
               C48134) *
              C1086 +
          (((C6220 - (C6219 + C6218) + C6221) * C48010 * C21764 +
            (C6226 - (C6227 + C6228) + C6229) * C48010 * C21765 +
            C22793 * C21766) *
               C48316 +
           ((C6438 + C6437 - C6436 - C6439) * C48010 * C21764 +
            (C6444 + C6445 - C6446 - C6447) * C48010 * C21765 +
            (C22941 + C22942 - C22943 - C22944) * C48010 * C21766) *
               C48134) *
              C1087 +
          ((C22792 * C21764 +
            (C6234 + C6235 - C6236 - C6237) * C48010 * C21765 +
            (C22784 + C22785 - C22786 - C22787) * C48010 * C21766) *
               C48316 +
           (C22947 * C21764 +
            (C22943 - (C22942 + C22941) + C22944) * C48010 * C21765 +
            ((C113 * C6588 + C48250 * C6591) * C46982 -
             ((C113 * C6590 + C48250 * C6593) * C48298 +
              (C113 * C6587 + C48250 * C6589) * C47001) +
             (C113 * C6592 + C48250 * C6594) * C47993) *
                C48010 * C21766) *
               C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C119 + C48250 * C126) * C114 +
           (C113 * C127 + C48250 * C140) * C102 - C168 * C115 - C169 * C103 +
           C170 * C116 + C171 * C104 - C172 * C117 - C173 * C105 + C174 * C118 +
           C175 * C106) *
              C48010 * C21764 +
          (C4958 * C114 + C4959 * C102 - C361 * C115 - C362 * C103 +
           C363 * C116 + C364 * C104 - C365 * C117 - C366 * C105 + C678 * C118 +
           C679 * C106) *
              C48010 * C21765 +
          (C4961 * C114 + C4960 * C102 - C367 * C115 - C368 * C103 +
           C369 * C116 + C370 * C104 - C371 * C117 - C372 * C105 +
           (C113 * C305 + C48250 * C324) * C118 +
           (C113 * C325 + C48250 * C335) * C106) *
              C48010 * C21766) *
         C48047 * C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C293 +
            (C113 * C127 + C48250 * C140) * C287 - C168 * C294 - C169 * C288 +
            C170 * C295 + C171 * C48339) *
               C48010 * C21764 +
           (C4962 + C4963 - C4934 - C4935 + C4936 + C4937) * C48010 * C21765 +
           C21889 * C21766) *
              C48047 * C48386 +
          ((C4934 - (C4963 + C4962) + C4935 - C4936 - C4937) * C48010 * C21764 +
           (C4944 - (C4964 + C4965) + C4949 - C4950 - C4951) * C48010 * C21765 +
           (C21879 - (C21880 + C21881) + C21882 - C21883 - C21884) * C48010 *
               C21766) *
              C48047 * C48374 +
          (C21889 * C21764 +
           (C21881 + C21880 - C21879 - C21882 + C21883 + C21884) * C48010 *
               C21765 +
           (C5887 * C293 + C5886 * C287 - C5885 * C294 - C5884 * C288 +
            (C113 * C1166 + C48250 * C1177) * C295 +
            (C113 * C1178 + C48250 * C1184) * C48339) *
               C48010 * C21766) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C1089 +
            (C113 * C127 + C48250 * C140) * C48383 - C168 * C1090 -
            C169 * C48370 + C170 * C1091 + C171 * C48339) *
               C48010 * C21764 +
           (C5746 + C5747 - C5748 - C5749 + C5750 + C5751) * C48010 * C21765 +
           C22477 * C21766) *
              C48047 * C1086 +
          ((C5748 - (C5747 + C5746) + C5749 - C5750 - C5751) * C48010 * C21764 +
           (C5758 - (C5759 + C5760) + C5761 - C5762 - C5763) * C48010 * C21765 +
           (C22467 - (C22468 + C22469) + C22470 - C22471 - C22472) * C48010 *
               C21766) *
              C48047 * C1087 +
          (C22477 * C21764 +
           (C22469 + C22468 - C22467 - C22470 + C22471 + C22472) * C48010 *
               C21765 +
           (C5887 * C1089 + C5886 * C48383 - C5885 * C1090 - C5884 * C48370 +
            (C113 * C1166 + C48250 * C1177) * C1091 +
            (C113 * C1178 + C48250 * C1184) * C48339) *
               C48010 * C21766) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C119 + C48250 * C126) * C1160 +
            (C113 * C127 + C48250 * C140) * C47983) *
               C48010 * C21764 +
           (C5860 + C5861) * C48010 * C21765 + C22551 * C21766) *
              C48047 * C1155 -
          (C22552 * C21766 + (C5866 + C5867) * C48010 * C21765 +
           (C5861 + C5860) * C48010 * C21764) *
              C48047 * C1156 +
          (C22551 * C21764 + (C5888 + C5889) * C48010 * C21765 +
           C22553 * C21766) *
              C48047 * C1157 -
          ((C22556 + C22557) * C48010 * C21766 +
           (C5892 + C5893) * C48010 * C21765 + C22552 * C21764) *
              C48047 * C1158 +
          (C22553 * C21764 + (C22557 + C22556) * C48010 * C21765 +
           ((C113 * C22539 + C48250 * C22540) * C1160 +
            (C113 * C22541 + C48250 * C22542) * C47983) *
               C48010 * C21766) *
              C48047 * C1159)) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C47011 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C47988 -
            (C10668 + C10669) * C47007 - (C10670 + C10671) * C47996 +
            (C10672 + C10673) * C47017 + (C10674 + C10675) * C2901) *
               C48010 * C16333 +
           ((C26236 + C26237) * C47011 + (C26238 + C26239) * C47988 -
            (C10863 + C10862) * C47007 - (C10865 + C10864) * C47996 +
            (C10867 + C10866) * C47017 + (C10869 + C10868) * C2901) *
               C48010 * C48365) *
              C48047 * C48090 +
          (((C10862 + C10863) * C47007 -
            ((C26239 + C26238) * C47988 + (C26237 + C26236) * C47011) +
            (C10864 + C10865) * C47996 - (C10866 + C10867) * C47017 -
            (C10868 + C10869) * C2901) *
               C48010 * C16333 +
           ((C10871 + C10870) * C47007 -
            ((C26240 + C26241) * C47988 + (C26242 + C26243) * C47011) +
            (C10873 + C10872) * C47996 - (C10875 + C10874) * C47017 -
            (C10877 + C10876) * C2901) *
               C48010 * C48365) *
              C48047 * C48097 +
          (((C26243 + C26242) * C47011 + (C26241 + C26240) * C47988 -
            (C10870 + C10871) * C47007 - (C10872 + C10873) * C47996 +
            (C10874 + C10875) * C47017 + (C10876 + C10877) * C2901) *
               C48010 * C16333 +
           ((C27100 + C27101) * C47011 + (C27102 + C27103) * C47988 -
            (C12087 + C12086) * C47007 - (C12089 + C12088) * C47996 +
            (C10633 * C1161 + C10631 * C1168 + C10634 * C1715 +
             C48367 * C1720) *
                C47017 +
            (C10633 * C1167 + C10631 * C1179 + C10634 * C1721 +
             C48367 * C1724) *
                C2901) *
               C48010 * C48365) *
              C48047 * C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C2641 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C2635 -
             (C10668 + C10669) * C2642 - (C10670 + C10671) * C47993) *
                C48010 * C16333 +
            ((C26236 + C26237) * C2641 + (C26238 + C26239) * C2635 -
             (C10863 + C10862) * C2642 - (C10865 + C10864) * C47993) *
                C48010 * C48365) *
               C48316 +
           (((C11056 + C11057) * C2642 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C2635 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C2641) +
             (C11058 + C11059) * C47993) *
                C48010 * C16333 +
            ((C11567 + C11566) * C2642 -
             ((C26852 + C26853) * C2635 + (C26854 + C26855) * C2641) +
             (C11569 + C11568) * C47993) *
                C48010 * C48365) *
               C48134) *
              C48090 +
          ((((C10862 + C10863) * C2642 -
             ((C26239 + C26238) * C2635 + (C26237 + C26236) * C2641) +
             (C10864 + C10865) * C47993) *
                C48010 * C16333 +
            ((C10871 + C10870) * C2642 -
             ((C26240 + C26241) * C2635 + (C26242 + C26243) * C2641) +
             (C10873 + C10872) * C47993) *
                C48010 * C48365) *
               C48316 +
           (((C26855 + C26854) * C2641 + (C26853 + C26852) * C2635 -
             (C11566 + C11567) * C2642 - (C11568 + C11569) * C47993) *
                C48010 * C16333 +
            ((C27282 + C27283) * C2641 + (C27284 + C27285) * C2635 -
             (C12293 + C12292) * C2642 - (C12295 + C12294) * C47993) *
                C48010 * C48365) *
               C48134) *
              C48097 +
          ((((C26243 + C26242) * C2641 + (C26241 + C26240) * C2635 -
             (C10870 + C10871) * C2642 - (C10872 + C10873) * C47993) *
                C48010 * C16333 +
            ((C27100 + C27101) * C2641 + (C27102 + C27103) * C2635 -
             (C12087 + C12086) * C2642 - (C12089 + C12088) * C47993) *
                C48010 * C48365) *
               C48316 +
           (((C12292 + C12293) * C2642 -
             ((C27285 + C27284) * C2635 + (C27283 + C27282) * C2641) +
             (C12294 + C12295) * C47993) *
                C48010 * C16333 +
            ((C10633 * C1714 + C10631 * C1718 + C10634 * C6040 +
              C48367 * C6043) *
                 C2642 -
             ((C27752 + C27753) * C2635 + (C27754 + C27755) * C2641) +
             (C10633 * C1719 + C10631 * C1723 + C10634 * C6044 +
              C48367 * C6046) *
                 C47993) *
                C48010 * C48365) *
               C48134) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C2641 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C2635 -
            (C10668 + C10669) * C2642 - (C10670 + C10671) * C47993) *
               C48010 * C16333 +
           ((C26236 + C26237) * C2641 + (C26238 + C26239) * C2635 -
            (C10863 + C10862) * C2642 - (C10865 + C10864) * C47993) *
               C48010 * C48365) *
              C48047 * C48393 +
          (((C10862 + C10863) * C2642 -
            ((C26239 + C26238) * C2635 + (C26237 + C26236) * C2641) +
            (C10864 + C10865) * C47993) *
               C48010 * C16333 +
           ((C10871 + C10870) * C2642 -
            ((C26240 + C26241) * C2635 + (C26242 + C26243) * C2641) +
            (C10873 + C10872) * C47993) *
               C48010 * C48365) *
              C48047 * C48389 +
          (((C26243 + C26242) * C2641 + (C26241 + C26240) * C2635 -
            (C10870 + C10871) * C2642 - (C10872 + C10873) * C47993) *
               C48010 * C16333 +
           ((C27100 + C27101) * C2641 + (C27102 + C27103) * C2635 -
            (C12087 + C12086) * C2642 - (C12089 + C12088) * C47993) *
               C48010 * C48365) *
              C48047 * C48379 +
          (((C12086 + C12087) * C2642 -
            ((C27103 + C27102) * C2635 + (C27101 + C27100) * C2641) +
            (C12088 + C12089) * C47993) *
               C48010 * C16333 +
           ((C10633 * C1165 + C10631 * C1175 + C10634 * C6588 +
             C48367 * C6591) *
                C2642 -
            ((C27104 + C27105) * C2635 + (C27106 + C27107) * C2641) +
            (C10633 * C1176 + C10631 * C1183 + C10634 * C6592 +
             C48367 * C6594) *
                C47993) *
               C48010 * C48365) *
              C48047 * C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C2533 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48392 -
            (C10668 + C10669) * C2534 - (C10670 + C10671) * C48385 +
            (C10672 + C10673) * C2535 + (C10674 + C10675) * C48372 -
            (C10676 + C10677) * C2536 - (C10678 + C10679) * C48351) *
               C48010 * C16333 +
           ((C26236 + C26237) * C2533 + (C26238 + C26239) * C48392 -
            (C10863 + C10862) * C2534 - (C10865 + C10864) * C48385 +
            (C10867 + C10866) * C2535 + (C10869 + C10868) * C48372 -
            (C11211 + C11210) * C2536 - (C11213 + C11212) * C48351) *
               C48010 * C48365) *
              C48047 * C2531 +
          (((C10862 + C10863) * C2534 -
            ((C26239 + C26238) * C48392 + (C26237 + C26236) * C2533) +
            (C10864 + C10865) * C48385 - (C10866 + C10867) * C2535 -
            (C10868 + C10869) * C48372 + (C11210 + C11211) * C2536 +
            (C11212 + C11213) * C48351) *
               C48010 * C16333 +
           ((C10871 + C10870) * C2534 -
            ((C26240 + C26241) * C48392 + (C26242 + C26243) * C2533) +
            (C10873 + C10872) * C48385 - (C10875 + C10874) * C2535 -
            (C10877 + C10876) * C48372 +
            (C10633 * C304 + C10631 * C322 + C10634 * C1599 + C48367 * C1600) *
                C2536 +
            (C10633 * C323 + C10631 * C334 + C10634 * C1601 + C48367 * C1602) *
                C48351) *
               C48010 * C48365) *
              C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C2641 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C2635 -
             (C10668 + C10669) * C2642 - (C10670 + C10671) * C47993) *
                C48010 * C16333 +
            ((C26236 + C26237) * C2641 + (C26238 + C26239) * C2635 -
             (C10863 + C10862) * C2642 - (C10865 + C10864) * C47993) *
                C48010 * C48365) *
               C48387 +
           (((C11056 + C11057) * C2642 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C2635 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C2641) +
             (C11058 + C11059) * C47993) *
                C48010 * C16333 +
            ((C11567 + C11566) * C2642 -
             ((C26852 + C26853) * C2635 + (C26854 + C26855) * C2641) +
             (C11569 + C11568) * C47993) *
                C48010 * C48365) *
               C48376 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C2641 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C2635 -
             (C11064 + C11065) * C2642 - (C11066 + C11067) * C47993) *
                C48010 * C16333 +
            ((C27278 + C27279) * C2641 + (C27280 + C27281) * C2635 -
             (C13011 + C13010) * C2642 - (C13013 + C13012) * C47993) *
                C48010 * C48365) *
               C48350) *
              C2531 +
          ((((C10862 + C10863) * C2642 -
             ((C26239 + C26238) * C2635 + (C26237 + C26236) * C2641) +
             (C10864 + C10865) * C47993) *
                C48010 * C16333 +
            ((C10871 + C10870) * C2642 -
             ((C26240 + C26241) * C2635 + (C26242 + C26243) * C2641) +
             (C10873 + C10872) * C47993) *
                C48010 * C48365) *
               C48387 +
           (((C26855 + C26854) * C2641 + (C26853 + C26852) * C2635 -
             (C11566 + C11567) * C2642 - (C11568 + C11569) * C47993) *
                C48010 * C16333 +
            ((C27282 + C27283) * C2641 + (C27284 + C27285) * C2635 -
             (C12293 + C12292) * C2642 - (C12295 + C12294) * C47993) *
                C48010 * C48365) *
               C48376 +
           (((C13010 + C13011) * C2642 -
             ((C27281 + C27280) * C2635 + (C27279 + C27278) * C2641) +
             (C13012 + C13013) * C47993) *
                C48010 * C16333 +
            ((C10633 * C1302 + C10631 * C1318 + C10634 * C7456 +
              C48367 * C7459) *
                 C2642 -
             ((C27286 + C27287) * C2635 + (C27288 + C27289) * C2641) +
             (C10633 * C1319 + C10631 * C1329 + C10634 * C7460 +
              C48367 * C7462) *
                 C47993) *
                C48010 * C48365) *
               C48350) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C47011 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47988 -
             (C10668 + C10669) * C47007 - (C10670 + C10671) * C47996 +
             (C10672 + C10673) * C47017 + (C10674 + C10675) * C2901) *
                C48010 * C16333 +
            ((C26236 + C26237) * C47011 + (C26238 + C26239) * C47988 -
             (C10863 + C10862) * C47007 - (C10865 + C10864) * C47996 +
             (C10867 + C10866) * C47017 + (C10869 + C10868) * C2901) *
                C48010 * C48365) *
               C48316 +
           (((C11056 + C11057) * C47007 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C47988 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C47011) +
             (C11058 + C11059) * C47996 - (C11060 + C11061) * C47017 -
             (C11062 + C11063) * C2901) *
                C48010 * C16333 +
            ((C11567 + C11566) * C47007 -
             ((C26852 + C26853) * C47988 + (C26854 + C26855) * C47011) +
             (C11569 + C11568) * C47996 - (C11571 + C11570) * C47017 -
             (C11573 + C11572) * C2901) *
                C48010 * C48365) *
               C48134) *
              C2531 +
          ((((C10862 + C10863) * C47007 -
             ((C26239 + C26238) * C47988 + (C26237 + C26236) * C47011) +
             (C10864 + C10865) * C47996 - (C10866 + C10867) * C47017 -
             (C10868 + C10869) * C2901) *
                C48010 * C16333 +
            ((C10871 + C10870) * C47007 -
             ((C26240 + C26241) * C47988 + (C26242 + C26243) * C47011) +
             (C10873 + C10872) * C47996 - (C10875 + C10874) * C47017 -
             (C10877 + C10876) * C2901) *
                C48010 * C48365) *
               C48316 +
           (((C26855 + C26854) * C47011 + (C26853 + C26852) * C47988 -
             (C11566 + C11567) * C47007 - (C11568 + C11569) * C47996 +
             (C11570 + C11571) * C47017 + (C11572 + C11573) * C2901) *
                C48010 * C16333 +
            ((C27282 + C27283) * C47011 + (C27284 + C27285) * C47988 -
             (C12293 + C12292) * C47007 - (C12295 + C12294) * C47996 +
             (C10633 * C1298 + C10631 * C1311 + C10634 * C1303 +
              C48367 * C1320) *
                 C47017 +
             (C10633 * C1310 + C10631 * C1325 + C10634 * C1321 +
              C48367 * C1330) *
                 C2901) *
                C48010 * C48365) *
               C48134) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C2533 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48392 -
            (C10668 + C10669) * C2534 - (C10670 + C10671) * C48385 +
            (C10672 + C10673) * C2535 + (C10674 + C10675) * C48372 -
            (C10676 + C10677) * C2536 - (C10678 + C10679) * C48351) *
               C48010 * C16333 +
           ((C26236 + C26237) * C2533 + (C26238 + C26239) * C48392 -
            (C10863 + C10862) * C2534 - (C10865 + C10864) * C48385 +
            (C10867 + C10866) * C2535 + (C10869 + C10868) * C48372 -
            (C11211 + C11210) * C2536 - (C11213 + C11212) * C48351) *
               C48010 * C48365) *
              C48047 * C2531 +
          (((C10862 + C10863) * C2534 -
            ((C26239 + C26238) * C48392 + (C26237 + C26236) * C2533) +
            (C10864 + C10865) * C48385 - (C10866 + C10867) * C2535 -
            (C10868 + C10869) * C48372 + (C11210 + C11211) * C2536 +
            (C11212 + C11213) * C48351) *
               C48010 * C16333 +
           ((C10871 + C10870) * C2534 -
            ((C26240 + C26241) * C48392 + (C26242 + C26243) * C2533) +
            (C10873 + C10872) * C48385 - (C10875 + C10874) * C2535 -
            (C10877 + C10876) * C48372 +
            (C10633 * C304 + C10631 * C322 + C10634 * C1599 + C48367 * C1600) *
                C2536 +
            (C10633 * C323 + C10631 * C334 + C10634 * C1601 + C48367 * C1602) *
                C48351) *
               C48010 * C48365) *
              C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C2641 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C2635 -
            (C10668 + C10669) * C2642 - (C10670 + C10671) * C47993) *
               C48010 * C16333 +
           ((C26236 + C26237) * C2641 + (C26238 + C26239) * C2635 -
            (C10863 + C10862) * C2642 - (C10865 + C10864) * C47993) *
               C48010 * C48365) *
              C48047 * C48393 +
          (((C10862 + C10863) * C2642 -
            ((C26239 + C26238) * C2635 + (C26237 + C26236) * C2641) +
            (C10864 + C10865) * C47993) *
               C48010 * C16333 +
           ((C10871 + C10870) * C2642 -
            ((C26240 + C26241) * C2635 + (C26242 + C26243) * C2641) +
            (C10873 + C10872) * C47993) *
               C48010 * C48365) *
              C48047 * C48389 +
          (((C26243 + C26242) * C2641 + (C26241 + C26240) * C2635 -
            (C10870 + C10871) * C2642 - (C10872 + C10873) * C47993) *
               C48010 * C16333 +
           ((C27100 + C27101) * C2641 + (C27102 + C27103) * C2635 -
            (C12087 + C12086) * C2642 - (C12089 + C12088) * C47993) *
               C48010 * C48365) *
              C48047 * C48379 +
          (((C12086 + C12087) * C2642 -
            ((C27103 + C27102) * C2635 + (C27101 + C27100) * C2641) +
            (C12088 + C12089) * C47993) *
               C48010 * C16333 +
           ((C10633 * C1165 + C10631 * C1175 + C10634 * C6588 +
             C48367 * C6591) *
                C2642 -
            ((C27104 + C27105) * C2635 + (C27106 + C27107) * C2641) +
            (C10633 * C1176 + C10631 * C1183 + C10634 * C6592 +
             C48367 * C6594) *
                C47993) *
               C48010 * C48365) *
              C48047 * C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C47001 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C48298 -
             (C10668 + C10669) * C46982 - (C10670 + C10671) * C47993) *
                C48010 * C16333 +
            ((C26236 + C26237) * C47001 + (C26238 + C26239) * C48298 -
             (C10863 + C10862) * C46982 - (C10865 + C10864) * C47993) *
                C48010 * C48365) *
               C3298 +
           (((C11056 + C11057) * C46982 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C48298 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C47001) +
             (C11058 + C11059) * C47993) *
                C48010 * C16333 +
            ((C11567 + C11566) * C46982 -
             ((C26852 + C26853) * C48298 + (C26854 + C26855) * C47001) +
             (C11569 + C11568) * C47993) *
                C48010 * C48365) *
               C48134) *
              C48090 +
          ((((C10862 + C10863) * C46982 -
             ((C26239 + C26238) * C48298 + (C26237 + C26236) * C47001) +
             (C10864 + C10865) * C47993) *
                C48010 * C16333 +
            ((C10871 + C10870) * C46982 -
             ((C26240 + C26241) * C48298 + (C26242 + C26243) * C47001) +
             (C10873 + C10872) * C47993) *
                C48010 * C48365) *
               C3298 +
           (((C26855 + C26854) * C47001 + (C26853 + C26852) * C48298 -
             (C11566 + C11567) * C46982 - (C11568 + C11569) * C47993) *
                C48010 * C16333 +
            ((C27282 + C27283) * C47001 + (C27284 + C27285) * C48298 -
             (C12293 + C12292) * C46982 - (C12295 + C12294) * C47993) *
                C48010 * C48365) *
               C48134) *
              C48097 +
          ((((C26243 + C26242) * C47001 + (C26241 + C26240) * C48298 -
             (C10870 + C10871) * C46982 - (C10872 + C10873) * C47993) *
                C48010 * C16333 +
            ((C27100 + C27101) * C47001 + (C27102 + C27103) * C48298 -
             (C12087 + C12086) * C46982 - (C12089 + C12088) * C47993) *
                C48010 * C48365) *
               C3298 +
           (((C12292 + C12293) * C46982 -
             ((C27285 + C27284) * C48298 + (C27283 + C27282) * C47001) +
             (C12294 + C12295) * C47993) *
                C48010 * C16333 +
            ((C10633 * C1714 + C10631 * C1718 + C10634 * C6040 +
              C48367 * C6043) *
                 C46982 -
             ((C27752 + C27753) * C48298 + (C27754 + C27755) * C47001) +
             (C10633 * C1719 + C10631 * C1723 + C10634 * C6044 +
              C48367 * C6046) *
                 C47993) *
                C48010 * C48365) *
               C48134) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C16333 +
            ((C26236 + C26237) * C1160 + (C26238 + C26239) * C47983) * C48010 *
                C48365) *
               C48130 -
           (((C26852 + C26853) * C47983 + (C26854 + C26855) * C1160) * C48010 *
                C48365 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C48010 * C16333) *
               C48137 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C1160 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C47983) *
                C48010 * C16333 +
            ((C27278 + C27279) * C1160 + (C27280 + C27281) * C47983) * C48010 *
                C48365) *
               C3806) *
              C48090 +
          ((((C26855 + C26854) * C1160 + (C26853 + C26852) * C47983) * C48010 *
                C16333 +
            ((C27282 + C27283) * C1160 + (C27284 + C27285) * C47983) * C48010 *
                C48365) *
               C48137 -
           (((C26240 + C26241) * C47983 + (C26242 + C26243) * C1160) * C48010 *
                C48365 +
            ((C26239 + C26238) * C47983 + (C26237 + C26236) * C1160) * C48010 *
                C16333) *
               C48130 -
           (((C27286 + C27287) * C47983 + (C27288 + C27289) * C1160) * C48010 *
                C48365 +
            ((C27281 + C27280) * C47983 + (C27279 + C27278) * C1160) * C48010 *
                C16333) *
               C3806) *
              C48097 +
          ((((C26243 + C26242) * C1160 + (C26241 + C26240) * C47983) * C48010 *
                C16333 +
            ((C27100 + C27101) * C1160 + (C27102 + C27103) * C47983) * C48010 *
                C48365) *
               C48130 -
           (((C27752 + C27753) * C47983 + (C27754 + C27755) * C1160) * C48010 *
                C48365 +
            ((C27285 + C27284) * C47983 + (C27283 + C27282) * C1160) * C48010 *
                C16333) *
               C48137 +
           (((C27289 + C27288) * C1160 + (C27287 + C27286) * C47983) * C48010 *
                C16333 +
            ((C10633 * C6039 + C10631 * C6041 + C10634 * C23691 +
              C48367 * C23692) *
                 C1160 +
             (C10633 * C6042 + C10631 * C6045 + C10634 * C23693 +
              C48367 * C23694) *
                 C47983) *
                C48010 * C48365) *
               C3806) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C16333 +
            ((C26236 + C26237) * C1160 + (C26238 + C26239) * C47983) * C48010 *
                C48365) *
               C3298 -
           (((C26852 + C26853) * C47983 + (C26854 + C26855) * C1160) * C48010 *
                C48365 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C48010 * C16333) *
               C48134) *
              C48393 +
          ((((C26855 + C26854) * C1160 + (C26853 + C26852) * C47983) * C48010 *
                C16333 +
            ((C27282 + C27283) * C1160 + (C27284 + C27285) * C47983) * C48010 *
                C48365) *
               C48134 -
           (((C26240 + C26241) * C47983 + (C26242 + C26243) * C1160) * C48010 *
                C48365 +
            ((C26239 + C26238) * C47983 + (C26237 + C26236) * C1160) * C48010 *
                C16333) *
               C3298) *
              C48389 +
          ((((C26243 + C26242) * C1160 + (C26241 + C26240) * C47983) * C48010 *
                C16333 +
            ((C27100 + C27101) * C1160 + (C27102 + C27103) * C47983) * C48010 *
                C48365) *
               C3298 -
           (((C27752 + C27753) * C47983 + (C27754 + C27755) * C1160) * C48010 *
                C48365 +
            ((C27285 + C27284) * C47983 + (C27283 + C27282) * C1160) * C48010 *
                C16333) *
               C48134) *
              C48379 +
          ((((C27755 + C27754) * C1160 + (C27753 + C27752) * C47983) * C48010 *
                C16333 +
            ((C10633 * C6587 + C10631 * C6589 + C10634 * C22667 +
              C48367 * C22668) *
                 C1160 +
             (C10633 * C6590 + C10631 * C6593 + C10634 * C22669 +
              C48367 * C22670) *
                 C47983) *
                C48010 * C48365) *
               C48134 -
           (((C27104 + C27105) * C47983 + (C27106 + C27107) * C1160) * C48010 *
                C48365 +
            ((C27103 + C27102) * C47983 + (C27101 + C27100) * C1160) * C48010 *
                C16333) *
               C3298) *
              C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1089 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C48383 -
             (C10668 + C10669) * C1090 - (C10670 + C10671) * C48370 +
             (C10672 + C10673) * C1091 + (C10674 + C10675) * C48339) *
                C48010 * C16333 +
            ((C26236 + C26237) * C1089 + (C26238 + C26239) * C48383 -
             (C10863 + C10862) * C1090 - (C10865 + C10864) * C48370 +
             (C10867 + C10866) * C1091 + (C10869 + C10868) * C48339) *
                C48010 * C48365) *
               C3298 +
           (((C11056 + C11057) * C1090 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C48383 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C1089) +
             (C11058 + C11059) * C48370 - (C11060 + C11061) * C1091 -
             (C11062 + C11063) * C48339) *
                C48010 * C16333 +
            ((C11567 + C11566) * C1090 -
             ((C26852 + C26853) * C48383 + (C26854 + C26855) * C1089) +
             (C11569 + C11568) * C48370 - (C11571 + C11570) * C1091 -
             (C11573 + C11572) * C48339) *
                C48010 * C48365) *
               C48134) *
              C2531 +
          ((((C10862 + C10863) * C1090 -
             ((C26239 + C26238) * C48383 + (C26237 + C26236) * C1089) +
             (C10864 + C10865) * C48370 - (C10866 + C10867) * C1091 -
             (C10868 + C10869) * C48339) *
                C48010 * C16333 +
            ((C10871 + C10870) * C1090 -
             ((C26240 + C26241) * C48383 + (C26242 + C26243) * C1089) +
             (C10873 + C10872) * C48370 - (C10875 + C10874) * C1091 -
             (C10877 + C10876) * C48339) *
                C48010 * C48365) *
               C3298 +
           (((C26855 + C26854) * C1089 + (C26853 + C26852) * C48383 -
             (C11566 + C11567) * C1090 - (C11568 + C11569) * C48370 +
             (C11570 + C11571) * C1091 + (C11572 + C11573) * C48339) *
                C48010 * C16333 +
            ((C27282 + C27283) * C1089 + (C27284 + C27285) * C48383 -
             (C12293 + C12292) * C1090 - (C12295 + C12294) * C48370 +
             (C10633 * C1298 + C10631 * C1311 + C10634 * C1303 +
              C48367 * C1320) *
                 C1091 +
             (C10633 * C1310 + C10631 * C1325 + C10634 * C1321 +
              C48367 * C1330) *
                 C48339) *
                C48010 * C48365) *
               C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C16333 +
            ((C26236 + C26237) * C1160 + (C26238 + C26239) * C47983) * C48010 *
                C48365) *
               C48394 -
           (((C26852 + C26853) * C47983 + (C26854 + C26855) * C1160) * C48010 *
                C48365 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C48010 * C16333) *
               C48391 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C1160 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C47983) *
                C48010 * C16333 +
            ((C27278 + C27279) * C1160 + (C27280 + C27281) * C47983) * C48010 *
                C48365) *
               C48382 -
           (((C28596 + C28597) * C47983 + (C28598 + C28599) * C1160) * C48010 *
                C48365 +
            ((C10634 * C2028 + C48367 * C2036 + C10633 * C2025 +
              C10631 * C2035) *
                 C47983 +
             (C10634 * C2018 + C48367 * C2027 + C10633 * C2017 +
              C10631 * C2026) *
                 C1160) *
                C48010 * C16333) *
               C48363) *
              C2531 +
          ((((C26855 + C26854) * C1160 + (C26853 + C26852) * C47983) * C48010 *
                C16333 +
            ((C27282 + C27283) * C1160 + (C27284 + C27285) * C47983) * C48010 *
                C48365) *
               C48391 -
           (((C26240 + C26241) * C47983 + (C26242 + C26243) * C1160) * C48010 *
                C48365 +
            ((C26239 + C26238) * C47983 + (C26237 + C26236) * C1160) * C48010 *
                C16333) *
               C48394 -
           (((C27286 + C27287) * C47983 + (C27288 + C27289) * C1160) * C48010 *
                C48365 +
            ((C27281 + C27280) * C47983 + (C27279 + C27278) * C1160) * C48010 *
                C16333) *
               C48382 +
           (((C28599 + C28598) * C1160 + (C28597 + C28596) * C47983) * C48010 *
                C16333 +
            ((C10633 * C7455 + C10631 * C7457 + C10634 * C23341 +
              C48367 * C23342) *
                 C1160 +
             (C10633 * C7458 + C10631 * C7461 + C10634 * C23343 +
              C48367 * C23344) *
                 C47983) *
                C48010 * C48365) *
               C48363) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C47001 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C48298 -
             (C10668 + C10669) * C46982 - (C10670 + C10671) * C47993) *
                C48010 * C16333 +
            ((C26236 + C26237) * C47001 + (C26238 + C26239) * C48298 -
             (C10863 + C10862) * C46982 - (C10865 + C10864) * C47993) *
                C48010 * C48365) *
               C48130 +
           (((C11056 + C11057) * C46982 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C48298 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C47001) +
             (C11058 + C11059) * C47993) *
                C48010 * C16333 +
            ((C11567 + C11566) * C46982 -
             ((C26852 + C26853) * C48298 + (C26854 + C26855) * C47001) +
             (C11569 + C11568) * C47993) *
                C48010 * C48365) *
               C48137 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C47001 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C48298 -
             (C11064 + C11065) * C46982 - (C11066 + C11067) * C47993) *
                C48010 * C16333 +
            ((C27278 + C27279) * C47001 + (C27280 + C27281) * C48298 -
             (C13011 + C13010) * C46982 - (C13013 + C13012) * C47993) *
                C48010 * C48365) *
               C3806) *
              C2531 +
          ((((C10862 + C10863) * C46982 -
             ((C26239 + C26238) * C48298 + (C26237 + C26236) * C47001) +
             (C10864 + C10865) * C47993) *
                C48010 * C16333 +
            ((C10871 + C10870) * C46982 -
             ((C26240 + C26241) * C48298 + (C26242 + C26243) * C47001) +
             (C10873 + C10872) * C47993) *
                C48010 * C48365) *
               C48130 +
           (((C26855 + C26854) * C47001 + (C26853 + C26852) * C48298 -
             (C11566 + C11567) * C46982 - (C11568 + C11569) * C47993) *
                C48010 * C16333 +
            ((C27282 + C27283) * C47001 + (C27284 + C27285) * C48298 -
             (C12293 + C12292) * C46982 - (C12295 + C12294) * C47993) *
                C48010 * C48365) *
               C48137 +
           (((C13010 + C13011) * C46982 -
             ((C27281 + C27280) * C48298 + (C27279 + C27278) * C47001) +
             (C13012 + C13013) * C47993) *
                C48010 * C16333 +
            ((C10633 * C1302 + C10631 * C1318 + C10634 * C7456 +
              C48367 * C7459) *
                 C46982 -
             ((C27286 + C27287) * C48298 + (C27288 + C27289) * C47001) +
             (C10633 * C1319 + C10631 * C1329 + C10634 * C7460 +
              C48367 * C7462) *
                 C47993) *
                C48010 * C48365) *
               C3806) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1089 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C48383 -
             (C10668 + C10669) * C1090 - (C10670 + C10671) * C48370 +
             (C10672 + C10673) * C1091 + (C10674 + C10675) * C48339) *
                C48010 * C16333 +
            ((C26236 + C26237) * C1089 + (C26238 + C26239) * C48383 -
             (C10863 + C10862) * C1090 - (C10865 + C10864) * C48370 +
             (C10867 + C10866) * C1091 + (C10869 + C10868) * C48339) *
                C48010 * C48365) *
               C3298 +
           (((C11056 + C11057) * C1090 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C48383 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C1089) +
             (C11058 + C11059) * C48370 - (C11060 + C11061) * C1091 -
             (C11062 + C11063) * C48339) *
                C48010 * C16333 +
            ((C11567 + C11566) * C1090 -
             ((C26852 + C26853) * C48383 + (C26854 + C26855) * C1089) +
             (C11569 + C11568) * C48370 - (C11571 + C11570) * C1091 -
             (C11573 + C11572) * C48339) *
                C48010 * C48365) *
               C48134) *
              C2531 +
          ((((C10862 + C10863) * C1090 -
             ((C26239 + C26238) * C48383 + (C26237 + C26236) * C1089) +
             (C10864 + C10865) * C48370 - (C10866 + C10867) * C1091 -
             (C10868 + C10869) * C48339) *
                C48010 * C16333 +
            ((C10871 + C10870) * C1090 -
             ((C26240 + C26241) * C48383 + (C26242 + C26243) * C1089) +
             (C10873 + C10872) * C48370 - (C10875 + C10874) * C1091 -
             (C10877 + C10876) * C48339) *
                C48010 * C48365) *
               C3298 +
           (((C26855 + C26854) * C1089 + (C26853 + C26852) * C48383 -
             (C11566 + C11567) * C1090 - (C11568 + C11569) * C48370 +
             (C11570 + C11571) * C1091 + (C11572 + C11573) * C48339) *
                C48010 * C16333 +
            ((C27282 + C27283) * C1089 + (C27284 + C27285) * C48383 -
             (C12293 + C12292) * C1090 - (C12295 + C12294) * C48370 +
             (C10633 * C1298 + C10631 * C1311 + C10634 * C1303 +
              C48367 * C1320) *
                 C1091 +
             (C10633 * C1310 + C10631 * C1325 + C10634 * C1321 +
              C48367 * C1330) *
                 C48339) *
                C48010 * C48365) *
               C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C16333 +
            ((C26236 + C26237) * C1160 + (C26238 + C26239) * C47983) * C48010 *
                C48365) *
               C3298 -
           (((C26852 + C26853) * C47983 + (C26854 + C26855) * C1160) * C48010 *
                C48365 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C48010 * C16333) *
               C48134) *
              C48393 +
          ((((C26855 + C26854) * C1160 + (C26853 + C26852) * C47983) * C48010 *
                C16333 +
            ((C27282 + C27283) * C1160 + (C27284 + C27285) * C47983) * C48010 *
                C48365) *
               C48134 -
           (((C26240 + C26241) * C47983 + (C26242 + C26243) * C1160) * C48010 *
                C48365 +
            ((C26239 + C26238) * C47983 + (C26237 + C26236) * C1160) * C48010 *
                C16333) *
               C3298) *
              C48389 +
          ((((C26243 + C26242) * C1160 + (C26241 + C26240) * C47983) * C48010 *
                C16333 +
            ((C27100 + C27101) * C1160 + (C27102 + C27103) * C47983) * C48010 *
                C48365) *
               C3298 -
           (((C27752 + C27753) * C47983 + (C27754 + C27755) * C1160) * C48010 *
                C48365 +
            ((C27285 + C27284) * C47983 + (C27283 + C27282) * C1160) * C48010 *
                C16333) *
               C48134) *
              C48379 +
          ((((C27755 + C27754) * C1160 + (C27753 + C27752) * C47983) * C48010 *
                C16333 +
            ((C10633 * C6587 + C10631 * C6589 + C10634 * C22667 +
              C48367 * C22668) *
                 C1160 +
             (C10633 * C6590 + C10631 * C6593 + C10634 * C22669 +
              C48367 * C22670) *
                 C47983) *
                C48010 * C48365) *
               C48134 -
           (((C27104 + C27105) * C47983 + (C27106 + C27107) * C1160) * C48010 *
                C48365 +
            ((C27103 + C27102) * C47983 + (C27101 + C27100) * C1160) * C48010 *
                C16333) *
               C3298) *
              C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C47001 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48298 -
            (C10668 + C10669) * C46982 - (C10670 + C10671) * C47993) *
               C48010 * C16333 +
           ((C26236 + C26237) * C47001 + (C26238 + C26239) * C48298 -
            (C10863 + C10862) * C46982 - (C10865 + C10864) * C47993) *
               C48010 * C48365) *
              C48047 * C1431 +
          (((C10862 + C10863) * C46982 -
            ((C26239 + C26238) * C48298 + (C26237 + C26236) * C47001) +
            (C10864 + C10865) * C47993) *
               C48010 * C16333 +
           ((C10871 + C10870) * C46982 -
            ((C26240 + C26241) * C48298 + (C26242 + C26243) * C47001) +
            (C10873 + C10872) * C47993) *
               C48010 * C48365) *
              C48047 * C1432 +
          (((C26243 + C26242) * C47001 + (C26241 + C26240) * C48298 -
            (C10870 + C10871) * C46982 - (C10872 + C10873) * C47993) *
               C48010 * C16333 +
           ((C27100 + C27101) * C47001 + (C27102 + C27103) * C48298 -
            (C12087 + C12086) * C46982 - (C12089 + C12088) * C47993) *
               C48010 * C48365) *
              C48047 * C1433 +
          (((C12086 + C12087) * C46982 -
            ((C27103 + C27102) * C48298 + (C27101 + C27100) * C47001) +
            (C12088 + C12089) * C47993) *
               C48010 * C16333 +
           ((C10633 * C1165 + C10631 * C1175 + C10634 * C6588 +
             C48367 * C6591) *
                C46982 -
            ((C27104 + C27105) * C48298 + (C27106 + C27107) * C47001) +
            (C10633 * C1176 + C10631 * C1183 + C10634 * C6592 +
             C48367 * C6594) *
                C47993) *
               C48010 * C48365) *
              C48047 * C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C665 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C659 -
            (C10668 + C10669) * C666 - (C10670 + C10671) * C660 +
            (C10672 + C10673) * C667 + (C10674 + C10675) * C661 -
            (C10676 + C10677) * C668 - (C10678 + C10679) * C48351) *
               C48010 * C16333 +
           ((C26236 + C26237) * C665 + (C26238 + C26239) * C659 -
            (C10863 + C10862) * C666 - (C10865 + C10864) * C660 +
            (C10867 + C10866) * C667 + (C10869 + C10868) * C661 -
            (C11211 + C11210) * C668 - (C11213 + C11212) * C48351) *
               C48010 * C48365) *
              C48047 * C48315 +
          (((C10862 + C10863) * C666 -
            ((C26239 + C26238) * C659 + (C26237 + C26236) * C665) +
            (C10864 + C10865) * C660 - (C10866 + C10867) * C667 -
            (C10868 + C10869) * C661 + (C11210 + C11211) * C668 +
            (C11212 + C11213) * C48351) *
               C48010 * C16333 +
           ((C10871 + C10870) * C666 -
            ((C26240 + C26241) * C659 + (C26242 + C26243) * C665) +
            (C10873 + C10872) * C660 - (C10875 + C10874) * C667 -
            (C10877 + C10876) * C661 +
            (C10633 * C304 + C10631 * C322 + C10634 * C1599 + C48367 * C1600) *
                C668 +
            (C10633 * C323 + C10631 * C334 + C10634 * C1601 + C48367 * C1602) *
                C48351) *
               C48010 * C48365) *
              C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C47001 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C48298 -
             (C10668 + C10669) * C46982 - (C10670 + C10671) * C47993) *
                C48010 * C16333 +
            ((C26236 + C26237) * C47001 + (C26238 + C26239) * C48298 -
             (C10863 + C10862) * C46982 - (C10865 + C10864) * C47993) *
                C48010 * C48365) *
               C1835 +
           (((C11056 + C11057) * C46982 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C48298 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C47001) +
             (C11058 + C11059) * C47993) *
                C48010 * C16333 +
            ((C11567 + C11566) * C46982 -
             ((C26852 + C26853) * C48298 + (C26854 + C26855) * C47001) +
             (C11569 + C11568) * C47993) *
                C48010 * C48365) *
               C1836 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C47001 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C48298 -
             (C11064 + C11065) * C46982 - (C11066 + C11067) * C47993) *
                C48010 * C16333 +
            ((C27278 + C27279) * C47001 + (C27280 + C27281) * C48298 -
             (C13011 + C13010) * C46982 - (C13013 + C13012) * C47993) *
                C48010 * C48365) *
               C48350) *
              C48315 +
          ((((C10862 + C10863) * C46982 -
             ((C26239 + C26238) * C48298 + (C26237 + C26236) * C47001) +
             (C10864 + C10865) * C47993) *
                C48010 * C16333 +
            ((C10871 + C10870) * C46982 -
             ((C26240 + C26241) * C48298 + (C26242 + C26243) * C47001) +
             (C10873 + C10872) * C47993) *
                C48010 * C48365) *
               C1835 +
           (((C26855 + C26854) * C47001 + (C26853 + C26852) * C48298 -
             (C11566 + C11567) * C46982 - (C11568 + C11569) * C47993) *
                C48010 * C16333 +
            ((C27282 + C27283) * C47001 + (C27284 + C27285) * C48298 -
             (C12293 + C12292) * C46982 - (C12295 + C12294) * C47993) *
                C48010 * C48365) *
               C1836 +
           (((C13010 + C13011) * C46982 -
             ((C27281 + C27280) * C48298 + (C27279 + C27278) * C47001) +
             (C13012 + C13013) * C47993) *
                C48010 * C16333 +
            ((C10633 * C1302 + C10631 * C1318 + C10634 * C7456 +
              C48367 * C7459) *
                 C46982 -
             ((C27286 + C27287) * C48298 + (C27288 + C27289) * C47001) +
             (C10633 * C1319 + C10631 * C1329 + C10634 * C7460 +
              C48367 * C7462) *
                 C47993) *
                C48010 * C48365) *
               C48350) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C16333 +
            ((C26236 + C26237) * C1160 + (C26238 + C26239) * C47983) * C48010 *
                C48365) *
               C48316 -
           (((C26852 + C26853) * C47983 + (C26854 + C26855) * C1160) * C48010 *
                C48365 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C48010 * C16333) *
               C48134) *
              C1431 +
          ((((C26855 + C26854) * C1160 + (C26853 + C26852) * C47983) * C48010 *
                C16333 +
            ((C27282 + C27283) * C1160 + (C27284 + C27285) * C47983) * C48010 *
                C48365) *
               C48134 -
           (((C26240 + C26241) * C47983 + (C26242 + C26243) * C1160) * C48010 *
                C48365 +
            ((C26239 + C26238) * C47983 + (C26237 + C26236) * C1160) * C48010 *
                C16333) *
               C48316) *
              C1432 +
          ((((C26243 + C26242) * C1160 + (C26241 + C26240) * C47983) * C48010 *
                C16333 +
            ((C27100 + C27101) * C1160 + (C27102 + C27103) * C47983) * C48010 *
                C48365) *
               C48316 -
           (((C27752 + C27753) * C47983 + (C27754 + C27755) * C1160) * C48010 *
                C48365 +
            ((C27285 + C27284) * C47983 + (C27283 + C27282) * C1160) * C48010 *
                C16333) *
               C48134) *
              C1433 +
          ((((C27755 + C27754) * C1160 + (C27753 + C27752) * C47983) * C48010 *
                C16333 +
            ((C10633 * C6587 + C10631 * C6589 + C10634 * C22667 +
              C48367 * C22668) *
                 C1160 +
             (C10633 * C6590 + C10631 * C6593 + C10634 * C22669 +
              C48367 * C22670) *
                 C47983) *
                C48010 * C48365) *
               C48134 -
           (((C27104 + C27105) * C47983 + (C27106 + C27107) * C1160) * C48010 *
                C48365 +
            ((C27103 + C27102) * C47983 + (C27101 + C27100) * C1160) * C48010 *
                C16333) *
               C48316) *
              C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C293 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C287 -
             (C10668 + C10669) * C294 - (C10670 + C10671) * C288 +
             (C10672 + C10673) * C295 + (C10674 + C10675) * C48339) *
                C48010 * C16333 +
            ((C26236 + C26237) * C293 + (C26238 + C26239) * C287 -
             (C10863 + C10862) * C294 - (C10865 + C10864) * C288 +
             (C10867 + C10866) * C295 + (C10869 + C10868) * C48339) *
                C48010 * C48365) *
               C48316 +
           (((C11056 + C11057) * C294 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C287 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C293) +
             (C11058 + C11059) * C288 - (C11060 + C11061) * C295 -
             (C11062 + C11063) * C48339) *
                C48010 * C16333 +
            ((C11567 + C11566) * C294 -
             ((C26852 + C26853) * C287 + (C26854 + C26855) * C293) +
             (C11569 + C11568) * C288 - (C11571 + C11570) * C295 -
             (C11573 + C11572) * C48339) *
                C48010 * C48365) *
               C48134) *
              C48315 +
          ((((C10862 + C10863) * C294 -
             ((C26239 + C26238) * C287 + (C26237 + C26236) * C293) +
             (C10864 + C10865) * C288 - (C10866 + C10867) * C295 -
             (C10868 + C10869) * C48339) *
                C48010 * C16333 +
            ((C10871 + C10870) * C294 -
             ((C26240 + C26241) * C287 + (C26242 + C26243) * C293) +
             (C10873 + C10872) * C288 - (C10875 + C10874) * C295 -
             (C10877 + C10876) * C48339) *
                C48010 * C48365) *
               C48316 +
           (((C26855 + C26854) * C293 + (C26853 + C26852) * C287 -
             (C11566 + C11567) * C294 - (C11568 + C11569) * C288 +
             (C11570 + C11571) * C295 + (C11572 + C11573) * C48339) *
                C48010 * C16333 +
            ((C10633 * C1300 + C10631 * C1315 + C10634 * C1301 +
              C48367 * C1316) *
                 C293 +
             (C10633 * C1314 + C10631 * C1327 + C10634 * C1317 +
              C48367 * C1328) *
                 C287 -
             (C12293 + C12292) * C294 - (C12295 + C12294) * C288 +
             (C10633 * C1298 + C10631 * C1311 + C10634 * C1303 +
              C48367 * C1320) *
                 C295 +
             (C10633 * C1310 + C10631 * C1325 + C10634 * C1321 +
              C48367 * C1330) *
                 C48339) *
                C48010 * C48365) *
               C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C16333 +
            ((C26236 + C26237) * C1160 + (C26238 + C26239) * C47983) * C48010 *
                C48365) *
               C2299 -
           (((C26852 + C26853) * C47983 + (C26854 + C26855) * C1160) * C48010 *
                C48365 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C48010 * C16333) *
               C2300 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C1160 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C47983) *
                C48010 * C16333 +
            ((C27278 + C27279) * C1160 + (C27280 + C27281) * C47983) * C48010 *
                C48365) *
               C2301 -
           (((C28596 + C28597) * C47983 + (C28598 + C28599) * C1160) * C48010 *
                C48365 +
            ((C10634 * C2028 + C48367 * C2036 + C10633 * C2025 +
              C10631 * C2035) *
                 C47983 +
             (C10634 * C2018 + C48367 * C2027 + C10633 * C2017 +
              C10631 * C2026) *
                 C1160) *
                C48010 * C16333) *
               C48363) *
              C48315 +
          ((((C26855 + C26854) * C1160 + (C26853 + C26852) * C47983) * C48010 *
                C16333 +
            ((C27282 + C27283) * C1160 + (C27284 + C27285) * C47983) * C48010 *
                C48365) *
               C2300 -
           (((C26240 + C26241) * C47983 + (C26242 + C26243) * C1160) * C48010 *
                C48365 +
            ((C26239 + C26238) * C47983 + (C26237 + C26236) * C1160) * C48010 *
                C16333) *
               C2299 -
           (((C27286 + C27287) * C47983 + (C27288 + C27289) * C1160) * C48010 *
                C48365 +
            ((C27281 + C27280) * C47983 + (C27279 + C27278) * C1160) * C48010 *
                C16333) *
               C2301 +
           (((C28599 + C28598) * C1160 + (C28597 + C28596) * C47983) * C48010 *
                C16333 +
            ((C10633 * C7455 + C10631 * C7457 + C10634 * C23341 +
              C48367 * C23342) *
                 C1160 +
             (C10633 * C7458 + C10631 * C7461 + C10634 * C23343 +
              C48367 * C23344) *
                 C47983) *
                C48010 * C48365) *
               C48363) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                   C114 +
               (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                   C102 -
               (C10668 + C10669) * C115 - (C10670 + C10671) * C103 +
               (C10672 + C10673) * C116 + (C10674 + C10675) * C104 -
               (C10676 + C10677) * C117 - (C10678 + C10679) * C105 +
               (C10680 + C10681) * C118 + (C10682 + C10683) * C106) *
                  C48010 * C16333 +
              ((C10633 * C297 + C10631 * C308 + C10634 * C935 + C48367 * C940) *
                   C114 +
               (C10633 * C307 + C10631 * C326 + C10634 * C941 + C48367 * C950) *
                   C102 -
               (C10863 + C10862) * C115 - (C10865 + C10864) * C103 +
               (C10867 + C10866) * C116 + (C10869 + C10868) * C104 -
               (C11211 + C11210) * C117 - (C11213 + C11212) * C105 +
               (C10633 * C300 + C10631 * C314 + C10634 * C939 + C48367 * C948) *
                   C118 +
               (C10633 * C315 + C10631 * C330 + C10634 * C949 + C48367 * C954) *
                   C106) *
                  C48010 * C48365) *
             C48047 * C48035 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C10633 * C119 + C10631 * C126 + C10634 * C486 +
                 C48367 * C497) *
                    C293 +
                (C10633 * C127 + C10631 * C140 + C10634 * C496 +
                 C48367 * C515) *
                    C287 -
                (C10668 + C10669) * C294 - (C10670 + C10671) * C288 +
                (C10672 + C10673) * C295 + (C10674 + C10675) * C48339) *
                   C48010 * C16333 +
               ((C26236 + C26237) * C293 + (C26238 + C26239) * C287 -
                (C10863 + C10862) * C294 - (C10865 + C10864) * C288 +
                (C10867 + C10866) * C295 + (C10869 + C10868) * C48339) *
                   C48010 * C48365) *
                  C48047 * C48386 +
              (((C10862 + C10863) * C294 -
                ((C26239 + C26238) * C287 + (C26237 + C26236) * C293) +
                (C10864 + C10865) * C288 - (C10866 + C10867) * C295 -
                (C10868 + C10869) * C48339) *
                   C48010 * C16333 +
               ((C10871 + C10870) * C294 -
                ((C26240 + C26241) * C287 + (C26242 + C26243) * C293) +
                (C10873 + C10872) * C288 - (C10875 + C10874) * C295 -
                (C10877 + C10876) * C48339) *
                   C48010 * C48365) *
                  C48047 * C48374 +
              (((C26243 + C26242) * C293 + (C26241 + C26240) * C287 -
                (C10870 + C10871) * C294 - (C10872 + C10873) * C288 +
                (C10874 + C10875) * C295 + (C10876 + C10877) * C48339) *
                   C48010 * C16333 +
               ((C10633 * C1163 + C10631 * C1172 + C10634 * C1713 +
                 C48367 * C1716) *
                    C293 +
                (C10633 * C1171 + C10631 * C1181 + C10634 * C1717 +
                 C48367 * C1722) *
                    C287 -
                (C12087 + C12086) * C294 - (C12089 + C12088) * C288 +
                (C10633 * C1161 + C10631 * C1168 + C10634 * C1715 +
                 C48367 * C1720) *
                    C295 +
                (C10633 * C1167 + C10631 * C1179 + C10634 * C1721 +
                 C48367 * C1724) *
                    C48339) *
                   C48010 * C48365) *
                  C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C293 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C287 -
            (C10668 + C10669) * C294 - (C10670 + C10671) * C288 +
            (C10672 + C10673) * C295 + (C10674 + C10675) * C48339) *
               C48010 * C16333 +
           ((C26236 + C26237) * C293 + (C26238 + C26239) * C287 -
            (C10863 + C10862) * C294 - (C10865 + C10864) * C288 +
            (C10867 + C10866) * C295 + (C10869 + C10868) * C48339) *
               C48010 * C48365) *
              C48387 +
          (((C11056 + C11057) * C294 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C287 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C293) +
            (C11058 + C11059) * C288 - (C11060 + C11061) * C295 -
            (C11062 + C11063) * C48339) *
               C48010 * C16333 +
           ((C11567 + C11566) * C294 -
            ((C10634 * C1308 + C48367 * C1324 + C10633 * C941 + C10631 * C950) *
                 C287 +
             (C10634 * C1297 + C48367 * C1309 + C10633 * C935 + C10631 * C940) *
                 C293) +
            (C11569 + C11568) * C288 - (C11571 + C11570) * C295 -
            (C11573 + C11572) * C48339) *
               C48010 * C48365) *
              C48376 +
          (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                C293 +
            (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                C287 -
            (C11064 + C11065) * C294 - (C11066 + C11067) * C288 +
            (C11068 + C11069) * C295 + (C11070 + C11071) * C48339) *
               C48010 * C16333 +
           ((C10633 * C1297 + C10631 * C1309 + C10634 * C2417 +
             C48367 * C2420) *
                C293 +
            (C10633 * C1308 + C10631 * C1324 + C10634 * C2421 +
             C48367 * C2426) *
                C287 -
            (C13011 + C13010) * C294 - (C13013 + C13012) * C288 +
            (C10633 * C1295 + C10631 * C1305 + C10634 * C2419 +
             C48367 * C2424) *
                C295 +
            (C10633 * C1304 + C10631 * C1322 + C10634 * C2425 +
             C48367 * C2428) *
                C48339) *
               C48010 * C48365) *
              C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1089 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48383 -
            (C10668 + C10669) * C1090 - (C10670 + C10671) * C48370 +
            (C10672 + C10673) * C1091 + (C10674 + C10675) * C48339) *
               C48010 * C16333 +
           ((C26236 + C26237) * C1089 + (C26238 + C26239) * C48383 -
            (C10863 + C10862) * C1090 - (C10865 + C10864) * C48370 +
            (C10867 + C10866) * C1091 + (C10869 + C10868) * C48339) *
               C48010 * C48365) *
              C48047 * C1086 +
          (((C10862 + C10863) * C1090 -
            ((C26239 + C26238) * C48383 + (C26237 + C26236) * C1089) +
            (C10864 + C10865) * C48370 - (C10866 + C10867) * C1091 -
            (C10868 + C10869) * C48339) *
               C48010 * C16333 +
           ((C10871 + C10870) * C1090 -
            ((C26240 + C26241) * C48383 + (C26242 + C26243) * C1089) +
            (C10873 + C10872) * C48370 - (C10875 + C10874) * C1091 -
            (C10877 + C10876) * C48339) *
               C48010 * C48365) *
              C48047 * C1087 +
          (((C26243 + C26242) * C1089 + (C26241 + C26240) * C48383 -
            (C10870 + C10871) * C1090 - (C10872 + C10873) * C48370 +
            (C10874 + C10875) * C1091 + (C10876 + C10877) * C48339) *
               C48010 * C16333 +
           ((C10633 * C1163 + C10631 * C1172 + C10634 * C1713 +
             C48367 * C1716) *
                C1089 +
            (C10633 * C1171 + C10631 * C1181 + C10634 * C1717 +
             C48367 * C1722) *
                C48383 -
            (C12087 + C12086) * C1090 - (C12089 + C12088) * C48370 +
            (C10633 * C1161 + C10631 * C1168 + C10634 * C1715 +
             C48367 * C1720) *
                C1091 +
            (C10633 * C1167 + C10631 * C1179 + C10634 * C1721 +
             C48367 * C1724) *
                C48339) *
               C48010 * C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1160 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C47983) *
               C48010 * C16333 +
           ((C26236 + C26237) * C1160 + (C26238 + C26239) * C47983) * C48010 *
               C48365) *
              C48047 * C1155 -
          (((C26240 + C26241) * C47983 + (C26242 + C26243) * C1160) * C48010 *
               C48365 +
           ((C26239 + C26238) * C47983 + (C26237 + C26236) * C1160) * C48010 *
               C16333) *
              C48047 * C1156 +
          (((C26243 + C26242) * C1160 + (C26241 + C26240) * C47983) * C48010 *
               C16333 +
           ((C27100 + C27101) * C1160 + (C27102 + C27103) * C47983) * C48010 *
               C48365) *
              C48047 * C1157 -
          (((C27104 + C27105) * C47983 + (C27106 + C27107) * C1160) * C48010 *
               C48365 +
           ((C27103 + C27102) * C47983 + (C27101 + C27100) * C1160) * C48010 *
               C16333) *
              C48047 * C1158 +
          (((C27107 + C27106) * C1160 + (C27105 + C27104) * C47983) * C48010 *
               C16333 +
           ((C10633 * C5851 + C10631 * C5853 + C10634 * C23045 +
             C48367 * C23046) *
                C1160 +
            (C10633 * C5854 + C10631 * C5857 + C10634 * C23047 +
             C48367 * C23048) *
                C47983) *
               C48010 * C48365) *
              C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C16333 +
            ((C26236 + C26237) * C1160 + (C26238 + C26239) * C47983) * C48010 *
                C48365) *
               C48387 -
           (((C26852 + C26853) * C47983 + (C26854 + C26855) * C1160) * C48010 *
                C48365 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C48010 * C16333) *
               C48376 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C1160 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C47983) *
                C48010 * C16333 +
            ((C27278 + C27279) * C1160 + (C27280 + C27281) * C47983) * C48010 *
                C48365) *
               C48350) *
              C1086 +
          ((((C26855 + C26854) * C1160 + (C26853 + C26852) * C47983) * C48010 *
                C16333 +
            ((C27282 + C27283) * C1160 + (C27284 + C27285) * C47983) * C48010 *
                C48365) *
               C48376 -
           (((C26240 + C26241) * C47983 + (C26242 + C26243) * C1160) * C48010 *
                C48365 +
            ((C26239 + C26238) * C47983 + (C26237 + C26236) * C1160) * C48010 *
                C16333) *
               C48387 -
           (((C27286 + C27287) * C47983 + (C27288 + C27289) * C1160) * C48010 *
                C48365 +
            ((C27281 + C27280) * C47983 + (C27279 + C27278) * C1160) * C48010 *
                C16333) *
               C48350) *
              C1087 +
          ((((C26243 + C26242) * C1160 + (C26241 + C26240) * C47983) * C48010 *
                C16333 +
            ((C27100 + C27101) * C1160 + (C27102 + C27103) * C47983) * C48010 *
                C48365) *
               C48387 -
           (((C10634 * C6042 + C48367 * C6045 + C10633 * C1717 +
              C10631 * C1722) *
                 C47983 +
             (C10634 * C6039 + C48367 * C6041 + C10633 * C1713 +
              C10631 * C1716) *
                 C1160) *
                C48010 * C48365 +
            ((C27285 + C27284) * C47983 + (C27283 + C27282) * C1160) * C48010 *
                C16333) *
               C48376 +
           (((C27289 + C27288) * C1160 + (C27287 + C27286) * C47983) * C48010 *
                C16333 +
            ((C10633 * C6039 + C10631 * C6041 + C10634 * C23691 +
              C48367 * C23692) *
                 C1160 +
             (C10633 * C6042 + C10631 * C6045 + C10634 * C23693 +
              C48367 * C23694) *
                 C47983) *
                C48010 * C48365) *
               C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1089 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48383 -
            (C10668 + C10669) * C1090 - (C10670 + C10671) * C48370 +
            (C10672 + C10673) * C1091 + (C10674 + C10675) * C48339) *
               C48010 * C16333 +
           ((C26236 + C26237) * C1089 + (C26238 + C26239) * C48383 -
            (C10863 + C10862) * C1090 - (C10865 + C10864) * C48370 +
            (C10867 + C10866) * C1091 + (C10869 + C10868) * C48339) *
               C48010 * C48365) *
              C1835 +
          (((C11056 + C11057) * C1090 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C48383 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1089) +
            (C11058 + C11059) * C48370 - (C11060 + C11061) * C1091 -
            (C11062 + C11063) * C48339) *
               C48010 * C16333 +
           ((C11567 + C11566) * C1090 -
            ((C26852 + C26853) * C48383 + (C26854 + C26855) * C1089) +
            (C11569 + C11568) * C48370 - (C11571 + C11570) * C1091 -
            (C11573 + C11572) * C48339) *
               C48010 * C48365) *
              C1836 +
          (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                C1089 +
            (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                C48383 -
            (C11064 + C11065) * C1090 - (C11066 + C11067) * C48370 +
            (C11068 + C11069) * C1091 + (C11070 + C11071) * C48339) *
               C48010 * C16333 +
           ((C27278 + C27279) * C1089 + (C27280 + C27281) * C48383 -
            (C13011 + C13010) * C1090 - (C13013 + C13012) * C48370 +
            (C10633 * C1295 + C10631 * C1305 + C10634 * C2419 +
             C48367 * C2424) *
                C1091 +
            (C10633 * C1304 + C10631 * C1322 + C10634 * C2425 +
             C48367 * C2428) *
                C48339) *
               C48010 * C48365) *
              C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C16333 +
            ((C26236 + C26237) * C1160 + (C26238 + C26239) * C47983) * C48010 *
                C48365) *
               C1835 -
           (((C26852 + C26853) * C47983 + (C26854 + C26855) * C1160) * C48010 *
                C48365 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C48010 * C16333) *
               C1836 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C1160 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C47983) *
                C48010 * C16333 +
            ((C27278 + C27279) * C1160 + (C27280 + C27281) * C47983) * C48010 *
                C48365) *
               C48350) *
              C48386 +
          ((((C26855 + C26854) * C1160 + (C26853 + C26852) * C47983) * C48010 *
                C16333 +
            ((C27282 + C27283) * C1160 + (C27284 + C27285) * C47983) * C48010 *
                C48365) *
               C1836 -
           (((C26240 + C26241) * C47983 + (C26242 + C26243) * C1160) * C48010 *
                C48365 +
            ((C26239 + C26238) * C47983 + (C26237 + C26236) * C1160) * C48010 *
                C16333) *
               C1835 -
           (((C27286 + C27287) * C47983 + (C27288 + C27289) * C1160) * C48010 *
                C48365 +
            ((C27281 + C27280) * C47983 + (C27279 + C27278) * C1160) * C48010 *
                C16333) *
               C48350) *
              C48374 +
          ((((C26243 + C26242) * C1160 + (C26241 + C26240) * C47983) * C48010 *
                C16333 +
            ((C27100 + C27101) * C1160 + (C27102 + C27103) * C47983) * C48010 *
                C48365) *
               C1835 -
           (((C27752 + C27753) * C47983 + (C27754 + C27755) * C1160) * C48010 *
                C48365 +
            ((C27285 + C27284) * C47983 + (C27283 + C27282) * C1160) * C48010 *
                C16333) *
               C1836 +
           (((C27289 + C27288) * C1160 + (C27287 + C27286) * C47983) * C48010 *
                C16333 +
            ((C10633 * C6039 + C10631 * C6041 + C10634 * C23691 +
              C48367 * C23692) *
                 C1160 +
             (C10633 * C6042 + C10631 * C6045 + C10634 * C23693 +
              C48367 * C23694) *
                 C47983) *
                C48010 * C48365) *
               C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1160 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C47983) *
               C48010 * C16333 +
           ((C26236 + C26237) * C1160 + (C26238 + C26239) * C47983) * C48010 *
               C48365) *
              C2010 -
          (((C26852 + C26853) * C47983 + (C26854 + C26855) * C1160) * C48010 *
               C48365 +
           ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                C47983 +
            (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                C1160) *
               C48010 * C16333) *
              C2011 +
          (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                C1160 +
            (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                C47983) *
               C48010 * C16333 +
           ((C27278 + C27279) * C1160 + (C27280 + C27281) * C47983) * C48010 *
               C48365) *
              C2012 -
          (((C10634 * C6982 + C48367 * C6985 + C10633 * C2421 +
             C10631 * C2426) *
                C47983 +
            (C10634 * C6979 + C48367 * C6981 + C10633 * C2417 +
             C10631 * C2420) *
                C1160) *
               C48010 * C48365 +
           ((C10634 * C2028 + C48367 * C2036 + C10633 * C2025 +
             C10631 * C2035) *
                C47983 +
            (C10634 * C2018 + C48367 * C2027 + C10633 * C2017 +
             C10631 * C2026) *
                C1160) *
               C48010 * C16333) *
              C2013 +
          (((C10633 * C2018 + C10631 * C2027 + C10634 * C12799 +
             C48367 * C12801) *
                C1160 +
            (C10633 * C2028 + C10631 * C2036 + C10634 * C12802 +
             C48367 * C12805) *
                C47983) *
               C48010 * C16333 +
           ((C10633 * C6979 + C10631 * C6981 + C10634 * C28129 +
             C48367 * C28130) *
                C1160 +
            (C10633 * C6982 + C10631 * C6985 + C10634 * C28131 +
             C48367 * C28132) *
                C47983) *
               C48010 * C48365) *
              C2014) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C47001 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C48298 -
             (C10668 + C10669) * C46982 - (C10670 + C10671) * C47993) *
                C48010 * C16333 +
            ((C26236 + C26237) * C47001 + (C26238 + C26239) * C48298 -
             (C10863 + C10862) * C46982 - (C10865 + C10864) * C47993) *
                C48010 * C48365) *
               C48316 +
           (((C11056 + C11057) * C46982 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C48298 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C47001) +
             (C11058 + C11059) * C47993) *
                C48010 * C16333 +
            ((C11567 + C11566) * C46982 -
             ((C26852 + C26853) * C48298 + (C26854 + C26855) * C47001) +
             (C11569 + C11568) * C47993) *
                C48010 * C48365) *
               C48134) *
              C1086 +
          ((((C10862 + C10863) * C46982 -
             ((C26239 + C26238) * C48298 + (C26237 + C26236) * C47001) +
             (C10864 + C10865) * C47993) *
                C48010 * C16333 +
            ((C10871 + C10870) * C46982 -
             ((C26240 + C26241) * C48298 + (C26242 + C26243) * C47001) +
             (C10873 + C10872) * C47993) *
                C48010 * C48365) *
               C48316 +
           (((C26855 + C26854) * C47001 + (C26853 + C26852) * C48298 -
             (C11566 + C11567) * C46982 - (C11568 + C11569) * C47993) *
                C48010 * C16333 +
            ((C27282 + C27283) * C47001 + (C27284 + C27285) * C48298 -
             (C12293 + C12292) * C46982 - (C12295 + C12294) * C47993) *
                C48010 * C48365) *
               C48134) *
              C1087 +
          ((((C26243 + C26242) * C47001 + (C26241 + C26240) * C48298 -
             (C10870 + C10871) * C46982 - (C10872 + C10873) * C47993) *
                C48010 * C16333 +
            ((C27100 + C27101) * C47001 + (C27102 + C27103) * C48298 -
             (C12087 + C12086) * C46982 - (C12089 + C12088) * C47993) *
                C48010 * C48365) *
               C48316 +
           (((C12292 + C12293) * C46982 -
             ((C27285 + C27284) * C48298 + (C27283 + C27282) * C47001) +
             (C12294 + C12295) * C47993) *
                C48010 * C16333 +
            ((C10633 * C1714 + C10631 * C1718 + C10634 * C6040 +
              C48367 * C6043) *
                 C46982 -
             ((C10634 * C6042 + C48367 * C6045 + C10633 * C1717 +
               C10631 * C1722) *
                  C48298 +
              (C10634 * C6039 + C48367 * C6041 + C10633 * C1713 +
               C10631 * C1716) *
                  C47001) +
             (C10633 * C1719 + C10631 * C1723 + C10634 * C6044 +
              C48367 * C6046) *
                 C47993) *
                C48010 * C48365) *
               C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C665 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C659 -
            (C10668 + C10669) * C666 - (C10670 + C10671) * C660 +
            (C10672 + C10673) * C667 + (C10674 + C10675) * C661 -
            (C10676 + C10677) * C668 - (C10678 + C10679) * C48351) *
               C48010 * C16333 +
           ((C26236 + C26237) * C665 + (C26238 + C26239) * C659 -
            (C10863 + C10862) * C666 - (C10865 + C10864) * C660 +
            (C10867 + C10866) * C667 + (C10869 + C10868) * C661 -
            (C11211 + C11210) * C668 - (C11213 + C11212) * C48351) *
               C48010 * C48365) *
              C48316 +
          (((C11056 + C11057) * C666 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C659 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C665) +
            (C11058 + C11059) * C660 - (C11060 + C11061) * C667 -
            (C11062 + C11063) * C661 + (C11352 + C11353) * C668 +
            (C11354 + C11355) * C48351) *
               C48010 * C16333 +
           ((C11567 + C11566) * C666 -
            ((C10634 * C1308 + C48367 * C1324 + C10633 * C941 + C10631 * C950) *
                 C659 +
             (C10634 * C1297 + C48367 * C1309 + C10633 * C935 + C10631 * C940) *
                 C665) +
            (C11569 + C11568) * C660 - (C11571 + C11570) * C667 -
            (C11573 + C11572) * C661 +
            (C10633 * C938 + C10631 * C946 + C10634 * C2185 + C48367 * C2186) *
                C668 +
            (C10633 * C947 + C10631 * C953 + C10634 * C2187 + C48367 * C2188) *
                C48351) *
               C48010 * C48365) *
              C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C47001 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48298 -
            (C10668 + C10669) * C46982 - (C10670 + C10671) * C47993) *
               C48010 * C16333 +
           ((C26236 + C26237) * C47001 + (C26238 + C26239) * C48298 -
            (C10863 + C10862) * C46982 - (C10865 + C10864) * C47993) *
               C48010 * C48365) *
              C2299 +
          (((C11056 + C11057) * C46982 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C48298 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C47001) +
            (C11058 + C11059) * C47993) *
               C48010 * C16333 +
           ((C11567 + C11566) * C46982 -
            ((C26852 + C26853) * C48298 + (C26854 + C26855) * C47001) +
            (C11569 + C11568) * C47993) *
               C48010 * C48365) *
              C2300 +
          (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                C47001 +
            (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                C48298 -
            (C11064 + C11065) * C46982 - (C11066 + C11067) * C47993) *
               C48010 * C16333 +
           ((C27278 + C27279) * C47001 + (C27280 + C27281) * C48298 -
            (C13011 + C13010) * C46982 - (C13013 + C13012) * C47993) *
               C48010 * C48365) *
              C2301 +
          (((C13152 + C13153) * C46982 -
            ((C10634 * C2028 + C48367 * C2036 + C10633 * C2025 +
              C10631 * C2035) *
                 C48298 +
             (C10634 * C2018 + C48367 * C2027 + C10633 * C2017 +
              C10631 * C2026) *
                 C47001) +
            (C13154 + C13155) * C47993) *
               C48010 * C16333 +
           ((C10633 * C2418 + C10631 * C2422 + C10634 * C6980 +
             C48367 * C6983) *
                C46982 -
            ((C10634 * C6982 + C48367 * C6985 + C10633 * C2421 +
              C10631 * C2426) *
                 C48298 +
             (C10634 * C6979 + C48367 * C6981 + C10633 * C2417 +
              C10631 * C2420) *
                 C47001) +
            (C10633 * C2423 + C10631 * C2427 + C10634 * C6984 +
             C48367 * C6986) *
                C47993) *
               C48010 * C48365) *
              C48363) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C293 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C287 -
            (C10668 + C10669) * C294 - (C10670 + C10671) * C288 +
            (C10672 + C10673) * C295 + (C10674 + C10675) * C48339) *
               C48010 * C16333 +
           ((C26236 + C26237) * C293 + (C26238 + C26239) * C287 -
            (C10863 + C10862) * C294 - (C10865 + C10864) * C288 +
            (C10867 + C10866) * C295 + (C10869 + C10868) * C48339) *
               C48010 * C48365) *
              C48047 * C48386 +
          (((C10862 + C10863) * C294 -
            ((C26239 + C26238) * C287 + (C26237 + C26236) * C293) +
            (C10864 + C10865) * C288 - (C10866 + C10867) * C295 -
            (C10868 + C10869) * C48339) *
               C48010 * C16333 +
           ((C10871 + C10870) * C294 -
            ((C26240 + C26241) * C287 + (C26242 + C26243) * C293) +
            (C10873 + C10872) * C288 - (C10875 + C10874) * C295 -
            (C10877 + C10876) * C48339) *
               C48010 * C48365) *
              C48047 * C48374 +
          (((C26243 + C26242) * C293 + (C26241 + C26240) * C287 -
            (C10870 + C10871) * C294 - (C10872 + C10873) * C288 +
            (C10874 + C10875) * C295 + (C10876 + C10877) * C48339) *
               C48010 * C16333 +
           ((C10633 * C1163 + C10631 * C1172 + C10634 * C1713 +
             C48367 * C1716) *
                C293 +
            (C10633 * C1171 + C10631 * C1181 + C10634 * C1717 +
             C48367 * C1722) *
                C287 -
            (C12087 + C12086) * C294 - (C12089 + C12088) * C288 +
            (C10633 * C1161 + C10631 * C1168 + C10634 * C1715 +
             C48367 * C1720) *
                C295 +
            (C10633 * C1167 + C10631 * C1179 + C10634 * C1721 +
             C48367 * C1724) *
                C48339) *
               C48010 * C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
               C114 +
           (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
               C102 -
           (C10668 + C10669) * C115 - (C10670 + C10671) * C103 +
           (C10672 + C10673) * C116 + (C10674 + C10675) * C104 -
           (C10676 + C10677) * C117 - (C10678 + C10679) * C105 +
           (C10680 + C10681) * C118 + (C10682 + C10683) * C106) *
              C48010 * C16333 +
          ((C10633 * C297 + C10631 * C308 + C10634 * C935 + C48367 * C940) *
               C114 +
           (C10633 * C307 + C10631 * C326 + C10634 * C941 + C48367 * C950) *
               C102 -
           (C10863 + C10862) * C115 - (C10865 + C10864) * C103 +
           (C10867 + C10866) * C116 + (C10869 + C10868) * C104 -
           (C11211 + C11210) * C117 - (C11213 + C11212) * C105 +
           (C10633 * C300 + C10631 * C314 + C10634 * C939 + C48367 * C948) *
               C118 +
           (C10633 * C315 + C10631 * C330 + C10634 * C949 + C48367 * C954) *
               C106) *
              C48010 * C48365) *
         C48047 * C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1089 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48383 -
            (C10668 + C10669) * C1090 - (C10670 + C10671) * C48370 +
            (C10672 + C10673) * C1091 + (C10674 + C10675) * C48339) *
               C48010 * C16333 +
           ((C26236 + C26237) * C1089 + (C26238 + C26239) * C48383 -
            (C10863 + C10862) * C1090 - (C10865 + C10864) * C48370 +
            (C10867 + C10866) * C1091 + (C10869 + C10868) * C48339) *
               C48010 * C48365) *
              C48047 * C1086 +
          (((C10862 + C10863) * C1090 -
            ((C26239 + C26238) * C48383 + (C26237 + C26236) * C1089) +
            (C10864 + C10865) * C48370 - (C10866 + C10867) * C1091 -
            (C10868 + C10869) * C48339) *
               C48010 * C16333 +
           ((C10871 + C10870) * C1090 -
            ((C26240 + C26241) * C48383 + (C26242 + C26243) * C1089) +
            (C10873 + C10872) * C48370 - (C10875 + C10874) * C1091 -
            (C10877 + C10876) * C48339) *
               C48010 * C48365) *
              C48047 * C1087 +
          (((C26243 + C26242) * C1089 + (C26241 + C26240) * C48383 -
            (C10870 + C10871) * C1090 - (C10872 + C10873) * C48370 +
            (C10874 + C10875) * C1091 + (C10876 + C10877) * C48339) *
               C48010 * C16333 +
           ((C10633 * C1163 + C10631 * C1172 + C10634 * C1713 +
             C48367 * C1716) *
                C1089 +
            (C10633 * C1171 + C10631 * C1181 + C10634 * C1717 +
             C48367 * C1722) *
                C48383 -
            (C12087 + C12086) * C1090 - (C12089 + C12088) * C48370 +
            (C10633 * C1161 + C10631 * C1168 + C10634 * C1715 +
             C48367 * C1720) *
                C1091 +
            (C10633 * C1167 + C10631 * C1179 + C10634 * C1721 +
             C48367 * C1724) *
                C48339) *
               C48010 * C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1160 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C47983) *
               C48010 * C16333 +
           ((C26236 + C26237) * C1160 + (C26238 + C26239) * C47983) * C48010 *
               C48365) *
              C48047 * C1155 -
          (((C26240 + C26241) * C47983 + (C26242 + C26243) * C1160) * C48010 *
               C48365 +
           ((C26239 + C26238) * C47983 + (C26237 + C26236) * C1160) * C48010 *
               C16333) *
              C48047 * C1156 +
          (((C26243 + C26242) * C1160 + (C26241 + C26240) * C47983) * C48010 *
               C16333 +
           ((C27100 + C27101) * C1160 + (C27102 + C27103) * C47983) * C48010 *
               C48365) *
              C48047 * C1157 -
          (((C27104 + C27105) * C47983 + (C27106 + C27107) * C1160) * C48010 *
               C48365 +
           ((C27103 + C27102) * C47983 + (C27101 + C27100) * C1160) * C48010 *
               C16333) *
              C48047 * C1158 +
          (((C27107 + C27106) * C1160 + (C27105 + C27104) * C47983) * C48010 *
               C16333 +
           ((C10633 * C5851 + C10631 * C5853 + C10634 * C23045 +
             C48367 * C23046) *
                C1160 +
            (C10633 * C5854 + C10631 * C5857 + C10634 * C23047 +
             C48367 * C23048) *
                C47983) *
               C48010 * C48365) *
              C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1089 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48383 -
            (C10668 + C10669) * C1090 - (C10670 + C10671) * C48370 +
            (C10672 + C10673) * C1091 + (C10674 + C10675) * C48339) *
               C48010 * C16333 +
           ((C26236 + C26237) * C1089 + (C26238 + C26239) * C48383 -
            (C10863 + C10862) * C1090 - (C10865 + C10864) * C48370 +
            (C10867 + C10866) * C1091 + (C10869 + C10868) * C48339) *
               C48010 * C48365) *
              C1835 +
          (((C11056 + C11057) * C1090 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C48383 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1089) +
            (C11058 + C11059) * C48370 - (C11060 + C11061) * C1091 -
            (C11062 + C11063) * C48339) *
               C48010 * C16333 +
           ((C11567 + C11566) * C1090 -
            ((C26852 + C26853) * C48383 + (C26854 + C26855) * C1089) +
            (C11569 + C11568) * C48370 - (C11571 + C11570) * C1091 -
            (C11573 + C11572) * C48339) *
               C48010 * C48365) *
              C1836 +
          (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                C1089 +
            (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                C48383 -
            (C11064 + C11065) * C1090 - (C11066 + C11067) * C48370 +
            (C11068 + C11069) * C1091 + (C11070 + C11071) * C48339) *
               C48010 * C16333 +
           ((C27278 + C27279) * C1089 + (C27280 + C27281) * C48383 -
            (C13011 + C13010) * C1090 - (C13013 + C13012) * C48370 +
            (C10633 * C1295 + C10631 * C1305 + C10634 * C2419 +
             C48367 * C2424) *
                C1091 +
            (C10633 * C1304 + C10631 * C1322 + C10634 * C2425 +
             C48367 * C2428) *
                C48339) *
               C48010 * C48365) *
              C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C16333 +
            ((C26236 + C26237) * C1160 + (C26238 + C26239) * C47983) * C48010 *
                C48365) *
               C1835 -
           (((C26852 + C26853) * C47983 + (C26854 + C26855) * C1160) * C48010 *
                C48365 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C48010 * C16333) *
               C1836 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C1160 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C47983) *
                C48010 * C16333 +
            ((C27278 + C27279) * C1160 + (C27280 + C27281) * C47983) * C48010 *
                C48365) *
               C48350) *
              C48386 +
          ((((C26855 + C26854) * C1160 + (C26853 + C26852) * C47983) * C48010 *
                C16333 +
            ((C27282 + C27283) * C1160 + (C27284 + C27285) * C47983) * C48010 *
                C48365) *
               C1836 -
           (((C26240 + C26241) * C47983 + (C26242 + C26243) * C1160) * C48010 *
                C48365 +
            ((C26239 + C26238) * C47983 + (C26237 + C26236) * C1160) * C48010 *
                C16333) *
               C1835 -
           (((C27286 + C27287) * C47983 + (C27288 + C27289) * C1160) * C48010 *
                C48365 +
            ((C27281 + C27280) * C47983 + (C27279 + C27278) * C1160) * C48010 *
                C16333) *
               C48350) *
              C48374 +
          ((((C26243 + C26242) * C1160 + (C26241 + C26240) * C47983) * C48010 *
                C16333 +
            ((C27100 + C27101) * C1160 + (C27102 + C27103) * C47983) * C48010 *
                C48365) *
               C1835 -
           (((C27752 + C27753) * C47983 + (C27754 + C27755) * C1160) * C48010 *
                C48365 +
            ((C27285 + C27284) * C47983 + (C27283 + C27282) * C1160) * C48010 *
                C16333) *
               C1836 +
           (((C27289 + C27288) * C1160 + (C27287 + C27286) * C47983) * C48010 *
                C16333 +
            ((C10633 * C6039 + C10631 * C6041 + C10634 * C23691 +
              C48367 * C23692) *
                 C1160 +
             (C10633 * C6042 + C10631 * C6045 + C10634 * C23693 +
              C48367 * C23694) *
                 C47983) *
                C48010 * C48365) *
               C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C47011 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47988 -
             (C10668 + C10669) * C47007 - (C10670 + C10671) * C47996 +
             (C10672 + C10673) * C47017 + (C10674 + C10675) * C2901) *
                C48010 * C16333 +
            ((C26236 + C26237) * C47011 + (C26238 + C26239) * C47988 -
             (C10863 + C10862) * C47007 - (C10865 + C10864) * C47996 +
             (C10867 + C10866) * C47017 + (C10869 + C10868) * C2901) *
                C48010 * C48365) *
               C3298 +
           (((C11056 + C11057) * C47007 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C47988 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C47011) +
             (C11058 + C11059) * C47996 - (C11060 + C11061) * C47017 -
             (C11062 + C11063) * C2901) *
                C48010 * C16333 +
            ((C11567 + C11566) * C47007 -
             ((C26852 + C26853) * C47988 + (C26854 + C26855) * C47011) +
             (C11569 + C11568) * C47996 - (C11571 + C11570) * C47017 -
             (C11573 + C11572) * C2901) *
                C48010 * C48365) *
               C48134) *
              C48315 +
          ((((C10862 + C10863) * C47007 -
             ((C26239 + C26238) * C47988 + (C26237 + C26236) * C47011) +
             (C10864 + C10865) * C47996 - (C10866 + C10867) * C47017 -
             (C10868 + C10869) * C2901) *
                C48010 * C16333 +
            ((C10871 + C10870) * C47007 -
             ((C26240 + C26241) * C47988 + (C26242 + C26243) * C47011) +
             (C10873 + C10872) * C47996 - (C10875 + C10874) * C47017 -
             (C10877 + C10876) * C2901) *
                C48010 * C48365) *
               C3298 +
           (((C26855 + C26854) * C47011 + (C26853 + C26852) * C47988 -
             (C11566 + C11567) * C47007 - (C11568 + C11569) * C47996 +
             (C11570 + C11571) * C47017 + (C11572 + C11573) * C2901) *
                C48010 * C16333 +
            ((C27282 + C27283) * C47011 + (C27284 + C27285) * C47988 -
             (C12293 + C12292) * C47007 - (C12295 + C12294) * C47996 +
             (C10633 * C1298 + C10631 * C1311 + C10634 * C1303 +
              C48367 * C1320) *
                 C47017 +
             (C10633 * C1310 + C10631 * C1325 + C10634 * C1321 +
              C48367 * C1330) *
                 C2901) *
                C48010 * C48365) *
               C48134) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C2641 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C2635 -
             (C10668 + C10669) * C2642 - (C10670 + C10671) * C47993) *
                C48010 * C16333 +
            ((C26236 + C26237) * C2641 + (C26238 + C26239) * C2635 -
             (C10863 + C10862) * C2642 - (C10865 + C10864) * C47993) *
                C48010 * C48365) *
               C48130 +
           (((C11056 + C11057) * C2642 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C2635 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C2641) +
             (C11058 + C11059) * C47993) *
                C48010 * C16333 +
            ((C11567 + C11566) * C2642 -
             ((C26852 + C26853) * C2635 + (C26854 + C26855) * C2641) +
             (C11569 + C11568) * C47993) *
                C48010 * C48365) *
               C48137 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C2641 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C2635 -
             (C11064 + C11065) * C2642 - (C11066 + C11067) * C47993) *
                C48010 * C16333 +
            ((C27278 + C27279) * C2641 + (C27280 + C27281) * C2635 -
             (C13011 + C13010) * C2642 - (C13013 + C13012) * C47993) *
                C48010 * C48365) *
               C3806) *
              C48315 +
          ((((C10862 + C10863) * C2642 -
             ((C26239 + C26238) * C2635 + (C26237 + C26236) * C2641) +
             (C10864 + C10865) * C47993) *
                C48010 * C16333 +
            ((C10871 + C10870) * C2642 -
             ((C26240 + C26241) * C2635 + (C26242 + C26243) * C2641) +
             (C10873 + C10872) * C47993) *
                C48010 * C48365) *
               C48130 +
           (((C26855 + C26854) * C2641 + (C26853 + C26852) * C2635 -
             (C11566 + C11567) * C2642 - (C11568 + C11569) * C47993) *
                C48010 * C16333 +
            ((C27282 + C27283) * C2641 + (C27284 + C27285) * C2635 -
             (C12293 + C12292) * C2642 - (C12295 + C12294) * C47993) *
                C48010 * C48365) *
               C48137 +
           (((C13010 + C13011) * C2642 -
             ((C27281 + C27280) * C2635 + (C27279 + C27278) * C2641) +
             (C13012 + C13013) * C47993) *
                C48010 * C16333 +
            ((C10633 * C1302 + C10631 * C1318 + C10634 * C7456 +
              C48367 * C7459) *
                 C2642 -
             ((C27286 + C27287) * C2635 + (C27288 + C27289) * C2641) +
             (C10633 * C1319 + C10631 * C1329 + C10634 * C7460 +
              C48367 * C7462) *
                 C47993) *
                C48010 * C48365) *
               C3806) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C2641 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C2635 -
             (C10668 + C10669) * C2642 - (C10670 + C10671) * C47993) *
                C48010 * C16333 +
            ((C26236 + C26237) * C2641 + (C26238 + C26239) * C2635 -
             (C10863 + C10862) * C2642 - (C10865 + C10864) * C47993) *
                C48010 * C48365) *
               C3298 +
           (((C11056 + C11057) * C2642 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C2635 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C2641) +
             (C11058 + C11059) * C47993) *
                C48010 * C16333 +
            ((C11567 + C11566) * C2642 -
             ((C26852 + C26853) * C2635 + (C26854 + C26855) * C2641) +
             (C11569 + C11568) * C47993) *
                C48010 * C48365) *
               C48134) *
              C48386 +
          ((((C10862 + C10863) * C2642 -
             ((C26239 + C26238) * C2635 + (C26237 + C26236) * C2641) +
             (C10864 + C10865) * C47993) *
                C48010 * C16333 +
            ((C10871 + C10870) * C2642 -
             ((C26240 + C26241) * C2635 + (C26242 + C26243) * C2641) +
             (C10873 + C10872) * C47993) *
                C48010 * C48365) *
               C3298 +
           (((C26855 + C26854) * C2641 + (C26853 + C26852) * C2635 -
             (C11566 + C11567) * C2642 - (C11568 + C11569) * C47993) *
                C48010 * C16333 +
            ((C27282 + C27283) * C2641 + (C27284 + C27285) * C2635 -
             (C12293 + C12292) * C2642 - (C12295 + C12294) * C47993) *
                C48010 * C48365) *
               C48134) *
              C48374 +
          ((((C26243 + C26242) * C2641 + (C26241 + C26240) * C2635 -
             (C10870 + C10871) * C2642 - (C10872 + C10873) * C47993) *
                C48010 * C16333 +
            ((C27100 + C27101) * C2641 + (C27102 + C27103) * C2635 -
             (C12087 + C12086) * C2642 - (C12089 + C12088) * C47993) *
                C48010 * C48365) *
               C3298 +
           (((C12292 + C12293) * C2642 -
             ((C27285 + C27284) * C2635 + (C27283 + C27282) * C2641) +
             (C12294 + C12295) * C47993) *
                C48010 * C16333 +
            ((C10633 * C1714 + C10631 * C1718 + C10634 * C6040 +
              C48367 * C6043) *
                 C2642 -
             ((C27752 + C27753) * C2635 + (C27754 + C27755) * C2641) +
             (C10633 * C1719 + C10631 * C1723 + C10634 * C6044 +
              C48367 * C6046) *
                 C47993) *
                C48010 * C48365) *
               C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C2533 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48392 -
            (C10668 + C10669) * C2534 - (C10670 + C10671) * C48385 +
            (C10672 + C10673) * C2535 + (C10674 + C10675) * C48372 -
            (C10676 + C10677) * C2536 - (C10678 + C10679) * C48351) *
               C48010 * C16333 +
           ((C26236 + C26237) * C2533 + (C26238 + C26239) * C48392 -
            (C10863 + C10862) * C2534 - (C10865 + C10864) * C48385 +
            (C10867 + C10866) * C2535 + (C10869 + C10868) * C48372 -
            (C11211 + C11210) * C2536 - (C11213 + C11212) * C48351) *
               C48010 * C48365) *
              C3298 +
          (((C11056 + C11057) * C2534 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C48392 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C2533) +
            (C11058 + C11059) * C48385 - (C11060 + C11061) * C2535 -
            (C11062 + C11063) * C48372 + (C11352 + C11353) * C2536 +
            (C11354 + C11355) * C48351) *
               C48010 * C16333 +
           ((C11567 + C11566) * C2534 -
            ((C26852 + C26853) * C48392 + (C26854 + C26855) * C2533) +
            (C11569 + C11568) * C48385 - (C11571 + C11570) * C2535 -
            (C11573 + C11572) * C48372 +
            (C10633 * C938 + C10631 * C946 + C10634 * C2185 + C48367 * C2186) *
                C2536 +
            (C10633 * C947 + C10631 * C953 + C10634 * C2187 + C48367 * C2188) *
                C48351) *
               C48010 * C48365) *
              C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C2641 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C2635 -
            (C10668 + C10669) * C2642 - (C10670 + C10671) * C47993) *
               C48010 * C16333 +
           ((C26236 + C26237) * C2641 + (C26238 + C26239) * C2635 -
            (C10863 + C10862) * C2642 - (C10865 + C10864) * C47993) *
               C48010 * C48365) *
              C48394 +
          (((C11056 + C11057) * C2642 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C2635 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C2641) +
            (C11058 + C11059) * C47993) *
               C48010 * C16333 +
           ((C11567 + C11566) * C2642 -
            ((C26852 + C26853) * C2635 + (C26854 + C26855) * C2641) +
            (C11569 + C11568) * C47993) *
               C48010 * C48365) *
              C48391 +
          (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                C2641 +
            (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                C2635 -
            (C11064 + C11065) * C2642 - (C11066 + C11067) * C47993) *
               C48010 * C16333 +
           ((C27278 + C27279) * C2641 + (C27280 + C27281) * C2635 -
            (C13011 + C13010) * C2642 - (C13013 + C13012) * C47993) *
               C48010 * C48365) *
              C48382 +
          (((C13152 + C13153) * C2642 -
            ((C10634 * C2028 + C48367 * C2036 + C10633 * C2025 +
              C10631 * C2035) *
                 C2635 +
             (C10634 * C2018 + C48367 * C2027 + C10633 * C2017 +
              C10631 * C2026) *
                 C2641) +
            (C13154 + C13155) * C47993) *
               C48010 * C16333 +
           ((C10633 * C2418 + C10631 * C2422 + C10634 * C6980 +
             C48367 * C6983) *
                C2642 -
            ((C28596 + C28597) * C2635 + (C28598 + C28599) * C2641) +
            (C10633 * C2423 + C10631 * C2427 + C10634 * C6984 +
             C48367 * C6986) *
                C47993) *
               C48010 * C48365) *
              C48363) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C47011 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C47988 -
            (C10668 + C10669) * C47007 - (C10670 + C10671) * C47996 +
            (C10672 + C10673) * C47017 + (C10674 + C10675) * C2901) *
               C48010 * C16333 +
           ((C26236 + C26237) * C47011 + (C26238 + C26239) * C47988 -
            (C10863 + C10862) * C47007 - (C10865 + C10864) * C47996 +
            (C10867 + C10866) * C47017 + (C10869 + C10868) * C2901) *
               C48010 * C48365) *
              C48130 +
          (((C11056 + C11057) * C47007 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47988 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C47011) +
            (C11058 + C11059) * C47996 - (C11060 + C11061) * C47017 -
            (C11062 + C11063) * C2901) *
               C48010 * C16333 +
           ((C11567 + C11566) * C47007 -
            ((C26852 + C26853) * C47988 + (C26854 + C26855) * C47011) +
            (C11569 + C11568) * C47996 - (C11571 + C11570) * C47017 -
            (C11573 + C11572) * C2901) *
               C48010 * C48365) *
              C48137 +
          (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                C47011 +
            (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                C47988 -
            (C11064 + C11065) * C47007 - (C11066 + C11067) * C47996 +
            (C11068 + C11069) * C47017 + (C11070 + C11071) * C2901) *
               C48010 * C16333 +
           ((C27278 + C27279) * C47011 + (C27280 + C27281) * C47988 -
            (C13011 + C13010) * C47007 - (C13013 + C13012) * C47996 +
            (C10633 * C1295 + C10631 * C1305 + C10634 * C2419 +
             C48367 * C2424) *
                C47017 +
            (C10633 * C1304 + C10631 * C1322 + C10634 * C2425 +
             C48367 * C2428) *
                C2901) *
               C48010 * C48365) *
              C3806) *
         C48035) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C2533 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48392 -
            (C10668 + C10669) * C2534 - (C10670 + C10671) * C48385 +
            (C10672 + C10673) * C2535 + (C10674 + C10675) * C48372 -
            (C10676 + C10677) * C2536 - (C10678 + C10679) * C48351) *
               C48010 * C16333 +
           ((C26236 + C26237) * C2533 + (C26238 + C26239) * C48392 -
            (C10863 + C10862) * C2534 - (C10865 + C10864) * C48385 +
            (C10867 + C10866) * C2535 + (C10869 + C10868) * C48372 -
            (C11211 + C11210) * C2536 - (C11213 + C11212) * C48351) *
               C48010 * C48365) *
              C3298 +
          (((C11056 + C11057) * C2534 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C48392 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C2533) +
            (C11058 + C11059) * C48385 - (C11060 + C11061) * C2535 -
            (C11062 + C11063) * C48372 + (C11352 + C11353) * C2536 +
            (C11354 + C11355) * C48351) *
               C48010 * C16333 +
           ((C11567 + C11566) * C2534 -
            ((C26852 + C26853) * C48392 + (C26854 + C26855) * C2533) +
            (C11569 + C11568) * C48385 - (C11571 + C11570) * C2535 -
            (C11573 + C11572) * C48372 +
            (C10633 * C938 + C10631 * C946 + C10634 * C2185 + C48367 * C2186) *
                C2536 +
            (C10633 * C947 + C10631 * C953 + C10634 * C2187 + C48367 * C2188) *
                C48351) *
               C48010 * C48365) *
              C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C2641 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C2635 -
             (C10668 + C10669) * C2642 - (C10670 + C10671) * C47993) *
                C48010 * C16333 +
            ((C26236 + C26237) * C2641 + (C26238 + C26239) * C2635 -
             (C10863 + C10862) * C2642 - (C10865 + C10864) * C47993) *
                C48010 * C48365) *
               C3298 +
           (((C11056 + C11057) * C2642 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C2635 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C2641) +
             (C11058 + C11059) * C47993) *
                C48010 * C16333 +
            ((C11567 + C11566) * C2642 -
             ((C26852 + C26853) * C2635 + (C26854 + C26855) * C2641) +
             (C11569 + C11568) * C47993) *
                C48010 * C48365) *
               C48134) *
              C48386 +
          ((((C10862 + C10863) * C2642 -
             ((C26239 + C26238) * C2635 + (C26237 + C26236) * C2641) +
             (C10864 + C10865) * C47993) *
                C48010 * C16333 +
            ((C10871 + C10870) * C2642 -
             ((C26240 + C26241) * C2635 + (C26242 + C26243) * C2641) +
             (C10873 + C10872) * C47993) *
                C48010 * C48365) *
               C3298 +
           (((C26855 + C26854) * C2641 + (C26853 + C26852) * C2635 -
             (C11566 + C11567) * C2642 - (C11568 + C11569) * C47993) *
                C48010 * C16333 +
            ((C27282 + C27283) * C2641 + (C27284 + C27285) * C2635 -
             (C12293 + C12292) * C2642 - (C12295 + C12294) * C47993) *
                C48010 * C48365) *
               C48134) *
              C48374 +
          ((((C26243 + C26242) * C2641 + (C26241 + C26240) * C2635 -
             (C10870 + C10871) * C2642 - (C10872 + C10873) * C47993) *
                C48010 * C16333 +
            ((C27100 + C27101) * C2641 + (C27102 + C27103) * C2635 -
             (C12087 + C12086) * C2642 - (C12089 + C12088) * C47993) *
                C48010 * C48365) *
               C3298 +
           (((C12292 + C12293) * C2642 -
             ((C27285 + C27284) * C2635 + (C27283 + C27282) * C2641) +
             (C12294 + C12295) * C47993) *
                C48010 * C16333 +
            ((C10633 * C1714 + C10631 * C1718 + C10634 * C6040 +
              C48367 * C6043) *
                 C2642 -
             ((C27752 + C27753) * C2635 + (C27754 + C27755) * C2641) +
             (C10633 * C1719 + C10631 * C1723 + C10634 * C6044 +
              C48367 * C6046) *
                 C47993) *
                C48010 * C48365) *
               C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C665 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C659 -
            (C10668 + C10669) * C666 - (C10670 + C10671) * C660 +
            (C10672 + C10673) * C667 + (C10674 + C10675) * C661 -
            (C10676 + C10677) * C668 - (C10678 + C10679) * C48351) *
               C48010 * C16333 +
           ((C26236 + C26237) * C665 + (C26238 + C26239) * C659 -
            (C10863 + C10862) * C666 - (C10865 + C10864) * C660 +
            (C10867 + C10866) * C667 + (C10869 + C10868) * C661 -
            (C11211 + C11210) * C668 - (C11213 + C11212) * C48351) *
               C48010 * C48365) *
              C48047 * C48315 +
          (((C10862 + C10863) * C666 -
            ((C26239 + C26238) * C659 + (C26237 + C26236) * C665) +
            (C10864 + C10865) * C660 - (C10866 + C10867) * C667 -
            (C10868 + C10869) * C661 + (C11210 + C11211) * C668 +
            (C11212 + C11213) * C48351) *
               C48010 * C16333 +
           ((C10871 + C10870) * C666 -
            ((C26240 + C26241) * C659 + (C26242 + C26243) * C665) +
            (C10873 + C10872) * C660 - (C10875 + C10874) * C667 -
            (C10877 + C10876) * C661 +
            (C10633 * C304 + C10631 * C322 + C10634 * C1599 + C48367 * C1600) *
                C668 +
            (C10633 * C323 + C10631 * C334 + C10634 * C1601 + C48367 * C1602) *
                C48351) *
               C48010 * C48365) *
              C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C47001 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48298 -
            (C10668 + C10669) * C46982 - (C10670 + C10671) * C47993) *
               C48010 * C16333 +
           ((C26236 + C26237) * C47001 + (C26238 + C26239) * C48298 -
            (C10863 + C10862) * C46982 - (C10865 + C10864) * C47993) *
               C48010 * C48365) *
              C48047 * C1431 +
          (((C10862 + C10863) * C46982 -
            ((C26239 + C26238) * C48298 + (C26237 + C26236) * C47001) +
            (C10864 + C10865) * C47993) *
               C48010 * C16333 +
           ((C10871 + C10870) * C46982 -
            ((C26240 + C26241) * C48298 + (C26242 + C26243) * C47001) +
            (C10873 + C10872) * C47993) *
               C48010 * C48365) *
              C48047 * C1432 +
          (((C26243 + C26242) * C47001 + (C26241 + C26240) * C48298 -
            (C10870 + C10871) * C46982 - (C10872 + C10873) * C47993) *
               C48010 * C16333 +
           ((C27100 + C27101) * C47001 + (C27102 + C27103) * C48298 -
            (C12087 + C12086) * C46982 - (C12089 + C12088) * C47993) *
               C48010 * C48365) *
              C48047 * C1433 +
          (((C12086 + C12087) * C46982 -
            ((C27103 + C27102) * C48298 + (C27101 + C27100) * C47001) +
            (C12088 + C12089) * C47993) *
               C48010 * C16333 +
           ((C10633 * C1165 + C10631 * C1175 + C10634 * C6588 +
             C48367 * C6591) *
                C46982 -
            ((C27104 + C27105) * C48298 + (C27106 + C27107) * C47001) +
            (C10633 * C1176 + C10631 * C1183 + C10634 * C6592 +
             C48367 * C6594) *
                C47993) *
               C48010 * C48365) *
              C48047 * C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C293 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C287 -
             (C10668 + C10669) * C294 - (C10670 + C10671) * C288 +
             (C10672 + C10673) * C295 + (C10674 + C10675) * C48339) *
                C48010 * C16333 +
            ((C26236 + C26237) * C293 + (C26238 + C26239) * C287 -
             (C10863 + C10862) * C294 - (C10865 + C10864) * C288 +
             (C10867 + C10866) * C295 + (C10869 + C10868) * C48339) *
                C48010 * C48365) *
               C48316 +
           (((C11056 + C11057) * C294 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C287 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C293) +
             (C11058 + C11059) * C288 - (C11060 + C11061) * C295 -
             (C11062 + C11063) * C48339) *
                C48010 * C16333 +
            ((C11567 + C11566) * C294 -
             ((C26852 + C26853) * C287 + (C26854 + C26855) * C293) +
             (C11569 + C11568) * C288 - (C11571 + C11570) * C295 -
             (C11573 + C11572) * C48339) *
                C48010 * C48365) *
               C48134) *
              C48315 +
          ((((C10862 + C10863) * C294 -
             ((C26239 + C26238) * C287 + (C26237 + C26236) * C293) +
             (C10864 + C10865) * C288 - (C10866 + C10867) * C295 -
             (C10868 + C10869) * C48339) *
                C48010 * C16333 +
            ((C10871 + C10870) * C294 -
             ((C26240 + C26241) * C287 + (C26242 + C26243) * C293) +
             (C10873 + C10872) * C288 - (C10875 + C10874) * C295 -
             (C10877 + C10876) * C48339) *
                C48010 * C48365) *
               C48316 +
           (((C26855 + C26854) * C293 + (C26853 + C26852) * C287 -
             (C11566 + C11567) * C294 - (C11568 + C11569) * C288 +
             (C11570 + C11571) * C295 + (C11572 + C11573) * C48339) *
                C48010 * C16333 +
            ((C10633 * C1300 + C10631 * C1315 + C10634 * C1301 +
              C48367 * C1316) *
                 C293 +
             (C10633 * C1314 + C10631 * C1327 + C10634 * C1317 +
              C48367 * C1328) *
                 C287 -
             (C12293 + C12292) * C294 - (C12295 + C12294) * C288 +
             (C10633 * C1298 + C10631 * C1311 + C10634 * C1303 +
              C48367 * C1320) *
                 C295 +
             (C10633 * C1310 + C10631 * C1325 + C10634 * C1321 +
              C48367 * C1330) *
                 C48339) *
                C48010 * C48365) *
               C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C16333 +
            ((C26236 + C26237) * C1160 + (C26238 + C26239) * C47983) * C48010 *
                C48365) *
               C48316 -
           (((C26852 + C26853) * C47983 + (C26854 + C26855) * C1160) * C48010 *
                C48365 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C48010 * C16333) *
               C48134) *
              C1431 +
          ((((C26855 + C26854) * C1160 + (C26853 + C26852) * C47983) * C48010 *
                C16333 +
            ((C27282 + C27283) * C1160 + (C27284 + C27285) * C47983) * C48010 *
                C48365) *
               C48134 -
           (((C26240 + C26241) * C47983 + (C26242 + C26243) * C1160) * C48010 *
                C48365 +
            ((C26239 + C26238) * C47983 + (C26237 + C26236) * C1160) * C48010 *
                C16333) *
               C48316) *
              C1432 +
          ((((C26243 + C26242) * C1160 + (C26241 + C26240) * C47983) * C48010 *
                C16333 +
            ((C27100 + C27101) * C1160 + (C27102 + C27103) * C47983) * C48010 *
                C48365) *
               C48316 -
           (((C27752 + C27753) * C47983 + (C27754 + C27755) * C1160) * C48010 *
                C48365 +
            ((C27285 + C27284) * C47983 + (C27283 + C27282) * C1160) * C48010 *
                C16333) *
               C48134) *
              C1433 +
          ((((C27755 + C27754) * C1160 + (C27753 + C27752) * C47983) * C48010 *
                C16333 +
            ((C10633 * C6587 + C10631 * C6589 + C10634 * C22667 +
              C48367 * C22668) *
                 C1160 +
             (C10633 * C6590 + C10631 * C6593 + C10634 * C22669 +
              C48367 * C22670) *
                 C47983) *
                C48010 * C48365) *
               C48134 -
           (((C27104 + C27105) * C47983 + (C27106 + C27107) * C1160) * C48010 *
                C48365 +
            ((C27103 + C27102) * C47983 + (C27101 + C27100) * C1160) * C48010 *
                C16333) *
               C48316) *
              C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C293 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C287 -
            (C10668 + C10669) * C294 - (C10670 + C10671) * C288 +
            (C10672 + C10673) * C295 + (C10674 + C10675) * C48339) *
               C48010 * C16333 +
           ((C26236 + C26237) * C293 + (C26238 + C26239) * C287 -
            (C10863 + C10862) * C294 - (C10865 + C10864) * C288 +
            (C10867 + C10866) * C295 + (C10869 + C10868) * C48339) *
               C48010 * C48365) *
              C48047 * C48386 +
          (((C10862 + C10863) * C294 -
            ((C26239 + C26238) * C287 + (C26237 + C26236) * C293) +
            (C10864 + C10865) * C288 - (C10866 + C10867) * C295 -
            (C10868 + C10869) * C48339) *
               C48010 * C16333 +
           ((C10871 + C10870) * C294 -
            ((C26240 + C26241) * C287 + (C26242 + C26243) * C293) +
            (C10873 + C10872) * C288 - (C10875 + C10874) * C295 -
            (C10877 + C10876) * C48339) *
               C48010 * C48365) *
              C48047 * C48374 +
          (((C26243 + C26242) * C293 + (C26241 + C26240) * C287 -
            (C10870 + C10871) * C294 - (C10872 + C10873) * C288 +
            (C10874 + C10875) * C295 + (C10876 + C10877) * C48339) *
               C48010 * C16333 +
           ((C10633 * C1163 + C10631 * C1172 + C10634 * C1713 +
             C48367 * C1716) *
                C293 +
            (C10633 * C1171 + C10631 * C1181 + C10634 * C1717 +
             C48367 * C1722) *
                C287 -
            (C12087 + C12086) * C294 - (C12089 + C12088) * C288 +
            (C10633 * C1161 + C10631 * C1168 + C10634 * C1715 +
             C48367 * C1720) *
                C295 +
            (C10633 * C1167 + C10631 * C1179 + C10634 * C1721 +
             C48367 * C1724) *
                C48339) *
               C48010 * C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
               C114 +
           (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
               C102 -
           (C10668 + C10669) * C115 - (C10670 + C10671) * C103 +
           (C10672 + C10673) * C116 + (C10674 + C10675) * C104 -
           (C10676 + C10677) * C117 - (C10678 + C10679) * C105 +
           (C10680 + C10681) * C118 + (C10682 + C10683) * C106) *
              C48010 * C16333 +
          ((C10633 * C297 + C10631 * C308 + C10634 * C935 + C48367 * C940) *
               C114 +
           (C10633 * C307 + C10631 * C326 + C10634 * C941 + C48367 * C950) *
               C102 -
           (C10863 + C10862) * C115 - (C10865 + C10864) * C103 +
           (C10867 + C10866) * C116 + (C10869 + C10868) * C104 -
           (C11211 + C11210) * C117 - (C11213 + C11212) * C105 +
           (C10633 * C300 + C10631 * C314 + C10634 * C939 + C48367 * C948) *
               C118 +
           (C10633 * C315 + C10631 * C330 + C10634 * C949 + C48367 * C954) *
               C106) *
              C48010 * C48365) *
         C48047 * C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C293 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C287 -
            (C10668 + C10669) * C294 - (C10670 + C10671) * C288 +
            (C10672 + C10673) * C295 + (C10674 + C10675) * C48339) *
               C48010 * C16333 +
           ((C26236 + C26237) * C293 + (C26238 + C26239) * C287 -
            (C10863 + C10862) * C294 - (C10865 + C10864) * C288 +
            (C10867 + C10866) * C295 + (C10869 + C10868) * C48339) *
               C48010 * C48365) *
              C48387 +
          (((C11056 + C11057) * C294 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C287 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C293) +
            (C11058 + C11059) * C288 - (C11060 + C11061) * C295 -
            (C11062 + C11063) * C48339) *
               C48010 * C16333 +
           ((C11567 + C11566) * C294 -
            ((C10634 * C1308 + C48367 * C1324 + C10633 * C941 + C10631 * C950) *
                 C287 +
             (C10634 * C1297 + C48367 * C1309 + C10633 * C935 + C10631 * C940) *
                 C293) +
            (C11569 + C11568) * C288 - (C11571 + C11570) * C295 -
            (C11573 + C11572) * C48339) *
               C48010 * C48365) *
              C48376 +
          (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                C293 +
            (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                C287 -
            (C11064 + C11065) * C294 - (C11066 + C11067) * C288 +
            (C11068 + C11069) * C295 + (C11070 + C11071) * C48339) *
               C48010 * C16333 +
           ((C10633 * C1297 + C10631 * C1309 + C10634 * C2417 +
             C48367 * C2420) *
                C293 +
            (C10633 * C1308 + C10631 * C1324 + C10634 * C2421 +
             C48367 * C2426) *
                C287 -
            (C13011 + C13010) * C294 - (C13013 + C13012) * C288 +
            (C10633 * C1295 + C10631 * C1305 + C10634 * C2419 +
             C48367 * C2424) *
                C295 +
            (C10633 * C1304 + C10631 * C1322 + C10634 * C2425 +
             C48367 * C2428) *
                C48339) *
               C48010 * C48365) *
              C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1089 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48383 -
            (C10668 + C10669) * C1090 - (C10670 + C10671) * C48370 +
            (C10672 + C10673) * C1091 + (C10674 + C10675) * C48339) *
               C48010 * C16333 +
           ((C26236 + C26237) * C1089 + (C26238 + C26239) * C48383 -
            (C10863 + C10862) * C1090 - (C10865 + C10864) * C48370 +
            (C10867 + C10866) * C1091 + (C10869 + C10868) * C48339) *
               C48010 * C48365) *
              C48047 * C1086 +
          (((C10862 + C10863) * C1090 -
            ((C26239 + C26238) * C48383 + (C26237 + C26236) * C1089) +
            (C10864 + C10865) * C48370 - (C10866 + C10867) * C1091 -
            (C10868 + C10869) * C48339) *
               C48010 * C16333 +
           ((C10871 + C10870) * C1090 -
            ((C26240 + C26241) * C48383 + (C26242 + C26243) * C1089) +
            (C10873 + C10872) * C48370 - (C10875 + C10874) * C1091 -
            (C10877 + C10876) * C48339) *
               C48010 * C48365) *
              C48047 * C1087 +
          (((C26243 + C26242) * C1089 + (C26241 + C26240) * C48383 -
            (C10870 + C10871) * C1090 - (C10872 + C10873) * C48370 +
            (C10874 + C10875) * C1091 + (C10876 + C10877) * C48339) *
               C48010 * C16333 +
           ((C10633 * C1163 + C10631 * C1172 + C10634 * C1713 +
             C48367 * C1716) *
                C1089 +
            (C10633 * C1171 + C10631 * C1181 + C10634 * C1717 +
             C48367 * C1722) *
                C48383 -
            (C12087 + C12086) * C1090 - (C12089 + C12088) * C48370 +
            (C10633 * C1161 + C10631 * C1168 + C10634 * C1715 +
             C48367 * C1720) *
                C1091 +
            (C10633 * C1167 + C10631 * C1179 + C10634 * C1721 +
             C48367 * C1724) *
                C48339) *
               C48010 * C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1160 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C47983) *
               C48010 * C16333 +
           ((C26236 + C26237) * C1160 + (C26238 + C26239) * C47983) * C48010 *
               C48365) *
              C48047 * C1155 -
          (((C26240 + C26241) * C47983 + (C26242 + C26243) * C1160) * C48010 *
               C48365 +
           ((C26239 + C26238) * C47983 + (C26237 + C26236) * C1160) * C48010 *
               C16333) *
              C48047 * C1156 +
          (((C26243 + C26242) * C1160 + (C26241 + C26240) * C47983) * C48010 *
               C16333 +
           ((C27100 + C27101) * C1160 + (C27102 + C27103) * C47983) * C48010 *
               C48365) *
              C48047 * C1157 -
          (((C27104 + C27105) * C47983 + (C27106 + C27107) * C1160) * C48010 *
               C48365 +
           ((C27103 + C27102) * C47983 + (C27101 + C27100) * C1160) * C48010 *
               C16333) *
              C48047 * C1158 +
          (((C27107 + C27106) * C1160 + (C27105 + C27104) * C47983) * C48010 *
               C16333 +
           ((C10633 * C5851 + C10631 * C5853 + C10634 * C23045 +
             C48367 * C23046) *
                C1160 +
            (C10633 * C5854 + C10631 * C5857 + C10634 * C23047 +
             C48367 * C23048) *
                C47983) *
               C48010 * C48365) *
              C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C1160 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C16333 +
            ((C26236 + C26237) * C1160 + (C26238 + C26239) * C47983) * C48010 *
                C48365) *
               C48387 -
           (((C26852 + C26853) * C47983 + (C26854 + C26855) * C1160) * C48010 *
                C48365 +
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C47983 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C1160) *
                C48010 * C16333) *
               C48376 +
           (((C10633 * C490 + C10631 * C505 + C10634 * C2017 + C48367 * C2026) *
                 C1160 +
             (C10633 * C506 + C10631 * C520 + C10634 * C2025 + C48367 * C2035) *
                 C47983) *
                C48010 * C16333 +
            ((C27278 + C27279) * C1160 + (C27280 + C27281) * C47983) * C48010 *
                C48365) *
               C48350) *
              C1086 +
          ((((C26855 + C26854) * C1160 + (C26853 + C26852) * C47983) * C48010 *
                C16333 +
            ((C27282 + C27283) * C1160 + (C27284 + C27285) * C47983) * C48010 *
                C48365) *
               C48376 -
           (((C26240 + C26241) * C47983 + (C26242 + C26243) * C1160) * C48010 *
                C48365 +
            ((C26239 + C26238) * C47983 + (C26237 + C26236) * C1160) * C48010 *
                C16333) *
               C48387 -
           (((C27286 + C27287) * C47983 + (C27288 + C27289) * C1160) * C48010 *
                C48365 +
            ((C27281 + C27280) * C47983 + (C27279 + C27278) * C1160) * C48010 *
                C16333) *
               C48350) *
              C1087 +
          ((((C26243 + C26242) * C1160 + (C26241 + C26240) * C47983) * C48010 *
                C16333 +
            ((C27100 + C27101) * C1160 + (C27102 + C27103) * C47983) * C48010 *
                C48365) *
               C48387 -
           (((C10634 * C6042 + C48367 * C6045 + C10633 * C1717 +
              C10631 * C1722) *
                 C47983 +
             (C10634 * C6039 + C48367 * C6041 + C10633 * C1713 +
              C10631 * C1716) *
                 C1160) *
                C48010 * C48365 +
            ((C27285 + C27284) * C47983 + (C27283 + C27282) * C1160) * C48010 *
                C16333) *
               C48376 +
           (((C27289 + C27288) * C1160 + (C27287 + C27286) * C47983) * C48010 *
                C16333 +
            ((C10633 * C6039 + C10631 * C6041 + C10634 * C23691 +
              C48367 * C23692) *
                 C1160 +
             (C10633 * C6042 + C10631 * C6045 + C10634 * C23693 +
              C48367 * C23694) *
                 C47983) *
                C48010 * C48365) *
               C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C665 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C659 -
            (C10668 + C10669) * C666 - (C10670 + C10671) * C660 +
            (C10672 + C10673) * C667 + (C10674 + C10675) * C661 -
            (C10676 + C10677) * C668 - (C10678 + C10679) * C48351) *
               C48010 * C16333 +
           ((C26236 + C26237) * C665 + (C26238 + C26239) * C659 -
            (C10863 + C10862) * C666 - (C10865 + C10864) * C660 +
            (C10867 + C10866) * C667 + (C10869 + C10868) * C661 -
            (C11211 + C11210) * C668 - (C11213 + C11212) * C48351) *
               C48010 * C48365) *
              C48316 +
          (((C11056 + C11057) * C666 -
            ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                 C659 +
             (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                 C665) +
            (C11058 + C11059) * C660 - (C11060 + C11061) * C667 -
            (C11062 + C11063) * C661 + (C11352 + C11353) * C668 +
            (C11354 + C11355) * C48351) *
               C48010 * C16333 +
           ((C11567 + C11566) * C666 -
            ((C10634 * C1308 + C48367 * C1324 + C10633 * C941 + C10631 * C950) *
                 C659 +
             (C10634 * C1297 + C48367 * C1309 + C10633 * C935 + C10631 * C940) *
                 C665) +
            (C11569 + C11568) * C660 - (C11571 + C11570) * C667 -
            (C11573 + C11572) * C661 +
            (C10633 * C938 + C10631 * C946 + C10634 * C2185 + C48367 * C2186) *
                C668 +
            (C10633 * C947 + C10631 * C953 + C10634 * C2187 + C48367 * C2188) *
                C48351) *
               C48010 * C48365) *
              C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                 C47001 +
             (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                 C48298 -
             (C10668 + C10669) * C46982 - (C10670 + C10671) * C47993) *
                C48010 * C16333 +
            ((C26236 + C26237) * C47001 + (C26238 + C26239) * C48298 -
             (C10863 + C10862) * C46982 - (C10865 + C10864) * C47993) *
                C48010 * C48365) *
               C48316 +
           (((C11056 + C11057) * C46982 -
             ((C10634 * C506 + C48367 * C520 + C10633 * C496 + C10631 * C515) *
                  C48298 +
              (C10634 * C490 + C48367 * C505 + C10633 * C486 + C10631 * C497) *
                  C47001) +
             (C11058 + C11059) * C47993) *
                C48010 * C16333 +
            ((C11567 + C11566) * C46982 -
             ((C26852 + C26853) * C48298 + (C26854 + C26855) * C47001) +
             (C11569 + C11568) * C47993) *
                C48010 * C48365) *
               C48134) *
              C1086 +
          ((((C10862 + C10863) * C46982 -
             ((C26239 + C26238) * C48298 + (C26237 + C26236) * C47001) +
             (C10864 + C10865) * C47993) *
                C48010 * C16333 +
            ((C10871 + C10870) * C46982 -
             ((C26240 + C26241) * C48298 + (C26242 + C26243) * C47001) +
             (C10873 + C10872) * C47993) *
                C48010 * C48365) *
               C48316 +
           (((C26855 + C26854) * C47001 + (C26853 + C26852) * C48298 -
             (C11566 + C11567) * C46982 - (C11568 + C11569) * C47993) *
                C48010 * C16333 +
            ((C27282 + C27283) * C47001 + (C27284 + C27285) * C48298 -
             (C12293 + C12292) * C46982 - (C12295 + C12294) * C47993) *
                C48010 * C48365) *
               C48134) *
              C1087 +
          ((((C26243 + C26242) * C47001 + (C26241 + C26240) * C48298 -
             (C10870 + C10871) * C46982 - (C10872 + C10873) * C47993) *
                C48010 * C16333 +
            ((C27100 + C27101) * C47001 + (C27102 + C27103) * C48298 -
             (C12087 + C12086) * C46982 - (C12089 + C12088) * C47993) *
                C48010 * C48365) *
               C48316 +
           (((C12292 + C12293) * C46982 -
             ((C27285 + C27284) * C48298 + (C27283 + C27282) * C47001) +
             (C12294 + C12295) * C47993) *
                C48010 * C16333 +
            ((C10633 * C1714 + C10631 * C1718 + C10634 * C6040 +
              C48367 * C6043) *
                 C46982 -
             ((C10634 * C6042 + C48367 * C6045 + C10633 * C1717 +
               C10631 * C1722) *
                  C48298 +
              (C10634 * C6039 + C48367 * C6041 + C10633 * C1713 +
               C10631 * C1716) *
                  C47001) +
             (C10633 * C1719 + C10631 * C1723 + C10634 * C6044 +
              C48367 * C6046) *
                 C47993) *
                C48010 * C48365) *
               C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
               C114 +
           (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
               C102 -
           (C10668 + C10669) * C115 - (C10670 + C10671) * C103 +
           (C10672 + C10673) * C116 + (C10674 + C10675) * C104 -
           (C10676 + C10677) * C117 - (C10678 + C10679) * C105 +
           (C10680 + C10681) * C118 + (C10682 + C10683) * C106) *
              C48010 * C16333 +
          ((C10633 * C297 + C10631 * C308 + C10634 * C935 + C48367 * C940) *
               C114 +
           (C10633 * C307 + C10631 * C326 + C10634 * C941 + C48367 * C950) *
               C102 -
           (C10863 + C10862) * C115 - (C10865 + C10864) * C103 +
           (C10867 + C10866) * C116 + (C10869 + C10868) * C104 -
           (C11211 + C11210) * C117 - (C11213 + C11212) * C105 +
           (C10633 * C300 + C10631 * C314 + C10634 * C939 + C48367 * C948) *
               C118 +
           (C10633 * C315 + C10631 * C330 + C10634 * C949 + C48367 * C954) *
               C106) *
              C48010 * C48365) *
         C48047 * C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C293 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C287 -
            (C10668 + C10669) * C294 - (C10670 + C10671) * C288 +
            (C10672 + C10673) * C295 + (C10674 + C10675) * C48339) *
               C48010 * C16333 +
           ((C26236 + C26237) * C293 + (C26238 + C26239) * C287 -
            (C10863 + C10862) * C294 - (C10865 + C10864) * C288 +
            (C10867 + C10866) * C295 + (C10869 + C10868) * C48339) *
               C48010 * C48365) *
              C48047 * C48386 +
          (((C10862 + C10863) * C294 -
            ((C26239 + C26238) * C287 + (C26237 + C26236) * C293) +
            (C10864 + C10865) * C288 - (C10866 + C10867) * C295 -
            (C10868 + C10869) * C48339) *
               C48010 * C16333 +
           ((C10871 + C10870) * C294 -
            ((C26240 + C26241) * C287 + (C26242 + C26243) * C293) +
            (C10873 + C10872) * C288 - (C10875 + C10874) * C295 -
            (C10877 + C10876) * C48339) *
               C48010 * C48365) *
              C48047 * C48374 +
          (((C26243 + C26242) * C293 + (C26241 + C26240) * C287 -
            (C10870 + C10871) * C294 - (C10872 + C10873) * C288 +
            (C10874 + C10875) * C295 + (C10876 + C10877) * C48339) *
               C48010 * C16333 +
           ((C10633 * C1163 + C10631 * C1172 + C10634 * C1713 +
             C48367 * C1716) *
                C293 +
            (C10633 * C1171 + C10631 * C1181 + C10634 * C1717 +
             C48367 * C1722) *
                C287 -
            (C12087 + C12086) * C294 - (C12089 + C12088) * C288 +
            (C10633 * C1161 + C10631 * C1168 + C10634 * C1715 +
             C48367 * C1720) *
                C295 +
            (C10633 * C1167 + C10631 * C1179 + C10634 * C1721 +
             C48367 * C1724) *
                C48339) *
               C48010 * C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1089 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C48383 -
            (C10668 + C10669) * C1090 - (C10670 + C10671) * C48370 +
            (C10672 + C10673) * C1091 + (C10674 + C10675) * C48339) *
               C48010 * C16333 +
           ((C26236 + C26237) * C1089 + (C26238 + C26239) * C48383 -
            (C10863 + C10862) * C1090 - (C10865 + C10864) * C48370 +
            (C10867 + C10866) * C1091 + (C10869 + C10868) * C48339) *
               C48010 * C48365) *
              C48047 * C1086 +
          (((C10862 + C10863) * C1090 -
            ((C26239 + C26238) * C48383 + (C26237 + C26236) * C1089) +
            (C10864 + C10865) * C48370 - (C10866 + C10867) * C1091 -
            (C10868 + C10869) * C48339) *
               C48010 * C16333 +
           ((C10871 + C10870) * C1090 -
            ((C26240 + C26241) * C48383 + (C26242 + C26243) * C1089) +
            (C10873 + C10872) * C48370 - (C10875 + C10874) * C1091 -
            (C10877 + C10876) * C48339) *
               C48010 * C48365) *
              C48047 * C1087 +
          (((C26243 + C26242) * C1089 + (C26241 + C26240) * C48383 -
            (C10870 + C10871) * C1090 - (C10872 + C10873) * C48370 +
            (C10874 + C10875) * C1091 + (C10876 + C10877) * C48339) *
               C48010 * C16333 +
           ((C10633 * C1163 + C10631 * C1172 + C10634 * C1713 +
             C48367 * C1716) *
                C1089 +
            (C10633 * C1171 + C10631 * C1181 + C10634 * C1717 +
             C48367 * C1722) *
                C48383 -
            (C12087 + C12086) * C1090 - (C12089 + C12088) * C48370 +
            (C10633 * C1161 + C10631 * C1168 + C10634 * C1715 +
             C48367 * C1720) *
                C1091 +
            (C10633 * C1167 + C10631 * C1179 + C10634 * C1721 +
             C48367 * C1724) *
                C48339) *
               C48010 * C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10633 * C119 + C10631 * C126 + C10634 * C486 + C48367 * C497) *
                C1160 +
            (C10633 * C127 + C10631 * C140 + C10634 * C496 + C48367 * C515) *
                C47983) *
               C48010 * C16333 +
           ((C26236 + C26237) * C1160 + (C26238 + C26239) * C47983) * C48010 *
               C48365) *
              C48047 * C1155 -
          (((C26240 + C26241) * C47983 + (C26242 + C26243) * C1160) * C48010 *
               C48365 +
           ((C26239 + C26238) * C47983 + (C26237 + C26236) * C1160) * C48010 *
               C16333) *
              C48047 * C1156 +
          (((C26243 + C26242) * C1160 + (C26241 + C26240) * C47983) * C48010 *
               C16333 +
           ((C27100 + C27101) * C1160 + (C27102 + C27103) * C47983) * C48010 *
               C48365) *
              C48047 * C1157 -
          (((C27104 + C27105) * C47983 + (C27106 + C27107) * C1160) * C48010 *
               C48365 +
           ((C27103 + C27102) * C47983 + (C27101 + C27100) * C1160) * C48010 *
               C16333) *
              C48047 * C1158 +
          (((C27107 + C27106) * C1160 + (C27105 + C27104) * C47983) * C48010 *
               C16333 +
           ((C10633 * C5851 + C10631 * C5853 + C10634 * C23045 +
             C48367 * C23046) *
                C1160 +
            (C10633 * C5854 + C10631 * C5857 + C10634 * C23047 +
             C48367 * C23048) *
                C47983) *
               C48010 * C48365) *
              C48047 * C1159)) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C47011 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C47988 -
            (C31682 + C31683) * C47007 - (C31684 + C31685) * C47996 +
            (C31686 + C31687) * C47017 + (C31688 + C31689) * C2901) *
               C16331 +
           ((C31683 + C31682) * C47011 + (C31685 + C31684) * C47988 -
            (C31687 + C31686) * C47007 - (C31689 + C31688) * C47996 +
            (C31691 + C31690) * C47017 + (C31693 + C31692) * C2901) *
               C48344) *
              C48235 * C48047 * C48090 +
          (((C31876 + C31877) * C47007 -
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C47988 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C47011) +
            (C31878 + C31879) * C47996 - (C31880 + C31881) * C47017 -
            (C31882 + C31883) * C2901) *
               C16331 +
           ((C31881 + C31880) * C47007 -
            ((C31879 + C31878) * C47988 + (C31877 + C31876) * C47011) +
            (C31883 + C31882) * C47996 - (C32225 + C32224) * C47017 -
            (C32227 + C32226) * C2901) *
               C48344) *
              C48235 * C48047 * C48097 +
          (((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                C47011 +
            (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                C47988 -
            (C31884 + C31885) * C47007 - (C31886 + C31887) * C47996 +
            (C31888 + C31889) * C47017 + (C31890 + C31891) * C2901) *
               C16331 +
           ((C31885 + C31884) * C47011 + (C31887 + C31886) * C47988 -
            (C31889 + C31888) * C47007 - (C31891 + C31890) * C47996 +
            (C31647 * C304 + C31645 * C322 + C31648 * C1599 + C48367 * C1600) *
                C47017 +
            (C31647 * C323 + C31645 * C334 + C31648 * C1601 + C48367 * C1602) *
                C2901) *
               C48344) *
              C48235 * C48047 * C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C2641 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C2635 -
             (C31682 + C31683) * C2642 - (C31684 + C31685) * C47993) *
                C16331 +
            ((C31683 + C31682) * C2641 + (C31685 + C31684) * C2635 -
             (C31687 + C31686) * C2642 - (C31689 + C31688) * C47993) *
                C48344) *
               C48235 * C48316 +
           (((C32070 + C32071) * C2642 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C2635 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C2641) +
             (C32072 + C32073) * C47993) *
                C16331 +
            ((C32075 + C32074) * C2642 -
             ((C32073 + C32072) * C2635 + (C32071 + C32070) * C2641) +
             (C32077 + C32076) * C47993) *
                C48344) *
               C48235 * C48134) *
              C48090 +
          ((((C31876 + C31877) * C2642 -
             ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                  C2635 +
              (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                  C2641) +
             (C31878 + C31879) * C47993) *
                C16331 +
            ((C31881 + C31880) * C2642 -
             ((C31879 + C31878) * C2635 + (C31877 + C31876) * C2641) +
             (C31883 + C31882) * C47993) *
                C48344) *
               C48235 * C48316 +
           (((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C2641 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C2635 -
             (C32580 + C32581) * C2642 - (C32582 + C32583) * C47993) *
                C16331 +
            ((C32581 + C32580) * C2641 + (C32583 + C32582) * C2635 -
             (C32585 + C32584) * C2642 - (C32587 + C32586) * C47993) *
                C48344) *
               C48235 * C48134) *
              C48097 +
          ((((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                 C2641 +
             (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                 C2635 -
             (C31884 + C31885) * C2642 - (C31886 + C31887) * C47993) *
                C16331 +
            ((C31885 + C31884) * C2641 + (C31887 + C31886) * C2635 -
             (C31889 + C31888) * C2642 - (C31891 + C31890) * C47993) *
                C48344) *
               C48235 * C48316 +
           (((C33306 + C33307) * C2642 -
             ((C31648 * C1317 + C48367 * C1328 + C31647 * C1314 +
               C31645 * C1327) *
                  C2635 +
              (C31648 * C1301 + C48367 * C1316 + C31647 * C1300 +
               C31645 * C1315) *
                  C2641) +
             (C33308 + C33309) * C47993) *
                C16331 +
            ((C31647 * C1298 + C31645 * C1311 + C31648 * C1303 +
              C48367 * C1320) *
                 C2642 -
             ((C33309 + C33308) * C2635 + (C33307 + C33306) * C2641) +
             (C31647 * C1310 + C31645 * C1325 + C31648 * C1321 +
              C48367 * C1330) *
                 C47993) *
                C48344) *
               C48235 * C48134) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C2641 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C2635 -
            (C31682 + C31683) * C2642 - (C31684 + C31685) * C47993) *
               C16331 +
           ((C31683 + C31682) * C2641 + (C31685 + C31684) * C2635 -
            (C31687 + C31686) * C2642 - (C31689 + C31688) * C47993) *
               C48344) *
              C48235 * C48047 * C48393 +
          (((C31876 + C31877) * C2642 -
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C2635 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C2641) +
            (C31878 + C31879) * C47993) *
               C16331 +
           ((C31881 + C31880) * C2642 -
            ((C31879 + C31878) * C2635 + (C31877 + C31876) * C2641) +
            (C31883 + C31882) * C47993) *
               C48344) *
              C48235 * C48047 * C48389 +
          (((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                C2641 +
            (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                C2635 -
            (C31884 + C31885) * C2642 - (C31886 + C31887) * C47993) *
               C16331 +
           ((C31885 + C31884) * C2641 + (C31887 + C31886) * C2635 -
            (C31889 + C31888) * C2642 - (C31891 + C31890) * C47993) *
               C48344) *
              C48235 * C48047 * C48379 +
          (((C33100 + C33101) * C2642 -
            ((C31648 * C1717 + C48367 * C1722 + C31647 * C1171 +
              C31645 * C1181) *
                 C2635 +
             (C31648 * C1713 + C48367 * C1716 + C31647 * C1163 +
              C31645 * C1172) *
                 C2641) +
            (C33102 + C33103) * C47993) *
               C16331 +
           ((C31647 * C1161 + C31645 * C1168 + C31648 * C1715 +
             C48367 * C1720) *
                C2642 -
            ((C33103 + C33102) * C2635 + (C33101 + C33100) * C2641) +
            (C31647 * C1167 + C31645 * C1179 + C31648 * C1721 +
             C48367 * C1724) *
                C47993) *
               C48344) *
              C48235 * C48047 * C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C2533 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48392 -
            (C31682 + C31683) * C2534 - (C31684 + C31685) * C48385 +
            (C31686 + C31687) * C2535 + (C31688 + C31689) * C48372 -
            (C31690 + C31691) * C2536 - (C31692 + C31693) * C48351) *
               C16331 +
           ((C31683 + C31682) * C2533 + (C31685 + C31684) * C48392 -
            (C31687 + C31686) * C2534 - (C31689 + C31688) * C48385 +
            (C31691 + C31690) * C2535 + (C31693 + C31692) * C48372 -
            (C31695 + C31694) * C2536 - (C31697 + C31696) * C48351) *
               C48344) *
              C48235 * C48047 * C2531 +
          (((C31876 + C31877) * C2534 -
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C48392 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C2533) +
            (C31878 + C31879) * C48385 - (C31880 + C31881) * C2535 -
            (C31882 + C31883) * C48372 + (C32224 + C32225) * C2536 +
            (C32226 + C32227) * C48351) *
               C16331 +
           ((C31881 + C31880) * C2534 -
            ((C31879 + C31878) * C48392 + (C31877 + C31876) * C2533) +
            (C31883 + C31882) * C48385 - (C32225 + C32224) * C2535 -
            (C32227 + C32226) * C48372 +
            (C31647 * C300 + C31645 * C314 + C31648 * C939 + C48367 * C948) *
                C2536 +
            (C31647 * C315 + C31645 * C330 + C31648 * C949 + C48367 * C954) *
                C48351) *
               C48344) *
              C48235 * C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C2641 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C2635 -
             (C31682 + C31683) * C2642 - (C31684 + C31685) * C47993) *
                C16331 +
            ((C31683 + C31682) * C2641 + (C31685 + C31684) * C2635 -
             (C31687 + C31686) * C2642 - (C31689 + C31688) * C47993) *
                C48344) *
               C48235 * C48387 +
           (((C32070 + C32071) * C2642 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C2635 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C2641) +
             (C32072 + C32073) * C47993) *
                C16331 +
            ((C32075 + C32074) * C2642 -
             ((C32073 + C32072) * C2635 + (C32071 + C32070) * C2641) +
             (C32077 + C32076) * C47993) *
                C48344) *
               C48235 * C48376 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C2641 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C2635 -
             (C32078 + C32079) * C2642 - (C32080 + C32081) * C47993) *
                C16331 +
            ((C32079 + C32078) * C2641 + (C32081 + C32080) * C2635 -
             (C32083 + C32082) * C2642 - (C32085 + C32084) * C47993) *
                C48344) *
               C48235 * C48350) *
              C2531 +
          ((((C31876 + C31877) * C2642 -
             ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                  C2635 +
              (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                  C2641) +
             (C31878 + C31879) * C47993) *
                C16331 +
            ((C31881 + C31880) * C2642 -
             ((C31879 + C31878) * C2635 + (C31877 + C31876) * C2641) +
             (C31883 + C31882) * C47993) *
                C48344) *
               C48235 * C48387 +
           (((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C2641 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C2635 -
             (C32580 + C32581) * C2642 - (C32582 + C32583) * C47993) *
                C16331 +
            ((C32581 + C32580) * C2641 + (C32583 + C32582) * C2635 -
             (C32585 + C32584) * C2642 - (C32587 + C32586) * C47993) *
                C48344) *
               C48235 * C48376 +
           (((C34016 + C34017) * C2642 -
             ((C31648 * C2421 + C48367 * C2426 + C31647 * C1308 +
               C31645 * C1324) *
                  C2635 +
              (C31648 * C2417 + C48367 * C2420 + C31647 * C1297 +
               C31645 * C1309) *
                  C2641) +
             (C34018 + C34019) * C47993) *
                C16331 +
            ((C31647 * C1295 + C31645 * C1305 + C31648 * C2419 +
              C48367 * C2424) *
                 C2642 -
             ((C34019 + C34018) * C2635 + (C34017 + C34016) * C2641) +
             (C31647 * C1304 + C31645 * C1322 + C31648 * C2425 +
              C48367 * C2428) *
                 C47993) *
                C48344) *
               C48235 * C48350) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C47011 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47988 -
             (C31682 + C31683) * C47007 - (C31684 + C31685) * C47996 +
             (C31686 + C31687) * C47017 + (C31688 + C31689) * C2901) *
                C16331 +
            ((C31683 + C31682) * C47011 + (C31685 + C31684) * C47988 -
             (C31687 + C31686) * C47007 - (C31689 + C31688) * C47996 +
             (C31691 + C31690) * C47017 + (C31693 + C31692) * C2901) *
                C48344) *
               C48235 * C48316 +
           (((C32070 + C32071) * C47007 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C47988 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C47011) +
             (C32072 + C32073) * C47996 - (C32074 + C32075) * C47017 -
             (C32076 + C32077) * C2901) *
                C16331 +
            ((C32075 + C32074) * C47007 -
             ((C32073 + C32072) * C47988 + (C32071 + C32070) * C47011) +
             (C32077 + C32076) * C47996 - (C32367 + C32366) * C47017 -
             (C32369 + C32368) * C2901) *
                C48344) *
               C48235 * C48134) *
              C2531 +
          ((((C31876 + C31877) * C47007 -
             ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                  C47988 +
              (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                  C47011) +
             (C31878 + C31879) * C47996 - (C31880 + C31881) * C47017 -
             (C31882 + C31883) * C2901) *
                C16331 +
            ((C31881 + C31880) * C47007 -
             ((C31879 + C31878) * C47988 + (C31877 + C31876) * C47011) +
             (C31883 + C31882) * C47996 - (C32225 + C32224) * C47017 -
             (C32227 + C32226) * C2901) *
                C48344) *
               C48235 * C48316 +
           (((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C47011 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C47988 -
             (C32580 + C32581) * C47007 - (C32582 + C32583) * C47996 +
             (C32584 + C32585) * C47017 + (C32586 + C32587) * C2901) *
                C16331 +
            ((C32581 + C32580) * C47011 + (C32583 + C32582) * C47988 -
             (C32585 + C32584) * C47007 - (C32587 + C32586) * C47996 +
             (C31647 * C938 + C31645 * C946 + C31648 * C2185 + C48367 * C2186) *
                 C47017 +
             (C31647 * C947 + C31645 * C953 + C31648 * C2187 + C48367 * C2188) *
                 C2901) *
                C48344) *
               C48235 * C48134) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C2533 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48392 -
            (C31682 + C31683) * C2534 - (C31684 + C31685) * C48385 +
            (C31686 + C31687) * C2535 + (C31688 + C31689) * C48372 -
            (C31690 + C31691) * C2536 - (C31692 + C31693) * C48351) *
               C16331 +
           ((C31683 + C31682) * C2533 + (C31685 + C31684) * C48392 -
            (C31687 + C31686) * C2534 - (C31689 + C31688) * C48385 +
            (C31691 + C31690) * C2535 + (C31693 + C31692) * C48372 -
            (C31695 + C31694) * C2536 - (C31697 + C31696) * C48351) *
               C48344) *
              C48235 * C48047 * C2531 +
          (((C31876 + C31877) * C2534 -
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C48392 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C2533) +
            (C31878 + C31879) * C48385 - (C31880 + C31881) * C2535 -
            (C31882 + C31883) * C48372 + (C32224 + C32225) * C2536 +
            (C32226 + C32227) * C48351) *
               C16331 +
           ((C31881 + C31880) * C2534 -
            ((C31879 + C31878) * C48392 + (C31877 + C31876) * C2533) +
            (C31883 + C31882) * C48385 - (C32225 + C32224) * C2535 -
            (C32227 + C32226) * C48372 +
            (C31647 * C300 + C31645 * C314 + C31648 * C939 + C48367 * C948) *
                C2536 +
            (C31647 * C315 + C31645 * C330 + C31648 * C949 + C48367 * C954) *
                C48351) *
               C48344) *
              C48235 * C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C2641 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C2635 -
            (C31682 + C31683) * C2642 - (C31684 + C31685) * C47993) *
               C16331 +
           ((C31683 + C31682) * C2641 + (C31685 + C31684) * C2635 -
            (C31687 + C31686) * C2642 - (C31689 + C31688) * C47993) *
               C48344) *
              C48235 * C48047 * C48393 +
          (((C31876 + C31877) * C2642 -
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C2635 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C2641) +
            (C31878 + C31879) * C47993) *
               C16331 +
           ((C31881 + C31880) * C2642 -
            ((C31879 + C31878) * C2635 + (C31877 + C31876) * C2641) +
            (C31883 + C31882) * C47993) *
               C48344) *
              C48235 * C48047 * C48389 +
          (((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                C2641 +
            (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                C2635 -
            (C31884 + C31885) * C2642 - (C31886 + C31887) * C47993) *
               C16331 +
           ((C31885 + C31884) * C2641 + (C31887 + C31886) * C2635 -
            (C31889 + C31888) * C2642 - (C31891 + C31890) * C47993) *
               C48344) *
              C48235 * C48047 * C48379 +
          (((C33100 + C33101) * C2642 -
            ((C31648 * C1717 + C48367 * C1722 + C31647 * C1171 +
              C31645 * C1181) *
                 C2635 +
             (C31648 * C1713 + C48367 * C1716 + C31647 * C1163 +
              C31645 * C1172) *
                 C2641) +
            (C33102 + C33103) * C47993) *
               C16331 +
           ((C31647 * C1161 + C31645 * C1168 + C31648 * C1715 +
             C48367 * C1720) *
                C2642 -
            ((C33103 + C33102) * C2635 + (C33101 + C33100) * C2641) +
            (C31647 * C1167 + C31645 * C1179 + C31648 * C1721 +
             C48367 * C1724) *
                C47993) *
               C48344) *
              C48235 * C48047 * C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C47001 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C48298 -
             (C31682 + C31683) * C46982 - (C31684 + C31685) * C47993) *
                C16331 +
            ((C31683 + C31682) * C47001 + (C31685 + C31684) * C48298 -
             (C31687 + C31686) * C46982 - (C31689 + C31688) * C47993) *
                C48344) *
               C48235 * C3298 +
           (((C32070 + C32071) * C46982 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C48298 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C47001) +
             (C32072 + C32073) * C47993) *
                C16331 +
            ((C32075 + C32074) * C46982 -
             ((C32073 + C32072) * C48298 + (C32071 + C32070) * C47001) +
             (C32077 + C32076) * C47993) *
                C48344) *
               C48235 * C48134) *
              C48090 +
          ((((C31876 + C31877) * C46982 -
             ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                  C48298 +
              (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                  C47001) +
             (C31878 + C31879) * C47993) *
                C16331 +
            ((C31881 + C31880) * C46982 -
             ((C31879 + C31878) * C48298 + (C31877 + C31876) * C47001) +
             (C31883 + C31882) * C47993) *
                C48344) *
               C48235 * C3298 +
           (((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C47001 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C48298 -
             (C32580 + C32581) * C46982 - (C32582 + C32583) * C47993) *
                C16331 +
            ((C32581 + C32580) * C47001 + (C32583 + C32582) * C48298 -
             (C32585 + C32584) * C46982 - (C32587 + C32586) * C47993) *
                C48344) *
               C48235 * C48134) *
              C48097 +
          ((((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                 C47001 +
             (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                 C48298 -
             (C31884 + C31885) * C46982 - (C31886 + C31887) * C47993) *
                C16331 +
            ((C31885 + C31884) * C47001 + (C31887 + C31886) * C48298 -
             (C31889 + C31888) * C46982 - (C31891 + C31890) * C47993) *
                C48344) *
               C48235 * C3298 +
           (((C33306 + C33307) * C46982 -
             ((C31648 * C1317 + C48367 * C1328 + C31647 * C1314 +
               C31645 * C1327) *
                  C48298 +
              (C31648 * C1301 + C48367 * C1316 + C31647 * C1300 +
               C31645 * C1315) *
                  C47001) +
             (C33308 + C33309) * C47993) *
                C16331 +
            ((C31647 * C1298 + C31645 * C1311 + C31648 * C1303 +
              C48367 * C1320) *
                 C46982 -
             ((C33309 + C33308) * C48298 + (C33307 + C33306) * C47001) +
             (C31647 * C1310 + C31645 * C1325 + C31648 * C1321 +
              C48367 * C1330) *
                 C47993) *
                C48344) *
               C48235 * C48134) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C16331 +
            ((C31683 + C31682) * C1160 + (C31685 + C31684) * C47983) * C48344) *
               C48235 * C48130 -
           (((C32073 + C32072) * C47983 + (C32071 + C32070) * C1160) * C48344 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C16331) *
               C48235 * C48137 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C1160 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C47983) *
                C16331 +
            ((C32079 + C32078) * C1160 + (C32081 + C32080) * C47983) * C48344) *
               C48235 * C3806) *
              C48090 +
          ((((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C1160 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C47983) *
                C16331 +
            ((C32581 + C32580) * C1160 + (C32583 + C32582) * C47983) * C48344) *
               C48235 * C48137 -
           (((C31879 + C31878) * C47983 + (C31877 + C31876) * C1160) * C48344 +
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C47983 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C1160) *
                C16331) *
               C48235 * C48130 -
           (((C34019 + C34018) * C47983 + (C34017 + C34016) * C1160) * C48344 +
            ((C31648 * C2421 + C48367 * C2426 + C31647 * C1308 +
              C31645 * C1324) *
                 C47983 +
             (C31648 * C2417 + C48367 * C2420 + C31647 * C1297 +
              C31645 * C1309) *
                 C1160) *
                C16331) *
               C48235 * C3806) *
              C48097 +
          ((((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                 C1160 +
             (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                 C47983) *
                C16331 +
            ((C31885 + C31884) * C1160 + (C31887 + C31886) * C47983) * C48344) *
               C48235 * C48130 -
           (((C33309 + C33308) * C47983 + (C33307 + C33306) * C1160) * C48344 +
            ((C31648 * C1317 + C48367 * C1328 + C31647 * C1314 +
              C31645 * C1327) *
                 C47983 +
             (C31648 * C1301 + C48367 * C1316 + C31647 * C1300 +
              C31645 * C1315) *
                 C1160) *
                C16331) *
               C48235 * C48137 +
           (((C31647 * C1301 + C31645 * C1316 + C31648 * C7455 +
              C48367 * C7457) *
                 C1160 +
             (C31647 * C1317 + C31645 * C1328 + C31648 * C7458 +
              C48367 * C7461) *
                 C47983) *
                C16331 +
            ((C31647 * C1302 + C31645 * C1318 + C31648 * C7456 +
              C48367 * C7459) *
                 C1160 +
             (C31647 * C1319 + C31645 * C1329 + C31648 * C7460 +
              C48367 * C7462) *
                 C47983) *
                C48344) *
               C48235 * C3806) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C16331 +
            ((C31683 + C31682) * C1160 + (C31685 + C31684) * C47983) * C48344) *
               C48235 * C3298 -
           (((C32073 + C32072) * C47983 + (C32071 + C32070) * C1160) * C48344 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C16331) *
               C48235 * C48134) *
              C48393 +
          ((((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C1160 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C47983) *
                C16331 +
            ((C32581 + C32580) * C1160 + (C32583 + C32582) * C47983) * C48344) *
               C48235 * C48134 -
           (((C31879 + C31878) * C47983 + (C31877 + C31876) * C1160) * C48344 +
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C47983 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C1160) *
                C16331) *
               C48235 * C3298) *
              C48389 +
          ((((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                 C1160 +
             (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                 C47983) *
                C16331 +
            ((C31885 + C31884) * C1160 + (C31887 + C31886) * C47983) * C48344) *
               C48235 * C3298 -
           (((C33309 + C33308) * C47983 + (C33307 + C33306) * C1160) * C48344 +
            ((C31648 * C1317 + C48367 * C1328 + C31647 * C1314 +
              C31645 * C1327) *
                 C47983 +
             (C31648 * C1301 + C48367 * C1316 + C31647 * C1300 +
              C31645 * C1315) *
                 C1160) *
                C16331) *
               C48235 * C48134) *
              C48379 +
          ((((C31647 * C1713 + C31645 * C1716 + C31648 * C6039 +
              C48367 * C6041) *
                 C1160 +
             (C31647 * C1717 + C31645 * C1722 + C31648 * C6042 +
              C48367 * C6045) *
                 C47983) *
                C16331 +
            ((C31647 * C1714 + C31645 * C1718 + C31648 * C6040 +
              C48367 * C6043) *
                 C1160 +
             (C31647 * C1719 + C31645 * C1723 + C31648 * C6044 +
              C48367 * C6046) *
                 C47983) *
                C48344) *
               C48235 * C48134 -
           (((C33103 + C33102) * C47983 + (C33101 + C33100) * C1160) * C48344 +
            ((C31648 * C1717 + C48367 * C1722 + C31647 * C1171 +
              C31645 * C1181) *
                 C47983 +
             (C31648 * C1713 + C48367 * C1716 + C31647 * C1163 +
              C31645 * C1172) *
                 C1160) *
                C16331) *
               C48235 * C3298) *
              C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1089 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C48383 -
             (C31682 + C31683) * C1090 - (C31684 + C31685) * C48370 +
             (C31686 + C31687) * C1091 + (C31688 + C31689) * C48339) *
                C16331 +
            ((C31683 + C31682) * C1089 + (C31685 + C31684) * C48383 -
             (C31687 + C31686) * C1090 - (C31689 + C31688) * C48370 +
             (C31691 + C31690) * C1091 + (C31693 + C31692) * C48339) *
                C48344) *
               C48235 * C3298 +
           (((C32070 + C32071) * C1090 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C48383 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C1089) +
             (C32072 + C32073) * C48370 - (C32074 + C32075) * C1091 -
             (C32076 + C32077) * C48339) *
                C16331 +
            ((C32075 + C32074) * C1090 -
             ((C32073 + C32072) * C48383 + (C32071 + C32070) * C1089) +
             (C32077 + C32076) * C48370 - (C32367 + C32366) * C1091 -
             (C32369 + C32368) * C48339) *
                C48344) *
               C48235 * C48134) *
              C2531 +
          ((((C31876 + C31877) * C1090 -
             ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                  C48383 +
              (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                  C1089) +
             (C31878 + C31879) * C48370 - (C31880 + C31881) * C1091 -
             (C31882 + C31883) * C48339) *
                C16331 +
            ((C31881 + C31880) * C1090 -
             ((C31879 + C31878) * C48383 + (C31877 + C31876) * C1089) +
             (C31883 + C31882) * C48370 - (C32225 + C32224) * C1091 -
             (C32227 + C32226) * C48339) *
                C48344) *
               C48235 * C3298 +
           (((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C1089 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C48383 -
             (C32580 + C32581) * C1090 - (C32582 + C32583) * C48370 +
             (C32584 + C32585) * C1091 + (C32586 + C32587) * C48339) *
                C16331 +
            ((C32581 + C32580) * C1089 + (C32583 + C32582) * C48383 -
             (C32585 + C32584) * C1090 - (C32587 + C32586) * C48370 +
             (C31647 * C938 + C31645 * C946 + C31648 * C2185 + C48367 * C2186) *
                 C1091 +
             (C31647 * C947 + C31645 * C953 + C31648 * C2187 + C48367 * C2188) *
                 C48339) *
                C48344) *
               C48235 * C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C16331 +
            ((C31683 + C31682) * C1160 + (C31685 + C31684) * C47983) * C48344) *
               C48235 * C48394 -
           (((C32073 + C32072) * C47983 + (C32071 + C32070) * C1160) * C48344 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C16331) *
               C48235 * C48391 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C1160 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C47983) *
                C16331 +
            ((C32079 + C32078) * C1160 + (C32081 + C32080) * C47983) * C48344) *
               C48235 * C48382 -
           (((C34161 + C34160) * C47983 + (C34159 + C34158) * C1160) * C48344 +
            ((C31648 * C2028 + C48367 * C2036 + C31647 * C2025 +
              C31645 * C2035) *
                 C47983 +
             (C31648 * C2018 + C48367 * C2027 + C31647 * C2017 +
              C31645 * C2026) *
                 C1160) *
                C16331) *
               C48235 * C48363) *
              C2531 +
          ((((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C1160 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C47983) *
                C16331 +
            ((C32581 + C32580) * C1160 + (C32583 + C32582) * C47983) * C48344) *
               C48235 * C48391 -
           (((C31879 + C31878) * C47983 + (C31877 + C31876) * C1160) * C48344 +
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C47983 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C1160) *
                C16331) *
               C48235 * C48394 -
           (((C34019 + C34018) * C47983 + (C34017 + C34016) * C1160) * C48344 +
            ((C31648 * C2421 + C48367 * C2426 + C31647 * C1308 +
              C31645 * C1324) *
                 C47983 +
             (C31648 * C2417 + C48367 * C2420 + C31647 * C1297 +
              C31645 * C1309) *
                 C1160) *
                C16331) *
               C48235 * C48382 +
           (((C31647 * C2417 + C31645 * C2420 + C31648 * C6979 +
              C48367 * C6981) *
                 C1160 +
             (C31647 * C2421 + C31645 * C2426 + C31648 * C6982 +
              C48367 * C6985) *
                 C47983) *
                C16331 +
            ((C31647 * C2418 + C31645 * C2422 + C31648 * C6980 +
              C48367 * C6983) *
                 C1160 +
             (C31647 * C2423 + C31645 * C2427 + C31648 * C6984 +
              C48367 * C6986) *
                 C47983) *
                C48344) *
               C48235 * C48363) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C47001 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C48298 -
             (C31682 + C31683) * C46982 - (C31684 + C31685) * C47993) *
                C16331 +
            ((C31683 + C31682) * C47001 + (C31685 + C31684) * C48298 -
             (C31687 + C31686) * C46982 - (C31689 + C31688) * C47993) *
                C48344) *
               C48235 * C48130 +
           (((C32070 + C32071) * C46982 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C48298 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C47001) +
             (C32072 + C32073) * C47993) *
                C16331 +
            ((C32075 + C32074) * C46982 -
             ((C32073 + C32072) * C48298 + (C32071 + C32070) * C47001) +
             (C32077 + C32076) * C47993) *
                C48344) *
               C48235 * C48137 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C47001 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C48298 -
             (C32078 + C32079) * C46982 - (C32080 + C32081) * C47993) *
                C16331 +
            ((C32079 + C32078) * C47001 + (C32081 + C32080) * C48298 -
             (C32083 + C32082) * C46982 - (C32085 + C32084) * C47993) *
                C48344) *
               C48235 * C3806) *
              C2531 +
          ((((C31876 + C31877) * C46982 -
             ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                  C48298 +
              (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                  C47001) +
             (C31878 + C31879) * C47993) *
                C16331 +
            ((C31881 + C31880) * C46982 -
             ((C31879 + C31878) * C48298 + (C31877 + C31876) * C47001) +
             (C31883 + C31882) * C47993) *
                C48344) *
               C48235 * C48130 +
           (((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C47001 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C48298 -
             (C32580 + C32581) * C46982 - (C32582 + C32583) * C47993) *
                C16331 +
            ((C32581 + C32580) * C47001 + (C32583 + C32582) * C48298 -
             (C32585 + C32584) * C46982 - (C32587 + C32586) * C47993) *
                C48344) *
               C48235 * C48137 +
           (((C34016 + C34017) * C46982 -
             ((C31648 * C2421 + C48367 * C2426 + C31647 * C1308 +
               C31645 * C1324) *
                  C48298 +
              (C31648 * C2417 + C48367 * C2420 + C31647 * C1297 +
               C31645 * C1309) *
                  C47001) +
             (C34018 + C34019) * C47993) *
                C16331 +
            ((C31647 * C1295 + C31645 * C1305 + C31648 * C2419 +
              C48367 * C2424) *
                 C46982 -
             ((C34019 + C34018) * C48298 + (C34017 + C34016) * C47001) +
             (C31647 * C1304 + C31645 * C1322 + C31648 * C2425 +
              C48367 * C2428) *
                 C47993) *
                C48344) *
               C48235 * C3806) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1089 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C48383 -
             (C31682 + C31683) * C1090 - (C31684 + C31685) * C48370 +
             (C31686 + C31687) * C1091 + (C31688 + C31689) * C48339) *
                C16331 +
            ((C31683 + C31682) * C1089 + (C31685 + C31684) * C48383 -
             (C31687 + C31686) * C1090 - (C31689 + C31688) * C48370 +
             (C31691 + C31690) * C1091 + (C31693 + C31692) * C48339) *
                C48344) *
               C48235 * C3298 +
           (((C32070 + C32071) * C1090 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C48383 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C1089) +
             (C32072 + C32073) * C48370 - (C32074 + C32075) * C1091 -
             (C32076 + C32077) * C48339) *
                C16331 +
            ((C32075 + C32074) * C1090 -
             ((C32073 + C32072) * C48383 + (C32071 + C32070) * C1089) +
             (C32077 + C32076) * C48370 - (C32367 + C32366) * C1091 -
             (C32369 + C32368) * C48339) *
                C48344) *
               C48235 * C48134) *
              C2531 +
          ((((C31876 + C31877) * C1090 -
             ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                  C48383 +
              (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                  C1089) +
             (C31878 + C31879) * C48370 - (C31880 + C31881) * C1091 -
             (C31882 + C31883) * C48339) *
                C16331 +
            ((C31881 + C31880) * C1090 -
             ((C31879 + C31878) * C48383 + (C31877 + C31876) * C1089) +
             (C31883 + C31882) * C48370 - (C32225 + C32224) * C1091 -
             (C32227 + C32226) * C48339) *
                C48344) *
               C48235 * C3298 +
           (((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C1089 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C48383 -
             (C32580 + C32581) * C1090 - (C32582 + C32583) * C48370 +
             (C32584 + C32585) * C1091 + (C32586 + C32587) * C48339) *
                C16331 +
            ((C32581 + C32580) * C1089 + (C32583 + C32582) * C48383 -
             (C32585 + C32584) * C1090 - (C32587 + C32586) * C48370 +
             (C31647 * C938 + C31645 * C946 + C31648 * C2185 + C48367 * C2186) *
                 C1091 +
             (C31647 * C947 + C31645 * C953 + C31648 * C2187 + C48367 * C2188) *
                 C48339) *
                C48344) *
               C48235 * C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C16331 +
            ((C31683 + C31682) * C1160 + (C31685 + C31684) * C47983) * C48344) *
               C48235 * C3298 -
           (((C32073 + C32072) * C47983 + (C32071 + C32070) * C1160) * C48344 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C16331) *
               C48235 * C48134) *
              C48393 +
          ((((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C1160 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C47983) *
                C16331 +
            ((C32581 + C32580) * C1160 + (C32583 + C32582) * C47983) * C48344) *
               C48235 * C48134 -
           (((C31879 + C31878) * C47983 + (C31877 + C31876) * C1160) * C48344 +
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C47983 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C1160) *
                C16331) *
               C48235 * C3298) *
              C48389 +
          ((((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                 C1160 +
             (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                 C47983) *
                C16331 +
            ((C31885 + C31884) * C1160 + (C31887 + C31886) * C47983) * C48344) *
               C48235 * C3298 -
           (((C33309 + C33308) * C47983 + (C33307 + C33306) * C1160) * C48344 +
            ((C31648 * C1317 + C48367 * C1328 + C31647 * C1314 +
              C31645 * C1327) *
                 C47983 +
             (C31648 * C1301 + C48367 * C1316 + C31647 * C1300 +
              C31645 * C1315) *
                 C1160) *
                C16331) *
               C48235 * C48134) *
              C48379 +
          ((((C31647 * C1713 + C31645 * C1716 + C31648 * C6039 +
              C48367 * C6041) *
                 C1160 +
             (C31647 * C1717 + C31645 * C1722 + C31648 * C6042 +
              C48367 * C6045) *
                 C47983) *
                C16331 +
            ((C31647 * C1714 + C31645 * C1718 + C31648 * C6040 +
              C48367 * C6043) *
                 C1160 +
             (C31647 * C1719 + C31645 * C1723 + C31648 * C6044 +
              C48367 * C6046) *
                 C47983) *
                C48344) *
               C48235 * C48134 -
           (((C33103 + C33102) * C47983 + (C33101 + C33100) * C1160) * C48344 +
            ((C31648 * C1717 + C48367 * C1722 + C31647 * C1171 +
              C31645 * C1181) *
                 C47983 +
             (C31648 * C1713 + C48367 * C1716 + C31647 * C1163 +
              C31645 * C1172) *
                 C1160) *
                C16331) *
               C48235 * C3298) *
              C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C47001 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48298 -
            (C31682 + C31683) * C46982 - (C31684 + C31685) * C47993) *
               C16331 +
           ((C31683 + C31682) * C47001 + (C31685 + C31684) * C48298 -
            (C31687 + C31686) * C46982 - (C31689 + C31688) * C47993) *
               C48344) *
              C48235 * C48047 * C1431 +
          (((C31876 + C31877) * C46982 -
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C48298 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C47001) +
            (C31878 + C31879) * C47993) *
               C16331 +
           ((C31881 + C31880) * C46982 -
            ((C31879 + C31878) * C48298 + (C31877 + C31876) * C47001) +
            (C31883 + C31882) * C47993) *
               C48344) *
              C48235 * C48047 * C1432 +
          (((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                C47001 +
            (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                C48298 -
            (C31884 + C31885) * C46982 - (C31886 + C31887) * C47993) *
               C16331 +
           ((C31885 + C31884) * C47001 + (C31887 + C31886) * C48298 -
            (C31889 + C31888) * C46982 - (C31891 + C31890) * C47993) *
               C48344) *
              C48235 * C48047 * C1433 +
          (((C33100 + C33101) * C46982 -
            ((C31648 * C1717 + C48367 * C1722 + C31647 * C1171 +
              C31645 * C1181) *
                 C48298 +
             (C31648 * C1713 + C48367 * C1716 + C31647 * C1163 +
              C31645 * C1172) *
                 C47001) +
            (C33102 + C33103) * C47993) *
               C16331 +
           ((C31647 * C1161 + C31645 * C1168 + C31648 * C1715 +
             C48367 * C1720) *
                C46982 -
            ((C33103 + C33102) * C48298 + (C33101 + C33100) * C47001) +
            (C31647 * C1167 + C31645 * C1179 + C31648 * C1721 +
             C48367 * C1724) *
                C47993) *
               C48344) *
              C48235 * C48047 * C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C665 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C659 -
            (C31682 + C31683) * C666 - (C31684 + C31685) * C660 +
            (C31686 + C31687) * C667 + (C31688 + C31689) * C661 -
            (C31690 + C31691) * C668 - (C31692 + C31693) * C48351) *
               C16331 +
           ((C31683 + C31682) * C665 + (C31685 + C31684) * C659 -
            (C31687 + C31686) * C666 - (C31689 + C31688) * C660 +
            (C31691 + C31690) * C667 + (C31693 + C31692) * C661 -
            (C31695 + C31694) * C668 - (C31697 + C31696) * C48351) *
               C48344) *
              C48235 * C48047 * C48315 +
          (((C31876 + C31877) * C666 -
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C659 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C665) +
            (C31878 + C31879) * C660 - (C31880 + C31881) * C667 -
            (C31882 + C31883) * C661 + (C32224 + C32225) * C668 +
            (C32226 + C32227) * C48351) *
               C16331 +
           ((C31881 + C31880) * C666 -
            ((C31879 + C31878) * C659 + (C31877 + C31876) * C665) +
            (C31883 + C31882) * C660 - (C32225 + C32224) * C667 -
            (C32227 + C32226) * C661 +
            (C31647 * C300 + C31645 * C314 + C31648 * C939 + C48367 * C948) *
                C668 +
            (C31647 * C315 + C31645 * C330 + C31648 * C949 + C48367 * C954) *
                C48351) *
               C48344) *
              C48235 * C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C47001 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C48298 -
             (C31682 + C31683) * C46982 - (C31684 + C31685) * C47993) *
                C16331 +
            ((C31683 + C31682) * C47001 + (C31685 + C31684) * C48298 -
             (C31687 + C31686) * C46982 - (C31689 + C31688) * C47993) *
                C48344) *
               C48235 * C1835 +
           (((C32070 + C32071) * C46982 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C48298 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C47001) +
             (C32072 + C32073) * C47993) *
                C16331 +
            ((C32075 + C32074) * C46982 -
             ((C32073 + C32072) * C48298 + (C32071 + C32070) * C47001) +
             (C32077 + C32076) * C47993) *
                C48344) *
               C48235 * C1836 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C47001 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C48298 -
             (C32078 + C32079) * C46982 - (C32080 + C32081) * C47993) *
                C16331 +
            ((C32079 + C32078) * C47001 + (C32081 + C32080) * C48298 -
             (C32083 + C32082) * C46982 - (C32085 + C32084) * C47993) *
                C48344) *
               C48235 * C48350) *
              C48315 +
          ((((C31876 + C31877) * C46982 -
             ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                  C48298 +
              (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                  C47001) +
             (C31878 + C31879) * C47993) *
                C16331 +
            ((C31881 + C31880) * C46982 -
             ((C31879 + C31878) * C48298 + (C31877 + C31876) * C47001) +
             (C31883 + C31882) * C47993) *
                C48344) *
               C48235 * C1835 +
           (((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C47001 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C48298 -
             (C32580 + C32581) * C46982 - (C32582 + C32583) * C47993) *
                C16331 +
            ((C32581 + C32580) * C47001 + (C32583 + C32582) * C48298 -
             (C32585 + C32584) * C46982 - (C32587 + C32586) * C47993) *
                C48344) *
               C48235 * C1836 +
           (((C34016 + C34017) * C46982 -
             ((C31648 * C2421 + C48367 * C2426 + C31647 * C1308 +
               C31645 * C1324) *
                  C48298 +
              (C31648 * C2417 + C48367 * C2420 + C31647 * C1297 +
               C31645 * C1309) *
                  C47001) +
             (C34018 + C34019) * C47993) *
                C16331 +
            ((C31647 * C1295 + C31645 * C1305 + C31648 * C2419 +
              C48367 * C2424) *
                 C46982 -
             ((C34019 + C34018) * C48298 + (C34017 + C34016) * C47001) +
             (C31647 * C1304 + C31645 * C1322 + C31648 * C2425 +
              C48367 * C2428) *
                 C47993) *
                C48344) *
               C48235 * C48350) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C16331 +
            ((C31683 + C31682) * C1160 + (C31685 + C31684) * C47983) * C48344) *
               C48235 * C48316 -
           (((C32073 + C32072) * C47983 + (C32071 + C32070) * C1160) * C48344 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C16331) *
               C48235 * C48134) *
              C1431 +
          ((((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C1160 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C47983) *
                C16331 +
            ((C32581 + C32580) * C1160 + (C32583 + C32582) * C47983) * C48344) *
               C48235 * C48134 -
           (((C31879 + C31878) * C47983 + (C31877 + C31876) * C1160) * C48344 +
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C47983 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C1160) *
                C16331) *
               C48235 * C48316) *
              C1432 +
          ((((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                 C1160 +
             (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                 C47983) *
                C16331 +
            ((C31885 + C31884) * C1160 + (C31887 + C31886) * C47983) * C48344) *
               C48235 * C48316 -
           (((C33309 + C33308) * C47983 + (C33307 + C33306) * C1160) * C48344 +
            ((C31648 * C1317 + C48367 * C1328 + C31647 * C1314 +
              C31645 * C1327) *
                 C47983 +
             (C31648 * C1301 + C48367 * C1316 + C31647 * C1300 +
              C31645 * C1315) *
                 C1160) *
                C16331) *
               C48235 * C48134) *
              C1433 +
          ((((C31647 * C1713 + C31645 * C1716 + C31648 * C6039 +
              C48367 * C6041) *
                 C1160 +
             (C31647 * C1717 + C31645 * C1722 + C31648 * C6042 +
              C48367 * C6045) *
                 C47983) *
                C16331 +
            ((C31647 * C1714 + C31645 * C1718 + C31648 * C6040 +
              C48367 * C6043) *
                 C1160 +
             (C31647 * C1719 + C31645 * C1723 + C31648 * C6044 +
              C48367 * C6046) *
                 C47983) *
                C48344) *
               C48235 * C48134 -
           (((C33103 + C33102) * C47983 + (C33101 + C33100) * C1160) * C48344 +
            ((C31648 * C1717 + C48367 * C1722 + C31647 * C1171 +
              C31645 * C1181) *
                 C47983 +
             (C31648 * C1713 + C48367 * C1716 + C31647 * C1163 +
              C31645 * C1172) *
                 C1160) *
                C16331) *
               C48235 * C48316) *
              C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C293 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C287 -
             (C31682 + C31683) * C294 - (C31684 + C31685) * C288 +
             (C31686 + C31687) * C295 + (C31688 + C31689) * C48339) *
                C16331 +
            ((C31683 + C31682) * C293 + (C31685 + C31684) * C287 -
             (C31687 + C31686) * C294 - (C31689 + C31688) * C288 +
             (C31691 + C31690) * C295 + (C31693 + C31692) * C48339) *
                C48344) *
               C48235 * C48316 +
           (((C32070 + C32071) * C294 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C287 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C293) +
             (C32072 + C32073) * C288 - (C32074 + C32075) * C295 -
             (C32076 + C32077) * C48339) *
                C16331 +
            ((C32075 + C32074) * C294 -
             ((C32073 + C32072) * C287 + (C32071 + C32070) * C293) +
             (C32077 + C32076) * C288 - (C32367 + C32366) * C295 -
             (C32369 + C32368) * C48339) *
                C48344) *
               C48235 * C48134) *
              C48315 +
          ((((C31876 + C31877) * C294 -
             ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                  C287 +
              (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                  C293) +
             (C31878 + C31879) * C288 - (C31880 + C31881) * C295 -
             (C31882 + C31883) * C48339) *
                C16331 +
            ((C31881 + C31880) * C294 -
             ((C31879 + C31878) * C287 + (C31877 + C31876) * C293) +
             (C31883 + C31882) * C288 - (C32225 + C32224) * C295 -
             (C32227 + C32226) * C48339) *
                C48344) *
               C48235 * C48316 +
           (((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C293 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C287 -
             (C32580 + C32581) * C294 - (C32582 + C32583) * C288 +
             (C32584 + C32585) * C295 + (C32586 + C32587) * C48339) *
                C16331 +
            ((C32581 + C32580) * C293 + (C32583 + C32582) * C287 -
             (C32585 + C32584) * C294 - (C32587 + C32586) * C288 +
             (C31647 * C938 + C31645 * C946 + C31648 * C2185 + C48367 * C2186) *
                 C295 +
             (C31647 * C947 + C31645 * C953 + C31648 * C2187 + C48367 * C2188) *
                 C48339) *
                C48344) *
               C48235 * C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C16331 +
            ((C31683 + C31682) * C1160 + (C31685 + C31684) * C47983) * C48344) *
               C48235 * C2299 -
           (((C32073 + C32072) * C47983 + (C32071 + C32070) * C1160) * C48344 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C16331) *
               C48235 * C2300 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C1160 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C47983) *
                C16331 +
            ((C32079 + C32078) * C1160 + (C32081 + C32080) * C47983) * C48344) *
               C48235 * C2301 -
           (((C34161 + C34160) * C47983 + (C34159 + C34158) * C1160) * C48344 +
            ((C31648 * C2028 + C48367 * C2036 + C31647 * C2025 +
              C31645 * C2035) *
                 C47983 +
             (C31648 * C2018 + C48367 * C2027 + C31647 * C2017 +
              C31645 * C2026) *
                 C1160) *
                C16331) *
               C48235 * C48363) *
              C48315 +
          ((((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C1160 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C47983) *
                C16331 +
            ((C32581 + C32580) * C1160 + (C32583 + C32582) * C47983) * C48344) *
               C48235 * C2300 -
           (((C31879 + C31878) * C47983 + (C31877 + C31876) * C1160) * C48344 +
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C47983 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C1160) *
                C16331) *
               C48235 * C2299 -
           (((C34019 + C34018) * C47983 + (C34017 + C34016) * C1160) * C48344 +
            ((C31648 * C2421 + C48367 * C2426 + C31647 * C1308 +
              C31645 * C1324) *
                 C47983 +
             (C31648 * C2417 + C48367 * C2420 + C31647 * C1297 +
              C31645 * C1309) *
                 C1160) *
                C16331) *
               C48235 * C2301 +
           (((C31647 * C2417 + C31645 * C2420 + C31648 * C6979 +
              C48367 * C6981) *
                 C1160 +
             (C31647 * C2421 + C31645 * C2426 + C31648 * C6982 +
              C48367 * C6985) *
                 C47983) *
                C16331 +
            ((C31647 * C2418 + C31645 * C2422 + C31648 * C6980 +
              C48367 * C6983) *
                 C1160 +
             (C31647 * C2423 + C31645 * C2427 + C31648 * C6984 +
              C48367 * C6986) *
                 C47983) *
                C48344) *
               C48235 * C48363) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                   C114 +
               (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                   C102 -
               (C31682 + C31683) * C115 - (C31684 + C31685) * C103 +
               (C31686 + C31687) * C116 + (C31688 + C31689) * C104 -
               (C31690 + C31691) * C117 - (C31692 + C31693) * C105 +
               (C31694 + C31695) * C118 + (C31696 + C31697) * C106) *
                  C16331 +
              ((C31683 + C31682) * C114 + (C31685 + C31684) * C102 -
               (C31687 + C31686) * C115 - (C31689 + C31688) * C103 +
               (C31691 + C31690) * C116 + (C31693 + C31692) * C104 -
               (C31695 + C31694) * C117 - (C31697 + C31696) * C105 +
               (C31647 * C124 + C31645 * C136 + C31648 * C779 + C48367 * C780) *
                   C118 +
               (C31647 * C137 + C31645 * C145 + C31648 * C781 + C48367 * C782) *
                   C106) *
                  C48344) *
             C48235 * C48047 * C48035 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C31647 * C119 + C31645 * C126 + C31648 * C486 +
                 C48367 * C497) *
                    C293 +
                (C31647 * C127 + C31645 * C140 + C31648 * C496 +
                 C48367 * C515) *
                    C287 -
                (C31682 + C31683) * C294 - (C31684 + C31685) * C288 +
                (C31686 + C31687) * C295 + (C31688 + C31689) * C48339) *
                   C16331 +
               ((C31683 + C31682) * C293 + (C31685 + C31684) * C287 -
                (C31687 + C31686) * C294 - (C31689 + C31688) * C288 +
                (C31691 + C31690) * C295 + (C31693 + C31692) * C48339) *
                   C48344) *
                  C48235 * C48047 * C48386 +
              (((C31876 + C31877) * C294 -
                ((C31648 * C941 + C48367 * C950 + C31647 * C307 +
                  C31645 * C326) *
                     C287 +
                 (C31648 * C935 + C48367 * C940 + C31647 * C297 +
                  C31645 * C308) *
                     C293) +
                (C31878 + C31879) * C288 - (C31880 + C31881) * C295 -
                (C31882 + C31883) * C48339) *
                   C16331 +
               ((C31881 + C31880) * C294 -
                ((C31879 + C31878) * C287 + (C31877 + C31876) * C293) +
                (C31883 + C31882) * C288 -
                (C31648 * C938 + C48367 * C946 + C31647 * C299 +
                 C31645 * C312) *
                    C295 -
                (C31648 * C947 + C48367 * C953 + C31647 * C313 +
                 C31645 * C329) *
                    C48339) *
                   C48344) *
                  C48235 * C48047 * C48374 +
              (((C31647 * C301 + C31645 * C316 + C31648 * C1300 +
                 C48367 * C1315) *
                    C293 +
                (C31647 * C317 + C31645 * C331 + C31648 * C1314 +
                 C48367 * C1327) *
                    C287 -
                (C31884 + C31885) * C294 - (C31886 + C31887) * C288 +
                (C31888 + C31889) * C295 + (C31890 + C31891) * C48339) *
                   C16331 +
               ((C31885 + C31884) * C293 + (C31887 + C31886) * C287 -
                (C31889 + C31888) * C294 - (C31891 + C31890) * C288 +
                (C31647 * C304 + C31645 * C322 + C31648 * C1599 +
                 C48367 * C1600) *
                    C295 +
                (C31647 * C323 + C31645 * C334 + C31648 * C1601 +
                 C48367 * C1602) *
                    C48339) *
                   C48344) *
                  C48235 * C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C293 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C287 -
            (C31682 + C31683) * C294 - (C31684 + C31685) * C288 +
            (C31686 + C31687) * C295 + (C31688 + C31689) * C48339) *
               C16331 +
           ((C31683 + C31682) * C293 + (C31685 + C31684) * C287 -
            (C31687 + C31686) * C294 - (C31689 + C31688) * C288 +
            (C31691 + C31690) * C295 + (C31693 + C31692) * C48339) *
               C48344) *
              C48235 * C48387 +
          (((C32070 + C32071) * C294 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C287 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C293) +
            (C32072 + C32073) * C288 - (C32074 + C32075) * C295 -
            (C32076 + C32077) * C48339) *
               C16331 +
           ((C32075 + C32074) * C294 -
            ((C32073 + C32072) * C287 + (C32071 + C32070) * C293) +
            (C32077 + C32076) * C288 -
            (C31648 * C493 + C48367 * C511 + C31647 * C488 + C31645 * C501) *
                C295 -
            (C31648 * C512 + C48367 * C523 + C31647 * C502 + C31645 * C518) *
                C48339) *
               C48344) *
              C48235 * C48376 +
          (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                C293 +
            (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                C287 -
            (C32078 + C32079) * C294 - (C32080 + C32081) * C288 +
            (C32082 + C32083) * C295 + (C32084 + C32085) * C48339) *
               C16331 +
           ((C32079 + C32078) * C293 + (C32081 + C32080) * C287 -
            (C32083 + C32082) * C294 - (C32085 + C32084) * C288 +
            (C31647 * C493 + C31645 * C511 + C31648 * C2303 + C48367 * C2304) *
                C295 +
            (C31647 * C512 + C31645 * C523 + C31648 * C2305 + C48367 * C2306) *
                C48339) *
               C48344) *
              C48235 * C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1089 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48383 -
            (C31682 + C31683) * C1090 - (C31684 + C31685) * C48370 +
            (C31686 + C31687) * C1091 + (C31688 + C31689) * C48339) *
               C16331 +
           ((C31683 + C31682) * C1089 + (C31685 + C31684) * C48383 -
            (C31687 + C31686) * C1090 - (C31689 + C31688) * C48370 +
            (C31691 + C31690) * C1091 + (C31693 + C31692) * C48339) *
               C48344) *
              C48235 * C48047 * C1086 +
          (((C31876 + C31877) * C1090 -
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C48383 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C1089) +
            (C31878 + C31879) * C48370 - (C31880 + C31881) * C1091 -
            (C31882 + C31883) * C48339) *
               C16331 +
           ((C31881 + C31880) * C1090 -
            ((C31879 + C31878) * C48383 + (C31877 + C31876) * C1089) +
            (C31883 + C31882) * C48370 - (C32225 + C32224) * C1091 -
            (C32227 + C32226) * C48339) *
               C48344) *
              C48235 * C48047 * C1087 +
          (((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                C1089 +
            (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                C48383 -
            (C31884 + C31885) * C1090 - (C31886 + C31887) * C48370 +
            (C31888 + C31889) * C1091 + (C31890 + C31891) * C48339) *
               C16331 +
           ((C31885 + C31884) * C1089 + (C31887 + C31886) * C48383 -
            (C31889 + C31888) * C1090 - (C31891 + C31890) * C48370 +
            (C31647 * C304 + C31645 * C322 + C31648 * C1599 + C48367 * C1600) *
                C1091 +
            (C31647 * C323 + C31645 * C334 + C31648 * C1601 + C48367 * C1602) *
                C48339) *
               C48344) *
              C48235 * C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1160 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C47983) *
               C16331 +
           ((C31683 + C31682) * C1160 + (C31685 + C31684) * C47983) * C48344) *
              C48235 * C48047 * C1155 -
          (((C31879 + C31878) * C47983 + (C31877 + C31876) * C1160) * C48344 +
           ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                C47983 +
            (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                C1160) *
               C16331) *
              C48235 * C48047 * C1156 +
          (((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                C1160 +
            (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                C47983) *
               C16331 +
           ((C31885 + C31884) * C1160 + (C31887 + C31886) * C47983) * C48344) *
              C48235 * C48047 * C1157 -
          (((C31648 * C1719 + C48367 * C1723 + C31647 * C1169 +
             C31645 * C1180) *
                C47983 +
            (C31648 * C1714 + C48367 * C1718 + C31647 * C1162 +
             C31645 * C1170) *
                C1160) *
               C48344 +
           ((C31648 * C1717 + C48367 * C1722 + C31647 * C1171 +
             C31645 * C1181) *
                C47983 +
            (C31648 * C1713 + C48367 * C1716 + C31647 * C1163 +
             C31645 * C1172) *
                C1160) *
               C16331) *
              C48235 * C48047 * C1158 +
          (((C31647 * C1164 + C31645 * C1173 + C31648 * C6587 +
             C48367 * C6589) *
                C1160 +
            (C31647 * C1174 + C31645 * C1182 + C31648 * C6590 +
             C48367 * C6593) *
                C47983) *
               C16331 +
           ((C31647 * C1165 + C31645 * C1175 + C31648 * C6588 +
             C48367 * C6591) *
                C1160 +
            (C31647 * C1176 + C31645 * C1183 + C31648 * C6592 +
             C48367 * C6594) *
                C47983) *
               C48344) *
              C48235 * C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C16331 +
            ((C31683 + C31682) * C1160 + (C31685 + C31684) * C47983) * C48344) *
               C48235 * C48387 -
           (((C32073 + C32072) * C47983 + (C32071 + C32070) * C1160) * C48344 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C16331) *
               C48235 * C48376 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C1160 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C47983) *
                C16331 +
            ((C32079 + C32078) * C1160 + (C32081 + C32080) * C47983) * C48344) *
               C48235 * C48350) *
              C1086 +
          ((((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C1160 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C47983) *
                C16331 +
            ((C32581 + C32580) * C1160 + (C32583 + C32582) * C47983) * C48344) *
               C48235 * C48376 -
           (((C31879 + C31878) * C47983 + (C31877 + C31876) * C1160) * C48344 +
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C47983 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C1160) *
                C16331) *
               C48235 * C48387 -
           (((C31648 * C2423 + C48367 * C2427 + C31647 * C1306 +
              C31645 * C1323) *
                 C47983 +
             (C31648 * C2418 + C48367 * C2422 + C31647 * C1296 +
              C31645 * C1307) *
                 C1160) *
                C48344 +
            ((C31648 * C2421 + C48367 * C2426 + C31647 * C1308 +
              C31645 * C1324) *
                 C47983 +
             (C31648 * C2417 + C48367 * C2420 + C31647 * C1297 +
              C31645 * C1309) *
                 C1160) *
                C16331) *
               C48235 * C48350) *
              C1087 +
          ((((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                 C1160 +
             (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                 C47983) *
                C16331 +
            ((C31885 + C31884) * C1160 + (C31887 + C31886) * C47983) * C48344) *
               C48235 * C48387 -
           (((C31648 * C1319 + C48367 * C1329 + C31647 * C1312 +
              C31645 * C1326) *
                 C47983 +
             (C31648 * C1302 + C48367 * C1318 + C31647 * C1299 +
              C31645 * C1313) *
                 C1160) *
                C48344 +
            ((C31648 * C1317 + C48367 * C1328 + C31647 * C1314 +
              C31645 * C1327) *
                 C47983 +
             (C31648 * C1301 + C48367 * C1316 + C31647 * C1300 +
              C31645 * C1315) *
                 C1160) *
                C16331) *
               C48235 * C48376 +
           (((C31647 * C1301 + C31645 * C1316 + C31648 * C7455 +
              C48367 * C7457) *
                 C1160 +
             (C31647 * C1317 + C31645 * C1328 + C31648 * C7458 +
              C48367 * C7461) *
                 C47983) *
                C16331 +
            ((C31647 * C1302 + C31645 * C1318 + C31648 * C7456 +
              C48367 * C7459) *
                 C1160 +
             (C31647 * C1319 + C31645 * C1329 + C31648 * C7460 +
              C48367 * C7462) *
                 C47983) *
                C48344) *
               C48235 * C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1089 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48383 -
            (C31682 + C31683) * C1090 - (C31684 + C31685) * C48370 +
            (C31686 + C31687) * C1091 + (C31688 + C31689) * C48339) *
               C16331 +
           ((C31683 + C31682) * C1089 + (C31685 + C31684) * C48383 -
            (C31687 + C31686) * C1090 - (C31689 + C31688) * C48370 +
            (C31691 + C31690) * C1091 + (C31693 + C31692) * C48339) *
               C48344) *
              C48235 * C1835 +
          (((C32070 + C32071) * C1090 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C48383 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1089) +
            (C32072 + C32073) * C48370 - (C32074 + C32075) * C1091 -
            (C32076 + C32077) * C48339) *
               C16331 +
           ((C32075 + C32074) * C1090 -
            ((C32073 + C32072) * C48383 + (C32071 + C32070) * C1089) +
            (C32077 + C32076) * C48370 - (C32367 + C32366) * C1091 -
            (C32369 + C32368) * C48339) *
               C48344) *
              C48235 * C1836 +
          (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                C1089 +
            (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                C48383 -
            (C32078 + C32079) * C1090 - (C32080 + C32081) * C48370 +
            (C32082 + C32083) * C1091 + (C32084 + C32085) * C48339) *
               C16331 +
           ((C32079 + C32078) * C1089 + (C32081 + C32080) * C48383 -
            (C32083 + C32082) * C1090 - (C32085 + C32084) * C48370 +
            (C31647 * C493 + C31645 * C511 + C31648 * C2303 + C48367 * C2304) *
                C1091 +
            (C31647 * C512 + C31645 * C523 + C31648 * C2305 + C48367 * C2306) *
                C48339) *
               C48344) *
              C48235 * C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C16331 +
            ((C31683 + C31682) * C1160 + (C31685 + C31684) * C47983) * C48344) *
               C48235 * C1835 -
           (((C32073 + C32072) * C47983 + (C32071 + C32070) * C1160) * C48344 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C16331) *
               C48235 * C1836 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C1160 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C47983) *
                C16331 +
            ((C32079 + C32078) * C1160 + (C32081 + C32080) * C47983) * C48344) *
               C48235 * C48350) *
              C48386 +
          ((((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C1160 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C47983) *
                C16331 +
            ((C32581 + C32580) * C1160 + (C32583 + C32582) * C47983) * C48344) *
               C48235 * C1836 -
           (((C31879 + C31878) * C47983 + (C31877 + C31876) * C1160) * C48344 +
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C47983 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C1160) *
                C16331) *
               C48235 * C1835 -
           (((C31648 * C2423 + C48367 * C2427 + C31647 * C1306 +
              C31645 * C1323) *
                 C47983 +
             (C31648 * C2418 + C48367 * C2422 + C31647 * C1296 +
              C31645 * C1307) *
                 C1160) *
                C48344 +
            ((C31648 * C2421 + C48367 * C2426 + C31647 * C1308 +
              C31645 * C1324) *
                 C47983 +
             (C31648 * C2417 + C48367 * C2420 + C31647 * C1297 +
              C31645 * C1309) *
                 C1160) *
                C16331) *
               C48235 * C48350) *
              C48374 +
          ((((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                 C1160 +
             (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                 C47983) *
                C16331 +
            ((C31885 + C31884) * C1160 + (C31887 + C31886) * C47983) * C48344) *
               C48235 * C1835 -
           (((C33309 + C33308) * C47983 + (C33307 + C33306) * C1160) * C48344 +
            ((C31648 * C1317 + C48367 * C1328 + C31647 * C1314 +
              C31645 * C1327) *
                 C47983 +
             (C31648 * C1301 + C48367 * C1316 + C31647 * C1300 +
              C31645 * C1315) *
                 C1160) *
                C16331) *
               C48235 * C1836 +
           (((C31647 * C1301 + C31645 * C1316 + C31648 * C7455 +
              C48367 * C7457) *
                 C1160 +
             (C31647 * C1317 + C31645 * C1328 + C31648 * C7458 +
              C48367 * C7461) *
                 C47983) *
                C16331 +
            ((C31647 * C1302 + C31645 * C1318 + C31648 * C7456 +
              C48367 * C7459) *
                 C1160 +
             (C31647 * C1319 + C31645 * C1329 + C31648 * C7460 +
              C48367 * C7462) *
                 C47983) *
                C48344) *
               C48235 * C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1160 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C47983) *
               C16331 +
           ((C31683 + C31682) * C1160 + (C31685 + C31684) * C47983) * C48344) *
              C48235 * C2010 -
          (((C32073 + C32072) * C47983 + (C32071 + C32070) * C1160) * C48344 +
           ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                C47983 +
            (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                C1160) *
               C16331) *
              C48235 * C2011 +
          (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                C1160 +
            (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                C47983) *
               C16331 +
           ((C32079 + C32078) * C1160 + (C32081 + C32080) * C47983) * C48344) *
              C48235 * C2012 -
          (((C31648 * C2030 + C48367 * C2037 + C31647 * C2023 +
             C31645 * C2034) *
                C47983 +
            (C31648 * C2019 + C48367 * C2029 + C31647 * C2016 +
             C31645 * C2024) *
                C1160) *
               C48344 +
           ((C31648 * C2028 + C48367 * C2036 + C31647 * C2025 +
             C31645 * C2035) *
                C47983 +
            (C31648 * C2018 + C48367 * C2027 + C31647 * C2017 +
             C31645 * C2026) *
                C1160) *
               C16331) *
              C48235 * C2013 +
          (((C31647 * C2018 + C31645 * C2027 + C31648 * C12799 +
             C48367 * C12801) *
                C1160 +
            (C31647 * C2028 + C31645 * C2036 + C31648 * C12802 +
             C48367 * C12805) *
                C47983) *
               C16331 +
           ((C31647 * C2019 + C31645 * C2029 + C31648 * C12800 +
             C48367 * C12803) *
                C1160 +
            (C31647 * C2030 + C31645 * C2037 + C31648 * C12804 +
             C48367 * C12806) *
                C47983) *
               C48344) *
              C48235 * C2014) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C47001 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C48298 -
             (C31682 + C31683) * C46982 - (C31684 + C31685) * C47993) *
                C16331 +
            ((C31683 + C31682) * C47001 + (C31685 + C31684) * C48298 -
             (C31687 + C31686) * C46982 - (C31689 + C31688) * C47993) *
                C48344) *
               C48235 * C48316 +
           (((C32070 + C32071) * C46982 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C48298 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C47001) +
             (C32072 + C32073) * C47993) *
                C16331 +
            ((C32075 + C32074) * C46982 -
             ((C32073 + C32072) * C48298 + (C32071 + C32070) * C47001) +
             (C32077 + C32076) * C47993) *
                C48344) *
               C48235 * C48134) *
              C1086 +
          ((((C31876 + C31877) * C46982 -
             ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                  C48298 +
              (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                  C47001) +
             (C31878 + C31879) * C47993) *
                C16331 +
            ((C31881 + C31880) * C46982 -
             ((C31879 + C31878) * C48298 + (C31877 + C31876) * C47001) +
             (C31883 + C31882) * C47993) *
                C48344) *
               C48235 * C48316 +
           (((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C47001 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C48298 -
             (C32580 + C32581) * C46982 - (C32582 + C32583) * C47993) *
                C16331 +
            ((C32581 + C32580) * C47001 + (C32583 + C32582) * C48298 -
             (C32585 + C32584) * C46982 - (C32587 + C32586) * C47993) *
                C48344) *
               C48235 * C48134) *
              C1087 +
          ((((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                 C47001 +
             (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                 C48298 -
             (C31884 + C31885) * C46982 - (C31886 + C31887) * C47993) *
                C16331 +
            ((C31885 + C31884) * C47001 + (C31887 + C31886) * C48298 -
             (C31889 + C31888) * C46982 - (C31891 + C31890) * C47993) *
                C48344) *
               C48235 * C48316 +
           (((C33306 + C33307) * C46982 -
             ((C31648 * C1317 + C48367 * C1328 + C31647 * C1314 +
               C31645 * C1327) *
                  C48298 +
              (C31648 * C1301 + C48367 * C1316 + C31647 * C1300 +
               C31645 * C1315) *
                  C47001) +
             (C33308 + C33309) * C47993) *
                C16331 +
            ((C31647 * C1298 + C31645 * C1311 + C31648 * C1303 +
              C48367 * C1320) *
                 C46982 -
             ((C33309 + C33308) * C48298 + (C33307 + C33306) * C47001) +
             (C31647 * C1310 + C31645 * C1325 + C31648 * C1321 +
              C48367 * C1330) *
                 C47993) *
                C48344) *
               C48235 * C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C665 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C659 -
            (C31682 + C31683) * C666 - (C31684 + C31685) * C660 +
            (C31686 + C31687) * C667 + (C31688 + C31689) * C661 -
            (C31690 + C31691) * C668 - (C31692 + C31693) * C48351) *
               C16331 +
           ((C31683 + C31682) * C665 + (C31685 + C31684) * C659 -
            (C31687 + C31686) * C666 - (C31689 + C31688) * C660 +
            (C31691 + C31690) * C667 + (C31693 + C31692) * C661 -
            (C31695 + C31694) * C668 - (C31697 + C31696) * C48351) *
               C48344) *
              C48235 * C48316 +
          (((C32070 + C32071) * C666 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C659 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C665) +
            (C32072 + C32073) * C660 - (C32074 + C32075) * C667 -
            (C32076 + C32077) * C661 + (C32366 + C32367) * C668 +
            (C32368 + C32369) * C48351) *
               C16331 +
           ((C32075 + C32074) * C666 -
            ((C32073 + C32072) * C659 + (C32071 + C32070) * C665) +
            (C32077 + C32076) * C660 - (C32367 + C32366) * C667 -
            (C32369 + C32368) * C661 +
            (C31647 * C489 + C31645 * C503 + C31648 * C494 + C48367 * C513) *
                C668 +
            (C31647 * C504 + C31645 * C519 + C31648 * C514 + C48367 * C524) *
                C48351) *
               C48344) *
              C48235 * C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C47001 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48298 -
            (C31682 + C31683) * C46982 - (C31684 + C31685) * C47993) *
               C16331 +
           ((C31683 + C31682) * C47001 + (C31685 + C31684) * C48298 -
            (C31687 + C31686) * C46982 - (C31689 + C31688) * C47993) *
               C48344) *
              C48235 * C2299 +
          (((C32070 + C32071) * C46982 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C48298 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C47001) +
            (C32072 + C32073) * C47993) *
               C16331 +
           ((C32075 + C32074) * C46982 -
            ((C32073 + C32072) * C48298 + (C32071 + C32070) * C47001) +
            (C32077 + C32076) * C47993) *
               C48344) *
              C48235 * C2300 +
          (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                C47001 +
            (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                C48298 -
            (C32078 + C32079) * C46982 - (C32080 + C32081) * C47993) *
               C16331 +
           ((C32079 + C32078) * C47001 + (C32081 + C32080) * C48298 -
            (C32083 + C32082) * C46982 - (C32085 + C32084) * C47993) *
               C48344) *
              C48235 * C2301 +
          (((C34158 + C34159) * C46982 -
            ((C31648 * C2028 + C48367 * C2036 + C31647 * C2025 +
              C31645 * C2035) *
                 C48298 +
             (C31648 * C2018 + C48367 * C2027 + C31647 * C2017 +
              C31645 * C2026) *
                 C47001) +
            (C34160 + C34161) * C47993) *
               C16331 +
           ((C31647 * C2015 + C31645 * C2022 + C31648 * C2020 +
             C48367 * C2031) *
                C46982 -
            ((C34161 + C34160) * C48298 + (C34159 + C34158) * C47001) +
            (C31647 * C2021 + C31645 * C2033 + C31648 * C2032 +
             C48367 * C2038) *
                C47993) *
               C48344) *
              C48235 * C48363) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C293 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C287 -
            (C31682 + C31683) * C294 - (C31684 + C31685) * C288 +
            (C31686 + C31687) * C295 + (C31688 + C31689) * C48339) *
               C16331 +
           ((C31683 + C31682) * C293 + (C31685 + C31684) * C287 -
            (C31687 + C31686) * C294 - (C31689 + C31688) * C288 +
            (C31691 + C31690) * C295 + (C31693 + C31692) * C48339) *
               C48344) *
              C48235 * C48047 * C48386 +
          (((C31876 + C31877) * C294 -
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C287 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C293) +
            (C31878 + C31879) * C288 - (C31880 + C31881) * C295 -
            (C31882 + C31883) * C48339) *
               C16331 +
           ((C31881 + C31880) * C294 -
            ((C31879 + C31878) * C287 + (C31877 + C31876) * C293) +
            (C31883 + C31882) * C288 -
            (C31648 * C938 + C48367 * C946 + C31647 * C299 + C31645 * C312) *
                C295 -
            (C31648 * C947 + C48367 * C953 + C31647 * C313 + C31645 * C329) *
                C48339) *
               C48344) *
              C48235 * C48047 * C48374 +
          (((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                C293 +
            (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                C287 -
            (C31884 + C31885) * C294 - (C31886 + C31887) * C288 +
            (C31888 + C31889) * C295 + (C31890 + C31891) * C48339) *
               C16331 +
           ((C31885 + C31884) * C293 + (C31887 + C31886) * C287 -
            (C31889 + C31888) * C294 - (C31891 + C31890) * C288 +
            (C31647 * C304 + C31645 * C322 + C31648 * C1599 + C48367 * C1600) *
                C295 +
            (C31647 * C323 + C31645 * C334 + C31648 * C1601 + C48367 * C1602) *
                C48339) *
               C48344) *
              C48235 * C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
               C114 +
           (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
               C102 -
           (C31682 + C31683) * C115 - (C31684 + C31685) * C103 +
           (C31686 + C31687) * C116 + (C31688 + C31689) * C104 -
           (C31690 + C31691) * C117 - (C31692 + C31693) * C105 +
           (C31694 + C31695) * C118 + (C31696 + C31697) * C106) *
              C16331 +
          ((C31683 + C31682) * C114 + (C31685 + C31684) * C102 -
           (C31687 + C31686) * C115 - (C31689 + C31688) * C103 +
           (C31691 + C31690) * C116 + (C31693 + C31692) * C104 -
           (C31695 + C31694) * C117 - (C31697 + C31696) * C105 +
           (C31647 * C124 + C31645 * C136 + C31648 * C779 + C48367 * C780) *
               C118 +
           (C31647 * C137 + C31645 * C145 + C31648 * C781 + C48367 * C782) *
               C106) *
              C48344) *
         C48235 * C48047 * C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1089 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48383 -
            (C31682 + C31683) * C1090 - (C31684 + C31685) * C48370 +
            (C31686 + C31687) * C1091 + (C31688 + C31689) * C48339) *
               C16331 +
           ((C31683 + C31682) * C1089 + (C31685 + C31684) * C48383 -
            (C31687 + C31686) * C1090 - (C31689 + C31688) * C48370 +
            (C31691 + C31690) * C1091 + (C31693 + C31692) * C48339) *
               C48344) *
              C48235 * C48047 * C1086 +
          (((C31876 + C31877) * C1090 -
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C48383 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C1089) +
            (C31878 + C31879) * C48370 - (C31880 + C31881) * C1091 -
            (C31882 + C31883) * C48339) *
               C16331 +
           ((C31881 + C31880) * C1090 -
            ((C31879 + C31878) * C48383 + (C31877 + C31876) * C1089) +
            (C31883 + C31882) * C48370 - (C32225 + C32224) * C1091 -
            (C32227 + C32226) * C48339) *
               C48344) *
              C48235 * C48047 * C1087 +
          (((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                C1089 +
            (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                C48383 -
            (C31884 + C31885) * C1090 - (C31886 + C31887) * C48370 +
            (C31888 + C31889) * C1091 + (C31890 + C31891) * C48339) *
               C16331 +
           ((C31885 + C31884) * C1089 + (C31887 + C31886) * C48383 -
            (C31889 + C31888) * C1090 - (C31891 + C31890) * C48370 +
            (C31647 * C304 + C31645 * C322 + C31648 * C1599 + C48367 * C1600) *
                C1091 +
            (C31647 * C323 + C31645 * C334 + C31648 * C1601 + C48367 * C1602) *
                C48339) *
               C48344) *
              C48235 * C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1160 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C47983) *
               C16331 +
           ((C31683 + C31682) * C1160 + (C31685 + C31684) * C47983) * C48344) *
              C48235 * C48047 * C1155 -
          (((C31879 + C31878) * C47983 + (C31877 + C31876) * C1160) * C48344 +
           ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                C47983 +
            (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                C1160) *
               C16331) *
              C48235 * C48047 * C1156 +
          (((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                C1160 +
            (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                C47983) *
               C16331 +
           ((C31885 + C31884) * C1160 + (C31887 + C31886) * C47983) * C48344) *
              C48235 * C48047 * C1157 -
          (((C31648 * C1719 + C48367 * C1723 + C31647 * C1169 +
             C31645 * C1180) *
                C47983 +
            (C31648 * C1714 + C48367 * C1718 + C31647 * C1162 +
             C31645 * C1170) *
                C1160) *
               C48344 +
           ((C31648 * C1717 + C48367 * C1722 + C31647 * C1171 +
             C31645 * C1181) *
                C47983 +
            (C31648 * C1713 + C48367 * C1716 + C31647 * C1163 +
             C31645 * C1172) *
                C1160) *
               C16331) *
              C48235 * C48047 * C1158 +
          (((C31647 * C1164 + C31645 * C1173 + C31648 * C6587 +
             C48367 * C6589) *
                C1160 +
            (C31647 * C1174 + C31645 * C1182 + C31648 * C6590 +
             C48367 * C6593) *
                C47983) *
               C16331 +
           ((C31647 * C1165 + C31645 * C1175 + C31648 * C6588 +
             C48367 * C6591) *
                C1160 +
            (C31647 * C1176 + C31645 * C1183 + C31648 * C6592 +
             C48367 * C6594) *
                C47983) *
               C48344) *
              C48235 * C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1089 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48383 -
            (C31682 + C31683) * C1090 - (C31684 + C31685) * C48370 +
            (C31686 + C31687) * C1091 + (C31688 + C31689) * C48339) *
               C16331 +
           ((C31683 + C31682) * C1089 + (C31685 + C31684) * C48383 -
            (C31687 + C31686) * C1090 - (C31689 + C31688) * C48370 +
            (C31691 + C31690) * C1091 + (C31693 + C31692) * C48339) *
               C48344) *
              C48235 * C1835 +
          (((C32070 + C32071) * C1090 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C48383 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1089) +
            (C32072 + C32073) * C48370 - (C32074 + C32075) * C1091 -
            (C32076 + C32077) * C48339) *
               C16331 +
           ((C32075 + C32074) * C1090 -
            ((C32073 + C32072) * C48383 + (C32071 + C32070) * C1089) +
            (C32077 + C32076) * C48370 - (C32367 + C32366) * C1091 -
            (C32369 + C32368) * C48339) *
               C48344) *
              C48235 * C1836 +
          (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                C1089 +
            (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                C48383 -
            (C32078 + C32079) * C1090 - (C32080 + C32081) * C48370 +
            (C32082 + C32083) * C1091 + (C32084 + C32085) * C48339) *
               C16331 +
           ((C32079 + C32078) * C1089 + (C32081 + C32080) * C48383 -
            (C32083 + C32082) * C1090 - (C32085 + C32084) * C48370 +
            (C31647 * C493 + C31645 * C511 + C31648 * C2303 + C48367 * C2304) *
                C1091 +
            (C31647 * C512 + C31645 * C523 + C31648 * C2305 + C48367 * C2306) *
                C48339) *
               C48344) *
              C48235 * C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C16331 +
            ((C31683 + C31682) * C1160 + (C31685 + C31684) * C47983) * C48344) *
               C48235 * C1835 -
           (((C32073 + C32072) * C47983 + (C32071 + C32070) * C1160) * C48344 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C16331) *
               C48235 * C1836 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C1160 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C47983) *
                C16331 +
            ((C32079 + C32078) * C1160 + (C32081 + C32080) * C47983) * C48344) *
               C48235 * C48350) *
              C48386 +
          ((((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C1160 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C47983) *
                C16331 +
            ((C32581 + C32580) * C1160 + (C32583 + C32582) * C47983) * C48344) *
               C48235 * C1836 -
           (((C31879 + C31878) * C47983 + (C31877 + C31876) * C1160) * C48344 +
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C47983 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C1160) *
                C16331) *
               C48235 * C1835 -
           (((C31648 * C2423 + C48367 * C2427 + C31647 * C1306 +
              C31645 * C1323) *
                 C47983 +
             (C31648 * C2418 + C48367 * C2422 + C31647 * C1296 +
              C31645 * C1307) *
                 C1160) *
                C48344 +
            ((C31648 * C2421 + C48367 * C2426 + C31647 * C1308 +
              C31645 * C1324) *
                 C47983 +
             (C31648 * C2417 + C48367 * C2420 + C31647 * C1297 +
              C31645 * C1309) *
                 C1160) *
                C16331) *
               C48235 * C48350) *
              C48374 +
          ((((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                 C1160 +
             (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                 C47983) *
                C16331 +
            ((C31885 + C31884) * C1160 + (C31887 + C31886) * C47983) * C48344) *
               C48235 * C1835 -
           (((C33309 + C33308) * C47983 + (C33307 + C33306) * C1160) * C48344 +
            ((C31648 * C1317 + C48367 * C1328 + C31647 * C1314 +
              C31645 * C1327) *
                 C47983 +
             (C31648 * C1301 + C48367 * C1316 + C31647 * C1300 +
              C31645 * C1315) *
                 C1160) *
                C16331) *
               C48235 * C1836 +
           (((C31647 * C1301 + C31645 * C1316 + C31648 * C7455 +
              C48367 * C7457) *
                 C1160 +
             (C31647 * C1317 + C31645 * C1328 + C31648 * C7458 +
              C48367 * C7461) *
                 C47983) *
                C16331 +
            ((C31647 * C1302 + C31645 * C1318 + C31648 * C7456 +
              C48367 * C7459) *
                 C1160 +
             (C31647 * C1319 + C31645 * C1329 + C31648 * C7460 +
              C48367 * C7462) *
                 C47983) *
                C48344) *
               C48235 * C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C47011 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47988 -
             (C31682 + C31683) * C47007 - (C31684 + C31685) * C47996 +
             (C31686 + C31687) * C47017 + (C31688 + C31689) * C2901) *
                C16331 +
            ((C31683 + C31682) * C47011 + (C31685 + C31684) * C47988 -
             (C31687 + C31686) * C47007 - (C31689 + C31688) * C47996 +
             (C31691 + C31690) * C47017 + (C31693 + C31692) * C2901) *
                C48344) *
               C48235 * C3298 +
           (((C32070 + C32071) * C47007 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C47988 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C47011) +
             (C32072 + C32073) * C47996 - (C32074 + C32075) * C47017 -
             (C32076 + C32077) * C2901) *
                C16331 +
            ((C32075 + C32074) * C47007 -
             ((C32073 + C32072) * C47988 + (C32071 + C32070) * C47011) +
             (C32077 + C32076) * C47996 - (C32367 + C32366) * C47017 -
             (C32369 + C32368) * C2901) *
                C48344) *
               C48235 * C48134) *
              C48315 +
          ((((C31876 + C31877) * C47007 -
             ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                  C47988 +
              (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                  C47011) +
             (C31878 + C31879) * C47996 - (C31880 + C31881) * C47017 -
             (C31882 + C31883) * C2901) *
                C16331 +
            ((C31881 + C31880) * C47007 -
             ((C31879 + C31878) * C47988 + (C31877 + C31876) * C47011) +
             (C31883 + C31882) * C47996 - (C32225 + C32224) * C47017 -
             (C32227 + C32226) * C2901) *
                C48344) *
               C48235 * C3298 +
           (((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C47011 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C47988 -
             (C32580 + C32581) * C47007 - (C32582 + C32583) * C47996 +
             (C32584 + C32585) * C47017 + (C32586 + C32587) * C2901) *
                C16331 +
            ((C32581 + C32580) * C47011 + (C32583 + C32582) * C47988 -
             (C32585 + C32584) * C47007 - (C32587 + C32586) * C47996 +
             (C31647 * C938 + C31645 * C946 + C31648 * C2185 + C48367 * C2186) *
                 C47017 +
             (C31647 * C947 + C31645 * C953 + C31648 * C2187 + C48367 * C2188) *
                 C2901) *
                C48344) *
               C48235 * C48134) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C2641 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C2635 -
             (C31682 + C31683) * C2642 - (C31684 + C31685) * C47993) *
                C16331 +
            ((C31683 + C31682) * C2641 + (C31685 + C31684) * C2635 -
             (C31687 + C31686) * C2642 - (C31689 + C31688) * C47993) *
                C48344) *
               C48235 * C48130 +
           (((C32070 + C32071) * C2642 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C2635 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C2641) +
             (C32072 + C32073) * C47993) *
                C16331 +
            ((C32075 + C32074) * C2642 -
             ((C32073 + C32072) * C2635 + (C32071 + C32070) * C2641) +
             (C32077 + C32076) * C47993) *
                C48344) *
               C48235 * C48137 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C2641 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C2635 -
             (C32078 + C32079) * C2642 - (C32080 + C32081) * C47993) *
                C16331 +
            ((C32079 + C32078) * C2641 + (C32081 + C32080) * C2635 -
             (C32083 + C32082) * C2642 - (C32085 + C32084) * C47993) *
                C48344) *
               C48235 * C3806) *
              C48315 +
          ((((C31876 + C31877) * C2642 -
             ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                  C2635 +
              (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                  C2641) +
             (C31878 + C31879) * C47993) *
                C16331 +
            ((C31881 + C31880) * C2642 -
             ((C31879 + C31878) * C2635 + (C31877 + C31876) * C2641) +
             (C31883 + C31882) * C47993) *
                C48344) *
               C48235 * C48130 +
           (((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C2641 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C2635 -
             (C32580 + C32581) * C2642 - (C32582 + C32583) * C47993) *
                C16331 +
            ((C32581 + C32580) * C2641 + (C32583 + C32582) * C2635 -
             (C32585 + C32584) * C2642 - (C32587 + C32586) * C47993) *
                C48344) *
               C48235 * C48137 +
           (((C34016 + C34017) * C2642 -
             ((C31648 * C2421 + C48367 * C2426 + C31647 * C1308 +
               C31645 * C1324) *
                  C2635 +
              (C31648 * C2417 + C48367 * C2420 + C31647 * C1297 +
               C31645 * C1309) *
                  C2641) +
             (C34018 + C34019) * C47993) *
                C16331 +
            ((C31647 * C1295 + C31645 * C1305 + C31648 * C2419 +
              C48367 * C2424) *
                 C2642 -
             ((C34019 + C34018) * C2635 + (C34017 + C34016) * C2641) +
             (C31647 * C1304 + C31645 * C1322 + C31648 * C2425 +
              C48367 * C2428) *
                 C47993) *
                C48344) *
               C48235 * C3806) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C2641 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C2635 -
             (C31682 + C31683) * C2642 - (C31684 + C31685) * C47993) *
                C16331 +
            ((C31683 + C31682) * C2641 + (C31685 + C31684) * C2635 -
             (C31687 + C31686) * C2642 - (C31689 + C31688) * C47993) *
                C48344) *
               C48235 * C3298 +
           (((C32070 + C32071) * C2642 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C2635 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C2641) +
             (C32072 + C32073) * C47993) *
                C16331 +
            ((C32075 + C32074) * C2642 -
             ((C32073 + C32072) * C2635 + (C32071 + C32070) * C2641) +
             (C32077 + C32076) * C47993) *
                C48344) *
               C48235 * C48134) *
              C48386 +
          ((((C31876 + C31877) * C2642 -
             ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                  C2635 +
              (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                  C2641) +
             (C31878 + C31879) * C47993) *
                C16331 +
            ((C31881 + C31880) * C2642 -
             ((C31879 + C31878) * C2635 + (C31877 + C31876) * C2641) +
             (C31883 + C31882) * C47993) *
                C48344) *
               C48235 * C3298 +
           (((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C2641 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C2635 -
             (C32580 + C32581) * C2642 - (C32582 + C32583) * C47993) *
                C16331 +
            ((C32581 + C32580) * C2641 + (C32583 + C32582) * C2635 -
             (C32585 + C32584) * C2642 - (C32587 + C32586) * C47993) *
                C48344) *
               C48235 * C48134) *
              C48374 +
          ((((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                 C2641 +
             (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                 C2635 -
             (C31884 + C31885) * C2642 - (C31886 + C31887) * C47993) *
                C16331 +
            ((C31885 + C31884) * C2641 + (C31887 + C31886) * C2635 -
             (C31889 + C31888) * C2642 - (C31891 + C31890) * C47993) *
                C48344) *
               C48235 * C3298 +
           (((C33306 + C33307) * C2642 -
             ((C31648 * C1317 + C48367 * C1328 + C31647 * C1314 +
               C31645 * C1327) *
                  C2635 +
              (C31648 * C1301 + C48367 * C1316 + C31647 * C1300 +
               C31645 * C1315) *
                  C2641) +
             (C33308 + C33309) * C47993) *
                C16331 +
            ((C31647 * C1298 + C31645 * C1311 + C31648 * C1303 +
              C48367 * C1320) *
                 C2642 -
             ((C33309 + C33308) * C2635 + (C33307 + C33306) * C2641) +
             (C31647 * C1310 + C31645 * C1325 + C31648 * C1321 +
              C48367 * C1330) *
                 C47993) *
                C48344) *
               C48235 * C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C2533 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48392 -
            (C31682 + C31683) * C2534 - (C31684 + C31685) * C48385 +
            (C31686 + C31687) * C2535 + (C31688 + C31689) * C48372 -
            (C31690 + C31691) * C2536 - (C31692 + C31693) * C48351) *
               C16331 +
           ((C31683 + C31682) * C2533 + (C31685 + C31684) * C48392 -
            (C31687 + C31686) * C2534 - (C31689 + C31688) * C48385 +
            (C31691 + C31690) * C2535 + (C31693 + C31692) * C48372 -
            (C31695 + C31694) * C2536 - (C31697 + C31696) * C48351) *
               C48344) *
              C48235 * C3298 +
          (((C32070 + C32071) * C2534 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C48392 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C2533) +
            (C32072 + C32073) * C48385 - (C32074 + C32075) * C2535 -
            (C32076 + C32077) * C48372 + (C32366 + C32367) * C2536 +
            (C32368 + C32369) * C48351) *
               C16331 +
           ((C32075 + C32074) * C2534 -
            ((C32073 + C32072) * C48392 + (C32071 + C32070) * C2533) +
            (C32077 + C32076) * C48385 - (C32367 + C32366) * C2535 -
            (C32369 + C32368) * C48372 +
            (C31647 * C489 + C31645 * C503 + C31648 * C494 + C48367 * C513) *
                C2536 +
            (C31647 * C504 + C31645 * C519 + C31648 * C514 + C48367 * C524) *
                C48351) *
               C48344) *
              C48235 * C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C2641 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C2635 -
            (C31682 + C31683) * C2642 - (C31684 + C31685) * C47993) *
               C16331 +
           ((C31683 + C31682) * C2641 + (C31685 + C31684) * C2635 -
            (C31687 + C31686) * C2642 - (C31689 + C31688) * C47993) *
               C48344) *
              C48235 * C48394 +
          (((C32070 + C32071) * C2642 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C2635 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C2641) +
            (C32072 + C32073) * C47993) *
               C16331 +
           ((C32075 + C32074) * C2642 -
            ((C32073 + C32072) * C2635 + (C32071 + C32070) * C2641) +
            (C32077 + C32076) * C47993) *
               C48344) *
              C48235 * C48391 +
          (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                C2641 +
            (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                C2635 -
            (C32078 + C32079) * C2642 - (C32080 + C32081) * C47993) *
               C16331 +
           ((C32079 + C32078) * C2641 + (C32081 + C32080) * C2635 -
            (C32083 + C32082) * C2642 - (C32085 + C32084) * C47993) *
               C48344) *
              C48235 * C48382 +
          (((C34158 + C34159) * C2642 -
            ((C31648 * C2028 + C48367 * C2036 + C31647 * C2025 +
              C31645 * C2035) *
                 C2635 +
             (C31648 * C2018 + C48367 * C2027 + C31647 * C2017 +
              C31645 * C2026) *
                 C2641) +
            (C34160 + C34161) * C47993) *
               C16331 +
           ((C31647 * C2015 + C31645 * C2022 + C31648 * C2020 +
             C48367 * C2031) *
                C2642 -
            ((C34161 + C34160) * C2635 + (C34159 + C34158) * C2641) +
            (C31647 * C2021 + C31645 * C2033 + C31648 * C2032 +
             C48367 * C2038) *
                C47993) *
               C48344) *
              C48235 * C48363) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C47011 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C47988 -
            (C31682 + C31683) * C47007 - (C31684 + C31685) * C47996 +
            (C31686 + C31687) * C47017 + (C31688 + C31689) * C2901) *
               C16331 +
           ((C31683 + C31682) * C47011 + (C31685 + C31684) * C47988 -
            (C31687 + C31686) * C47007 - (C31689 + C31688) * C47996 +
            (C31691 + C31690) * C47017 + (C31693 + C31692) * C2901) *
               C48344) *
              C48235 * C48130 +
          (((C32070 + C32071) * C47007 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47988 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C47011) +
            (C32072 + C32073) * C47996 - (C32074 + C32075) * C47017 -
            (C32076 + C32077) * C2901) *
               C16331 +
           ((C32075 + C32074) * C47007 -
            ((C32073 + C32072) * C47988 + (C32071 + C32070) * C47011) +
            (C32077 + C32076) * C47996 - (C32367 + C32366) * C47017 -
            (C32369 + C32368) * C2901) *
               C48344) *
              C48235 * C48137 +
          (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                C47011 +
            (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                C47988 -
            (C32078 + C32079) * C47007 - (C32080 + C32081) * C47996 +
            (C32082 + C32083) * C47017 + (C32084 + C32085) * C2901) *
               C16331 +
           ((C32079 + C32078) * C47011 + (C32081 + C32080) * C47988 -
            (C32083 + C32082) * C47007 - (C32085 + C32084) * C47996 +
            (C31647 * C493 + C31645 * C511 + C31648 * C2303 + C48367 * C2304) *
                C47017 +
            (C31647 * C512 + C31645 * C523 + C31648 * C2305 + C48367 * C2306) *
                C2901) *
               C48344) *
              C48235 * C3806) *
         C48035) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C2533 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48392 -
            (C31682 + C31683) * C2534 - (C31684 + C31685) * C48385 +
            (C31686 + C31687) * C2535 + (C31688 + C31689) * C48372 -
            (C31690 + C31691) * C2536 - (C31692 + C31693) * C48351) *
               C16331 +
           ((C31683 + C31682) * C2533 + (C31685 + C31684) * C48392 -
            (C31687 + C31686) * C2534 - (C31689 + C31688) * C48385 +
            (C31691 + C31690) * C2535 + (C31693 + C31692) * C48372 -
            (C31695 + C31694) * C2536 - (C31697 + C31696) * C48351) *
               C48344) *
              C48235 * C3298 +
          (((C32070 + C32071) * C2534 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C48392 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C2533) +
            (C32072 + C32073) * C48385 - (C32074 + C32075) * C2535 -
            (C32076 + C32077) * C48372 + (C32366 + C32367) * C2536 +
            (C32368 + C32369) * C48351) *
               C16331 +
           ((C32075 + C32074) * C2534 -
            ((C32073 + C32072) * C48392 + (C32071 + C32070) * C2533) +
            (C32077 + C32076) * C48385 - (C32367 + C32366) * C2535 -
            (C32369 + C32368) * C48372 +
            (C31647 * C489 + C31645 * C503 + C31648 * C494 + C48367 * C513) *
                C2536 +
            (C31647 * C504 + C31645 * C519 + C31648 * C514 + C48367 * C524) *
                C48351) *
               C48344) *
              C48235 * C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C2641 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C2635 -
             (C31682 + C31683) * C2642 - (C31684 + C31685) * C47993) *
                C16331 +
            ((C31683 + C31682) * C2641 + (C31685 + C31684) * C2635 -
             (C31687 + C31686) * C2642 - (C31689 + C31688) * C47993) *
                C48344) *
               C48235 * C3298 +
           (((C32070 + C32071) * C2642 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C2635 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C2641) +
             (C32072 + C32073) * C47993) *
                C16331 +
            ((C32075 + C32074) * C2642 -
             ((C32073 + C32072) * C2635 + (C32071 + C32070) * C2641) +
             (C32077 + C32076) * C47993) *
                C48344) *
               C48235 * C48134) *
              C48386 +
          ((((C31876 + C31877) * C2642 -
             ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                  C2635 +
              (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                  C2641) +
             (C31878 + C31879) * C47993) *
                C16331 +
            ((C31881 + C31880) * C2642 -
             ((C31879 + C31878) * C2635 + (C31877 + C31876) * C2641) +
             (C31883 + C31882) * C47993) *
                C48344) *
               C48235 * C3298 +
           (((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C2641 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C2635 -
             (C32580 + C32581) * C2642 - (C32582 + C32583) * C47993) *
                C16331 +
            ((C32581 + C32580) * C2641 + (C32583 + C32582) * C2635 -
             (C32585 + C32584) * C2642 - (C32587 + C32586) * C47993) *
                C48344) *
               C48235 * C48134) *
              C48374 +
          ((((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                 C2641 +
             (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                 C2635 -
             (C31884 + C31885) * C2642 - (C31886 + C31887) * C47993) *
                C16331 +
            ((C31885 + C31884) * C2641 + (C31887 + C31886) * C2635 -
             (C31889 + C31888) * C2642 - (C31891 + C31890) * C47993) *
                C48344) *
               C48235 * C3298 +
           (((C33306 + C33307) * C2642 -
             ((C31648 * C1317 + C48367 * C1328 + C31647 * C1314 +
               C31645 * C1327) *
                  C2635 +
              (C31648 * C1301 + C48367 * C1316 + C31647 * C1300 +
               C31645 * C1315) *
                  C2641) +
             (C33308 + C33309) * C47993) *
                C16331 +
            ((C31647 * C1298 + C31645 * C1311 + C31648 * C1303 +
              C48367 * C1320) *
                 C2642 -
             ((C33309 + C33308) * C2635 + (C33307 + C33306) * C2641) +
             (C31647 * C1310 + C31645 * C1325 + C31648 * C1321 +
              C48367 * C1330) *
                 C47993) *
                C48344) *
               C48235 * C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C665 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C659 -
            (C31682 + C31683) * C666 - (C31684 + C31685) * C660 +
            (C31686 + C31687) * C667 + (C31688 + C31689) * C661 -
            (C31690 + C31691) * C668 - (C31692 + C31693) * C48351) *
               C16331 +
           ((C31683 + C31682) * C665 + (C31685 + C31684) * C659 -
            (C31687 + C31686) * C666 - (C31689 + C31688) * C660 +
            (C31691 + C31690) * C667 + (C31693 + C31692) * C661 -
            (C31695 + C31694) * C668 - (C31697 + C31696) * C48351) *
               C48344) *
              C48235 * C48047 * C48315 +
          (((C31876 + C31877) * C666 -
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C659 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C665) +
            (C31878 + C31879) * C660 - (C31880 + C31881) * C667 -
            (C31882 + C31883) * C661 + (C32224 + C32225) * C668 +
            (C32226 + C32227) * C48351) *
               C16331 +
           ((C31881 + C31880) * C666 -
            ((C31879 + C31878) * C659 + (C31877 + C31876) * C665) +
            (C31883 + C31882) * C660 - (C32225 + C32224) * C667 -
            (C32227 + C32226) * C661 +
            (C31647 * C300 + C31645 * C314 + C31648 * C939 + C48367 * C948) *
                C668 +
            (C31647 * C315 + C31645 * C330 + C31648 * C949 + C48367 * C954) *
                C48351) *
               C48344) *
              C48235 * C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C47001 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48298 -
            (C31682 + C31683) * C46982 - (C31684 + C31685) * C47993) *
               C16331 +
           ((C31683 + C31682) * C47001 + (C31685 + C31684) * C48298 -
            (C31687 + C31686) * C46982 - (C31689 + C31688) * C47993) *
               C48344) *
              C48235 * C48047 * C1431 +
          (((C31876 + C31877) * C46982 -
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C48298 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C47001) +
            (C31878 + C31879) * C47993) *
               C16331 +
           ((C31881 + C31880) * C46982 -
            ((C31879 + C31878) * C48298 + (C31877 + C31876) * C47001) +
            (C31883 + C31882) * C47993) *
               C48344) *
              C48235 * C48047 * C1432 +
          (((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                C47001 +
            (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                C48298 -
            (C31884 + C31885) * C46982 - (C31886 + C31887) * C47993) *
               C16331 +
           ((C31885 + C31884) * C47001 + (C31887 + C31886) * C48298 -
            (C31889 + C31888) * C46982 - (C31891 + C31890) * C47993) *
               C48344) *
              C48235 * C48047 * C1433 +
          (((C33100 + C33101) * C46982 -
            ((C31648 * C1717 + C48367 * C1722 + C31647 * C1171 +
              C31645 * C1181) *
                 C48298 +
             (C31648 * C1713 + C48367 * C1716 + C31647 * C1163 +
              C31645 * C1172) *
                 C47001) +
            (C33102 + C33103) * C47993) *
               C16331 +
           ((C31647 * C1161 + C31645 * C1168 + C31648 * C1715 +
             C48367 * C1720) *
                C46982 -
            ((C33103 + C33102) * C48298 + (C33101 + C33100) * C47001) +
            (C31647 * C1167 + C31645 * C1179 + C31648 * C1721 +
             C48367 * C1724) *
                C47993) *
               C48344) *
              C48235 * C48047 * C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C293 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C287 -
             (C31682 + C31683) * C294 - (C31684 + C31685) * C288 +
             (C31686 + C31687) * C295 + (C31688 + C31689) * C48339) *
                C16331 +
            ((C31683 + C31682) * C293 + (C31685 + C31684) * C287 -
             (C31687 + C31686) * C294 - (C31689 + C31688) * C288 +
             (C31691 + C31690) * C295 + (C31693 + C31692) * C48339) *
                C48344) *
               C48235 * C48316 +
           (((C32070 + C32071) * C294 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C287 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C293) +
             (C32072 + C32073) * C288 - (C32074 + C32075) * C295 -
             (C32076 + C32077) * C48339) *
                C16331 +
            ((C32075 + C32074) * C294 -
             ((C32073 + C32072) * C287 + (C32071 + C32070) * C293) +
             (C32077 + C32076) * C288 - (C32367 + C32366) * C295 -
             (C32369 + C32368) * C48339) *
                C48344) *
               C48235 * C48134) *
              C48315 +
          ((((C31876 + C31877) * C294 -
             ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                  C287 +
              (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                  C293) +
             (C31878 + C31879) * C288 - (C31880 + C31881) * C295 -
             (C31882 + C31883) * C48339) *
                C16331 +
            ((C31881 + C31880) * C294 -
             ((C31879 + C31878) * C287 + (C31877 + C31876) * C293) +
             (C31883 + C31882) * C288 - (C32225 + C32224) * C295 -
             (C32227 + C32226) * C48339) *
                C48344) *
               C48235 * C48316 +
           (((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C293 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C287 -
             (C32580 + C32581) * C294 - (C32582 + C32583) * C288 +
             (C32584 + C32585) * C295 + (C32586 + C32587) * C48339) *
                C16331 +
            ((C32581 + C32580) * C293 + (C32583 + C32582) * C287 -
             (C32585 + C32584) * C294 - (C32587 + C32586) * C288 +
             (C31647 * C938 + C31645 * C946 + C31648 * C2185 + C48367 * C2186) *
                 C295 +
             (C31647 * C947 + C31645 * C953 + C31648 * C2187 + C48367 * C2188) *
                 C48339) *
                C48344) *
               C48235 * C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C16331 +
            ((C31683 + C31682) * C1160 + (C31685 + C31684) * C47983) * C48344) *
               C48235 * C48316 -
           (((C32073 + C32072) * C47983 + (C32071 + C32070) * C1160) * C48344 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C16331) *
               C48235 * C48134) *
              C1431 +
          ((((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C1160 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C47983) *
                C16331 +
            ((C32581 + C32580) * C1160 + (C32583 + C32582) * C47983) * C48344) *
               C48235 * C48134 -
           (((C31879 + C31878) * C47983 + (C31877 + C31876) * C1160) * C48344 +
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C47983 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C1160) *
                C16331) *
               C48235 * C48316) *
              C1432 +
          ((((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                 C1160 +
             (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                 C47983) *
                C16331 +
            ((C31885 + C31884) * C1160 + (C31887 + C31886) * C47983) * C48344) *
               C48235 * C48316 -
           (((C33309 + C33308) * C47983 + (C33307 + C33306) * C1160) * C48344 +
            ((C31648 * C1317 + C48367 * C1328 + C31647 * C1314 +
              C31645 * C1327) *
                 C47983 +
             (C31648 * C1301 + C48367 * C1316 + C31647 * C1300 +
              C31645 * C1315) *
                 C1160) *
                C16331) *
               C48235 * C48134) *
              C1433 +
          ((((C31647 * C1713 + C31645 * C1716 + C31648 * C6039 +
              C48367 * C6041) *
                 C1160 +
             (C31647 * C1717 + C31645 * C1722 + C31648 * C6042 +
              C48367 * C6045) *
                 C47983) *
                C16331 +
            ((C31647 * C1714 + C31645 * C1718 + C31648 * C6040 +
              C48367 * C6043) *
                 C1160 +
             (C31647 * C1719 + C31645 * C1723 + C31648 * C6044 +
              C48367 * C6046) *
                 C47983) *
                C48344) *
               C48235 * C48134 -
           (((C33103 + C33102) * C47983 + (C33101 + C33100) * C1160) * C48344 +
            ((C31648 * C1717 + C48367 * C1722 + C31647 * C1171 +
              C31645 * C1181) *
                 C47983 +
             (C31648 * C1713 + C48367 * C1716 + C31647 * C1163 +
              C31645 * C1172) *
                 C1160) *
                C16331) *
               C48235 * C48316) *
              C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C293 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C287 -
            (C31682 + C31683) * C294 - (C31684 + C31685) * C288 +
            (C31686 + C31687) * C295 + (C31688 + C31689) * C48339) *
               C16331 +
           ((C31683 + C31682) * C293 + (C31685 + C31684) * C287 -
            (C31687 + C31686) * C294 - (C31689 + C31688) * C288 +
            (C31691 + C31690) * C295 + (C31693 + C31692) * C48339) *
               C48344) *
              C48235 * C48047 * C48386 +
          (((C31876 + C31877) * C294 -
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C287 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C293) +
            (C31878 + C31879) * C288 - (C31880 + C31881) * C295 -
            (C31882 + C31883) * C48339) *
               C16331 +
           ((C31881 + C31880) * C294 -
            ((C31879 + C31878) * C287 + (C31877 + C31876) * C293) +
            (C31883 + C31882) * C288 -
            (C31648 * C938 + C48367 * C946 + C31647 * C299 + C31645 * C312) *
                C295 -
            (C31648 * C947 + C48367 * C953 + C31647 * C313 + C31645 * C329) *
                C48339) *
               C48344) *
              C48235 * C48047 * C48374 +
          (((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                C293 +
            (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                C287 -
            (C31884 + C31885) * C294 - (C31886 + C31887) * C288 +
            (C31888 + C31889) * C295 + (C31890 + C31891) * C48339) *
               C16331 +
           ((C31885 + C31884) * C293 + (C31887 + C31886) * C287 -
            (C31889 + C31888) * C294 - (C31891 + C31890) * C288 +
            (C31647 * C304 + C31645 * C322 + C31648 * C1599 + C48367 * C1600) *
                C295 +
            (C31647 * C323 + C31645 * C334 + C31648 * C1601 + C48367 * C1602) *
                C48339) *
               C48344) *
              C48235 * C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
               C114 +
           (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
               C102 -
           (C31682 + C31683) * C115 - (C31684 + C31685) * C103 +
           (C31686 + C31687) * C116 + (C31688 + C31689) * C104 -
           (C31690 + C31691) * C117 - (C31692 + C31693) * C105 +
           (C31694 + C31695) * C118 + (C31696 + C31697) * C106) *
              C16331 +
          ((C31683 + C31682) * C114 + (C31685 + C31684) * C102 -
           (C31687 + C31686) * C115 - (C31689 + C31688) * C103 +
           (C31691 + C31690) * C116 + (C31693 + C31692) * C104 -
           (C31695 + C31694) * C117 - (C31697 + C31696) * C105 +
           (C31647 * C124 + C31645 * C136 + C31648 * C779 + C48367 * C780) *
               C118 +
           (C31647 * C137 + C31645 * C145 + C31648 * C781 + C48367 * C782) *
               C106) *
              C48344) *
         C48235 * C48047 * C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C293 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C287 -
            (C31682 + C31683) * C294 - (C31684 + C31685) * C288 +
            (C31686 + C31687) * C295 + (C31688 + C31689) * C48339) *
               C16331 +
           ((C31683 + C31682) * C293 + (C31685 + C31684) * C287 -
            (C31687 + C31686) * C294 - (C31689 + C31688) * C288 +
            (C31691 + C31690) * C295 + (C31693 + C31692) * C48339) *
               C48344) *
              C48235 * C48387 +
          (((C32070 + C32071) * C294 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C287 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C293) +
            (C32072 + C32073) * C288 - (C32074 + C32075) * C295 -
            (C32076 + C32077) * C48339) *
               C16331 +
           ((C32075 + C32074) * C294 -
            ((C32073 + C32072) * C287 + (C32071 + C32070) * C293) +
            (C32077 + C32076) * C288 -
            (C31648 * C493 + C48367 * C511 + C31647 * C488 + C31645 * C501) *
                C295 -
            (C31648 * C512 + C48367 * C523 + C31647 * C502 + C31645 * C518) *
                C48339) *
               C48344) *
              C48235 * C48376 +
          (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                C293 +
            (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                C287 -
            (C32078 + C32079) * C294 - (C32080 + C32081) * C288 +
            (C32082 + C32083) * C295 + (C32084 + C32085) * C48339) *
               C16331 +
           ((C32079 + C32078) * C293 + (C32081 + C32080) * C287 -
            (C32083 + C32082) * C294 - (C32085 + C32084) * C288 +
            (C31647 * C493 + C31645 * C511 + C31648 * C2303 + C48367 * C2304) *
                C295 +
            (C31647 * C512 + C31645 * C523 + C31648 * C2305 + C48367 * C2306) *
                C48339) *
               C48344) *
              C48235 * C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1089 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48383 -
            (C31682 + C31683) * C1090 - (C31684 + C31685) * C48370 +
            (C31686 + C31687) * C1091 + (C31688 + C31689) * C48339) *
               C16331 +
           ((C31683 + C31682) * C1089 + (C31685 + C31684) * C48383 -
            (C31687 + C31686) * C1090 - (C31689 + C31688) * C48370 +
            (C31691 + C31690) * C1091 + (C31693 + C31692) * C48339) *
               C48344) *
              C48235 * C48047 * C1086 +
          (((C31876 + C31877) * C1090 -
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C48383 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C1089) +
            (C31878 + C31879) * C48370 - (C31880 + C31881) * C1091 -
            (C31882 + C31883) * C48339) *
               C16331 +
           ((C31881 + C31880) * C1090 -
            ((C31879 + C31878) * C48383 + (C31877 + C31876) * C1089) +
            (C31883 + C31882) * C48370 - (C32225 + C32224) * C1091 -
            (C32227 + C32226) * C48339) *
               C48344) *
              C48235 * C48047 * C1087 +
          (((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                C1089 +
            (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                C48383 -
            (C31884 + C31885) * C1090 - (C31886 + C31887) * C48370 +
            (C31888 + C31889) * C1091 + (C31890 + C31891) * C48339) *
               C16331 +
           ((C31885 + C31884) * C1089 + (C31887 + C31886) * C48383 -
            (C31889 + C31888) * C1090 - (C31891 + C31890) * C48370 +
            (C31647 * C304 + C31645 * C322 + C31648 * C1599 + C48367 * C1600) *
                C1091 +
            (C31647 * C323 + C31645 * C334 + C31648 * C1601 + C48367 * C1602) *
                C48339) *
               C48344) *
              C48235 * C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1160 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C47983) *
               C16331 +
           ((C31683 + C31682) * C1160 + (C31685 + C31684) * C47983) * C48344) *
              C48235 * C48047 * C1155 -
          (((C31879 + C31878) * C47983 + (C31877 + C31876) * C1160) * C48344 +
           ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                C47983 +
            (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                C1160) *
               C16331) *
              C48235 * C48047 * C1156 +
          (((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                C1160 +
            (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                C47983) *
               C16331 +
           ((C31885 + C31884) * C1160 + (C31887 + C31886) * C47983) * C48344) *
              C48235 * C48047 * C1157 -
          (((C31648 * C1719 + C48367 * C1723 + C31647 * C1169 +
             C31645 * C1180) *
                C47983 +
            (C31648 * C1714 + C48367 * C1718 + C31647 * C1162 +
             C31645 * C1170) *
                C1160) *
               C48344 +
           ((C31648 * C1717 + C48367 * C1722 + C31647 * C1171 +
             C31645 * C1181) *
                C47983 +
            (C31648 * C1713 + C48367 * C1716 + C31647 * C1163 +
             C31645 * C1172) *
                C1160) *
               C16331) *
              C48235 * C48047 * C1158 +
          (((C31647 * C1164 + C31645 * C1173 + C31648 * C6587 +
             C48367 * C6589) *
                C1160 +
            (C31647 * C1174 + C31645 * C1182 + C31648 * C6590 +
             C48367 * C6593) *
                C47983) *
               C16331 +
           ((C31647 * C1165 + C31645 * C1175 + C31648 * C6588 +
             C48367 * C6591) *
                C1160 +
            (C31647 * C1176 + C31645 * C1183 + C31648 * C6592 +
             C48367 * C6594) *
                C47983) *
               C48344) *
              C48235 * C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C16331 +
            ((C31683 + C31682) * C1160 + (C31685 + C31684) * C47983) * C48344) *
               C48235 * C48387 -
           (((C32073 + C32072) * C47983 + (C32071 + C32070) * C1160) * C48344 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C16331) *
               C48235 * C48376 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C1160 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C47983) *
                C16331 +
            ((C32079 + C32078) * C1160 + (C32081 + C32080) * C47983) * C48344) *
               C48235 * C48350) *
              C1086 +
          ((((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C1160 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C47983) *
                C16331 +
            ((C32581 + C32580) * C1160 + (C32583 + C32582) * C47983) * C48344) *
               C48235 * C48376 -
           (((C31879 + C31878) * C47983 + (C31877 + C31876) * C1160) * C48344 +
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C47983 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C1160) *
                C16331) *
               C48235 * C48387 -
           (((C31648 * C2423 + C48367 * C2427 + C31647 * C1306 +
              C31645 * C1323) *
                 C47983 +
             (C31648 * C2418 + C48367 * C2422 + C31647 * C1296 +
              C31645 * C1307) *
                 C1160) *
                C48344 +
            ((C31648 * C2421 + C48367 * C2426 + C31647 * C1308 +
              C31645 * C1324) *
                 C47983 +
             (C31648 * C2417 + C48367 * C2420 + C31647 * C1297 +
              C31645 * C1309) *
                 C1160) *
                C16331) *
               C48235 * C48350) *
              C1087 +
          ((((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                 C1160 +
             (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                 C47983) *
                C16331 +
            ((C31885 + C31884) * C1160 + (C31887 + C31886) * C47983) * C48344) *
               C48235 * C48387 -
           (((C31648 * C1319 + C48367 * C1329 + C31647 * C1312 +
              C31645 * C1326) *
                 C47983 +
             (C31648 * C1302 + C48367 * C1318 + C31647 * C1299 +
              C31645 * C1313) *
                 C1160) *
                C48344 +
            ((C31648 * C1317 + C48367 * C1328 + C31647 * C1314 +
              C31645 * C1327) *
                 C47983 +
             (C31648 * C1301 + C48367 * C1316 + C31647 * C1300 +
              C31645 * C1315) *
                 C1160) *
                C16331) *
               C48235 * C48376 +
           (((C31647 * C1301 + C31645 * C1316 + C31648 * C7455 +
              C48367 * C7457) *
                 C1160 +
             (C31647 * C1317 + C31645 * C1328 + C31648 * C7458 +
              C48367 * C7461) *
                 C47983) *
                C16331 +
            ((C31647 * C1302 + C31645 * C1318 + C31648 * C7456 +
              C48367 * C7459) *
                 C1160 +
             (C31647 * C1319 + C31645 * C1329 + C31648 * C7460 +
              C48367 * C7462) *
                 C47983) *
                C48344) *
               C48235 * C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C665 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C659 -
            (C31682 + C31683) * C666 - (C31684 + C31685) * C660 +
            (C31686 + C31687) * C667 + (C31688 + C31689) * C661 -
            (C31690 + C31691) * C668 - (C31692 + C31693) * C48351) *
               C16331 +
           ((C31683 + C31682) * C665 + (C31685 + C31684) * C659 -
            (C31687 + C31686) * C666 - (C31689 + C31688) * C660 +
            (C31691 + C31690) * C667 + (C31693 + C31692) * C661 -
            (C31695 + C31694) * C668 - (C31697 + C31696) * C48351) *
               C48344) *
              C48235 * C48316 +
          (((C32070 + C32071) * C666 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C659 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C665) +
            (C32072 + C32073) * C660 - (C32074 + C32075) * C667 -
            (C32076 + C32077) * C661 + (C32366 + C32367) * C668 +
            (C32368 + C32369) * C48351) *
               C16331 +
           ((C32075 + C32074) * C666 -
            ((C32073 + C32072) * C659 + (C32071 + C32070) * C665) +
            (C32077 + C32076) * C660 - (C32367 + C32366) * C667 -
            (C32369 + C32368) * C661 +
            (C31647 * C489 + C31645 * C503 + C31648 * C494 + C48367 * C513) *
                C668 +
            (C31647 * C504 + C31645 * C519 + C31648 * C514 + C48367 * C524) *
                C48351) *
               C48344) *
              C48235 * C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C47001 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C48298 -
             (C31682 + C31683) * C46982 - (C31684 + C31685) * C47993) *
                C16331 +
            ((C31683 + C31682) * C47001 + (C31685 + C31684) * C48298 -
             (C31687 + C31686) * C46982 - (C31689 + C31688) * C47993) *
                C48344) *
               C48235 * C48316 +
           (((C32070 + C32071) * C46982 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C48298 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C47001) +
             (C32072 + C32073) * C47993) *
                C16331 +
            ((C32075 + C32074) * C46982 -
             ((C32073 + C32072) * C48298 + (C32071 + C32070) * C47001) +
             (C32077 + C32076) * C47993) *
                C48344) *
               C48235 * C48134) *
              C1086 +
          ((((C31876 + C31877) * C46982 -
             ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                  C48298 +
              (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                  C47001) +
             (C31878 + C31879) * C47993) *
                C16331 +
            ((C31881 + C31880) * C46982 -
             ((C31879 + C31878) * C48298 + (C31877 + C31876) * C47001) +
             (C31883 + C31882) * C47993) *
                C48344) *
               C48235 * C48316 +
           (((C31647 * C935 + C31645 * C940 + C31648 * C1297 + C48367 * C1309) *
                 C47001 +
             (C31647 * C941 + C31645 * C950 + C31648 * C1308 + C48367 * C1324) *
                 C48298 -
             (C32580 + C32581) * C46982 - (C32582 + C32583) * C47993) *
                C16331 +
            ((C32581 + C32580) * C47001 + (C32583 + C32582) * C48298 -
             (C32585 + C32584) * C46982 - (C32587 + C32586) * C47993) *
                C48344) *
               C48235 * C48134) *
              C1087 +
          ((((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                 C47001 +
             (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                 C48298 -
             (C31884 + C31885) * C46982 - (C31886 + C31887) * C47993) *
                C16331 +
            ((C31885 + C31884) * C47001 + (C31887 + C31886) * C48298 -
             (C31889 + C31888) * C46982 - (C31891 + C31890) * C47993) *
                C48344) *
               C48235 * C48316 +
           (((C33306 + C33307) * C46982 -
             ((C31648 * C1317 + C48367 * C1328 + C31647 * C1314 +
               C31645 * C1327) *
                  C48298 +
              (C31648 * C1301 + C48367 * C1316 + C31647 * C1300 +
               C31645 * C1315) *
                  C47001) +
             (C33308 + C33309) * C47993) *
                C16331 +
            ((C31647 * C1298 + C31645 * C1311 + C31648 * C1303 +
              C48367 * C1320) *
                 C46982 -
             ((C33309 + C33308) * C48298 + (C33307 + C33306) * C47001) +
             (C31647 * C1310 + C31645 * C1325 + C31648 * C1321 +
              C48367 * C1330) *
                 C47993) *
                C48344) *
               C48235 * C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
               C114 +
           (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
               C102 -
           (C31682 + C31683) * C115 - (C31684 + C31685) * C103 +
           (C31686 + C31687) * C116 + (C31688 + C31689) * C104 -
           (C31690 + C31691) * C117 - (C31692 + C31693) * C105 +
           (C31694 + C31695) * C118 + (C31696 + C31697) * C106) *
              C16331 +
          ((C31683 + C31682) * C114 + (C31685 + C31684) * C102 -
           (C31687 + C31686) * C115 - (C31689 + C31688) * C103 +
           (C31691 + C31690) * C116 + (C31693 + C31692) * C104 -
           (C31695 + C31694) * C117 - (C31697 + C31696) * C105 +
           (C31647 * C124 + C31645 * C136 + C31648 * C779 + C48367 * C780) *
               C118 +
           (C31647 * C137 + C31645 * C145 + C31648 * C781 + C48367 * C782) *
               C106) *
              C48344) *
         C48235 * C48047 * C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C293 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C287 -
            (C31682 + C31683) * C294 - (C31684 + C31685) * C288 +
            (C31686 + C31687) * C295 + (C31688 + C31689) * C48339) *
               C16331 +
           ((C31683 + C31682) * C293 + (C31685 + C31684) * C287 -
            (C31687 + C31686) * C294 - (C31689 + C31688) * C288 +
            (C31691 + C31690) * C295 + (C31693 + C31692) * C48339) *
               C48344) *
              C48235 * C48047 * C48386 +
          (((C31876 + C31877) * C294 -
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C287 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C293) +
            (C31878 + C31879) * C288 - (C31880 + C31881) * C295 -
            (C31882 + C31883) * C48339) *
               C16331 +
           ((C31881 + C31880) * C294 -
            ((C31879 + C31878) * C287 + (C31877 + C31876) * C293) +
            (C31883 + C31882) * C288 -
            (C31648 * C938 + C48367 * C946 + C31647 * C299 + C31645 * C312) *
                C295 -
            (C31648 * C947 + C48367 * C953 + C31647 * C313 + C31645 * C329) *
                C48339) *
               C48344) *
              C48235 * C48047 * C48374 +
          (((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                C293 +
            (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                C287 -
            (C31884 + C31885) * C294 - (C31886 + C31887) * C288 +
            (C31888 + C31889) * C295 + (C31890 + C31891) * C48339) *
               C16331 +
           ((C31885 + C31884) * C293 + (C31887 + C31886) * C287 -
            (C31889 + C31888) * C294 - (C31891 + C31890) * C288 +
            (C31647 * C304 + C31645 * C322 + C31648 * C1599 + C48367 * C1600) *
                C295 +
            (C31647 * C323 + C31645 * C334 + C31648 * C1601 + C48367 * C1602) *
                C48339) *
               C48344) *
              C48235 * C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1089 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48383 -
            (C31682 + C31683) * C1090 - (C31684 + C31685) * C48370 +
            (C31686 + C31687) * C1091 + (C31688 + C31689) * C48339) *
               C16331 +
           ((C31683 + C31682) * C1089 + (C31685 + C31684) * C48383 -
            (C31687 + C31686) * C1090 - (C31689 + C31688) * C48370 +
            (C31691 + C31690) * C1091 + (C31693 + C31692) * C48339) *
               C48344) *
              C48235 * C48047 * C1086 +
          (((C31876 + C31877) * C1090 -
            ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                 C48383 +
             (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                 C1089) +
            (C31878 + C31879) * C48370 - (C31880 + C31881) * C1091 -
            (C31882 + C31883) * C48339) *
               C16331 +
           ((C31881 + C31880) * C1090 -
            ((C31879 + C31878) * C48383 + (C31877 + C31876) * C1089) +
            (C31883 + C31882) * C48370 - (C32225 + C32224) * C1091 -
            (C32227 + C32226) * C48339) *
               C48344) *
              C48235 * C48047 * C1087 +
          (((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                C1089 +
            (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                C48383 -
            (C31884 + C31885) * C1090 - (C31886 + C31887) * C48370 +
            (C31888 + C31889) * C1091 + (C31890 + C31891) * C48339) *
               C16331 +
           ((C31885 + C31884) * C1089 + (C31887 + C31886) * C48383 -
            (C31889 + C31888) * C1090 - (C31891 + C31890) * C48370 +
            (C31647 * C304 + C31645 * C322 + C31648 * C1599 + C48367 * C1600) *
                C1091 +
            (C31647 * C323 + C31645 * C334 + C31648 * C1601 + C48367 * C1602) *
                C48339) *
               C48344) *
              C48235 * C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1160 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C47983) *
               C16331 +
           ((C31683 + C31682) * C1160 + (C31685 + C31684) * C47983) * C48344) *
              C48235 * C48047 * C1155 -
          (((C31879 + C31878) * C47983 + (C31877 + C31876) * C1160) * C48344 +
           ((C31648 * C941 + C48367 * C950 + C31647 * C307 + C31645 * C326) *
                C47983 +
            (C31648 * C935 + C48367 * C940 + C31647 * C297 + C31645 * C308) *
                C1160) *
               C16331) *
              C48235 * C48047 * C1156 +
          (((C31647 * C301 + C31645 * C316 + C31648 * C1300 + C48367 * C1315) *
                C1160 +
            (C31647 * C317 + C31645 * C331 + C31648 * C1314 + C48367 * C1327) *
                C47983) *
               C16331 +
           ((C31885 + C31884) * C1160 + (C31887 + C31886) * C47983) * C48344) *
              C48235 * C48047 * C1157 -
          (((C31648 * C1719 + C48367 * C1723 + C31647 * C1169 +
             C31645 * C1180) *
                C47983 +
            (C31648 * C1714 + C48367 * C1718 + C31647 * C1162 +
             C31645 * C1170) *
                C1160) *
               C48344 +
           ((C31648 * C1717 + C48367 * C1722 + C31647 * C1171 +
             C31645 * C1181) *
                C47983 +
            (C31648 * C1713 + C48367 * C1716 + C31647 * C1163 +
             C31645 * C1172) *
                C1160) *
               C16331) *
              C48235 * C48047 * C1158 +
          (((C31647 * C1164 + C31645 * C1173 + C31648 * C6587 +
             C48367 * C6589) *
                C1160 +
            (C31647 * C1174 + C31645 * C1182 + C31648 * C6590 +
             C48367 * C6593) *
                C47983) *
               C16331 +
           ((C31647 * C1165 + C31645 * C1175 + C31648 * C6588 +
             C48367 * C6591) *
                C1160 +
            (C31647 * C1176 + C31645 * C1183 + C31648 * C6592 +
             C48367 * C6594) *
                C47983) *
               C48344) *
              C48235 * C48047 * C1159)) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C47011 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C47988 -
            (C31682 + C31683) * C47007 - (C31684 + C31685) * C47996 +
            (C31686 + C31687) * C47017 + (C31688 + C31689) * C2901) *
               C48010 * C4781 +
           ((C37500 + C37501) * C47011 + (C37502 + C37503) * C47988 -
            (C31877 + C31876) * C47007 - (C31879 + C31878) * C47996 +
            (C31881 + C31880) * C47017 + (C31883 + C31882) * C2901) *
               C48010 * C48365) *
              C48047 * C48090 +
          (((C31876 + C31877) * C47007 -
            ((C37503 + C37502) * C47988 + (C37501 + C37500) * C47011) +
            (C31878 + C31879) * C47996 - (C31880 + C31881) * C47017 -
            (C31882 + C31883) * C2901) *
               C48010 * C4781 +
           ((C31885 + C31884) * C47007 -
            ((C37504 + C37505) * C47988 + (C37506 + C37507) * C47011) +
            (C31887 + C31886) * C47996 - (C31889 + C31888) * C47017 -
            (C31891 + C31890) * C2901) *
               C48010 * C48365) *
              C48047 * C48097 +
          (((C37507 + C37506) * C47011 + (C37505 + C37504) * C47988 -
            (C31884 + C31885) * C47007 - (C31886 + C31887) * C47996 +
            (C31888 + C31889) * C47017 + (C31890 + C31891) * C2901) *
               C48010 * C4781 +
           ((C38364 + C38365) * C47011 + (C38366 + C38367) * C47988 -
            (C33101 + C33100) * C47007 - (C33103 + C33102) * C47996 +
            (C31647 * C1161 + C31645 * C1168 + C31648 * C1715 +
             C48367 * C1720) *
                C47017 +
            (C31647 * C1167 + C31645 * C1179 + C31648 * C1721 +
             C48367 * C1724) *
                C2901) *
               C48010 * C48365) *
              C48047 * C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C2641 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C2635 -
             (C31682 + C31683) * C2642 - (C31684 + C31685) * C47993) *
                C48010 * C4781 +
            ((C37500 + C37501) * C2641 + (C37502 + C37503) * C2635 -
             (C31877 + C31876) * C2642 - (C31879 + C31878) * C47993) *
                C48010 * C48365) *
               C48316 +
           (((C32070 + C32071) * C2642 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C2635 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C2641) +
             (C32072 + C32073) * C47993) *
                C48010 * C4781 +
            ((C32581 + C32580) * C2642 -
             ((C38116 + C38117) * C2635 + (C38118 + C38119) * C2641) +
             (C32583 + C32582) * C47993) *
                C48010 * C48365) *
               C48134) *
              C48090 +
          ((((C31876 + C31877) * C2642 -
             ((C37503 + C37502) * C2635 + (C37501 + C37500) * C2641) +
             (C31878 + C31879) * C47993) *
                C48010 * C4781 +
            ((C31885 + C31884) * C2642 -
             ((C37504 + C37505) * C2635 + (C37506 + C37507) * C2641) +
             (C31887 + C31886) * C47993) *
                C48010 * C48365) *
               C48316 +
           (((C38119 + C38118) * C2641 + (C38117 + C38116) * C2635 -
             (C32580 + C32581) * C2642 - (C32582 + C32583) * C47993) *
                C48010 * C4781 +
            ((C38546 + C38547) * C2641 + (C38548 + C38549) * C2635 -
             (C33307 + C33306) * C2642 - (C33309 + C33308) * C47993) *
                C48010 * C48365) *
               C48134) *
              C48097 +
          ((((C37507 + C37506) * C2641 + (C37505 + C37504) * C2635 -
             (C31884 + C31885) * C2642 - (C31886 + C31887) * C47993) *
                C48010 * C4781 +
            ((C38364 + C38365) * C2641 + (C38366 + C38367) * C2635 -
             (C33101 + C33100) * C2642 - (C33103 + C33102) * C47993) *
                C48010 * C48365) *
               C48316 +
           (((C33306 + C33307) * C2642 -
             ((C38549 + C38548) * C2635 + (C38547 + C38546) * C2641) +
             (C33308 + C33309) * C47993) *
                C48010 * C4781 +
            ((C31647 * C1714 + C31645 * C1718 + C31648 * C6040 +
              C48367 * C6043) *
                 C2642 -
             ((C39016 + C39017) * C2635 + (C39018 + C39019) * C2641) +
             (C31647 * C1719 + C31645 * C1723 + C31648 * C6044 +
              C48367 * C6046) *
                 C47993) *
                C48010 * C48365) *
               C48134) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C2641 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C2635 -
            (C31682 + C31683) * C2642 - (C31684 + C31685) * C47993) *
               C48010 * C4781 +
           ((C37500 + C37501) * C2641 + (C37502 + C37503) * C2635 -
            (C31877 + C31876) * C2642 - (C31879 + C31878) * C47993) *
               C48010 * C48365) *
              C48047 * C48393 +
          (((C31876 + C31877) * C2642 -
            ((C37503 + C37502) * C2635 + (C37501 + C37500) * C2641) +
            (C31878 + C31879) * C47993) *
               C48010 * C4781 +
           ((C31885 + C31884) * C2642 -
            ((C37504 + C37505) * C2635 + (C37506 + C37507) * C2641) +
            (C31887 + C31886) * C47993) *
               C48010 * C48365) *
              C48047 * C48389 +
          (((C37507 + C37506) * C2641 + (C37505 + C37504) * C2635 -
            (C31884 + C31885) * C2642 - (C31886 + C31887) * C47993) *
               C48010 * C4781 +
           ((C38364 + C38365) * C2641 + (C38366 + C38367) * C2635 -
            (C33101 + C33100) * C2642 - (C33103 + C33102) * C47993) *
               C48010 * C48365) *
              C48047 * C48379 +
          (((C33100 + C33101) * C2642 -
            ((C38367 + C38366) * C2635 + (C38365 + C38364) * C2641) +
            (C33102 + C33103) * C47993) *
               C48010 * C4781 +
           ((C31647 * C1165 + C31645 * C1175 + C31648 * C6588 +
             C48367 * C6591) *
                C2642 -
            ((C38368 + C38369) * C2635 + (C38370 + C38371) * C2641) +
            (C31647 * C1176 + C31645 * C1183 + C31648 * C6592 +
             C48367 * C6594) *
                C47993) *
               C48010 * C48365) *
              C48047 * C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C2533 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48392 -
            (C31682 + C31683) * C2534 - (C31684 + C31685) * C48385 +
            (C31686 + C31687) * C2535 + (C31688 + C31689) * C48372 -
            (C31690 + C31691) * C2536 - (C31692 + C31693) * C48351) *
               C48010 * C4781 +
           ((C37500 + C37501) * C2533 + (C37502 + C37503) * C48392 -
            (C31877 + C31876) * C2534 - (C31879 + C31878) * C48385 +
            (C31881 + C31880) * C2535 + (C31883 + C31882) * C48372 -
            (C32225 + C32224) * C2536 - (C32227 + C32226) * C48351) *
               C48010 * C48365) *
              C48047 * C2531 +
          (((C31876 + C31877) * C2534 -
            ((C37503 + C37502) * C48392 + (C37501 + C37500) * C2533) +
            (C31878 + C31879) * C48385 - (C31880 + C31881) * C2535 -
            (C31882 + C31883) * C48372 + (C32224 + C32225) * C2536 +
            (C32226 + C32227) * C48351) *
               C48010 * C4781 +
           ((C31885 + C31884) * C2534 -
            ((C37504 + C37505) * C48392 + (C37506 + C37507) * C2533) +
            (C31887 + C31886) * C48385 - (C31889 + C31888) * C2535 -
            (C31891 + C31890) * C48372 +
            (C31647 * C304 + C31645 * C322 + C31648 * C1599 + C48367 * C1600) *
                C2536 +
            (C31647 * C323 + C31645 * C334 + C31648 * C1601 + C48367 * C1602) *
                C48351) *
               C48010 * C48365) *
              C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C2641 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C2635 -
             (C31682 + C31683) * C2642 - (C31684 + C31685) * C47993) *
                C48010 * C4781 +
            ((C37500 + C37501) * C2641 + (C37502 + C37503) * C2635 -
             (C31877 + C31876) * C2642 - (C31879 + C31878) * C47993) *
                C48010 * C48365) *
               C48387 +
           (((C32070 + C32071) * C2642 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C2635 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C2641) +
             (C32072 + C32073) * C47993) *
                C48010 * C4781 +
            ((C32581 + C32580) * C2642 -
             ((C38116 + C38117) * C2635 + (C38118 + C38119) * C2641) +
             (C32583 + C32582) * C47993) *
                C48010 * C48365) *
               C48376 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C2641 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C2635 -
             (C32078 + C32079) * C2642 - (C32080 + C32081) * C47993) *
                C48010 * C4781 +
            ((C38542 + C38543) * C2641 + (C38544 + C38545) * C2635 -
             (C34017 + C34016) * C2642 - (C34019 + C34018) * C47993) *
                C48010 * C48365) *
               C48350) *
              C2531 +
          ((((C31876 + C31877) * C2642 -
             ((C37503 + C37502) * C2635 + (C37501 + C37500) * C2641) +
             (C31878 + C31879) * C47993) *
                C48010 * C4781 +
            ((C31885 + C31884) * C2642 -
             ((C37504 + C37505) * C2635 + (C37506 + C37507) * C2641) +
             (C31887 + C31886) * C47993) *
                C48010 * C48365) *
               C48387 +
           (((C38119 + C38118) * C2641 + (C38117 + C38116) * C2635 -
             (C32580 + C32581) * C2642 - (C32582 + C32583) * C47993) *
                C48010 * C4781 +
            ((C38546 + C38547) * C2641 + (C38548 + C38549) * C2635 -
             (C33307 + C33306) * C2642 - (C33309 + C33308) * C47993) *
                C48010 * C48365) *
               C48376 +
           (((C34016 + C34017) * C2642 -
             ((C38545 + C38544) * C2635 + (C38543 + C38542) * C2641) +
             (C34018 + C34019) * C47993) *
                C48010 * C4781 +
            ((C31647 * C1302 + C31645 * C1318 + C31648 * C7456 +
              C48367 * C7459) *
                 C2642 -
             ((C38550 + C38551) * C2635 + (C38552 + C38553) * C2641) +
             (C31647 * C1319 + C31645 * C1329 + C31648 * C7460 +
              C48367 * C7462) *
                 C47993) *
                C48010 * C48365) *
               C48350) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C47011 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47988 -
             (C31682 + C31683) * C47007 - (C31684 + C31685) * C47996 +
             (C31686 + C31687) * C47017 + (C31688 + C31689) * C2901) *
                C48010 * C4781 +
            ((C37500 + C37501) * C47011 + (C37502 + C37503) * C47988 -
             (C31877 + C31876) * C47007 - (C31879 + C31878) * C47996 +
             (C31881 + C31880) * C47017 + (C31883 + C31882) * C2901) *
                C48010 * C48365) *
               C48316 +
           (((C32070 + C32071) * C47007 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C47988 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C47011) +
             (C32072 + C32073) * C47996 - (C32074 + C32075) * C47017 -
             (C32076 + C32077) * C2901) *
                C48010 * C4781 +
            ((C32581 + C32580) * C47007 -
             ((C38116 + C38117) * C47988 + (C38118 + C38119) * C47011) +
             (C32583 + C32582) * C47996 - (C32585 + C32584) * C47017 -
             (C32587 + C32586) * C2901) *
                C48010 * C48365) *
               C48134) *
              C2531 +
          ((((C31876 + C31877) * C47007 -
             ((C37503 + C37502) * C47988 + (C37501 + C37500) * C47011) +
             (C31878 + C31879) * C47996 - (C31880 + C31881) * C47017 -
             (C31882 + C31883) * C2901) *
                C48010 * C4781 +
            ((C31885 + C31884) * C47007 -
             ((C37504 + C37505) * C47988 + (C37506 + C37507) * C47011) +
             (C31887 + C31886) * C47996 - (C31889 + C31888) * C47017 -
             (C31891 + C31890) * C2901) *
                C48010 * C48365) *
               C48316 +
           (((C38119 + C38118) * C47011 + (C38117 + C38116) * C47988 -
             (C32580 + C32581) * C47007 - (C32582 + C32583) * C47996 +
             (C32584 + C32585) * C47017 + (C32586 + C32587) * C2901) *
                C48010 * C4781 +
            ((C38546 + C38547) * C47011 + (C38548 + C38549) * C47988 -
             (C33307 + C33306) * C47007 - (C33309 + C33308) * C47996 +
             (C31647 * C1298 + C31645 * C1311 + C31648 * C1303 +
              C48367 * C1320) *
                 C47017 +
             (C31647 * C1310 + C31645 * C1325 + C31648 * C1321 +
              C48367 * C1330) *
                 C2901) *
                C48010 * C48365) *
               C48134) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C2533 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48392 -
            (C31682 + C31683) * C2534 - (C31684 + C31685) * C48385 +
            (C31686 + C31687) * C2535 + (C31688 + C31689) * C48372 -
            (C31690 + C31691) * C2536 - (C31692 + C31693) * C48351) *
               C48010 * C4781 +
           ((C37500 + C37501) * C2533 + (C37502 + C37503) * C48392 -
            (C31877 + C31876) * C2534 - (C31879 + C31878) * C48385 +
            (C31881 + C31880) * C2535 + (C31883 + C31882) * C48372 -
            (C32225 + C32224) * C2536 - (C32227 + C32226) * C48351) *
               C48010 * C48365) *
              C48047 * C2531 +
          (((C31876 + C31877) * C2534 -
            ((C37503 + C37502) * C48392 + (C37501 + C37500) * C2533) +
            (C31878 + C31879) * C48385 - (C31880 + C31881) * C2535 -
            (C31882 + C31883) * C48372 + (C32224 + C32225) * C2536 +
            (C32226 + C32227) * C48351) *
               C48010 * C4781 +
           ((C31885 + C31884) * C2534 -
            ((C37504 + C37505) * C48392 + (C37506 + C37507) * C2533) +
            (C31887 + C31886) * C48385 - (C31889 + C31888) * C2535 -
            (C31891 + C31890) * C48372 +
            (C31647 * C304 + C31645 * C322 + C31648 * C1599 + C48367 * C1600) *
                C2536 +
            (C31647 * C323 + C31645 * C334 + C31648 * C1601 + C48367 * C1602) *
                C48351) *
               C48010 * C48365) *
              C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C2641 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C2635 -
            (C31682 + C31683) * C2642 - (C31684 + C31685) * C47993) *
               C48010 * C4781 +
           ((C37500 + C37501) * C2641 + (C37502 + C37503) * C2635 -
            (C31877 + C31876) * C2642 - (C31879 + C31878) * C47993) *
               C48010 * C48365) *
              C48047 * C48393 +
          (((C31876 + C31877) * C2642 -
            ((C37503 + C37502) * C2635 + (C37501 + C37500) * C2641) +
            (C31878 + C31879) * C47993) *
               C48010 * C4781 +
           ((C31885 + C31884) * C2642 -
            ((C37504 + C37505) * C2635 + (C37506 + C37507) * C2641) +
            (C31887 + C31886) * C47993) *
               C48010 * C48365) *
              C48047 * C48389 +
          (((C37507 + C37506) * C2641 + (C37505 + C37504) * C2635 -
            (C31884 + C31885) * C2642 - (C31886 + C31887) * C47993) *
               C48010 * C4781 +
           ((C38364 + C38365) * C2641 + (C38366 + C38367) * C2635 -
            (C33101 + C33100) * C2642 - (C33103 + C33102) * C47993) *
               C48010 * C48365) *
              C48047 * C48379 +
          (((C33100 + C33101) * C2642 -
            ((C38367 + C38366) * C2635 + (C38365 + C38364) * C2641) +
            (C33102 + C33103) * C47993) *
               C48010 * C4781 +
           ((C31647 * C1165 + C31645 * C1175 + C31648 * C6588 +
             C48367 * C6591) *
                C2642 -
            ((C38368 + C38369) * C2635 + (C38370 + C38371) * C2641) +
            (C31647 * C1176 + C31645 * C1183 + C31648 * C6592 +
             C48367 * C6594) *
                C47993) *
               C48010 * C48365) *
              C48047 * C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C47001 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C48298 -
             (C31682 + C31683) * C46982 - (C31684 + C31685) * C47993) *
                C48010 * C4781 +
            ((C37500 + C37501) * C47001 + (C37502 + C37503) * C48298 -
             (C31877 + C31876) * C46982 - (C31879 + C31878) * C47993) *
                C48010 * C48365) *
               C3298 +
           (((C32070 + C32071) * C46982 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C48298 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C47001) +
             (C32072 + C32073) * C47993) *
                C48010 * C4781 +
            ((C32581 + C32580) * C46982 -
             ((C38116 + C38117) * C48298 + (C38118 + C38119) * C47001) +
             (C32583 + C32582) * C47993) *
                C48010 * C48365) *
               C48134) *
              C48090 +
          ((((C31876 + C31877) * C46982 -
             ((C37503 + C37502) * C48298 + (C37501 + C37500) * C47001) +
             (C31878 + C31879) * C47993) *
                C48010 * C4781 +
            ((C31885 + C31884) * C46982 -
             ((C37504 + C37505) * C48298 + (C37506 + C37507) * C47001) +
             (C31887 + C31886) * C47993) *
                C48010 * C48365) *
               C3298 +
           (((C38119 + C38118) * C47001 + (C38117 + C38116) * C48298 -
             (C32580 + C32581) * C46982 - (C32582 + C32583) * C47993) *
                C48010 * C4781 +
            ((C38546 + C38547) * C47001 + (C38548 + C38549) * C48298 -
             (C33307 + C33306) * C46982 - (C33309 + C33308) * C47993) *
                C48010 * C48365) *
               C48134) *
              C48097 +
          ((((C37507 + C37506) * C47001 + (C37505 + C37504) * C48298 -
             (C31884 + C31885) * C46982 - (C31886 + C31887) * C47993) *
                C48010 * C4781 +
            ((C38364 + C38365) * C47001 + (C38366 + C38367) * C48298 -
             (C33101 + C33100) * C46982 - (C33103 + C33102) * C47993) *
                C48010 * C48365) *
               C3298 +
           (((C33306 + C33307) * C46982 -
             ((C38549 + C38548) * C48298 + (C38547 + C38546) * C47001) +
             (C33308 + C33309) * C47993) *
                C48010 * C4781 +
            ((C31647 * C1714 + C31645 * C1718 + C31648 * C6040 +
              C48367 * C6043) *
                 C46982 -
             ((C39016 + C39017) * C48298 + (C39018 + C39019) * C47001) +
             (C31647 * C1719 + C31645 * C1723 + C31648 * C6044 +
              C48367 * C6046) *
                 C47993) *
                C48010 * C48365) *
               C48134) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C4781 +
            ((C37500 + C37501) * C1160 + (C37502 + C37503) * C47983) * C48010 *
                C48365) *
               C48130 -
           (((C38116 + C38117) * C47983 + (C38118 + C38119) * C1160) * C48010 *
                C48365 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C48010 * C4781) *
               C48137 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C1160 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C47983) *
                C48010 * C4781 +
            ((C38542 + C38543) * C1160 + (C38544 + C38545) * C47983) * C48010 *
                C48365) *
               C3806) *
              C48090 +
          ((((C38119 + C38118) * C1160 + (C38117 + C38116) * C47983) * C48010 *
                C4781 +
            ((C38546 + C38547) * C1160 + (C38548 + C38549) * C47983) * C48010 *
                C48365) *
               C48137 -
           (((C37504 + C37505) * C47983 + (C37506 + C37507) * C1160) * C48010 *
                C48365 +
            ((C37503 + C37502) * C47983 + (C37501 + C37500) * C1160) * C48010 *
                C4781) *
               C48130 -
           (((C38550 + C38551) * C47983 + (C38552 + C38553) * C1160) * C48010 *
                C48365 +
            ((C38545 + C38544) * C47983 + (C38543 + C38542) * C1160) * C48010 *
                C4781) *
               C3806) *
              C48097 +
          ((((C37507 + C37506) * C1160 + (C37505 + C37504) * C47983) * C48010 *
                C4781 +
            ((C38364 + C38365) * C1160 + (C38366 + C38367) * C47983) * C48010 *
                C48365) *
               C48130 -
           (((C39016 + C39017) * C47983 + (C39018 + C39019) * C1160) * C48010 *
                C48365 +
            ((C38549 + C38548) * C47983 + (C38547 + C38546) * C1160) * C48010 *
                C4781) *
               C48137 +
           (((C38553 + C38552) * C1160 + (C38551 + C38550) * C47983) * C48010 *
                C4781 +
            ((C31647 * C6039 + C31645 * C6041 + C31648 * C23691 +
              C48367 * C23692) *
                 C1160 +
             (C31647 * C6042 + C31645 * C6045 + C31648 * C23693 +
              C48367 * C23694) *
                 C47983) *
                C48010 * C48365) *
               C3806) *
              C2904)) /
        (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C4781 +
            ((C37500 + C37501) * C1160 + (C37502 + C37503) * C47983) * C48010 *
                C48365) *
               C3298 -
           (((C38116 + C38117) * C47983 + (C38118 + C38119) * C1160) * C48010 *
                C48365 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C48010 * C4781) *
               C48134) *
              C48393 +
          ((((C38119 + C38118) * C1160 + (C38117 + C38116) * C47983) * C48010 *
                C4781 +
            ((C38546 + C38547) * C1160 + (C38548 + C38549) * C47983) * C48010 *
                C48365) *
               C48134 -
           (((C37504 + C37505) * C47983 + (C37506 + C37507) * C1160) * C48010 *
                C48365 +
            ((C37503 + C37502) * C47983 + (C37501 + C37500) * C1160) * C48010 *
                C4781) *
               C3298) *
              C48389 +
          ((((C37507 + C37506) * C1160 + (C37505 + C37504) * C47983) * C48010 *
                C4781 +
            ((C38364 + C38365) * C1160 + (C38366 + C38367) * C47983) * C48010 *
                C48365) *
               C3298 -
           (((C39016 + C39017) * C47983 + (C39018 + C39019) * C1160) * C48010 *
                C48365 +
            ((C38549 + C38548) * C47983 + (C38547 + C38546) * C1160) * C48010 *
                C4781) *
               C48134) *
              C48379 +
          ((((C39019 + C39018) * C1160 + (C39017 + C39016) * C47983) * C48010 *
                C4781 +
            ((C31647 * C6587 + C31645 * C6589 + C31648 * C22667 +
              C48367 * C22668) *
                 C1160 +
             (C31647 * C6590 + C31645 * C6593 + C31648 * C22669 +
              C48367 * C22670) *
                 C47983) *
                C48010 * C48365) *
               C48134 -
           (((C38368 + C38369) * C47983 + (C38370 + C38371) * C1160) * C48010 *
                C48365 +
            ((C38367 + C38366) * C47983 + (C38365 + C38364) * C1160) * C48010 *
                C4781) *
               C3298) *
              C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1089 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C48383 -
             (C31682 + C31683) * C1090 - (C31684 + C31685) * C48370 +
             (C31686 + C31687) * C1091 + (C31688 + C31689) * C48339) *
                C48010 * C4781 +
            ((C37500 + C37501) * C1089 + (C37502 + C37503) * C48383 -
             (C31877 + C31876) * C1090 - (C31879 + C31878) * C48370 +
             (C31881 + C31880) * C1091 + (C31883 + C31882) * C48339) *
                C48010 * C48365) *
               C3298 +
           (((C32070 + C32071) * C1090 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C48383 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C1089) +
             (C32072 + C32073) * C48370 - (C32074 + C32075) * C1091 -
             (C32076 + C32077) * C48339) *
                C48010 * C4781 +
            ((C32581 + C32580) * C1090 -
             ((C38116 + C38117) * C48383 + (C38118 + C38119) * C1089) +
             (C32583 + C32582) * C48370 - (C32585 + C32584) * C1091 -
             (C32587 + C32586) * C48339) *
                C48010 * C48365) *
               C48134) *
              C2531 +
          ((((C31876 + C31877) * C1090 -
             ((C37503 + C37502) * C48383 + (C37501 + C37500) * C1089) +
             (C31878 + C31879) * C48370 - (C31880 + C31881) * C1091 -
             (C31882 + C31883) * C48339) *
                C48010 * C4781 +
            ((C31885 + C31884) * C1090 -
             ((C37504 + C37505) * C48383 + (C37506 + C37507) * C1089) +
             (C31887 + C31886) * C48370 - (C31889 + C31888) * C1091 -
             (C31891 + C31890) * C48339) *
                C48010 * C48365) *
               C3298 +
           (((C38119 + C38118) * C1089 + (C38117 + C38116) * C48383 -
             (C32580 + C32581) * C1090 - (C32582 + C32583) * C48370 +
             (C32584 + C32585) * C1091 + (C32586 + C32587) * C48339) *
                C48010 * C4781 +
            ((C38546 + C38547) * C1089 + (C38548 + C38549) * C48383 -
             (C33307 + C33306) * C1090 - (C33309 + C33308) * C48370 +
             (C31647 * C1298 + C31645 * C1311 + C31648 * C1303 +
              C48367 * C1320) *
                 C1091 +
             (C31647 * C1310 + C31645 * C1325 + C31648 * C1321 +
              C48367 * C1330) *
                 C48339) *
                C48010 * C48365) *
               C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C4781 +
            ((C37500 + C37501) * C1160 + (C37502 + C37503) * C47983) * C48010 *
                C48365) *
               C48394 -
           (((C38116 + C38117) * C47983 + (C38118 + C38119) * C1160) * C48010 *
                C48365 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C48010 * C4781) *
               C48391 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C1160 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C47983) *
                C48010 * C4781 +
            ((C38542 + C38543) * C1160 + (C38544 + C38545) * C47983) * C48010 *
                C48365) *
               C48382 -
           (((C39856 + C39857) * C47983 + (C39858 + C39859) * C1160) * C48010 *
                C48365 +
            ((C31648 * C2028 + C48367 * C2036 + C31647 * C2025 +
              C31645 * C2035) *
                 C47983 +
             (C31648 * C2018 + C48367 * C2027 + C31647 * C2017 +
              C31645 * C2026) *
                 C1160) *
                C48010 * C4781) *
               C48363) *
              C2531 +
          ((((C38119 + C38118) * C1160 + (C38117 + C38116) * C47983) * C48010 *
                C4781 +
            ((C38546 + C38547) * C1160 + (C38548 + C38549) * C47983) * C48010 *
                C48365) *
               C48391 -
           (((C37504 + C37505) * C47983 + (C37506 + C37507) * C1160) * C48010 *
                C48365 +
            ((C37503 + C37502) * C47983 + (C37501 + C37500) * C1160) * C48010 *
                C4781) *
               C48394 -
           (((C38550 + C38551) * C47983 + (C38552 + C38553) * C1160) * C48010 *
                C48365 +
            ((C38545 + C38544) * C47983 + (C38543 + C38542) * C1160) * C48010 *
                C4781) *
               C48382 +
           (((C39859 + C39858) * C1160 + (C39857 + C39856) * C47983) * C48010 *
                C4781 +
            ((C31647 * C7455 + C31645 * C7457 + C31648 * C23341 +
              C48367 * C23342) *
                 C1160 +
             (C31647 * C7458 + C31645 * C7461 + C31648 * C23343 +
              C48367 * C23344) *
                 C47983) *
                C48010 * C48365) *
               C48363) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C47001 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C48298 -
             (C31682 + C31683) * C46982 - (C31684 + C31685) * C47993) *
                C48010 * C4781 +
            ((C37500 + C37501) * C47001 + (C37502 + C37503) * C48298 -
             (C31877 + C31876) * C46982 - (C31879 + C31878) * C47993) *
                C48010 * C48365) *
               C48130 +
           (((C32070 + C32071) * C46982 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C48298 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C47001) +
             (C32072 + C32073) * C47993) *
                C48010 * C4781 +
            ((C32581 + C32580) * C46982 -
             ((C38116 + C38117) * C48298 + (C38118 + C38119) * C47001) +
             (C32583 + C32582) * C47993) *
                C48010 * C48365) *
               C48137 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C47001 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C48298 -
             (C32078 + C32079) * C46982 - (C32080 + C32081) * C47993) *
                C48010 * C4781 +
            ((C38542 + C38543) * C47001 + (C38544 + C38545) * C48298 -
             (C34017 + C34016) * C46982 - (C34019 + C34018) * C47993) *
                C48010 * C48365) *
               C3806) *
              C2531 +
          ((((C31876 + C31877) * C46982 -
             ((C37503 + C37502) * C48298 + (C37501 + C37500) * C47001) +
             (C31878 + C31879) * C47993) *
                C48010 * C4781 +
            ((C31885 + C31884) * C46982 -
             ((C37504 + C37505) * C48298 + (C37506 + C37507) * C47001) +
             (C31887 + C31886) * C47993) *
                C48010 * C48365) *
               C48130 +
           (((C38119 + C38118) * C47001 + (C38117 + C38116) * C48298 -
             (C32580 + C32581) * C46982 - (C32582 + C32583) * C47993) *
                C48010 * C4781 +
            ((C38546 + C38547) * C47001 + (C38548 + C38549) * C48298 -
             (C33307 + C33306) * C46982 - (C33309 + C33308) * C47993) *
                C48010 * C48365) *
               C48137 +
           (((C34016 + C34017) * C46982 -
             ((C38545 + C38544) * C48298 + (C38543 + C38542) * C47001) +
             (C34018 + C34019) * C47993) *
                C48010 * C4781 +
            ((C31647 * C1302 + C31645 * C1318 + C31648 * C7456 +
              C48367 * C7459) *
                 C46982 -
             ((C38550 + C38551) * C48298 + (C38552 + C38553) * C47001) +
             (C31647 * C1319 + C31645 * C1329 + C31648 * C7460 +
              C48367 * C7462) *
                 C47993) *
                C48010 * C48365) *
               C3806) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1089 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C48383 -
             (C31682 + C31683) * C1090 - (C31684 + C31685) * C48370 +
             (C31686 + C31687) * C1091 + (C31688 + C31689) * C48339) *
                C48010 * C4781 +
            ((C37500 + C37501) * C1089 + (C37502 + C37503) * C48383 -
             (C31877 + C31876) * C1090 - (C31879 + C31878) * C48370 +
             (C31881 + C31880) * C1091 + (C31883 + C31882) * C48339) *
                C48010 * C48365) *
               C3298 +
           (((C32070 + C32071) * C1090 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C48383 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C1089) +
             (C32072 + C32073) * C48370 - (C32074 + C32075) * C1091 -
             (C32076 + C32077) * C48339) *
                C48010 * C4781 +
            ((C32581 + C32580) * C1090 -
             ((C38116 + C38117) * C48383 + (C38118 + C38119) * C1089) +
             (C32583 + C32582) * C48370 - (C32585 + C32584) * C1091 -
             (C32587 + C32586) * C48339) *
                C48010 * C48365) *
               C48134) *
              C2531 +
          ((((C31876 + C31877) * C1090 -
             ((C37503 + C37502) * C48383 + (C37501 + C37500) * C1089) +
             (C31878 + C31879) * C48370 - (C31880 + C31881) * C1091 -
             (C31882 + C31883) * C48339) *
                C48010 * C4781 +
            ((C31885 + C31884) * C1090 -
             ((C37504 + C37505) * C48383 + (C37506 + C37507) * C1089) +
             (C31887 + C31886) * C48370 - (C31889 + C31888) * C1091 -
             (C31891 + C31890) * C48339) *
                C48010 * C48365) *
               C3298 +
           (((C38119 + C38118) * C1089 + (C38117 + C38116) * C48383 -
             (C32580 + C32581) * C1090 - (C32582 + C32583) * C48370 +
             (C32584 + C32585) * C1091 + (C32586 + C32587) * C48339) *
                C48010 * C4781 +
            ((C38546 + C38547) * C1089 + (C38548 + C38549) * C48383 -
             (C33307 + C33306) * C1090 - (C33309 + C33308) * C48370 +
             (C31647 * C1298 + C31645 * C1311 + C31648 * C1303 +
              C48367 * C1320) *
                 C1091 +
             (C31647 * C1310 + C31645 * C1325 + C31648 * C1321 +
              C48367 * C1330) *
                 C48339) *
                C48010 * C48365) *
               C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C4781 +
            ((C37500 + C37501) * C1160 + (C37502 + C37503) * C47983) * C48010 *
                C48365) *
               C3298 -
           (((C38116 + C38117) * C47983 + (C38118 + C38119) * C1160) * C48010 *
                C48365 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C48010 * C4781) *
               C48134) *
              C48393 +
          ((((C38119 + C38118) * C1160 + (C38117 + C38116) * C47983) * C48010 *
                C4781 +
            ((C38546 + C38547) * C1160 + (C38548 + C38549) * C47983) * C48010 *
                C48365) *
               C48134 -
           (((C37504 + C37505) * C47983 + (C37506 + C37507) * C1160) * C48010 *
                C48365 +
            ((C37503 + C37502) * C47983 + (C37501 + C37500) * C1160) * C48010 *
                C4781) *
               C3298) *
              C48389 +
          ((((C37507 + C37506) * C1160 + (C37505 + C37504) * C47983) * C48010 *
                C4781 +
            ((C38364 + C38365) * C1160 + (C38366 + C38367) * C47983) * C48010 *
                C48365) *
               C3298 -
           (((C39016 + C39017) * C47983 + (C39018 + C39019) * C1160) * C48010 *
                C48365 +
            ((C38549 + C38548) * C47983 + (C38547 + C38546) * C1160) * C48010 *
                C4781) *
               C48134) *
              C48379 +
          ((((C39019 + C39018) * C1160 + (C39017 + C39016) * C47983) * C48010 *
                C4781 +
            ((C31647 * C6587 + C31645 * C6589 + C31648 * C22667 +
              C48367 * C22668) *
                 C1160 +
             (C31647 * C6590 + C31645 * C6593 + C31648 * C22669 +
              C48367 * C22670) *
                 C47983) *
                C48010 * C48365) *
               C48134 -
           (((C38368 + C38369) * C47983 + (C38370 + C38371) * C1160) * C48010 *
                C48365 +
            ((C38367 + C38366) * C47983 + (C38365 + C38364) * C1160) * C48010 *
                C4781) *
               C3298) *
              C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C47001 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48298 -
            (C31682 + C31683) * C46982 - (C31684 + C31685) * C47993) *
               C48010 * C4781 +
           ((C37500 + C37501) * C47001 + (C37502 + C37503) * C48298 -
            (C31877 + C31876) * C46982 - (C31879 + C31878) * C47993) *
               C48010 * C48365) *
              C48047 * C1431 +
          (((C31876 + C31877) * C46982 -
            ((C37503 + C37502) * C48298 + (C37501 + C37500) * C47001) +
            (C31878 + C31879) * C47993) *
               C48010 * C4781 +
           ((C31885 + C31884) * C46982 -
            ((C37504 + C37505) * C48298 + (C37506 + C37507) * C47001) +
            (C31887 + C31886) * C47993) *
               C48010 * C48365) *
              C48047 * C1432 +
          (((C37507 + C37506) * C47001 + (C37505 + C37504) * C48298 -
            (C31884 + C31885) * C46982 - (C31886 + C31887) * C47993) *
               C48010 * C4781 +
           ((C38364 + C38365) * C47001 + (C38366 + C38367) * C48298 -
            (C33101 + C33100) * C46982 - (C33103 + C33102) * C47993) *
               C48010 * C48365) *
              C48047 * C1433 +
          (((C33100 + C33101) * C46982 -
            ((C38367 + C38366) * C48298 + (C38365 + C38364) * C47001) +
            (C33102 + C33103) * C47993) *
               C48010 * C4781 +
           ((C31647 * C1165 + C31645 * C1175 + C31648 * C6588 +
             C48367 * C6591) *
                C46982 -
            ((C38368 + C38369) * C48298 + (C38370 + C38371) * C47001) +
            (C31647 * C1176 + C31645 * C1183 + C31648 * C6592 +
             C48367 * C6594) *
                C47993) *
               C48010 * C48365) *
              C48047 * C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C665 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C659 -
            (C31682 + C31683) * C666 - (C31684 + C31685) * C660 +
            (C31686 + C31687) * C667 + (C31688 + C31689) * C661 -
            (C31690 + C31691) * C668 - (C31692 + C31693) * C48351) *
               C48010 * C4781 +
           ((C37500 + C37501) * C665 + (C37502 + C37503) * C659 -
            (C31877 + C31876) * C666 - (C31879 + C31878) * C660 +
            (C31881 + C31880) * C667 + (C31883 + C31882) * C661 -
            (C32225 + C32224) * C668 - (C32227 + C32226) * C48351) *
               C48010 * C48365) *
              C48047 * C48315 +
          (((C31876 + C31877) * C666 -
            ((C37503 + C37502) * C659 + (C37501 + C37500) * C665) +
            (C31878 + C31879) * C660 - (C31880 + C31881) * C667 -
            (C31882 + C31883) * C661 + (C32224 + C32225) * C668 +
            (C32226 + C32227) * C48351) *
               C48010 * C4781 +
           ((C31885 + C31884) * C666 -
            ((C37504 + C37505) * C659 + (C37506 + C37507) * C665) +
            (C31887 + C31886) * C660 - (C31889 + C31888) * C667 -
            (C31891 + C31890) * C661 +
            (C31647 * C304 + C31645 * C322 + C31648 * C1599 + C48367 * C1600) *
                C668 +
            (C31647 * C323 + C31645 * C334 + C31648 * C1601 + C48367 * C1602) *
                C48351) *
               C48010 * C48365) *
              C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C47001 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C48298 -
             (C31682 + C31683) * C46982 - (C31684 + C31685) * C47993) *
                C48010 * C4781 +
            ((C37500 + C37501) * C47001 + (C37502 + C37503) * C48298 -
             (C31877 + C31876) * C46982 - (C31879 + C31878) * C47993) *
                C48010 * C48365) *
               C1835 +
           (((C32070 + C32071) * C46982 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C48298 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C47001) +
             (C32072 + C32073) * C47993) *
                C48010 * C4781 +
            ((C32581 + C32580) * C46982 -
             ((C38116 + C38117) * C48298 + (C38118 + C38119) * C47001) +
             (C32583 + C32582) * C47993) *
                C48010 * C48365) *
               C1836 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C47001 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C48298 -
             (C32078 + C32079) * C46982 - (C32080 + C32081) * C47993) *
                C48010 * C4781 +
            ((C38542 + C38543) * C47001 + (C38544 + C38545) * C48298 -
             (C34017 + C34016) * C46982 - (C34019 + C34018) * C47993) *
                C48010 * C48365) *
               C48350) *
              C48315 +
          ((((C31876 + C31877) * C46982 -
             ((C37503 + C37502) * C48298 + (C37501 + C37500) * C47001) +
             (C31878 + C31879) * C47993) *
                C48010 * C4781 +
            ((C31885 + C31884) * C46982 -
             ((C37504 + C37505) * C48298 + (C37506 + C37507) * C47001) +
             (C31887 + C31886) * C47993) *
                C48010 * C48365) *
               C1835 +
           (((C38119 + C38118) * C47001 + (C38117 + C38116) * C48298 -
             (C32580 + C32581) * C46982 - (C32582 + C32583) * C47993) *
                C48010 * C4781 +
            ((C38546 + C38547) * C47001 + (C38548 + C38549) * C48298 -
             (C33307 + C33306) * C46982 - (C33309 + C33308) * C47993) *
                C48010 * C48365) *
               C1836 +
           (((C34016 + C34017) * C46982 -
             ((C38545 + C38544) * C48298 + (C38543 + C38542) * C47001) +
             (C34018 + C34019) * C47993) *
                C48010 * C4781 +
            ((C31647 * C1302 + C31645 * C1318 + C31648 * C7456 +
              C48367 * C7459) *
                 C46982 -
             ((C38550 + C38551) * C48298 + (C38552 + C38553) * C47001) +
             (C31647 * C1319 + C31645 * C1329 + C31648 * C7460 +
              C48367 * C7462) *
                 C47993) *
                C48010 * C48365) *
               C48350) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C4781 +
            ((C37500 + C37501) * C1160 + (C37502 + C37503) * C47983) * C48010 *
                C48365) *
               C48316 -
           (((C38116 + C38117) * C47983 + (C38118 + C38119) * C1160) * C48010 *
                C48365 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C48010 * C4781) *
               C48134) *
              C1431 +
          ((((C38119 + C38118) * C1160 + (C38117 + C38116) * C47983) * C48010 *
                C4781 +
            ((C38546 + C38547) * C1160 + (C38548 + C38549) * C47983) * C48010 *
                C48365) *
               C48134 -
           (((C37504 + C37505) * C47983 + (C37506 + C37507) * C1160) * C48010 *
                C48365 +
            ((C37503 + C37502) * C47983 + (C37501 + C37500) * C1160) * C48010 *
                C4781) *
               C48316) *
              C1432 +
          ((((C37507 + C37506) * C1160 + (C37505 + C37504) * C47983) * C48010 *
                C4781 +
            ((C38364 + C38365) * C1160 + (C38366 + C38367) * C47983) * C48010 *
                C48365) *
               C48316 -
           (((C39016 + C39017) * C47983 + (C39018 + C39019) * C1160) * C48010 *
                C48365 +
            ((C38549 + C38548) * C47983 + (C38547 + C38546) * C1160) * C48010 *
                C4781) *
               C48134) *
              C1433 +
          ((((C39019 + C39018) * C1160 + (C39017 + C39016) * C47983) * C48010 *
                C4781 +
            ((C31647 * C6587 + C31645 * C6589 + C31648 * C22667 +
              C48367 * C22668) *
                 C1160 +
             (C31647 * C6590 + C31645 * C6593 + C31648 * C22669 +
              C48367 * C22670) *
                 C47983) *
                C48010 * C48365) *
               C48134 -
           (((C38368 + C38369) * C47983 + (C38370 + C38371) * C1160) * C48010 *
                C48365 +
            ((C38367 + C38366) * C47983 + (C38365 + C38364) * C1160) * C48010 *
                C4781) *
               C48316) *
              C48357)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C293 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C287 -
             (C31682 + C31683) * C294 - (C31684 + C31685) * C288 +
             (C31686 + C31687) * C295 + (C31688 + C31689) * C48339) *
                C48010 * C4781 +
            ((C37500 + C37501) * C293 + (C37502 + C37503) * C287 -
             (C31877 + C31876) * C294 - (C31879 + C31878) * C288 +
             (C31881 + C31880) * C295 + (C31883 + C31882) * C48339) *
                C48010 * C48365) *
               C48316 +
           (((C32070 + C32071) * C294 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C287 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C293) +
             (C32072 + C32073) * C288 - (C32074 + C32075) * C295 -
             (C32076 + C32077) * C48339) *
                C48010 * C4781 +
            ((C32581 + C32580) * C294 -
             ((C38116 + C38117) * C287 + (C38118 + C38119) * C293) +
             (C32583 + C32582) * C288 - (C32585 + C32584) * C295 -
             (C32587 + C32586) * C48339) *
                C48010 * C48365) *
               C48134) *
              C48315 +
          ((((C31876 + C31877) * C294 -
             ((C37503 + C37502) * C287 + (C37501 + C37500) * C293) +
             (C31878 + C31879) * C288 - (C31880 + C31881) * C295 -
             (C31882 + C31883) * C48339) *
                C48010 * C4781 +
            ((C31885 + C31884) * C294 -
             ((C37504 + C37505) * C287 + (C37506 + C37507) * C293) +
             (C31887 + C31886) * C288 - (C31889 + C31888) * C295 -
             (C31891 + C31890) * C48339) *
                C48010 * C48365) *
               C48316 +
           (((C38119 + C38118) * C293 + (C38117 + C38116) * C287 -
             (C32580 + C32581) * C294 - (C32582 + C32583) * C288 +
             (C32584 + C32585) * C295 + (C32586 + C32587) * C48339) *
                C48010 * C4781 +
            ((C31647 * C1300 + C31645 * C1315 + C31648 * C1301 +
              C48367 * C1316) *
                 C293 +
             (C31647 * C1314 + C31645 * C1327 + C31648 * C1317 +
              C48367 * C1328) *
                 C287 -
             (C33307 + C33306) * C294 - (C33309 + C33308) * C288 +
             (C31647 * C1298 + C31645 * C1311 + C31648 * C1303 +
              C48367 * C1320) *
                 C295 +
             (C31647 * C1310 + C31645 * C1325 + C31648 * C1321 +
              C48367 * C1330) *
                 C48339) *
                C48010 * C48365) *
               C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C4781 +
            ((C37500 + C37501) * C1160 + (C37502 + C37503) * C47983) * C48010 *
                C48365) *
               C2299 -
           (((C38116 + C38117) * C47983 + (C38118 + C38119) * C1160) * C48010 *
                C48365 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C48010 * C4781) *
               C2300 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C1160 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C47983) *
                C48010 * C4781 +
            ((C38542 + C38543) * C1160 + (C38544 + C38545) * C47983) * C48010 *
                C48365) *
               C2301 -
           (((C39856 + C39857) * C47983 + (C39858 + C39859) * C1160) * C48010 *
                C48365 +
            ((C31648 * C2028 + C48367 * C2036 + C31647 * C2025 +
              C31645 * C2035) *
                 C47983 +
             (C31648 * C2018 + C48367 * C2027 + C31647 * C2017 +
              C31645 * C2026) *
                 C1160) *
                C48010 * C4781) *
               C48363) *
              C48315 +
          ((((C38119 + C38118) * C1160 + (C38117 + C38116) * C47983) * C48010 *
                C4781 +
            ((C38546 + C38547) * C1160 + (C38548 + C38549) * C47983) * C48010 *
                C48365) *
               C2300 -
           (((C37504 + C37505) * C47983 + (C37506 + C37507) * C1160) * C48010 *
                C48365 +
            ((C37503 + C37502) * C47983 + (C37501 + C37500) * C1160) * C48010 *
                C4781) *
               C2299 -
           (((C38550 + C38551) * C47983 + (C38552 + C38553) * C1160) * C48010 *
                C48365 +
            ((C38545 + C38544) * C47983 + (C38543 + C38542) * C1160) * C48010 *
                C4781) *
               C2301 +
           (((C39859 + C39858) * C1160 + (C39857 + C39856) * C47983) * C48010 *
                C4781 +
            ((C31647 * C7455 + C31645 * C7457 + C31648 * C23341 +
              C48367 * C23342) *
                 C1160 +
             (C31647 * C7458 + C31645 * C7461 + C31648 * C23343 +
              C48367 * C23344) *
                 C47983) *
                C48010 * C48365) *
               C48363) *
              C48094)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                   C114 +
               (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                   C102 -
               (C31682 + C31683) * C115 - (C31684 + C31685) * C103 +
               (C31686 + C31687) * C116 + (C31688 + C31689) * C104 -
               (C31690 + C31691) * C117 - (C31692 + C31693) * C105 +
               (C31694 + C31695) * C118 + (C31696 + C31697) * C106) *
                  C48010 * C4781 +
              ((C31647 * C297 + C31645 * C308 + C31648 * C935 + C48367 * C940) *
                   C114 +
               (C31647 * C307 + C31645 * C326 + C31648 * C941 + C48367 * C950) *
                   C102 -
               (C31877 + C31876) * C115 - (C31879 + C31878) * C103 +
               (C31881 + C31880) * C116 + (C31883 + C31882) * C104 -
               (C32225 + C32224) * C117 - (C32227 + C32226) * C105 +
               (C31647 * C300 + C31645 * C314 + C31648 * C939 + C48367 * C948) *
                   C118 +
               (C31647 * C315 + C31645 * C330 + C31648 * C949 + C48367 * C954) *
                   C106) *
                  C48010 * C48365) *
             C48047 * C48035 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C31647 * C119 + C31645 * C126 + C31648 * C486 +
                 C48367 * C497) *
                    C293 +
                (C31647 * C127 + C31645 * C140 + C31648 * C496 +
                 C48367 * C515) *
                    C287 -
                (C31682 + C31683) * C294 - (C31684 + C31685) * C288 +
                (C31686 + C31687) * C295 + (C31688 + C31689) * C48339) *
                   C48010 * C4781 +
               ((C37500 + C37501) * C293 + (C37502 + C37503) * C287 -
                (C31877 + C31876) * C294 - (C31879 + C31878) * C288 +
                (C31881 + C31880) * C295 + (C31883 + C31882) * C48339) *
                   C48010 * C48365) *
                  C48047 * C48386 +
              (((C31876 + C31877) * C294 -
                ((C37503 + C37502) * C287 + (C37501 + C37500) * C293) +
                (C31878 + C31879) * C288 - (C31880 + C31881) * C295 -
                (C31882 + C31883) * C48339) *
                   C48010 * C4781 +
               ((C31885 + C31884) * C294 -
                ((C37504 + C37505) * C287 + (C37506 + C37507) * C293) +
                (C31887 + C31886) * C288 - (C31889 + C31888) * C295 -
                (C31891 + C31890) * C48339) *
                   C48010 * C48365) *
                  C48047 * C48374 +
              (((C37507 + C37506) * C293 + (C37505 + C37504) * C287 -
                (C31884 + C31885) * C294 - (C31886 + C31887) * C288 +
                (C31888 + C31889) * C295 + (C31890 + C31891) * C48339) *
                   C48010 * C4781 +
               ((C31647 * C1163 + C31645 * C1172 + C31648 * C1713 +
                 C48367 * C1716) *
                    C293 +
                (C31647 * C1171 + C31645 * C1181 + C31648 * C1717 +
                 C48367 * C1722) *
                    C287 -
                (C33101 + C33100) * C294 - (C33103 + C33102) * C288 +
                (C31647 * C1161 + C31645 * C1168 + C31648 * C1715 +
                 C48367 * C1720) *
                    C295 +
                (C31647 * C1167 + C31645 * C1179 + C31648 * C1721 +
                 C48367 * C1724) *
                    C48339) *
                   C48010 * C48365) *
                  C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C293 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C287 -
            (C31682 + C31683) * C294 - (C31684 + C31685) * C288 +
            (C31686 + C31687) * C295 + (C31688 + C31689) * C48339) *
               C48010 * C4781 +
           ((C37500 + C37501) * C293 + (C37502 + C37503) * C287 -
            (C31877 + C31876) * C294 - (C31879 + C31878) * C288 +
            (C31881 + C31880) * C295 + (C31883 + C31882) * C48339) *
               C48010 * C48365) *
              C48387 +
          (((C32070 + C32071) * C294 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C287 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C293) +
            (C32072 + C32073) * C288 - (C32074 + C32075) * C295 -
            (C32076 + C32077) * C48339) *
               C48010 * C4781 +
           ((C32581 + C32580) * C294 -
            ((C31648 * C1308 + C48367 * C1324 + C31647 * C941 + C31645 * C950) *
                 C287 +
             (C31648 * C1297 + C48367 * C1309 + C31647 * C935 + C31645 * C940) *
                 C293) +
            (C32583 + C32582) * C288 - (C32585 + C32584) * C295 -
            (C32587 + C32586) * C48339) *
               C48010 * C48365) *
              C48376 +
          (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                C293 +
            (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                C287 -
            (C32078 + C32079) * C294 - (C32080 + C32081) * C288 +
            (C32082 + C32083) * C295 + (C32084 + C32085) * C48339) *
               C48010 * C4781 +
           ((C31647 * C1297 + C31645 * C1309 + C31648 * C2417 +
             C48367 * C2420) *
                C293 +
            (C31647 * C1308 + C31645 * C1324 + C31648 * C2421 +
             C48367 * C2426) *
                C287 -
            (C34017 + C34016) * C294 - (C34019 + C34018) * C288 +
            (C31647 * C1295 + C31645 * C1305 + C31648 * C2419 +
             C48367 * C2424) *
                C295 +
            (C31647 * C1304 + C31645 * C1322 + C31648 * C2425 +
             C48367 * C2428) *
                C48339) *
               C48010 * C48365) *
              C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1089 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48383 -
            (C31682 + C31683) * C1090 - (C31684 + C31685) * C48370 +
            (C31686 + C31687) * C1091 + (C31688 + C31689) * C48339) *
               C48010 * C4781 +
           ((C37500 + C37501) * C1089 + (C37502 + C37503) * C48383 -
            (C31877 + C31876) * C1090 - (C31879 + C31878) * C48370 +
            (C31881 + C31880) * C1091 + (C31883 + C31882) * C48339) *
               C48010 * C48365) *
              C48047 * C1086 +
          (((C31876 + C31877) * C1090 -
            ((C37503 + C37502) * C48383 + (C37501 + C37500) * C1089) +
            (C31878 + C31879) * C48370 - (C31880 + C31881) * C1091 -
            (C31882 + C31883) * C48339) *
               C48010 * C4781 +
           ((C31885 + C31884) * C1090 -
            ((C37504 + C37505) * C48383 + (C37506 + C37507) * C1089) +
            (C31887 + C31886) * C48370 - (C31889 + C31888) * C1091 -
            (C31891 + C31890) * C48339) *
               C48010 * C48365) *
              C48047 * C1087 +
          (((C37507 + C37506) * C1089 + (C37505 + C37504) * C48383 -
            (C31884 + C31885) * C1090 - (C31886 + C31887) * C48370 +
            (C31888 + C31889) * C1091 + (C31890 + C31891) * C48339) *
               C48010 * C4781 +
           ((C31647 * C1163 + C31645 * C1172 + C31648 * C1713 +
             C48367 * C1716) *
                C1089 +
            (C31647 * C1171 + C31645 * C1181 + C31648 * C1717 +
             C48367 * C1722) *
                C48383 -
            (C33101 + C33100) * C1090 - (C33103 + C33102) * C48370 +
            (C31647 * C1161 + C31645 * C1168 + C31648 * C1715 +
             C48367 * C1720) *
                C1091 +
            (C31647 * C1167 + C31645 * C1179 + C31648 * C1721 +
             C48367 * C1724) *
                C48339) *
               C48010 * C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1160 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C47983) *
               C48010 * C4781 +
           ((C37500 + C37501) * C1160 + (C37502 + C37503) * C47983) * C48010 *
               C48365) *
              C48047 * C1155 -
          (((C37504 + C37505) * C47983 + (C37506 + C37507) * C1160) * C48010 *
               C48365 +
           ((C37503 + C37502) * C47983 + (C37501 + C37500) * C1160) * C48010 *
               C4781) *
              C48047 * C1156 +
          (((C37507 + C37506) * C1160 + (C37505 + C37504) * C47983) * C48010 *
               C4781 +
           ((C38364 + C38365) * C1160 + (C38366 + C38367) * C47983) * C48010 *
               C48365) *
              C48047 * C1157 -
          (((C38368 + C38369) * C47983 + (C38370 + C38371) * C1160) * C48010 *
               C48365 +
           ((C38367 + C38366) * C47983 + (C38365 + C38364) * C1160) * C48010 *
               C4781) *
              C48047 * C1158 +
          (((C38371 + C38370) * C1160 + (C38369 + C38368) * C47983) * C48010 *
               C4781 +
           ((C31647 * C5851 + C31645 * C5853 + C31648 * C23045 +
             C48367 * C23046) *
                C1160 +
            (C31647 * C5854 + C31645 * C5857 + C31648 * C23047 +
             C48367 * C23048) *
                C47983) *
               C48010 * C48365) *
              C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C4781 +
            ((C37500 + C37501) * C1160 + (C37502 + C37503) * C47983) * C48010 *
                C48365) *
               C48387 -
           (((C38116 + C38117) * C47983 + (C38118 + C38119) * C1160) * C48010 *
                C48365 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C48010 * C4781) *
               C48376 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C1160 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C47983) *
                C48010 * C4781 +
            ((C38542 + C38543) * C1160 + (C38544 + C38545) * C47983) * C48010 *
                C48365) *
               C48350) *
              C1086 +
          ((((C38119 + C38118) * C1160 + (C38117 + C38116) * C47983) * C48010 *
                C4781 +
            ((C38546 + C38547) * C1160 + (C38548 + C38549) * C47983) * C48010 *
                C48365) *
               C48376 -
           (((C37504 + C37505) * C47983 + (C37506 + C37507) * C1160) * C48010 *
                C48365 +
            ((C37503 + C37502) * C47983 + (C37501 + C37500) * C1160) * C48010 *
                C4781) *
               C48387 -
           (((C38550 + C38551) * C47983 + (C38552 + C38553) * C1160) * C48010 *
                C48365 +
            ((C38545 + C38544) * C47983 + (C38543 + C38542) * C1160) * C48010 *
                C4781) *
               C48350) *
              C1087 +
          ((((C37507 + C37506) * C1160 + (C37505 + C37504) * C47983) * C48010 *
                C4781 +
            ((C38364 + C38365) * C1160 + (C38366 + C38367) * C47983) * C48010 *
                C48365) *
               C48387 -
           (((C31648 * C6042 + C48367 * C6045 + C31647 * C1717 +
              C31645 * C1722) *
                 C47983 +
             (C31648 * C6039 + C48367 * C6041 + C31647 * C1713 +
              C31645 * C1716) *
                 C1160) *
                C48010 * C48365 +
            ((C38549 + C38548) * C47983 + (C38547 + C38546) * C1160) * C48010 *
                C4781) *
               C48376 +
           (((C38553 + C38552) * C1160 + (C38551 + C38550) * C47983) * C48010 *
                C4781 +
            ((C31647 * C6039 + C31645 * C6041 + C31648 * C23691 +
              C48367 * C23692) *
                 C1160 +
             (C31647 * C6042 + C31645 * C6045 + C31648 * C23693 +
              C48367 * C23694) *
                 C47983) *
                C48010 * C48365) *
               C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1089 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48383 -
            (C31682 + C31683) * C1090 - (C31684 + C31685) * C48370 +
            (C31686 + C31687) * C1091 + (C31688 + C31689) * C48339) *
               C48010 * C4781 +
           ((C37500 + C37501) * C1089 + (C37502 + C37503) * C48383 -
            (C31877 + C31876) * C1090 - (C31879 + C31878) * C48370 +
            (C31881 + C31880) * C1091 + (C31883 + C31882) * C48339) *
               C48010 * C48365) *
              C1835 +
          (((C32070 + C32071) * C1090 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C48383 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1089) +
            (C32072 + C32073) * C48370 - (C32074 + C32075) * C1091 -
            (C32076 + C32077) * C48339) *
               C48010 * C4781 +
           ((C32581 + C32580) * C1090 -
            ((C38116 + C38117) * C48383 + (C38118 + C38119) * C1089) +
            (C32583 + C32582) * C48370 - (C32585 + C32584) * C1091 -
            (C32587 + C32586) * C48339) *
               C48010 * C48365) *
              C1836 +
          (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                C1089 +
            (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                C48383 -
            (C32078 + C32079) * C1090 - (C32080 + C32081) * C48370 +
            (C32082 + C32083) * C1091 + (C32084 + C32085) * C48339) *
               C48010 * C4781 +
           ((C38542 + C38543) * C1089 + (C38544 + C38545) * C48383 -
            (C34017 + C34016) * C1090 - (C34019 + C34018) * C48370 +
            (C31647 * C1295 + C31645 * C1305 + C31648 * C2419 +
             C48367 * C2424) *
                C1091 +
            (C31647 * C1304 + C31645 * C1322 + C31648 * C2425 +
             C48367 * C2428) *
                C48339) *
               C48010 * C48365) *
              C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C4781 +
            ((C37500 + C37501) * C1160 + (C37502 + C37503) * C47983) * C48010 *
                C48365) *
               C1835 -
           (((C38116 + C38117) * C47983 + (C38118 + C38119) * C1160) * C48010 *
                C48365 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C48010 * C4781) *
               C1836 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C1160 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C47983) *
                C48010 * C4781 +
            ((C38542 + C38543) * C1160 + (C38544 + C38545) * C47983) * C48010 *
                C48365) *
               C48350) *
              C48386 +
          ((((C38119 + C38118) * C1160 + (C38117 + C38116) * C47983) * C48010 *
                C4781 +
            ((C38546 + C38547) * C1160 + (C38548 + C38549) * C47983) * C48010 *
                C48365) *
               C1836 -
           (((C37504 + C37505) * C47983 + (C37506 + C37507) * C1160) * C48010 *
                C48365 +
            ((C37503 + C37502) * C47983 + (C37501 + C37500) * C1160) * C48010 *
                C4781) *
               C1835 -
           (((C38550 + C38551) * C47983 + (C38552 + C38553) * C1160) * C48010 *
                C48365 +
            ((C38545 + C38544) * C47983 + (C38543 + C38542) * C1160) * C48010 *
                C4781) *
               C48350) *
              C48374 +
          ((((C37507 + C37506) * C1160 + (C37505 + C37504) * C47983) * C48010 *
                C4781 +
            ((C38364 + C38365) * C1160 + (C38366 + C38367) * C47983) * C48010 *
                C48365) *
               C1835 -
           (((C39016 + C39017) * C47983 + (C39018 + C39019) * C1160) * C48010 *
                C48365 +
            ((C38549 + C38548) * C47983 + (C38547 + C38546) * C1160) * C48010 *
                C4781) *
               C1836 +
           (((C38553 + C38552) * C1160 + (C38551 + C38550) * C47983) * C48010 *
                C4781 +
            ((C31647 * C6039 + C31645 * C6041 + C31648 * C23691 +
              C48367 * C23692) *
                 C1160 +
             (C31647 * C6042 + C31645 * C6045 + C31648 * C23693 +
              C48367 * C23694) *
                 C47983) *
                C48010 * C48365) *
               C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1160 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C47983) *
               C48010 * C4781 +
           ((C37500 + C37501) * C1160 + (C37502 + C37503) * C47983) * C48010 *
               C48365) *
              C2010 -
          (((C38116 + C38117) * C47983 + (C38118 + C38119) * C1160) * C48010 *
               C48365 +
           ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                C47983 +
            (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                C1160) *
               C48010 * C4781) *
              C2011 +
          (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                C1160 +
            (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                C47983) *
               C48010 * C4781 +
           ((C38542 + C38543) * C1160 + (C38544 + C38545) * C47983) * C48010 *
               C48365) *
              C2012 -
          (((C31648 * C6982 + C48367 * C6985 + C31647 * C2421 +
             C31645 * C2426) *
                C47983 +
            (C31648 * C6979 + C48367 * C6981 + C31647 * C2417 +
             C31645 * C2420) *
                C1160) *
               C48010 * C48365 +
           ((C31648 * C2028 + C48367 * C2036 + C31647 * C2025 +
             C31645 * C2035) *
                C47983 +
            (C31648 * C2018 + C48367 * C2027 + C31647 * C2017 +
             C31645 * C2026) *
                C1160) *
               C48010 * C4781) *
              C2013 +
          (((C31647 * C2018 + C31645 * C2027 + C31648 * C12799 +
             C48367 * C12801) *
                C1160 +
            (C31647 * C2028 + C31645 * C2036 + C31648 * C12802 +
             C48367 * C12805) *
                C47983) *
               C48010 * C4781 +
           ((C31647 * C6979 + C31645 * C6981 + C31648 * C28129 +
             C48367 * C28130) *
                C1160 +
            (C31647 * C6982 + C31645 * C6985 + C31648 * C28131 +
             C48367 * C28132) *
                C47983) *
               C48010 * C48365) *
              C2014) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C47001 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C48298 -
             (C31682 + C31683) * C46982 - (C31684 + C31685) * C47993) *
                C48010 * C4781 +
            ((C37500 + C37501) * C47001 + (C37502 + C37503) * C48298 -
             (C31877 + C31876) * C46982 - (C31879 + C31878) * C47993) *
                C48010 * C48365) *
               C48316 +
           (((C32070 + C32071) * C46982 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C48298 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C47001) +
             (C32072 + C32073) * C47993) *
                C48010 * C4781 +
            ((C32581 + C32580) * C46982 -
             ((C38116 + C38117) * C48298 + (C38118 + C38119) * C47001) +
             (C32583 + C32582) * C47993) *
                C48010 * C48365) *
               C48134) *
              C1086 +
          ((((C31876 + C31877) * C46982 -
             ((C37503 + C37502) * C48298 + (C37501 + C37500) * C47001) +
             (C31878 + C31879) * C47993) *
                C48010 * C4781 +
            ((C31885 + C31884) * C46982 -
             ((C37504 + C37505) * C48298 + (C37506 + C37507) * C47001) +
             (C31887 + C31886) * C47993) *
                C48010 * C48365) *
               C48316 +
           (((C38119 + C38118) * C47001 + (C38117 + C38116) * C48298 -
             (C32580 + C32581) * C46982 - (C32582 + C32583) * C47993) *
                C48010 * C4781 +
            ((C38546 + C38547) * C47001 + (C38548 + C38549) * C48298 -
             (C33307 + C33306) * C46982 - (C33309 + C33308) * C47993) *
                C48010 * C48365) *
               C48134) *
              C1087 +
          ((((C37507 + C37506) * C47001 + (C37505 + C37504) * C48298 -
             (C31884 + C31885) * C46982 - (C31886 + C31887) * C47993) *
                C48010 * C4781 +
            ((C38364 + C38365) * C47001 + (C38366 + C38367) * C48298 -
             (C33101 + C33100) * C46982 - (C33103 + C33102) * C47993) *
                C48010 * C48365) *
               C48316 +
           (((C33306 + C33307) * C46982 -
             ((C38549 + C38548) * C48298 + (C38547 + C38546) * C47001) +
             (C33308 + C33309) * C47993) *
                C48010 * C4781 +
            ((C31647 * C1714 + C31645 * C1718 + C31648 * C6040 +
              C48367 * C6043) *
                 C46982 -
             ((C31648 * C6042 + C48367 * C6045 + C31647 * C1717 +
               C31645 * C1722) *
                  C48298 +
              (C31648 * C6039 + C48367 * C6041 + C31647 * C1713 +
               C31645 * C1716) *
                  C47001) +
             (C31647 * C1719 + C31645 * C1723 + C31648 * C6044 +
              C48367 * C6046) *
                 C47993) *
                C48010 * C48365) *
               C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C665 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C659 -
            (C31682 + C31683) * C666 - (C31684 + C31685) * C660 +
            (C31686 + C31687) * C667 + (C31688 + C31689) * C661 -
            (C31690 + C31691) * C668 - (C31692 + C31693) * C48351) *
               C48010 * C4781 +
           ((C37500 + C37501) * C665 + (C37502 + C37503) * C659 -
            (C31877 + C31876) * C666 - (C31879 + C31878) * C660 +
            (C31881 + C31880) * C667 + (C31883 + C31882) * C661 -
            (C32225 + C32224) * C668 - (C32227 + C32226) * C48351) *
               C48010 * C48365) *
              C48316 +
          (((C32070 + C32071) * C666 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C659 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C665) +
            (C32072 + C32073) * C660 - (C32074 + C32075) * C667 -
            (C32076 + C32077) * C661 + (C32366 + C32367) * C668 +
            (C32368 + C32369) * C48351) *
               C48010 * C4781 +
           ((C32581 + C32580) * C666 -
            ((C31648 * C1308 + C48367 * C1324 + C31647 * C941 + C31645 * C950) *
                 C659 +
             (C31648 * C1297 + C48367 * C1309 + C31647 * C935 + C31645 * C940) *
                 C665) +
            (C32583 + C32582) * C660 - (C32585 + C32584) * C667 -
            (C32587 + C32586) * C661 +
            (C31647 * C938 + C31645 * C946 + C31648 * C2185 + C48367 * C2186) *
                C668 +
            (C31647 * C947 + C31645 * C953 + C31648 * C2187 + C48367 * C2188) *
                C48351) *
               C48010 * C48365) *
              C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C47001 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48298 -
            (C31682 + C31683) * C46982 - (C31684 + C31685) * C47993) *
               C48010 * C4781 +
           ((C37500 + C37501) * C47001 + (C37502 + C37503) * C48298 -
            (C31877 + C31876) * C46982 - (C31879 + C31878) * C47993) *
               C48010 * C48365) *
              C2299 +
          (((C32070 + C32071) * C46982 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C48298 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C47001) +
            (C32072 + C32073) * C47993) *
               C48010 * C4781 +
           ((C32581 + C32580) * C46982 -
            ((C38116 + C38117) * C48298 + (C38118 + C38119) * C47001) +
            (C32583 + C32582) * C47993) *
               C48010 * C48365) *
              C2300 +
          (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                C47001 +
            (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                C48298 -
            (C32078 + C32079) * C46982 - (C32080 + C32081) * C47993) *
               C48010 * C4781 +
           ((C38542 + C38543) * C47001 + (C38544 + C38545) * C48298 -
            (C34017 + C34016) * C46982 - (C34019 + C34018) * C47993) *
               C48010 * C48365) *
              C2301 +
          (((C34158 + C34159) * C46982 -
            ((C31648 * C2028 + C48367 * C2036 + C31647 * C2025 +
              C31645 * C2035) *
                 C48298 +
             (C31648 * C2018 + C48367 * C2027 + C31647 * C2017 +
              C31645 * C2026) *
                 C47001) +
            (C34160 + C34161) * C47993) *
               C48010 * C4781 +
           ((C31647 * C2418 + C31645 * C2422 + C31648 * C6980 +
             C48367 * C6983) *
                C46982 -
            ((C31648 * C6982 + C48367 * C6985 + C31647 * C2421 +
              C31645 * C2426) *
                 C48298 +
             (C31648 * C6979 + C48367 * C6981 + C31647 * C2417 +
              C31645 * C2420) *
                 C47001) +
            (C31647 * C2423 + C31645 * C2427 + C31648 * C6984 +
             C48367 * C6986) *
                C47993) *
               C48010 * C48365) *
              C48363) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C293 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C287 -
            (C31682 + C31683) * C294 - (C31684 + C31685) * C288 +
            (C31686 + C31687) * C295 + (C31688 + C31689) * C48339) *
               C48010 * C4781 +
           ((C37500 + C37501) * C293 + (C37502 + C37503) * C287 -
            (C31877 + C31876) * C294 - (C31879 + C31878) * C288 +
            (C31881 + C31880) * C295 + (C31883 + C31882) * C48339) *
               C48010 * C48365) *
              C48047 * C48386 +
          (((C31876 + C31877) * C294 -
            ((C37503 + C37502) * C287 + (C37501 + C37500) * C293) +
            (C31878 + C31879) * C288 - (C31880 + C31881) * C295 -
            (C31882 + C31883) * C48339) *
               C48010 * C4781 +
           ((C31885 + C31884) * C294 -
            ((C37504 + C37505) * C287 + (C37506 + C37507) * C293) +
            (C31887 + C31886) * C288 - (C31889 + C31888) * C295 -
            (C31891 + C31890) * C48339) *
               C48010 * C48365) *
              C48047 * C48374 +
          (((C37507 + C37506) * C293 + (C37505 + C37504) * C287 -
            (C31884 + C31885) * C294 - (C31886 + C31887) * C288 +
            (C31888 + C31889) * C295 + (C31890 + C31891) * C48339) *
               C48010 * C4781 +
           ((C31647 * C1163 + C31645 * C1172 + C31648 * C1713 +
             C48367 * C1716) *
                C293 +
            (C31647 * C1171 + C31645 * C1181 + C31648 * C1717 +
             C48367 * C1722) *
                C287 -
            (C33101 + C33100) * C294 - (C33103 + C33102) * C288 +
            (C31647 * C1161 + C31645 * C1168 + C31648 * C1715 +
             C48367 * C1720) *
                C295 +
            (C31647 * C1167 + C31645 * C1179 + C31648 * C1721 +
             C48367 * C1724) *
                C48339) *
               C48010 * C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
               C114 +
           (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
               C102 -
           (C31682 + C31683) * C115 - (C31684 + C31685) * C103 +
           (C31686 + C31687) * C116 + (C31688 + C31689) * C104 -
           (C31690 + C31691) * C117 - (C31692 + C31693) * C105 +
           (C31694 + C31695) * C118 + (C31696 + C31697) * C106) *
              C48010 * C4781 +
          ((C31647 * C297 + C31645 * C308 + C31648 * C935 + C48367 * C940) *
               C114 +
           (C31647 * C307 + C31645 * C326 + C31648 * C941 + C48367 * C950) *
               C102 -
           (C31877 + C31876) * C115 - (C31879 + C31878) * C103 +
           (C31881 + C31880) * C116 + (C31883 + C31882) * C104 -
           (C32225 + C32224) * C117 - (C32227 + C32226) * C105 +
           (C31647 * C300 + C31645 * C314 + C31648 * C939 + C48367 * C948) *
               C118 +
           (C31647 * C315 + C31645 * C330 + C31648 * C949 + C48367 * C954) *
               C106) *
              C48010 * C48365) *
         C48047 * C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1089 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48383 -
            (C31682 + C31683) * C1090 - (C31684 + C31685) * C48370 +
            (C31686 + C31687) * C1091 + (C31688 + C31689) * C48339) *
               C48010 * C4781 +
           ((C37500 + C37501) * C1089 + (C37502 + C37503) * C48383 -
            (C31877 + C31876) * C1090 - (C31879 + C31878) * C48370 +
            (C31881 + C31880) * C1091 + (C31883 + C31882) * C48339) *
               C48010 * C48365) *
              C48047 * C1086 +
          (((C31876 + C31877) * C1090 -
            ((C37503 + C37502) * C48383 + (C37501 + C37500) * C1089) +
            (C31878 + C31879) * C48370 - (C31880 + C31881) * C1091 -
            (C31882 + C31883) * C48339) *
               C48010 * C4781 +
           ((C31885 + C31884) * C1090 -
            ((C37504 + C37505) * C48383 + (C37506 + C37507) * C1089) +
            (C31887 + C31886) * C48370 - (C31889 + C31888) * C1091 -
            (C31891 + C31890) * C48339) *
               C48010 * C48365) *
              C48047 * C1087 +
          (((C37507 + C37506) * C1089 + (C37505 + C37504) * C48383 -
            (C31884 + C31885) * C1090 - (C31886 + C31887) * C48370 +
            (C31888 + C31889) * C1091 + (C31890 + C31891) * C48339) *
               C48010 * C4781 +
           ((C31647 * C1163 + C31645 * C1172 + C31648 * C1713 +
             C48367 * C1716) *
                C1089 +
            (C31647 * C1171 + C31645 * C1181 + C31648 * C1717 +
             C48367 * C1722) *
                C48383 -
            (C33101 + C33100) * C1090 - (C33103 + C33102) * C48370 +
            (C31647 * C1161 + C31645 * C1168 + C31648 * C1715 +
             C48367 * C1720) *
                C1091 +
            (C31647 * C1167 + C31645 * C1179 + C31648 * C1721 +
             C48367 * C1724) *
                C48339) *
               C48010 * C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1160 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C47983) *
               C48010 * C4781 +
           ((C37500 + C37501) * C1160 + (C37502 + C37503) * C47983) * C48010 *
               C48365) *
              C48047 * C1155 -
          (((C37504 + C37505) * C47983 + (C37506 + C37507) * C1160) * C48010 *
               C48365 +
           ((C37503 + C37502) * C47983 + (C37501 + C37500) * C1160) * C48010 *
               C4781) *
              C48047 * C1156 +
          (((C37507 + C37506) * C1160 + (C37505 + C37504) * C47983) * C48010 *
               C4781 +
           ((C38364 + C38365) * C1160 + (C38366 + C38367) * C47983) * C48010 *
               C48365) *
              C48047 * C1157 -
          (((C38368 + C38369) * C47983 + (C38370 + C38371) * C1160) * C48010 *
               C48365 +
           ((C38367 + C38366) * C47983 + (C38365 + C38364) * C1160) * C48010 *
               C4781) *
              C48047 * C1158 +
          (((C38371 + C38370) * C1160 + (C38369 + C38368) * C47983) * C48010 *
               C4781 +
           ((C31647 * C5851 + C31645 * C5853 + C31648 * C23045 +
             C48367 * C23046) *
                C1160 +
            (C31647 * C5854 + C31645 * C5857 + C31648 * C23047 +
             C48367 * C23048) *
                C47983) *
               C48010 * C48365) *
              C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1089 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48383 -
            (C31682 + C31683) * C1090 - (C31684 + C31685) * C48370 +
            (C31686 + C31687) * C1091 + (C31688 + C31689) * C48339) *
               C48010 * C4781 +
           ((C37500 + C37501) * C1089 + (C37502 + C37503) * C48383 -
            (C31877 + C31876) * C1090 - (C31879 + C31878) * C48370 +
            (C31881 + C31880) * C1091 + (C31883 + C31882) * C48339) *
               C48010 * C48365) *
              C1835 +
          (((C32070 + C32071) * C1090 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C48383 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1089) +
            (C32072 + C32073) * C48370 - (C32074 + C32075) * C1091 -
            (C32076 + C32077) * C48339) *
               C48010 * C4781 +
           ((C32581 + C32580) * C1090 -
            ((C38116 + C38117) * C48383 + (C38118 + C38119) * C1089) +
            (C32583 + C32582) * C48370 - (C32585 + C32584) * C1091 -
            (C32587 + C32586) * C48339) *
               C48010 * C48365) *
              C1836 +
          (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                C1089 +
            (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                C48383 -
            (C32078 + C32079) * C1090 - (C32080 + C32081) * C48370 +
            (C32082 + C32083) * C1091 + (C32084 + C32085) * C48339) *
               C48010 * C4781 +
           ((C38542 + C38543) * C1089 + (C38544 + C38545) * C48383 -
            (C34017 + C34016) * C1090 - (C34019 + C34018) * C48370 +
            (C31647 * C1295 + C31645 * C1305 + C31648 * C2419 +
             C48367 * C2424) *
                C1091 +
            (C31647 * C1304 + C31645 * C1322 + C31648 * C2425 +
             C48367 * C2428) *
                C48339) *
               C48010 * C48365) *
              C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C4781 +
            ((C37500 + C37501) * C1160 + (C37502 + C37503) * C47983) * C48010 *
                C48365) *
               C1835 -
           (((C38116 + C38117) * C47983 + (C38118 + C38119) * C1160) * C48010 *
                C48365 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C48010 * C4781) *
               C1836 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C1160 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C47983) *
                C48010 * C4781 +
            ((C38542 + C38543) * C1160 + (C38544 + C38545) * C47983) * C48010 *
                C48365) *
               C48350) *
              C48386 +
          ((((C38119 + C38118) * C1160 + (C38117 + C38116) * C47983) * C48010 *
                C4781 +
            ((C38546 + C38547) * C1160 + (C38548 + C38549) * C47983) * C48010 *
                C48365) *
               C1836 -
           (((C37504 + C37505) * C47983 + (C37506 + C37507) * C1160) * C48010 *
                C48365 +
            ((C37503 + C37502) * C47983 + (C37501 + C37500) * C1160) * C48010 *
                C4781) *
               C1835 -
           (((C38550 + C38551) * C47983 + (C38552 + C38553) * C1160) * C48010 *
                C48365 +
            ((C38545 + C38544) * C47983 + (C38543 + C38542) * C1160) * C48010 *
                C4781) *
               C48350) *
              C48374 +
          ((((C37507 + C37506) * C1160 + (C37505 + C37504) * C47983) * C48010 *
                C4781 +
            ((C38364 + C38365) * C1160 + (C38366 + C38367) * C47983) * C48010 *
                C48365) *
               C1835 -
           (((C39016 + C39017) * C47983 + (C39018 + C39019) * C1160) * C48010 *
                C48365 +
            ((C38549 + C38548) * C47983 + (C38547 + C38546) * C1160) * C48010 *
                C4781) *
               C1836 +
           (((C38553 + C38552) * C1160 + (C38551 + C38550) * C47983) * C48010 *
                C4781 +
            ((C31647 * C6039 + C31645 * C6041 + C31648 * C23691 +
              C48367 * C23692) *
                 C1160 +
             (C31647 * C6042 + C31645 * C6045 + C31648 * C23693 +
              C48367 * C23694) *
                 C47983) *
                C48010 * C48365) *
               C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C47011 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47988 -
             (C31682 + C31683) * C47007 - (C31684 + C31685) * C47996 +
             (C31686 + C31687) * C47017 + (C31688 + C31689) * C2901) *
                C48010 * C4781 +
            ((C37500 + C37501) * C47011 + (C37502 + C37503) * C47988 -
             (C31877 + C31876) * C47007 - (C31879 + C31878) * C47996 +
             (C31881 + C31880) * C47017 + (C31883 + C31882) * C2901) *
                C48010 * C48365) *
               C3298 +
           (((C32070 + C32071) * C47007 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C47988 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C47011) +
             (C32072 + C32073) * C47996 - (C32074 + C32075) * C47017 -
             (C32076 + C32077) * C2901) *
                C48010 * C4781 +
            ((C32581 + C32580) * C47007 -
             ((C38116 + C38117) * C47988 + (C38118 + C38119) * C47011) +
             (C32583 + C32582) * C47996 - (C32585 + C32584) * C47017 -
             (C32587 + C32586) * C2901) *
                C48010 * C48365) *
               C48134) *
              C48315 +
          ((((C31876 + C31877) * C47007 -
             ((C37503 + C37502) * C47988 + (C37501 + C37500) * C47011) +
             (C31878 + C31879) * C47996 - (C31880 + C31881) * C47017 -
             (C31882 + C31883) * C2901) *
                C48010 * C4781 +
            ((C31885 + C31884) * C47007 -
             ((C37504 + C37505) * C47988 + (C37506 + C37507) * C47011) +
             (C31887 + C31886) * C47996 - (C31889 + C31888) * C47017 -
             (C31891 + C31890) * C2901) *
                C48010 * C48365) *
               C3298 +
           (((C38119 + C38118) * C47011 + (C38117 + C38116) * C47988 -
             (C32580 + C32581) * C47007 - (C32582 + C32583) * C47996 +
             (C32584 + C32585) * C47017 + (C32586 + C32587) * C2901) *
                C48010 * C4781 +
            ((C38546 + C38547) * C47011 + (C38548 + C38549) * C47988 -
             (C33307 + C33306) * C47007 - (C33309 + C33308) * C47996 +
             (C31647 * C1298 + C31645 * C1311 + C31648 * C1303 +
              C48367 * C1320) *
                 C47017 +
             (C31647 * C1310 + C31645 * C1325 + C31648 * C1321 +
              C48367 * C1330) *
                 C2901) *
                C48010 * C48365) *
               C48134) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C2641 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C2635 -
             (C31682 + C31683) * C2642 - (C31684 + C31685) * C47993) *
                C48010 * C4781 +
            ((C37500 + C37501) * C2641 + (C37502 + C37503) * C2635 -
             (C31877 + C31876) * C2642 - (C31879 + C31878) * C47993) *
                C48010 * C48365) *
               C48130 +
           (((C32070 + C32071) * C2642 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C2635 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C2641) +
             (C32072 + C32073) * C47993) *
                C48010 * C4781 +
            ((C32581 + C32580) * C2642 -
             ((C38116 + C38117) * C2635 + (C38118 + C38119) * C2641) +
             (C32583 + C32582) * C47993) *
                C48010 * C48365) *
               C48137 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C2641 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C2635 -
             (C32078 + C32079) * C2642 - (C32080 + C32081) * C47993) *
                C48010 * C4781 +
            ((C38542 + C38543) * C2641 + (C38544 + C38545) * C2635 -
             (C34017 + C34016) * C2642 - (C34019 + C34018) * C47993) *
                C48010 * C48365) *
               C3806) *
              C48315 +
          ((((C31876 + C31877) * C2642 -
             ((C37503 + C37502) * C2635 + (C37501 + C37500) * C2641) +
             (C31878 + C31879) * C47993) *
                C48010 * C4781 +
            ((C31885 + C31884) * C2642 -
             ((C37504 + C37505) * C2635 + (C37506 + C37507) * C2641) +
             (C31887 + C31886) * C47993) *
                C48010 * C48365) *
               C48130 +
           (((C38119 + C38118) * C2641 + (C38117 + C38116) * C2635 -
             (C32580 + C32581) * C2642 - (C32582 + C32583) * C47993) *
                C48010 * C4781 +
            ((C38546 + C38547) * C2641 + (C38548 + C38549) * C2635 -
             (C33307 + C33306) * C2642 - (C33309 + C33308) * C47993) *
                C48010 * C48365) *
               C48137 +
           (((C34016 + C34017) * C2642 -
             ((C38545 + C38544) * C2635 + (C38543 + C38542) * C2641) +
             (C34018 + C34019) * C47993) *
                C48010 * C4781 +
            ((C31647 * C1302 + C31645 * C1318 + C31648 * C7456 +
              C48367 * C7459) *
                 C2642 -
             ((C38550 + C38551) * C2635 + (C38552 + C38553) * C2641) +
             (C31647 * C1319 + C31645 * C1329 + C31648 * C7460 +
              C48367 * C7462) *
                 C47993) *
                C48010 * C48365) *
               C3806) *
              C48094)) /
        (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C2641 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C2635 -
             (C31682 + C31683) * C2642 - (C31684 + C31685) * C47993) *
                C48010 * C4781 +
            ((C37500 + C37501) * C2641 + (C37502 + C37503) * C2635 -
             (C31877 + C31876) * C2642 - (C31879 + C31878) * C47993) *
                C48010 * C48365) *
               C3298 +
           (((C32070 + C32071) * C2642 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C2635 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C2641) +
             (C32072 + C32073) * C47993) *
                C48010 * C4781 +
            ((C32581 + C32580) * C2642 -
             ((C38116 + C38117) * C2635 + (C38118 + C38119) * C2641) +
             (C32583 + C32582) * C47993) *
                C48010 * C48365) *
               C48134) *
              C48386 +
          ((((C31876 + C31877) * C2642 -
             ((C37503 + C37502) * C2635 + (C37501 + C37500) * C2641) +
             (C31878 + C31879) * C47993) *
                C48010 * C4781 +
            ((C31885 + C31884) * C2642 -
             ((C37504 + C37505) * C2635 + (C37506 + C37507) * C2641) +
             (C31887 + C31886) * C47993) *
                C48010 * C48365) *
               C3298 +
           (((C38119 + C38118) * C2641 + (C38117 + C38116) * C2635 -
             (C32580 + C32581) * C2642 - (C32582 + C32583) * C47993) *
                C48010 * C4781 +
            ((C38546 + C38547) * C2641 + (C38548 + C38549) * C2635 -
             (C33307 + C33306) * C2642 - (C33309 + C33308) * C47993) *
                C48010 * C48365) *
               C48134) *
              C48374 +
          ((((C37507 + C37506) * C2641 + (C37505 + C37504) * C2635 -
             (C31884 + C31885) * C2642 - (C31886 + C31887) * C47993) *
                C48010 * C4781 +
            ((C38364 + C38365) * C2641 + (C38366 + C38367) * C2635 -
             (C33101 + C33100) * C2642 - (C33103 + C33102) * C47993) *
                C48010 * C48365) *
               C3298 +
           (((C33306 + C33307) * C2642 -
             ((C38549 + C38548) * C2635 + (C38547 + C38546) * C2641) +
             (C33308 + C33309) * C47993) *
                C48010 * C4781 +
            ((C31647 * C1714 + C31645 * C1718 + C31648 * C6040 +
              C48367 * C6043) *
                 C2642 -
             ((C39016 + C39017) * C2635 + (C39018 + C39019) * C2641) +
             (C31647 * C1719 + C31645 * C1723 + C31648 * C6044 +
              C48367 * C6046) *
                 C47993) *
                C48010 * C48365) *
               C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C2533 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48392 -
            (C31682 + C31683) * C2534 - (C31684 + C31685) * C48385 +
            (C31686 + C31687) * C2535 + (C31688 + C31689) * C48372 -
            (C31690 + C31691) * C2536 - (C31692 + C31693) * C48351) *
               C48010 * C4781 +
           ((C37500 + C37501) * C2533 + (C37502 + C37503) * C48392 -
            (C31877 + C31876) * C2534 - (C31879 + C31878) * C48385 +
            (C31881 + C31880) * C2535 + (C31883 + C31882) * C48372 -
            (C32225 + C32224) * C2536 - (C32227 + C32226) * C48351) *
               C48010 * C48365) *
              C3298 +
          (((C32070 + C32071) * C2534 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C48392 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C2533) +
            (C32072 + C32073) * C48385 - (C32074 + C32075) * C2535 -
            (C32076 + C32077) * C48372 + (C32366 + C32367) * C2536 +
            (C32368 + C32369) * C48351) *
               C48010 * C4781 +
           ((C32581 + C32580) * C2534 -
            ((C38116 + C38117) * C48392 + (C38118 + C38119) * C2533) +
            (C32583 + C32582) * C48385 - (C32585 + C32584) * C2535 -
            (C32587 + C32586) * C48372 +
            (C31647 * C938 + C31645 * C946 + C31648 * C2185 + C48367 * C2186) *
                C2536 +
            (C31647 * C947 + C31645 * C953 + C31648 * C2187 + C48367 * C2188) *
                C48351) *
               C48010 * C48365) *
              C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C2641 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C2635 -
            (C31682 + C31683) * C2642 - (C31684 + C31685) * C47993) *
               C48010 * C4781 +
           ((C37500 + C37501) * C2641 + (C37502 + C37503) * C2635 -
            (C31877 + C31876) * C2642 - (C31879 + C31878) * C47993) *
               C48010 * C48365) *
              C48394 +
          (((C32070 + C32071) * C2642 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C2635 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C2641) +
            (C32072 + C32073) * C47993) *
               C48010 * C4781 +
           ((C32581 + C32580) * C2642 -
            ((C38116 + C38117) * C2635 + (C38118 + C38119) * C2641) +
            (C32583 + C32582) * C47993) *
               C48010 * C48365) *
              C48391 +
          (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                C2641 +
            (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                C2635 -
            (C32078 + C32079) * C2642 - (C32080 + C32081) * C47993) *
               C48010 * C4781 +
           ((C38542 + C38543) * C2641 + (C38544 + C38545) * C2635 -
            (C34017 + C34016) * C2642 - (C34019 + C34018) * C47993) *
               C48010 * C48365) *
              C48382 +
          (((C34158 + C34159) * C2642 -
            ((C31648 * C2028 + C48367 * C2036 + C31647 * C2025 +
              C31645 * C2035) *
                 C2635 +
             (C31648 * C2018 + C48367 * C2027 + C31647 * C2017 +
              C31645 * C2026) *
                 C2641) +
            (C34160 + C34161) * C47993) *
               C48010 * C4781 +
           ((C31647 * C2418 + C31645 * C2422 + C31648 * C6980 +
             C48367 * C6983) *
                C2642 -
            ((C39856 + C39857) * C2635 + (C39858 + C39859) * C2641) +
            (C31647 * C2423 + C31645 * C2427 + C31648 * C6984 +
             C48367 * C6986) *
                C47993) *
               C48010 * C48365) *
              C48363) *
         C48035) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C47011 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C47988 -
            (C31682 + C31683) * C47007 - (C31684 + C31685) * C47996 +
            (C31686 + C31687) * C47017 + (C31688 + C31689) * C2901) *
               C48010 * C4781 +
           ((C37500 + C37501) * C47011 + (C37502 + C37503) * C47988 -
            (C31877 + C31876) * C47007 - (C31879 + C31878) * C47996 +
            (C31881 + C31880) * C47017 + (C31883 + C31882) * C2901) *
               C48010 * C48365) *
              C48130 +
          (((C32070 + C32071) * C47007 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47988 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C47011) +
            (C32072 + C32073) * C47996 - (C32074 + C32075) * C47017 -
            (C32076 + C32077) * C2901) *
               C48010 * C4781 +
           ((C32581 + C32580) * C47007 -
            ((C38116 + C38117) * C47988 + (C38118 + C38119) * C47011) +
            (C32583 + C32582) * C47996 - (C32585 + C32584) * C47017 -
            (C32587 + C32586) * C2901) *
               C48010 * C48365) *
              C48137 +
          (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                C47011 +
            (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                C47988 -
            (C32078 + C32079) * C47007 - (C32080 + C32081) * C47996 +
            (C32082 + C32083) * C47017 + (C32084 + C32085) * C2901) *
               C48010 * C4781 +
           ((C38542 + C38543) * C47011 + (C38544 + C38545) * C47988 -
            (C34017 + C34016) * C47007 - (C34019 + C34018) * C47996 +
            (C31647 * C1295 + C31645 * C1305 + C31648 * C2419 +
             C48367 * C2424) *
                C47017 +
            (C31647 * C1304 + C31645 * C1322 + C31648 * C2425 +
             C48367 * C2428) *
                C2901) *
               C48010 * C48365) *
              C3806) *
         C48035) /
        (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C2533 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48392 -
            (C31682 + C31683) * C2534 - (C31684 + C31685) * C48385 +
            (C31686 + C31687) * C2535 + (C31688 + C31689) * C48372 -
            (C31690 + C31691) * C2536 - (C31692 + C31693) * C48351) *
               C48010 * C4781 +
           ((C37500 + C37501) * C2533 + (C37502 + C37503) * C48392 -
            (C31877 + C31876) * C2534 - (C31879 + C31878) * C48385 +
            (C31881 + C31880) * C2535 + (C31883 + C31882) * C48372 -
            (C32225 + C32224) * C2536 - (C32227 + C32226) * C48351) *
               C48010 * C48365) *
              C3298 +
          (((C32070 + C32071) * C2534 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C48392 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C2533) +
            (C32072 + C32073) * C48385 - (C32074 + C32075) * C2535 -
            (C32076 + C32077) * C48372 + (C32366 + C32367) * C2536 +
            (C32368 + C32369) * C48351) *
               C48010 * C4781 +
           ((C32581 + C32580) * C2534 -
            ((C38116 + C38117) * C48392 + (C38118 + C38119) * C2533) +
            (C32583 + C32582) * C48385 - (C32585 + C32584) * C2535 -
            (C32587 + C32586) * C48372 +
            (C31647 * C938 + C31645 * C946 + C31648 * C2185 + C48367 * C2186) *
                C2536 +
            (C31647 * C947 + C31645 * C953 + C31648 * C2187 + C48367 * C2188) *
                C48351) *
               C48010 * C48365) *
              C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C2641 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C2635 -
             (C31682 + C31683) * C2642 - (C31684 + C31685) * C47993) *
                C48010 * C4781 +
            ((C37500 + C37501) * C2641 + (C37502 + C37503) * C2635 -
             (C31877 + C31876) * C2642 - (C31879 + C31878) * C47993) *
                C48010 * C48365) *
               C3298 +
           (((C32070 + C32071) * C2642 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C2635 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C2641) +
             (C32072 + C32073) * C47993) *
                C48010 * C4781 +
            ((C32581 + C32580) * C2642 -
             ((C38116 + C38117) * C2635 + (C38118 + C38119) * C2641) +
             (C32583 + C32582) * C47993) *
                C48010 * C48365) *
               C48134) *
              C48386 +
          ((((C31876 + C31877) * C2642 -
             ((C37503 + C37502) * C2635 + (C37501 + C37500) * C2641) +
             (C31878 + C31879) * C47993) *
                C48010 * C4781 +
            ((C31885 + C31884) * C2642 -
             ((C37504 + C37505) * C2635 + (C37506 + C37507) * C2641) +
             (C31887 + C31886) * C47993) *
                C48010 * C48365) *
               C3298 +
           (((C38119 + C38118) * C2641 + (C38117 + C38116) * C2635 -
             (C32580 + C32581) * C2642 - (C32582 + C32583) * C47993) *
                C48010 * C4781 +
            ((C38546 + C38547) * C2641 + (C38548 + C38549) * C2635 -
             (C33307 + C33306) * C2642 - (C33309 + C33308) * C47993) *
                C48010 * C48365) *
               C48134) *
              C48374 +
          ((((C37507 + C37506) * C2641 + (C37505 + C37504) * C2635 -
             (C31884 + C31885) * C2642 - (C31886 + C31887) * C47993) *
                C48010 * C4781 +
            ((C38364 + C38365) * C2641 + (C38366 + C38367) * C2635 -
             (C33101 + C33100) * C2642 - (C33103 + C33102) * C47993) *
                C48010 * C48365) *
               C3298 +
           (((C33306 + C33307) * C2642 -
             ((C38549 + C38548) * C2635 + (C38547 + C38546) * C2641) +
             (C33308 + C33309) * C47993) *
                C48010 * C4781 +
            ((C31647 * C1714 + C31645 * C1718 + C31648 * C6040 +
              C48367 * C6043) *
                 C2642 -
             ((C39016 + C39017) * C2635 + (C39018 + C39019) * C2641) +
             (C31647 * C1719 + C31645 * C1723 + C31648 * C6044 +
              C48367 * C6046) *
                 C47993) *
                C48010 * C48365) *
               C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C665 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C659 -
            (C31682 + C31683) * C666 - (C31684 + C31685) * C660 +
            (C31686 + C31687) * C667 + (C31688 + C31689) * C661 -
            (C31690 + C31691) * C668 - (C31692 + C31693) * C48351) *
               C48010 * C4781 +
           ((C37500 + C37501) * C665 + (C37502 + C37503) * C659 -
            (C31877 + C31876) * C666 - (C31879 + C31878) * C660 +
            (C31881 + C31880) * C667 + (C31883 + C31882) * C661 -
            (C32225 + C32224) * C668 - (C32227 + C32226) * C48351) *
               C48010 * C48365) *
              C48047 * C48315 +
          (((C31876 + C31877) * C666 -
            ((C37503 + C37502) * C659 + (C37501 + C37500) * C665) +
            (C31878 + C31879) * C660 - (C31880 + C31881) * C667 -
            (C31882 + C31883) * C661 + (C32224 + C32225) * C668 +
            (C32226 + C32227) * C48351) *
               C48010 * C4781 +
           ((C31885 + C31884) * C666 -
            ((C37504 + C37505) * C659 + (C37506 + C37507) * C665) +
            (C31887 + C31886) * C660 - (C31889 + C31888) * C667 -
            (C31891 + C31890) * C661 +
            (C31647 * C304 + C31645 * C322 + C31648 * C1599 + C48367 * C1600) *
                C668 +
            (C31647 * C323 + C31645 * C334 + C31648 * C1601 + C48367 * C1602) *
                C48351) *
               C48010 * C48365) *
              C48047 * C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C47001 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48298 -
            (C31682 + C31683) * C46982 - (C31684 + C31685) * C47993) *
               C48010 * C4781 +
           ((C37500 + C37501) * C47001 + (C37502 + C37503) * C48298 -
            (C31877 + C31876) * C46982 - (C31879 + C31878) * C47993) *
               C48010 * C48365) *
              C48047 * C1431 +
          (((C31876 + C31877) * C46982 -
            ((C37503 + C37502) * C48298 + (C37501 + C37500) * C47001) +
            (C31878 + C31879) * C47993) *
               C48010 * C4781 +
           ((C31885 + C31884) * C46982 -
            ((C37504 + C37505) * C48298 + (C37506 + C37507) * C47001) +
            (C31887 + C31886) * C47993) *
               C48010 * C48365) *
              C48047 * C1432 +
          (((C37507 + C37506) * C47001 + (C37505 + C37504) * C48298 -
            (C31884 + C31885) * C46982 - (C31886 + C31887) * C47993) *
               C48010 * C4781 +
           ((C38364 + C38365) * C47001 + (C38366 + C38367) * C48298 -
            (C33101 + C33100) * C46982 - (C33103 + C33102) * C47993) *
               C48010 * C48365) *
              C48047 * C1433 +
          (((C33100 + C33101) * C46982 -
            ((C38367 + C38366) * C48298 + (C38365 + C38364) * C47001) +
            (C33102 + C33103) * C47993) *
               C48010 * C4781 +
           ((C31647 * C1165 + C31645 * C1175 + C31648 * C6588 +
             C48367 * C6591) *
                C46982 -
            ((C38368 + C38369) * C48298 + (C38370 + C38371) * C47001) +
            (C31647 * C1176 + C31645 * C1183 + C31648 * C6592 +
             C48367 * C6594) *
                C47993) *
               C48010 * C48365) *
              C48047 * C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C293 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C287 -
             (C31682 + C31683) * C294 - (C31684 + C31685) * C288 +
             (C31686 + C31687) * C295 + (C31688 + C31689) * C48339) *
                C48010 * C4781 +
            ((C37500 + C37501) * C293 + (C37502 + C37503) * C287 -
             (C31877 + C31876) * C294 - (C31879 + C31878) * C288 +
             (C31881 + C31880) * C295 + (C31883 + C31882) * C48339) *
                C48010 * C48365) *
               C48316 +
           (((C32070 + C32071) * C294 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C287 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C293) +
             (C32072 + C32073) * C288 - (C32074 + C32075) * C295 -
             (C32076 + C32077) * C48339) *
                C48010 * C4781 +
            ((C32581 + C32580) * C294 -
             ((C38116 + C38117) * C287 + (C38118 + C38119) * C293) +
             (C32583 + C32582) * C288 - (C32585 + C32584) * C295 -
             (C32587 + C32586) * C48339) *
                C48010 * C48365) *
               C48134) *
              C48315 +
          ((((C31876 + C31877) * C294 -
             ((C37503 + C37502) * C287 + (C37501 + C37500) * C293) +
             (C31878 + C31879) * C288 - (C31880 + C31881) * C295 -
             (C31882 + C31883) * C48339) *
                C48010 * C4781 +
            ((C31885 + C31884) * C294 -
             ((C37504 + C37505) * C287 + (C37506 + C37507) * C293) +
             (C31887 + C31886) * C288 - (C31889 + C31888) * C295 -
             (C31891 + C31890) * C48339) *
                C48010 * C48365) *
               C48316 +
           (((C38119 + C38118) * C293 + (C38117 + C38116) * C287 -
             (C32580 + C32581) * C294 - (C32582 + C32583) * C288 +
             (C32584 + C32585) * C295 + (C32586 + C32587) * C48339) *
                C48010 * C4781 +
            ((C31647 * C1300 + C31645 * C1315 + C31648 * C1301 +
              C48367 * C1316) *
                 C293 +
             (C31647 * C1314 + C31645 * C1327 + C31648 * C1317 +
              C48367 * C1328) *
                 C287 -
             (C33307 + C33306) * C294 - (C33309 + C33308) * C288 +
             (C31647 * C1298 + C31645 * C1311 + C31648 * C1303 +
              C48367 * C1320) *
                 C295 +
             (C31647 * C1310 + C31645 * C1325 + C31648 * C1321 +
              C48367 * C1330) *
                 C48339) *
                C48010 * C48365) *
               C48134) *
              C48094)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C4781 +
            ((C37500 + C37501) * C1160 + (C37502 + C37503) * C47983) * C48010 *
                C48365) *
               C48316 -
           (((C38116 + C38117) * C47983 + (C38118 + C38119) * C1160) * C48010 *
                C48365 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C48010 * C4781) *
               C48134) *
              C1431 +
          ((((C38119 + C38118) * C1160 + (C38117 + C38116) * C47983) * C48010 *
                C4781 +
            ((C38546 + C38547) * C1160 + (C38548 + C38549) * C47983) * C48010 *
                C48365) *
               C48134 -
           (((C37504 + C37505) * C47983 + (C37506 + C37507) * C1160) * C48010 *
                C48365 +
            ((C37503 + C37502) * C47983 + (C37501 + C37500) * C1160) * C48010 *
                C4781) *
               C48316) *
              C1432 +
          ((((C37507 + C37506) * C1160 + (C37505 + C37504) * C47983) * C48010 *
                C4781 +
            ((C38364 + C38365) * C1160 + (C38366 + C38367) * C47983) * C48010 *
                C48365) *
               C48316 -
           (((C39016 + C39017) * C47983 + (C39018 + C39019) * C1160) * C48010 *
                C48365 +
            ((C38549 + C38548) * C47983 + (C38547 + C38546) * C1160) * C48010 *
                C4781) *
               C48134) *
              C1433 +
          ((((C39019 + C39018) * C1160 + (C39017 + C39016) * C47983) * C48010 *
                C4781 +
            ((C31647 * C6587 + C31645 * C6589 + C31648 * C22667 +
              C48367 * C22668) *
                 C1160 +
             (C31647 * C6590 + C31645 * C6593 + C31648 * C22669 +
              C48367 * C22670) *
                 C47983) *
                C48010 * C48365) *
               C48134 -
           (((C38368 + C38369) * C47983 + (C38370 + C38371) * C1160) * C48010 *
                C48365 +
            ((C38367 + C38366) * C47983 + (C38365 + C38364) * C1160) * C48010 *
                C4781) *
               C48316) *
              C48357)) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C293 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C287 -
            (C31682 + C31683) * C294 - (C31684 + C31685) * C288 +
            (C31686 + C31687) * C295 + (C31688 + C31689) * C48339) *
               C48010 * C4781 +
           ((C37500 + C37501) * C293 + (C37502 + C37503) * C287 -
            (C31877 + C31876) * C294 - (C31879 + C31878) * C288 +
            (C31881 + C31880) * C295 + (C31883 + C31882) * C48339) *
               C48010 * C48365) *
              C48047 * C48386 +
          (((C31876 + C31877) * C294 -
            ((C37503 + C37502) * C287 + (C37501 + C37500) * C293) +
            (C31878 + C31879) * C288 - (C31880 + C31881) * C295 -
            (C31882 + C31883) * C48339) *
               C48010 * C4781 +
           ((C31885 + C31884) * C294 -
            ((C37504 + C37505) * C287 + (C37506 + C37507) * C293) +
            (C31887 + C31886) * C288 - (C31889 + C31888) * C295 -
            (C31891 + C31890) * C48339) *
               C48010 * C48365) *
              C48047 * C48374 +
          (((C37507 + C37506) * C293 + (C37505 + C37504) * C287 -
            (C31884 + C31885) * C294 - (C31886 + C31887) * C288 +
            (C31888 + C31889) * C295 + (C31890 + C31891) * C48339) *
               C48010 * C4781 +
           ((C31647 * C1163 + C31645 * C1172 + C31648 * C1713 +
             C48367 * C1716) *
                C293 +
            (C31647 * C1171 + C31645 * C1181 + C31648 * C1717 +
             C48367 * C1722) *
                C287 -
            (C33101 + C33100) * C294 - (C33103 + C33102) * C288 +
            (C31647 * C1161 + C31645 * C1168 + C31648 * C1715 +
             C48367 * C1720) *
                C295 +
            (C31647 * C1167 + C31645 * C1179 + C31648 * C1721 +
             C48367 * C1724) *
                C48339) *
               C48010 * C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
               C114 +
           (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
               C102 -
           (C31682 + C31683) * C115 - (C31684 + C31685) * C103 +
           (C31686 + C31687) * C116 + (C31688 + C31689) * C104 -
           (C31690 + C31691) * C117 - (C31692 + C31693) * C105 +
           (C31694 + C31695) * C118 + (C31696 + C31697) * C106) *
              C48010 * C4781 +
          ((C31647 * C297 + C31645 * C308 + C31648 * C935 + C48367 * C940) *
               C114 +
           (C31647 * C307 + C31645 * C326 + C31648 * C941 + C48367 * C950) *
               C102 -
           (C31877 + C31876) * C115 - (C31879 + C31878) * C103 +
           (C31881 + C31880) * C116 + (C31883 + C31882) * C104 -
           (C32225 + C32224) * C117 - (C32227 + C32226) * C105 +
           (C31647 * C300 + C31645 * C314 + C31648 * C939 + C48367 * C948) *
               C118 +
           (C31647 * C315 + C31645 * C330 + C31648 * C949 + C48367 * C954) *
               C106) *
              C48010 * C48365) *
         C48047 * C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C293 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C287 -
            (C31682 + C31683) * C294 - (C31684 + C31685) * C288 +
            (C31686 + C31687) * C295 + (C31688 + C31689) * C48339) *
               C48010 * C4781 +
           ((C37500 + C37501) * C293 + (C37502 + C37503) * C287 -
            (C31877 + C31876) * C294 - (C31879 + C31878) * C288 +
            (C31881 + C31880) * C295 + (C31883 + C31882) * C48339) *
               C48010 * C48365) *
              C48387 +
          (((C32070 + C32071) * C294 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C287 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C293) +
            (C32072 + C32073) * C288 - (C32074 + C32075) * C295 -
            (C32076 + C32077) * C48339) *
               C48010 * C4781 +
           ((C32581 + C32580) * C294 -
            ((C31648 * C1308 + C48367 * C1324 + C31647 * C941 + C31645 * C950) *
                 C287 +
             (C31648 * C1297 + C48367 * C1309 + C31647 * C935 + C31645 * C940) *
                 C293) +
            (C32583 + C32582) * C288 - (C32585 + C32584) * C295 -
            (C32587 + C32586) * C48339) *
               C48010 * C48365) *
              C48376 +
          (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                C293 +
            (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                C287 -
            (C32078 + C32079) * C294 - (C32080 + C32081) * C288 +
            (C32082 + C32083) * C295 + (C32084 + C32085) * C48339) *
               C48010 * C4781 +
           ((C31647 * C1297 + C31645 * C1309 + C31648 * C2417 +
             C48367 * C2420) *
                C293 +
            (C31647 * C1308 + C31645 * C1324 + C31648 * C2421 +
             C48367 * C2426) *
                C287 -
            (C34017 + C34016) * C294 - (C34019 + C34018) * C288 +
            (C31647 * C1295 + C31645 * C1305 + C31648 * C2419 +
             C48367 * C2424) *
                C295 +
            (C31647 * C1304 + C31645 * C1322 + C31648 * C2425 +
             C48367 * C2428) *
                C48339) *
               C48010 * C48365) *
              C48350) *
         C48035) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1089 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48383 -
            (C31682 + C31683) * C1090 - (C31684 + C31685) * C48370 +
            (C31686 + C31687) * C1091 + (C31688 + C31689) * C48339) *
               C48010 * C4781 +
           ((C37500 + C37501) * C1089 + (C37502 + C37503) * C48383 -
            (C31877 + C31876) * C1090 - (C31879 + C31878) * C48370 +
            (C31881 + C31880) * C1091 + (C31883 + C31882) * C48339) *
               C48010 * C48365) *
              C48047 * C1086 +
          (((C31876 + C31877) * C1090 -
            ((C37503 + C37502) * C48383 + (C37501 + C37500) * C1089) +
            (C31878 + C31879) * C48370 - (C31880 + C31881) * C1091 -
            (C31882 + C31883) * C48339) *
               C48010 * C4781 +
           ((C31885 + C31884) * C1090 -
            ((C37504 + C37505) * C48383 + (C37506 + C37507) * C1089) +
            (C31887 + C31886) * C48370 - (C31889 + C31888) * C1091 -
            (C31891 + C31890) * C48339) *
               C48010 * C48365) *
              C48047 * C1087 +
          (((C37507 + C37506) * C1089 + (C37505 + C37504) * C48383 -
            (C31884 + C31885) * C1090 - (C31886 + C31887) * C48370 +
            (C31888 + C31889) * C1091 + (C31890 + C31891) * C48339) *
               C48010 * C4781 +
           ((C31647 * C1163 + C31645 * C1172 + C31648 * C1713 +
             C48367 * C1716) *
                C1089 +
            (C31647 * C1171 + C31645 * C1181 + C31648 * C1717 +
             C48367 * C1722) *
                C48383 -
            (C33101 + C33100) * C1090 - (C33103 + C33102) * C48370 +
            (C31647 * C1161 + C31645 * C1168 + C31648 * C1715 +
             C48367 * C1720) *
                C1091 +
            (C31647 * C1167 + C31645 * C1179 + C31648 * C1721 +
             C48367 * C1724) *
                C48339) *
               C48010 * C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1160 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C47983) *
               C48010 * C4781 +
           ((C37500 + C37501) * C1160 + (C37502 + C37503) * C47983) * C48010 *
               C48365) *
              C48047 * C1155 -
          (((C37504 + C37505) * C47983 + (C37506 + C37507) * C1160) * C48010 *
               C48365 +
           ((C37503 + C37502) * C47983 + (C37501 + C37500) * C1160) * C48010 *
               C4781) *
              C48047 * C1156 +
          (((C37507 + C37506) * C1160 + (C37505 + C37504) * C47983) * C48010 *
               C4781 +
           ((C38364 + C38365) * C1160 + (C38366 + C38367) * C47983) * C48010 *
               C48365) *
              C48047 * C1157 -
          (((C38368 + C38369) * C47983 + (C38370 + C38371) * C1160) * C48010 *
               C48365 +
           ((C38367 + C38366) * C47983 + (C38365 + C38364) * C1160) * C48010 *
               C4781) *
              C48047 * C1158 +
          (((C38371 + C38370) * C1160 + (C38369 + C38368) * C47983) * C48010 *
               C4781 +
           ((C31647 * C5851 + C31645 * C5853 + C31648 * C23045 +
             C48367 * C23046) *
                C1160 +
            (C31647 * C5854 + C31645 * C5857 + C31648 * C23047 +
             C48367 * C23048) *
                C47983) *
               C48010 * C48365) *
              C48047 * C1159)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C1160 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C47983) *
                C48010 * C4781 +
            ((C37500 + C37501) * C1160 + (C37502 + C37503) * C47983) * C48010 *
                C48365) *
               C48387 -
           (((C38116 + C38117) * C47983 + (C38118 + C38119) * C1160) * C48010 *
                C48365 +
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C47983 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C1160) *
                C48010 * C4781) *
               C48376 +
           (((C31647 * C490 + C31645 * C505 + C31648 * C2017 + C48367 * C2026) *
                 C1160 +
             (C31647 * C506 + C31645 * C520 + C31648 * C2025 + C48367 * C2035) *
                 C47983) *
                C48010 * C4781 +
            ((C38542 + C38543) * C1160 + (C38544 + C38545) * C47983) * C48010 *
                C48365) *
               C48350) *
              C1086 +
          ((((C38119 + C38118) * C1160 + (C38117 + C38116) * C47983) * C48010 *
                C4781 +
            ((C38546 + C38547) * C1160 + (C38548 + C38549) * C47983) * C48010 *
                C48365) *
               C48376 -
           (((C37504 + C37505) * C47983 + (C37506 + C37507) * C1160) * C48010 *
                C48365 +
            ((C37503 + C37502) * C47983 + (C37501 + C37500) * C1160) * C48010 *
                C4781) *
               C48387 -
           (((C38550 + C38551) * C47983 + (C38552 + C38553) * C1160) * C48010 *
                C48365 +
            ((C38545 + C38544) * C47983 + (C38543 + C38542) * C1160) * C48010 *
                C4781) *
               C48350) *
              C1087 +
          ((((C37507 + C37506) * C1160 + (C37505 + C37504) * C47983) * C48010 *
                C4781 +
            ((C38364 + C38365) * C1160 + (C38366 + C38367) * C47983) * C48010 *
                C48365) *
               C48387 -
           (((C31648 * C6042 + C48367 * C6045 + C31647 * C1717 +
              C31645 * C1722) *
                 C47983 +
             (C31648 * C6039 + C48367 * C6041 + C31647 * C1713 +
              C31645 * C1716) *
                 C1160) *
                C48010 * C48365 +
            ((C38549 + C38548) * C47983 + (C38547 + C38546) * C1160) * C48010 *
                C4781) *
               C48376 +
           (((C38553 + C38552) * C1160 + (C38551 + C38550) * C47983) * C48010 *
                C4781 +
            ((C31647 * C6039 + C31645 * C6041 + C31648 * C23691 +
              C48367 * C23692) *
                 C1160 +
             (C31647 * C6042 + C31645 * C6045 + C31648 * C23693 +
              C48367 * C23694) *
                 C47983) *
                C48010 * C48365) *
               C48350) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C665 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C659 -
            (C31682 + C31683) * C666 - (C31684 + C31685) * C660 +
            (C31686 + C31687) * C667 + (C31688 + C31689) * C661 -
            (C31690 + C31691) * C668 - (C31692 + C31693) * C48351) *
               C48010 * C4781 +
           ((C37500 + C37501) * C665 + (C37502 + C37503) * C659 -
            (C31877 + C31876) * C666 - (C31879 + C31878) * C660 +
            (C31881 + C31880) * C667 + (C31883 + C31882) * C661 -
            (C32225 + C32224) * C668 - (C32227 + C32226) * C48351) *
               C48010 * C48365) *
              C48316 +
          (((C32070 + C32071) * C666 -
            ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                 C659 +
             (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                 C665) +
            (C32072 + C32073) * C660 - (C32074 + C32075) * C667 -
            (C32076 + C32077) * C661 + (C32366 + C32367) * C668 +
            (C32368 + C32369) * C48351) *
               C48010 * C4781 +
           ((C32581 + C32580) * C666 -
            ((C31648 * C1308 + C48367 * C1324 + C31647 * C941 + C31645 * C950) *
                 C659 +
             (C31648 * C1297 + C48367 * C1309 + C31647 * C935 + C31645 * C940) *
                 C665) +
            (C32583 + C32582) * C660 - (C32585 + C32584) * C667 -
            (C32587 + C32586) * C661 +
            (C31647 * C938 + C31645 * C946 + C31648 * C2185 + C48367 * C2186) *
                C668 +
            (C31647 * C947 + C31645 * C953 + C31648 * C2187 + C48367 * C2188) *
                C48351) *
               C48010 * C48365) *
              C48134) *
         C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                 C47001 +
             (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                 C48298 -
             (C31682 + C31683) * C46982 - (C31684 + C31685) * C47993) *
                C48010 * C4781 +
            ((C37500 + C37501) * C47001 + (C37502 + C37503) * C48298 -
             (C31877 + C31876) * C46982 - (C31879 + C31878) * C47993) *
                C48010 * C48365) *
               C48316 +
           (((C32070 + C32071) * C46982 -
             ((C31648 * C506 + C48367 * C520 + C31647 * C496 + C31645 * C515) *
                  C48298 +
              (C31648 * C490 + C48367 * C505 + C31647 * C486 + C31645 * C497) *
                  C47001) +
             (C32072 + C32073) * C47993) *
                C48010 * C4781 +
            ((C32581 + C32580) * C46982 -
             ((C38116 + C38117) * C48298 + (C38118 + C38119) * C47001) +
             (C32583 + C32582) * C47993) *
                C48010 * C48365) *
               C48134) *
              C1086 +
          ((((C31876 + C31877) * C46982 -
             ((C37503 + C37502) * C48298 + (C37501 + C37500) * C47001) +
             (C31878 + C31879) * C47993) *
                C48010 * C4781 +
            ((C31885 + C31884) * C46982 -
             ((C37504 + C37505) * C48298 + (C37506 + C37507) * C47001) +
             (C31887 + C31886) * C47993) *
                C48010 * C48365) *
               C48316 +
           (((C38119 + C38118) * C47001 + (C38117 + C38116) * C48298 -
             (C32580 + C32581) * C46982 - (C32582 + C32583) * C47993) *
                C48010 * C4781 +
            ((C38546 + C38547) * C47001 + (C38548 + C38549) * C48298 -
             (C33307 + C33306) * C46982 - (C33309 + C33308) * C47993) *
                C48010 * C48365) *
               C48134) *
              C1087 +
          ((((C37507 + C37506) * C47001 + (C37505 + C37504) * C48298 -
             (C31884 + C31885) * C46982 - (C31886 + C31887) * C47993) *
                C48010 * C4781 +
            ((C38364 + C38365) * C47001 + (C38366 + C38367) * C48298 -
             (C33101 + C33100) * C46982 - (C33103 + C33102) * C47993) *
                C48010 * C48365) *
               C48316 +
           (((C33306 + C33307) * C46982 -
             ((C38549 + C38548) * C48298 + (C38547 + C38546) * C47001) +
             (C33308 + C33309) * C47993) *
                C48010 * C4781 +
            ((C31647 * C1714 + C31645 * C1718 + C31648 * C6040 +
              C48367 * C6043) *
                 C46982 -
             ((C31648 * C6042 + C48367 * C6045 + C31647 * C1717 +
               C31645 * C1722) *
                  C48298 +
              (C31648 * C6039 + C48367 * C6041 + C31647 * C1713 +
               C31645 * C1716) *
                  C47001) +
             (C31647 * C1719 + C31645 * C1723 + C31648 * C6044 +
              C48367 * C6046) *
                 C47993) *
                C48010 * C48365) *
               C48134) *
              C48347)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
               C114 +
           (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
               C102 -
           (C31682 + C31683) * C115 - (C31684 + C31685) * C103 +
           (C31686 + C31687) * C116 + (C31688 + C31689) * C104 -
           (C31690 + C31691) * C117 - (C31692 + C31693) * C105 +
           (C31694 + C31695) * C118 + (C31696 + C31697) * C106) *
              C48010 * C4781 +
          ((C31647 * C297 + C31645 * C308 + C31648 * C935 + C48367 * C940) *
               C114 +
           (C31647 * C307 + C31645 * C326 + C31648 * C941 + C48367 * C950) *
               C102 -
           (C31877 + C31876) * C115 - (C31879 + C31878) * C103 +
           (C31881 + C31880) * C116 + (C31883 + C31882) * C104 -
           (C32225 + C32224) * C117 - (C32227 + C32226) * C105 +
           (C31647 * C300 + C31645 * C314 + C31648 * C939 + C48367 * C948) *
               C118 +
           (C31647 * C315 + C31645 * C330 + C31648 * C949 + C48367 * C954) *
               C106) *
              C48010 * C48365) *
         C48047 * C48035) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C293 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C287 -
            (C31682 + C31683) * C294 - (C31684 + C31685) * C288 +
            (C31686 + C31687) * C295 + (C31688 + C31689) * C48339) *
               C48010 * C4781 +
           ((C37500 + C37501) * C293 + (C37502 + C37503) * C287 -
            (C31877 + C31876) * C294 - (C31879 + C31878) * C288 +
            (C31881 + C31880) * C295 + (C31883 + C31882) * C48339) *
               C48010 * C48365) *
              C48047 * C48386 +
          (((C31876 + C31877) * C294 -
            ((C37503 + C37502) * C287 + (C37501 + C37500) * C293) +
            (C31878 + C31879) * C288 - (C31880 + C31881) * C295 -
            (C31882 + C31883) * C48339) *
               C48010 * C4781 +
           ((C31885 + C31884) * C294 -
            ((C37504 + C37505) * C287 + (C37506 + C37507) * C293) +
            (C31887 + C31886) * C288 - (C31889 + C31888) * C295 -
            (C31891 + C31890) * C48339) *
               C48010 * C48365) *
              C48047 * C48374 +
          (((C37507 + C37506) * C293 + (C37505 + C37504) * C287 -
            (C31884 + C31885) * C294 - (C31886 + C31887) * C288 +
            (C31888 + C31889) * C295 + (C31890 + C31891) * C48339) *
               C48010 * C4781 +
           ((C31647 * C1163 + C31645 * C1172 + C31648 * C1713 +
             C48367 * C1716) *
                C293 +
            (C31647 * C1171 + C31645 * C1181 + C31648 * C1717 +
             C48367 * C1722) *
                C287 -
            (C33101 + C33100) * C294 - (C33103 + C33102) * C288 +
            (C31647 * C1161 + C31645 * C1168 + C31648 * C1715 +
             C48367 * C1720) *
                C295 +
            (C31647 * C1167 + C31645 * C1179 + C31648 * C1721 +
             C48367 * C1724) *
                C48339) *
               C48010 * C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1089 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C48383 -
            (C31682 + C31683) * C1090 - (C31684 + C31685) * C48370 +
            (C31686 + C31687) * C1091 + (C31688 + C31689) * C48339) *
               C48010 * C4781 +
           ((C37500 + C37501) * C1089 + (C37502 + C37503) * C48383 -
            (C31877 + C31876) * C1090 - (C31879 + C31878) * C48370 +
            (C31881 + C31880) * C1091 + (C31883 + C31882) * C48339) *
               C48010 * C48365) *
              C48047 * C1086 +
          (((C31876 + C31877) * C1090 -
            ((C37503 + C37502) * C48383 + (C37501 + C37500) * C1089) +
            (C31878 + C31879) * C48370 - (C31880 + C31881) * C1091 -
            (C31882 + C31883) * C48339) *
               C48010 * C4781 +
           ((C31885 + C31884) * C1090 -
            ((C37504 + C37505) * C48383 + (C37506 + C37507) * C1089) +
            (C31887 + C31886) * C48370 - (C31889 + C31888) * C1091 -
            (C31891 + C31890) * C48339) *
               C48010 * C48365) *
              C48047 * C1087 +
          (((C37507 + C37506) * C1089 + (C37505 + C37504) * C48383 -
            (C31884 + C31885) * C1090 - (C31886 + C31887) * C48370 +
            (C31888 + C31889) * C1091 + (C31890 + C31891) * C48339) *
               C48010 * C4781 +
           ((C31647 * C1163 + C31645 * C1172 + C31648 * C1713 +
             C48367 * C1716) *
                C1089 +
            (C31647 * C1171 + C31645 * C1181 + C31648 * C1717 +
             C48367 * C1722) *
                C48383 -
            (C33101 + C33100) * C1090 - (C33103 + C33102) * C48370 +
            (C31647 * C1161 + C31645 * C1168 + C31648 * C1715 +
             C48367 * C1720) *
                C1091 +
            (C31647 * C1167 + C31645 * C1179 + C31648 * C1721 +
             C48367 * C1724) *
                C48339) *
               C48010 * C48365) *
              C48047 * C48347)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31647 * C119 + C31645 * C126 + C31648 * C486 + C48367 * C497) *
                C1160 +
            (C31647 * C127 + C31645 * C140 + C31648 * C496 + C48367 * C515) *
                C47983) *
               C48010 * C4781 +
           ((C37500 + C37501) * C1160 + (C37502 + C37503) * C47983) * C48010 *
               C48365) *
              C48047 * C1155 -
          (((C37504 + C37505) * C47983 + (C37506 + C37507) * C1160) * C48010 *
               C48365 +
           ((C37503 + C37502) * C47983 + (C37501 + C37500) * C1160) * C48010 *
               C4781) *
              C48047 * C1156 +
          (((C37507 + C37506) * C1160 + (C37505 + C37504) * C47983) * C48010 *
               C4781 +
           ((C38364 + C38365) * C1160 + (C38366 + C38367) * C47983) * C48010 *
               C48365) *
              C48047 * C1157 -
          (((C38368 + C38369) * C47983 + (C38370 + C38371) * C1160) * C48010 *
               C48365 +
           ((C38367 + C38366) * C47983 + (C38365 + C38364) * C1160) * C48010 *
               C4781) *
              C48047 * C1158 +
          (((C38371 + C38370) * C1160 + (C38369 + C38368) * C47983) * C48010 *
               C4781 +
           ((C31647 * C5851 + C31645 * C5853 + C31648 * C23045 +
             C48367 * C23046) *
                C1160 +
            (C31647 * C5854 + C31645 * C5857 + C31648 * C23047 +
             C48367 * C23048) *
                C47983) *
               C48010 * C48365) *
              C48047 * C1159)) /
            (p * q * std::sqrt(p + q));
    d2ee[200] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C47011 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C47988 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C47007 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C47996 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C47017 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C2901) *
                       C48010 * C48235 * C48047 * C48090 +
                   ((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                     C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                        C47007 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C47988 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C47011) +
                    (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                     C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                        C47996 -
                    (C42890 * C1295 + C42887 * C1305 + C42889 * C937 +
                     C42886 * C944 + C42888 * C298 + C42885 * C310) *
                        C47017 -
                    (C42890 * C1304 + C42887 * C1322 + C42889 * C945 +
                     C42886 * C952 + C42888 * C311 + C42885 * C328) *
                        C2901) *
                       C48010 * C48235 * C48047 * C48097 +
                   ((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                     C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                        C47011 +
                    (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                     C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                        C47988 -
                    (C42890 * C1302 + C42887 * C1318 + C42889 * C1299 +
                     C42886 * C1313 + C42888 * C302 + C42885 * C318) *
                        C47007 -
                    (C42890 * C1319 + C42887 * C1329 + C42889 * C1312 +
                     C42886 * C1326 + C42888 * C319 + C42885 * C332) *
                        C47996 +
                    (C42888 * C303 + C42885 * C320 + C42889 * C1298 +
                     C42886 * C1311 + C42890 * C1303 + C42887 * C1320) *
                        C47017 +
                    (C42888 * C321 + C42885 * C333 + C42889 * C1310 +
                     C42886 * C1325 + C42890 * C1321 + C42887 * C1330) *
                        C2901) *
                       C48010 * C48235 * C48047 * C2904)) /
                 (p * q * std::sqrt(p + q));
    d2ee[201] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C2641 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C2635 -
                     (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                      C42886 * C495 + C42888 * C120 + C42885 * C128) *
                         C2642 -
                     (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                      C42886 * C516 + C42888 * C129 + C42885 * C141) *
                         C47993) *
                        C48010 * C48235 * C48316 +
                    ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                      C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                         C2642 -
                     ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                       C42886 * C520 + C42888 * C496 + C42885 * C515) *
                          C2635 +
                      (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                       C42886 * C505 + C42888 * C486 + C42885 * C497) *
                          C2641) +
                     (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                      C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                         C47993) *
                        C48010 * C48235 * C48134) *
                       C48090 +
                   (((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                      C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                         C2642 -
                     ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                       C42886 * C950 + C42888 * C307 + C42885 * C326) *
                          C2635 +
                      (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                       C42886 * C940 + C42888 * C297 + C42885 * C308) *
                          C2641) +
                     (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                      C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                         C47993) *
                        C48010 * C48235 * C48316 +
                    ((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C2641 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C2635 -
                     (C42890 * C2418 + C42887 * C2422 + C42889 * C1296 +
                      C42886 * C1307 + C42888 * C936 + C42885 * C942) *
                         C2642 -
                     (C42890 * C2423 + C42887 * C2427 + C42889 * C1306 +
                      C42886 * C1323 + C42888 * C943 + C42885 * C951) *
                         C47993) *
                        C48010 * C48235 * C48134) *
                       C48097 +
                   (((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                      C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                         C2641 +
                     (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                      C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                         C2635 -
                     (C42890 * C1302 + C42887 * C1318 + C42889 * C1299 +
                      C42886 * C1313 + C42888 * C302 + C42885 * C318) *
                         C2642 -
                     (C42890 * C1319 + C42887 * C1329 + C42889 * C1312 +
                      C42886 * C1326 + C42888 * C319 + C42885 * C332) *
                         C47993) *
                        C48010 * C48235 * C48316 +
                    ((C42888 * C1299 + C42885 * C1313 + C42889 * C1302 +
                      C42886 * C1318 + C42890 * C7456 + C42887 * C7459) *
                         C2642 -
                     ((C42890 * C7458 + C42887 * C7461 + C42889 * C1317 +
                       C42886 * C1328 + C42888 * C1314 + C42885 * C1327) *
                          C2635 +
                      (C42890 * C7455 + C42887 * C7457 + C42889 * C1301 +
                       C42886 * C1316 + C42888 * C1300 + C42885 * C1315) *
                          C2641) +
                     (C42888 * C1312 + C42885 * C1326 + C42889 * C1319 +
                      C42886 * C1329 + C42890 * C7460 + C42887 * C7462) *
                         C47993) *
                        C48010 * C48235 * C48134) *
                       C2904)) /
                 (p * q * std::sqrt(p + q));
    d2ee[202] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C2641 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C2635 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C2642 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C47993) *
                       C48010 * C48235 * C48047 * C48393 +
                   ((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                     C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                        C2642 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C2635 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C2641) +
                    (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                     C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                        C47993) *
                       C48010 * C48235 * C48047 * C48389 +
                   ((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                     C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                        C2641 +
                    (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                     C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                        C2635 -
                    (C42890 * C1302 + C42887 * C1318 + C42889 * C1299 +
                     C42886 * C1313 + C42888 * C302 + C42885 * C318) *
                        C2642 -
                    (C42890 * C1319 + C42887 * C1329 + C42889 * C1312 +
                     C42886 * C1326 + C42888 * C319 + C42885 * C332) *
                        C47993) *
                       C48010 * C48235 * C48047 * C48379 +
                   ((C42888 * C1162 + C42885 * C1170 + C42889 * C1714 +
                     C42886 * C1718 + C42890 * C6040 + C42887 * C6043) *
                        C2642 -
                    ((C42890 * C6042 + C42887 * C6045 + C42889 * C1717 +
                      C42886 * C1722 + C42888 * C1171 + C42885 * C1181) *
                         C2635 +
                     (C42890 * C6039 + C42887 * C6041 + C42889 * C1713 +
                      C42886 * C1716 + C42888 * C1163 + C42885 * C1172) *
                         C2641) +
                    (C42888 * C1169 + C42885 * C1180 + C42889 * C1719 +
                     C42886 * C1723 + C42890 * C6044 + C42887 * C6046) *
                        C47993) *
                       C48010 * C48235 * C48047 * C48357)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C2533 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C48392 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C2534 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C48385 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C2535 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C48372 -
                    (C42890 * C493 + C42887 * C511 + C42889 * C488 +
                     C42886 * C501 + C42888 * C122 + C42885 * C132) *
                        C2536 -
                    (C42890 * C512 + C42887 * C523 + C42889 * C502 +
                     C42886 * C518 + C42888 * C133 + C42885 * C143) *
                        C48351) *
                       C48010 * C48235 * C48047 * C2531 +
                   ((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                     C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                        C2534 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C48392 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C2533) +
                    (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                     C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                        C48385 -
                    (C42890 * C1295 + C42887 * C1305 + C42889 * C937 +
                     C42886 * C944 + C42888 * C298 + C42885 * C310) *
                        C2535 -
                    (C42890 * C1304 + C42887 * C1322 + C42889 * C945 +
                     C42886 * C952 + C42888 * C311 + C42885 * C328) *
                        C48372 +
                    (C42888 * C299 + C42885 * C312 + C42889 * C938 +
                     C42886 * C946 + C42890 * C2185 + C42887 * C2186) *
                        C2536 +
                    (C42888 * C313 + C42885 * C329 + C42889 * C947 +
                     C42886 * C953 + C42890 * C2187 + C42887 * C2188) *
                        C48351) *
                       C48010 * C48235 * C48047 * C48094)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C2641 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C2635 -
                     (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                      C42886 * C495 + C42888 * C120 + C42885 * C128) *
                         C2642 -
                     (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                      C42886 * C516 + C42888 * C129 + C42885 * C141) *
                         C47993) *
                        C48010 * C48235 * C48387 +
                    ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                      C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                         C2642 -
                     ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                       C42886 * C520 + C42888 * C496 + C42885 * C515) *
                          C2635 +
                      (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                       C42886 * C505 + C42888 * C486 + C42885 * C497) *
                          C2641) +
                     (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                      C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                         C47993) *
                        C48010 * C48235 * C48376 +
                    ((C42888 * C490 + C42885 * C505 + C42889 * C2017 +
                      C42886 * C2026 + C42890 * C2018 + C42887 * C2027) *
                         C2641 +
                     (C42888 * C506 + C42885 * C520 + C42889 * C2025 +
                      C42886 * C2035 + C42890 * C2028 + C42887 * C2036) *
                         C2635 -
                     (C42890 * C2019 + C42887 * C2029 + C42889 * C2016 +
                      C42886 * C2024 + C42888 * C491 + C42885 * C507) *
                         C2642 -
                     (C42890 * C2030 + C42887 * C2037 + C42889 * C2023 +
                      C42886 * C2034 + C42888 * C508 + C42885 * C521) *
                         C47993) *
                        C48010 * C48235 * C48350) *
                       C2531 +
                   (((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                      C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                         C2642 -
                     ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                       C42886 * C950 + C42888 * C307 + C42885 * C326) *
                          C2635 +
                      (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                       C42886 * C940 + C42888 * C297 + C42885 * C308) *
                          C2641) +
                     (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                      C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                         C47993) *
                        C48010 * C48235 * C48387 +
                    ((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C2641 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C2635 -
                     (C42890 * C2418 + C42887 * C2422 + C42889 * C1296 +
                      C42886 * C1307 + C42888 * C936 + C42885 * C942) *
                         C2642 -
                     (C42890 * C2423 + C42887 * C2427 + C42889 * C1306 +
                      C42886 * C1323 + C42888 * C943 + C42885 * C951) *
                         C47993) *
                        C48010 * C48235 * C48376 +
                    ((C42888 * C1296 + C42885 * C1307 + C42889 * C2418 +
                      C42886 * C2422 + C42890 * C6980 + C42887 * C6983) *
                         C2642 -
                     ((C42890 * C6982 + C42887 * C6985 + C42889 * C2421 +
                       C42886 * C2426 + C42888 * C1308 + C42885 * C1324) *
                          C2635 +
                      (C42890 * C6979 + C42887 * C6981 + C42889 * C2417 +
                       C42886 * C2420 + C42888 * C1297 + C42885 * C1309) *
                          C2641) +
                     (C42888 * C1306 + C42885 * C1323 + C42889 * C2423 +
                      C42886 * C2427 + C42890 * C6984 + C42887 * C6986) *
                         C47993) *
                        C48010 * C48235 * C48350) *
                       C48094)) /
                     (p * q * std::sqrt(p + q));
    d2ee[203] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C47011 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C47988 -
                     (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                      C42886 * C495 + C42888 * C120 + C42885 * C128) *
                         C47007 -
                     (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                      C42886 * C516 + C42888 * C129 + C42885 * C141) *
                         C47996 +
                     (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                      C42886 * C499 + C42890 * C492 + C42887 * C509) *
                         C47017 +
                     (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                      C42886 * C517 + C42890 * C510 + C42887 * C522) *
                         C2901) *
                        C48010 * C48235 * C48316 +
                    ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                      C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                         C47007 -
                     ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                       C42886 * C520 + C42888 * C496 + C42885 * C515) *
                          C47988 +
                      (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                       C42886 * C505 + C42888 * C486 + C42885 * C497) *
                          C47011) +
                     (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                      C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                         C47996 -
                     (C42890 * C2015 + C42887 * C2022 + C42889 * C492 +
                      C42886 * C509 + C42888 * C487 + C42885 * C499) *
                         C47017 -
                     (C42890 * C2021 + C42887 * C2033 + C42889 * C510 +
                      C42886 * C522 + C42888 * C500 + C42885 * C517) *
                         C2901) *
                        C48010 * C48235 * C48134) *
                       C2531 +
                   (((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                      C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                         C47007 -
                     ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                       C42886 * C950 + C42888 * C307 + C42885 * C326) *
                          C47988 +
                      (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                       C42886 * C940 + C42888 * C297 + C42885 * C308) *
                          C47011) +
                     (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                      C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                         C47996 -
                     (C42890 * C1295 + C42887 * C1305 + C42889 * C937 +
                      C42886 * C944 + C42888 * C298 + C42885 * C310) *
                         C47017 -
                     (C42890 * C1304 + C42887 * C1322 + C42889 * C945 +
                      C42886 * C952 + C42888 * C311 + C42885 * C328) *
                         C2901) *
                        C48010 * C48235 * C48316 +
                    ((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C47011 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C47988 -
                     (C42890 * C2418 + C42887 * C2422 + C42889 * C1296 +
                      C42886 * C1307 + C42888 * C936 + C42885 * C942) *
                         C47007 -
                     (C42890 * C2423 + C42887 * C2427 + C42889 * C1306 +
                      C42886 * C1323 + C42888 * C943 + C42885 * C951) *
                         C47996 +
                     (C42888 * C937 + C42885 * C944 + C42889 * C1295 +
                      C42886 * C1305 + C42890 * C2419 + C42887 * C2424) *
                         C47017 +
                     (C42888 * C945 + C42885 * C952 + C42889 * C1304 +
                      C42886 * C1322 + C42890 * C2425 + C42887 * C2428) *
                         C2901) *
                        C48010 * C48235 * C48134) *
                       C48094)) /
                 (p * q * std::sqrt(p + q));
    d2ee[204] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C2533 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C48392 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C2534 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C48385 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C2535 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C48372 -
                    (C42890 * C493 + C42887 * C511 + C42889 * C488 +
                     C42886 * C501 + C42888 * C122 + C42885 * C132) *
                        C2536 -
                    (C42890 * C512 + C42887 * C523 + C42889 * C502 +
                     C42886 * C518 + C42888 * C133 + C42885 * C143) *
                        C48351) *
                       C48010 * C48235 * C48047 * C2531 +
                   ((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                     C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                        C2534 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C48392 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C2533) +
                    (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                     C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                        C48385 -
                    (C42890 * C1295 + C42887 * C1305 + C42889 * C937 +
                     C42886 * C944 + C42888 * C298 + C42885 * C310) *
                        C2535 -
                    (C42890 * C1304 + C42887 * C1322 + C42889 * C945 +
                     C42886 * C952 + C42888 * C311 + C42885 * C328) *
                        C48372 +
                    (C42888 * C299 + C42885 * C312 + C42889 * C938 +
                     C42886 * C946 + C42890 * C2185 + C42887 * C2186) *
                        C2536 +
                    (C42888 * C313 + C42885 * C329 + C42889 * C947 +
                     C42886 * C953 + C42890 * C2187 + C42887 * C2188) *
                        C48351) *
                       C48010 * C48235 * C48047 * C48094)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C2641 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C2635 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C2642 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C47993) *
                       C48010 * C48235 * C48047 * C48393 +
                   ((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                     C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                        C2642 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C2635 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C2641) +
                    (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                     C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                        C47993) *
                       C48010 * C48235 * C48047 * C48389 +
                   ((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                     C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                        C2641 +
                    (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                     C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                        C2635 -
                    (C42890 * C1302 + C42887 * C1318 + C42889 * C1299 +
                     C42886 * C1313 + C42888 * C302 + C42885 * C318) *
                        C2642 -
                    (C42890 * C1319 + C42887 * C1329 + C42889 * C1312 +
                     C42886 * C1326 + C42888 * C319 + C42885 * C332) *
                        C47993) *
                       C48010 * C48235 * C48047 * C48379 +
                   ((C42888 * C1162 + C42885 * C1170 + C42889 * C1714 +
                     C42886 * C1718 + C42890 * C6040 + C42887 * C6043) *
                        C2642 -
                    ((C42890 * C6042 + C42887 * C6045 + C42889 * C1717 +
                      C42886 * C1722 + C42888 * C1171 + C42885 * C1181) *
                         C2635 +
                     (C42890 * C6039 + C42887 * C6041 + C42889 * C1713 +
                      C42886 * C1716 + C42888 * C1163 + C42885 * C1172) *
                         C2641) +
                    (C42888 * C1169 + C42885 * C1180 + C42889 * C1719 +
                     C42886 * C1723 + C42890 * C6044 + C42887 * C6046) *
                        C47993) *
                       C48010 * C48235 * C48047 * C48357)) /
                     (p * q * std::sqrt(p + q));
    d2ee[205] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C47001 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C48298 -
                     (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                      C42886 * C495 + C42888 * C120 + C42885 * C128) *
                         C46982 -
                     (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                      C42886 * C516 + C42888 * C129 + C42885 * C141) *
                         C47993) *
                        C48010 * C48235 * C3298 +
                    ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                      C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                         C46982 -
                     ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                       C42886 * C520 + C42888 * C496 + C42885 * C515) *
                          C48298 +
                      (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                       C42886 * C505 + C42888 * C486 + C42885 * C497) *
                          C47001) +
                     (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                      C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                         C47993) *
                        C48010 * C48235 * C48134) *
                       C48090 +
                   (((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                      C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                         C46982 -
                     ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                       C42886 * C950 + C42888 * C307 + C42885 * C326) *
                          C48298 +
                      (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                       C42886 * C940 + C42888 * C297 + C42885 * C308) *
                          C47001) +
                     (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                      C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                         C47993) *
                        C48010 * C48235 * C3298 +
                    ((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C47001 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C48298 -
                     (C42890 * C2418 + C42887 * C2422 + C42889 * C1296 +
                      C42886 * C1307 + C42888 * C936 + C42885 * C942) *
                         C46982 -
                     (C42890 * C2423 + C42887 * C2427 + C42889 * C1306 +
                      C42886 * C1323 + C42888 * C943 + C42885 * C951) *
                         C47993) *
                        C48010 * C48235 * C48134) *
                       C48097 +
                   (((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                      C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                         C47001 +
                     (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                      C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                         C48298 -
                     (C42890 * C1302 + C42887 * C1318 + C42889 * C1299 +
                      C42886 * C1313 + C42888 * C302 + C42885 * C318) *
                         C46982 -
                     (C42890 * C1319 + C42887 * C1329 + C42889 * C1312 +
                      C42886 * C1326 + C42888 * C319 + C42885 * C332) *
                         C47993) *
                        C48010 * C48235 * C3298 +
                    ((C42888 * C1299 + C42885 * C1313 + C42889 * C1302 +
                      C42886 * C1318 + C42890 * C7456 + C42887 * C7459) *
                         C46982 -
                     ((C42890 * C7458 + C42887 * C7461 + C42889 * C1317 +
                       C42886 * C1328 + C42888 * C1314 + C42885 * C1327) *
                          C48298 +
                      (C42890 * C7455 + C42887 * C7457 + C42889 * C1301 +
                       C42886 * C1316 + C42888 * C1300 + C42885 * C1315) *
                          C47001) +
                     (C42888 * C1312 + C42885 * C1326 + C42889 * C1319 +
                      C42886 * C1329 + C42890 * C7460 + C42887 * C7462) *
                         C47993) *
                        C48010 * C48235 * C48134) *
                       C2904)) /
                 (p * q * std::sqrt(p + q));
    d2ee[206] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C1160 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C47983) *
                        C48010 * C48235 * C48130 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C47983 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C1160) *
                        C48010 * C48235 * C48137 +
                    ((C42888 * C490 + C42885 * C505 + C42889 * C2017 +
                      C42886 * C2026 + C42890 * C2018 + C42887 * C2027) *
                         C1160 +
                     (C42888 * C506 + C42885 * C520 + C42889 * C2025 +
                      C42886 * C2035 + C42890 * C2028 + C42887 * C2036) *
                         C47983) *
                        C48010 * C48235 * C3806) *
                       C48090 +
                   (((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C1160 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C47983) *
                        C48010 * C48235 * C48137 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C47983 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C1160) *
                        C48010 * C48235 * C48130 -
                    ((C42890 * C6982 + C42887 * C6985 + C42889 * C2421 +
                      C42886 * C2426 + C42888 * C1308 + C42885 * C1324) *
                         C47983 +
                     (C42890 * C6979 + C42887 * C6981 + C42889 * C2417 +
                      C42886 * C2420 + C42888 * C1297 + C42885 * C1309) *
                         C1160) *
                        C48010 * C48235 * C3806) *
                       C48097 +
                   (((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                      C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                         C1160 +
                     (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                      C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                         C47983) *
                        C48010 * C48235 * C48130 -
                    ((C42890 * C7458 + C42887 * C7461 + C42889 * C1317 +
                      C42886 * C1328 + C42888 * C1314 + C42885 * C1327) *
                         C47983 +
                     (C42890 * C7455 + C42887 * C7457 + C42889 * C1301 +
                      C42886 * C1316 + C42888 * C1300 + C42885 * C1315) *
                         C1160) *
                        C48010 * C48235 * C48137 +
                    ((C42888 * C1301 + C42885 * C1316 + C42889 * C7455 +
                      C42886 * C7457 + C42890 * C23341 + C42887 * C23342) *
                         C1160 +
                     (C42888 * C1317 + C42885 * C1328 + C42889 * C7458 +
                      C42886 * C7461 + C42890 * C23343 + C42887 * C23344) *
                         C47983) *
                        C48010 * C48235 * C3806) *
                       C2904)) /
                 (p * q * std::sqrt(p + q));
    d2ee[207] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C1160 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C47983) *
                        C48010 * C48235 * C3298 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C47983 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C1160) *
                        C48010 * C48235 * C48134) *
                       C48393 +
                   (((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C1160 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C47983) *
                        C48010 * C48235 * C48134 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C47983 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C1160) *
                        C48010 * C48235 * C3298) *
                       C48389 +
                   (((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                      C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                         C1160 +
                     (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                      C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                         C47983) *
                        C48010 * C48235 * C3298 -
                    ((C42890 * C7458 + C42887 * C7461 + C42889 * C1317 +
                      C42886 * C1328 + C42888 * C1314 + C42885 * C1327) *
                         C47983 +
                     (C42890 * C7455 + C42887 * C7457 + C42889 * C1301 +
                      C42886 * C1316 + C42888 * C1300 + C42885 * C1315) *
                         C1160) *
                        C48010 * C48235 * C48134) *
                       C48379 +
                   (((C42888 * C1713 + C42885 * C1716 + C42889 * C6039 +
                      C42886 * C6041 + C42890 * C23691 + C42887 * C23692) *
                         C1160 +
                     (C42888 * C1717 + C42885 * C1722 + C42889 * C6042 +
                      C42886 * C6045 + C42890 * C23693 + C42887 * C23694) *
                         C47983) *
                        C48010 * C48235 * C48134 -
                    ((C42890 * C6042 + C42887 * C6045 + C42889 * C1717 +
                      C42886 * C1722 + C42888 * C1171 + C42885 * C1181) *
                         C47983 +
                     (C42890 * C6039 + C42887 * C6041 + C42889 * C1713 +
                      C42886 * C1716 + C42888 * C1163 + C42885 * C1172) *
                         C1160) *
                        C48010 * C48235 * C3298) *
                       C48357)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C1089 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C48383 -
                     (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                      C42886 * C495 + C42888 * C120 + C42885 * C128) *
                         C1090 -
                     (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                      C42886 * C516 + C42888 * C129 + C42885 * C141) *
                         C48370 +
                     (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                      C42886 * C499 + C42890 * C492 + C42887 * C509) *
                         C1091 +
                     (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                      C42886 * C517 + C42890 * C510 + C42887 * C522) *
                         C48339) *
                        C48010 * C48235 * C3298 +
                    ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                      C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                         C1090 -
                     ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                       C42886 * C520 + C42888 * C496 + C42885 * C515) *
                          C48383 +
                      (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                       C42886 * C505 + C42888 * C486 + C42885 * C497) *
                          C1089) +
                     (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                      C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                         C48370 -
                     (C42890 * C2015 + C42887 * C2022 + C42889 * C492 +
                      C42886 * C509 + C42888 * C487 + C42885 * C499) *
                         C1091 -
                     (C42890 * C2021 + C42887 * C2033 + C42889 * C510 +
                      C42886 * C522 + C42888 * C500 + C42885 * C517) *
                         C48339) *
                        C48010 * C48235 * C48134) *
                       C2531 +
                   (((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                      C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                         C1090 -
                     ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                       C42886 * C950 + C42888 * C307 + C42885 * C326) *
                          C48383 +
                      (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                       C42886 * C940 + C42888 * C297 + C42885 * C308) *
                          C1089) +
                     (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                      C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                         C48370 -
                     (C42890 * C1295 + C42887 * C1305 + C42889 * C937 +
                      C42886 * C944 + C42888 * C298 + C42885 * C310) *
                         C1091 -
                     (C42890 * C1304 + C42887 * C1322 + C42889 * C945 +
                      C42886 * C952 + C42888 * C311 + C42885 * C328) *
                         C48339) *
                        C48010 * C48235 * C3298 +
                    ((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C1089 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C48383 -
                     (C42890 * C2418 + C42887 * C2422 + C42889 * C1296 +
                      C42886 * C1307 + C42888 * C936 + C42885 * C942) *
                         C1090 -
                     (C42890 * C2423 + C42887 * C2427 + C42889 * C1306 +
                      C42886 * C1323 + C42888 * C943 + C42885 * C951) *
                         C48370 +
                     (C42888 * C937 + C42885 * C944 + C42889 * C1295 +
                      C42886 * C1305 + C42890 * C2419 + C42887 * C2424) *
                         C1091 +
                     (C42888 * C945 + C42885 * C952 + C42889 * C1304 +
                      C42886 * C1322 + C42890 * C2425 + C42887 * C2428) *
                         C48339) *
                        C48010 * C48235 * C48134) *
                       C48094)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C1160 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C47983) *
                        C48010 * C48235 * C48394 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C47983 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C1160) *
                        C48010 * C48235 * C48391 +
                    ((C42888 * C490 + C42885 * C505 + C42889 * C2017 +
                      C42886 * C2026 + C42890 * C2018 + C42887 * C2027) *
                         C1160 +
                     (C42888 * C506 + C42885 * C520 + C42889 * C2025 +
                      C42886 * C2035 + C42890 * C2028 + C42887 * C2036) *
                         C47983) *
                        C48010 * C48235 * C48382 -
                    ((C42890 * C12802 + C42887 * C12805 + C42889 * C2028 +
                      C42886 * C2036 + C42888 * C2025 + C42885 * C2035) *
                         C47983 +
                     (C42890 * C12799 + C42887 * C12801 + C42889 * C2018 +
                      C42886 * C2027 + C42888 * C2017 + C42885 * C2026) *
                         C1160) *
                        C48010 * C48235 * C48363) *
                       C2531 +
                   (((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C1160 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C47983) *
                        C48010 * C48235 * C48391 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C47983 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C1160) *
                        C48010 * C48235 * C48394 -
                    ((C42890 * C6982 + C42887 * C6985 + C42889 * C2421 +
                      C42886 * C2426 + C42888 * C1308 + C42885 * C1324) *
                         C47983 +
                     (C42890 * C6979 + C42887 * C6981 + C42889 * C2417 +
                      C42886 * C2420 + C42888 * C1297 + C42885 * C1309) *
                         C1160) *
                        C48010 * C48235 * C48382 +
                    ((C42888 * C2417 + C42885 * C2420 + C42889 * C6979 +
                      C42886 * C6981 + C42890 * C28129 + C42887 * C28130) *
                         C1160 +
                     (C42888 * C2421 + C42885 * C2426 + C42889 * C6982 +
                      C42886 * C6985 + C42890 * C28131 + C42887 * C28132) *
                         C47983) *
                        C48010 * C48235 * C48363) *
                       C48094)) /
                     (p * q * std::sqrt(p + q));
    d2ee[208] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C47001 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C48298 -
                     (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                      C42886 * C495 + C42888 * C120 + C42885 * C128) *
                         C46982 -
                     (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                      C42886 * C516 + C42888 * C129 + C42885 * C141) *
                         C47993) *
                        C48010 * C48235 * C48130 +
                    ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                      C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                         C46982 -
                     ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                       C42886 * C520 + C42888 * C496 + C42885 * C515) *
                          C48298 +
                      (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                       C42886 * C505 + C42888 * C486 + C42885 * C497) *
                          C47001) +
                     (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                      C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                         C47993) *
                        C48010 * C48235 * C48137 +
                    ((C42888 * C490 + C42885 * C505 + C42889 * C2017 +
                      C42886 * C2026 + C42890 * C2018 + C42887 * C2027) *
                         C47001 +
                     (C42888 * C506 + C42885 * C520 + C42889 * C2025 +
                      C42886 * C2035 + C42890 * C2028 + C42887 * C2036) *
                         C48298 -
                     (C42890 * C2019 + C42887 * C2029 + C42889 * C2016 +
                      C42886 * C2024 + C42888 * C491 + C42885 * C507) *
                         C46982 -
                     (C42890 * C2030 + C42887 * C2037 + C42889 * C2023 +
                      C42886 * C2034 + C42888 * C508 + C42885 * C521) *
                         C47993) *
                        C48010 * C48235 * C3806) *
                       C2531 +
                   (((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                      C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                         C46982 -
                     ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                       C42886 * C950 + C42888 * C307 + C42885 * C326) *
                          C48298 +
                      (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                       C42886 * C940 + C42888 * C297 + C42885 * C308) *
                          C47001) +
                     (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                      C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                         C47993) *
                        C48010 * C48235 * C48130 +
                    ((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C47001 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C48298 -
                     (C42890 * C2418 + C42887 * C2422 + C42889 * C1296 +
                      C42886 * C1307 + C42888 * C936 + C42885 * C942) *
                         C46982 -
                     (C42890 * C2423 + C42887 * C2427 + C42889 * C1306 +
                      C42886 * C1323 + C42888 * C943 + C42885 * C951) *
                         C47993) *
                        C48010 * C48235 * C48137 +
                    ((C42888 * C1296 + C42885 * C1307 + C42889 * C2418 +
                      C42886 * C2422 + C42890 * C6980 + C42887 * C6983) *
                         C46982 -
                     ((C42890 * C6982 + C42887 * C6985 + C42889 * C2421 +
                       C42886 * C2426 + C42888 * C1308 + C42885 * C1324) *
                          C48298 +
                      (C42890 * C6979 + C42887 * C6981 + C42889 * C2417 +
                       C42886 * C2420 + C42888 * C1297 + C42885 * C1309) *
                          C47001) +
                     (C42888 * C1306 + C42885 * C1323 + C42889 * C2423 +
                      C42886 * C2427 + C42890 * C6984 + C42887 * C6986) *
                         C47993) *
                        C48010 * C48235 * C3806) *
                       C48094)) /
                 (p * q * std::sqrt(p + q));
    d2ee[209] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C1089 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C48383 -
                     (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                      C42886 * C495 + C42888 * C120 + C42885 * C128) *
                         C1090 -
                     (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                      C42886 * C516 + C42888 * C129 + C42885 * C141) *
                         C48370 +
                     (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                      C42886 * C499 + C42890 * C492 + C42887 * C509) *
                         C1091 +
                     (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                      C42886 * C517 + C42890 * C510 + C42887 * C522) *
                         C48339) *
                        C48010 * C48235 * C3298 +
                    ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                      C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                         C1090 -
                     ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                       C42886 * C520 + C42888 * C496 + C42885 * C515) *
                          C48383 +
                      (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                       C42886 * C505 + C42888 * C486 + C42885 * C497) *
                          C1089) +
                     (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                      C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                         C48370 -
                     (C42890 * C2015 + C42887 * C2022 + C42889 * C492 +
                      C42886 * C509 + C42888 * C487 + C42885 * C499) *
                         C1091 -
                     (C42890 * C2021 + C42887 * C2033 + C42889 * C510 +
                      C42886 * C522 + C42888 * C500 + C42885 * C517) *
                         C48339) *
                        C48010 * C48235 * C48134) *
                       C2531 +
                   (((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                      C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                         C1090 -
                     ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                       C42886 * C950 + C42888 * C307 + C42885 * C326) *
                          C48383 +
                      (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                       C42886 * C940 + C42888 * C297 + C42885 * C308) *
                          C1089) +
                     (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                      C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                         C48370 -
                     (C42890 * C1295 + C42887 * C1305 + C42889 * C937 +
                      C42886 * C944 + C42888 * C298 + C42885 * C310) *
                         C1091 -
                     (C42890 * C1304 + C42887 * C1322 + C42889 * C945 +
                      C42886 * C952 + C42888 * C311 + C42885 * C328) *
                         C48339) *
                        C48010 * C48235 * C3298 +
                    ((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C1089 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C48383 -
                     (C42890 * C2418 + C42887 * C2422 + C42889 * C1296 +
                      C42886 * C1307 + C42888 * C936 + C42885 * C942) *
                         C1090 -
                     (C42890 * C2423 + C42887 * C2427 + C42889 * C1306 +
                      C42886 * C1323 + C42888 * C943 + C42885 * C951) *
                         C48370 +
                     (C42888 * C937 + C42885 * C944 + C42889 * C1295 +
                      C42886 * C1305 + C42890 * C2419 + C42887 * C2424) *
                         C1091 +
                     (C42888 * C945 + C42885 * C952 + C42889 * C1304 +
                      C42886 * C1322 + C42890 * C2425 + C42887 * C2428) *
                         C48339) *
                        C48010 * C48235 * C48134) *
                       C48094)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C1160 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C47983) *
                        C48010 * C48235 * C3298 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C47983 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C1160) *
                        C48010 * C48235 * C48134) *
                       C48393 +
                   (((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C1160 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C47983) *
                        C48010 * C48235 * C48134 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C47983 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C1160) *
                        C48010 * C48235 * C3298) *
                       C48389 +
                   (((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                      C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                         C1160 +
                     (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                      C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                         C47983) *
                        C48010 * C48235 * C3298 -
                    ((C42890 * C7458 + C42887 * C7461 + C42889 * C1317 +
                      C42886 * C1328 + C42888 * C1314 + C42885 * C1327) *
                         C47983 +
                     (C42890 * C7455 + C42887 * C7457 + C42889 * C1301 +
                      C42886 * C1316 + C42888 * C1300 + C42885 * C1315) *
                         C1160) *
                        C48010 * C48235 * C48134) *
                       C48379 +
                   (((C42888 * C1713 + C42885 * C1716 + C42889 * C6039 +
                      C42886 * C6041 + C42890 * C23691 + C42887 * C23692) *
                         C1160 +
                     (C42888 * C1717 + C42885 * C1722 + C42889 * C6042 +
                      C42886 * C6045 + C42890 * C23693 + C42887 * C23694) *
                         C47983) *
                        C48010 * C48235 * C48134 -
                    ((C42890 * C6042 + C42887 * C6045 + C42889 * C1717 +
                      C42886 * C1722 + C42888 * C1171 + C42885 * C1181) *
                         C47983 +
                     (C42890 * C6039 + C42887 * C6041 + C42889 * C1713 +
                      C42886 * C1716 + C42888 * C1163 + C42885 * C1172) *
                         C1160) *
                        C48010 * C48235 * C3298) *
                       C48357)) /
                     (p * q * std::sqrt(p + q));
    d2ee[210] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C47001 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C48298 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C46982 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C47993) *
                       C48010 * C48235 * C48047 * C1431 +
                   ((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                     C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                        C46982 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C48298 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C47001) +
                    (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                     C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                        C47993) *
                       C48010 * C48235 * C48047 * C1432 +
                   ((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                     C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                        C47001 +
                    (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                     C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                        C48298 -
                    (C42890 * C1302 + C42887 * C1318 + C42889 * C1299 +
                     C42886 * C1313 + C42888 * C302 + C42885 * C318) *
                        C46982 -
                    (C42890 * C1319 + C42887 * C1329 + C42889 * C1312 +
                     C42886 * C1326 + C42888 * C319 + C42885 * C332) *
                        C47993) *
                       C48010 * C48235 * C48047 * C1433 +
                   ((C42888 * C1162 + C42885 * C1170 + C42889 * C1714 +
                     C42886 * C1718 + C42890 * C6040 + C42887 * C6043) *
                        C46982 -
                    ((C42890 * C6042 + C42887 * C6045 + C42889 * C1717 +
                      C42886 * C1722 + C42888 * C1171 + C42885 * C1181) *
                         C48298 +
                     (C42890 * C6039 + C42887 * C6041 + C42889 * C1713 +
                      C42886 * C1716 + C42888 * C1163 + C42885 * C1172) *
                         C47001) +
                    (C42888 * C1169 + C42885 * C1180 + C42889 * C1719 +
                     C42886 * C1723 + C42890 * C6044 + C42887 * C6046) *
                        C47993) *
                       C48010 * C48235 * C48047 * C48357)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C665 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C659 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C666 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C660 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C667 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C661 -
                    (C42890 * C493 + C42887 * C511 + C42889 * C488 +
                     C42886 * C501 + C42888 * C122 + C42885 * C132) *
                        C668 -
                    (C42890 * C512 + C42887 * C523 + C42889 * C502 +
                     C42886 * C518 + C42888 * C133 + C42885 * C143) *
                        C48351) *
                       C48010 * C48235 * C48047 * C48315 +
                   ((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                     C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                        C666 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C659 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C665) +
                    (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                     C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                        C660 -
                    (C42890 * C1295 + C42887 * C1305 + C42889 * C937 +
                     C42886 * C944 + C42888 * C298 + C42885 * C310) *
                        C667 -
                    (C42890 * C1304 + C42887 * C1322 + C42889 * C945 +
                     C42886 * C952 + C42888 * C311 + C42885 * C328) *
                        C661 +
                    (C42888 * C299 + C42885 * C312 + C42889 * C938 +
                     C42886 * C946 + C42890 * C2185 + C42887 * C2186) *
                        C668 +
                    (C42888 * C313 + C42885 * C329 + C42889 * C947 +
                     C42886 * C953 + C42890 * C2187 + C42887 * C2188) *
                        C48351) *
                       C48010 * C48235 * C48047 * C48094)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C47001 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C48298 -
                     (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                      C42886 * C495 + C42888 * C120 + C42885 * C128) *
                         C46982 -
                     (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                      C42886 * C516 + C42888 * C129 + C42885 * C141) *
                         C47993) *
                        C48010 * C48235 * C1835 +
                    ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                      C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                         C46982 -
                     ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                       C42886 * C520 + C42888 * C496 + C42885 * C515) *
                          C48298 +
                      (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                       C42886 * C505 + C42888 * C486 + C42885 * C497) *
                          C47001) +
                     (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                      C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                         C47993) *
                        C48010 * C48235 * C1836 +
                    ((C42888 * C490 + C42885 * C505 + C42889 * C2017 +
                      C42886 * C2026 + C42890 * C2018 + C42887 * C2027) *
                         C47001 +
                     (C42888 * C506 + C42885 * C520 + C42889 * C2025 +
                      C42886 * C2035 + C42890 * C2028 + C42887 * C2036) *
                         C48298 -
                     (C42890 * C2019 + C42887 * C2029 + C42889 * C2016 +
                      C42886 * C2024 + C42888 * C491 + C42885 * C507) *
                         C46982 -
                     (C42890 * C2030 + C42887 * C2037 + C42889 * C2023 +
                      C42886 * C2034 + C42888 * C508 + C42885 * C521) *
                         C47993) *
                        C48010 * C48235 * C48350) *
                       C48315 +
                   (((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                      C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                         C46982 -
                     ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                       C42886 * C950 + C42888 * C307 + C42885 * C326) *
                          C48298 +
                      (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                       C42886 * C940 + C42888 * C297 + C42885 * C308) *
                          C47001) +
                     (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                      C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                         C47993) *
                        C48010 * C48235 * C1835 +
                    ((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C47001 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C48298 -
                     (C42890 * C2418 + C42887 * C2422 + C42889 * C1296 +
                      C42886 * C1307 + C42888 * C936 + C42885 * C942) *
                         C46982 -
                     (C42890 * C2423 + C42887 * C2427 + C42889 * C1306 +
                      C42886 * C1323 + C42888 * C943 + C42885 * C951) *
                         C47993) *
                        C48010 * C48235 * C1836 +
                    ((C42888 * C1296 + C42885 * C1307 + C42889 * C2418 +
                      C42886 * C2422 + C42890 * C6980 + C42887 * C6983) *
                         C46982 -
                     ((C42890 * C6982 + C42887 * C6985 + C42889 * C2421 +
                       C42886 * C2426 + C42888 * C1308 + C42885 * C1324) *
                          C48298 +
                      (C42890 * C6979 + C42887 * C6981 + C42889 * C2417 +
                       C42886 * C2420 + C42888 * C1297 + C42885 * C1309) *
                          C47001) +
                     (C42888 * C1306 + C42885 * C1323 + C42889 * C2423 +
                      C42886 * C2427 + C42890 * C6984 + C42887 * C6986) *
                         C47993) *
                        C48010 * C48235 * C48350) *
                       C48094)) /
                     (p * q * std::sqrt(p + q));
    d2ee[211] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C1160 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C47983) *
                        C48010 * C48235 * C48316 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C47983 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C1160) *
                        C48010 * C48235 * C48134) *
                       C1431 +
                   (((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C1160 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C47983) *
                        C48010 * C48235 * C48134 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C47983 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C1160) *
                        C48010 * C48235 * C48316) *
                       C1432 +
                   (((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                      C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                         C1160 +
                     (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                      C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                         C47983) *
                        C48010 * C48235 * C48316 -
                    ((C42890 * C7458 + C42887 * C7461 + C42889 * C1317 +
                      C42886 * C1328 + C42888 * C1314 + C42885 * C1327) *
                         C47983 +
                     (C42890 * C7455 + C42887 * C7457 + C42889 * C1301 +
                      C42886 * C1316 + C42888 * C1300 + C42885 * C1315) *
                         C1160) *
                        C48010 * C48235 * C48134) *
                       C1433 +
                   (((C42888 * C1713 + C42885 * C1716 + C42889 * C6039 +
                      C42886 * C6041 + C42890 * C23691 + C42887 * C23692) *
                         C1160 +
                     (C42888 * C1717 + C42885 * C1722 + C42889 * C6042 +
                      C42886 * C6045 + C42890 * C23693 + C42887 * C23694) *
                         C47983) *
                        C48010 * C48235 * C48134 -
                    ((C42890 * C6042 + C42887 * C6045 + C42889 * C1717 +
                      C42886 * C1722 + C42888 * C1171 + C42885 * C1181) *
                         C47983 +
                     (C42890 * C6039 + C42887 * C6041 + C42889 * C1713 +
                      C42886 * C1716 + C42888 * C1163 + C42885 * C1172) *
                         C1160) *
                        C48010 * C48235 * C48316) *
                       C48357)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C293 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C287 -
                     (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                      C42886 * C495 + C42888 * C120 + C42885 * C128) *
                         C294 -
                     (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                      C42886 * C516 + C42888 * C129 + C42885 * C141) *
                         C288 +
                     (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                      C42886 * C499 + C42890 * C492 + C42887 * C509) *
                         C295 +
                     (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                      C42886 * C517 + C42890 * C510 + C42887 * C522) *
                         C48339) *
                        C48010 * C48235 * C48316 +
                    ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                      C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                         C294 -
                     ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                       C42886 * C520 + C42888 * C496 + C42885 * C515) *
                          C287 +
                      (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                       C42886 * C505 + C42888 * C486 + C42885 * C497) *
                          C293) +
                     (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                      C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                         C288 -
                     (C42890 * C2015 + C42887 * C2022 + C42889 * C492 +
                      C42886 * C509 + C42888 * C487 + C42885 * C499) *
                         C295 -
                     (C42890 * C2021 + C42887 * C2033 + C42889 * C510 +
                      C42886 * C522 + C42888 * C500 + C42885 * C517) *
                         C48339) *
                        C48010 * C48235 * C48134) *
                       C48315 +
                   (((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                      C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                         C294 -
                     ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                       C42886 * C950 + C42888 * C307 + C42885 * C326) *
                          C287 +
                      (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                       C42886 * C940 + C42888 * C297 + C42885 * C308) *
                          C293) +
                     (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                      C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                         C288 -
                     (C42890 * C1295 + C42887 * C1305 + C42889 * C937 +
                      C42886 * C944 + C42888 * C298 + C42885 * C310) *
                         C295 -
                     (C42890 * C1304 + C42887 * C1322 + C42889 * C945 +
                      C42886 * C952 + C42888 * C311 + C42885 * C328) *
                         C48339) *
                        C48010 * C48235 * C48316 +
                    ((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C293 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C287 -
                     (C42890 * C2418 + C42887 * C2422 + C42889 * C1296 +
                      C42886 * C1307 + C42888 * C936 + C42885 * C942) *
                         C294 -
                     (C42890 * C2423 + C42887 * C2427 + C42889 * C1306 +
                      C42886 * C1323 + C42888 * C943 + C42885 * C951) *
                         C288 +
                     (C42888 * C937 + C42885 * C944 + C42889 * C1295 +
                      C42886 * C1305 + C42890 * C2419 + C42887 * C2424) *
                         C295 +
                     (C42888 * C945 + C42885 * C952 + C42889 * C1304 +
                      C42886 * C1322 + C42890 * C2425 + C42887 * C2428) *
                         C48339) *
                        C48010 * C48235 * C48134) *
                       C48094)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C1160 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C47983) *
                        C48010 * C48235 * C2299 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C47983 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C1160) *
                        C48010 * C48235 * C2300 +
                    ((C42888 * C490 + C42885 * C505 + C42889 * C2017 +
                      C42886 * C2026 + C42890 * C2018 + C42887 * C2027) *
                         C1160 +
                     (C42888 * C506 + C42885 * C520 + C42889 * C2025 +
                      C42886 * C2035 + C42890 * C2028 + C42887 * C2036) *
                         C47983) *
                        C48010 * C48235 * C2301 -
                    ((C42890 * C12802 + C42887 * C12805 + C42889 * C2028 +
                      C42886 * C2036 + C42888 * C2025 + C42885 * C2035) *
                         C47983 +
                     (C42890 * C12799 + C42887 * C12801 + C42889 * C2018 +
                      C42886 * C2027 + C42888 * C2017 + C42885 * C2026) *
                         C1160) *
                        C48010 * C48235 * C48363) *
                       C48315 +
                   (((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C1160 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C47983) *
                        C48010 * C48235 * C2300 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C47983 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C1160) *
                        C48010 * C48235 * C2299 -
                    ((C42890 * C6982 + C42887 * C6985 + C42889 * C2421 +
                      C42886 * C2426 + C42888 * C1308 + C42885 * C1324) *
                         C47983 +
                     (C42890 * C6979 + C42887 * C6981 + C42889 * C2417 +
                      C42886 * C2420 + C42888 * C1297 + C42885 * C1309) *
                         C1160) *
                        C48010 * C48235 * C2301 +
                    ((C42888 * C2417 + C42885 * C2420 + C42889 * C6979 +
                      C42886 * C6981 + C42890 * C28129 + C42887 * C28130) *
                         C1160 +
                     (C42888 * C2421 + C42885 * C2426 + C42889 * C6982 +
                      C42886 * C6985 + C42890 * C28131 + C42887 * C28132) *
                         C47983) *
                        C48010 * C48235 * C48363) *
                       C48094)) /
                     (p * q * std::sqrt(p + q));
    d2ee[212] += (0.5 * std::pow(Pi, 2.5) *
                      ((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                        C42886 * C497 + C42890 * C490 + C42887 * C505) *
                           C114 +
                       (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                        C42886 * C515 + C42890 * C506 + C42887 * C520) *
                           C102 -
                       (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                        C42886 * C495 + C42888 * C120 + C42885 * C128) *
                           C115 -
                       (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                        C42886 * C516 + C42888 * C129 + C42885 * C141) *
                           C103 +
                       (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                        C42886 * C499 + C42890 * C492 + C42887 * C509) *
                           C116 +
                       (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                        C42886 * C517 + C42890 * C510 + C42887 * C522) *
                           C104 -
                       (C42890 * C493 + C42887 * C511 + C42889 * C488 +
                        C42886 * C501 + C42888 * C122 + C42885 * C132) *
                           C117 -
                       (C42890 * C512 + C42887 * C523 + C42889 * C502 +
                        C42886 * C518 + C42888 * C133 + C42885 * C143) *
                           C105 +
                       (C42888 * C123 + C42885 * C134 + C42889 * C489 +
                        C42886 * C503 + C42890 * C494 + C42887 * C513) *
                           C118 +
                       (C42888 * C135 + C42885 * C144 + C42889 * C504 +
                        C42886 * C519 + C42890 * C514 + C42887 * C524) *
                           C106) *
                      C48010 * C48235 * C48047 * C48035 +
                  0.5 * std::pow(Pi, 2.5) *
                      (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                         C42886 * C497 + C42890 * C490 + C42887 * C505) *
                            C293 +
                        (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                         C42886 * C515 + C42890 * C506 + C42887 * C520) *
                            C287 -
                        (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                         C42886 * C495 + C42888 * C120 + C42885 * C128) *
                            C294 -
                        (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                         C42886 * C516 + C42888 * C129 + C42885 * C141) *
                            C288 +
                        (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                         C42886 * C499 + C42890 * C492 + C42887 * C509) *
                            C295 +
                        (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                         C42886 * C517 + C42890 * C510 + C42887 * C522) *
                            C48339) *
                           C48010 * C48235 * C48047 * C48386 +
                       ((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                         C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                            C294 -
                        ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                          C42886 * C950 + C42888 * C307 + C42885 * C326) *
                             C287 +
                         (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                          C42886 * C940 + C42888 * C297 + C42885 * C308) *
                             C293) +
                        (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                         C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                            C288 -
                        (C42890 * C1295 + C42887 * C1305 + C42889 * C937 +
                         C42886 * C944 + C42888 * C298 + C42885 * C310) *
                            C295 -
                        (C42890 * C1304 + C42887 * C1322 + C42889 * C945 +
                         C42886 * C952 + C42888 * C311 + C42885 * C328) *
                            C48339) *
                           C48010 * C48235 * C48047 * C48374 +
                       ((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                         C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                            C293 +
                        (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                         C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                            C287 -
                        (C42890 * C1302 + C42887 * C1318 + C42889 * C1299 +
                         C42886 * C1313 + C42888 * C302 + C42885 * C318) *
                            C294 -
                        (C42890 * C1319 + C42887 * C1329 + C42889 * C1312 +
                         C42886 * C1326 + C42888 * C319 + C42885 * C332) *
                            C288 +
                        (C42888 * C303 + C42885 * C320 + C42889 * C1298 +
                         C42886 * C1311 + C42890 * C1303 + C42887 * C1320) *
                            C295 +
                        (C42888 * C321 + C42885 * C333 + C42889 * C1310 +
                         C42886 * C1325 + C42890 * C1321 + C42887 * C1330) *
                            C48339) *
                           C48010 * C48235 * C48047 * C48347)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C293 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C287 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C294 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C288 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C295 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C48339) *
                       C48010 * C48235 * C48387 +
                   ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                     C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                        C294 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C287 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C293) +
                    (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                     C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                        C288 -
                    (C42890 * C2015 + C42887 * C2022 + C42889 * C492 +
                     C42886 * C509 + C42888 * C487 + C42885 * C499) *
                        C295 -
                    (C42890 * C2021 + C42887 * C2033 + C42889 * C510 +
                     C42886 * C522 + C42888 * C500 + C42885 * C517) *
                        C48339) *
                       C48010 * C48235 * C48376 +
                   ((C42888 * C490 + C42885 * C505 + C42889 * C2017 +
                     C42886 * C2026 + C42890 * C2018 + C42887 * C2027) *
                        C293 +
                    (C42888 * C506 + C42885 * C520 + C42889 * C2025 +
                     C42886 * C2035 + C42890 * C2028 + C42887 * C2036) *
                        C287 -
                    (C42890 * C2019 + C42887 * C2029 + C42889 * C2016 +
                     C42886 * C2024 + C42888 * C491 + C42885 * C507) *
                        C294 -
                    (C42890 * C2030 + C42887 * C2037 + C42889 * C2023 +
                     C42886 * C2034 + C42888 * C508 + C42885 * C521) *
                        C288 +
                    (C42888 * C492 + C42885 * C509 + C42889 * C2015 +
                     C42886 * C2022 + C42890 * C2020 + C42887 * C2031) *
                        C295 +
                    (C42888 * C510 + C42885 * C522 + C42889 * C2021 +
                     C42886 * C2033 + C42890 * C2032 + C42887 * C2038) *
                        C48339) *
                       C48010 * C48235 * C48350) *
                  C48035) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C1089 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C48383 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C1090 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C48370 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C1091 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C48339) *
                       C48010 * C48235 * C48047 * C1086 +
                   ((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                     C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                        C1090 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C48383 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C1089) +
                    (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                     C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                        C48370 -
                    (C42890 * C1295 + C42887 * C1305 + C42889 * C937 +
                     C42886 * C944 + C42888 * C298 + C42885 * C310) *
                        C1091 -
                    (C42890 * C1304 + C42887 * C1322 + C42889 * C945 +
                     C42886 * C952 + C42888 * C311 + C42885 * C328) *
                        C48339) *
                       C48010 * C48235 * C48047 * C1087 +
                   ((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                     C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                        C1089 +
                    (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                     C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                        C48383 -
                    (C42890 * C1302 + C42887 * C1318 + C42889 * C1299 +
                     C42886 * C1313 + C42888 * C302 + C42885 * C318) *
                        C1090 -
                    (C42890 * C1319 + C42887 * C1329 + C42889 * C1312 +
                     C42886 * C1326 + C42888 * C319 + C42885 * C332) *
                        C48370 +
                    (C42888 * C303 + C42885 * C320 + C42889 * C1298 +
                     C42886 * C1311 + C42890 * C1303 + C42887 * C1320) *
                        C1091 +
                    (C42888 * C321 + C42885 * C333 + C42889 * C1310 +
                     C42886 * C1325 + C42890 * C1321 + C42887 * C1330) *
                        C48339) *
                       C48010 * C48235 * C48047 * C48347)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C1160 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C47983) *
                       C48010 * C48235 * C48047 * C1155 -
                   ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                     C42886 * C950 + C42888 * C307 + C42885 * C326) *
                        C47983 +
                    (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                     C42886 * C940 + C42888 * C297 + C42885 * C308) *
                        C1160) *
                       C48010 * C48235 * C48047 * C1156 +
                   ((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                     C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                        C1160 +
                    (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                     C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                        C47983) *
                       C48010 * C48235 * C48047 * C1157 -
                   ((C42890 * C6042 + C42887 * C6045 + C42889 * C1717 +
                     C42886 * C1722 + C42888 * C1171 + C42885 * C1181) *
                        C47983 +
                    (C42890 * C6039 + C42887 * C6041 + C42889 * C1713 +
                     C42886 * C1716 + C42888 * C1163 + C42885 * C1172) *
                        C1160) *
                       C48010 * C48235 * C48047 * C1158 +
                   ((C42888 * C1164 + C42885 * C1173 + C42889 * C6587 +
                     C42886 * C6589 + C42890 * C22667 + C42887 * C22668) *
                        C1160 +
                    (C42888 * C1174 + C42885 * C1182 + C42889 * C6590 +
                     C42886 * C6593 + C42890 * C22669 + C42887 * C22670) *
                        C47983) *
                       C48010 * C48235 * C48047 * C1159)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C1160 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C47983) *
                        C48010 * C48235 * C48387 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C47983 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C1160) *
                        C48010 * C48235 * C48376 +
                    ((C42888 * C490 + C42885 * C505 + C42889 * C2017 +
                      C42886 * C2026 + C42890 * C2018 + C42887 * C2027) *
                         C1160 +
                     (C42888 * C506 + C42885 * C520 + C42889 * C2025 +
                      C42886 * C2035 + C42890 * C2028 + C42887 * C2036) *
                         C47983) *
                        C48010 * C48235 * C48350) *
                       C1086 +
                   (((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C1160 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C47983) *
                        C48010 * C48235 * C48376 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C47983 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C1160) *
                        C48010 * C48235 * C48387 -
                    ((C42890 * C6982 + C42887 * C6985 + C42889 * C2421 +
                      C42886 * C2426 + C42888 * C1308 + C42885 * C1324) *
                         C47983 +
                     (C42890 * C6979 + C42887 * C6981 + C42889 * C2417 +
                      C42886 * C2420 + C42888 * C1297 + C42885 * C1309) *
                         C1160) *
                        C48010 * C48235 * C48350) *
                       C1087 +
                   (((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                      C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                         C1160 +
                     (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                      C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                         C47983) *
                        C48010 * C48235 * C48387 -
                    ((C42890 * C7458 + C42887 * C7461 + C42889 * C1317 +
                      C42886 * C1328 + C42888 * C1314 + C42885 * C1327) *
                         C47983 +
                     (C42890 * C7455 + C42887 * C7457 + C42889 * C1301 +
                      C42886 * C1316 + C42888 * C1300 + C42885 * C1315) *
                         C1160) *
                        C48010 * C48235 * C48376 +
                    ((C42888 * C1301 + C42885 * C1316 + C42889 * C7455 +
                      C42886 * C7457 + C42890 * C23341 + C42887 * C23342) *
                         C1160 +
                     (C42888 * C1317 + C42885 * C1328 + C42889 * C7458 +
                      C42886 * C7461 + C42890 * C23343 + C42887 * C23344) *
                         C47983) *
                        C48010 * C48235 * C48350) *
                       C48347)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C1089 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C48383 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C1090 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C48370 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C1091 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C48339) *
                       C48010 * C48235 * C1835 +
                   ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                     C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                        C1090 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C48383 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C1089) +
                    (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                     C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                        C48370 -
                    (C42890 * C2015 + C42887 * C2022 + C42889 * C492 +
                     C42886 * C509 + C42888 * C487 + C42885 * C499) *
                        C1091 -
                    (C42890 * C2021 + C42887 * C2033 + C42889 * C510 +
                     C42886 * C522 + C42888 * C500 + C42885 * C517) *
                        C48339) *
                       C48010 * C48235 * C1836 +
                   ((C42888 * C490 + C42885 * C505 + C42889 * C2017 +
                     C42886 * C2026 + C42890 * C2018 + C42887 * C2027) *
                        C1089 +
                    (C42888 * C506 + C42885 * C520 + C42889 * C2025 +
                     C42886 * C2035 + C42890 * C2028 + C42887 * C2036) *
                        C48383 -
                    (C42890 * C2019 + C42887 * C2029 + C42889 * C2016 +
                     C42886 * C2024 + C42888 * C491 + C42885 * C507) *
                        C1090 -
                    (C42890 * C2030 + C42887 * C2037 + C42889 * C2023 +
                     C42886 * C2034 + C42888 * C508 + C42885 * C521) *
                        C48370 +
                    (C42888 * C492 + C42885 * C509 + C42889 * C2015 +
                     C42886 * C2022 + C42890 * C2020 + C42887 * C2031) *
                        C1091 +
                    (C42888 * C510 + C42885 * C522 + C42889 * C2021 +
                     C42886 * C2033 + C42890 * C2032 + C42887 * C2038) *
                        C48339) *
                       C48010 * C48235 * C48350) *
                  C48035) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C1160 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C47983) *
                        C48010 * C48235 * C1835 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C47983 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C1160) *
                        C48010 * C48235 * C1836 +
                    ((C42888 * C490 + C42885 * C505 + C42889 * C2017 +
                      C42886 * C2026 + C42890 * C2018 + C42887 * C2027) *
                         C1160 +
                     (C42888 * C506 + C42885 * C520 + C42889 * C2025 +
                      C42886 * C2035 + C42890 * C2028 + C42887 * C2036) *
                         C47983) *
                        C48010 * C48235 * C48350) *
                       C48386 +
                   (((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C1160 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C47983) *
                        C48010 * C48235 * C1836 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C47983 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C1160) *
                        C48010 * C48235 * C1835 -
                    ((C42890 * C6982 + C42887 * C6985 + C42889 * C2421 +
                      C42886 * C2426 + C42888 * C1308 + C42885 * C1324) *
                         C47983 +
                     (C42890 * C6979 + C42887 * C6981 + C42889 * C2417 +
                      C42886 * C2420 + C42888 * C1297 + C42885 * C1309) *
                         C1160) *
                        C48010 * C48235 * C48350) *
                       C48374 +
                   (((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                      C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                         C1160 +
                     (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                      C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                         C47983) *
                        C48010 * C48235 * C1835 -
                    ((C42890 * C7458 + C42887 * C7461 + C42889 * C1317 +
                      C42886 * C1328 + C42888 * C1314 + C42885 * C1327) *
                         C47983 +
                     (C42890 * C7455 + C42887 * C7457 + C42889 * C1301 +
                      C42886 * C1316 + C42888 * C1300 + C42885 * C1315) *
                         C1160) *
                        C48010 * C48235 * C1836 +
                    ((C42888 * C1301 + C42885 * C1316 + C42889 * C7455 +
                      C42886 * C7457 + C42890 * C23341 + C42887 * C23342) *
                         C1160 +
                     (C42888 * C1317 + C42885 * C1328 + C42889 * C7458 +
                      C42886 * C7461 + C42890 * C23343 + C42887 * C23344) *
                         C47983) *
                        C48010 * C48235 * C48350) *
                       C48347)) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C1160 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C47983) *
                       C48010 * C48235 * C2010 -
                   ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                     C42886 * C520 + C42888 * C496 + C42885 * C515) *
                        C47983 +
                    (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                     C42886 * C505 + C42888 * C486 + C42885 * C497) *
                        C1160) *
                       C48010 * C48235 * C2011 +
                   ((C42888 * C490 + C42885 * C505 + C42889 * C2017 +
                     C42886 * C2026 + C42890 * C2018 + C42887 * C2027) *
                        C1160 +
                    (C42888 * C506 + C42885 * C520 + C42889 * C2025 +
                     C42886 * C2035 + C42890 * C2028 + C42887 * C2036) *
                        C47983) *
                       C48010 * C48235 * C2012 -
                   ((C42890 * C12802 + C42887 * C12805 + C42889 * C2028 +
                     C42886 * C2036 + C42888 * C2025 + C42885 * C2035) *
                        C47983 +
                    (C42890 * C12799 + C42887 * C12801 + C42889 * C2018 +
                     C42886 * C2027 + C42888 * C2017 + C42885 * C2026) *
                        C1160) *
                       C48010 * C48235 * C2013 +
                   ((C42888 * C2018 + C42885 * C2027 + C42889 * C12799 +
                     C42886 * C12801 + C42890 * C44359 + C42887 * C44360) *
                        C1160 +
                    (C42888 * C2028 + C42885 * C2036 + C42889 * C12802 +
                     C42886 * C12805 + C42890 * C44361 + C42887 * C44362) *
                        C47983) *
                       C48010 * C48235 * C2014) *
                  C48035) /
                     (p * q * std::sqrt(p + q));
    d2ee[213] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C47001 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C48298 -
                     (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                      C42886 * C495 + C42888 * C120 + C42885 * C128) *
                         C46982 -
                     (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                      C42886 * C516 + C42888 * C129 + C42885 * C141) *
                         C47993) *
                        C48010 * C48235 * C48316 +
                    ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                      C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                         C46982 -
                     ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                       C42886 * C520 + C42888 * C496 + C42885 * C515) *
                          C48298 +
                      (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                       C42886 * C505 + C42888 * C486 + C42885 * C497) *
                          C47001) +
                     (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                      C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                         C47993) *
                        C48010 * C48235 * C48134) *
                       C1086 +
                   (((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                      C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                         C46982 -
                     ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                       C42886 * C950 + C42888 * C307 + C42885 * C326) *
                          C48298 +
                      (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                       C42886 * C940 + C42888 * C297 + C42885 * C308) *
                          C47001) +
                     (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                      C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                         C47993) *
                        C48010 * C48235 * C48316 +
                    ((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C47001 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C48298 -
                     (C42890 * C2418 + C42887 * C2422 + C42889 * C1296 +
                      C42886 * C1307 + C42888 * C936 + C42885 * C942) *
                         C46982 -
                     (C42890 * C2423 + C42887 * C2427 + C42889 * C1306 +
                      C42886 * C1323 + C42888 * C943 + C42885 * C951) *
                         C47993) *
                        C48010 * C48235 * C48134) *
                       C1087 +
                   (((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                      C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                         C47001 +
                     (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                      C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                         C48298 -
                     (C42890 * C1302 + C42887 * C1318 + C42889 * C1299 +
                      C42886 * C1313 + C42888 * C302 + C42885 * C318) *
                         C46982 -
                     (C42890 * C1319 + C42887 * C1329 + C42889 * C1312 +
                      C42886 * C1326 + C42888 * C319 + C42885 * C332) *
                         C47993) *
                        C48010 * C48235 * C48316 +
                    ((C42888 * C1299 + C42885 * C1313 + C42889 * C1302 +
                      C42886 * C1318 + C42890 * C7456 + C42887 * C7459) *
                         C46982 -
                     ((C42890 * C7458 + C42887 * C7461 + C42889 * C1317 +
                       C42886 * C1328 + C42888 * C1314 + C42885 * C1327) *
                          C48298 +
                      (C42890 * C7455 + C42887 * C7457 + C42889 * C1301 +
                       C42886 * C1316 + C42888 * C1300 + C42885 * C1315) *
                          C47001) +
                     (C42888 * C1312 + C42885 * C1326 + C42889 * C1319 +
                      C42886 * C1329 + C42890 * C7460 + C42887 * C7462) *
                         C47993) *
                        C48010 * C48235 * C48134) *
                       C48347)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C665 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C659 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C666 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C660 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C667 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C661 -
                    (C42890 * C493 + C42887 * C511 + C42889 * C488 +
                     C42886 * C501 + C42888 * C122 + C42885 * C132) *
                        C668 -
                    (C42890 * C512 + C42887 * C523 + C42889 * C502 +
                     C42886 * C518 + C42888 * C133 + C42885 * C143) *
                        C48351) *
                       C48010 * C48235 * C48316 +
                   ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                     C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                        C666 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C659 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C665) +
                    (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                     C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                        C660 -
                    (C42890 * C2015 + C42887 * C2022 + C42889 * C492 +
                     C42886 * C509 + C42888 * C487 + C42885 * C499) *
                        C667 -
                    (C42890 * C2021 + C42887 * C2033 + C42889 * C510 +
                     C42886 * C522 + C42888 * C500 + C42885 * C517) *
                        C661 +
                    (C42888 * C488 + C42885 * C501 + C42889 * C493 +
                     C42886 * C511 + C42890 * C2303 + C42887 * C2304) *
                        C668 +
                    (C42888 * C502 + C42885 * C518 + C42889 * C512 +
                     C42886 * C523 + C42890 * C2305 + C42887 * C2306) *
                        C48351) *
                       C48010 * C48235 * C48134) *
                  C48035) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C47001 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C48298 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C46982 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C47993) *
                       C48010 * C48235 * C2299 +
                   ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                     C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                        C46982 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C48298 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C47001) +
                    (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                     C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                        C47993) *
                       C48010 * C48235 * C2300 +
                   ((C42888 * C490 + C42885 * C505 + C42889 * C2017 +
                     C42886 * C2026 + C42890 * C2018 + C42887 * C2027) *
                        C47001 +
                    (C42888 * C506 + C42885 * C520 + C42889 * C2025 +
                     C42886 * C2035 + C42890 * C2028 + C42887 * C2036) *
                        C48298 -
                    (C42890 * C2019 + C42887 * C2029 + C42889 * C2016 +
                     C42886 * C2024 + C42888 * C491 + C42885 * C507) *
                        C46982 -
                    (C42890 * C2030 + C42887 * C2037 + C42889 * C2023 +
                     C42886 * C2034 + C42888 * C508 + C42885 * C521) *
                        C47993) *
                       C48010 * C48235 * C2301 +
                   ((C42888 * C2016 + C42885 * C2024 + C42889 * C2019 +
                     C42886 * C2029 + C42890 * C12800 + C42887 * C12803) *
                        C46982 -
                    ((C42890 * C12802 + C42887 * C12805 + C42889 * C2028 +
                      C42886 * C2036 + C42888 * C2025 + C42885 * C2035) *
                         C48298 +
                     (C42890 * C12799 + C42887 * C12801 + C42889 * C2018 +
                      C42886 * C2027 + C42888 * C2017 + C42885 * C2026) *
                         C47001) +
                    (C42888 * C2023 + C42885 * C2034 + C42889 * C2030 +
                     C42886 * C2037 + C42890 * C12804 + C42887 * C12806) *
                        C47993) *
                       C48010 * C48235 * C48363) *
                  C48035) /
                     (p * q * std::sqrt(p + q));
    d2ee[214] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C293 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C287 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C294 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C288 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C295 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C48339) *
                       C48010 * C48235 * C48047 * C48386 +
                   ((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                     C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                        C294 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C287 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C293) +
                    (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                     C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                        C288 -
                    (C42890 * C1295 + C42887 * C1305 + C42889 * C937 +
                     C42886 * C944 + C42888 * C298 + C42885 * C310) *
                        C295 -
                    (C42890 * C1304 + C42887 * C1322 + C42889 * C945 +
                     C42886 * C952 + C42888 * C311 + C42885 * C328) *
                        C48339) *
                       C48010 * C48235 * C48047 * C48374 +
                   ((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                     C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                        C293 +
                    (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                     C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                        C287 -
                    (C42890 * C1302 + C42887 * C1318 + C42889 * C1299 +
                     C42886 * C1313 + C42888 * C302 + C42885 * C318) *
                        C294 -
                    (C42890 * C1319 + C42887 * C1329 + C42889 * C1312 +
                     C42886 * C1326 + C42888 * C319 + C42885 * C332) *
                        C288 +
                    (C42888 * C303 + C42885 * C320 + C42889 * C1298 +
                     C42886 * C1311 + C42890 * C1303 + C42887 * C1320) *
                        C295 +
                    (C42888 * C321 + C42885 * C333 + C42889 * C1310 +
                     C42886 * C1325 + C42890 * C1321 + C42887 * C1330) *
                        C48339) *
                       C48010 * C48235 * C48047 * C48347)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                    C42886 * C497 + C42890 * C490 + C42887 * C505) *
                       C114 +
                   (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                    C42886 * C515 + C42890 * C506 + C42887 * C520) *
                       C102 -
                   (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                    C42886 * C495 + C42888 * C120 + C42885 * C128) *
                       C115 -
                   (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                    C42886 * C516 + C42888 * C129 + C42885 * C141) *
                       C103 +
                   (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                    C42886 * C499 + C42890 * C492 + C42887 * C509) *
                       C116 +
                   (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                    C42886 * C517 + C42890 * C510 + C42887 * C522) *
                       C104 -
                   (C42890 * C493 + C42887 * C511 + C42889 * C488 +
                    C42886 * C501 + C42888 * C122 + C42885 * C132) *
                       C117 -
                   (C42890 * C512 + C42887 * C523 + C42889 * C502 +
                    C42886 * C518 + C42888 * C133 + C42885 * C143) *
                       C105 +
                   (C42888 * C123 + C42885 * C134 + C42889 * C489 +
                    C42886 * C503 + C42890 * C494 + C42887 * C513) *
                       C118 +
                   (C42888 * C135 + C42885 * C144 + C42889 * C504 +
                    C42886 * C519 + C42890 * C514 + C42887 * C524) *
                       C106) *
                  C48010 * C48235 * C48047 * C48035) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C1089 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C48383 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C1090 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C48370 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C1091 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C48339) *
                       C48010 * C48235 * C48047 * C1086 +
                   ((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                     C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                        C1090 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C48383 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C1089) +
                    (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                     C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                        C48370 -
                    (C42890 * C1295 + C42887 * C1305 + C42889 * C937 +
                     C42886 * C944 + C42888 * C298 + C42885 * C310) *
                        C1091 -
                    (C42890 * C1304 + C42887 * C1322 + C42889 * C945 +
                     C42886 * C952 + C42888 * C311 + C42885 * C328) *
                        C48339) *
                       C48010 * C48235 * C48047 * C1087 +
                   ((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                     C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                        C1089 +
                    (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                     C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                        C48383 -
                    (C42890 * C1302 + C42887 * C1318 + C42889 * C1299 +
                     C42886 * C1313 + C42888 * C302 + C42885 * C318) *
                        C1090 -
                    (C42890 * C1319 + C42887 * C1329 + C42889 * C1312 +
                     C42886 * C1326 + C42888 * C319 + C42885 * C332) *
                        C48370 +
                    (C42888 * C303 + C42885 * C320 + C42889 * C1298 +
                     C42886 * C1311 + C42890 * C1303 + C42887 * C1320) *
                        C1091 +
                    (C42888 * C321 + C42885 * C333 + C42889 * C1310 +
                     C42886 * C1325 + C42890 * C1321 + C42887 * C1330) *
                        C48339) *
                       C48010 * C48235 * C48047 * C48347)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C1160 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C47983) *
                       C48010 * C48235 * C48047 * C1155 -
                   ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                     C42886 * C950 + C42888 * C307 + C42885 * C326) *
                        C47983 +
                    (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                     C42886 * C940 + C42888 * C297 + C42885 * C308) *
                        C1160) *
                       C48010 * C48235 * C48047 * C1156 +
                   ((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                     C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                        C1160 +
                    (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                     C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                        C47983) *
                       C48010 * C48235 * C48047 * C1157 -
                   ((C42890 * C6042 + C42887 * C6045 + C42889 * C1717 +
                     C42886 * C1722 + C42888 * C1171 + C42885 * C1181) *
                        C47983 +
                    (C42890 * C6039 + C42887 * C6041 + C42889 * C1713 +
                     C42886 * C1716 + C42888 * C1163 + C42885 * C1172) *
                        C1160) *
                       C48010 * C48235 * C48047 * C1158 +
                   ((C42888 * C1164 + C42885 * C1173 + C42889 * C6587 +
                     C42886 * C6589 + C42890 * C22667 + C42887 * C22668) *
                        C1160 +
                    (C42888 * C1174 + C42885 * C1182 + C42889 * C6590 +
                     C42886 * C6593 + C42890 * C22669 + C42887 * C22670) *
                        C47983) *
                       C48010 * C48235 * C48047 * C1159)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C1089 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C48383 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C1090 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C48370 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C1091 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C48339) *
                       C48010 * C48235 * C1835 +
                   ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                     C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                        C1090 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C48383 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C1089) +
                    (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                     C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                        C48370 -
                    (C42890 * C2015 + C42887 * C2022 + C42889 * C492 +
                     C42886 * C509 + C42888 * C487 + C42885 * C499) *
                        C1091 -
                    (C42890 * C2021 + C42887 * C2033 + C42889 * C510 +
                     C42886 * C522 + C42888 * C500 + C42885 * C517) *
                        C48339) *
                       C48010 * C48235 * C1836 +
                   ((C42888 * C490 + C42885 * C505 + C42889 * C2017 +
                     C42886 * C2026 + C42890 * C2018 + C42887 * C2027) *
                        C1089 +
                    (C42888 * C506 + C42885 * C520 + C42889 * C2025 +
                     C42886 * C2035 + C42890 * C2028 + C42887 * C2036) *
                        C48383 -
                    (C42890 * C2019 + C42887 * C2029 + C42889 * C2016 +
                     C42886 * C2024 + C42888 * C491 + C42885 * C507) *
                        C1090 -
                    (C42890 * C2030 + C42887 * C2037 + C42889 * C2023 +
                     C42886 * C2034 + C42888 * C508 + C42885 * C521) *
                        C48370 +
                    (C42888 * C492 + C42885 * C509 + C42889 * C2015 +
                     C42886 * C2022 + C42890 * C2020 + C42887 * C2031) *
                        C1091 +
                    (C42888 * C510 + C42885 * C522 + C42889 * C2021 +
                     C42886 * C2033 + C42890 * C2032 + C42887 * C2038) *
                        C48339) *
                       C48010 * C48235 * C48350) *
                  C48035) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C1160 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C47983) *
                        C48010 * C48235 * C1835 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C47983 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C1160) *
                        C48010 * C48235 * C1836 +
                    ((C42888 * C490 + C42885 * C505 + C42889 * C2017 +
                      C42886 * C2026 + C42890 * C2018 + C42887 * C2027) *
                         C1160 +
                     (C42888 * C506 + C42885 * C520 + C42889 * C2025 +
                      C42886 * C2035 + C42890 * C2028 + C42887 * C2036) *
                         C47983) *
                        C48010 * C48235 * C48350) *
                       C48386 +
                   (((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C1160 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C47983) *
                        C48010 * C48235 * C1836 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C47983 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C1160) *
                        C48010 * C48235 * C1835 -
                    ((C42890 * C6982 + C42887 * C6985 + C42889 * C2421 +
                      C42886 * C2426 + C42888 * C1308 + C42885 * C1324) *
                         C47983 +
                     (C42890 * C6979 + C42887 * C6981 + C42889 * C2417 +
                      C42886 * C2420 + C42888 * C1297 + C42885 * C1309) *
                         C1160) *
                        C48010 * C48235 * C48350) *
                       C48374 +
                   (((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                      C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                         C1160 +
                     (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                      C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                         C47983) *
                        C48010 * C48235 * C1835 -
                    ((C42890 * C7458 + C42887 * C7461 + C42889 * C1317 +
                      C42886 * C1328 + C42888 * C1314 + C42885 * C1327) *
                         C47983 +
                     (C42890 * C7455 + C42887 * C7457 + C42889 * C1301 +
                      C42886 * C1316 + C42888 * C1300 + C42885 * C1315) *
                         C1160) *
                        C48010 * C48235 * C1836 +
                    ((C42888 * C1301 + C42885 * C1316 + C42889 * C7455 +
                      C42886 * C7457 + C42890 * C23341 + C42887 * C23342) *
                         C1160 +
                     (C42888 * C1317 + C42885 * C1328 + C42889 * C7458 +
                      C42886 * C7461 + C42890 * C23343 + C42887 * C23344) *
                         C47983) *
                        C48010 * C48235 * C48350) *
                       C48347)) /
                     (p * q * std::sqrt(p + q));
    d2ee[215] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C47011 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C47988 -
                     (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                      C42886 * C495 + C42888 * C120 + C42885 * C128) *
                         C47007 -
                     (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                      C42886 * C516 + C42888 * C129 + C42885 * C141) *
                         C47996 +
                     (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                      C42886 * C499 + C42890 * C492 + C42887 * C509) *
                         C47017 +
                     (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                      C42886 * C517 + C42890 * C510 + C42887 * C522) *
                         C2901) *
                        C48010 * C48235 * C3298 +
                    ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                      C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                         C47007 -
                     ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                       C42886 * C520 + C42888 * C496 + C42885 * C515) *
                          C47988 +
                      (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                       C42886 * C505 + C42888 * C486 + C42885 * C497) *
                          C47011) +
                     (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                      C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                         C47996 -
                     (C42890 * C2015 + C42887 * C2022 + C42889 * C492 +
                      C42886 * C509 + C42888 * C487 + C42885 * C499) *
                         C47017 -
                     (C42890 * C2021 + C42887 * C2033 + C42889 * C510 +
                      C42886 * C522 + C42888 * C500 + C42885 * C517) *
                         C2901) *
                        C48010 * C48235 * C48134) *
                       C48315 +
                   (((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                      C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                         C47007 -
                     ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                       C42886 * C950 + C42888 * C307 + C42885 * C326) *
                          C47988 +
                      (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                       C42886 * C940 + C42888 * C297 + C42885 * C308) *
                          C47011) +
                     (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                      C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                         C47996 -
                     (C42890 * C1295 + C42887 * C1305 + C42889 * C937 +
                      C42886 * C944 + C42888 * C298 + C42885 * C310) *
                         C47017 -
                     (C42890 * C1304 + C42887 * C1322 + C42889 * C945 +
                      C42886 * C952 + C42888 * C311 + C42885 * C328) *
                         C2901) *
                        C48010 * C48235 * C3298 +
                    ((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C47011 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C47988 -
                     (C42890 * C2418 + C42887 * C2422 + C42889 * C1296 +
                      C42886 * C1307 + C42888 * C936 + C42885 * C942) *
                         C47007 -
                     (C42890 * C2423 + C42887 * C2427 + C42889 * C1306 +
                      C42886 * C1323 + C42888 * C943 + C42885 * C951) *
                         C47996 +
                     (C42888 * C937 + C42885 * C944 + C42889 * C1295 +
                      C42886 * C1305 + C42890 * C2419 + C42887 * C2424) *
                         C47017 +
                     (C42888 * C945 + C42885 * C952 + C42889 * C1304 +
                      C42886 * C1322 + C42890 * C2425 + C42887 * C2428) *
                         C2901) *
                        C48010 * C48235 * C48134) *
                       C48094)) /
                 (p * q * std::sqrt(p + q));
    d2ee[216] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C2641 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C2635 -
                     (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                      C42886 * C495 + C42888 * C120 + C42885 * C128) *
                         C2642 -
                     (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                      C42886 * C516 + C42888 * C129 + C42885 * C141) *
                         C47993) *
                        C48010 * C48235 * C48130 +
                    ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                      C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                         C2642 -
                     ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                       C42886 * C520 + C42888 * C496 + C42885 * C515) *
                          C2635 +
                      (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                       C42886 * C505 + C42888 * C486 + C42885 * C497) *
                          C2641) +
                     (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                      C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                         C47993) *
                        C48010 * C48235 * C48137 +
                    ((C42888 * C490 + C42885 * C505 + C42889 * C2017 +
                      C42886 * C2026 + C42890 * C2018 + C42887 * C2027) *
                         C2641 +
                     (C42888 * C506 + C42885 * C520 + C42889 * C2025 +
                      C42886 * C2035 + C42890 * C2028 + C42887 * C2036) *
                         C2635 -
                     (C42890 * C2019 + C42887 * C2029 + C42889 * C2016 +
                      C42886 * C2024 + C42888 * C491 + C42885 * C507) *
                         C2642 -
                     (C42890 * C2030 + C42887 * C2037 + C42889 * C2023 +
                      C42886 * C2034 + C42888 * C508 + C42885 * C521) *
                         C47993) *
                        C48010 * C48235 * C3806) *
                       C48315 +
                   (((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                      C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                         C2642 -
                     ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                       C42886 * C950 + C42888 * C307 + C42885 * C326) *
                          C2635 +
                      (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                       C42886 * C940 + C42888 * C297 + C42885 * C308) *
                          C2641) +
                     (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                      C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                         C47993) *
                        C48010 * C48235 * C48130 +
                    ((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C2641 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C2635 -
                     (C42890 * C2418 + C42887 * C2422 + C42889 * C1296 +
                      C42886 * C1307 + C42888 * C936 + C42885 * C942) *
                         C2642 -
                     (C42890 * C2423 + C42887 * C2427 + C42889 * C1306 +
                      C42886 * C1323 + C42888 * C943 + C42885 * C951) *
                         C47993) *
                        C48010 * C48235 * C48137 +
                    ((C42888 * C1296 + C42885 * C1307 + C42889 * C2418 +
                      C42886 * C2422 + C42890 * C6980 + C42887 * C6983) *
                         C2642 -
                     ((C42890 * C6982 + C42887 * C6985 + C42889 * C2421 +
                       C42886 * C2426 + C42888 * C1308 + C42885 * C1324) *
                          C2635 +
                      (C42890 * C6979 + C42887 * C6981 + C42889 * C2417 +
                       C42886 * C2420 + C42888 * C1297 + C42885 * C1309) *
                          C2641) +
                     (C42888 * C1306 + C42885 * C1323 + C42889 * C2423 +
                      C42886 * C2427 + C42890 * C6984 + C42887 * C6986) *
                         C47993) *
                        C48010 * C48235 * C3806) *
                       C48094)) /
                 (p * q * std::sqrt(p + q));
    d2ee[217] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C2641 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C2635 -
                     (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                      C42886 * C495 + C42888 * C120 + C42885 * C128) *
                         C2642 -
                     (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                      C42886 * C516 + C42888 * C129 + C42885 * C141) *
                         C47993) *
                        C48010 * C48235 * C3298 +
                    ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                      C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                         C2642 -
                     ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                       C42886 * C520 + C42888 * C496 + C42885 * C515) *
                          C2635 +
                      (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                       C42886 * C505 + C42888 * C486 + C42885 * C497) *
                          C2641) +
                     (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                      C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                         C47993) *
                        C48010 * C48235 * C48134) *
                       C48386 +
                   (((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                      C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                         C2642 -
                     ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                       C42886 * C950 + C42888 * C307 + C42885 * C326) *
                          C2635 +
                      (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                       C42886 * C940 + C42888 * C297 + C42885 * C308) *
                          C2641) +
                     (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                      C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                         C47993) *
                        C48010 * C48235 * C3298 +
                    ((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C2641 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C2635 -
                     (C42890 * C2418 + C42887 * C2422 + C42889 * C1296 +
                      C42886 * C1307 + C42888 * C936 + C42885 * C942) *
                         C2642 -
                     (C42890 * C2423 + C42887 * C2427 + C42889 * C1306 +
                      C42886 * C1323 + C42888 * C943 + C42885 * C951) *
                         C47993) *
                        C48010 * C48235 * C48134) *
                       C48374 +
                   (((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                      C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                         C2641 +
                     (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                      C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                         C2635 -
                     (C42890 * C1302 + C42887 * C1318 + C42889 * C1299 +
                      C42886 * C1313 + C42888 * C302 + C42885 * C318) *
                         C2642 -
                     (C42890 * C1319 + C42887 * C1329 + C42889 * C1312 +
                      C42886 * C1326 + C42888 * C319 + C42885 * C332) *
                         C47993) *
                        C48010 * C48235 * C3298 +
                    ((C42888 * C1299 + C42885 * C1313 + C42889 * C1302 +
                      C42886 * C1318 + C42890 * C7456 + C42887 * C7459) *
                         C2642 -
                     ((C42890 * C7458 + C42887 * C7461 + C42889 * C1317 +
                       C42886 * C1328 + C42888 * C1314 + C42885 * C1327) *
                          C2635 +
                      (C42890 * C7455 + C42887 * C7457 + C42889 * C1301 +
                       C42886 * C1316 + C42888 * C1300 + C42885 * C1315) *
                          C2641) +
                     (C42888 * C1312 + C42885 * C1326 + C42889 * C1319 +
                      C42886 * C1329 + C42890 * C7460 + C42887 * C7462) *
                         C47993) *
                        C48010 * C48235 * C48134) *
                       C48347)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C2533 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C48392 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C2534 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C48385 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C2535 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C48372 -
                    (C42890 * C493 + C42887 * C511 + C42889 * C488 +
                     C42886 * C501 + C42888 * C122 + C42885 * C132) *
                        C2536 -
                    (C42890 * C512 + C42887 * C523 + C42889 * C502 +
                     C42886 * C518 + C42888 * C133 + C42885 * C143) *
                        C48351) *
                       C48010 * C48235 * C3298 +
                   ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                     C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                        C2534 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C48392 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C2533) +
                    (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                     C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                        C48385 -
                    (C42890 * C2015 + C42887 * C2022 + C42889 * C492 +
                     C42886 * C509 + C42888 * C487 + C42885 * C499) *
                        C2535 -
                    (C42890 * C2021 + C42887 * C2033 + C42889 * C510 +
                     C42886 * C522 + C42888 * C500 + C42885 * C517) *
                        C48372 +
                    (C42888 * C488 + C42885 * C501 + C42889 * C493 +
                     C42886 * C511 + C42890 * C2303 + C42887 * C2304) *
                        C2536 +
                    (C42888 * C502 + C42885 * C518 + C42889 * C512 +
                     C42886 * C523 + C42890 * C2305 + C42887 * C2306) *
                        C48351) *
                       C48010 * C48235 * C48134) *
                  C48035) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C2641 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C2635 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C2642 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C47993) *
                       C48010 * C48235 * C48394 +
                   ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                     C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                        C2642 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C2635 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C2641) +
                    (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                     C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                        C47993) *
                       C48010 * C48235 * C48391 +
                   ((C42888 * C490 + C42885 * C505 + C42889 * C2017 +
                     C42886 * C2026 + C42890 * C2018 + C42887 * C2027) *
                        C2641 +
                    (C42888 * C506 + C42885 * C520 + C42889 * C2025 +
                     C42886 * C2035 + C42890 * C2028 + C42887 * C2036) *
                        C2635 -
                    (C42890 * C2019 + C42887 * C2029 + C42889 * C2016 +
                     C42886 * C2024 + C42888 * C491 + C42885 * C507) *
                        C2642 -
                    (C42890 * C2030 + C42887 * C2037 + C42889 * C2023 +
                     C42886 * C2034 + C42888 * C508 + C42885 * C521) *
                        C47993) *
                       C48010 * C48235 * C48382 +
                   ((C42888 * C2016 + C42885 * C2024 + C42889 * C2019 +
                     C42886 * C2029 + C42890 * C12800 + C42887 * C12803) *
                        C2642 -
                    ((C42890 * C12802 + C42887 * C12805 + C42889 * C2028 +
                      C42886 * C2036 + C42888 * C2025 + C42885 * C2035) *
                         C2635 +
                     (C42890 * C12799 + C42887 * C12801 + C42889 * C2018 +
                      C42886 * C2027 + C42888 * C2017 + C42885 * C2026) *
                         C2641) +
                    (C42888 * C2023 + C42885 * C2034 + C42889 * C2030 +
                     C42886 * C2037 + C42890 * C12804 + C42887 * C12806) *
                        C47993) *
                       C48010 * C48235 * C48363) *
                  C48035) /
                     (p * q * std::sqrt(p + q));
    d2ee[218] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C47011 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C47988 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C47007 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C47996 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C47017 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C2901) *
                       C48010 * C48235 * C48130 +
                   ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                     C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                        C47007 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C47988 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C47011) +
                    (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                     C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                        C47996 -
                    (C42890 * C2015 + C42887 * C2022 + C42889 * C492 +
                     C42886 * C509 + C42888 * C487 + C42885 * C499) *
                        C47017 -
                    (C42890 * C2021 + C42887 * C2033 + C42889 * C510 +
                     C42886 * C522 + C42888 * C500 + C42885 * C517) *
                        C2901) *
                       C48010 * C48235 * C48137 +
                   ((C42888 * C490 + C42885 * C505 + C42889 * C2017 +
                     C42886 * C2026 + C42890 * C2018 + C42887 * C2027) *
                        C47011 +
                    (C42888 * C506 + C42885 * C520 + C42889 * C2025 +
                     C42886 * C2035 + C42890 * C2028 + C42887 * C2036) *
                        C47988 -
                    (C42890 * C2019 + C42887 * C2029 + C42889 * C2016 +
                     C42886 * C2024 + C42888 * C491 + C42885 * C507) *
                        C47007 -
                    (C42890 * C2030 + C42887 * C2037 + C42889 * C2023 +
                     C42886 * C2034 + C42888 * C508 + C42885 * C521) *
                        C47996 +
                    (C42888 * C492 + C42885 * C509 + C42889 * C2015 +
                     C42886 * C2022 + C42890 * C2020 + C42887 * C2031) *
                        C47017 +
                    (C42888 * C510 + C42885 * C522 + C42889 * C2021 +
                     C42886 * C2033 + C42890 * C2032 + C42887 * C2038) *
                        C2901) *
                       C48010 * C48235 * C3806) *
                  C48035) /
                 (p * q * std::sqrt(p + q));
    d2ee[219] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C2533 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C48392 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C2534 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C48385 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C2535 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C48372 -
                    (C42890 * C493 + C42887 * C511 + C42889 * C488 +
                     C42886 * C501 + C42888 * C122 + C42885 * C132) *
                        C2536 -
                    (C42890 * C512 + C42887 * C523 + C42889 * C502 +
                     C42886 * C518 + C42888 * C133 + C42885 * C143) *
                        C48351) *
                       C48010 * C48235 * C3298 +
                   ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                     C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                        C2534 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C48392 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C2533) +
                    (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                     C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                        C48385 -
                    (C42890 * C2015 + C42887 * C2022 + C42889 * C492 +
                     C42886 * C509 + C42888 * C487 + C42885 * C499) *
                        C2535 -
                    (C42890 * C2021 + C42887 * C2033 + C42889 * C510 +
                     C42886 * C522 + C42888 * C500 + C42885 * C517) *
                        C48372 +
                    (C42888 * C488 + C42885 * C501 + C42889 * C493 +
                     C42886 * C511 + C42890 * C2303 + C42887 * C2304) *
                        C2536 +
                    (C42888 * C502 + C42885 * C518 + C42889 * C512 +
                     C42886 * C523 + C42890 * C2305 + C42887 * C2306) *
                        C48351) *
                       C48010 * C48235 * C48134) *
                  C48035) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C2641 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C2635 -
                     (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                      C42886 * C495 + C42888 * C120 + C42885 * C128) *
                         C2642 -
                     (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                      C42886 * C516 + C42888 * C129 + C42885 * C141) *
                         C47993) *
                        C48010 * C48235 * C3298 +
                    ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                      C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                         C2642 -
                     ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                       C42886 * C520 + C42888 * C496 + C42885 * C515) *
                          C2635 +
                      (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                       C42886 * C505 + C42888 * C486 + C42885 * C497) *
                          C2641) +
                     (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                      C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                         C47993) *
                        C48010 * C48235 * C48134) *
                       C48386 +
                   (((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                      C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                         C2642 -
                     ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                       C42886 * C950 + C42888 * C307 + C42885 * C326) *
                          C2635 +
                      (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                       C42886 * C940 + C42888 * C297 + C42885 * C308) *
                          C2641) +
                     (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                      C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                         C47993) *
                        C48010 * C48235 * C3298 +
                    ((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C2641 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C2635 -
                     (C42890 * C2418 + C42887 * C2422 + C42889 * C1296 +
                      C42886 * C1307 + C42888 * C936 + C42885 * C942) *
                         C2642 -
                     (C42890 * C2423 + C42887 * C2427 + C42889 * C1306 +
                      C42886 * C1323 + C42888 * C943 + C42885 * C951) *
                         C47993) *
                        C48010 * C48235 * C48134) *
                       C48374 +
                   (((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                      C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                         C2641 +
                     (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                      C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                         C2635 -
                     (C42890 * C1302 + C42887 * C1318 + C42889 * C1299 +
                      C42886 * C1313 + C42888 * C302 + C42885 * C318) *
                         C2642 -
                     (C42890 * C1319 + C42887 * C1329 + C42889 * C1312 +
                      C42886 * C1326 + C42888 * C319 + C42885 * C332) *
                         C47993) *
                        C48010 * C48235 * C3298 +
                    ((C42888 * C1299 + C42885 * C1313 + C42889 * C1302 +
                      C42886 * C1318 + C42890 * C7456 + C42887 * C7459) *
                         C2642 -
                     ((C42890 * C7458 + C42887 * C7461 + C42889 * C1317 +
                       C42886 * C1328 + C42888 * C1314 + C42885 * C1327) *
                          C2635 +
                      (C42890 * C7455 + C42887 * C7457 + C42889 * C1301 +
                       C42886 * C1316 + C42888 * C1300 + C42885 * C1315) *
                          C2641) +
                     (C42888 * C1312 + C42885 * C1326 + C42889 * C1319 +
                      C42886 * C1329 + C42890 * C7460 + C42887 * C7462) *
                         C47993) *
                        C48010 * C48235 * C48134) *
                       C48347)) /
                     (p * q * std::sqrt(p + q));
    d2ee[220] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C665 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C659 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C666 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C660 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C667 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C661 -
                    (C42890 * C493 + C42887 * C511 + C42889 * C488 +
                     C42886 * C501 + C42888 * C122 + C42885 * C132) *
                        C668 -
                    (C42890 * C512 + C42887 * C523 + C42889 * C502 +
                     C42886 * C518 + C42888 * C133 + C42885 * C143) *
                        C48351) *
                       C48010 * C48235 * C48047 * C48315 +
                   ((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                     C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                        C666 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C659 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C665) +
                    (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                     C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                        C660 -
                    (C42890 * C1295 + C42887 * C1305 + C42889 * C937 +
                     C42886 * C944 + C42888 * C298 + C42885 * C310) *
                        C667 -
                    (C42890 * C1304 + C42887 * C1322 + C42889 * C945 +
                     C42886 * C952 + C42888 * C311 + C42885 * C328) *
                        C661 +
                    (C42888 * C299 + C42885 * C312 + C42889 * C938 +
                     C42886 * C946 + C42890 * C2185 + C42887 * C2186) *
                        C668 +
                    (C42888 * C313 + C42885 * C329 + C42889 * C947 +
                     C42886 * C953 + C42890 * C2187 + C42887 * C2188) *
                        C48351) *
                       C48010 * C48235 * C48047 * C48094)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C47001 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C48298 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C46982 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C47993) *
                       C48010 * C48235 * C48047 * C1431 +
                   ((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                     C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                        C46982 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C48298 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C47001) +
                    (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                     C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                        C47993) *
                       C48010 * C48235 * C48047 * C1432 +
                   ((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                     C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                        C47001 +
                    (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                     C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                        C48298 -
                    (C42890 * C1302 + C42887 * C1318 + C42889 * C1299 +
                     C42886 * C1313 + C42888 * C302 + C42885 * C318) *
                        C46982 -
                    (C42890 * C1319 + C42887 * C1329 + C42889 * C1312 +
                     C42886 * C1326 + C42888 * C319 + C42885 * C332) *
                        C47993) *
                       C48010 * C48235 * C48047 * C1433 +
                   ((C42888 * C1162 + C42885 * C1170 + C42889 * C1714 +
                     C42886 * C1718 + C42890 * C6040 + C42887 * C6043) *
                        C46982 -
                    ((C42890 * C6042 + C42887 * C6045 + C42889 * C1717 +
                      C42886 * C1722 + C42888 * C1171 + C42885 * C1181) *
                         C48298 +
                     (C42890 * C6039 + C42887 * C6041 + C42889 * C1713 +
                      C42886 * C1716 + C42888 * C1163 + C42885 * C1172) *
                         C47001) +
                    (C42888 * C1169 + C42885 * C1180 + C42889 * C1719 +
                     C42886 * C1723 + C42890 * C6044 + C42887 * C6046) *
                        C47993) *
                       C48010 * C48235 * C48047 * C48357)) /
                     (p * q * std::sqrt(p + q));
    d2ee[221] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C293 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C287 -
                     (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                      C42886 * C495 + C42888 * C120 + C42885 * C128) *
                         C294 -
                     (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                      C42886 * C516 + C42888 * C129 + C42885 * C141) *
                         C288 +
                     (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                      C42886 * C499 + C42890 * C492 + C42887 * C509) *
                         C295 +
                     (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                      C42886 * C517 + C42890 * C510 + C42887 * C522) *
                         C48339) *
                        C48010 * C48235 * C48316 +
                    ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                      C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                         C294 -
                     ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                       C42886 * C520 + C42888 * C496 + C42885 * C515) *
                          C287 +
                      (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                       C42886 * C505 + C42888 * C486 + C42885 * C497) *
                          C293) +
                     (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                      C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                         C288 -
                     (C42890 * C2015 + C42887 * C2022 + C42889 * C492 +
                      C42886 * C509 + C42888 * C487 + C42885 * C499) *
                         C295 -
                     (C42890 * C2021 + C42887 * C2033 + C42889 * C510 +
                      C42886 * C522 + C42888 * C500 + C42885 * C517) *
                         C48339) *
                        C48010 * C48235 * C48134) *
                       C48315 +
                   (((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                      C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                         C294 -
                     ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                       C42886 * C950 + C42888 * C307 + C42885 * C326) *
                          C287 +
                      (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                       C42886 * C940 + C42888 * C297 + C42885 * C308) *
                          C293) +
                     (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                      C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                         C288 -
                     (C42890 * C1295 + C42887 * C1305 + C42889 * C937 +
                      C42886 * C944 + C42888 * C298 + C42885 * C310) *
                         C295 -
                     (C42890 * C1304 + C42887 * C1322 + C42889 * C945 +
                      C42886 * C952 + C42888 * C311 + C42885 * C328) *
                         C48339) *
                        C48010 * C48235 * C48316 +
                    ((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C293 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C287 -
                     (C42890 * C2418 + C42887 * C2422 + C42889 * C1296 +
                      C42886 * C1307 + C42888 * C936 + C42885 * C942) *
                         C294 -
                     (C42890 * C2423 + C42887 * C2427 + C42889 * C1306 +
                      C42886 * C1323 + C42888 * C943 + C42885 * C951) *
                         C288 +
                     (C42888 * C937 + C42885 * C944 + C42889 * C1295 +
                      C42886 * C1305 + C42890 * C2419 + C42887 * C2424) *
                         C295 +
                     (C42888 * C945 + C42885 * C952 + C42889 * C1304 +
                      C42886 * C1322 + C42890 * C2425 + C42887 * C2428) *
                         C48339) *
                        C48010 * C48235 * C48134) *
                       C48094)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C1160 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C47983) *
                        C48010 * C48235 * C48316 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C47983 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C1160) *
                        C48010 * C48235 * C48134) *
                       C1431 +
                   (((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C1160 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C47983) *
                        C48010 * C48235 * C48134 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C47983 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C1160) *
                        C48010 * C48235 * C48316) *
                       C1432 +
                   (((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                      C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                         C1160 +
                     (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                      C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                         C47983) *
                        C48010 * C48235 * C48316 -
                    ((C42890 * C7458 + C42887 * C7461 + C42889 * C1317 +
                      C42886 * C1328 + C42888 * C1314 + C42885 * C1327) *
                         C47983 +
                     (C42890 * C7455 + C42887 * C7457 + C42889 * C1301 +
                      C42886 * C1316 + C42888 * C1300 + C42885 * C1315) *
                         C1160) *
                        C48010 * C48235 * C48134) *
                       C1433 +
                   (((C42888 * C1713 + C42885 * C1716 + C42889 * C6039 +
                      C42886 * C6041 + C42890 * C23691 + C42887 * C23692) *
                         C1160 +
                     (C42888 * C1717 + C42885 * C1722 + C42889 * C6042 +
                      C42886 * C6045 + C42890 * C23693 + C42887 * C23694) *
                         C47983) *
                        C48010 * C48235 * C48134 -
                    ((C42890 * C6042 + C42887 * C6045 + C42889 * C1717 +
                      C42886 * C1722 + C42888 * C1171 + C42885 * C1181) *
                         C47983 +
                     (C42890 * C6039 + C42887 * C6041 + C42889 * C1713 +
                      C42886 * C1716 + C42888 * C1163 + C42885 * C1172) *
                         C1160) *
                        C48010 * C48235 * C48316) *
                       C48357)) /
                     (p * q * std::sqrt(p + q));
    d2ee[222] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C293 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C287 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C294 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C288 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C295 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C48339) *
                       C48010 * C48235 * C48047 * C48386 +
                   ((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                     C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                        C294 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C287 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C293) +
                    (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                     C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                        C288 -
                    (C42890 * C1295 + C42887 * C1305 + C42889 * C937 +
                     C42886 * C944 + C42888 * C298 + C42885 * C310) *
                        C295 -
                    (C42890 * C1304 + C42887 * C1322 + C42889 * C945 +
                     C42886 * C952 + C42888 * C311 + C42885 * C328) *
                        C48339) *
                       C48010 * C48235 * C48047 * C48374 +
                   ((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                     C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                        C293 +
                    (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                     C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                        C287 -
                    (C42890 * C1302 + C42887 * C1318 + C42889 * C1299 +
                     C42886 * C1313 + C42888 * C302 + C42885 * C318) *
                        C294 -
                    (C42890 * C1319 + C42887 * C1329 + C42889 * C1312 +
                     C42886 * C1326 + C42888 * C319 + C42885 * C332) *
                        C288 +
                    (C42888 * C303 + C42885 * C320 + C42889 * C1298 +
                     C42886 * C1311 + C42890 * C1303 + C42887 * C1320) *
                        C295 +
                    (C42888 * C321 + C42885 * C333 + C42889 * C1310 +
                     C42886 * C1325 + C42890 * C1321 + C42887 * C1330) *
                        C48339) *
                       C48010 * C48235 * C48047 * C48347)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                    C42886 * C497 + C42890 * C490 + C42887 * C505) *
                       C114 +
                   (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                    C42886 * C515 + C42890 * C506 + C42887 * C520) *
                       C102 -
                   (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                    C42886 * C495 + C42888 * C120 + C42885 * C128) *
                       C115 -
                   (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                    C42886 * C516 + C42888 * C129 + C42885 * C141) *
                       C103 +
                   (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                    C42886 * C499 + C42890 * C492 + C42887 * C509) *
                       C116 +
                   (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                    C42886 * C517 + C42890 * C510 + C42887 * C522) *
                       C104 -
                   (C42890 * C493 + C42887 * C511 + C42889 * C488 +
                    C42886 * C501 + C42888 * C122 + C42885 * C132) *
                       C117 -
                   (C42890 * C512 + C42887 * C523 + C42889 * C502 +
                    C42886 * C518 + C42888 * C133 + C42885 * C143) *
                       C105 +
                   (C42888 * C123 + C42885 * C134 + C42889 * C489 +
                    C42886 * C503 + C42890 * C494 + C42887 * C513) *
                       C118 +
                   (C42888 * C135 + C42885 * C144 + C42889 * C504 +
                    C42886 * C519 + C42890 * C514 + C42887 * C524) *
                       C106) *
                  C48010 * C48235 * C48047 * C48035) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C293 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C287 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C294 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C288 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C295 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C48339) *
                       C48010 * C48235 * C48387 +
                   ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                     C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                        C294 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C287 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C293) +
                    (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                     C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                        C288 -
                    (C42890 * C2015 + C42887 * C2022 + C42889 * C492 +
                     C42886 * C509 + C42888 * C487 + C42885 * C499) *
                        C295 -
                    (C42890 * C2021 + C42887 * C2033 + C42889 * C510 +
                     C42886 * C522 + C42888 * C500 + C42885 * C517) *
                        C48339) *
                       C48010 * C48235 * C48376 +
                   ((C42888 * C490 + C42885 * C505 + C42889 * C2017 +
                     C42886 * C2026 + C42890 * C2018 + C42887 * C2027) *
                        C293 +
                    (C42888 * C506 + C42885 * C520 + C42889 * C2025 +
                     C42886 * C2035 + C42890 * C2028 + C42887 * C2036) *
                        C287 -
                    (C42890 * C2019 + C42887 * C2029 + C42889 * C2016 +
                     C42886 * C2024 + C42888 * C491 + C42885 * C507) *
                        C294 -
                    (C42890 * C2030 + C42887 * C2037 + C42889 * C2023 +
                     C42886 * C2034 + C42888 * C508 + C42885 * C521) *
                        C288 +
                    (C42888 * C492 + C42885 * C509 + C42889 * C2015 +
                     C42886 * C2022 + C42890 * C2020 + C42887 * C2031) *
                        C295 +
                    (C42888 * C510 + C42885 * C522 + C42889 * C2021 +
                     C42886 * C2033 + C42890 * C2032 + C42887 * C2038) *
                        C48339) *
                       C48010 * C48235 * C48350) *
                  C48035) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C1089 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C48383 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C1090 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C48370 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C1091 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C48339) *
                       C48010 * C48235 * C48047 * C1086 +
                   ((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                     C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                        C1090 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C48383 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C1089) +
                    (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                     C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                        C48370 -
                    (C42890 * C1295 + C42887 * C1305 + C42889 * C937 +
                     C42886 * C944 + C42888 * C298 + C42885 * C310) *
                        C1091 -
                    (C42890 * C1304 + C42887 * C1322 + C42889 * C945 +
                     C42886 * C952 + C42888 * C311 + C42885 * C328) *
                        C48339) *
                       C48010 * C48235 * C48047 * C1087 +
                   ((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                     C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                        C1089 +
                    (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                     C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                        C48383 -
                    (C42890 * C1302 + C42887 * C1318 + C42889 * C1299 +
                     C42886 * C1313 + C42888 * C302 + C42885 * C318) *
                        C1090 -
                    (C42890 * C1319 + C42887 * C1329 + C42889 * C1312 +
                     C42886 * C1326 + C42888 * C319 + C42885 * C332) *
                        C48370 +
                    (C42888 * C303 + C42885 * C320 + C42889 * C1298 +
                     C42886 * C1311 + C42890 * C1303 + C42887 * C1320) *
                        C1091 +
                    (C42888 * C321 + C42885 * C333 + C42889 * C1310 +
                     C42886 * C1325 + C42890 * C1321 + C42887 * C1330) *
                        C48339) *
                       C48010 * C48235 * C48047 * C48347)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C1160 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C47983) *
                       C48010 * C48235 * C48047 * C1155 -
                   ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                     C42886 * C950 + C42888 * C307 + C42885 * C326) *
                        C47983 +
                    (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                     C42886 * C940 + C42888 * C297 + C42885 * C308) *
                        C1160) *
                       C48010 * C48235 * C48047 * C1156 +
                   ((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                     C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                        C1160 +
                    (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                     C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                        C47983) *
                       C48010 * C48235 * C48047 * C1157 -
                   ((C42890 * C6042 + C42887 * C6045 + C42889 * C1717 +
                     C42886 * C1722 + C42888 * C1171 + C42885 * C1181) *
                        C47983 +
                    (C42890 * C6039 + C42887 * C6041 + C42889 * C1713 +
                     C42886 * C1716 + C42888 * C1163 + C42885 * C1172) *
                        C1160) *
                       C48010 * C48235 * C48047 * C1158 +
                   ((C42888 * C1164 + C42885 * C1173 + C42889 * C6587 +
                     C42886 * C6589 + C42890 * C22667 + C42887 * C22668) *
                        C1160 +
                    (C42888 * C1174 + C42885 * C1182 + C42889 * C6590 +
                     C42886 * C6593 + C42890 * C22669 + C42887 * C22670) *
                        C47983) *
                       C48010 * C48235 * C48047 * C1159)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C1160 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C47983) *
                        C48010 * C48235 * C48387 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C47983 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C1160) *
                        C48010 * C48235 * C48376 +
                    ((C42888 * C490 + C42885 * C505 + C42889 * C2017 +
                      C42886 * C2026 + C42890 * C2018 + C42887 * C2027) *
                         C1160 +
                     (C42888 * C506 + C42885 * C520 + C42889 * C2025 +
                      C42886 * C2035 + C42890 * C2028 + C42887 * C2036) *
                         C47983) *
                        C48010 * C48235 * C48350) *
                       C1086 +
                   (((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C1160 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C47983) *
                        C48010 * C48235 * C48376 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C47983 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C1160) *
                        C48010 * C48235 * C48387 -
                    ((C42890 * C6982 + C42887 * C6985 + C42889 * C2421 +
                      C42886 * C2426 + C42888 * C1308 + C42885 * C1324) *
                         C47983 +
                     (C42890 * C6979 + C42887 * C6981 + C42889 * C2417 +
                      C42886 * C2420 + C42888 * C1297 + C42885 * C1309) *
                         C1160) *
                        C48010 * C48235 * C48350) *
                       C1087 +
                   (((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                      C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                         C1160 +
                     (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                      C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                         C47983) *
                        C48010 * C48235 * C48387 -
                    ((C42890 * C7458 + C42887 * C7461 + C42889 * C1317 +
                      C42886 * C1328 + C42888 * C1314 + C42885 * C1327) *
                         C47983 +
                     (C42890 * C7455 + C42887 * C7457 + C42889 * C1301 +
                      C42886 * C1316 + C42888 * C1300 + C42885 * C1315) *
                         C1160) *
                        C48010 * C48235 * C48376 +
                    ((C42888 * C1301 + C42885 * C1316 + C42889 * C7455 +
                      C42886 * C7457 + C42890 * C23341 + C42887 * C23342) *
                         C1160 +
                     (C42888 * C1317 + C42885 * C1328 + C42889 * C7458 +
                      C42886 * C7461 + C42890 * C23343 + C42887 * C23344) *
                         C47983) *
                        C48010 * C48235 * C48350) *
                       C48347)) /
                     (p * q * std::sqrt(p + q));
    d2ee[223] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C665 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C659 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C666 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C660 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C667 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C661 -
                    (C42890 * C493 + C42887 * C511 + C42889 * C488 +
                     C42886 * C501 + C42888 * C122 + C42885 * C132) *
                        C668 -
                    (C42890 * C512 + C42887 * C523 + C42889 * C502 +
                     C42886 * C518 + C42888 * C133 + C42885 * C143) *
                        C48351) *
                       C48010 * C48235 * C48316 +
                   ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                     C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                        C666 -
                    ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                      C42886 * C520 + C42888 * C496 + C42885 * C515) *
                         C659 +
                     (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                      C42886 * C505 + C42888 * C486 + C42885 * C497) *
                         C665) +
                    (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                     C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                        C660 -
                    (C42890 * C2015 + C42887 * C2022 + C42889 * C492 +
                     C42886 * C509 + C42888 * C487 + C42885 * C499) *
                        C667 -
                    (C42890 * C2021 + C42887 * C2033 + C42889 * C510 +
                     C42886 * C522 + C42888 * C500 + C42885 * C517) *
                        C661 +
                    (C42888 * C488 + C42885 * C501 + C42889 * C493 +
                     C42886 * C511 + C42890 * C2303 + C42887 * C2304) *
                        C668 +
                    (C42888 * C502 + C42885 * C518 + C42889 * C512 +
                     C42886 * C523 + C42890 * C2305 + C42887 * C2306) *
                        C48351) *
                       C48010 * C48235 * C48134) *
                  C48035) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                      C42886 * C497 + C42890 * C490 + C42887 * C505) *
                         C47001 +
                     (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                      C42886 * C515 + C42890 * C506 + C42887 * C520) *
                         C48298 -
                     (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                      C42886 * C495 + C42888 * C120 + C42885 * C128) *
                         C46982 -
                     (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                      C42886 * C516 + C42888 * C129 + C42885 * C141) *
                         C47993) *
                        C48010 * C48235 * C48316 +
                    ((C42888 * C485 + C42885 * C495 + C42889 * C491 +
                      C42886 * C507 + C42890 * C2016 + C42887 * C2024) *
                         C46982 -
                     ((C42890 * C2025 + C42887 * C2035 + C42889 * C506 +
                       C42886 * C520 + C42888 * C496 + C42885 * C515) *
                          C48298 +
                      (C42890 * C2017 + C42887 * C2026 + C42889 * C490 +
                       C42886 * C505 + C42888 * C486 + C42885 * C497) *
                          C47001) +
                     (C42888 * C498 + C42885 * C516 + C42889 * C508 +
                      C42886 * C521 + C42890 * C2023 + C42887 * C2034) *
                         C47993) *
                        C48010 * C48235 * C48134) *
                       C1086 +
                   (((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                      C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                         C46982 -
                     ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                       C42886 * C950 + C42888 * C307 + C42885 * C326) *
                          C48298 +
                      (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                       C42886 * C940 + C42888 * C297 + C42885 * C308) *
                          C47001) +
                     (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                      C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                         C47993) *
                        C48010 * C48235 * C48316 +
                    ((C42888 * C935 + C42885 * C940 + C42889 * C1297 +
                      C42886 * C1309 + C42890 * C2417 + C42887 * C2420) *
                         C47001 +
                     (C42888 * C941 + C42885 * C950 + C42889 * C1308 +
                      C42886 * C1324 + C42890 * C2421 + C42887 * C2426) *
                         C48298 -
                     (C42890 * C2418 + C42887 * C2422 + C42889 * C1296 +
                      C42886 * C1307 + C42888 * C936 + C42885 * C942) *
                         C46982 -
                     (C42890 * C2423 + C42887 * C2427 + C42889 * C1306 +
                      C42886 * C1323 + C42888 * C943 + C42885 * C951) *
                         C47993) *
                        C48010 * C48235 * C48134) *
                       C1087 +
                   (((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                      C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                         C47001 +
                     (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                      C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                         C48298 -
                     (C42890 * C1302 + C42887 * C1318 + C42889 * C1299 +
                      C42886 * C1313 + C42888 * C302 + C42885 * C318) *
                         C46982 -
                     (C42890 * C1319 + C42887 * C1329 + C42889 * C1312 +
                      C42886 * C1326 + C42888 * C319 + C42885 * C332) *
                         C47993) *
                        C48010 * C48235 * C48316 +
                    ((C42888 * C1299 + C42885 * C1313 + C42889 * C1302 +
                      C42886 * C1318 + C42890 * C7456 + C42887 * C7459) *
                         C46982 -
                     ((C42890 * C7458 + C42887 * C7461 + C42889 * C1317 +
                       C42886 * C1328 + C42888 * C1314 + C42885 * C1327) *
                          C48298 +
                      (C42890 * C7455 + C42887 * C7457 + C42889 * C1301 +
                       C42886 * C1316 + C42888 * C1300 + C42885 * C1315) *
                          C47001) +
                     (C42888 * C1312 + C42885 * C1326 + C42889 * C1319 +
                      C42886 * C1329 + C42890 * C7460 + C42887 * C7462) *
                         C47993) *
                        C48010 * C48235 * C48134) *
                       C48347)) /
                     (p * q * std::sqrt(p + q));
    d2ee[224] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                    C42886 * C497 + C42890 * C490 + C42887 * C505) *
                       C114 +
                   (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                    C42886 * C515 + C42890 * C506 + C42887 * C520) *
                       C102 -
                   (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                    C42886 * C495 + C42888 * C120 + C42885 * C128) *
                       C115 -
                   (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                    C42886 * C516 + C42888 * C129 + C42885 * C141) *
                       C103 +
                   (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                    C42886 * C499 + C42890 * C492 + C42887 * C509) *
                       C116 +
                   (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                    C42886 * C517 + C42890 * C510 + C42887 * C522) *
                       C104 -
                   (C42890 * C493 + C42887 * C511 + C42889 * C488 +
                    C42886 * C501 + C42888 * C122 + C42885 * C132) *
                       C117 -
                   (C42890 * C512 + C42887 * C523 + C42889 * C502 +
                    C42886 * C518 + C42888 * C133 + C42885 * C143) *
                       C105 +
                   (C42888 * C123 + C42885 * C134 + C42889 * C489 +
                    C42886 * C503 + C42890 * C494 + C42887 * C513) *
                       C118 +
                   (C42888 * C135 + C42885 * C144 + C42889 * C504 +
                    C42886 * C519 + C42890 * C514 + C42887 * C524) *
                       C106) *
                  C48010 * C48235 * C48047 * C48035) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C293 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C287 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C294 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C288 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C295 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C48339) *
                       C48010 * C48235 * C48047 * C48386 +
                   ((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                     C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                        C294 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C287 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C293) +
                    (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                     C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                        C288 -
                    (C42890 * C1295 + C42887 * C1305 + C42889 * C937 +
                     C42886 * C944 + C42888 * C298 + C42885 * C310) *
                        C295 -
                    (C42890 * C1304 + C42887 * C1322 + C42889 * C945 +
                     C42886 * C952 + C42888 * C311 + C42885 * C328) *
                        C48339) *
                       C48010 * C48235 * C48047 * C48374 +
                   ((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                     C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                        C293 +
                    (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                     C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                        C287 -
                    (C42890 * C1302 + C42887 * C1318 + C42889 * C1299 +
                     C42886 * C1313 + C42888 * C302 + C42885 * C318) *
                        C294 -
                    (C42890 * C1319 + C42887 * C1329 + C42889 * C1312 +
                     C42886 * C1326 + C42888 * C319 + C42885 * C332) *
                        C288 +
                    (C42888 * C303 + C42885 * C320 + C42889 * C1298 +
                     C42886 * C1311 + C42890 * C1303 + C42887 * C1320) *
                        C295 +
                    (C42888 * C321 + C42885 * C333 + C42889 * C1310 +
                     C42886 * C1325 + C42890 * C1321 + C42887 * C1330) *
                        C48339) *
                       C48010 * C48235 * C48047 * C48347)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C1089 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C48383 -
                    (C42890 * C491 + C42887 * C507 + C42889 * C485 +
                     C42886 * C495 + C42888 * C120 + C42885 * C128) *
                        C1090 -
                    (C42890 * C508 + C42887 * C521 + C42889 * C498 +
                     C42886 * C516 + C42888 * C129 + C42885 * C141) *
                        C48370 +
                    (C42888 * C121 + C42885 * C130 + C42889 * C487 +
                     C42886 * C499 + C42890 * C492 + C42887 * C509) *
                        C1091 +
                    (C42888 * C131 + C42885 * C142 + C42889 * C500 +
                     C42886 * C517 + C42890 * C510 + C42887 * C522) *
                        C48339) *
                       C48010 * C48235 * C48047 * C1086 +
                   ((C42888 * C296 + C42885 * C306 + C42889 * C936 +
                     C42886 * C942 + C42890 * C1296 + C42887 * C1307) *
                        C1090 -
                    ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                      C42886 * C950 + C42888 * C307 + C42885 * C326) *
                         C48383 +
                     (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                      C42886 * C940 + C42888 * C297 + C42885 * C308) *
                         C1089) +
                    (C42888 * C309 + C42885 * C327 + C42889 * C943 +
                     C42886 * C951 + C42890 * C1306 + C42887 * C1323) *
                        C48370 -
                    (C42890 * C1295 + C42887 * C1305 + C42889 * C937 +
                     C42886 * C944 + C42888 * C298 + C42885 * C310) *
                        C1091 -
                    (C42890 * C1304 + C42887 * C1322 + C42889 * C945 +
                     C42886 * C952 + C42888 * C311 + C42885 * C328) *
                        C48339) *
                       C48010 * C48235 * C48047 * C1087 +
                   ((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                     C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                        C1089 +
                    (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                     C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                        C48383 -
                    (C42890 * C1302 + C42887 * C1318 + C42889 * C1299 +
                     C42886 * C1313 + C42888 * C302 + C42885 * C318) *
                        C1090 -
                    (C42890 * C1319 + C42887 * C1329 + C42889 * C1312 +
                     C42886 * C1326 + C42888 * C319 + C42885 * C332) *
                        C48370 +
                    (C42888 * C303 + C42885 * C320 + C42889 * C1298 +
                     C42886 * C1311 + C42890 * C1303 + C42887 * C1320) *
                        C1091 +
                    (C42888 * C321 + C42885 * C333 + C42889 * C1310 +
                     C42886 * C1325 + C42890 * C1321 + C42887 * C1330) *
                        C48339) *
                       C48010 * C48235 * C48047 * C48347)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C42888 * C119 + C42885 * C126 + C42889 * C486 +
                     C42886 * C497 + C42890 * C490 + C42887 * C505) *
                        C1160 +
                    (C42888 * C127 + C42885 * C140 + C42889 * C496 +
                     C42886 * C515 + C42890 * C506 + C42887 * C520) *
                        C47983) *
                       C48010 * C48235 * C48047 * C1155 -
                   ((C42890 * C1308 + C42887 * C1324 + C42889 * C941 +
                     C42886 * C950 + C42888 * C307 + C42885 * C326) *
                        C47983 +
                    (C42890 * C1297 + C42887 * C1309 + C42889 * C935 +
                     C42886 * C940 + C42888 * C297 + C42885 * C308) *
                        C1160) *
                       C48010 * C48235 * C48047 * C1156 +
                   ((C42888 * C301 + C42885 * C316 + C42889 * C1300 +
                     C42886 * C1315 + C42890 * C1301 + C42887 * C1316) *
                        C1160 +
                    (C42888 * C317 + C42885 * C331 + C42889 * C1314 +
                     C42886 * C1327 + C42890 * C1317 + C42887 * C1328) *
                        C47983) *
                       C48010 * C48235 * C48047 * C1157 -
                   ((C42890 * C6042 + C42887 * C6045 + C42889 * C1717 +
                     C42886 * C1722 + C42888 * C1171 + C42885 * C1181) *
                        C47983 +
                    (C42890 * C6039 + C42887 * C6041 + C42889 * C1713 +
                     C42886 * C1716 + C42888 * C1163 + C42885 * C1172) *
                        C1160) *
                       C48010 * C48235 * C48047 * C1158 +
                   ((C42888 * C1164 + C42885 * C1173 + C42889 * C6587 +
                     C42886 * C6589 + C42890 * C22667 + C42887 * C22668) *
                        C1160 +
                    (C42888 * C1174 + C42885 * C1182 + C42889 * C6590 +
                     C42886 * C6593 + C42890 * C22669 + C42887 * C22670) *
                        C47983) *
                       C48010 * C48235 * C48047 * C1159)) /
                     (p * q * std::sqrt(p + q));
}
