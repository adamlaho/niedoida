/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AC_zy.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_13_32(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C46936 = ce * de;
    const double C46935 = ce + de;
    const double C46934 = 0 * de;
    const double C46933 = yC - yD;
    const double C46974 = 0 * ce;
    const double C46969 = 0 * de;
    const double C46968 = 0 * de;
    const double C47019 = 0 * de;
    const double C47060 = ae + be;
    const double C47059 = zA - zB;
    const double C47074 = ae * be;
    const double C47072 = 0 * be;
    const double C47089 = yP - yQ;
    const double C47088 = zP - zQ;
    const double C47087 = p + q;
    const double C47086 = p * q;
    const double C47098 = bs[4];
    const double C47096 = xP - xQ;
    const double C47104 = bs[5];
    const double C47111 = bs[6];
    const double C47123 = bs[7];
    const double C47139 = bs[3];
    const double C47655 = bs[2];
    const double C115 = bs[0];
    const double C48022 = xA - xB;
    const double C48037 = xC - xD;
    const double C48085 = zC - zD;
    const double C48255 = yA - yB;
    const double C46937 = std::pow(C46935, 2);
    const double C46952 = 2 * C46935;
    const double C46970 = C46934 / C46935;
    const double C46938 = C46936 * C46933;
    const double C46971 = C46933 * C46934;
    const double C48068 = std::pow(C46933, 2);
    const double C48127 = C46933 * de;
    const double C48125 = C46933 * ce;
    const double C46981 = C46974 / C46935;
    const double C46976 = C46933 * C46969;
    const double C47020 = C47019 / C46935;
    const double C47073 = std::pow(C47060, 2);
    const double C47099 = C46935 * C47060;
    const double C136 = (-(std::pow((2 * p * q) / (p + q), 2) * bs[2] *
                           (zP - zQ) * (yP - yQ) * ae * ce) /
                         C46935) /
                        C47060;
    const double C137 = (-((xP - xQ) * std::pow(-(2 * p * q) / (p + q), 3) *
                           bs[3] * (zP - zQ) * (yP - yQ) * ae * ce) /
                         C46935) /
                        C47060;
    const double C48032 = 2 * C47060;
    const double C48289 = std::pow(C47059, 2);
    const double C48375 = C47059 * be;
    const double C48373 = C47059 * ae;
    const double C47076 = C47074 * C47059;
    const double C47179 = C47089 * ce;
    const double C47235 = std::pow(C47089, 2);
    const double C47091 = C47088 * C47089;
    const double C47140 = C47088 * ae;
    const double C47330 = std::pow(C47088, 2);
    const double C47090 = 2 * C47086;
    const double C47105 = std::pow(C47096, 2);
    const double C48023 = std::pow(C48022, 2);
    const double C48340 = C48022 * be;
    const double C48339 = C48022 * ae;
    const double C48040 = C48037 * de;
    const double C48039 = C48037 * ce;
    const double C48038 = std::pow(C48037, 2);
    const double C48086 = std::pow(C48085, 2);
    const double C48169 = C48085 * de;
    const double C48167 = C48085 * ce;
    const double C48274 = std::pow(C48255, 2);
    const double C48374 = C48255 * be;
    const double C48372 = C48255 * ae;
    const double C46939 = 2 * C46937;
    const double C48352 = 4 * C46937;
    const double C48052 = std::pow(C46952, -1);
    const double C48353 = C46937 * C46952;
    const double C48349 = std::pow(C46952, -2);
    const double C46979 = C46971 / C46935;
    const double C48069 = C48068 * C46936;
    const double C48354 = std::pow(C48125, 2);
    const double C46982 = C46976 / C46935;
    const double C47075 = 2 * C47073;
    const double C48341 = std::pow(C48032, -1);
    const double C48290 = C48289 * C47074;
    const double C47181 = C47098 * C47179;
    const double C47185 = C47104 * C47179;
    const double C47188 = C47139 * C47179;
    const double C47197 = C47111 * C47179;
    const double C47209 = C47123 * C47179;
    const double C47093 = C47091 * ae;
    const double C47141 = C47139 * C47140;
    const double C47145 = C47098 * C47140;
    const double C47150 = C47104 * C47140;
    const double C47157 = C47111 * C47140;
    const double C47168 = C47123 * C47140;
    const double C47092 = C47090 / C47087;
    const double C122 = (-(bs[1] * C47140 * C47090) / C47087) / C47060;
    const double C123 = (bs[1] * C47179 * C47090) / (C47087 * C46935);
    const double C116 = -(C47096 * bs[1] * C47090) / C47087;
    const double C305 = -(C47089 * bs[1] * C47090) / C47087;
    const double C520 = -(C47088 * bs[1] * C47090) / C47087;
    const double C48024 = C48023 * C47074;
    const double C48342 = std::pow(C48039, 2);
    const double C48041 = C48038 * C46936;
    const double C48087 = C48086 * C46936;
    const double C48356 = std::pow(C48167, 2);
    const double C48275 = C48274 * C47074;
    const double C46973 = C46934 / C46939;
    const double C46978 = C46969 / C46939;
    const double C46977 = C46968 / C46939;
    const double C48386 = C46935 * C48352;
    const double C48387 = 4 * C48353;
    const double C46983 = 0 - C46979;
    const double C48070 = C48069 / C46935;
    const double C46986 = 0 - C46982;
    const double C48291 = C48290 / C47060;
    const double C47094 = C47093 * ce;
    const double C47097 = std::pow(C47092, 4);
    const double C47103 = -C47092;
    const double C47110 = std::pow(C47092, 6);
    const double C47656 = std::pow(C47092, 2);
    const double C124 =
        (C47096 * std::pow(C47092, 2) * bs[2] * C47140) / C47060;
    const double C125 =
        -(C47096 * std::pow(C47092, 2) * bs[2] * C47179) / C46935;
    const double C315 =
        (C47089 * std::pow(C47092, 2) * bs[2] * C47140) / C47060;
    const double C316 =
        (ce * bs[1] * C47090) / (C47087 * C46935) -
        (C47089 * std::pow(C47092, 2) * bs[2] * C47179) / C46935;
    const double C48025 = C48024 / C47060;
    const double C48042 = C48041 / C46935;
    const double C48088 = C48087 / C46935;
    const double C48276 = C48275 / C47060;
    const double C46987 = C46983 * ce;
    const double C48071 = -C48070;
    const double C46990 = C46986 * ce;
    const double C48292 = -C48291;
    const double C47100 = C47098 * C47094;
    const double C47107 = C47104 * C47094;
    const double C47113 = C47111 * C47094;
    const double C47126 = C47123 * C47094;
    const double C138 =
        (-(std::pow(C47092, 4) * bs[4] * C47094 * std::pow(xP - xQ, 2)) /
         C46935) /
            C47060 -
        (std::pow(-C47092, 3) * bs[3] * C47094) / (C46935 * C47060);
    const double C47146 = C47097 * C47145;
    const double C47182 = C47097 * C47181;
    const double C47227 = C47098 * C47097;
    const double C47106 = std::pow(C47103, 5);
    const double C47122 = std::pow(C47103, 7);
    const double C47138 = std::pow(C47103, 3);
    const double C335 =
        (-(C47089 * std::pow(C47103, 3) * bs[3] * C47094) / C46935) / C47060 -
        (std::pow(C47092, 2) * bs[2] * C47088 * ae * ce) / C47099;
    const double C47159 = C47110 * C47157;
    const double C47199 = C47110 * C47197;
    const double C47305 = C47111 * C47110;
    const double C47657 = C47655 * C47656;
    const double C533 = -(C47088 * C47656 * C47655 * C47179) / C46935;
    const double C534 = (C47088 * C47656 * C47655 * C47140) / C47060 -
                        (ae * bs[1] * C47090) / (C47087 * C47060);
    const double C48026 = -C48025;
    const double C48043 = -C48042;
    const double C48089 = -C48088;
    const double C48277 = -C48276;
    const double C46991 = C46987 / C46935;
    const double C48072 = std::exp(C48071);
    const double C46994 = C46990 / C46935;
    const double C48293 = std::exp(C48292);
    const double C47101 = C47097 * C47100;
    const double C47114 = C47110 * C47113;
    const double C47147 = C47096 * C47146;
    const double C47234 = C47146 * ce;
    const double C47232 = C47089 * C47146;
    const double C47773 = C47088 * C47146;
    const double C47191 = C47096 * C47182;
    const double C47273 = C47089 * C47182;
    const double C47329 = ae * C47182;
    const double C47327 = C47088 * C47182;
    const double C47268 = C47096 * C47227;
    const double C47279 = C47089 * C47227;
    const double C47278 = C47227 * ce;
    const double C47667 = C47227 * C47105;
    const double C47722 = C47227 * C47235;
    const double C47776 = C47227 * C47330;
    const double C47848 = C47088 * C47227;
    const double C47847 = C47227 * ae;
    const double C47108 = C47106 * C47107;
    const double C47151 = C47106 * C47150;
    const double C47186 = C47106 * C47185;
    const double C47229 = C47104 * C47106;
    const double C47128 = C47122 * C47126;
    const double C47170 = C47122 * C47168;
    const double C47212 = C47122 * C47209;
    const double C47142 = C47138 * C47141;
    const double C47189 = C47138 * C47188;
    const double C47266 = C47139 * C47138;
    const double C550 =
        (-(C47088 * C47138 * C47139 * C47094) / C46935) / C47060 -
        (ae * std::pow(C47092, 2) * bs[2] * C47179) / C47099;
    const double C47160 = C47159 * C47105;
    const double C47167 = C47096 * C47159;
    const double C47370 = C47159 * C47235;
    const double C47522 = C47159 * ce;
    const double C47520 = C47089 * C47159;
    const double C47911 = C47088 * C47159;
    const double C47201 = C47199 * C47105;
    const double C47208 = C47096 * C47199;
    const double C47413 = C47089 * C47199;
    const double C47475 = C47199 * C47330;
    const double C47609 = ae * C47199;
    const double C47607 = C47088 * C47199;
    const double C47306 = C47305 * C47105;
    const double C47433 = C47096 * C47305;
    const double C47553 = C47305 * C47235;
    const double C47552 = C47089 * C47305;
    const double C47551 = C47305 * ce;
    const double C47915 = C47305 * C47330;
    const double C117 = C47657 * C47105 - (bs[1] * C47090) / C47087;
    const double C306 = C47657 * C47235 - (bs[1] * C47090) / C47087;
    const double C307 = C47089 * C47096 * C47657;
    const double C517 = C47088 * C47096 * C47657;
    const double C522 = C47657 * C47330 - (bs[1] * C47090) / C47087;
    const double C1004 = C47088 * C47089 * C47657;
    const double C48027 = std::exp(C48026);
    const double C48044 = std::exp(C48043);
    const double C48090 = std::exp(C48089);
    const double C48278 = std::exp(C48277);
    const double C46995 = C46991 - C46978;
    const double C46940 = C46938 * C48072;
    const double C114 = -(2 * ce * de * (yC - yD) * C48072) / (ce + de);
    const double C48126 = C48072 / C46952;
    const double C48128 = C48072 * C48125;
    const double C48135 = C48052 * C48072;
    const double C48360 = C48072 * C48127;
    const double C48390 = C48349 * C48072;
    const double C48388 = C48072 * C48354;
    const double C46998 = C46994 - C46977;
    const double C151 = C48293 * C138;
    const double C147 = C48293 * C137;
    const double C145 = C48293 * C124;
    const double C5202 = C48293 * C335;
    const double C5200 = C48293 * C315;
    const double C47077 = C47076 * C48293;
    const double C113 = -(2 * ae * be * (zA - zB) * C48293) / (ae + be);
    const double C10756 =
        ((C48293 - (C47059 * 2 * ae * be * C47059 * C48293) / C47060) * ae) /
            C47060 -
        (0 * be) / (2 * std::pow(C47060, 2));
    const double C10757 =
        (0 * ae) / C47060 - (ae * be * C47059 * C48293) / std::pow(C47060, 2);
    const double C31632 =
        (-(0 * be) / C47060) / (2 * C47060) -
        ((C48293 - (C47059 * 2 * ae * be * C47059 * C48293) / C47060) * be) /
            C47060;
    const double C31633 =
        (-(2 * ae * be * C47059 * C48293) / C47060) / (2 * C47060) -
        (0 * be) / C47060;
    const double C48410 = C48341 * C48293;
    const double C48409 = C48293 * C48373;
    const double C31630 = -(C48293 * C48375) / C47060;
    const double C139 =
        (-2 * C47096 * C47101) / C47099 +
        C47096 *
            ((-(std::pow(-C47092, 5) * bs[5] * C47094 * std::pow(C47096, 2)) /
              C46935) /
                 C47060 -
             C47101 / C47099);
    const double C547 = (-(C47088 * C47096 * C47101) / C46935) / C47060 -
                        (ae * C47096 * C47138 * C47139 * C47089 * ce) / C47099;
    const double C47115 = C47114 * C47105;
    const double C47124 = C47114 / C47099;
    const double C47121 = C47096 * C47114;
    const double C47368 = C47089 * C47114;
    const double C47473 = C47088 * C47114;
    const double C47237 = C47234 / C47099;
    const double C47332 = C47329 / C47099;
    const double C47287 = C47268 * ce;
    const double C47673 = 2 * C47268;
    const double C47728 = C47089 * C47268;
    const double C47783 = C47088 * C47268;
    const double C47782 = C47268 * ae;
    const double C47281 = C47279 * ce;
    const double C47809 = 2 * C47279;
    const double C47828 = C47088 * C47279;
    const double C47827 = C47279 * ae;
    const double C47853 = 2 * C47848;
    const double C47851 = C47848 * ae;
    const double C47112 = C47108 / C47099;
    const double C47233 = C47089 * C47108;
    const double C47244 = C47096 * C47108;
    const double C47328 = C47088 * C47108;
    const double C140 =
        3 * ((-(C47108 * C47105) / C46935) / C47060 - C47101 / C47099) +
        C47096 * ((-2 * C47096 * C47108) / C47099 +
                  C47096 * ((-(std::pow(C47092, 6) * bs[6] * C47094 * C47105) /
                             C46935) /
                                C47060 -
                            C47108 / C47099));
    const double C338 =
        (-(C47089 * C47147 * ce) / C46935) / C47060 -
        (C47096 * C47101) / C47099 +
        C47089 * ((-(C47089 * C47096 * C47108) / C46935) / C47060 -
                  (C47147 * ce) / C47099);
    const double C548 =
        C47088 * ((-(C47108 * C47105) / C46935) / C47060 - C47101 / C47099) -
        (ae * (C47097 * C47098 * C47179 * C47105 + C47138 * C47139 * C47179)) /
            C47099;
    const double C553 =
        (-(ae * C47088 * C47191) / C46935) / C47060 -
        (C47096 * C47101) / C47099 +
        C47088 * ((-(C47088 * C47096 * C47108) / C46935) / C47060 -
                  (ae * C47191) / C47099);
    const double C1020 =
        C47088 * ((-(C47089 * C47096 * C47108) / C46935) / C47060 -
                  (C47147 * ce) / C47099) -
        (ae * (C47089 * C47191 + C47096 * C47139 * C47138 * ce)) / C47099;
    const double C47152 = C47151 * C47105;
    const double C47156 = C47096 * C47151;
    const double C47238 = C47151 * C47235;
    const double C47369 = C47151 * ce;
    const double C47367 = C47089 * C47151;
    const double C47846 = C47088 * C47151;
    const double C47193 = C47186 * C47105;
    const double C47196 = C47096 * C47186;
    const double C47277 = C47089 * C47186;
    const double C47333 = C47186 * C47330;
    const double C47474 = ae * C47186;
    const double C47472 = C47088 * C47186;
    const double C47270 = C47229 * C47105;
    const double C47291 = C47096 * C47229;
    const double C47416 = C47229 * C47235;
    const double C47415 = C47089 * C47229;
    const double C47414 = C47229 * ce;
    const double C47849 = C47229 * C47330;
    const double C47913 = C47088 * C47229;
    const double C47912 = C47229 * ae;
    const double C47129 = C47128 * C47105;
    const double C47390 = C47096 * C47128;
    const double C47521 = C47089 * C47128;
    const double C47608 = C47088 * C47128;
    const double C47171 = C47170 * C47105;
    const double C47392 = C47096 * C47170;
    const double C47524 = C47170 * C47235;
    const double C47214 = C47212 * C47105;
    const double C47432 = C47096 * C47212;
    const double C47550 = C47089 * C47212;
    const double C47611 = C47212 * C47330;
    const double C336 = (-(C47089 * C47142 * ce) / C46935) / C47060 -
                        (C47138 * C47139 * C47094) / C47099 +
                        C47089 * ((-(C47089 * C47101) / C46935) / C47060 -
                                  (C47142 * ce) / C47099);
    const double C337 = (-(C47089 * C47096 * C47101) / C46935) / C47060 -
                        (C47096 * C47142 * ce) / C47099;
    const double C339 =
        C47089 * ((-(C47108 * C47105) / C46935) / C47060 - C47101 / C47099) -
        ((C47142 + C47146 * C47105) * ce) / C47099;
    const double C1290 =
        2 * ((-(C47089 * C47101) / C46935) / C47060 - (C47142 * ce) / C47099) -
        ((C47142 + C47146 * std::pow(C47089, 2)) * ce) / C47099 +
        C47089 *
            ((-(C47089 * C47146 * ce) / C46935) / C47060 - C47101 / C47099 +
             C47089 * ((-(C47089 * C47108) / C46935) / C47060 -
                       (C47146 * ce) / C47099));
    const double C126 =
        (std::pow(C47092, 2) * bs[2] * C47140 + C47142 * C47105) / C47060;
    const double C129 =
        (2 * C47096 * C47142 + C47096 * (C47142 + C47146 * C47105)) / C47060;
    const double C317 =
        (std::pow(C47092, 2) * bs[2] * C47140 + C47142 * C47235) / C47060;
    const double C319 = (C47089 * C47096 * C47142) / C47060;
    const double C321 = (C47096 * C47142 + C47147 * C47235) / C47060;
    const double C323 = (C47089 * (C47142 + C47146 * C47105)) / C47060;
    const double C527 =
        (C47088 * C47096 * C47142 + C47096 * C47657 * ae) / C47060;
    const double C537 =
        (C47656 * C47655 * C47140 + C47088 * (C47088 * C47142 + C47657 * ae) +
         C47088 * C47657 * ae) /
        C47060;
    const double C1009 =
        (C47088 * C47089 * C47142 + C47089 * C47657 * ae) / C47060;
    const double C1278 =
        (2 * C47089 * C47142 + C47089 * (C47142 + C47146 * C47235)) / C47060;
    const double C552 = (-(ae * C47088 * C47189) / C46935) / C47060 -
                        (C47138 * C47139 * C47094) / C47099 +
                        C47088 * ((-(C47088 * C47101) / C46935) / C47060 -
                                  (ae * C47189) / C47099);
    const double C1019 =
        C47088 *
            ((-(C47089 * C47101) / C46935) / C47060 - (C47142 * ce) / C47099) -
        (ae * (C47089 * C47189 + bs[2] * std::pow(C47092, 2) * ce)) / C47099;
    const double C2176 =
        2 * ((-(C47088 * C47101) / C46935) / C47060 - (ae * C47189) / C47099) -
        (ae * (C47182 * std::pow(C47088, 2) + C47189)) / C47099 +
        C47088 *
            ((-(ae * C47088 * C47182) / C46935) / C47060 - C47101 / C47099 +
             C47088 * ((-(C47088 * C47108) / C46935) / C47060 -
                       (ae * C47182) / C47099));
    const double C127 =
        -(C47189 * C47105 + std::pow(C47092, 2) * bs[2] * C47179) / C46935;
    const double C128 = (-2 * C47096 * C47189) / C46935 -
                        (C47096 * (C47182 * C47105 + C47189)) / C46935;
    const double C318 = -(C47089 * (C47089 * C47189 + C47657 * ce) +
                          C47656 * C47655 * C47179 + C47089 * C47657 * ce) /
                        C46935;
    const double C320 =
        -(C47089 * C47096 * C47189 + C47096 * C47657 * ce) / C46935;
    const double C528 = -(C47088 * C47096 * C47189) / C46935;
    const double C530 = -(C47088 * (C47182 * C47105 + C47189)) / C46935;
    const double C538 = -(C47189 * C47330 + C47656 * C47655 * C47179) / C46935;
    const double C540 = -(C47191 * C47330 + C47096 * C47189) / C46935;
    const double C1010 = -(C47088 * (C47089 * C47189 + C47657 * ce)) / C46935;
    const double C2166 = (-2 * C47088 * C47189) / C46935 -
                         (C47088 * (C47182 * C47330 + C47189)) / C46935;
    const double C47274 = C47266 * ce;
    const double C47662 = C47096 * C47266;
    const double C47668 = C47266 + C47667;
    const double C47721 = C47089 * C47266;
    const double C47723 = C47266 + C47722;
    const double C47775 = C47088 * C47266;
    const double C47774 = C47266 * ae;
    const double C47778 = C47266 + C47776;
    const double C324 = -(C47089 * (C47182 * C47105 + C47189) +
                          (C47657 + C47266 * C47105) * ce) /
                        C46935;
    const double C529 = (C47088 * (C47142 + C47146 * C47105) +
                         (C47657 + C47266 * C47105) * ae) /
                        C47060;
    const double C1415 = (C47088 * (C47142 + C47146 * C47235) +
                          (C47657 + C47266 * C47235) * ae) /
                         C47060;
    const double C2167 =
        (2 * (C47088 * C47142 + C47657 * ae) +
         C47088 * (C47142 + C47088 * (C47088 * C47146 + C47266 * ae) +
                   C47088 * C47266 * ae) +
         (C47657 + C47266 * C47330) * ae) /
        C47060;
    const double C118 =
        2 * C47096 * C47657 + C47096 * (C47657 + C47266 * C47105);
    const double C309 = C47089 * (C47657 + C47266 * C47105);
    const double C518 = C47088 * (C47657 + C47266 * C47105);
    const double C1272 =
        2 * C47089 * C47657 + C47089 * (C47657 + C47266 * C47235);
    const double C1406 = C47088 * (C47657 + C47266 * C47235);
    const double C2158 =
        2 * C47088 * C47657 + C47088 * (C47657 + C47266 * C47330);
    const double C47161 = C47151 + C47160;
    const double C47169 = 2 * C47167;
    const double C47249 = C47167 * C47235;
    const double C47391 = C47167 * ce;
    const double C47388 = C47089 * C47167;
    const double C47861 = C47088 * C47167;
    const double C47375 = C47151 + C47370;
    const double C47528 = C47522 / C47099;
    const double C47529 = 2 * C47520;
    const double C47526 = C47520 * ce;
    const double C47895 = C47088 * C47520;
    const double C47202 = C47201 + C47186;
    const double C47211 = -2 * C47208;
    const double C47290 = C47089 * C47208;
    const double C47342 = C47208 * C47330;
    const double C47497 = ae * C47208;
    const double C47495 = C47088 * C47208;
    const double C47480 = C47475 + C47186;
    const double C47615 = C47609 / C47099;
    const double C47617 = -2 * C47607;
    const double C47613 = ae * C47607;
    const double C47307 = C47229 + C47306;
    const double C47438 = C47433 * C47235;
    const double C47437 = C47089 * C47433;
    const double C47436 = C47433 * ce;
    const double C47864 = C47433 * C47330;
    const double C47559 = C47229 + C47553;
    const double C47558 = C47552 * ce;
    const double C47898 = C47552 * C47330;
    const double C47919 = C47229 + C47915;
    const double C48377 = C48341 * C48027;
    const double C48376 = C48027 * C48339;
    const double C5040 = -(C48027 * C48340) / C47060;
    const double C48046 = C48044 * C48039;
    const double C48045 = C48044 / C46952;
    const double C48054 = C48052 * C48044;
    const double C48345 = C48044 * C48040;
    const double C48384 = C48349 * C48044;
    const double C48378 = C48044 * C48342;
    const double C48168 = C48090 / C46952;
    const double C48170 = C48090 * C48167;
    const double C48177 = C48052 * C48090;
    const double C48366 = C48090 * C48169;
    const double C48393 = C48349 * C48090;
    const double C48391 = C48090 * C48356;
    const double C48408 = C48341 * C48278;
    const double C48407 = C48278 * C48372;
    const double C16456 = -(C48278 * C48374) / C47060;
    const double C47000 = C46995 / C46952;
    const double C46999 = C46933 * C46995;
    const double C46953 = 2 * C46940;
    const double C46975 = C46940 / C46937;
    const double C304 = ((0 * ce) / C46935 - C46940 / C46937) / (2 * C46935) +
                        (0 * ce) / C46935;
    const double C711 =
        ((C48072 - (C46933 * 2 * C46940) / C46935) * ce) / C46935 -
        C46934 / C46939;
    const double C712 = (0 * ce) / C46935 - C46940 / C46937;
    const double C1167 = (C48072 * std::pow(C48127, 2)) / C46937 + C48126;
    const double C48129 = C48128 * C48127;
    const double C48134 = C48128 / C46939;
    const double C48358 = C48128 / C46935;
    const double C48355 = C48052 * C48128;
    const double C303 =
        (((C48072 - (C46933 * 2 * C46940) / C46935) * ce) / C46935 -
         C46934 / C46939) /
            (2 * C46935) +
        ((C46933 * ((0 * ce) / C46935 - C46940 / C46937) + C48135) * ce) /
            C46935;
    const double C48136 = C48135 * C48127;
    const double C48364 = C48125 * C48135;
    const double C48363 = 2 * C48135;
    const double C48400 = C48135 / C48352;
    const double C1265 = C48135 / C48387;
    const double C3108 = C48135 / C46952;
    const double C48396 = C48360 / C46935;
    const double C1168 = (-2 * C48052 * C48360) / C46935;
    const double C48416 = C48388 / C46937;
    const double C47004 = C46998 + C46970;
    const double C42875 = ((0 * ae) / C47060 - C47077 / C47073) / (2 * C47060) -
                          (0 * be) / C47060;
    const double C148 = C113 * C117;
    const double C146 = C113 * C125;
    const double C144 = C113 * C116;
    const double C348 = C113 * C307;
    const double C558 = C113 * C517;
    const double C5203 = C113 * C306;
    const double C5201 = C113 * C316;
    const double C5199 = C113 * C305;
    const double C5845 = C113 * C1004;
    const double C10773 = C10756 * C117;
    const double C10763 = C10756 * C125;
    const double C10759 = C10756 * C116;
    const double C10955 = C10756 * C307;
    const double C11147 = C10756 * C517;
    const double C26213 = C10756 * C306;
    const double C26211 = C10756 * C316;
    const double C26207 = C10756 * C305;
    const double C26829 = C10756 * C1004;
    const double C10761 = C10757 * C517;
    const double C26205 = C10757 * C1004;
    const double C31649 = C31632 * C117;
    const double C31639 = C31632 * C125;
    const double C31635 = C31632 * C116;
    const double C31831 = C31632 * C307;
    const double C32023 = C31632 * C517;
    const double C37477 = C31632 * C306;
    const double C37475 = C31632 * C316;
    const double C37471 = C31632 * C305;
    const double C38093 = C31632 * C1004;
    const double C31637 = C31633 * C517;
    const double C37469 = C31633 * C1004;
    const double C42874 =
        (((C48293 - (C47059 * 2 * C47077) / C47060) * ae) / C47060 -
         C47072 / C47075) /
            (2 * C47060) -
        ((C47059 * ((0 * ae) / C47060 - C47077 / C47073) + C48410) * be) /
            C47060;
    const double C42872 = C48410 / C48032;
    const double C10754 = C48409 / C47060;
    const double C42870 = C48293 / C48032 - (C48409 * C48375) / C47073;
    const double C42871 = C48409 / C47075 - (C48410 * C48375) / C47060;
    const double C31646 = C31630 * C138;
    const double C31640 = C31630 * C137;
    const double C31636 = C31630 * C124;
    const double C37476 = C31630 * C335;
    const double C37472 = C31630 * C315;
    const double C153 = C48293 * C139;
    const double C31656 = C31630 * C139;
    const double C561 = C48293 * C547;
    const double C10766 = C48410 * C547;
    const double C31642 = C48410 * C547;
    const double C32028 = C31630 * C547;
    const double C47116 = C47115 / C46935;
    const double C47125 = -2 * C47121;
    const double C47247 = C47089 * C47121;
    const double C47340 = C47088 * C47121;
    const double C47389 = C47121 / C47099;
    const double C47372 = C47368 / C46935;
    const double C47477 = C47473 / C46935;
    const double C47236 = C47233 / C46935;
    const double C47331 = C47328 / C46935;
    const double C159 = C48293 * C140;
    const double C31662 = C31630 * C140;
    const double C355 = C48293 * C338;
    const double C31842 = C31630 * C338;
    const double C565 = C48293 * C548;
    const double C10768 = C48410 * C548;
    const double C31644 = C48410 * C548;
    const double C32036 = C31630 * C548;
    const double C573 = C48293 * C553;
    const double C11154 = C48410 * C553;
    const double C32044 = C31630 * C553;
    const double C32030 = C48410 * C553;
    const double C1030 = C48293 * C1020;
    const double C10958 = C48410 * C1020;
    const double C31834 = C48410 * C1020;
    const double C32554 = C31630 * C1020;
    const double C47153 = C47146 + C47152;
    const double C47158 = 2 * C47156;
    const double C47248 = C47156 * ce;
    const double C47246 = C47089 * C47156;
    const double C1292 =
        2 * ((-(C47089 * C47244) / C46935) / C47060 - (C47147 * ce) / C47099) -
        ((C47147 + C47156 * C47235) * ce) / C47099 +
        C47089 *
            ((-(C47089 * C47156 * ce) / C46935) / C47060 - C47244 / C47099 +
             C47089 * ((-(C47089 * C47121) / C46935) / C47060 -
                       (C47156 * ce) / C47099));
    const double C47781 = C47088 * C47156;
    const double C1282 =
        (2 * C47089 * C47147 + C47089 * (C47147 + C47156 * C47235)) / C47060;
    const double C47240 = C47146 + C47238;
    const double C47373 = C47369 / C47099;
    const double C47374 = 2 * C47367;
    const double C47371 = C47367 * ce;
    const double C47826 = C47088 * C47367;
    const double C47850 = C47846 + C47847;
    const double C47194 = C47193 + C47182;
    const double C47198 = -2 * C47196;
    const double C47286 = C47089 * C47196;
    const double C47341 = ae * C47196;
    const double C47339 = C47088 * C47196;
    const double C2175 =
        2 * ((-(C47088 * C47244) / C46935) / C47060 - (ae * C47191) / C47099) -
        (ae * (C47196 * std::pow(C47088, 2) + C47191)) / C47099 +
        C47088 *
            ((-(ae * C47088 * C47196) / C46935) / C47060 - C47244 / C47099 +
             C47088 * ((-(C47088 * C47121) / C46935) / C47060 -
                       (ae * C47196) / C47099));
    const double C2164 = (-2 * C47088 * C47191) / C46935 -
                         (C47088 * (C47196 * C47330 + C47191)) / C46935;
    const double C47280 = C47277 + C47278;
    const double C47335 = C47333 + C47182;
    const double C47478 = C47474 / C47099;
    const double C47479 = -2 * C47472;
    const double C47476 = ae * C47472;
    const double C47271 = C47227 + C47270;
    const double C47293 = C47089 * C47291;
    const double C47292 = C47291 * ce;
    const double C47317 = 2 * C47291;
    const double C47729 = C47291 * C47235;
    const double C47784 = C47291 * C47330;
    const double C47863 = C47088 * C47291;
    const double C47862 = C47291 * ae;
    const double C47420 = C47227 + C47416;
    const double C47419 = C47415 * ce;
    const double C47554 = 2 * C47415;
    const double C47829 = C47415 * C47330;
    const double C47897 = C47088 * C47415;
    const double C47896 = C47415 * ae;
    const double C47418 = C47413 + C47414;
    const double C47852 = C47227 + C47849;
    const double C47920 = 2 * C47913;
    const double C47918 = C47913 * ae;
    const double C47917 = C47911 + C47912;
    const double C47130 = C47129 / C46935;
    const double C47394 = C47089 * C47390;
    const double C47496 = C47088 * C47390;
    const double C47527 = C47521 / C46935;
    const double C47614 = C47608 / C46935;
    const double C47172 = C47159 + C47171;
    const double C47397 = C47392 * C47235;
    const double C47530 = C47159 + C47524;
    const double C47215 = C47214 + C47199;
    const double C47435 = C47089 * C47432;
    const double C47498 = C47432 * C47330;
    const double C47557 = C47550 + C47551;
    const double C47618 = C47611 + C47199;
    const double C5206 = C48293 * C336;
    const double C37482 = C31630 * C336;
    const double C351 = C48293 * C337;
    const double C31836 = C31630 * C337;
    const double C361 = C48293 * C339;
    const double C31850 = C31630 * C339;
    const double C6110 = C48293 * C1290;
    const double C38340 = C31630 * C1290;
    const double C149 = C48293 * C126;
    const double C31650 = C31630 * C126;
    const double C155 = C48293 * C129;
    const double C31652 = C31630 * C129;
    const double C5204 = C48293 * C317;
    const double C37478 = C31630 * C317;
    const double C349 = C48293 * C319;
    const double C31832 = C31630 * C319;
    const double C353 = C48293 * C321;
    const double C31838 = C31630 * C321;
    const double C359 = C48293 * C323;
    const double C31846 = C31630 * C323;
    const double C559 = C48293 * C527;
    const double C10762 = C48410 * C527;
    const double C31638 = C48410 * C527;
    const double C32024 = C31630 * C527;
    const double C5846 = C48293 * C1009;
    const double C26206 = C48410 * C1009;
    const double C37470 = C48410 * C1009;
    const double C38094 = C31630 * C1009;
    const double C6108 = C48293 * C1278;
    const double C38336 = C31630 * C1278;
    const double C5848 = C48293 * C1019;
    const double C26210 = C48410 * C1019;
    const double C37474 = C48410 * C1019;
    const double C38098 = C31630 * C1019;
    const double C150 = C113 * C127;
    const double C10769 = C10756 * C127;
    const double C31645 = C31632 * C127;
    const double C152 = C113 * C128;
    const double C10779 = C10756 * C128;
    const double C31655 = C31632 * C128;
    const double C5205 = C113 * C318;
    const double C26217 = C10756 * C318;
    const double C37481 = C31632 * C318;
    const double C350 = C113 * C320;
    const double C10959 = C10756 * C320;
    const double C31835 = C31632 * C320;
    const double C560 = C113 * C528;
    const double C10765 = C10757 * C528;
    const double C11151 = C10756 * C528;
    const double C31641 = C31633 * C528;
    const double C32027 = C31632 * C528;
    const double C564 = C113 * C530;
    const double C10767 = C10757 * C530;
    const double C11159 = C10756 * C530;
    const double C31643 = C31633 * C530;
    const double C32035 = C31632 * C530;
    const double C572 = C113 * C540;
    const double C11167 = C10756 * C540;
    const double C11153 = C10757 * C540;
    const double C32043 = C31632 * C540;
    const double C32029 = C31633 * C540;
    const double C5847 = C113 * C1010;
    const double C26209 = C10757 * C1010;
    const double C26833 = C10756 * C1010;
    const double C37473 = C31633 * C1010;
    const double C38097 = C31632 * C1010;
    const double C47275 = C47273 + C47274;
    const double C322 = -(C47089 * (C47089 * C47191 + C47662 * ce) +
                          C47096 * C47189 + C47089 * C47662 * ce) /
                        C46935;
    const double C539 =
        (C47096 * C47142 + C47088 * (C47088 * C47147 + C47662 * ae) +
         C47088 * C47662 * ae) /
        C47060;
    const double C1011 =
        (C47088 * C47089 * C47147 + C47089 * C47662 * ae) / C47060;
    const double C1012 = -(C47088 * (C47089 * C47191 + C47662 * ce)) / C46935;
    const double C1417 = (C47088 * (C47147 + C47156 * C47235) +
                          (C47662 + C47268 * C47235) * ae) /
                         C47060;
    const double C2165 =
        (2 * (C47088 * C47147 + C47662 * ae) +
         C47088 * (C47147 + C47088 * (C47088 * C47156 + C47268 * ae) +
                   C47088 * C47268 * ae) +
         (C47662 + C47268 * C47330) * ae) /
        C47060;
    const double C308 = C47096 * C47657 + C47662 * C47235;
    const double C523 = C47096 * C47657 + C47662 * C47330;
    const double C1005 = C47088 * C47089 * C47662;
    const double C1274 =
        2 * C47089 * C47662 + C47089 * (C47662 + C47268 * C47235);
    const double C1407 = C47088 * (C47662 + C47268 * C47235);
    const double C1411 = C47089 * C47662 + C47728 * C47330;
    const double C2157 =
        2 * C47088 * C47662 + C47088 * (C47662 + C47268 * C47330);
    const double C119 = 3 * (C47657 + C47266 * C47105) +
                        C47096 * (2 * C47662 + C47096 * C47668);
    const double C310 = C47657 + C47266 * C47105 + C47668 * C47235;
    const double C311 = C47089 * (2 * C47662 + C47096 * C47668);
    const double C519 = C47088 * (2 * C47662 + C47096 * C47668);
    const double C524 = C47657 + C47266 * C47105 + C47668 * C47330;
    const double C1006 = C47088 * C47089 * C47668;
    const double C1421 =
        (C47089 * C47142 + C47088 * (C47088 * C47232 + C47721 * ae) +
         C47088 * C47721 * ae) /
        C47060;
    const double C2573 =
        (2 * (C47088 * C47232 + C47721 * ae) +
         C47088 * (C47232 + C47088 * (C47088 * C47367 + C47279 * ae) +
                   C47088 * C47279 * ae) +
         (C47721 + C47279 * C47330) * ae) /
        C47060;
    const double C1409 = C47089 * C47657 + C47721 * C47330;
    const double C2570 =
        2 * C47088 * C47721 + C47088 * (C47721 + C47279 * C47330);
    const double C1273 = 3 * (C47657 + C47266 * C47235) +
                         C47089 * (2 * C47721 + C47089 * C47723);
    const double C1410 = C47657 + C47266 * C47235 + C47723 * C47330;
    const double C1854 = C47088 * (2 * C47721 + C47089 * C47723);
    const double C47777 = C47773 + C47774;
    const double C2159 = 3 * (C47657 + C47266 * C47330) +
                         C47088 * (2 * C47775 + C47088 * C47778);
    const double C360 = C113 * C324;
    const double C10973 = C10756 * C324;
    const double C31849 = C31632 * C324;
    const double C563 = C48293 * C529;
    const double C10772 = C48410 * C529;
    const double C31648 = C48410 * C529;
    const double C32032 = C31630 * C529;
    const double C6280 = C48293 * C1415;
    const double C26216 = C48410 * C1415;
    const double C37480 = C48410 * C1415;
    const double C38506 = C31630 * C1415;
    const double C154 = C113 * C118;
    const double C10775 = C10756 * C118;
    const double C31651 = C31632 * C118;
    const double C358 = C113 * C309;
    const double C10969 = C10756 * C309;
    const double C31845 = C31632 * C309;
    const double C562 = C113 * C518;
    const double C10771 = C10757 * C518;
    const double C11155 = C10756 * C518;
    const double C31647 = C31633 * C518;
    const double C32031 = C31632 * C518;
    const double C6107 = C113 * C1272;
    const double C27071 = C10756 * C1272;
    const double C38335 = C31632 * C1272;
    const double C6279 = C113 * C1406;
    const double C26215 = C10757 * C1406;
    const double C27241 = C10756 * C1406;
    const double C37479 = C31633 * C1406;
    const double C38505 = C31632 * C1406;
    const double C47162 = C47096 * C47161;
    const double C47166 = 3 * C47161;
    const double C47260 = C47161 * ce;
    const double C47258 = C47089 * C47161;
    const double C47789 = C47088 * C47161;
    const double C47252 = C47156 + C47249;
    const double C47395 = C47391 / C47099;
    const double C47396 = 2 * C47388;
    const double C47393 = C47388 * ce;
    const double C47834 = C47088 * C47388;
    const double C47378 = C47089 * C47375;
    const double C47523 = 3 * C47375;
    const double C47519 = C47375 * ce;
    const double C47885 = C47088 * C47375;
    const double C47532 = C47526 / C46935;
    const double C47203 = C47096 * C47202;
    const double C47207 = -3 * C47202;
    const double C47300 = C47089 * C47202;
    const double C47352 = ae * C47202;
    const double C47350 = C47088 * C47202;
    const double C47213 = C47211 / C46935;
    const double C47345 = C47342 + C47196;
    const double C47501 = C47497 / C47099;
    const double C47502 = -2 * C47495;
    const double C47499 = ae * C47495;
    const double C47484 = C47088 * C47480;
    const double C47610 = -3 * C47480;
    const double C47606 = ae * C47480;
    const double C47622 = C47617 / C46935;
    const double C47620 = C47613 / C46935;
    const double C47309 = C47089 * C47307;
    const double C47308 = C47307 * ce;
    const double C47318 = C47096 * C47307;
    const double C47736 = C47307 * C47235;
    const double C47792 = C47307 * C47330;
    const double C47441 = C47291 + C47438;
    const double C47440 = C47437 * ce;
    const double C47837 = C47437 * C47330;
    const double C47867 = C47291 + C47864;
    const double C47562 = C47089 * C47559;
    const double C47561 = C47559 * ce;
    const double C47888 = C47559 * C47330;
    const double C47901 = C47415 + C47898;
    const double C47922 = C47088 * C47919;
    const double C105 = C48377 / C48032;
    const double C103 = C48027 / C48032 - (C48376 * C48340) / C47073;
    const double C104 = C48376 / C47075 - (C48377 * C48340) / C47060;
    const double C16454 = C48376 / C47060;
    const double C48047 = C48046 * C48040;
    const double C48053 = C48046 / C46939;
    const double C48346 = C48052 * C48046;
    const double C48344 = C48046 / C46935;
    const double C299 = (C48044 * std::pow(C48040, 2)) / C46937 + C48045;
    const double C48055 = C48054 * C48040;
    const double C48350 = C48039 * C48054;
    const double C48348 = 2 * C48054;
    const double C48394 = C48054 / C48352;
    const double C111 = C48054 / C48387;
    const double C3111 = C48054 / C46952;
    const double C48380 = C48345 / C46935;
    const double C300 = (-2 * C48052 * C48345) / C46935;
    const double C48411 = C48378 / C46937;
    const double C1976 = (C48090 * std::pow(C48169, 2)) / C46937 + C48168;
    const double C48171 = C48170 * C48169;
    const double C48176 = C48170 / C46939;
    const double C48359 = C48170 / C46935;
    const double C48357 = C48052 * C48170;
    const double C48178 = C48177 * C48169;
    const double C48370 = C48167 * C48177;
    const double C48369 = 2 * C48177;
    const double C48406 = C48177 / C48352;
    const double C2155 = C48177 / C48387;
    const double C4067 = C48177 / C46952;
    const double C48402 = C48366 / C46935;
    const double C1977 = (-2 * C48052 * C48366) / C46935;
    const double C48418 = C48391 / C46937;
    const double C21889 = C48408 / C48032;
    const double C5042 = C48407 / C47060;
    const double C21887 = C48278 / C48032 - (C48407 * C48374) / C47073;
    const double C21888 = C48407 / C47075 - (C48408 * C48374) / C47060;
    const double C47005 = C46999 + 0;
    const double C46972 = C46933 * C46953;
    const double C1174 =
        ((-C46934 / C46935) / C46952 -
         ((C48072 - (C46933 * C46953) / C46935) * de) / C46935) /
            C46952 -
        ((C46933 * ((-C46953 / C46935) / C46952 - (0 * de) / C46935) + C48135) *
         de) /
            C46935;
    const double C1175 =
        ((-C46953 / C46935) / C46952 - (0 * de) / C46935) / C46952 -
        (0 * de) / C46935;
    const double C2687 = (-C46953 / C46935) / C46952 - (0 * de) / C46935;
    const double C46985 = C46981 - C46975;
    const double C48130 = C48129 / C46937;
    const double C302 =
        (((0 - (C46933 * C46934) / C46935) * ce) / C46935 - (0 * de) / C46939) /
            (2 * C46935) +
        ((C46933 * (((C48072 - (C46933 * 2 * C46940) / C46935) * ce) / C46935 -
                    C46934 / C46939) +
          C48358) *
         ce) /
            C46935 +
        (0 * ce) / C46935 - C46940 / C46937;
    const double C48389 = 2 * C48355;
    const double C48137 = C48136 / C46935;
    const double C48399 = C48364 / C46939;
    const double C48420 = C48358 - C48396;
    const double C2680 = -C48396;
    const double C48429 = C48416 + C48126;
    const double C47008 = C47004 / C46952;
    const double C165 = C146 + C147;
    const double C164 = C144 + C145;
    const double C5220 = C5201 + C5202;
    const double C5219 = C5199 + C5200;
    const double C10786 = C10754 * C140;
    const double C10780 = C10754 * C139;
    const double C10776 = C10754 * C129;
    const double C10774 = C10754 * C126;
    const double C10770 = C10754 * C138;
    const double C10764 = C10754 * C137;
    const double C10760 = C10754 * C124;
    const double C10974 = C10754 * C339;
    const double C10970 = C10754 * C323;
    const double C10966 = C10754 * C338;
    const double C10962 = C10754 * C321;
    const double C10960 = C10754 * C337;
    const double C10956 = C10754 * C319;
    const double C11168 = C10754 * C553;
    const double C11160 = C10754 * C548;
    const double C11156 = C10754 * C529;
    const double C11152 = C10754 * C547;
    const double C11148 = C10754 * C527;
    const double C11678 = C10754 * C1020;
    const double C26218 = C10754 * C336;
    const double C26214 = C10754 * C317;
    const double C26212 = C10754 * C335;
    const double C26208 = C10754 * C315;
    const double C26834 = C10754 * C1019;
    const double C26830 = C10754 * C1009;
    const double C27076 = C10754 * C1290;
    const double C27072 = C10754 * C1278;
    const double C27242 = C10754 * C1415;
    const double C42873 =
        (((0 - (C47059 * C47072) / C47060) * ae) / C47060 - (0 * be) / C47075) /
            (2 * C47060) -
        ((C47059 * (((C48293 - (C47059 * 2 * C47077) / C47060) * ae) / C47060 -
                    C47072 / C47075) +
          C10754) *
         be) /
            C47060 +
        (0 * ae) / C47060 - C47077 / C47073;
    const double C31669 = C31639 + C31640;
    const double C31667 = C31635 + C31636;
    const double C37488 = C37475 + C37476;
    const double C37486 = C37471 + C37472;
    const double C47117 = -C47116;
    const double C47127 = C47125 / C47099;
    const double C47250 = C47247 / C46935;
    const double C47343 = C47340 / C46935;
    const double C47377 = -C47372;
    const double C47482 = -C47477;
    const double C47239 = -C47236;
    const double C47334 = -C47331;
    const double C130 = (3 * (C47142 + C47146 * C47105) +
                         C47096 * (2 * C47147 + C47096 * C47153)) /
                        C47060;
    const double C325 = (C47142 + C47146 * C47105 + C47153 * C47235) / C47060;
    const double C327 = (C47089 * (2 * C47147 + C47096 * C47153)) / C47060;
    const double C531 = (C47088 * (2 * C47147 + C47096 * C47153) +
                         (2 * C47662 + C47096 * C47668) * ae) /
                        C47060;
    const double C541 =
        (C47142 + C47146 * C47105 + C47088 * (C47088 * C47153 + C47668 * ae) +
         C47088 * C47668 * ae) /
        C47060;
    const double C1013 =
        (C47088 * C47089 * C47153 + C47089 * C47668 * ae) / C47060;
    const double C1286 =
        (2 * C47089 * C47153 + C47089 * (C47153 + C47161 * C47235)) / C47060;
    const double C47251 = C47248 / C47099;
    const double C1425 =
        (C47089 * C47147 + C47088 * (C47088 * C47246 + C47728 * ae) +
         C47088 * C47728 * ae) /
        C47060;
    const double C1564 = C48293 * C1292;
    const double C12208 = C10754 * C1292;
    const double C33084 = C31630 * C1292;
    const double C47785 = C47781 + C47782;
    const double C1562 = C48293 * C1282;
    const double C12204 = C10754 * C1282;
    const double C33080 = C31630 * C1282;
    const double C1280 = (3 * (C47142 + C47146 * C47235) +
                          C47089 * (2 * C47232 + C47089 * C47240)) /
                         C47060;
    const double C1423 =
        (C47142 + C47146 * C47235 + C47088 * (C47088 * C47240 + C47723 * ae) +
         C47088 * C47723 * ae) /
        C47060;
    const double C1857 = (C47088 * (2 * C47232 + C47089 * C47240) +
                          (2 * C47721 + C47089 * C47723) * ae) /
                         C47060;
    const double C47376 = C47371 / C46935;
    const double C47830 = C47826 + C47827;
    const double C47854 = C47088 * C47850;
    const double C47910 = 2 * C47850;
    const double C131 =
        (-3 * (C47182 * C47105 + C47189)) / C46935 +
        C47096 * ((-2 * C47191) / C46935 - (C47096 * C47194) / C46935);
    const double C326 = -(C47089 * (C47089 * C47194 + C47668 * ce) +
                          C47182 * C47105 + C47189 + C47089 * C47668 * ce) /
                        C46935;
    const double C328 =
        C47089 * ((-2 * C47191) / C46935 - (C47096 * C47194) / C46935) -
        ((2 * C47662 + C47096 * C47668) * ce) / C46935;
    const double C532 =
        C47088 * ((-2 * C47191) / C46935 - (C47096 * C47194) / C46935);
    const double C542 = -(C47194 * C47330 + C47182 * C47105 + C47189) / C46935;
    const double C1014 = -(C47088 * (C47089 * C47194 + C47668 * ce)) / C46935;
    const double C2162 = (-2 * C47088 * C47194) / C46935 -
                         (C47088 * (C47202 * C47330 + C47194)) / C46935;
    const double C47200 = C47198 / C46935;
    const double C47288 = C47286 + C47287;
    const double C47344 = C47341 / C47099;
    const double C2460 = C48293 * C2175;
    const double C11170 = C48410 * C2175;
    const double C13272 = C10754 * C2175;
    const double C32046 = C48410 * C2175;
    const double C34140 = C31630 * C2175;
    const double C2459 = C113 * C2164;
    const double C11169 = C10757 * C2164;
    const double C13271 = C10756 * C2164;
    const double C32045 = C31633 * C2164;
    const double C34139 = C31632 * C2164;
    const double C47282 = C47089 * C47280;
    const double C47412 = -2 * C47280;
    const double C47456 = ae * C47280;
    const double C47454 = C47088 * C47280;
    const double C2169 =
        (-3 * (C47182 * C47330 + C47189)) / C46935 +
        C47088 * ((-2 * C47327) / C46935 - (C47088 * C47335) / C46935);
    const double C47483 = C47479 / C46935;
    const double C47481 = C47476 / C46935;
    const double C47301 = C47271 * ce;
    const double C47674 = C47096 * C47271;
    const double C47680 = 3 * C47271;
    const double C47735 = C47089 * C47271;
    const double C47791 = C47088 * C47271;
    const double C47790 = C47271 * ae;
    const double C1419 = (C47088 * (C47153 + C47161 * C47235) +
                          (C47668 + C47271 * C47235) * ae) /
                         C47060;
    const double C2163 =
        (2 * (C47088 * C47153 + C47668 * ae) +
         C47088 * (C47153 + C47088 * (C47088 * C47161 + C47271 * ae) +
                   C47088 * C47271 * ae) +
         (C47668 + C47271 * C47330) * ae) /
        C47060;
    const double C1276 =
        2 * C47089 * C47668 + C47089 * (C47668 + C47271 * C47235);
    const double C1408 = C47088 * (C47668 + C47271 * C47235);
    const double C2156 =
        2 * C47088 * C47668 + C47088 * (C47668 + C47271 * C47330);
    const double C47295 = C47293 * ce;
    const double C47814 = 2 * C47293;
    const double C47836 = C47088 * C47293;
    const double C47835 = C47293 * ae;
    const double C2575 =
        (2 * (C47088 * C47246 + C47728 * ae) +
         C47088 * (C47246 + C47088 * (C47088 * C47388 + C47293 * ae) +
                   C47088 * C47293 * ae) +
         (C47728 + C47293 * C47330) * ae) /
        C47060;
    const double C2571 =
        2 * C47088 * C47728 + C47088 * (C47728 + C47293 * C47330);
    const double C47294 = C47290 + C47292;
    const double C47730 = C47268 + C47729;
    const double C47786 = C47268 + C47784;
    const double C47868 = 2 * C47863;
    const double C47866 = C47863 * ae;
    const double C47865 = C47861 + C47862;
    const double C47422 = C47420 * ce;
    const double C47810 = C47089 * C47420;
    const double C47877 = 3 * C47420;
    const double C47887 = C47088 * C47420;
    const double C47886 = C47420 * ae;
    const double C7640 =
        (2 * (C47088 * C47240 + C47723 * ae) +
         C47088 * (C47240 + C47088 * (C47088 * C47375 + C47420 * ae) +
                   C47088 * C47420 * ae) +
         (C47723 + C47420 * C47330) * ae) /
        C47060;
    const double C7638 =
        2 * C47088 * C47723 + C47088 * (C47723 + C47420 * C47330);
    const double C47831 = C47279 + C47829;
    const double C47902 = 2 * C47897;
    const double C47900 = C47897 * ae;
    const double C47899 = C47895 + C47896;
    const double C47421 = C47089 * C47418;
    const double C47457 = C47418 * C47330;
    const double C47549 = -2 * C47418;
    const double C47589 = ae * C47418;
    const double C47587 = C47088 * C47418;
    const double C47855 = C47088 * C47852;
    const double C47916 = 3 * C47852;
    const double C47914 = C47852 * ae;
    const double C47921 = C47088 * C47917;
    const double C47131 = -C47130;
    const double C47399 = C47394 / C46935;
    const double C47500 = C47496 / C46935;
    const double C47533 = -C47527;
    const double C47621 = -C47614;
    const double C47173 = C47096 * C47172;
    const double C47261 = C47172 * C47235;
    const double C47400 = C47167 + C47397;
    const double C47534 = C47089 * C47530;
    const double C47216 = C47096 * C47215;
    const double C47304 = C47089 * C47215;
    const double C47353 = C47215 * C47330;
    const double C47439 = C47435 + C47436;
    const double C47503 = C47498 + C47208;
    const double C47560 = C47089 * C47557;
    const double C47590 = C47557 * C47330;
    const double C47623 = C47088 * C47618;
    const double C166 = C148 + C149;
    const double C31674 = C31649 + C31650;
    const double C5221 = C5203 + C5204;
    const double C37489 = C37477 + C37478;
    const double C376 = C348 + C349;
    const double C31862 = C31831 + C31832;
    const double C582 = C558 + C559;
    const double C10792 = C10761 + C10762;
    const double C31668 = C31637 + C31638;
    const double C32055 = C32023 + C32024;
    const double C5857 = C5845 + C5846;
    const double C26221 = C26205 + C26206;
    const double C37485 = C37469 + C37470;
    const double C38101 = C38093 + C38094;
    const double C167 = C150 + C151;
    const double C31672 = C31645 + C31646;
    const double C168 = C152 + C153;
    const double C31677 = C31655 + C31656;
    const double C5222 = C5205 + C5206;
    const double C37491 = C37481 + C37482;
    const double C377 = C350 + C351;
    const double C31864 = C31835 + C31836;
    const double C583 = C560 + C561;
    const double C10794 = C10765 + C10766;
    const double C31670 = C31641 + C31642;
    const double C32057 = C32027 + C32028;
    const double C585 = C564 + C565;
    const double C10795 = C10767 + C10768;
    const double C31671 = C31643 + C31644;
    const double C32061 = C32035 + C32036;
    const double C589 = C572 + C573;
    const double C11182 = C11153 + C11154;
    const double C32065 = C32043 + C32044;
    const double C32058 = C32029 + C32030;
    const double C5858 = C5847 + C5848;
    const double C26223 = C26209 + C26210;
    const double C37487 = C37473 + C37474;
    const double C38103 = C38097 + C38098;
    const double C1279 =
        (-2 * (C47089 * C47189 + C47657 * ce)) / C46935 -
        (C47089 * (C47089 * C47275 + C47189 + C47089 * C47266 * ce)) / C46935 -
        ((C47657 + C47266 * C47235) * ce) / C46935;
    const double C1416 =
        -(C47088 * (C47089 * C47275 + C47189 + C47721 * ce)) / C46935;
    const double C1422 =
        -(C47275 * C47330 + C47089 * C47189 + C47657 * ce) / C46935;
    const double C2574 = (-2 * C47088 * C47275) / C46935 -
                         (C47088 * (C47280 * C47330 + C47275)) / C46935;
    const double C354 = C113 * C322;
    const double C10965 = C10756 * C322;
    const double C31841 = C31632 * C322;
    const double C571 = C48293 * C539;
    const double C11164 = C10754 * C539;
    const double C11150 = C48410 * C539;
    const double C32040 = C31630 * C539;
    const double C32026 = C48410 * C539;
    const double C1026 = C48293 * C1011;
    const double C10954 = C48410 * C1011;
    const double C11674 = C10754 * C1011;
    const double C31830 = C48410 * C1011;
    const double C32550 = C31630 * C1011;
    const double C1029 = C113 * C1012;
    const double C10957 = C10757 * C1012;
    const double C11677 = C10756 * C1012;
    const double C31833 = C31633 * C1012;
    const double C32553 = C31632 * C1012;
    const double C1738 = C48293 * C1417;
    const double C10964 = C48410 * C1417;
    const double C12410 = C10754 * C1417;
    const double C31840 = C48410 * C1417;
    const double C33286 = C31630 * C1417;
    const double C2458 = C48293 * C2165;
    const double C11166 = C48410 * C2165;
    const double C13268 = C10754 * C2165;
    const double C32042 = C48410 * C2165;
    const double C34136 = C31630 * C2165;
    const double C352 = C113 * C308;
    const double C10961 = C10756 * C308;
    const double C31837 = C31632 * C308;
    const double C570 = C113 * C523;
    const double C11163 = C10756 * C523;
    const double C11149 = C10757 * C523;
    const double C32039 = C31632 * C523;
    const double C32025 = C31633 * C523;
    const double C1025 = C113 * C1005;
    const double C10953 = C10757 * C1005;
    const double C11673 = C10756 * C1005;
    const double C31829 = C31633 * C1005;
    const double C32549 = C31632 * C1005;
    const double C1561 = C113 * C1274;
    const double C12203 = C10756 * C1274;
    const double C33079 = C31632 * C1274;
    const double C1737 = C113 * C1407;
    const double C10963 = C10757 * C1407;
    const double C12409 = C10756 * C1407;
    const double C31839 = C31633 * C1407;
    const double C33285 = C31632 * C1407;
    const double C2333 = C113 * C1411;
    const double C11675 = C10757 * C1411;
    const double C13127 = C10756 * C1411;
    const double C32551 = C31633 * C1411;
    const double C33995 = C31632 * C1411;
    const double C2457 = C113 * C2157;
    const double C11165 = C10757 * C2157;
    const double C13267 = C10756 * C2157;
    const double C32041 = C31633 * C2157;
    const double C34135 = C31632 * C2157;
    const double C156 = C113 * C119;
    const double C10789 = C10756 * C119;
    const double C31665 = C31632 * C119;
    const double C362 = C113 * C310;
    const double C10979 = C10756 * C310;
    const double C31855 = C31632 * C310;
    const double C366 = C113 * C311;
    const double C11327 = C10756 * C311;
    const double C32203 = C31632 * C311;
    const double C566 = C113 * C519;
    const double C10777 = C10757 * C519;
    const double C11473 = C10756 * C519;
    const double C31653 = C31633 * C519;
    const double C32349 = C31632 * C519;
    const double C574 = C113 * C524;
    const double C11177 = C10756 * C524;
    const double C11157 = C10757 * C524;
    const double C32053 = C31632 * C524;
    const double C32033 = C31633 * C524;
    const double C1031 = C113 * C1006;
    const double C10971 = C10757 * C1006;
    const double C11683 = C10756 * C1006;
    const double C31847 = C31633 * C1006;
    const double C32559 = C31632 * C1006;
    const double C6284 = C48293 * C1421;
    const double C26832 = C48410 * C1421;
    const double C27250 = C10754 * C1421;
    const double C38096 = C48410 * C1421;
    const double C38514 = C31630 * C1421;
    const double C7648 = C48293 * C2573;
    const double C27248 = C48410 * C2573;
    const double C28574 = C10754 * C2573;
    const double C38512 = C48410 * C2573;
    const double C39834 = C31630 * C2573;
    const double C6283 = C113 * C1409;
    const double C26831 = C10757 * C1409;
    const double C27249 = C10756 * C1409;
    const double C38095 = C31633 * C1409;
    const double C38513 = C31632 * C1409;
    const double C7647 = C113 * C2570;
    const double C27247 = C10757 * C2570;
    const double C28573 = C10756 * C2570;
    const double C38511 = C31633 * C2570;
    const double C39833 = C31632 * C2570;
    const double C6111 = C113 * C1273;
    const double C27077 = C10756 * C1273;
    const double C38341 = C31632 * C1273;
    const double C6287 = C113 * C1410;
    const double C27255 = C10756 * C1410;
    const double C27239 = C10757 * C1410;
    const double C38519 = C31632 * C1410;
    const double C38503 = C31633 * C1410;
    const double C6785 = C113 * C1854;
    const double C27069 = C10757 * C1854;
    const double C27729 = C10756 * C1854;
    const double C38333 = C31633 * C1854;
    const double C38993 = C31632 * C1854;
    const double C2168 =
        (3 * (C47142 + C47088 * C47777 + C47775 * ae) +
         C47088 * (2 * C47777 +
                   C47088 * (C47146 + C47088 * (C47088 * C47151 + C47227 * ae) +
                             C47088 * C47227 * ae) +
                   C47778 * ae) +
         (2 * C47775 + C47088 * C47778) * ae) /
        C47060;
    const double C382 = C360 + C361;
    const double C31871 = C31849 + C31850;
    const double C169 = C154 + C155;
    const double C31675 = C31651 + C31652;
    const double C381 = C358 + C359;
    const double C31869 = C31845 + C31846;
    const double C584 = C562 + C563;
    const double C10797 = C10771 + C10772;
    const double C31673 = C31647 + C31648;
    const double C32059 = C32031 + C32032;
    const double C6119 = C6107 + C6108;
    const double C38350 = C38335 + C38336;
    const double C6295 = C6279 + C6280;
    const double C26226 = C26215 + C26216;
    const double C37490 = C37479 + C37480;
    const double C38528 = C38505 + C38506;
    const double C47163 = C47158 + C47162;
    const double C47262 = C47260 / C47099;
    const double C1284 = (3 * (C47147 + C47156 * C47235) +
                          C47089 * (2 * C47246 + C47089 * C47252)) /
                         C47060;
    const double C47398 = C47393 / C46935;
    const double C47381 = C47374 + C47378;
    const double C47525 = C47519 / C47099;
    const double C47535 = -C47532;
    const double C47204 = C47203 / C46935;
    const double C47210 = C47207 / C46935;
    const double C47354 = C47352 / C47099;
    const double C2171 =
        (-3 * (C47196 * C47330 + C47191)) / C46935 +
        C47088 * ((-2 * C47339) / C46935 - (C47088 * C47345) / C46935);
    const double C47506 = C47502 / C46935;
    const double C47504 = C47499 / C46935;
    const double C47487 = C47484 / C46935;
    const double C47616 = C47610 / C46935;
    const double C47612 = C47606 / C47099;
    const double C47624 = -C47620;
    const double C47311 = C47309 * ce;
    const double C47319 = C47317 + C47318;
    const double C47737 = C47271 + C47736;
    const double C47794 = C47271 + C47792;
    const double C47443 = C47441 * ce;
    const double C47815 = C47089 * C47441;
    const double C47839 = C47293 + C47837;
    const double C47870 = C47088 * C47867;
    const double C47565 = C47554 + C47562;
    const double C47564 = C47561 / C46935;
    const double C47890 = C47420 + C47888;
    const double C47904 = C47088 * C47901;
    const double C47924 = C47920 + C47922;
    const double C48048 = C48047 / C46937;
    const double C48381 = 2 * C48346;
    const double C48056 = C48055 / C46935;
    const double C48385 = C48350 / C46939;
    const double C48412 = C48344 - C48380;
    const double C2812 = -C48380;
    const double C48426 = C48411 + C48045;
    const double C48172 = C48171 / C46937;
    const double C48392 = 2 * C48357;
    const double C48179 = C48178 / C46935;
    const double C48405 = C48370 / C46939;
    const double C48423 = C48359 - C48402;
    const double C3547 = -C48402;
    const double C48430 = C48418 + C48168;
    const double C47009 = C47005 * de;
    const double C46980 = C46972 / C46935;
    const double C46989 = C46933 * C46985;
    const double C47018 = C46985 / C46952;
    const double C48131 = C48126 - C48130;
    const double C48417 = C48389 / C46935;
    const double C48138 = C48134 - C48137;
    const double C48431 = C48420 / C46952;
    const double C1173 =
        ((-(0 * de) / C46935) / C46952 -
         ((0 - (C46933 * C46934) / C46935) * de) / C46935) /
            C46952 -
        ((C46933 * ((-C46934 / C46935) / C46952 -
                    ((C48072 - (C46933 * C46953) / C46935) * de) / C46935) +
          C2680) *
         de) /
            C46935 +
        (-C46953 / C46935) / C46952 - (0 * de) / C46935;
    const double C175 = C165 * C48072;
    const double C347 = C165 * C48429;
    const double C719 = C165 * C48358;
    const double C1178 = C165 * C1167;
    const double C2690 = C165 * C2680;
    const double C174 = C164 * C114;
    const double C346 = C164 * C302;
    const double C718 = C164 * C711;
    const double C10801 = C10779 + C10780;
    const double C10799 = C10775 + C10776;
    const double C10798 = C10773 + C10774;
    const double C10796 = C10769 + C10770;
    const double C10793 = C10763 + C10764;
    const double C10791 = C10759 + C10760;
    const double C10995 = C10973 + C10974;
    const double C10993 = C10969 + C10970;
    const double C10988 = C10959 + C10960;
    const double C10986 = C10955 + C10956;
    const double C11189 = C11167 + C11168;
    const double C11185 = C11159 + C11160;
    const double C11183 = C11155 + C11156;
    const double C11181 = C11151 + C11152;
    const double C11179 = C11147 + C11148;
    const double C26227 = C26217 + C26218;
    const double C26225 = C26213 + C26214;
    const double C26224 = C26211 + C26212;
    const double C26222 = C26207 + C26208;
    const double C26839 = C26833 + C26834;
    const double C26837 = C26829 + C26830;
    const double C27086 = C27071 + C27072;
    const double C27264 = C27241 + C27242;
    const double C47118 = C47117 / C47060;
    const double C47253 = -C47250;
    const double C47346 = -C47343;
    const double C47380 = C47377 / C47060;
    const double C47486 = C47482 / C47060;
    const double C47241 = C47239 / C47060;
    const double C47336 = C47334 / C47060;
    const double C157 = C48293 * C130;
    const double C10790 = C10754 * C130;
    const double C31666 = C31630 * C130;
    const double C363 = C48293 * C325;
    const double C10980 = C10754 * C325;
    const double C31856 = C31630 * C325;
    const double C367 = C48293 * C327;
    const double C11328 = C10754 * C327;
    const double C32204 = C31630 * C327;
    const double C567 = C48293 * C531;
    const double C10778 = C48410 * C531;
    const double C11474 = C10754 * C531;
    const double C31654 = C48410 * C531;
    const double C32350 = C31630 * C531;
    const double C575 = C48293 * C541;
    const double C11178 = C10754 * C541;
    const double C11158 = C48410 * C541;
    const double C32054 = C31630 * C541;
    const double C32034 = C48410 * C541;
    const double C1032 = C48293 * C1013;
    const double C10972 = C48410 * C1013;
    const double C11684 = C10754 * C1013;
    const double C31848 = C48410 * C1013;
    const double C32560 = C31630 * C1013;
    const double C1572 = C48293 * C1286;
    const double C2334 = C48293 * C1425;
    const double C11676 = C48410 * C1425;
    const double C13128 = C10754 * C1425;
    const double C32552 = C48410 * C1425;
    const double C33996 = C31630 * C1425;
    const double C6112 = C48293 * C1280;
    const double C27078 = C10754 * C1280;
    const double C38342 = C31630 * C1280;
    const double C6288 = C48293 * C1423;
    const double C27256 = C10754 * C1423;
    const double C27240 = C48410 * C1423;
    const double C38520 = C31630 * C1423;
    const double C38504 = C48410 * C1423;
    const double C6786 = C48293 * C1857;
    const double C27070 = C48410 * C1857;
    const double C27730 = C10754 * C1857;
    const double C38334 = C48410 * C1857;
    const double C38994 = C31630 * C1857;
    const double C47379 = -C47376;
    const double C47856 = C47146 + C47854;
    const double C158 = C113 * C131;
    const double C10785 = C10756 * C131;
    const double C31661 = C31632 * C131;
    const double C364 = C113 * C326;
    const double C10983 = C10756 * C326;
    const double C31859 = C31632 * C326;
    const double C370 = C113 * C328;
    const double C11331 = C10756 * C328;
    const double C32207 = C31632 * C328;
    const double C568 = C113 * C532;
    const double C10781 = C10757 * C532;
    const double C11469 = C10756 * C532;
    const double C31657 = C31633 * C532;
    const double C32345 = C31632 * C532;
    const double C576 = C113 * C542;
    const double C11173 = C10756 * C542;
    const double C11161 = C10757 * C542;
    const double C32049 = C31632 * C542;
    const double C32037 = C31633 * C542;
    const double C1035 = C113 * C1014;
    const double C10975 = C10757 * C1014;
    const double C11687 = C10756 * C1014;
    const double C31851 = C31633 * C1014;
    const double C32563 = C31632 * C1014;
    const double C2463 = C113 * C2162;
    const double C11171 = C10757 * C2162;
    const double C32047 = C31633 * C2162;
    const double C1283 =
        (-2 * (C47089 * C47191 + C47662 * ce)) / C46935 -
        (C47089 * (C47089 * C47288 + C47191 + C47089 * C47268 * ce)) / C46935 -
        ((C47662 + C47268 * C47235) * ce) / C46935;
    const double C1418 =
        -(C47088 * (C47089 * C47288 + C47191 + C47728 * ce)) / C46935;
    const double C1426 =
        -(C47288 * C47330 + C47089 * C47191 + C47662 * ce) / C46935;
    const double C2466 = C2459 + C2460;
    const double C11190 = C11169 + C11170;
    const double C13277 = C13271 + C13272;
    const double C32066 = C32045 + C32046;
    const double C34145 = C34139 + C34140;
    const double C47283 = C47282 + C47182;
    const double C47417 = C47412 / C46935;
    const double C47458 = C47456 / C47099;
    const double C47485 = -C47481;
    const double C47302 = C47300 + C47301;
    const double C47675 = C47673 + C47674;
    const double C1429 =
        (C47089 * C47153 + C47088 * (C47088 * C47258 + C47735 * ae) +
         C47088 * C47735 * ae) /
        C47060;
    const double C2577 =
        (2 * (C47088 * C47258 + C47735 * ae) +
         C47088 * (C47258 + C47088 * (C47088 * C47089 * C47172 + C47309 * ae) +
                   C47088 * C47309 * ae) +
         (C47735 + C47309 * C47330) * ae) /
        C47060;
    const double C1413 = C47089 * C47668 + C47735 * C47330;
    const double C2572 =
        2 * C47088 * C47735 + C47088 * (C47735 + C47309 * C47330);
    const double C47793 = C47789 + C47790;
    const double C1746 = C48293 * C1419;
    const double C10978 = C48410 * C1419;
    const double C31854 = C48410 * C1419;
    const double C2462 = C48293 * C2163;
    const double C11176 = C48410 * C2163;
    const double C32052 = C48410 * C2163;
    const double C1571 = C113 * C1276;
    const double C1745 = C113 * C1408;
    const double C10977 = C10757 * C1408;
    const double C31853 = C31633 * C1408;
    const double C2461 = C113 * C2156;
    const double C11175 = C10757 * C2156;
    const double C32051 = C31633 * C2156;
    const double C47838 = C47834 + C47835;
    const double C7502 = C48293 * C2575;
    const double C13126 = C48410 * C2575;
    const double C33994 = C48410 * C2575;
    const double C7501 = C113 * C2571;
    const double C13125 = C10757 * C2571;
    const double C33993 = C31633 * C2571;
    const double C47296 = C47089 * C47294;
    const double C47431 = -2 * C47294;
    const double C47464 = ae * C47294;
    const double C47462 = C47088 * C47294;
    const double C2576 = (-2 * C47088 * C47288) / C46935 -
                         (C47088 * (C47294 * C47330 + C47288)) / C46935;
    const double C1427 =
        (C47147 + C47156 * C47235 + C47088 * (C47088 * C47252 + C47730 * ae) +
         C47088 * C47730 * ae) /
        C47060;
    const double C1859 = (C47088 * (2 * C47246 + C47089 * C47252) +
                          (2 * C47728 + C47089 * C47730) * ae) /
                         C47060;
    const double C1275 = 3 * (C47662 + C47268 * C47235) +
                         C47089 * (2 * C47728 + C47089 * C47730);
    const double C1412 = C47662 + C47268 * C47235 + C47730 * C47330;
    const double C1855 = C47088 * (2 * C47728 + C47089 * C47730);
    const double C7639 =
        2 * C47088 * C47730 + C47088 * (C47730 + C47441 * C47330);
    const double C2170 =
        (3 * (C47147 + C47088 * C47785 + C47783 * ae) +
         C47088 * (2 * C47785 +
                   C47088 * (C47156 + C47088 * (C47088 * C47167 + C47291 * ae) +
                             C47088 * C47291 * ae) +
                   C47786 * ae) +
         (2 * C47783 + C47088 * C47786) * ae) /
        C47060;
    const double C2160 = 3 * (C47662 + C47268 * C47330) +
                         C47088 * (2 * C47783 + C47088 * C47786);
    const double C47869 = C47088 * C47865;
    const double C47424 = C47422 / C46935;
    const double C47811 = C47809 + C47810;
    const double C47889 = C47885 + C47886;
    const double C23740 = C48293 * C7640;
    const double C27258 = C48410 * C7640;
    const double C38522 = C48410 * C7640;
    const double C23739 = C113 * C7638;
    const double C27257 = C10757 * C7638;
    const double C38521 = C31633 * C7638;
    const double C7166 =
        (3 * (C47232 + C47088 * C47830 + C47828 * ae) +
         C47088 * (2 * C47830 +
                   C47088 * (C47367 + C47088 * (C47088 * C47520 + C47415 * ae) +
                             C47088 * C47415 * ae) +
                   C47831 * ae) +
         (2 * C47828 + C47088 * C47831) * ae) /
        C47060;
    const double C7164 = 3 * (C47721 + C47279 * C47330) +
                         C47088 * (2 * C47828 + C47088 * C47831);
    const double C47903 = C47088 * C47899;
    const double C47423 = C47421 + C47186;
    const double C47459 = C47457 + C47280;
    const double C47556 = C47549 / C46935;
    const double C47592 = C47589 / C47099;
    const double C47593 = -2 * C47587;
    const double C47591 = ae * C47587;
    const double C47857 = C47853 + C47855;
    const double C47923 = C47151 + C47921;
    const double C47132 = C47131 / C47060;
    const double C47402 = -C47399;
    const double C47505 = -C47500;
    const double C47536 = C47533 / C47060;
    const double C47625 = C47621 / C47060;
    const double C47174 = C47169 + C47173;
    const double C47263 = C47161 + C47261;
    const double C47403 = C47089 * C47400;
    const double C7642 =
        (2 * (C47088 * C47252 + C47730 * ae) +
         C47088 * (C47252 + C47088 * (C47088 * C47400 + C47441 * ae) +
                   C47088 * C47441 * ae) +
         (C47730 + C47441 * C47330) * ae) /
        C47060;
    const double C47537 = C47529 + C47534;
    const double C47217 = C47216 / C46935;
    const double C47310 = C47304 + C47308;
    const double C47355 = C47353 + C47202;
    const double C47442 = C47089 * C47439;
    const double C47465 = C47439 * C47330;
    const double C47507 = C47088 * C47503;
    const double C47563 = C47560 + C47199;
    const double C47594 = C47590 + C47418;
    const double C47626 = C47623 / C46935;
    const double C176 = C166 * C114;
    const double C356 = C166 * C302;
    const double C722 = C166 * C711;
    const double C389 = C376 * C303;
    const double C720 = C376 * C712;
    const double C1179 = C376 * C1174;
    const double C2691 = C376 * C2687;
    const double C5045 = C376 * C114;
    const double C5207 = C376 * C302;
    const double C5507 = C376 * C711;
    const double C594 = C582 * C114;
    const double C1028 = C582 * C711;
    const double C3698 = C582 * C302;
    const double C177 = C167 * C48072;
    const double C357 = C167 * C48429;
    const double C723 = C167 * C48358;
    const double C1184 = C167 * C1167;
    const double C2694 = C167 * C2680;
    const double C178 = C168 * C48072;
    const double C368 = C168 * C48429;
    const double C727 = C168 * C48358;
    const double C1190 = C168 * C1167;
    const double C2698 = C168 * C2680;
    const double C721 = C377 * C48135;
    const double C1180 = C377 * C1168;
    const double C2692 = C377 * C48135;
    const double C5046 = C377 * C48072;
    const double C5208 = C377 * C48429;
    const double C5508 = C377 * C48358;
    const double C6006 = C377 * C1167;
    const double C7784 = C377 * C2680;
    const double C595 = C583 * C48072;
    const double C1027 = C583 * C48358;
    const double C1734 = C583 * C1167;
    const double C2982 = C583 * C2680;
    const double C3697 = C583 * C48429;
    const double C597 = C585 * C48072;
    const double C1033 = C585 * C48358;
    const double C1742 = C585 * C1167;
    const double C2986 = C585 * C2680;
    const double C3703 = C585 * C48429;
    const double C601 = C589 * C48072;
    const double C2332 = C589 * C48358;
    const double C2990 = C589 * C2680;
    const double C6109 = C113 * C1279;
    const double C27075 = C10756 * C1279;
    const double C38339 = C31632 * C1279;
    const double C6281 = C113 * C1416;
    const double C26219 = C10757 * C1416;
    const double C27245 = C10756 * C1416;
    const double C37483 = C31633 * C1416;
    const double C38509 = C31632 * C1416;
    const double C6285 = C113 * C1422;
    const double C26835 = C10757 * C1422;
    const double C27253 = C10756 * C1422;
    const double C38099 = C31633 * C1422;
    const double C38517 = C31632 * C1422;
    const double C7649 = C113 * C2574;
    const double C27251 = C10757 * C2574;
    const double C28577 = C10756 * C2574;
    const double C38515 = C31633 * C2574;
    const double C39837 = C31632 * C2574;
    const double C379 = C354 + C355;
    const double C10991 = C10965 + C10966;
    const double C31867 = C31841 + C31842;
    const double C1044 = C1029 + C1030;
    const double C10987 = C10957 + C10958;
    const double C11691 = C11677 + C11678;
    const double C31863 = C31833 + C31834;
    const double C32567 = C32553 + C32554;
    const double C378 = C352 + C353;
    const double C10989 = C10961 + C10962;
    const double C31865 = C31837 + C31838;
    const double C588 = C570 + C571;
    const double C11187 = C11163 + C11164;
    const double C11180 = C11149 + C11150;
    const double C32063 = C32039 + C32040;
    const double C32056 = C32025 + C32026;
    const double C1043 = C1025 + C1026;
    const double C10985 = C10953 + C10954;
    const double C11689 = C11673 + C11674;
    const double C31861 = C31829 + C31830;
    const double C32565 = C32549 + C32550;
    const double C1575 = C1561 + C1562;
    const double C12210 = C12203 + C12204;
    const double C33086 = C33079 + C33080;
    const double C1749 = C1737 + C1738;
    const double C10990 = C10963 + C10964;
    const double C12416 = C12409 + C12410;
    const double C31866 = C31839 + C31840;
    const double C33292 = C33285 + C33286;
    const double C2465 = C2457 + C2458;
    const double C11188 = C11165 + C11166;
    const double C13275 = C13267 + C13268;
    const double C32064 = C32041 + C32042;
    const double C34143 = C34135 + C34136;
    const double C6297 = C6283 + C6284;
    const double C26838 = C26831 + C26832;
    const double C27268 = C27249 + C27250;
    const double C38102 = C38095 + C38096;
    const double C38532 = C38513 + C38514;
    const double C7651 = C7647 + C7648;
    const double C27267 = C27247 + C27248;
    const double C28581 = C28573 + C28574;
    const double C38531 = C38511 + C38512;
    const double C39841 = C39833 + C39834;
    const double C725 = C382 * C48135;
    const double C1186 = C382 * C1168;
    const double C2696 = C382 * C48135;
    const double C5047 = C382 * C48072;
    const double C5214 = C382 * C48429;
    const double C5512 = C382 * C48358;
    const double C6012 = C382 * C1167;
    const double C7788 = C382 * C2680;
    const double C179 = C169 * C114;
    const double C369 = C169 * C302;
    const double C728 = C169 * C711;
    const double C393 = C381 * C303;
    const double C724 = C381 * C712;
    const double C1185 = C381 * C1174;
    const double C2695 = C381 * C2687;
    const double C5048 = C381 * C114;
    const double C5215 = C381 * C302;
    const double C5513 = C381 * C711;
    const double C596 = C584 * C114;
    const double C1034 = C584 * C711;
    const double C3704 = C584 * C302;
    const double C133 = (4 * (2 * C47147 + C47096 * C47153) +
                         C47096 * (3 * C47153 + C47096 * C47163)) /
                        C47060;
    const double C329 =
        (2 * C47147 + C47096 * C47153 + C47163 * C47235) / C47060;
    const double C331 = (C47089 * (3 * C47153 + C47096 * C47163)) / C47060;
    const double C6116 = C48293 * C1284;
    const double C47401 = -C47398;
    const double C6100 = (4 * (2 * C47232 + C47089 * C47240) +
                          C47089 * (3 * C47240 + C47089 * C47381)) /
                         C47060;
    const double C47538 = C47535 / C47060;
    const double C47205 = C47200 - C47204;
    const double C13273 = C10757 * C2171;
    const double C34141 = C31633 * C2171;
    const double C47508 = -C47504;
    const double C47490 = C47483 - C47487;
    const double C47627 = C47624 / C47060;
    const double C47359 = C47319 * ce;
    const double C47681 = C47096 * C47319;
    const double C47797 = C47089 * C47319;
    const double C1277 = 3 * (C47668 + C47271 * C47235) +
                         C47089 * (2 * C47735 + C47089 * C47737);
    const double C1414 = C47668 + C47271 * C47235 + C47737 * C47330;
    const double C1856 = C47088 * (2 * C47735 + C47089 * C47737);
    const double C2161 = 3 * (C47668 + C47271 * C47330) +
                         C47088 * (2 * C47791 + C47088 * C47794);
    const double C47445 = C47443 / C46935;
    const double C47816 = C47814 + C47815;
    const double C7165 = 3 * (C47728 + C47293 * C47330) +
                         C47088 * (2 * C47836 + C47088 * C47839);
    const double C47872 = C47868 + C47870;
    const double C47567 = C47565 * ce;
    const double C47878 = C47089 * C47565;
    const double C23388 = 3 * (C47723 + C47420 * C47330) +
                          C47088 * (2 * C47887 + C47088 * C47890);
    const double C47906 = C47902 + C47904;
    const double C47926 = C47088 * C47924;
    const double C48049 = C48045 - C48048;
    const double C48413 = C48381 / C46935;
    const double C48057 = C48053 - C48056;
    const double C48427 = C48412 / C46952;
    const double C48173 = C48168 - C48172;
    const double C48419 = C48392 / C46935;
    const double C48180 = C48176 - C48179;
    const double C48433 = C48423 / C46952;
    const double C47011 = C47009 / C46935;
    const double C46984 = C48072 - C46980;
    const double C46993 = C46989 + C48135;
    const double C47021 = C47018 - C47020;
    const double C3129 = C168 * C48131;
    const double C3123 = C167 * C48131;
    const double C3117 = C165 * C48131;
    const double C3445 = C585 * C48131;
    const double C3439 = C583 * C48131;
    const double C8288 = C382 * C48131;
    const double C8282 = C377 * C48131;
    const double C48361 = C48131 * C48125;
    const double C48398 = C48363 + C48131;
    const double C394 = C382 * C48417;
    const double C390 = C377 * C48417;
    const double C3125 = C382 * C48138;
    const double C3119 = C377 * C48138;
    const double C48365 = C48138 / C46952;
    const double C48362 = C48138 * C48125;
    const double C1540 = C48431 - (C48131 * C48127) / C46935;
    const double C1191 = C169 * C1173;
    const double C1183 = C166 * C1173;
    const double C1177 = C164 * C1173;
    const double C1743 = C584 * C1173;
    const double C1735 = C582 * C1173;
    const double C6013 = C381 * C1173;
    const double C6005 = C376 * C1173;
    const double C47119 = C47118 - C47112;
    const double C47254 = C47253 / C47060;
    const double C47347 = C47346 / C47060;
    const double C47383 = C47380 - C47373;
    const double C47489 = C47486 - C47478;
    const double C47242 = C47241 - C47237;
    const double C47337 = C47336 - C47332;
    const double C170 = C156 + C157;
    const double C10806 = C10789 + C10790;
    const double C31682 = C31665 + C31666;
    const double C383 = C362 + C363;
    const double C10998 = C10979 + C10980;
    const double C31874 = C31855 + C31856;
    const double C385 = C366 + C367;
    const double C11334 = C11327 + C11328;
    const double C32210 = C32203 + C32204;
    const double C586 = C566 + C567;
    const double C10800 = C10777 + C10778;
    const double C11478 = C11473 + C11474;
    const double C31676 = C31653 + C31654;
    const double C32354 = C32349 + C32350;
    const double C590 = C574 + C575;
    const double C11194 = C11177 + C11178;
    const double C11184 = C11157 + C11158;
    const double C32070 = C32053 + C32054;
    const double C32060 = C32033 + C32034;
    const double C1045 = C1031 + C1032;
    const double C10994 = C10971 + C10972;
    const double C11694 = C11683 + C11684;
    const double C31870 = C31847 + C31848;
    const double C32570 = C32559 + C32560;
    const double C2343 = C2333 + C2334;
    const double C11690 = C11675 + C11676;
    const double C13134 = C13127 + C13128;
    const double C32566 = C32551 + C32552;
    const double C34002 = C33995 + C33996;
    const double C6121 = C6111 + C6112;
    const double C27089 = C27077 + C27078;
    const double C38353 = C38341 + C38342;
    const double C6299 = C6287 + C6288;
    const double C27271 = C27255 + C27256;
    const double C27263 = C27239 + C27240;
    const double C38535 = C38519 + C38520;
    const double C38527 = C38503 + C38504;
    const double C6789 = C6785 + C6786;
    const double C27085 = C27069 + C27070;
    const double C27737 = C27729 + C27730;
    const double C38349 = C38333 + C38334;
    const double C39001 = C38993 + C38994;
    const double C47382 = C47379 / C47060;
    const double C47858 = C47856 + C47851;
    const double C171 = C158 + C159;
    const double C10804 = C10785 + C10786;
    const double C31680 = C31661 + C31662;
    const double C1563 = C113 * C1283;
    const double C12207 = C10756 * C1283;
    const double C33083 = C31632 * C1283;
    const double C1739 = C113 * C1418;
    const double C10967 = C10757 * C1418;
    const double C12413 = C10756 * C1418;
    const double C31843 = C31633 * C1418;
    const double C33289 = C31632 * C1418;
    const double C2335 = C113 * C1426;
    const double C11679 = C10757 * C1426;
    const double C13131 = C10756 * C1426;
    const double C32555 = C31633 * C1426;
    const double C33999 = C31632 * C1426;
    const double C2470 = C2466 * C48072;
    const double C47284 = C47283 + C47281;
    const double C47488 = C47485 / C47060;
    const double C1287 =
        (-2 * (C47089 * C47194 + C47668 * ce)) / C46935 -
        (C47089 * (C47089 * C47302 + C47194 + C47089 * C47271 * ce)) / C46935 -
        ((C47668 + C47271 * C47235) * ce) / C46935;
    const double C1420 =
        -(C47088 * (C47089 * C47302 + C47194 + C47735 * ce)) / C46935;
    const double C1430 =
        -(C47302 * C47330 + C47089 * C47194 + C47668 * ce) / C46935;
    const double C536 = (C47088 * (3 * C47153 + C47096 * C47163) +
                         (3 * C47668 + C47096 * C47675) * ae) /
                        C47060;
    const double C544 =
        (2 * C47147 + C47096 * C47153 +
         C47088 * (C47088 * C47163 + C47675 * ae) + C47088 * C47675 * ae) /
        C47060;
    const double C1015 =
        (C47088 * C47089 * C47163 + C47089 * C47675 * ae) / C47060;
    const double C120 = 4 * (2 * C47662 + C47096 * C47668) +
                        C47096 * (3 * C47668 + C47096 * C47675);
    const double C312 = 2 * C47662 + C47096 * C47668 + C47675 * C47235;
    const double C313 = C47089 * (3 * C47668 + C47096 * C47675);
    const double C521 = C47088 * (3 * C47668 + C47096 * C47675);
    const double C525 = 2 * C47662 + C47096 * C47668 + C47675 * C47330;
    const double C1007 = C47088 * C47089 * C47675;
    const double C1550 =
        2 * C47089 * C47675 + C47089 * (C47675 + C47319 * C47235);
    const double C1728 = C47088 * (C47675 + C47319 * C47235);
    const double C2452 =
        2 * C47088 * C47675 + C47088 * (C47675 + C47319 * C47330);
    const double C2340 = C48293 * C1429;
    const double C11682 = C48410 * C1429;
    const double C32558 = C48410 * C1429;
    const double C2339 = C113 * C1413;
    const double C11681 = C10757 * C1413;
    const double C32557 = C31633 * C1413;
    const double C2172 =
        (3 * (C47153 + C47088 * C47793 + C47791 * ae) +
         C47088 * (2 * C47793 +
                   C47088 * (C47161 + C47088 * (C47088 * C47172 + C47307 * ae) +
                             C47088 * C47307 * ae) +
                   C47794 * ae) +
         (2 * C47791 + C47088 * C47794) * ae) /
        C47060;
    const double C1577 = C1571 + C1572;
    const double C1751 = C1745 + C1746;
    const double C10997 = C10977 + C10978;
    const double C31873 = C31853 + C31854;
    const double C2467 = C2461 + C2462;
    const double C11193 = C11175 + C11176;
    const double C32069 = C32051 + C32052;
    const double C7168 =
        (3 * (C47246 + C47088 * C47838 + C47836 * ae) +
         C47088 * (2 * C47838 +
                   C47088 * (C47388 +
                             C47088 * (C47088 * C47089 * C47392 + C47437 * ae) +
                             C47088 * C47437 * ae) +
                   C47839 * ae) +
         (2 * C47836 + C47088 * C47839) * ae) /
        C47060;
    const double C7505 = C7501 + C7502;
    const double C13133 = C13125 + C13126;
    const double C34001 = C33993 + C33994;
    const double C47297 = C47296 + C47196;
    const double C47434 = C47431 / C46935;
    const double C47466 = C47464 / C47099;
    const double C7503 = C113 * C2576;
    const double C13129 = C10757 * C2576;
    const double C33997 = C31633 * C2576;
    const double C6292 = C48293 * C1427;
    const double C12408 = C48410 * C1427;
    const double C33284 = C48410 * C1427;
    const double C6640 = C48293 * C1859;
    const double C12202 = C48410 * C1859;
    const double C33078 = C48410 * C1859;
    const double C6115 = C113 * C1275;
    const double C6291 = C113 * C1412;
    const double C12407 = C10757 * C1412;
    const double C33283 = C31633 * C1412;
    const double C6639 = C113 * C1855;
    const double C12201 = C10757 * C1855;
    const double C33077 = C31633 * C1855;
    const double C13270 = C48410 * C2170;
    const double C34138 = C48410 * C2170;
    const double C13269 = C10757 * C2160;
    const double C34137 = C31633 * C2160;
    const double C47871 = C47156 + C47869;
    const double C6272 =
        (2 * C47232 + C47089 * C47240 +
         C47088 * (C47088 * C47381 + C47811 * ae) + C47088 * C47811 * ae) /
        C47060;
    const double C6778 = (C47088 * (3 * C47240 + C47089 * C47381) +
                          (3 * C47723 + C47089 * C47811) * ae) /
                         C47060;
    const double C6098 = 4 * (2 * C47721 + C47089 * C47723) +
                         C47089 * (3 * C47723 + C47089 * C47811);
    const double C6270 = 2 * C47721 + C47089 * C47723 + C47811 * C47330;
    const double C6776 = C47088 * (3 * C47723 + C47089 * C47811);
    const double C23734 =
        2 * C47088 * C47811 + C47088 * (C47811 + C47565 * C47330);
    const double C23389 =
        (3 * (C47240 + C47088 * C47889 + C47887 * ae) +
         C47088 * (2 * C47889 +
                   C47088 * (C47375 + C47088 * (C47088 * C47530 + C47559 * ae) +
                             C47088 * C47559 * ae) +
                   C47890 * ae) +
         (2 * C47887 + C47088 * C47890) * ae) /
        C47060;
    const double C23743 = C23739 + C23740;
    const double C27272 = C27257 + C27258;
    const double C38536 = C38521 + C38522;
    const double C28576 = C48410 * C7166;
    const double C39836 = C48410 * C7166;
    const double C28575 = C10757 * C7164;
    const double C39835 = C31633 * C7164;
    const double C47905 = C47367 + C47903;
    const double C47425 = C47423 + C47419;
    const double C7167 =
        (-3 * (C47280 * C47330 + C47275)) / C46935 +
        C47088 * ((-2 * C47454) / C46935 - (C47088 * C47459) / C46935);
    const double C47597 = C47593 / C46935;
    const double C47595 = C47591 / C47099;
    const double C12922 = 4 * (2 * C47775 + C47088 * C47778) +
                          C47088 * (3 * C47778 + C47088 * C47857);
    const double C47925 = C47923 + C47918;
    const double C47133 = C47132 - C47124;
    const double C47405 = C47402 / C47060;
    const double C47509 = C47505 / C47060;
    const double C47539 = C47536 - C47528;
    const double C47628 = C47625 - C47615;
    const double C47175 = C47096 * C47174;
    const double C1551 =
        (2 * C47089 * C47163 + C47089 * (C47163 + C47174 * C47235)) / C47060;
    const double C1729 = (C47088 * (C47163 + C47174 * C47235) +
                          (C47675 + C47319 * C47235) * ae) /
                         C47060;
    const double C2453 =
        (2 * (C47088 * C47163 + C47675 * ae) +
         C47088 * (C47163 + C47088 * (C47088 * C47174 + C47319 * ae) +
                   C47088 * C47319 * ae) +
         (C47675 + C47319 * C47330) * ae) /
        C47060;
    const double C1288 = (3 * (C47153 + C47161 * C47235) +
                          C47089 * (2 * C47258 + C47089 * C47263)) /
                         C47060;
    const double C1431 =
        (C47153 + C47161 * C47235 + C47088 * (C47088 * C47263 + C47737 * ae) +
         C47088 * C47737 * ae) /
        C47060;
    const double C1861 = (C47088 * (2 * C47258 + C47089 * C47263) +
                          (2 * C47735 + C47089 * C47737) * ae) /
                         C47060;
    const double C47406 = C47396 + C47403;
    const double C47540 = C47089 * C47537;
    const double C23735 =
        (2 * (C47088 * C47381 + C47811 * ae) +
         C47088 * (C47381 + C47088 * (C47088 * C47537 + C47565 * ae) +
                   C47088 * C47565 * ae) +
         (C47811 + C47565 * C47330) * ae) /
        C47060;
    const double C47218 = C47213 - C47217;
    const double C47312 = C47089 * C47310;
    const double C2578 = (-2 * C47088 * C47302) / C46935 -
                         (C47088 * (C47310 * C47330 + C47302)) / C46935;
    const double C2173 =
        (-3 * (C47202 * C47330 + C47194)) / C46935 +
        C47088 * ((-2 * C47350) / C46935 - (C47088 * C47355) / C46935);
    const double C47444 = C47442 + C47208;
    const double C47467 = C47465 + C47294;
    const double C47510 = C47507 / C46935;
    const double C47566 = C47563 + C47558;
    const double C47598 = C47088 * C47594;
    const double C47629 = C47622 - C47626;
    const double C184 = C176 + C177;
    const double C380 = C356 + C357;
    const double C736 = C722 + C723;
    const double C6120 = C6109 + C6110;
    const double C27088 = C27075 + C27076;
    const double C38352 = C38339 + C38340;
    const double C392 = C379 * C48390;
    const double C1182 = C379 * C48390;
    const double C3121 = C379 * C3108;
    const double C5210 = C379 * C48417;
    const double C5510 = C379 * C48135;
    const double C6008 = C379 * C1168;
    const double C7786 = C379 * C48135;
    const double C8284 = C379 * C48138;
    const double C1051 = C1044 * C48135;
    const double C1736 = C1044 * C1168;
    const double C2984 = C1044 * C48135;
    const double C3441 = C1044 * C48138;
    const double C3699 = C1044 * C48417;
    const double C5370 = C1044 * C48072;
    const double C5850 = C1044 * C48358;
    const double C6636 = C1044 * C1167;
    const double C8128 = C1044 * C2680;
    const double C8686 = C1044 * C48131;
    const double C9016 = C1044 * C48429;
    const double C391 = C378 * C304;
    const double C1181 = C378 * C1175;
    const double C5209 = C378 * C303;
    const double C5509 = C378 * C712;
    const double C6007 = C378 * C1174;
    const double C7785 = C378 * C2687;
    const double C600 = C588 * C114;
    const double C2331 = C588 * C711;
    const double C1050 = C1043 * C712;
    const double C1733 = C1043 * C1174;
    const double C2981 = C1043 * C2687;
    const double C3696 = C1043 * C303;
    const double C5369 = C1043 * C114;
    const double C5851 = C1043 * C711;
    const double C6637 = C1043 * C1173;
    const double C9017 = C1043 * C302;
    const double C5211 = C1575 * C304;
    const double C6009 = C1575 * C1175;
    const double C1753 = C1749 * C1175;
    const double C3700 = C1749 * C304;
    const double C5849 = C1749 * C712;
    const double C6635 = C1749 * C1174;
    const double C8127 = C1749 * C2687;
    const double C9015 = C1749 * C303;
    const double C2469 = C2465 * C114;
    const double C185 = C178 + C179;
    const double C737 = C727 + C728;
    const double C606 = C597 + C596;
    const double C1046 = C1033 + C1034;
    const double C163 = C48293 * C133;
    const double C373 = C48293 * C329;
    const double C733 = C48293 * C331;
    const double C47404 = C47401 / C47060;
    const double C22630 = C48293 * C6100;
    const double C47541 = C47538 - C47124;
    const double C132 =
        4 * ((-2 * C47191) / C46935 - (C47096 * C47194) / C46935) +
        C47096 * ((-3 * C47194) / C46935 + C47096 * C47205);
    const double C330 = (-2 * C47191) / C46935 - (C47096 * C47194) / C46935 +
                        C47089 * (C47089 * C47205 - (C47675 * ce) / C46935) -
                        (C47089 * C47675 * ce) / C46935;
    const double C332 = C47089 * ((-3 * C47194) / C46935 + C47096 * C47205) -
                        ((3 * C47668 + C47096 * C47675) * ce) / C46935;
    const double C535 = C47088 * ((-3 * C47194) / C46935 + C47096 * C47205);
    const double C543 =
        (-2 * C47191) / C46935 - (C47096 * C47194) / C46935 + C47205 * C47330;
    const double C1016 = C47088 * (C47089 * C47205 - (C47675 * ce) / C46935);
    const double C47511 = C47508 / C47060;
    const double C12925 =
        4 * ((-2 * C47327) / C46935 - (C47088 * C47335) / C46935) +
        C47088 * ((-3 * C47335) / C46935 + C47088 * C47490);
    const double C47630 = C47627 - C47124;
    const double C47360 = C47359 / C46935;
    const double C47682 = C47680 + C47681;
    const double C2327 =
        (C47089 * C47163 + C47088 * (C47088 * C47089 * C47174 + C47797 * ae) +
         C47088 * C47797 * ae) /
        C47060;
    const double C2326 = C47089 * C47675 + C47797 * C47330;
    const double C6099 = 4 * (2 * C47728 + C47089 * C47730) +
                         C47089 * (3 * C47730 + C47089 * C47816);
    const double C6271 = 2 * C47728 + C47089 * C47730 + C47816 * C47330;
    const double C6777 = C47088 * (3 * C47730 + C47089 * C47816);
    const double C12923 = 4 * (2 * C47783 + C47088 * C47786) +
                          C47088 * (3 * C47786 + C47088 * C47872);
    const double C47569 = C47567 / C46935;
    const double C47879 = C47877 + C47878;
    const double C28114 = 4 * (2 * C47828 + C47088 * C47831) +
                          C47088 * (3 * C47831 + C47088 * C47906);
    const double C47928 = C47916 + C47926;
    const double C48343 = C48049 * C48039;
    const double C48383 = C48348 + C48049;
    const double C48351 = C48057 / C46952;
    const double C48347 = C48057 * C48039;
    const double C707 = C48427 - (C48049 * C48040) / C46935;
    const double C48367 = C48173 * C48167;
    const double C48404 = C48369 + C48173;
    const double C48371 = C48180 / C46952;
    const double C48368 = C48180 * C48167;
    const double C2448 = C48433 - (C48173 * C48169) / C46935;
    const double C47013 = C47008 - C47011;
    const double C46988 = C46984 * ce;
    const double C2686 = (-C46970) / C46952 - (C46984 * de) / C46935;
    const double C46997 = C46993 * de;
    const double C3120 = C378 * C47021;
    const double C3442 = C1749 * C47021;
    const double C8285 = C1575 * C47021;
    const double C1271 =
        (C47021 / C46952 + (0 * ce) / C46935) / C46952 - (0 * de) / C46935;
    const double C1549 = C47021 / C46952 - (0 * de) / C46935;
    const double C2817 = C47021 / C46952 + (0 * ce) / C46935;
    const double C48395 = C48361 / C46935;
    const double C48421 = C48398 / C46952;
    const double C48422 = C48399 + C48365;
    const double C1542 = C48365 - C48136 / C46939;
    const double C48397 = C48362 / C46935;
    const double C1566 = C167 * C1540;
    const double C1556 = C165 * C1540;
    const double C6434 = C377 * C1540;
    const double C1195 = C1183 + C1184;
    const double C141 =
        4 * ((-2 * C47096 * C47108) / C47099 + C47096 * C47119) +
        C47096 * (3 * C47119 + C47096 * ((-2 * C47096 * C47114) / C47099 +
                                         C47096 * ((-(std::pow(C47103, 7) *
                                                      bs[7] * C47094 * C47105) /
                                                    C46935) /
                                                       C47060 -
                                                   C47114 / C47099)));
    const double C340 = (-(C47108 * C47105) / C46935) / C47060 -
                        C47101 / C47099 - (C47089 * C47153 * ce) / C47099 +
                        C47089 * (C47089 * C47119 - (C47153 * ce) / C47099);
    const double C341 =
        C47089 * ((-2 * C47096 * C47108) / C47099 + C47096 * C47119) -
        ((2 * C47147 + C47096 * C47153) * ce) / C47099;
    const double C549 =
        (((-2 * C47096 * C47182) / C46935 -
          (C47096 * (C47106 * C47104 * C47179 * C47105 + C47182)) / C46935) *
         ae) /
            C47060 +
        C47088 * ((-2 * C47096 * C47108) / C47099 + C47096 * C47119);
    const double C554 = (-(C47108 * C47105) / C46935) / C47060 -
                        C47101 / C47099 - (ae * C47088 * C47194) / C47099 +
                        C47088 * (C47088 * C47119 - (ae * C47194) / C47099);
    const double C1021 =
        C47088 * (C47089 * C47119 - (C47153 * ce) / C47099) -
        (ae * (C47089 * C47194 +
               (C47139 * C47138 + C47098 * C47097 * C47105) * ce)) /
            C47099;
    const double C47255 = C47254 - C47251;
    const double C47348 = C47347 - C47344;
    const double C47385 = C47089 * C47383;
    const double C47455 = C47088 * C47383;
    const double C47518 = 2 * C47383;
    const double C47492 = C47088 * C47489;
    const double C47605 = 2 * C47489;
    const double C1291 =
        3 * ((-(C47232 * ce) / C46935) / C47060 - C47101 / C47099 +
             C47089 * C47242) -
        ((2 * C47232 + C47089 * C47240) * ce) / C47099 +
        C47089 *
            (2 * C47242 - (C47240 * ce) / C47099 +
             C47089 * ((-(C47089 * C47151 * ce) / C46935) / C47060 - C47112 +
                       C47089 * ((-(C47089 * C47114) / C46935) / C47060 -
                                 (C47151 * ce) / C47099)));
    const double C1433 = C47088 * ((-(C47232 * ce) / C46935) / C47060 -
                                   C47101 / C47099 + C47089 * C47242) -
                         (ae * (C47089 * (C47089 * C47182 + C47266 * ce) +
                                C47189 + C47089 * C47266 * ce)) /
                             C47099;
    const double C1436 = (-(C47089 * C47101) / C46935) / C47060 -
                         (C47142 * ce) / C47099 -
                         (ae * C47088 * C47275) / C47099 +
                         C47088 * (C47088 * C47242 - (ae * C47275) / C47099);
    const double C2579 =
        2 * (C47088 * C47242 - (ae * C47275) / C47099) -
        (ae * (C47280 * C47330 + C47275)) / C47099 +
        C47088 * (C47242 - (ae * C47088 * C47280) / C47099 +
                  C47088 * (C47088 * ((-(C47089 * C47114) / C46935) / C47060 -
                                      (C47151 * ce) / C47099) -
                            (ae * C47280) / C47099));
    const double C2177 =
        3 * ((-(ae * C47327) / C46935) / C47060 - C47101 / C47099 +
             C47088 * C47337) +
        (((-2 * C47327) / C46935 - (C47088 * C47335) / C46935) * ae) / C47060 +
        C47088 *
            (2 * C47337 - (ae * C47335) / C47099 +
             C47088 * ((-(ae * C47088 * C47186) / C46935) / C47060 - C47112 +
                       C47088 * ((-(C47088 * C47114) / C46935) / C47060 -
                                 (ae * C47186) / C47099)));
    const double C180 = C170 * C114;
    const double C730 = C170 * C711;
    const double C395 = C383 * C304;
    const double C1187 = C383 * C1175;
    const double C3126 = C383 * C47021;
    const double C5213 = C383 * C303;
    const double C5511 = C383 * C712;
    const double C6011 = C383 * C1174;
    const double C7787 = C383 * C2687;
    const double C397 = C385 * C303;
    const double C726 = C385 * C712;
    const double C1189 = C385 * C1174;
    const double C2697 = C385 * C2687;
    const double C5049 = C385 * C114;
    const double C5515 = C385 * C711;
    const double C598 = C586 * C114;
    const double C1037 = C586 * C711;
    const double C602 = C590 * C114;
    const double C2337 = C590 * C711;
    const double C1052 = C1045 * C712;
    const double C1741 = C1045 * C1174;
    const double C2985 = C1045 * C2687;
    const double C3702 = C1045 * C303;
    const double C5371 = C1045 * C114;
    const double C5853 = C1045 * C711;
    const double C2347 = C2343 * C712;
    const double C2991 = C2343 * C2687;
    const double C5373 = C2343 * C114;
    const double C7367 = C2343 * C711;
    const double C47384 = C47382 - C47112;
    const double C12924 =
        (4 * (2 * C47777 + C47088 * C47858 + C47778 * ae) +
         C47088 *
             (3 * C47858 +
              C47088 *
                  (2 * C47850 +
                   C47088 * (C47151 + C47088 * (C47088 * C47159 + C47229 * ae) +
                             C47088 * C47229 * ae) +
                   C47852 * ae) +
              C47857 * ae) +
         (3 * C47778 + C47088 * C47857) * ae) /
        C47060;
    const double C181 = C171 * C48072;
    const double C731 = C171 * C48358;
    const double C2702 = C171 * C2680;
    const double C1576 = C1563 + C1564;
    const double C12212 = C12207 + C12208;
    const double C33088 = C33083 + C33084;
    const double C1437 =
        (-(C47232 * ce) / C46935) / C47060 - C47101 / C47099 + C47089 * C47242 -
        (ae * C47088 * C47284) / C47099 +
        C47088 *
            (C47088 * ((-(C47089 * C47151 * ce) / C46935) / C47060 - C47112 +
                       C47089 * ((-(C47089 * C47114) / C46935) / C47060 -
                                 (C47151 * ce) / C47099)) -
             (ae * C47284) / C47099);
    const double C1863 =
        (((-2 * C47275) / C46935 - (C47089 * C47284) / C46935 -
          ((C47266 + C47227 * C47235) * ce) / C46935) *
         ae) /
            C47060 +
        C47088 *
            (2 * C47242 - (C47240 * ce) / C47099 +
             C47089 * ((-(C47089 * C47151 * ce) / C46935) / C47060 - C47112 +
                       C47089 * ((-(C47089 * C47114) / C46935) / C47060 -
                                 (C47151 * ce) / C47099)));
    const double C1281 =
        (-3 * (C47089 * C47275 + C47189 + C47721 * ce)) / C46935 +
        C47089 * ((-2 * C47275) / C46935 - (C47089 * C47284) / C46935 -
                  (C47723 * ce) / C46935) -
        ((2 * C47721 + C47089 * C47723) * ce) / C46935;
    const double C1424 =
        -(C47284 * C47330 + C47089 * C47275 + C47189 + C47721 * ce) / C46935;
    const double C1858 =
        C47088 * ((-2 * C47275) / C46935 - (C47089 * C47284) / C46935 -
                  (C47723 * ce) / C46935);
    const double C47491 = C47488 - C47112;
    const double C1573 = C113 * C1287;
    const double C1747 = C113 * C1420;
    const double C10981 = C10757 * C1420;
    const double C31857 = C31633 * C1420;
    const double C2341 = C113 * C1430;
    const double C11685 = C10757 * C1430;
    const double C32561 = C31633 * C1430;
    const double C854 = C48293 * C536;
    const double C10788 = C48410 * C536;
    const double C31664 = C48410 * C536;
    const double C581 = C48293 * C544;
    const double C11472 = C48410 * C544;
    const double C32348 = C48410 * C544;
    const double C1040 = C48293 * C1015;
    const double C11326 = C48410 * C1015;
    const double C32202 = C48410 * C1015;
    const double C162 = C113 * C120;
    const double C372 = C113 * C312;
    const double C732 = C113 * C313;
    const double C853 = C113 * C521;
    const double C10787 = C10757 * C521;
    const double C31663 = C31633 * C521;
    const double C580 = C113 * C525;
    const double C11471 = C10757 * C525;
    const double C32347 = C31633 * C525;
    const double C1039 = C113 * C1007;
    const double C11325 = C10757 * C1007;
    const double C32201 = C31633 * C1007;
    const double C2345 = C2339 + C2340;
    const double C11693 = C11681 + C11682;
    const double C32569 = C32557 + C32558;
    const double C5217 = C1577 * C304;
    const double C6015 = C1577 * C1175;
    const double C8291 = C1577 * C47021;
    const double C1755 = C1751 * C1175;
    const double C3448 = C1751 * C47021;
    const double C3706 = C1751 * C304;
    const double C5855 = C1751 * C712;
    const double C8489 = C1751 * C2687;
    const double C2471 = C2467 * C114;
    const double C7507 = C7505 * C114;
    const double C47298 = C47297 + C47295;
    const double C6123 = C6115 + C6116;
    const double C6301 = C6291 + C6292;
    const double C12415 = C12407 + C12408;
    const double C33291 = C33283 + C33284;
    const double C6643 = C6639 + C6640;
    const double C12209 = C12201 + C12202;
    const double C33085 = C33077 + C33078;
    const double C13276 = C13269 + C13270;
    const double C34144 = C34137 + C34138;
    const double C47873 = C47871 + C47866;
    const double C22750 = C48293 * C6272;
    const double C27732 = C48410 * C6272;
    const double C38996 = C48410 * C6272;
    const double C23102 = C48293 * C6778;
    const double C27080 = C48410 * C6778;
    const double C38344 = C48410 * C6778;
    const double C22629 = C113 * C6098;
    const double C22749 = C113 * C6270;
    const double C27731 = C10757 * C6270;
    const double C38995 = C31633 * C6270;
    const double C23101 = C113 * C6776;
    const double C27079 = C10757 * C6776;
    const double C38343 = C31633 * C6776;
    const double C28582 = C28575 + C28576;
    const double C39842 = C39835 + C39836;
    const double C47907 = C47905 + C47900;
    const double C47426 = C47089 * C47425;
    const double C47548 = -3 * C47425;
    const double C47580 = ae * C47425;
    const double C47578 = C47088 * C47425;
    const double C7641 = (-2 * C47088 * C47284) / C46935 -
                         (C47088 * (C47425 * C47330 + C47284)) / C46935;
    const double C28579 = C10757 * C7167;
    const double C39839 = C31633 * C7167;
    const double C47599 = C47383 - C47595;
    const double C47927 = C47088 * C47925;
    const double C47134 = C47096 * C47133;
    const double C47259 = C47089 * C47133;
    const double C47351 = C47088 * C47133;
    const double C1294 =
        2 * (C47089 * C47119 - (C47153 * ce) / C47099) -
        ((C47153 + C47161 * C47235) * ce) / C47099 +
        C47089 * (C47119 - (C47089 * C47161 * ce) / C47099 +
                  C47089 * (C47089 * C47133 - (C47161 * ce) / C47099));
    const double C2174 =
        2 * (C47088 * C47119 - (ae * C47194) / C47099) -
        (ae * (C47202 * std::pow(C47088, 2) + C47194)) / C47099 +
        C47088 * (C47119 - (ae * C47088 * C47202) / C47099 +
                  C47088 * (C47088 * C47133 - (ae * C47202) / C47099));
    const double C47408 = C47405 - C47395;
    const double C47512 = C47509 - C47501;
    const double C47542 = C47089 * C47539;
    const double C47588 = C47088 * C47539;
    const double C47631 = C47088 * C47628;
    const double C47176 = C47166 + C47175;
    const double C6102 = (4 * (2 * C47246 + C47089 * C47252) +
                          C47089 * (3 * C47252 + C47089 * C47406)) /
                         C47060;
    const double C6274 =
        (2 * C47246 + C47089 * C47252 +
         C47088 * (C47088 * C47406 + C47816 * ae) + C47088 * C47816 * ae) /
        C47060;
    const double C6780 = (C47088 * (3 * C47252 + C47089 * C47406) +
                          (3 * C47730 + C47089 * C47816) * ae) /
                         C47060;
    const double C47543 = C47523 + C47540;
    const double C47219 = C47096 * C47218;
    const double C47358 = C47089 * C47218;
    const double C2454 =
        2 * C47088 * C47205 + C47088 * (C47205 + C47218 * C47330);
    const double C47313 = C47312 + C47202;
    const double C47446 = C47444 + C47440;
    const double C7169 =
        (-3 * (C47294 * C47330 + C47288)) / C46935 +
        C47088 * ((-2 * C47462) / C46935 - (C47088 * C47467) / C46935);
    const double C47513 = C47506 - C47510;
    const double C47568 = C47089 * C47566;
    const double C47581 = C47566 * C47330;
    const double C47601 = C47598 / C46935;
    const double C47632 = C47088 * C47629;
    const double C401 = C380 - C393;
    const double C740 = C736 - C724;
    const double C47407 = C47404 - C47389;
    const double C160 = C113 * C132;
    const double C374 = C113 * C330;
    const double C734 = C113 * C332;
    const double C851 = C113 * C535;
    const double C10783 = C10757 * C535;
    const double C31659 = C31633 * C535;
    const double C578 = C113 * C543;
    const double C11467 = C10757 * C543;
    const double C32343 = C31633 * C543;
    const double C1041 = C113 * C1016;
    const double C11329 = C10757 * C1016;
    const double C32205 = C31633 * C1016;
    const double C47514 = C47511 - C47389;
    const double C121 = 5 * (3 * C47668 + C47096 * C47675) +
                        C47096 * (4 * C47675 + C47096 * C47682);
    const double C314 = 3 * C47668 + C47096 * C47675 + C47682 * C47235;
    const double C526 = 3 * C47668 + C47096 * C47675 + C47682 * C47330;
    const double C713 = C47089 * (4 * C47675 + C47096 * C47682);
    const double C845 = C47088 * (4 * C47675 + C47096 * C47682);
    const double C1008 = C47088 * C47089 * C47682;
    const double C22624 = 5 * (3 * C47723 + C47089 * C47811) +
                          C47089 * (4 * C47811 + C47089 * C47879);
    const double C22744 = 3 * C47723 + C47089 * C47811 + C47879 * C47330;
    const double C23096 = C47088 * (4 * C47811 + C47089 * C47879);
    const double C44344 = 5 * (3 * C47778 + C47088 * C47857) +
                          C47088 * (4 * C47857 + C47088 * C47928);
    const double C48379 = C48343 / C46935;
    const double C48414 = C48383 / C46952;
    const double C48415 = C48385 + C48351;
    const double C709 = C48351 - C48055 / C46939;
    const double C48382 = C48347 / C46935;
    const double C48401 = C48367 / C46935;
    const double C48424 = C48404 / C46952;
    const double C48425 = C48405 + C48371;
    const double C2450 = C48371 - C48178 / C46939;
    const double C48403 = C48368 / C46935;
    const double C46992 = C46988 / C46935;
    const double C2701 = C170 * C2686;
    const double C2699 = C169 * C2686;
    const double C2693 = C166 * C2686;
    const double C2689 = C164 * C2686;
    const double C2993 = C590 * C2686;
    const double C2989 = C588 * C2686;
    const double C2987 = C584 * C2686;
    const double C2983 = C582 * C2686;
    const double C3286 = C586 * C2686;
    const double C7791 = C385 * C2686;
    const double C7789 = C381 * C2686;
    const double C7783 = C376 * C2686;
    const double C8131 = C2343 * C2686;
    const double C8129 = C1043 * C2686;
    const double C8487 = C1045 * C2686;
    const double C47003 = C46997 / C46935;
    const double C1581 = C1577 * C1549;
    const double C1579 = C1575 * C1549;
    const double C2833 = C1577 * C2817;
    const double C2825 = C1575 * C2817;
    const double C48436 = C48395 + C48431;
    const double C1541 = C48421 - (C48138 * C48127) / C46935;
    const double C2824 = C379 * C48422;
    const double C1264 = C48422 / C46952 - C48136 / C48386;
    const double C1560 = C379 * C1542;
    const double C48432 = C48397 + C48421;
    const double C1196 = C1195 - C1185;
    const double C161 = C48293 * C141;
    const double C365 = C48293 * C340;
    const double C10984 = C10754 * C340;
    const double C31860 = C31630 * C340;
    const double C371 = C48293 * C341;
    const double C11332 = C10754 * C341;
    const double C32208 = C31630 * C341;
    const double C569 = C48293 * C549;
    const double C10782 = C48410 * C549;
    const double C11470 = C10754 * C549;
    const double C31658 = C48410 * C549;
    const double C32346 = C31630 * C549;
    const double C577 = C48293 * C554;
    const double C11174 = C10754 * C554;
    const double C11162 = C48410 * C554;
    const double C32050 = C31630 * C554;
    const double C32038 = C48410 * C554;
    const double C1036 = C48293 * C1021;
    const double C10976 = C48410 * C1021;
    const double C11688 = C10754 * C1021;
    const double C31852 = C48410 * C1021;
    const double C32564 = C31630 * C1021;
    const double C1293 =
        3 * ((-(C47246 * ce) / C46935) / C47060 - C47244 / C47099 +
             C47089 * C47255) -
        ((2 * C47246 + C47089 * C47252) * ce) / C47099 +
        C47089 * (2 * C47255 - (C47252 * ce) / C47099 +
                  C47089 * ((-(C47089 * C47167 * ce) / C46935) / C47060 -
                            C47121 / C47099 +
                            C47089 * ((-(C47089 * C47096 * C47128) / C46935) /
                                          C47060 -
                                      (C47167 * ce) / C47099)));
    const double C1434 = C47088 * ((-(C47246 * ce) / C46935) / C47060 -
                                   C47244 / C47099 + C47089 * C47255) -
                         (ae * (C47089 * (C47089 * C47196 + C47268 * ce) +
                                C47191 + C47089 * C47268 * ce)) /
                             C47099;
    const double C1438 = (-(C47089 * C47244) / C46935) / C47060 -
                         (C47147 * ce) / C47099 -
                         (ae * C47088 * C47288) / C47099 +
                         C47088 * (C47088 * C47255 - (ae * C47288) / C47099);
    const double C2580 =
        2 * (C47088 * C47255 - (ae * C47288) / C47099) -
        (ae * (C47294 * C47330 + C47288)) / C47099 +
        C47088 * (C47255 - (ae * C47088 * C47294) / C47099 +
                  C47088 * (C47088 * ((-(C47089 * C47096 * C47128) / C46935) /
                                          C47060 -
                                      (C47167 * ce) / C47099) -
                            (ae * C47294) / C47099));
    const double C2178 =
        3 * ((-(ae * C47339) / C46935) / C47060 - C47244 / C47099 +
             C47088 * C47348) +
        (((-2 * C47339) / C46935 - (C47088 * C47345) / C46935) * ae) / C47060 +
        C47088 * (2 * C47348 - (ae * C47345) / C47099 +
                  C47088 * ((-(ae * C47088 * C47208) / C46935) / C47060 -
                            C47121 / C47099 +
                            C47088 * ((-(C47088 * C47096 * C47128) / C46935) /
                                          C47060 -
                                      (ae * C47208) / C47099)));
    const double C47460 = C47455 - C47458;
    const double C47531 = C47518 - C47525;
    const double C47619 = C47605 - C47612;
    const double C6114 = C48293 * C1291;
    const double C27082 = C10754 * C1291;
    const double C38346 = C31630 * C1291;
    const double C6282 = C48293 * C1433;
    const double C26220 = C48410 * C1433;
    const double C27246 = C10754 * C1433;
    const double C37484 = C48410 * C1433;
    const double C38510 = C31630 * C1433;
    const double C6286 = C48293 * C1436;
    const double C26836 = C48410 * C1436;
    const double C27254 = C10754 * C1436;
    const double C38100 = C48410 * C1436;
    const double C38518 = C31630 * C1436;
    const double C7650 = C48293 * C2579;
    const double C27252 = C48410 * C2579;
    const double C28578 = C10754 * C2579;
    const double C38516 = C48410 * C2579;
    const double C39838 = C31630 * C2579;
    const double C741 = C726 - C737;
    const double C1056 = C1052 - C1046;
    const double C47386 = C47384 + C47385;
    const double C186 = C180 + C181;
    const double C1580 = C1576 * C48400;
    const double C2826 = C1576 * C48400;
    const double C5212 = C1576 * C48390;
    const double C6010 = C1576 * C48390;
    const double C6438 = C1576 * C1542;
    const double C7930 = C1576 * C48422;
    const double C8286 = C1576 * C3108;
    const double C6290 = C48293 * C1437;
    const double C27260 = C10754 * C1437;
    const double C27244 = C48410 * C1437;
    const double C38524 = C31630 * C1437;
    const double C38508 = C48410 * C1437;
    const double C6788 = C48293 * C1863;
    const double C27074 = C48410 * C1863;
    const double C27734 = C10754 * C1863;
    const double C38338 = C48410 * C1863;
    const double C38998 = C31630 * C1863;
    const double C6113 = C113 * C1281;
    const double C27081 = C10756 * C1281;
    const double C38345 = C31632 * C1281;
    const double C6289 = C113 * C1424;
    const double C27259 = C10756 * C1424;
    const double C27243 = C10757 * C1424;
    const double C38523 = C31632 * C1424;
    const double C38507 = C31633 * C1424;
    const double C6787 = C113 * C1858;
    const double C27073 = C10757 * C1858;
    const double C27733 = C10756 * C1858;
    const double C38337 = C31633 * C1858;
    const double C38997 = C31632 * C1858;
    const double C47493 = C47491 + C47492;
    const double C173 = C162 + C163;
    const double C387 = C372 + C373;
    const double C738 = C732 + C733;
    const double C856 = C853 + C854;
    const double C10805 = C10787 + C10788;
    const double C31681 = C31663 + C31664;
    const double C593 = C580 + C581;
    const double C11477 = C11471 + C11472;
    const double C32353 = C32347 + C32348;
    const double C1048 = C1039 + C1040;
    const double C11333 = C11325 + C11326;
    const double C32209 = C32201 + C32202;
    const double C2349 = C2345 * C712;
    const double C2995 = C2345 * C2687;
    const double C5376 = C2345 * C114;
    const double C1439 =
        (-(C47246 * ce) / C46935) / C47060 - C47244 / C47099 + C47089 * C47255 -
        (ae * C47088 * C47298) / C47099 +
        C47088 * (C47088 * ((-(C47089 * C47167 * ce) / C46935) / C47060 -
                            C47121 / C47099 +
                            C47089 * ((-(C47089 * C47096 * C47128) / C46935) /
                                          C47060 -
                                      (C47167 * ce) / C47099)) -
                  (ae * C47298) / C47099);
    const double C1864 =
        (((-2 * C47288) / C46935 - (C47089 * C47298) / C46935 -
          ((C47268 + C47291 * C47235) * ce) / C46935) *
         ae) /
            C47060 +
        C47088 * (2 * C47255 - (C47252 * ce) / C47099 +
                  C47089 * ((-(C47089 * C47167 * ce) / C46935) / C47060 -
                            C47121 / C47099 +
                            C47089 * ((-(C47089 * C47096 * C47128) / C46935) /
                                          C47060 -
                                      (C47167 * ce) / C47099)));
    const double C1285 =
        (-3 * (C47089 * C47288 + C47191 + C47728 * ce)) / C46935 +
        C47089 * ((-2 * C47288) / C46935 - (C47089 * C47298) / C46935 -
                  (C47730 * ce) / C46935) -
        ((2 * C47728 + C47089 * C47730) * ce) / C46935;
    const double C1428 =
        -(C47298 * C47330 + C47089 * C47288 + C47191 + C47728 * ce) / C46935;
    const double C1860 =
        C47088 * ((-2 * C47288) / C46935 - (C47089 * C47298) / C46935 -
                  (C47730 * ce) / C46935);
    const double C6439 = C6123 * C1549;
    const double C7931 = C6123 * C2817;
    const double C7369 = C6301 * C712;
    const double C8133 = C6301 * C2687;
    const double C6645 = C6643 * C1175;
    const double C8689 = C6643 * C47021;
    const double C9019 = C6643 * C304;
    const double C12926 =
        (4 * (2 * C47785 + C47088 * C47873 + C47786 * ae) +
         C47088 *
             (3 * C47873 +
              C47088 *
                  (2 * C47865 +
                   C47088 * (C47167 + C47088 * (C47088 * C47392 + C47433 * ae) +
                             C47088 * C47433 * ae) +
                   C47867 * ae) +
              C47872 * ae) +
         (3 * C47786 + C47088 * C47872) * ae) /
        C47060;
    const double C22633 = C22629 + C22630;
    const double C22753 = C22749 + C22750;
    const double C27738 = C27731 + C27732;
    const double C39002 = C38995 + C38996;
    const double C23105 = C23101 + C23102;
    const double C27090 = C27079 + C27080;
    const double C38354 = C38343 + C38344;
    const double C28115 =
        (4 * (2 * C47830 + C47088 * C47907 + C47831 * ae) +
         C47088 * (3 * C47907 +
                   C47088 * (2 * C47899 +
                             C47088 * (C47520 +
                                       C47088 * (C47088 * C47089 * C47170 +
                                                 C47552 * ae) +
                                       C47088 * C47552 * ae) +
                             C47901 * ae) +
                   C47906 * ae) +
         (3 * C47831 + C47088 * C47906) * ae) /
        C47060;
    const double C47427 = C47426 / C46935;
    const double C47555 = C47548 / C46935;
    const double C47582 = C47580 / C47099;
    const double C23741 = C113 * C7641;
    const double C27261 = C10757 * C7641;
    const double C38525 = C31633 * C7641;
    const double C47929 = C47910 + C47927;
    const double C47135 = C47127 + C47134;
    const double C47264 = C47259 - C47262;
    const double C47356 = C47351 - C47354;
    const double C1574 = C48293 * C1294;
    const double C2464 = C48293 * C2174;
    const double C11172 = C48410 * C2174;
    const double C32048 = C48410 * C2174;
    const double C47409 = C47089 * C47408;
    const double C47463 = C47088 * C47408;
    const double C47515 = C47088 * C47512;
    const double C47544 = C47541 + C47542;
    const double C47596 = C47588 - C47592;
    const double C47633 = C47630 + C47631;
    const double C134 = (5 * (3 * C47153 + C47096 * C47163) +
                         C47096 * (4 * C47163 + C47096 * C47176)) /
                        C47060;
    const double C333 =
        (3 * C47153 + C47096 * C47163 + C47176 * C47235) / C47060;
    const double C545 =
        (3 * C47153 + C47096 * C47163 +
         C47088 * (C47088 * C47176 + C47682 * ae) + C47088 * C47682 * ae) /
        C47060;
    const double C714 = (C47089 * (4 * C47163 + C47096 * C47176)) / C47060;
    const double C846 = (C47088 * (4 * C47163 + C47096 * C47176) +
                         (4 * C47675 + C47096 * C47682) * ae) /
                        C47060;
    const double C1017 =
        (C47088 * C47089 * C47176 + C47089 * C47682 * ae) / C47060;
    const double C22625 = (5 * (3 * C47240 + C47089 * C47381) +
                           C47089 * (4 * C47381 + C47089 * C47543)) /
                          C47060;
    const double C22745 =
        (3 * C47240 + C47089 * C47381 +
         C47088 * (C47088 * C47543 + C47879 * ae) + C47088 * C47879 * ae) /
        C47060;
    const double C23097 = (C47088 * (4 * C47381 + C47089 * C47543) +
                           (4 * C47811 + C47089 * C47879) * ae) /
                          C47060;
    const double C47220 = C47210 + C47219;
    const double C47361 = C47358 - C47360;
    const double C47314 = C47313 + C47311;
    const double C47447 = C47089 * C47446;
    const double C7643 = (-2 * C47088 * C47298) / C46935 -
                         (C47088 * (C47446 * C47330 + C47298)) / C46935;
    const double C12927 =
        4 * ((-2 * C47339) / C46935 - (C47088 * C47345) / C46935) +
        C47088 * ((-3 * C47345) / C46935 + C47088 * C47513);
    const double C47570 = C47568 / C46935;
    const double C47583 = C47581 + C47425;
    const double C47603 = C47597 - C47601;
    const double C47634 = C47616 + C47632;
    const double C402 = C401 - C394;
    const double C744 = C740 - C725;
    const double C48435 = C48379 + C48427;
    const double C708 = C48414 - (C48057 * C48040) / C46935;
    const double C110 = C48415 / C46952 - C48055 / C48386;
    const double C48428 = C48382 + C48414;
    const double C48437 = C48401 + C48433;
    const double C2449 = C48424 - (C48180 * C48169) / C46935;
    const double C2154 = C48425 / C46952 - C48178 / C48386;
    const double C48434 = C48403 + C48424;
    const double C46996 = C46992 - C46973;
    const double C2706 = C2698 + C2699;
    const double C2705 = C2693 + C2694;
    const double C3285 = C2986 + C2987;
    const double C2828 = C167 * C48436;
    const double C2820 = C165 * C48436;
    const double C7926 = C377 * C48436;
    const double C1261 =
        (C48429 + 2 * C48131) / C46952 - (C48436 * C48127) / C46935;
    const double C1568 = C382 * C1541;
    const double C1558 = C377 * C1541;
    const double C6436 = C379 * C1541;
    const double C2830 = C382 * C48432;
    const double C2822 = C377 * C48432;
    const double C7928 = C379 * C48432;
    const double C1262 =
        (C48417 + 2 * C48138 + C48436) / C46952 - (C48432 * C48127) / C46935;
    const double C1263 = (C48390 + C48135 / C46935 + C48432) / C46952 -
                         (C48422 * C48127) / C46935;
    const double C1197 = C1196 - C1186;
    const double C172 = C160 + C161;
    const double C384 = C364 + C365;
    const double C11000 = C10983 + C10984;
    const double C31876 = C31859 + C31860;
    const double C386 = C370 + C371;
    const double C11336 = C11331 + C11332;
    const double C32212 = C32207 + C32208;
    const double C587 = C568 + C569;
    const double C10802 = C10781 + C10782;
    const double C11476 = C11469 + C11470;
    const double C31678 = C31657 + C31658;
    const double C32352 = C32345 + C32346;
    const double C591 = C576 + C577;
    const double C11192 = C11173 + C11174;
    const double C11186 = C11161 + C11162;
    const double C32068 = C32049 + C32050;
    const double C32062 = C32037 + C32038;
    const double C1047 = C1035 + C1036;
    const double C10996 = C10975 + C10976;
    const double C11696 = C11687 + C11688;
    const double C31872 = C31851 + C31852;
    const double C32572 = C32563 + C32564;
    const double C6118 = C48293 * C1293;
    const double C1740 = C48293 * C1434;
    const double C10968 = C48410 * C1434;
    const double C12414 = C10754 * C1434;
    const double C31844 = C48410 * C1434;
    const double C33290 = C31630 * C1434;
    const double C2336 = C48293 * C1438;
    const double C11680 = C48410 * C1438;
    const double C13132 = C10754 * C1438;
    const double C32556 = C48410 * C1438;
    const double C34000 = C31630 * C1438;
    const double C7504 = C48293 * C2580;
    const double C13130 = C48410 * C2580;
    const double C33998 = C48410 * C2580;
    const double C13274 = C48410 * C2178;
    const double C34142 = C48410 * C2178;
    const double C7170 =
        3 * (C47242 - (ae * C47454) / C47099 + C47088 * C47460) +
        (((-2 * C47454) / C46935 - (C47088 * C47459) / C46935) * ae) / C47060 +
        C47088 *
            (2 * C47460 - (ae * C47459) / C47099 +
             C47088 *
                 (C47383 - (ae * C47088 * C47418) / C47099 +
                  C47088 * (C47088 * ((-(C47089 * C47128) / C46935) / C47060 -
                                      (C47159 * ce) / C47099) -
                            (ae * C47418) / C47099)));
    const double C6296 = C6281 + C6282;
    const double C26228 = C26219 + C26220;
    const double C27266 = C27245 + C27246;
    const double C37492 = C37483 + C37484;
    const double C38530 = C38509 + C38510;
    const double C6298 = C6285 + C6286;
    const double C26840 = C26835 + C26836;
    const double C27270 = C27253 + C27254;
    const double C38104 = C38099 + C38100;
    const double C38534 = C38517 + C38518;
    const double C7652 = C7649 + C7650;
    const double C27269 = C27251 + C27252;
    const double C28583 = C28577 + C28578;
    const double C38533 = C38515 + C38516;
    const double C39843 = C39837 + C39838;
    const double C6104 =
        4 * (2 * C47242 - (C47240 * ce) / C47099 + C47089 * C47386) -
        ((3 * C47240 + C47089 * C47381) * ce) / C47099 +
        C47089 *
            (3 * C47386 - (C47381 * ce) / C47099 +
             C47089 *
                 (2 * C47383 - (C47375 * ce) / C47099 +
                  C47089 *
                      ((-(C47089 * C47159 * ce) / C46935) / C47060 - C47124 +
                       C47089 * ((-(C47089 * C47128) / C46935) / C47060 -
                                 (C47159 * ce) / C47099))));
    const double C7644 =
        2 * (C47088 * C47386 - (ae * C47284) / C47099) -
        (ae * (C47425 * C47330 + C47284)) / C47099 +
        C47088 *
            (C47386 - (ae * C47088 * C47425) / C47099 +
             C47088 *
                 (C47088 *
                      ((-(C47089 * C47159 * ce) / C46935) / C47060 - C47124 +
                       C47089 * ((-(C47089 * C47128) / C46935) / C47060 -
                                 (C47159 * ce) / C47099)) -
                  (ae * C47425) / C47099));
    const double C6122 = C6113 + C6114;
    const double C27091 = C27081 + C27082;
    const double C38355 = C38345 + C38346;
    const double C6300 = C6289 + C6290;
    const double C27273 = C27259 + C27260;
    const double C27265 = C27243 + C27244;
    const double C38537 = C38523 + C38524;
    const double C38529 = C38507 + C38508;
    const double C6790 = C6787 + C6788;
    const double C27087 = C27073 + C27074;
    const double C27739 = C27733 + C27734;
    const double C38351 = C38337 + C38338;
    const double C39003 = C38997 + C38998;
    const double C12928 =
        4 * (2 * C47337 - (ae * C47335) / C47099 + C47088 * C47493) +
        (((-3 * C47335) / C46935 + C47088 * C47490) * ae) / C47060 +
        C47088 *
            (3 * C47493 + (C47490 * ae) / C47060 +
             C47088 *
                 (2 * C47489 - (ae * C47480) / C47099 +
                  C47088 *
                      ((-(ae * C47088 * C47199) / C46935) / C47060 - C47124 +
                       C47088 * ((-(C47088 * C47128) / C46935) / C47060 -
                                 (ae * C47199) / C47099))));
    const double C183 = C173 * C114;
    const double C399 = C387 * C304;
    const double C1193 = C387 * C1175;
    const double C3132 = C387 * C47021;
    const double C5517 = C387 * C712;
    const double C7793 = C387 * C2687;
    const double C742 = C738 * C712;
    const double C2703 = C738 * C2687;
    const double C5052 = C738 * C114;
    const double C858 = C856 * C114;
    const double C605 = C593 * C114;
    const double C1054 = C1048 * C712;
    const double C3288 = C1048 * C2687;
    const double C5650 = C1048 * C114;
    const double C6294 = C48293 * C1439;
    const double C12412 = C48410 * C1439;
    const double C33288 = C48410 * C1439;
    const double C6642 = C48293 * C1864;
    const double C12206 = C48410 * C1864;
    const double C33082 = C48410 * C1864;
    const double C6117 = C113 * C1285;
    const double C6293 = C113 * C1428;
    const double C12411 = C10757 * C1428;
    const double C33287 = C31633 * C1428;
    const double C6641 = C113 * C1860;
    const double C12205 = C10757 * C1860;
    const double C33081 = C31633 * C1860;
    const double C47428 = C47417 - C47427;
    const double C47930 = C47929 + C47914;
    const double C142 =
        5 * (3 * C47119 + C47096 * C47135) +
        C47096 * (4 * C47135 +
                  C47096 * (3 * C47133 +
                            C47096 * ((-2 * C47096 * C47128) / C47099 +
                                      C47096 * ((-(std::pow(C47092, 8) * bs[8] *
                                                   C47094 * C47105) /
                                                 C46935) /
                                                    C47060 -
                                                C47128 / C47099))));
    const double C342 = (-2 * C47096 * C47108) / C47099 + C47096 * C47119 -
                        (C47089 * C47163 * ce) / C47099 +
                        C47089 * (C47089 * C47135 - (C47163 * ce) / C47099);
    const double C343 = C47089 * (3 * C47119 + C47096 * C47135) -
                        ((3 * C47153 + C47096 * C47163) * ce) / C47099;
    const double C344 =
        3 * C47119 + C47096 * C47135 - (C47089 * C47176 * ce) / C47099 +
        C47089 * (C47089 * (3 * C47133 +
                            C47096 * ((-2 * C47096 * C47128) / C47099 +
                                      C47096 * ((-(std::pow(C47092, 8) * bs[8] *
                                                   C47094 * C47105) /
                                                 C46935) /
                                                    C47060 -
                                                C47128 / C47099))) -
                  (C47176 * ce) / C47099);
    const double C551 =
        (((-3 * (C47186 * C47105 + C47182)) / C46935 +
          C47096 * ((-2 * C47096 * C47186) / C46935 -
                    (C47096 * (C47110 * C47111 * C47179 * C47105 + C47186)) /
                        C46935)) *
         ae) /
            C47060 +
        C47088 * (3 * C47119 + C47096 * C47135);
    const double C555 = (-2 * C47096 * C47108) / C47099 + C47096 * C47119 +
                        (C47088 * C47205 * ae) / C47060 +
                        C47088 * ((C47205 * ae) / C47060 + C47088 * C47135);
    const double C716 =
        C47089 * (4 * C47135 +
                  C47096 * (3 * C47133 +
                            C47096 * ((-2 * C47096 * C47128) / C47099 +
                                      C47096 * ((-(std::pow(C47092, 8) * bs[8] *
                                                   C47094 * C47105) /
                                                 C46935) /
                                                    C47060 -
                                                C47128 / C47099)))) -
        ((4 * C47163 + C47096 * C47176) * ce) / C47099;
    const double C1022 =
        ((C47089 * C47205 - ((2 * C47096 * C47227 +
                              C47096 * (C47227 + C47104 * C47106 * C47105)) *
                             ce) /
                                C46935) *
         ae) /
            C47060 +
        C47088 * (C47089 * C47135 - (C47163 * ce) / C47099);
    const double C1553 =
        2 * (C47089 * C47135 - (C47163 * ce) / C47099) -
        ((C47163 + C47174 * C47235) * ce) / C47099 +
        C47089 * (C47135 - (C47089 * C47174 * ce) / C47099 +
                  C47089 * (C47089 * ((-2 * C47096 * C47128) / C47099 +
                                      C47096 * ((-(std::pow(C47092, 8) * bs[8] *
                                                   C47094 * C47105) /
                                                 C46935) /
                                                    C47060 -
                                                C47128 / C47099)) -
                            (C47174 * ce) / C47099));
    const double C1731 =
        ((C47205 + C47089 * (C47089 * C47218 - (C47319 * ce) / C46935) -
          (C47089 * C47319 * ce) / C46935) *
         ae) /
            C47060 +
        C47088 * (C47135 - (C47089 * C47174 * ce) / C47099 +
                  C47089 * (C47089 * ((-2 * C47096 * C47128) / C47099 +
                                      C47096 * ((-(std::pow(C47092, 8) * bs[8] *
                                                   C47094 * C47105) /
                                                 C46935) /
                                                    C47060 -
                                                C47128 / C47099)) -
                            (C47174 * ce) / C47099));
    const double C2455 =
        2 * ((C47205 * ae) / C47060 + C47088 * C47135) +
        ((C47205 + C47218 * C47330) * ae) / C47060 +
        C47088 * (C47135 + (C47088 * C47218 * ae) / C47060 +
                  C47088 * ((C47218 * ae) / C47060 +
                            C47088 * ((-2 * C47096 * C47128) / C47099 +
                                      C47096 * ((-(std::pow(C47092, 8) * bs[8] *
                                                   C47094 * C47105) /
                                                 C46935) /
                                                    C47060 -
                                                C47128 / C47099))));
    const double C1295 =
        3 * (C47119 - (C47258 * ce) / C47099 + C47089 * C47264) -
        ((2 * C47258 + C47089 * C47263) * ce) / C47099 +
        C47089 * (2 * C47264 - (C47263 * ce) / C47099 +
                  C47089 * (C47133 - (C47089 * C47172 * ce) / C47099 +
                            C47089 * (C47089 * ((-(std::pow(C47092, 8) * bs[8] *
                                                   C47094 * C47105) /
                                                 C46935) /
                                                    C47060 -
                                                C47128 / C47099) -
                                      (C47172 * ce) / C47099)));
    const double C1435 =
        C47088 * (C47119 - (C47258 * ce) / C47099 + C47089 * C47264) -
        (ae * (C47089 * (C47089 * C47202 + C47271 * ce) + C47194 +
               C47089 * C47271 * ce)) /
            C47099;
    const double C1440 = C47089 * C47119 - (C47153 * ce) / C47099 -
                         (ae * C47088 * C47302) / C47099 +
                         C47088 * (C47088 * C47264 - (ae * C47302) / C47099);
    const double C2581 =
        2 * (C47088 * C47264 - (ae * C47302) / C47099) -
        (ae * (C47310 * C47330 + C47302)) / C47099 +
        C47088 * (C47264 - (ae * C47088 * C47310) / C47099 +
                  C47088 * (C47088 * (C47089 * ((-(std::pow(C47092, 8) * bs[8] *
                                                   C47094 * C47105) /
                                                 C46935) /
                                                    C47060 -
                                                C47128 / C47099) -
                                      (C47172 * ce) / C47099) -
                            (ae * C47310) / C47099));
    const double C2179 =
        3 * (C47119 - (ae * C47350) / C47099 + C47088 * C47356) +
        (((-2 * C47350) / C46935 - (C47088 * C47355) / C46935) * ae) / C47060 +
        C47088 * (2 * C47356 - (ae * C47355) / C47099 +
                  C47088 * (C47133 - (ae * C47088 * C47215) / C47099 +
                            C47088 * (C47088 * ((-(std::pow(C47092, 8) * bs[8] *
                                                   C47094 * C47105) /
                                                 C46935) /
                                                    C47060 -
                                                C47128 / C47099) -
                                      (ae * C47215) / C47099)));
    const double C1578 = C1573 + C1574;
    const double C2468 = C2463 + C2464;
    const double C11191 = C11171 + C11172;
    const double C32067 = C32047 + C32048;
    const double C47410 = C47407 + C47409;
    const double C47468 = C47463 - C47466;
    const double C47516 = C47514 + C47515;
    const double C47545 = C47089 * C47544;
    const double C47579 = C47088 * C47544;
    const double C47600 = C47088 * C47596;
    const double C47635 = C47088 * C47633;
    const double C556 =
        3 * C47119 + C47096 * C47135 + (C47088 * C47220 * ae) / C47060 +
        C47088 * ((C47220 * ae) / C47060 +
                  C47088 * (3 * C47133 +
                            C47096 * ((-2 * C47096 * C47128) / C47099 +
                                      C47096 * ((-(std::pow(C47092, 8) * bs[8] *
                                                   C47094 * C47105) /
                                                 C46935) /
                                                    C47060 -
                                                C47128 / C47099))));
    const double C848 =
        ((4 * C47205 + C47096 * C47220) * ae) / C47060 +
        C47088 * (4 * C47135 +
                  C47096 * (3 * C47133 +
                            C47096 * ((-2 * C47096 * C47128) / C47099 +
                                      C47096 * ((-(std::pow(C47092, 8) * bs[8] *
                                                   C47094 * C47105) /
                                                 C46935) /
                                                    C47060 -
                                                C47128 / C47099))));
    const double C1023 =
        ((C47089 * C47220 -
          ((3 * (C47227 + C47229 * C47105) +
            C47096 * (2 * C47096 * C47229 +
                      C47096 * (C47229 + C47111 * C47110 * C47105))) *
           ce) /
              C46935) *
         ae) /
            C47060 +
        C47088 * (C47089 * (3 * C47133 +
                            C47096 * ((-2 * C47096 * C47128) / C47099 +
                                      C47096 * ((-(std::pow(C47092, 8) * bs[8] *
                                                   C47094 * C47105) /
                                                 C46935) /
                                                    C47060 -
                                                C47128 / C47099))) -
                  (C47176 * ce) / C47099);
    const double C135 = 5 * ((-3 * C47194) / C46935 + C47096 * C47205) +
                        C47096 * (4 * C47205 + C47096 * C47220);
    const double C334 = (-3 * C47194) / C46935 + C47096 * C47205 +
                        C47089 * (C47089 * C47220 - (C47682 * ce) / C46935) -
                        (C47089 * C47682 * ce) / C46935;
    const double C546 =
        (-3 * C47194) / C46935 + C47096 * C47205 + C47220 * C47330;
    const double C715 = C47089 * (4 * C47205 + C47096 * C47220) -
                        ((4 * C47675 + C47096 * C47682) * ce) / C46935;
    const double C847 = C47088 * (4 * C47205 + C47096 * C47220);
    const double C1018 = C47088 * (C47089 * C47220 - (C47682 * ce) / C46935);
    const double C2329 =
        C47089 * C47135 - (C47163 * ce) / C47099 +
        (C47088 * C47361 * ae) / C47060 +
        C47088 * ((C47361 * ae) / C47060 +
                  C47088 * (C47089 * ((-2 * C47096 * C47128) / C47099 +
                                      C47096 * ((-(std::pow(C47092, 8) * bs[8] *
                                                   C47094 * C47105) /
                                                 C46935) /
                                                    C47060 -
                                                C47128 / C47099)) -
                            (C47174 * ce) / C47099));
    const double C1552 =
        2 * (C47089 * C47205 - (C47675 * ce) / C46935) +
        C47089 * (C47205 + C47089 * C47361 - (C47089 * C47319 * ce) / C46935) -
        ((C47675 + C47319 * C47235) * ce) / C46935;
    const double C1730 =
        C47088 * (C47205 + C47089 * C47361 - (C47089 * C47319 * ce) / C46935);
    const double C2328 =
        C47089 * C47205 - (C47675 * ce) / C46935 + C47361 * C47330;
    const double C1441 =
        C47119 - (C47258 * ce) / C47099 + C47089 * C47264 -
        (ae * C47088 * C47314) / C47099 +
        C47088 * (C47088 * (C47133 - (C47089 * C47172 * ce) / C47099 +
                            C47089 * (C47089 * ((-(std::pow(C47092, 8) * bs[8] *
                                                   C47094 * C47105) /
                                                 C46935) /
                                                    C47060 -
                                                C47128 / C47099) -
                                      (C47172 * ce) / C47099)) -
                  (ae * C47314) / C47099);
    const double C1865 =
        (((-2 * C47302) / C46935 - (C47089 * C47314) / C46935 -
          ((C47271 + C47307 * C47235) * ce) / C46935) *
         ae) /
            C47060 +
        C47088 * (2 * C47264 - (C47263 * ce) / C47099 +
                  C47089 * (C47133 - (C47089 * C47172 * ce) / C47099 +
                            C47089 * (C47089 * ((-(std::pow(C47092, 8) * bs[8] *
                                                   C47094 * C47105) /
                                                 C46935) /
                                                    C47060 -
                                                C47128 / C47099) -
                                      (C47172 * ce) / C47099)));
    const double C1289 =
        (-3 * (C47089 * C47302 + C47194 + C47735 * ce)) / C46935 +
        C47089 * ((-2 * C47302) / C46935 - (C47089 * C47314) / C46935 -
                  (C47737 * ce) / C46935) -
        ((2 * C47735 + C47089 * C47737) * ce) / C46935;
    const double C1432 =
        -(C47314 * C47330 + C47089 * C47302 + C47194 + C47735 * ce) / C46935;
    const double C1862 =
        C47088 * ((-2 * C47302) / C46935 - (C47089 * C47314) / C46935 -
                  (C47737 * ce) / C46935);
    const double C47448 = C47447 / C46935;
    const double C47571 = C47556 - C47570;
    const double C23390 =
        (-3 * (C47425 * C47330 + C47284)) / C46935 +
        C47088 * ((-2 * C47578) / C46935 - (C47088 * C47583) / C46935);
    const double C28116 =
        4 * ((-2 * C47454) / C46935 - (C47088 * C47459) / C46935) +
        C47088 * ((-3 * C47459) / C46935 + C47088 * C47603);
    const double C44346 = 5 * ((-3 * C47335) / C46935 + C47088 * C47490) +
                          C47088 * (4 * C47490 + C47088 * C47634);
    const double C403 = C402 + C395;
    const double C107 =
        (C48426 + 2 * C48049) / C46952 - (C48435 * C48040) / C46935;
    const double C108 =
        (C48413 + 2 * C48057 + C48435) / C46952 - (C48428 * C48040) / C46935;
    const double C109 = (C48384 + C48054 / C46935 + C48428) / C46952 -
                        (C48415 * C48040) / C46935;
    const double C2151 =
        (C48430 + 2 * C48173) / C46952 - (C48437 * C48169) / C46935;
    const double C2152 =
        (C48419 + 2 * C48180 + C48437) / C46952 - (C48434 * C48169) / C46935;
    const double C2153 = (C48393 + C48177 / C46935 + C48434) / C46952 -
                         (C48425 * C48169) / C46935;
    const double C47002 = C46996 / C46952;
    const double C47001 = C46933 * C46996;
    const double C2708 = C2697 - C2706;
    const double C2707 = C2705 - C2695;
    const double C3290 = C2985 - C3285;
    const double C1198 = C1197 + C1187;
    const double C182 = C172 * C48072;
    const double C396 = C384 * C48390;
    const double C1188 = C384 * C48390;
    const double C1570 = C384 * C1542;
    const double C2832 = C384 * C48422;
    const double C3127 = C384 * C3108;
    const double C5216 = C384 * C48417;
    const double C5514 = C384 * C48135;
    const double C6014 = C384 * C1168;
    const double C7790 = C384 * C48135;
    const double C8290 = C384 * C48138;
    const double C398 = C386 * C48417;
    const double C729 = C386 * C48135;
    const double C1192 = C386 * C1168;
    const double C2700 = C386 * C48135;
    const double C3131 = C386 * C48138;
    const double C5050 = C386 * C48072;
    const double C5516 = C386 * C48358;
    const double C7792 = C386 * C2680;
    const double C599 = C587 * C48072;
    const double C1038 = C587 * C48358;
    const double C3287 = C587 * C2680;
    const double C603 = C591 * C48072;
    const double C2338 = C591 * C48358;
    const double C2994 = C591 * C2680;
    const double C1053 = C1047 * C48135;
    const double C1744 = C1047 * C1168;
    const double C2988 = C1047 * C48135;
    const double C3447 = C1047 * C48138;
    const double C3705 = C1047 * C48417;
    const double C5372 = C1047 * C48072;
    const double C5854 = C1047 * C48358;
    const double C8488 = C1047 * C2680;
    const double C1750 = C1739 + C1740;
    const double C10992 = C10967 + C10968;
    const double C12418 = C12413 + C12414;
    const double C31868 = C31843 + C31844;
    const double C33294 = C33289 + C33290;
    const double C2344 = C2335 + C2336;
    const double C11692 = C11679 + C11680;
    const double C13136 = C13131 + C13132;
    const double C32568 = C32555 + C32556;
    const double C34004 = C33999 + C34000;
    const double C7506 = C7503 + C7504;
    const double C13135 = C13129 + C13130;
    const double C34003 = C33997 + C33998;
    const double C13278 = C13273 + C13274;
    const double C34146 = C34141 + C34142;
    const double C28580 = C48410 * C7170;
    const double C39840 = C48410 * C7170;
    const double C22632 = C48293 * C6104;
    const double C23742 = C48293 * C7644;
    const double C27262 = C48410 * C7644;
    const double C38526 = C48410 * C7644;
    const double C6124 = C6117 + C6118;
    const double C6302 = C6293 + C6294;
    const double C12417 = C12411 + C12412;
    const double C33293 = C33287 + C33288;
    const double C6644 = C6641 + C6642;
    const double C12211 = C12205 + C12206;
    const double C33087 = C33081 + C33082;
    const double C47429 = C47428 - C47424;
    const double C44345 =
        (5 * (3 * C47858 + C47088 * C47930 + C47857 * ae) +
         C47088 * (4 * C47930 +
                   C47088 * (3 * C47925 +
                             C47088 * (2 * C47917 +
                                       C47088 * (C47159 +
                                                 C47088 * (C47088 * C47170 +
                                                           C47305 * ae) +
                                                 C47088 * C47305 * ae) +
                                       C47919 * ae) +
                             C47924 * ae) +
                   C47928 * ae) +
         (4 * C47857 + C47088 * C47928) * ae) /
        C47060;
    const double C375 = C48293 * C342;
    const double C735 = C48293 * C343;
    const double C852 = C48293 * C551;
    const double C10784 = C48410 * C551;
    const double C31660 = C48410 * C551;
    const double C579 = C48293 * C555;
    const double C11468 = C48410 * C555;
    const double C32344 = C48410 * C555;
    const double C1042 = C48293 * C1022;
    const double C11330 = C48410 * C1022;
    const double C32206 = C48410 * C1022;
    const double C1748 = C48293 * C1435;
    const double C10982 = C48410 * C1435;
    const double C31858 = C48410 * C1435;
    const double C2342 = C48293 * C1440;
    const double C11686 = C48410 * C1440;
    const double C32562 = C48410 * C1440;
    const double C1582 = C1578 * C48400;
    const double C2834 = C1578 * C48400;
    const double C5218 = C1578 * C48390;
    const double C6016 = C1578 * C48390;
    const double C8292 = C1578 * C3108;
    const double C2472 = C2468 * C48072;
    const double C6105 =
        4 * (2 * C47255 - (C47252 * ce) / C47099 + C47089 * C47410) -
        ((3 * C47252 + C47089 * C47406) * ce) / C47099 +
        C47089 *
            (3 * C47410 - (C47406 * ce) / C47099 +
             C47089 *
                 (2 * C47408 - (C47400 * ce) / C47099 +
                  C47089 * ((-(C47089 * C47392 * ce) / C46935) / C47060 -
                            C47390 / C47099 +
                            C47089 * ((-(C47089 * C47096 * std::pow(C47092, 8) *
                                         bs[8] * C47094) /
                                       C46935) /
                                          C47060 -
                                      (C47392 * ce) / C47099))));
    const double C7645 =
        2 * (C47088 * C47410 - (ae * C47298) / C47099) -
        (ae * (C47446 * C47330 + C47298)) / C47099 +
        C47088 *
            (C47410 - (ae * C47088 * C47446) / C47099 +
             C47088 *
                 (C47088 * ((-(C47089 * C47392 * ce) / C46935) / C47060 -
                            C47390 / C47099 +
                            C47089 * ((-(C47089 * C47096 * std::pow(C47092, 8) *
                                         bs[8] * C47094) /
                                       C46935) /
                                          C47060 -
                                      (C47392 * ce) / C47099)) -
                  (ae * C47446) / C47099));
    const double C7171 =
        3 * (C47255 - (ae * C47462) / C47099 + C47088 * C47468) +
        (((-2 * C47462) / C46935 - (C47088 * C47467) / C46935) * ae) / C47060 +
        C47088 *
            (2 * C47468 - (ae * C47467) / C47099 +
             C47088 *
                 (C47408 - (ae * C47088 * C47439) / C47099 +
                  C47088 * (C47088 * ((-(C47089 * C47096 * std::pow(C47092, 8) *
                                         bs[8] * C47094) /
                                       C46935) /
                                          C47060 -
                                      (C47392 * ce) / C47099) -
                            (ae * C47439) / C47099)));
    const double C12929 =
        4 * (2 * C47348 - (ae * C47345) / C47099 + C47088 * C47516) +
        (((-3 * C47345) / C46935 + C47088 * C47513) * ae) / C47060 +
        C47088 *
            (3 * C47516 + (C47513 * ae) / C47060 +
             C47088 *
                 (2 * C47512 - (ae * C47503) / C47099 +
                  C47088 * ((-(ae * C47088 * C47432) / C46935) / C47060 -
                            C47390 / C47099 +
                            C47088 * ((-(C47088 * C47096 * std::pow(C47092, 8) *
                                         bs[8] * C47094) /
                                       C46935) /
                                          C47060 -
                                      (ae * C47432) / C47099))));
    const double C47546 = C47531 + C47545;
    const double C47584 = C47579 - C47582;
    const double C47602 = C47599 + C47600;
    const double C47636 = C47619 + C47635;
    const double C47449 = C47434 - C47448;
    const double C47572 = C47571 - C47564;
    const double C47007 = C47002 - C47003;
    const double C47006 = C47001 + C48358;
    const double C2709 = C2707 - C2696;
    const double C404 = C403 + C396;
    const double C1199 = C1198 + C1188;
    const double C745 = C741 + C729;
    const double C2710 = C2708 + C2700;
    const double C850 = C598 + C599;
    const double C607 = C602 + C603;
    const double C1057 = C1056 + C1053;
    const double C3291 = C3290 + C2988;
    const double C1754 = C1750 * C48390;
    const double C3443 = C1750 * C3108;
    const double C3701 = C1750 * C48390;
    const double C5852 = C1750 * C48135;
    const double C6638 = C1750 * C1168;
    const double C8130 = C1750 * C48135;
    const double C8688 = C1750 * C48138;
    const double C9018 = C1750 * C48417;
    const double C2348 = C2344 * C48135;
    const double C2992 = C2344 * C48135;
    const double C5374 = C2344 * C48072;
    const double C7368 = C2344 * C48358;
    const double C8132 = C2344 * C2680;
    const double C7508 = C7506 * C48072;
    const double C28584 = C28579 + C28580;
    const double C39844 = C39839 + C39840;
    const double C23744 = C23741 + C23742;
    const double C27274 = C27261 + C27262;
    const double C38538 = C38525 + C38526;
    const double C6440 = C6124 * C48400;
    const double C7932 = C6124 * C48400;
    const double C7370 = C6302 * C48135;
    const double C8134 = C6302 * C48135;
    const double C6646 = C6644 * C48390;
    const double C8690 = C6644 * C3108;
    const double C9020 = C6644 * C48390;
    const double C6276 =
        2 * C47242 - (C47240 * ce) / C47099 + C47089 * C47386 +
        (C47088 * C47429 * ae) / C47060 +
        C47088 *
            ((C47429 * ae) / C47060 +
             C47088 *
                 (2 * C47383 - (C47375 * ce) / C47099 +
                  C47089 *
                      ((-(C47089 * C47159 * ce) / C46935) / C47060 - C47124 +
                       C47089 * ((-(C47089 * C47128) / C46935) / C47060 -
                                 (C47159 * ce) / C47099))));
    const double C6782 =
        (((-3 * C47284) / C46935 + C47089 * C47429 -
          ((2 * C47279 + C47089 * C47420) * ce) / C46935) *
         ae) /
            C47060 +
        C47088 *
            (3 * C47386 - (C47381 * ce) / C47099 +
             C47089 *
                 (2 * C47383 - (C47375 * ce) / C47099 +
                  C47089 *
                      ((-(C47089 * C47159 * ce) / C46935) / C47060 - C47124 +
                       C47089 * ((-(C47089 * C47128) / C46935) / C47060 -
                                 (C47159 * ce) / C47099))));
    const double C6101 =
        4 * ((-2 * C47275) / C46935 - (C47089 * C47284) / C46935 -
             (C47723 * ce) / C46935) +
        C47089 * ((-3 * C47284) / C46935 + C47089 * C47429 -
                  (C47811 * ce) / C46935) -
        ((3 * C47723 + C47089 * C47811) * ce) / C46935;
    const double C6273 = (-2 * C47275) / C46935 - (C47089 * C47284) / C46935 -
                         (C47723 * ce) / C46935 + C47429 * C47330;
    const double C6779 = C47088 * ((-3 * C47284) / C46935 + C47089 * C47429 -
                                   (C47811 * ce) / C46935);
    const double C388 = C374 + C375;
    const double C739 = C734 + C735;
    const double C855 = C851 + C852;
    const double C10803 = C10783 + C10784;
    const double C31679 = C31659 + C31660;
    const double C592 = C578 + C579;
    const double C11475 = C11467 + C11468;
    const double C32351 = C32343 + C32344;
    const double C1049 = C1041 + C1042;
    const double C11335 = C11329 + C11330;
    const double C32211 = C32205 + C32206;
    const double C1752 = C1747 + C1748;
    const double C10999 = C10981 + C10982;
    const double C31875 = C31857 + C31858;
    const double C2346 = C2341 + C2342;
    const double C11695 = C11685 + C11686;
    const double C32571 = C32561 + C32562;
    const double C22627 =
        5 * (3 * C47386 - (C47381 * ce) / C47099 + C47089 * C47546) -
        ((4 * C47381 + C47089 * C47543) * ce) / C47099 +
        C47089 *
            (4 * C47546 - (C47543 * ce) / C47099 +
             C47089 *
                 (3 * C47544 - (C47537 * ce) / C47099 +
                  C47089 *
                      (2 * C47539 - (C47530 * ce) / C47099 +
                       C47089 * ((-(C47089 * C47170 * ce) / C46935) / C47060 -
                                 C47128 / C47099 +
                                 C47089 * ((-(C47089 * std::pow(C47092, 8) *
                                              bs[8] * C47094) /
                                            C46935) /
                                               C47060 -
                                           (C47170 * ce) / C47099)))));
    const double C23391 =
        3 * (C47386 - (ae * C47578) / C47099 + C47088 * C47584) +
        (((-2 * C47578) / C46935 - (C47088 * C47583) / C46935) * ae) / C47060 +
        C47088 *
            (2 * C47584 - (ae * C47583) / C47099 +
             C47088 *
                 (C47544 - (ae * C47088 * C47566) / C47099 +
                  C47088 *
                      (C47088 * ((-(C47089 * C47170 * ce) / C46935) / C47060 -
                                 C47128 / C47099 +
                                 C47089 * ((-(C47089 * std::pow(C47092, 8) *
                                              bs[8] * C47094) /
                                            C46935) /
                                               C47060 -
                                           (C47170 * ce) / C47099)) -
                       (ae * C47566) / C47099)));
    const double C28117 =
        4 * (2 * C47460 - (ae * C47459) / C47099 + C47088 * C47602) +
        (((-3 * C47459) / C46935 + C47088 * C47603) * ae) / C47060 +
        C47088 *
            (3 * C47602 + (C47603 * ae) / C47060 +
             C47088 *
                 (2 * C47596 - (ae * C47594) / C47099 +
                  C47088 *
                      (C47539 - (ae * C47088 * C47557) / C47099 +
                       C47088 * (C47088 * ((-(C47089 * std::pow(C47092, 8) *
                                              bs[8] * C47094) /
                                            C46935) /
                                               C47060 -
                                           (C47170 * ce) / C47099) -
                                 (ae * C47557) / C47099))));
    const double C44347 =
        5 * (3 * C47493 + (C47490 * ae) / C47060 + C47088 * C47636) +
        ((4 * C47490 + C47088 * C47634) * ae) / C47060 +
        C47088 *
            (4 * C47636 + (C47634 * ae) / C47060 +
             C47088 *
                 (3 * C47633 + (C47629 * ae) / C47060 +
                  C47088 *
                      (2 * C47628 - (ae * C47618) / C47099 +
                       C47088 * ((-(ae * C47088 * C47212) / C46935) / C47060 -
                                 C47128 / C47099 +
                                 C47088 * ((-(C47088 * std::pow(C47092, 8) *
                                              bs[8] * C47094) /
                                            C46935) /
                                               C47060 -
                                           (ae * C47212) / C47099)))));
    const double C47450 = C47449 - C47445;
    const double C47573 = C47089 * C47572;
    const double C23737 =
        2 * ((C47429 * ae) / C47060 + C47088 * C47546) +
        ((C47429 + C47572 * C47330) * ae) / C47060 +
        C47088 *
            (C47546 + (C47088 * C47572 * ae) / C47060 +
             C47088 *
                 ((C47572 * ae) / C47060 +
                  C47088 *
                      (2 * C47539 - (C47530 * ce) / C47099 +
                       C47089 * ((-(C47089 * C47170 * ce) / C46935) / C47060 -
                                 C47128 / C47099 +
                                 C47089 * ((-(C47089 * std::pow(C47092, 8) *
                                              bs[8] * C47094) /
                                            C46935) /
                                               C47060 -
                                           (C47170 * ce) / C47099)))));
    const double C23736 =
        2 * C47088 * C47429 + C47088 * (C47429 + C47572 * C47330);
    const double C3128 = C385 * C47007;
    const double C3124 = C381 * C47007;
    const double C3118 = C376 * C47007;
    const double C3444 = C1045 * C47007;
    const double C3438 = C1043 * C47007;
    const double C8287 = C383 * C47007;
    const double C8283 = C378 * C47007;
    const double C8685 = C1749 * C47007;
    const double C1270 =
        (C47007 / C46952 + ((C46933 * C47021 + C3108) * ce) / C46935) / C46952 -
        ((C46933 * (C47021 / C46952 + (0 * ce) / C46935) + C48400) * de) /
            C46935;
    const double C1548 =
        C47007 / C46952 - ((C46933 * C47021 + C3108) * de) / C46935;
    const double C2816 =
        C47007 / C46952 + ((C46933 * C47021 + C3108) * ce) / C46935;
    const double C47010 = C47006 * de;
    const double C22752 = C48293 * C6276;
    const double C27736 = C48410 * C6276;
    const double C39000 = C48410 * C6276;
    const double C23104 = C48293 * C6782;
    const double C27084 = C48410 * C6782;
    const double C38348 = C48410 * C6782;
    const double C22631 = C113 * C6101;
    const double C22751 = C113 * C6273;
    const double C27735 = C10757 * C6273;
    const double C38999 = C31633 * C6273;
    const double C23103 = C113 * C6779;
    const double C27083 = C10757 * C6779;
    const double C38347 = C31633 * C6779;
    const double C400 = C388 * C48390;
    const double C1194 = C388 * C48390;
    const double C3133 = C388 * C3108;
    const double C5518 = C388 * C48135;
    const double C7794 = C388 * C48135;
    const double C743 = C739 * C48135;
    const double C2704 = C739 * C48135;
    const double C5051 = C739 * C48072;
    const double C857 = C855 * C48072;
    const double C604 = C592 * C48072;
    const double C1055 = C1049 * C48135;
    const double C3289 = C1049 * C48135;
    const double C5649 = C1049 * C48072;
    const double C1756 = C1752 * C48390;
    const double C3449 = C1752 * C3108;
    const double C3707 = C1752 * C48390;
    const double C5856 = C1752 * C48135;
    const double C8490 = C1752 * C48135;
    const double C2350 = C2346 * C48135;
    const double C2996 = C2346 * C48135;
    const double C5375 = C2346 * C48072;
    const double C6277 =
        2 * C47255 - (C47252 * ce) / C47099 + C47089 * C47410 +
        (C47088 * C47450 * ae) / C47060 +
        C47088 *
            ((C47450 * ae) / C47060 +
             C47088 *
                 (2 * C47408 - (C47400 * ce) / C47099 +
                  C47089 * ((-(C47089 * C47392 * ce) / C46935) / C47060 -
                            C47390 / C47099 +
                            C47089 * ((-(C47089 * C47096 * std::pow(C47092, 8) *
                                         bs[8] * C47094) /
                                       C46935) /
                                          C47060 -
                                      (C47392 * ce) / C47099))));
    const double C6783 =
        (((-3 * C47298) / C46935 + C47089 * C47450 -
          ((2 * C47293 + C47089 * C47441) * ce) / C46935) *
         ae) /
            C47060 +
        C47088 *
            (3 * C47410 - (C47406 * ce) / C47099 +
             C47089 *
                 (2 * C47408 - (C47400 * ce) / C47099 +
                  C47089 * ((-(C47089 * C47392 * ce) / C46935) / C47060 -
                            C47390 / C47099 +
                            C47089 * ((-(C47089 * C47096 * std::pow(C47092, 8) *
                                         bs[8] * C47094) /
                                       C46935) /
                                          C47060 -
                                      (C47392 * ce) / C47099))));
    const double C6103 =
        4 * ((-2 * C47288) / C46935 - (C47089 * C47298) / C46935 -
             (C47730 * ce) / C46935) +
        C47089 * ((-3 * C47298) / C46935 + C47089 * C47450 -
                  (C47816 * ce) / C46935) -
        ((3 * C47730 + C47089 * C47816) * ce) / C46935;
    const double C6275 = (-2 * C47288) / C46935 - (C47089 * C47298) / C46935 -
                         (C47730 * ce) / C46935 + C47450 * C47330;
    const double C6781 = C47088 * ((-3 * C47298) / C46935 + C47089 * C47450 -
                                   (C47816 * ce) / C46935);
    const double C47574 = C47555 + C47573;
    const double C1569 = C383 * C1548;
    const double C1559 = C378 * C1548;
    const double C6437 = C1575 * C1548;
    const double C2831 = C383 * C2816;
    const double C2823 = C378 * C2816;
    const double C7929 = C1575 * C2816;
    const double C47012 = C47010 / C46935;
    const double C22634 = C22631 + C22632;
    const double C22754 = C22751 + C22752;
    const double C27740 = C27735 + C27736;
    const double C39004 = C38999 + C39000;
    const double C23106 = C23103 + C23104;
    const double C27092 = C27083 + C27084;
    const double C38356 = C38347 + C38348;
    const double C47575 = C47574 - C47569;
    const double C47014 = C47000 - C47012;
    const double C22747 =
        3 * C47386 - (C47381 * ce) / C47099 + C47089 * C47546 +
        (C47088 * C47575 * ae) / C47060 +
        C47088 *
            ((C47575 * ae) / C47060 +
             C47088 *
                 (3 * C47544 - (C47537 * ce) / C47099 +
                  C47089 *
                      (2 * C47539 - (C47530 * ce) / C47099 +
                       C47089 * ((-(C47089 * C47170 * ce) / C46935) / C47060 -
                                 C47128 / C47099 +
                                 C47089 * ((-(C47089 * std::pow(C47092, 8) *
                                              bs[8] * C47094) /
                                            C46935) /
                                               C47060 -
                                           (C47170 * ce) / C47099)))));
    const double C23099 =
        ((4 * C47429 + C47089 * C47575 -
          ((3 * C47420 + C47089 * C47565) * ce) / C46935) *
         ae) /
            C47060 +
        C47088 *
            (4 * C47546 - (C47543 * ce) / C47099 +
             C47089 *
                 (3 * C47544 - (C47537 * ce) / C47099 +
                  C47089 *
                      (2 * C47539 - (C47530 * ce) / C47099 +
                       C47089 * ((-(C47089 * C47170 * ce) / C46935) / C47060 -
                                 C47128 / C47099 +
                                 C47089 * ((-(C47089 * std::pow(C47092, 8) *
                                              bs[8] * C47094) /
                                            C46935) /
                                               C47060 -
                                           (C47170 * ce) / C47099)))));
    const double C22626 =
        5 * ((-3 * C47284) / C46935 + C47089 * C47429 -
             (C47811 * ce) / C46935) +
        C47089 * (4 * C47429 + C47089 * C47575 - (C47879 * ce) / C46935) -
        ((4 * C47811 + C47089 * C47879) * ce) / C46935;
    const double C22746 = (-3 * C47284) / C46935 + C47089 * C47429 -
                          (C47811 * ce) / C46935 + C47575 * C47330;
    const double C23098 =
        C47088 * (4 * C47429 + C47089 * C47575 - (C47879 * ce) / C46935);
    const double C47015 = C47014 + C46985;
    const double C3130 = C169 * C47015;
    const double C3122 = C166 * C47015;
    const double C3116 = C164 * C47015;
    const double C3446 = C584 * C47015;
    const double C3440 = C582 * C47015;
    const double C8289 = C381 * C47015;
    const double C8281 = C376 * C47015;
    const double C8687 = C1043 * C47015;
    const double C1267 =
        (((((0 - (C46933 * C46968) / C46935) * ce) / C46935 -
           (0 * de) / C46939 + (2 * C46969) / C46935) /
              C46952 -
          ((C46933 * C47004 + 0) * de) / C46935 + C46978 - C46991) /
             C46952 +
         ((C46933 * C47013 + 0) * ce) / C46935) /
            C46952 -
        ((C46933 * (C47013 / C46952 +
                    ((C46933 * C47015 + C48131) * ce) / C46935 + C47007) +
          C48436) *
         de) /
            C46935 +
        C47015 / C46952 + ((C46933 * C47007 + C48138) * ce) / C46935 +
        2 * (C46985 / C46952 - (0 * de) / C46935);
    const double C1268 =
        (C47013 / C46952 + ((C46933 * C47015 + C48131) * ce) / C46935 +
         C47007) /
            C46952 -
        ((C46933 * (C47015 / C46952 +
                    ((C46933 * C47007 + C48138) * ce) / C46935 + 2 * C47021) +
          C48432) *
         de) /
            C46935 +
        2 * (C47007 / C46952 + ((C46933 * C47021 + C3108) * ce) / C46935);
    const double C1269 =
        (C47015 / C46952 + ((C46933 * C47007 + C48138) * ce) / C46935 +
         2 * C47021) /
            C46952 -
        ((C46933 *
              (C47007 / C46952 + ((C46933 * C47021 + C3108) * ce) / C46935) +
          C48422) *
         de) /
            C46935 +
        3 * (C47021 / C46952 + (0 * ce) / C46935);
    const double C1546 =
        C47013 / C46952 - ((C46933 * C47015 + C48131) * de) / C46935 + C47007;
    const double C1547 = C47015 / C46952 -
                         ((C46933 * C47007 + C48138) * de) / C46935 +
                         2 * C47021;
    const double C2814 =
        C47013 / C46952 + ((C46933 * C47015 + C48131) * ce) / C46935 + C47007;
    const double C2815 = C47015 / C46952 +
                         ((C46933 * C47007 + C48138) * ce) / C46935 +
                         2 * C47021;
    const double C3134 = C3122 + C3123;
    const double C1565 = C166 * C1546;
    const double C1555 = C164 * C1546;
    const double C6433 = C376 * C1546;
    const double C1567 = C381 * C1547;
    const double C1557 = C376 * C1547;
    const double C6435 = C378 * C1547;
    const double C2827 = C166 * C2814;
    const double C2819 = C164 * C2814;
    const double C7925 = C376 * C2814;
    const double C2829 = C381 * C2815;
    const double C2821 = C376 * C2815;
    const double C7927 = C378 * C2815;
    const double C3135 = C3134 - C3124;
    const double C3136 = C3135 - C3125;
    const double C3137 = C3136 + C3126;
    const double C3138 = C3137 + C3127;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C115 + C48293 * C122) * C47015 +
                   (C113 * C123 + C48293 * C136) * C48131 -
                   (C113 * C305 + C48293 * C315) * C47007 -
                   (C113 * C316 + C48293 * C335) * C48138 +
                   (C113 * C306 + C48293 * C317) * C47021 +
                   (C113 * C318 + C48293 * C336) * C3108) *
                      C103 +
                  (C3116 + C3117 - C3118 - C3119 + C3120 + C3121) * C104 +
                  C3138 * C105) *
                     C48278 * C48049 +
                 ((C3118 - (C3117 + C3116) + C3119 - C3120 - C3121) * C103 +
                  (C3124 - (C3123 + C3122) + C3125 - C3126 - C3127) * C104 +
                  (C3128 - (C3129 + C3130) + C3131 - C3132 - C3133) * C105) *
                     C48278 * C48057 +
                 (C3138 * C103 +
                  (C3130 + C3129 - C3128 - C3131 + C3132 + C3133) * C104 +
                  (C170 * C47015 + C171 * C48131 - C738 * C47007 -
                   C739 * C48138 + (C113 * C314 + C48293 * C333) * C47021 +
                   (C113 * C334 + C48293 * C344) * C3108) *
                      C105) *
                     C48278 * C3111) *
                C48090) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C48293 * C122) * C47015 +
                    (C113 * C123 + C48293 * C136) * C48131 -
                    (C113 * C305 + C48293 * C315) * C47007 -
                    (C113 * C316 + C48293 * C335) * C48138 +
                    (C113 * C306 + C48293 * C317) * C47021 +
                    (C113 * C318 + C48293 * C336) * C3108) *
                       C103 +
                   (C3116 + C3117 - C3118 - C3119 + C3120 + C3121) * C104 +
                   C3138 * C105) *
                      C48278 * C2812 +
                  ((C3118 - (C3117 + C3116) + C3119 - C3120 - C3121) * C103 +
                   (C3124 - (C3123 + C3122) + C3125 - C3126 - C3127) * C104 +
                   (C3128 - (C3129 + C3130) + C3131 - C3132 - C3133) * C105) *
                      C48278 * C48054) *
                     C48359 +
                 ((((C113 * C1004 + C48293 * C1009) * C47007 -
                    ((C113 * C533 + C48293 * C550) * C48131 +
                     (C113 * C520 + C48293 * C534) * C47015) +
                    (C113 * C1010 + C48293 * C1019) * C48138 -
                    (C113 * C1406 + C48293 * C1415) * C47021 -
                    (C113 * C1416 + C48293 * C1433) * C3108) *
                       C103 +
                   (C3438 - (C3439 + C3440) + C3441 - C3442 - C3443) * C104 +
                   (C3444 - (C3445 + C3446) + C3447 - C3448 - C3449) * C105) *
                      C48278 * C2812 +
                  ((C3440 + C3439 - C3438 - C3441 + C3442 + C3443) * C103 +
                   (C3446 + C3445 - C3444 - C3447 + C3448 + C3449) * C104 +
                   (C586 * C47015 + C587 * C48131 - C1048 * C47007 -
                    C1049 * C48138 + (C113 * C1728 + C48293 * C1729) * C47021 +
                    (C113 * C1730 + C48293 * C1731) * C3108) *
                       C105) *
                      C48278 * C48054) *
                     C48177)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C2814 +
            (C113 * C123 + C48293 * C136) * C48436 -
            (C113 * C305 + C48293 * C315) * C2815 -
            (C113 * C316 + C48293 * C335) * C48432 +
            (C113 * C306 + C48293 * C317) * C2816 +
            (C113 * C318 + C48293 * C336) * C48422 -
            (C113 * C1272 + C48293 * C1278) * C2817 -
            (C113 * C1279 + C48293 * C1290) * C48400) *
               C103 +
           (C2819 + C2820 - C2821 - C2822 + C2823 + C2824 - C2825 - C2826) *
               C104 +
           (C2827 + C2828 - C2829 - C2830 + C2831 + C2832 - C2833 - C2834) *
               C105) *
              C48278 * C2812 +
          ((C2821 - (C2820 + C2819) + C2822 - C2823 - C2824 + C2825 + C2826) *
               C103 +
           (C2829 - (C2828 + C2827) + C2830 - C2831 - C2832 + C2833 + C2834) *
               C104 +
           (C385 * C2815 - (C168 * C48436 + C169 * C2814) + C386 * C48432 -
            C387 * C2816 - C388 * C48422 +
            (C113 * C1550 + C48293 * C1551) * C2817 +
            (C113 * C1552 + C48293 * C1553) * C48400) *
               C105) *
              C48278 * C48054) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C2686 +
            (C113 * C123 + C48293 * C136) * C2680 -
            (C113 * C305 + C48293 * C315) * C2687 -
            (C113 * C316 + C48293 * C335) * C48135) *
               C103 +
           (C2689 + C2690 - C2691 - C2692) * C104 + C2709 * C105) *
              C48278 * C48435 +
          ((C2691 - (C2690 + C2689) + C2692) * C103 +
           (C2695 - (C2694 + C2693) + C2696) * C104 + C2710 * C105) *
              C48278 * C48428 +
          (C2709 * C103 + (C2699 + C2698 - C2697 - C2700) * C104 +
           (C2701 + C2702 - C2703 - C2704) * C105) *
              C48278 * C48415 +
          (C2710 * C103 + (C2703 - (C2702 + C2701) + C2704) * C104 +
           ((C113 * C713 + C48293 * C714) * C2687 -
            (C172 * C2680 + C173 * C2686) +
            (C113 * C715 + C48293 * C716) * C48135) *
               C105) *
              C48278 * C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2686 +
             (C113 * C123 + C48293 * C136) * C2680 -
             (C113 * C305 + C48293 * C315) * C2687 -
             (C113 * C316 + C48293 * C335) * C48135) *
                C103 +
            (C2689 + C2690 - C2691 - C2692) * C104 + C2709 * C105) *
               C48278 * C2812 +
           ((C2691 - (C2690 + C2689) + C2692) * C103 +
            (C2695 - (C2694 + C2693) + C2696) * C104 + C2710 * C105) *
               C48278 * C48054) *
              C48430 +
          ((((C113 * C1004 + C48293 * C1009) * C2687 -
             ((C113 * C533 + C48293 * C550) * C2680 +
              (C113 * C520 + C48293 * C534) * C2686) +
             (C113 * C1010 + C48293 * C1019) * C48135) *
                C103 +
            (C2981 - (C2982 + C2983) + C2984) * C104 +
            (C2985 - (C2986 + C2987) + C2988) * C105) *
               C48278 * C2812 +
           ((C2983 + C2982 - C2981 - C2984) * C103 +
            (C2987 + C2986 - C2985 - C2988) * C104 +
            (C586 * C2686 + C587 * C2680 - C1048 * C2687 - C1049 * C48135) *
                C105) *
               C48278 * C48054) *
              C48419 +
          ((((C113 * C522 + C48293 * C537) * C2686 +
             (C113 * C538 + C48293 * C552) * C2680 -
             (C113 * C1409 + C48293 * C1421) * C2687 -
             (C113 * C1422 + C48293 * C1436) * C48135) *
                C103 +
            (C2989 + C2990 - C2991 - C2992) * C104 +
            (C2993 + C2994 - C2995 - C2996) * C105) *
               C48278 * C2812 +
           ((C2991 - (C2990 + C2989) + C2992) * C103 +
            (C2995 - (C2994 + C2993) + C2996) * C104 +
            ((C113 * C2326 + C48293 * C2327) * C2687 -
             (C592 * C2680 + C593 * C2686) +
             (C113 * C2328 + C48293 * C2329) * C48135) *
                C105) *
               C48278 * C48054) *
              C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C48293 * C122) * C2686 +
                    (C113 * C123 + C48293 * C136) * C2680 -
                    (C113 * C305 + C48293 * C315) * C2687 -
                    (C113 * C316 + C48293 * C335) * C48135) *
                       C103 +
                   (C2689 + C2690 - C2691 - C2692) * C104 + C2709 * C105) *
                      C48278 * C48049 +
                  ((C2691 - (C2690 + C2689) + C2692) * C103 +
                   (C2695 - (C2694 + C2693) + C2696) * C104 + C2710 * C105) *
                      C48278 * C48057 +
                  (C2709 * C103 + (C2699 + C2698 - C2697 - C2700) * C104 +
                   (C2701 + C2702 - C2703 - C2704) * C105) *
                      C48278 * C3111) *
                     C48359 +
                 ((((C113 * C1004 + C48293 * C1009) * C2687 -
                    ((C113 * C533 + C48293 * C550) * C2680 +
                     (C113 * C520 + C48293 * C534) * C2686) +
                    (C113 * C1010 + C48293 * C1019) * C48135) *
                       C103 +
                   (C2981 - (C2982 + C2983) + C2984) * C104 + C3291 * C105) *
                      C48278 * C48049 +
                  ((C2983 + C2982 - C2981 - C2984) * C103 +
                   (C2987 + C2986 - C2985 - C2988) * C104 +
                   (C3286 + C3287 - C3288 - C3289) * C105) *
                      C48278 * C48057 +
                  (C3291 * C103 + (C3288 - (C3287 + C3286) + C3289) * C104 +
                   ((C113 * C1008 + C48293 * C1017) * C2687 -
                    (C855 * C2680 + C856 * C2686) +
                    (C113 * C1018 + C48293 * C1023) * C48135) *
                       C105) *
                      C48278 * C3111) *
                     C48177)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C2686 +
            (C113 * C123 + C48293 * C136) * C2680 -
            (C113 * C305 + C48293 * C315) * C2687 -
            (C113 * C316 + C48293 * C335) * C48135) *
               C103 +
           (C2689 + C2690 - C2691 - C2692) * C104 + C2709 * C105) *
              C48278 * C48435 +
          ((C2691 - (C2690 + C2689) + C2692) * C103 +
           (C2695 - (C2694 + C2693) + C2696) * C104 + C2710 * C105) *
              C48278 * C48428 +
          (C2709 * C103 + (C2699 + C2698 - C2697 - C2700) * C104 +
           (C2701 + C2702 - C2703 - C2704) * C105) *
              C48278 * C48415 +
          (C2710 * C103 + (C2703 - (C2702 + C2701) + C2704) * C104 +
           ((C113 * C713 + C48293 * C714) * C2687 -
            (C172 * C2680 + C173 * C2686) +
            (C113 * C715 + C48293 * C716) * C48135) *
               C105) *
              C48278 * C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C2814 +
            (C113 * C123 + C48293 * C136) * C48436 -
            (C113 * C305 + C48293 * C315) * C2815 -
            (C113 * C316 + C48293 * C335) * C48432 +
            (C113 * C306 + C48293 * C317) * C2816 +
            (C113 * C318 + C48293 * C336) * C48422 -
            (C113 * C1272 + C48293 * C1278) * C2817 -
            (C113 * C1279 + C48293 * C1290) * C48400) *
               C103 +
           (C2819 + C2820 - C2821 - C2822 + C2823 + C2824 - C2825 - C2826) *
               C104 +
           (C2827 + C2828 - C2829 - C2830 + C2831 + C2832 - C2833 - C2834) *
               C105) *
              C48278 * C2812 +
          ((C2821 - (C2820 + C2819) + C2822 - C2823 - C2824 + C2825 + C2826) *
               C103 +
           (C2829 - (C2828 + C2827) + C2830 - C2831 - C2832 + C2833 + C2834) *
               C104 +
           (C385 * C2815 - (C168 * C48436 + C169 * C2814) + C386 * C48432 -
            C387 * C2816 - C388 * C48422 +
            (C113 * C1550 + C48293 * C1551) * C2817 +
            (C113 * C1552 + C48293 * C1553) * C48400) *
               C105) *
              C48278 * C48054) *
         C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C48293 * C122) * C47015 +
                    (C113 * C123 + C48293 * C136) * C48131 -
                    (C113 * C305 + C48293 * C315) * C47007 -
                    (C113 * C316 + C48293 * C335) * C48138 +
                    (C113 * C306 + C48293 * C317) * C47021 +
                    (C113 * C318 + C48293 * C336) * C3108) *
                       C103 +
                   (C3116 + C3117 - C3118 - C3119 + C3120 + C3121) * C104 +
                   C3138 * C105) *
                      C48278 * C48344 +
                  ((C3118 - (C3117 + C3116) + C3119 - C3120 - C3121) * C103 +
                   (C3124 - (C3123 + C3122) + C3125 - C3126 - C3127) * C104 +
                   (C3128 - (C3129 + C3130) + C3131 - C3132 - C3133) * C105) *
                      C48278 * C48054) *
                     C3547 +
                 ((((C113 * C1004 + C48293 * C1009) * C47007 -
                    ((C113 * C533 + C48293 * C550) * C48131 +
                     (C113 * C520 + C48293 * C534) * C47015) +
                    (C113 * C1010 + C48293 * C1019) * C48138 -
                    (C113 * C1406 + C48293 * C1415) * C47021 -
                    (C113 * C1416 + C48293 * C1433) * C3108) *
                       C103 +
                   (C3438 - (C3439 + C3440) + C3441 - C3442 - C3443) * C104 +
                   (C3444 - (C3445 + C3446) + C3447 - C3448 - C3449) * C105) *
                      C48278 * C48344 +
                  ((C3440 + C3439 - C3438 - C3441 + C3442 + C3443) * C103 +
                   (C3446 + C3445 - C3444 - C3447 + C3448 + C3449) * C104 +
                   (C586 * C47015 + C587 * C48131 - C1048 * C47007 -
                    C1049 * C48138 + (C113 * C1728 + C48293 * C1729) * C47021 +
                    (C113 * C1730 + C48293 * C1731) * C3108) *
                       C105) *
                      C48278 * C48054) *
                     C48177)) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C115 + C48293 * C122) * C47015 +
                   (C113 * C123 + C48293 * C136) * C48131 -
                   (C113 * C305 + C48293 * C315) * C47007 -
                   (C113 * C316 + C48293 * C335) * C48138 +
                   (C113 * C306 + C48293 * C317) * C47021 +
                   (C113 * C318 + C48293 * C336) * C3108) *
                      C103 +
                  (C3116 + C3117 - C3118 - C3119 + C3120 + C3121) * C104 +
                  C3138 * C105) *
                     C48278 * C48044 * C48173 +
                 (((C113 * C1004 + C48293 * C1009) * C47007 -
                   ((C113 * C533 + C48293 * C550) * C48131 +
                    (C113 * C520 + C48293 * C534) * C47015) +
                   (C113 * C1010 + C48293 * C1019) * C48138 -
                   (C113 * C1406 + C48293 * C1415) * C47021 -
                   (C113 * C1416 + C48293 * C1433) * C3108) *
                      C103 +
                  (C3438 - (C3439 + C3440) + C3441 - C3442 - C3443) * C104 +
                  (C3444 - (C3445 + C3446) + C3447 - C3448 - C3449) * C105) *
                     C48278 * C48044 * C48180 +
                 (((C113 * C522 + C48293 * C537) * C47015 +
                   (C113 * C538 + C48293 * C552) * C48131 -
                   (C113 * C1409 + C48293 * C1421) * C47007 -
                   (C113 * C1422 + C48293 * C1436) * C48138 +
                   (C113 * C1410 + C48293 * C1423) * C47021 +
                   (C113 * C1424 + C48293 * C1437) * C3108) *
                      C103 +
                  (C588 * C47015 + C589 * C48131 - C2343 * C47007 -
                   C2344 * C48138 + (C113 * C1412 + C48293 * C1427) * C47021 +
                   (C113 * C1428 + C48293 * C1439) * C3108) *
                      C104 +
                  (C590 * C47015 + C591 * C48131 - C2345 * C47007 -
                   C2346 * C48138 + (C113 * C1414 + C48293 * C1431) * C47021 +
                   (C113 * C1432 + C48293 * C1441) * C3108) *
                      C105) *
                     C48278 * C48044 * C4067)) /
               (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C2814 +
            (C113 * C123 + C48293 * C136) * C48436 -
            (C113 * C305 + C48293 * C315) * C2815 -
            (C113 * C316 + C48293 * C335) * C48432 +
            (C113 * C306 + C48293 * C317) * C2816 +
            (C113 * C318 + C48293 * C336) * C48422 -
            (C113 * C1272 + C48293 * C1278) * C2817 -
            (C113 * C1279 + C48293 * C1290) * C48400) *
               C103 +
           (C2819 + C2820 - C2821 - C2822 + C2823 + C2824 - C2825 - C2826) *
               C104 +
           (C2827 + C2828 - C2829 - C2830 + C2831 + C2832 - C2833 - C2834) *
               C105) *
              C48278 * C48044 * C3547 +
          (((C113 * C1004 + C48293 * C1009) * C2815 -
            ((C113 * C533 + C48293 * C550) * C48436 +
             (C113 * C520 + C48293 * C534) * C2814) +
            (C113 * C1010 + C48293 * C1019) * C48432 -
            (C113 * C1406 + C48293 * C1415) * C2816 -
            (C113 * C1416 + C48293 * C1433) * C48422 +
            (C113 * C1854 + C48293 * C1857) * C2817 +
            (C113 * C1858 + C48293 * C1863) * C48400) *
               C103 +
           (C1043 * C2815 - (C583 * C48436 + C582 * C2814) + C1044 * C48432 -
            C1749 * C2816 - C1750 * C48422 +
            (C113 * C1855 + C48293 * C1859) * C2817 +
            (C113 * C1860 + C48293 * C1864) * C48400) *
               C104 +
           (C1045 * C2815 - (C585 * C48436 + C584 * C2814) + C1047 * C48432 -
            C1751 * C2816 - C1752 * C48422 +
            (C113 * C1856 + C48293 * C1861) * C2817 +
            (C113 * C1862 + C48293 * C1865) * C48400) *
               C105) *
              C48278 * C48044 * C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2686 +
             (C113 * C123 + C48293 * C136) * C2680 -
             (C113 * C305 + C48293 * C315) * C2687 -
             (C113 * C316 + C48293 * C335) * C48135) *
                C103 +
            (C2689 + C2690 - C2691 - C2692) * C104 + C2709 * C105) *
               C48278 * C48426 +
           ((C2691 - (C2690 + C2689) + C2692) * C103 +
            (C2695 - (C2694 + C2693) + C2696) * C104 + C2710 * C105) *
               C48278 * C48413 +
           (C2709 * C103 + (C2699 + C2698 - C2697 - C2700) * C104 +
            (C2701 + C2702 - C2703 - C2704) * C105) *
               C48278 * C48384) *
              C3547 +
          ((((C113 * C1004 + C48293 * C1009) * C2687 -
             ((C113 * C533 + C48293 * C550) * C2680 +
              (C113 * C520 + C48293 * C534) * C2686) +
             (C113 * C1010 + C48293 * C1019) * C48135) *
                C103 +
            (C2981 - (C2982 + C2983) + C2984) * C104 + C3291 * C105) *
               C48278 * C48426 +
           ((C2983 + C2982 - C2981 - C2984) * C103 +
            (C2987 + C2986 - C2985 - C2988) * C104 +
            (C3286 + C3287 - C3288 - C3289) * C105) *
               C48278 * C48413 +
           (C3291 * C103 + (C3288 - (C3287 + C3286) + C3289) * C104 +
            ((C113 * C1008 + C48293 * C1017) * C2687 -
             (C855 * C2680 + C856 * C2686) +
             (C113 * C1018 + C48293 * C1023) * C48135) *
                C105) *
               C48278 * C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C2686 +
            (C113 * C123 + C48293 * C136) * C2680 -
            (C113 * C305 + C48293 * C315) * C2687 -
            (C113 * C316 + C48293 * C335) * C48135) *
               C103 +
           (C2689 + C2690 - C2691 - C2692) * C104 + C2709 * C105) *
              C48278 * C48044 * C48437 +
          (((C113 * C1004 + C48293 * C1009) * C2687 -
            ((C113 * C533 + C48293 * C550) * C2680 +
             (C113 * C520 + C48293 * C534) * C2686) +
            (C113 * C1010 + C48293 * C1019) * C48135) *
               C103 +
           (C2981 - (C2982 + C2983) + C2984) * C104 + C3291 * C105) *
              C48278 * C48044 * C48434 +
          (((C113 * C522 + C48293 * C537) * C2686 +
            (C113 * C538 + C48293 * C552) * C2680 -
            (C113 * C1409 + C48293 * C1421) * C2687 -
            (C113 * C1422 + C48293 * C1436) * C48135) *
               C103 +
           (C2989 + C2990 - C2991 - C2992) * C104 +
           (C2993 + C2994 - C2995 - C2996) * C105) *
              C48278 * C48044 * C48425 +
          (((C113 * C2570 + C48293 * C2573) * C2687 -
            ((C113 * C2166 + C48293 * C2176) * C2680 +
             (C113 * C2158 + C48293 * C2167) * C2686) +
            (C113 * C2574 + C48293 * C2579) * C48135) *
               C103 +
           ((C113 * C2571 + C48293 * C2575) * C2687 -
            (C2466 * C2680 + C2465 * C2686) +
            (C113 * C2576 + C48293 * C2580) * C48135) *
               C104 +
           ((C113 * C2572 + C48293 * C2577) * C2687 -
            (C2468 * C2680 + C2467 * C2686) +
            (C113 * C2578 + C48293 * C2581) * C48135) *
               C105) *
              C48278 * C48044 * C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C48293 * C122) * C2686 +
                    (C113 * C123 + C48293 * C136) * C2680 -
                    (C113 * C305 + C48293 * C315) * C2687 -
                    (C113 * C316 + C48293 * C335) * C48135) *
                       C103 +
                   (C2689 + C2690 - C2691 - C2692) * C104 + C2709 * C105) *
                      C48278 * C48344 +
                  ((C2691 - (C2690 + C2689) + C2692) * C103 +
                   (C2695 - (C2694 + C2693) + C2696) * C104 + C2710 * C105) *
                      C48278 * C48054) *
                     C48173 +
                 ((((C113 * C1004 + C48293 * C1009) * C2687 -
                    ((C113 * C533 + C48293 * C550) * C2680 +
                     (C113 * C520 + C48293 * C534) * C2686) +
                    (C113 * C1010 + C48293 * C1019) * C48135) *
                       C103 +
                   (C2981 - (C2982 + C2983) + C2984) * C104 + C3291 * C105) *
                      C48278 * C48344 +
                  ((C2983 + C2982 - C2981 - C2984) * C103 +
                   (C2987 + C2986 - C2985 - C2988) * C104 +
                   (C3286 + C3287 - C3288 - C3289) * C105) *
                      C48278 * C48054) *
                     C48180 +
                 ((((C113 * C522 + C48293 * C537) * C2686 +
                    (C113 * C538 + C48293 * C552) * C2680 -
                    (C113 * C1409 + C48293 * C1421) * C2687 -
                    (C113 * C1422 + C48293 * C1436) * C48135) *
                       C103 +
                   (C2989 + C2990 - C2991 - C2992) * C104 +
                   (C2993 + C2994 - C2995 - C2996) * C105) *
                      C48278 * C48344 +
                  ((C2991 - (C2990 + C2989) + C2992) * C103 +
                   (C2995 - (C2994 + C2993) + C2996) * C104 +
                   ((C113 * C2326 + C48293 * C2327) * C2687 -
                    (C592 * C2680 + C593 * C2686) +
                    (C113 * C2328 + C48293 * C2329) * C48135) *
                       C105) *
                      C48278 * C48054) *
                     C4067)) /
               (p * q * std::sqrt(p + q));
    d2ee[9] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2686 +
             (C113 * C123 + C48293 * C136) * C2680 -
             (C113 * C305 + C48293 * C315) * C2687 -
             (C113 * C316 + C48293 * C335) * C48135) *
                C103 +
            (C2689 + C2690 - C2691 - C2692) * C104 + C2709 * C105) *
               C48278 * C48426 +
           ((C2691 - (C2690 + C2689) + C2692) * C103 +
            (C2695 - (C2694 + C2693) + C2696) * C104 + C2710 * C105) *
               C48278 * C48413 +
           (C2709 * C103 + (C2699 + C2698 - C2697 - C2700) * C104 +
            (C2701 + C2702 - C2703 - C2704) * C105) *
               C48278 * C48384) *
              C3547 +
          ((((C113 * C1004 + C48293 * C1009) * C2687 -
             ((C113 * C533 + C48293 * C550) * C2680 +
              (C113 * C520 + C48293 * C534) * C2686) +
             (C113 * C1010 + C48293 * C1019) * C48135) *
                C103 +
            (C2981 - (C2982 + C2983) + C2984) * C104 + C3291 * C105) *
               C48278 * C48426 +
           ((C2983 + C2982 - C2981 - C2984) * C103 +
            (C2987 + C2986 - C2985 - C2988) * C104 +
            (C3286 + C3287 - C3288 - C3289) * C105) *
               C48278 * C48413 +
           (C3291 * C103 + (C3288 - (C3287 + C3286) + C3289) * C104 +
            ((C113 * C1008 + C48293 * C1017) * C2687 -
             (C855 * C2680 + C856 * C2686) +
             (C113 * C1018 + C48293 * C1023) * C48135) *
                C105) *
               C48278 * C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C2814 +
            (C113 * C123 + C48293 * C136) * C48436 -
            (C113 * C305 + C48293 * C315) * C2815 -
            (C113 * C316 + C48293 * C335) * C48432 +
            (C113 * C306 + C48293 * C317) * C2816 +
            (C113 * C318 + C48293 * C336) * C48422 -
            (C113 * C1272 + C48293 * C1278) * C2817 -
            (C113 * C1279 + C48293 * C1290) * C48400) *
               C103 +
           (C2819 + C2820 - C2821 - C2822 + C2823 + C2824 - C2825 - C2826) *
               C104 +
           (C2827 + C2828 - C2829 - C2830 + C2831 + C2832 - C2833 - C2834) *
               C105) *
              C48278 * C48044 * C3547 +
          (((C113 * C1004 + C48293 * C1009) * C2815 -
            ((C113 * C533 + C48293 * C550) * C48436 +
             (C113 * C520 + C48293 * C534) * C2814) +
            (C113 * C1010 + C48293 * C1019) * C48432 -
            (C113 * C1406 + C48293 * C1415) * C2816 -
            (C113 * C1416 + C48293 * C1433) * C48422 +
            (C113 * C1854 + C48293 * C1857) * C2817 +
            (C113 * C1858 + C48293 * C1863) * C48400) *
               C103 +
           (C1043 * C2815 - (C583 * C48436 + C582 * C2814) + C1044 * C48432 -
            C1749 * C2816 - C1750 * C48422 +
            (C113 * C1855 + C48293 * C1859) * C2817 +
            (C113 * C1860 + C48293 * C1864) * C48400) *
               C104 +
           (C1045 * C2815 - (C585 * C48436 + C584 * C2814) + C1047 * C48432 -
            C1751 * C2816 - C1752 * C48422 +
            (C113 * C1856 + C48293 * C1861) * C2817 +
            (C113 * C1862 + C48293 * C1865) * C48400) *
               C105) *
              C48278 * C48044 * C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[10] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1546 +
            (C113 * C123 + C48293 * C136) * C1540 -
            (C113 * C305 + C48293 * C315) * C1547 -
            (C113 * C316 + C48293 * C335) * C1541 +
            (C113 * C306 + C48293 * C317) * C1548 +
            (C113 * C318 + C48293 * C336) * C1542 -
            (C113 * C1272 + C48293 * C1278) * C1549 -
            (C113 * C1279 + C48293 * C1290) * C48400) *
               C103 +
           (C1555 + C1556 - C1557 - C1558 + C1559 + C1560 - C1579 - C1580) *
               C104 +
           (C1565 + C1566 - C1567 - C1568 + C1569 + C1570 - C1581 - C1582) *
               C105) *
              C48278 * C48344 +
          ((C1557 - (C1556 + C1555) + C1558 - C1559 - C1560 + C1579 + C1580) *
               C103 +
           (C1567 - (C1566 + C1565) + C1568 - C1569 - C1570 + C1581 + C1582) *
               C104 +
           (C385 * C1547 - (C168 * C1540 + C169 * C1546) + C386 * C1541 -
            C387 * C1548 - C388 * C1542 +
            (C113 * C1550 + C48293 * C1551) * C1549 +
            (C113 * C1552 + C48293 * C1553) * C48400) *
               C105) *
              C48278 * C48054) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C711 +
            (C113 * C123 + C48293 * C136) * C48358 -
            (C113 * C305 + C48293 * C315) * C712 -
            (C113 * C316 + C48293 * C335) * C48135) *
               C103 +
           (C718 + C719 - C720 - C721) * C104 + C744 * C105) *
              C48278 * C707 +
          ((C720 - (C719 + C718) + C721) * C103 +
           (C724 - (C723 + C722) + C725) * C104 + C745 * C105) *
              C48278 * C708 +
          (C744 * C103 + (C728 + C727 - C726 - C729) * C104 +
           (C730 + C731 - C742 - C743) * C105) *
              C48278 * C709 +
          (C745 * C103 + (C742 - (C731 + C730) + C743) * C104 +
           ((C113 * C713 + C48293 * C714) * C712 -
            (C172 * C48358 + C173 * C711) +
            (C113 * C715 + C48293 * C716) * C48135) *
               C105) *
              C48278 * C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C711 +
             (C113 * C123 + C48293 * C136) * C48358 -
             (C113 * C305 + C48293 * C315) * C712 -
             (C113 * C316 + C48293 * C335) * C48135) *
                C103 +
            (C718 + C719 - C720 - C721) * C104 + C744 * C105) *
               C48278 * C48344 +
           ((C720 - (C719 + C718) + C721) * C103 +
            (C724 - (C723 + C722) + C725) * C104 + C745 * C105) *
               C48278 * C48054) *
              C1976 +
          ((((C113 * C1004 + C48293 * C1009) * C712 -
             ((C113 * C533 + C48293 * C550) * C48358 +
              (C113 * C520 + C48293 * C534) * C711) +
             (C113 * C1010 + C48293 * C1019) * C48135) *
                C103 +
            (C1050 - (C1027 + C1028) + C1051) * C104 + C1057 * C105) *
               C48278 * C48344 +
           ((C1028 + C1027 - C1050 - C1051) * C103 +
            (C1034 + C1033 - C1052 - C1053) * C104 +
            (C1037 + C1038 - C1054 - C1055) * C105) *
               C48278 * C48054) *
              C1977 +
          ((((C113 * C522 + C48293 * C537) * C711 +
             (C113 * C538 + C48293 * C552) * C48358 -
             (C113 * C1409 + C48293 * C1421) * C712 -
             (C113 * C1422 + C48293 * C1436) * C48135) *
                C103 +
            (C2331 + C2332 - C2347 - C2348) * C104 +
            (C2337 + C2338 - C2349 - C2350) * C105) *
               C48278 * C48344 +
           ((C2347 - (C2332 + C2331) + C2348) * C103 +
            (C2349 - (C2338 + C2337) + C2350) * C104 +
            ((C113 * C2326 + C48293 * C2327) * C712 -
             (C592 * C48358 + C593 * C711) +
             (C113 * C2328 + C48293 * C2329) * C48135) *
                C105) *
               C48278 * C48054) *
              C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1546 +
            (C113 * C123 + C48293 * C136) * C1540 -
            (C113 * C305 + C48293 * C315) * C1547 -
            (C113 * C316 + C48293 * C335) * C1541 +
            (C113 * C306 + C48293 * C317) * C1548 +
            (C113 * C318 + C48293 * C336) * C1542 -
            (C113 * C1272 + C48293 * C1278) * C1549 -
            (C113 * C1279 + C48293 * C1290) * C48400) *
               C103 +
           (C1555 + C1556 - C1557 - C1558 + C1559 + C1560 - C1579 - C1580) *
               C104 +
           (C1565 + C1566 - C1567 - C1568 + C1569 + C1570 - C1581 - C1582) *
               C105) *
              C48278 * C48044 * C48359 +
          (((C113 * C1004 + C48293 * C1009) * C1547 -
            ((C113 * C533 + C48293 * C550) * C1540 +
             (C113 * C520 + C48293 * C534) * C1546) +
            (C113 * C1010 + C48293 * C1019) * C1541 -
            (C113 * C1406 + C48293 * C1415) * C1548 -
            (C113 * C1416 + C48293 * C1433) * C1542 +
            (C113 * C1854 + C48293 * C1857) * C1549 +
            (C113 * C1858 + C48293 * C1863) * C48400) *
               C103 +
           (C1043 * C1547 - (C583 * C1540 + C582 * C1546) + C1044 * C1541 -
            C1749 * C1548 - C1750 * C1542 +
            (C113 * C1855 + C48293 * C1859) * C1549 +
            (C113 * C1860 + C48293 * C1864) * C48400) *
               C104 +
           (C1045 * C1547 - (C585 * C1540 + C584 * C1546) + C1047 * C1541 -
            C1751 * C1548 - C1752 * C1542 +
            (C113 * C1856 + C48293 * C1861) * C1549 +
            (C113 * C1862 + C48293 * C1865) * C48400) *
               C105) *
              C48278 * C48044 * C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C711 +
             (C113 * C123 + C48293 * C136) * C48358 -
             (C113 * C305 + C48293 * C315) * C712 -
             (C113 * C316 + C48293 * C335) * C48135) *
                C103 +
            (C718 + C719 - C720 - C721) * C104 + C744 * C105) *
               C48278 * C299 +
           ((C720 - (C719 + C718) + C721) * C103 +
            (C724 - (C723 + C722) + C725) * C104 + C745 * C105) *
               C48278 * C300 +
           (C744 * C103 + (C728 + C727 - C726 - C729) * C104 +
            (C730 + C731 - C742 - C743) * C105) *
               C48278 * C48384) *
              C48359 +
          ((((C113 * C1004 + C48293 * C1009) * C712 -
             ((C113 * C533 + C48293 * C550) * C48358 +
              (C113 * C520 + C48293 * C534) * C711) +
             (C113 * C1010 + C48293 * C1019) * C48135) *
                C103 +
            (C1050 - (C1027 + C1028) + C1051) * C104 + C1057 * C105) *
               C48278 * C299 +
           ((C1028 + C1027 - C1050 - C1051) * C103 +
            (C1034 + C1033 - C1052 - C1053) * C104 +
            (C1037 + C1038 - C1054 - C1055) * C105) *
               C48278 * C300 +
           (C1057 * C103 + (C1054 - (C1038 + C1037) + C1055) * C104 +
            ((C113 * C1008 + C48293 * C1017) * C712 -
             (C855 * C48358 + C856 * C711) +
             (C113 * C1018 + C48293 * C1023) * C48135) *
                C105) *
               C48278 * C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C711 +
            (C113 * C123 + C48293 * C136) * C48358 -
            (C113 * C305 + C48293 * C315) * C712 -
            (C113 * C316 + C48293 * C335) * C48135) *
               C103 +
           (C718 + C719 - C720 - C721) * C104 + C744 * C105) *
              C48278 * C48044 * C2448 +
          (((C113 * C1004 + C48293 * C1009) * C712 -
            ((C113 * C533 + C48293 * C550) * C48358 +
             (C113 * C520 + C48293 * C534) * C711) +
            (C113 * C1010 + C48293 * C1019) * C48135) *
               C103 +
           (C1050 - (C1027 + C1028) + C1051) * C104 + C1057 * C105) *
              C48278 * C48044 * C2449 +
          (((C113 * C522 + C48293 * C537) * C711 +
            (C113 * C538 + C48293 * C552) * C48358 -
            (C113 * C1409 + C48293 * C1421) * C712 -
            (C113 * C1422 + C48293 * C1436) * C48135) *
               C103 +
           (C2331 + C2332 - C2347 - C2348) * C104 +
           (C2337 + C2338 - C2349 - C2350) * C105) *
              C48278 * C48044 * C2450 +
          (((C113 * C2570 + C48293 * C2573) * C712 -
            ((C113 * C2166 + C48293 * C2176) * C48358 +
             (C113 * C2158 + C48293 * C2167) * C711) +
            (C113 * C2574 + C48293 * C2579) * C48135) *
               C103 +
           ((C113 * C2571 + C48293 * C2575) * C712 -
            (C2466 * C48358 + C2465 * C711) +
            (C113 * C2576 + C48293 * C2580) * C48135) *
               C104 +
           ((C113 * C2572 + C48293 * C2577) * C712 -
            (C2468 * C48358 + C2467 * C711) +
            (C113 * C2578 + C48293 * C2581) * C48135) *
               C105) *
              C48278 * C48044 * C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C48293 * C122) * C114 +
                (C113 * C123 + C48293 * C136) * C48072) *
                   C103 +
               (C174 + C175) * C104 + C184 * C105) *
                  C48278 * C107 -
              (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                  C48278 * C108 +
              (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48278 *
                  C109 -
              ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
                  C48278 * C110 +
              (C186 * C103 + (C183 + C182) * C104 +
               ((C113 * C121 + C48293 * C134) * C114 +
                (C113 * C135 + C48293 * C142) * C48072) *
                   C105) *
                  C48278 * C111) *
             C48090 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C48293 * C122) * C302 +
                (C113 * C123 + C48293 * C136) * C48429 -
                (C113 * C305 + C48293 * C315) * C303 -
                (C113 * C316 + C48293 * C335) * C48417 +
                (C113 * C306 + C48293 * C317) * C304 +
                (C113 * C318 + C48293 * C336) * C48390) *
                   C103 +
               (C346 + C347 - C389 - C390 + C391 + C392) * C104 + C404 * C105) *
                  C48278 * C299 +
              ((C389 - (C347 + C346) + C390 - C391 - C392) * C103 +
               (C393 - (C357 + C356) + C394 - C395 - C396) * C104 +
               (C397 - (C368 + C369) + C398 - C399 - C400) * C105) *
                  C48278 * C300 +
              (C404 * C103 + (C369 + C368 - C397 - C398 + C399 + C400) * C104 +
               (C170 * C302 + C171 * C48429 -
                (C113 * C313 + C48293 * C331) * C303 -
                (C113 * C332 + C48293 * C343) * C48417 +
                (C113 * C314 + C48293 * C333) * C304 +
                (C113 * C334 + C48293 * C344) * C48390) *
                   C105) *
                  C48278 * C48384) *
             C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48278 * C299 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48278 * C300 +
           (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48278 *
               C48384) *
              C48430 +
          (((C594 + C595) * C103 + (C596 + C597) * C104 +
            (C598 + C599) * C105) *
               C48278 * C300 -
           (C606 * C105 + (C595 + C594) * C104 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C103) *
               C48278 * C299 -
           (((C113 * C535 + C48293 * C551) * C48072 +
             (C113 * C521 + C48293 * C536) * C114) *
                C105 +
            (C599 + C598) * C104 + C606 * C103) *
               C48278 * C48384) *
              C48419 +
          ((((C113 * C522 + C48293 * C537) * C114 +
             (C113 * C538 + C48293 * C552) * C48072) *
                C103 +
            (C600 + C601) * C104 + C607 * C105) *
               C48278 * C299 -
           ((C604 + C605) * C105 + (C603 + C602) * C104 +
            (C601 + C600) * C103) *
               C48278 * C300 +
           (C607 * C103 + (C605 + C604) * C104 +
            ((C113 * C526 + C48293 * C545) * C114 +
             (C113 * C546 + C48293 * C556) * C48072) *
                C105) *
               C48278 * C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1173 +
            (C113 * C123 + C48293 * C136) * C1167 -
            (C113 * C305 + C48293 * C315) * C1174 -
            (C113 * C316 + C48293 * C335) * C1168 +
            (C113 * C306 + C48293 * C317) * C1175 +
            (C113 * C318 + C48293 * C336) * C48390) *
               C103 +
           (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C104 +
           C1199 * C105) *
              C48278 * C48426 +
          ((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C103 +
           (C1185 - (C1184 + C1183) + C1186 - C1187 - C1188) * C104 +
           (C1189 - (C1190 + C1191) + C1192 - C1193 - C1194) * C105) *
              C48278 * C48413 +
          (C1199 * C103 +
           (C1191 + C1190 - C1189 - C1192 + C1193 + C1194) * C104 +
           (C170 * C1173 + C171 * C1167 - C738 * C1174 - C739 * C1168 +
            (C113 * C314 + C48293 * C333) * C1175 +
            (C113 * C334 + C48293 * C344) * C48390) *
               C105) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48293 * C122) * C1267 +
           (C113 * C123 + C48293 * C136) * C1261 -
           (C113 * C305 + C48293 * C315) * C1268 -
           (C113 * C316 + C48293 * C335) * C1262 +
           (C113 * C306 + C48293 * C317) * C1269 +
           (C113 * C318 + C48293 * C336) * C1263 -
           (C113 * C1272 + C48293 * C1278) * C1270 -
           (C113 * C1279 + C48293 * C1290) * C1264 +
           (C113 * C1273 + C48293 * C1280) * C1271 +
           (C113 * C1281 + C48293 * C1291) * C1265) *
              C103 +
          (C164 * C1267 + C165 * C1261 - C376 * C1268 - C377 * C1262 +
           C378 * C1269 + C379 * C1263 -
           (C113 * C1274 + C48293 * C1282) * C1270 -
           (C113 * C1283 + C48293 * C1292) * C1264 +
           (C113 * C1275 + C48293 * C1284) * C1271 +
           (C113 * C1285 + C48293 * C1293) * C1265) *
              C104 +
          (C166 * C1267 + C167 * C1261 - C381 * C1268 - C382 * C1262 +
           C383 * C1269 + C384 * C1263 -
           (C113 * C1276 + C48293 * C1286) * C1270 -
           (C113 * C1287 + C48293 * C1294) * C1264 +
           (C113 * C1277 + C48293 * C1288) * C1271 +
           (C113 * C1289 + C48293 * C1295) * C1265) *
              C105) *
         C48278 * C48044 * C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1173 +
            (C113 * C123 + C48293 * C136) * C1167 -
            (C113 * C305 + C48293 * C315) * C1174 -
            (C113 * C316 + C48293 * C335) * C1168 +
            (C113 * C306 + C48293 * C317) * C1175 +
            (C113 * C318 + C48293 * C336) * C48390) *
               C103 +
           (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C104 +
           C1199 * C105) *
              C48278 * C48044 * C48430 +
          (((C113 * C1004 + C48293 * C1009) * C1174 -
            ((C113 * C533 + C48293 * C550) * C1167 +
             (C113 * C520 + C48293 * C534) * C1173) +
            (C113 * C1010 + C48293 * C1019) * C1168 -
            (C113 * C1406 + C48293 * C1415) * C1175 -
            (C113 * C1416 + C48293 * C1433) * C48390) *
               C103 +
           (C1043 * C1174 - (C583 * C1167 + C582 * C1173) + C1044 * C1168 -
            (C113 * C1407 + C48293 * C1417) * C1175 -
            (C113 * C1418 + C48293 * C1434) * C48390) *
               C104 +
           (C1045 * C1174 - (C585 * C1167 + C584 * C1173) + C1047 * C1168 -
            (C113 * C1408 + C48293 * C1419) * C1175 -
            (C113 * C1420 + C48293 * C1435) * C48390) *
               C105) *
              C48278 * C48044 * C48419 +
          (((C113 * C522 + C48293 * C537) * C1173 +
            (C113 * C538 + C48293 * C552) * C1167 -
            (C113 * C1409 + C48293 * C1421) * C1174 -
            (C113 * C1422 + C48293 * C1436) * C1168 +
            (C113 * C1410 + C48293 * C1423) * C1175 +
            (C113 * C1424 + C48293 * C1437) * C48390) *
               C103 +
           (C588 * C1173 + C589 * C1167 -
            (C113 * C1411 + C48293 * C1425) * C1174 -
            (C113 * C1426 + C48293 * C1438) * C1168 +
            (C113 * C1412 + C48293 * C1427) * C1175 +
            (C113 * C1428 + C48293 * C1439) * C48390) *
               C104 +
           (C590 * C1173 + C591 * C1167 -
            (C113 * C1413 + C48293 * C1429) * C1174 -
            (C113 * C1430 + C48293 * C1440) * C1168 +
            (C113 * C1414 + C48293 * C1431) * C1175 +
            (C113 * C1432 + C48293 * C1441) * C48390) *
               C105) *
              C48278 * C48044 * C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48278 * C48426 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48278 * C48413 +
           (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48278 *
               C48384) *
              C1976 +
          (((C594 + C595) * C103 + (C596 + C597) * C104 + C850 * C105) *
               C48278 * C48413 -
           (C606 * C105 + (C595 + C594) * C104 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C103) *
               C48278 * C48426 -
           ((C857 + C858) * C105 + (C599 + C598) * C104 + C606 * C103) *
               C48278 * C48384) *
              C1977 +
          ((((C113 * C522 + C48293 * C537) * C114 +
             (C113 * C538 + C48293 * C552) * C48072) *
                C103 +
            (C600 + C601) * C104 + C607 * C105) *
               C48278 * C48426 -
           ((C604 + C605) * C105 + (C603 + C602) * C104 +
            (C601 + C600) * C103) *
               C48278 * C48413 +
           (C607 * C103 + (C605 + C604) * C104 +
            ((C113 * C526 + C48293 * C545) * C114 +
             (C113 * C546 + C48293 * C556) * C48072) *
                C105) *
               C48278 * C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C302 +
            (C113 * C123 + C48293 * C136) * C48429 -
            (C113 * C305 + C48293 * C315) * C303 -
            (C113 * C316 + C48293 * C335) * C48417 +
            (C113 * C306 + C48293 * C317) * C304 +
            (C113 * C318 + C48293 * C336) * C48390) *
               C103 +
           (C346 + C347 - C389 - C390 + C391 + C392) * C104 + C404 * C105) *
              C48278 * C48044 * C1976 +
          (((C113 * C1004 + C48293 * C1009) * C303 -
            ((C113 * C533 + C48293 * C550) * C48429 +
             (C113 * C520 + C48293 * C534) * C302) +
            (C113 * C1010 + C48293 * C1019) * C48417 -
            (C113 * C1406 + C48293 * C1415) * C304 -
            (C113 * C1416 + C48293 * C1433) * C48390) *
               C103 +
           (C1043 * C303 - (C583 * C48429 + C582 * C302) + C1044 * C48417 -
            C1749 * C304 - C1750 * C48390) *
               C104 +
           (C1045 * C303 - (C585 * C48429 + C584 * C302) + C1047 * C48417 -
            C1751 * C304 - C1752 * C48390) *
               C105) *
              C48278 * C48044 * C1977 +
          (((C113 * C522 + C48293 * C537) * C302 +
            (C113 * C538 + C48293 * C552) * C48429 -
            (C113 * C1409 + C48293 * C1421) * C303 -
            (C113 * C1422 + C48293 * C1436) * C48417 +
            (C113 * C1410 + C48293 * C1423) * C304 +
            (C113 * C1424 + C48293 * C1437) * C48390) *
               C103 +
           (C588 * C302 + C589 * C48429 -
            (C113 * C1411 + C48293 * C1425) * C303 -
            (C113 * C1426 + C48293 * C1438) * C48417 +
            (C113 * C1412 + C48293 * C1427) * C304 +
            (C113 * C1428 + C48293 * C1439) * C48390) *
               C104 +
           (C590 * C302 + C591 * C48429 -
            (C113 * C1413 + C48293 * C1429) * C303 -
            (C113 * C1430 + C48293 * C1440) * C48417 +
            (C113 * C1414 + C48293 * C1431) * C304 +
            (C113 * C1432 + C48293 * C1441) * C48390) *
               C105) *
              C48278 * C48044 * C48393)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C114 +
            (C113 * C123 + C48293 * C136) * C48072) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C48278 * C48044 * C2151 -
          (C606 * C105 + (C595 + C594) * C104 +
           ((C113 * C533 + C48293 * C550) * C48072 +
            (C113 * C520 + C48293 * C534) * C114) *
               C103) *
              C48278 * C48044 * C2152 +
          (((C113 * C522 + C48293 * C537) * C114 +
            (C113 * C538 + C48293 * C552) * C48072) *
               C103 +
           (C600 + C601) * C104 + C607 * C105) *
              C48278 * C48044 * C2153 -
          (((C113 * C2162 + C48293 * C2174) * C48072 +
            (C113 * C2156 + C48293 * C2163) * C114) *
               C105 +
           ((C113 * C2164 + C48293 * C2175) * C48072 +
            (C113 * C2157 + C48293 * C2165) * C114) *
               C104 +
           ((C113 * C2166 + C48293 * C2176) * C48072 +
            (C113 * C2158 + C48293 * C2167) * C114) *
               C103) *
              C48278 * C48044 * C2154 +
          (((C113 * C2159 + C48293 * C2168) * C114 +
            (C113 * C2169 + C48293 * C2177) * C48072) *
               C103 +
           ((C113 * C2160 + C48293 * C2170) * C114 +
            (C113 * C2171 + C48293 * C2178) * C48072) *
               C104 +
           ((C113 * C2161 + C48293 * C2172) * C114 +
            (C113 * C2173 + C48293 * C2179) * C48072) *
               C105) *
              C48278 * C48044 * C2155)) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1173 +
             (C113 * C123 + C48293 * C136) * C1167 -
             (C113 * C305 + C48293 * C315) * C1174 -
             (C113 * C316 + C48293 * C335) * C1168 +
             (C113 * C306 + C48293 * C317) * C1175 +
             (C113 * C318 + C48293 * C336) * C48390) *
                C103 +
            (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C104 +
            C1199 * C105) *
               C48278 * C48344 +
           ((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C103 +
            (C1185 - (C1184 + C1183) + C1186 - C1187 - C1188) * C104 +
            (C1189 - (C1190 + C1191) + C1192 - C1193 - C1194) * C105) *
               C48278 * C48054) *
              C48359 +
          ((((C113 * C1004 + C48293 * C1009) * C1174 -
             ((C113 * C533 + C48293 * C550) * C1167 +
              (C113 * C520 + C48293 * C534) * C1173) +
             (C113 * C1010 + C48293 * C1019) * C1168 -
             (C113 * C1406 + C48293 * C1415) * C1175 -
             (C113 * C1416 + C48293 * C1433) * C48390) *
                C103 +
            (C1733 - (C1734 + C1735) + C1736 - C1753 - C1754) * C104 +
            (C1741 - (C1742 + C1743) + C1744 - C1755 - C1756) * C105) *
               C48278 * C48344 +
           ((C1735 + C1734 - C1733 - C1736 + C1753 + C1754) * C103 +
            (C1743 + C1742 - C1741 - C1744 + C1755 + C1756) * C104 +
            (C586 * C1173 + C587 * C1167 - C1048 * C1174 - C1049 * C1168 +
             (C113 * C1728 + C48293 * C1729) * C1175 +
             (C113 * C1730 + C48293 * C1731) * C48390) *
                C105) *
               C48278 * C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48278 * C707 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48278 * C708 +
           (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48278 * C709 -
           ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
               C48278 * C48394) *
              C48359 +
          (((C594 + C595) * C103 + (C596 + C597) * C104 + C850 * C105) *
               C48278 * C708 -
           (C606 * C105 + (C595 + C594) * C104 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C103) *
               C48278 * C707 -
           ((C857 + C858) * C105 + (C599 + C598) * C104 + C606 * C103) *
               C48278 * C709 +
           (C850 * C103 + (C858 + C857) * C104 +
            ((C113 * C845 + C48293 * C846) * C114 +
             (C113 * C847 + C48293 * C848) * C48072) *
                C105) *
               C48278 * C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48278 * C48344 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48278 * C48054) *
              C2448 +
          (((C594 + C595) * C103 + (C596 + C597) * C104 + C850 * C105) *
               C48278 * C48054 -
           (C606 * C105 + (C595 + C594) * C104 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C103) *
               C48278 * C48344) *
              C2449 +
          ((((C113 * C522 + C48293 * C537) * C114 +
             (C113 * C538 + C48293 * C552) * C48072) *
                C103 +
            (C600 + C601) * C104 + C607 * C105) *
               C48278 * C48344 -
           ((C604 + C605) * C105 + (C603 + C602) * C104 +
            (C601 + C600) * C103) *
               C48278 * C48054) *
              C2450 +
          (((C2469 + C2470) * C103 + (C2471 + C2472) * C104 +
            ((C113 * C2452 + C48293 * C2453) * C114 +
             (C113 * C2454 + C48293 * C2455) * C48072) *
                C105) *
               C48278 * C48054 -
           ((C2472 + C2471) * C105 + (C2470 + C2469) * C104 +
            ((C113 * C2166 + C48293 * C2176) * C48072 +
             (C113 * C2158 + C48293 * C2167) * C114) *
                C103) *
               C48278 * C48344) *
              C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C302 +
            (C113 * C123 + C48293 * C136) * C48429 -
            (C113 * C305 + C48293 * C315) * C303 -
            (C113 * C316 + C48293 * C335) * C48417 +
            (C113 * C306 + C48293 * C317) * C304 +
            (C113 * C318 + C48293 * C336) * C48390) *
               C103 +
           (C346 + C347 - C389 - C390 + C391 + C392) * C104 + C404 * C105) *
              C48278 * C299 +
          ((C389 - (C347 + C346) + C390 - C391 - C392) * C103 +
           (C393 - (C357 + C356) + C394 - C395 - C396) * C104 +
           (C397 - (C368 + C369) + C398 - C399 - C400) * C105) *
              C48278 * C300 +
          (C404 * C103 + (C369 + C368 - C397 - C398 + C399 + C400) * C104 +
           (C170 * C302 + C171 * C48429 - (C113 * C313 + C48293 * C331) * C303 -
            (C113 * C332 + C48293 * C343) * C48417 +
            (C113 * C314 + C48293 * C333) * C304 +
            (C113 * C334 + C48293 * C344) * C48390) *
               C105) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C114 +
            (C113 * C123 + C48293 * C136) * C48072) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C48278 * C107 -
          (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) * C48278 *
              C108 +
          (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48278 * C109 -
          ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) * C48278 *
              C110 +
          (C186 * C103 + (C183 + C182) * C104 +
           ((C113 * C121 + C48293 * C134) * C114 +
            (C113 * C135 + C48293 * C142) * C48072) *
               C105) *
              C48278 * C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1173 +
            (C113 * C123 + C48293 * C136) * C1167 -
            (C113 * C305 + C48293 * C315) * C1174 -
            (C113 * C316 + C48293 * C335) * C1168 +
            (C113 * C306 + C48293 * C317) * C1175 +
            (C113 * C318 + C48293 * C336) * C48390) *
               C103 +
           (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C104 +
           C1199 * C105) *
              C48278 * C48426 +
          ((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C103 +
           (C1185 - (C1184 + C1183) + C1186 - C1187 - C1188) * C104 +
           (C1189 - (C1190 + C1191) + C1192 - C1193 - C1194) * C105) *
              C48278 * C48413 +
          (C1199 * C103 +
           (C1191 + C1190 - C1189 - C1192 + C1193 + C1194) * C104 +
           (C170 * C1173 + C171 * C1167 - C738 * C1174 - C739 * C1168 +
            (C113 * C314 + C48293 * C333) * C1175 +
            (C113 * C334 + C48293 * C344) * C48390) *
               C105) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48293 * C122) * C1267 +
           (C113 * C123 + C48293 * C136) * C1261 -
           (C113 * C305 + C48293 * C315) * C1268 -
           (C113 * C316 + C48293 * C335) * C1262 +
           (C113 * C306 + C48293 * C317) * C1269 +
           (C113 * C318 + C48293 * C336) * C1263 -
           (C113 * C1272 + C48293 * C1278) * C1270 -
           (C113 * C1279 + C48293 * C1290) * C1264 +
           (C113 * C1273 + C48293 * C1280) * C1271 +
           (C113 * C1281 + C48293 * C1291) * C1265) *
              C103 +
          (C164 * C1267 + C165 * C1261 - C376 * C1268 - C377 * C1262 +
           C378 * C1269 + C379 * C1263 -
           (C113 * C1274 + C48293 * C1282) * C1270 -
           (C113 * C1283 + C48293 * C1292) * C1264 +
           (C113 * C1275 + C48293 * C1284) * C1271 +
           (C113 * C1285 + C48293 * C1293) * C1265) *
              C104 +
          (C166 * C1267 + C167 * C1261 - C381 * C1268 - C382 * C1262 +
           C383 * C1269 + C384 * C1263 -
           (C113 * C1276 + C48293 * C1286) * C1270 -
           (C113 * C1287 + C48293 * C1294) * C1264 +
           (C113 * C1277 + C48293 * C1288) * C1271 +
           (C113 * C1289 + C48293 * C1295) * C1265) *
              C105) *
         C48278 * C48044 * C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48278 * C48426 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48278 * C48413 +
           (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48278 *
               C48384) *
              C1976 +
          (((C594 + C595) * C103 + (C596 + C597) * C104 + C850 * C105) *
               C48278 * C48413 -
           (C606 * C105 + (C595 + C594) * C104 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C103) *
               C48278 * C48426 -
           ((C857 + C858) * C105 + (C599 + C598) * C104 + C606 * C103) *
               C48278 * C48384) *
              C1977 +
          ((((C113 * C522 + C48293 * C537) * C114 +
             (C113 * C538 + C48293 * C552) * C48072) *
                C103 +
            (C600 + C601) * C104 + C607 * C105) *
               C48278 * C48426 -
           ((C604 + C605) * C105 + (C603 + C602) * C104 +
            (C601 + C600) * C103) *
               C48278 * C48413 +
           (C607 * C103 + (C605 + C604) * C104 +
            ((C113 * C526 + C48293 * C545) * C114 +
             (C113 * C546 + C48293 * C556) * C48072) *
                C105) *
               C48278 * C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C302 +
            (C113 * C123 + C48293 * C136) * C48429 -
            (C113 * C305 + C48293 * C315) * C303 -
            (C113 * C316 + C48293 * C335) * C48417 +
            (C113 * C306 + C48293 * C317) * C304 +
            (C113 * C318 + C48293 * C336) * C48390) *
               C103 +
           (C346 + C347 - C389 - C390 + C391 + C392) * C104 + C404 * C105) *
              C48278 * C48044 * C1976 +
          (((C113 * C1004 + C48293 * C1009) * C303 -
            ((C113 * C533 + C48293 * C550) * C48429 +
             (C113 * C520 + C48293 * C534) * C302) +
            (C113 * C1010 + C48293 * C1019) * C48417 -
            (C113 * C1406 + C48293 * C1415) * C304 -
            (C113 * C1416 + C48293 * C1433) * C48390) *
               C103 +
           (C1043 * C303 - (C583 * C48429 + C582 * C302) + C1044 * C48417 -
            C1749 * C304 - C1750 * C48390) *
               C104 +
           (C1045 * C303 - (C585 * C48429 + C584 * C302) + C1047 * C48417 -
            C1751 * C304 - C1752 * C48390) *
               C105) *
              C48278 * C48044 * C1977 +
          (((C113 * C522 + C48293 * C537) * C302 +
            (C113 * C538 + C48293 * C552) * C48429 -
            (C113 * C1409 + C48293 * C1421) * C303 -
            (C113 * C1422 + C48293 * C1436) * C48417 +
            (C113 * C1410 + C48293 * C1423) * C304 +
            (C113 * C1424 + C48293 * C1437) * C48390) *
               C103 +
           (C588 * C302 + C589 * C48429 -
            (C113 * C1411 + C48293 * C1425) * C303 -
            (C113 * C1426 + C48293 * C1438) * C48417 +
            (C113 * C1412 + C48293 * C1427) * C304 +
            (C113 * C1428 + C48293 * C1439) * C48390) *
               C104 +
           (C590 * C302 + C591 * C48429 -
            (C113 * C1413 + C48293 * C1429) * C303 -
            (C113 * C1430 + C48293 * C1440) * C48417 +
            (C113 * C1414 + C48293 * C1431) * C304 +
            (C113 * C1432 + C48293 * C1441) * C48390) *
               C105) *
              C48278 * C48044 * C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48293 * C122) * C711 +
                     (C113 * C123 + C48293 * C136) * C48358 -
                     (C113 * C305 + C48293 * C315) * C712 -
                     (C113 * C316 + C48293 * C335) * C48135) *
                        C103 +
                    (C718 + C719 - C720 - C721) * C104 + C744 * C105) *
                       C48278 * C48049 +
                   ((C720 - (C719 + C718) + C721) * C103 +
                    (C724 - (C723 + C722) + C725) * C104 + C745 * C105) *
                       C48278 * C48057 +
                   (C744 * C103 + (C728 + C727 - C726 - C729) * C104 +
                    (C730 + C731 - C742 - C743) * C105) *
                       C48278 * C3111) *
                      C3547 +
                  ((((C113 * C1004 + C48293 * C1009) * C712 -
                     ((C113 * C533 + C48293 * C550) * C48358 +
                      (C113 * C520 + C48293 * C534) * C711) +
                     (C113 * C1010 + C48293 * C1019) * C48135) *
                        C103 +
                    (C1050 - (C1027 + C1028) + C1051) * C104 + C1057 * C105) *
                       C48278 * C48049 +
                   ((C1028 + C1027 - C1050 - C1051) * C103 +
                    (C1034 + C1033 - C1052 - C1053) * C104 +
                    (C1037 + C1038 - C1054 - C1055) * C105) *
                       C48278 * C48057 +
                   (C1057 * C103 + (C1054 - (C1038 + C1037) + C1055) * C104 +
                    ((C113 * C1008 + C48293 * C1017) * C712 -
                     (C855 * C48358 + C856 * C711) +
                     (C113 * C1018 + C48293 * C1023) * C48135) *
                        C105) *
                       C48278 * C3111) *
                      C48177)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48293 * C122) * C711 +
                     (C113 * C123 + C48293 * C136) * C48358 -
                     (C113 * C305 + C48293 * C315) * C712 -
                     (C113 * C316 + C48293 * C335) * C48135) *
                        C103 +
                    (C718 + C719 - C720 - C721) * C104 + C744 * C105) *
                       C48278 * C2812 +
                   ((C720 - (C719 + C718) + C721) * C103 +
                    (C724 - (C723 + C722) + C725) * C104 + C745 * C105) *
                       C48278 * C48054) *
                      C48173 +
                  ((((C113 * C1004 + C48293 * C1009) * C712 -
                     ((C113 * C533 + C48293 * C550) * C48358 +
                      (C113 * C520 + C48293 * C534) * C711) +
                     (C113 * C1010 + C48293 * C1019) * C48135) *
                        C103 +
                    (C1050 - (C1027 + C1028) + C1051) * C104 + C1057 * C105) *
                       C48278 * C2812 +
                   ((C1028 + C1027 - C1050 - C1051) * C103 +
                    (C1034 + C1033 - C1052 - C1053) * C104 +
                    (C1037 + C1038 - C1054 - C1055) * C105) *
                       C48278 * C48054) *
                      C48180 +
                  ((((C113 * C522 + C48293 * C537) * C711 +
                     (C113 * C538 + C48293 * C552) * C48358 -
                     (C113 * C1409 + C48293 * C1421) * C712 -
                     (C113 * C1422 + C48293 * C1436) * C48135) *
                        C103 +
                    (C2331 + C2332 - C2347 - C2348) * C104 +
                    (C2337 + C2338 - C2349 - C2350) * C105) *
                       C48278 * C2812 +
                   ((C2347 - (C2332 + C2331) + C2348) * C103 +
                    (C2349 - (C2338 + C2337) + C2350) * C104 +
                    ((C113 * C2326 + C48293 * C2327) * C712 -
                     (C592 * C48358 + C593 * C711) +
                     (C113 * C2328 + C48293 * C2329) * C48135) *
                        C105) *
                       C48278 * C48054) *
                      C4067)) /
                (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C302 +
             (C113 * C123 + C48293 * C136) * C48429 -
             (C113 * C305 + C48293 * C315) * C303 -
             (C113 * C316 + C48293 * C335) * C48417 +
             (C113 * C306 + C48293 * C317) * C304 +
             (C113 * C318 + C48293 * C336) * C48390) *
                C103 +
            (C346 + C347 - C389 - C390 + C391 + C392) * C104 + C404 * C105) *
               C48278 * C2812 +
           ((C389 - (C347 + C346) + C390 - C391 - C392) * C103 +
            (C393 - (C357 + C356) + C394 - C395 - C396) * C104 +
            (C397 - (C368 + C369) + C398 - C399 - C400) * C105) *
               C48278 * C48054) *
              C3547 +
          ((((C113 * C1004 + C48293 * C1009) * C303 -
             ((C113 * C533 + C48293 * C550) * C48429 +
              (C113 * C520 + C48293 * C534) * C302) +
             (C113 * C1010 + C48293 * C1019) * C48417 -
             (C113 * C1406 + C48293 * C1415) * C304 -
             (C113 * C1416 + C48293 * C1433) * C48390) *
                C103 +
            (C3696 - (C3697 + C3698) + C3699 - C3700 - C3701) * C104 +
            (C3702 - (C3703 + C3704) + C3705 - C3706 - C3707) * C105) *
               C48278 * C2812 +
           ((C3698 + C3697 - C3696 - C3699 + C3700 + C3701) * C103 +
            (C3704 + C3703 - C3702 - C3705 + C3706 + C3707) * C104 +
            (C586 * C302 + C587 * C48429 - C1048 * C303 - C1049 * C48417 +
             (C113 * C1728 + C48293 * C1729) * C304 +
             (C113 * C1730 + C48293 * C1731) * C48390) *
                C105) *
               C48278 * C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48278 * C48435 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48278 * C48428 +
           (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48278 *
               C48415 -
           ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
               C48278 * C48394) *
              C3547 +
          (((C594 + C595) * C103 + (C596 + C597) * C104 + C850 * C105) *
               C48278 * C48428 -
           (C606 * C105 + (C595 + C594) * C104 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C103) *
               C48278 * C48435 -
           ((C857 + C858) * C105 + (C599 + C598) * C104 + C606 * C103) *
               C48278 * C48415 +
           (C850 * C103 + (C858 + C857) * C104 +
            ((C113 * C845 + C48293 * C846) * C114 +
             (C113 * C847 + C48293 * C848) * C48072) *
                C105) *
               C48278 * C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48278 * C2812 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48278 * C48054) *
              C48437 +
          (((C594 + C595) * C103 + (C596 + C597) * C104 + C850 * C105) *
               C48278 * C48054 -
           (C606 * C105 + (C595 + C594) * C104 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C103) *
               C48278 * C2812) *
              C48434 +
          ((((C113 * C522 + C48293 * C537) * C114 +
             (C113 * C538 + C48293 * C552) * C48072) *
                C103 +
            (C600 + C601) * C104 + C607 * C105) *
               C48278 * C2812 -
           ((C604 + C605) * C105 + (C603 + C602) * C104 +
            (C601 + C600) * C103) *
               C48278 * C48054) *
              C48425 +
          (((C2469 + C2470) * C103 + (C2471 + C2472) * C104 +
            ((C113 * C2452 + C48293 * C2453) * C114 +
             (C113 * C2454 + C48293 * C2455) * C48072) *
                C105) *
               C48278 * C48054 -
           ((C2472 + C2471) * C105 + (C2470 + C2469) * C104 +
            ((C113 * C2166 + C48293 * C2176) * C48072 +
             (C113 * C2158 + C48293 * C2167) * C114) *
                C103) *
               C48278 * C2812) *
              C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48293 * C122) * C114 +
                     (C113 * C123 + C48293 * C136) * C48072) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C48278 * C48049 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C48278 * C48057 +
                   (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48278 *
                       C3111) *
                      C48173 +
                  (((C594 + C595) * C103 + (C596 + C597) * C104 + C850 * C105) *
                       C48278 * C48057 -
                   (C606 * C105 + (C595 + C594) * C104 +
                    ((C113 * C533 + C48293 * C550) * C48072 +
                     (C113 * C520 + C48293 * C534) * C114) *
                        C103) *
                       C48278 * C48049 -
                   ((C857 + C858) * C105 + (C599 + C598) * C104 + C606 * C103) *
                       C48278 * C3111) *
                      C48180 +
                  ((((C113 * C522 + C48293 * C537) * C114 +
                     (C113 * C538 + C48293 * C552) * C48072) *
                        C103 +
                    (C600 + C601) * C104 + C607 * C105) *
                       C48278 * C48049 -
                   ((C604 + C605) * C105 + (C603 + C602) * C104 +
                    (C601 + C600) * C103) *
                       C48278 * C48057 +
                   (C607 * C103 + (C605 + C604) * C104 +
                    ((C113 * C526 + C48293 * C545) * C114 +
                     (C113 * C546 + C48293 * C556) * C48072) *
                        C105) *
                       C48278 * C3111) *
                      C4067)) /
                (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48278 * C48435 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48278 * C48428 +
           (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48278 *
               C48415 -
           ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
               C48278 * C48394) *
              C3547 +
          (((C594 + C595) * C103 + (C596 + C597) * C104 + C850 * C105) *
               C48278 * C48428 -
           (C606 * C105 + (C595 + C594) * C104 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C103) *
               C48278 * C48435 -
           ((C857 + C858) * C105 + (C599 + C598) * C104 + C606 * C103) *
               C48278 * C48415 +
           (C850 * C103 + (C858 + C857) * C104 +
            ((C113 * C845 + C48293 * C846) * C114 +
             (C113 * C847 + C48293 * C848) * C48072) *
                C105) *
               C48278 * C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C302 +
             (C113 * C123 + C48293 * C136) * C48429 -
             (C113 * C305 + C48293 * C315) * C303 -
             (C113 * C316 + C48293 * C335) * C48417 +
             (C113 * C306 + C48293 * C317) * C304 +
             (C113 * C318 + C48293 * C336) * C48390) *
                C103 +
            (C346 + C347 - C389 - C390 + C391 + C392) * C104 + C404 * C105) *
               C48278 * C2812 +
           ((C389 - (C347 + C346) + C390 - C391 - C392) * C103 +
            (C393 - (C357 + C356) + C394 - C395 - C396) * C104 +
            (C397 - (C368 + C369) + C398 - C399 - C400) * C105) *
               C48278 * C48054) *
              C3547 +
          ((((C113 * C1004 + C48293 * C1009) * C303 -
             ((C113 * C533 + C48293 * C550) * C48429 +
              (C113 * C520 + C48293 * C534) * C302) +
             (C113 * C1010 + C48293 * C1019) * C48417 -
             (C113 * C1406 + C48293 * C1415) * C304 -
             (C113 * C1416 + C48293 * C1433) * C48390) *
                C103 +
            (C3696 - (C3697 + C3698) + C3699 - C3700 - C3701) * C104 +
            (C3702 - (C3703 + C3704) + C3705 - C3706 - C3707) * C105) *
               C48278 * C2812 +
           ((C3698 + C3697 - C3696 - C3699 + C3700 + C3701) * C103 +
            (C3704 + C3703 - C3702 - C3705 + C3706 + C3707) * C104 +
            (C586 * C302 + C587 * C48429 - C1048 * C303 - C1049 * C48417 +
             (C113 * C1728 + C48293 * C1729) * C304 +
             (C113 * C1730 + C48293 * C1731) * C48390) *
                C105) *
               C48278 * C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C711 +
            (C113 * C123 + C48293 * C136) * C48358 -
            (C113 * C305 + C48293 * C315) * C712 -
            (C113 * C316 + C48293 * C335) * C48135) *
               C103 +
           (C718 + C719 - C720 - C721) * C104 + C744 * C105) *
              C48278 * C707 +
          ((C720 - (C719 + C718) + C721) * C103 +
           (C724 - (C723 + C722) + C725) * C104 + C745 * C105) *
              C48278 * C708 +
          (C744 * C103 + (C728 + C727 - C726 - C729) * C104 +
           (C730 + C731 - C742 - C743) * C105) *
              C48278 * C709 +
          (C745 * C103 + (C742 - (C731 + C730) + C743) * C104 +
           ((C113 * C713 + C48293 * C714) * C712 -
            (C172 * C48358 + C173 * C711) +
            (C113 * C715 + C48293 * C716) * C48135) *
               C105) *
              C48278 * C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1546 +
            (C113 * C123 + C48293 * C136) * C1540 -
            (C113 * C305 + C48293 * C315) * C1547 -
            (C113 * C316 + C48293 * C335) * C1541 +
            (C113 * C306 + C48293 * C317) * C1548 +
            (C113 * C318 + C48293 * C336) * C1542 -
            (C113 * C1272 + C48293 * C1278) * C1549 -
            (C113 * C1279 + C48293 * C1290) * C48400) *
               C103 +
           (C1555 + C1556 - C1557 - C1558 + C1559 + C1560 - C1579 - C1580) *
               C104 +
           (C1565 + C1566 - C1567 - C1568 + C1569 + C1570 - C1581 - C1582) *
               C105) *
              C48278 * C48344 +
          ((C1557 - (C1556 + C1555) + C1558 - C1559 - C1560 + C1579 + C1580) *
               C103 +
           (C1567 - (C1566 + C1565) + C1568 - C1569 - C1570 + C1581 + C1582) *
               C104 +
           (C385 * C1547 - (C168 * C1540 + C169 * C1546) + C386 * C1541 -
            C387 * C1548 - C388 * C1542 +
            (C113 * C1550 + C48293 * C1551) * C1549 +
            (C113 * C1552 + C48293 * C1553) * C48400) *
               C105) *
              C48278 * C48054) *
         C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[21] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C711 +
             (C113 * C123 + C48293 * C136) * C48358 -
             (C113 * C305 + C48293 * C315) * C712 -
             (C113 * C316 + C48293 * C335) * C48135) *
                C103 +
            (C718 + C719 - C720 - C721) * C104 + C744 * C105) *
               C48278 * C299 +
           ((C720 - (C719 + C718) + C721) * C103 +
            (C724 - (C723 + C722) + C725) * C104 + C745 * C105) *
               C48278 * C300 +
           (C744 * C103 + (C728 + C727 - C726 - C729) * C104 +
            (C730 + C731 - C742 - C743) * C105) *
               C48278 * C48384) *
              C48359 +
          ((((C113 * C1004 + C48293 * C1009) * C712 -
             ((C113 * C533 + C48293 * C550) * C48358 +
              (C113 * C520 + C48293 * C534) * C711) +
             (C113 * C1010 + C48293 * C1019) * C48135) *
                C103 +
            (C1050 - (C1027 + C1028) + C1051) * C104 + C1057 * C105) *
               C48278 * C299 +
           ((C1028 + C1027 - C1050 - C1051) * C103 +
            (C1034 + C1033 - C1052 - C1053) * C104 +
            (C1037 + C1038 - C1054 - C1055) * C105) *
               C48278 * C300 +
           (C1057 * C103 + (C1054 - (C1038 + C1037) + C1055) * C104 +
            ((C113 * C1008 + C48293 * C1017) * C712 -
             (C855 * C48358 + C856 * C711) +
             (C113 * C1018 + C48293 * C1023) * C48135) *
                C105) *
               C48278 * C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1546 +
            (C113 * C123 + C48293 * C136) * C1540 -
            (C113 * C305 + C48293 * C315) * C1547 -
            (C113 * C316 + C48293 * C335) * C1541 +
            (C113 * C306 + C48293 * C317) * C1548 +
            (C113 * C318 + C48293 * C336) * C1542 -
            (C113 * C1272 + C48293 * C1278) * C1549 -
            (C113 * C1279 + C48293 * C1290) * C48400) *
               C103 +
           (C1555 + C1556 - C1557 - C1558 + C1559 + C1560 - C1579 - C1580) *
               C104 +
           (C1565 + C1566 - C1567 - C1568 + C1569 + C1570 - C1581 - C1582) *
               C105) *
              C48278 * C48044 * C48359 +
          (((C113 * C1004 + C48293 * C1009) * C1547 -
            ((C113 * C533 + C48293 * C550) * C1540 +
             (C113 * C520 + C48293 * C534) * C1546) +
            (C113 * C1010 + C48293 * C1019) * C1541 -
            (C113 * C1406 + C48293 * C1415) * C1548 -
            (C113 * C1416 + C48293 * C1433) * C1542 +
            (C113 * C1854 + C48293 * C1857) * C1549 +
            (C113 * C1858 + C48293 * C1863) * C48400) *
               C103 +
           (C1043 * C1547 - (C583 * C1540 + C582 * C1546) + C1044 * C1541 -
            C1749 * C1548 - C1750 * C1542 +
            (C113 * C1855 + C48293 * C1859) * C1549 +
            (C113 * C1860 + C48293 * C1864) * C48400) *
               C104 +
           (C1045 * C1547 - (C585 * C1540 + C584 * C1546) + C1047 * C1541 -
            C1751 * C1548 - C1752 * C1542 +
            (C113 * C1856 + C48293 * C1861) * C1549 +
            (C113 * C1862 + C48293 * C1865) * C48400) *
               C105) *
              C48278 * C48044 * C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C302 +
            (C113 * C123 + C48293 * C136) * C48429 -
            (C113 * C305 + C48293 * C315) * C303 -
            (C113 * C316 + C48293 * C335) * C48417 +
            (C113 * C306 + C48293 * C317) * C304 +
            (C113 * C318 + C48293 * C336) * C48390) *
               C103 +
           (C346 + C347 - C389 - C390 + C391 + C392) * C104 + C404 * C105) *
              C48278 * C299 +
          ((C389 - (C347 + C346) + C390 - C391 - C392) * C103 +
           (C393 - (C357 + C356) + C394 - C395 - C396) * C104 +
           (C397 - (C368 + C369) + C398 - C399 - C400) * C105) *
              C48278 * C300 +
          (C404 * C103 + (C369 + C368 - C397 - C398 + C399 + C400) * C104 +
           (C170 * C302 + C171 * C48429 - (C113 * C313 + C48293 * C331) * C303 -
            (C113 * C332 + C48293 * C343) * C48417 +
            (C113 * C314 + C48293 * C333) * C304 +
            (C113 * C334 + C48293 * C344) * C48390) *
               C105) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C114 +
            (C113 * C123 + C48293 * C136) * C48072) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C48278 * C107 -
          (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) * C48278 *
              C108 +
          (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48278 * C109 -
          ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) * C48278 *
              C110 +
          (C186 * C103 + (C183 + C182) * C104 +
           ((C113 * C121 + C48293 * C134) * C114 +
            (C113 * C135 + C48293 * C142) * C48072) *
               C105) *
              C48278 * C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48278 * C299 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48278 * C300 +
           (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48278 *
               C48384) *
              C48430 +
          (((C594 + C595) * C103 + (C596 + C597) * C104 +
            (C598 + C599) * C105) *
               C48278 * C300 -
           (C606 * C105 + (C595 + C594) * C104 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C103) *
               C48278 * C299 -
           (((C113 * C535 + C48293 * C551) * C48072 +
             (C113 * C521 + C48293 * C536) * C114) *
                C105 +
            (C599 + C598) * C104 + C606 * C103) *
               C48278 * C48384) *
              C48419 +
          ((((C113 * C522 + C48293 * C537) * C114 +
             (C113 * C538 + C48293 * C552) * C48072) *
                C103 +
            (C600 + C601) * C104 + C607 * C105) *
               C48278 * C299 -
           ((C604 + C605) * C105 + (C603 + C602) * C104 +
            (C601 + C600) * C103) *
               C48278 * C300 +
           (C607 * C103 + (C605 + C604) * C104 +
            ((C113 * C526 + C48293 * C545) * C114 +
             (C113 * C546 + C48293 * C556) * C48072) *
                C105) *
               C48278 * C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1173 +
            (C113 * C123 + C48293 * C136) * C1167 -
            (C113 * C305 + C48293 * C315) * C1174 -
            (C113 * C316 + C48293 * C335) * C1168 +
            (C113 * C306 + C48293 * C317) * C1175 +
            (C113 * C318 + C48293 * C336) * C48390) *
               C103 +
           (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C104 +
           C1199 * C105) *
              C48278 * C48426 +
          ((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C103 +
           (C1185 - (C1184 + C1183) + C1186 - C1187 - C1188) * C104 +
           (C1189 - (C1190 + C1191) + C1192 - C1193 - C1194) * C105) *
              C48278 * C48413 +
          (C1199 * C103 +
           (C1191 + C1190 - C1189 - C1192 + C1193 + C1194) * C104 +
           (C170 * C1173 + C171 * C1167 - C738 * C1174 - C739 * C1168 +
            (C113 * C314 + C48293 * C333) * C1175 +
            (C113 * C334 + C48293 * C344) * C48390) *
               C105) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48293 * C122) * C1267 +
           (C113 * C123 + C48293 * C136) * C1261 -
           (C113 * C305 + C48293 * C315) * C1268 -
           (C113 * C316 + C48293 * C335) * C1262 +
           (C113 * C306 + C48293 * C317) * C1269 +
           (C113 * C318 + C48293 * C336) * C1263 -
           (C113 * C1272 + C48293 * C1278) * C1270 -
           (C113 * C1279 + C48293 * C1290) * C1264 +
           (C113 * C1273 + C48293 * C1280) * C1271 +
           (C113 * C1281 + C48293 * C1291) * C1265) *
              C103 +
          (C164 * C1267 + C165 * C1261 - C376 * C1268 - C377 * C1262 +
           C378 * C1269 + C379 * C1263 -
           (C113 * C1274 + C48293 * C1282) * C1270 -
           (C113 * C1283 + C48293 * C1292) * C1264 +
           (C113 * C1275 + C48293 * C1284) * C1271 +
           (C113 * C1285 + C48293 * C1293) * C1265) *
              C104 +
          (C166 * C1267 + C167 * C1261 - C381 * C1268 - C382 * C1262 +
           C383 * C1269 + C384 * C1263 -
           (C113 * C1276 + C48293 * C1286) * C1270 -
           (C113 * C1287 + C48293 * C1294) * C1264 +
           (C113 * C1277 + C48293 * C1288) * C1271 +
           (C113 * C1289 + C48293 * C1295) * C1265) *
              C105) *
         C48278 * C48044 * C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1173 +
            (C113 * C123 + C48293 * C136) * C1167 -
            (C113 * C305 + C48293 * C315) * C1174 -
            (C113 * C316 + C48293 * C335) * C1168 +
            (C113 * C306 + C48293 * C317) * C1175 +
            (C113 * C318 + C48293 * C336) * C48390) *
               C103 +
           (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C104 +
           C1199 * C105) *
              C48278 * C48044 * C48430 +
          (((C113 * C1004 + C48293 * C1009) * C1174 -
            ((C113 * C533 + C48293 * C550) * C1167 +
             (C113 * C520 + C48293 * C534) * C1173) +
            (C113 * C1010 + C48293 * C1019) * C1168 -
            (C113 * C1406 + C48293 * C1415) * C1175 -
            (C113 * C1416 + C48293 * C1433) * C48390) *
               C103 +
           (C1043 * C1174 - (C583 * C1167 + C582 * C1173) + C1044 * C1168 -
            (C113 * C1407 + C48293 * C1417) * C1175 -
            (C113 * C1418 + C48293 * C1434) * C48390) *
               C104 +
           (C1045 * C1174 - (C585 * C1167 + C584 * C1173) + C1047 * C1168 -
            (C113 * C1408 + C48293 * C1419) * C1175 -
            (C113 * C1420 + C48293 * C1435) * C48390) *
               C105) *
              C48278 * C48044 * C48419 +
          (((C113 * C522 + C48293 * C537) * C1173 +
            (C113 * C538 + C48293 * C552) * C1167 -
            (C113 * C1409 + C48293 * C1421) * C1174 -
            (C113 * C1422 + C48293 * C1436) * C1168 +
            (C113 * C1410 + C48293 * C1423) * C1175 +
            (C113 * C1424 + C48293 * C1437) * C48390) *
               C103 +
           (C588 * C1173 + C589 * C1167 -
            (C113 * C1411 + C48293 * C1425) * C1174 -
            (C113 * C1426 + C48293 * C1438) * C1168 +
            (C113 * C1412 + C48293 * C1427) * C1175 +
            (C113 * C1428 + C48293 * C1439) * C48390) *
               C104 +
           (C590 * C1173 + C591 * C1167 -
            (C113 * C1413 + C48293 * C1429) * C1174 -
            (C113 * C1430 + C48293 * C1440) * C1168 +
            (C113 * C1414 + C48293 * C1431) * C1175 +
            (C113 * C1432 + C48293 * C1441) * C48390) *
               C105) *
              C48278 * C48044 * C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[23] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48278 * C707 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48278 * C708 +
           (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48278 * C709 -
           ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
               C48278 * C48394) *
              C48359 +
          (((C594 + C595) * C103 + (C596 + C597) * C104 + C850 * C105) *
               C48278 * C708 -
           (C606 * C105 + (C595 + C594) * C104 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C103) *
               C48278 * C707 -
           ((C857 + C858) * C105 + (C599 + C598) * C104 + C606 * C103) *
               C48278 * C709 +
           (C850 * C103 + (C858 + C857) * C104 +
            ((C113 * C845 + C48293 * C846) * C114 +
             (C113 * C847 + C48293 * C848) * C48072) *
                C105) *
               C48278 * C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1173 +
             (C113 * C123 + C48293 * C136) * C1167 -
             (C113 * C305 + C48293 * C315) * C1174 -
             (C113 * C316 + C48293 * C335) * C1168 +
             (C113 * C306 + C48293 * C317) * C1175 +
             (C113 * C318 + C48293 * C336) * C48390) *
                C103 +
            (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C104 +
            C1199 * C105) *
               C48278 * C48344 +
           ((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C103 +
            (C1185 - (C1184 + C1183) + C1186 - C1187 - C1188) * C104 +
            (C1189 - (C1190 + C1191) + C1192 - C1193 - C1194) * C105) *
               C48278 * C48054) *
              C48359 +
          ((((C113 * C1004 + C48293 * C1009) * C1174 -
             ((C113 * C533 + C48293 * C550) * C1167 +
              (C113 * C520 + C48293 * C534) * C1173) +
             (C113 * C1010 + C48293 * C1019) * C1168 -
             (C113 * C1406 + C48293 * C1415) * C1175 -
             (C113 * C1416 + C48293 * C1433) * C48390) *
                C103 +
            (C1733 - (C1734 + C1735) + C1736 - C1753 - C1754) * C104 +
            (C1741 - (C1742 + C1743) + C1744 - C1755 - C1756) * C105) *
               C48278 * C48344 +
           ((C1735 + C1734 - C1733 - C1736 + C1753 + C1754) * C103 +
            (C1743 + C1742 - C1741 - C1744 + C1755 + C1756) * C104 +
            (C586 * C1173 + C587 * C1167 - C1048 * C1174 - C1049 * C1168 +
             (C113 * C1728 + C48293 * C1729) * C1175 +
             (C113 * C1730 + C48293 * C1731) * C48390) *
                C105) *
               C48278 * C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C114 +
            (C113 * C123 + C48293 * C136) * C48072) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C48278 * C107 -
          (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) * C48278 *
              C108 +
          (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48278 * C109 -
          ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) * C48278 *
              C110 +
          (C186 * C103 + (C183 + C182) * C104 +
           ((C113 * C121 + C48293 * C134) * C114 +
            (C113 * C135 + C48293 * C142) * C48072) *
               C105) *
              C48278 * C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C302 +
            (C113 * C123 + C48293 * C136) * C48429 -
            (C113 * C305 + C48293 * C315) * C303 -
            (C113 * C316 + C48293 * C335) * C48417 +
            (C113 * C306 + C48293 * C317) * C304 +
            (C113 * C318 + C48293 * C336) * C48390) *
               C103 +
           (C346 + C347 - C389 - C390 + C391 + C392) * C104 + C404 * C105) *
              C48278 * C299 +
          ((C389 - (C347 + C346) + C390 - C391 - C392) * C103 +
           (C393 - (C357 + C356) + C394 - C395 - C396) * C104 +
           (C397 - (C368 + C369) + C398 - C399 - C400) * C105) *
              C48278 * C300 +
          (C404 * C103 + (C369 + C368 - C397 - C398 + C399 + C400) * C104 +
           (C170 * C302 + C171 * C48429 - (C113 * C313 + C48293 * C331) * C303 -
            (C113 * C332 + C48293 * C343) * C48417 +
            (C113 * C314 + C48293 * C333) * C304 +
            (C113 * C334 + C48293 * C344) * C48390) *
               C105) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1173 +
            (C113 * C123 + C48293 * C136) * C1167 -
            (C113 * C305 + C48293 * C315) * C1174 -
            (C113 * C316 + C48293 * C335) * C1168 +
            (C113 * C306 + C48293 * C317) * C1175 +
            (C113 * C318 + C48293 * C336) * C48390) *
               C103 +
           (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C104 +
           C1199 * C105) *
              C48278 * C48426 +
          ((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C103 +
           (C1185 - (C1184 + C1183) + C1186 - C1187 - C1188) * C104 +
           (C1189 - (C1190 + C1191) + C1192 - C1193 - C1194) * C105) *
              C48278 * C48413 +
          (C1199 * C103 +
           (C1191 + C1190 - C1189 - C1192 + C1193 + C1194) * C104 +
           (C170 * C1173 + C171 * C1167 - C738 * C1174 - C739 * C1168 +
            (C113 * C314 + C48293 * C333) * C1175 +
            (C113 * C334 + C48293 * C344) * C48390) *
               C105) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48293 * C122) * C1267 +
           (C113 * C123 + C48293 * C136) * C1261 -
           (C113 * C305 + C48293 * C315) * C1268 -
           (C113 * C316 + C48293 * C335) * C1262 +
           (C113 * C306 + C48293 * C317) * C1269 +
           (C113 * C318 + C48293 * C336) * C1263 -
           (C113 * C1272 + C48293 * C1278) * C1270 -
           (C113 * C1279 + C48293 * C1290) * C1264 +
           (C113 * C1273 + C48293 * C1280) * C1271 +
           (C113 * C1281 + C48293 * C1291) * C1265) *
              C103 +
          (C164 * C1267 + C165 * C1261 - C376 * C1268 - C377 * C1262 +
           C378 * C1269 + C379 * C1263 -
           (C113 * C1274 + C48293 * C1282) * C1270 -
           (C113 * C1283 + C48293 * C1292) * C1264 +
           (C113 * C1275 + C48293 * C1284) * C1271 +
           (C113 * C1285 + C48293 * C1293) * C1265) *
              C104 +
          (C166 * C1267 + C167 * C1261 - C381 * C1268 - C382 * C1262 +
           C383 * C1269 + C384 * C1263 -
           (C113 * C1276 + C48293 * C1286) * C1270 -
           (C113 * C1287 + C48293 * C1294) * C1264 +
           (C113 * C1277 + C48293 * C1288) * C1271 +
           (C113 * C1289 + C48293 * C1295) * C1265) *
              C105) *
         C48278 * C48044 * C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[25] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C47015 +
             (C113 * C123 + C48293 * C136) * C48131 - C5219 * C47007 -
             C5220 * C48138 + C5221 * C47021 + C5222 * C3108) *
                C5040 +
            (C3116 + C3117 - C3118 - C3119 + C3120 + C3121) * C48377) *
               C5042 +
           ((C5219 * C47015 + C5220 * C48131 - C5221 * C47007 - C5222 * C48138 +
             C6119 * C47021 + C6120 * C3108) *
                C5040 +
            (C8281 + C8282 - C8283 - C8284 + C8285 + C8286) * C48377) *
               C48408) *
              C48049 +
          (((C3118 - (C3117 + C3116) + C3119 - C3120 - C3121) * C5040 +
            (C3124 - (C3123 + C3122) + C3125 - C3126 - C3127) * C48377) *
               C5042 +
           ((C8283 - (C8282 + C8281) + C8284 - C8285 - C8286) * C5040 +
            (C8287 - (C8288 + C8289) + C8290 - C8291 - C8292) * C48377) *
               C48408) *
              C48057 +
          ((C3138 * C5040 +
            (C3130 + C3129 - C3128 - C3131 + C3132 + C3133) * C48377) *
               C5042 +
           ((C8289 + C8288 - C8287 - C8290 + C8291 + C8292) * C5040 +
            (C385 * C47015 + C386 * C48131 - C387 * C47007 - C388 * C48138 +
             (C113 * C1550 + C48293 * C1551) * C47021 +
             (C113 * C1552 + C48293 * C1553) * C3108) *
                C48377) *
               C48408) *
              C3111) *
         C48090) /
        (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C47015 +
              (C113 * C123 + C48293 * C136) * C48131 - C5219 * C47007 -
              C5220 * C48138 + C5221 * C47021 + C5222 * C3108) *
                 C5040 +
             (C3116 + C3117 - C3118 - C3119 + C3120 + C3121) * C48377) *
                C5042 +
            ((C5219 * C47015 + C5220 * C48131 - C5221 * C47007 -
              C5222 * C48138 + C6119 * C47021 + C6120 * C3108) *
                 C5040 +
             (C8281 + C8282 - C8283 - C8284 + C8285 + C8286) * C48377) *
                C48408) *
               C2812 +
           (((C3118 - (C3117 + C3116) + C3119 - C3120 - C3121) * C5040 +
             (C3124 - (C3123 + C3122) + C3125 - C3126 - C3127) * C48377) *
                C5042 +
            ((C8283 - (C8282 + C8281) + C8284 - C8285 - C8286) * C5040 +
             (C8287 - (C8288 + C8289) + C8290 - C8291 - C8292) * C48377) *
                C48408) *
               C48054) *
              C48359 +
          ((((C5857 * C47007 -
              ((C113 * C533 + C48293 * C550) * C48131 +
               (C113 * C520 + C48293 * C534) * C47015) +
              C5858 * C48138 - C6295 * C47021 - C6296 * C3108) *
                 C5040 +
             (C3438 - (C3439 + C3440) + C3441 - C3442 - C3443) * C48377) *
                C5042 +
            ((C6295 * C47007 - (C5858 * C48131 + C5857 * C47015) +
              C6296 * C48138 - C6789 * C47021 - C6790 * C3108) *
                 C5040 +
             (C8685 - (C8686 + C8687) + C8688 - C8689 - C8690) * C48377) *
                C48408) *
               C2812 +
           (((C3440 + C3439 - C3438 - C3441 + C3442 + C3443) * C5040 +
             (C3446 + C3445 - C3444 - C3447 + C3448 + C3449) * C48377) *
                C5042 +
            ((C8687 + C8686 - C8685 - C8688 + C8689 + C8690) * C5040 +
             (C1045 * C47015 + C1047 * C48131 - C1751 * C47007 -
              C1752 * C48138 + (C113 * C1856 + C48293 * C1861) * C47021 +
              (C113 * C1862 + C48293 * C1865) * C3108) *
                 C48377) *
                C48408) *
               C48054) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2814 +
             (C113 * C123 + C48293 * C136) * C48436 - C5219 * C2815 -
             C5220 * C48432 + C5221 * C2816 + C5222 * C48422 - C6119 * C2817 -
             C6120 * C48400) *
                C5040 +
            (C2819 + C2820 - C2821 - C2822 + C2823 + C2824 - C2825 - C2826) *
                C48377) *
               C5042 +
           ((C5219 * C2814 + C5220 * C48436 - C5221 * C2815 - C5222 * C48432 +
             C6119 * C2816 + C6120 * C48422 - C6121 * C2817 - C6122 * C48400) *
                C5040 +
            (C7925 + C7926 - C7927 - C7928 + C7929 + C7930 - C7931 - C7932) *
                C48377) *
               C48408) *
              C2812 +
          (((C2821 - (C2820 + C2819) + C2822 - C2823 - C2824 + C2825 + C2826) *
                C5040 +
            (C2829 - (C2828 + C2827) + C2830 - C2831 - C2832 + C2833 + C2834) *
                C48377) *
               C5042 +
           ((C7927 - (C7926 + C7925) + C7928 - C7929 - C7930 + C7931 + C7932) *
                C5040 +
            (C383 * C2815 - (C382 * C48436 + C381 * C2814) + C384 * C48432 -
             C1577 * C2816 - C1578 * C48422 +
             (C113 * C1277 + C48293 * C1288) * C2817 +
             (C113 * C1289 + C48293 * C1295) * C48400) *
                C48377) *
               C48408) *
              C48054) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2686 +
             (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
             C5220 * C48135) *
                C5040 +
            (C2689 + C2690 - C2691 - C2692) * C48377) *
               C5042 +
           ((C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                C5040 +
            (C7783 + C7784 - C7785 - C7786) * C48377) *
               C48408) *
              C48435 +
          (((C2691 - (C2690 + C2689) + C2692) * C5040 +
            (C2695 - (C2694 + C2693) + C2696) * C48377) *
               C5042 +
           ((C7785 - (C7784 + C7783) + C7786) * C5040 +
            (C7787 - (C7788 + C7789) + C7790) * C48377) *
               C48408) *
              C48428 +
          ((C2709 * C5040 + (C2699 + C2698 - C2697 - C2700) * C48377) * C5042 +
           ((C7789 + C7788 - C7787 - C7790) * C5040 +
            (C7791 + C7792 - C7793 - C7794) * C48377) *
               C48408) *
              C48415 +
          ((C2710 * C5040 + (C2703 - (C2702 + C2701) + C2704) * C48377) *
               C5042 +
           ((C7793 - (C7792 + C7791) + C7794) * C5040 +
            ((C113 * C314 + C48293 * C333) * C2687 -
             (C739 * C2680 + C738 * C2686) +
             (C113 * C334 + C48293 * C344) * C48135) *
                C48377) *
               C48408) *
              C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C2686 +
              (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
              C5220 * C48135) *
                 C5040 +
             (C2689 + C2690 - C2691 - C2692) * C48377) *
                C5042 +
            ((C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                 C5040 +
             (C7783 + C7784 - C7785 - C7786) * C48377) *
                C48408) *
               C2812 +
           (((C2691 - (C2690 + C2689) + C2692) * C5040 +
             (C2695 - (C2694 + C2693) + C2696) * C48377) *
                C5042 +
            ((C7785 - (C7784 + C7783) + C7786) * C5040 +
             (C7787 - (C7788 + C7789) + C7790) * C48377) *
                C48408) *
               C48054) *
              C48430 +
          ((((C5857 * C2687 -
              ((C113 * C533 + C48293 * C550) * C2680 +
               (C113 * C520 + C48293 * C534) * C2686) +
              C5858 * C48135) *
                 C5040 +
             (C2981 - (C2982 + C2983) + C2984) * C48377) *
                C5042 +
            ((C6295 * C2687 - (C5858 * C2680 + C5857 * C2686) +
              C6296 * C48135) *
                 C5040 +
             (C8127 - (C8128 + C8129) + C8130) * C48377) *
                C48408) *
               C2812 +
           (((C2983 + C2982 - C2981 - C2984) * C5040 +
             (C2987 + C2986 - C2985 - C2988) * C48377) *
                C5042 +
            ((C8129 + C8128 - C8127 - C8130) * C5040 +
             (C1045 * C2686 + C1047 * C2680 - C1751 * C2687 - C1752 * C48135) *
                 C48377) *
                C48408) *
               C48054) *
              C48419 +
          (((((C113 * C522 + C48293 * C537) * C2686 +
              (C113 * C538 + C48293 * C552) * C2680 - C6297 * C2687 -
              C6298 * C48135) *
                 C5040 +
             (C2989 + C2990 - C2991 - C2992) * C48377) *
                C5042 +
            ((C6297 * C2686 + C6298 * C2680 - C6299 * C2687 - C6300 * C48135) *
                 C5040 +
             (C8131 + C8132 - C8133 - C8134) * C48377) *
                C48408) *
               C2812 +
           (((C2991 - (C2990 + C2989) + C2992) * C5040 +
             (C2995 - (C2994 + C2993) + C2996) * C48377) *
                C5042 +
            ((C8133 - (C8132 + C8131) + C8134) * C5040 +
             ((C113 * C1414 + C48293 * C1431) * C2687 -
              (C2346 * C2680 + C2345 * C2686) +
              (C113 * C1432 + C48293 * C1441) * C48135) *
                 C48377) *
                C48408) *
               C48054) *
              C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C2686 +
              (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
              C5220 * C48135) *
                 C5040 +
             (C2689 + C2690 - C2691 - C2692) * C48377) *
                C5042 +
            ((C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                 C5040 +
             (C7783 + C7784 - C7785 - C7786) * C48377) *
                C48408) *
               C48049 +
           (((C2691 - (C2690 + C2689) + C2692) * C5040 +
             (C2695 - (C2694 + C2693) + C2696) * C48377) *
                C5042 +
            ((C7785 - (C7784 + C7783) + C7786) * C5040 +
             (C7787 - (C7788 + C7789) + C7790) * C48377) *
                C48408) *
               C48057 +
           ((C2709 * C5040 + (C2699 + C2698 - C2697 - C2700) * C48377) * C5042 +
            ((C7789 + C7788 - C7787 - C7790) * C5040 +
             (C7791 + C7792 - C7793 - C7794) * C48377) *
                C48408) *
               C3111) *
              C48359 +
          ((((C5857 * C2687 -
              ((C113 * C533 + C48293 * C550) * C2680 +
               (C113 * C520 + C48293 * C534) * C2686) +
              C5858 * C48135) *
                 C5040 +
             (C2981 - (C2982 + C2983) + C2984) * C48377) *
                C5042 +
            ((C6295 * C2687 - (C5858 * C2680 + C5857 * C2686) +
              C6296 * C48135) *
                 C5040 +
             (C8127 - (C8128 + C8129) + C8130) * C48377) *
                C48408) *
               C48049 +
           (((C2983 + C2982 - C2981 - C2984) * C5040 +
             (C2987 + C2986 - C2985 - C2988) * C48377) *
                C5042 +
            ((C8129 + C8128 - C8127 - C8130) * C5040 +
             (C8487 + C8488 - C8489 - C8490) * C48377) *
                C48408) *
               C48057 +
           ((C3291 * C5040 + (C3288 - (C3287 + C3286) + C3289) * C48377) *
                C5042 +
            ((C8489 - (C8488 + C8487) + C8490) * C5040 +
             ((C113 * C1728 + C48293 * C1729) * C2687 -
              (C1049 * C2680 + C1048 * C2686) +
              (C113 * C1730 + C48293 * C1731) * C48135) *
                 C48377) *
                C48408) *
               C3111) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2686 +
             (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
             C5220 * C48135) *
                C5040 +
            (C2689 + C2690 - C2691 - C2692) * C48377) *
               C5042 +
           ((C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                C5040 +
            (C7783 + C7784 - C7785 - C7786) * C48377) *
               C48408) *
              C48435 +
          (((C2691 - (C2690 + C2689) + C2692) * C5040 +
            (C2695 - (C2694 + C2693) + C2696) * C48377) *
               C5042 +
           ((C7785 - (C7784 + C7783) + C7786) * C5040 +
            (C7787 - (C7788 + C7789) + C7790) * C48377) *
               C48408) *
              C48428 +
          ((C2709 * C5040 + (C2699 + C2698 - C2697 - C2700) * C48377) * C5042 +
           ((C7789 + C7788 - C7787 - C7790) * C5040 +
            (C7791 + C7792 - C7793 - C7794) * C48377) *
               C48408) *
              C48415 +
          ((C2710 * C5040 + (C2703 - (C2702 + C2701) + C2704) * C48377) *
               C5042 +
           ((C7793 - (C7792 + C7791) + C7794) * C5040 +
            ((C113 * C314 + C48293 * C333) * C2687 -
             (C739 * C2680 + C738 * C2686) +
             (C113 * C334 + C48293 * C344) * C48135) *
                C48377) *
               C48408) *
              C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2814 +
             (C113 * C123 + C48293 * C136) * C48436 - C5219 * C2815 -
             C5220 * C48432 + C5221 * C2816 + C5222 * C48422 - C6119 * C2817 -
             C6120 * C48400) *
                C5040 +
            (C2819 + C2820 - C2821 - C2822 + C2823 + C2824 - C2825 - C2826) *
                C48377) *
               C5042 +
           ((C5219 * C2814 + C5220 * C48436 - C5221 * C2815 - C5222 * C48432 +
             C6119 * C2816 + C6120 * C48422 - C6121 * C2817 - C6122 * C48400) *
                C5040 +
            (C7925 + C7926 - C7927 - C7928 + C7929 + C7930 - C7931 - C7932) *
                C48377) *
               C48408) *
              C2812 +
          (((C2821 - (C2820 + C2819) + C2822 - C2823 - C2824 + C2825 + C2826) *
                C5040 +
            (C2829 - (C2828 + C2827) + C2830 - C2831 - C2832 + C2833 + C2834) *
                C48377) *
               C5042 +
           ((C7927 - (C7926 + C7925) + C7928 - C7929 - C7930 + C7931 + C7932) *
                C5040 +
            (C383 * C2815 - (C382 * C48436 + C381 * C2814) + C384 * C48432 -
             C1577 * C2816 - C1578 * C48422 +
             (C113 * C1277 + C48293 * C1288) * C2817 +
             (C113 * C1289 + C48293 * C1295) * C48400) *
                C48377) *
               C48408) *
              C48054) *
         C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C47015 +
              (C113 * C123 + C48293 * C136) * C48131 - C5219 * C47007 -
              C5220 * C48138 + C5221 * C47021 + C5222 * C3108) *
                 C5040 +
             (C3116 + C3117 - C3118 - C3119 + C3120 + C3121) * C48377) *
                C5042 +
            ((C5219 * C47015 + C5220 * C48131 - C5221 * C47007 -
              C5222 * C48138 + C6119 * C47021 + C6120 * C3108) *
                 C5040 +
             (C8281 + C8282 - C8283 - C8284 + C8285 + C8286) * C48377) *
                C48408) *
               C48344 +
           (((C3118 - (C3117 + C3116) + C3119 - C3120 - C3121) * C5040 +
             (C3124 - (C3123 + C3122) + C3125 - C3126 - C3127) * C48377) *
                C5042 +
            ((C8283 - (C8282 + C8281) + C8284 - C8285 - C8286) * C5040 +
             (C8287 - (C8288 + C8289) + C8290 - C8291 - C8292) * C48377) *
                C48408) *
               C48054) *
              C3547 +
          ((((C5857 * C47007 -
              ((C113 * C533 + C48293 * C550) * C48131 +
               (C113 * C520 + C48293 * C534) * C47015) +
              C5858 * C48138 - C6295 * C47021 - C6296 * C3108) *
                 C5040 +
             (C3438 - (C3439 + C3440) + C3441 - C3442 - C3443) * C48377) *
                C5042 +
            ((C6295 * C47007 - (C5858 * C48131 + C5857 * C47015) +
              C6296 * C48138 - C6789 * C47021 - C6790 * C3108) *
                 C5040 +
             (C8685 - (C8686 + C8687) + C8688 - C8689 - C8690) * C48377) *
                C48408) *
               C48344 +
           (((C3440 + C3439 - C3438 - C3441 + C3442 + C3443) * C5040 +
             (C3446 + C3445 - C3444 - C3447 + C3448 + C3449) * C48377) *
                C5042 +
            ((C8687 + C8686 - C8685 - C8688 + C8689 + C8690) * C5040 +
             (C1045 * C47015 + C1047 * C48131 - C1751 * C47007 -
              C1752 * C48138 + (C113 * C1856 + C48293 * C1861) * C47021 +
              (C113 * C1862 + C48293 * C1865) * C3108) *
                 C48377) *
                C48408) *
               C48054) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C47015 +
             (C113 * C123 + C48293 * C136) * C48131 - C5219 * C47007 -
             C5220 * C48138 + C5221 * C47021 + C5222 * C3108) *
                C5040 +
            (C3116 + C3117 - C3118 - C3119 + C3120 + C3121) * C48377) *
               C5042 +
           ((C5219 * C47015 + C5220 * C48131 - C5221 * C47007 - C5222 * C48138 +
             C6119 * C47021 + C6120 * C3108) *
                C5040 +
            (C8281 + C8282 - C8283 - C8284 + C8285 + C8286) * C48377) *
               C48408) *
              C48044 * C48173 +
          (((C5857 * C47007 -
             ((C113 * C533 + C48293 * C550) * C48131 +
              (C113 * C520 + C48293 * C534) * C47015) +
             C5858 * C48138 - C6295 * C47021 - C6296 * C3108) *
                C5040 +
            (C3438 - (C3439 + C3440) + C3441 - C3442 - C3443) * C48377) *
               C5042 +
           ((C6295 * C47007 - (C5858 * C48131 + C5857 * C47015) +
             C6296 * C48138 - C6789 * C47021 - C6790 * C3108) *
                C5040 +
            (C8685 - (C8686 + C8687) + C8688 - C8689 - C8690) * C48377) *
               C48408) *
              C48044 * C48180 +
          ((((C113 * C522 + C48293 * C537) * C47015 +
             (C113 * C538 + C48293 * C552) * C48131 - C6297 * C47007 -
             C6298 * C48138 + C6299 * C47021 + C6300 * C3108) *
                C5040 +
            (C588 * C47015 + C589 * C48131 - C2343 * C47007 - C2344 * C48138 +
             C6301 * C47021 + C6302 * C3108) *
                C48377) *
               C5042 +
           ((C6297 * C47015 + C6298 * C48131 - C6299 * C47007 - C6300 * C48138 +
             (C113 * C6270 + C48293 * C6272) * C47021 +
             (C113 * C6273 + C48293 * C6276) * C3108) *
                C5040 +
            (C2343 * C47015 + C2344 * C48131 - C6301 * C47007 - C6302 * C48138 +
             (C113 * C6271 + C48293 * C6274) * C47021 +
             (C113 * C6275 + C48293 * C6277) * C3108) *
                C48377) *
               C48408) *
              C48044 * C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2814 +
             (C113 * C123 + C48293 * C136) * C48436 - C5219 * C2815 -
             C5220 * C48432 + C5221 * C2816 + C5222 * C48422 - C6119 * C2817 -
             C6120 * C48400) *
                C5040 +
            (C2819 + C2820 - C2821 - C2822 + C2823 + C2824 - C2825 - C2826) *
                C48377) *
               C5042 +
           ((C5219 * C2814 + C5220 * C48436 - C5221 * C2815 - C5222 * C48432 +
             C6119 * C2816 + C6120 * C48422 - C6121 * C2817 - C6122 * C48400) *
                C5040 +
            (C7925 + C7926 - C7927 - C7928 + C7929 + C7930 - C7931 - C7932) *
                C48377) *
               C48408) *
              C48044 * C3547 +
          (((C5857 * C2815 -
             ((C113 * C533 + C48293 * C550) * C48436 +
              (C113 * C520 + C48293 * C534) * C2814) +
             C5858 * C48432 - C6295 * C2816 - C6296 * C48422 + C6789 * C2817 +
             C6790 * C48400) *
                C5040 +
            (C1043 * C2815 - (C583 * C48436 + C582 * C2814) + C1044 * C48432 -
             C1749 * C2816 - C1750 * C48422 + C6643 * C2817 + C6644 * C48400) *
                C48377) *
               C5042 +
           ((C6295 * C2815 - (C5858 * C48436 + C5857 * C2814) + C6296 * C48432 -
             C6789 * C2816 - C6790 * C48422 +
             (C113 * C6776 + C48293 * C6778) * C2817 +
             (C113 * C6779 + C48293 * C6782) * C48400) *
                C5040 +
            (C1749 * C2815 - (C1044 * C48436 + C1043 * C2814) + C1750 * C48432 -
             C6643 * C2816 - C6644 * C48422 +
             (C113 * C6777 + C48293 * C6780) * C2817 +
             (C113 * C6781 + C48293 * C6783) * C48400) *
                C48377) *
               C48408) *
              C48044 * C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C2686 +
              (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
              C5220 * C48135) *
                 C5040 +
             (C2689 + C2690 - C2691 - C2692) * C48377) *
                C5042 +
            ((C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                 C5040 +
             (C7783 + C7784 - C7785 - C7786) * C48377) *
                C48408) *
               C48426 +
           (((C2691 - (C2690 + C2689) + C2692) * C5040 +
             (C2695 - (C2694 + C2693) + C2696) * C48377) *
                C5042 +
            ((C7785 - (C7784 + C7783) + C7786) * C5040 +
             (C7787 - (C7788 + C7789) + C7790) * C48377) *
                C48408) *
               C48413 +
           ((C2709 * C5040 + (C2699 + C2698 - C2697 - C2700) * C48377) * C5042 +
            ((C7789 + C7788 - C7787 - C7790) * C5040 +
             (C7791 + C7792 - C7793 - C7794) * C48377) *
                C48408) *
               C48384) *
              C3547 +
          ((((C5857 * C2687 -
              ((C113 * C533 + C48293 * C550) * C2680 +
               (C113 * C520 + C48293 * C534) * C2686) +
              C5858 * C48135) *
                 C5040 +
             (C2981 - (C2982 + C2983) + C2984) * C48377) *
                C5042 +
            ((C6295 * C2687 - (C5858 * C2680 + C5857 * C2686) +
              C6296 * C48135) *
                 C5040 +
             (C8127 - (C8128 + C8129) + C8130) * C48377) *
                C48408) *
               C48426 +
           (((C2983 + C2982 - C2981 - C2984) * C5040 +
             (C2987 + C2986 - C2985 - C2988) * C48377) *
                C5042 +
            ((C8129 + C8128 - C8127 - C8130) * C5040 +
             (C8487 + C8488 - C8489 - C8490) * C48377) *
                C48408) *
               C48413 +
           ((C3291 * C5040 + (C3288 - (C3287 + C3286) + C3289) * C48377) *
                C5042 +
            ((C8489 - (C8488 + C8487) + C8490) * C5040 +
             ((C113 * C1728 + C48293 * C1729) * C2687 -
              (C1049 * C2680 + C1048 * C2686) +
              (C113 * C1730 + C48293 * C1731) * C48135) *
                 C48377) *
                C48408) *
               C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2686 +
             (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
             C5220 * C48135) *
                C5040 +
            (C2689 + C2690 - C2691 - C2692) * C48377) *
               C5042 +
           ((C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                C5040 +
            (C7783 + C7784 - C7785 - C7786) * C48377) *
               C48408) *
              C48044 * C48437 +
          (((C5857 * C2687 -
             ((C113 * C533 + C48293 * C550) * C2680 +
              (C113 * C520 + C48293 * C534) * C2686) +
             C5858 * C48135) *
                C5040 +
            (C2981 - (C2982 + C2983) + C2984) * C48377) *
               C5042 +
           ((C6295 * C2687 - (C5858 * C2680 + C5857 * C2686) + C6296 * C48135) *
                C5040 +
            (C8127 - (C8128 + C8129) + C8130) * C48377) *
               C48408) *
              C48044 * C48434 +
          ((((C113 * C522 + C48293 * C537) * C2686 +
             (C113 * C538 + C48293 * C552) * C2680 - C6297 * C2687 -
             C6298 * C48135) *
                C5040 +
            (C2989 + C2990 - C2991 - C2992) * C48377) *
               C5042 +
           ((C6297 * C2686 + C6298 * C2680 - C6299 * C2687 - C6300 * C48135) *
                C5040 +
            (C8131 + C8132 - C8133 - C8134) * C48377) *
               C48408) *
              C48044 * C48425 +
          (((C7651 * C2687 -
             ((C113 * C2166 + C48293 * C2176) * C2680 +
              (C113 * C2158 + C48293 * C2167) * C2686) +
             C7652 * C48135) *
                C5040 +
            (C7505 * C2687 - (C2466 * C2680 + C2465 * C2686) + C7506 * C48135) *
                C48377) *
               C5042 +
           (((C113 * C7638 + C48293 * C7640) * C2687 -
             (C7652 * C2680 + C7651 * C2686) +
             (C113 * C7641 + C48293 * C7644) * C48135) *
                C5040 +
            ((C113 * C7639 + C48293 * C7642) * C2687 -
             (C7506 * C2680 + C7505 * C2686) +
             (C113 * C7643 + C48293 * C7645) * C48135) *
                C48377) *
               C48408) *
              C48044 * C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C2686 +
              (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
              C5220 * C48135) *
                 C5040 +
             (C2689 + C2690 - C2691 - C2692) * C48377) *
                C5042 +
            ((C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                 C5040 +
             (C7783 + C7784 - C7785 - C7786) * C48377) *
                C48408) *
               C48344 +
           (((C2691 - (C2690 + C2689) + C2692) * C5040 +
             (C2695 - (C2694 + C2693) + C2696) * C48377) *
                C5042 +
            ((C7785 - (C7784 + C7783) + C7786) * C5040 +
             (C7787 - (C7788 + C7789) + C7790) * C48377) *
                C48408) *
               C48054) *
              C48173 +
          ((((C5857 * C2687 -
              ((C113 * C533 + C48293 * C550) * C2680 +
               (C113 * C520 + C48293 * C534) * C2686) +
              C5858 * C48135) *
                 C5040 +
             (C2981 - (C2982 + C2983) + C2984) * C48377) *
                C5042 +
            ((C6295 * C2687 - (C5858 * C2680 + C5857 * C2686) +
              C6296 * C48135) *
                 C5040 +
             (C8127 - (C8128 + C8129) + C8130) * C48377) *
                C48408) *
               C48344 +
           (((C2983 + C2982 - C2981 - C2984) * C5040 +
             (C2987 + C2986 - C2985 - C2988) * C48377) *
                C5042 +
            ((C8129 + C8128 - C8127 - C8130) * C5040 +
             (C8487 + C8488 - C8489 - C8490) * C48377) *
                C48408) *
               C48054) *
              C48180 +
          (((((C113 * C522 + C48293 * C537) * C2686 +
              (C113 * C538 + C48293 * C552) * C2680 - C6297 * C2687 -
              C6298 * C48135) *
                 C5040 +
             (C2989 + C2990 - C2991 - C2992) * C48377) *
                C5042 +
            ((C6297 * C2686 + C6298 * C2680 - C6299 * C2687 - C6300 * C48135) *
                 C5040 +
             (C8131 + C8132 - C8133 - C8134) * C48377) *
                C48408) *
               C48344 +
           (((C2991 - (C2990 + C2989) + C2992) * C5040 +
             (C2995 - (C2994 + C2993) + C2996) * C48377) *
                C5042 +
            ((C8133 - (C8132 + C8131) + C8134) * C5040 +
             ((C113 * C1414 + C48293 * C1431) * C2687 -
              (C2346 * C2680 + C2345 * C2686) +
              (C113 * C1432 + C48293 * C1441) * C48135) *
                 C48377) *
                C48408) *
               C48054) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C2686 +
              (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
              C5220 * C48135) *
                 C5040 +
             (C2689 + C2690 - C2691 - C2692) * C48377) *
                C5042 +
            ((C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                 C5040 +
             (C7783 + C7784 - C7785 - C7786) * C48377) *
                C48408) *
               C48426 +
           (((C2691 - (C2690 + C2689) + C2692) * C5040 +
             (C2695 - (C2694 + C2693) + C2696) * C48377) *
                C5042 +
            ((C7785 - (C7784 + C7783) + C7786) * C5040 +
             (C7787 - (C7788 + C7789) + C7790) * C48377) *
                C48408) *
               C48413 +
           ((C2709 * C5040 + (C2699 + C2698 - C2697 - C2700) * C48377) * C5042 +
            ((C7789 + C7788 - C7787 - C7790) * C5040 +
             (C7791 + C7792 - C7793 - C7794) * C48377) *
                C48408) *
               C48384) *
              C3547 +
          ((((C5857 * C2687 -
              ((C113 * C533 + C48293 * C550) * C2680 +
               (C113 * C520 + C48293 * C534) * C2686) +
              C5858 * C48135) *
                 C5040 +
             (C2981 - (C2982 + C2983) + C2984) * C48377) *
                C5042 +
            ((C6295 * C2687 - (C5858 * C2680 + C5857 * C2686) +
              C6296 * C48135) *
                 C5040 +
             (C8127 - (C8128 + C8129) + C8130) * C48377) *
                C48408) *
               C48426 +
           (((C2983 + C2982 - C2981 - C2984) * C5040 +
             (C2987 + C2986 - C2985 - C2988) * C48377) *
                C5042 +
            ((C8129 + C8128 - C8127 - C8130) * C5040 +
             (C8487 + C8488 - C8489 - C8490) * C48377) *
                C48408) *
               C48413 +
           ((C3291 * C5040 + (C3288 - (C3287 + C3286) + C3289) * C48377) *
                C5042 +
            ((C8489 - (C8488 + C8487) + C8490) * C5040 +
             ((C113 * C1728 + C48293 * C1729) * C2687 -
              (C1049 * C2680 + C1048 * C2686) +
              (C113 * C1730 + C48293 * C1731) * C48135) *
                 C48377) *
                C48408) *
               C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2814 +
             (C113 * C123 + C48293 * C136) * C48436 - C5219 * C2815 -
             C5220 * C48432 + C5221 * C2816 + C5222 * C48422 - C6119 * C2817 -
             C6120 * C48400) *
                C5040 +
            (C2819 + C2820 - C2821 - C2822 + C2823 + C2824 - C2825 - C2826) *
                C48377) *
               C5042 +
           ((C5219 * C2814 + C5220 * C48436 - C5221 * C2815 - C5222 * C48432 +
             C6119 * C2816 + C6120 * C48422 - C6121 * C2817 - C6122 * C48400) *
                C5040 +
            (C7925 + C7926 - C7927 - C7928 + C7929 + C7930 - C7931 - C7932) *
                C48377) *
               C48408) *
              C48044 * C3547 +
          (((C5857 * C2815 -
             ((C113 * C533 + C48293 * C550) * C48436 +
              (C113 * C520 + C48293 * C534) * C2814) +
             C5858 * C48432 - C6295 * C2816 - C6296 * C48422 + C6789 * C2817 +
             C6790 * C48400) *
                C5040 +
            (C1043 * C2815 - (C583 * C48436 + C582 * C2814) + C1044 * C48432 -
             C1749 * C2816 - C1750 * C48422 + C6643 * C2817 + C6644 * C48400) *
                C48377) *
               C5042 +
           ((C6295 * C2815 - (C5858 * C48436 + C5857 * C2814) + C6296 * C48432 -
             C6789 * C2816 - C6790 * C48422 +
             (C113 * C6776 + C48293 * C6778) * C2817 +
             (C113 * C6779 + C48293 * C6782) * C48400) *
                C5040 +
            (C1749 * C2815 - (C1044 * C48436 + C1043 * C2814) + C1750 * C48432 -
             C6643 * C2816 - C6644 * C48422 +
             (C113 * C6777 + C48293 * C6780) * C2817 +
             (C113 * C6781 + C48293 * C6783) * C48400) *
                C48377) *
               C48408) *
              C48044 * C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1546 +
             (C113 * C123 + C48293 * C136) * C1540 - C5219 * C1547 -
             C5220 * C1541 + C5221 * C1548 + C5222 * C1542 - C6119 * C1549 -
             C6120 * C48400) *
                C5040 +
            (C1555 + C1556 - C1557 - C1558 + C1559 + C1560 - C1579 - C1580) *
                C48377) *
               C5042 +
           ((C5219 * C1546 + C5220 * C1540 - C5221 * C1547 - C5222 * C1541 +
             C6119 * C1548 + C6120 * C1542 - C6121 * C1549 - C6122 * C48400) *
                C5040 +
            (C6433 + C6434 - C6435 - C6436 + C6437 + C6438 - C6439 - C6440) *
                C48377) *
               C48408) *
              C48344 +
          (((C1557 - (C1556 + C1555) + C1558 - C1559 - C1560 + C1579 + C1580) *
                C5040 +
            (C1567 - (C1566 + C1565) + C1568 - C1569 - C1570 + C1581 + C1582) *
                C48377) *
               C5042 +
           ((C6435 - (C6434 + C6433) + C6436 - C6437 - C6438 + C6439 + C6440) *
                C5040 +
            (C383 * C1547 - (C382 * C1540 + C381 * C1546) + C384 * C1541 -
             C1577 * C1548 - C1578 * C1542 +
             (C113 * C1277 + C48293 * C1288) * C1549 +
             (C113 * C1289 + C48293 * C1295) * C48400) *
                C48377) *
               C48408) *
              C48054) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C711 +
             (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
             C5220 * C48135) *
                C5040 +
            (C718 + C719 - C720 - C721) * C48377) *
               C5042 +
           ((C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                C5040 +
            (C5507 + C5508 - C5509 - C5510) * C48377) *
               C48408) *
              C707 +
          (((C720 - (C719 + C718) + C721) * C5040 +
            (C724 - (C723 + C722) + C725) * C48377) *
               C5042 +
           ((C5509 - (C5508 + C5507) + C5510) * C5040 +
            (C5511 - (C5512 + C5513) + C5514) * C48377) *
               C48408) *
              C708 +
          ((C744 * C5040 + (C728 + C727 - C726 - C729) * C48377) * C5042 +
           ((C5513 + C5512 - C5511 - C5514) * C5040 +
            (C5515 + C5516 - C5517 - C5518) * C48377) *
               C48408) *
              C709 +
          ((C745 * C5040 + (C742 - (C731 + C730) + C743) * C48377) * C5042 +
           ((C5517 - (C5516 + C5515) + C5518) * C5040 +
            ((C113 * C314 + C48293 * C333) * C712 -
             (C739 * C48358 + C738 * C711) +
             (C113 * C334 + C48293 * C344) * C48135) *
                C48377) *
               C48408) *
              C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C711 +
              (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
              C5220 * C48135) *
                 C5040 +
             (C718 + C719 - C720 - C721) * C48377) *
                C5042 +
            ((C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                 C5040 +
             (C5507 + C5508 - C5509 - C5510) * C48377) *
                C48408) *
               C48344 +
           (((C720 - (C719 + C718) + C721) * C5040 +
             (C724 - (C723 + C722) + C725) * C48377) *
                C5042 +
            ((C5509 - (C5508 + C5507) + C5510) * C5040 +
             (C5511 - (C5512 + C5513) + C5514) * C48377) *
                C48408) *
               C48054) *
              C1976 +
          ((((C5857 * C712 -
              ((C113 * C533 + C48293 * C550) * C48358 +
               (C113 * C520 + C48293 * C534) * C711) +
              C5858 * C48135) *
                 C5040 +
             (C1050 - (C1027 + C1028) + C1051) * C48377) *
                C5042 +
            ((C6295 * C712 - (C5858 * C48358 + C5857 * C711) + C6296 * C48135) *
                 C5040 +
             (C5849 - (C5850 + C5851) + C5852) * C48377) *
                C48408) *
               C48344 +
           (((C1028 + C1027 - C1050 - C1051) * C5040 +
             (C1034 + C1033 - C1052 - C1053) * C48377) *
                C5042 +
            ((C5851 + C5850 - C5849 - C5852) * C5040 +
             (C5853 + C5854 - C5855 - C5856) * C48377) *
                C48408) *
               C48054) *
              C1977 +
          (((((C113 * C522 + C48293 * C537) * C711 +
              (C113 * C538 + C48293 * C552) * C48358 - C6297 * C712 -
              C6298 * C48135) *
                 C5040 +
             (C2331 + C2332 - C2347 - C2348) * C48377) *
                C5042 +
            ((C6297 * C711 + C6298 * C48358 - C6299 * C712 - C6300 * C48135) *
                 C5040 +
             (C7367 + C7368 - C7369 - C7370) * C48377) *
                C48408) *
               C48344 +
           (((C2347 - (C2332 + C2331) + C2348) * C5040 +
             (C2349 - (C2338 + C2337) + C2350) * C48377) *
                C5042 +
            ((C7369 - (C7368 + C7367) + C7370) * C5040 +
             ((C113 * C1414 + C48293 * C1431) * C712 -
              (C2346 * C48358 + C2345 * C711) +
              (C113 * C1432 + C48293 * C1441) * C48135) *
                 C48377) *
                C48408) *
               C48054) *
              C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1546 +
             (C113 * C123 + C48293 * C136) * C1540 - C5219 * C1547 -
             C5220 * C1541 + C5221 * C1548 + C5222 * C1542 - C6119 * C1549 -
             C6120 * C48400) *
                C5040 +
            (C1555 + C1556 - C1557 - C1558 + C1559 + C1560 - C1579 - C1580) *
                C48377) *
               C5042 +
           ((C5219 * C1546 + C5220 * C1540 - C5221 * C1547 - C5222 * C1541 +
             C6119 * C1548 + C6120 * C1542 - C6121 * C1549 - C6122 * C48400) *
                C5040 +
            (C6433 + C6434 - C6435 - C6436 + C6437 + C6438 - C6439 - C6440) *
                C48377) *
               C48408) *
              C48044 * C48359 +
          (((C5857 * C1547 -
             ((C113 * C533 + C48293 * C550) * C1540 +
              (C113 * C520 + C48293 * C534) * C1546) +
             C5858 * C1541 - C6295 * C1548 - C6296 * C1542 + C6789 * C1549 +
             C6790 * C48400) *
                C5040 +
            (C1043 * C1547 - (C583 * C1540 + C582 * C1546) + C1044 * C1541 -
             C1749 * C1548 - C1750 * C1542 + C6643 * C1549 + C6644 * C48400) *
                C48377) *
               C5042 +
           ((C6295 * C1547 - (C5858 * C1540 + C5857 * C1546) + C6296 * C1541 -
             C6789 * C1548 - C6790 * C1542 +
             (C113 * C6776 + C48293 * C6778) * C1549 +
             (C113 * C6779 + C48293 * C6782) * C48400) *
                C5040 +
            (C1749 * C1547 - (C1044 * C1540 + C1043 * C1546) + C1750 * C1541 -
             C6643 * C1548 - C6644 * C1542 +
             (C113 * C6777 + C48293 * C6780) * C1549 +
             (C113 * C6781 + C48293 * C6783) * C48400) *
                C48377) *
               C48408) *
              C48044 * C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C711 +
              (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
              C5220 * C48135) *
                 C5040 +
             (C718 + C719 - C720 - C721) * C48377) *
                C5042 +
            ((C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                 C5040 +
             (C5507 + C5508 - C5509 - C5510) * C48377) *
                C48408) *
               C299 +
           (((C720 - (C719 + C718) + C721) * C5040 +
             (C724 - (C723 + C722) + C725) * C48377) *
                C5042 +
            ((C5509 - (C5508 + C5507) + C5510) * C5040 +
             (C5511 - (C5512 + C5513) + C5514) * C48377) *
                C48408) *
               C300 +
           ((C744 * C5040 + (C728 + C727 - C726 - C729) * C48377) * C5042 +
            ((C5513 + C5512 - C5511 - C5514) * C5040 +
             (C5515 + C5516 - C5517 - C5518) * C48377) *
                C48408) *
               C48384) *
              C48359 +
          ((((C5857 * C712 -
              ((C113 * C533 + C48293 * C550) * C48358 +
               (C113 * C520 + C48293 * C534) * C711) +
              C5858 * C48135) *
                 C5040 +
             (C1050 - (C1027 + C1028) + C1051) * C48377) *
                C5042 +
            (((C113 * C1406 + C48293 * C1415) * C712 -
              (C5858 * C48358 + C5857 * C711) +
              (C113 * C1416 + C48293 * C1433) * C48135) *
                 C5040 +
             (C5849 - (C5850 + C5851) + C5852) * C48377) *
                C48408) *
               C299 +
           (((C1028 + C1027 - C1050 - C1051) * C5040 +
             (C1034 + C1033 - C1052 - C1053) * C48377) *
                C5042 +
            ((C5851 + C5850 - C5849 - C5852) * C5040 +
             (C5853 + C5854 - C5855 - C5856) * C48377) *
                C48408) *
               C300 +
           ((C1057 * C5040 + (C1054 - (C1038 + C1037) + C1055) * C48377) *
                C5042 +
            ((C5855 - (C5854 + C5853) + C5856) * C5040 +
             ((C113 * C1728 + C48293 * C1729) * C712 -
              (C1049 * C48358 + C1048 * C711) +
              (C113 * C1730 + C48293 * C1731) * C48135) *
                 C48377) *
                C48408) *
               C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C711 +
             (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
             C5220 * C48135) *
                C5040 +
            (C718 + C719 - C720 - C721) * C48377) *
               C5042 +
           ((C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                C5040 +
            (C5507 + C5508 - C5509 - C5510) * C48377) *
               C48408) *
              C48044 * C2448 +
          (((C5857 * C712 -
             ((C113 * C533 + C48293 * C550) * C48358 +
              (C113 * C520 + C48293 * C534) * C711) +
             C5858 * C48135) *
                C5040 +
            (C1050 - (C1027 + C1028) + C1051) * C48377) *
               C5042 +
           ((C6295 * C712 - (C5858 * C48358 + C5857 * C711) + C6296 * C48135) *
                C5040 +
            (C5849 - (C5850 + C5851) + C5852) * C48377) *
               C48408) *
              C48044 * C2449 +
          ((((C113 * C522 + C48293 * C537) * C711 +
             (C113 * C538 + C48293 * C552) * C48358 - C6297 * C712 -
             C6298 * C48135) *
                C5040 +
            (C2331 + C2332 - C2347 - C2348) * C48377) *
               C5042 +
           ((C6297 * C711 + C6298 * C48358 - C6299 * C712 - C6300 * C48135) *
                C5040 +
            (C7367 + C7368 - C7369 - C7370) * C48377) *
               C48408) *
              C48044 * C2450 +
          (((C7651 * C712 -
             ((C113 * C2166 + C48293 * C2176) * C48358 +
              (C113 * C2158 + C48293 * C2167) * C711) +
             C7652 * C48135) *
                C5040 +
            (C7505 * C712 - (C2466 * C48358 + C2465 * C711) + C7506 * C48135) *
                C48377) *
               C5042 +
           (((C113 * C7638 + C48293 * C7640) * C712 -
             (C7652 * C48358 + C7651 * C711) +
             (C113 * C7641 + C48293 * C7644) * C48135) *
                C5040 +
            ((C113 * C7639 + C48293 * C7642) * C712 -
             (C7506 * C48358 + C7505 * C711) +
             (C113 * C7643 + C48293 * C7645) * C48135) *
                C48377) *
               C48408) *
              C48044 * C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48293 * C122) * C114 +
                 (C113 * C123 + C48293 * C136) * C48072) *
                    C5040 +
                (C174 + C175) * C48377) *
                   C5042 +
               (((C113 * C305 + C48293 * C315) * C114 +
                 (C113 * C316 + C48293 * C335) * C48072) *
                    C5040 +
                (C5045 + C5046) * C48377) *
                   C48408) *
                  C107 -
              (((C5047 + C5048) * C48377 + (C5046 + C5045) * C5040) * C48408 +
               ((C177 + C176) * C48377 + (C175 + C174) * C5040) * C5042) *
                  C108 +
              ((C184 * C5040 + (C179 + C178) * C48377) * C5042 +
               ((C5048 + C5047) * C5040 + (C5049 + C5050) * C48377) * C48408) *
                  C109 -
              (((C5051 + C5052) * C48377 + (C5050 + C5049) * C5040) * C48408 +
               ((C181 + C180) * C48377 + C185 * C5040) * C5042) *
                  C110 +
              ((C186 * C5040 + (C183 + C182) * C48377) * C5042 +
               ((C5052 + C5051) * C5040 +
                ((C113 * C713 + C48293 * C714) * C114 +
                 (C113 * C715 + C48293 * C716) * C48072) *
                    C48377) *
                   C48408) *
                  C111) *
             C48090 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48293 * C122) * C302 +
                 (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
                 C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
                    C5040 +
                (C346 + C347 - C389 - C390 + C391 + C392) * C48377) *
                   C5042 +
               ((C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
                 (C113 * C1272 + C48293 * C1278) * C304 +
                 (C113 * C1279 + C48293 * C1290) * C48390) *
                    C5040 +
                (C5207 + C5208 - C5209 - C5210 + C5211 + C5212) * C48377) *
                   C48408) *
                  C299 +
              (((C389 - (C347 + C346) + C390 - C391 - C392) * C5040 +
                (C393 - (C357 + C356) + C394 - C395 - C396) * C48377) *
                   C5042 +
               ((C5209 - (C5208 + C5207) + C5210 - C5211 - C5212) * C5040 +
                (C5213 - (C5214 + C5215) + C5216 - C5217 - C5218) * C48377) *
                   C48408) *
                  C300 +
              ((C404 * C5040 +
                (C369 + C368 - C397 - C398 + C399 + C400) * C48377) *
                   C5042 +
               ((C5215 + C5214 - C5213 - C5216 + C5217 + C5218) * C5040 +
                (C385 * C302 + C386 * C48429 - C387 * C303 - C388 * C48417 +
                 (C113 * C1550 + C48293 * C1551) * C304 +
                 (C113 * C1552 + C48293 * C1553) * C48390) *
                    C48377) *
                   C48408) *
                  C48384) *
             C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C5040 +
             (C174 + C175) * C48377) *
                C5042 +
            ((C5219 * C114 + C5220 * C48072) * C5040 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C299 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C5040) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C5040) * C5042) *
               C300 +
           ((C184 * C5040 + (C179 + C178) * C48377) * C5042 +
            ((C5048 + C5047) * C5040 + (C5049 + C5050) * C48377) * C48408) *
               C48384) *
              C48430 +
          ((((C594 + C595) * C5040 + (C596 + C597) * C48377) * C5042 +
            ((C5369 + C5370) * C5040 + (C5371 + C5372) * C48377) * C48408) *
               C300 -
           (((C5370 + C5369) * C48377 +
             ((C113 * C1010 + C48293 * C1019) * C48072 +
              (C113 * C1004 + C48293 * C1009) * C114) *
                 C5040) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C5040) *
                C5042) *
               C299 -
           (((C1049 * C48072 + C1048 * C114) * C48377 +
             (C5372 + C5371) * C5040) *
                C48408 +
            ((C599 + C598) * C48377 + C606 * C5040) * C5042) *
               C48384) *
              C48419 +
          (((((C113 * C522 + C48293 * C537) * C114 +
              (C113 * C538 + C48293 * C552) * C48072) *
                 C5040 +
             (C600 + C601) * C48377) *
                C5042 +
            (((C113 * C1409 + C48293 * C1421) * C114 +
              (C113 * C1422 + C48293 * C1436) * C48072) *
                 C5040 +
             (C5373 + C5374) * C48377) *
                C48408) *
               C299 -
           (((C5375 + C5376) * C48377 + (C5374 + C5373) * C5040) * C48408 +
            ((C603 + C602) * C48377 + (C601 + C600) * C5040) * C5042) *
               C300 +
           ((C607 * C5040 + (C605 + C604) * C48377) * C5042 +
            ((C5376 + C5375) * C5040 +
             ((C113 * C2326 + C48293 * C2327) * C114 +
              (C113 * C2328 + C48293 * C2329) * C48072) *
                 C48377) *
                C48408) *
               C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1173 +
             (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
             C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
                C5040 +
            (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C48377) *
               C5042 +
           ((C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
             (C113 * C1272 + C48293 * C1278) * C1175 +
             (C113 * C1279 + C48293 * C1290) * C48390) *
                C5040 +
            (C6005 + C6006 - C6007 - C6008 + C6009 + C6010) * C48377) *
               C48408) *
              C48426 +
          (((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C5040 +
            (C1185 - (C1184 + C1183) + C1186 - C1187 - C1188) * C48377) *
               C5042 +
           ((C6007 - (C6006 + C6005) + C6008 - C6009 - C6010) * C5040 +
            (C6011 - (C6012 + C6013) + C6014 - C6015 - C6016) * C48377) *
               C48408) *
              C48413 +
          ((C1199 * C5040 +
            (C1191 + C1190 - C1189 - C1192 + C1193 + C1194) * C48377) *
               C5042 +
           ((C6013 + C6012 - C6011 - C6014 + C6015 + C6016) * C5040 +
            (C385 * C1173 + C386 * C1167 - C387 * C1174 - C388 * C1168 +
             (C113 * C1550 + C48293 * C1551) * C1175 +
             (C113 * C1552 + C48293 * C1553) * C48390) *
                C48377) *
               C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1267 +
            (C113 * C123 + C48293 * C136) * C1261 - C5219 * C1268 -
            C5220 * C1262 + C5221 * C1269 + C5222 * C1263 - C6119 * C1270 -
            C6120 * C1264 + C6121 * C1271 + C6122 * C1265) *
               C5040 +
           (C164 * C1267 + C165 * C1261 - C376 * C1268 - C377 * C1262 +
            C378 * C1269 + C379 * C1263 - C1575 * C1270 - C1576 * C1264 +
            C6123 * C1271 + C6124 * C1265) *
               C48377) *
              C5042 +
          ((C5219 * C1267 + C5220 * C1261 - C5221 * C1268 - C5222 * C1262 +
            C6119 * C1269 + C6120 * C1263 - C6121 * C1270 - C6122 * C1264 +
            (C113 * C6098 + C48293 * C6100) * C1271 +
            (C113 * C6101 + C48293 * C6104) * C1265) *
               C5040 +
           (C376 * C1267 + C377 * C1261 - C378 * C1268 - C379 * C1262 +
            C1575 * C1269 + C1576 * C1263 - C6123 * C1270 - C6124 * C1264 +
            (C113 * C6099 + C48293 * C6102) * C1271 +
            (C113 * C6103 + C48293 * C6105) * C1265) *
               C48377) *
              C48408) *
         C48044 * C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1173 +
             (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
             C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
                C5040 +
            (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C48377) *
               C5042 +
           ((C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
             C6119 * C1175 + C6120 * C48390) *
                C5040 +
            (C6005 + C6006 - C6007 - C6008 + C6009 + C6010) * C48377) *
               C48408) *
              C48044 * C48430 +
          (((C5857 * C1174 -
             ((C113 * C533 + C48293 * C550) * C1167 +
              (C113 * C520 + C48293 * C534) * C1173) +
             C5858 * C1168 - C6295 * C1175 - C6296 * C48390) *
                C5040 +
            (C1733 - (C1734 + C1735) + C1736 - C1753 - C1754) * C48377) *
               C5042 +
           ((C6295 * C1174 - (C5858 * C1167 + C5857 * C1173) + C6296 * C1168 -
             (C113 * C1854 + C48293 * C1857) * C1175 -
             (C113 * C1858 + C48293 * C1863) * C48390) *
                C5040 +
            (C1749 * C1174 - (C1044 * C1167 + C1043 * C1173) + C1750 * C1168 -
             (C113 * C1855 + C48293 * C1859) * C1175 -
             (C113 * C1860 + C48293 * C1864) * C48390) *
                C48377) *
               C48408) *
              C48044 * C48419 +
          ((((C113 * C522 + C48293 * C537) * C1173 +
             (C113 * C538 + C48293 * C552) * C1167 - C6297 * C1174 -
             C6298 * C1168 + C6299 * C1175 + C6300 * C48390) *
                C5040 +
            (C588 * C1173 + C589 * C1167 - C2343 * C1174 - C2344 * C1168 +
             C6301 * C1175 + C6302 * C48390) *
                C48377) *
               C5042 +
           ((C6297 * C1173 + C6298 * C1167 - C6299 * C1174 - C6300 * C1168 +
             (C113 * C6270 + C48293 * C6272) * C1175 +
             (C113 * C6273 + C48293 * C6276) * C48390) *
                C5040 +
            (C2343 * C1173 + C2344 * C1167 - C6301 * C1174 - C6302 * C1168 +
             (C113 * C6271 + C48293 * C6274) * C1175 +
             (C113 * C6275 + C48293 * C6277) * C48390) *
                C48377) *
               C48408) *
              C48044 * C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C5040 +
             (C174 + C175) * C48377) *
                C5042 +
            ((C5219 * C114 + C5220 * C48072) * C5040 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C48426 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C5040) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C5040) * C5042) *
               C48413 +
           ((C184 * C5040 + (C179 + C178) * C48377) * C5042 +
            ((C5048 + C5047) * C5040 + (C5049 + C5050) * C48377) * C48408) *
               C48384) *
              C1976 +
          ((((C594 + C595) * C5040 + (C596 + C597) * C48377) * C5042 +
            ((C5369 + C5370) * C5040 + (C5371 + C5372) * C48377) * C48408) *
               C48413 -
           (((C5370 + C5369) * C48377 +
             (C5858 * C48072 + C5857 * C114) * C5040) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C5040) *
                C5042) *
               C48426 -
           (((C5649 + C5650) * C48377 + (C5372 + C5371) * C5040) * C48408 +
            ((C599 + C598) * C48377 + C606 * C5040) * C5042) *
               C48384) *
              C1977 +
          (((((C113 * C522 + C48293 * C537) * C114 +
              (C113 * C538 + C48293 * C552) * C48072) *
                 C5040 +
             (C600 + C601) * C48377) *
                C5042 +
            ((C6297 * C114 + C6298 * C48072) * C5040 +
             (C5373 + C5374) * C48377) *
                C48408) *
               C48426 -
           (((C5375 + C5376) * C48377 + (C5374 + C5373) * C5040) * C48408 +
            ((C603 + C602) * C48377 + (C601 + C600) * C5040) * C5042) *
               C48413 +
           ((C607 * C5040 + (C605 + C604) * C48377) * C5042 +
            ((C5376 + C5375) * C5040 +
             ((C113 * C2326 + C48293 * C2327) * C114 +
              (C113 * C2328 + C48293 * C2329) * C48072) *
                 C48377) *
                C48408) *
               C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C302 +
             (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
             C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
                C5040 +
            (C346 + C347 - C389 - C390 + C391 + C392) * C48377) *
               C5042 +
           ((C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
             C6119 * C304 + C6120 * C48390) *
                C5040 +
            (C5207 + C5208 - C5209 - C5210 + C5211 + C5212) * C48377) *
               C48408) *
              C48044 * C1976 +
          (((C5857 * C303 -
             ((C113 * C533 + C48293 * C550) * C48429 +
              (C113 * C520 + C48293 * C534) * C302) +
             C5858 * C48417 - C6295 * C304 - C6296 * C48390) *
                C5040 +
            (C3696 - (C3697 + C3698) + C3699 - C3700 - C3701) * C48377) *
               C5042 +
           ((C6295 * C303 - (C5858 * C48429 + C5857 * C302) + C6296 * C48417 -
             C6789 * C304 - C6790 * C48390) *
                C5040 +
            (C1749 * C303 - (C1044 * C48429 + C1043 * C302) + C1750 * C48417 -
             C6643 * C304 - C6644 * C48390) *
                C48377) *
               C48408) *
              C48044 * C1977 +
          ((((C113 * C522 + C48293 * C537) * C302 +
             (C113 * C538 + C48293 * C552) * C48429 - C6297 * C303 -
             C6298 * C48417 + C6299 * C304 + C6300 * C48390) *
                C5040 +
            (C588 * C302 + C589 * C48429 - C2343 * C303 - C2344 * C48417 +
             C6301 * C304 + C6302 * C48390) *
                C48377) *
               C5042 +
           ((C6297 * C302 + C6298 * C48429 - C6299 * C303 - C6300 * C48417 +
             (C113 * C6270 + C48293 * C6272) * C304 +
             (C113 * C6273 + C48293 * C6276) * C48390) *
                C5040 +
            (C2343 * C302 + C2344 * C48429 - C6301 * C303 - C6302 * C48417 +
             (C113 * C6271 + C48293 * C6274) * C304 +
             (C113 * C6275 + C48293 * C6277) * C48390) *
                C48377) *
               C48408) *
              C48044 * C48393)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C5040 +
            (C174 + C175) * C48377) *
               C5042 +
           ((C5219 * C114 + C5220 * C48072) * C5040 +
            (C5045 + C5046) * C48377) *
               C48408) *
              C48044 * C2151 -
          (((C5370 + C5369) * C48377 +
            (C5858 * C48072 + C5857 * C114) * C5040) *
               C48408 +
           ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                      (C113 * C520 + C48293 * C534) * C114) *
                                         C5040) *
               C5042) *
              C48044 * C2152 +
          ((((C113 * C522 + C48293 * C537) * C114 +
             (C113 * C538 + C48293 * C552) * C48072) *
                C5040 +
            (C600 + C601) * C48377) *
               C5042 +
           ((C6297 * C114 + C6298 * C48072) * C5040 +
            (C5373 + C5374) * C48377) *
               C48408) *
              C48044 * C2153 -
          ((((C113 * C2576 + C48293 * C2580) * C48072 +
             (C113 * C2571 + C48293 * C2575) * C114) *
                C48377 +
            ((C113 * C2574 + C48293 * C2579) * C48072 +
             (C113 * C2570 + C48293 * C2573) * C114) *
                C5040) *
               C48408 +
           ((C2470 + C2469) * C48377 +
            ((C113 * C2166 + C48293 * C2176) * C48072 +
             (C113 * C2158 + C48293 * C2167) * C114) *
                C5040) *
               C5042) *
              C48044 * C2154 +
          ((((C113 * C2159 + C48293 * C2168) * C114 +
             (C113 * C2169 + C48293 * C2177) * C48072) *
                C5040 +
            ((C113 * C2160 + C48293 * C2170) * C114 +
             (C113 * C2171 + C48293 * C2178) * C48072) *
                C48377) *
               C5042 +
           (((C113 * C7164 + C48293 * C7166) * C114 +
             (C113 * C7167 + C48293 * C7170) * C48072) *
                C5040 +
            ((C113 * C7165 + C48293 * C7168) * C114 +
             (C113 * C7169 + C48293 * C7171) * C48072) *
                C48377) *
               C48408) *
              C48044 * C2155)) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C1173 +
              (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
              C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
                 C5040 +
             (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C48377) *
                C5042 +
            ((C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
              C6119 * C1175 + C6120 * C48390) *
                 C5040 +
             (C6005 + C6006 - C6007 - C6008 + C6009 + C6010) * C48377) *
                C48408) *
               C48344 +
           (((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C5040 +
             (C1185 - (C1184 + C1183) + C1186 - C1187 - C1188) * C48377) *
                C5042 +
            ((C6007 - (C6006 + C6005) + C6008 - C6009 - C6010) * C5040 +
             (C6011 - (C6012 + C6013) + C6014 - C6015 - C6016) * C48377) *
                C48408) *
               C48054) *
              C48359 +
          ((((C5857 * C1174 -
              ((C113 * C533 + C48293 * C550) * C1167 +
               (C113 * C520 + C48293 * C534) * C1173) +
              C5858 * C1168 - C6295 * C1175 - C6296 * C48390) *
                 C5040 +
             (C1733 - (C1734 + C1735) + C1736 - C1753 - C1754) * C48377) *
                C5042 +
            ((C6295 * C1174 - (C5858 * C1167 + C5857 * C1173) + C6296 * C1168 -
              (C113 * C1854 + C48293 * C1857) * C1175 -
              (C113 * C1858 + C48293 * C1863) * C48390) *
                 C5040 +
             (C6635 - (C6636 + C6637) + C6638 - C6645 - C6646) * C48377) *
                C48408) *
               C48344 +
           (((C1735 + C1734 - C1733 - C1736 + C1753 + C1754) * C5040 +
             (C1743 + C1742 - C1741 - C1744 + C1755 + C1756) * C48377) *
                C5042 +
            ((C6637 + C6636 - C6635 - C6638 + C6645 + C6646) * C5040 +
             (C1045 * C1173 + C1047 * C1167 - C1751 * C1174 - C1752 * C1168 +
              (C113 * C1856 + C48293 * C1861) * C1175 +
              (C113 * C1862 + C48293 * C1865) * C48390) *
                 C48377) *
                C48408) *
               C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C5040 +
             (C174 + C175) * C48377) *
                C5042 +
            ((C5219 * C114 + C5220 * C48072) * C5040 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C707 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C5040) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C5040) * C5042) *
               C708 +
           ((C184 * C5040 + (C179 + C178) * C48377) * C5042 +
            ((C5048 + C5047) * C5040 + (C5049 + C5050) * C48377) * C48408) *
               C709 -
           (((C5051 + C5052) * C48377 + (C5050 + C5049) * C5040) * C48408 +
            ((C181 + C180) * C48377 + C185 * C5040) * C5042) *
               C48394) *
              C48359 +
          ((((C594 + C595) * C5040 + (C596 + C597) * C48377) * C5042 +
            ((C5369 + C5370) * C5040 + (C5371 + C5372) * C48377) * C48408) *
               C708 -
           (((C5370 + C5369) * C48377 +
             ((C113 * C1010 + C48293 * C1019) * C48072 +
              (C113 * C1004 + C48293 * C1009) * C114) *
                 C5040) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C5040) *
                C5042) *
               C707 -
           (((C5649 + C5650) * C48377 + (C5372 + C5371) * C5040) * C48408 +
            ((C599 + C598) * C48377 + C606 * C5040) * C5042) *
               C709 +
           ((C850 * C5040 + (C858 + C857) * C48377) * C5042 +
            ((C5650 + C5649) * C5040 +
             ((C113 * C1008 + C48293 * C1017) * C114 +
              (C113 * C1018 + C48293 * C1023) * C48072) *
                 C48377) *
                C48408) *
               C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C5040 +
             (C174 + C175) * C48377) *
                C5042 +
            ((C5219 * C114 + C5220 * C48072) * C5040 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C48344 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C5040) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C5040) * C5042) *
               C48054) *
              C2448 +
          ((((C594 + C595) * C5040 + (C596 + C597) * C48377) * C5042 +
            ((C5369 + C5370) * C5040 + (C5371 + C5372) * C48377) * C48408) *
               C48054 -
           (((C5370 + C5369) * C48377 +
             (C5858 * C48072 + C5857 * C114) * C5040) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C5040) *
                C5042) *
               C48344) *
              C2449 +
          (((((C113 * C522 + C48293 * C537) * C114 +
              (C113 * C538 + C48293 * C552) * C48072) *
                 C5040 +
             (C600 + C601) * C48377) *
                C5042 +
            ((C6297 * C114 + C6298 * C48072) * C5040 +
             (C5373 + C5374) * C48377) *
                C48408) *
               C48344 -
           (((C5375 + C5376) * C48377 + (C5374 + C5373) * C5040) * C48408 +
            ((C603 + C602) * C48377 + (C601 + C600) * C5040) * C5042) *
               C48054) *
              C2450 +
          ((((C2469 + C2470) * C5040 + (C2471 + C2472) * C48377) * C5042 +
            ((C7507 + C7508) * C5040 +
             ((C113 * C2572 + C48293 * C2577) * C114 +
              (C113 * C2578 + C48293 * C2581) * C48072) *
                 C48377) *
                C48408) *
               C48054 -
           (((C7508 + C7507) * C48377 +
             ((C113 * C2574 + C48293 * C2579) * C48072 +
              (C113 * C2570 + C48293 * C2573) * C114) *
                 C5040) *
                C48408 +
            ((C2470 + C2469) * C48377 +
             ((C113 * C2166 + C48293 * C2176) * C48072 +
              (C113 * C2158 + C48293 * C2167) * C114) *
                 C5040) *
                C5042) *
               C48344) *
              C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C302 +
             (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
             C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
                C5040 +
            (C346 + C347 - C389 - C390 + C391 + C392) * C48377) *
               C5042 +
           ((C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
             (C113 * C1272 + C48293 * C1278) * C304 +
             (C113 * C1279 + C48293 * C1290) * C48390) *
                C5040 +
            (C5207 + C5208 - C5209 - C5210 + C5211 + C5212) * C48377) *
               C48408) *
              C299 +
          (((C389 - (C347 + C346) + C390 - C391 - C392) * C5040 +
            (C393 - (C357 + C356) + C394 - C395 - C396) * C48377) *
               C5042 +
           ((C5209 - (C5208 + C5207) + C5210 - C5211 - C5212) * C5040 +
            (C5213 - (C5214 + C5215) + C5216 - C5217 - C5218) * C48377) *
               C48408) *
              C300 +
          ((C404 * C5040 + (C369 + C368 - C397 - C398 + C399 + C400) * C48377) *
               C5042 +
           ((C5215 + C5214 - C5213 - C5216 + C5217 + C5218) * C5040 +
            (C385 * C302 + C386 * C48429 - C387 * C303 - C388 * C48417 +
             (C113 * C1550 + C48293 * C1551) * C304 +
             (C113 * C1552 + C48293 * C1553) * C48390) *
                C48377) *
               C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C5040 +
            (C174 + C175) * C48377) *
               C5042 +
           (((C113 * C305 + C48293 * C315) * C114 +
             (C113 * C316 + C48293 * C335) * C48072) *
                C5040 +
            (C5045 + C5046) * C48377) *
               C48408) *
              C107 -
          (((C5047 + C5048) * C48377 + (C5046 + C5045) * C5040) * C48408 +
           ((C177 + C176) * C48377 + (C175 + C174) * C5040) * C5042) *
              C108 +
          ((C184 * C5040 + (C179 + C178) * C48377) * C5042 +
           ((C5048 + C5047) * C5040 + (C5049 + C5050) * C48377) * C48408) *
              C109 -
          (((C5051 + C5052) * C48377 + (C5050 + C5049) * C5040) * C48408 +
           ((C181 + C180) * C48377 + C185 * C5040) * C5042) *
              C110 +
          ((C186 * C5040 + (C183 + C182) * C48377) * C5042 +
           ((C5052 + C5051) * C5040 + ((C113 * C713 + C48293 * C714) * C114 +
                                       (C113 * C715 + C48293 * C716) * C48072) *
                                          C48377) *
               C48408) *
              C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1173 +
             (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
             C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
                C5040 +
            (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C48377) *
               C5042 +
           ((C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
             (C113 * C1272 + C48293 * C1278) * C1175 +
             (C113 * C1279 + C48293 * C1290) * C48390) *
                C5040 +
            (C6005 + C6006 - C6007 - C6008 + C6009 + C6010) * C48377) *
               C48408) *
              C48426 +
          (((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C5040 +
            (C1185 - (C1184 + C1183) + C1186 - C1187 - C1188) * C48377) *
               C5042 +
           ((C6007 - (C6006 + C6005) + C6008 - C6009 - C6010) * C5040 +
            (C6011 - (C6012 + C6013) + C6014 - C6015 - C6016) * C48377) *
               C48408) *
              C48413 +
          ((C1199 * C5040 +
            (C1191 + C1190 - C1189 - C1192 + C1193 + C1194) * C48377) *
               C5042 +
           ((C6013 + C6012 - C6011 - C6014 + C6015 + C6016) * C5040 +
            (C385 * C1173 + C386 * C1167 - C387 * C1174 - C388 * C1168 +
             (C113 * C1550 + C48293 * C1551) * C1175 +
             (C113 * C1552 + C48293 * C1553) * C48390) *
                C48377) *
               C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1267 +
            (C113 * C123 + C48293 * C136) * C1261 - C5219 * C1268 -
            C5220 * C1262 + C5221 * C1269 + C5222 * C1263 - C6119 * C1270 -
            C6120 * C1264 + C6121 * C1271 + C6122 * C1265) *
               C5040 +
           (C164 * C1267 + C165 * C1261 - C376 * C1268 - C377 * C1262 +
            C378 * C1269 + C379 * C1263 - C1575 * C1270 - C1576 * C1264 +
            C6123 * C1271 + C6124 * C1265) *
               C48377) *
              C5042 +
          ((C5219 * C1267 + C5220 * C1261 - C5221 * C1268 - C5222 * C1262 +
            C6119 * C1269 + C6120 * C1263 - C6121 * C1270 - C6122 * C1264 +
            (C113 * C6098 + C48293 * C6100) * C1271 +
            (C113 * C6101 + C48293 * C6104) * C1265) *
               C5040 +
           (C376 * C1267 + C377 * C1261 - C378 * C1268 - C379 * C1262 +
            C1575 * C1269 + C1576 * C1263 - C6123 * C1270 - C6124 * C1264 +
            (C113 * C6099 + C48293 * C6102) * C1271 +
            (C113 * C6103 + C48293 * C6105) * C1265) *
               C48377) *
              C48408) *
         C48044 * C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C5040 +
             (C174 + C175) * C48377) *
                C5042 +
            ((C5219 * C114 + C5220 * C48072) * C5040 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C48426 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C5040) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C5040) * C5042) *
               C48413 +
           ((C184 * C5040 + (C179 + C178) * C48377) * C5042 +
            ((C5048 + C5047) * C5040 + (C5049 + C5050) * C48377) * C48408) *
               C48384) *
              C1976 +
          ((((C594 + C595) * C5040 + (C596 + C597) * C48377) * C5042 +
            ((C5369 + C5370) * C5040 + (C5371 + C5372) * C48377) * C48408) *
               C48413 -
           (((C5370 + C5369) * C48377 +
             (C5858 * C48072 + C5857 * C114) * C5040) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C5040) *
                C5042) *
               C48426 -
           (((C5649 + C5650) * C48377 + (C5372 + C5371) * C5040) * C48408 +
            ((C599 + C598) * C48377 + C606 * C5040) * C5042) *
               C48384) *
              C1977 +
          (((((C113 * C522 + C48293 * C537) * C114 +
              (C113 * C538 + C48293 * C552) * C48072) *
                 C5040 +
             (C600 + C601) * C48377) *
                C5042 +
            ((C6297 * C114 + C6298 * C48072) * C5040 +
             (C5373 + C5374) * C48377) *
                C48408) *
               C48426 -
           (((C5375 + C5376) * C48377 + (C5374 + C5373) * C5040) * C48408 +
            ((C603 + C602) * C48377 + (C601 + C600) * C5040) * C5042) *
               C48413 +
           ((C607 * C5040 + (C605 + C604) * C48377) * C5042 +
            ((C5376 + C5375) * C5040 +
             ((C113 * C2326 + C48293 * C2327) * C114 +
              (C113 * C2328 + C48293 * C2329) * C48072) *
                 C48377) *
                C48408) *
               C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C302 +
             (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
             C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
                C5040 +
            (C346 + C347 - C389 - C390 + C391 + C392) * C48377) *
               C5042 +
           ((C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
             C6119 * C304 + C6120 * C48390) *
                C5040 +
            (C5207 + C5208 - C5209 - C5210 + C5211 + C5212) * C48377) *
               C48408) *
              C48044 * C1976 +
          (((C5857 * C303 -
             ((C113 * C533 + C48293 * C550) * C48429 +
              (C113 * C520 + C48293 * C534) * C302) +
             C5858 * C48417 - C6295 * C304 - C6296 * C48390) *
                C5040 +
            (C3696 - (C3697 + C3698) + C3699 - C3700 - C3701) * C48377) *
               C5042 +
           ((C6295 * C303 - (C5858 * C48429 + C5857 * C302) + C6296 * C48417 -
             C6789 * C304 - C6790 * C48390) *
                C5040 +
            (C1749 * C303 - (C1044 * C48429 + C1043 * C302) + C1750 * C48417 -
             C6643 * C304 - C6644 * C48390) *
                C48377) *
               C48408) *
              C48044 * C1977 +
          ((((C113 * C522 + C48293 * C537) * C302 +
             (C113 * C538 + C48293 * C552) * C48429 - C6297 * C303 -
             C6298 * C48417 + C6299 * C304 + C6300 * C48390) *
                C5040 +
            (C588 * C302 + C589 * C48429 - C2343 * C303 - C2344 * C48417 +
             C6301 * C304 + C6302 * C48390) *
                C48377) *
               C5042 +
           ((C6297 * C302 + C6298 * C48429 - C6299 * C303 - C6300 * C48417 +
             (C113 * C6270 + C48293 * C6272) * C304 +
             (C113 * C6273 + C48293 * C6276) * C48390) *
                C5040 +
            (C2343 * C302 + C2344 * C48429 - C6301 * C303 - C6302 * C48417 +
             (C113 * C6271 + C48293 * C6274) * C304 +
             (C113 * C6275 + C48293 * C6277) * C48390) *
                C48377) *
               C48408) *
              C48044 * C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C711 +
              (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
              C5220 * C48135) *
                 C5040 +
             (C718 + C719 - C720 - C721) * C48377) *
                C5042 +
            ((C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                 C5040 +
             (C5507 + C5508 - C5509 - C5510) * C48377) *
                C48408) *
               C48049 +
           (((C720 - (C719 + C718) + C721) * C5040 +
             (C724 - (C723 + C722) + C725) * C48377) *
                C5042 +
            ((C5509 - (C5508 + C5507) + C5510) * C5040 +
             (C5511 - (C5512 + C5513) + C5514) * C48377) *
                C48408) *
               C48057 +
           ((C744 * C5040 + (C728 + C727 - C726 - C729) * C48377) * C5042 +
            ((C5513 + C5512 - C5511 - C5514) * C5040 +
             (C5515 + C5516 - C5517 - C5518) * C48377) *
                C48408) *
               C3111) *
              C3547 +
          ((((C5857 * C712 -
              ((C113 * C533 + C48293 * C550) * C48358 +
               (C113 * C520 + C48293 * C534) * C711) +
              C5858 * C48135) *
                 C5040 +
             (C1050 - (C1027 + C1028) + C1051) * C48377) *
                C5042 +
            ((C6295 * C712 - (C5858 * C48358 + C5857 * C711) + C6296 * C48135) *
                 C5040 +
             (C5849 - (C5850 + C5851) + C5852) * C48377) *
                C48408) *
               C48049 +
           (((C1028 + C1027 - C1050 - C1051) * C5040 +
             (C1034 + C1033 - C1052 - C1053) * C48377) *
                C5042 +
            ((C5851 + C5850 - C5849 - C5852) * C5040 +
             (C5853 + C5854 - C5855 - C5856) * C48377) *
                C48408) *
               C48057 +
           ((C1057 * C5040 + (C1054 - (C1038 + C1037) + C1055) * C48377) *
                C5042 +
            ((C5855 - (C5854 + C5853) + C5856) * C5040 +
             ((C113 * C1728 + C48293 * C1729) * C712 -
              (C1049 * C48358 + C1048 * C711) +
              (C113 * C1730 + C48293 * C1731) * C48135) *
                 C48377) *
                C48408) *
               C3111) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C711 +
              (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
              C5220 * C48135) *
                 C5040 +
             (C718 + C719 - C720 - C721) * C48377) *
                C5042 +
            ((C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                 C5040 +
             (C5507 + C5508 - C5509 - C5510) * C48377) *
                C48408) *
               C2812 +
           (((C720 - (C719 + C718) + C721) * C5040 +
             (C724 - (C723 + C722) + C725) * C48377) *
                C5042 +
            ((C5509 - (C5508 + C5507) + C5510) * C5040 +
             (C5511 - (C5512 + C5513) + C5514) * C48377) *
                C48408) *
               C48054) *
              C48173 +
          ((((C5857 * C712 -
              ((C113 * C533 + C48293 * C550) * C48358 +
               (C113 * C520 + C48293 * C534) * C711) +
              C5858 * C48135) *
                 C5040 +
             (C1050 - (C1027 + C1028) + C1051) * C48377) *
                C5042 +
            ((C6295 * C712 - (C5858 * C48358 + C5857 * C711) + C6296 * C48135) *
                 C5040 +
             (C5849 - (C5850 + C5851) + C5852) * C48377) *
                C48408) *
               C2812 +
           (((C1028 + C1027 - C1050 - C1051) * C5040 +
             (C1034 + C1033 - C1052 - C1053) * C48377) *
                C5042 +
            ((C5851 + C5850 - C5849 - C5852) * C5040 +
             (C5853 + C5854 - C5855 - C5856) * C48377) *
                C48408) *
               C48054) *
              C48180 +
          (((((C113 * C522 + C48293 * C537) * C711 +
              (C113 * C538 + C48293 * C552) * C48358 - C6297 * C712 -
              C6298 * C48135) *
                 C5040 +
             (C2331 + C2332 - C2347 - C2348) * C48377) *
                C5042 +
            ((C6297 * C711 + C6298 * C48358 - C6299 * C712 - C6300 * C48135) *
                 C5040 +
             (C7367 + C7368 - C7369 - C7370) * C48377) *
                C48408) *
               C2812 +
           (((C2347 - (C2332 + C2331) + C2348) * C5040 +
             (C2349 - (C2338 + C2337) + C2350) * C48377) *
                C5042 +
            ((C7369 - (C7368 + C7367) + C7370) * C5040 +
             ((C113 * C1414 + C48293 * C1431) * C712 -
              (C2346 * C48358 + C2345 * C711) +
              (C113 * C1432 + C48293 * C1441) * C48135) *
                 C48377) *
                C48408) *
               C48054) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C302 +
              (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
              C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
                 C5040 +
             (C346 + C347 - C389 - C390 + C391 + C392) * C48377) *
                C5042 +
            ((C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
              C6119 * C304 + C6120 * C48390) *
                 C5040 +
             (C5207 + C5208 - C5209 - C5210 + C5211 + C5212) * C48377) *
                C48408) *
               C2812 +
           (((C389 - (C347 + C346) + C390 - C391 - C392) * C5040 +
             (C393 - (C357 + C356) + C394 - C395 - C396) * C48377) *
                C5042 +
            ((C5209 - (C5208 + C5207) + C5210 - C5211 - C5212) * C5040 +
             (C5213 - (C5214 + C5215) + C5216 - C5217 - C5218) * C48377) *
                C48408) *
               C48054) *
              C3547 +
          ((((C5857 * C303 -
              ((C113 * C533 + C48293 * C550) * C48429 +
               (C113 * C520 + C48293 * C534) * C302) +
              C5858 * C48417 - C6295 * C304 - C6296 * C48390) *
                 C5040 +
             (C3696 - (C3697 + C3698) + C3699 - C3700 - C3701) * C48377) *
                C5042 +
            ((C6295 * C303 - (C5858 * C48429 + C5857 * C302) + C6296 * C48417 -
              C6789 * C304 - C6790 * C48390) *
                 C5040 +
             (C9015 - (C9016 + C9017) + C9018 - C9019 - C9020) * C48377) *
                C48408) *
               C2812 +
           (((C3698 + C3697 - C3696 - C3699 + C3700 + C3701) * C5040 +
             (C3704 + C3703 - C3702 - C3705 + C3706 + C3707) * C48377) *
                C5042 +
            ((C9017 + C9016 - C9015 - C9018 + C9019 + C9020) * C5040 +
             (C1045 * C302 + C1047 * C48429 - C1751 * C303 - C1752 * C48417 +
              (C113 * C1856 + C48293 * C1861) * C304 +
              (C113 * C1862 + C48293 * C1865) * C48390) *
                 C48377) *
                C48408) *
               C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C5040 +
             (C174 + C175) * C48377) *
                C5042 +
            ((C5219 * C114 + C5220 * C48072) * C5040 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C48435 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C5040) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C5040) * C5042) *
               C48428 +
           ((C184 * C5040 + (C179 + C178) * C48377) * C5042 +
            ((C5048 + C5047) * C5040 + (C5049 + C5050) * C48377) * C48408) *
               C48415 -
           (((C5051 + C5052) * C48377 + (C5050 + C5049) * C5040) * C48408 +
            ((C181 + C180) * C48377 + C185 * C5040) * C5042) *
               C48394) *
              C3547 +
          ((((C594 + C595) * C5040 + (C596 + C597) * C48377) * C5042 +
            ((C5369 + C5370) * C5040 + (C5371 + C5372) * C48377) * C48408) *
               C48428 -
           (((C5370 + C5369) * C48377 +
             (C5858 * C48072 + C5857 * C114) * C5040) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C5040) *
                C5042) *
               C48435 -
           (((C5649 + C5650) * C48377 + (C5372 + C5371) * C5040) * C48408 +
            ((C599 + C598) * C48377 + C606 * C5040) * C5042) *
               C48415 +
           ((C850 * C5040 + (C858 + C857) * C48377) * C5042 +
            ((C5650 + C5649) * C5040 +
             ((C113 * C1008 + C48293 * C1017) * C114 +
              (C113 * C1018 + C48293 * C1023) * C48072) *
                 C48377) *
                C48408) *
               C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C5040 +
             (C174 + C175) * C48377) *
                C5042 +
            ((C5219 * C114 + C5220 * C48072) * C5040 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C2812 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C5040) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C5040) * C5042) *
               C48054) *
              C48437 +
          ((((C594 + C595) * C5040 + (C596 + C597) * C48377) * C5042 +
            ((C5369 + C5370) * C5040 + (C5371 + C5372) * C48377) * C48408) *
               C48054 -
           (((C5370 + C5369) * C48377 +
             (C5858 * C48072 + C5857 * C114) * C5040) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C5040) *
                C5042) *
               C2812) *
              C48434 +
          (((((C113 * C522 + C48293 * C537) * C114 +
              (C113 * C538 + C48293 * C552) * C48072) *
                 C5040 +
             (C600 + C601) * C48377) *
                C5042 +
            ((C6297 * C114 + C6298 * C48072) * C5040 +
             (C5373 + C5374) * C48377) *
                C48408) *
               C2812 -
           (((C5375 + C5376) * C48377 + (C5374 + C5373) * C5040) * C48408 +
            ((C603 + C602) * C48377 + (C601 + C600) * C5040) * C5042) *
               C48054) *
              C48425 +
          ((((C2469 + C2470) * C5040 + (C2471 + C2472) * C48377) * C5042 +
            ((C7507 + C7508) * C5040 +
             ((C113 * C2572 + C48293 * C2577) * C114 +
              (C113 * C2578 + C48293 * C2581) * C48072) *
                 C48377) *
                C48408) *
               C48054 -
           (((C7508 + C7507) * C48377 +
             (C7652 * C48072 + C7651 * C114) * C5040) *
                C48408 +
            ((C2470 + C2469) * C48377 +
             ((C113 * C2166 + C48293 * C2176) * C48072 +
              (C113 * C2158 + C48293 * C2167) * C114) *
                 C5040) *
                C5042) *
               C2812) *
              C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C5040 +
             (C174 + C175) * C48377) *
                C5042 +
            ((C5219 * C114 + C5220 * C48072) * C5040 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C48049 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C5040) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C5040) * C5042) *
               C48057 +
           ((C184 * C5040 + (C179 + C178) * C48377) * C5042 +
            ((C5048 + C5047) * C5040 + (C5049 + C5050) * C48377) * C48408) *
               C3111) *
              C48173 +
          ((((C594 + C595) * C5040 + (C596 + C597) * C48377) * C5042 +
            ((C5369 + C5370) * C5040 + (C5371 + C5372) * C48377) * C48408) *
               C48057 -
           (((C5370 + C5369) * C48377 +
             (C5858 * C48072 + C5857 * C114) * C5040) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C5040) *
                C5042) *
               C48049 -
           (((C5649 + C5650) * C48377 + (C5372 + C5371) * C5040) * C48408 +
            ((C599 + C598) * C48377 + C606 * C5040) * C5042) *
               C3111) *
              C48180 +
          (((((C113 * C522 + C48293 * C537) * C114 +
              (C113 * C538 + C48293 * C552) * C48072) *
                 C5040 +
             (C600 + C601) * C48377) *
                C5042 +
            ((C6297 * C114 + C6298 * C48072) * C5040 +
             (C5373 + C5374) * C48377) *
                C48408) *
               C48049 -
           (((C5375 + C5376) * C48377 + (C5374 + C5373) * C5040) * C48408 +
            ((C603 + C602) * C48377 + (C601 + C600) * C5040) * C5042) *
               C48057 +
           ((C607 * C5040 + (C605 + C604) * C48377) * C5042 +
            ((C5376 + C5375) * C5040 +
             ((C113 * C2326 + C48293 * C2327) * C114 +
              (C113 * C2328 + C48293 * C2329) * C48072) *
                 C48377) *
                C48408) *
               C3111) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C5040 +
             (C174 + C175) * C48377) *
                C5042 +
            ((C5219 * C114 + C5220 * C48072) * C5040 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C48435 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C5040) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C5040) * C5042) *
               C48428 +
           ((C184 * C5040 + (C179 + C178) * C48377) * C5042 +
            ((C5048 + C5047) * C5040 + (C5049 + C5050) * C48377) * C48408) *
               C48415 -
           (((C5051 + C5052) * C48377 + (C5050 + C5049) * C5040) * C48408 +
            ((C181 + C180) * C48377 + C185 * C5040) * C5042) *
               C48394) *
              C3547 +
          ((((C594 + C595) * C5040 + (C596 + C597) * C48377) * C5042 +
            ((C5369 + C5370) * C5040 + (C5371 + C5372) * C48377) * C48408) *
               C48428 -
           (((C5370 + C5369) * C48377 +
             (C5858 * C48072 + C5857 * C114) * C5040) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C5040) *
                C5042) *
               C48435 -
           (((C5649 + C5650) * C48377 + (C5372 + C5371) * C5040) * C48408 +
            ((C599 + C598) * C48377 + C606 * C5040) * C5042) *
               C48415 +
           ((C850 * C5040 + (C858 + C857) * C48377) * C5042 +
            ((C5650 + C5649) * C5040 +
             ((C113 * C1008 + C48293 * C1017) * C114 +
              (C113 * C1018 + C48293 * C1023) * C48072) *
                 C48377) *
                C48408) *
               C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C302 +
              (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
              C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
                 C5040 +
             (C346 + C347 - C389 - C390 + C391 + C392) * C48377) *
                C5042 +
            ((C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
              C6119 * C304 + C6120 * C48390) *
                 C5040 +
             (C5207 + C5208 - C5209 - C5210 + C5211 + C5212) * C48377) *
                C48408) *
               C2812 +
           (((C389 - (C347 + C346) + C390 - C391 - C392) * C5040 +
             (C393 - (C357 + C356) + C394 - C395 - C396) * C48377) *
                C5042 +
            ((C5209 - (C5208 + C5207) + C5210 - C5211 - C5212) * C5040 +
             (C5213 - (C5214 + C5215) + C5216 - C5217 - C5218) * C48377) *
                C48408) *
               C48054) *
              C3547 +
          ((((C5857 * C303 -
              ((C113 * C533 + C48293 * C550) * C48429 +
               (C113 * C520 + C48293 * C534) * C302) +
              C5858 * C48417 - C6295 * C304 - C6296 * C48390) *
                 C5040 +
             (C3696 - (C3697 + C3698) + C3699 - C3700 - C3701) * C48377) *
                C5042 +
            ((C6295 * C303 - (C5858 * C48429 + C5857 * C302) + C6296 * C48417 -
              C6789 * C304 - C6790 * C48390) *
                 C5040 +
             (C9015 - (C9016 + C9017) + C9018 - C9019 - C9020) * C48377) *
                C48408) *
               C2812 +
           (((C3698 + C3697 - C3696 - C3699 + C3700 + C3701) * C5040 +
             (C3704 + C3703 - C3702 - C3705 + C3706 + C3707) * C48377) *
                C5042 +
            ((C9017 + C9016 - C9015 - C9018 + C9019 + C9020) * C5040 +
             (C1045 * C302 + C1047 * C48429 - C1751 * C303 - C1752 * C48417 +
              (C113 * C1856 + C48293 * C1861) * C304 +
              (C113 * C1862 + C48293 * C1865) * C48390) *
                 C48377) *
                C48408) *
               C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C711 +
             (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
             C5220 * C48135) *
                C5040 +
            (C718 + C719 - C720 - C721) * C48377) *
               C5042 +
           ((C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                C5040 +
            (C5507 + C5508 - C5509 - C5510) * C48377) *
               C48408) *
              C707 +
          (((C720 - (C719 + C718) + C721) * C5040 +
            (C724 - (C723 + C722) + C725) * C48377) *
               C5042 +
           ((C5509 - (C5508 + C5507) + C5510) * C5040 +
            (C5511 - (C5512 + C5513) + C5514) * C48377) *
               C48408) *
              C708 +
          ((C744 * C5040 + (C728 + C727 - C726 - C729) * C48377) * C5042 +
           ((C5513 + C5512 - C5511 - C5514) * C5040 +
            (C5515 + C5516 - C5517 - C5518) * C48377) *
               C48408) *
              C709 +
          ((C745 * C5040 + (C742 - (C731 + C730) + C743) * C48377) * C5042 +
           ((C5517 - (C5516 + C5515) + C5518) * C5040 +
            ((C113 * C314 + C48293 * C333) * C712 -
             (C739 * C48358 + C738 * C711) +
             (C113 * C334 + C48293 * C344) * C48135) *
                C48377) *
               C48408) *
              C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1546 +
             (C113 * C123 + C48293 * C136) * C1540 - C5219 * C1547 -
             C5220 * C1541 + C5221 * C1548 + C5222 * C1542 - C6119 * C1549 -
             C6120 * C48400) *
                C5040 +
            (C1555 + C1556 - C1557 - C1558 + C1559 + C1560 - C1579 - C1580) *
                C48377) *
               C5042 +
           ((C5219 * C1546 + C5220 * C1540 - C5221 * C1547 - C5222 * C1541 +
             C6119 * C1548 + C6120 * C1542 - C6121 * C1549 - C6122 * C48400) *
                C5040 +
            (C6433 + C6434 - C6435 - C6436 + C6437 + C6438 - C6439 - C6440) *
                C48377) *
               C48408) *
              C48344 +
          (((C1557 - (C1556 + C1555) + C1558 - C1559 - C1560 + C1579 + C1580) *
                C5040 +
            (C1567 - (C1566 + C1565) + C1568 - C1569 - C1570 + C1581 + C1582) *
                C48377) *
               C5042 +
           ((C6435 - (C6434 + C6433) + C6436 - C6437 - C6438 + C6439 + C6440) *
                C5040 +
            (C383 * C1547 - (C382 * C1540 + C381 * C1546) + C384 * C1541 -
             C1577 * C1548 - C1578 * C1542 +
             (C113 * C1277 + C48293 * C1288) * C1549 +
             (C113 * C1289 + C48293 * C1295) * C48400) *
                C48377) *
               C48408) *
              C48054) *
         C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C711 +
              (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
              C5220 * C48135) *
                 C5040 +
             (C718 + C719 - C720 - C721) * C48377) *
                C5042 +
            ((C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                 C5040 +
             (C5507 + C5508 - C5509 - C5510) * C48377) *
                C48408) *
               C299 +
           (((C720 - (C719 + C718) + C721) * C5040 +
             (C724 - (C723 + C722) + C725) * C48377) *
                C5042 +
            ((C5509 - (C5508 + C5507) + C5510) * C5040 +
             (C5511 - (C5512 + C5513) + C5514) * C48377) *
                C48408) *
               C300 +
           ((C744 * C5040 + (C728 + C727 - C726 - C729) * C48377) * C5042 +
            ((C5513 + C5512 - C5511 - C5514) * C5040 +
             (C5515 + C5516 - C5517 - C5518) * C48377) *
                C48408) *
               C48384) *
              C48359 +
          ((((C5857 * C712 -
              ((C113 * C533 + C48293 * C550) * C48358 +
               (C113 * C520 + C48293 * C534) * C711) +
              C5858 * C48135) *
                 C5040 +
             (C1050 - (C1027 + C1028) + C1051) * C48377) *
                C5042 +
            (((C113 * C1406 + C48293 * C1415) * C712 -
              (C5858 * C48358 + C5857 * C711) +
              (C113 * C1416 + C48293 * C1433) * C48135) *
                 C5040 +
             (C5849 - (C5850 + C5851) + C5852) * C48377) *
                C48408) *
               C299 +
           (((C1028 + C1027 - C1050 - C1051) * C5040 +
             (C1034 + C1033 - C1052 - C1053) * C48377) *
                C5042 +
            ((C5851 + C5850 - C5849 - C5852) * C5040 +
             (C5853 + C5854 - C5855 - C5856) * C48377) *
                C48408) *
               C300 +
           ((C1057 * C5040 + (C1054 - (C1038 + C1037) + C1055) * C48377) *
                C5042 +
            ((C5855 - (C5854 + C5853) + C5856) * C5040 +
             ((C113 * C1728 + C48293 * C1729) * C712 -
              (C1049 * C48358 + C1048 * C711) +
              (C113 * C1730 + C48293 * C1731) * C48135) *
                 C48377) *
                C48408) *
               C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1546 +
             (C113 * C123 + C48293 * C136) * C1540 - C5219 * C1547 -
             C5220 * C1541 + C5221 * C1548 + C5222 * C1542 - C6119 * C1549 -
             C6120 * C48400) *
                C5040 +
            (C1555 + C1556 - C1557 - C1558 + C1559 + C1560 - C1579 - C1580) *
                C48377) *
               C5042 +
           ((C5219 * C1546 + C5220 * C1540 - C5221 * C1547 - C5222 * C1541 +
             C6119 * C1548 + C6120 * C1542 - C6121 * C1549 - C6122 * C48400) *
                C5040 +
            (C6433 + C6434 - C6435 - C6436 + C6437 + C6438 - C6439 - C6440) *
                C48377) *
               C48408) *
              C48044 * C48359 +
          (((C5857 * C1547 -
             ((C113 * C533 + C48293 * C550) * C1540 +
              (C113 * C520 + C48293 * C534) * C1546) +
             C5858 * C1541 - C6295 * C1548 - C6296 * C1542 + C6789 * C1549 +
             C6790 * C48400) *
                C5040 +
            (C1043 * C1547 - (C583 * C1540 + C582 * C1546) + C1044 * C1541 -
             C1749 * C1548 - C1750 * C1542 + C6643 * C1549 + C6644 * C48400) *
                C48377) *
               C5042 +
           ((C6295 * C1547 - (C5858 * C1540 + C5857 * C1546) + C6296 * C1541 -
             C6789 * C1548 - C6790 * C1542 +
             (C113 * C6776 + C48293 * C6778) * C1549 +
             (C113 * C6779 + C48293 * C6782) * C48400) *
                C5040 +
            (C1749 * C1547 - (C1044 * C1540 + C1043 * C1546) + C1750 * C1541 -
             C6643 * C1548 - C6644 * C1542 +
             (C113 * C6777 + C48293 * C6780) * C1549 +
             (C113 * C6781 + C48293 * C6783) * C48400) *
                C48377) *
               C48408) *
              C48044 * C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C302 +
             (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
             C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
                C5040 +
            (C346 + C347 - C389 - C390 + C391 + C392) * C48377) *
               C5042 +
           ((C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
             (C113 * C1272 + C48293 * C1278) * C304 +
             (C113 * C1279 + C48293 * C1290) * C48390) *
                C5040 +
            (C5207 + C5208 - C5209 - C5210 + C5211 + C5212) * C48377) *
               C48408) *
              C299 +
          (((C389 - (C347 + C346) + C390 - C391 - C392) * C5040 +
            (C393 - (C357 + C356) + C394 - C395 - C396) * C48377) *
               C5042 +
           ((C5209 - (C5208 + C5207) + C5210 - C5211 - C5212) * C5040 +
            (C5213 - (C5214 + C5215) + C5216 - C5217 - C5218) * C48377) *
               C48408) *
              C300 +
          ((C404 * C5040 + (C369 + C368 - C397 - C398 + C399 + C400) * C48377) *
               C5042 +
           ((C5215 + C5214 - C5213 - C5216 + C5217 + C5218) * C5040 +
            (C385 * C302 + C386 * C48429 - C387 * C303 - C388 * C48417 +
             (C113 * C1550 + C48293 * C1551) * C304 +
             (C113 * C1552 + C48293 * C1553) * C48390) *
                C48377) *
               C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C5040 +
            (C174 + C175) * C48377) *
               C5042 +
           (((C113 * C305 + C48293 * C315) * C114 +
             (C113 * C316 + C48293 * C335) * C48072) *
                C5040 +
            (C5045 + C5046) * C48377) *
               C48408) *
              C107 -
          (((C5047 + C5048) * C48377 + (C5046 + C5045) * C5040) * C48408 +
           ((C177 + C176) * C48377 + (C175 + C174) * C5040) * C5042) *
              C108 +
          ((C184 * C5040 + (C179 + C178) * C48377) * C5042 +
           ((C5048 + C5047) * C5040 + (C5049 + C5050) * C48377) * C48408) *
              C109 -
          (((C5051 + C5052) * C48377 + (C5050 + C5049) * C5040) * C48408 +
           ((C181 + C180) * C48377 + C185 * C5040) * C5042) *
              C110 +
          ((C186 * C5040 + (C183 + C182) * C48377) * C5042 +
           ((C5052 + C5051) * C5040 + ((C113 * C713 + C48293 * C714) * C114 +
                                       (C113 * C715 + C48293 * C716) * C48072) *
                                          C48377) *
               C48408) *
              C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C5040 +
             (C174 + C175) * C48377) *
                C5042 +
            ((C5219 * C114 + C5220 * C48072) * C5040 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C299 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C5040) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C5040) * C5042) *
               C300 +
           ((C184 * C5040 + (C179 + C178) * C48377) * C5042 +
            ((C5048 + C5047) * C5040 + (C5049 + C5050) * C48377) * C48408) *
               C48384) *
              C48430 +
          ((((C594 + C595) * C5040 + (C596 + C597) * C48377) * C5042 +
            ((C5369 + C5370) * C5040 + (C5371 + C5372) * C48377) * C48408) *
               C300 -
           (((C5370 + C5369) * C48377 +
             ((C113 * C1010 + C48293 * C1019) * C48072 +
              (C113 * C1004 + C48293 * C1009) * C114) *
                 C5040) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C5040) *
                C5042) *
               C299 -
           (((C1049 * C48072 + C1048 * C114) * C48377 +
             (C5372 + C5371) * C5040) *
                C48408 +
            ((C599 + C598) * C48377 + C606 * C5040) * C5042) *
               C48384) *
              C48419 +
          (((((C113 * C522 + C48293 * C537) * C114 +
              (C113 * C538 + C48293 * C552) * C48072) *
                 C5040 +
             (C600 + C601) * C48377) *
                C5042 +
            (((C113 * C1409 + C48293 * C1421) * C114 +
              (C113 * C1422 + C48293 * C1436) * C48072) *
                 C5040 +
             (C5373 + C5374) * C48377) *
                C48408) *
               C299 -
           (((C5375 + C5376) * C48377 + (C5374 + C5373) * C5040) * C48408 +
            ((C603 + C602) * C48377 + (C601 + C600) * C5040) * C5042) *
               C300 +
           ((C607 * C5040 + (C605 + C604) * C48377) * C5042 +
            ((C5376 + C5375) * C5040 +
             ((C113 * C2326 + C48293 * C2327) * C114 +
              (C113 * C2328 + C48293 * C2329) * C48072) *
                 C48377) *
                C48408) *
               C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1173 +
             (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
             C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
                C5040 +
            (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C48377) *
               C5042 +
           ((C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
             (C113 * C1272 + C48293 * C1278) * C1175 +
             (C113 * C1279 + C48293 * C1290) * C48390) *
                C5040 +
            (C6005 + C6006 - C6007 - C6008 + C6009 + C6010) * C48377) *
               C48408) *
              C48426 +
          (((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C5040 +
            (C1185 - (C1184 + C1183) + C1186 - C1187 - C1188) * C48377) *
               C5042 +
           ((C6007 - (C6006 + C6005) + C6008 - C6009 - C6010) * C5040 +
            (C6011 - (C6012 + C6013) + C6014 - C6015 - C6016) * C48377) *
               C48408) *
              C48413 +
          ((C1199 * C5040 +
            (C1191 + C1190 - C1189 - C1192 + C1193 + C1194) * C48377) *
               C5042 +
           ((C6013 + C6012 - C6011 - C6014 + C6015 + C6016) * C5040 +
            (C385 * C1173 + C386 * C1167 - C387 * C1174 - C388 * C1168 +
             (C113 * C1550 + C48293 * C1551) * C1175 +
             (C113 * C1552 + C48293 * C1553) * C48390) *
                C48377) *
               C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1267 +
            (C113 * C123 + C48293 * C136) * C1261 - C5219 * C1268 -
            C5220 * C1262 + C5221 * C1269 + C5222 * C1263 - C6119 * C1270 -
            C6120 * C1264 + C6121 * C1271 + C6122 * C1265) *
               C5040 +
           (C164 * C1267 + C165 * C1261 - C376 * C1268 - C377 * C1262 +
            C378 * C1269 + C379 * C1263 - C1575 * C1270 - C1576 * C1264 +
            C6123 * C1271 + C6124 * C1265) *
               C48377) *
              C5042 +
          ((C5219 * C1267 + C5220 * C1261 - C5221 * C1268 - C5222 * C1262 +
            C6119 * C1269 + C6120 * C1263 - C6121 * C1270 - C6122 * C1264 +
            (C113 * C6098 + C48293 * C6100) * C1271 +
            (C113 * C6101 + C48293 * C6104) * C1265) *
               C5040 +
           (C376 * C1267 + C377 * C1261 - C378 * C1268 - C379 * C1262 +
            C1575 * C1269 + C1576 * C1263 - C6123 * C1270 - C6124 * C1264 +
            (C113 * C6099 + C48293 * C6102) * C1271 +
            (C113 * C6103 + C48293 * C6105) * C1265) *
               C48377) *
              C48408) *
         C48044 * C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1173 +
             (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
             C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
                C5040 +
            (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C48377) *
               C5042 +
           ((C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
             C6119 * C1175 + C6120 * C48390) *
                C5040 +
            (C6005 + C6006 - C6007 - C6008 + C6009 + C6010) * C48377) *
               C48408) *
              C48044 * C48430 +
          (((C5857 * C1174 -
             ((C113 * C533 + C48293 * C550) * C1167 +
              (C113 * C520 + C48293 * C534) * C1173) +
             C5858 * C1168 - C6295 * C1175 - C6296 * C48390) *
                C5040 +
            (C1733 - (C1734 + C1735) + C1736 - C1753 - C1754) * C48377) *
               C5042 +
           ((C6295 * C1174 - (C5858 * C1167 + C5857 * C1173) + C6296 * C1168 -
             (C113 * C1854 + C48293 * C1857) * C1175 -
             (C113 * C1858 + C48293 * C1863) * C48390) *
                C5040 +
            (C1749 * C1174 - (C1044 * C1167 + C1043 * C1173) + C1750 * C1168 -
             (C113 * C1855 + C48293 * C1859) * C1175 -
             (C113 * C1860 + C48293 * C1864) * C48390) *
                C48377) *
               C48408) *
              C48044 * C48419 +
          ((((C113 * C522 + C48293 * C537) * C1173 +
             (C113 * C538 + C48293 * C552) * C1167 - C6297 * C1174 -
             C6298 * C1168 + C6299 * C1175 + C6300 * C48390) *
                C5040 +
            (C588 * C1173 + C589 * C1167 - C2343 * C1174 - C2344 * C1168 +
             C6301 * C1175 + C6302 * C48390) *
                C48377) *
               C5042 +
           ((C6297 * C1173 + C6298 * C1167 - C6299 * C1174 - C6300 * C1168 +
             (C113 * C6270 + C48293 * C6272) * C1175 +
             (C113 * C6273 + C48293 * C6276) * C48390) *
                C5040 +
            (C2343 * C1173 + C2344 * C1167 - C6301 * C1174 - C6302 * C1168 +
             (C113 * C6271 + C48293 * C6274) * C1175 +
             (C113 * C6275 + C48293 * C6277) * C48390) *
                C48377) *
               C48408) *
              C48044 * C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C5040 +
             (C174 + C175) * C48377) *
                C5042 +
            ((C5219 * C114 + C5220 * C48072) * C5040 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C707 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C5040) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C5040) * C5042) *
               C708 +
           ((C184 * C5040 + (C179 + C178) * C48377) * C5042 +
            ((C5048 + C5047) * C5040 + (C5049 + C5050) * C48377) * C48408) *
               C709 -
           (((C5051 + C5052) * C48377 + (C5050 + C5049) * C5040) * C48408 +
            ((C181 + C180) * C48377 + C185 * C5040) * C5042) *
               C48394) *
              C48359 +
          ((((C594 + C595) * C5040 + (C596 + C597) * C48377) * C5042 +
            ((C5369 + C5370) * C5040 + (C5371 + C5372) * C48377) * C48408) *
               C708 -
           (((C5370 + C5369) * C48377 +
             ((C113 * C1010 + C48293 * C1019) * C48072 +
              (C113 * C1004 + C48293 * C1009) * C114) *
                 C5040) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C5040) *
                C5042) *
               C707 -
           (((C5649 + C5650) * C48377 + (C5372 + C5371) * C5040) * C48408 +
            ((C599 + C598) * C48377 + C606 * C5040) * C5042) *
               C709 +
           ((C850 * C5040 + (C858 + C857) * C48377) * C5042 +
            ((C5650 + C5649) * C5040 +
             ((C113 * C1008 + C48293 * C1017) * C114 +
              (C113 * C1018 + C48293 * C1023) * C48072) *
                 C48377) *
                C48408) *
               C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C1173 +
              (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
              C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
                 C5040 +
             (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C48377) *
                C5042 +
            ((C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
              C6119 * C1175 + C6120 * C48390) *
                 C5040 +
             (C6005 + C6006 - C6007 - C6008 + C6009 + C6010) * C48377) *
                C48408) *
               C48344 +
           (((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C5040 +
             (C1185 - (C1184 + C1183) + C1186 - C1187 - C1188) * C48377) *
                C5042 +
            ((C6007 - (C6006 + C6005) + C6008 - C6009 - C6010) * C5040 +
             (C6011 - (C6012 + C6013) + C6014 - C6015 - C6016) * C48377) *
                C48408) *
               C48054) *
              C48359 +
          ((((C5857 * C1174 -
              ((C113 * C533 + C48293 * C550) * C1167 +
               (C113 * C520 + C48293 * C534) * C1173) +
              C5858 * C1168 - C6295 * C1175 - C6296 * C48390) *
                 C5040 +
             (C1733 - (C1734 + C1735) + C1736 - C1753 - C1754) * C48377) *
                C5042 +
            ((C6295 * C1174 - (C5858 * C1167 + C5857 * C1173) + C6296 * C1168 -
              (C113 * C1854 + C48293 * C1857) * C1175 -
              (C113 * C1858 + C48293 * C1863) * C48390) *
                 C5040 +
             (C6635 - (C6636 + C6637) + C6638 - C6645 - C6646) * C48377) *
                C48408) *
               C48344 +
           (((C1735 + C1734 - C1733 - C1736 + C1753 + C1754) * C5040 +
             (C1743 + C1742 - C1741 - C1744 + C1755 + C1756) * C48377) *
                C5042 +
            ((C6637 + C6636 - C6635 - C6638 + C6645 + C6646) * C5040 +
             (C1045 * C1173 + C1047 * C1167 - C1751 * C1174 - C1752 * C1168 +
              (C113 * C1856 + C48293 * C1861) * C1175 +
              (C113 * C1862 + C48293 * C1865) * C48390) *
                 C48377) *
                C48408) *
               C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C5040 +
            (C174 + C175) * C48377) *
               C5042 +
           (((C113 * C305 + C48293 * C315) * C114 +
             (C113 * C316 + C48293 * C335) * C48072) *
                C5040 +
            (C5045 + C5046) * C48377) *
               C48408) *
              C107 -
          (((C5047 + C5048) * C48377 + (C5046 + C5045) * C5040) * C48408 +
           ((C177 + C176) * C48377 + (C175 + C174) * C5040) * C5042) *
              C108 +
          ((C184 * C5040 + (C179 + C178) * C48377) * C5042 +
           ((C5048 + C5047) * C5040 + (C5049 + C5050) * C48377) * C48408) *
              C109 -
          (((C5051 + C5052) * C48377 + (C5050 + C5049) * C5040) * C48408 +
           ((C181 + C180) * C48377 + C185 * C5040) * C5042) *
              C110 +
          ((C186 * C5040 + (C183 + C182) * C48377) * C5042 +
           ((C5052 + C5051) * C5040 + ((C113 * C713 + C48293 * C714) * C114 +
                                       (C113 * C715 + C48293 * C716) * C48072) *
                                          C48377) *
               C48408) *
              C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C302 +
             (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
             C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
                C5040 +
            (C346 + C347 - C389 - C390 + C391 + C392) * C48377) *
               C5042 +
           ((C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
             (C113 * C1272 + C48293 * C1278) * C304 +
             (C113 * C1279 + C48293 * C1290) * C48390) *
                C5040 +
            (C5207 + C5208 - C5209 - C5210 + C5211 + C5212) * C48377) *
               C48408) *
              C299 +
          (((C389 - (C347 + C346) + C390 - C391 - C392) * C5040 +
            (C393 - (C357 + C356) + C394 - C395 - C396) * C48377) *
               C5042 +
           ((C5209 - (C5208 + C5207) + C5210 - C5211 - C5212) * C5040 +
            (C5213 - (C5214 + C5215) + C5216 - C5217 - C5218) * C48377) *
               C48408) *
              C300 +
          ((C404 * C5040 + (C369 + C368 - C397 - C398 + C399 + C400) * C48377) *
               C5042 +
           ((C5215 + C5214 - C5213 - C5216 + C5217 + C5218) * C5040 +
            (C385 * C302 + C386 * C48429 - C387 * C303 - C388 * C48417 +
             (C113 * C1550 + C48293 * C1551) * C304 +
             (C113 * C1552 + C48293 * C1553) * C48390) *
                C48377) *
               C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1173 +
             (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
             C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
                C5040 +
            (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C48377) *
               C5042 +
           ((C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
             (C113 * C1272 + C48293 * C1278) * C1175 +
             (C113 * C1279 + C48293 * C1290) * C48390) *
                C5040 +
            (C6005 + C6006 - C6007 - C6008 + C6009 + C6010) * C48377) *
               C48408) *
              C48426 +
          (((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C5040 +
            (C1185 - (C1184 + C1183) + C1186 - C1187 - C1188) * C48377) *
               C5042 +
           ((C6007 - (C6006 + C6005) + C6008 - C6009 - C6010) * C5040 +
            (C6011 - (C6012 + C6013) + C6014 - C6015 - C6016) * C48377) *
               C48408) *
              C48413 +
          ((C1199 * C5040 +
            (C1191 + C1190 - C1189 - C1192 + C1193 + C1194) * C48377) *
               C5042 +
           ((C6013 + C6012 - C6011 - C6014 + C6015 + C6016) * C5040 +
            (C385 * C1173 + C386 * C1167 - C387 * C1174 - C388 * C1168 +
             (C113 * C1550 + C48293 * C1551) * C1175 +
             (C113 * C1552 + C48293 * C1553) * C48390) *
                C48377) *
               C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1267 +
            (C113 * C123 + C48293 * C136) * C1261 - C5219 * C1268 -
            C5220 * C1262 + C5221 * C1269 + C5222 * C1263 - C6119 * C1270 -
            C6120 * C1264 + C6121 * C1271 + C6122 * C1265) *
               C5040 +
           (C164 * C1267 + C165 * C1261 - C376 * C1268 - C377 * C1262 +
            C378 * C1269 + C379 * C1263 - C1575 * C1270 - C1576 * C1264 +
            C6123 * C1271 + C6124 * C1265) *
               C48377) *
              C5042 +
          ((C5219 * C1267 + C5220 * C1261 - C5221 * C1268 - C5222 * C1262 +
            C6119 * C1269 + C6120 * C1263 - C6121 * C1270 - C6122 * C1264 +
            (C113 * C6098 + C48293 * C6100) * C1271 +
            (C113 * C6101 + C48293 * C6104) * C1265) *
               C5040 +
           (C376 * C1267 + C377 * C1261 - C378 * C1268 - C379 * C1262 +
            C1575 * C1269 + C1576 * C1263 - C6123 * C1270 - C6124 * C1264 +
            (C113 * C6099 + C48293 * C6102) * C1271 +
            (C113 * C6103 + C48293 * C6105) * C1265) *
               C48377) *
              C48408) *
         C48044 * C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C47015 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48131 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C47007 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C48138 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C47021 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C3108) *
               C5040 +
           ((C10791 + C10792) * C47015 + (C10793 + C10794) * C48131 -
            (C10985 + C10986) * C47007 - (C10987 + C10988) * C48138 +
            (C10989 + C10990) * C47021 + (C10991 + C10992) * C3108) *
               C48377) *
              C48278 * C48049 +
          (((C10986 + C10985) * C47007 -
            ((C10794 + C10793) * C48131 + (C10792 + C10791) * C47015) +
            (C10988 + C10987) * C48138 - (C10990 + C10989) * C47021 -
            (C10992 + C10991) * C3108) *
               C5040 +
           ((C10993 + C10994) * C47007 -
            ((C10795 + C10796) * C48131 + (C10797 + C10798) * C47015) +
            (C10995 + C10996) * C48138 - (C10997 + C10998) * C47021 -
            (C10999 + C11000) * C3108) *
               C48377) *
              C48278 * C48057 +
          (((C10798 + C10797) * C47015 + (C10796 + C10795) * C48131 -
            (C10994 + C10993) * C47007 - (C10996 + C10995) * C48138 +
            (C10998 + C10997) * C47021 + (C11000 + C10999) * C3108) *
               C5040 +
           ((C10799 + C10800) * C47015 + (C10801 + C10802) * C48131 -
            (C11333 + C11334) * C47007 - (C11335 + C11336) * C48138 +
            (C10756 * C312 + C10754 * C329 + C10757 * C1728 + C48410 * C1729) *
                C47021 +
            (C10756 * C330 + C10754 * C342 + C10757 * C1730 + C48410 * C1731) *
                C3108) *
               C48377) *
              C48278 * C3111) *
         C48090) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C47015 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48131 -
             (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                 C47007 -
             (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                 C48138 +
             (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                 C47021 +
             (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                 C3108) *
                C5040 +
            ((C10791 + C10792) * C47015 + (C10793 + C10794) * C48131 -
             (C10985 + C10986) * C47007 - (C10987 + C10988) * C48138 +
             (C10989 + C10990) * C47021 + (C10991 + C10992) * C3108) *
                C48377) *
               C48278 * C2812 +
           (((C10986 + C10985) * C47007 -
             ((C10794 + C10793) * C48131 + (C10792 + C10791) * C47015) +
             (C10988 + C10987) * C48138 - (C10990 + C10989) * C47021 -
             (C10992 + C10991) * C3108) *
                C5040 +
            ((C10993 + C10994) * C47007 -
             ((C10795 + C10796) * C48131 + (C10797 + C10798) * C47015) +
             (C10995 + C10996) * C48138 - (C10997 + C10998) * C47021 -
             (C10999 + C11000) * C3108) *
                C48377) *
               C48278 * C48054) *
              C48359 +
          ((((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
              C48410 * C1421) *
                 C47007 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C48131 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C47015) +
             (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
              C48410 * C1436) *
                 C48138 -
             (C10757 * C1410 + C48410 * C1423 + C10756 * C1406 +
              C10754 * C1415) *
                 C47021 -
             (C10757 * C1424 + C48410 * C1437 + C10756 * C1416 +
              C10754 * C1433) *
                 C3108) *
                C5040 +
            ((C11689 + C11690) * C47007 -
             ((C11182 + C11181) * C48131 + (C11180 + C11179) * C47015) +
             (C11691 + C11692) * C48138 - (C12415 + C12416) * C47021 -
             (C12417 + C12418) * C3108) *
                C48377) *
               C48278 * C2812 +
           (((C11179 + C11180) * C47015 + (C11181 + C11182) * C48131 -
             (C11690 + C11689) * C47007 - (C11692 + C11691) * C48138 +
             (C12416 + C12415) * C47021 + (C12418 + C12417) * C3108) *
                C5040 +
            ((C11183 + C11184) * C47015 + (C11185 + C11186) * C48131 -
             (C11693 + C11694) * C47007 - (C11695 + C11696) * C48138 +
             (C10756 * C1408 + C10754 * C1419 + C10757 * C1414 +
              C48410 * C1431) *
                 C47021 +
             (C10756 * C1420 + C10754 * C1435 + C10757 * C1432 +
              C48410 * C1441) *
                 C3108) *
                C48377) *
               C48278 * C48054) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C2814 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48436 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C2815 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C48432 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C2816 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C48422 -
            (C10757 * C1854 + C48410 * C1857 + C10756 * C1272 +
             C10754 * C1278) *
                C2817 -
            (C10757 * C1858 + C48410 * C1863 + C10756 * C1279 +
             C10754 * C1290) *
                C48400) *
               C5040 +
           ((C10791 + C10792) * C2814 + (C10793 + C10794) * C48436 -
            (C10985 + C10986) * C2815 - (C10987 + C10988) * C48432 +
            (C10989 + C10990) * C2816 + (C10991 + C10992) * C48422 -
            (C12209 + C12210) * C2817 - (C12211 + C12212) * C48400) *
               C48377) *
              C48278 * C2812 +
          (((C10986 + C10985) * C2815 -
            ((C10794 + C10793) * C48436 + (C10792 + C10791) * C2814) +
            (C10988 + C10987) * C48432 - (C10990 + C10989) * C2816 -
            (C10992 + C10991) * C48422 + (C12210 + C12209) * C2817 +
            (C12212 + C12211) * C48400) *
               C5040 +
           ((C10993 + C10994) * C2815 -
            ((C10795 + C10796) * C48436 + (C10797 + C10798) * C2814) +
            (C10995 + C10996) * C48432 - (C10997 + C10998) * C2816 -
            (C10999 + C11000) * C48422 +
            (C10756 * C1276 + C10754 * C1286 + C10757 * C1856 +
             C48410 * C1861) *
                C2817 +
            (C10756 * C1287 + C10754 * C1294 + C10757 * C1862 +
             C48410 * C1865) *
                C48400) *
               C48377) *
              C48278 * C48054) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C2686 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C2680 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C2687 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C48135) *
               C5040 +
           ((C10791 + C10792) * C2686 + (C10793 + C10794) * C2680 -
            (C10985 + C10986) * C2687 - (C10987 + C10988) * C48135) *
               C48377) *
              C48278 * C48435 +
          (((C10986 + C10985) * C2687 -
            ((C10794 + C10793) * C2680 + (C10792 + C10791) * C2686) +
            (C10988 + C10987) * C48135) *
               C5040 +
           ((C10993 + C10994) * C2687 -
            ((C10795 + C10796) * C2680 + (C10797 + C10798) * C2686) +
            (C10995 + C10996) * C48135) *
               C48377) *
              C48278 * C48428 +
          (((C10798 + C10797) * C2686 + (C10796 + C10795) * C2680 -
            (C10994 + C10993) * C2687 - (C10996 + C10995) * C48135) *
               C5040 +
           ((C10799 + C10800) * C2686 + (C10801 + C10802) * C2680 -
            (C11333 + C11334) * C2687 - (C11335 + C11336) * C48135) *
               C48377) *
              C48278 * C48415 +
          (((C11334 + C11333) * C2687 -
            ((C10802 + C10801) * C2680 + (C10800 + C10799) * C2686) +
            (C11336 + C11335) * C48135) *
               C5040 +
           ((C10756 * C313 + C10754 * C331 + C10757 * C1008 + C48410 * C1017) *
                C2687 -
            ((C10803 + C10804) * C2680 + (C10805 + C10806) * C2686) +
            (C10756 * C332 + C10754 * C343 + C10757 * C1018 + C48410 * C1023) *
                C48135) *
               C48377) *
              C48278 * C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C2686 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C2680 -
             (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                 C2687 -
             (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                 C48135) *
                C5040 +
            ((C10791 + C10792) * C2686 + (C10793 + C10794) * C2680 -
             (C10985 + C10986) * C2687 - (C10987 + C10988) * C48135) *
                C48377) *
               C48278 * C2812 +
           (((C10986 + C10985) * C2687 -
             ((C10794 + C10793) * C2680 + (C10792 + C10791) * C2686) +
             (C10988 + C10987) * C48135) *
                C5040 +
            ((C10993 + C10994) * C2687 -
             ((C10795 + C10796) * C2680 + (C10797 + C10798) * C2686) +
             (C10995 + C10996) * C48135) *
                C48377) *
               C48278 * C48054) *
              C48430 +
          ((((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
              C48410 * C1421) *
                 C2687 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C2680 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C2686) +
             (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
              C48410 * C1436) *
                 C48135) *
                C5040 +
            ((C11689 + C11690) * C2687 -
             ((C11182 + C11181) * C2680 + (C11180 + C11179) * C2686) +
             (C11691 + C11692) * C48135) *
                C48377) *
               C48278 * C2812 +
           (((C11179 + C11180) * C2686 + (C11181 + C11182) * C2680 -
             (C11690 + C11689) * C2687 - (C11692 + C11691) * C48135) *
                C5040 +
            ((C11183 + C11184) * C2686 + (C11185 + C11186) * C2680 -
             (C11693 + C11694) * C2687 - (C11695 + C11696) * C48135) *
                C48377) *
               C48278 * C48054) *
              C48419 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C2686 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C2680 -
             (C10757 * C2570 + C48410 * C2573 + C10756 * C1409 +
              C10754 * C1421) *
                 C2687 -
             (C10757 * C2574 + C48410 * C2579 + C10756 * C1422 +
              C10754 * C1436) *
                 C48135) *
                C5040 +
            ((C11187 + C11188) * C2686 + (C11189 + C11190) * C2680 -
             (C13133 + C13134) * C2687 - (C13135 + C13136) * C48135) *
                C48377) *
               C48278 * C2812 +
           (((C13134 + C13133) * C2687 -
             ((C11190 + C11189) * C2680 + (C11188 + C11187) * C2686) +
             (C13136 + C13135) * C48135) *
                C5040 +
            ((C10756 * C1413 + C10754 * C1429 + C10757 * C2572 +
              C48410 * C2577) *
                 C2687 -
             ((C11191 + C11192) * C2680 + (C11193 + C11194) * C2686) +
             (C10756 * C1430 + C10754 * C1440 + C10757 * C2578 +
              C48410 * C2581) *
                 C48135) *
                C48377) *
               C48278 * C48054) *
              C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C2686 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C2680 -
             (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                 C2687 -
             (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                 C48135) *
                C5040 +
            ((C10791 + C10792) * C2686 + (C10793 + C10794) * C2680 -
             (C10985 + C10986) * C2687 - (C10987 + C10988) * C48135) *
                C48377) *
               C48278 * C48049 +
           (((C10986 + C10985) * C2687 -
             ((C10794 + C10793) * C2680 + (C10792 + C10791) * C2686) +
             (C10988 + C10987) * C48135) *
                C5040 +
            ((C10993 + C10994) * C2687 -
             ((C10795 + C10796) * C2680 + (C10797 + C10798) * C2686) +
             (C10995 + C10996) * C48135) *
                C48377) *
               C48278 * C48057 +
           (((C10798 + C10797) * C2686 + (C10796 + C10795) * C2680 -
             (C10994 + C10993) * C2687 - (C10996 + C10995) * C48135) *
                C5040 +
            ((C10799 + C10800) * C2686 + (C10801 + C10802) * C2680 -
             (C11333 + C11334) * C2687 - (C11335 + C11336) * C48135) *
                C48377) *
               C48278 * C3111) *
              C48359 +
          ((((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
              C48410 * C1421) *
                 C2687 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C2680 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C2686) +
             (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
              C48410 * C1436) *
                 C48135) *
                C5040 +
            ((C11689 + C11690) * C2687 -
             ((C11182 + C11181) * C2680 + (C11180 + C11179) * C2686) +
             (C11691 + C11692) * C48135) *
                C48377) *
               C48278 * C48049 +
           (((C11179 + C11180) * C2686 + (C11181 + C11182) * C2680 -
             (C11690 + C11689) * C2687 - (C11692 + C11691) * C48135) *
                C5040 +
            ((C11183 + C11184) * C2686 + (C11185 + C11186) * C2680 -
             (C11693 + C11694) * C2687 - (C11695 + C11696) * C48135) *
                C48377) *
               C48278 * C48057 +
           (((C11694 + C11693) * C2687 -
             ((C11186 + C11185) * C2680 + (C11184 + C11183) * C2686) +
             (C11696 + C11695) * C48135) *
                C5040 +
            ((C10756 * C1007 + C10754 * C1015 + C10757 * C2326 +
              C48410 * C2327) *
                 C2687 -
             ((C11475 + C11476) * C2680 + (C11477 + C11478) * C2686) +
             (C10756 * C1016 + C10754 * C1022 + C10757 * C2328 +
              C48410 * C2329) *
                 C48135) *
                C48377) *
               C48278 * C3111) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C2686 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C2680 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C2687 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C48135) *
               C5040 +
           ((C10791 + C10792) * C2686 + (C10793 + C10794) * C2680 -
            (C10985 + C10986) * C2687 - (C10987 + C10988) * C48135) *
               C48377) *
              C48278 * C48435 +
          (((C10986 + C10985) * C2687 -
            ((C10794 + C10793) * C2680 + (C10792 + C10791) * C2686) +
            (C10988 + C10987) * C48135) *
               C5040 +
           ((C10993 + C10994) * C2687 -
            ((C10795 + C10796) * C2680 + (C10797 + C10798) * C2686) +
            (C10995 + C10996) * C48135) *
               C48377) *
              C48278 * C48428 +
          (((C10798 + C10797) * C2686 + (C10796 + C10795) * C2680 -
            (C10994 + C10993) * C2687 - (C10996 + C10995) * C48135) *
               C5040 +
           ((C10799 + C10800) * C2686 + (C10801 + C10802) * C2680 -
            (C11333 + C11334) * C2687 - (C11335 + C11336) * C48135) *
               C48377) *
              C48278 * C48415 +
          (((C11334 + C11333) * C2687 -
            ((C10802 + C10801) * C2680 + (C10800 + C10799) * C2686) +
            (C11336 + C11335) * C48135) *
               C5040 +
           ((C10756 * C313 + C10754 * C331 + C10757 * C1008 + C48410 * C1017) *
                C2687 -
            ((C10803 + C10804) * C2680 + (C10805 + C10806) * C2686) +
            (C10756 * C332 + C10754 * C343 + C10757 * C1018 + C48410 * C1023) *
                C48135) *
               C48377) *
              C48278 * C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C2814 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48436 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C2815 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C48432 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C2816 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C48422 -
            (C10757 * C1854 + C48410 * C1857 + C10756 * C1272 +
             C10754 * C1278) *
                C2817 -
            (C10757 * C1858 + C48410 * C1863 + C10756 * C1279 +
             C10754 * C1290) *
                C48400) *
               C5040 +
           ((C10791 + C10792) * C2814 + (C10793 + C10794) * C48436 -
            (C10985 + C10986) * C2815 - (C10987 + C10988) * C48432 +
            (C10989 + C10990) * C2816 + (C10991 + C10992) * C48422 -
            (C12209 + C12210) * C2817 - (C12211 + C12212) * C48400) *
               C48377) *
              C48278 * C2812 +
          (((C10986 + C10985) * C2815 -
            ((C10794 + C10793) * C48436 + (C10792 + C10791) * C2814) +
            (C10988 + C10987) * C48432 - (C10990 + C10989) * C2816 -
            (C10992 + C10991) * C48422 + (C12210 + C12209) * C2817 +
            (C12212 + C12211) * C48400) *
               C5040 +
           ((C10993 + C10994) * C2815 -
            ((C10795 + C10796) * C48436 + (C10797 + C10798) * C2814) +
            (C10995 + C10996) * C48432 - (C10997 + C10998) * C2816 -
            (C10999 + C11000) * C48422 +
            (C10756 * C1276 + C10754 * C1286 + C10757 * C1856 +
             C48410 * C1861) *
                C2817 +
            (C10756 * C1287 + C10754 * C1294 + C10757 * C1862 +
             C48410 * C1865) *
                C48400) *
               C48377) *
              C48278 * C48054) *
         C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C47015 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48131 -
             (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                 C47007 -
             (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                 C48138 +
             (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                 C47021 +
             (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                 C3108) *
                C5040 +
            ((C10791 + C10792) * C47015 + (C10793 + C10794) * C48131 -
             (C10985 + C10986) * C47007 - (C10987 + C10988) * C48138 +
             (C10989 + C10990) * C47021 + (C10991 + C10992) * C3108) *
                C48377) *
               C48278 * C48344 +
           (((C10986 + C10985) * C47007 -
             ((C10794 + C10793) * C48131 + (C10792 + C10791) * C47015) +
             (C10988 + C10987) * C48138 - (C10990 + C10989) * C47021 -
             (C10992 + C10991) * C3108) *
                C5040 +
            ((C10993 + C10994) * C47007 -
             ((C10795 + C10796) * C48131 + (C10797 + C10798) * C47015) +
             (C10995 + C10996) * C48138 - (C10997 + C10998) * C47021 -
             (C10999 + C11000) * C3108) *
                C48377) *
               C48278 * C48054) *
              C3547 +
          ((((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
              C48410 * C1421) *
                 C47007 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C48131 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C47015) +
             (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
              C48410 * C1436) *
                 C48138 -
             (C10757 * C1410 + C48410 * C1423 + C10756 * C1406 +
              C10754 * C1415) *
                 C47021 -
             (C10757 * C1424 + C48410 * C1437 + C10756 * C1416 +
              C10754 * C1433) *
                 C3108) *
                C5040 +
            ((C11689 + C11690) * C47007 -
             ((C11182 + C11181) * C48131 + (C11180 + C11179) * C47015) +
             (C11691 + C11692) * C48138 - (C12415 + C12416) * C47021 -
             (C12417 + C12418) * C3108) *
                C48377) *
               C48278 * C48344 +
           (((C11179 + C11180) * C47015 + (C11181 + C11182) * C48131 -
             (C11690 + C11689) * C47007 - (C11692 + C11691) * C48138 +
             (C12416 + C12415) * C47021 + (C12418 + C12417) * C3108) *
                C5040 +
            ((C11183 + C11184) * C47015 + (C11185 + C11186) * C48131 -
             (C11693 + C11694) * C47007 - (C11695 + C11696) * C48138 +
             (C10756 * C1408 + C10754 * C1419 + C10757 * C1414 +
              C48410 * C1431) *
                 C47021 +
             (C10756 * C1420 + C10754 * C1435 + C10757 * C1432 +
              C48410 * C1441) *
                 C3108) *
                C48377) *
               C48278 * C48054) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C47015 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48131 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C47007 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C48138 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C47021 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C3108) *
               C5040 +
           ((C10791 + C10792) * C47015 + (C10793 + C10794) * C48131 -
            (C10985 + C10986) * C47007 - (C10987 + C10988) * C48138 +
            (C10989 + C10990) * C47021 + (C10991 + C10992) * C3108) *
               C48377) *
              C48278 * C48044 * C48173 +
          (((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
             C48410 * C1421) *
                C47007 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48131 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C47015) +
            (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
             C48410 * C1436) *
                C48138 -
            (C10757 * C1410 + C48410 * C1423 + C10756 * C1406 +
             C10754 * C1415) *
                C47021 -
            (C10757 * C1424 + C48410 * C1437 + C10756 * C1416 +
             C10754 * C1433) *
                C3108) *
               C5040 +
           ((C11689 + C11690) * C47007 -
            ((C11182 + C11181) * C48131 + (C11180 + C11179) * C47015) +
            (C11691 + C11692) * C48138 - (C12415 + C12416) * C47021 -
            (C12417 + C12418) * C3108) *
               C48377) *
              C48278 * C48044 * C48180 +
          (((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                C47015 +
            (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                C48131 -
            (C10757 * C2570 + C48410 * C2573 + C10756 * C1409 +
             C10754 * C1421) *
                C47007 -
            (C10757 * C2574 + C48410 * C2579 + C10756 * C1422 +
             C10754 * C1436) *
                C48138 +
            (C10756 * C1410 + C10754 * C1423 + C10757 * C7638 +
             C48410 * C7640) *
                C47021 +
            (C10756 * C1424 + C10754 * C1437 + C10757 * C7641 +
             C48410 * C7644) *
                C3108) *
               C5040 +
           ((C11187 + C11188) * C47015 + (C11189 + C11190) * C48131 -
            (C13133 + C13134) * C47007 - (C13135 + C13136) * C48138 +
            (C10756 * C1412 + C10754 * C1427 + C10757 * C7639 +
             C48410 * C7642) *
                C47021 +
            (C10756 * C1428 + C10754 * C1439 + C10757 * C7643 +
             C48410 * C7645) *
                C3108) *
               C48377) *
              C48278 * C48044 * C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C2814 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48436 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C2815 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C48432 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C2816 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C48422 -
            (C10757 * C1854 + C48410 * C1857 + C10756 * C1272 +
             C10754 * C1278) *
                C2817 -
            (C10757 * C1858 + C48410 * C1863 + C10756 * C1279 +
             C10754 * C1290) *
                C48400) *
               C5040 +
           ((C10791 + C10792) * C2814 + (C10793 + C10794) * C48436 -
            (C10985 + C10986) * C2815 - (C10987 + C10988) * C48432 +
            (C10989 + C10990) * C2816 + (C10991 + C10992) * C48422 -
            (C12209 + C12210) * C2817 - (C12211 + C12212) * C48400) *
               C48377) *
              C48278 * C48044 * C3547 +
          (((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
             C48410 * C1421) *
                C2815 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48436 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C2814) +
            (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
             C48410 * C1436) *
                C48432 -
            (C10757 * C1410 + C48410 * C1423 + C10756 * C1406 +
             C10754 * C1415) *
                C2816 -
            (C10757 * C1424 + C48410 * C1437 + C10756 * C1416 +
             C10754 * C1433) *
                C48422 +
            (C10756 * C1854 + C10754 * C1857 + C10757 * C6270 +
             C48410 * C6272) *
                C2817 +
            (C10756 * C1858 + C10754 * C1863 + C10757 * C6273 +
             C48410 * C6276) *
                C48400) *
               C5040 +
           ((C11689 + C11690) * C2815 -
            ((C11182 + C11181) * C48436 + (C11180 + C11179) * C2814) +
            (C11691 + C11692) * C48432 - (C12415 + C12416) * C2816 -
            (C12417 + C12418) * C48422 +
            (C10756 * C1855 + C10754 * C1859 + C10757 * C6271 +
             C48410 * C6274) *
                C2817 +
            (C10756 * C1860 + C10754 * C1864 + C10757 * C6275 +
             C48410 * C6277) *
                C48400) *
               C48377) *
              C48278 * C48044 * C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C2686 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C2680 -
             (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                 C2687 -
             (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                 C48135) *
                C5040 +
            ((C10791 + C10792) * C2686 + (C10793 + C10794) * C2680 -
             (C10985 + C10986) * C2687 - (C10987 + C10988) * C48135) *
                C48377) *
               C48278 * C48426 +
           (((C10986 + C10985) * C2687 -
             ((C10794 + C10793) * C2680 + (C10792 + C10791) * C2686) +
             (C10988 + C10987) * C48135) *
                C5040 +
            ((C10993 + C10994) * C2687 -
             ((C10795 + C10796) * C2680 + (C10797 + C10798) * C2686) +
             (C10995 + C10996) * C48135) *
                C48377) *
               C48278 * C48413 +
           (((C10798 + C10797) * C2686 + (C10796 + C10795) * C2680 -
             (C10994 + C10993) * C2687 - (C10996 + C10995) * C48135) *
                C5040 +
            ((C10799 + C10800) * C2686 + (C10801 + C10802) * C2680 -
             (C11333 + C11334) * C2687 - (C11335 + C11336) * C48135) *
                C48377) *
               C48278 * C48384) *
              C3547 +
          ((((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
              C48410 * C1421) *
                 C2687 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C2680 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C2686) +
             (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
              C48410 * C1436) *
                 C48135) *
                C5040 +
            ((C11689 + C11690) * C2687 -
             ((C11182 + C11181) * C2680 + (C11180 + C11179) * C2686) +
             (C11691 + C11692) * C48135) *
                C48377) *
               C48278 * C48426 +
           (((C11179 + C11180) * C2686 + (C11181 + C11182) * C2680 -
             (C11690 + C11689) * C2687 - (C11692 + C11691) * C48135) *
                C5040 +
            ((C11183 + C11184) * C2686 + (C11185 + C11186) * C2680 -
             (C11693 + C11694) * C2687 - (C11695 + C11696) * C48135) *
                C48377) *
               C48278 * C48413 +
           (((C11694 + C11693) * C2687 -
             ((C11186 + C11185) * C2680 + (C11184 + C11183) * C2686) +
             (C11696 + C11695) * C48135) *
                C5040 +
            ((C10756 * C1007 + C10754 * C1015 + C10757 * C2326 +
              C48410 * C2327) *
                 C2687 -
             ((C11475 + C11476) * C2680 + (C11477 + C11478) * C2686) +
             (C10756 * C1016 + C10754 * C1022 + C10757 * C2328 +
              C48410 * C2329) *
                 C48135) *
                C48377) *
               C48278 * C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C2686 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C2680 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C2687 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C48135) *
               C5040 +
           ((C10791 + C10792) * C2686 + (C10793 + C10794) * C2680 -
            (C10985 + C10986) * C2687 - (C10987 + C10988) * C48135) *
               C48377) *
              C48278 * C48044 * C48437 +
          (((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
             C48410 * C1421) *
                C2687 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C2680 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C2686) +
            (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
             C48410 * C1436) *
                C48135) *
               C5040 +
           ((C11689 + C11690) * C2687 -
            ((C11182 + C11181) * C2680 + (C11180 + C11179) * C2686) +
            (C11691 + C11692) * C48135) *
               C48377) *
              C48278 * C48044 * C48434 +
          (((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                C2686 +
            (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                C2680 -
            (C10757 * C2570 + C48410 * C2573 + C10756 * C1409 +
             C10754 * C1421) *
                C2687 -
            (C10757 * C2574 + C48410 * C2579 + C10756 * C1422 +
             C10754 * C1436) *
                C48135) *
               C5040 +
           ((C11187 + C11188) * C2686 + (C11189 + C11190) * C2680 -
            (C13133 + C13134) * C2687 - (C13135 + C13136) * C48135) *
               C48377) *
              C48278 * C48044 * C48425 +
          (((C10756 * C2570 + C10754 * C2573 + C10757 * C7164 +
             C48410 * C7166) *
                C2687 -
            ((C10757 * C2169 + C48410 * C2177 + C10756 * C2166 +
              C10754 * C2176) *
                 C2680 +
             (C10757 * C2159 + C48410 * C2168 + C10756 * C2158 +
              C10754 * C2167) *
                 C2686) +
            (C10756 * C2574 + C10754 * C2579 + C10757 * C7167 +
             C48410 * C7170) *
                C48135) *
               C5040 +
           ((C10756 * C2571 + C10754 * C2575 + C10757 * C7165 +
             C48410 * C7168) *
                C2687 -
            ((C13278 + C13277) * C2680 + (C13276 + C13275) * C2686) +
            (C10756 * C2576 + C10754 * C2580 + C10757 * C7169 +
             C48410 * C7171) *
                C48135) *
               C48377) *
              C48278 * C48044 * C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C2686 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C2680 -
             (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                 C2687 -
             (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                 C48135) *
                C5040 +
            ((C10791 + C10792) * C2686 + (C10793 + C10794) * C2680 -
             (C10985 + C10986) * C2687 - (C10987 + C10988) * C48135) *
                C48377) *
               C48278 * C48344 +
           (((C10986 + C10985) * C2687 -
             ((C10794 + C10793) * C2680 + (C10792 + C10791) * C2686) +
             (C10988 + C10987) * C48135) *
                C5040 +
            ((C10993 + C10994) * C2687 -
             ((C10795 + C10796) * C2680 + (C10797 + C10798) * C2686) +
             (C10995 + C10996) * C48135) *
                C48377) *
               C48278 * C48054) *
              C48173 +
          ((((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
              C48410 * C1421) *
                 C2687 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C2680 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C2686) +
             (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
              C48410 * C1436) *
                 C48135) *
                C5040 +
            ((C11689 + C11690) * C2687 -
             ((C11182 + C11181) * C2680 + (C11180 + C11179) * C2686) +
             (C11691 + C11692) * C48135) *
                C48377) *
               C48278 * C48344 +
           (((C11179 + C11180) * C2686 + (C11181 + C11182) * C2680 -
             (C11690 + C11689) * C2687 - (C11692 + C11691) * C48135) *
                C5040 +
            ((C11183 + C11184) * C2686 + (C11185 + C11186) * C2680 -
             (C11693 + C11694) * C2687 - (C11695 + C11696) * C48135) *
                C48377) *
               C48278 * C48054) *
              C48180 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C2686 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C2680 -
             (C10757 * C2570 + C48410 * C2573 + C10756 * C1409 +
              C10754 * C1421) *
                 C2687 -
             (C10757 * C2574 + C48410 * C2579 + C10756 * C1422 +
              C10754 * C1436) *
                 C48135) *
                C5040 +
            ((C11187 + C11188) * C2686 + (C11189 + C11190) * C2680 -
             (C13133 + C13134) * C2687 - (C13135 + C13136) * C48135) *
                C48377) *
               C48278 * C48344 +
           (((C13134 + C13133) * C2687 -
             ((C11190 + C11189) * C2680 + (C11188 + C11187) * C2686) +
             (C13136 + C13135) * C48135) *
                C5040 +
            ((C10756 * C1413 + C10754 * C1429 + C10757 * C2572 +
              C48410 * C2577) *
                 C2687 -
             ((C11191 + C11192) * C2680 + (C11193 + C11194) * C2686) +
             (C10756 * C1430 + C10754 * C1440 + C10757 * C2578 +
              C48410 * C2581) *
                 C48135) *
                C48377) *
               C48278 * C48054) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C2686 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C2680 -
             (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                 C2687 -
             (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                 C48135) *
                C5040 +
            ((C10791 + C10792) * C2686 + (C10793 + C10794) * C2680 -
             (C10985 + C10986) * C2687 - (C10987 + C10988) * C48135) *
                C48377) *
               C48278 * C48426 +
           (((C10986 + C10985) * C2687 -
             ((C10794 + C10793) * C2680 + (C10792 + C10791) * C2686) +
             (C10988 + C10987) * C48135) *
                C5040 +
            ((C10993 + C10994) * C2687 -
             ((C10795 + C10796) * C2680 + (C10797 + C10798) * C2686) +
             (C10995 + C10996) * C48135) *
                C48377) *
               C48278 * C48413 +
           (((C10798 + C10797) * C2686 + (C10796 + C10795) * C2680 -
             (C10994 + C10993) * C2687 - (C10996 + C10995) * C48135) *
                C5040 +
            ((C10799 + C10800) * C2686 + (C10801 + C10802) * C2680 -
             (C11333 + C11334) * C2687 - (C11335 + C11336) * C48135) *
                C48377) *
               C48278 * C48384) *
              C3547 +
          ((((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
              C48410 * C1421) *
                 C2687 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C2680 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C2686) +
             (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
              C48410 * C1436) *
                 C48135) *
                C5040 +
            ((C11689 + C11690) * C2687 -
             ((C11182 + C11181) * C2680 + (C11180 + C11179) * C2686) +
             (C11691 + C11692) * C48135) *
                C48377) *
               C48278 * C48426 +
           (((C11179 + C11180) * C2686 + (C11181 + C11182) * C2680 -
             (C11690 + C11689) * C2687 - (C11692 + C11691) * C48135) *
                C5040 +
            ((C11183 + C11184) * C2686 + (C11185 + C11186) * C2680 -
             (C11693 + C11694) * C2687 - (C11695 + C11696) * C48135) *
                C48377) *
               C48278 * C48413 +
           (((C11694 + C11693) * C2687 -
             ((C11186 + C11185) * C2680 + (C11184 + C11183) * C2686) +
             (C11696 + C11695) * C48135) *
                C5040 +
            ((C10756 * C1007 + C10754 * C1015 + C10757 * C2326 +
              C48410 * C2327) *
                 C2687 -
             ((C11475 + C11476) * C2680 + (C11477 + C11478) * C2686) +
             (C10756 * C1016 + C10754 * C1022 + C10757 * C2328 +
              C48410 * C2329) *
                 C48135) *
                C48377) *
               C48278 * C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C2814 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48436 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C2815 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C48432 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C2816 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C48422 -
            (C10757 * C1854 + C48410 * C1857 + C10756 * C1272 +
             C10754 * C1278) *
                C2817 -
            (C10757 * C1858 + C48410 * C1863 + C10756 * C1279 +
             C10754 * C1290) *
                C48400) *
               C5040 +
           ((C10791 + C10792) * C2814 + (C10793 + C10794) * C48436 -
            (C10985 + C10986) * C2815 - (C10987 + C10988) * C48432 +
            (C10989 + C10990) * C2816 + (C10991 + C10992) * C48422 -
            (C12209 + C12210) * C2817 - (C12211 + C12212) * C48400) *
               C48377) *
              C48278 * C48044 * C3547 +
          (((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
             C48410 * C1421) *
                C2815 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48436 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C2814) +
            (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
             C48410 * C1436) *
                C48432 -
            (C10757 * C1410 + C48410 * C1423 + C10756 * C1406 +
             C10754 * C1415) *
                C2816 -
            (C10757 * C1424 + C48410 * C1437 + C10756 * C1416 +
             C10754 * C1433) *
                C48422 +
            (C10756 * C1854 + C10754 * C1857 + C10757 * C6270 +
             C48410 * C6272) *
                C2817 +
            (C10756 * C1858 + C10754 * C1863 + C10757 * C6273 +
             C48410 * C6276) *
                C48400) *
               C5040 +
           ((C11689 + C11690) * C2815 -
            ((C11182 + C11181) * C48436 + (C11180 + C11179) * C2814) +
            (C11691 + C11692) * C48432 - (C12415 + C12416) * C2816 -
            (C12417 + C12418) * C48422 +
            (C10756 * C1855 + C10754 * C1859 + C10757 * C6271 +
             C48410 * C6274) *
                C2817 +
            (C10756 * C1860 + C10754 * C1864 + C10757 * C6275 +
             C48410 * C6277) *
                C48400) *
               C48377) *
              C48278 * C48044 * C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C1546 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C1540 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C1547 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C1541 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C1548 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C1542 -
            (C10757 * C1854 + C48410 * C1857 + C10756 * C1272 +
             C10754 * C1278) *
                C1549 -
            (C10757 * C1858 + C48410 * C1863 + C10756 * C1279 +
             C10754 * C1290) *
                C48400) *
               C5040 +
           ((C10791 + C10792) * C1546 + (C10793 + C10794) * C1540 -
            (C10985 + C10986) * C1547 - (C10987 + C10988) * C1541 +
            (C10989 + C10990) * C1548 + (C10991 + C10992) * C1542 -
            (C12209 + C12210) * C1549 - (C12211 + C12212) * C48400) *
               C48377) *
              C48278 * C48344 +
          (((C10986 + C10985) * C1547 -
            ((C10794 + C10793) * C1540 + (C10792 + C10791) * C1546) +
            (C10988 + C10987) * C1541 - (C10990 + C10989) * C1548 -
            (C10992 + C10991) * C1542 + (C12210 + C12209) * C1549 +
            (C12212 + C12211) * C48400) *
               C5040 +
           ((C10993 + C10994) * C1547 -
            ((C10795 + C10796) * C1540 + (C10797 + C10798) * C1546) +
            (C10995 + C10996) * C1541 - (C10997 + C10998) * C1548 -
            (C10999 + C11000) * C1542 +
            (C10756 * C1276 + C10754 * C1286 + C10757 * C1856 +
             C48410 * C1861) *
                C1549 +
            (C10756 * C1287 + C10754 * C1294 + C10757 * C1862 +
             C48410 * C1865) *
                C48400) *
               C48377) *
              C48278 * C48054) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C711 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48358 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C712 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C48135) *
               C5040 +
           ((C10791 + C10792) * C711 + (C10793 + C10794) * C48358 -
            (C10985 + C10986) * C712 - (C10987 + C10988) * C48135) *
               C48377) *
              C48278 * C707 +
          (((C10986 + C10985) * C712 -
            ((C10794 + C10793) * C48358 + (C10792 + C10791) * C711) +
            (C10988 + C10987) * C48135) *
               C5040 +
           ((C10993 + C10994) * C712 -
            ((C10795 + C10796) * C48358 + (C10797 + C10798) * C711) +
            (C10995 + C10996) * C48135) *
               C48377) *
              C48278 * C708 +
          (((C10798 + C10797) * C711 + (C10796 + C10795) * C48358 -
            (C10994 + C10993) * C712 - (C10996 + C10995) * C48135) *
               C5040 +
           ((C10799 + C10800) * C711 + (C10801 + C10802) * C48358 -
            (C11333 + C11334) * C712 - (C11335 + C11336) * C48135) *
               C48377) *
              C48278 * C709 +
          (((C11334 + C11333) * C712 -
            ((C10802 + C10801) * C48358 + (C10800 + C10799) * C711) +
            (C11336 + C11335) * C48135) *
               C5040 +
           ((C10756 * C313 + C10754 * C331 + C10757 * C1008 + C48410 * C1017) *
                C712 -
            ((C10803 + C10804) * C48358 + (C10805 + C10806) * C711) +
            (C10756 * C332 + C10754 * C343 + C10757 * C1018 + C48410 * C1023) *
                C48135) *
               C48377) *
              C48278 * C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C711 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48358 -
             (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                 C712 -
             (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                 C48135) *
                C5040 +
            ((C10791 + C10792) * C711 + (C10793 + C10794) * C48358 -
             (C10985 + C10986) * C712 - (C10987 + C10988) * C48135) *
                C48377) *
               C48278 * C48344 +
           (((C10986 + C10985) * C712 -
             ((C10794 + C10793) * C48358 + (C10792 + C10791) * C711) +
             (C10988 + C10987) * C48135) *
                C5040 +
            ((C10993 + C10994) * C712 -
             ((C10795 + C10796) * C48358 + (C10797 + C10798) * C711) +
             (C10995 + C10996) * C48135) *
                C48377) *
               C48278 * C48054) *
              C1976 +
          ((((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
              C48410 * C1421) *
                 C712 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C48358 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C711) +
             (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
              C48410 * C1436) *
                 C48135) *
                C5040 +
            ((C11689 + C11690) * C712 -
             ((C11182 + C11181) * C48358 + (C11180 + C11179) * C711) +
             (C11691 + C11692) * C48135) *
                C48377) *
               C48278 * C48344 +
           (((C11179 + C11180) * C711 + (C11181 + C11182) * C48358 -
             (C11690 + C11689) * C712 - (C11692 + C11691) * C48135) *
                C5040 +
            ((C11183 + C11184) * C711 + (C11185 + C11186) * C48358 -
             (C11693 + C11694) * C712 - (C11695 + C11696) * C48135) *
                C48377) *
               C48278 * C48054) *
              C1977 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C711 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C48358 -
             (C10757 * C2570 + C48410 * C2573 + C10756 * C1409 +
              C10754 * C1421) *
                 C712 -
             (C10757 * C2574 + C48410 * C2579 + C10756 * C1422 +
              C10754 * C1436) *
                 C48135) *
                C5040 +
            ((C11187 + C11188) * C711 + (C11189 + C11190) * C48358 -
             (C13133 + C13134) * C712 - (C13135 + C13136) * C48135) *
                C48377) *
               C48278 * C48344 +
           (((C13134 + C13133) * C712 -
             ((C11190 + C11189) * C48358 + (C11188 + C11187) * C711) +
             (C13136 + C13135) * C48135) *
                C5040 +
            ((C10756 * C1413 + C10754 * C1429 + C10757 * C2572 +
              C48410 * C2577) *
                 C712 -
             ((C11191 + C11192) * C48358 + (C11193 + C11194) * C711) +
             (C10756 * C1430 + C10754 * C1440 + C10757 * C2578 +
              C48410 * C2581) *
                 C48135) *
                C48377) *
               C48278 * C48054) *
              C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C1546 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C1540 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C1547 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C1541 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C1548 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C1542 -
            (C10757 * C1854 + C48410 * C1857 + C10756 * C1272 +
             C10754 * C1278) *
                C1549 -
            (C10757 * C1858 + C48410 * C1863 + C10756 * C1279 +
             C10754 * C1290) *
                C48400) *
               C5040 +
           ((C10791 + C10792) * C1546 + (C10793 + C10794) * C1540 -
            (C10985 + C10986) * C1547 - (C10987 + C10988) * C1541 +
            (C10989 + C10990) * C1548 + (C10991 + C10992) * C1542 -
            (C12209 + C12210) * C1549 - (C12211 + C12212) * C48400) *
               C48377) *
              C48278 * C48044 * C48359 +
          (((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
             C48410 * C1421) *
                C1547 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C1540 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C1546) +
            (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
             C48410 * C1436) *
                C1541 -
            (C10757 * C1410 + C48410 * C1423 + C10756 * C1406 +
             C10754 * C1415) *
                C1548 -
            (C10757 * C1424 + C48410 * C1437 + C10756 * C1416 +
             C10754 * C1433) *
                C1542 +
            (C10756 * C1854 + C10754 * C1857 + C10757 * C6270 +
             C48410 * C6272) *
                C1549 +
            (C10756 * C1858 + C10754 * C1863 + C10757 * C6273 +
             C48410 * C6276) *
                C48400) *
               C5040 +
           ((C11689 + C11690) * C1547 -
            ((C11182 + C11181) * C1540 + (C11180 + C11179) * C1546) +
            (C11691 + C11692) * C1541 - (C12415 + C12416) * C1548 -
            (C12417 + C12418) * C1542 +
            (C10756 * C1855 + C10754 * C1859 + C10757 * C6271 +
             C48410 * C6274) *
                C1549 +
            (C10756 * C1860 + C10754 * C1864 + C10757 * C6275 +
             C48410 * C6277) *
                C48400) *
               C48377) *
              C48278 * C48044 * C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C711 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48358 -
             (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                 C712 -
             (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                 C48135) *
                C5040 +
            ((C10791 + C10792) * C711 + (C10793 + C10794) * C48358 -
             (C10985 + C10986) * C712 - (C10987 + C10988) * C48135) *
                C48377) *
               C48278 * C299 +
           (((C10986 + C10985) * C712 -
             ((C10794 + C10793) * C48358 + (C10792 + C10791) * C711) +
             (C10988 + C10987) * C48135) *
                C5040 +
            ((C10993 + C10994) * C712 -
             ((C10795 + C10796) * C48358 + (C10797 + C10798) * C711) +
             (C10995 + C10996) * C48135) *
                C48377) *
               C48278 * C300 +
           (((C10798 + C10797) * C711 + (C10796 + C10795) * C48358 -
             (C10994 + C10993) * C712 - (C10996 + C10995) * C48135) *
                C5040 +
            ((C10799 + C10800) * C711 + (C10801 + C10802) * C48358 -
             (C11333 + C11334) * C712 - (C11335 + C11336) * C48135) *
                C48377) *
               C48278 * C48384) *
              C48359 +
          ((((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
              C48410 * C1421) *
                 C712 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C48358 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C711) +
             (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
              C48410 * C1436) *
                 C48135) *
                C5040 +
            ((C11689 + C11690) * C712 -
             ((C11182 + C11181) * C48358 + (C11180 + C11179) * C711) +
             (C11691 + C11692) * C48135) *
                C48377) *
               C48278 * C299 +
           (((C11179 + C11180) * C711 + (C11181 + C11182) * C48358 -
             (C11690 + C11689) * C712 - (C11692 + C11691) * C48135) *
                C5040 +
            ((C11183 + C11184) * C711 + (C11185 + C11186) * C48358 -
             (C11693 + C11694) * C712 - (C11695 + C11696) * C48135) *
                C48377) *
               C48278 * C300 +
           (((C11694 + C11693) * C712 -
             ((C11186 + C11185) * C48358 + (C11184 + C11183) * C711) +
             (C11696 + C11695) * C48135) *
                C5040 +
            ((C10756 * C1007 + C10754 * C1015 + C10757 * C2326 +
              C48410 * C2327) *
                 C712 -
             ((C11475 + C11476) * C48358 + (C11477 + C11478) * C711) +
             (C10756 * C1016 + C10754 * C1022 + C10757 * C2328 +
              C48410 * C2329) *
                 C48135) *
                C48377) *
               C48278 * C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C711 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48358 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C712 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C48135) *
               C5040 +
           ((C10791 + C10792) * C711 + (C10793 + C10794) * C48358 -
            (C10985 + C10986) * C712 - (C10987 + C10988) * C48135) *
               C48377) *
              C48278 * C48044 * C2448 +
          (((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
             C48410 * C1421) *
                C712 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48358 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C711) +
            (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
             C48410 * C1436) *
                C48135) *
               C5040 +
           ((C11689 + C11690) * C712 -
            ((C11182 + C11181) * C48358 + (C11180 + C11179) * C711) +
            (C11691 + C11692) * C48135) *
               C48377) *
              C48278 * C48044 * C2449 +
          (((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                C711 +
            (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                C48358 -
            (C10757 * C2570 + C48410 * C2573 + C10756 * C1409 +
             C10754 * C1421) *
                C712 -
            (C10757 * C2574 + C48410 * C2579 + C10756 * C1422 +
             C10754 * C1436) *
                C48135) *
               C5040 +
           ((C11187 + C11188) * C711 + (C11189 + C11190) * C48358 -
            (C13133 + C13134) * C712 - (C13135 + C13136) * C48135) *
               C48377) *
              C48278 * C48044 * C2450 +
          (((C10756 * C2570 + C10754 * C2573 + C10757 * C7164 +
             C48410 * C7166) *
                C712 -
            ((C10757 * C2169 + C48410 * C2177 + C10756 * C2166 +
              C10754 * C2176) *
                 C48358 +
             (C10757 * C2159 + C48410 * C2168 + C10756 * C2158 +
              C10754 * C2167) *
                 C711) +
            (C10756 * C2574 + C10754 * C2579 + C10757 * C7167 +
             C48410 * C7170) *
                C48135) *
               C5040 +
           ((C10756 * C2571 + C10754 * C2575 + C10757 * C7165 +
             C48410 * C7168) *
                C712 -
            ((C13278 + C13277) * C48358 + (C13276 + C13275) * C711) +
            (C10756 * C2576 + C10754 * C2580 + C10757 * C7169 +
             C48410 * C7171) *
                C48135) *
               C48377) *
              C48278 * C48044 * C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C10756 * C115 + C10754 * C122 + C10757 * C520 +
                 C48410 * C534) *
                    C114 +
                (C10756 * C123 + C10754 * C136 + C10757 * C533 +
                 C48410 * C550) *
                    C48072) *
                   C5040 +
               ((C10791 + C10792) * C114 + (C10793 + C10794) * C48072) *
                   C48377) *
                  C48278 * C107 -
              (((C10795 + C10796) * C48072 + (C10797 + C10798) * C114) *
                   C48377 +
               ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) *
                   C5040) *
                  C48278 * C108 +
              (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C5040 +
               ((C10799 + C10800) * C114 + (C10801 + C10802) * C48072) *
                   C48377) *
                  C48278 * C109 -
              (((C10803 + C10804) * C48072 + (C10805 + C10806) * C114) *
                   C48377 +
               ((C10802 + C10801) * C48072 + (C10800 + C10799) * C114) *
                   C5040) *
                  C48278 * C110 +
              (((C10806 + C10805) * C114 + (C10804 + C10803) * C48072) * C5040 +
               ((C10756 * C120 + C10754 * C133 + C10757 * C845 +
                 C48410 * C846) *
                    C114 +
                (C10756 * C132 + C10754 * C141 + C10757 * C847 +
                 C48410 * C848) *
                    C48072) *
                   C48377) *
                  C48278 * C111) *
             C48090 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C10756 * C115 + C10754 * C122 + C10757 * C520 +
                 C48410 * C534) *
                    C302 +
                (C10756 * C123 + C10754 * C136 + C10757 * C533 +
                 C48410 * C550) *
                    C48429 -
                (C10757 * C1004 + C48410 * C1009 + C10756 * C305 +
                 C10754 * C315) *
                    C303 -
                (C10757 * C1010 + C48410 * C1019 + C10756 * C316 +
                 C10754 * C335) *
                    C48417 +
                (C10756 * C306 + C10754 * C317 + C10757 * C1406 +
                 C48410 * C1415) *
                    C304 +
                (C10756 * C318 + C10754 * C336 + C10757 * C1416 +
                 C48410 * C1433) *
                    C48390) *
                   C5040 +
               ((C10791 + C10792) * C302 + (C10793 + C10794) * C48429 -
                (C10985 + C10986) * C303 - (C10987 + C10988) * C48417 +
                (C10989 + C10990) * C304 + (C10991 + C10992) * C48390) *
                   C48377) *
                  C48278 * C299 +
              (((C10986 + C10985) * C303 -
                ((C10794 + C10793) * C48429 + (C10792 + C10791) * C302) +
                (C10988 + C10987) * C48417 - (C10990 + C10989) * C304 -
                (C10992 + C10991) * C48390) *
                   C5040 +
               ((C10993 + C10994) * C303 -
                ((C10795 + C10796) * C48429 + (C10797 + C10798) * C302) +
                (C10995 + C10996) * C48417 - (C10997 + C10998) * C304 -
                (C10999 + C11000) * C48390) *
                   C48377) *
                  C48278 * C300 +
              (((C10798 + C10797) * C302 + (C10796 + C10795) * C48429 -
                (C10994 + C10993) * C303 - (C10996 + C10995) * C48417 +
                (C10998 + C10997) * C304 + (C11000 + C10999) * C48390) *
                   C5040 +
               ((C10799 + C10800) * C302 + (C10801 + C10802) * C48429 -
                (C10757 * C1007 + C48410 * C1015 + C10756 * C311 +
                 C10754 * C327) *
                    C303 -
                (C10757 * C1016 + C48410 * C1022 + C10756 * C328 +
                 C10754 * C341) *
                    C48417 +
                (C10756 * C312 + C10754 * C329 + C10757 * C1728 +
                 C48410 * C1729) *
                    C304 +
                (C10756 * C330 + C10754 * C342 + C10757 * C1730 +
                 C48410 * C1731) *
                    C48390) *
                   C48377) *
                  C48278 * C48384) *
             C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C5040 +
            ((C10791 + C10792) * C114 + (C10793 + C10794) * C48072) * C48377) *
               C48278 * C299 -
           (((C10795 + C10796) * C48072 + (C10797 + C10798) * C114) * C48377 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C5040) *
               C48278 * C300 +
           (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C5040 +
            ((C10799 + C10800) * C114 + (C10801 + C10802) * C48072) * C48377) *
               C48278 * C48384) *
              C48430 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C5040 +
            ((C11183 + C11184) * C114 + (C11185 + C11186) * C48072) * C48377) *
               C48278 * C300 -
           (((C11182 + C11181) * C48072 + (C11180 + C11179) * C114) * C48377 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C5040) *
               C48278 * C299 -
           (((C10757 * C543 + C48410 * C555 + C10756 * C532 + C10754 * C549) *
                 C48072 +
             (C10757 * C525 + C48410 * C544 + C10756 * C519 + C10754 * C531) *
                 C114) *
                C48377 +
            ((C11186 + C11185) * C48072 + (C11184 + C11183) * C114) * C5040) *
               C48278 * C48384) *
              C48419 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C114 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C48072) *
                C5040 +
            ((C11187 + C11188) * C114 + (C11189 + C11190) * C48072) * C48377) *
               C48278 * C299 -
           (((C11191 + C11192) * C48072 + (C11193 + C11194) * C114) * C48377 +
            ((C11190 + C11189) * C48072 + (C11188 + C11187) * C114) * C5040) *
               C48278 * C300 +
           (((C11194 + C11193) * C114 + (C11192 + C11191) * C48072) * C5040 +
            ((C10756 * C525 + C10754 * C544 + C10757 * C2452 + C48410 * C2453) *
                 C114 +
             (C10756 * C543 + C10754 * C555 + C10757 * C2454 + C48410 * C2455) *
                 C48072) *
                C48377) *
               C48278 * C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C1173 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C1167 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C1174 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C1168 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C1175 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C48390) *
               C5040 +
           ((C10791 + C10792) * C1173 + (C10793 + C10794) * C1167 -
            (C10985 + C10986) * C1174 - (C10987 + C10988) * C1168 +
            (C10989 + C10990) * C1175 + (C10991 + C10992) * C48390) *
               C48377) *
              C48278 * C48426 +
          (((C10986 + C10985) * C1174 -
            ((C10794 + C10793) * C1167 + (C10792 + C10791) * C1173) +
            (C10988 + C10987) * C1168 - (C10990 + C10989) * C1175 -
            (C10992 + C10991) * C48390) *
               C5040 +
           ((C10993 + C10994) * C1174 -
            ((C10795 + C10796) * C1167 + (C10797 + C10798) * C1173) +
            (C10995 + C10996) * C1168 - (C10997 + C10998) * C1175 -
            (C10999 + C11000) * C48390) *
               C48377) *
              C48278 * C48413 +
          (((C10798 + C10797) * C1173 + (C10796 + C10795) * C1167 -
            (C10994 + C10993) * C1174 - (C10996 + C10995) * C1168 +
            (C10998 + C10997) * C1175 + (C11000 + C10999) * C48390) *
               C5040 +
           ((C10799 + C10800) * C1173 + (C10801 + C10802) * C1167 -
            (C11333 + C11334) * C1174 - (C11335 + C11336) * C1168 +
            (C10756 * C312 + C10754 * C329 + C10757 * C1728 + C48410 * C1729) *
                C1175 +
            (C10756 * C330 + C10754 * C342 + C10757 * C1730 + C48410 * C1731) *
                C48390) *
               C48377) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
               C1267 +
           (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
               C1261 -
           (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
               C1268 -
           (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
               C1262 +
           (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
               C1269 +
           (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
               C1263 -
           (C10757 * C1854 + C48410 * C1857 + C10756 * C1272 + C10754 * C1278) *
               C1270 -
           (C10757 * C1858 + C48410 * C1863 + C10756 * C1279 + C10754 * C1290) *
               C1264 +
           (C10756 * C1273 + C10754 * C1280 + C10757 * C6776 + C48410 * C6778) *
               C1271 +
           (C10756 * C1281 + C10754 * C1291 + C10757 * C6779 + C48410 * C6782) *
               C1265) *
              C5040 +
          ((C10791 + C10792) * C1267 + (C10793 + C10794) * C1261 -
           (C10985 + C10986) * C1268 - (C10987 + C10988) * C1262 +
           (C10989 + C10990) * C1269 + (C10991 + C10992) * C1263 -
           (C10757 * C1855 + C48410 * C1859 + C10756 * C1274 + C10754 * C1282) *
               C1270 -
           (C10757 * C1860 + C48410 * C1864 + C10756 * C1283 + C10754 * C1292) *
               C1264 +
           (C10756 * C1275 + C10754 * C1284 + C10757 * C6777 + C48410 * C6780) *
               C1271 +
           (C10756 * C1285 + C10754 * C1293 + C10757 * C6781 + C48410 * C6783) *
               C1265) *
              C48377) *
         C48278 * C48044 * C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C1173 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C1167 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C1174 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C1168 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C1175 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C48390) *
               C5040 +
           ((C10791 + C10792) * C1173 + (C10793 + C10794) * C1167 -
            (C10985 + C10986) * C1174 - (C10987 + C10988) * C1168 +
            (C10989 + C10990) * C1175 + (C10991 + C10992) * C48390) *
               C48377) *
              C48278 * C48044 * C48430 +
          (((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
             C48410 * C1421) *
                C1174 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C1167 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C1173) +
            (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
             C48410 * C1436) *
                C1168 -
            (C10757 * C1410 + C48410 * C1423 + C10756 * C1406 +
             C10754 * C1415) *
                C1175 -
            (C10757 * C1424 + C48410 * C1437 + C10756 * C1416 +
             C10754 * C1433) *
                C48390) *
               C5040 +
           ((C11689 + C11690) * C1174 -
            ((C11182 + C11181) * C1167 + (C11180 + C11179) * C1173) +
            (C11691 + C11692) * C1168 -
            (C10757 * C1412 + C48410 * C1427 + C10756 * C1407 +
             C10754 * C1417) *
                C1175 -
            (C10757 * C1428 + C48410 * C1439 + C10756 * C1418 +
             C10754 * C1434) *
                C48390) *
               C48377) *
              C48278 * C48044 * C48419 +
          (((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                C1173 +
            (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                C1167 -
            (C10757 * C2570 + C48410 * C2573 + C10756 * C1409 +
             C10754 * C1421) *
                C1174 -
            (C10757 * C2574 + C48410 * C2579 + C10756 * C1422 +
             C10754 * C1436) *
                C1168 +
            (C10756 * C1410 + C10754 * C1423 + C10757 * C7638 +
             C48410 * C7640) *
                C1175 +
            (C10756 * C1424 + C10754 * C1437 + C10757 * C7641 +
             C48410 * C7644) *
                C48390) *
               C5040 +
           ((C11187 + C11188) * C1173 + (C11189 + C11190) * C1167 -
            (C10757 * C2571 + C48410 * C2575 + C10756 * C1411 +
             C10754 * C1425) *
                C1174 -
            (C10757 * C2576 + C48410 * C2580 + C10756 * C1426 +
             C10754 * C1438) *
                C1168 +
            (C10756 * C1412 + C10754 * C1427 + C10757 * C7639 +
             C48410 * C7642) *
                C1175 +
            (C10756 * C1428 + C10754 * C1439 + C10757 * C7643 +
             C48410 * C7645) *
                C48390) *
               C48377) *
              C48278 * C48044 * C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C5040 +
            ((C10791 + C10792) * C114 + (C10793 + C10794) * C48072) * C48377) *
               C48278 * C48426 -
           (((C10795 + C10796) * C48072 + (C10797 + C10798) * C114) * C48377 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C5040) *
               C48278 * C48413 +
           (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C5040 +
            ((C10799 + C10800) * C114 + (C10801 + C10802) * C48072) * C48377) *
               C48278 * C48384) *
              C1976 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C5040 +
            ((C11183 + C11184) * C114 + (C11185 + C11186) * C48072) * C48377) *
               C48278 * C48413 -
           (((C11182 + C11181) * C48072 + (C11180 + C11179) * C114) * C48377 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C5040) *
               C48278 * C48426 -
           (((C11475 + C11476) * C48072 + (C11477 + C11478) * C114) * C48377 +
            ((C11186 + C11185) * C48072 + (C11184 + C11183) * C114) * C5040) *
               C48278 * C48384) *
              C1977 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C114 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C48072) *
                C5040 +
            ((C11187 + C11188) * C114 + (C11189 + C11190) * C48072) * C48377) *
               C48278 * C48426 -
           (((C11191 + C11192) * C48072 + (C11193 + C11194) * C114) * C48377 +
            ((C11190 + C11189) * C48072 + (C11188 + C11187) * C114) * C5040) *
               C48278 * C48413 +
           (((C11194 + C11193) * C114 + (C11192 + C11191) * C48072) * C5040 +
            ((C10756 * C525 + C10754 * C544 + C10757 * C2452 + C48410 * C2453) *
                 C114 +
             (C10756 * C543 + C10754 * C555 + C10757 * C2454 + C48410 * C2455) *
                 C48072) *
                C48377) *
               C48278 * C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C302 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48429 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C303 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C48417 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C304 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C48390) *
               C5040 +
           ((C10791 + C10792) * C302 + (C10793 + C10794) * C48429 -
            (C10985 + C10986) * C303 - (C10987 + C10988) * C48417 +
            (C10989 + C10990) * C304 + (C10991 + C10992) * C48390) *
               C48377) *
              C48278 * C48044 * C1976 +
          (((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
             C48410 * C1421) *
                C303 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48429 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C302) +
            (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
             C48410 * C1436) *
                C48417 -
            (C10757 * C1410 + C48410 * C1423 + C10756 * C1406 +
             C10754 * C1415) *
                C304 -
            (C10757 * C1424 + C48410 * C1437 + C10756 * C1416 +
             C10754 * C1433) *
                C48390) *
               C5040 +
           ((C11689 + C11690) * C303 -
            ((C11182 + C11181) * C48429 + (C11180 + C11179) * C302) +
            (C11691 + C11692) * C48417 - (C12415 + C12416) * C304 -
            (C12417 + C12418) * C48390) *
               C48377) *
              C48278 * C48044 * C1977 +
          (((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                C302 +
            (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                C48429 -
            (C10757 * C2570 + C48410 * C2573 + C10756 * C1409 +
             C10754 * C1421) *
                C303 -
            (C10757 * C2574 + C48410 * C2579 + C10756 * C1422 +
             C10754 * C1436) *
                C48417 +
            (C10756 * C1410 + C10754 * C1423 + C10757 * C7638 +
             C48410 * C7640) *
                C304 +
            (C10756 * C1424 + C10754 * C1437 + C10757 * C7641 +
             C48410 * C7644) *
                C48390) *
               C5040 +
           ((C11187 + C11188) * C302 + (C11189 + C11190) * C48429 -
            (C10757 * C2571 + C48410 * C2575 + C10756 * C1411 +
             C10754 * C1425) *
                C303 -
            (C10757 * C2576 + C48410 * C2580 + C10756 * C1426 +
             C10754 * C1438) *
                C48417 +
            (C10756 * C1412 + C10754 * C1427 + C10757 * C7639 +
             C48410 * C7642) *
                C304 +
            (C10756 * C1428 + C10754 * C1439 + C10757 * C7643 +
             C48410 * C7645) *
                C48390) *
               C48377) *
              C48278 * C48044 * C48393)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C114 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48072) *
               C5040 +
           ((C10791 + C10792) * C114 + (C10793 + C10794) * C48072) * C48377) *
              C48278 * C48044 * C2151 -
          (((C11182 + C11181) * C48072 + (C11180 + C11179) * C114) * C48377 +
           ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                C48072 +
            (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                C114) *
               C5040) *
              C48278 * C48044 * C2152 +
          (((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                C114 +
            (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                C48072) *
               C5040 +
           ((C11187 + C11188) * C114 + (C11189 + C11190) * C48072) * C48377) *
              C48278 * C48044 * C2153 -
          (((C10757 * C2171 + C48410 * C2178 + C10756 * C2164 +
             C10754 * C2175) *
                C48072 +
            (C10757 * C2160 + C48410 * C2170 + C10756 * C2157 +
             C10754 * C2165) *
                C114) *
               C48377 +
           ((C10757 * C2169 + C48410 * C2177 + C10756 * C2166 +
             C10754 * C2176) *
                C48072 +
            (C10757 * C2159 + C48410 * C2168 + C10756 * C2158 +
             C10754 * C2167) *
                C114) *
               C5040) *
              C48278 * C48044 * C2154 +
          (((C10756 * C2159 + C10754 * C2168 + C10757 * C12922 +
             C48410 * C12924) *
                C114 +
            (C10756 * C2169 + C10754 * C2177 + C10757 * C12925 +
             C48410 * C12928) *
                C48072) *
               C5040 +
           ((C10756 * C2160 + C10754 * C2170 + C10757 * C12923 +
             C48410 * C12926) *
                C114 +
            (C10756 * C2171 + C10754 * C2178 + C10757 * C12927 +
             C48410 * C12929) *
                C48072) *
               C48377) *
              C48278 * C48044 * C2155)) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C1173 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C1167 -
             (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                 C1174 -
             (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                 C1168 +
             (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                 C1175 +
             (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                 C48390) *
                C5040 +
            ((C10791 + C10792) * C1173 + (C10793 + C10794) * C1167 -
             (C10985 + C10986) * C1174 - (C10987 + C10988) * C1168 +
             (C10989 + C10990) * C1175 + (C10991 + C10992) * C48390) *
                C48377) *
               C48278 * C48344 +
           (((C10986 + C10985) * C1174 -
             ((C10794 + C10793) * C1167 + (C10792 + C10791) * C1173) +
             (C10988 + C10987) * C1168 - (C10990 + C10989) * C1175 -
             (C10992 + C10991) * C48390) *
                C5040 +
            ((C10993 + C10994) * C1174 -
             ((C10795 + C10796) * C1167 + (C10797 + C10798) * C1173) +
             (C10995 + C10996) * C1168 - (C10997 + C10998) * C1175 -
             (C10999 + C11000) * C48390) *
                C48377) *
               C48278 * C48054) *
              C48359 +
          ((((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
              C48410 * C1421) *
                 C1174 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C1167 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C1173) +
             (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
              C48410 * C1436) *
                 C1168 -
             (C10757 * C1410 + C48410 * C1423 + C10756 * C1406 +
              C10754 * C1415) *
                 C1175 -
             (C10757 * C1424 + C48410 * C1437 + C10756 * C1416 +
              C10754 * C1433) *
                 C48390) *
                C5040 +
            ((C11689 + C11690) * C1174 -
             ((C11182 + C11181) * C1167 + (C11180 + C11179) * C1173) +
             (C11691 + C11692) * C1168 - (C12415 + C12416) * C1175 -
             (C12417 + C12418) * C48390) *
                C48377) *
               C48278 * C48344 +
           (((C11179 + C11180) * C1173 + (C11181 + C11182) * C1167 -
             (C11690 + C11689) * C1174 - (C11692 + C11691) * C1168 +
             (C12416 + C12415) * C1175 + (C12418 + C12417) * C48390) *
                C5040 +
            ((C11183 + C11184) * C1173 + (C11185 + C11186) * C1167 -
             (C11693 + C11694) * C1174 - (C11695 + C11696) * C1168 +
             (C10756 * C1408 + C10754 * C1419 + C10757 * C1414 +
              C48410 * C1431) *
                 C1175 +
             (C10756 * C1420 + C10754 * C1435 + C10757 * C1432 +
              C48410 * C1441) *
                 C48390) *
                C48377) *
               C48278 * C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C5040 +
            ((C10791 + C10792) * C114 + (C10793 + C10794) * C48072) * C48377) *
               C48278 * C707 -
           (((C10795 + C10796) * C48072 + (C10797 + C10798) * C114) * C48377 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C5040) *
               C48278 * C708 +
           (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C5040 +
            ((C10799 + C10800) * C114 + (C10801 + C10802) * C48072) * C48377) *
               C48278 * C709 -
           (((C10803 + C10804) * C48072 + (C10805 + C10806) * C114) * C48377 +
            ((C10802 + C10801) * C48072 + (C10800 + C10799) * C114) * C5040) *
               C48278 * C48394) *
              C48359 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C5040 +
            ((C11183 + C11184) * C114 + (C11185 + C11186) * C48072) * C48377) *
               C48278 * C708 -
           (((C11182 + C11181) * C48072 + (C11180 + C11179) * C114) * C48377 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C5040) *
               C48278 * C707 -
           (((C11475 + C11476) * C48072 + (C11477 + C11478) * C114) * C48377 +
            ((C11186 + C11185) * C48072 + (C11184 + C11183) * C114) * C5040) *
               C48278 * C709 +
           (((C11478 + C11477) * C114 + (C11476 + C11475) * C48072) * C5040 +
            ((C10756 * C521 + C10754 * C536 + C10757 * C526 + C48410 * C545) *
                 C114 +
             (C10756 * C535 + C10754 * C551 + C10757 * C546 + C48410 * C556) *
                 C48072) *
                C48377) *
               C48278 * C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C5040 +
            ((C10791 + C10792) * C114 + (C10793 + C10794) * C48072) * C48377) *
               C48278 * C48344 -
           (((C10795 + C10796) * C48072 + (C10797 + C10798) * C114) * C48377 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C5040) *
               C48278 * C48054) *
              C2448 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C5040 +
            ((C11183 + C11184) * C114 + (C11185 + C11186) * C48072) * C48377) *
               C48278 * C48054 -
           (((C11182 + C11181) * C48072 + (C11180 + C11179) * C114) * C48377 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C5040) *
               C48278 * C48344) *
              C2449 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C114 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C48072) *
                C5040 +
            ((C11187 + C11188) * C114 + (C11189 + C11190) * C48072) * C48377) *
               C48278 * C48344 -
           (((C11191 + C11192) * C48072 + (C11193 + C11194) * C114) * C48377 +
            ((C11190 + C11189) * C48072 + (C11188 + C11187) * C114) * C5040) *
               C48278 * C48054) *
              C2450 +
          ((((C13275 + C13276) * C114 + (C13277 + C13278) * C48072) * C5040 +
            ((C10756 * C2156 + C10754 * C2163 + C10757 * C2161 +
              C48410 * C2172) *
                 C114 +
             (C10756 * C2162 + C10754 * C2174 + C10757 * C2173 +
              C48410 * C2179) *
                 C48072) *
                C48377) *
               C48278 * C48054 -
           (((C13278 + C13277) * C48072 + (C13276 + C13275) * C114) * C48377 +
            ((C10757 * C2169 + C48410 * C2177 + C10756 * C2166 +
              C10754 * C2176) *
                 C48072 +
             (C10757 * C2159 + C48410 * C2168 + C10756 * C2158 +
              C10754 * C2167) *
                 C114) *
                C5040) *
               C48278 * C48344) *
              C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C302 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48429 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C303 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C48417 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C304 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C48390) *
               C5040 +
           ((C10791 + C10792) * C302 + (C10793 + C10794) * C48429 -
            (C10985 + C10986) * C303 - (C10987 + C10988) * C48417 +
            (C10989 + C10990) * C304 + (C10991 + C10992) * C48390) *
               C48377) *
              C48278 * C299 +
          (((C10986 + C10985) * C303 -
            ((C10794 + C10793) * C48429 + (C10792 + C10791) * C302) +
            (C10988 + C10987) * C48417 - (C10990 + C10989) * C304 -
            (C10992 + C10991) * C48390) *
               C5040 +
           ((C10993 + C10994) * C303 -
            ((C10795 + C10796) * C48429 + (C10797 + C10798) * C302) +
            (C10995 + C10996) * C48417 - (C10997 + C10998) * C304 -
            (C10999 + C11000) * C48390) *
               C48377) *
              C48278 * C300 +
          (((C10798 + C10797) * C302 + (C10796 + C10795) * C48429 -
            (C10994 + C10993) * C303 - (C10996 + C10995) * C48417 +
            (C10998 + C10997) * C304 + (C11000 + C10999) * C48390) *
               C5040 +
           ((C10799 + C10800) * C302 + (C10801 + C10802) * C48429 -
            (C10757 * C1007 + C48410 * C1015 + C10756 * C311 + C10754 * C327) *
                C303 -
            (C10757 * C1016 + C48410 * C1022 + C10756 * C328 + C10754 * C341) *
                C48417 +
            (C10756 * C312 + C10754 * C329 + C10757 * C1728 + C48410 * C1729) *
                C304 +
            (C10756 * C330 + C10754 * C342 + C10757 * C1730 + C48410 * C1731) *
                C48390) *
               C48377) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C114 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48072) *
               C5040 +
           ((C10791 + C10792) * C114 + (C10793 + C10794) * C48072) * C48377) *
              C48278 * C107 -
          (((C10795 + C10796) * C48072 + (C10797 + C10798) * C114) * C48377 +
           ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C5040) *
              C48278 * C108 +
          (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C5040 +
           ((C10799 + C10800) * C114 + (C10801 + C10802) * C48072) * C48377) *
              C48278 * C109 -
          (((C10803 + C10804) * C48072 + (C10805 + C10806) * C114) * C48377 +
           ((C10802 + C10801) * C48072 + (C10800 + C10799) * C114) * C5040) *
              C48278 * C110 +
          (((C10806 + C10805) * C114 + (C10804 + C10803) * C48072) * C5040 +
           ((C10756 * C120 + C10754 * C133 + C10757 * C845 + C48410 * C846) *
                C114 +
            (C10756 * C132 + C10754 * C141 + C10757 * C847 + C48410 * C848) *
                C48072) *
               C48377) *
              C48278 * C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C1173 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C1167 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C1174 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C1168 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C1175 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C48390) *
               C5040 +
           ((C10791 + C10792) * C1173 + (C10793 + C10794) * C1167 -
            (C10985 + C10986) * C1174 - (C10987 + C10988) * C1168 +
            (C10989 + C10990) * C1175 + (C10991 + C10992) * C48390) *
               C48377) *
              C48278 * C48426 +
          (((C10986 + C10985) * C1174 -
            ((C10794 + C10793) * C1167 + (C10792 + C10791) * C1173) +
            (C10988 + C10987) * C1168 - (C10990 + C10989) * C1175 -
            (C10992 + C10991) * C48390) *
               C5040 +
           ((C10993 + C10994) * C1174 -
            ((C10795 + C10796) * C1167 + (C10797 + C10798) * C1173) +
            (C10995 + C10996) * C1168 - (C10997 + C10998) * C1175 -
            (C10999 + C11000) * C48390) *
               C48377) *
              C48278 * C48413 +
          (((C10798 + C10797) * C1173 + (C10796 + C10795) * C1167 -
            (C10994 + C10993) * C1174 - (C10996 + C10995) * C1168 +
            (C10998 + C10997) * C1175 + (C11000 + C10999) * C48390) *
               C5040 +
           ((C10799 + C10800) * C1173 + (C10801 + C10802) * C1167 -
            (C11333 + C11334) * C1174 - (C11335 + C11336) * C1168 +
            (C10756 * C312 + C10754 * C329 + C10757 * C1728 + C48410 * C1729) *
                C1175 +
            (C10756 * C330 + C10754 * C342 + C10757 * C1730 + C48410 * C1731) *
                C48390) *
               C48377) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
               C1267 +
           (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
               C1261 -
           (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
               C1268 -
           (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
               C1262 +
           (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
               C1269 +
           (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
               C1263 -
           (C10757 * C1854 + C48410 * C1857 + C10756 * C1272 + C10754 * C1278) *
               C1270 -
           (C10757 * C1858 + C48410 * C1863 + C10756 * C1279 + C10754 * C1290) *
               C1264 +
           (C10756 * C1273 + C10754 * C1280 + C10757 * C6776 + C48410 * C6778) *
               C1271 +
           (C10756 * C1281 + C10754 * C1291 + C10757 * C6779 + C48410 * C6782) *
               C1265) *
              C5040 +
          ((C10791 + C10792) * C1267 + (C10793 + C10794) * C1261 -
           (C10985 + C10986) * C1268 - (C10987 + C10988) * C1262 +
           (C10989 + C10990) * C1269 + (C10991 + C10992) * C1263 -
           (C10757 * C1855 + C48410 * C1859 + C10756 * C1274 + C10754 * C1282) *
               C1270 -
           (C10757 * C1860 + C48410 * C1864 + C10756 * C1283 + C10754 * C1292) *
               C1264 +
           (C10756 * C1275 + C10754 * C1284 + C10757 * C6777 + C48410 * C6780) *
               C1271 +
           (C10756 * C1285 + C10754 * C1293 + C10757 * C6781 + C48410 * C6783) *
               C1265) *
              C48377) *
         C48278 * C48044 * C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C5040 +
            ((C10791 + C10792) * C114 + (C10793 + C10794) * C48072) * C48377) *
               C48278 * C48426 -
           (((C10795 + C10796) * C48072 + (C10797 + C10798) * C114) * C48377 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C5040) *
               C48278 * C48413 +
           (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C5040 +
            ((C10799 + C10800) * C114 + (C10801 + C10802) * C48072) * C48377) *
               C48278 * C48384) *
              C1976 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C5040 +
            ((C11183 + C11184) * C114 + (C11185 + C11186) * C48072) * C48377) *
               C48278 * C48413 -
           (((C11182 + C11181) * C48072 + (C11180 + C11179) * C114) * C48377 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C5040) *
               C48278 * C48426 -
           (((C11475 + C11476) * C48072 + (C11477 + C11478) * C114) * C48377 +
            ((C11186 + C11185) * C48072 + (C11184 + C11183) * C114) * C5040) *
               C48278 * C48384) *
              C1977 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C114 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C48072) *
                C5040 +
            ((C11187 + C11188) * C114 + (C11189 + C11190) * C48072) * C48377) *
               C48278 * C48426 -
           (((C11191 + C11192) * C48072 + (C11193 + C11194) * C114) * C48377 +
            ((C11190 + C11189) * C48072 + (C11188 + C11187) * C114) * C5040) *
               C48278 * C48413 +
           (((C11194 + C11193) * C114 + (C11192 + C11191) * C48072) * C5040 +
            ((C10756 * C525 + C10754 * C544 + C10757 * C2452 + C48410 * C2453) *
                 C114 +
             (C10756 * C543 + C10754 * C555 + C10757 * C2454 + C48410 * C2455) *
                 C48072) *
                C48377) *
               C48278 * C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C302 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48429 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C303 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C48417 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C304 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C48390) *
               C5040 +
           ((C10791 + C10792) * C302 + (C10793 + C10794) * C48429 -
            (C10985 + C10986) * C303 - (C10987 + C10988) * C48417 +
            (C10989 + C10990) * C304 + (C10991 + C10992) * C48390) *
               C48377) *
              C48278 * C48044 * C1976 +
          (((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
             C48410 * C1421) *
                C303 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48429 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C302) +
            (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
             C48410 * C1436) *
                C48417 -
            (C10757 * C1410 + C48410 * C1423 + C10756 * C1406 +
             C10754 * C1415) *
                C304 -
            (C10757 * C1424 + C48410 * C1437 + C10756 * C1416 +
             C10754 * C1433) *
                C48390) *
               C5040 +
           ((C11689 + C11690) * C303 -
            ((C11182 + C11181) * C48429 + (C11180 + C11179) * C302) +
            (C11691 + C11692) * C48417 - (C12415 + C12416) * C304 -
            (C12417 + C12418) * C48390) *
               C48377) *
              C48278 * C48044 * C1977 +
          (((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                C302 +
            (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                C48429 -
            (C10757 * C2570 + C48410 * C2573 + C10756 * C1409 +
             C10754 * C1421) *
                C303 -
            (C10757 * C2574 + C48410 * C2579 + C10756 * C1422 +
             C10754 * C1436) *
                C48417 +
            (C10756 * C1410 + C10754 * C1423 + C10757 * C7638 +
             C48410 * C7640) *
                C304 +
            (C10756 * C1424 + C10754 * C1437 + C10757 * C7641 +
             C48410 * C7644) *
                C48390) *
               C5040 +
           ((C11187 + C11188) * C302 + (C11189 + C11190) * C48429 -
            (C10757 * C2571 + C48410 * C2575 + C10756 * C1411 +
             C10754 * C1425) *
                C303 -
            (C10757 * C2576 + C48410 * C2580 + C10756 * C1426 +
             C10754 * C1438) *
                C48417 +
            (C10756 * C1412 + C10754 * C1427 + C10757 * C7639 +
             C48410 * C7642) *
                C304 +
            (C10756 * C1428 + C10754 * C1439 + C10757 * C7643 +
             C48410 * C7645) *
                C48390) *
               C48377) *
              C48278 * C48044 * C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C711 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48358 -
             (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                 C712 -
             (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                 C48135) *
                C5040 +
            ((C10791 + C10792) * C711 + (C10793 + C10794) * C48358 -
             (C10985 + C10986) * C712 - (C10987 + C10988) * C48135) *
                C48377) *
               C48278 * C48049 +
           (((C10986 + C10985) * C712 -
             ((C10794 + C10793) * C48358 + (C10792 + C10791) * C711) +
             (C10988 + C10987) * C48135) *
                C5040 +
            ((C10993 + C10994) * C712 -
             ((C10795 + C10796) * C48358 + (C10797 + C10798) * C711) +
             (C10995 + C10996) * C48135) *
                C48377) *
               C48278 * C48057 +
           (((C10798 + C10797) * C711 + (C10796 + C10795) * C48358 -
             (C10994 + C10993) * C712 - (C10996 + C10995) * C48135) *
                C5040 +
            ((C10799 + C10800) * C711 + (C10801 + C10802) * C48358 -
             (C11333 + C11334) * C712 - (C11335 + C11336) * C48135) *
                C48377) *
               C48278 * C3111) *
              C3547 +
          ((((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
              C48410 * C1421) *
                 C712 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C48358 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C711) +
             (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
              C48410 * C1436) *
                 C48135) *
                C5040 +
            ((C11689 + C11690) * C712 -
             ((C11182 + C11181) * C48358 + (C11180 + C11179) * C711) +
             (C11691 + C11692) * C48135) *
                C48377) *
               C48278 * C48049 +
           (((C11179 + C11180) * C711 + (C11181 + C11182) * C48358 -
             (C11690 + C11689) * C712 - (C11692 + C11691) * C48135) *
                C5040 +
            ((C11183 + C11184) * C711 + (C11185 + C11186) * C48358 -
             (C11693 + C11694) * C712 - (C11695 + C11696) * C48135) *
                C48377) *
               C48278 * C48057 +
           (((C11694 + C11693) * C712 -
             ((C11186 + C11185) * C48358 + (C11184 + C11183) * C711) +
             (C11696 + C11695) * C48135) *
                C5040 +
            ((C10756 * C1007 + C10754 * C1015 + C10757 * C2326 +
              C48410 * C2327) *
                 C712 -
             ((C11475 + C11476) * C48358 + (C11477 + C11478) * C711) +
             (C10756 * C1016 + C10754 * C1022 + C10757 * C2328 +
              C48410 * C2329) *
                 C48135) *
                C48377) *
               C48278 * C3111) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C711 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48358 -
             (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                 C712 -
             (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                 C48135) *
                C5040 +
            ((C10791 + C10792) * C711 + (C10793 + C10794) * C48358 -
             (C10985 + C10986) * C712 - (C10987 + C10988) * C48135) *
                C48377) *
               C48278 * C2812 +
           (((C10986 + C10985) * C712 -
             ((C10794 + C10793) * C48358 + (C10792 + C10791) * C711) +
             (C10988 + C10987) * C48135) *
                C5040 +
            ((C10993 + C10994) * C712 -
             ((C10795 + C10796) * C48358 + (C10797 + C10798) * C711) +
             (C10995 + C10996) * C48135) *
                C48377) *
               C48278 * C48054) *
              C48173 +
          ((((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
              C48410 * C1421) *
                 C712 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C48358 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C711) +
             (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
              C48410 * C1436) *
                 C48135) *
                C5040 +
            ((C11689 + C11690) * C712 -
             ((C11182 + C11181) * C48358 + (C11180 + C11179) * C711) +
             (C11691 + C11692) * C48135) *
                C48377) *
               C48278 * C2812 +
           (((C11179 + C11180) * C711 + (C11181 + C11182) * C48358 -
             (C11690 + C11689) * C712 - (C11692 + C11691) * C48135) *
                C5040 +
            ((C11183 + C11184) * C711 + (C11185 + C11186) * C48358 -
             (C11693 + C11694) * C712 - (C11695 + C11696) * C48135) *
                C48377) *
               C48278 * C48054) *
              C48180 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C711 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C48358 -
             (C10757 * C2570 + C48410 * C2573 + C10756 * C1409 +
              C10754 * C1421) *
                 C712 -
             (C10757 * C2574 + C48410 * C2579 + C10756 * C1422 +
              C10754 * C1436) *
                 C48135) *
                C5040 +
            ((C11187 + C11188) * C711 + (C11189 + C11190) * C48358 -
             (C13133 + C13134) * C712 - (C13135 + C13136) * C48135) *
                C48377) *
               C48278 * C2812 +
           (((C13134 + C13133) * C712 -
             ((C11190 + C11189) * C48358 + (C11188 + C11187) * C711) +
             (C13136 + C13135) * C48135) *
                C5040 +
            ((C10756 * C1413 + C10754 * C1429 + C10757 * C2572 +
              C48410 * C2577) *
                 C712 -
             ((C11191 + C11192) * C48358 + (C11193 + C11194) * C711) +
             (C10756 * C1430 + C10754 * C1440 + C10757 * C2578 +
              C48410 * C2581) *
                 C48135) *
                C48377) *
               C48278 * C48054) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C302 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48429 -
             (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                 C303 -
             (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                 C48417 +
             (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                 C304 +
             (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                 C48390) *
                C5040 +
            ((C10791 + C10792) * C302 + (C10793 + C10794) * C48429 -
             (C10985 + C10986) * C303 - (C10987 + C10988) * C48417 +
             (C10989 + C10990) * C304 + (C10991 + C10992) * C48390) *
                C48377) *
               C48278 * C2812 +
           (((C10986 + C10985) * C303 -
             ((C10794 + C10793) * C48429 + (C10792 + C10791) * C302) +
             (C10988 + C10987) * C48417 - (C10990 + C10989) * C304 -
             (C10992 + C10991) * C48390) *
                C5040 +
            ((C10993 + C10994) * C303 -
             ((C10795 + C10796) * C48429 + (C10797 + C10798) * C302) +
             (C10995 + C10996) * C48417 - (C10997 + C10998) * C304 -
             (C10999 + C11000) * C48390) *
                C48377) *
               C48278 * C48054) *
              C3547 +
          ((((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
              C48410 * C1421) *
                 C303 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C48429 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C302) +
             (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
              C48410 * C1436) *
                 C48417 -
             (C10757 * C1410 + C48410 * C1423 + C10756 * C1406 +
              C10754 * C1415) *
                 C304 -
             (C10757 * C1424 + C48410 * C1437 + C10756 * C1416 +
              C10754 * C1433) *
                 C48390) *
                C5040 +
            ((C11689 + C11690) * C303 -
             ((C11182 + C11181) * C48429 + (C11180 + C11179) * C302) +
             (C11691 + C11692) * C48417 - (C12415 + C12416) * C304 -
             (C12417 + C12418) * C48390) *
                C48377) *
               C48278 * C2812 +
           (((C11179 + C11180) * C302 + (C11181 + C11182) * C48429 -
             (C11690 + C11689) * C303 - (C11692 + C11691) * C48417 +
             (C12416 + C12415) * C304 + (C12418 + C12417) * C48390) *
                C5040 +
            ((C11183 + C11184) * C302 + (C11185 + C11186) * C48429 -
             (C11693 + C11694) * C303 - (C11695 + C11696) * C48417 +
             (C10756 * C1408 + C10754 * C1419 + C10757 * C1414 +
              C48410 * C1431) *
                 C304 +
             (C10756 * C1420 + C10754 * C1435 + C10757 * C1432 +
              C48410 * C1441) *
                 C48390) *
                C48377) *
               C48278 * C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C5040 +
            ((C10791 + C10792) * C114 + (C10793 + C10794) * C48072) * C48377) *
               C48278 * C48435 -
           (((C10795 + C10796) * C48072 + (C10797 + C10798) * C114) * C48377 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C5040) *
               C48278 * C48428 +
           (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C5040 +
            ((C10799 + C10800) * C114 + (C10801 + C10802) * C48072) * C48377) *
               C48278 * C48415 -
           (((C10803 + C10804) * C48072 + (C10805 + C10806) * C114) * C48377 +
            ((C10802 + C10801) * C48072 + (C10800 + C10799) * C114) * C5040) *
               C48278 * C48394) *
              C3547 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C5040 +
            ((C11183 + C11184) * C114 + (C11185 + C11186) * C48072) * C48377) *
               C48278 * C48428 -
           (((C11182 + C11181) * C48072 + (C11180 + C11179) * C114) * C48377 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C5040) *
               C48278 * C48435 -
           (((C11475 + C11476) * C48072 + (C11477 + C11478) * C114) * C48377 +
            ((C11186 + C11185) * C48072 + (C11184 + C11183) * C114) * C5040) *
               C48278 * C48415 +
           (((C11478 + C11477) * C114 + (C11476 + C11475) * C48072) * C5040 +
            ((C10756 * C521 + C10754 * C536 + C10757 * C526 + C48410 * C545) *
                 C114 +
             (C10756 * C535 + C10754 * C551 + C10757 * C546 + C48410 * C556) *
                 C48072) *
                C48377) *
               C48278 * C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C5040 +
            ((C10791 + C10792) * C114 + (C10793 + C10794) * C48072) * C48377) *
               C48278 * C2812 -
           (((C10795 + C10796) * C48072 + (C10797 + C10798) * C114) * C48377 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C5040) *
               C48278 * C48054) *
              C48437 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C5040 +
            ((C11183 + C11184) * C114 + (C11185 + C11186) * C48072) * C48377) *
               C48278 * C48054 -
           (((C11182 + C11181) * C48072 + (C11180 + C11179) * C114) * C48377 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C5040) *
               C48278 * C2812) *
              C48434 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C114 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C48072) *
                C5040 +
            ((C11187 + C11188) * C114 + (C11189 + C11190) * C48072) * C48377) *
               C48278 * C2812 -
           (((C11191 + C11192) * C48072 + (C11193 + C11194) * C114) * C48377 +
            ((C11190 + C11189) * C48072 + (C11188 + C11187) * C114) * C5040) *
               C48278 * C48054) *
              C48425 +
          ((((C13275 + C13276) * C114 + (C13277 + C13278) * C48072) * C5040 +
            ((C10756 * C2156 + C10754 * C2163 + C10757 * C2161 +
              C48410 * C2172) *
                 C114 +
             (C10756 * C2162 + C10754 * C2174 + C10757 * C2173 +
              C48410 * C2179) *
                 C48072) *
                C48377) *
               C48278 * C48054 -
           (((C13278 + C13277) * C48072 + (C13276 + C13275) * C114) * C48377 +
            ((C10757 * C2169 + C48410 * C2177 + C10756 * C2166 +
              C10754 * C2176) *
                 C48072 +
             (C10757 * C2159 + C48410 * C2168 + C10756 * C2158 +
              C10754 * C2167) *
                 C114) *
                C5040) *
               C48278 * C2812) *
              C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C5040 +
            ((C10791 + C10792) * C114 + (C10793 + C10794) * C48072) * C48377) *
               C48278 * C48049 -
           (((C10795 + C10796) * C48072 + (C10797 + C10798) * C114) * C48377 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C5040) *
               C48278 * C48057 +
           (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C5040 +
            ((C10799 + C10800) * C114 + (C10801 + C10802) * C48072) * C48377) *
               C48278 * C3111) *
              C48173 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C5040 +
            ((C11183 + C11184) * C114 + (C11185 + C11186) * C48072) * C48377) *
               C48278 * C48057 -
           (((C11182 + C11181) * C48072 + (C11180 + C11179) * C114) * C48377 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C5040) *
               C48278 * C48049 -
           (((C11475 + C11476) * C48072 + (C11477 + C11478) * C114) * C48377 +
            ((C11186 + C11185) * C48072 + (C11184 + C11183) * C114) * C5040) *
               C48278 * C3111) *
              C48180 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C114 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C48072) *
                C5040 +
            ((C11187 + C11188) * C114 + (C11189 + C11190) * C48072) * C48377) *
               C48278 * C48049 -
           (((C11191 + C11192) * C48072 + (C11193 + C11194) * C114) * C48377 +
            ((C11190 + C11189) * C48072 + (C11188 + C11187) * C114) * C5040) *
               C48278 * C48057 +
           (((C11194 + C11193) * C114 + (C11192 + C11191) * C48072) * C5040 +
            ((C10756 * C525 + C10754 * C544 + C10757 * C2452 + C48410 * C2453) *
                 C114 +
             (C10756 * C543 + C10754 * C555 + C10757 * C2454 + C48410 * C2455) *
                 C48072) *
                C48377) *
               C48278 * C3111) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C5040 +
            ((C10791 + C10792) * C114 + (C10793 + C10794) * C48072) * C48377) *
               C48278 * C48435 -
           (((C10795 + C10796) * C48072 + (C10797 + C10798) * C114) * C48377 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C5040) *
               C48278 * C48428 +
           (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C5040 +
            ((C10799 + C10800) * C114 + (C10801 + C10802) * C48072) * C48377) *
               C48278 * C48415 -
           (((C10803 + C10804) * C48072 + (C10805 + C10806) * C114) * C48377 +
            ((C10802 + C10801) * C48072 + (C10800 + C10799) * C114) * C5040) *
               C48278 * C48394) *
              C3547 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C5040 +
            ((C11183 + C11184) * C114 + (C11185 + C11186) * C48072) * C48377) *
               C48278 * C48428 -
           (((C11182 + C11181) * C48072 + (C11180 + C11179) * C114) * C48377 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C5040) *
               C48278 * C48435 -
           (((C11475 + C11476) * C48072 + (C11477 + C11478) * C114) * C48377 +
            ((C11186 + C11185) * C48072 + (C11184 + C11183) * C114) * C5040) *
               C48278 * C48415 +
           (((C11478 + C11477) * C114 + (C11476 + C11475) * C48072) * C5040 +
            ((C10756 * C521 + C10754 * C536 + C10757 * C526 + C48410 * C545) *
                 C114 +
             (C10756 * C535 + C10754 * C551 + C10757 * C546 + C48410 * C556) *
                 C48072) *
                C48377) *
               C48278 * C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C302 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48429 -
             (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                 C303 -
             (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                 C48417 +
             (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                 C304 +
             (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                 C48390) *
                C5040 +
            ((C10791 + C10792) * C302 + (C10793 + C10794) * C48429 -
             (C10985 + C10986) * C303 - (C10987 + C10988) * C48417 +
             (C10989 + C10990) * C304 + (C10991 + C10992) * C48390) *
                C48377) *
               C48278 * C2812 +
           (((C10986 + C10985) * C303 -
             ((C10794 + C10793) * C48429 + (C10792 + C10791) * C302) +
             (C10988 + C10987) * C48417 - (C10990 + C10989) * C304 -
             (C10992 + C10991) * C48390) *
                C5040 +
            ((C10993 + C10994) * C303 -
             ((C10795 + C10796) * C48429 + (C10797 + C10798) * C302) +
             (C10995 + C10996) * C48417 - (C10997 + C10998) * C304 -
             (C10999 + C11000) * C48390) *
                C48377) *
               C48278 * C48054) *
              C3547 +
          ((((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
              C48410 * C1421) *
                 C303 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C48429 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C302) +
             (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
              C48410 * C1436) *
                 C48417 -
             (C10757 * C1410 + C48410 * C1423 + C10756 * C1406 +
              C10754 * C1415) *
                 C304 -
             (C10757 * C1424 + C48410 * C1437 + C10756 * C1416 +
              C10754 * C1433) *
                 C48390) *
                C5040 +
            ((C11689 + C11690) * C303 -
             ((C11182 + C11181) * C48429 + (C11180 + C11179) * C302) +
             (C11691 + C11692) * C48417 - (C12415 + C12416) * C304 -
             (C12417 + C12418) * C48390) *
                C48377) *
               C48278 * C2812 +
           (((C11179 + C11180) * C302 + (C11181 + C11182) * C48429 -
             (C11690 + C11689) * C303 - (C11692 + C11691) * C48417 +
             (C12416 + C12415) * C304 + (C12418 + C12417) * C48390) *
                C5040 +
            ((C11183 + C11184) * C302 + (C11185 + C11186) * C48429 -
             (C11693 + C11694) * C303 - (C11695 + C11696) * C48417 +
             (C10756 * C1408 + C10754 * C1419 + C10757 * C1414 +
              C48410 * C1431) *
                 C304 +
             (C10756 * C1420 + C10754 * C1435 + C10757 * C1432 +
              C48410 * C1441) *
                 C48390) *
                C48377) *
               C48278 * C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C711 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48358 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C712 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C48135) *
               C5040 +
           ((C10791 + C10792) * C711 + (C10793 + C10794) * C48358 -
            (C10985 + C10986) * C712 - (C10987 + C10988) * C48135) *
               C48377) *
              C48278 * C707 +
          (((C10986 + C10985) * C712 -
            ((C10794 + C10793) * C48358 + (C10792 + C10791) * C711) +
            (C10988 + C10987) * C48135) *
               C5040 +
           ((C10993 + C10994) * C712 -
            ((C10795 + C10796) * C48358 + (C10797 + C10798) * C711) +
            (C10995 + C10996) * C48135) *
               C48377) *
              C48278 * C708 +
          (((C10798 + C10797) * C711 + (C10796 + C10795) * C48358 -
            (C10994 + C10993) * C712 - (C10996 + C10995) * C48135) *
               C5040 +
           ((C10799 + C10800) * C711 + (C10801 + C10802) * C48358 -
            (C11333 + C11334) * C712 - (C11335 + C11336) * C48135) *
               C48377) *
              C48278 * C709 +
          (((C11334 + C11333) * C712 -
            ((C10802 + C10801) * C48358 + (C10800 + C10799) * C711) +
            (C11336 + C11335) * C48135) *
               C5040 +
           ((C10756 * C313 + C10754 * C331 + C10757 * C1008 + C48410 * C1017) *
                C712 -
            ((C10803 + C10804) * C48358 + (C10805 + C10806) * C711) +
            (C10756 * C332 + C10754 * C343 + C10757 * C1018 + C48410 * C1023) *
                C48135) *
               C48377) *
              C48278 * C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C1546 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C1540 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C1547 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C1541 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C1548 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C1542 -
            (C10757 * C1854 + C48410 * C1857 + C10756 * C1272 +
             C10754 * C1278) *
                C1549 -
            (C10757 * C1858 + C48410 * C1863 + C10756 * C1279 +
             C10754 * C1290) *
                C48400) *
               C5040 +
           ((C10791 + C10792) * C1546 + (C10793 + C10794) * C1540 -
            (C10985 + C10986) * C1547 - (C10987 + C10988) * C1541 +
            (C10989 + C10990) * C1548 + (C10991 + C10992) * C1542 -
            (C12209 + C12210) * C1549 - (C12211 + C12212) * C48400) *
               C48377) *
              C48278 * C48344 +
          (((C10986 + C10985) * C1547 -
            ((C10794 + C10793) * C1540 + (C10792 + C10791) * C1546) +
            (C10988 + C10987) * C1541 - (C10990 + C10989) * C1548 -
            (C10992 + C10991) * C1542 + (C12210 + C12209) * C1549 +
            (C12212 + C12211) * C48400) *
               C5040 +
           ((C10993 + C10994) * C1547 -
            ((C10795 + C10796) * C1540 + (C10797 + C10798) * C1546) +
            (C10995 + C10996) * C1541 - (C10997 + C10998) * C1548 -
            (C10999 + C11000) * C1542 +
            (C10756 * C1276 + C10754 * C1286 + C10757 * C1856 +
             C48410 * C1861) *
                C1549 +
            (C10756 * C1287 + C10754 * C1294 + C10757 * C1862 +
             C48410 * C1865) *
                C48400) *
               C48377) *
              C48278 * C48054) *
         C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C711 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48358 -
             (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                 C712 -
             (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                 C48135) *
                C5040 +
            ((C10791 + C10792) * C711 + (C10793 + C10794) * C48358 -
             (C10985 + C10986) * C712 - (C10987 + C10988) * C48135) *
                C48377) *
               C48278 * C299 +
           (((C10986 + C10985) * C712 -
             ((C10794 + C10793) * C48358 + (C10792 + C10791) * C711) +
             (C10988 + C10987) * C48135) *
                C5040 +
            ((C10993 + C10994) * C712 -
             ((C10795 + C10796) * C48358 + (C10797 + C10798) * C711) +
             (C10995 + C10996) * C48135) *
                C48377) *
               C48278 * C300 +
           (((C10798 + C10797) * C711 + (C10796 + C10795) * C48358 -
             (C10994 + C10993) * C712 - (C10996 + C10995) * C48135) *
                C5040 +
            ((C10799 + C10800) * C711 + (C10801 + C10802) * C48358 -
             (C11333 + C11334) * C712 - (C11335 + C11336) * C48135) *
                C48377) *
               C48278 * C48384) *
              C48359 +
          ((((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
              C48410 * C1421) *
                 C712 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C48358 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C711) +
             (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
              C48410 * C1436) *
                 C48135) *
                C5040 +
            ((C11689 + C11690) * C712 -
             ((C11182 + C11181) * C48358 + (C11180 + C11179) * C711) +
             (C11691 + C11692) * C48135) *
                C48377) *
               C48278 * C299 +
           (((C11179 + C11180) * C711 + (C11181 + C11182) * C48358 -
             (C11690 + C11689) * C712 - (C11692 + C11691) * C48135) *
                C5040 +
            ((C11183 + C11184) * C711 + (C11185 + C11186) * C48358 -
             (C11693 + C11694) * C712 - (C11695 + C11696) * C48135) *
                C48377) *
               C48278 * C300 +
           (((C11694 + C11693) * C712 -
             ((C11186 + C11185) * C48358 + (C11184 + C11183) * C711) +
             (C11696 + C11695) * C48135) *
                C5040 +
            ((C10756 * C1007 + C10754 * C1015 + C10757 * C2326 +
              C48410 * C2327) *
                 C712 -
             ((C11475 + C11476) * C48358 + (C11477 + C11478) * C711) +
             (C10756 * C1016 + C10754 * C1022 + C10757 * C2328 +
              C48410 * C2329) *
                 C48135) *
                C48377) *
               C48278 * C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C1546 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C1540 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C1547 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C1541 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C1548 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C1542 -
            (C10757 * C1854 + C48410 * C1857 + C10756 * C1272 +
             C10754 * C1278) *
                C1549 -
            (C10757 * C1858 + C48410 * C1863 + C10756 * C1279 +
             C10754 * C1290) *
                C48400) *
               C5040 +
           ((C10791 + C10792) * C1546 + (C10793 + C10794) * C1540 -
            (C10985 + C10986) * C1547 - (C10987 + C10988) * C1541 +
            (C10989 + C10990) * C1548 + (C10991 + C10992) * C1542 -
            (C12209 + C12210) * C1549 - (C12211 + C12212) * C48400) *
               C48377) *
              C48278 * C48044 * C48359 +
          (((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
             C48410 * C1421) *
                C1547 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C1540 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C1546) +
            (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
             C48410 * C1436) *
                C1541 -
            (C10757 * C1410 + C48410 * C1423 + C10756 * C1406 +
             C10754 * C1415) *
                C1548 -
            (C10757 * C1424 + C48410 * C1437 + C10756 * C1416 +
             C10754 * C1433) *
                C1542 +
            (C10756 * C1854 + C10754 * C1857 + C10757 * C6270 +
             C48410 * C6272) *
                C1549 +
            (C10756 * C1858 + C10754 * C1863 + C10757 * C6273 +
             C48410 * C6276) *
                C48400) *
               C5040 +
           ((C11689 + C11690) * C1547 -
            ((C11182 + C11181) * C1540 + (C11180 + C11179) * C1546) +
            (C11691 + C11692) * C1541 - (C12415 + C12416) * C1548 -
            (C12417 + C12418) * C1542 +
            (C10756 * C1855 + C10754 * C1859 + C10757 * C6271 +
             C48410 * C6274) *
                C1549 +
            (C10756 * C1860 + C10754 * C1864 + C10757 * C6275 +
             C48410 * C6277) *
                C48400) *
               C48377) *
              C48278 * C48044 * C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C302 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48429 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C303 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C48417 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C304 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C48390) *
               C5040 +
           ((C10791 + C10792) * C302 + (C10793 + C10794) * C48429 -
            (C10985 + C10986) * C303 - (C10987 + C10988) * C48417 +
            (C10989 + C10990) * C304 + (C10991 + C10992) * C48390) *
               C48377) *
              C48278 * C299 +
          (((C10986 + C10985) * C303 -
            ((C10794 + C10793) * C48429 + (C10792 + C10791) * C302) +
            (C10988 + C10987) * C48417 - (C10990 + C10989) * C304 -
            (C10992 + C10991) * C48390) *
               C5040 +
           ((C10993 + C10994) * C303 -
            ((C10795 + C10796) * C48429 + (C10797 + C10798) * C302) +
            (C10995 + C10996) * C48417 - (C10997 + C10998) * C304 -
            (C10999 + C11000) * C48390) *
               C48377) *
              C48278 * C300 +
          (((C10798 + C10797) * C302 + (C10796 + C10795) * C48429 -
            (C10994 + C10993) * C303 - (C10996 + C10995) * C48417 +
            (C10998 + C10997) * C304 + (C11000 + C10999) * C48390) *
               C5040 +
           ((C10799 + C10800) * C302 + (C10801 + C10802) * C48429 -
            (C10757 * C1007 + C48410 * C1015 + C10756 * C311 + C10754 * C327) *
                C303 -
            (C10757 * C1016 + C48410 * C1022 + C10756 * C328 + C10754 * C341) *
                C48417 +
            (C10756 * C312 + C10754 * C329 + C10757 * C1728 + C48410 * C1729) *
                C304 +
            (C10756 * C330 + C10754 * C342 + C10757 * C1730 + C48410 * C1731) *
                C48390) *
               C48377) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C114 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48072) *
               C5040 +
           ((C10791 + C10792) * C114 + (C10793 + C10794) * C48072) * C48377) *
              C48278 * C107 -
          (((C10795 + C10796) * C48072 + (C10797 + C10798) * C114) * C48377 +
           ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C5040) *
              C48278 * C108 +
          (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C5040 +
           ((C10799 + C10800) * C114 + (C10801 + C10802) * C48072) * C48377) *
              C48278 * C109 -
          (((C10803 + C10804) * C48072 + (C10805 + C10806) * C114) * C48377 +
           ((C10802 + C10801) * C48072 + (C10800 + C10799) * C114) * C5040) *
              C48278 * C110 +
          (((C10806 + C10805) * C114 + (C10804 + C10803) * C48072) * C5040 +
           ((C10756 * C120 + C10754 * C133 + C10757 * C845 + C48410 * C846) *
                C114 +
            (C10756 * C132 + C10754 * C141 + C10757 * C847 + C48410 * C848) *
                C48072) *
               C48377) *
              C48278 * C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C5040 +
            ((C10791 + C10792) * C114 + (C10793 + C10794) * C48072) * C48377) *
               C48278 * C299 -
           (((C10795 + C10796) * C48072 + (C10797 + C10798) * C114) * C48377 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C5040) *
               C48278 * C300 +
           (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C5040 +
            ((C10799 + C10800) * C114 + (C10801 + C10802) * C48072) * C48377) *
               C48278 * C48384) *
              C48430 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C5040 +
            ((C11183 + C11184) * C114 + (C11185 + C11186) * C48072) * C48377) *
               C48278 * C300 -
           (((C11182 + C11181) * C48072 + (C11180 + C11179) * C114) * C48377 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C5040) *
               C48278 * C299 -
           (((C10757 * C543 + C48410 * C555 + C10756 * C532 + C10754 * C549) *
                 C48072 +
             (C10757 * C525 + C48410 * C544 + C10756 * C519 + C10754 * C531) *
                 C114) *
                C48377 +
            ((C11186 + C11185) * C48072 + (C11184 + C11183) * C114) * C5040) *
               C48278 * C48384) *
              C48419 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C114 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C48072) *
                C5040 +
            ((C11187 + C11188) * C114 + (C11189 + C11190) * C48072) * C48377) *
               C48278 * C299 -
           (((C11191 + C11192) * C48072 + (C11193 + C11194) * C114) * C48377 +
            ((C11190 + C11189) * C48072 + (C11188 + C11187) * C114) * C5040) *
               C48278 * C300 +
           (((C11194 + C11193) * C114 + (C11192 + C11191) * C48072) * C5040 +
            ((C10756 * C525 + C10754 * C544 + C10757 * C2452 + C48410 * C2453) *
                 C114 +
             (C10756 * C543 + C10754 * C555 + C10757 * C2454 + C48410 * C2455) *
                 C48072) *
                C48377) *
               C48278 * C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C1173 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C1167 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C1174 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C1168 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C1175 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C48390) *
               C5040 +
           ((C10791 + C10792) * C1173 + (C10793 + C10794) * C1167 -
            (C10985 + C10986) * C1174 - (C10987 + C10988) * C1168 +
            (C10989 + C10990) * C1175 + (C10991 + C10992) * C48390) *
               C48377) *
              C48278 * C48426 +
          (((C10986 + C10985) * C1174 -
            ((C10794 + C10793) * C1167 + (C10792 + C10791) * C1173) +
            (C10988 + C10987) * C1168 - (C10990 + C10989) * C1175 -
            (C10992 + C10991) * C48390) *
               C5040 +
           ((C10993 + C10994) * C1174 -
            ((C10795 + C10796) * C1167 + (C10797 + C10798) * C1173) +
            (C10995 + C10996) * C1168 - (C10997 + C10998) * C1175 -
            (C10999 + C11000) * C48390) *
               C48377) *
              C48278 * C48413 +
          (((C10798 + C10797) * C1173 + (C10796 + C10795) * C1167 -
            (C10994 + C10993) * C1174 - (C10996 + C10995) * C1168 +
            (C10998 + C10997) * C1175 + (C11000 + C10999) * C48390) *
               C5040 +
           ((C10799 + C10800) * C1173 + (C10801 + C10802) * C1167 -
            (C11333 + C11334) * C1174 - (C11335 + C11336) * C1168 +
            (C10756 * C312 + C10754 * C329 + C10757 * C1728 + C48410 * C1729) *
                C1175 +
            (C10756 * C330 + C10754 * C342 + C10757 * C1730 + C48410 * C1731) *
                C48390) *
               C48377) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
               C1267 +
           (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
               C1261 -
           (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
               C1268 -
           (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
               C1262 +
           (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
               C1269 +
           (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
               C1263 -
           (C10757 * C1854 + C48410 * C1857 + C10756 * C1272 + C10754 * C1278) *
               C1270 -
           (C10757 * C1858 + C48410 * C1863 + C10756 * C1279 + C10754 * C1290) *
               C1264 +
           (C10756 * C1273 + C10754 * C1280 + C10757 * C6776 + C48410 * C6778) *
               C1271 +
           (C10756 * C1281 + C10754 * C1291 + C10757 * C6779 + C48410 * C6782) *
               C1265) *
              C5040 +
          ((C10791 + C10792) * C1267 + (C10793 + C10794) * C1261 -
           (C10985 + C10986) * C1268 - (C10987 + C10988) * C1262 +
           (C10989 + C10990) * C1269 + (C10991 + C10992) * C1263 -
           (C10757 * C1855 + C48410 * C1859 + C10756 * C1274 + C10754 * C1282) *
               C1270 -
           (C10757 * C1860 + C48410 * C1864 + C10756 * C1283 + C10754 * C1292) *
               C1264 +
           (C10756 * C1275 + C10754 * C1284 + C10757 * C6777 + C48410 * C6780) *
               C1271 +
           (C10756 * C1285 + C10754 * C1293 + C10757 * C6781 + C48410 * C6783) *
               C1265) *
              C48377) *
         C48278 * C48044 * C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C1173 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C1167 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C1174 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C1168 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C1175 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C48390) *
               C5040 +
           ((C10791 + C10792) * C1173 + (C10793 + C10794) * C1167 -
            (C10985 + C10986) * C1174 - (C10987 + C10988) * C1168 +
            (C10989 + C10990) * C1175 + (C10991 + C10992) * C48390) *
               C48377) *
              C48278 * C48044 * C48430 +
          (((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
             C48410 * C1421) *
                C1174 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C1167 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C1173) +
            (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
             C48410 * C1436) *
                C1168 -
            (C10757 * C1410 + C48410 * C1423 + C10756 * C1406 +
             C10754 * C1415) *
                C1175 -
            (C10757 * C1424 + C48410 * C1437 + C10756 * C1416 +
             C10754 * C1433) *
                C48390) *
               C5040 +
           ((C11689 + C11690) * C1174 -
            ((C11182 + C11181) * C1167 + (C11180 + C11179) * C1173) +
            (C11691 + C11692) * C1168 -
            (C10757 * C1412 + C48410 * C1427 + C10756 * C1407 +
             C10754 * C1417) *
                C1175 -
            (C10757 * C1428 + C48410 * C1439 + C10756 * C1418 +
             C10754 * C1434) *
                C48390) *
               C48377) *
              C48278 * C48044 * C48419 +
          (((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                C1173 +
            (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                C1167 -
            (C10757 * C2570 + C48410 * C2573 + C10756 * C1409 +
             C10754 * C1421) *
                C1174 -
            (C10757 * C2574 + C48410 * C2579 + C10756 * C1422 +
             C10754 * C1436) *
                C1168 +
            (C10756 * C1410 + C10754 * C1423 + C10757 * C7638 +
             C48410 * C7640) *
                C1175 +
            (C10756 * C1424 + C10754 * C1437 + C10757 * C7641 +
             C48410 * C7644) *
                C48390) *
               C5040 +
           ((C11187 + C11188) * C1173 + (C11189 + C11190) * C1167 -
            (C10757 * C2571 + C48410 * C2575 + C10756 * C1411 +
             C10754 * C1425) *
                C1174 -
            (C10757 * C2576 + C48410 * C2580 + C10756 * C1426 +
             C10754 * C1438) *
                C1168 +
            (C10756 * C1412 + C10754 * C1427 + C10757 * C7639 +
             C48410 * C7642) *
                C1175 +
            (C10756 * C1428 + C10754 * C1439 + C10757 * C7643 +
             C48410 * C7645) *
                C48390) *
               C48377) *
              C48278 * C48044 * C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C5040 +
            ((C10791 + C10792) * C114 + (C10793 + C10794) * C48072) * C48377) *
               C48278 * C707 -
           (((C10795 + C10796) * C48072 + (C10797 + C10798) * C114) * C48377 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C5040) *
               C48278 * C708 +
           (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C5040 +
            ((C10799 + C10800) * C114 + (C10801 + C10802) * C48072) * C48377) *
               C48278 * C709 -
           (((C10803 + C10804) * C48072 + (C10805 + C10806) * C114) * C48377 +
            ((C10802 + C10801) * C48072 + (C10800 + C10799) * C114) * C5040) *
               C48278 * C48394) *
              C48359 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C5040 +
            ((C11183 + C11184) * C114 + (C11185 + C11186) * C48072) * C48377) *
               C48278 * C708 -
           (((C11182 + C11181) * C48072 + (C11180 + C11179) * C114) * C48377 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C5040) *
               C48278 * C707 -
           (((C11475 + C11476) * C48072 + (C11477 + C11478) * C114) * C48377 +
            ((C11186 + C11185) * C48072 + (C11184 + C11183) * C114) * C5040) *
               C48278 * C709 +
           (((C11478 + C11477) * C114 + (C11476 + C11475) * C48072) * C5040 +
            ((C10756 * C521 + C10754 * C536 + C10757 * C526 + C48410 * C545) *
                 C114 +
             (C10756 * C535 + C10754 * C551 + C10757 * C546 + C48410 * C556) *
                 C48072) *
                C48377) *
               C48278 * C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C1173 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C1167 -
             (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                 C1174 -
             (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                 C1168 +
             (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                 C1175 +
             (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                 C48390) *
                C5040 +
            ((C10791 + C10792) * C1173 + (C10793 + C10794) * C1167 -
             (C10985 + C10986) * C1174 - (C10987 + C10988) * C1168 +
             (C10989 + C10990) * C1175 + (C10991 + C10992) * C48390) *
                C48377) *
               C48278 * C48344 +
           (((C10986 + C10985) * C1174 -
             ((C10794 + C10793) * C1167 + (C10792 + C10791) * C1173) +
             (C10988 + C10987) * C1168 - (C10990 + C10989) * C1175 -
             (C10992 + C10991) * C48390) *
                C5040 +
            ((C10993 + C10994) * C1174 -
             ((C10795 + C10796) * C1167 + (C10797 + C10798) * C1173) +
             (C10995 + C10996) * C1168 - (C10997 + C10998) * C1175 -
             (C10999 + C11000) * C48390) *
                C48377) *
               C48278 * C48054) *
              C48359 +
          ((((C10756 * C1004 + C10754 * C1009 + C10757 * C1409 +
              C48410 * C1421) *
                 C1174 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C1167 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C1173) +
             (C10756 * C1010 + C10754 * C1019 + C10757 * C1422 +
              C48410 * C1436) *
                 C1168 -
             (C10757 * C1410 + C48410 * C1423 + C10756 * C1406 +
              C10754 * C1415) *
                 C1175 -
             (C10757 * C1424 + C48410 * C1437 + C10756 * C1416 +
              C10754 * C1433) *
                 C48390) *
                C5040 +
            ((C11689 + C11690) * C1174 -
             ((C11182 + C11181) * C1167 + (C11180 + C11179) * C1173) +
             (C11691 + C11692) * C1168 - (C12415 + C12416) * C1175 -
             (C12417 + C12418) * C48390) *
                C48377) *
               C48278 * C48344 +
           (((C11179 + C11180) * C1173 + (C11181 + C11182) * C1167 -
             (C11690 + C11689) * C1174 - (C11692 + C11691) * C1168 +
             (C12416 + C12415) * C1175 + (C12418 + C12417) * C48390) *
                C5040 +
            ((C11183 + C11184) * C1173 + (C11185 + C11186) * C1167 -
             (C11693 + C11694) * C1174 - (C11695 + C11696) * C1168 +
             (C10756 * C1408 + C10754 * C1419 + C10757 * C1414 +
              C48410 * C1431) *
                 C1175 +
             (C10756 * C1420 + C10754 * C1435 + C10757 * C1432 +
              C48410 * C1441) *
                 C48390) *
                C48377) *
               C48278 * C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C114 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48072) *
               C5040 +
           ((C10791 + C10792) * C114 + (C10793 + C10794) * C48072) * C48377) *
              C48278 * C107 -
          (((C10795 + C10796) * C48072 + (C10797 + C10798) * C114) * C48377 +
           ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C5040) *
              C48278 * C108 +
          (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C5040 +
           ((C10799 + C10800) * C114 + (C10801 + C10802) * C48072) * C48377) *
              C48278 * C109 -
          (((C10803 + C10804) * C48072 + (C10805 + C10806) * C114) * C48377 +
           ((C10802 + C10801) * C48072 + (C10800 + C10799) * C114) * C5040) *
              C48278 * C110 +
          (((C10806 + C10805) * C114 + (C10804 + C10803) * C48072) * C5040 +
           ((C10756 * C120 + C10754 * C133 + C10757 * C845 + C48410 * C846) *
                C114 +
            (C10756 * C132 + C10754 * C141 + C10757 * C847 + C48410 * C848) *
                C48072) *
               C48377) *
              C48278 * C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C302 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48429 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C303 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C48417 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C304 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C48390) *
               C5040 +
           ((C10791 + C10792) * C302 + (C10793 + C10794) * C48429 -
            (C10985 + C10986) * C303 - (C10987 + C10988) * C48417 +
            (C10989 + C10990) * C304 + (C10991 + C10992) * C48390) *
               C48377) *
              C48278 * C299 +
          (((C10986 + C10985) * C303 -
            ((C10794 + C10793) * C48429 + (C10792 + C10791) * C302) +
            (C10988 + C10987) * C48417 - (C10990 + C10989) * C304 -
            (C10992 + C10991) * C48390) *
               C5040 +
           ((C10993 + C10994) * C303 -
            ((C10795 + C10796) * C48429 + (C10797 + C10798) * C302) +
            (C10995 + C10996) * C48417 - (C10997 + C10998) * C304 -
            (C10999 + C11000) * C48390) *
               C48377) *
              C48278 * C300 +
          (((C10798 + C10797) * C302 + (C10796 + C10795) * C48429 -
            (C10994 + C10993) * C303 - (C10996 + C10995) * C48417 +
            (C10998 + C10997) * C304 + (C11000 + C10999) * C48390) *
               C5040 +
           ((C10799 + C10800) * C302 + (C10801 + C10802) * C48429 -
            (C10757 * C1007 + C48410 * C1015 + C10756 * C311 + C10754 * C327) *
                C303 -
            (C10757 * C1016 + C48410 * C1022 + C10756 * C328 + C10754 * C341) *
                C48417 +
            (C10756 * C312 + C10754 * C329 + C10757 * C1728 + C48410 * C1729) *
                C304 +
            (C10756 * C330 + C10754 * C342 + C10757 * C1730 + C48410 * C1731) *
                C48390) *
               C48377) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C1173 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C1167 -
            (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
                C1174 -
            (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
                C1168 +
            (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
                C1175 +
            (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
                C48390) *
               C5040 +
           ((C10791 + C10792) * C1173 + (C10793 + C10794) * C1167 -
            (C10985 + C10986) * C1174 - (C10987 + C10988) * C1168 +
            (C10989 + C10990) * C1175 + (C10991 + C10992) * C48390) *
               C48377) *
              C48278 * C48426 +
          (((C10986 + C10985) * C1174 -
            ((C10794 + C10793) * C1167 + (C10792 + C10791) * C1173) +
            (C10988 + C10987) * C1168 - (C10990 + C10989) * C1175 -
            (C10992 + C10991) * C48390) *
               C5040 +
           ((C10993 + C10994) * C1174 -
            ((C10795 + C10796) * C1167 + (C10797 + C10798) * C1173) +
            (C10995 + C10996) * C1168 - (C10997 + C10998) * C1175 -
            (C10999 + C11000) * C48390) *
               C48377) *
              C48278 * C48413 +
          (((C10798 + C10797) * C1173 + (C10796 + C10795) * C1167 -
            (C10994 + C10993) * C1174 - (C10996 + C10995) * C1168 +
            (C10998 + C10997) * C1175 + (C11000 + C10999) * C48390) *
               C5040 +
           ((C10799 + C10800) * C1173 + (C10801 + C10802) * C1167 -
            (C11333 + C11334) * C1174 - (C11335 + C11336) * C1168 +
            (C10756 * C312 + C10754 * C329 + C10757 * C1728 + C48410 * C1729) *
                C1175 +
            (C10756 * C330 + C10754 * C342 + C10757 * C1730 + C48410 * C1731) *
                C48390) *
               C48377) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
               C1267 +
           (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
               C1261 -
           (C10757 * C1004 + C48410 * C1009 + C10756 * C305 + C10754 * C315) *
               C1268 -
           (C10757 * C1010 + C48410 * C1019 + C10756 * C316 + C10754 * C335) *
               C1262 +
           (C10756 * C306 + C10754 * C317 + C10757 * C1406 + C48410 * C1415) *
               C1269 +
           (C10756 * C318 + C10754 * C336 + C10757 * C1416 + C48410 * C1433) *
               C1263 -
           (C10757 * C1854 + C48410 * C1857 + C10756 * C1272 + C10754 * C1278) *
               C1270 -
           (C10757 * C1858 + C48410 * C1863 + C10756 * C1279 + C10754 * C1290) *
               C1264 +
           (C10756 * C1273 + C10754 * C1280 + C10757 * C6776 + C48410 * C6778) *
               C1271 +
           (C10756 * C1281 + C10754 * C1291 + C10757 * C6779 + C48410 * C6782) *
               C1265) *
              C5040 +
          ((C10791 + C10792) * C1267 + (C10793 + C10794) * C1261 -
           (C10985 + C10986) * C1268 - (C10987 + C10988) * C1262 +
           (C10989 + C10990) * C1269 + (C10991 + C10992) * C1263 -
           (C10757 * C1855 + C48410 * C1859 + C10756 * C1274 + C10754 * C1282) *
               C1270 -
           (C10757 * C1860 + C48410 * C1864 + C10756 * C1283 + C10754 * C1292) *
               C1264 +
           (C10756 * C1275 + C10754 * C1284 + C10757 * C6777 + C48410 * C6780) *
               C1271 +
           (C10756 * C1285 + C10754 * C1293 + C10757 * C6781 + C48410 * C6783) *
               C1265) *
              C48377) *
         C48278 * C48044 * C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C47015 +
             (C113 * C123 + C48293 * C136) * C48131 - C5219 * C47007 -
             C5220 * C48138 + C5221 * C47021 + C5222 * C3108) *
                C16454 +
            (C3116 + C3117 - C3118 - C3119 + C3120 + C3121) * C48377) *
               C16456 +
           ((C5219 * C47015 + C5220 * C48131 - C5221 * C47007 - C5222 * C48138 +
             C6119 * C47021 + C6120 * C3108) *
                C16454 +
            (C8281 + C8282 - C8283 - C8284 + C8285 + C8286) * C48377) *
               C48408) *
              C48049 +
          (((C3118 - (C3117 + C3116) + C3119 - C3120 - C3121) * C16454 +
            (C3124 - (C3123 + C3122) + C3125 - C3126 - C3127) * C48377) *
               C16456 +
           ((C8283 - (C8282 + C8281) + C8284 - C8285 - C8286) * C16454 +
            (C8287 - (C8288 + C8289) + C8290 - C8291 - C8292) * C48377) *
               C48408) *
              C48057 +
          ((C3138 * C16454 +
            (C3130 + C3129 - C3128 - C3131 + C3132 + C3133) * C48377) *
               C16456 +
           ((C8289 + C8288 - C8287 - C8290 + C8291 + C8292) * C16454 +
            (C385 * C47015 + C386 * C48131 - C387 * C47007 - C388 * C48138 +
             (C113 * C1550 + C48293 * C1551) * C47021 +
             (C113 * C1552 + C48293 * C1553) * C3108) *
                C48377) *
               C48408) *
              C3111) *
         C48090) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C47015 +
              (C113 * C123 + C48293 * C136) * C48131 - C5219 * C47007 -
              C5220 * C48138 + C5221 * C47021 + C5222 * C3108) *
                 C16454 +
             (C3116 + C3117 - C3118 - C3119 + C3120 + C3121) * C48377) *
                C16456 +
            ((C5219 * C47015 + C5220 * C48131 - C5221 * C47007 -
              C5222 * C48138 + C6119 * C47021 + C6120 * C3108) *
                 C16454 +
             (C8281 + C8282 - C8283 - C8284 + C8285 + C8286) * C48377) *
                C48408) *
               C2812 +
           (((C3118 - (C3117 + C3116) + C3119 - C3120 - C3121) * C16454 +
             (C3124 - (C3123 + C3122) + C3125 - C3126 - C3127) * C48377) *
                C16456 +
            ((C8283 - (C8282 + C8281) + C8284 - C8285 - C8286) * C16454 +
             (C8287 - (C8288 + C8289) + C8290 - C8291 - C8292) * C48377) *
                C48408) *
               C48054) *
              C48359 +
          ((((C5857 * C47007 -
              ((C113 * C533 + C48293 * C550) * C48131 +
               (C113 * C520 + C48293 * C534) * C47015) +
              C5858 * C48138 - C6295 * C47021 - C6296 * C3108) *
                 C16454 +
             (C3438 - (C3439 + C3440) + C3441 - C3442 - C3443) * C48377) *
                C16456 +
            ((C6295 * C47007 - (C5858 * C48131 + C5857 * C47015) +
              C6296 * C48138 - C6789 * C47021 - C6790 * C3108) *
                 C16454 +
             (C8685 - (C8686 + C8687) + C8688 - C8689 - C8690) * C48377) *
                C48408) *
               C2812 +
           (((C3440 + C3439 - C3438 - C3441 + C3442 + C3443) * C16454 +
             (C3446 + C3445 - C3444 - C3447 + C3448 + C3449) * C48377) *
                C16456 +
            ((C8687 + C8686 - C8685 - C8688 + C8689 + C8690) * C16454 +
             (C1045 * C47015 + C1047 * C48131 - C1751 * C47007 -
              C1752 * C48138 + (C113 * C1856 + C48293 * C1861) * C47021 +
              (C113 * C1862 + C48293 * C1865) * C3108) *
                 C48377) *
                C48408) *
               C48054) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2814 +
             (C113 * C123 + C48293 * C136) * C48436 - C5219 * C2815 -
             C5220 * C48432 + C5221 * C2816 + C5222 * C48422 - C6119 * C2817 -
             C6120 * C48400) *
                C16454 +
            (C2819 + C2820 - C2821 - C2822 + C2823 + C2824 - C2825 - C2826) *
                C48377) *
               C16456 +
           ((C5219 * C2814 + C5220 * C48436 - C5221 * C2815 - C5222 * C48432 +
             C6119 * C2816 + C6120 * C48422 - C6121 * C2817 - C6122 * C48400) *
                C16454 +
            (C7925 + C7926 - C7927 - C7928 + C7929 + C7930 - C7931 - C7932) *
                C48377) *
               C48408) *
              C2812 +
          (((C2821 - (C2820 + C2819) + C2822 - C2823 - C2824 + C2825 + C2826) *
                C16454 +
            (C2829 - (C2828 + C2827) + C2830 - C2831 - C2832 + C2833 + C2834) *
                C48377) *
               C16456 +
           ((C7927 - (C7926 + C7925) + C7928 - C7929 - C7930 + C7931 + C7932) *
                C16454 +
            (C383 * C2815 - (C382 * C48436 + C381 * C2814) + C384 * C48432 -
             C1577 * C2816 - C1578 * C48422 +
             (C113 * C1277 + C48293 * C1288) * C2817 +
             (C113 * C1289 + C48293 * C1295) * C48400) *
                C48377) *
               C48408) *
              C48054) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2686 +
             (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
             C5220 * C48135) *
                C16454 +
            (C2689 + C2690 - C2691 - C2692) * C48377) *
               C16456 +
           ((C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                C16454 +
            (C7783 + C7784 - C7785 - C7786) * C48377) *
               C48408) *
              C48435 +
          (((C2691 - (C2690 + C2689) + C2692) * C16454 +
            (C2695 - (C2694 + C2693) + C2696) * C48377) *
               C16456 +
           ((C7785 - (C7784 + C7783) + C7786) * C16454 +
            (C7787 - (C7788 + C7789) + C7790) * C48377) *
               C48408) *
              C48428 +
          ((C2709 * C16454 + (C2699 + C2698 - C2697 - C2700) * C48377) *
               C16456 +
           ((C7789 + C7788 - C7787 - C7790) * C16454 +
            (C7791 + C7792 - C7793 - C7794) * C48377) *
               C48408) *
              C48415 +
          ((C2710 * C16454 + (C2703 - (C2702 + C2701) + C2704) * C48377) *
               C16456 +
           ((C7793 - (C7792 + C7791) + C7794) * C16454 +
            ((C113 * C314 + C48293 * C333) * C2687 -
             (C739 * C2680 + C738 * C2686) +
             (C113 * C334 + C48293 * C344) * C48135) *
                C48377) *
               C48408) *
              C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C2686 +
              (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
              C5220 * C48135) *
                 C16454 +
             (C2689 + C2690 - C2691 - C2692) * C48377) *
                C16456 +
            ((C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                 C16454 +
             (C7783 + C7784 - C7785 - C7786) * C48377) *
                C48408) *
               C2812 +
           (((C2691 - (C2690 + C2689) + C2692) * C16454 +
             (C2695 - (C2694 + C2693) + C2696) * C48377) *
                C16456 +
            ((C7785 - (C7784 + C7783) + C7786) * C16454 +
             (C7787 - (C7788 + C7789) + C7790) * C48377) *
                C48408) *
               C48054) *
              C48430 +
          ((((C5857 * C2687 -
              ((C113 * C533 + C48293 * C550) * C2680 +
               (C113 * C520 + C48293 * C534) * C2686) +
              C5858 * C48135) *
                 C16454 +
             (C2981 - (C2982 + C2983) + C2984) * C48377) *
                C16456 +
            ((C6295 * C2687 - (C5858 * C2680 + C5857 * C2686) +
              C6296 * C48135) *
                 C16454 +
             (C8127 - (C8128 + C8129) + C8130) * C48377) *
                C48408) *
               C2812 +
           (((C2983 + C2982 - C2981 - C2984) * C16454 +
             (C2987 + C2986 - C2985 - C2988) * C48377) *
                C16456 +
            ((C8129 + C8128 - C8127 - C8130) * C16454 +
             (C8487 + C8488 - C8489 - C8490) * C48377) *
                C48408) *
               C48054) *
              C48419 +
          (((((C113 * C522 + C48293 * C537) * C2686 +
              (C113 * C538 + C48293 * C552) * C2680 - C6297 * C2687 -
              C6298 * C48135) *
                 C16454 +
             (C2989 + C2990 - C2991 - C2992) * C48377) *
                C16456 +
            ((C6297 * C2686 + C6298 * C2680 - C6299 * C2687 - C6300 * C48135) *
                 C16454 +
             (C8131 + C8132 - C8133 - C8134) * C48377) *
                C48408) *
               C2812 +
           (((C2991 - (C2990 + C2989) + C2992) * C16454 +
             (C2995 - (C2994 + C2993) + C2996) * C48377) *
                C16456 +
            ((C8133 - (C8132 + C8131) + C8134) * C16454 +
             ((C113 * C1414 + C48293 * C1431) * C2687 -
              (C2346 * C2680 + C2345 * C2686) +
              (C113 * C1432 + C48293 * C1441) * C48135) *
                 C48377) *
                C48408) *
               C48054) *
              C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C2686 +
              (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
              C5220 * C48135) *
                 C16454 +
             (C2689 + C2690 - C2691 - C2692) * C48377) *
                C16456 +
            ((C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                 C16454 +
             (C7783 + C7784 - C7785 - C7786) * C48377) *
                C48408) *
               C48049 +
           (((C2691 - (C2690 + C2689) + C2692) * C16454 +
             (C2695 - (C2694 + C2693) + C2696) * C48377) *
                C16456 +
            ((C7785 - (C7784 + C7783) + C7786) * C16454 +
             (C7787 - (C7788 + C7789) + C7790) * C48377) *
                C48408) *
               C48057 +
           ((C2709 * C16454 + (C2699 + C2698 - C2697 - C2700) * C48377) *
                C16456 +
            ((C7789 + C7788 - C7787 - C7790) * C16454 +
             (C7791 + C7792 - C7793 - C7794) * C48377) *
                C48408) *
               C3111) *
              C48359 +
          ((((C5857 * C2687 -
              ((C113 * C533 + C48293 * C550) * C2680 +
               (C113 * C520 + C48293 * C534) * C2686) +
              C5858 * C48135) *
                 C16454 +
             (C2981 - (C2982 + C2983) + C2984) * C48377) *
                C16456 +
            ((C6295 * C2687 - (C5858 * C2680 + C5857 * C2686) +
              C6296 * C48135) *
                 C16454 +
             (C8127 - (C8128 + C8129) + C8130) * C48377) *
                C48408) *
               C48049 +
           (((C2983 + C2982 - C2981 - C2984) * C16454 +
             (C2987 + C2986 - C2985 - C2988) * C48377) *
                C16456 +
            ((C8129 + C8128 - C8127 - C8130) * C16454 +
             (C8487 + C8488 - C8489 - C8490) * C48377) *
                C48408) *
               C48057 +
           ((C3291 * C16454 + (C3288 - (C3287 + C3286) + C3289) * C48377) *
                C16456 +
            ((C8489 - (C8488 + C8487) + C8490) * C16454 +
             ((C113 * C1728 + C48293 * C1729) * C2687 -
              (C1049 * C2680 + C1048 * C2686) +
              (C113 * C1730 + C48293 * C1731) * C48135) *
                 C48377) *
                C48408) *
               C3111) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2686 +
             (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
             C5220 * C48135) *
                C16454 +
            (C2689 + C2690 - C2691 - C2692) * C48377) *
               C16456 +
           ((C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                C16454 +
            (C7783 + C7784 - C7785 - C7786) * C48377) *
               C48408) *
              C48435 +
          (((C2691 - (C2690 + C2689) + C2692) * C16454 +
            (C2695 - (C2694 + C2693) + C2696) * C48377) *
               C16456 +
           ((C7785 - (C7784 + C7783) + C7786) * C16454 +
            (C7787 - (C7788 + C7789) + C7790) * C48377) *
               C48408) *
              C48428 +
          ((C2709 * C16454 + (C2699 + C2698 - C2697 - C2700) * C48377) *
               C16456 +
           ((C7789 + C7788 - C7787 - C7790) * C16454 +
            (C7791 + C7792 - C7793 - C7794) * C48377) *
               C48408) *
              C48415 +
          ((C2710 * C16454 + (C2703 - (C2702 + C2701) + C2704) * C48377) *
               C16456 +
           ((C7793 - (C7792 + C7791) + C7794) * C16454 +
            ((C113 * C314 + C48293 * C333) * C2687 -
             (C739 * C2680 + C738 * C2686) +
             (C113 * C334 + C48293 * C344) * C48135) *
                C48377) *
               C48408) *
              C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2814 +
             (C113 * C123 + C48293 * C136) * C48436 - C5219 * C2815 -
             C5220 * C48432 + C5221 * C2816 + C5222 * C48422 - C6119 * C2817 -
             C6120 * C48400) *
                C16454 +
            (C2819 + C2820 - C2821 - C2822 + C2823 + C2824 - C2825 - C2826) *
                C48377) *
               C16456 +
           ((C5219 * C2814 + C5220 * C48436 - C5221 * C2815 - C5222 * C48432 +
             C6119 * C2816 + C6120 * C48422 - C6121 * C2817 - C6122 * C48400) *
                C16454 +
            (C7925 + C7926 - C7927 - C7928 + C7929 + C7930 - C7931 - C7932) *
                C48377) *
               C48408) *
              C2812 +
          (((C2821 - (C2820 + C2819) + C2822 - C2823 - C2824 + C2825 + C2826) *
                C16454 +
            (C2829 - (C2828 + C2827) + C2830 - C2831 - C2832 + C2833 + C2834) *
                C48377) *
               C16456 +
           ((C7927 - (C7926 + C7925) + C7928 - C7929 - C7930 + C7931 + C7932) *
                C16454 +
            (C383 * C2815 - (C382 * C48436 + C381 * C2814) + C384 * C48432 -
             C1577 * C2816 - C1578 * C48422 +
             (C113 * C1277 + C48293 * C1288) * C2817 +
             (C113 * C1289 + C48293 * C1295) * C48400) *
                C48377) *
               C48408) *
              C48054) *
         C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C47015 +
              (C113 * C123 + C48293 * C136) * C48131 - C5219 * C47007 -
              C5220 * C48138 + C5221 * C47021 + C5222 * C3108) *
                 C16454 +
             (C3116 + C3117 - C3118 - C3119 + C3120 + C3121) * C48377) *
                C16456 +
            ((C5219 * C47015 + C5220 * C48131 - C5221 * C47007 -
              C5222 * C48138 + C6119 * C47021 + C6120 * C3108) *
                 C16454 +
             (C8281 + C8282 - C8283 - C8284 + C8285 + C8286) * C48377) *
                C48408) *
               C48344 +
           (((C3118 - (C3117 + C3116) + C3119 - C3120 - C3121) * C16454 +
             (C3124 - (C3123 + C3122) + C3125 - C3126 - C3127) * C48377) *
                C16456 +
            ((C8283 - (C8282 + C8281) + C8284 - C8285 - C8286) * C16454 +
             (C8287 - (C8288 + C8289) + C8290 - C8291 - C8292) * C48377) *
                C48408) *
               C48054) *
              C3547 +
          ((((C5857 * C47007 -
              ((C113 * C533 + C48293 * C550) * C48131 +
               (C113 * C520 + C48293 * C534) * C47015) +
              C5858 * C48138 - C6295 * C47021 - C6296 * C3108) *
                 C16454 +
             (C3438 - (C3439 + C3440) + C3441 - C3442 - C3443) * C48377) *
                C16456 +
            ((C6295 * C47007 - (C5858 * C48131 + C5857 * C47015) +
              C6296 * C48138 - C6789 * C47021 - C6790 * C3108) *
                 C16454 +
             (C8685 - (C8686 + C8687) + C8688 - C8689 - C8690) * C48377) *
                C48408) *
               C48344 +
           (((C3440 + C3439 - C3438 - C3441 + C3442 + C3443) * C16454 +
             (C3446 + C3445 - C3444 - C3447 + C3448 + C3449) * C48377) *
                C16456 +
            ((C8687 + C8686 - C8685 - C8688 + C8689 + C8690) * C16454 +
             (C1045 * C47015 + C1047 * C48131 - C1751 * C47007 -
              C1752 * C48138 + (C113 * C1856 + C48293 * C1861) * C47021 +
              (C113 * C1862 + C48293 * C1865) * C3108) *
                 C48377) *
                C48408) *
               C48054) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C47015 +
             (C113 * C123 + C48293 * C136) * C48131 - C5219 * C47007 -
             C5220 * C48138 + C5221 * C47021 + C5222 * C3108) *
                C16454 +
            (C3116 + C3117 - C3118 - C3119 + C3120 + C3121) * C48377) *
               C16456 +
           ((C5219 * C47015 + C5220 * C48131 - C5221 * C47007 - C5222 * C48138 +
             C6119 * C47021 + C6120 * C3108) *
                C16454 +
            (C8281 + C8282 - C8283 - C8284 + C8285 + C8286) * C48377) *
               C48408) *
              C48044 * C48173 +
          (((C5857 * C47007 -
             ((C113 * C533 + C48293 * C550) * C48131 +
              (C113 * C520 + C48293 * C534) * C47015) +
             C5858 * C48138 - C6295 * C47021 - C6296 * C3108) *
                C16454 +
            (C3438 - (C3439 + C3440) + C3441 - C3442 - C3443) * C48377) *
               C16456 +
           ((C6295 * C47007 - (C5858 * C48131 + C5857 * C47015) +
             C6296 * C48138 - C6789 * C47021 - C6790 * C3108) *
                C16454 +
            (C8685 - (C8686 + C8687) + C8688 - C8689 - C8690) * C48377) *
               C48408) *
              C48044 * C48180 +
          ((((C113 * C522 + C48293 * C537) * C47015 +
             (C113 * C538 + C48293 * C552) * C48131 - C6297 * C47007 -
             C6298 * C48138 + C6299 * C47021 + C6300 * C3108) *
                C16454 +
            (C588 * C47015 + C589 * C48131 - C2343 * C47007 - C2344 * C48138 +
             C6301 * C47021 + C6302 * C3108) *
                C48377) *
               C16456 +
           ((C6297 * C47015 + C6298 * C48131 - C6299 * C47007 - C6300 * C48138 +
             (C113 * C6270 + C48293 * C6272) * C47021 +
             (C113 * C6273 + C48293 * C6276) * C3108) *
                C16454 +
            (C2343 * C47015 + C2344 * C48131 - C6301 * C47007 - C6302 * C48138 +
             (C113 * C6271 + C48293 * C6274) * C47021 +
             (C113 * C6275 + C48293 * C6277) * C3108) *
                C48377) *
               C48408) *
              C48044 * C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2814 +
             (C113 * C123 + C48293 * C136) * C48436 - C5219 * C2815 -
             C5220 * C48432 + C5221 * C2816 + C5222 * C48422 - C6119 * C2817 -
             C6120 * C48400) *
                C16454 +
            (C2819 + C2820 - C2821 - C2822 + C2823 + C2824 - C2825 - C2826) *
                C48377) *
               C16456 +
           ((C5219 * C2814 + C5220 * C48436 - C5221 * C2815 - C5222 * C48432 +
             C6119 * C2816 + C6120 * C48422 - C6121 * C2817 - C6122 * C48400) *
                C16454 +
            (C7925 + C7926 - C7927 - C7928 + C7929 + C7930 - C7931 - C7932) *
                C48377) *
               C48408) *
              C48044 * C3547 +
          (((C5857 * C2815 -
             ((C113 * C533 + C48293 * C550) * C48436 +
              (C113 * C520 + C48293 * C534) * C2814) +
             C5858 * C48432 - C6295 * C2816 - C6296 * C48422 + C6789 * C2817 +
             C6790 * C48400) *
                C16454 +
            (C1043 * C2815 - (C583 * C48436 + C582 * C2814) + C1044 * C48432 -
             C1749 * C2816 - C1750 * C48422 + C6643 * C2817 + C6644 * C48400) *
                C48377) *
               C16456 +
           ((C6295 * C2815 - (C5858 * C48436 + C5857 * C2814) + C6296 * C48432 -
             C6789 * C2816 - C6790 * C48422 +
             (C113 * C6776 + C48293 * C6778) * C2817 +
             (C113 * C6779 + C48293 * C6782) * C48400) *
                C16454 +
            (C1749 * C2815 - (C1044 * C48436 + C1043 * C2814) + C1750 * C48432 -
             C6643 * C2816 - C6644 * C48422 +
             (C113 * C6777 + C48293 * C6780) * C2817 +
             (C113 * C6781 + C48293 * C6783) * C48400) *
                C48377) *
               C48408) *
              C48044 * C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C2686 +
              (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
              C5220 * C48135) *
                 C16454 +
             (C2689 + C2690 - C2691 - C2692) * C48377) *
                C16456 +
            ((C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                 C16454 +
             (C7783 + C7784 - C7785 - C7786) * C48377) *
                C48408) *
               C48426 +
           (((C2691 - (C2690 + C2689) + C2692) * C16454 +
             (C2695 - (C2694 + C2693) + C2696) * C48377) *
                C16456 +
            ((C7785 - (C7784 + C7783) + C7786) * C16454 +
             (C7787 - (C7788 + C7789) + C7790) * C48377) *
                C48408) *
               C48413 +
           ((C2709 * C16454 + (C2699 + C2698 - C2697 - C2700) * C48377) *
                C16456 +
            ((C7789 + C7788 - C7787 - C7790) * C16454 +
             (C7791 + C7792 - C7793 - C7794) * C48377) *
                C48408) *
               C48384) *
              C3547 +
          ((((C5857 * C2687 -
              ((C113 * C533 + C48293 * C550) * C2680 +
               (C113 * C520 + C48293 * C534) * C2686) +
              C5858 * C48135) *
                 C16454 +
             (C2981 - (C2982 + C2983) + C2984) * C48377) *
                C16456 +
            ((C6295 * C2687 - (C5858 * C2680 + C5857 * C2686) +
              C6296 * C48135) *
                 C16454 +
             (C8127 - (C8128 + C8129) + C8130) * C48377) *
                C48408) *
               C48426 +
           (((C2983 + C2982 - C2981 - C2984) * C16454 +
             (C2987 + C2986 - C2985 - C2988) * C48377) *
                C16456 +
            ((C8129 + C8128 - C8127 - C8130) * C16454 +
             (C8487 + C8488 - C8489 - C8490) * C48377) *
                C48408) *
               C48413 +
           ((C3291 * C16454 + (C3288 - (C3287 + C3286) + C3289) * C48377) *
                C16456 +
            ((C8489 - (C8488 + C8487) + C8490) * C16454 +
             ((C113 * C1728 + C48293 * C1729) * C2687 -
              (C1049 * C2680 + C1048 * C2686) +
              (C113 * C1730 + C48293 * C1731) * C48135) *
                 C48377) *
                C48408) *
               C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2686 +
             (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
             C5220 * C48135) *
                C16454 +
            (C2689 + C2690 - C2691 - C2692) * C48377) *
               C16456 +
           ((C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                C16454 +
            (C7783 + C7784 - C7785 - C7786) * C48377) *
               C48408) *
              C48044 * C48437 +
          (((C5857 * C2687 -
             ((C113 * C533 + C48293 * C550) * C2680 +
              (C113 * C520 + C48293 * C534) * C2686) +
             C5858 * C48135) *
                C16454 +
            (C2981 - (C2982 + C2983) + C2984) * C48377) *
               C16456 +
           ((C6295 * C2687 - (C5858 * C2680 + C5857 * C2686) + C6296 * C48135) *
                C16454 +
            (C8127 - (C8128 + C8129) + C8130) * C48377) *
               C48408) *
              C48044 * C48434 +
          ((((C113 * C522 + C48293 * C537) * C2686 +
             (C113 * C538 + C48293 * C552) * C2680 - C6297 * C2687 -
             C6298 * C48135) *
                C16454 +
            (C2989 + C2990 - C2991 - C2992) * C48377) *
               C16456 +
           ((C6297 * C2686 + C6298 * C2680 - C6299 * C2687 - C6300 * C48135) *
                C16454 +
            (C8131 + C8132 - C8133 - C8134) * C48377) *
               C48408) *
              C48044 * C48425 +
          (((C7651 * C2687 -
             ((C113 * C2166 + C48293 * C2176) * C2680 +
              (C113 * C2158 + C48293 * C2167) * C2686) +
             C7652 * C48135) *
                C16454 +
            (C7505 * C2687 - (C2466 * C2680 + C2465 * C2686) + C7506 * C48135) *
                C48377) *
               C16456 +
           (((C113 * C7638 + C48293 * C7640) * C2687 -
             (C7652 * C2680 + C7651 * C2686) +
             (C113 * C7641 + C48293 * C7644) * C48135) *
                C16454 +
            ((C113 * C7639 + C48293 * C7642) * C2687 -
             (C7506 * C2680 + C7505 * C2686) +
             (C113 * C7643 + C48293 * C7645) * C48135) *
                C48377) *
               C48408) *
              C48044 * C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C2686 +
              (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
              C5220 * C48135) *
                 C16454 +
             (C2689 + C2690 - C2691 - C2692) * C48377) *
                C16456 +
            ((C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                 C16454 +
             (C7783 + C7784 - C7785 - C7786) * C48377) *
                C48408) *
               C48344 +
           (((C2691 - (C2690 + C2689) + C2692) * C16454 +
             (C2695 - (C2694 + C2693) + C2696) * C48377) *
                C16456 +
            ((C7785 - (C7784 + C7783) + C7786) * C16454 +
             (C7787 - (C7788 + C7789) + C7790) * C48377) *
                C48408) *
               C48054) *
              C48173 +
          ((((C5857 * C2687 -
              ((C113 * C533 + C48293 * C550) * C2680 +
               (C113 * C520 + C48293 * C534) * C2686) +
              C5858 * C48135) *
                 C16454 +
             (C2981 - (C2982 + C2983) + C2984) * C48377) *
                C16456 +
            ((C6295 * C2687 - (C5858 * C2680 + C5857 * C2686) +
              C6296 * C48135) *
                 C16454 +
             (C8127 - (C8128 + C8129) + C8130) * C48377) *
                C48408) *
               C48344 +
           (((C2983 + C2982 - C2981 - C2984) * C16454 +
             (C2987 + C2986 - C2985 - C2988) * C48377) *
                C16456 +
            ((C8129 + C8128 - C8127 - C8130) * C16454 +
             (C8487 + C8488 - C8489 - C8490) * C48377) *
                C48408) *
               C48054) *
              C48180 +
          (((((C113 * C522 + C48293 * C537) * C2686 +
              (C113 * C538 + C48293 * C552) * C2680 - C6297 * C2687 -
              C6298 * C48135) *
                 C16454 +
             (C2989 + C2990 - C2991 - C2992) * C48377) *
                C16456 +
            ((C6297 * C2686 + C6298 * C2680 - C6299 * C2687 - C6300 * C48135) *
                 C16454 +
             (C8131 + C8132 - C8133 - C8134) * C48377) *
                C48408) *
               C48344 +
           (((C2991 - (C2990 + C2989) + C2992) * C16454 +
             (C2995 - (C2994 + C2993) + C2996) * C48377) *
                C16456 +
            ((C8133 - (C8132 + C8131) + C8134) * C16454 +
             ((C113 * C1414 + C48293 * C1431) * C2687 -
              (C2346 * C2680 + C2345 * C2686) +
              (C113 * C1432 + C48293 * C1441) * C48135) *
                 C48377) *
                C48408) *
               C48054) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C2686 +
              (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
              C5220 * C48135) *
                 C16454 +
             (C2689 + C2690 - C2691 - C2692) * C48377) *
                C16456 +
            ((C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                 C16454 +
             (C7783 + C7784 - C7785 - C7786) * C48377) *
                C48408) *
               C48426 +
           (((C2691 - (C2690 + C2689) + C2692) * C16454 +
             (C2695 - (C2694 + C2693) + C2696) * C48377) *
                C16456 +
            ((C7785 - (C7784 + C7783) + C7786) * C16454 +
             (C7787 - (C7788 + C7789) + C7790) * C48377) *
                C48408) *
               C48413 +
           ((C2709 * C16454 + (C2699 + C2698 - C2697 - C2700) * C48377) *
                C16456 +
            ((C7789 + C7788 - C7787 - C7790) * C16454 +
             (C7791 + C7792 - C7793 - C7794) * C48377) *
                C48408) *
               C48384) *
              C3547 +
          ((((C5857 * C2687 -
              ((C113 * C533 + C48293 * C550) * C2680 +
               (C113 * C520 + C48293 * C534) * C2686) +
              C5858 * C48135) *
                 C16454 +
             (C2981 - (C2982 + C2983) + C2984) * C48377) *
                C16456 +
            ((C6295 * C2687 - (C5858 * C2680 + C5857 * C2686) +
              C6296 * C48135) *
                 C16454 +
             (C8127 - (C8128 + C8129) + C8130) * C48377) *
                C48408) *
               C48426 +
           (((C2983 + C2982 - C2981 - C2984) * C16454 +
             (C2987 + C2986 - C2985 - C2988) * C48377) *
                C16456 +
            ((C8129 + C8128 - C8127 - C8130) * C16454 +
             (C8487 + C8488 - C8489 - C8490) * C48377) *
                C48408) *
               C48413 +
           ((C3291 * C16454 + (C3288 - (C3287 + C3286) + C3289) * C48377) *
                C16456 +
            ((C8489 - (C8488 + C8487) + C8490) * C16454 +
             ((C113 * C1728 + C48293 * C1729) * C2687 -
              (C1049 * C2680 + C1048 * C2686) +
              (C113 * C1730 + C48293 * C1731) * C48135) *
                 C48377) *
                C48408) *
               C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2814 +
             (C113 * C123 + C48293 * C136) * C48436 - C5219 * C2815 -
             C5220 * C48432 + C5221 * C2816 + C5222 * C48422 - C6119 * C2817 -
             C6120 * C48400) *
                C16454 +
            (C2819 + C2820 - C2821 - C2822 + C2823 + C2824 - C2825 - C2826) *
                C48377) *
               C16456 +
           ((C5219 * C2814 + C5220 * C48436 - C5221 * C2815 - C5222 * C48432 +
             C6119 * C2816 + C6120 * C48422 - C6121 * C2817 - C6122 * C48400) *
                C16454 +
            (C7925 + C7926 - C7927 - C7928 + C7929 + C7930 - C7931 - C7932) *
                C48377) *
               C48408) *
              C48044 * C3547 +
          (((C5857 * C2815 -
             ((C113 * C533 + C48293 * C550) * C48436 +
              (C113 * C520 + C48293 * C534) * C2814) +
             C5858 * C48432 - C6295 * C2816 - C6296 * C48422 + C6789 * C2817 +
             C6790 * C48400) *
                C16454 +
            (C1043 * C2815 - (C583 * C48436 + C582 * C2814) + C1044 * C48432 -
             C1749 * C2816 - C1750 * C48422 + C6643 * C2817 + C6644 * C48400) *
                C48377) *
               C16456 +
           ((C6295 * C2815 - (C5858 * C48436 + C5857 * C2814) + C6296 * C48432 -
             C6789 * C2816 - C6790 * C48422 +
             (C113 * C6776 + C48293 * C6778) * C2817 +
             (C113 * C6779 + C48293 * C6782) * C48400) *
                C16454 +
            (C1749 * C2815 - (C1044 * C48436 + C1043 * C2814) + C1750 * C48432 -
             C6643 * C2816 - C6644 * C48422 +
             (C113 * C6777 + C48293 * C6780) * C2817 +
             (C113 * C6781 + C48293 * C6783) * C48400) *
                C48377) *
               C48408) *
              C48044 * C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1546 +
             (C113 * C123 + C48293 * C136) * C1540 - C5219 * C1547 -
             C5220 * C1541 + C5221 * C1548 + C5222 * C1542 - C6119 * C1549 -
             C6120 * C48400) *
                C16454 +
            (C1555 + C1556 - C1557 - C1558 + C1559 + C1560 - C1579 - C1580) *
                C48377) *
               C16456 +
           ((C5219 * C1546 + C5220 * C1540 - C5221 * C1547 - C5222 * C1541 +
             C6119 * C1548 + C6120 * C1542 - C6121 * C1549 - C6122 * C48400) *
                C16454 +
            (C6433 + C6434 - C6435 - C6436 + C6437 + C6438 - C6439 - C6440) *
                C48377) *
               C48408) *
              C48344 +
          (((C1557 - (C1556 + C1555) + C1558 - C1559 - C1560 + C1579 + C1580) *
                C16454 +
            (C1567 - (C1566 + C1565) + C1568 - C1569 - C1570 + C1581 + C1582) *
                C48377) *
               C16456 +
           ((C6435 - (C6434 + C6433) + C6436 - C6437 - C6438 + C6439 + C6440) *
                C16454 +
            (C383 * C1547 - (C382 * C1540 + C381 * C1546) + C384 * C1541 -
             C1577 * C1548 - C1578 * C1542 +
             (C113 * C1277 + C48293 * C1288) * C1549 +
             (C113 * C1289 + C48293 * C1295) * C48400) *
                C48377) *
               C48408) *
              C48054) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C711 +
             (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
             C5220 * C48135) *
                C16454 +
            (C718 + C719 - C720 - C721) * C48377) *
               C16456 +
           ((C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                C16454 +
            (C5507 + C5508 - C5509 - C5510) * C48377) *
               C48408) *
              C707 +
          (((C720 - (C719 + C718) + C721) * C16454 +
            (C724 - (C723 + C722) + C725) * C48377) *
               C16456 +
           ((C5509 - (C5508 + C5507) + C5510) * C16454 +
            (C5511 - (C5512 + C5513) + C5514) * C48377) *
               C48408) *
              C708 +
          ((C744 * C16454 + (C728 + C727 - C726 - C729) * C48377) * C16456 +
           ((C5513 + C5512 - C5511 - C5514) * C16454 +
            (C5515 + C5516 - C5517 - C5518) * C48377) *
               C48408) *
              C709 +
          ((C745 * C16454 + (C742 - (C731 + C730) + C743) * C48377) * C16456 +
           ((C5517 - (C5516 + C5515) + C5518) * C16454 +
            ((C113 * C314 + C48293 * C333) * C712 -
             (C739 * C48358 + C738 * C711) +
             (C113 * C334 + C48293 * C344) * C48135) *
                C48377) *
               C48408) *
              C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C711 +
              (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
              C5220 * C48135) *
                 C16454 +
             (C718 + C719 - C720 - C721) * C48377) *
                C16456 +
            ((C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                 C16454 +
             (C5507 + C5508 - C5509 - C5510) * C48377) *
                C48408) *
               C48344 +
           (((C720 - (C719 + C718) + C721) * C16454 +
             (C724 - (C723 + C722) + C725) * C48377) *
                C16456 +
            ((C5509 - (C5508 + C5507) + C5510) * C16454 +
             (C5511 - (C5512 + C5513) + C5514) * C48377) *
                C48408) *
               C48054) *
              C1976 +
          ((((C5857 * C712 -
              ((C113 * C533 + C48293 * C550) * C48358 +
               (C113 * C520 + C48293 * C534) * C711) +
              C5858 * C48135) *
                 C16454 +
             (C1050 - (C1027 + C1028) + C1051) * C48377) *
                C16456 +
            ((C6295 * C712 - (C5858 * C48358 + C5857 * C711) + C6296 * C48135) *
                 C16454 +
             (C5849 - (C5850 + C5851) + C5852) * C48377) *
                C48408) *
               C48344 +
           (((C1028 + C1027 - C1050 - C1051) * C16454 +
             (C1034 + C1033 - C1052 - C1053) * C48377) *
                C16456 +
            ((C5851 + C5850 - C5849 - C5852) * C16454 +
             (C5853 + C5854 - C5855 - C5856) * C48377) *
                C48408) *
               C48054) *
              C1977 +
          (((((C113 * C522 + C48293 * C537) * C711 +
              (C113 * C538 + C48293 * C552) * C48358 - C6297 * C712 -
              C6298 * C48135) *
                 C16454 +
             (C2331 + C2332 - C2347 - C2348) * C48377) *
                C16456 +
            ((C6297 * C711 + C6298 * C48358 - C6299 * C712 - C6300 * C48135) *
                 C16454 +
             (C7367 + C7368 - C7369 - C7370) * C48377) *
                C48408) *
               C48344 +
           (((C2347 - (C2332 + C2331) + C2348) * C16454 +
             (C2349 - (C2338 + C2337) + C2350) * C48377) *
                C16456 +
            ((C7369 - (C7368 + C7367) + C7370) * C16454 +
             ((C113 * C1414 + C48293 * C1431) * C712 -
              (C2346 * C48358 + C2345 * C711) +
              (C113 * C1432 + C48293 * C1441) * C48135) *
                 C48377) *
                C48408) *
               C48054) *
              C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1546 +
             (C113 * C123 + C48293 * C136) * C1540 - C5219 * C1547 -
             C5220 * C1541 + C5221 * C1548 + C5222 * C1542 - C6119 * C1549 -
             C6120 * C48400) *
                C16454 +
            (C1555 + C1556 - C1557 - C1558 + C1559 + C1560 - C1579 - C1580) *
                C48377) *
               C16456 +
           ((C5219 * C1546 + C5220 * C1540 - C5221 * C1547 - C5222 * C1541 +
             C6119 * C1548 + C6120 * C1542 - C6121 * C1549 - C6122 * C48400) *
                C16454 +
            (C6433 + C6434 - C6435 - C6436 + C6437 + C6438 - C6439 - C6440) *
                C48377) *
               C48408) *
              C48044 * C48359 +
          (((C5857 * C1547 -
             ((C113 * C533 + C48293 * C550) * C1540 +
              (C113 * C520 + C48293 * C534) * C1546) +
             C5858 * C1541 - C6295 * C1548 - C6296 * C1542 + C6789 * C1549 +
             C6790 * C48400) *
                C16454 +
            (C1043 * C1547 - (C583 * C1540 + C582 * C1546) + C1044 * C1541 -
             C1749 * C1548 - C1750 * C1542 + C6643 * C1549 + C6644 * C48400) *
                C48377) *
               C16456 +
           ((C6295 * C1547 - (C5858 * C1540 + C5857 * C1546) + C6296 * C1541 -
             C6789 * C1548 - C6790 * C1542 +
             (C113 * C6776 + C48293 * C6778) * C1549 +
             (C113 * C6779 + C48293 * C6782) * C48400) *
                C16454 +
            (C1749 * C1547 - (C1044 * C1540 + C1043 * C1546) + C1750 * C1541 -
             C6643 * C1548 - C6644 * C1542 +
             (C113 * C6777 + C48293 * C6780) * C1549 +
             (C113 * C6781 + C48293 * C6783) * C48400) *
                C48377) *
               C48408) *
              C48044 * C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C711 +
              (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
              C5220 * C48135) *
                 C16454 +
             (C718 + C719 - C720 - C721) * C48377) *
                C16456 +
            ((C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                 C16454 +
             (C5507 + C5508 - C5509 - C5510) * C48377) *
                C48408) *
               C299 +
           (((C720 - (C719 + C718) + C721) * C16454 +
             (C724 - (C723 + C722) + C725) * C48377) *
                C16456 +
            ((C5509 - (C5508 + C5507) + C5510) * C16454 +
             (C5511 - (C5512 + C5513) + C5514) * C48377) *
                C48408) *
               C300 +
           ((C744 * C16454 + (C728 + C727 - C726 - C729) * C48377) * C16456 +
            ((C5513 + C5512 - C5511 - C5514) * C16454 +
             (C5515 + C5516 - C5517 - C5518) * C48377) *
                C48408) *
               C48384) *
              C48359 +
          ((((C5857 * C712 -
              ((C113 * C533 + C48293 * C550) * C48358 +
               (C113 * C520 + C48293 * C534) * C711) +
              C5858 * C48135) *
                 C16454 +
             (C1050 - (C1027 + C1028) + C1051) * C48377) *
                C16456 +
            ((C6295 * C712 - (C5858 * C48358 + C5857 * C711) + C6296 * C48135) *
                 C16454 +
             (C5849 - (C5850 + C5851) + C5852) * C48377) *
                C48408) *
               C299 +
           (((C1028 + C1027 - C1050 - C1051) * C16454 +
             (C1034 + C1033 - C1052 - C1053) * C48377) *
                C16456 +
            ((C5851 + C5850 - C5849 - C5852) * C16454 +
             (C5853 + C5854 - C5855 - C5856) * C48377) *
                C48408) *
               C300 +
           ((C1057 * C16454 + (C1054 - (C1038 + C1037) + C1055) * C48377) *
                C16456 +
            ((C5855 - (C5854 + C5853) + C5856) * C16454 +
             ((C113 * C1728 + C48293 * C1729) * C712 -
              (C1049 * C48358 + C1048 * C711) +
              (C113 * C1730 + C48293 * C1731) * C48135) *
                 C48377) *
                C48408) *
               C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C711 +
             (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
             C5220 * C48135) *
                C16454 +
            (C718 + C719 - C720 - C721) * C48377) *
               C16456 +
           ((C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                C16454 +
            (C5507 + C5508 - C5509 - C5510) * C48377) *
               C48408) *
              C48044 * C2448 +
          (((C5857 * C712 -
             ((C113 * C533 + C48293 * C550) * C48358 +
              (C113 * C520 + C48293 * C534) * C711) +
             C5858 * C48135) *
                C16454 +
            (C1050 - (C1027 + C1028) + C1051) * C48377) *
               C16456 +
           ((C6295 * C712 - (C5858 * C48358 + C5857 * C711) + C6296 * C48135) *
                C16454 +
            (C5849 - (C5850 + C5851) + C5852) * C48377) *
               C48408) *
              C48044 * C2449 +
          ((((C113 * C522 + C48293 * C537) * C711 +
             (C113 * C538 + C48293 * C552) * C48358 - C6297 * C712 -
             C6298 * C48135) *
                C16454 +
            (C2331 + C2332 - C2347 - C2348) * C48377) *
               C16456 +
           ((C6297 * C711 + C6298 * C48358 - C6299 * C712 - C6300 * C48135) *
                C16454 +
            (C7367 + C7368 - C7369 - C7370) * C48377) *
               C48408) *
              C48044 * C2450 +
          (((C7651 * C712 -
             ((C113 * C2166 + C48293 * C2176) * C48358 +
              (C113 * C2158 + C48293 * C2167) * C711) +
             C7652 * C48135) *
                C16454 +
            (C7505 * C712 - (C2466 * C48358 + C2465 * C711) + C7506 * C48135) *
                C48377) *
               C16456 +
           (((C113 * C7638 + C48293 * C7640) * C712 -
             (C7652 * C48358 + C7651 * C711) +
             (C113 * C7641 + C48293 * C7644) * C48135) *
                C16454 +
            ((C113 * C7639 + C48293 * C7642) * C712 -
             (C7506 * C48358 + C7505 * C711) +
             (C113 * C7643 + C48293 * C7645) * C48135) *
                C48377) *
               C48408) *
              C48044 * C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48293 * C122) * C114 +
                 (C113 * C123 + C48293 * C136) * C48072) *
                    C16454 +
                (C174 + C175) * C48377) *
                   C16456 +
               ((C5219 * C114 + C5220 * C48072) * C16454 +
                (C5045 + C5046) * C48377) *
                   C48408) *
                  C107 -
              (((C5047 + C5048) * C48377 + (C5046 + C5045) * C16454) * C48408 +
               ((C177 + C176) * C48377 + (C175 + C174) * C16454) * C16456) *
                  C108 +
              ((C184 * C16454 + (C179 + C178) * C48377) * C16456 +
               ((C5048 + C5047) * C16454 + (C5049 + C5050) * C48377) * C48408) *
                  C109 -
              (((C5051 + C5052) * C48377 + (C5050 + C5049) * C16454) * C48408 +
               ((C181 + C180) * C48377 + C185 * C16454) * C16456) *
                  C110 +
              ((C186 * C16454 + (C183 + C182) * C48377) * C16456 +
               ((C5052 + C5051) * C16454 +
                ((C113 * C713 + C48293 * C714) * C114 +
                 (C113 * C715 + C48293 * C716) * C48072) *
                    C48377) *
                   C48408) *
                  C111) *
             C48090 +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48293 * C122) * C302 +
                 (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
                 C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
                    C16454 +
                (C346 + C347 - C389 - C390 + C391 + C392) * C48377) *
                   C16456 +
               ((C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
                 C6119 * C304 + C6120 * C48390) *
                    C16454 +
                (C5207 + C5208 - C5209 - C5210 + C5211 + C5212) * C48377) *
                   C48408) *
                  C299 +
              (((C389 - (C347 + C346) + C390 - C391 - C392) * C16454 +
                (C393 - (C357 + C356) + C394 - C395 - C396) * C48377) *
                   C16456 +
               ((C5209 - (C5208 + C5207) + C5210 - C5211 - C5212) * C16454 +
                (C5213 - (C5214 + C5215) + C5216 - C5217 - C5218) * C48377) *
                   C48408) *
                  C300 +
              ((C404 * C16454 +
                (C369 + C368 - C397 - C398 + C399 + C400) * C48377) *
                   C16456 +
               ((C5215 + C5214 - C5213 - C5216 + C5217 + C5218) * C16454 +
                (C385 * C302 + C386 * C48429 - C387 * C303 - C388 * C48417 +
                 (C113 * C1550 + C48293 * C1551) * C304 +
                 (C113 * C1552 + C48293 * C1553) * C48390) *
                    C48377) *
                   C48408) *
                  C48384) *
             C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C16454 +
             (C174 + C175) * C48377) *
                C16456 +
            ((C5219 * C114 + C5220 * C48072) * C16454 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C299 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C16454) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C16454) * C16456) *
               C300 +
           ((C184 * C16454 + (C179 + C178) * C48377) * C16456 +
            ((C5048 + C5047) * C16454 + (C5049 + C5050) * C48377) * C48408) *
               C48384) *
              C48430 +
          ((((C594 + C595) * C16454 + (C596 + C597) * C48377) * C16456 +
            ((C5369 + C5370) * C16454 + (C5371 + C5372) * C48377) * C48408) *
               C300 -
           (((C5370 + C5369) * C48377 +
             (C5858 * C48072 + C5857 * C114) * C16454) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C16454) *
                C16456) *
               C299 -
           (((C5649 + C5650) * C48377 + (C5372 + C5371) * C16454) * C48408 +
            ((C599 + C598) * C48377 + C606 * C16454) * C16456) *
               C48384) *
              C48419 +
          (((((C113 * C522 + C48293 * C537) * C114 +
              (C113 * C538 + C48293 * C552) * C48072) *
                 C16454 +
             (C600 + C601) * C48377) *
                C16456 +
            ((C6297 * C114 + C6298 * C48072) * C16454 +
             (C5373 + C5374) * C48377) *
                C48408) *
               C299 -
           (((C5375 + C5376) * C48377 + (C5374 + C5373) * C16454) * C48408 +
            ((C603 + C602) * C48377 + (C601 + C600) * C16454) * C16456) *
               C300 +
           ((C607 * C16454 + (C605 + C604) * C48377) * C16456 +
            ((C5376 + C5375) * C16454 +
             ((C113 * C2326 + C48293 * C2327) * C114 +
              (C113 * C2328 + C48293 * C2329) * C48072) *
                 C48377) *
                C48408) *
               C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1173 +
             (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
             C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
                C16454 +
            (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C48377) *
               C16456 +
           ((C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
             C6119 * C1175 + C6120 * C48390) *
                C16454 +
            (C6005 + C6006 - C6007 - C6008 + C6009 + C6010) * C48377) *
               C48408) *
              C48426 +
          (((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C16454 +
            (C1185 - (C1184 + C1183) + C1186 - C1187 - C1188) * C48377) *
               C16456 +
           ((C6007 - (C6006 + C6005) + C6008 - C6009 - C6010) * C16454 +
            (C6011 - (C6012 + C6013) + C6014 - C6015 - C6016) * C48377) *
               C48408) *
              C48413 +
          ((C1199 * C16454 +
            (C1191 + C1190 - C1189 - C1192 + C1193 + C1194) * C48377) *
               C16456 +
           ((C6013 + C6012 - C6011 - C6014 + C6015 + C6016) * C16454 +
            (C385 * C1173 + C386 * C1167 - C387 * C1174 - C388 * C1168 +
             (C113 * C1550 + C48293 * C1551) * C1175 +
             (C113 * C1552 + C48293 * C1553) * C48390) *
                C48377) *
               C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1267 +
            (C113 * C123 + C48293 * C136) * C1261 - C5219 * C1268 -
            C5220 * C1262 + C5221 * C1269 + C5222 * C1263 - C6119 * C1270 -
            C6120 * C1264 + C6121 * C1271 + C6122 * C1265) *
               C16454 +
           (C164 * C1267 + C165 * C1261 - C376 * C1268 - C377 * C1262 +
            C378 * C1269 + C379 * C1263 - C1575 * C1270 - C1576 * C1264 +
            C6123 * C1271 + C6124 * C1265) *
               C48377) *
              C16456 +
          ((C5219 * C1267 + C5220 * C1261 - C5221 * C1268 - C5222 * C1262 +
            C6119 * C1269 + C6120 * C1263 - C6121 * C1270 - C6122 * C1264 +
            (C113 * C6098 + C48293 * C6100) * C1271 +
            (C113 * C6101 + C48293 * C6104) * C1265) *
               C16454 +
           (C376 * C1267 + C377 * C1261 - C378 * C1268 - C379 * C1262 +
            C1575 * C1269 + C1576 * C1263 - C6123 * C1270 - C6124 * C1264 +
            (C113 * C6099 + C48293 * C6102) * C1271 +
            (C113 * C6103 + C48293 * C6105) * C1265) *
               C48377) *
              C48408) *
         C48044 * C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1173 +
             (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
             C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
                C16454 +
            (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C48377) *
               C16456 +
           ((C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
             C6119 * C1175 + C6120 * C48390) *
                C16454 +
            (C6005 + C6006 - C6007 - C6008 + C6009 + C6010) * C48377) *
               C48408) *
              C48044 * C48430 +
          (((C5857 * C1174 -
             ((C113 * C533 + C48293 * C550) * C1167 +
              (C113 * C520 + C48293 * C534) * C1173) +
             C5858 * C1168 - C6295 * C1175 - C6296 * C48390) *
                C16454 +
            (C1733 - (C1734 + C1735) + C1736 - C1753 - C1754) * C48377) *
               C16456 +
           ((C6295 * C1174 - (C5858 * C1167 + C5857 * C1173) + C6296 * C1168 -
             C6789 * C1175 - C6790 * C48390) *
                C16454 +
            (C6635 - (C6636 + C6637) + C6638 - C6645 - C6646) * C48377) *
               C48408) *
              C48044 * C48419 +
          ((((C113 * C522 + C48293 * C537) * C1173 +
             (C113 * C538 + C48293 * C552) * C1167 - C6297 * C1174 -
             C6298 * C1168 + C6299 * C1175 + C6300 * C48390) *
                C16454 +
            (C588 * C1173 + C589 * C1167 - C2343 * C1174 - C2344 * C1168 +
             C6301 * C1175 + C6302 * C48390) *
                C48377) *
               C16456 +
           ((C6297 * C1173 + C6298 * C1167 - C6299 * C1174 - C6300 * C1168 +
             (C113 * C6270 + C48293 * C6272) * C1175 +
             (C113 * C6273 + C48293 * C6276) * C48390) *
                C16454 +
            (C2343 * C1173 + C2344 * C1167 - C6301 * C1174 - C6302 * C1168 +
             (C113 * C6271 + C48293 * C6274) * C1175 +
             (C113 * C6275 + C48293 * C6277) * C48390) *
                C48377) *
               C48408) *
              C48044 * C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C16454 +
             (C174 + C175) * C48377) *
                C16456 +
            ((C5219 * C114 + C5220 * C48072) * C16454 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C48426 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C16454) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C16454) * C16456) *
               C48413 +
           ((C184 * C16454 + (C179 + C178) * C48377) * C16456 +
            ((C5048 + C5047) * C16454 + (C5049 + C5050) * C48377) * C48408) *
               C48384) *
              C1976 +
          ((((C594 + C595) * C16454 + (C596 + C597) * C48377) * C16456 +
            ((C5369 + C5370) * C16454 + (C5371 + C5372) * C48377) * C48408) *
               C48413 -
           (((C5370 + C5369) * C48377 +
             (C5858 * C48072 + C5857 * C114) * C16454) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C16454) *
                C16456) *
               C48426 -
           (((C5649 + C5650) * C48377 + (C5372 + C5371) * C16454) * C48408 +
            ((C599 + C598) * C48377 + C606 * C16454) * C16456) *
               C48384) *
              C1977 +
          (((((C113 * C522 + C48293 * C537) * C114 +
              (C113 * C538 + C48293 * C552) * C48072) *
                 C16454 +
             (C600 + C601) * C48377) *
                C16456 +
            ((C6297 * C114 + C6298 * C48072) * C16454 +
             (C5373 + C5374) * C48377) *
                C48408) *
               C48426 -
           (((C5375 + C5376) * C48377 + (C5374 + C5373) * C16454) * C48408 +
            ((C603 + C602) * C48377 + (C601 + C600) * C16454) * C16456) *
               C48413 +
           ((C607 * C16454 + (C605 + C604) * C48377) * C16456 +
            ((C5376 + C5375) * C16454 +
             ((C113 * C2326 + C48293 * C2327) * C114 +
              (C113 * C2328 + C48293 * C2329) * C48072) *
                 C48377) *
                C48408) *
               C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C302 +
             (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
             C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
                C16454 +
            (C346 + C347 - C389 - C390 + C391 + C392) * C48377) *
               C16456 +
           ((C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
             C6119 * C304 + C6120 * C48390) *
                C16454 +
            (C5207 + C5208 - C5209 - C5210 + C5211 + C5212) * C48377) *
               C48408) *
              C48044 * C1976 +
          (((C5857 * C303 -
             ((C113 * C533 + C48293 * C550) * C48429 +
              (C113 * C520 + C48293 * C534) * C302) +
             C5858 * C48417 - C6295 * C304 - C6296 * C48390) *
                C16454 +
            (C3696 - (C3697 + C3698) + C3699 - C3700 - C3701) * C48377) *
               C16456 +
           ((C6295 * C303 - (C5858 * C48429 + C5857 * C302) + C6296 * C48417 -
             C6789 * C304 - C6790 * C48390) *
                C16454 +
            (C9015 - (C9016 + C9017) + C9018 - C9019 - C9020) * C48377) *
               C48408) *
              C48044 * C1977 +
          ((((C113 * C522 + C48293 * C537) * C302 +
             (C113 * C538 + C48293 * C552) * C48429 - C6297 * C303 -
             C6298 * C48417 + C6299 * C304 + C6300 * C48390) *
                C16454 +
            (C588 * C302 + C589 * C48429 - C2343 * C303 - C2344 * C48417 +
             C6301 * C304 + C6302 * C48390) *
                C48377) *
               C16456 +
           ((C6297 * C302 + C6298 * C48429 - C6299 * C303 - C6300 * C48417 +
             (C113 * C6270 + C48293 * C6272) * C304 +
             (C113 * C6273 + C48293 * C6276) * C48390) *
                C16454 +
            (C2343 * C302 + C2344 * C48429 - C6301 * C303 - C6302 * C48417 +
             (C113 * C6271 + C48293 * C6274) * C304 +
             (C113 * C6275 + C48293 * C6277) * C48390) *
                C48377) *
               C48408) *
              C48044 * C48393)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C16454 +
            (C174 + C175) * C48377) *
               C16456 +
           ((C5219 * C114 + C5220 * C48072) * C16454 +
            (C5045 + C5046) * C48377) *
               C48408) *
              C48044 * C2151 -
          (((C5370 + C5369) * C48377 +
            (C5858 * C48072 + C5857 * C114) * C16454) *
               C48408 +
           ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                      (C113 * C520 + C48293 * C534) * C114) *
                                         C16454) *
               C16456) *
              C48044 * C2152 +
          ((((C113 * C522 + C48293 * C537) * C114 +
             (C113 * C538 + C48293 * C552) * C48072) *
                C16454 +
            (C600 + C601) * C48377) *
               C16456 +
           ((C6297 * C114 + C6298 * C48072) * C16454 +
            (C5373 + C5374) * C48377) *
               C48408) *
              C48044 * C2153 -
          (((C7508 + C7507) * C48377 +
            (C7652 * C48072 + C7651 * C114) * C16454) *
               C48408 +
           ((C2470 + C2469) * C48377 +
            ((C113 * C2166 + C48293 * C2176) * C48072 +
             (C113 * C2158 + C48293 * C2167) * C114) *
                C16454) *
               C16456) *
              C48044 * C2154 +
          ((((C113 * C2159 + C48293 * C2168) * C114 +
             (C113 * C2169 + C48293 * C2177) * C48072) *
                C16454 +
            ((C113 * C2160 + C48293 * C2170) * C114 +
             (C113 * C2171 + C48293 * C2178) * C48072) *
                C48377) *
               C16456 +
           (((C113 * C7164 + C48293 * C7166) * C114 +
             (C113 * C7167 + C48293 * C7170) * C48072) *
                C16454 +
            ((C113 * C7165 + C48293 * C7168) * C114 +
             (C113 * C7169 + C48293 * C7171) * C48072) *
                C48377) *
               C48408) *
              C48044 * C2155)) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C1173 +
              (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
              C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
                 C16454 +
             (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C48377) *
                C16456 +
            ((C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
              C6119 * C1175 + C6120 * C48390) *
                 C16454 +
             (C6005 + C6006 - C6007 - C6008 + C6009 + C6010) * C48377) *
                C48408) *
               C48344 +
           (((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C16454 +
             (C1185 - (C1184 + C1183) + C1186 - C1187 - C1188) * C48377) *
                C16456 +
            ((C6007 - (C6006 + C6005) + C6008 - C6009 - C6010) * C16454 +
             (C6011 - (C6012 + C6013) + C6014 - C6015 - C6016) * C48377) *
                C48408) *
               C48054) *
              C48359 +
          ((((C5857 * C1174 -
              ((C113 * C533 + C48293 * C550) * C1167 +
               (C113 * C520 + C48293 * C534) * C1173) +
              C5858 * C1168 - C6295 * C1175 - C6296 * C48390) *
                 C16454 +
             (C1733 - (C1734 + C1735) + C1736 - C1753 - C1754) * C48377) *
                C16456 +
            ((C6295 * C1174 - (C5858 * C1167 + C5857 * C1173) + C6296 * C1168 -
              C6789 * C1175 - C6790 * C48390) *
                 C16454 +
             (C6635 - (C6636 + C6637) + C6638 - C6645 - C6646) * C48377) *
                C48408) *
               C48344 +
           (((C1735 + C1734 - C1733 - C1736 + C1753 + C1754) * C16454 +
             (C1743 + C1742 - C1741 - C1744 + C1755 + C1756) * C48377) *
                C16456 +
            ((C6637 + C6636 - C6635 - C6638 + C6645 + C6646) * C16454 +
             (C1045 * C1173 + C1047 * C1167 - C1751 * C1174 - C1752 * C1168 +
              (C113 * C1856 + C48293 * C1861) * C1175 +
              (C113 * C1862 + C48293 * C1865) * C48390) *
                 C48377) *
                C48408) *
               C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C16454 +
             (C174 + C175) * C48377) *
                C16456 +
            ((C5219 * C114 + C5220 * C48072) * C16454 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C707 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C16454) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C16454) * C16456) *
               C708 +
           ((C184 * C16454 + (C179 + C178) * C48377) * C16456 +
            ((C5048 + C5047) * C16454 + (C5049 + C5050) * C48377) * C48408) *
               C709 -
           (((C5051 + C5052) * C48377 + (C5050 + C5049) * C16454) * C48408 +
            ((C181 + C180) * C48377 + C185 * C16454) * C16456) *
               C48394) *
              C48359 +
          ((((C594 + C595) * C16454 + (C596 + C597) * C48377) * C16456 +
            ((C5369 + C5370) * C16454 + (C5371 + C5372) * C48377) * C48408) *
               C708 -
           (((C5370 + C5369) * C48377 +
             (C5858 * C48072 + C5857 * C114) * C16454) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C16454) *
                C16456) *
               C707 -
           (((C5649 + C5650) * C48377 + (C5372 + C5371) * C16454) * C48408 +
            ((C599 + C598) * C48377 + C606 * C16454) * C16456) *
               C709 +
           ((C850 * C16454 + (C858 + C857) * C48377) * C16456 +
            ((C5650 + C5649) * C16454 +
             ((C113 * C1008 + C48293 * C1017) * C114 +
              (C113 * C1018 + C48293 * C1023) * C48072) *
                 C48377) *
                C48408) *
               C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C16454 +
             (C174 + C175) * C48377) *
                C16456 +
            ((C5219 * C114 + C5220 * C48072) * C16454 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C48344 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C16454) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C16454) * C16456) *
               C48054) *
              C2448 +
          ((((C594 + C595) * C16454 + (C596 + C597) * C48377) * C16456 +
            ((C5369 + C5370) * C16454 + (C5371 + C5372) * C48377) * C48408) *
               C48054 -
           (((C5370 + C5369) * C48377 +
             (C5858 * C48072 + C5857 * C114) * C16454) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C16454) *
                C16456) *
               C48344) *
              C2449 +
          (((((C113 * C522 + C48293 * C537) * C114 +
              (C113 * C538 + C48293 * C552) * C48072) *
                 C16454 +
             (C600 + C601) * C48377) *
                C16456 +
            ((C6297 * C114 + C6298 * C48072) * C16454 +
             (C5373 + C5374) * C48377) *
                C48408) *
               C48344 -
           (((C5375 + C5376) * C48377 + (C5374 + C5373) * C16454) * C48408 +
            ((C603 + C602) * C48377 + (C601 + C600) * C16454) * C16456) *
               C48054) *
              C2450 +
          ((((C2469 + C2470) * C16454 + (C2471 + C2472) * C48377) * C16456 +
            ((C7507 + C7508) * C16454 +
             ((C113 * C2572 + C48293 * C2577) * C114 +
              (C113 * C2578 + C48293 * C2581) * C48072) *
                 C48377) *
                C48408) *
               C48054 -
           (((C7508 + C7507) * C48377 +
             (C7652 * C48072 + C7651 * C114) * C16454) *
                C48408 +
            ((C2470 + C2469) * C48377 +
             ((C113 * C2166 + C48293 * C2176) * C48072 +
              (C113 * C2158 + C48293 * C2167) * C114) *
                 C16454) *
                C16456) *
               C48344) *
              C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C302 +
             (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
             C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
                C16454 +
            (C346 + C347 - C389 - C390 + C391 + C392) * C48377) *
               C16456 +
           ((C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
             C6119 * C304 + C6120 * C48390) *
                C16454 +
            (C5207 + C5208 - C5209 - C5210 + C5211 + C5212) * C48377) *
               C48408) *
              C299 +
          (((C389 - (C347 + C346) + C390 - C391 - C392) * C16454 +
            (C393 - (C357 + C356) + C394 - C395 - C396) * C48377) *
               C16456 +
           ((C5209 - (C5208 + C5207) + C5210 - C5211 - C5212) * C16454 +
            (C5213 - (C5214 + C5215) + C5216 - C5217 - C5218) * C48377) *
               C48408) *
              C300 +
          ((C404 * C16454 +
            (C369 + C368 - C397 - C398 + C399 + C400) * C48377) *
               C16456 +
           ((C5215 + C5214 - C5213 - C5216 + C5217 + C5218) * C16454 +
            (C385 * C302 + C386 * C48429 - C387 * C303 - C388 * C48417 +
             (C113 * C1550 + C48293 * C1551) * C304 +
             (C113 * C1552 + C48293 * C1553) * C48390) *
                C48377) *
               C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C16454 +
            (C174 + C175) * C48377) *
               C16456 +
           ((C5219 * C114 + C5220 * C48072) * C16454 +
            (C5045 + C5046) * C48377) *
               C48408) *
              C107 -
          (((C5047 + C5048) * C48377 + (C5046 + C5045) * C16454) * C48408 +
           ((C177 + C176) * C48377 + (C175 + C174) * C16454) * C16456) *
              C108 +
          ((C184 * C16454 + (C179 + C178) * C48377) * C16456 +
           ((C5048 + C5047) * C16454 + (C5049 + C5050) * C48377) * C48408) *
              C109 -
          (((C5051 + C5052) * C48377 + (C5050 + C5049) * C16454) * C48408 +
           ((C181 + C180) * C48377 + C185 * C16454) * C16456) *
              C110 +
          ((C186 * C16454 + (C183 + C182) * C48377) * C16456 +
           ((C5052 + C5051) * C16454 +
            ((C113 * C713 + C48293 * C714) * C114 +
             (C113 * C715 + C48293 * C716) * C48072) *
                C48377) *
               C48408) *
              C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1173 +
             (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
             C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
                C16454 +
            (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C48377) *
               C16456 +
           ((C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
             C6119 * C1175 + C6120 * C48390) *
                C16454 +
            (C6005 + C6006 - C6007 - C6008 + C6009 + C6010) * C48377) *
               C48408) *
              C48426 +
          (((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C16454 +
            (C1185 - (C1184 + C1183) + C1186 - C1187 - C1188) * C48377) *
               C16456 +
           ((C6007 - (C6006 + C6005) + C6008 - C6009 - C6010) * C16454 +
            (C6011 - (C6012 + C6013) + C6014 - C6015 - C6016) * C48377) *
               C48408) *
              C48413 +
          ((C1199 * C16454 +
            (C1191 + C1190 - C1189 - C1192 + C1193 + C1194) * C48377) *
               C16456 +
           ((C6013 + C6012 - C6011 - C6014 + C6015 + C6016) * C16454 +
            (C385 * C1173 + C386 * C1167 - C387 * C1174 - C388 * C1168 +
             (C113 * C1550 + C48293 * C1551) * C1175 +
             (C113 * C1552 + C48293 * C1553) * C48390) *
                C48377) *
               C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1267 +
            (C113 * C123 + C48293 * C136) * C1261 - C5219 * C1268 -
            C5220 * C1262 + C5221 * C1269 + C5222 * C1263 - C6119 * C1270 -
            C6120 * C1264 + C6121 * C1271 + C6122 * C1265) *
               C16454 +
           (C164 * C1267 + C165 * C1261 - C376 * C1268 - C377 * C1262 +
            C378 * C1269 + C379 * C1263 - C1575 * C1270 - C1576 * C1264 +
            C6123 * C1271 + C6124 * C1265) *
               C48377) *
              C16456 +
          ((C5219 * C1267 + C5220 * C1261 - C5221 * C1268 - C5222 * C1262 +
            C6119 * C1269 + C6120 * C1263 - C6121 * C1270 - C6122 * C1264 +
            (C113 * C6098 + C48293 * C6100) * C1271 +
            (C113 * C6101 + C48293 * C6104) * C1265) *
               C16454 +
           (C376 * C1267 + C377 * C1261 - C378 * C1268 - C379 * C1262 +
            C1575 * C1269 + C1576 * C1263 - C6123 * C1270 - C6124 * C1264 +
            (C113 * C6099 + C48293 * C6102) * C1271 +
            (C113 * C6103 + C48293 * C6105) * C1265) *
               C48377) *
              C48408) *
         C48044 * C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C16454 +
             (C174 + C175) * C48377) *
                C16456 +
            ((C5219 * C114 + C5220 * C48072) * C16454 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C48426 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C16454) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C16454) * C16456) *
               C48413 +
           ((C184 * C16454 + (C179 + C178) * C48377) * C16456 +
            ((C5048 + C5047) * C16454 + (C5049 + C5050) * C48377) * C48408) *
               C48384) *
              C1976 +
          ((((C594 + C595) * C16454 + (C596 + C597) * C48377) * C16456 +
            ((C5369 + C5370) * C16454 + (C5371 + C5372) * C48377) * C48408) *
               C48413 -
           (((C5370 + C5369) * C48377 +
             (C5858 * C48072 + C5857 * C114) * C16454) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C16454) *
                C16456) *
               C48426 -
           (((C5649 + C5650) * C48377 + (C5372 + C5371) * C16454) * C48408 +
            ((C599 + C598) * C48377 + C606 * C16454) * C16456) *
               C48384) *
              C1977 +
          (((((C113 * C522 + C48293 * C537) * C114 +
              (C113 * C538 + C48293 * C552) * C48072) *
                 C16454 +
             (C600 + C601) * C48377) *
                C16456 +
            ((C6297 * C114 + C6298 * C48072) * C16454 +
             (C5373 + C5374) * C48377) *
                C48408) *
               C48426 -
           (((C5375 + C5376) * C48377 + (C5374 + C5373) * C16454) * C48408 +
            ((C603 + C602) * C48377 + (C601 + C600) * C16454) * C16456) *
               C48413 +
           ((C607 * C16454 + (C605 + C604) * C48377) * C16456 +
            ((C5376 + C5375) * C16454 +
             ((C113 * C2326 + C48293 * C2327) * C114 +
              (C113 * C2328 + C48293 * C2329) * C48072) *
                 C48377) *
                C48408) *
               C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C302 +
             (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
             C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
                C16454 +
            (C346 + C347 - C389 - C390 + C391 + C392) * C48377) *
               C16456 +
           ((C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
             C6119 * C304 + C6120 * C48390) *
                C16454 +
            (C5207 + C5208 - C5209 - C5210 + C5211 + C5212) * C48377) *
               C48408) *
              C48044 * C1976 +
          (((C5857 * C303 -
             ((C113 * C533 + C48293 * C550) * C48429 +
              (C113 * C520 + C48293 * C534) * C302) +
             C5858 * C48417 - C6295 * C304 - C6296 * C48390) *
                C16454 +
            (C3696 - (C3697 + C3698) + C3699 - C3700 - C3701) * C48377) *
               C16456 +
           ((C6295 * C303 - (C5858 * C48429 + C5857 * C302) + C6296 * C48417 -
             C6789 * C304 - C6790 * C48390) *
                C16454 +
            (C9015 - (C9016 + C9017) + C9018 - C9019 - C9020) * C48377) *
               C48408) *
              C48044 * C1977 +
          ((((C113 * C522 + C48293 * C537) * C302 +
             (C113 * C538 + C48293 * C552) * C48429 - C6297 * C303 -
             C6298 * C48417 + C6299 * C304 + C6300 * C48390) *
                C16454 +
            (C588 * C302 + C589 * C48429 - C2343 * C303 - C2344 * C48417 +
             C6301 * C304 + C6302 * C48390) *
                C48377) *
               C16456 +
           ((C6297 * C302 + C6298 * C48429 - C6299 * C303 - C6300 * C48417 +
             (C113 * C6270 + C48293 * C6272) * C304 +
             (C113 * C6273 + C48293 * C6276) * C48390) *
                C16454 +
            (C2343 * C302 + C2344 * C48429 - C6301 * C303 - C6302 * C48417 +
             (C113 * C6271 + C48293 * C6274) * C304 +
             (C113 * C6275 + C48293 * C6277) * C48390) *
                C48377) *
               C48408) *
              C48044 * C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C711 +
              (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
              C5220 * C48135) *
                 C16454 +
             (C718 + C719 - C720 - C721) * C48377) *
                C16456 +
            ((C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                 C16454 +
             (C5507 + C5508 - C5509 - C5510) * C48377) *
                C48408) *
               C48049 +
           (((C720 - (C719 + C718) + C721) * C16454 +
             (C724 - (C723 + C722) + C725) * C48377) *
                C16456 +
            ((C5509 - (C5508 + C5507) + C5510) * C16454 +
             (C5511 - (C5512 + C5513) + C5514) * C48377) *
                C48408) *
               C48057 +
           ((C744 * C16454 + (C728 + C727 - C726 - C729) * C48377) * C16456 +
            ((C5513 + C5512 - C5511 - C5514) * C16454 +
             (C5515 + C5516 - C5517 - C5518) * C48377) *
                C48408) *
               C3111) *
              C3547 +
          ((((C5857 * C712 -
              ((C113 * C533 + C48293 * C550) * C48358 +
               (C113 * C520 + C48293 * C534) * C711) +
              C5858 * C48135) *
                 C16454 +
             (C1050 - (C1027 + C1028) + C1051) * C48377) *
                C16456 +
            ((C6295 * C712 - (C5858 * C48358 + C5857 * C711) + C6296 * C48135) *
                 C16454 +
             (C5849 - (C5850 + C5851) + C5852) * C48377) *
                C48408) *
               C48049 +
           (((C1028 + C1027 - C1050 - C1051) * C16454 +
             (C1034 + C1033 - C1052 - C1053) * C48377) *
                C16456 +
            ((C5851 + C5850 - C5849 - C5852) * C16454 +
             (C5853 + C5854 - C5855 - C5856) * C48377) *
                C48408) *
               C48057 +
           ((C1057 * C16454 + (C1054 - (C1038 + C1037) + C1055) * C48377) *
                C16456 +
            ((C5855 - (C5854 + C5853) + C5856) * C16454 +
             ((C113 * C1728 + C48293 * C1729) * C712 -
              (C1049 * C48358 + C1048 * C711) +
              (C113 * C1730 + C48293 * C1731) * C48135) *
                 C48377) *
                C48408) *
               C3111) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C711 +
              (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
              C5220 * C48135) *
                 C16454 +
             (C718 + C719 - C720 - C721) * C48377) *
                C16456 +
            ((C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                 C16454 +
             (C5507 + C5508 - C5509 - C5510) * C48377) *
                C48408) *
               C2812 +
           (((C720 - (C719 + C718) + C721) * C16454 +
             (C724 - (C723 + C722) + C725) * C48377) *
                C16456 +
            ((C5509 - (C5508 + C5507) + C5510) * C16454 +
             (C5511 - (C5512 + C5513) + C5514) * C48377) *
                C48408) *
               C48054) *
              C48173 +
          ((((C5857 * C712 -
              ((C113 * C533 + C48293 * C550) * C48358 +
               (C113 * C520 + C48293 * C534) * C711) +
              C5858 * C48135) *
                 C16454 +
             (C1050 - (C1027 + C1028) + C1051) * C48377) *
                C16456 +
            ((C6295 * C712 - (C5858 * C48358 + C5857 * C711) + C6296 * C48135) *
                 C16454 +
             (C5849 - (C5850 + C5851) + C5852) * C48377) *
                C48408) *
               C2812 +
           (((C1028 + C1027 - C1050 - C1051) * C16454 +
             (C1034 + C1033 - C1052 - C1053) * C48377) *
                C16456 +
            ((C5851 + C5850 - C5849 - C5852) * C16454 +
             (C5853 + C5854 - C5855 - C5856) * C48377) *
                C48408) *
               C48054) *
              C48180 +
          (((((C113 * C522 + C48293 * C537) * C711 +
              (C113 * C538 + C48293 * C552) * C48358 - C6297 * C712 -
              C6298 * C48135) *
                 C16454 +
             (C2331 + C2332 - C2347 - C2348) * C48377) *
                C16456 +
            ((C6297 * C711 + C6298 * C48358 - C6299 * C712 - C6300 * C48135) *
                 C16454 +
             (C7367 + C7368 - C7369 - C7370) * C48377) *
                C48408) *
               C2812 +
           (((C2347 - (C2332 + C2331) + C2348) * C16454 +
             (C2349 - (C2338 + C2337) + C2350) * C48377) *
                C16456 +
            ((C7369 - (C7368 + C7367) + C7370) * C16454 +
             ((C113 * C1414 + C48293 * C1431) * C712 -
              (C2346 * C48358 + C2345 * C711) +
              (C113 * C1432 + C48293 * C1441) * C48135) *
                 C48377) *
                C48408) *
               C48054) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C302 +
              (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
              C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
                 C16454 +
             (C346 + C347 - C389 - C390 + C391 + C392) * C48377) *
                C16456 +
            ((C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
              C6119 * C304 + C6120 * C48390) *
                 C16454 +
             (C5207 + C5208 - C5209 - C5210 + C5211 + C5212) * C48377) *
                C48408) *
               C2812 +
           (((C389 - (C347 + C346) + C390 - C391 - C392) * C16454 +
             (C393 - (C357 + C356) + C394 - C395 - C396) * C48377) *
                C16456 +
            ((C5209 - (C5208 + C5207) + C5210 - C5211 - C5212) * C16454 +
             (C5213 - (C5214 + C5215) + C5216 - C5217 - C5218) * C48377) *
                C48408) *
               C48054) *
              C3547 +
          ((((C5857 * C303 -
              ((C113 * C533 + C48293 * C550) * C48429 +
               (C113 * C520 + C48293 * C534) * C302) +
              C5858 * C48417 - C6295 * C304 - C6296 * C48390) *
                 C16454 +
             (C3696 - (C3697 + C3698) + C3699 - C3700 - C3701) * C48377) *
                C16456 +
            ((C6295 * C303 - (C5858 * C48429 + C5857 * C302) + C6296 * C48417 -
              C6789 * C304 - C6790 * C48390) *
                 C16454 +
             (C9015 - (C9016 + C9017) + C9018 - C9019 - C9020) * C48377) *
                C48408) *
               C2812 +
           (((C3698 + C3697 - C3696 - C3699 + C3700 + C3701) * C16454 +
             (C3704 + C3703 - C3702 - C3705 + C3706 + C3707) * C48377) *
                C16456 +
            ((C9017 + C9016 - C9015 - C9018 + C9019 + C9020) * C16454 +
             (C1045 * C302 + C1047 * C48429 - C1751 * C303 - C1752 * C48417 +
              (C113 * C1856 + C48293 * C1861) * C304 +
              (C113 * C1862 + C48293 * C1865) * C48390) *
                 C48377) *
                C48408) *
               C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C16454 +
             (C174 + C175) * C48377) *
                C16456 +
            ((C5219 * C114 + C5220 * C48072) * C16454 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C48435 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C16454) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C16454) * C16456) *
               C48428 +
           ((C184 * C16454 + (C179 + C178) * C48377) * C16456 +
            ((C5048 + C5047) * C16454 + (C5049 + C5050) * C48377) * C48408) *
               C48415 -
           (((C5051 + C5052) * C48377 + (C5050 + C5049) * C16454) * C48408 +
            ((C181 + C180) * C48377 + C185 * C16454) * C16456) *
               C48394) *
              C3547 +
          ((((C594 + C595) * C16454 + (C596 + C597) * C48377) * C16456 +
            ((C5369 + C5370) * C16454 + (C5371 + C5372) * C48377) * C48408) *
               C48428 -
           (((C5370 + C5369) * C48377 +
             (C5858 * C48072 + C5857 * C114) * C16454) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C16454) *
                C16456) *
               C48435 -
           (((C5649 + C5650) * C48377 + (C5372 + C5371) * C16454) * C48408 +
            ((C599 + C598) * C48377 + C606 * C16454) * C16456) *
               C48415 +
           ((C850 * C16454 + (C858 + C857) * C48377) * C16456 +
            ((C5650 + C5649) * C16454 +
             ((C113 * C1008 + C48293 * C1017) * C114 +
              (C113 * C1018 + C48293 * C1023) * C48072) *
                 C48377) *
                C48408) *
               C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C16454 +
             (C174 + C175) * C48377) *
                C16456 +
            ((C5219 * C114 + C5220 * C48072) * C16454 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C2812 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C16454) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C16454) * C16456) *
               C48054) *
              C48437 +
          ((((C594 + C595) * C16454 + (C596 + C597) * C48377) * C16456 +
            ((C5369 + C5370) * C16454 + (C5371 + C5372) * C48377) * C48408) *
               C48054 -
           (((C5370 + C5369) * C48377 +
             (C5858 * C48072 + C5857 * C114) * C16454) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C16454) *
                C16456) *
               C2812) *
              C48434 +
          (((((C113 * C522 + C48293 * C537) * C114 +
              (C113 * C538 + C48293 * C552) * C48072) *
                 C16454 +
             (C600 + C601) * C48377) *
                C16456 +
            ((C6297 * C114 + C6298 * C48072) * C16454 +
             (C5373 + C5374) * C48377) *
                C48408) *
               C2812 -
           (((C5375 + C5376) * C48377 + (C5374 + C5373) * C16454) * C48408 +
            ((C603 + C602) * C48377 + (C601 + C600) * C16454) * C16456) *
               C48054) *
              C48425 +
          ((((C2469 + C2470) * C16454 + (C2471 + C2472) * C48377) * C16456 +
            ((C7507 + C7508) * C16454 +
             ((C113 * C2572 + C48293 * C2577) * C114 +
              (C113 * C2578 + C48293 * C2581) * C48072) *
                 C48377) *
                C48408) *
               C48054 -
           (((C7508 + C7507) * C48377 +
             (C7652 * C48072 + C7651 * C114) * C16454) *
                C48408 +
            ((C2470 + C2469) * C48377 +
             ((C113 * C2166 + C48293 * C2176) * C48072 +
              (C113 * C2158 + C48293 * C2167) * C114) *
                 C16454) *
                C16456) *
               C2812) *
              C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C16454 +
             (C174 + C175) * C48377) *
                C16456 +
            ((C5219 * C114 + C5220 * C48072) * C16454 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C48049 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C16454) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C16454) * C16456) *
               C48057 +
           ((C184 * C16454 + (C179 + C178) * C48377) * C16456 +
            ((C5048 + C5047) * C16454 + (C5049 + C5050) * C48377) * C48408) *
               C3111) *
              C48173 +
          ((((C594 + C595) * C16454 + (C596 + C597) * C48377) * C16456 +
            ((C5369 + C5370) * C16454 + (C5371 + C5372) * C48377) * C48408) *
               C48057 -
           (((C5370 + C5369) * C48377 +
             (C5858 * C48072 + C5857 * C114) * C16454) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C16454) *
                C16456) *
               C48049 -
           (((C5649 + C5650) * C48377 + (C5372 + C5371) * C16454) * C48408 +
            ((C599 + C598) * C48377 + C606 * C16454) * C16456) *
               C3111) *
              C48180 +
          (((((C113 * C522 + C48293 * C537) * C114 +
              (C113 * C538 + C48293 * C552) * C48072) *
                 C16454 +
             (C600 + C601) * C48377) *
                C16456 +
            ((C6297 * C114 + C6298 * C48072) * C16454 +
             (C5373 + C5374) * C48377) *
                C48408) *
               C48049 -
           (((C5375 + C5376) * C48377 + (C5374 + C5373) * C16454) * C48408 +
            ((C603 + C602) * C48377 + (C601 + C600) * C16454) * C16456) *
               C48057 +
           ((C607 * C16454 + (C605 + C604) * C48377) * C16456 +
            ((C5376 + C5375) * C16454 +
             ((C113 * C2326 + C48293 * C2327) * C114 +
              (C113 * C2328 + C48293 * C2329) * C48072) *
                 C48377) *
                C48408) *
               C3111) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C16454 +
             (C174 + C175) * C48377) *
                C16456 +
            ((C5219 * C114 + C5220 * C48072) * C16454 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C48435 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C16454) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C16454) * C16456) *
               C48428 +
           ((C184 * C16454 + (C179 + C178) * C48377) * C16456 +
            ((C5048 + C5047) * C16454 + (C5049 + C5050) * C48377) * C48408) *
               C48415 -
           (((C5051 + C5052) * C48377 + (C5050 + C5049) * C16454) * C48408 +
            ((C181 + C180) * C48377 + C185 * C16454) * C16456) *
               C48394) *
              C3547 +
          ((((C594 + C595) * C16454 + (C596 + C597) * C48377) * C16456 +
            ((C5369 + C5370) * C16454 + (C5371 + C5372) * C48377) * C48408) *
               C48428 -
           (((C5370 + C5369) * C48377 +
             (C5858 * C48072 + C5857 * C114) * C16454) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C16454) *
                C16456) *
               C48435 -
           (((C5649 + C5650) * C48377 + (C5372 + C5371) * C16454) * C48408 +
            ((C599 + C598) * C48377 + C606 * C16454) * C16456) *
               C48415 +
           ((C850 * C16454 + (C858 + C857) * C48377) * C16456 +
            ((C5650 + C5649) * C16454 +
             ((C113 * C1008 + C48293 * C1017) * C114 +
              (C113 * C1018 + C48293 * C1023) * C48072) *
                 C48377) *
                C48408) *
               C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C302 +
              (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
              C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
                 C16454 +
             (C346 + C347 - C389 - C390 + C391 + C392) * C48377) *
                C16456 +
            ((C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
              C6119 * C304 + C6120 * C48390) *
                 C16454 +
             (C5207 + C5208 - C5209 - C5210 + C5211 + C5212) * C48377) *
                C48408) *
               C2812 +
           (((C389 - (C347 + C346) + C390 - C391 - C392) * C16454 +
             (C393 - (C357 + C356) + C394 - C395 - C396) * C48377) *
                C16456 +
            ((C5209 - (C5208 + C5207) + C5210 - C5211 - C5212) * C16454 +
             (C5213 - (C5214 + C5215) + C5216 - C5217 - C5218) * C48377) *
                C48408) *
               C48054) *
              C3547 +
          ((((C5857 * C303 -
              ((C113 * C533 + C48293 * C550) * C48429 +
               (C113 * C520 + C48293 * C534) * C302) +
              C5858 * C48417 - C6295 * C304 - C6296 * C48390) *
                 C16454 +
             (C3696 - (C3697 + C3698) + C3699 - C3700 - C3701) * C48377) *
                C16456 +
            ((C6295 * C303 - (C5858 * C48429 + C5857 * C302) + C6296 * C48417 -
              C6789 * C304 - C6790 * C48390) *
                 C16454 +
             (C9015 - (C9016 + C9017) + C9018 - C9019 - C9020) * C48377) *
                C48408) *
               C2812 +
           (((C3698 + C3697 - C3696 - C3699 + C3700 + C3701) * C16454 +
             (C3704 + C3703 - C3702 - C3705 + C3706 + C3707) * C48377) *
                C16456 +
            ((C9017 + C9016 - C9015 - C9018 + C9019 + C9020) * C16454 +
             (C1045 * C302 + C1047 * C48429 - C1751 * C303 - C1752 * C48417 +
              (C113 * C1856 + C48293 * C1861) * C304 +
              (C113 * C1862 + C48293 * C1865) * C48390) *
                 C48377) *
                C48408) *
               C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C711 +
             (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
             C5220 * C48135) *
                C16454 +
            (C718 + C719 - C720 - C721) * C48377) *
               C16456 +
           ((C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                C16454 +
            (C5507 + C5508 - C5509 - C5510) * C48377) *
               C48408) *
              C707 +
          (((C720 - (C719 + C718) + C721) * C16454 +
            (C724 - (C723 + C722) + C725) * C48377) *
               C16456 +
           ((C5509 - (C5508 + C5507) + C5510) * C16454 +
            (C5511 - (C5512 + C5513) + C5514) * C48377) *
               C48408) *
              C708 +
          ((C744 * C16454 + (C728 + C727 - C726 - C729) * C48377) * C16456 +
           ((C5513 + C5512 - C5511 - C5514) * C16454 +
            (C5515 + C5516 - C5517 - C5518) * C48377) *
               C48408) *
              C709 +
          ((C745 * C16454 + (C742 - (C731 + C730) + C743) * C48377) * C16456 +
           ((C5517 - (C5516 + C5515) + C5518) * C16454 +
            ((C113 * C314 + C48293 * C333) * C712 -
             (C739 * C48358 + C738 * C711) +
             (C113 * C334 + C48293 * C344) * C48135) *
                C48377) *
               C48408) *
              C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1546 +
             (C113 * C123 + C48293 * C136) * C1540 - C5219 * C1547 -
             C5220 * C1541 + C5221 * C1548 + C5222 * C1542 - C6119 * C1549 -
             C6120 * C48400) *
                C16454 +
            (C1555 + C1556 - C1557 - C1558 + C1559 + C1560 - C1579 - C1580) *
                C48377) *
               C16456 +
           ((C5219 * C1546 + C5220 * C1540 - C5221 * C1547 - C5222 * C1541 +
             C6119 * C1548 + C6120 * C1542 - C6121 * C1549 - C6122 * C48400) *
                C16454 +
            (C6433 + C6434 - C6435 - C6436 + C6437 + C6438 - C6439 - C6440) *
                C48377) *
               C48408) *
              C48344 +
          (((C1557 - (C1556 + C1555) + C1558 - C1559 - C1560 + C1579 + C1580) *
                C16454 +
            (C1567 - (C1566 + C1565) + C1568 - C1569 - C1570 + C1581 + C1582) *
                C48377) *
               C16456 +
           ((C6435 - (C6434 + C6433) + C6436 - C6437 - C6438 + C6439 + C6440) *
                C16454 +
            (C383 * C1547 - (C382 * C1540 + C381 * C1546) + C384 * C1541 -
             C1577 * C1548 - C1578 * C1542 +
             (C113 * C1277 + C48293 * C1288) * C1549 +
             (C113 * C1289 + C48293 * C1295) * C48400) *
                C48377) *
               C48408) *
              C48054) *
         C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C711 +
              (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
              C5220 * C48135) *
                 C16454 +
             (C718 + C719 - C720 - C721) * C48377) *
                C16456 +
            ((C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                 C16454 +
             (C5507 + C5508 - C5509 - C5510) * C48377) *
                C48408) *
               C299 +
           (((C720 - (C719 + C718) + C721) * C16454 +
             (C724 - (C723 + C722) + C725) * C48377) *
                C16456 +
            ((C5509 - (C5508 + C5507) + C5510) * C16454 +
             (C5511 - (C5512 + C5513) + C5514) * C48377) *
                C48408) *
               C300 +
           ((C744 * C16454 + (C728 + C727 - C726 - C729) * C48377) * C16456 +
            ((C5513 + C5512 - C5511 - C5514) * C16454 +
             (C5515 + C5516 - C5517 - C5518) * C48377) *
                C48408) *
               C48384) *
              C48359 +
          ((((C5857 * C712 -
              ((C113 * C533 + C48293 * C550) * C48358 +
               (C113 * C520 + C48293 * C534) * C711) +
              C5858 * C48135) *
                 C16454 +
             (C1050 - (C1027 + C1028) + C1051) * C48377) *
                C16456 +
            ((C6295 * C712 - (C5858 * C48358 + C5857 * C711) + C6296 * C48135) *
                 C16454 +
             (C5849 - (C5850 + C5851) + C5852) * C48377) *
                C48408) *
               C299 +
           (((C1028 + C1027 - C1050 - C1051) * C16454 +
             (C1034 + C1033 - C1052 - C1053) * C48377) *
                C16456 +
            ((C5851 + C5850 - C5849 - C5852) * C16454 +
             (C5853 + C5854 - C5855 - C5856) * C48377) *
                C48408) *
               C300 +
           ((C1057 * C16454 + (C1054 - (C1038 + C1037) + C1055) * C48377) *
                C16456 +
            ((C5855 - (C5854 + C5853) + C5856) * C16454 +
             ((C113 * C1728 + C48293 * C1729) * C712 -
              (C1049 * C48358 + C1048 * C711) +
              (C113 * C1730 + C48293 * C1731) * C48135) *
                 C48377) *
                C48408) *
               C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1546 +
             (C113 * C123 + C48293 * C136) * C1540 - C5219 * C1547 -
             C5220 * C1541 + C5221 * C1548 + C5222 * C1542 - C6119 * C1549 -
             C6120 * C48400) *
                C16454 +
            (C1555 + C1556 - C1557 - C1558 + C1559 + C1560 - C1579 - C1580) *
                C48377) *
               C16456 +
           ((C5219 * C1546 + C5220 * C1540 - C5221 * C1547 - C5222 * C1541 +
             C6119 * C1548 + C6120 * C1542 - C6121 * C1549 - C6122 * C48400) *
                C16454 +
            (C6433 + C6434 - C6435 - C6436 + C6437 + C6438 - C6439 - C6440) *
                C48377) *
               C48408) *
              C48044 * C48359 +
          (((C5857 * C1547 -
             ((C113 * C533 + C48293 * C550) * C1540 +
              (C113 * C520 + C48293 * C534) * C1546) +
             C5858 * C1541 - C6295 * C1548 - C6296 * C1542 + C6789 * C1549 +
             C6790 * C48400) *
                C16454 +
            (C1043 * C1547 - (C583 * C1540 + C582 * C1546) + C1044 * C1541 -
             C1749 * C1548 - C1750 * C1542 + C6643 * C1549 + C6644 * C48400) *
                C48377) *
               C16456 +
           ((C6295 * C1547 - (C5858 * C1540 + C5857 * C1546) + C6296 * C1541 -
             C6789 * C1548 - C6790 * C1542 +
             (C113 * C6776 + C48293 * C6778) * C1549 +
             (C113 * C6779 + C48293 * C6782) * C48400) *
                C16454 +
            (C1749 * C1547 - (C1044 * C1540 + C1043 * C1546) + C1750 * C1541 -
             C6643 * C1548 - C6644 * C1542 +
             (C113 * C6777 + C48293 * C6780) * C1549 +
             (C113 * C6781 + C48293 * C6783) * C48400) *
                C48377) *
               C48408) *
              C48044 * C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C302 +
             (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
             C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
                C16454 +
            (C346 + C347 - C389 - C390 + C391 + C392) * C48377) *
               C16456 +
           ((C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
             C6119 * C304 + C6120 * C48390) *
                C16454 +
            (C5207 + C5208 - C5209 - C5210 + C5211 + C5212) * C48377) *
               C48408) *
              C299 +
          (((C389 - (C347 + C346) + C390 - C391 - C392) * C16454 +
            (C393 - (C357 + C356) + C394 - C395 - C396) * C48377) *
               C16456 +
           ((C5209 - (C5208 + C5207) + C5210 - C5211 - C5212) * C16454 +
            (C5213 - (C5214 + C5215) + C5216 - C5217 - C5218) * C48377) *
               C48408) *
              C300 +
          ((C404 * C16454 +
            (C369 + C368 - C397 - C398 + C399 + C400) * C48377) *
               C16456 +
           ((C5215 + C5214 - C5213 - C5216 + C5217 + C5218) * C16454 +
            (C385 * C302 + C386 * C48429 - C387 * C303 - C388 * C48417 +
             (C113 * C1550 + C48293 * C1551) * C304 +
             (C113 * C1552 + C48293 * C1553) * C48390) *
                C48377) *
               C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C16454 +
            (C174 + C175) * C48377) *
               C16456 +
           ((C5219 * C114 + C5220 * C48072) * C16454 +
            (C5045 + C5046) * C48377) *
               C48408) *
              C107 -
          (((C5047 + C5048) * C48377 + (C5046 + C5045) * C16454) * C48408 +
           ((C177 + C176) * C48377 + (C175 + C174) * C16454) * C16456) *
              C108 +
          ((C184 * C16454 + (C179 + C178) * C48377) * C16456 +
           ((C5048 + C5047) * C16454 + (C5049 + C5050) * C48377) * C48408) *
              C109 -
          (((C5051 + C5052) * C48377 + (C5050 + C5049) * C16454) * C48408 +
           ((C181 + C180) * C48377 + C185 * C16454) * C16456) *
              C110 +
          ((C186 * C16454 + (C183 + C182) * C48377) * C16456 +
           ((C5052 + C5051) * C16454 +
            ((C113 * C713 + C48293 * C714) * C114 +
             (C113 * C715 + C48293 * C716) * C48072) *
                C48377) *
               C48408) *
              C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C16454 +
             (C174 + C175) * C48377) *
                C16456 +
            ((C5219 * C114 + C5220 * C48072) * C16454 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C299 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C16454) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C16454) * C16456) *
               C300 +
           ((C184 * C16454 + (C179 + C178) * C48377) * C16456 +
            ((C5048 + C5047) * C16454 + (C5049 + C5050) * C48377) * C48408) *
               C48384) *
              C48430 +
          ((((C594 + C595) * C16454 + (C596 + C597) * C48377) * C16456 +
            ((C5369 + C5370) * C16454 + (C5371 + C5372) * C48377) * C48408) *
               C300 -
           (((C5370 + C5369) * C48377 +
             (C5858 * C48072 + C5857 * C114) * C16454) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C16454) *
                C16456) *
               C299 -
           (((C5649 + C5650) * C48377 + (C5372 + C5371) * C16454) * C48408 +
            ((C599 + C598) * C48377 + C606 * C16454) * C16456) *
               C48384) *
              C48419 +
          (((((C113 * C522 + C48293 * C537) * C114 +
              (C113 * C538 + C48293 * C552) * C48072) *
                 C16454 +
             (C600 + C601) * C48377) *
                C16456 +
            ((C6297 * C114 + C6298 * C48072) * C16454 +
             (C5373 + C5374) * C48377) *
                C48408) *
               C299 -
           (((C5375 + C5376) * C48377 + (C5374 + C5373) * C16454) * C48408 +
            ((C603 + C602) * C48377 + (C601 + C600) * C16454) * C16456) *
               C300 +
           ((C607 * C16454 + (C605 + C604) * C48377) * C16456 +
            ((C5376 + C5375) * C16454 +
             ((C113 * C2326 + C48293 * C2327) * C114 +
              (C113 * C2328 + C48293 * C2329) * C48072) *
                 C48377) *
                C48408) *
               C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1173 +
             (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
             C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
                C16454 +
            (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C48377) *
               C16456 +
           ((C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
             C6119 * C1175 + C6120 * C48390) *
                C16454 +
            (C6005 + C6006 - C6007 - C6008 + C6009 + C6010) * C48377) *
               C48408) *
              C48426 +
          (((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C16454 +
            (C1185 - (C1184 + C1183) + C1186 - C1187 - C1188) * C48377) *
               C16456 +
           ((C6007 - (C6006 + C6005) + C6008 - C6009 - C6010) * C16454 +
            (C6011 - (C6012 + C6013) + C6014 - C6015 - C6016) * C48377) *
               C48408) *
              C48413 +
          ((C1199 * C16454 +
            (C1191 + C1190 - C1189 - C1192 + C1193 + C1194) * C48377) *
               C16456 +
           ((C6013 + C6012 - C6011 - C6014 + C6015 + C6016) * C16454 +
            (C385 * C1173 + C386 * C1167 - C387 * C1174 - C388 * C1168 +
             (C113 * C1550 + C48293 * C1551) * C1175 +
             (C113 * C1552 + C48293 * C1553) * C48390) *
                C48377) *
               C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1267 +
            (C113 * C123 + C48293 * C136) * C1261 - C5219 * C1268 -
            C5220 * C1262 + C5221 * C1269 + C5222 * C1263 - C6119 * C1270 -
            C6120 * C1264 + C6121 * C1271 + C6122 * C1265) *
               C16454 +
           (C164 * C1267 + C165 * C1261 - C376 * C1268 - C377 * C1262 +
            C378 * C1269 + C379 * C1263 - C1575 * C1270 - C1576 * C1264 +
            C6123 * C1271 + C6124 * C1265) *
               C48377) *
              C16456 +
          ((C5219 * C1267 + C5220 * C1261 - C5221 * C1268 - C5222 * C1262 +
            C6119 * C1269 + C6120 * C1263 - C6121 * C1270 - C6122 * C1264 +
            (C113 * C6098 + C48293 * C6100) * C1271 +
            (C113 * C6101 + C48293 * C6104) * C1265) *
               C16454 +
           (C376 * C1267 + C377 * C1261 - C378 * C1268 - C379 * C1262 +
            C1575 * C1269 + C1576 * C1263 - C6123 * C1270 - C6124 * C1264 +
            (C113 * C6099 + C48293 * C6102) * C1271 +
            (C113 * C6103 + C48293 * C6105) * C1265) *
               C48377) *
              C48408) *
         C48044 * C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1173 +
             (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
             C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
                C16454 +
            (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C48377) *
               C16456 +
           ((C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
             C6119 * C1175 + C6120 * C48390) *
                C16454 +
            (C6005 + C6006 - C6007 - C6008 + C6009 + C6010) * C48377) *
               C48408) *
              C48044 * C48430 +
          (((C5857 * C1174 -
             ((C113 * C533 + C48293 * C550) * C1167 +
              (C113 * C520 + C48293 * C534) * C1173) +
             C5858 * C1168 - C6295 * C1175 - C6296 * C48390) *
                C16454 +
            (C1733 - (C1734 + C1735) + C1736 - C1753 - C1754) * C48377) *
               C16456 +
           ((C6295 * C1174 - (C5858 * C1167 + C5857 * C1173) + C6296 * C1168 -
             C6789 * C1175 - C6790 * C48390) *
                C16454 +
            (C6635 - (C6636 + C6637) + C6638 - C6645 - C6646) * C48377) *
               C48408) *
              C48044 * C48419 +
          ((((C113 * C522 + C48293 * C537) * C1173 +
             (C113 * C538 + C48293 * C552) * C1167 - C6297 * C1174 -
             C6298 * C1168 + C6299 * C1175 + C6300 * C48390) *
                C16454 +
            (C588 * C1173 + C589 * C1167 - C2343 * C1174 - C2344 * C1168 +
             C6301 * C1175 + C6302 * C48390) *
                C48377) *
               C16456 +
           ((C6297 * C1173 + C6298 * C1167 - C6299 * C1174 - C6300 * C1168 +
             (C113 * C6270 + C48293 * C6272) * C1175 +
             (C113 * C6273 + C48293 * C6276) * C48390) *
                C16454 +
            (C2343 * C1173 + C2344 * C1167 - C6301 * C1174 - C6302 * C1168 +
             (C113 * C6271 + C48293 * C6274) * C1175 +
             (C113 * C6275 + C48293 * C6277) * C48390) *
                C48377) *
               C48408) *
              C48044 * C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C114 +
              (C113 * C123 + C48293 * C136) * C48072) *
                 C16454 +
             (C174 + C175) * C48377) *
                C16456 +
            ((C5219 * C114 + C5220 * C48072) * C16454 +
             (C5045 + C5046) * C48377) *
                C48408) *
               C707 -
           (((C5047 + C5048) * C48377 + (C5046 + C5045) * C16454) * C48408 +
            ((C177 + C176) * C48377 + (C175 + C174) * C16454) * C16456) *
               C708 +
           ((C184 * C16454 + (C179 + C178) * C48377) * C16456 +
            ((C5048 + C5047) * C16454 + (C5049 + C5050) * C48377) * C48408) *
               C709 -
           (((C5051 + C5052) * C48377 + (C5050 + C5049) * C16454) * C48408 +
            ((C181 + C180) * C48377 + C185 * C16454) * C16456) *
               C48394) *
              C48359 +
          ((((C594 + C595) * C16454 + (C596 + C597) * C48377) * C16456 +
            ((C5369 + C5370) * C16454 + (C5371 + C5372) * C48377) * C48408) *
               C708 -
           (((C5370 + C5369) * C48377 +
             (C5858 * C48072 + C5857 * C114) * C16454) *
                C48408 +
            ((C595 + C594) * C48377 + ((C113 * C533 + C48293 * C550) * C48072 +
                                       (C113 * C520 + C48293 * C534) * C114) *
                                          C16454) *
                C16456) *
               C707 -
           (((C5649 + C5650) * C48377 + (C5372 + C5371) * C16454) * C48408 +
            ((C599 + C598) * C48377 + C606 * C16454) * C16456) *
               C709 +
           ((C850 * C16454 + (C858 + C857) * C48377) * C16456 +
            ((C5650 + C5649) * C16454 +
             ((C113 * C1008 + C48293 * C1017) * C114 +
              (C113 * C1018 + C48293 * C1023) * C48072) *
                 C48377) *
                C48408) *
               C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48293 * C122) * C1173 +
              (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
              C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
                 C16454 +
             (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C48377) *
                C16456 +
            ((C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
              C6119 * C1175 + C6120 * C48390) *
                 C16454 +
             (C6005 + C6006 - C6007 - C6008 + C6009 + C6010) * C48377) *
                C48408) *
               C48344 +
           (((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C16454 +
             (C1185 - (C1184 + C1183) + C1186 - C1187 - C1188) * C48377) *
                C16456 +
            ((C6007 - (C6006 + C6005) + C6008 - C6009 - C6010) * C16454 +
             (C6011 - (C6012 + C6013) + C6014 - C6015 - C6016) * C48377) *
                C48408) *
               C48054) *
              C48359 +
          ((((C5857 * C1174 -
              ((C113 * C533 + C48293 * C550) * C1167 +
               (C113 * C520 + C48293 * C534) * C1173) +
              C5858 * C1168 - C6295 * C1175 - C6296 * C48390) *
                 C16454 +
             (C1733 - (C1734 + C1735) + C1736 - C1753 - C1754) * C48377) *
                C16456 +
            ((C6295 * C1174 - (C5858 * C1167 + C5857 * C1173) + C6296 * C1168 -
              C6789 * C1175 - C6790 * C48390) *
                 C16454 +
             (C6635 - (C6636 + C6637) + C6638 - C6645 - C6646) * C48377) *
                C48408) *
               C48344 +
           (((C1735 + C1734 - C1733 - C1736 + C1753 + C1754) * C16454 +
             (C1743 + C1742 - C1741 - C1744 + C1755 + C1756) * C48377) *
                C16456 +
            ((C6637 + C6636 - C6635 - C6638 + C6645 + C6646) * C16454 +
             (C1045 * C1173 + C1047 * C1167 - C1751 * C1174 - C1752 * C1168 +
              (C113 * C1856 + C48293 * C1861) * C1175 +
              (C113 * C1862 + C48293 * C1865) * C48390) *
                 C48377) *
                C48408) *
               C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C16454 +
            (C174 + C175) * C48377) *
               C16456 +
           ((C5219 * C114 + C5220 * C48072) * C16454 +
            (C5045 + C5046) * C48377) *
               C48408) *
              C107 -
          (((C5047 + C5048) * C48377 + (C5046 + C5045) * C16454) * C48408 +
           ((C177 + C176) * C48377 + (C175 + C174) * C16454) * C16456) *
              C108 +
          ((C184 * C16454 + (C179 + C178) * C48377) * C16456 +
           ((C5048 + C5047) * C16454 + (C5049 + C5050) * C48377) * C48408) *
              C109 -
          (((C5051 + C5052) * C48377 + (C5050 + C5049) * C16454) * C48408 +
           ((C181 + C180) * C48377 + C185 * C16454) * C16456) *
              C110 +
          ((C186 * C16454 + (C183 + C182) * C48377) * C16456 +
           ((C5052 + C5051) * C16454 +
            ((C113 * C713 + C48293 * C714) * C114 +
             (C113 * C715 + C48293 * C716) * C48072) *
                C48377) *
               C48408) *
              C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C302 +
             (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
             C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
                C16454 +
            (C346 + C347 - C389 - C390 + C391 + C392) * C48377) *
               C16456 +
           ((C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
             C6119 * C304 + C6120 * C48390) *
                C16454 +
            (C5207 + C5208 - C5209 - C5210 + C5211 + C5212) * C48377) *
               C48408) *
              C299 +
          (((C389 - (C347 + C346) + C390 - C391 - C392) * C16454 +
            (C393 - (C357 + C356) + C394 - C395 - C396) * C48377) *
               C16456 +
           ((C5209 - (C5208 + C5207) + C5210 - C5211 - C5212) * C16454 +
            (C5213 - (C5214 + C5215) + C5216 - C5217 - C5218) * C48377) *
               C48408) *
              C300 +
          ((C404 * C16454 +
            (C369 + C368 - C397 - C398 + C399 + C400) * C48377) *
               C16456 +
           ((C5215 + C5214 - C5213 - C5216 + C5217 + C5218) * C16454 +
            (C385 * C302 + C386 * C48429 - C387 * C303 - C388 * C48417 +
             (C113 * C1550 + C48293 * C1551) * C304 +
             (C113 * C1552 + C48293 * C1553) * C48390) *
                C48377) *
               C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1173 +
             (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
             C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
                C16454 +
            (C1177 + C1178 - C1179 - C1180 + C1181 + C1182) * C48377) *
               C16456 +
           ((C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
             C6119 * C1175 + C6120 * C48390) *
                C16454 +
            (C6005 + C6006 - C6007 - C6008 + C6009 + C6010) * C48377) *
               C48408) *
              C48426 +
          (((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C16454 +
            (C1185 - (C1184 + C1183) + C1186 - C1187 - C1188) * C48377) *
               C16456 +
           ((C6007 - (C6006 + C6005) + C6008 - C6009 - C6010) * C16454 +
            (C6011 - (C6012 + C6013) + C6014 - C6015 - C6016) * C48377) *
               C48408) *
              C48413 +
          ((C1199 * C16454 +
            (C1191 + C1190 - C1189 - C1192 + C1193 + C1194) * C48377) *
               C16456 +
           ((C6013 + C6012 - C6011 - C6014 + C6015 + C6016) * C16454 +
            (C385 * C1173 + C386 * C1167 - C387 * C1174 - C388 * C1168 +
             (C113 * C1550 + C48293 * C1551) * C1175 +
             (C113 * C1552 + C48293 * C1553) * C48390) *
                C48377) *
               C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1267 +
            (C113 * C123 + C48293 * C136) * C1261 - C5219 * C1268 -
            C5220 * C1262 + C5221 * C1269 + C5222 * C1263 - C6119 * C1270 -
            C6120 * C1264 + C6121 * C1271 + C6122 * C1265) *
               C16454 +
           (C164 * C1267 + C165 * C1261 - C376 * C1268 - C377 * C1262 +
            C378 * C1269 + C379 * C1263 - C1575 * C1270 - C1576 * C1264 +
            C6123 * C1271 + C6124 * C1265) *
               C48377) *
              C16456 +
          ((C5219 * C1267 + C5220 * C1261 - C5221 * C1268 - C5222 * C1262 +
            C6119 * C1269 + C6120 * C1263 - C6121 * C1270 - C6122 * C1264 +
            (C113 * C6098 + C48293 * C6100) * C1271 +
            (C113 * C6101 + C48293 * C6104) * C1265) *
               C16454 +
           (C376 * C1267 + C377 * C1261 - C378 * C1268 - C379 * C1262 +
            C1575 * C1269 + C1576 * C1263 - C6123 * C1270 - C6124 * C1264 +
            (C113 * C6099 + C48293 * C6102) * C1271 +
            (C113 * C6103 + C48293 * C6105) * C1265) *
               C48377) *
              C48408) *
         C48044 * C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[100] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C47015 +
            (C113 * C123 + C48293 * C136) * C48131 - C5219 * C47007 -
            C5220 * C48138 + C5221 * C47021 + C5222 * C3108) *
               C48027 * C21887 +
           (C5219 * C47015 + C5220 * C48131 - C5221 * C47007 - C5222 * C48138 +
            C6119 * C47021 + C6120 * C3108) *
               C48027 * C21888 +
           (C5221 * C47015 + C5222 * C48131 - C6119 * C47007 - C6120 * C48138 +
            C6121 * C47021 + C6122 * C3108) *
               C48027 * C21889) *
              C48049 +
          ((C3118 - (C3117 + C3116) + C3119 - C3120 - C3121) * C48027 * C21887 +
           (C8283 - (C8282 + C8281) + C8284 - C8285 - C8286) * C48027 * C21888 +
           (C1575 * C47007 - (C379 * C48131 + C378 * C47015) + C1576 * C48138 -
            C6123 * C47021 - C6124 * C3108) *
               C48027 * C21889) *
              C48057 +
          (C3138 * C48027 * C21887 +
           (C8289 + C8288 - C8287 - C8290 + C8291 + C8292) * C48027 * C21888 +
           (C383 * C47015 + C384 * C48131 - C1577 * C47007 - C1578 * C48138 +
            (C113 * C1277 + C48293 * C1288) * C47021 +
            (C113 * C1289 + C48293 * C1295) * C3108) *
               C48027 * C21889) *
              C3111) *
         C48090) /
        (p * q * std::sqrt(p + q));
    d2ee[101] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C47015 +
             (C113 * C123 + C48293 * C136) * C48131 - C5219 * C47007 -
             C5220 * C48138 + C5221 * C47021 + C5222 * C3108) *
                C48027 * C21887 +
            (C5219 * C47015 + C5220 * C48131 - C5221 * C47007 - C5222 * C48138 +
             C6119 * C47021 + C6120 * C3108) *
                C48027 * C21888 +
            (C5221 * C47015 + C5222 * C48131 - C6119 * C47007 - C6120 * C48138 +
             C6121 * C47021 + C6122 * C3108) *
                C48027 * C21889) *
               C2812 +
           ((C3118 - (C3117 + C3116) + C3119 - C3120 - C3121) * C48027 *
                C21887 +
            (C8283 - (C8282 + C8281) + C8284 - C8285 - C8286) * C48027 *
                C21888 +
            (C1575 * C47007 - (C379 * C48131 + C378 * C47015) + C1576 * C48138 -
             C6123 * C47021 - C6124 * C3108) *
                C48027 * C21889) *
               C48054) *
              C48359 +
          (((C5857 * C47007 -
             ((C113 * C533 + C48293 * C550) * C48131 +
              (C113 * C520 + C48293 * C534) * C47015) +
             C5858 * C48138 - C6295 * C47021 - C6296 * C3108) *
                C48027 * C21887 +
            (C6295 * C47007 - (C5858 * C48131 + C5857 * C47015) +
             C6296 * C48138 - C6789 * C47021 - C6790 * C3108) *
                C48027 * C21888 +
            (C6789 * C47007 - (C6296 * C48131 + C6295 * C47015) +
             C6790 * C48138 - C23105 * C47021 - C23106 * C3108) *
                C48027 * C21889) *
               C2812 +
           ((C3440 + C3439 - C3438 - C3441 + C3442 + C3443) * C48027 * C21887 +
            (C8687 + C8686 - C8685 - C8688 + C8689 + C8690) * C48027 * C21888 +
            (C1749 * C47015 + C1750 * C48131 - C6643 * C47007 - C6644 * C48138 +
             (C113 * C6777 + C48293 * C6780) * C47021 +
             (C113 * C6781 + C48293 * C6783) * C3108) *
                C48027 * C21889) *
               C48054) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C2814 +
            (C113 * C123 + C48293 * C136) * C48436 - C5219 * C2815 -
            C5220 * C48432 + C5221 * C2816 + C5222 * C48422 - C6119 * C2817 -
            C6120 * C48400) *
               C48027 * C21887 +
           (C5219 * C2814 + C5220 * C48436 - C5221 * C2815 - C5222 * C48432 +
            C6119 * C2816 + C6120 * C48422 - C6121 * C2817 - C6122 * C48400) *
               C48027 * C21888 +
           (C5221 * C2814 + C5222 * C48436 - C6119 * C2815 - C6120 * C48432 +
            C6121 * C2816 + C6122 * C48422 - C22633 * C2817 - C22634 * C48400) *
               C48027 * C21889) *
              C2812 +
          ((C2821 - (C2820 + C2819) + C2822 - C2823 - C2824 + C2825 + C2826) *
               C48027 * C21887 +
           (C7927 - (C7926 + C7925) + C7928 - C7929 - C7930 + C7931 + C7932) *
               C48027 * C21888 +
           (C1575 * C2815 - (C379 * C48436 + C378 * C2814) + C1576 * C48432 -
            C6123 * C2816 - C6124 * C48422 +
            (C113 * C6099 + C48293 * C6102) * C2817 +
            (C113 * C6103 + C48293 * C6105) * C48400) *
               C48027 * C21889) *
              C48054) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C2686 +
            (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
            C5220 * C48135) *
               C48027 * C21887 +
           (C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
               C48027 * C21888 +
           (C5221 * C2686 + C5222 * C2680 - C6119 * C2687 - C6120 * C48135) *
               C48027 * C21889) *
              C48435 +
          ((C2691 - (C2690 + C2689) + C2692) * C48027 * C21887 +
           (C7785 - (C7784 + C7783) + C7786) * C48027 * C21888 +
           (C1575 * C2687 - (C379 * C2680 + C378 * C2686) + C1576 * C48135) *
               C48027 * C21889) *
              C48428 +
          (C2709 * C48027 * C21887 +
           (C7789 + C7788 - C7787 - C7790) * C48027 * C21888 +
           (C383 * C2686 + C384 * C2680 - C1577 * C2687 - C1578 * C48135) *
               C48027 * C21889) *
              C48415 +
          (C2710 * C48027 * C21887 +
           (C7793 - (C7792 + C7791) + C7794) * C48027 * C21888 +
           ((C113 * C1550 + C48293 * C1551) * C2687 -
            (C388 * C2680 + C387 * C2686) +
            (C113 * C1552 + C48293 * C1553) * C48135) *
               C48027 * C21889) *
              C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2686 +
             (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
             C5220 * C48135) *
                C48027 * C21887 +
            (C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                C48027 * C21888 +
            (C5221 * C2686 + C5222 * C2680 - C6119 * C2687 - C6120 * C48135) *
                C48027 * C21889) *
               C2812 +
           ((C2691 - (C2690 + C2689) + C2692) * C48027 * C21887 +
            (C7785 - (C7784 + C7783) + C7786) * C48027 * C21888 +
            (C1575 * C2687 - (C379 * C2680 + C378 * C2686) + C1576 * C48135) *
                C48027 * C21889) *
               C48054) *
              C48430 +
          (((C5857 * C2687 -
             ((C113 * C533 + C48293 * C550) * C2680 +
              (C113 * C520 + C48293 * C534) * C2686) +
             C5858 * C48135) *
                C48027 * C21887 +
            (C6295 * C2687 - (C5858 * C2680 + C5857 * C2686) + C6296 * C48135) *
                C48027 * C21888 +
            (C6789 * C2687 - (C6296 * C2680 + C6295 * C2686) + C6790 * C48135) *
                C48027 * C21889) *
               C2812 +
           ((C2983 + C2982 - C2981 - C2984) * C48027 * C21887 +
            (C8129 + C8128 - C8127 - C8130) * C48027 * C21888 +
            (C1749 * C2686 + C1750 * C2680 - C6643 * C2687 - C6644 * C48135) *
                C48027 * C21889) *
               C48054) *
              C48419 +
          ((((C113 * C522 + C48293 * C537) * C2686 +
             (C113 * C538 + C48293 * C552) * C2680 - C6297 * C2687 -
             C6298 * C48135) *
                C48027 * C21887 +
            (C6297 * C2686 + C6298 * C2680 - C6299 * C2687 - C6300 * C48135) *
                C48027 * C21888 +
            (C6299 * C2686 + C6300 * C2680 - C22753 * C2687 - C22754 * C48135) *
                C48027 * C21889) *
               C2812 +
           ((C2991 - (C2990 + C2989) + C2992) * C48027 * C21887 +
            (C8133 - (C8132 + C8131) + C8134) * C48027 * C21888 +
            ((C113 * C6271 + C48293 * C6274) * C2687 -
             (C6302 * C2680 + C6301 * C2686) +
             (C113 * C6275 + C48293 * C6277) * C48135) *
                C48027 * C21889) *
               C48054) *
              C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2686 +
             (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
             C5220 * C48135) *
                C48027 * C21887 +
            (C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                C48027 * C21888 +
            (C5221 * C2686 + C5222 * C2680 - C6119 * C2687 - C6120 * C48135) *
                C48027 * C21889) *
               C48049 +
           ((C2691 - (C2690 + C2689) + C2692) * C48027 * C21887 +
            (C7785 - (C7784 + C7783) + C7786) * C48027 * C21888 +
            (C1575 * C2687 - (C379 * C2680 + C378 * C2686) + C1576 * C48135) *
                C48027 * C21889) *
               C48057 +
           (C2709 * C48027 * C21887 +
            (C7789 + C7788 - C7787 - C7790) * C48027 * C21888 +
            (C383 * C2686 + C384 * C2680 - C1577 * C2687 - C1578 * C48135) *
                C48027 * C21889) *
               C3111) *
              C48359 +
          (((C5857 * C2687 -
             ((C113 * C533 + C48293 * C550) * C2680 +
              (C113 * C520 + C48293 * C534) * C2686) +
             C5858 * C48135) *
                C48027 * C21887 +
            (C6295 * C2687 - (C5858 * C2680 + C5857 * C2686) + C6296 * C48135) *
                C48027 * C21888 +
            (C6789 * C2687 - (C6296 * C2680 + C6295 * C2686) + C6790 * C48135) *
                C48027 * C21889) *
               C48049 +
           ((C2983 + C2982 - C2981 - C2984) * C48027 * C21887 +
            (C8129 + C8128 - C8127 - C8130) * C48027 * C21888 +
            (C1749 * C2686 + C1750 * C2680 - C6643 * C2687 - C6644 * C48135) *
                C48027 * C21889) *
               C48057 +
           (C3291 * C48027 * C21887 +
            (C8489 - (C8488 + C8487) + C8490) * C48027 * C21888 +
            ((C113 * C1856 + C48293 * C1861) * C2687 -
             (C1752 * C2680 + C1751 * C2686) +
             (C113 * C1862 + C48293 * C1865) * C48135) *
                C48027 * C21889) *
               C3111) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[104] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C2686 +
            (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
            C5220 * C48135) *
               C48027 * C21887 +
           (C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
               C48027 * C21888 +
           (C5221 * C2686 + C5222 * C2680 - C6119 * C2687 - C6120 * C48135) *
               C48027 * C21889) *
              C48435 +
          ((C2691 - (C2690 + C2689) + C2692) * C48027 * C21887 +
           (C7785 - (C7784 + C7783) + C7786) * C48027 * C21888 +
           (C1575 * C2687 - (C379 * C2680 + C378 * C2686) + C1576 * C48135) *
               C48027 * C21889) *
              C48428 +
          (C2709 * C48027 * C21887 +
           (C7789 + C7788 - C7787 - C7790) * C48027 * C21888 +
           (C383 * C2686 + C384 * C2680 - C1577 * C2687 - C1578 * C48135) *
               C48027 * C21889) *
              C48415 +
          (C2710 * C48027 * C21887 +
           (C7793 - (C7792 + C7791) + C7794) * C48027 * C21888 +
           ((C113 * C1550 + C48293 * C1551) * C2687 -
            (C388 * C2680 + C387 * C2686) +
            (C113 * C1552 + C48293 * C1553) * C48135) *
               C48027 * C21889) *
              C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C2814 +
            (C113 * C123 + C48293 * C136) * C48436 - C5219 * C2815 -
            C5220 * C48432 + C5221 * C2816 + C5222 * C48422 - C6119 * C2817 -
            C6120 * C48400) *
               C48027 * C21887 +
           (C5219 * C2814 + C5220 * C48436 - C5221 * C2815 - C5222 * C48432 +
            C6119 * C2816 + C6120 * C48422 - C6121 * C2817 - C6122 * C48400) *
               C48027 * C21888 +
           (C5221 * C2814 + C5222 * C48436 - C6119 * C2815 - C6120 * C48432 +
            C6121 * C2816 + C6122 * C48422 - C22633 * C2817 - C22634 * C48400) *
               C48027 * C21889) *
              C2812 +
          ((C2821 - (C2820 + C2819) + C2822 - C2823 - C2824 + C2825 + C2826) *
               C48027 * C21887 +
           (C7927 - (C7926 + C7925) + C7928 - C7929 - C7930 + C7931 + C7932) *
               C48027 * C21888 +
           (C1575 * C2815 - (C379 * C48436 + C378 * C2814) + C1576 * C48432 -
            C6123 * C2816 - C6124 * C48422 +
            (C113 * C6099 + C48293 * C6102) * C2817 +
            (C113 * C6103 + C48293 * C6105) * C48400) *
               C48027 * C21889) *
              C48054) *
         C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[105] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C47015 +
             (C113 * C123 + C48293 * C136) * C48131 - C5219 * C47007 -
             C5220 * C48138 + C5221 * C47021 + C5222 * C3108) *
                C48027 * C21887 +
            (C5219 * C47015 + C5220 * C48131 - C5221 * C47007 - C5222 * C48138 +
             C6119 * C47021 + C6120 * C3108) *
                C48027 * C21888 +
            (C5221 * C47015 + C5222 * C48131 - C6119 * C47007 - C6120 * C48138 +
             C6121 * C47021 + C6122 * C3108) *
                C48027 * C21889) *
               C48344 +
           ((C3118 - (C3117 + C3116) + C3119 - C3120 - C3121) * C48027 *
                C21887 +
            (C8283 - (C8282 + C8281) + C8284 - C8285 - C8286) * C48027 *
                C21888 +
            (C1575 * C47007 - (C379 * C48131 + C378 * C47015) + C1576 * C48138 -
             C6123 * C47021 - C6124 * C3108) *
                C48027 * C21889) *
               C48054) *
              C3547 +
          (((C5857 * C47007 -
             ((C113 * C533 + C48293 * C550) * C48131 +
              (C113 * C520 + C48293 * C534) * C47015) +
             C5858 * C48138 - C6295 * C47021 - C6296 * C3108) *
                C48027 * C21887 +
            (C6295 * C47007 - (C5858 * C48131 + C5857 * C47015) +
             C6296 * C48138 - C6789 * C47021 - C6790 * C3108) *
                C48027 * C21888 +
            (C6789 * C47007 - (C6296 * C48131 + C6295 * C47015) +
             C6790 * C48138 - C23105 * C47021 - C23106 * C3108) *
                C48027 * C21889) *
               C48344 +
           ((C3440 + C3439 - C3438 - C3441 + C3442 + C3443) * C48027 * C21887 +
            (C8687 + C8686 - C8685 - C8688 + C8689 + C8690) * C48027 * C21888 +
            (C1749 * C47015 + C1750 * C48131 - C6643 * C47007 - C6644 * C48138 +
             (C113 * C6777 + C48293 * C6780) * C47021 +
             (C113 * C6781 + C48293 * C6783) * C3108) *
                C48027 * C21889) *
               C48054) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C47015 +
            (C113 * C123 + C48293 * C136) * C48131 - C5219 * C47007 -
            C5220 * C48138 + C5221 * C47021 + C5222 * C3108) *
               C48027 * C21887 +
           (C5219 * C47015 + C5220 * C48131 - C5221 * C47007 - C5222 * C48138 +
            C6119 * C47021 + C6120 * C3108) *
               C48027 * C21888 +
           (C5221 * C47015 + C5222 * C48131 - C6119 * C47007 - C6120 * C48138 +
            C6121 * C47021 + C6122 * C3108) *
               C48027 * C21889) *
              C48044 * C48173 +
          ((C5857 * C47007 -
            ((C113 * C533 + C48293 * C550) * C48131 +
             (C113 * C520 + C48293 * C534) * C47015) +
            C5858 * C48138 - C6295 * C47021 - C6296 * C3108) *
               C48027 * C21887 +
           (C6295 * C47007 - (C5858 * C48131 + C5857 * C47015) +
            C6296 * C48138 - C6789 * C47021 - C6790 * C3108) *
               C48027 * C21888 +
           (C6789 * C47007 - (C6296 * C48131 + C6295 * C47015) +
            C6790 * C48138 - C23105 * C47021 - C23106 * C3108) *
               C48027 * C21889) *
              C48044 * C48180 +
          (((C113 * C522 + C48293 * C537) * C47015 +
            (C113 * C538 + C48293 * C552) * C48131 - C6297 * C47007 -
            C6298 * C48138 + C6299 * C47021 + C6300 * C3108) *
               C48027 * C21887 +
           (C6297 * C47015 + C6298 * C48131 - C6299 * C47007 - C6300 * C48138 +
            C22753 * C47021 + C22754 * C3108) *
               C48027 * C21888 +
           (C6299 * C47015 + C6300 * C48131 - C22753 * C47007 -
            C22754 * C48138 + (C113 * C22744 + C48293 * C22745) * C47021 +
            (C113 * C22746 + C48293 * C22747) * C3108) *
               C48027 * C21889) *
              C48044 * C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[107] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C2814 +
            (C113 * C123 + C48293 * C136) * C48436 - C5219 * C2815 -
            C5220 * C48432 + C5221 * C2816 + C5222 * C48422 - C6119 * C2817 -
            C6120 * C48400) *
               C48027 * C21887 +
           (C5219 * C2814 + C5220 * C48436 - C5221 * C2815 - C5222 * C48432 +
            C6119 * C2816 + C6120 * C48422 - C6121 * C2817 - C6122 * C48400) *
               C48027 * C21888 +
           (C5221 * C2814 + C5222 * C48436 - C6119 * C2815 - C6120 * C48432 +
            C6121 * C2816 + C6122 * C48422 - C22633 * C2817 - C22634 * C48400) *
               C48027 * C21889) *
              C48044 * C3547 +
          ((C5857 * C2815 -
            ((C113 * C533 + C48293 * C550) * C48436 +
             (C113 * C520 + C48293 * C534) * C2814) +
            C5858 * C48432 - C6295 * C2816 - C6296 * C48422 + C6789 * C2817 +
            C6790 * C48400) *
               C48027 * C21887 +
           (C6295 * C2815 - (C5858 * C48436 + C5857 * C2814) + C6296 * C48432 -
            C6789 * C2816 - C6790 * C48422 + C23105 * C2817 + C23106 * C48400) *
               C48027 * C21888 +
           (C6789 * C2815 - (C6296 * C48436 + C6295 * C2814) + C6790 * C48432 -
            C23105 * C2816 - C23106 * C48422 +
            (C113 * C23096 + C48293 * C23097) * C2817 +
            (C113 * C23098 + C48293 * C23099) * C48400) *
               C48027 * C21889) *
              C48044 * C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2686 +
             (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
             C5220 * C48135) *
                C48027 * C21887 +
            (C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                C48027 * C21888 +
            (C5221 * C2686 + C5222 * C2680 - C6119 * C2687 - C6120 * C48135) *
                C48027 * C21889) *
               C48426 +
           ((C2691 - (C2690 + C2689) + C2692) * C48027 * C21887 +
            (C7785 - (C7784 + C7783) + C7786) * C48027 * C21888 +
            (C1575 * C2687 - (C379 * C2680 + C378 * C2686) + C1576 * C48135) *
                C48027 * C21889) *
               C48413 +
           (C2709 * C48027 * C21887 +
            (C7789 + C7788 - C7787 - C7790) * C48027 * C21888 +
            (C383 * C2686 + C384 * C2680 - C1577 * C2687 - C1578 * C48135) *
                C48027 * C21889) *
               C48384) *
              C3547 +
          (((C5857 * C2687 -
             ((C113 * C533 + C48293 * C550) * C2680 +
              (C113 * C520 + C48293 * C534) * C2686) +
             C5858 * C48135) *
                C48027 * C21887 +
            (C6295 * C2687 - (C5858 * C2680 + C5857 * C2686) + C6296 * C48135) *
                C48027 * C21888 +
            (C6789 * C2687 - (C6296 * C2680 + C6295 * C2686) + C6790 * C48135) *
                C48027 * C21889) *
               C48426 +
           ((C2983 + C2982 - C2981 - C2984) * C48027 * C21887 +
            (C8129 + C8128 - C8127 - C8130) * C48027 * C21888 +
            (C1749 * C2686 + C1750 * C2680 - C6643 * C2687 - C6644 * C48135) *
                C48027 * C21889) *
               C48413 +
           (C3291 * C48027 * C21887 +
            (C8489 - (C8488 + C8487) + C8490) * C48027 * C21888 +
            ((C113 * C1856 + C48293 * C1861) * C2687 -
             (C1752 * C2680 + C1751 * C2686) +
             (C113 * C1862 + C48293 * C1865) * C48135) *
                C48027 * C21889) *
               C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C2686 +
            (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
            C5220 * C48135) *
               C48027 * C21887 +
           (C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
               C48027 * C21888 +
           (C5221 * C2686 + C5222 * C2680 - C6119 * C2687 - C6120 * C48135) *
               C48027 * C21889) *
              C48044 * C48437 +
          ((C5857 * C2687 -
            ((C113 * C533 + C48293 * C550) * C2680 +
             (C113 * C520 + C48293 * C534) * C2686) +
            C5858 * C48135) *
               C48027 * C21887 +
           (C6295 * C2687 - (C5858 * C2680 + C5857 * C2686) + C6296 * C48135) *
               C48027 * C21888 +
           (C6789 * C2687 - (C6296 * C2680 + C6295 * C2686) + C6790 * C48135) *
               C48027 * C21889) *
              C48044 * C48434 +
          (((C113 * C522 + C48293 * C537) * C2686 +
            (C113 * C538 + C48293 * C552) * C2680 - C6297 * C2687 -
            C6298 * C48135) *
               C48027 * C21887 +
           (C6297 * C2686 + C6298 * C2680 - C6299 * C2687 - C6300 * C48135) *
               C48027 * C21888 +
           (C6299 * C2686 + C6300 * C2680 - C22753 * C2687 - C22754 * C48135) *
               C48027 * C21889) *
              C48044 * C48425 +
          ((C7651 * C2687 -
            ((C113 * C2166 + C48293 * C2176) * C2680 +
             (C113 * C2158 + C48293 * C2167) * C2686) +
            C7652 * C48135) *
               C48027 * C21887 +
           (C23743 * C2687 - (C7652 * C2680 + C7651 * C2686) +
            C23744 * C48135) *
               C48027 * C21888 +
           ((C113 * C23734 + C48293 * C23735) * C2687 -
            (C23744 * C2680 + C23743 * C2686) +
            (C113 * C23736 + C48293 * C23737) * C48135) *
               C48027 * C21889) *
              C48044 * C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2686 +
             (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
             C5220 * C48135) *
                C48027 * C21887 +
            (C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                C48027 * C21888 +
            (C5221 * C2686 + C5222 * C2680 - C6119 * C2687 - C6120 * C48135) *
                C48027 * C21889) *
               C48344 +
           ((C2691 - (C2690 + C2689) + C2692) * C48027 * C21887 +
            (C7785 - (C7784 + C7783) + C7786) * C48027 * C21888 +
            (C1575 * C2687 - (C379 * C2680 + C378 * C2686) + C1576 * C48135) *
                C48027 * C21889) *
               C48054) *
              C48173 +
          (((C5857 * C2687 -
             ((C113 * C533 + C48293 * C550) * C2680 +
              (C113 * C520 + C48293 * C534) * C2686) +
             C5858 * C48135) *
                C48027 * C21887 +
            (C6295 * C2687 - (C5858 * C2680 + C5857 * C2686) + C6296 * C48135) *
                C48027 * C21888 +
            (C6789 * C2687 - (C6296 * C2680 + C6295 * C2686) + C6790 * C48135) *
                C48027 * C21889) *
               C48344 +
           ((C2983 + C2982 - C2981 - C2984) * C48027 * C21887 +
            (C8129 + C8128 - C8127 - C8130) * C48027 * C21888 +
            (C1749 * C2686 + C1750 * C2680 - C6643 * C2687 - C6644 * C48135) *
                C48027 * C21889) *
               C48054) *
              C48180 +
          ((((C113 * C522 + C48293 * C537) * C2686 +
             (C113 * C538 + C48293 * C552) * C2680 - C6297 * C2687 -
             C6298 * C48135) *
                C48027 * C21887 +
            (C6297 * C2686 + C6298 * C2680 - C6299 * C2687 - C6300 * C48135) *
                C48027 * C21888 +
            (C6299 * C2686 + C6300 * C2680 - C22753 * C2687 - C22754 * C48135) *
                C48027 * C21889) *
               C48344 +
           ((C2991 - (C2990 + C2989) + C2992) * C48027 * C21887 +
            (C8133 - (C8132 + C8131) + C8134) * C48027 * C21888 +
            ((C113 * C6271 + C48293 * C6274) * C2687 -
             (C6302 * C2680 + C6301 * C2686) +
             (C113 * C6275 + C48293 * C6277) * C48135) *
                C48027 * C21889) *
               C48054) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[109] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C2686 +
             (C113 * C123 + C48293 * C136) * C2680 - C5219 * C2687 -
             C5220 * C48135) *
                C48027 * C21887 +
            (C5219 * C2686 + C5220 * C2680 - C5221 * C2687 - C5222 * C48135) *
                C48027 * C21888 +
            (C5221 * C2686 + C5222 * C2680 - C6119 * C2687 - C6120 * C48135) *
                C48027 * C21889) *
               C48426 +
           ((C2691 - (C2690 + C2689) + C2692) * C48027 * C21887 +
            (C7785 - (C7784 + C7783) + C7786) * C48027 * C21888 +
            (C1575 * C2687 - (C379 * C2680 + C378 * C2686) + C1576 * C48135) *
                C48027 * C21889) *
               C48413 +
           (C2709 * C48027 * C21887 +
            (C7789 + C7788 - C7787 - C7790) * C48027 * C21888 +
            (C383 * C2686 + C384 * C2680 - C1577 * C2687 - C1578 * C48135) *
                C48027 * C21889) *
               C48384) *
              C3547 +
          (((C5857 * C2687 -
             ((C113 * C533 + C48293 * C550) * C2680 +
              (C113 * C520 + C48293 * C534) * C2686) +
             C5858 * C48135) *
                C48027 * C21887 +
            (C6295 * C2687 - (C5858 * C2680 + C5857 * C2686) + C6296 * C48135) *
                C48027 * C21888 +
            (C6789 * C2687 - (C6296 * C2680 + C6295 * C2686) + C6790 * C48135) *
                C48027 * C21889) *
               C48426 +
           ((C2983 + C2982 - C2981 - C2984) * C48027 * C21887 +
            (C8129 + C8128 - C8127 - C8130) * C48027 * C21888 +
            (C1749 * C2686 + C1750 * C2680 - C6643 * C2687 - C6644 * C48135) *
                C48027 * C21889) *
               C48413 +
           (C3291 * C48027 * C21887 +
            (C8489 - (C8488 + C8487) + C8490) * C48027 * C21888 +
            ((C113 * C1856 + C48293 * C1861) * C2687 -
             (C1752 * C2680 + C1751 * C2686) +
             (C113 * C1862 + C48293 * C1865) * C48135) *
                C48027 * C21889) *
               C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C2814 +
            (C113 * C123 + C48293 * C136) * C48436 - C5219 * C2815 -
            C5220 * C48432 + C5221 * C2816 + C5222 * C48422 - C6119 * C2817 -
            C6120 * C48400) *
               C48027 * C21887 +
           (C5219 * C2814 + C5220 * C48436 - C5221 * C2815 - C5222 * C48432 +
            C6119 * C2816 + C6120 * C48422 - C6121 * C2817 - C6122 * C48400) *
               C48027 * C21888 +
           (C5221 * C2814 + C5222 * C48436 - C6119 * C2815 - C6120 * C48432 +
            C6121 * C2816 + C6122 * C48422 - C22633 * C2817 - C22634 * C48400) *
               C48027 * C21889) *
              C48044 * C3547 +
          ((C5857 * C2815 -
            ((C113 * C533 + C48293 * C550) * C48436 +
             (C113 * C520 + C48293 * C534) * C2814) +
            C5858 * C48432 - C6295 * C2816 - C6296 * C48422 + C6789 * C2817 +
            C6790 * C48400) *
               C48027 * C21887 +
           (C6295 * C2815 - (C5858 * C48436 + C5857 * C2814) + C6296 * C48432 -
            C6789 * C2816 - C6790 * C48422 + C23105 * C2817 + C23106 * C48400) *
               C48027 * C21888 +
           (C6789 * C2815 - (C6296 * C48436 + C6295 * C2814) + C6790 * C48432 -
            C23105 * C2816 - C23106 * C48422 +
            (C113 * C23096 + C48293 * C23097) * C2817 +
            (C113 * C23098 + C48293 * C23099) * C48400) *
               C48027 * C21889) *
              C48044 * C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1546 +
            (C113 * C123 + C48293 * C136) * C1540 - C5219 * C1547 -
            C5220 * C1541 + C5221 * C1548 + C5222 * C1542 - C6119 * C1549 -
            C6120 * C48400) *
               C48027 * C21887 +
           (C5219 * C1546 + C5220 * C1540 - C5221 * C1547 - C5222 * C1541 +
            C6119 * C1548 + C6120 * C1542 - C6121 * C1549 - C6122 * C48400) *
               C48027 * C21888 +
           (C5221 * C1546 + C5222 * C1540 - C6119 * C1547 - C6120 * C1541 +
            C6121 * C1548 + C6122 * C1542 - C22633 * C1549 - C22634 * C48400) *
               C48027 * C21889) *
              C48344 +
          ((C1557 - (C1556 + C1555) + C1558 - C1559 - C1560 + C1579 + C1580) *
               C48027 * C21887 +
           (C6435 - (C6434 + C6433) + C6436 - C6437 - C6438 + C6439 + C6440) *
               C48027 * C21888 +
           (C1575 * C1547 - (C379 * C1540 + C378 * C1546) + C1576 * C1541 -
            C6123 * C1548 - C6124 * C1542 +
            (C113 * C6099 + C48293 * C6102) * C1549 +
            (C113 * C6103 + C48293 * C6105) * C48400) *
               C48027 * C21889) *
              C48054) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C711 +
            (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
            C5220 * C48135) *
               C48027 * C21887 +
           (C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
               C48027 * C21888 +
           (C5221 * C711 + C5222 * C48358 - C6119 * C712 - C6120 * C48135) *
               C48027 * C21889) *
              C707 +
          ((C720 - (C719 + C718) + C721) * C48027 * C21887 +
           (C5509 - (C5508 + C5507) + C5510) * C48027 * C21888 +
           (C1575 * C712 - (C379 * C48358 + C378 * C711) + C1576 * C48135) *
               C48027 * C21889) *
              C708 +
          (C744 * C48027 * C21887 +
           (C5513 + C5512 - C5511 - C5514) * C48027 * C21888 +
           (C383 * C711 + C384 * C48358 - C1577 * C712 - C1578 * C48135) *
               C48027 * C21889) *
              C709 +
          (C745 * C48027 * C21887 +
           (C5517 - (C5516 + C5515) + C5518) * C48027 * C21888 +
           ((C113 * C1550 + C48293 * C1551) * C712 -
            (C388 * C48358 + C387 * C711) +
            (C113 * C1552 + C48293 * C1553) * C48135) *
               C48027 * C21889) *
              C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C711 +
             (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
             C5220 * C48135) *
                C48027 * C21887 +
            (C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                C48027 * C21888 +
            (C5221 * C711 + C5222 * C48358 - C6119 * C712 - C6120 * C48135) *
                C48027 * C21889) *
               C48344 +
           ((C720 - (C719 + C718) + C721) * C48027 * C21887 +
            (C5509 - (C5508 + C5507) + C5510) * C48027 * C21888 +
            (C1575 * C712 - (C379 * C48358 + C378 * C711) + C1576 * C48135) *
                C48027 * C21889) *
               C48054) *
              C1976 +
          (((C5857 * C712 -
             ((C113 * C533 + C48293 * C550) * C48358 +
              (C113 * C520 + C48293 * C534) * C711) +
             C5858 * C48135) *
                C48027 * C21887 +
            (C6295 * C712 - (C5858 * C48358 + C5857 * C711) + C6296 * C48135) *
                C48027 * C21888 +
            (C6789 * C712 - (C6296 * C48358 + C6295 * C711) + C6790 * C48135) *
                C48027 * C21889) *
               C48344 +
           ((C1028 + C1027 - C1050 - C1051) * C48027 * C21887 +
            (C5851 + C5850 - C5849 - C5852) * C48027 * C21888 +
            (C1749 * C711 + C1750 * C48358 - C6643 * C712 - C6644 * C48135) *
                C48027 * C21889) *
               C48054) *
              C1977 +
          ((((C113 * C522 + C48293 * C537) * C711 +
             (C113 * C538 + C48293 * C552) * C48358 - C6297 * C712 -
             C6298 * C48135) *
                C48027 * C21887 +
            (C6297 * C711 + C6298 * C48358 - C6299 * C712 - C6300 * C48135) *
                C48027 * C21888 +
            (C6299 * C711 + C6300 * C48358 - C22753 * C712 - C22754 * C48135) *
                C48027 * C21889) *
               C48344 +
           ((C2347 - (C2332 + C2331) + C2348) * C48027 * C21887 +
            (C7369 - (C7368 + C7367) + C7370) * C48027 * C21888 +
            ((C113 * C6271 + C48293 * C6274) * C712 -
             (C6302 * C48358 + C6301 * C711) +
             (C113 * C6275 + C48293 * C6277) * C48135) *
                C48027 * C21889) *
               C48054) *
              C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1546 +
            (C113 * C123 + C48293 * C136) * C1540 - C5219 * C1547 -
            C5220 * C1541 + C5221 * C1548 + C5222 * C1542 - C6119 * C1549 -
            C6120 * C48400) *
               C48027 * C21887 +
           (C5219 * C1546 + C5220 * C1540 - C5221 * C1547 - C5222 * C1541 +
            C6119 * C1548 + C6120 * C1542 - C6121 * C1549 - C6122 * C48400) *
               C48027 * C21888 +
           (C5221 * C1546 + C5222 * C1540 - C6119 * C1547 - C6120 * C1541 +
            C6121 * C1548 + C6122 * C1542 - C22633 * C1549 - C22634 * C48400) *
               C48027 * C21889) *
              C48044 * C48359 +
          ((C5857 * C1547 -
            ((C113 * C533 + C48293 * C550) * C1540 +
             (C113 * C520 + C48293 * C534) * C1546) +
            C5858 * C1541 - C6295 * C1548 - C6296 * C1542 + C6789 * C1549 +
            C6790 * C48400) *
               C48027 * C21887 +
           (C6295 * C1547 - (C5858 * C1540 + C5857 * C1546) + C6296 * C1541 -
            C6789 * C1548 - C6790 * C1542 + C23105 * C1549 + C23106 * C48400) *
               C48027 * C21888 +
           (C6789 * C1547 - (C6296 * C1540 + C6295 * C1546) + C6790 * C1541 -
            C23105 * C1548 - C23106 * C1542 +
            (C113 * C23096 + C48293 * C23097) * C1549 +
            (C113 * C23098 + C48293 * C23099) * C48400) *
               C48027 * C21889) *
              C48044 * C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C711 +
             (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
             C5220 * C48135) *
                C48027 * C21887 +
            (C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                C48027 * C21888 +
            (C5221 * C711 + C5222 * C48358 - C6119 * C712 - C6120 * C48135) *
                C48027 * C21889) *
               C299 +
           ((C720 - (C719 + C718) + C721) * C48027 * C21887 +
            (C5509 - (C5508 + C5507) + C5510) * C48027 * C21888 +
            (C1575 * C712 - (C379 * C48358 + C378 * C711) + C1576 * C48135) *
                C48027 * C21889) *
               C300 +
           (C744 * C48027 * C21887 +
            (C5513 + C5512 - C5511 - C5514) * C48027 * C21888 +
            (C383 * C711 + C384 * C48358 - C1577 * C712 - C1578 * C48135) *
                C48027 * C21889) *
               C48384) *
              C48359 +
          (((C5857 * C712 -
             ((C113 * C533 + C48293 * C550) * C48358 +
              (C113 * C520 + C48293 * C534) * C711) +
             C5858 * C48135) *
                C48027 * C21887 +
            (C6295 * C712 - (C5858 * C48358 + C5857 * C711) + C6296 * C48135) *
                C48027 * C21888 +
            (C6789 * C712 - (C6296 * C48358 + C6295 * C711) + C6790 * C48135) *
                C48027 * C21889) *
               C299 +
           ((C1028 + C1027 - C1050 - C1051) * C48027 * C21887 +
            (C5851 + C5850 - C5849 - C5852) * C48027 * C21888 +
            (C1749 * C711 + C1750 * C48358 - C6643 * C712 - C6644 * C48135) *
                C48027 * C21889) *
               C300 +
           (C1057 * C48027 * C21887 +
            (C5855 - (C5854 + C5853) + C5856) * C48027 * C21888 +
            ((C113 * C1856 + C48293 * C1861) * C712 -
             (C1752 * C48358 + C1751 * C711) +
             (C113 * C1862 + C48293 * C1865) * C48135) *
                C48027 * C21889) *
               C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C711 +
            (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
            C5220 * C48135) *
               C48027 * C21887 +
           (C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
               C48027 * C21888 +
           (C5221 * C711 + C5222 * C48358 - C6119 * C712 - C6120 * C48135) *
               C48027 * C21889) *
              C48044 * C2448 +
          ((C5857 * C712 -
            ((C113 * C533 + C48293 * C550) * C48358 +
             (C113 * C520 + C48293 * C534) * C711) +
            C5858 * C48135) *
               C48027 * C21887 +
           (C6295 * C712 - (C5858 * C48358 + C5857 * C711) + C6296 * C48135) *
               C48027 * C21888 +
           (C6789 * C712 - (C6296 * C48358 + C6295 * C711) + C6790 * C48135) *
               C48027 * C21889) *
              C48044 * C2449 +
          (((C113 * C522 + C48293 * C537) * C711 +
            (C113 * C538 + C48293 * C552) * C48358 - C6297 * C712 -
            C6298 * C48135) *
               C48027 * C21887 +
           (C6297 * C711 + C6298 * C48358 - C6299 * C712 - C6300 * C48135) *
               C48027 * C21888 +
           (C6299 * C711 + C6300 * C48358 - C22753 * C712 - C22754 * C48135) *
               C48027 * C21889) *
              C48044 * C2450 +
          ((C7651 * C712 -
            ((C113 * C2166 + C48293 * C2176) * C48358 +
             (C113 * C2158 + C48293 * C2167) * C711) +
            C7652 * C48135) *
               C48027 * C21887 +
           (C23743 * C712 - (C7652 * C48358 + C7651 * C711) + C23744 * C48135) *
               C48027 * C21888 +
           ((C113 * C23734 + C48293 * C23735) * C712 -
            (C23744 * C48358 + C23743 * C711) +
            (C113 * C23736 + C48293 * C23737) * C48135) *
               C48027 * C21889) *
              C48044 * C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C48293 * C122) * C114 +
                (C113 * C123 + C48293 * C136) * C48072) *
                   C48027 * C21887 +
               (C5219 * C114 + C5220 * C48072) * C48027 * C21888 +
               (C5221 * C114 + C5222 * C48072) * C48027 * C21889) *
                  C107 -
              ((C379 * C48072 + C378 * C114) * C48027 * C21889 +
               (C5046 + C5045) * C48027 * C21888 +
               (C175 + C174) * C48027 * C21887) *
                  C108 +
              (C184 * C48027 * C21887 + (C5048 + C5047) * C48027 * C21888 +
               (C383 * C114 + C384 * C48072) * C48027 * C21889) *
                  C109 -
              ((C388 * C48072 + C387 * C114) * C48027 * C21889 +
               (C5050 + C5049) * C48027 * C21888 + C185 * C48027 * C21887) *
                  C110 +
              (C186 * C48027 * C21887 + (C5052 + C5051) * C48027 * C21888 +
               ((C113 * C314 + C48293 * C333) * C114 +
                (C113 * C334 + C48293 * C344) * C48072) *
                   C48027 * C21889) *
                  C111) *
             C48090 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C48293 * C122) * C302 +
                (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
                C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
                   C48027 * C21887 +
               (C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
                C6119 * C304 + C6120 * C48390) *
                   C48027 * C21888 +
               (C5221 * C302 + C5222 * C48429 - C6119 * C303 - C6120 * C48417 +
                C6121 * C304 + C6122 * C48390) *
                   C48027 * C21889) *
                  C299 +
              ((C389 - (C347 + C346) + C390 - C391 - C392) * C48027 * C21887 +
               (C5209 - (C5208 + C5207) + C5210 - C5211 - C5212) * C48027 *
                   C21888 +
               (C1575 * C303 - (C379 * C48429 + C378 * C302) + C1576 * C48417 -
                C6123 * C304 - C6124 * C48390) *
                   C48027 * C21889) *
                  C300 +
              (C404 * C48027 * C21887 +
               (C5215 + C5214 - C5213 - C5216 + C5217 + C5218) * C48027 *
                   C21888 +
               (C383 * C302 + C384 * C48429 - C1577 * C303 - C1578 * C48417 +
                (C113 * C1277 + C48293 * C1288) * C304 +
                (C113 * C1289 + C48293 * C1295) * C48390) *
                   C48027 * C21889) *
                  C48384) *
             C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C48027 * C21887 +
            (C5219 * C114 + C5220 * C48072) * C48027 * C21888 +
            (C5221 * C114 + C5222 * C48072) * C48027 * C21889) *
               C299 -
           ((C379 * C48072 + C378 * C114) * C48027 * C21889 +
            (C5046 + C5045) * C48027 * C21888 +
            (C175 + C174) * C48027 * C21887) *
               C300 +
           (C184 * C48027 * C21887 + (C5048 + C5047) * C48027 * C21888 +
            (C383 * C114 + C384 * C48072) * C48027 * C21889) *
               C48384) *
              C48430 +
          (((C594 + C595) * C48027 * C21887 +
            (C5369 + C5370) * C48027 * C21888 +
            (C1749 * C114 + C1750 * C48072) * C48027 * C21889) *
               C300 -
           ((C6296 * C48072 + C6295 * C114) * C48027 * C21889 +
            (C5858 * C48072 + C5857 * C114) * C48027 * C21888 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C48027 * C21887) *
               C299 -
           ((C1752 * C48072 + C1751 * C114) * C48027 * C21889 +
            (C5372 + C5371) * C48027 * C21888 + C606 * C48027 * C21887) *
               C48384) *
              C48419 +
          ((((C113 * C522 + C48293 * C537) * C114 +
             (C113 * C538 + C48293 * C552) * C48072) *
                C48027 * C21887 +
            (C6297 * C114 + C6298 * C48072) * C48027 * C21888 +
            (C6299 * C114 + C6300 * C48072) * C48027 * C21889) *
               C299 -
           ((C6302 * C48072 + C6301 * C114) * C48027 * C21889 +
            (C5374 + C5373) * C48027 * C21888 +
            (C601 + C600) * C48027 * C21887) *
               C300 +
           (C607 * C48027 * C21887 + (C5376 + C5375) * C48027 * C21888 +
            ((C113 * C1414 + C48293 * C1431) * C114 +
             (C113 * C1432 + C48293 * C1441) * C48072) *
                C48027 * C21889) *
               C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1173 +
            (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
            C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
               C48027 * C21887 +
           (C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
            C6119 * C1175 + C6120 * C48390) *
               C48027 * C21888 +
           (C5221 * C1173 + C5222 * C1167 - C6119 * C1174 - C6120 * C1168 +
            C6121 * C1175 + C6122 * C48390) *
               C48027 * C21889) *
              C48426 +
          ((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C48027 * C21887 +
           (C6007 - (C6006 + C6005) + C6008 - C6009 - C6010) * C48027 * C21888 +
           (C1575 * C1174 - (C379 * C1167 + C378 * C1173) + C1576 * C1168 -
            C6123 * C1175 - C6124 * C48390) *
               C48027 * C21889) *
              C48413 +
          (C1199 * C48027 * C21887 +
           (C6013 + C6012 - C6011 - C6014 + C6015 + C6016) * C48027 * C21888 +
           (C383 * C1173 + C384 * C1167 - C1577 * C1174 - C1578 * C1168 +
            (C113 * C1277 + C48293 * C1288) * C1175 +
            (C113 * C1289 + C48293 * C1295) * C48390) *
               C48027 * C21889) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48293 * C122) * C1267 +
           (C113 * C123 + C48293 * C136) * C1261 - C5219 * C1268 -
           C5220 * C1262 + C5221 * C1269 + C5222 * C1263 - C6119 * C1270 -
           C6120 * C1264 + C6121 * C1271 + C6122 * C1265) *
              C48027 * C21887 +
          (C5219 * C1267 + C5220 * C1261 - C5221 * C1268 - C5222 * C1262 +
           C6119 * C1269 + C6120 * C1263 - C6121 * C1270 - C6122 * C1264 +
           C22633 * C1271 + C22634 * C1265) *
              C48027 * C21888 +
          (C5221 * C1267 + C5222 * C1261 - C6119 * C1268 - C6120 * C1262 +
           C6121 * C1269 + C6122 * C1263 - C22633 * C1270 - C22634 * C1264 +
           (C113 * C22624 + C48293 * C22625) * C1271 +
           (C113 * C22626 + C48293 * C22627) * C1265) *
              C48027 * C21889) *
         C48044 * C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1173 +
            (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
            C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
               C48027 * C21887 +
           (C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
            C6119 * C1175 + C6120 * C48390) *
               C48027 * C21888 +
           (C5221 * C1173 + C5222 * C1167 - C6119 * C1174 - C6120 * C1168 +
            C6121 * C1175 + C6122 * C48390) *
               C48027 * C21889) *
              C48044 * C48430 +
          ((C5857 * C1174 -
            ((C113 * C533 + C48293 * C550) * C1167 +
             (C113 * C520 + C48293 * C534) * C1173) +
            C5858 * C1168 - C6295 * C1175 - C6296 * C48390) *
               C48027 * C21887 +
           (C6295 * C1174 - (C5858 * C1167 + C5857 * C1173) + C6296 * C1168 -
            C6789 * C1175 - C6790 * C48390) *
               C48027 * C21888 +
           (C6789 * C1174 - (C6296 * C1167 + C6295 * C1173) + C6790 * C1168 -
            (C113 * C6776 + C48293 * C6778) * C1175 -
            (C113 * C6779 + C48293 * C6782) * C48390) *
               C48027 * C21889) *
              C48044 * C48419 +
          (((C113 * C522 + C48293 * C537) * C1173 +
            (C113 * C538 + C48293 * C552) * C1167 - C6297 * C1174 -
            C6298 * C1168 + C6299 * C1175 + C6300 * C48390) *
               C48027 * C21887 +
           (C6297 * C1173 + C6298 * C1167 - C6299 * C1174 - C6300 * C1168 +
            C22753 * C1175 + C22754 * C48390) *
               C48027 * C21888 +
           (C6299 * C1173 + C6300 * C1167 - C22753 * C1174 - C22754 * C1168 +
            (C113 * C22744 + C48293 * C22745) * C1175 +
            (C113 * C22746 + C48293 * C22747) * C48390) *
               C48027 * C21889) *
              C48044 * C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C48027 * C21887 +
            (C5219 * C114 + C5220 * C48072) * C48027 * C21888 +
            (C5221 * C114 + C5222 * C48072) * C48027 * C21889) *
               C48426 -
           ((C379 * C48072 + C378 * C114) * C48027 * C21889 +
            (C5046 + C5045) * C48027 * C21888 +
            (C175 + C174) * C48027 * C21887) *
               C48413 +
           (C184 * C48027 * C21887 + (C5048 + C5047) * C48027 * C21888 +
            (C383 * C114 + C384 * C48072) * C48027 * C21889) *
               C48384) *
              C1976 +
          (((C594 + C595) * C48027 * C21887 +
            (C5369 + C5370) * C48027 * C21888 +
            (C1749 * C114 + C1750 * C48072) * C48027 * C21889) *
               C48413 -
           ((C6296 * C48072 + C6295 * C114) * C48027 * C21889 +
            (C5858 * C48072 + C5857 * C114) * C48027 * C21888 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C48027 * C21887) *
               C48426 -
           ((C1752 * C48072 + C1751 * C114) * C48027 * C21889 +
            (C5372 + C5371) * C48027 * C21888 + C606 * C48027 * C21887) *
               C48384) *
              C1977 +
          ((((C113 * C522 + C48293 * C537) * C114 +
             (C113 * C538 + C48293 * C552) * C48072) *
                C48027 * C21887 +
            (C6297 * C114 + C6298 * C48072) * C48027 * C21888 +
            (C6299 * C114 + C6300 * C48072) * C48027 * C21889) *
               C48426 -
           ((C6302 * C48072 + C6301 * C114) * C48027 * C21889 +
            (C5374 + C5373) * C48027 * C21888 +
            (C601 + C600) * C48027 * C21887) *
               C48413 +
           (C607 * C48027 * C21887 + (C5376 + C5375) * C48027 * C21888 +
            ((C113 * C1414 + C48293 * C1431) * C114 +
             (C113 * C1432 + C48293 * C1441) * C48072) *
                C48027 * C21889) *
               C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C302 +
            (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
            C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
               C48027 * C21887 +
           (C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
            C6119 * C304 + C6120 * C48390) *
               C48027 * C21888 +
           (C5221 * C302 + C5222 * C48429 - C6119 * C303 - C6120 * C48417 +
            C6121 * C304 + C6122 * C48390) *
               C48027 * C21889) *
              C48044 * C1976 +
          ((C5857 * C303 -
            ((C113 * C533 + C48293 * C550) * C48429 +
             (C113 * C520 + C48293 * C534) * C302) +
            C5858 * C48417 - C6295 * C304 - C6296 * C48390) *
               C48027 * C21887 +
           (C6295 * C303 - (C5858 * C48429 + C5857 * C302) + C6296 * C48417 -
            C6789 * C304 - C6790 * C48390) *
               C48027 * C21888 +
           (C6789 * C303 - (C6296 * C48429 + C6295 * C302) + C6790 * C48417 -
            C23105 * C304 - C23106 * C48390) *
               C48027 * C21889) *
              C48044 * C1977 +
          (((C113 * C522 + C48293 * C537) * C302 +
            (C113 * C538 + C48293 * C552) * C48429 - C6297 * C303 -
            C6298 * C48417 + C6299 * C304 + C6300 * C48390) *
               C48027 * C21887 +
           (C6297 * C302 + C6298 * C48429 - C6299 * C303 - C6300 * C48417 +
            C22753 * C304 + C22754 * C48390) *
               C48027 * C21888 +
           (C6299 * C302 + C6300 * C48429 - C22753 * C303 - C22754 * C48417 +
            (C113 * C22744 + C48293 * C22745) * C304 +
            (C113 * C22746 + C48293 * C22747) * C48390) *
               C48027 * C21889) *
              C48044 * C48393)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C114 +
            (C113 * C123 + C48293 * C136) * C48072) *
               C48027 * C21887 +
           (C5219 * C114 + C5220 * C48072) * C48027 * C21888 +
           (C5221 * C114 + C5222 * C48072) * C48027 * C21889) *
              C48044 * C2151 -
          ((C6296 * C48072 + C6295 * C114) * C48027 * C21889 +
           (C5858 * C48072 + C5857 * C114) * C48027 * C21888 +
           ((C113 * C533 + C48293 * C550) * C48072 +
            (C113 * C520 + C48293 * C534) * C114) *
               C48027 * C21887) *
              C48044 * C2152 +
          (((C113 * C522 + C48293 * C537) * C114 +
            (C113 * C538 + C48293 * C552) * C48072) *
               C48027 * C21887 +
           (C6297 * C114 + C6298 * C48072) * C48027 * C21888 +
           (C6299 * C114 + C6300 * C48072) * C48027 * C21889) *
              C48044 * C2153 -
          (((C113 * C7641 + C48293 * C7644) * C48072 +
            (C113 * C7638 + C48293 * C7640) * C114) *
               C48027 * C21889 +
           (C7652 * C48072 + C7651 * C114) * C48027 * C21888 +
           ((C113 * C2166 + C48293 * C2176) * C48072 +
            (C113 * C2158 + C48293 * C2167) * C114) *
               C48027 * C21887) *
              C48044 * C2154 +
          (((C113 * C2159 + C48293 * C2168) * C114 +
            (C113 * C2169 + C48293 * C2177) * C48072) *
               C48027 * C21887 +
           ((C113 * C7164 + C48293 * C7166) * C114 +
            (C113 * C7167 + C48293 * C7170) * C48072) *
               C48027 * C21888 +
           ((C113 * C23388 + C48293 * C23389) * C114 +
            (C113 * C23390 + C48293 * C23391) * C48072) *
               C48027 * C21889) *
              C48044 * C2155)) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1173 +
             (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
             C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
                C48027 * C21887 +
            (C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
             C6119 * C1175 + C6120 * C48390) *
                C48027 * C21888 +
            (C5221 * C1173 + C5222 * C1167 - C6119 * C1174 - C6120 * C1168 +
             C6121 * C1175 + C6122 * C48390) *
                C48027 * C21889) *
               C48344 +
           ((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C48027 *
                C21887 +
            (C6007 - (C6006 + C6005) + C6008 - C6009 - C6010) * C48027 *
                C21888 +
            (C1575 * C1174 - (C379 * C1167 + C378 * C1173) + C1576 * C1168 -
             C6123 * C1175 - C6124 * C48390) *
                C48027 * C21889) *
               C48054) *
              C48359 +
          (((C5857 * C1174 -
             ((C113 * C533 + C48293 * C550) * C1167 +
              (C113 * C520 + C48293 * C534) * C1173) +
             C5858 * C1168 - C6295 * C1175 - C6296 * C48390) *
                C48027 * C21887 +
            (C6295 * C1174 - (C5858 * C1167 + C5857 * C1173) + C6296 * C1168 -
             C6789 * C1175 - C6790 * C48390) *
                C48027 * C21888 +
            (C6789 * C1174 - (C6296 * C1167 + C6295 * C1173) + C6790 * C1168 -
             (C113 * C6776 + C48293 * C6778) * C1175 -
             (C113 * C6779 + C48293 * C6782) * C48390) *
                C48027 * C21889) *
               C48344 +
           ((C1735 + C1734 - C1733 - C1736 + C1753 + C1754) * C48027 * C21887 +
            (C6637 + C6636 - C6635 - C6638 + C6645 + C6646) * C48027 * C21888 +
            (C1749 * C1173 + C1750 * C1167 - C6643 * C1174 - C6644 * C1168 +
             (C113 * C6777 + C48293 * C6780) * C1175 +
             (C113 * C6781 + C48293 * C6783) * C48390) *
                C48027 * C21889) *
               C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C48027 * C21887 +
            (C5219 * C114 + C5220 * C48072) * C48027 * C21888 +
            (C5221 * C114 + C5222 * C48072) * C48027 * C21889) *
               C707 -
           ((C379 * C48072 + C378 * C114) * C48027 * C21889 +
            (C5046 + C5045) * C48027 * C21888 +
            (C175 + C174) * C48027 * C21887) *
               C708 +
           (C184 * C48027 * C21887 + (C5048 + C5047) * C48027 * C21888 +
            (C383 * C114 + C384 * C48072) * C48027 * C21889) *
               C709 -
           ((C388 * C48072 + C387 * C114) * C48027 * C21889 +
            (C5050 + C5049) * C48027 * C21888 + C185 * C48027 * C21887) *
               C48394) *
              C48359 +
          (((C594 + C595) * C48027 * C21887 +
            (C5369 + C5370) * C48027 * C21888 +
            (C1749 * C114 + C1750 * C48072) * C48027 * C21889) *
               C708 -
           ((C6296 * C48072 + C6295 * C114) * C48027 * C21889 +
            (C5858 * C48072 + C5857 * C114) * C48027 * C21888 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C48027 * C21887) *
               C707 -
           ((C1752 * C48072 + C1751 * C114) * C48027 * C21889 +
            (C5372 + C5371) * C48027 * C21888 + C606 * C48027 * C21887) *
               C709 +
           (C850 * C48027 * C21887 + (C5650 + C5649) * C48027 * C21888 +
            ((C113 * C1728 + C48293 * C1729) * C114 +
             (C113 * C1730 + C48293 * C1731) * C48072) *
                C48027 * C21889) *
               C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C48027 * C21887 +
            (C5219 * C114 + C5220 * C48072) * C48027 * C21888 +
            (C5221 * C114 + C5222 * C48072) * C48027 * C21889) *
               C48344 -
           ((C379 * C48072 + C378 * C114) * C48027 * C21889 +
            (C5046 + C5045) * C48027 * C21888 +
            (C175 + C174) * C48027 * C21887) *
               C48054) *
              C2448 +
          (((C594 + C595) * C48027 * C21887 +
            (C5369 + C5370) * C48027 * C21888 +
            (C1749 * C114 + C1750 * C48072) * C48027 * C21889) *
               C48054 -
           ((C6296 * C48072 + C6295 * C114) * C48027 * C21889 +
            (C5858 * C48072 + C5857 * C114) * C48027 * C21888 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C48027 * C21887) *
               C48344) *
              C2449 +
          ((((C113 * C522 + C48293 * C537) * C114 +
             (C113 * C538 + C48293 * C552) * C48072) *
                C48027 * C21887 +
            (C6297 * C114 + C6298 * C48072) * C48027 * C21888 +
            (C6299 * C114 + C6300 * C48072) * C48027 * C21889) *
               C48344 -
           ((C6302 * C48072 + C6301 * C114) * C48027 * C21889 +
            (C5374 + C5373) * C48027 * C21888 +
            (C601 + C600) * C48027 * C21887) *
               C48054) *
              C2450 +
          (((C2469 + C2470) * C48027 * C21887 +
            (C7507 + C7508) * C48027 * C21888 +
            ((C113 * C7639 + C48293 * C7642) * C114 +
             (C113 * C7643 + C48293 * C7645) * C48072) *
                C48027 * C21889) *
               C48054 -
           (((C113 * C7641 + C48293 * C7644) * C48072 +
             (C113 * C7638 + C48293 * C7640) * C114) *
                C48027 * C21889 +
            (C7652 * C48072 + C7651 * C114) * C48027 * C21888 +
            ((C113 * C2166 + C48293 * C2176) * C48072 +
             (C113 * C2158 + C48293 * C2167) * C114) *
                C48027 * C21887) *
               C48344) *
              C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C302 +
            (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
            C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
               C48027 * C21887 +
           (C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
            C6119 * C304 + C6120 * C48390) *
               C48027 * C21888 +
           (C5221 * C302 + C5222 * C48429 - C6119 * C303 - C6120 * C48417 +
            C6121 * C304 + C6122 * C48390) *
               C48027 * C21889) *
              C299 +
          ((C389 - (C347 + C346) + C390 - C391 - C392) * C48027 * C21887 +
           (C5209 - (C5208 + C5207) + C5210 - C5211 - C5212) * C48027 * C21888 +
           (C1575 * C303 - (C379 * C48429 + C378 * C302) + C1576 * C48417 -
            C6123 * C304 - C6124 * C48390) *
               C48027 * C21889) *
              C300 +
          (C404 * C48027 * C21887 +
           (C5215 + C5214 - C5213 - C5216 + C5217 + C5218) * C48027 * C21888 +
           (C383 * C302 + C384 * C48429 - C1577 * C303 - C1578 * C48417 +
            (C113 * C1277 + C48293 * C1288) * C304 +
            (C113 * C1289 + C48293 * C1295) * C48390) *
               C48027 * C21889) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C114 +
            (C113 * C123 + C48293 * C136) * C48072) *
               C48027 * C21887 +
           (C5219 * C114 + C5220 * C48072) * C48027 * C21888 +
           (C5221 * C114 + C5222 * C48072) * C48027 * C21889) *
              C107 -
          ((C379 * C48072 + C378 * C114) * C48027 * C21889 +
           (C5046 + C5045) * C48027 * C21888 +
           (C175 + C174) * C48027 * C21887) *
              C108 +
          (C184 * C48027 * C21887 + (C5048 + C5047) * C48027 * C21888 +
           (C383 * C114 + C384 * C48072) * C48027 * C21889) *
              C109 -
          ((C388 * C48072 + C387 * C114) * C48027 * C21889 +
           (C5050 + C5049) * C48027 * C21888 + C185 * C48027 * C21887) *
              C110 +
          (C186 * C48027 * C21887 + (C5052 + C5051) * C48027 * C21888 +
           ((C113 * C314 + C48293 * C333) * C114 +
            (C113 * C334 + C48293 * C344) * C48072) *
               C48027 * C21889) *
              C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1173 +
            (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
            C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
               C48027 * C21887 +
           (C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
            C6119 * C1175 + C6120 * C48390) *
               C48027 * C21888 +
           (C5221 * C1173 + C5222 * C1167 - C6119 * C1174 - C6120 * C1168 +
            C6121 * C1175 + C6122 * C48390) *
               C48027 * C21889) *
              C48426 +
          ((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C48027 * C21887 +
           (C6007 - (C6006 + C6005) + C6008 - C6009 - C6010) * C48027 * C21888 +
           (C1575 * C1174 - (C379 * C1167 + C378 * C1173) + C1576 * C1168 -
            C6123 * C1175 - C6124 * C48390) *
               C48027 * C21889) *
              C48413 +
          (C1199 * C48027 * C21887 +
           (C6013 + C6012 - C6011 - C6014 + C6015 + C6016) * C48027 * C21888 +
           (C383 * C1173 + C384 * C1167 - C1577 * C1174 - C1578 * C1168 +
            (C113 * C1277 + C48293 * C1288) * C1175 +
            (C113 * C1289 + C48293 * C1295) * C48390) *
               C48027 * C21889) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48293 * C122) * C1267 +
           (C113 * C123 + C48293 * C136) * C1261 - C5219 * C1268 -
           C5220 * C1262 + C5221 * C1269 + C5222 * C1263 - C6119 * C1270 -
           C6120 * C1264 + C6121 * C1271 + C6122 * C1265) *
              C48027 * C21887 +
          (C5219 * C1267 + C5220 * C1261 - C5221 * C1268 - C5222 * C1262 +
           C6119 * C1269 + C6120 * C1263 - C6121 * C1270 - C6122 * C1264 +
           C22633 * C1271 + C22634 * C1265) *
              C48027 * C21888 +
          (C5221 * C1267 + C5222 * C1261 - C6119 * C1268 - C6120 * C1262 +
           C6121 * C1269 + C6122 * C1263 - C22633 * C1270 - C22634 * C1264 +
           (C113 * C22624 + C48293 * C22625) * C1271 +
           (C113 * C22626 + C48293 * C22627) * C1265) *
              C48027 * C21889) *
         C48044 * C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C48027 * C21887 +
            (C5219 * C114 + C5220 * C48072) * C48027 * C21888 +
            (C5221 * C114 + C5222 * C48072) * C48027 * C21889) *
               C48426 -
           ((C379 * C48072 + C378 * C114) * C48027 * C21889 +
            (C5046 + C5045) * C48027 * C21888 +
            (C175 + C174) * C48027 * C21887) *
               C48413 +
           (C184 * C48027 * C21887 + (C5048 + C5047) * C48027 * C21888 +
            (C383 * C114 + C384 * C48072) * C48027 * C21889) *
               C48384) *
              C1976 +
          (((C594 + C595) * C48027 * C21887 +
            (C5369 + C5370) * C48027 * C21888 +
            (C1749 * C114 + C1750 * C48072) * C48027 * C21889) *
               C48413 -
           ((C6296 * C48072 + C6295 * C114) * C48027 * C21889 +
            (C5858 * C48072 + C5857 * C114) * C48027 * C21888 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C48027 * C21887) *
               C48426 -
           ((C1752 * C48072 + C1751 * C114) * C48027 * C21889 +
            (C5372 + C5371) * C48027 * C21888 + C606 * C48027 * C21887) *
               C48384) *
              C1977 +
          ((((C113 * C522 + C48293 * C537) * C114 +
             (C113 * C538 + C48293 * C552) * C48072) *
                C48027 * C21887 +
            (C6297 * C114 + C6298 * C48072) * C48027 * C21888 +
            (C6299 * C114 + C6300 * C48072) * C48027 * C21889) *
               C48426 -
           ((C6302 * C48072 + C6301 * C114) * C48027 * C21889 +
            (C5374 + C5373) * C48027 * C21888 +
            (C601 + C600) * C48027 * C21887) *
               C48413 +
           (C607 * C48027 * C21887 + (C5376 + C5375) * C48027 * C21888 +
            ((C113 * C1414 + C48293 * C1431) * C114 +
             (C113 * C1432 + C48293 * C1441) * C48072) *
                C48027 * C21889) *
               C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C302 +
            (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
            C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
               C48027 * C21887 +
           (C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
            C6119 * C304 + C6120 * C48390) *
               C48027 * C21888 +
           (C5221 * C302 + C5222 * C48429 - C6119 * C303 - C6120 * C48417 +
            C6121 * C304 + C6122 * C48390) *
               C48027 * C21889) *
              C48044 * C1976 +
          ((C5857 * C303 -
            ((C113 * C533 + C48293 * C550) * C48429 +
             (C113 * C520 + C48293 * C534) * C302) +
            C5858 * C48417 - C6295 * C304 - C6296 * C48390) *
               C48027 * C21887 +
           (C6295 * C303 - (C5858 * C48429 + C5857 * C302) + C6296 * C48417 -
            C6789 * C304 - C6790 * C48390) *
               C48027 * C21888 +
           (C6789 * C303 - (C6296 * C48429 + C6295 * C302) + C6790 * C48417 -
            C23105 * C304 - C23106 * C48390) *
               C48027 * C21889) *
              C48044 * C1977 +
          (((C113 * C522 + C48293 * C537) * C302 +
            (C113 * C538 + C48293 * C552) * C48429 - C6297 * C303 -
            C6298 * C48417 + C6299 * C304 + C6300 * C48390) *
               C48027 * C21887 +
           (C6297 * C302 + C6298 * C48429 - C6299 * C303 - C6300 * C48417 +
            C22753 * C304 + C22754 * C48390) *
               C48027 * C21888 +
           (C6299 * C302 + C6300 * C48429 - C22753 * C303 - C22754 * C48417 +
            (C113 * C22744 + C48293 * C22745) * C304 +
            (C113 * C22746 + C48293 * C22747) * C48390) *
               C48027 * C21889) *
              C48044 * C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[115] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C711 +
             (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
             C5220 * C48135) *
                C48027 * C21887 +
            (C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                C48027 * C21888 +
            (C5221 * C711 + C5222 * C48358 - C6119 * C712 - C6120 * C48135) *
                C48027 * C21889) *
               C48049 +
           ((C720 - (C719 + C718) + C721) * C48027 * C21887 +
            (C5509 - (C5508 + C5507) + C5510) * C48027 * C21888 +
            (C1575 * C712 - (C379 * C48358 + C378 * C711) + C1576 * C48135) *
                C48027 * C21889) *
               C48057 +
           (C744 * C48027 * C21887 +
            (C5513 + C5512 - C5511 - C5514) * C48027 * C21888 +
            (C383 * C711 + C384 * C48358 - C1577 * C712 - C1578 * C48135) *
                C48027 * C21889) *
               C3111) *
              C3547 +
          (((C5857 * C712 -
             ((C113 * C533 + C48293 * C550) * C48358 +
              (C113 * C520 + C48293 * C534) * C711) +
             C5858 * C48135) *
                C48027 * C21887 +
            (C6295 * C712 - (C5858 * C48358 + C5857 * C711) + C6296 * C48135) *
                C48027 * C21888 +
            (C6789 * C712 - (C6296 * C48358 + C6295 * C711) + C6790 * C48135) *
                C48027 * C21889) *
               C48049 +
           ((C1028 + C1027 - C1050 - C1051) * C48027 * C21887 +
            (C5851 + C5850 - C5849 - C5852) * C48027 * C21888 +
            (C1749 * C711 + C1750 * C48358 - C6643 * C712 - C6644 * C48135) *
                C48027 * C21889) *
               C48057 +
           (C1057 * C48027 * C21887 +
            (C5855 - (C5854 + C5853) + C5856) * C48027 * C21888 +
            ((C113 * C1856 + C48293 * C1861) * C712 -
             (C1752 * C48358 + C1751 * C711) +
             (C113 * C1862 + C48293 * C1865) * C48135) *
                C48027 * C21889) *
               C3111) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C711 +
             (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
             C5220 * C48135) *
                C48027 * C21887 +
            (C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                C48027 * C21888 +
            (C5221 * C711 + C5222 * C48358 - C6119 * C712 - C6120 * C48135) *
                C48027 * C21889) *
               C2812 +
           ((C720 - (C719 + C718) + C721) * C48027 * C21887 +
            (C5509 - (C5508 + C5507) + C5510) * C48027 * C21888 +
            (C1575 * C712 - (C379 * C48358 + C378 * C711) + C1576 * C48135) *
                C48027 * C21889) *
               C48054) *
              C48173 +
          (((C5857 * C712 -
             ((C113 * C533 + C48293 * C550) * C48358 +
              (C113 * C520 + C48293 * C534) * C711) +
             C5858 * C48135) *
                C48027 * C21887 +
            (C6295 * C712 - (C5858 * C48358 + C5857 * C711) + C6296 * C48135) *
                C48027 * C21888 +
            (C6789 * C712 - (C6296 * C48358 + C6295 * C711) + C6790 * C48135) *
                C48027 * C21889) *
               C2812 +
           ((C1028 + C1027 - C1050 - C1051) * C48027 * C21887 +
            (C5851 + C5850 - C5849 - C5852) * C48027 * C21888 +
            (C1749 * C711 + C1750 * C48358 - C6643 * C712 - C6644 * C48135) *
                C48027 * C21889) *
               C48054) *
              C48180 +
          ((((C113 * C522 + C48293 * C537) * C711 +
             (C113 * C538 + C48293 * C552) * C48358 - C6297 * C712 -
             C6298 * C48135) *
                C48027 * C21887 +
            (C6297 * C711 + C6298 * C48358 - C6299 * C712 - C6300 * C48135) *
                C48027 * C21888 +
            (C6299 * C711 + C6300 * C48358 - C22753 * C712 - C22754 * C48135) *
                C48027 * C21889) *
               C2812 +
           ((C2347 - (C2332 + C2331) + C2348) * C48027 * C21887 +
            (C7369 - (C7368 + C7367) + C7370) * C48027 * C21888 +
            ((C113 * C6271 + C48293 * C6274) * C712 -
             (C6302 * C48358 + C6301 * C711) +
             (C113 * C6275 + C48293 * C6277) * C48135) *
                C48027 * C21889) *
               C48054) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C302 +
             (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
             C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
                C48027 * C21887 +
            (C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
             C6119 * C304 + C6120 * C48390) *
                C48027 * C21888 +
            (C5221 * C302 + C5222 * C48429 - C6119 * C303 - C6120 * C48417 +
             C6121 * C304 + C6122 * C48390) *
                C48027 * C21889) *
               C2812 +
           ((C389 - (C347 + C346) + C390 - C391 - C392) * C48027 * C21887 +
            (C5209 - (C5208 + C5207) + C5210 - C5211 - C5212) * C48027 *
                C21888 +
            (C1575 * C303 - (C379 * C48429 + C378 * C302) + C1576 * C48417 -
             C6123 * C304 - C6124 * C48390) *
                C48027 * C21889) *
               C48054) *
              C3547 +
          (((C5857 * C303 -
             ((C113 * C533 + C48293 * C550) * C48429 +
              (C113 * C520 + C48293 * C534) * C302) +
             C5858 * C48417 - C6295 * C304 - C6296 * C48390) *
                C48027 * C21887 +
            (C6295 * C303 - (C5858 * C48429 + C5857 * C302) + C6296 * C48417 -
             C6789 * C304 - C6790 * C48390) *
                C48027 * C21888 +
            (C6789 * C303 - (C6296 * C48429 + C6295 * C302) + C6790 * C48417 -
             C23105 * C304 - C23106 * C48390) *
                C48027 * C21889) *
               C2812 +
           ((C3698 + C3697 - C3696 - C3699 + C3700 + C3701) * C48027 * C21887 +
            (C9017 + C9016 - C9015 - C9018 + C9019 + C9020) * C48027 * C21888 +
            (C1749 * C302 + C1750 * C48429 - C6643 * C303 - C6644 * C48417 +
             (C113 * C6777 + C48293 * C6780) * C304 +
             (C113 * C6781 + C48293 * C6783) * C48390) *
                C48027 * C21889) *
               C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C48027 * C21887 +
            (C5219 * C114 + C5220 * C48072) * C48027 * C21888 +
            (C5221 * C114 + C5222 * C48072) * C48027 * C21889) *
               C48435 -
           ((C379 * C48072 + C378 * C114) * C48027 * C21889 +
            (C5046 + C5045) * C48027 * C21888 +
            (C175 + C174) * C48027 * C21887) *
               C48428 +
           (C184 * C48027 * C21887 + (C5048 + C5047) * C48027 * C21888 +
            (C383 * C114 + C384 * C48072) * C48027 * C21889) *
               C48415 -
           ((C388 * C48072 + C387 * C114) * C48027 * C21889 +
            (C5050 + C5049) * C48027 * C21888 + C185 * C48027 * C21887) *
               C48394) *
              C3547 +
          (((C594 + C595) * C48027 * C21887 +
            (C5369 + C5370) * C48027 * C21888 +
            (C1749 * C114 + C1750 * C48072) * C48027 * C21889) *
               C48428 -
           ((C6296 * C48072 + C6295 * C114) * C48027 * C21889 +
            (C5858 * C48072 + C5857 * C114) * C48027 * C21888 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C48027 * C21887) *
               C48435 -
           ((C1752 * C48072 + C1751 * C114) * C48027 * C21889 +
            (C5372 + C5371) * C48027 * C21888 + C606 * C48027 * C21887) *
               C48415 +
           (C850 * C48027 * C21887 + (C5650 + C5649) * C48027 * C21888 +
            ((C113 * C1728 + C48293 * C1729) * C114 +
             (C113 * C1730 + C48293 * C1731) * C48072) *
                C48027 * C21889) *
               C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C48027 * C21887 +
            (C5219 * C114 + C5220 * C48072) * C48027 * C21888 +
            (C5221 * C114 + C5222 * C48072) * C48027 * C21889) *
               C2812 -
           ((C379 * C48072 + C378 * C114) * C48027 * C21889 +
            (C5046 + C5045) * C48027 * C21888 +
            (C175 + C174) * C48027 * C21887) *
               C48054) *
              C48437 +
          (((C594 + C595) * C48027 * C21887 +
            (C5369 + C5370) * C48027 * C21888 +
            (C1749 * C114 + C1750 * C48072) * C48027 * C21889) *
               C48054 -
           ((C6296 * C48072 + C6295 * C114) * C48027 * C21889 +
            (C5858 * C48072 + C5857 * C114) * C48027 * C21888 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C48027 * C21887) *
               C2812) *
              C48434 +
          ((((C113 * C522 + C48293 * C537) * C114 +
             (C113 * C538 + C48293 * C552) * C48072) *
                C48027 * C21887 +
            (C6297 * C114 + C6298 * C48072) * C48027 * C21888 +
            (C6299 * C114 + C6300 * C48072) * C48027 * C21889) *
               C2812 -
           ((C6302 * C48072 + C6301 * C114) * C48027 * C21889 +
            (C5374 + C5373) * C48027 * C21888 +
            (C601 + C600) * C48027 * C21887) *
               C48054) *
              C48425 +
          (((C2469 + C2470) * C48027 * C21887 +
            (C7507 + C7508) * C48027 * C21888 +
            ((C113 * C7639 + C48293 * C7642) * C114 +
             (C113 * C7643 + C48293 * C7645) * C48072) *
                C48027 * C21889) *
               C48054 -
           ((C23744 * C48072 + C23743 * C114) * C48027 * C21889 +
            (C7652 * C48072 + C7651 * C114) * C48027 * C21888 +
            ((C113 * C2166 + C48293 * C2176) * C48072 +
             (C113 * C2158 + C48293 * C2167) * C114) *
                C48027 * C21887) *
               C2812) *
              C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C48027 * C21887 +
            (C5219 * C114 + C5220 * C48072) * C48027 * C21888 +
            (C5221 * C114 + C5222 * C48072) * C48027 * C21889) *
               C48049 -
           ((C379 * C48072 + C378 * C114) * C48027 * C21889 +
            (C5046 + C5045) * C48027 * C21888 +
            (C175 + C174) * C48027 * C21887) *
               C48057 +
           (C184 * C48027 * C21887 + (C5048 + C5047) * C48027 * C21888 +
            (C383 * C114 + C384 * C48072) * C48027 * C21889) *
               C3111) *
              C48173 +
          (((C594 + C595) * C48027 * C21887 +
            (C5369 + C5370) * C48027 * C21888 +
            (C1749 * C114 + C1750 * C48072) * C48027 * C21889) *
               C48057 -
           ((C6296 * C48072 + C6295 * C114) * C48027 * C21889 +
            (C5858 * C48072 + C5857 * C114) * C48027 * C21888 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C48027 * C21887) *
               C48049 -
           ((C1752 * C48072 + C1751 * C114) * C48027 * C21889 +
            (C5372 + C5371) * C48027 * C21888 + C606 * C48027 * C21887) *
               C3111) *
              C48180 +
          ((((C113 * C522 + C48293 * C537) * C114 +
             (C113 * C538 + C48293 * C552) * C48072) *
                C48027 * C21887 +
            (C6297 * C114 + C6298 * C48072) * C48027 * C21888 +
            (C6299 * C114 + C6300 * C48072) * C48027 * C21889) *
               C48049 -
           ((C6302 * C48072 + C6301 * C114) * C48027 * C21889 +
            (C5374 + C5373) * C48027 * C21888 +
            (C601 + C600) * C48027 * C21887) *
               C48057 +
           (C607 * C48027 * C21887 + (C5376 + C5375) * C48027 * C21888 +
            ((C113 * C1414 + C48293 * C1431) * C114 +
             (C113 * C1432 + C48293 * C1441) * C48072) *
                C48027 * C21889) *
               C3111) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C48027 * C21887 +
            (C5219 * C114 + C5220 * C48072) * C48027 * C21888 +
            (C5221 * C114 + C5222 * C48072) * C48027 * C21889) *
               C48435 -
           ((C379 * C48072 + C378 * C114) * C48027 * C21889 +
            (C5046 + C5045) * C48027 * C21888 +
            (C175 + C174) * C48027 * C21887) *
               C48428 +
           (C184 * C48027 * C21887 + (C5048 + C5047) * C48027 * C21888 +
            (C383 * C114 + C384 * C48072) * C48027 * C21889) *
               C48415 -
           ((C388 * C48072 + C387 * C114) * C48027 * C21889 +
            (C5050 + C5049) * C48027 * C21888 + C185 * C48027 * C21887) *
               C48394) *
              C3547 +
          (((C594 + C595) * C48027 * C21887 +
            (C5369 + C5370) * C48027 * C21888 +
            (C1749 * C114 + C1750 * C48072) * C48027 * C21889) *
               C48428 -
           ((C6296 * C48072 + C6295 * C114) * C48027 * C21889 +
            (C5858 * C48072 + C5857 * C114) * C48027 * C21888 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C48027 * C21887) *
               C48435 -
           ((C1752 * C48072 + C1751 * C114) * C48027 * C21889 +
            (C5372 + C5371) * C48027 * C21888 + C606 * C48027 * C21887) *
               C48415 +
           (C850 * C48027 * C21887 + (C5650 + C5649) * C48027 * C21888 +
            ((C113 * C1728 + C48293 * C1729) * C114 +
             (C113 * C1730 + C48293 * C1731) * C48072) *
                C48027 * C21889) *
               C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C302 +
             (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
             C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
                C48027 * C21887 +
            (C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
             C6119 * C304 + C6120 * C48390) *
                C48027 * C21888 +
            (C5221 * C302 + C5222 * C48429 - C6119 * C303 - C6120 * C48417 +
             C6121 * C304 + C6122 * C48390) *
                C48027 * C21889) *
               C2812 +
           ((C389 - (C347 + C346) + C390 - C391 - C392) * C48027 * C21887 +
            (C5209 - (C5208 + C5207) + C5210 - C5211 - C5212) * C48027 *
                C21888 +
            (C1575 * C303 - (C379 * C48429 + C378 * C302) + C1576 * C48417 -
             C6123 * C304 - C6124 * C48390) *
                C48027 * C21889) *
               C48054) *
              C3547 +
          (((C5857 * C303 -
             ((C113 * C533 + C48293 * C550) * C48429 +
              (C113 * C520 + C48293 * C534) * C302) +
             C5858 * C48417 - C6295 * C304 - C6296 * C48390) *
                C48027 * C21887 +
            (C6295 * C303 - (C5858 * C48429 + C5857 * C302) + C6296 * C48417 -
             C6789 * C304 - C6790 * C48390) *
                C48027 * C21888 +
            (C6789 * C303 - (C6296 * C48429 + C6295 * C302) + C6790 * C48417 -
             C23105 * C304 - C23106 * C48390) *
                C48027 * C21889) *
               C2812 +
           ((C3698 + C3697 - C3696 - C3699 + C3700 + C3701) * C48027 * C21887 +
            (C9017 + C9016 - C9015 - C9018 + C9019 + C9020) * C48027 * C21888 +
            (C1749 * C302 + C1750 * C48429 - C6643 * C303 - C6644 * C48417 +
             (C113 * C6777 + C48293 * C6780) * C304 +
             (C113 * C6781 + C48293 * C6783) * C48390) *
                C48027 * C21889) *
               C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C711 +
            (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
            C5220 * C48135) *
               C48027 * C21887 +
           (C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
               C48027 * C21888 +
           (C5221 * C711 + C5222 * C48358 - C6119 * C712 - C6120 * C48135) *
               C48027 * C21889) *
              C707 +
          ((C720 - (C719 + C718) + C721) * C48027 * C21887 +
           (C5509 - (C5508 + C5507) + C5510) * C48027 * C21888 +
           (C1575 * C712 - (C379 * C48358 + C378 * C711) + C1576 * C48135) *
               C48027 * C21889) *
              C708 +
          (C744 * C48027 * C21887 +
           (C5513 + C5512 - C5511 - C5514) * C48027 * C21888 +
           (C383 * C711 + C384 * C48358 - C1577 * C712 - C1578 * C48135) *
               C48027 * C21889) *
              C709 +
          (C745 * C48027 * C21887 +
           (C5517 - (C5516 + C5515) + C5518) * C48027 * C21888 +
           ((C113 * C1550 + C48293 * C1551) * C712 -
            (C388 * C48358 + C387 * C711) +
            (C113 * C1552 + C48293 * C1553) * C48135) *
               C48027 * C21889) *
              C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1546 +
            (C113 * C123 + C48293 * C136) * C1540 - C5219 * C1547 -
            C5220 * C1541 + C5221 * C1548 + C5222 * C1542 - C6119 * C1549 -
            C6120 * C48400) *
               C48027 * C21887 +
           (C5219 * C1546 + C5220 * C1540 - C5221 * C1547 - C5222 * C1541 +
            C6119 * C1548 + C6120 * C1542 - C6121 * C1549 - C6122 * C48400) *
               C48027 * C21888 +
           (C5221 * C1546 + C5222 * C1540 - C6119 * C1547 - C6120 * C1541 +
            C6121 * C1548 + C6122 * C1542 - C22633 * C1549 - C22634 * C48400) *
               C48027 * C21889) *
              C48344 +
          ((C1557 - (C1556 + C1555) + C1558 - C1559 - C1560 + C1579 + C1580) *
               C48027 * C21887 +
           (C6435 - (C6434 + C6433) + C6436 - C6437 - C6438 + C6439 + C6440) *
               C48027 * C21888 +
           (C1575 * C1547 - (C379 * C1540 + C378 * C1546) + C1576 * C1541 -
            C6123 * C1548 - C6124 * C1542 +
            (C113 * C6099 + C48293 * C6102) * C1549 +
            (C113 * C6103 + C48293 * C6105) * C48400) *
               C48027 * C21889) *
              C48054) *
         C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C711 +
             (C113 * C123 + C48293 * C136) * C48358 - C5219 * C712 -
             C5220 * C48135) *
                C48027 * C21887 +
            (C5219 * C711 + C5220 * C48358 - C5221 * C712 - C5222 * C48135) *
                C48027 * C21888 +
            (C5221 * C711 + C5222 * C48358 - C6119 * C712 - C6120 * C48135) *
                C48027 * C21889) *
               C299 +
           ((C720 - (C719 + C718) + C721) * C48027 * C21887 +
            (C5509 - (C5508 + C5507) + C5510) * C48027 * C21888 +
            (C1575 * C712 - (C379 * C48358 + C378 * C711) + C1576 * C48135) *
                C48027 * C21889) *
               C300 +
           (C744 * C48027 * C21887 +
            (C5513 + C5512 - C5511 - C5514) * C48027 * C21888 +
            (C383 * C711 + C384 * C48358 - C1577 * C712 - C1578 * C48135) *
                C48027 * C21889) *
               C48384) *
              C48359 +
          (((C5857 * C712 -
             ((C113 * C533 + C48293 * C550) * C48358 +
              (C113 * C520 + C48293 * C534) * C711) +
             C5858 * C48135) *
                C48027 * C21887 +
            (C6295 * C712 - (C5858 * C48358 + C5857 * C711) + C6296 * C48135) *
                C48027 * C21888 +
            (C6789 * C712 - (C6296 * C48358 + C6295 * C711) + C6790 * C48135) *
                C48027 * C21889) *
               C299 +
           ((C1028 + C1027 - C1050 - C1051) * C48027 * C21887 +
            (C5851 + C5850 - C5849 - C5852) * C48027 * C21888 +
            (C1749 * C711 + C1750 * C48358 - C6643 * C712 - C6644 * C48135) *
                C48027 * C21889) *
               C300 +
           (C1057 * C48027 * C21887 +
            (C5855 - (C5854 + C5853) + C5856) * C48027 * C21888 +
            ((C113 * C1856 + C48293 * C1861) * C712 -
             (C1752 * C48358 + C1751 * C711) +
             (C113 * C1862 + C48293 * C1865) * C48135) *
                C48027 * C21889) *
               C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1546 +
            (C113 * C123 + C48293 * C136) * C1540 - C5219 * C1547 -
            C5220 * C1541 + C5221 * C1548 + C5222 * C1542 - C6119 * C1549 -
            C6120 * C48400) *
               C48027 * C21887 +
           (C5219 * C1546 + C5220 * C1540 - C5221 * C1547 - C5222 * C1541 +
            C6119 * C1548 + C6120 * C1542 - C6121 * C1549 - C6122 * C48400) *
               C48027 * C21888 +
           (C5221 * C1546 + C5222 * C1540 - C6119 * C1547 - C6120 * C1541 +
            C6121 * C1548 + C6122 * C1542 - C22633 * C1549 - C22634 * C48400) *
               C48027 * C21889) *
              C48044 * C48359 +
          ((C5857 * C1547 -
            ((C113 * C533 + C48293 * C550) * C1540 +
             (C113 * C520 + C48293 * C534) * C1546) +
            C5858 * C1541 - C6295 * C1548 - C6296 * C1542 + C6789 * C1549 +
            C6790 * C48400) *
               C48027 * C21887 +
           (C6295 * C1547 - (C5858 * C1540 + C5857 * C1546) + C6296 * C1541 -
            C6789 * C1548 - C6790 * C1542 + C23105 * C1549 + C23106 * C48400) *
               C48027 * C21888 +
           (C6789 * C1547 - (C6296 * C1540 + C6295 * C1546) + C6790 * C1541 -
            C23105 * C1548 - C23106 * C1542 +
            (C113 * C23096 + C48293 * C23097) * C1549 +
            (C113 * C23098 + C48293 * C23099) * C48400) *
               C48027 * C21889) *
              C48044 * C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C302 +
            (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
            C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
               C48027 * C21887 +
           (C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
            C6119 * C304 + C6120 * C48390) *
               C48027 * C21888 +
           (C5221 * C302 + C5222 * C48429 - C6119 * C303 - C6120 * C48417 +
            C6121 * C304 + C6122 * C48390) *
               C48027 * C21889) *
              C299 +
          ((C389 - (C347 + C346) + C390 - C391 - C392) * C48027 * C21887 +
           (C5209 - (C5208 + C5207) + C5210 - C5211 - C5212) * C48027 * C21888 +
           (C1575 * C303 - (C379 * C48429 + C378 * C302) + C1576 * C48417 -
            C6123 * C304 - C6124 * C48390) *
               C48027 * C21889) *
              C300 +
          (C404 * C48027 * C21887 +
           (C5215 + C5214 - C5213 - C5216 + C5217 + C5218) * C48027 * C21888 +
           (C383 * C302 + C384 * C48429 - C1577 * C303 - C1578 * C48417 +
            (C113 * C1277 + C48293 * C1288) * C304 +
            (C113 * C1289 + C48293 * C1295) * C48390) *
               C48027 * C21889) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C114 +
            (C113 * C123 + C48293 * C136) * C48072) *
               C48027 * C21887 +
           (C5219 * C114 + C5220 * C48072) * C48027 * C21888 +
           (C5221 * C114 + C5222 * C48072) * C48027 * C21889) *
              C107 -
          ((C379 * C48072 + C378 * C114) * C48027 * C21889 +
           (C5046 + C5045) * C48027 * C21888 +
           (C175 + C174) * C48027 * C21887) *
              C108 +
          (C184 * C48027 * C21887 + (C5048 + C5047) * C48027 * C21888 +
           (C383 * C114 + C384 * C48072) * C48027 * C21889) *
              C109 -
          ((C388 * C48072 + C387 * C114) * C48027 * C21889 +
           (C5050 + C5049) * C48027 * C21888 + C185 * C48027 * C21887) *
              C110 +
          (C186 * C48027 * C21887 + (C5052 + C5051) * C48027 * C21888 +
           ((C113 * C314 + C48293 * C333) * C114 +
            (C113 * C334 + C48293 * C344) * C48072) *
               C48027 * C21889) *
              C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C48027 * C21887 +
            (C5219 * C114 + C5220 * C48072) * C48027 * C21888 +
            (C5221 * C114 + C5222 * C48072) * C48027 * C21889) *
               C299 -
           ((C379 * C48072 + C378 * C114) * C48027 * C21889 +
            (C5046 + C5045) * C48027 * C21888 +
            (C175 + C174) * C48027 * C21887) *
               C300 +
           (C184 * C48027 * C21887 + (C5048 + C5047) * C48027 * C21888 +
            (C383 * C114 + C384 * C48072) * C48027 * C21889) *
               C48384) *
              C48430 +
          (((C594 + C595) * C48027 * C21887 +
            (C5369 + C5370) * C48027 * C21888 +
            (C1749 * C114 + C1750 * C48072) * C48027 * C21889) *
               C300 -
           ((C6296 * C48072 + C6295 * C114) * C48027 * C21889 +
            (C5858 * C48072 + C5857 * C114) * C48027 * C21888 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C48027 * C21887) *
               C299 -
           ((C1752 * C48072 + C1751 * C114) * C48027 * C21889 +
            (C5372 + C5371) * C48027 * C21888 + C606 * C48027 * C21887) *
               C48384) *
              C48419 +
          ((((C113 * C522 + C48293 * C537) * C114 +
             (C113 * C538 + C48293 * C552) * C48072) *
                C48027 * C21887 +
            (C6297 * C114 + C6298 * C48072) * C48027 * C21888 +
            (C6299 * C114 + C6300 * C48072) * C48027 * C21889) *
               C299 -
           ((C6302 * C48072 + C6301 * C114) * C48027 * C21889 +
            (C5374 + C5373) * C48027 * C21888 +
            (C601 + C600) * C48027 * C21887) *
               C300 +
           (C607 * C48027 * C21887 + (C5376 + C5375) * C48027 * C21888 +
            ((C113 * C1414 + C48293 * C1431) * C114 +
             (C113 * C1432 + C48293 * C1441) * C48072) *
                C48027 * C21889) *
               C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1173 +
            (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
            C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
               C48027 * C21887 +
           (C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
            C6119 * C1175 + C6120 * C48390) *
               C48027 * C21888 +
           (C5221 * C1173 + C5222 * C1167 - C6119 * C1174 - C6120 * C1168 +
            C6121 * C1175 + C6122 * C48390) *
               C48027 * C21889) *
              C48426 +
          ((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C48027 * C21887 +
           (C6007 - (C6006 + C6005) + C6008 - C6009 - C6010) * C48027 * C21888 +
           (C1575 * C1174 - (C379 * C1167 + C378 * C1173) + C1576 * C1168 -
            C6123 * C1175 - C6124 * C48390) *
               C48027 * C21889) *
              C48413 +
          (C1199 * C48027 * C21887 +
           (C6013 + C6012 - C6011 - C6014 + C6015 + C6016) * C48027 * C21888 +
           (C383 * C1173 + C384 * C1167 - C1577 * C1174 - C1578 * C1168 +
            (C113 * C1277 + C48293 * C1288) * C1175 +
            (C113 * C1289 + C48293 * C1295) * C48390) *
               C48027 * C21889) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48293 * C122) * C1267 +
           (C113 * C123 + C48293 * C136) * C1261 - C5219 * C1268 -
           C5220 * C1262 + C5221 * C1269 + C5222 * C1263 - C6119 * C1270 -
           C6120 * C1264 + C6121 * C1271 + C6122 * C1265) *
              C48027 * C21887 +
          (C5219 * C1267 + C5220 * C1261 - C5221 * C1268 - C5222 * C1262 +
           C6119 * C1269 + C6120 * C1263 - C6121 * C1270 - C6122 * C1264 +
           C22633 * C1271 + C22634 * C1265) *
              C48027 * C21888 +
          (C5221 * C1267 + C5222 * C1261 - C6119 * C1268 - C6120 * C1262 +
           C6121 * C1269 + C6122 * C1263 - C22633 * C1270 - C22634 * C1264 +
           (C113 * C22624 + C48293 * C22625) * C1271 +
           (C113 * C22626 + C48293 * C22627) * C1265) *
              C48027 * C21889) *
         C48044 * C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1173 +
            (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
            C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
               C48027 * C21887 +
           (C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
            C6119 * C1175 + C6120 * C48390) *
               C48027 * C21888 +
           (C5221 * C1173 + C5222 * C1167 - C6119 * C1174 - C6120 * C1168 +
            C6121 * C1175 + C6122 * C48390) *
               C48027 * C21889) *
              C48044 * C48430 +
          ((C5857 * C1174 -
            ((C113 * C533 + C48293 * C550) * C1167 +
             (C113 * C520 + C48293 * C534) * C1173) +
            C5858 * C1168 - C6295 * C1175 - C6296 * C48390) *
               C48027 * C21887 +
           (C6295 * C1174 - (C5858 * C1167 + C5857 * C1173) + C6296 * C1168 -
            C6789 * C1175 - C6790 * C48390) *
               C48027 * C21888 +
           (C6789 * C1174 - (C6296 * C1167 + C6295 * C1173) + C6790 * C1168 -
            (C113 * C6776 + C48293 * C6778) * C1175 -
            (C113 * C6779 + C48293 * C6782) * C48390) *
               C48027 * C21889) *
              C48044 * C48419 +
          (((C113 * C522 + C48293 * C537) * C1173 +
            (C113 * C538 + C48293 * C552) * C1167 - C6297 * C1174 -
            C6298 * C1168 + C6299 * C1175 + C6300 * C48390) *
               C48027 * C21887 +
           (C6297 * C1173 + C6298 * C1167 - C6299 * C1174 - C6300 * C1168 +
            C22753 * C1175 + C22754 * C48390) *
               C48027 * C21888 +
           (C6299 * C1173 + C6300 * C1167 - C22753 * C1174 - C22754 * C1168 +
            (C113 * C22744 + C48293 * C22745) * C1175 +
            (C113 * C22746 + C48293 * C22747) * C48390) *
               C48027 * C21889) *
              C48044 * C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[123] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C114 +
             (C113 * C123 + C48293 * C136) * C48072) *
                C48027 * C21887 +
            (C5219 * C114 + C5220 * C48072) * C48027 * C21888 +
            (C5221 * C114 + C5222 * C48072) * C48027 * C21889) *
               C707 -
           ((C379 * C48072 + C378 * C114) * C48027 * C21889 +
            (C5046 + C5045) * C48027 * C21888 +
            (C175 + C174) * C48027 * C21887) *
               C708 +
           (C184 * C48027 * C21887 + (C5048 + C5047) * C48027 * C21888 +
            (C383 * C114 + C384 * C48072) * C48027 * C21889) *
               C709 -
           ((C388 * C48072 + C387 * C114) * C48027 * C21889 +
            (C5050 + C5049) * C48027 * C21888 + C185 * C48027 * C21887) *
               C48394) *
              C48359 +
          (((C594 + C595) * C48027 * C21887 +
            (C5369 + C5370) * C48027 * C21888 +
            (C1749 * C114 + C1750 * C48072) * C48027 * C21889) *
               C708 -
           ((C6296 * C48072 + C6295 * C114) * C48027 * C21889 +
            (C5858 * C48072 + C5857 * C114) * C48027 * C21888 +
            ((C113 * C533 + C48293 * C550) * C48072 +
             (C113 * C520 + C48293 * C534) * C114) *
                C48027 * C21887) *
               C707 -
           ((C1752 * C48072 + C1751 * C114) * C48027 * C21889 +
            (C5372 + C5371) * C48027 * C21888 + C606 * C48027 * C21887) *
               C709 +
           (C850 * C48027 * C21887 + (C5650 + C5649) * C48027 * C21888 +
            ((C113 * C1728 + C48293 * C1729) * C114 +
             (C113 * C1730 + C48293 * C1731) * C48072) *
                C48027 * C21889) *
               C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48293 * C122) * C1173 +
             (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
             C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
                C48027 * C21887 +
            (C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
             C6119 * C1175 + C6120 * C48390) *
                C48027 * C21888 +
            (C5221 * C1173 + C5222 * C1167 - C6119 * C1174 - C6120 * C1168 +
             C6121 * C1175 + C6122 * C48390) *
                C48027 * C21889) *
               C48344 +
           ((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C48027 *
                C21887 +
            (C6007 - (C6006 + C6005) + C6008 - C6009 - C6010) * C48027 *
                C21888 +
            (C1575 * C1174 - (C379 * C1167 + C378 * C1173) + C1576 * C1168 -
             C6123 * C1175 - C6124 * C48390) *
                C48027 * C21889) *
               C48054) *
              C48359 +
          (((C5857 * C1174 -
             ((C113 * C533 + C48293 * C550) * C1167 +
              (C113 * C520 + C48293 * C534) * C1173) +
             C5858 * C1168 - C6295 * C1175 - C6296 * C48390) *
                C48027 * C21887 +
            (C6295 * C1174 - (C5858 * C1167 + C5857 * C1173) + C6296 * C1168 -
             C6789 * C1175 - C6790 * C48390) *
                C48027 * C21888 +
            (C6789 * C1174 - (C6296 * C1167 + C6295 * C1173) + C6790 * C1168 -
             (C113 * C6776 + C48293 * C6778) * C1175 -
             (C113 * C6779 + C48293 * C6782) * C48390) *
                C48027 * C21889) *
               C48344 +
           ((C1735 + C1734 - C1733 - C1736 + C1753 + C1754) * C48027 * C21887 +
            (C6637 + C6636 - C6635 - C6638 + C6645 + C6646) * C48027 * C21888 +
            (C1749 * C1173 + C1750 * C1167 - C6643 * C1174 - C6644 * C1168 +
             (C113 * C6777 + C48293 * C6780) * C1175 +
             (C113 * C6781 + C48293 * C6783) * C48390) *
                C48027 * C21889) *
               C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[124] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C114 +
            (C113 * C123 + C48293 * C136) * C48072) *
               C48027 * C21887 +
           (C5219 * C114 + C5220 * C48072) * C48027 * C21888 +
           (C5221 * C114 + C5222 * C48072) * C48027 * C21889) *
              C107 -
          ((C379 * C48072 + C378 * C114) * C48027 * C21889 +
           (C5046 + C5045) * C48027 * C21888 +
           (C175 + C174) * C48027 * C21887) *
              C108 +
          (C184 * C48027 * C21887 + (C5048 + C5047) * C48027 * C21888 +
           (C383 * C114 + C384 * C48072) * C48027 * C21889) *
              C109 -
          ((C388 * C48072 + C387 * C114) * C48027 * C21889 +
           (C5050 + C5049) * C48027 * C21888 + C185 * C48027 * C21887) *
              C110 +
          (C186 * C48027 * C21887 + (C5052 + C5051) * C48027 * C21888 +
           ((C113 * C314 + C48293 * C333) * C114 +
            (C113 * C334 + C48293 * C344) * C48072) *
               C48027 * C21889) *
              C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C302 +
            (C113 * C123 + C48293 * C136) * C48429 - C5219 * C303 -
            C5220 * C48417 + C5221 * C304 + C5222 * C48390) *
               C48027 * C21887 +
           (C5219 * C302 + C5220 * C48429 - C5221 * C303 - C5222 * C48417 +
            C6119 * C304 + C6120 * C48390) *
               C48027 * C21888 +
           (C5221 * C302 + C5222 * C48429 - C6119 * C303 - C6120 * C48417 +
            C6121 * C304 + C6122 * C48390) *
               C48027 * C21889) *
              C299 +
          ((C389 - (C347 + C346) + C390 - C391 - C392) * C48027 * C21887 +
           (C5209 - (C5208 + C5207) + C5210 - C5211 - C5212) * C48027 * C21888 +
           (C1575 * C303 - (C379 * C48429 + C378 * C302) + C1576 * C48417 -
            C6123 * C304 - C6124 * C48390) *
               C48027 * C21889) *
              C300 +
          (C404 * C48027 * C21887 +
           (C5215 + C5214 - C5213 - C5216 + C5217 + C5218) * C48027 * C21888 +
           (C383 * C302 + C384 * C48429 - C1577 * C303 - C1578 * C48417 +
            (C113 * C1277 + C48293 * C1288) * C304 +
            (C113 * C1289 + C48293 * C1295) * C48390) *
               C48027 * C21889) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48293 * C122) * C1173 +
            (C113 * C123 + C48293 * C136) * C1167 - C5219 * C1174 -
            C5220 * C1168 + C5221 * C1175 + C5222 * C48390) *
               C48027 * C21887 +
           (C5219 * C1173 + C5220 * C1167 - C5221 * C1174 - C5222 * C1168 +
            C6119 * C1175 + C6120 * C48390) *
               C48027 * C21888 +
           (C5221 * C1173 + C5222 * C1167 - C6119 * C1174 - C6120 * C1168 +
            C6121 * C1175 + C6122 * C48390) *
               C48027 * C21889) *
              C48426 +
          ((C1179 - (C1178 + C1177) + C1180 - C1181 - C1182) * C48027 * C21887 +
           (C6007 - (C6006 + C6005) + C6008 - C6009 - C6010) * C48027 * C21888 +
           (C1575 * C1174 - (C379 * C1167 + C378 * C1173) + C1576 * C1168 -
            C6123 * C1175 - C6124 * C48390) *
               C48027 * C21889) *
              C48413 +
          (C1199 * C48027 * C21887 +
           (C6013 + C6012 - C6011 - C6014 + C6015 + C6016) * C48027 * C21888 +
           (C383 * C1173 + C384 * C1167 - C1577 * C1174 - C1578 * C1168 +
            (C113 * C1277 + C48293 * C1288) * C1175 +
            (C113 * C1289 + C48293 * C1295) * C48390) *
               C48027 * C21889) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48293 * C122) * C1267 +
           (C113 * C123 + C48293 * C136) * C1261 - C5219 * C1268 -
           C5220 * C1262 + C5221 * C1269 + C5222 * C1263 - C6119 * C1270 -
           C6120 * C1264 + C6121 * C1271 + C6122 * C1265) *
              C48027 * C21887 +
          (C5219 * C1267 + C5220 * C1261 - C5221 * C1268 - C5222 * C1262 +
           C6119 * C1269 + C6120 * C1263 - C6121 * C1270 - C6122 * C1264 +
           C22633 * C1271 + C22634 * C1265) *
              C48027 * C21888 +
          (C5221 * C1267 + C5222 * C1261 - C6119 * C1268 - C6120 * C1262 +
           C6121 * C1269 + C6122 * C1263 - C22633 * C1270 - C22634 * C1264 +
           (C113 * C22624 + C48293 * C22625) * C1271 +
           (C113 * C22626 + C48293 * C22627) * C1265) *
              C48027 * C21889) *
         C48044 * C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C47015 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48131 -
            (C26221 + C26222) * C47007 - (C26223 + C26224) * C48138 +
            (C26225 + C26226) * C47021 + (C26227 + C26228) * C3108) *
               C48027 * C16456 +
           ((C26222 + C26221) * C47015 + (C26224 + C26223) * C48131 -
            (C26226 + C26225) * C47007 - (C26228 + C26227) * C48138 +
            (C27086 + C27085) * C47021 + (C27088 + C27087) * C3108) *
               C48027 * C48408) *
              C48049 +
          (((C10986 + C10985) * C47007 -
            ((C10794 + C10793) * C48131 + (C10792 + C10791) * C47015) +
            (C10988 + C10987) * C48138 - (C10990 + C10989) * C47021 -
            (C10992 + C10991) * C3108) *
               C48027 * C16456 +
           ((C10989 + C10990) * C47007 -
            ((C10987 + C10988) * C48131 + (C10985 + C10986) * C47015) +
            (C10991 + C10992) * C48138 - (C12209 + C12210) * C47021 -
            (C12211 + C12212) * C3108) *
               C48027 * C48408) *
              C48057 +
          (((C10798 + C10797) * C47015 + (C10796 + C10795) * C48131 -
            (C10994 + C10993) * C47007 - (C10996 + C10995) * C48138 +
            (C10998 + C10997) * C47021 + (C11000 + C10999) * C3108) *
               C48027 * C16456 +
           ((C10993 + C10994) * C47015 + (C10995 + C10996) * C48131 -
            (C10997 + C10998) * C47007 - (C10999 + C11000) * C48138 +
            (C10756 * C1276 + C10754 * C1286 + C10757 * C1856 +
             C48410 * C1861) *
                C47021 +
            (C10756 * C1287 + C10754 * C1294 + C10757 * C1862 +
             C48410 * C1865) *
                C3108) *
               C48027 * C48408) *
              C3111) *
         C48090) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C47015 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48131 -
             (C26221 + C26222) * C47007 - (C26223 + C26224) * C48138 +
             (C26225 + C26226) * C47021 + (C26227 + C26228) * C3108) *
                C48027 * C16456 +
            ((C26222 + C26221) * C47015 + (C26224 + C26223) * C48131 -
             (C26226 + C26225) * C47007 - (C26228 + C26227) * C48138 +
             (C27086 + C27085) * C47021 + (C27088 + C27087) * C3108) *
                C48027 * C48408) *
               C2812 +
           (((C10986 + C10985) * C47007 -
             ((C10794 + C10793) * C48131 + (C10792 + C10791) * C47015) +
             (C10988 + C10987) * C48138 - (C10990 + C10989) * C47021 -
             (C10992 + C10991) * C3108) *
                C48027 * C16456 +
            ((C10989 + C10990) * C47007 -
             ((C10987 + C10988) * C48131 + (C10985 + C10986) * C47015) +
             (C10991 + C10992) * C48138 - (C12209 + C12210) * C47021 -
             (C12211 + C12212) * C3108) *
                C48027 * C48408) *
               C48054) *
              C48359 +
          ((((C26837 + C26838) * C47007 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C48131 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C47015) +
             (C26839 + C26840) * C48138 - (C27263 + C27264) * C47021 -
             (C27265 + C27266) * C3108) *
                C48027 * C16456 +
            ((C27264 + C27263) * C47007 -
             ((C26840 + C26839) * C48131 + (C26838 + C26837) * C47015) +
             (C27266 + C27265) * C48138 - (C27738 + C27737) * C47021 -
             (C27740 + C27739) * C3108) *
                C48027 * C48408) *
               C2812 +
           (((C11179 + C11180) * C47015 + (C11181 + C11182) * C48131 -
             (C11690 + C11689) * C47007 - (C11692 + C11691) * C48138 +
             (C12416 + C12415) * C47021 + (C12418 + C12417) * C3108) *
                C48027 * C16456 +
            ((C11689 + C11690) * C47015 + (C11691 + C11692) * C48131 -
             (C12415 + C12416) * C47007 - (C12417 + C12418) * C48138 +
             (C10756 * C1855 + C10754 * C1859 + C10757 * C6271 +
              C48410 * C6274) *
                 C47021 +
             (C10756 * C1860 + C10754 * C1864 + C10757 * C6275 +
              C48410 * C6277) *
                 C3108) *
                C48027 * C48408) *
               C48054) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C2814 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48436 -
            (C26221 + C26222) * C2815 - (C26223 + C26224) * C48432 +
            (C26225 + C26226) * C2816 + (C26227 + C26228) * C48422 -
            (C27085 + C27086) * C2817 - (C27087 + C27088) * C48400) *
               C48027 * C16456 +
           ((C26222 + C26221) * C2814 + (C26224 + C26223) * C48436 -
            (C26226 + C26225) * C2815 - (C26228 + C26227) * C48432 +
            (C27086 + C27085) * C2816 + (C27088 + C27087) * C48422 -
            (C27090 + C27089) * C2817 - (C27092 + C27091) * C48400) *
               C48027 * C48408) *
              C2812 +
          (((C10986 + C10985) * C2815 -
            ((C10794 + C10793) * C48436 + (C10792 + C10791) * C2814) +
            (C10988 + C10987) * C48432 - (C10990 + C10989) * C2816 -
            (C10992 + C10991) * C48422 + (C12210 + C12209) * C2817 +
            (C12212 + C12211) * C48400) *
               C48027 * C16456 +
           ((C10989 + C10990) * C2815 -
            ((C10987 + C10988) * C48436 + (C10985 + C10986) * C2814) +
            (C10991 + C10992) * C48432 - (C12209 + C12210) * C2816 -
            (C12211 + C12212) * C48422 +
            (C10756 * C1275 + C10754 * C1284 + C10757 * C6777 +
             C48410 * C6780) *
                C2817 +
            (C10756 * C1285 + C10754 * C1293 + C10757 * C6781 +
             C48410 * C6783) *
                C48400) *
               C48027 * C48408) *
              C48054) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C2686 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C2680 -
            (C26221 + C26222) * C2687 - (C26223 + C26224) * C48135) *
               C48027 * C16456 +
           ((C26222 + C26221) * C2686 + (C26224 + C26223) * C2680 -
            (C26226 + C26225) * C2687 - (C26228 + C26227) * C48135) *
               C48027 * C48408) *
              C48435 +
          (((C10986 + C10985) * C2687 -
            ((C10794 + C10793) * C2680 + (C10792 + C10791) * C2686) +
            (C10988 + C10987) * C48135) *
               C48027 * C16456 +
           ((C10989 + C10990) * C2687 -
            ((C10987 + C10988) * C2680 + (C10985 + C10986) * C2686) +
            (C10991 + C10992) * C48135) *
               C48027 * C48408) *
              C48428 +
          (((C10798 + C10797) * C2686 + (C10796 + C10795) * C2680 -
            (C10994 + C10993) * C2687 - (C10996 + C10995) * C48135) *
               C48027 * C16456 +
           ((C10993 + C10994) * C2686 + (C10995 + C10996) * C2680 -
            (C10997 + C10998) * C2687 - (C10999 + C11000) * C48135) *
               C48027 * C48408) *
              C48415 +
          (((C11334 + C11333) * C2687 -
            ((C10802 + C10801) * C2680 + (C10800 + C10799) * C2686) +
            (C11336 + C11335) * C48135) *
               C48027 * C16456 +
           ((C10756 * C312 + C10754 * C329 + C10757 * C1728 + C48410 * C1729) *
                C2687 -
            ((C11335 + C11336) * C2680 + (C11333 + C11334) * C2686) +
            (C10756 * C330 + C10754 * C342 + C10757 * C1730 + C48410 * C1731) *
                C48135) *
               C48027 * C48408) *
              C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C2686 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C2680 -
             (C26221 + C26222) * C2687 - (C26223 + C26224) * C48135) *
                C48027 * C16456 +
            ((C26222 + C26221) * C2686 + (C26224 + C26223) * C2680 -
             (C26226 + C26225) * C2687 - (C26228 + C26227) * C48135) *
                C48027 * C48408) *
               C2812 +
           (((C10986 + C10985) * C2687 -
             ((C10794 + C10793) * C2680 + (C10792 + C10791) * C2686) +
             (C10988 + C10987) * C48135) *
                C48027 * C16456 +
            ((C10989 + C10990) * C2687 -
             ((C10987 + C10988) * C2680 + (C10985 + C10986) * C2686) +
             (C10991 + C10992) * C48135) *
                C48027 * C48408) *
               C48054) *
              C48430 +
          ((((C26837 + C26838) * C2687 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C2680 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C2686) +
             (C26839 + C26840) * C48135) *
                C48027 * C16456 +
            ((C27264 + C27263) * C2687 -
             ((C26840 + C26839) * C2680 + (C26838 + C26837) * C2686) +
             (C27266 + C27265) * C48135) *
                C48027 * C48408) *
               C2812 +
           (((C11179 + C11180) * C2686 + (C11181 + C11182) * C2680 -
             (C11690 + C11689) * C2687 - (C11692 + C11691) * C48135) *
                C48027 * C16456 +
            ((C11689 + C11690) * C2686 + (C11691 + C11692) * C2680 -
             (C12415 + C12416) * C2687 - (C12417 + C12418) * C48135) *
                C48027 * C48408) *
               C48054) *
              C48419 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C2686 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C2680 -
             (C27267 + C27268) * C2687 - (C27269 + C27270) * C48135) *
                C48027 * C16456 +
            ((C27268 + C27267) * C2686 + (C27270 + C27269) * C2680 -
             (C27272 + C27271) * C2687 - (C27274 + C27273) * C48135) *
                C48027 * C48408) *
               C2812 +
           (((C13134 + C13133) * C2687 -
             ((C11190 + C11189) * C2680 + (C11188 + C11187) * C2686) +
             (C13136 + C13135) * C48135) *
                C48027 * C16456 +
            ((C10756 * C1412 + C10754 * C1427 + C10757 * C7639 +
              C48410 * C7642) *
                 C2687 -
             ((C13135 + C13136) * C2680 + (C13133 + C13134) * C2686) +
             (C10756 * C1428 + C10754 * C1439 + C10757 * C7643 +
              C48410 * C7645) *
                 C48135) *
                C48027 * C48408) *
               C48054) *
              C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C2686 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C2680 -
             (C26221 + C26222) * C2687 - (C26223 + C26224) * C48135) *
                C48027 * C16456 +
            ((C26222 + C26221) * C2686 + (C26224 + C26223) * C2680 -
             (C26226 + C26225) * C2687 - (C26228 + C26227) * C48135) *
                C48027 * C48408) *
               C48049 +
           (((C10986 + C10985) * C2687 -
             ((C10794 + C10793) * C2680 + (C10792 + C10791) * C2686) +
             (C10988 + C10987) * C48135) *
                C48027 * C16456 +
            ((C10989 + C10990) * C2687 -
             ((C10987 + C10988) * C2680 + (C10985 + C10986) * C2686) +
             (C10991 + C10992) * C48135) *
                C48027 * C48408) *
               C48057 +
           (((C10798 + C10797) * C2686 + (C10796 + C10795) * C2680 -
             (C10994 + C10993) * C2687 - (C10996 + C10995) * C48135) *
                C48027 * C16456 +
            ((C10993 + C10994) * C2686 + (C10995 + C10996) * C2680 -
             (C10997 + C10998) * C2687 - (C10999 + C11000) * C48135) *
                C48027 * C48408) *
               C3111) *
              C48359 +
          ((((C26837 + C26838) * C2687 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C2680 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C2686) +
             (C26839 + C26840) * C48135) *
                C48027 * C16456 +
            ((C27264 + C27263) * C2687 -
             ((C26840 + C26839) * C2680 + (C26838 + C26837) * C2686) +
             (C27266 + C27265) * C48135) *
                C48027 * C48408) *
               C48049 +
           (((C11179 + C11180) * C2686 + (C11181 + C11182) * C2680 -
             (C11690 + C11689) * C2687 - (C11692 + C11691) * C48135) *
                C48027 * C16456 +
            ((C11689 + C11690) * C2686 + (C11691 + C11692) * C2680 -
             (C12415 + C12416) * C2687 - (C12417 + C12418) * C48135) *
                C48027 * C48408) *
               C48057 +
           (((C11694 + C11693) * C2687 -
             ((C11186 + C11185) * C2680 + (C11184 + C11183) * C2686) +
             (C11696 + C11695) * C48135) *
                C48027 * C16456 +
            ((C10756 * C1408 + C10754 * C1419 + C10757 * C1414 +
              C48410 * C1431) *
                 C2687 -
             ((C11695 + C11696) * C2680 + (C11693 + C11694) * C2686) +
             (C10756 * C1420 + C10754 * C1435 + C10757 * C1432 +
              C48410 * C1441) *
                 C48135) *
                C48027 * C48408) *
               C3111) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C2686 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C2680 -
            (C26221 + C26222) * C2687 - (C26223 + C26224) * C48135) *
               C48027 * C16456 +
           ((C26222 + C26221) * C2686 + (C26224 + C26223) * C2680 -
            (C26226 + C26225) * C2687 - (C26228 + C26227) * C48135) *
               C48027 * C48408) *
              C48435 +
          (((C10986 + C10985) * C2687 -
            ((C10794 + C10793) * C2680 + (C10792 + C10791) * C2686) +
            (C10988 + C10987) * C48135) *
               C48027 * C16456 +
           ((C10989 + C10990) * C2687 -
            ((C10987 + C10988) * C2680 + (C10985 + C10986) * C2686) +
            (C10991 + C10992) * C48135) *
               C48027 * C48408) *
              C48428 +
          (((C10798 + C10797) * C2686 + (C10796 + C10795) * C2680 -
            (C10994 + C10993) * C2687 - (C10996 + C10995) * C48135) *
               C48027 * C16456 +
           ((C10993 + C10994) * C2686 + (C10995 + C10996) * C2680 -
            (C10997 + C10998) * C2687 - (C10999 + C11000) * C48135) *
               C48027 * C48408) *
              C48415 +
          (((C11334 + C11333) * C2687 -
            ((C10802 + C10801) * C2680 + (C10800 + C10799) * C2686) +
            (C11336 + C11335) * C48135) *
               C48027 * C16456 +
           ((C10756 * C312 + C10754 * C329 + C10757 * C1728 + C48410 * C1729) *
                C2687 -
            ((C11335 + C11336) * C2680 + (C11333 + C11334) * C2686) +
            (C10756 * C330 + C10754 * C342 + C10757 * C1730 + C48410 * C1731) *
                C48135) *
               C48027 * C48408) *
              C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C2814 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48436 -
            (C26221 + C26222) * C2815 - (C26223 + C26224) * C48432 +
            (C26225 + C26226) * C2816 + (C26227 + C26228) * C48422 -
            (C27085 + C27086) * C2817 - (C27087 + C27088) * C48400) *
               C48027 * C16456 +
           ((C26222 + C26221) * C2814 + (C26224 + C26223) * C48436 -
            (C26226 + C26225) * C2815 - (C26228 + C26227) * C48432 +
            (C27086 + C27085) * C2816 + (C27088 + C27087) * C48422 -
            (C27090 + C27089) * C2817 - (C27092 + C27091) * C48400) *
               C48027 * C48408) *
              C2812 +
          (((C10986 + C10985) * C2815 -
            ((C10794 + C10793) * C48436 + (C10792 + C10791) * C2814) +
            (C10988 + C10987) * C48432 - (C10990 + C10989) * C2816 -
            (C10992 + C10991) * C48422 + (C12210 + C12209) * C2817 +
            (C12212 + C12211) * C48400) *
               C48027 * C16456 +
           ((C10989 + C10990) * C2815 -
            ((C10987 + C10988) * C48436 + (C10985 + C10986) * C2814) +
            (C10991 + C10992) * C48432 - (C12209 + C12210) * C2816 -
            (C12211 + C12212) * C48422 +
            (C10756 * C1275 + C10754 * C1284 + C10757 * C6777 +
             C48410 * C6780) *
                C2817 +
            (C10756 * C1285 + C10754 * C1293 + C10757 * C6781 +
             C48410 * C6783) *
                C48400) *
               C48027 * C48408) *
              C48054) *
         C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C47015 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48131 -
             (C26221 + C26222) * C47007 - (C26223 + C26224) * C48138 +
             (C26225 + C26226) * C47021 + (C26227 + C26228) * C3108) *
                C48027 * C16456 +
            ((C26222 + C26221) * C47015 + (C26224 + C26223) * C48131 -
             (C26226 + C26225) * C47007 - (C26228 + C26227) * C48138 +
             (C27086 + C27085) * C47021 + (C27088 + C27087) * C3108) *
                C48027 * C48408) *
               C48344 +
           (((C10986 + C10985) * C47007 -
             ((C10794 + C10793) * C48131 + (C10792 + C10791) * C47015) +
             (C10988 + C10987) * C48138 - (C10990 + C10989) * C47021 -
             (C10992 + C10991) * C3108) *
                C48027 * C16456 +
            ((C10989 + C10990) * C47007 -
             ((C10987 + C10988) * C48131 + (C10985 + C10986) * C47015) +
             (C10991 + C10992) * C48138 - (C12209 + C12210) * C47021 -
             (C12211 + C12212) * C3108) *
                C48027 * C48408) *
               C48054) *
              C3547 +
          ((((C26837 + C26838) * C47007 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C48131 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C47015) +
             (C26839 + C26840) * C48138 - (C27263 + C27264) * C47021 -
             (C27265 + C27266) * C3108) *
                C48027 * C16456 +
            ((C27264 + C27263) * C47007 -
             ((C26840 + C26839) * C48131 + (C26838 + C26837) * C47015) +
             (C27266 + C27265) * C48138 - (C27738 + C27737) * C47021 -
             (C27740 + C27739) * C3108) *
                C48027 * C48408) *
               C48344 +
           (((C11179 + C11180) * C47015 + (C11181 + C11182) * C48131 -
             (C11690 + C11689) * C47007 - (C11692 + C11691) * C48138 +
             (C12416 + C12415) * C47021 + (C12418 + C12417) * C3108) *
                C48027 * C16456 +
            ((C11689 + C11690) * C47015 + (C11691 + C11692) * C48131 -
             (C12415 + C12416) * C47007 - (C12417 + C12418) * C48138 +
             (C10756 * C1855 + C10754 * C1859 + C10757 * C6271 +
              C48410 * C6274) *
                 C47021 +
             (C10756 * C1860 + C10754 * C1864 + C10757 * C6275 +
              C48410 * C6277) *
                 C3108) *
                C48027 * C48408) *
               C48054) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C47015 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48131 -
            (C26221 + C26222) * C47007 - (C26223 + C26224) * C48138 +
            (C26225 + C26226) * C47021 + (C26227 + C26228) * C3108) *
               C48027 * C16456 +
           ((C26222 + C26221) * C47015 + (C26224 + C26223) * C48131 -
            (C26226 + C26225) * C47007 - (C26228 + C26227) * C48138 +
            (C27086 + C27085) * C47021 + (C27088 + C27087) * C3108) *
               C48027 * C48408) *
              C48044 * C48173 +
          (((C26837 + C26838) * C47007 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48131 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C47015) +
            (C26839 + C26840) * C48138 - (C27263 + C27264) * C47021 -
            (C27265 + C27266) * C3108) *
               C48027 * C16456 +
           ((C27264 + C27263) * C47007 -
            ((C26840 + C26839) * C48131 + (C26838 + C26837) * C47015) +
            (C27266 + C27265) * C48138 - (C27738 + C27737) * C47021 -
            (C27740 + C27739) * C3108) *
               C48027 * C48408) *
              C48044 * C48180 +
          (((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                C47015 +
            (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                C48131 -
            (C27267 + C27268) * C47007 - (C27269 + C27270) * C48138 +
            (C27271 + C27272) * C47021 + (C27273 + C27274) * C3108) *
               C48027 * C16456 +
           ((C27268 + C27267) * C47015 + (C27270 + C27269) * C48131 -
            (C27272 + C27271) * C47007 - (C27274 + C27273) * C48138 +
            (C10756 * C6270 + C10754 * C6272 + C10757 * C23734 +
             C48410 * C23735) *
                C47021 +
            (C10756 * C6273 + C10754 * C6276 + C10757 * C23736 +
             C48410 * C23737) *
                C3108) *
               C48027 * C48408) *
              C48044 * C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C2814 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48436 -
            (C26221 + C26222) * C2815 - (C26223 + C26224) * C48432 +
            (C26225 + C26226) * C2816 + (C26227 + C26228) * C48422 -
            (C27085 + C27086) * C2817 - (C27087 + C27088) * C48400) *
               C48027 * C16456 +
           ((C26222 + C26221) * C2814 + (C26224 + C26223) * C48436 -
            (C26226 + C26225) * C2815 - (C26228 + C26227) * C48432 +
            (C27086 + C27085) * C2816 + (C27088 + C27087) * C48422 -
            (C27090 + C27089) * C2817 - (C27092 + C27091) * C48400) *
               C48027 * C48408) *
              C48044 * C3547 +
          (((C26837 + C26838) * C2815 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48436 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C2814) +
            (C26839 + C26840) * C48432 - (C27263 + C27264) * C2816 -
            (C27265 + C27266) * C48422 + (C27737 + C27738) * C2817 +
            (C27739 + C27740) * C48400) *
               C48027 * C16456 +
           ((C27264 + C27263) * C2815 -
            ((C26840 + C26839) * C48436 + (C26838 + C26837) * C2814) +
            (C27266 + C27265) * C48432 - (C27738 + C27737) * C2816 -
            (C27740 + C27739) * C48422 +
            (C10756 * C6776 + C10754 * C6778 + C10757 * C22744 +
             C48410 * C22745) *
                C2817 +
            (C10756 * C6779 + C10754 * C6782 + C10757 * C22746 +
             C48410 * C22747) *
                C48400) *
               C48027 * C48408) *
              C48044 * C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C2686 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C2680 -
             (C26221 + C26222) * C2687 - (C26223 + C26224) * C48135) *
                C48027 * C16456 +
            ((C26222 + C26221) * C2686 + (C26224 + C26223) * C2680 -
             (C26226 + C26225) * C2687 - (C26228 + C26227) * C48135) *
                C48027 * C48408) *
               C48426 +
           (((C10986 + C10985) * C2687 -
             ((C10794 + C10793) * C2680 + (C10792 + C10791) * C2686) +
             (C10988 + C10987) * C48135) *
                C48027 * C16456 +
            ((C10989 + C10990) * C2687 -
             ((C10987 + C10988) * C2680 + (C10985 + C10986) * C2686) +
             (C10991 + C10992) * C48135) *
                C48027 * C48408) *
               C48413 +
           (((C10798 + C10797) * C2686 + (C10796 + C10795) * C2680 -
             (C10994 + C10993) * C2687 - (C10996 + C10995) * C48135) *
                C48027 * C16456 +
            ((C10993 + C10994) * C2686 + (C10995 + C10996) * C2680 -
             (C10997 + C10998) * C2687 - (C10999 + C11000) * C48135) *
                C48027 * C48408) *
               C48384) *
              C3547 +
          ((((C26837 + C26838) * C2687 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C2680 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C2686) +
             (C26839 + C26840) * C48135) *
                C48027 * C16456 +
            ((C27264 + C27263) * C2687 -
             ((C26840 + C26839) * C2680 + (C26838 + C26837) * C2686) +
             (C27266 + C27265) * C48135) *
                C48027 * C48408) *
               C48426 +
           (((C11179 + C11180) * C2686 + (C11181 + C11182) * C2680 -
             (C11690 + C11689) * C2687 - (C11692 + C11691) * C48135) *
                C48027 * C16456 +
            ((C11689 + C11690) * C2686 + (C11691 + C11692) * C2680 -
             (C12415 + C12416) * C2687 - (C12417 + C12418) * C48135) *
                C48027 * C48408) *
               C48413 +
           (((C11694 + C11693) * C2687 -
             ((C11186 + C11185) * C2680 + (C11184 + C11183) * C2686) +
             (C11696 + C11695) * C48135) *
                C48027 * C16456 +
            ((C10756 * C1408 + C10754 * C1419 + C10757 * C1414 +
              C48410 * C1431) *
                 C2687 -
             ((C11695 + C11696) * C2680 + (C11693 + C11694) * C2686) +
             (C10756 * C1420 + C10754 * C1435 + C10757 * C1432 +
              C48410 * C1441) *
                 C48135) *
                C48027 * C48408) *
               C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C2686 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C2680 -
            (C26221 + C26222) * C2687 - (C26223 + C26224) * C48135) *
               C48027 * C16456 +
           ((C26222 + C26221) * C2686 + (C26224 + C26223) * C2680 -
            (C26226 + C26225) * C2687 - (C26228 + C26227) * C48135) *
               C48027 * C48408) *
              C48044 * C48437 +
          (((C26837 + C26838) * C2687 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C2680 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C2686) +
            (C26839 + C26840) * C48135) *
               C48027 * C16456 +
           ((C27264 + C27263) * C2687 -
            ((C26840 + C26839) * C2680 + (C26838 + C26837) * C2686) +
            (C27266 + C27265) * C48135) *
               C48027 * C48408) *
              C48044 * C48434 +
          (((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                C2686 +
            (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                C2680 -
            (C27267 + C27268) * C2687 - (C27269 + C27270) * C48135) *
               C48027 * C16456 +
           ((C27268 + C27267) * C2686 + (C27270 + C27269) * C2680 -
            (C27272 + C27271) * C2687 - (C27274 + C27273) * C48135) *
               C48027 * C48408) *
              C48044 * C48425 +
          (((C28581 + C28582) * C2687 -
            ((C10757 * C2169 + C48410 * C2177 + C10756 * C2166 +
              C10754 * C2176) *
                 C2680 +
             (C10757 * C2159 + C48410 * C2168 + C10756 * C2158 +
              C10754 * C2167) *
                 C2686) +
            (C28583 + C28584) * C48135) *
               C48027 * C16456 +
           ((C10756 * C7638 + C10754 * C7640 + C10757 * C23388 +
             C48410 * C23389) *
                C2687 -
            ((C28584 + C28583) * C2680 + (C28582 + C28581) * C2686) +
            (C10756 * C7641 + C10754 * C7644 + C10757 * C23390 +
             C48410 * C23391) *
                C48135) *
               C48027 * C48408) *
              C48044 * C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C2686 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C2680 -
             (C26221 + C26222) * C2687 - (C26223 + C26224) * C48135) *
                C48027 * C16456 +
            ((C26222 + C26221) * C2686 + (C26224 + C26223) * C2680 -
             (C26226 + C26225) * C2687 - (C26228 + C26227) * C48135) *
                C48027 * C48408) *
               C48344 +
           (((C10986 + C10985) * C2687 -
             ((C10794 + C10793) * C2680 + (C10792 + C10791) * C2686) +
             (C10988 + C10987) * C48135) *
                C48027 * C16456 +
            ((C10989 + C10990) * C2687 -
             ((C10987 + C10988) * C2680 + (C10985 + C10986) * C2686) +
             (C10991 + C10992) * C48135) *
                C48027 * C48408) *
               C48054) *
              C48173 +
          ((((C26837 + C26838) * C2687 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C2680 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C2686) +
             (C26839 + C26840) * C48135) *
                C48027 * C16456 +
            ((C27264 + C27263) * C2687 -
             ((C26840 + C26839) * C2680 + (C26838 + C26837) * C2686) +
             (C27266 + C27265) * C48135) *
                C48027 * C48408) *
               C48344 +
           (((C11179 + C11180) * C2686 + (C11181 + C11182) * C2680 -
             (C11690 + C11689) * C2687 - (C11692 + C11691) * C48135) *
                C48027 * C16456 +
            ((C11689 + C11690) * C2686 + (C11691 + C11692) * C2680 -
             (C12415 + C12416) * C2687 - (C12417 + C12418) * C48135) *
                C48027 * C48408) *
               C48054) *
              C48180 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C2686 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C2680 -
             (C27267 + C27268) * C2687 - (C27269 + C27270) * C48135) *
                C48027 * C16456 +
            ((C27268 + C27267) * C2686 + (C27270 + C27269) * C2680 -
             (C27272 + C27271) * C2687 - (C27274 + C27273) * C48135) *
                C48027 * C48408) *
               C48344 +
           (((C13134 + C13133) * C2687 -
             ((C11190 + C11189) * C2680 + (C11188 + C11187) * C2686) +
             (C13136 + C13135) * C48135) *
                C48027 * C16456 +
            ((C10756 * C1412 + C10754 * C1427 + C10757 * C7639 +
              C48410 * C7642) *
                 C2687 -
             ((C13135 + C13136) * C2680 + (C13133 + C13134) * C2686) +
             (C10756 * C1428 + C10754 * C1439 + C10757 * C7643 +
              C48410 * C7645) *
                 C48135) *
                C48027 * C48408) *
               C48054) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C2686 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C2680 -
             (C26221 + C26222) * C2687 - (C26223 + C26224) * C48135) *
                C48027 * C16456 +
            ((C26222 + C26221) * C2686 + (C26224 + C26223) * C2680 -
             (C26226 + C26225) * C2687 - (C26228 + C26227) * C48135) *
                C48027 * C48408) *
               C48426 +
           (((C10986 + C10985) * C2687 -
             ((C10794 + C10793) * C2680 + (C10792 + C10791) * C2686) +
             (C10988 + C10987) * C48135) *
                C48027 * C16456 +
            ((C10989 + C10990) * C2687 -
             ((C10987 + C10988) * C2680 + (C10985 + C10986) * C2686) +
             (C10991 + C10992) * C48135) *
                C48027 * C48408) *
               C48413 +
           (((C10798 + C10797) * C2686 + (C10796 + C10795) * C2680 -
             (C10994 + C10993) * C2687 - (C10996 + C10995) * C48135) *
                C48027 * C16456 +
            ((C10993 + C10994) * C2686 + (C10995 + C10996) * C2680 -
             (C10997 + C10998) * C2687 - (C10999 + C11000) * C48135) *
                C48027 * C48408) *
               C48384) *
              C3547 +
          ((((C26837 + C26838) * C2687 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C2680 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C2686) +
             (C26839 + C26840) * C48135) *
                C48027 * C16456 +
            ((C27264 + C27263) * C2687 -
             ((C26840 + C26839) * C2680 + (C26838 + C26837) * C2686) +
             (C27266 + C27265) * C48135) *
                C48027 * C48408) *
               C48426 +
           (((C11179 + C11180) * C2686 + (C11181 + C11182) * C2680 -
             (C11690 + C11689) * C2687 - (C11692 + C11691) * C48135) *
                C48027 * C16456 +
            ((C11689 + C11690) * C2686 + (C11691 + C11692) * C2680 -
             (C12415 + C12416) * C2687 - (C12417 + C12418) * C48135) *
                C48027 * C48408) *
               C48413 +
           (((C11694 + C11693) * C2687 -
             ((C11186 + C11185) * C2680 + (C11184 + C11183) * C2686) +
             (C11696 + C11695) * C48135) *
                C48027 * C16456 +
            ((C10756 * C1408 + C10754 * C1419 + C10757 * C1414 +
              C48410 * C1431) *
                 C2687 -
             ((C11695 + C11696) * C2680 + (C11693 + C11694) * C2686) +
             (C10756 * C1420 + C10754 * C1435 + C10757 * C1432 +
              C48410 * C1441) *
                 C48135) *
                C48027 * C48408) *
               C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C2814 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48436 -
            (C26221 + C26222) * C2815 - (C26223 + C26224) * C48432 +
            (C26225 + C26226) * C2816 + (C26227 + C26228) * C48422 -
            (C27085 + C27086) * C2817 - (C27087 + C27088) * C48400) *
               C48027 * C16456 +
           ((C26222 + C26221) * C2814 + (C26224 + C26223) * C48436 -
            (C26226 + C26225) * C2815 - (C26228 + C26227) * C48432 +
            (C27086 + C27085) * C2816 + (C27088 + C27087) * C48422 -
            (C27090 + C27089) * C2817 - (C27092 + C27091) * C48400) *
               C48027 * C48408) *
              C48044 * C3547 +
          (((C26837 + C26838) * C2815 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48436 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C2814) +
            (C26839 + C26840) * C48432 - (C27263 + C27264) * C2816 -
            (C27265 + C27266) * C48422 + (C27737 + C27738) * C2817 +
            (C27739 + C27740) * C48400) *
               C48027 * C16456 +
           ((C27264 + C27263) * C2815 -
            ((C26840 + C26839) * C48436 + (C26838 + C26837) * C2814) +
            (C27266 + C27265) * C48432 - (C27738 + C27737) * C2816 -
            (C27740 + C27739) * C48422 +
            (C10756 * C6776 + C10754 * C6778 + C10757 * C22744 +
             C48410 * C22745) *
                C2817 +
            (C10756 * C6779 + C10754 * C6782 + C10757 * C22746 +
             C48410 * C22747) *
                C48400) *
               C48027 * C48408) *
              C48044 * C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C1546 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C1540 -
            (C26221 + C26222) * C1547 - (C26223 + C26224) * C1541 +
            (C26225 + C26226) * C1548 + (C26227 + C26228) * C1542 -
            (C27085 + C27086) * C1549 - (C27087 + C27088) * C48400) *
               C48027 * C16456 +
           ((C26222 + C26221) * C1546 + (C26224 + C26223) * C1540 -
            (C26226 + C26225) * C1547 - (C26228 + C26227) * C1541 +
            (C27086 + C27085) * C1548 + (C27088 + C27087) * C1542 -
            (C27090 + C27089) * C1549 - (C27092 + C27091) * C48400) *
               C48027 * C48408) *
              C48344 +
          (((C10986 + C10985) * C1547 -
            ((C10794 + C10793) * C1540 + (C10792 + C10791) * C1546) +
            (C10988 + C10987) * C1541 - (C10990 + C10989) * C1548 -
            (C10992 + C10991) * C1542 + (C12210 + C12209) * C1549 +
            (C12212 + C12211) * C48400) *
               C48027 * C16456 +
           ((C10989 + C10990) * C1547 -
            ((C10987 + C10988) * C1540 + (C10985 + C10986) * C1546) +
            (C10991 + C10992) * C1541 - (C12209 + C12210) * C1548 -
            (C12211 + C12212) * C1542 +
            (C10756 * C1275 + C10754 * C1284 + C10757 * C6777 +
             C48410 * C6780) *
                C1549 +
            (C10756 * C1285 + C10754 * C1293 + C10757 * C6781 +
             C48410 * C6783) *
                C48400) *
               C48027 * C48408) *
              C48054) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C711 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48358 -
            (C26221 + C26222) * C712 - (C26223 + C26224) * C48135) *
               C48027 * C16456 +
           ((C26222 + C26221) * C711 + (C26224 + C26223) * C48358 -
            (C26226 + C26225) * C712 - (C26228 + C26227) * C48135) *
               C48027 * C48408) *
              C707 +
          (((C10986 + C10985) * C712 -
            ((C10794 + C10793) * C48358 + (C10792 + C10791) * C711) +
            (C10988 + C10987) * C48135) *
               C48027 * C16456 +
           ((C10989 + C10990) * C712 -
            ((C10987 + C10988) * C48358 + (C10985 + C10986) * C711) +
            (C10991 + C10992) * C48135) *
               C48027 * C48408) *
              C708 +
          (((C10798 + C10797) * C711 + (C10796 + C10795) * C48358 -
            (C10994 + C10993) * C712 - (C10996 + C10995) * C48135) *
               C48027 * C16456 +
           ((C10993 + C10994) * C711 + (C10995 + C10996) * C48358 -
            (C10997 + C10998) * C712 - (C10999 + C11000) * C48135) *
               C48027 * C48408) *
              C709 +
          (((C11334 + C11333) * C712 -
            ((C10802 + C10801) * C48358 + (C10800 + C10799) * C711) +
            (C11336 + C11335) * C48135) *
               C48027 * C16456 +
           ((C10756 * C312 + C10754 * C329 + C10757 * C1728 + C48410 * C1729) *
                C712 -
            ((C11335 + C11336) * C48358 + (C11333 + C11334) * C711) +
            (C10756 * C330 + C10754 * C342 + C10757 * C1730 + C48410 * C1731) *
                C48135) *
               C48027 * C48408) *
              C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C711 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48358 -
             (C26221 + C26222) * C712 - (C26223 + C26224) * C48135) *
                C48027 * C16456 +
            ((C26222 + C26221) * C711 + (C26224 + C26223) * C48358 -
             (C26226 + C26225) * C712 - (C26228 + C26227) * C48135) *
                C48027 * C48408) *
               C48344 +
           (((C10986 + C10985) * C712 -
             ((C10794 + C10793) * C48358 + (C10792 + C10791) * C711) +
             (C10988 + C10987) * C48135) *
                C48027 * C16456 +
            ((C10989 + C10990) * C712 -
             ((C10987 + C10988) * C48358 + (C10985 + C10986) * C711) +
             (C10991 + C10992) * C48135) *
                C48027 * C48408) *
               C48054) *
              C1976 +
          ((((C26837 + C26838) * C712 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C48358 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C711) +
             (C26839 + C26840) * C48135) *
                C48027 * C16456 +
            ((C27264 + C27263) * C712 -
             ((C26840 + C26839) * C48358 + (C26838 + C26837) * C711) +
             (C27266 + C27265) * C48135) *
                C48027 * C48408) *
               C48344 +
           (((C11179 + C11180) * C711 + (C11181 + C11182) * C48358 -
             (C11690 + C11689) * C712 - (C11692 + C11691) * C48135) *
                C48027 * C16456 +
            ((C11689 + C11690) * C711 + (C11691 + C11692) * C48358 -
             (C12415 + C12416) * C712 - (C12417 + C12418) * C48135) *
                C48027 * C48408) *
               C48054) *
              C1977 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C711 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C48358 -
             (C27267 + C27268) * C712 - (C27269 + C27270) * C48135) *
                C48027 * C16456 +
            ((C27268 + C27267) * C711 + (C27270 + C27269) * C48358 -
             (C27272 + C27271) * C712 - (C27274 + C27273) * C48135) *
                C48027 * C48408) *
               C48344 +
           (((C13134 + C13133) * C712 -
             ((C11190 + C11189) * C48358 + (C11188 + C11187) * C711) +
             (C13136 + C13135) * C48135) *
                C48027 * C16456 +
            ((C10756 * C1412 + C10754 * C1427 + C10757 * C7639 +
              C48410 * C7642) *
                 C712 -
             ((C13135 + C13136) * C48358 + (C13133 + C13134) * C711) +
             (C10756 * C1428 + C10754 * C1439 + C10757 * C7643 +
              C48410 * C7645) *
                 C48135) *
                C48027 * C48408) *
               C48054) *
              C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C1546 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C1540 -
            (C26221 + C26222) * C1547 - (C26223 + C26224) * C1541 +
            (C26225 + C26226) * C1548 + (C26227 + C26228) * C1542 -
            (C27085 + C27086) * C1549 - (C27087 + C27088) * C48400) *
               C48027 * C16456 +
           ((C26222 + C26221) * C1546 + (C26224 + C26223) * C1540 -
            (C26226 + C26225) * C1547 - (C26228 + C26227) * C1541 +
            (C27086 + C27085) * C1548 + (C27088 + C27087) * C1542 -
            (C27090 + C27089) * C1549 - (C27092 + C27091) * C48400) *
               C48027 * C48408) *
              C48044 * C48359 +
          (((C26837 + C26838) * C1547 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C1540 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C1546) +
            (C26839 + C26840) * C1541 - (C27263 + C27264) * C1548 -
            (C27265 + C27266) * C1542 + (C27737 + C27738) * C1549 +
            (C27739 + C27740) * C48400) *
               C48027 * C16456 +
           ((C27264 + C27263) * C1547 -
            ((C26840 + C26839) * C1540 + (C26838 + C26837) * C1546) +
            (C27266 + C27265) * C1541 - (C27738 + C27737) * C1548 -
            (C27740 + C27739) * C1542 +
            (C10756 * C6776 + C10754 * C6778 + C10757 * C22744 +
             C48410 * C22745) *
                C1549 +
            (C10756 * C6779 + C10754 * C6782 + C10757 * C22746 +
             C48410 * C22747) *
                C48400) *
               C48027 * C48408) *
              C48044 * C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C711 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48358 -
             (C26221 + C26222) * C712 - (C26223 + C26224) * C48135) *
                C48027 * C16456 +
            ((C26222 + C26221) * C711 + (C26224 + C26223) * C48358 -
             (C26226 + C26225) * C712 - (C26228 + C26227) * C48135) *
                C48027 * C48408) *
               C299 +
           (((C10986 + C10985) * C712 -
             ((C10794 + C10793) * C48358 + (C10792 + C10791) * C711) +
             (C10988 + C10987) * C48135) *
                C48027 * C16456 +
            ((C10989 + C10990) * C712 -
             ((C10987 + C10988) * C48358 + (C10985 + C10986) * C711) +
             (C10991 + C10992) * C48135) *
                C48027 * C48408) *
               C300 +
           (((C10798 + C10797) * C711 + (C10796 + C10795) * C48358 -
             (C10994 + C10993) * C712 - (C10996 + C10995) * C48135) *
                C48027 * C16456 +
            ((C10993 + C10994) * C711 + (C10995 + C10996) * C48358 -
             (C10997 + C10998) * C712 - (C10999 + C11000) * C48135) *
                C48027 * C48408) *
               C48384) *
              C48359 +
          ((((C26837 + C26838) * C712 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C48358 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C711) +
             (C26839 + C26840) * C48135) *
                C48027 * C16456 +
            ((C10756 * C1406 + C10754 * C1415 + C10757 * C1410 +
              C48410 * C1423) *
                 C712 -
             ((C26840 + C26839) * C48358 + (C26838 + C26837) * C711) +
             (C10756 * C1416 + C10754 * C1433 + C10757 * C1424 +
              C48410 * C1437) *
                 C48135) *
                C48027 * C48408) *
               C299 +
           (((C11179 + C11180) * C711 + (C11181 + C11182) * C48358 -
             (C11690 + C11689) * C712 - (C11692 + C11691) * C48135) *
                C48027 * C16456 +
            ((C11689 + C11690) * C711 + (C11691 + C11692) * C48358 -
             (C12415 + C12416) * C712 - (C12417 + C12418) * C48135) *
                C48027 * C48408) *
               C300 +
           (((C11694 + C11693) * C712 -
             ((C11186 + C11185) * C48358 + (C11184 + C11183) * C711) +
             (C11696 + C11695) * C48135) *
                C48027 * C16456 +
            ((C10756 * C1408 + C10754 * C1419 + C10757 * C1414 +
              C48410 * C1431) *
                 C712 -
             ((C11695 + C11696) * C48358 + (C11693 + C11694) * C711) +
             (C10756 * C1420 + C10754 * C1435 + C10757 * C1432 +
              C48410 * C1441) *
                 C48135) *
                C48027 * C48408) *
               C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C711 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48358 -
            (C26221 + C26222) * C712 - (C26223 + C26224) * C48135) *
               C48027 * C16456 +
           ((C26222 + C26221) * C711 + (C26224 + C26223) * C48358 -
            (C26226 + C26225) * C712 - (C26228 + C26227) * C48135) *
               C48027 * C48408) *
              C48044 * C2448 +
          (((C26837 + C26838) * C712 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48358 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C711) +
            (C26839 + C26840) * C48135) *
               C48027 * C16456 +
           ((C27264 + C27263) * C712 -
            ((C26840 + C26839) * C48358 + (C26838 + C26837) * C711) +
            (C27266 + C27265) * C48135) *
               C48027 * C48408) *
              C48044 * C2449 +
          (((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                C711 +
            (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                C48358 -
            (C27267 + C27268) * C712 - (C27269 + C27270) * C48135) *
               C48027 * C16456 +
           ((C27268 + C27267) * C711 + (C27270 + C27269) * C48358 -
            (C27272 + C27271) * C712 - (C27274 + C27273) * C48135) *
               C48027 * C48408) *
              C48044 * C2450 +
          (((C28581 + C28582) * C712 -
            ((C10757 * C2169 + C48410 * C2177 + C10756 * C2166 +
              C10754 * C2176) *
                 C48358 +
             (C10757 * C2159 + C48410 * C2168 + C10756 * C2158 +
              C10754 * C2167) *
                 C711) +
            (C28583 + C28584) * C48135) *
               C48027 * C16456 +
           ((C10756 * C7638 + C10754 * C7640 + C10757 * C23388 +
             C48410 * C23389) *
                C712 -
            ((C28584 + C28583) * C48358 + (C28582 + C28581) * C711) +
            (C10756 * C7641 + C10754 * C7644 + C10757 * C23390 +
             C48410 * C23391) *
                C48135) *
               C48027 * C48408) *
              C48044 * C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C10756 * C115 + C10754 * C122 + C10757 * C520 +
                 C48410 * C534) *
                    C114 +
                (C10756 * C123 + C10754 * C136 + C10757 * C533 +
                 C48410 * C550) *
                    C48072) *
                   C48027 * C16456 +
               ((C10756 * C305 + C10754 * C315 + C10757 * C1004 +
                 C48410 * C1009) *
                    C114 +
                (C10756 * C316 + C10754 * C335 + C10757 * C1010 +
                 C48410 * C1019) *
                    C48072) *
                   C48027 * C48408) *
                  C107 -
              (((C10987 + C10988) * C48072 + (C10985 + C10986) * C114) *
                   C48027 * C48408 +
               ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) *
                   C48027 * C16456) *
                  C108 +
              (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) *
                   C48027 * C16456 +
               ((C10993 + C10994) * C114 + (C10995 + C10996) * C48072) *
                   C48027 * C48408) *
                  C109 -
              (((C11335 + C11336) * C48072 + (C11333 + C11334) * C114) *
                   C48027 * C48408 +
               ((C10802 + C10801) * C48072 + (C10800 + C10799) * C114) *
                   C48027 * C16456) *
                  C110 +
              (((C10806 + C10805) * C114 + (C10804 + C10803) * C48072) *
                   C48027 * C16456 +
               ((C10756 * C313 + C10754 * C331 + C10757 * C1008 +
                 C48410 * C1017) *
                    C114 +
                (C10756 * C332 + C10754 * C343 + C10757 * C1018 +
                 C48410 * C1023) *
                    C48072) *
                   C48027 * C48408) *
                  C111) *
             C48090 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C10756 * C115 + C10754 * C122 + C10757 * C520 +
                 C48410 * C534) *
                    C302 +
                (C10756 * C123 + C10754 * C136 + C10757 * C533 +
                 C48410 * C550) *
                    C48429 -
                (C26221 + C26222) * C303 - (C26223 + C26224) * C48417 +
                (C26225 + C26226) * C304 + (C26227 + C26228) * C48390) *
                   C48027 * C16456 +
               ((C26222 + C26221) * C302 + (C26224 + C26223) * C48429 -
                (C26226 + C26225) * C303 - (C26228 + C26227) * C48417 +
                (C10756 * C1272 + C10754 * C1278 + C10757 * C1854 +
                 C48410 * C1857) *
                    C304 +
                (C10756 * C1279 + C10754 * C1290 + C10757 * C1858 +
                 C48410 * C1863) *
                    C48390) *
                   C48027 * C48408) *
                  C299 +
              (((C10986 + C10985) * C303 -
                ((C10794 + C10793) * C48429 + (C10792 + C10791) * C302) +
                (C10988 + C10987) * C48417 - (C10990 + C10989) * C304 -
                (C10992 + C10991) * C48390) *
                   C48027 * C16456 +
               ((C10989 + C10990) * C303 -
                ((C10987 + C10988) * C48429 + (C10985 + C10986) * C302) +
                (C10991 + C10992) * C48417 - (C12209 + C12210) * C304 -
                (C12211 + C12212) * C48390) *
                   C48027 * C48408) *
                  C300 +
              (((C10798 + C10797) * C302 + (C10796 + C10795) * C48429 -
                (C10994 + C10993) * C303 - (C10996 + C10995) * C48417 +
                (C10998 + C10997) * C304 + (C11000 + C10999) * C48390) *
                   C48027 * C16456 +
               ((C10993 + C10994) * C302 + (C10995 + C10996) * C48429 -
                (C10997 + C10998) * C303 - (C10999 + C11000) * C48417 +
                (C10756 * C1276 + C10754 * C1286 + C10757 * C1856 +
                 C48410 * C1861) *
                    C304 +
                (C10756 * C1287 + C10754 * C1294 + C10757 * C1862 +
                 C48410 * C1865) *
                    C48390) *
                   C48027 * C48408) *
                  C48384) *
             C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C16456 +
            ((C26222 + C26221) * C114 + (C26224 + C26223) * C48072) * C48027 *
                C48408) *
               C299 -
           (((C10987 + C10988) * C48072 + (C10985 + C10986) * C114) * C48027 *
                C48408 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C48027 *
                C16456) *
               C300 +
           (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C48027 *
                C16456 +
            ((C10993 + C10994) * C114 + (C10995 + C10996) * C48072) * C48027 *
                C48408) *
               C48384) *
              C48430 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C48027 *
                C16456 +
            ((C11689 + C11690) * C114 + (C11691 + C11692) * C48072) * C48027 *
                C48408) *
               C300 -
           (((C10757 * C1422 + C48410 * C1436 + C10756 * C1010 +
              C10754 * C1019) *
                 C48072 +
             (C10757 * C1409 + C48410 * C1421 + C10756 * C1004 +
              C10754 * C1009) *
                 C114) *
                C48027 * C48408 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C48027 * C16456) *
               C299 -
           (((C11695 + C11696) * C48072 + (C11693 + C11694) * C114) * C48027 *
                C48408 +
            ((C11186 + C11185) * C48072 + (C11184 + C11183) * C114) * C48027 *
                C16456) *
               C48384) *
              C48419 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C114 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C48072) *
                C48027 * C16456 +
            ((C10756 * C1409 + C10754 * C1421 + C10757 * C2570 +
              C48410 * C2573) *
                 C114 +
             (C10756 * C1422 + C10754 * C1436 + C10757 * C2574 +
              C48410 * C2579) *
                 C48072) *
                C48027 * C48408) *
               C299 -
           (((C13135 + C13136) * C48072 + (C13133 + C13134) * C114) * C48027 *
                C48408 +
            ((C11190 + C11189) * C48072 + (C11188 + C11187) * C114) * C48027 *
                C16456) *
               C300 +
           (((C11194 + C11193) * C114 + (C11192 + C11191) * C48072) * C48027 *
                C16456 +
            ((C10756 * C1413 + C10754 * C1429 + C10757 * C2572 +
              C48410 * C2577) *
                 C114 +
             (C10756 * C1430 + C10754 * C1440 + C10757 * C2578 +
              C48410 * C2581) *
                 C48072) *
                C48027 * C48408) *
               C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C1173 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C1167 -
            (C26221 + C26222) * C1174 - (C26223 + C26224) * C1168 +
            (C26225 + C26226) * C1175 + (C26227 + C26228) * C48390) *
               C48027 * C16456 +
           ((C26222 + C26221) * C1173 + (C26224 + C26223) * C1167 -
            (C26226 + C26225) * C1174 - (C26228 + C26227) * C1168 +
            (C10756 * C1272 + C10754 * C1278 + C10757 * C1854 +
             C48410 * C1857) *
                C1175 +
            (C10756 * C1279 + C10754 * C1290 + C10757 * C1858 +
             C48410 * C1863) *
                C48390) *
               C48027 * C48408) *
              C48426 +
          (((C10986 + C10985) * C1174 -
            ((C10794 + C10793) * C1167 + (C10792 + C10791) * C1173) +
            (C10988 + C10987) * C1168 - (C10990 + C10989) * C1175 -
            (C10992 + C10991) * C48390) *
               C48027 * C16456 +
           ((C10989 + C10990) * C1174 -
            ((C10987 + C10988) * C1167 + (C10985 + C10986) * C1173) +
            (C10991 + C10992) * C1168 - (C12209 + C12210) * C1175 -
            (C12211 + C12212) * C48390) *
               C48027 * C48408) *
              C48413 +
          (((C10798 + C10797) * C1173 + (C10796 + C10795) * C1167 -
            (C10994 + C10993) * C1174 - (C10996 + C10995) * C1168 +
            (C10998 + C10997) * C1175 + (C11000 + C10999) * C48390) *
               C48027 * C16456 +
           ((C10993 + C10994) * C1173 + (C10995 + C10996) * C1167 -
            (C10997 + C10998) * C1174 - (C10999 + C11000) * C1168 +
            (C10756 * C1276 + C10754 * C1286 + C10757 * C1856 +
             C48410 * C1861) *
                C1175 +
            (C10756 * C1287 + C10754 * C1294 + C10757 * C1862 +
             C48410 * C1865) *
                C48390) *
               C48027 * C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
               C1267 +
           (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
               C1261 -
           (C26221 + C26222) * C1268 - (C26223 + C26224) * C1262 +
           (C26225 + C26226) * C1269 + (C26227 + C26228) * C1263 -
           (C27085 + C27086) * C1270 - (C27087 + C27088) * C1264 +
           (C27089 + C27090) * C1271 + (C27091 + C27092) * C1265) *
              C48027 * C16456 +
          ((C26222 + C26221) * C1267 + (C26224 + C26223) * C1261 -
           (C26226 + C26225) * C1268 - (C26228 + C26227) * C1262 +
           (C27086 + C27085) * C1269 + (C27088 + C27087) * C1263 -
           (C27090 + C27089) * C1270 - (C27092 + C27091) * C1264 +
           (C10756 * C6098 + C10754 * C6100 + C10757 * C23096 +
            C48410 * C23097) *
               C1271 +
           (C10756 * C6101 + C10754 * C6104 + C10757 * C23098 +
            C48410 * C23099) *
               C1265) *
              C48027 * C48408) *
         C48044 * C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C1173 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C1167 -
            (C26221 + C26222) * C1174 - (C26223 + C26224) * C1168 +
            (C26225 + C26226) * C1175 + (C26227 + C26228) * C48390) *
               C48027 * C16456 +
           ((C26222 + C26221) * C1173 + (C26224 + C26223) * C1167 -
            (C26226 + C26225) * C1174 - (C26228 + C26227) * C1168 +
            (C27086 + C27085) * C1175 + (C27088 + C27087) * C48390) *
               C48027 * C48408) *
              C48044 * C48430 +
          (((C26837 + C26838) * C1174 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C1167 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C1173) +
            (C26839 + C26840) * C1168 - (C27263 + C27264) * C1175 -
            (C27265 + C27266) * C48390) *
               C48027 * C16456 +
           ((C27264 + C27263) * C1174 -
            ((C26840 + C26839) * C1167 + (C26838 + C26837) * C1173) +
            (C27266 + C27265) * C1168 -
            (C10757 * C6270 + C48410 * C6272 + C10756 * C1854 +
             C10754 * C1857) *
                C1175 -
            (C10757 * C6273 + C48410 * C6276 + C10756 * C1858 +
             C10754 * C1863) *
                C48390) *
               C48027 * C48408) *
              C48044 * C48419 +
          (((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                C1173 +
            (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                C1167 -
            (C27267 + C27268) * C1174 - (C27269 + C27270) * C1168 +
            (C27271 + C27272) * C1175 + (C27273 + C27274) * C48390) *
               C48027 * C16456 +
           ((C27268 + C27267) * C1173 + (C27270 + C27269) * C1167 -
            (C27272 + C27271) * C1174 - (C27274 + C27273) * C1168 +
            (C10756 * C6270 + C10754 * C6272 + C10757 * C23734 +
             C48410 * C23735) *
                C1175 +
            (C10756 * C6273 + C10754 * C6276 + C10757 * C23736 +
             C48410 * C23737) *
                C48390) *
               C48027 * C48408) *
              C48044 * C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C16456 +
            ((C26222 + C26221) * C114 + (C26224 + C26223) * C48072) * C48027 *
                C48408) *
               C48426 -
           (((C10987 + C10988) * C48072 + (C10985 + C10986) * C114) * C48027 *
                C48408 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C48027 *
                C16456) *
               C48413 +
           (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C48027 *
                C16456 +
            ((C10993 + C10994) * C114 + (C10995 + C10996) * C48072) * C48027 *
                C48408) *
               C48384) *
              C1976 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C48027 *
                C16456 +
            ((C11689 + C11690) * C114 + (C11691 + C11692) * C48072) * C48027 *
                C48408) *
               C48413 -
           (((C26840 + C26839) * C48072 + (C26838 + C26837) * C114) * C48027 *
                C48408 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C48027 * C16456) *
               C48426 -
           (((C11695 + C11696) * C48072 + (C11693 + C11694) * C114) * C48027 *
                C48408 +
            ((C11186 + C11185) * C48072 + (C11184 + C11183) * C114) * C48027 *
                C16456) *
               C48384) *
              C1977 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C114 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C48072) *
                C48027 * C16456 +
            ((C27268 + C27267) * C114 + (C27270 + C27269) * C48072) * C48027 *
                C48408) *
               C48426 -
           (((C13135 + C13136) * C48072 + (C13133 + C13134) * C114) * C48027 *
                C48408 +
            ((C11190 + C11189) * C48072 + (C11188 + C11187) * C114) * C48027 *
                C16456) *
               C48413 +
           (((C11194 + C11193) * C114 + (C11192 + C11191) * C48072) * C48027 *
                C16456 +
            ((C10756 * C1413 + C10754 * C1429 + C10757 * C2572 +
              C48410 * C2577) *
                 C114 +
             (C10756 * C1430 + C10754 * C1440 + C10757 * C2578 +
              C48410 * C2581) *
                 C48072) *
                C48027 * C48408) *
               C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C302 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48429 -
            (C26221 + C26222) * C303 - (C26223 + C26224) * C48417 +
            (C26225 + C26226) * C304 + (C26227 + C26228) * C48390) *
               C48027 * C16456 +
           ((C26222 + C26221) * C302 + (C26224 + C26223) * C48429 -
            (C26226 + C26225) * C303 - (C26228 + C26227) * C48417 +
            (C27086 + C27085) * C304 + (C27088 + C27087) * C48390) *
               C48027 * C48408) *
              C48044 * C1976 +
          (((C26837 + C26838) * C303 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48429 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C302) +
            (C26839 + C26840) * C48417 - (C27263 + C27264) * C304 -
            (C27265 + C27266) * C48390) *
               C48027 * C16456 +
           ((C27264 + C27263) * C303 -
            ((C26840 + C26839) * C48429 + (C26838 + C26837) * C302) +
            (C27266 + C27265) * C48417 - (C27738 + C27737) * C304 -
            (C27740 + C27739) * C48390) *
               C48027 * C48408) *
              C48044 * C1977 +
          (((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                C302 +
            (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                C48429 -
            (C27267 + C27268) * C303 - (C27269 + C27270) * C48417 +
            (C27271 + C27272) * C304 + (C27273 + C27274) * C48390) *
               C48027 * C16456 +
           ((C27268 + C27267) * C302 + (C27270 + C27269) * C48429 -
            (C27272 + C27271) * C303 - (C27274 + C27273) * C48417 +
            (C10756 * C6270 + C10754 * C6272 + C10757 * C23734 +
             C48410 * C23735) *
                C304 +
            (C10756 * C6273 + C10754 * C6276 + C10757 * C23736 +
             C48410 * C23737) *
                C48390) *
               C48027 * C48408) *
              C48044 * C48393)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C114 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48072) *
               C48027 * C16456 +
           ((C26222 + C26221) * C114 + (C26224 + C26223) * C48072) * C48027 *
               C48408) *
              C48044 * C2151 -
          (((C26840 + C26839) * C48072 + (C26838 + C26837) * C114) * C48027 *
               C48408 +
           ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                C48072 +
            (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                C114) *
               C48027 * C16456) *
              C48044 * C2152 +
          (((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                C114 +
            (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                C48072) *
               C48027 * C16456 +
           ((C27268 + C27267) * C114 + (C27270 + C27269) * C48072) * C48027 *
               C48408) *
              C48044 * C2153 -
          (((C10757 * C7167 + C48410 * C7170 + C10756 * C2574 +
             C10754 * C2579) *
                C48072 +
            (C10757 * C7164 + C48410 * C7166 + C10756 * C2570 +
             C10754 * C2573) *
                C114) *
               C48027 * C48408 +
           ((C10757 * C2169 + C48410 * C2177 + C10756 * C2166 +
             C10754 * C2176) *
                C48072 +
            (C10757 * C2159 + C48410 * C2168 + C10756 * C2158 +
             C10754 * C2167) *
                C114) *
               C48027 * C16456) *
              C48044 * C2154 +
          (((C10756 * C2159 + C10754 * C2168 + C10757 * C12922 +
             C48410 * C12924) *
                C114 +
            (C10756 * C2169 + C10754 * C2177 + C10757 * C12925 +
             C48410 * C12928) *
                C48072) *
               C48027 * C16456 +
           ((C10756 * C7164 + C10754 * C7166 + C10757 * C28114 +
             C48410 * C28115) *
                C114 +
            (C10756 * C7167 + C10754 * C7170 + C10757 * C28116 +
             C48410 * C28117) *
                C48072) *
               C48027 * C48408) *
              C48044 * C2155)) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C1173 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C1167 -
             (C26221 + C26222) * C1174 - (C26223 + C26224) * C1168 +
             (C26225 + C26226) * C1175 + (C26227 + C26228) * C48390) *
                C48027 * C16456 +
            ((C26222 + C26221) * C1173 + (C26224 + C26223) * C1167 -
             (C26226 + C26225) * C1174 - (C26228 + C26227) * C1168 +
             (C27086 + C27085) * C1175 + (C27088 + C27087) * C48390) *
                C48027 * C48408) *
               C48344 +
           (((C10986 + C10985) * C1174 -
             ((C10794 + C10793) * C1167 + (C10792 + C10791) * C1173) +
             (C10988 + C10987) * C1168 - (C10990 + C10989) * C1175 -
             (C10992 + C10991) * C48390) *
                C48027 * C16456 +
            ((C10989 + C10990) * C1174 -
             ((C10987 + C10988) * C1167 + (C10985 + C10986) * C1173) +
             (C10991 + C10992) * C1168 - (C12209 + C12210) * C1175 -
             (C12211 + C12212) * C48390) *
                C48027 * C48408) *
               C48054) *
              C48359 +
          ((((C26837 + C26838) * C1174 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C1167 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C1173) +
             (C26839 + C26840) * C1168 - (C27263 + C27264) * C1175 -
             (C27265 + C27266) * C48390) *
                C48027 * C16456 +
            ((C27264 + C27263) * C1174 -
             ((C26840 + C26839) * C1167 + (C26838 + C26837) * C1173) +
             (C27266 + C27265) * C1168 -
             (C10757 * C6270 + C48410 * C6272 + C10756 * C1854 +
              C10754 * C1857) *
                 C1175 -
             (C10757 * C6273 + C48410 * C6276 + C10756 * C1858 +
              C10754 * C1863) *
                 C48390) *
                C48027 * C48408) *
               C48344 +
           (((C11179 + C11180) * C1173 + (C11181 + C11182) * C1167 -
             (C11690 + C11689) * C1174 - (C11692 + C11691) * C1168 +
             (C12416 + C12415) * C1175 + (C12418 + C12417) * C48390) *
                C48027 * C16456 +
            ((C11689 + C11690) * C1173 + (C11691 + C11692) * C1167 -
             (C12415 + C12416) * C1174 - (C12417 + C12418) * C1168 +
             (C10756 * C1855 + C10754 * C1859 + C10757 * C6271 +
              C48410 * C6274) *
                 C1175 +
             (C10756 * C1860 + C10754 * C1864 + C10757 * C6275 +
              C48410 * C6277) *
                 C48390) *
                C48027 * C48408) *
               C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C16456 +
            ((C26222 + C26221) * C114 + (C26224 + C26223) * C48072) * C48027 *
                C48408) *
               C707 -
           (((C10987 + C10988) * C48072 + (C10985 + C10986) * C114) * C48027 *
                C48408 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C48027 *
                C16456) *
               C708 +
           (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C48027 *
                C16456 +
            ((C10993 + C10994) * C114 + (C10995 + C10996) * C48072) * C48027 *
                C48408) *
               C709 -
           (((C11335 + C11336) * C48072 + (C11333 + C11334) * C114) * C48027 *
                C48408 +
            ((C10802 + C10801) * C48072 + (C10800 + C10799) * C114) * C48027 *
                C16456) *
               C48394) *
              C48359 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C48027 *
                C16456 +
            ((C11689 + C11690) * C114 + (C11691 + C11692) * C48072) * C48027 *
                C48408) *
               C708 -
           (((C10757 * C1422 + C48410 * C1436 + C10756 * C1010 +
              C10754 * C1019) *
                 C48072 +
             (C10757 * C1409 + C48410 * C1421 + C10756 * C1004 +
              C10754 * C1009) *
                 C114) *
                C48027 * C48408 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C48027 * C16456) *
               C707 -
           (((C11695 + C11696) * C48072 + (C11693 + C11694) * C114) * C48027 *
                C48408 +
            ((C11186 + C11185) * C48072 + (C11184 + C11183) * C114) * C48027 *
                C16456) *
               C709 +
           (((C11478 + C11477) * C114 + (C11476 + C11475) * C48072) * C48027 *
                C16456 +
            ((C10756 * C1007 + C10754 * C1015 + C10757 * C2326 +
              C48410 * C2327) *
                 C114 +
             (C10756 * C1016 + C10754 * C1022 + C10757 * C2328 +
              C48410 * C2329) *
                 C48072) *
                C48027 * C48408) *
               C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C16456 +
            ((C26222 + C26221) * C114 + (C26224 + C26223) * C48072) * C48027 *
                C48408) *
               C48344 -
           (((C10987 + C10988) * C48072 + (C10985 + C10986) * C114) * C48027 *
                C48408 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C48027 *
                C16456) *
               C48054) *
              C2448 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C48027 *
                C16456 +
            ((C11689 + C11690) * C114 + (C11691 + C11692) * C48072) * C48027 *
                C48408) *
               C48054 -
           (((C26840 + C26839) * C48072 + (C26838 + C26837) * C114) * C48027 *
                C48408 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C48027 * C16456) *
               C48344) *
              C2449 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C114 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C48072) *
                C48027 * C16456 +
            ((C27268 + C27267) * C114 + (C27270 + C27269) * C48072) * C48027 *
                C48408) *
               C48344 -
           (((C13135 + C13136) * C48072 + (C13133 + C13134) * C114) * C48027 *
                C48408 +
            ((C11190 + C11189) * C48072 + (C11188 + C11187) * C114) * C48027 *
                C16456) *
               C48054) *
              C2450 +
          ((((C13275 + C13276) * C114 + (C13277 + C13278) * C48072) * C48027 *
                C16456 +
            ((C10756 * C2571 + C10754 * C2575 + C10757 * C7165 +
              C48410 * C7168) *
                 C114 +
             (C10756 * C2576 + C10754 * C2580 + C10757 * C7169 +
              C48410 * C7171) *
                 C48072) *
                C48027 * C48408) *
               C48054 -
           (((C10757 * C7167 + C48410 * C7170 + C10756 * C2574 +
              C10754 * C2579) *
                 C48072 +
             (C10757 * C7164 + C48410 * C7166 + C10756 * C2570 +
              C10754 * C2573) *
                 C114) *
                C48027 * C48408 +
            ((C10757 * C2169 + C48410 * C2177 + C10756 * C2166 +
              C10754 * C2176) *
                 C48072 +
             (C10757 * C2159 + C48410 * C2168 + C10756 * C2158 +
              C10754 * C2167) *
                 C114) *
                C48027 * C16456) *
               C48344) *
              C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C302 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48429 -
            (C26221 + C26222) * C303 - (C26223 + C26224) * C48417 +
            (C26225 + C26226) * C304 + (C26227 + C26228) * C48390) *
               C48027 * C16456 +
           ((C26222 + C26221) * C302 + (C26224 + C26223) * C48429 -
            (C26226 + C26225) * C303 - (C26228 + C26227) * C48417 +
            (C10756 * C1272 + C10754 * C1278 + C10757 * C1854 +
             C48410 * C1857) *
                C304 +
            (C10756 * C1279 + C10754 * C1290 + C10757 * C1858 +
             C48410 * C1863) *
                C48390) *
               C48027 * C48408) *
              C299 +
          (((C10986 + C10985) * C303 -
            ((C10794 + C10793) * C48429 + (C10792 + C10791) * C302) +
            (C10988 + C10987) * C48417 - (C10990 + C10989) * C304 -
            (C10992 + C10991) * C48390) *
               C48027 * C16456 +
           ((C10989 + C10990) * C303 -
            ((C10987 + C10988) * C48429 + (C10985 + C10986) * C302) +
            (C10991 + C10992) * C48417 - (C12209 + C12210) * C304 -
            (C12211 + C12212) * C48390) *
               C48027 * C48408) *
              C300 +
          (((C10798 + C10797) * C302 + (C10796 + C10795) * C48429 -
            (C10994 + C10993) * C303 - (C10996 + C10995) * C48417 +
            (C10998 + C10997) * C304 + (C11000 + C10999) * C48390) *
               C48027 * C16456 +
           ((C10993 + C10994) * C302 + (C10995 + C10996) * C48429 -
            (C10997 + C10998) * C303 - (C10999 + C11000) * C48417 +
            (C10756 * C1276 + C10754 * C1286 + C10757 * C1856 +
             C48410 * C1861) *
                C304 +
            (C10756 * C1287 + C10754 * C1294 + C10757 * C1862 +
             C48410 * C1865) *
                C48390) *
               C48027 * C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C114 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48072) *
               C48027 * C16456 +
           ((C10756 * C305 + C10754 * C315 + C10757 * C1004 + C48410 * C1009) *
                C114 +
            (C10756 * C316 + C10754 * C335 + C10757 * C1010 + C48410 * C1019) *
                C48072) *
               C48027 * C48408) *
              C107 -
          (((C10987 + C10988) * C48072 + (C10985 + C10986) * C114) * C48027 *
               C48408 +
           ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C48027 *
               C16456) *
              C108 +
          (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C48027 *
               C16456 +
           ((C10993 + C10994) * C114 + (C10995 + C10996) * C48072) * C48027 *
               C48408) *
              C109 -
          (((C11335 + C11336) * C48072 + (C11333 + C11334) * C114) * C48027 *
               C48408 +
           ((C10802 + C10801) * C48072 + (C10800 + C10799) * C114) * C48027 *
               C16456) *
              C110 +
          (((C10806 + C10805) * C114 + (C10804 + C10803) * C48072) * C48027 *
               C16456 +
           ((C10756 * C313 + C10754 * C331 + C10757 * C1008 + C48410 * C1017) *
                C114 +
            (C10756 * C332 + C10754 * C343 + C10757 * C1018 + C48410 * C1023) *
                C48072) *
               C48027 * C48408) *
              C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C1173 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C1167 -
            (C26221 + C26222) * C1174 - (C26223 + C26224) * C1168 +
            (C26225 + C26226) * C1175 + (C26227 + C26228) * C48390) *
               C48027 * C16456 +
           ((C26222 + C26221) * C1173 + (C26224 + C26223) * C1167 -
            (C26226 + C26225) * C1174 - (C26228 + C26227) * C1168 +
            (C10756 * C1272 + C10754 * C1278 + C10757 * C1854 +
             C48410 * C1857) *
                C1175 +
            (C10756 * C1279 + C10754 * C1290 + C10757 * C1858 +
             C48410 * C1863) *
                C48390) *
               C48027 * C48408) *
              C48426 +
          (((C10986 + C10985) * C1174 -
            ((C10794 + C10793) * C1167 + (C10792 + C10791) * C1173) +
            (C10988 + C10987) * C1168 - (C10990 + C10989) * C1175 -
            (C10992 + C10991) * C48390) *
               C48027 * C16456 +
           ((C10989 + C10990) * C1174 -
            ((C10987 + C10988) * C1167 + (C10985 + C10986) * C1173) +
            (C10991 + C10992) * C1168 - (C12209 + C12210) * C1175 -
            (C12211 + C12212) * C48390) *
               C48027 * C48408) *
              C48413 +
          (((C10798 + C10797) * C1173 + (C10796 + C10795) * C1167 -
            (C10994 + C10993) * C1174 - (C10996 + C10995) * C1168 +
            (C10998 + C10997) * C1175 + (C11000 + C10999) * C48390) *
               C48027 * C16456 +
           ((C10993 + C10994) * C1173 + (C10995 + C10996) * C1167 -
            (C10997 + C10998) * C1174 - (C10999 + C11000) * C1168 +
            (C10756 * C1276 + C10754 * C1286 + C10757 * C1856 +
             C48410 * C1861) *
                C1175 +
            (C10756 * C1287 + C10754 * C1294 + C10757 * C1862 +
             C48410 * C1865) *
                C48390) *
               C48027 * C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
               C1267 +
           (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
               C1261 -
           (C26221 + C26222) * C1268 - (C26223 + C26224) * C1262 +
           (C26225 + C26226) * C1269 + (C26227 + C26228) * C1263 -
           (C27085 + C27086) * C1270 - (C27087 + C27088) * C1264 +
           (C27089 + C27090) * C1271 + (C27091 + C27092) * C1265) *
              C48027 * C16456 +
          ((C26222 + C26221) * C1267 + (C26224 + C26223) * C1261 -
           (C26226 + C26225) * C1268 - (C26228 + C26227) * C1262 +
           (C27086 + C27085) * C1269 + (C27088 + C27087) * C1263 -
           (C27090 + C27089) * C1270 - (C27092 + C27091) * C1264 +
           (C10756 * C6098 + C10754 * C6100 + C10757 * C23096 +
            C48410 * C23097) *
               C1271 +
           (C10756 * C6101 + C10754 * C6104 + C10757 * C23098 +
            C48410 * C23099) *
               C1265) *
              C48027 * C48408) *
         C48044 * C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C16456 +
            ((C26222 + C26221) * C114 + (C26224 + C26223) * C48072) * C48027 *
                C48408) *
               C48426 -
           (((C10987 + C10988) * C48072 + (C10985 + C10986) * C114) * C48027 *
                C48408 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C48027 *
                C16456) *
               C48413 +
           (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C48027 *
                C16456 +
            ((C10993 + C10994) * C114 + (C10995 + C10996) * C48072) * C48027 *
                C48408) *
               C48384) *
              C1976 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C48027 *
                C16456 +
            ((C11689 + C11690) * C114 + (C11691 + C11692) * C48072) * C48027 *
                C48408) *
               C48413 -
           (((C26840 + C26839) * C48072 + (C26838 + C26837) * C114) * C48027 *
                C48408 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C48027 * C16456) *
               C48426 -
           (((C11695 + C11696) * C48072 + (C11693 + C11694) * C114) * C48027 *
                C48408 +
            ((C11186 + C11185) * C48072 + (C11184 + C11183) * C114) * C48027 *
                C16456) *
               C48384) *
              C1977 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C114 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C48072) *
                C48027 * C16456 +
            ((C27268 + C27267) * C114 + (C27270 + C27269) * C48072) * C48027 *
                C48408) *
               C48426 -
           (((C13135 + C13136) * C48072 + (C13133 + C13134) * C114) * C48027 *
                C48408 +
            ((C11190 + C11189) * C48072 + (C11188 + C11187) * C114) * C48027 *
                C16456) *
               C48413 +
           (((C11194 + C11193) * C114 + (C11192 + C11191) * C48072) * C48027 *
                C16456 +
            ((C10756 * C1413 + C10754 * C1429 + C10757 * C2572 +
              C48410 * C2577) *
                 C114 +
             (C10756 * C1430 + C10754 * C1440 + C10757 * C2578 +
              C48410 * C2581) *
                 C48072) *
                C48027 * C48408) *
               C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C302 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48429 -
            (C26221 + C26222) * C303 - (C26223 + C26224) * C48417 +
            (C26225 + C26226) * C304 + (C26227 + C26228) * C48390) *
               C48027 * C16456 +
           ((C26222 + C26221) * C302 + (C26224 + C26223) * C48429 -
            (C26226 + C26225) * C303 - (C26228 + C26227) * C48417 +
            (C27086 + C27085) * C304 + (C27088 + C27087) * C48390) *
               C48027 * C48408) *
              C48044 * C1976 +
          (((C26837 + C26838) * C303 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48429 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C302) +
            (C26839 + C26840) * C48417 - (C27263 + C27264) * C304 -
            (C27265 + C27266) * C48390) *
               C48027 * C16456 +
           ((C27264 + C27263) * C303 -
            ((C26840 + C26839) * C48429 + (C26838 + C26837) * C302) +
            (C27266 + C27265) * C48417 - (C27738 + C27737) * C304 -
            (C27740 + C27739) * C48390) *
               C48027 * C48408) *
              C48044 * C1977 +
          (((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                C302 +
            (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                C48429 -
            (C27267 + C27268) * C303 - (C27269 + C27270) * C48417 +
            (C27271 + C27272) * C304 + (C27273 + C27274) * C48390) *
               C48027 * C16456 +
           ((C27268 + C27267) * C302 + (C27270 + C27269) * C48429 -
            (C27272 + C27271) * C303 - (C27274 + C27273) * C48417 +
            (C10756 * C6270 + C10754 * C6272 + C10757 * C23734 +
             C48410 * C23735) *
                C304 +
            (C10756 * C6273 + C10754 * C6276 + C10757 * C23736 +
             C48410 * C23737) *
                C48390) *
               C48027 * C48408) *
              C48044 * C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C711 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48358 -
             (C26221 + C26222) * C712 - (C26223 + C26224) * C48135) *
                C48027 * C16456 +
            ((C26222 + C26221) * C711 + (C26224 + C26223) * C48358 -
             (C26226 + C26225) * C712 - (C26228 + C26227) * C48135) *
                C48027 * C48408) *
               C48049 +
           (((C10986 + C10985) * C712 -
             ((C10794 + C10793) * C48358 + (C10792 + C10791) * C711) +
             (C10988 + C10987) * C48135) *
                C48027 * C16456 +
            ((C10989 + C10990) * C712 -
             ((C10987 + C10988) * C48358 + (C10985 + C10986) * C711) +
             (C10991 + C10992) * C48135) *
                C48027 * C48408) *
               C48057 +
           (((C10798 + C10797) * C711 + (C10796 + C10795) * C48358 -
             (C10994 + C10993) * C712 - (C10996 + C10995) * C48135) *
                C48027 * C16456 +
            ((C10993 + C10994) * C711 + (C10995 + C10996) * C48358 -
             (C10997 + C10998) * C712 - (C10999 + C11000) * C48135) *
                C48027 * C48408) *
               C3111) *
              C3547 +
          ((((C26837 + C26838) * C712 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C48358 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C711) +
             (C26839 + C26840) * C48135) *
                C48027 * C16456 +
            ((C27264 + C27263) * C712 -
             ((C26840 + C26839) * C48358 + (C26838 + C26837) * C711) +
             (C27266 + C27265) * C48135) *
                C48027 * C48408) *
               C48049 +
           (((C11179 + C11180) * C711 + (C11181 + C11182) * C48358 -
             (C11690 + C11689) * C712 - (C11692 + C11691) * C48135) *
                C48027 * C16456 +
            ((C11689 + C11690) * C711 + (C11691 + C11692) * C48358 -
             (C12415 + C12416) * C712 - (C12417 + C12418) * C48135) *
                C48027 * C48408) *
               C48057 +
           (((C11694 + C11693) * C712 -
             ((C11186 + C11185) * C48358 + (C11184 + C11183) * C711) +
             (C11696 + C11695) * C48135) *
                C48027 * C16456 +
            ((C10756 * C1408 + C10754 * C1419 + C10757 * C1414 +
              C48410 * C1431) *
                 C712 -
             ((C11695 + C11696) * C48358 + (C11693 + C11694) * C711) +
             (C10756 * C1420 + C10754 * C1435 + C10757 * C1432 +
              C48410 * C1441) *
                 C48135) *
                C48027 * C48408) *
               C3111) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C711 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48358 -
             (C26221 + C26222) * C712 - (C26223 + C26224) * C48135) *
                C48027 * C16456 +
            ((C26222 + C26221) * C711 + (C26224 + C26223) * C48358 -
             (C26226 + C26225) * C712 - (C26228 + C26227) * C48135) *
                C48027 * C48408) *
               C2812 +
           (((C10986 + C10985) * C712 -
             ((C10794 + C10793) * C48358 + (C10792 + C10791) * C711) +
             (C10988 + C10987) * C48135) *
                C48027 * C16456 +
            ((C10989 + C10990) * C712 -
             ((C10987 + C10988) * C48358 + (C10985 + C10986) * C711) +
             (C10991 + C10992) * C48135) *
                C48027 * C48408) *
               C48054) *
              C48173 +
          ((((C26837 + C26838) * C712 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C48358 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C711) +
             (C26839 + C26840) * C48135) *
                C48027 * C16456 +
            ((C27264 + C27263) * C712 -
             ((C26840 + C26839) * C48358 + (C26838 + C26837) * C711) +
             (C27266 + C27265) * C48135) *
                C48027 * C48408) *
               C2812 +
           (((C11179 + C11180) * C711 + (C11181 + C11182) * C48358 -
             (C11690 + C11689) * C712 - (C11692 + C11691) * C48135) *
                C48027 * C16456 +
            ((C11689 + C11690) * C711 + (C11691 + C11692) * C48358 -
             (C12415 + C12416) * C712 - (C12417 + C12418) * C48135) *
                C48027 * C48408) *
               C48054) *
              C48180 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C711 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C48358 -
             (C27267 + C27268) * C712 - (C27269 + C27270) * C48135) *
                C48027 * C16456 +
            ((C27268 + C27267) * C711 + (C27270 + C27269) * C48358 -
             (C27272 + C27271) * C712 - (C27274 + C27273) * C48135) *
                C48027 * C48408) *
               C2812 +
           (((C13134 + C13133) * C712 -
             ((C11190 + C11189) * C48358 + (C11188 + C11187) * C711) +
             (C13136 + C13135) * C48135) *
                C48027 * C16456 +
            ((C10756 * C1412 + C10754 * C1427 + C10757 * C7639 +
              C48410 * C7642) *
                 C712 -
             ((C13135 + C13136) * C48358 + (C13133 + C13134) * C711) +
             (C10756 * C1428 + C10754 * C1439 + C10757 * C7643 +
              C48410 * C7645) *
                 C48135) *
                C48027 * C48408) *
               C48054) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C302 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48429 -
             (C26221 + C26222) * C303 - (C26223 + C26224) * C48417 +
             (C26225 + C26226) * C304 + (C26227 + C26228) * C48390) *
                C48027 * C16456 +
            ((C26222 + C26221) * C302 + (C26224 + C26223) * C48429 -
             (C26226 + C26225) * C303 - (C26228 + C26227) * C48417 +
             (C27086 + C27085) * C304 + (C27088 + C27087) * C48390) *
                C48027 * C48408) *
               C2812 +
           (((C10986 + C10985) * C303 -
             ((C10794 + C10793) * C48429 + (C10792 + C10791) * C302) +
             (C10988 + C10987) * C48417 - (C10990 + C10989) * C304 -
             (C10992 + C10991) * C48390) *
                C48027 * C16456 +
            ((C10989 + C10990) * C303 -
             ((C10987 + C10988) * C48429 + (C10985 + C10986) * C302) +
             (C10991 + C10992) * C48417 - (C12209 + C12210) * C304 -
             (C12211 + C12212) * C48390) *
                C48027 * C48408) *
               C48054) *
              C3547 +
          ((((C26837 + C26838) * C303 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C48429 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C302) +
             (C26839 + C26840) * C48417 - (C27263 + C27264) * C304 -
             (C27265 + C27266) * C48390) *
                C48027 * C16456 +
            ((C27264 + C27263) * C303 -
             ((C26840 + C26839) * C48429 + (C26838 + C26837) * C302) +
             (C27266 + C27265) * C48417 - (C27738 + C27737) * C304 -
             (C27740 + C27739) * C48390) *
                C48027 * C48408) *
               C2812 +
           (((C11179 + C11180) * C302 + (C11181 + C11182) * C48429 -
             (C11690 + C11689) * C303 - (C11692 + C11691) * C48417 +
             (C12416 + C12415) * C304 + (C12418 + C12417) * C48390) *
                C48027 * C16456 +
            ((C11689 + C11690) * C302 + (C11691 + C11692) * C48429 -
             (C12415 + C12416) * C303 - (C12417 + C12418) * C48417 +
             (C10756 * C1855 + C10754 * C1859 + C10757 * C6271 +
              C48410 * C6274) *
                 C304 +
             (C10756 * C1860 + C10754 * C1864 + C10757 * C6275 +
              C48410 * C6277) *
                 C48390) *
                C48027 * C48408) *
               C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C16456 +
            ((C26222 + C26221) * C114 + (C26224 + C26223) * C48072) * C48027 *
                C48408) *
               C48435 -
           (((C10987 + C10988) * C48072 + (C10985 + C10986) * C114) * C48027 *
                C48408 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C48027 *
                C16456) *
               C48428 +
           (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C48027 *
                C16456 +
            ((C10993 + C10994) * C114 + (C10995 + C10996) * C48072) * C48027 *
                C48408) *
               C48415 -
           (((C11335 + C11336) * C48072 + (C11333 + C11334) * C114) * C48027 *
                C48408 +
            ((C10802 + C10801) * C48072 + (C10800 + C10799) * C114) * C48027 *
                C16456) *
               C48394) *
              C3547 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C48027 *
                C16456 +
            ((C11689 + C11690) * C114 + (C11691 + C11692) * C48072) * C48027 *
                C48408) *
               C48428 -
           (((C26840 + C26839) * C48072 + (C26838 + C26837) * C114) * C48027 *
                C48408 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C48027 * C16456) *
               C48435 -
           (((C11695 + C11696) * C48072 + (C11693 + C11694) * C114) * C48027 *
                C48408 +
            ((C11186 + C11185) * C48072 + (C11184 + C11183) * C114) * C48027 *
                C16456) *
               C48415 +
           (((C11478 + C11477) * C114 + (C11476 + C11475) * C48072) * C48027 *
                C16456 +
            ((C10756 * C1007 + C10754 * C1015 + C10757 * C2326 +
              C48410 * C2327) *
                 C114 +
             (C10756 * C1016 + C10754 * C1022 + C10757 * C2328 +
              C48410 * C2329) *
                 C48072) *
                C48027 * C48408) *
               C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C16456 +
            ((C26222 + C26221) * C114 + (C26224 + C26223) * C48072) * C48027 *
                C48408) *
               C2812 -
           (((C10987 + C10988) * C48072 + (C10985 + C10986) * C114) * C48027 *
                C48408 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C48027 *
                C16456) *
               C48054) *
              C48437 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C48027 *
                C16456 +
            ((C11689 + C11690) * C114 + (C11691 + C11692) * C48072) * C48027 *
                C48408) *
               C48054 -
           (((C26840 + C26839) * C48072 + (C26838 + C26837) * C114) * C48027 *
                C48408 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C48027 * C16456) *
               C2812) *
              C48434 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C114 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C48072) *
                C48027 * C16456 +
            ((C27268 + C27267) * C114 + (C27270 + C27269) * C48072) * C48027 *
                C48408) *
               C2812 -
           (((C13135 + C13136) * C48072 + (C13133 + C13134) * C114) * C48027 *
                C48408 +
            ((C11190 + C11189) * C48072 + (C11188 + C11187) * C114) * C48027 *
                C16456) *
               C48054) *
              C48425 +
          ((((C13275 + C13276) * C114 + (C13277 + C13278) * C48072) * C48027 *
                C16456 +
            ((C10756 * C2571 + C10754 * C2575 + C10757 * C7165 +
              C48410 * C7168) *
                 C114 +
             (C10756 * C2576 + C10754 * C2580 + C10757 * C7169 +
              C48410 * C7171) *
                 C48072) *
                C48027 * C48408) *
               C48054 -
           (((C28584 + C28583) * C48072 + (C28582 + C28581) * C114) * C48027 *
                C48408 +
            ((C10757 * C2169 + C48410 * C2177 + C10756 * C2166 +
              C10754 * C2176) *
                 C48072 +
             (C10757 * C2159 + C48410 * C2168 + C10756 * C2158 +
              C10754 * C2167) *
                 C114) *
                C48027 * C16456) *
               C2812) *
              C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C16456 +
            ((C26222 + C26221) * C114 + (C26224 + C26223) * C48072) * C48027 *
                C48408) *
               C48049 -
           (((C10987 + C10988) * C48072 + (C10985 + C10986) * C114) * C48027 *
                C48408 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C48027 *
                C16456) *
               C48057 +
           (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C48027 *
                C16456 +
            ((C10993 + C10994) * C114 + (C10995 + C10996) * C48072) * C48027 *
                C48408) *
               C3111) *
              C48173 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C48027 *
                C16456 +
            ((C11689 + C11690) * C114 + (C11691 + C11692) * C48072) * C48027 *
                C48408) *
               C48057 -
           (((C26840 + C26839) * C48072 + (C26838 + C26837) * C114) * C48027 *
                C48408 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C48027 * C16456) *
               C48049 -
           (((C11695 + C11696) * C48072 + (C11693 + C11694) * C114) * C48027 *
                C48408 +
            ((C11186 + C11185) * C48072 + (C11184 + C11183) * C114) * C48027 *
                C16456) *
               C3111) *
              C48180 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C114 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C48072) *
                C48027 * C16456 +
            ((C27268 + C27267) * C114 + (C27270 + C27269) * C48072) * C48027 *
                C48408) *
               C48049 -
           (((C13135 + C13136) * C48072 + (C13133 + C13134) * C114) * C48027 *
                C48408 +
            ((C11190 + C11189) * C48072 + (C11188 + C11187) * C114) * C48027 *
                C16456) *
               C48057 +
           (((C11194 + C11193) * C114 + (C11192 + C11191) * C48072) * C48027 *
                C16456 +
            ((C10756 * C1413 + C10754 * C1429 + C10757 * C2572 +
              C48410 * C2577) *
                 C114 +
             (C10756 * C1430 + C10754 * C1440 + C10757 * C2578 +
              C48410 * C2581) *
                 C48072) *
                C48027 * C48408) *
               C3111) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C16456 +
            ((C26222 + C26221) * C114 + (C26224 + C26223) * C48072) * C48027 *
                C48408) *
               C48435 -
           (((C10987 + C10988) * C48072 + (C10985 + C10986) * C114) * C48027 *
                C48408 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C48027 *
                C16456) *
               C48428 +
           (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C48027 *
                C16456 +
            ((C10993 + C10994) * C114 + (C10995 + C10996) * C48072) * C48027 *
                C48408) *
               C48415 -
           (((C11335 + C11336) * C48072 + (C11333 + C11334) * C114) * C48027 *
                C48408 +
            ((C10802 + C10801) * C48072 + (C10800 + C10799) * C114) * C48027 *
                C16456) *
               C48394) *
              C3547 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C48027 *
                C16456 +
            ((C11689 + C11690) * C114 + (C11691 + C11692) * C48072) * C48027 *
                C48408) *
               C48428 -
           (((C26840 + C26839) * C48072 + (C26838 + C26837) * C114) * C48027 *
                C48408 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C48027 * C16456) *
               C48435 -
           (((C11695 + C11696) * C48072 + (C11693 + C11694) * C114) * C48027 *
                C48408 +
            ((C11186 + C11185) * C48072 + (C11184 + C11183) * C114) * C48027 *
                C16456) *
               C48415 +
           (((C11478 + C11477) * C114 + (C11476 + C11475) * C48072) * C48027 *
                C16456 +
            ((C10756 * C1007 + C10754 * C1015 + C10757 * C2326 +
              C48410 * C2327) *
                 C114 +
             (C10756 * C1016 + C10754 * C1022 + C10757 * C2328 +
              C48410 * C2329) *
                 C48072) *
                C48027 * C48408) *
               C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C302 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48429 -
             (C26221 + C26222) * C303 - (C26223 + C26224) * C48417 +
             (C26225 + C26226) * C304 + (C26227 + C26228) * C48390) *
                C48027 * C16456 +
            ((C26222 + C26221) * C302 + (C26224 + C26223) * C48429 -
             (C26226 + C26225) * C303 - (C26228 + C26227) * C48417 +
             (C27086 + C27085) * C304 + (C27088 + C27087) * C48390) *
                C48027 * C48408) *
               C2812 +
           (((C10986 + C10985) * C303 -
             ((C10794 + C10793) * C48429 + (C10792 + C10791) * C302) +
             (C10988 + C10987) * C48417 - (C10990 + C10989) * C304 -
             (C10992 + C10991) * C48390) *
                C48027 * C16456 +
            ((C10989 + C10990) * C303 -
             ((C10987 + C10988) * C48429 + (C10985 + C10986) * C302) +
             (C10991 + C10992) * C48417 - (C12209 + C12210) * C304 -
             (C12211 + C12212) * C48390) *
                C48027 * C48408) *
               C48054) *
              C3547 +
          ((((C26837 + C26838) * C303 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C48429 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C302) +
             (C26839 + C26840) * C48417 - (C27263 + C27264) * C304 -
             (C27265 + C27266) * C48390) *
                C48027 * C16456 +
            ((C27264 + C27263) * C303 -
             ((C26840 + C26839) * C48429 + (C26838 + C26837) * C302) +
             (C27266 + C27265) * C48417 - (C27738 + C27737) * C304 -
             (C27740 + C27739) * C48390) *
                C48027 * C48408) *
               C2812 +
           (((C11179 + C11180) * C302 + (C11181 + C11182) * C48429 -
             (C11690 + C11689) * C303 - (C11692 + C11691) * C48417 +
             (C12416 + C12415) * C304 + (C12418 + C12417) * C48390) *
                C48027 * C16456 +
            ((C11689 + C11690) * C302 + (C11691 + C11692) * C48429 -
             (C12415 + C12416) * C303 - (C12417 + C12418) * C48417 +
             (C10756 * C1855 + C10754 * C1859 + C10757 * C6271 +
              C48410 * C6274) *
                 C304 +
             (C10756 * C1860 + C10754 * C1864 + C10757 * C6275 +
              C48410 * C6277) *
                 C48390) *
                C48027 * C48408) *
               C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C711 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48358 -
            (C26221 + C26222) * C712 - (C26223 + C26224) * C48135) *
               C48027 * C16456 +
           ((C26222 + C26221) * C711 + (C26224 + C26223) * C48358 -
            (C26226 + C26225) * C712 - (C26228 + C26227) * C48135) *
               C48027 * C48408) *
              C707 +
          (((C10986 + C10985) * C712 -
            ((C10794 + C10793) * C48358 + (C10792 + C10791) * C711) +
            (C10988 + C10987) * C48135) *
               C48027 * C16456 +
           ((C10989 + C10990) * C712 -
            ((C10987 + C10988) * C48358 + (C10985 + C10986) * C711) +
            (C10991 + C10992) * C48135) *
               C48027 * C48408) *
              C708 +
          (((C10798 + C10797) * C711 + (C10796 + C10795) * C48358 -
            (C10994 + C10993) * C712 - (C10996 + C10995) * C48135) *
               C48027 * C16456 +
           ((C10993 + C10994) * C711 + (C10995 + C10996) * C48358 -
            (C10997 + C10998) * C712 - (C10999 + C11000) * C48135) *
               C48027 * C48408) *
              C709 +
          (((C11334 + C11333) * C712 -
            ((C10802 + C10801) * C48358 + (C10800 + C10799) * C711) +
            (C11336 + C11335) * C48135) *
               C48027 * C16456 +
           ((C10756 * C312 + C10754 * C329 + C10757 * C1728 + C48410 * C1729) *
                C712 -
            ((C11335 + C11336) * C48358 + (C11333 + C11334) * C711) +
            (C10756 * C330 + C10754 * C342 + C10757 * C1730 + C48410 * C1731) *
                C48135) *
               C48027 * C48408) *
              C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C1546 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C1540 -
            (C26221 + C26222) * C1547 - (C26223 + C26224) * C1541 +
            (C26225 + C26226) * C1548 + (C26227 + C26228) * C1542 -
            (C27085 + C27086) * C1549 - (C27087 + C27088) * C48400) *
               C48027 * C16456 +
           ((C26222 + C26221) * C1546 + (C26224 + C26223) * C1540 -
            (C26226 + C26225) * C1547 - (C26228 + C26227) * C1541 +
            (C27086 + C27085) * C1548 + (C27088 + C27087) * C1542 -
            (C27090 + C27089) * C1549 - (C27092 + C27091) * C48400) *
               C48027 * C48408) *
              C48344 +
          (((C10986 + C10985) * C1547 -
            ((C10794 + C10793) * C1540 + (C10792 + C10791) * C1546) +
            (C10988 + C10987) * C1541 - (C10990 + C10989) * C1548 -
            (C10992 + C10991) * C1542 + (C12210 + C12209) * C1549 +
            (C12212 + C12211) * C48400) *
               C48027 * C16456 +
           ((C10989 + C10990) * C1547 -
            ((C10987 + C10988) * C1540 + (C10985 + C10986) * C1546) +
            (C10991 + C10992) * C1541 - (C12209 + C12210) * C1548 -
            (C12211 + C12212) * C1542 +
            (C10756 * C1275 + C10754 * C1284 + C10757 * C6777 +
             C48410 * C6780) *
                C1549 +
            (C10756 * C1285 + C10754 * C1293 + C10757 * C6781 +
             C48410 * C6783) *
                C48400) *
               C48027 * C48408) *
              C48054) *
         C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C711 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48358 -
             (C26221 + C26222) * C712 - (C26223 + C26224) * C48135) *
                C48027 * C16456 +
            ((C26222 + C26221) * C711 + (C26224 + C26223) * C48358 -
             (C26226 + C26225) * C712 - (C26228 + C26227) * C48135) *
                C48027 * C48408) *
               C299 +
           (((C10986 + C10985) * C712 -
             ((C10794 + C10793) * C48358 + (C10792 + C10791) * C711) +
             (C10988 + C10987) * C48135) *
                C48027 * C16456 +
            ((C10989 + C10990) * C712 -
             ((C10987 + C10988) * C48358 + (C10985 + C10986) * C711) +
             (C10991 + C10992) * C48135) *
                C48027 * C48408) *
               C300 +
           (((C10798 + C10797) * C711 + (C10796 + C10795) * C48358 -
             (C10994 + C10993) * C712 - (C10996 + C10995) * C48135) *
                C48027 * C16456 +
            ((C10993 + C10994) * C711 + (C10995 + C10996) * C48358 -
             (C10997 + C10998) * C712 - (C10999 + C11000) * C48135) *
                C48027 * C48408) *
               C48384) *
              C48359 +
          ((((C26837 + C26838) * C712 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C48358 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C711) +
             (C26839 + C26840) * C48135) *
                C48027 * C16456 +
            ((C10756 * C1406 + C10754 * C1415 + C10757 * C1410 +
              C48410 * C1423) *
                 C712 -
             ((C26840 + C26839) * C48358 + (C26838 + C26837) * C711) +
             (C10756 * C1416 + C10754 * C1433 + C10757 * C1424 +
              C48410 * C1437) *
                 C48135) *
                C48027 * C48408) *
               C299 +
           (((C11179 + C11180) * C711 + (C11181 + C11182) * C48358 -
             (C11690 + C11689) * C712 - (C11692 + C11691) * C48135) *
                C48027 * C16456 +
            ((C11689 + C11690) * C711 + (C11691 + C11692) * C48358 -
             (C12415 + C12416) * C712 - (C12417 + C12418) * C48135) *
                C48027 * C48408) *
               C300 +
           (((C11694 + C11693) * C712 -
             ((C11186 + C11185) * C48358 + (C11184 + C11183) * C711) +
             (C11696 + C11695) * C48135) *
                C48027 * C16456 +
            ((C10756 * C1408 + C10754 * C1419 + C10757 * C1414 +
              C48410 * C1431) *
                 C712 -
             ((C11695 + C11696) * C48358 + (C11693 + C11694) * C711) +
             (C10756 * C1420 + C10754 * C1435 + C10757 * C1432 +
              C48410 * C1441) *
                 C48135) *
                C48027 * C48408) *
               C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C1546 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C1540 -
            (C26221 + C26222) * C1547 - (C26223 + C26224) * C1541 +
            (C26225 + C26226) * C1548 + (C26227 + C26228) * C1542 -
            (C27085 + C27086) * C1549 - (C27087 + C27088) * C48400) *
               C48027 * C16456 +
           ((C26222 + C26221) * C1546 + (C26224 + C26223) * C1540 -
            (C26226 + C26225) * C1547 - (C26228 + C26227) * C1541 +
            (C27086 + C27085) * C1548 + (C27088 + C27087) * C1542 -
            (C27090 + C27089) * C1549 - (C27092 + C27091) * C48400) *
               C48027 * C48408) *
              C48044 * C48359 +
          (((C26837 + C26838) * C1547 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C1540 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C1546) +
            (C26839 + C26840) * C1541 - (C27263 + C27264) * C1548 -
            (C27265 + C27266) * C1542 + (C27737 + C27738) * C1549 +
            (C27739 + C27740) * C48400) *
               C48027 * C16456 +
           ((C27264 + C27263) * C1547 -
            ((C26840 + C26839) * C1540 + (C26838 + C26837) * C1546) +
            (C27266 + C27265) * C1541 - (C27738 + C27737) * C1548 -
            (C27740 + C27739) * C1542 +
            (C10756 * C6776 + C10754 * C6778 + C10757 * C22744 +
             C48410 * C22745) *
                C1549 +
            (C10756 * C6779 + C10754 * C6782 + C10757 * C22746 +
             C48410 * C22747) *
                C48400) *
               C48027 * C48408) *
              C48044 * C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C302 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48429 -
            (C26221 + C26222) * C303 - (C26223 + C26224) * C48417 +
            (C26225 + C26226) * C304 + (C26227 + C26228) * C48390) *
               C48027 * C16456 +
           ((C26222 + C26221) * C302 + (C26224 + C26223) * C48429 -
            (C26226 + C26225) * C303 - (C26228 + C26227) * C48417 +
            (C10756 * C1272 + C10754 * C1278 + C10757 * C1854 +
             C48410 * C1857) *
                C304 +
            (C10756 * C1279 + C10754 * C1290 + C10757 * C1858 +
             C48410 * C1863) *
                C48390) *
               C48027 * C48408) *
              C299 +
          (((C10986 + C10985) * C303 -
            ((C10794 + C10793) * C48429 + (C10792 + C10791) * C302) +
            (C10988 + C10987) * C48417 - (C10990 + C10989) * C304 -
            (C10992 + C10991) * C48390) *
               C48027 * C16456 +
           ((C10989 + C10990) * C303 -
            ((C10987 + C10988) * C48429 + (C10985 + C10986) * C302) +
            (C10991 + C10992) * C48417 - (C12209 + C12210) * C304 -
            (C12211 + C12212) * C48390) *
               C48027 * C48408) *
              C300 +
          (((C10798 + C10797) * C302 + (C10796 + C10795) * C48429 -
            (C10994 + C10993) * C303 - (C10996 + C10995) * C48417 +
            (C10998 + C10997) * C304 + (C11000 + C10999) * C48390) *
               C48027 * C16456 +
           ((C10993 + C10994) * C302 + (C10995 + C10996) * C48429 -
            (C10997 + C10998) * C303 - (C10999 + C11000) * C48417 +
            (C10756 * C1276 + C10754 * C1286 + C10757 * C1856 +
             C48410 * C1861) *
                C304 +
            (C10756 * C1287 + C10754 * C1294 + C10757 * C1862 +
             C48410 * C1865) *
                C48390) *
               C48027 * C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C114 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48072) *
               C48027 * C16456 +
           ((C10756 * C305 + C10754 * C315 + C10757 * C1004 + C48410 * C1009) *
                C114 +
            (C10756 * C316 + C10754 * C335 + C10757 * C1010 + C48410 * C1019) *
                C48072) *
               C48027 * C48408) *
              C107 -
          (((C10987 + C10988) * C48072 + (C10985 + C10986) * C114) * C48027 *
               C48408 +
           ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C48027 *
               C16456) *
              C108 +
          (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C48027 *
               C16456 +
           ((C10993 + C10994) * C114 + (C10995 + C10996) * C48072) * C48027 *
               C48408) *
              C109 -
          (((C11335 + C11336) * C48072 + (C11333 + C11334) * C114) * C48027 *
               C48408 +
           ((C10802 + C10801) * C48072 + (C10800 + C10799) * C114) * C48027 *
               C16456) *
              C110 +
          (((C10806 + C10805) * C114 + (C10804 + C10803) * C48072) * C48027 *
               C16456 +
           ((C10756 * C313 + C10754 * C331 + C10757 * C1008 + C48410 * C1017) *
                C114 +
            (C10756 * C332 + C10754 * C343 + C10757 * C1018 + C48410 * C1023) *
                C48072) *
               C48027 * C48408) *
              C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C16456 +
            ((C26222 + C26221) * C114 + (C26224 + C26223) * C48072) * C48027 *
                C48408) *
               C299 -
           (((C10987 + C10988) * C48072 + (C10985 + C10986) * C114) * C48027 *
                C48408 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C48027 *
                C16456) *
               C300 +
           (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C48027 *
                C16456 +
            ((C10993 + C10994) * C114 + (C10995 + C10996) * C48072) * C48027 *
                C48408) *
               C48384) *
              C48430 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C48027 *
                C16456 +
            ((C11689 + C11690) * C114 + (C11691 + C11692) * C48072) * C48027 *
                C48408) *
               C300 -
           (((C10757 * C1422 + C48410 * C1436 + C10756 * C1010 +
              C10754 * C1019) *
                 C48072 +
             (C10757 * C1409 + C48410 * C1421 + C10756 * C1004 +
              C10754 * C1009) *
                 C114) *
                C48027 * C48408 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C48027 * C16456) *
               C299 -
           (((C11695 + C11696) * C48072 + (C11693 + C11694) * C114) * C48027 *
                C48408 +
            ((C11186 + C11185) * C48072 + (C11184 + C11183) * C114) * C48027 *
                C16456) *
               C48384) *
              C48419 +
          ((((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                 C114 +
             (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                 C48072) *
                C48027 * C16456 +
            ((C10756 * C1409 + C10754 * C1421 + C10757 * C2570 +
              C48410 * C2573) *
                 C114 +
             (C10756 * C1422 + C10754 * C1436 + C10757 * C2574 +
              C48410 * C2579) *
                 C48072) *
                C48027 * C48408) *
               C299 -
           (((C13135 + C13136) * C48072 + (C13133 + C13134) * C114) * C48027 *
                C48408 +
            ((C11190 + C11189) * C48072 + (C11188 + C11187) * C114) * C48027 *
                C16456) *
               C300 +
           (((C11194 + C11193) * C114 + (C11192 + C11191) * C48072) * C48027 *
                C16456 +
            ((C10756 * C1413 + C10754 * C1429 + C10757 * C2572 +
              C48410 * C2577) *
                 C114 +
             (C10756 * C1430 + C10754 * C1440 + C10757 * C2578 +
              C48410 * C2581) *
                 C48072) *
                C48027 * C48408) *
               C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C1173 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C1167 -
            (C26221 + C26222) * C1174 - (C26223 + C26224) * C1168 +
            (C26225 + C26226) * C1175 + (C26227 + C26228) * C48390) *
               C48027 * C16456 +
           ((C26222 + C26221) * C1173 + (C26224 + C26223) * C1167 -
            (C26226 + C26225) * C1174 - (C26228 + C26227) * C1168 +
            (C10756 * C1272 + C10754 * C1278 + C10757 * C1854 +
             C48410 * C1857) *
                C1175 +
            (C10756 * C1279 + C10754 * C1290 + C10757 * C1858 +
             C48410 * C1863) *
                C48390) *
               C48027 * C48408) *
              C48426 +
          (((C10986 + C10985) * C1174 -
            ((C10794 + C10793) * C1167 + (C10792 + C10791) * C1173) +
            (C10988 + C10987) * C1168 - (C10990 + C10989) * C1175 -
            (C10992 + C10991) * C48390) *
               C48027 * C16456 +
           ((C10989 + C10990) * C1174 -
            ((C10987 + C10988) * C1167 + (C10985 + C10986) * C1173) +
            (C10991 + C10992) * C1168 - (C12209 + C12210) * C1175 -
            (C12211 + C12212) * C48390) *
               C48027 * C48408) *
              C48413 +
          (((C10798 + C10797) * C1173 + (C10796 + C10795) * C1167 -
            (C10994 + C10993) * C1174 - (C10996 + C10995) * C1168 +
            (C10998 + C10997) * C1175 + (C11000 + C10999) * C48390) *
               C48027 * C16456 +
           ((C10993 + C10994) * C1173 + (C10995 + C10996) * C1167 -
            (C10997 + C10998) * C1174 - (C10999 + C11000) * C1168 +
            (C10756 * C1276 + C10754 * C1286 + C10757 * C1856 +
             C48410 * C1861) *
                C1175 +
            (C10756 * C1287 + C10754 * C1294 + C10757 * C1862 +
             C48410 * C1865) *
                C48390) *
               C48027 * C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
               C1267 +
           (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
               C1261 -
           (C26221 + C26222) * C1268 - (C26223 + C26224) * C1262 +
           (C26225 + C26226) * C1269 + (C26227 + C26228) * C1263 -
           (C27085 + C27086) * C1270 - (C27087 + C27088) * C1264 +
           (C27089 + C27090) * C1271 + (C27091 + C27092) * C1265) *
              C48027 * C16456 +
          ((C26222 + C26221) * C1267 + (C26224 + C26223) * C1261 -
           (C26226 + C26225) * C1268 - (C26228 + C26227) * C1262 +
           (C27086 + C27085) * C1269 + (C27088 + C27087) * C1263 -
           (C27090 + C27089) * C1270 - (C27092 + C27091) * C1264 +
           (C10756 * C6098 + C10754 * C6100 + C10757 * C23096 +
            C48410 * C23097) *
               C1271 +
           (C10756 * C6101 + C10754 * C6104 + C10757 * C23098 +
            C48410 * C23099) *
               C1265) *
              C48027 * C48408) *
         C48044 * C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C1173 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C1167 -
            (C26221 + C26222) * C1174 - (C26223 + C26224) * C1168 +
            (C26225 + C26226) * C1175 + (C26227 + C26228) * C48390) *
               C48027 * C16456 +
           ((C26222 + C26221) * C1173 + (C26224 + C26223) * C1167 -
            (C26226 + C26225) * C1174 - (C26228 + C26227) * C1168 +
            (C27086 + C27085) * C1175 + (C27088 + C27087) * C48390) *
               C48027 * C48408) *
              C48044 * C48430 +
          (((C26837 + C26838) * C1174 -
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C1167 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C1173) +
            (C26839 + C26840) * C1168 - (C27263 + C27264) * C1175 -
            (C27265 + C27266) * C48390) *
               C48027 * C16456 +
           ((C27264 + C27263) * C1174 -
            ((C26840 + C26839) * C1167 + (C26838 + C26837) * C1173) +
            (C27266 + C27265) * C1168 -
            (C10757 * C6270 + C48410 * C6272 + C10756 * C1854 +
             C10754 * C1857) *
                C1175 -
            (C10757 * C6273 + C48410 * C6276 + C10756 * C1858 +
             C10754 * C1863) *
                C48390) *
               C48027 * C48408) *
              C48044 * C48419 +
          (((C10756 * C522 + C10754 * C537 + C10757 * C2158 + C48410 * C2167) *
                C1173 +
            (C10756 * C538 + C10754 * C552 + C10757 * C2166 + C48410 * C2176) *
                C1167 -
            (C27267 + C27268) * C1174 - (C27269 + C27270) * C1168 +
            (C27271 + C27272) * C1175 + (C27273 + C27274) * C48390) *
               C48027 * C16456 +
           ((C27268 + C27267) * C1173 + (C27270 + C27269) * C1167 -
            (C27272 + C27271) * C1174 - (C27274 + C27273) * C1168 +
            (C10756 * C6270 + C10754 * C6272 + C10757 * C23734 +
             C48410 * C23735) *
                C1175 +
            (C10756 * C6273 + C10754 * C6276 + C10757 * C23736 +
             C48410 * C23737) *
                C48390) *
               C48027 * C48408) *
              C48044 * C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C114 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C16456 +
            ((C26222 + C26221) * C114 + (C26224 + C26223) * C48072) * C48027 *
                C48408) *
               C707 -
           (((C10987 + C10988) * C48072 + (C10985 + C10986) * C114) * C48027 *
                C48408 +
            ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C48027 *
                C16456) *
               C708 +
           (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C48027 *
                C16456 +
            ((C10993 + C10994) * C114 + (C10995 + C10996) * C48072) * C48027 *
                C48408) *
               C709 -
           (((C11335 + C11336) * C48072 + (C11333 + C11334) * C114) * C48027 *
                C48408 +
            ((C10802 + C10801) * C48072 + (C10800 + C10799) * C114) * C48027 *
                C16456) *
               C48394) *
              C48359 +
          ((((C11179 + C11180) * C114 + (C11181 + C11182) * C48072) * C48027 *
                C16456 +
            ((C11689 + C11690) * C114 + (C11691 + C11692) * C48072) * C48027 *
                C48408) *
               C708 -
           (((C10757 * C1422 + C48410 * C1436 + C10756 * C1010 +
              C10754 * C1019) *
                 C48072 +
             (C10757 * C1409 + C48410 * C1421 + C10756 * C1004 +
              C10754 * C1009) *
                 C114) *
                C48027 * C48408 +
            ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                 C48072 +
             (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                 C114) *
                C48027 * C16456) *
               C707 -
           (((C11695 + C11696) * C48072 + (C11693 + C11694) * C114) * C48027 *
                C48408 +
            ((C11186 + C11185) * C48072 + (C11184 + C11183) * C114) * C48027 *
                C16456) *
               C709 +
           (((C11478 + C11477) * C114 + (C11476 + C11475) * C48072) * C48027 *
                C16456 +
            ((C10756 * C1007 + C10754 * C1015 + C10757 * C2326 +
              C48410 * C2327) *
                 C114 +
             (C10756 * C1016 + C10754 * C1022 + C10757 * C2328 +
              C48410 * C2329) *
                 C48072) *
                C48027 * C48408) *
               C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                 C1173 +
             (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                 C1167 -
             (C26221 + C26222) * C1174 - (C26223 + C26224) * C1168 +
             (C26225 + C26226) * C1175 + (C26227 + C26228) * C48390) *
                C48027 * C16456 +
            ((C26222 + C26221) * C1173 + (C26224 + C26223) * C1167 -
             (C26226 + C26225) * C1174 - (C26228 + C26227) * C1168 +
             (C27086 + C27085) * C1175 + (C27088 + C27087) * C48390) *
                C48027 * C48408) *
               C48344 +
           (((C10986 + C10985) * C1174 -
             ((C10794 + C10793) * C1167 + (C10792 + C10791) * C1173) +
             (C10988 + C10987) * C1168 - (C10990 + C10989) * C1175 -
             (C10992 + C10991) * C48390) *
                C48027 * C16456 +
            ((C10989 + C10990) * C1174 -
             ((C10987 + C10988) * C1167 + (C10985 + C10986) * C1173) +
             (C10991 + C10992) * C1168 - (C12209 + C12210) * C1175 -
             (C12211 + C12212) * C48390) *
                C48027 * C48408) *
               C48054) *
              C48359 +
          ((((C26837 + C26838) * C1174 -
             ((C10757 * C538 + C48410 * C552 + C10756 * C533 + C10754 * C550) *
                  C1167 +
              (C10757 * C522 + C48410 * C537 + C10756 * C520 + C10754 * C534) *
                  C1173) +
             (C26839 + C26840) * C1168 - (C27263 + C27264) * C1175 -
             (C27265 + C27266) * C48390) *
                C48027 * C16456 +
            ((C27264 + C27263) * C1174 -
             ((C26840 + C26839) * C1167 + (C26838 + C26837) * C1173) +
             (C27266 + C27265) * C1168 -
             (C10757 * C6270 + C48410 * C6272 + C10756 * C1854 +
              C10754 * C1857) *
                 C1175 -
             (C10757 * C6273 + C48410 * C6276 + C10756 * C1858 +
              C10754 * C1863) *
                 C48390) *
                C48027 * C48408) *
               C48344 +
           (((C11179 + C11180) * C1173 + (C11181 + C11182) * C1167 -
             (C11690 + C11689) * C1174 - (C11692 + C11691) * C1168 +
             (C12416 + C12415) * C1175 + (C12418 + C12417) * C48390) *
                C48027 * C16456 +
            ((C11689 + C11690) * C1173 + (C11691 + C11692) * C1167 -
             (C12415 + C12416) * C1174 - (C12417 + C12418) * C1168 +
             (C10756 * C1855 + C10754 * C1859 + C10757 * C6271 +
              C48410 * C6274) *
                 C1175 +
             (C10756 * C1860 + C10754 * C1864 + C10757 * C6275 +
              C48410 * C6277) *
                 C48390) *
                C48027 * C48408) *
               C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C114 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48072) *
               C48027 * C16456 +
           ((C10756 * C305 + C10754 * C315 + C10757 * C1004 + C48410 * C1009) *
                C114 +
            (C10756 * C316 + C10754 * C335 + C10757 * C1010 + C48410 * C1019) *
                C48072) *
               C48027 * C48408) *
              C107 -
          (((C10987 + C10988) * C48072 + (C10985 + C10986) * C114) * C48027 *
               C48408 +
           ((C10794 + C10793) * C48072 + (C10792 + C10791) * C114) * C48027 *
               C16456) *
              C108 +
          (((C10798 + C10797) * C114 + (C10796 + C10795) * C48072) * C48027 *
               C16456 +
           ((C10993 + C10994) * C114 + (C10995 + C10996) * C48072) * C48027 *
               C48408) *
              C109 -
          (((C11335 + C11336) * C48072 + (C11333 + C11334) * C114) * C48027 *
               C48408 +
           ((C10802 + C10801) * C48072 + (C10800 + C10799) * C114) * C48027 *
               C16456) *
              C110 +
          (((C10806 + C10805) * C114 + (C10804 + C10803) * C48072) * C48027 *
               C16456 +
           ((C10756 * C313 + C10754 * C331 + C10757 * C1008 + C48410 * C1017) *
                C114 +
            (C10756 * C332 + C10754 * C343 + C10757 * C1018 + C48410 * C1023) *
                C48072) *
               C48027 * C48408) *
              C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C302 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C48429 -
            (C26221 + C26222) * C303 - (C26223 + C26224) * C48417 +
            (C26225 + C26226) * C304 + (C26227 + C26228) * C48390) *
               C48027 * C16456 +
           ((C26222 + C26221) * C302 + (C26224 + C26223) * C48429 -
            (C26226 + C26225) * C303 - (C26228 + C26227) * C48417 +
            (C10756 * C1272 + C10754 * C1278 + C10757 * C1854 +
             C48410 * C1857) *
                C304 +
            (C10756 * C1279 + C10754 * C1290 + C10757 * C1858 +
             C48410 * C1863) *
                C48390) *
               C48027 * C48408) *
              C299 +
          (((C10986 + C10985) * C303 -
            ((C10794 + C10793) * C48429 + (C10792 + C10791) * C302) +
            (C10988 + C10987) * C48417 - (C10990 + C10989) * C304 -
            (C10992 + C10991) * C48390) *
               C48027 * C16456 +
           ((C10989 + C10990) * C303 -
            ((C10987 + C10988) * C48429 + (C10985 + C10986) * C302) +
            (C10991 + C10992) * C48417 - (C12209 + C12210) * C304 -
            (C12211 + C12212) * C48390) *
               C48027 * C48408) *
              C300 +
          (((C10798 + C10797) * C302 + (C10796 + C10795) * C48429 -
            (C10994 + C10993) * C303 - (C10996 + C10995) * C48417 +
            (C10998 + C10997) * C304 + (C11000 + C10999) * C48390) *
               C48027 * C16456 +
           ((C10993 + C10994) * C302 + (C10995 + C10996) * C48429 -
            (C10997 + C10998) * C303 - (C10999 + C11000) * C48417 +
            (C10756 * C1276 + C10754 * C1286 + C10757 * C1856 +
             C48410 * C1861) *
                C304 +
            (C10756 * C1287 + C10754 * C1294 + C10757 * C1862 +
             C48410 * C1865) *
                C48390) *
               C48027 * C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
                C1173 +
            (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
                C1167 -
            (C26221 + C26222) * C1174 - (C26223 + C26224) * C1168 +
            (C26225 + C26226) * C1175 + (C26227 + C26228) * C48390) *
               C48027 * C16456 +
           ((C26222 + C26221) * C1173 + (C26224 + C26223) * C1167 -
            (C26226 + C26225) * C1174 - (C26228 + C26227) * C1168 +
            (C10756 * C1272 + C10754 * C1278 + C10757 * C1854 +
             C48410 * C1857) *
                C1175 +
            (C10756 * C1279 + C10754 * C1290 + C10757 * C1858 +
             C48410 * C1863) *
                C48390) *
               C48027 * C48408) *
              C48426 +
          (((C10986 + C10985) * C1174 -
            ((C10794 + C10793) * C1167 + (C10792 + C10791) * C1173) +
            (C10988 + C10987) * C1168 - (C10990 + C10989) * C1175 -
            (C10992 + C10991) * C48390) *
               C48027 * C16456 +
           ((C10989 + C10990) * C1174 -
            ((C10987 + C10988) * C1167 + (C10985 + C10986) * C1173) +
            (C10991 + C10992) * C1168 - (C12209 + C12210) * C1175 -
            (C12211 + C12212) * C48390) *
               C48027 * C48408) *
              C48413 +
          (((C10798 + C10797) * C1173 + (C10796 + C10795) * C1167 -
            (C10994 + C10993) * C1174 - (C10996 + C10995) * C1168 +
            (C10998 + C10997) * C1175 + (C11000 + C10999) * C48390) *
               C48027 * C16456 +
           ((C10993 + C10994) * C1173 + (C10995 + C10996) * C1167 -
            (C10997 + C10998) * C1174 - (C10999 + C11000) * C1168 +
            (C10756 * C1276 + C10754 * C1286 + C10757 * C1856 +
             C48410 * C1861) *
                C1175 +
            (C10756 * C1287 + C10754 * C1294 + C10757 * C1862 +
             C48410 * C1865) *
                C48390) *
               C48027 * C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C10756 * C115 + C10754 * C122 + C10757 * C520 + C48410 * C534) *
               C1267 +
           (C10756 * C123 + C10754 * C136 + C10757 * C533 + C48410 * C550) *
               C1261 -
           (C26221 + C26222) * C1268 - (C26223 + C26224) * C1262 +
           (C26225 + C26226) * C1269 + (C26227 + C26228) * C1263 -
           (C27085 + C27086) * C1270 - (C27087 + C27088) * C1264 +
           (C27089 + C27090) * C1271 + (C27091 + C27092) * C1265) *
              C48027 * C16456 +
          ((C26222 + C26221) * C1267 + (C26224 + C26223) * C1261 -
           (C26226 + C26225) * C1268 - (C26228 + C26227) * C1262 +
           (C27086 + C27085) * C1269 + (C27088 + C27087) * C1263 -
           (C27090 + C27089) * C1270 - (C27092 + C27091) * C1264 +
           (C10756 * C6098 + C10754 * C6100 + C10757 * C23096 +
            C48410 * C23097) *
               C1271 +
           (C10756 * C6101 + C10754 * C6104 + C10757 * C23098 +
            C48410 * C23099) *
               C1265) *
              C48027 * C48408) *
         C48044 * C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C47015 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48131 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C47007 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C48138 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C47021 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C3108) *
               C16454 +
           ((C31667 + C31668) * C47015 + (C31669 + C31670) * C48131 -
            (C31861 + C31862) * C47007 - (C31863 + C31864) * C48138 +
            (C31865 + C31866) * C47021 + (C31867 + C31868) * C3108) *
               C48377) *
              C48278 * C48049 +
          (((C31862 + C31861) * C47007 -
            ((C31670 + C31669) * C48131 + (C31668 + C31667) * C47015) +
            (C31864 + C31863) * C48138 - (C31866 + C31865) * C47021 -
            (C31868 + C31867) * C3108) *
               C16454 +
           ((C31869 + C31870) * C47007 -
            ((C31671 + C31672) * C48131 + (C31673 + C31674) * C47015) +
            (C31871 + C31872) * C48138 - (C31873 + C31874) * C47021 -
            (C31875 + C31876) * C3108) *
               C48377) *
              C48278 * C48057 +
          (((C31674 + C31673) * C47015 + (C31672 + C31671) * C48131 -
            (C31870 + C31869) * C47007 - (C31872 + C31871) * C48138 +
            (C31874 + C31873) * C47021 + (C31876 + C31875) * C3108) *
               C16454 +
           ((C31675 + C31676) * C47015 + (C31677 + C31678) * C48131 -
            (C32209 + C32210) * C47007 - (C32211 + C32212) * C48138 +
            (C31632 * C312 + C31630 * C329 + C31633 * C1728 + C48410 * C1729) *
                C47021 +
            (C31632 * C330 + C31630 * C342 + C31633 * C1730 + C48410 * C1731) *
                C3108) *
               C48377) *
              C48278 * C3111) *
         C48090) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C47015 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48131 -
             (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                 C47007 -
             (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                 C48138 +
             (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                 C47021 +
             (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                 C3108) *
                C16454 +
            ((C31667 + C31668) * C47015 + (C31669 + C31670) * C48131 -
             (C31861 + C31862) * C47007 - (C31863 + C31864) * C48138 +
             (C31865 + C31866) * C47021 + (C31867 + C31868) * C3108) *
                C48377) *
               C48278 * C2812 +
           (((C31862 + C31861) * C47007 -
             ((C31670 + C31669) * C48131 + (C31668 + C31667) * C47015) +
             (C31864 + C31863) * C48138 - (C31866 + C31865) * C47021 -
             (C31868 + C31867) * C3108) *
                C16454 +
            ((C31869 + C31870) * C47007 -
             ((C31671 + C31672) * C48131 + (C31673 + C31674) * C47015) +
             (C31871 + C31872) * C48138 - (C31873 + C31874) * C47021 -
             (C31875 + C31876) * C3108) *
                C48377) *
               C48278 * C48054) *
              C48359 +
          ((((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
              C48410 * C1421) *
                 C47007 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C48131 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C47015) +
             (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
              C48410 * C1436) *
                 C48138 -
             (C31633 * C1410 + C48410 * C1423 + C31632 * C1406 +
              C31630 * C1415) *
                 C47021 -
             (C31633 * C1424 + C48410 * C1437 + C31632 * C1416 +
              C31630 * C1433) *
                 C3108) *
                C16454 +
            ((C32565 + C32566) * C47007 -
             ((C32058 + C32057) * C48131 + (C32056 + C32055) * C47015) +
             (C32567 + C32568) * C48138 - (C33291 + C33292) * C47021 -
             (C33293 + C33294) * C3108) *
                C48377) *
               C48278 * C2812 +
           (((C32055 + C32056) * C47015 + (C32057 + C32058) * C48131 -
             (C32566 + C32565) * C47007 - (C32568 + C32567) * C48138 +
             (C33292 + C33291) * C47021 + (C33294 + C33293) * C3108) *
                C16454 +
            ((C32059 + C32060) * C47015 + (C32061 + C32062) * C48131 -
             (C32569 + C32570) * C47007 - (C32571 + C32572) * C48138 +
             (C31632 * C1408 + C31630 * C1419 + C31633 * C1414 +
              C48410 * C1431) *
                 C47021 +
             (C31632 * C1420 + C31630 * C1435 + C31633 * C1432 +
              C48410 * C1441) *
                 C3108) *
                C48377) *
               C48278 * C48054) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C2814 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48436 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C2815 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C48432 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C2816 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C48422 -
            (C31633 * C1854 + C48410 * C1857 + C31632 * C1272 +
             C31630 * C1278) *
                C2817 -
            (C31633 * C1858 + C48410 * C1863 + C31632 * C1279 +
             C31630 * C1290) *
                C48400) *
               C16454 +
           ((C31667 + C31668) * C2814 + (C31669 + C31670) * C48436 -
            (C31861 + C31862) * C2815 - (C31863 + C31864) * C48432 +
            (C31865 + C31866) * C2816 + (C31867 + C31868) * C48422 -
            (C33085 + C33086) * C2817 - (C33087 + C33088) * C48400) *
               C48377) *
              C48278 * C2812 +
          (((C31862 + C31861) * C2815 -
            ((C31670 + C31669) * C48436 + (C31668 + C31667) * C2814) +
            (C31864 + C31863) * C48432 - (C31866 + C31865) * C2816 -
            (C31868 + C31867) * C48422 + (C33086 + C33085) * C2817 +
            (C33088 + C33087) * C48400) *
               C16454 +
           ((C31869 + C31870) * C2815 -
            ((C31671 + C31672) * C48436 + (C31673 + C31674) * C2814) +
            (C31871 + C31872) * C48432 - (C31873 + C31874) * C2816 -
            (C31875 + C31876) * C48422 +
            (C31632 * C1276 + C31630 * C1286 + C31633 * C1856 +
             C48410 * C1861) *
                C2817 +
            (C31632 * C1287 + C31630 * C1294 + C31633 * C1862 +
             C48410 * C1865) *
                C48400) *
               C48377) *
              C48278 * C48054) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C2686 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C2680 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C2687 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C48135) *
               C16454 +
           ((C31667 + C31668) * C2686 + (C31669 + C31670) * C2680 -
            (C31861 + C31862) * C2687 - (C31863 + C31864) * C48135) *
               C48377) *
              C48278 * C48435 +
          (((C31862 + C31861) * C2687 -
            ((C31670 + C31669) * C2680 + (C31668 + C31667) * C2686) +
            (C31864 + C31863) * C48135) *
               C16454 +
           ((C31869 + C31870) * C2687 -
            ((C31671 + C31672) * C2680 + (C31673 + C31674) * C2686) +
            (C31871 + C31872) * C48135) *
               C48377) *
              C48278 * C48428 +
          (((C31674 + C31673) * C2686 + (C31672 + C31671) * C2680 -
            (C31870 + C31869) * C2687 - (C31872 + C31871) * C48135) *
               C16454 +
           ((C31675 + C31676) * C2686 + (C31677 + C31678) * C2680 -
            (C32209 + C32210) * C2687 - (C32211 + C32212) * C48135) *
               C48377) *
              C48278 * C48415 +
          (((C32210 + C32209) * C2687 -
            ((C31678 + C31677) * C2680 + (C31676 + C31675) * C2686) +
            (C32212 + C32211) * C48135) *
               C16454 +
           ((C31632 * C313 + C31630 * C331 + C31633 * C1008 + C48410 * C1017) *
                C2687 -
            ((C31679 + C31680) * C2680 + (C31681 + C31682) * C2686) +
            (C31632 * C332 + C31630 * C343 + C31633 * C1018 + C48410 * C1023) *
                C48135) *
               C48377) *
              C48278 * C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C2686 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C2680 -
             (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                 C2687 -
             (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                 C48135) *
                C16454 +
            ((C31667 + C31668) * C2686 + (C31669 + C31670) * C2680 -
             (C31861 + C31862) * C2687 - (C31863 + C31864) * C48135) *
                C48377) *
               C48278 * C2812 +
           (((C31862 + C31861) * C2687 -
             ((C31670 + C31669) * C2680 + (C31668 + C31667) * C2686) +
             (C31864 + C31863) * C48135) *
                C16454 +
            ((C31869 + C31870) * C2687 -
             ((C31671 + C31672) * C2680 + (C31673 + C31674) * C2686) +
             (C31871 + C31872) * C48135) *
                C48377) *
               C48278 * C48054) *
              C48430 +
          ((((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
              C48410 * C1421) *
                 C2687 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C2680 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C2686) +
             (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
              C48410 * C1436) *
                 C48135) *
                C16454 +
            ((C32565 + C32566) * C2687 -
             ((C32058 + C32057) * C2680 + (C32056 + C32055) * C2686) +
             (C32567 + C32568) * C48135) *
                C48377) *
               C48278 * C2812 +
           (((C32055 + C32056) * C2686 + (C32057 + C32058) * C2680 -
             (C32566 + C32565) * C2687 - (C32568 + C32567) * C48135) *
                C16454 +
            ((C32059 + C32060) * C2686 + (C32061 + C32062) * C2680 -
             (C32569 + C32570) * C2687 - (C32571 + C32572) * C48135) *
                C48377) *
               C48278 * C48054) *
              C48419 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C2686 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C2680 -
             (C31633 * C2570 + C48410 * C2573 + C31632 * C1409 +
              C31630 * C1421) *
                 C2687 -
             (C31633 * C2574 + C48410 * C2579 + C31632 * C1422 +
              C31630 * C1436) *
                 C48135) *
                C16454 +
            ((C32063 + C32064) * C2686 + (C32065 + C32066) * C2680 -
             (C34001 + C34002) * C2687 - (C34003 + C34004) * C48135) *
                C48377) *
               C48278 * C2812 +
           (((C34002 + C34001) * C2687 -
             ((C32066 + C32065) * C2680 + (C32064 + C32063) * C2686) +
             (C34004 + C34003) * C48135) *
                C16454 +
            ((C31632 * C1413 + C31630 * C1429 + C31633 * C2572 +
              C48410 * C2577) *
                 C2687 -
             ((C32067 + C32068) * C2680 + (C32069 + C32070) * C2686) +
             (C31632 * C1430 + C31630 * C1440 + C31633 * C2578 +
              C48410 * C2581) *
                 C48135) *
                C48377) *
               C48278 * C48054) *
              C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C2686 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C2680 -
             (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                 C2687 -
             (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                 C48135) *
                C16454 +
            ((C31667 + C31668) * C2686 + (C31669 + C31670) * C2680 -
             (C31861 + C31862) * C2687 - (C31863 + C31864) * C48135) *
                C48377) *
               C48278 * C48049 +
           (((C31862 + C31861) * C2687 -
             ((C31670 + C31669) * C2680 + (C31668 + C31667) * C2686) +
             (C31864 + C31863) * C48135) *
                C16454 +
            ((C31869 + C31870) * C2687 -
             ((C31671 + C31672) * C2680 + (C31673 + C31674) * C2686) +
             (C31871 + C31872) * C48135) *
                C48377) *
               C48278 * C48057 +
           (((C31674 + C31673) * C2686 + (C31672 + C31671) * C2680 -
             (C31870 + C31869) * C2687 - (C31872 + C31871) * C48135) *
                C16454 +
            ((C31675 + C31676) * C2686 + (C31677 + C31678) * C2680 -
             (C32209 + C32210) * C2687 - (C32211 + C32212) * C48135) *
                C48377) *
               C48278 * C3111) *
              C48359 +
          ((((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
              C48410 * C1421) *
                 C2687 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C2680 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C2686) +
             (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
              C48410 * C1436) *
                 C48135) *
                C16454 +
            ((C32565 + C32566) * C2687 -
             ((C32058 + C32057) * C2680 + (C32056 + C32055) * C2686) +
             (C32567 + C32568) * C48135) *
                C48377) *
               C48278 * C48049 +
           (((C32055 + C32056) * C2686 + (C32057 + C32058) * C2680 -
             (C32566 + C32565) * C2687 - (C32568 + C32567) * C48135) *
                C16454 +
            ((C32059 + C32060) * C2686 + (C32061 + C32062) * C2680 -
             (C32569 + C32570) * C2687 - (C32571 + C32572) * C48135) *
                C48377) *
               C48278 * C48057 +
           (((C32570 + C32569) * C2687 -
             ((C32062 + C32061) * C2680 + (C32060 + C32059) * C2686) +
             (C32572 + C32571) * C48135) *
                C16454 +
            ((C31632 * C1007 + C31630 * C1015 + C31633 * C2326 +
              C48410 * C2327) *
                 C2687 -
             ((C32351 + C32352) * C2680 + (C32353 + C32354) * C2686) +
             (C31632 * C1016 + C31630 * C1022 + C31633 * C2328 +
              C48410 * C2329) *
                 C48135) *
                C48377) *
               C48278 * C3111) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C2686 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C2680 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C2687 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C48135) *
               C16454 +
           ((C31667 + C31668) * C2686 + (C31669 + C31670) * C2680 -
            (C31861 + C31862) * C2687 - (C31863 + C31864) * C48135) *
               C48377) *
              C48278 * C48435 +
          (((C31862 + C31861) * C2687 -
            ((C31670 + C31669) * C2680 + (C31668 + C31667) * C2686) +
            (C31864 + C31863) * C48135) *
               C16454 +
           ((C31869 + C31870) * C2687 -
            ((C31671 + C31672) * C2680 + (C31673 + C31674) * C2686) +
            (C31871 + C31872) * C48135) *
               C48377) *
              C48278 * C48428 +
          (((C31674 + C31673) * C2686 + (C31672 + C31671) * C2680 -
            (C31870 + C31869) * C2687 - (C31872 + C31871) * C48135) *
               C16454 +
           ((C31675 + C31676) * C2686 + (C31677 + C31678) * C2680 -
            (C32209 + C32210) * C2687 - (C32211 + C32212) * C48135) *
               C48377) *
              C48278 * C48415 +
          (((C32210 + C32209) * C2687 -
            ((C31678 + C31677) * C2680 + (C31676 + C31675) * C2686) +
            (C32212 + C32211) * C48135) *
               C16454 +
           ((C31632 * C313 + C31630 * C331 + C31633 * C1008 + C48410 * C1017) *
                C2687 -
            ((C31679 + C31680) * C2680 + (C31681 + C31682) * C2686) +
            (C31632 * C332 + C31630 * C343 + C31633 * C1018 + C48410 * C1023) *
                C48135) *
               C48377) *
              C48278 * C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C2814 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48436 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C2815 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C48432 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C2816 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C48422 -
            (C31633 * C1854 + C48410 * C1857 + C31632 * C1272 +
             C31630 * C1278) *
                C2817 -
            (C31633 * C1858 + C48410 * C1863 + C31632 * C1279 +
             C31630 * C1290) *
                C48400) *
               C16454 +
           ((C31667 + C31668) * C2814 + (C31669 + C31670) * C48436 -
            (C31861 + C31862) * C2815 - (C31863 + C31864) * C48432 +
            (C31865 + C31866) * C2816 + (C31867 + C31868) * C48422 -
            (C33085 + C33086) * C2817 - (C33087 + C33088) * C48400) *
               C48377) *
              C48278 * C2812 +
          (((C31862 + C31861) * C2815 -
            ((C31670 + C31669) * C48436 + (C31668 + C31667) * C2814) +
            (C31864 + C31863) * C48432 - (C31866 + C31865) * C2816 -
            (C31868 + C31867) * C48422 + (C33086 + C33085) * C2817 +
            (C33088 + C33087) * C48400) *
               C16454 +
           ((C31869 + C31870) * C2815 -
            ((C31671 + C31672) * C48436 + (C31673 + C31674) * C2814) +
            (C31871 + C31872) * C48432 - (C31873 + C31874) * C2816 -
            (C31875 + C31876) * C48422 +
            (C31632 * C1276 + C31630 * C1286 + C31633 * C1856 +
             C48410 * C1861) *
                C2817 +
            (C31632 * C1287 + C31630 * C1294 + C31633 * C1862 +
             C48410 * C1865) *
                C48400) *
               C48377) *
              C48278 * C48054) *
         C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C47015 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48131 -
             (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                 C47007 -
             (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                 C48138 +
             (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                 C47021 +
             (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                 C3108) *
                C16454 +
            ((C31667 + C31668) * C47015 + (C31669 + C31670) * C48131 -
             (C31861 + C31862) * C47007 - (C31863 + C31864) * C48138 +
             (C31865 + C31866) * C47021 + (C31867 + C31868) * C3108) *
                C48377) *
               C48278 * C48344 +
           (((C31862 + C31861) * C47007 -
             ((C31670 + C31669) * C48131 + (C31668 + C31667) * C47015) +
             (C31864 + C31863) * C48138 - (C31866 + C31865) * C47021 -
             (C31868 + C31867) * C3108) *
                C16454 +
            ((C31869 + C31870) * C47007 -
             ((C31671 + C31672) * C48131 + (C31673 + C31674) * C47015) +
             (C31871 + C31872) * C48138 - (C31873 + C31874) * C47021 -
             (C31875 + C31876) * C3108) *
                C48377) *
               C48278 * C48054) *
              C3547 +
          ((((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
              C48410 * C1421) *
                 C47007 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C48131 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C47015) +
             (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
              C48410 * C1436) *
                 C48138 -
             (C31633 * C1410 + C48410 * C1423 + C31632 * C1406 +
              C31630 * C1415) *
                 C47021 -
             (C31633 * C1424 + C48410 * C1437 + C31632 * C1416 +
              C31630 * C1433) *
                 C3108) *
                C16454 +
            ((C32565 + C32566) * C47007 -
             ((C32058 + C32057) * C48131 + (C32056 + C32055) * C47015) +
             (C32567 + C32568) * C48138 - (C33291 + C33292) * C47021 -
             (C33293 + C33294) * C3108) *
                C48377) *
               C48278 * C48344 +
           (((C32055 + C32056) * C47015 + (C32057 + C32058) * C48131 -
             (C32566 + C32565) * C47007 - (C32568 + C32567) * C48138 +
             (C33292 + C33291) * C47021 + (C33294 + C33293) * C3108) *
                C16454 +
            ((C32059 + C32060) * C47015 + (C32061 + C32062) * C48131 -
             (C32569 + C32570) * C47007 - (C32571 + C32572) * C48138 +
             (C31632 * C1408 + C31630 * C1419 + C31633 * C1414 +
              C48410 * C1431) *
                 C47021 +
             (C31632 * C1420 + C31630 * C1435 + C31633 * C1432 +
              C48410 * C1441) *
                 C3108) *
                C48377) *
               C48278 * C48054) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C47015 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48131 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C47007 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C48138 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C47021 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C3108) *
               C16454 +
           ((C31667 + C31668) * C47015 + (C31669 + C31670) * C48131 -
            (C31861 + C31862) * C47007 - (C31863 + C31864) * C48138 +
            (C31865 + C31866) * C47021 + (C31867 + C31868) * C3108) *
               C48377) *
              C48278 * C48044 * C48173 +
          (((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
             C48410 * C1421) *
                C47007 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48131 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C47015) +
            (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
             C48410 * C1436) *
                C48138 -
            (C31633 * C1410 + C48410 * C1423 + C31632 * C1406 +
             C31630 * C1415) *
                C47021 -
            (C31633 * C1424 + C48410 * C1437 + C31632 * C1416 +
             C31630 * C1433) *
                C3108) *
               C16454 +
           ((C32565 + C32566) * C47007 -
            ((C32058 + C32057) * C48131 + (C32056 + C32055) * C47015) +
            (C32567 + C32568) * C48138 - (C33291 + C33292) * C47021 -
            (C33293 + C33294) * C3108) *
               C48377) *
              C48278 * C48044 * C48180 +
          (((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                C47015 +
            (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                C48131 -
            (C31633 * C2570 + C48410 * C2573 + C31632 * C1409 +
             C31630 * C1421) *
                C47007 -
            (C31633 * C2574 + C48410 * C2579 + C31632 * C1422 +
             C31630 * C1436) *
                C48138 +
            (C31632 * C1410 + C31630 * C1423 + C31633 * C7638 +
             C48410 * C7640) *
                C47021 +
            (C31632 * C1424 + C31630 * C1437 + C31633 * C7641 +
             C48410 * C7644) *
                C3108) *
               C16454 +
           ((C32063 + C32064) * C47015 + (C32065 + C32066) * C48131 -
            (C34001 + C34002) * C47007 - (C34003 + C34004) * C48138 +
            (C31632 * C1412 + C31630 * C1427 + C31633 * C7639 +
             C48410 * C7642) *
                C47021 +
            (C31632 * C1428 + C31630 * C1439 + C31633 * C7643 +
             C48410 * C7645) *
                C3108) *
               C48377) *
              C48278 * C48044 * C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C2814 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48436 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C2815 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C48432 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C2816 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C48422 -
            (C31633 * C1854 + C48410 * C1857 + C31632 * C1272 +
             C31630 * C1278) *
                C2817 -
            (C31633 * C1858 + C48410 * C1863 + C31632 * C1279 +
             C31630 * C1290) *
                C48400) *
               C16454 +
           ((C31667 + C31668) * C2814 + (C31669 + C31670) * C48436 -
            (C31861 + C31862) * C2815 - (C31863 + C31864) * C48432 +
            (C31865 + C31866) * C2816 + (C31867 + C31868) * C48422 -
            (C33085 + C33086) * C2817 - (C33087 + C33088) * C48400) *
               C48377) *
              C48278 * C48044 * C3547 +
          (((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
             C48410 * C1421) *
                C2815 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48436 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C2814) +
            (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
             C48410 * C1436) *
                C48432 -
            (C31633 * C1410 + C48410 * C1423 + C31632 * C1406 +
             C31630 * C1415) *
                C2816 -
            (C31633 * C1424 + C48410 * C1437 + C31632 * C1416 +
             C31630 * C1433) *
                C48422 +
            (C31632 * C1854 + C31630 * C1857 + C31633 * C6270 +
             C48410 * C6272) *
                C2817 +
            (C31632 * C1858 + C31630 * C1863 + C31633 * C6273 +
             C48410 * C6276) *
                C48400) *
               C16454 +
           ((C32565 + C32566) * C2815 -
            ((C32058 + C32057) * C48436 + (C32056 + C32055) * C2814) +
            (C32567 + C32568) * C48432 - (C33291 + C33292) * C2816 -
            (C33293 + C33294) * C48422 +
            (C31632 * C1855 + C31630 * C1859 + C31633 * C6271 +
             C48410 * C6274) *
                C2817 +
            (C31632 * C1860 + C31630 * C1864 + C31633 * C6275 +
             C48410 * C6277) *
                C48400) *
               C48377) *
              C48278 * C48044 * C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C2686 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C2680 -
             (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                 C2687 -
             (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                 C48135) *
                C16454 +
            ((C31667 + C31668) * C2686 + (C31669 + C31670) * C2680 -
             (C31861 + C31862) * C2687 - (C31863 + C31864) * C48135) *
                C48377) *
               C48278 * C48426 +
           (((C31862 + C31861) * C2687 -
             ((C31670 + C31669) * C2680 + (C31668 + C31667) * C2686) +
             (C31864 + C31863) * C48135) *
                C16454 +
            ((C31869 + C31870) * C2687 -
             ((C31671 + C31672) * C2680 + (C31673 + C31674) * C2686) +
             (C31871 + C31872) * C48135) *
                C48377) *
               C48278 * C48413 +
           (((C31674 + C31673) * C2686 + (C31672 + C31671) * C2680 -
             (C31870 + C31869) * C2687 - (C31872 + C31871) * C48135) *
                C16454 +
            ((C31675 + C31676) * C2686 + (C31677 + C31678) * C2680 -
             (C32209 + C32210) * C2687 - (C32211 + C32212) * C48135) *
                C48377) *
               C48278 * C48384) *
              C3547 +
          ((((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
              C48410 * C1421) *
                 C2687 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C2680 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C2686) +
             (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
              C48410 * C1436) *
                 C48135) *
                C16454 +
            ((C32565 + C32566) * C2687 -
             ((C32058 + C32057) * C2680 + (C32056 + C32055) * C2686) +
             (C32567 + C32568) * C48135) *
                C48377) *
               C48278 * C48426 +
           (((C32055 + C32056) * C2686 + (C32057 + C32058) * C2680 -
             (C32566 + C32565) * C2687 - (C32568 + C32567) * C48135) *
                C16454 +
            ((C32059 + C32060) * C2686 + (C32061 + C32062) * C2680 -
             (C32569 + C32570) * C2687 - (C32571 + C32572) * C48135) *
                C48377) *
               C48278 * C48413 +
           (((C32570 + C32569) * C2687 -
             ((C32062 + C32061) * C2680 + (C32060 + C32059) * C2686) +
             (C32572 + C32571) * C48135) *
                C16454 +
            ((C31632 * C1007 + C31630 * C1015 + C31633 * C2326 +
              C48410 * C2327) *
                 C2687 -
             ((C32351 + C32352) * C2680 + (C32353 + C32354) * C2686) +
             (C31632 * C1016 + C31630 * C1022 + C31633 * C2328 +
              C48410 * C2329) *
                 C48135) *
                C48377) *
               C48278 * C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C2686 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C2680 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C2687 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C48135) *
               C16454 +
           ((C31667 + C31668) * C2686 + (C31669 + C31670) * C2680 -
            (C31861 + C31862) * C2687 - (C31863 + C31864) * C48135) *
               C48377) *
              C48278 * C48044 * C48437 +
          (((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
             C48410 * C1421) *
                C2687 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C2680 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C2686) +
            (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
             C48410 * C1436) *
                C48135) *
               C16454 +
           ((C32565 + C32566) * C2687 -
            ((C32058 + C32057) * C2680 + (C32056 + C32055) * C2686) +
            (C32567 + C32568) * C48135) *
               C48377) *
              C48278 * C48044 * C48434 +
          (((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                C2686 +
            (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                C2680 -
            (C31633 * C2570 + C48410 * C2573 + C31632 * C1409 +
             C31630 * C1421) *
                C2687 -
            (C31633 * C2574 + C48410 * C2579 + C31632 * C1422 +
             C31630 * C1436) *
                C48135) *
               C16454 +
           ((C32063 + C32064) * C2686 + (C32065 + C32066) * C2680 -
            (C34001 + C34002) * C2687 - (C34003 + C34004) * C48135) *
               C48377) *
              C48278 * C48044 * C48425 +
          (((C31632 * C2570 + C31630 * C2573 + C31633 * C7164 +
             C48410 * C7166) *
                C2687 -
            ((C31633 * C2169 + C48410 * C2177 + C31632 * C2166 +
              C31630 * C2176) *
                 C2680 +
             (C31633 * C2159 + C48410 * C2168 + C31632 * C2158 +
              C31630 * C2167) *
                 C2686) +
            (C31632 * C2574 + C31630 * C2579 + C31633 * C7167 +
             C48410 * C7170) *
                C48135) *
               C16454 +
           ((C31632 * C2571 + C31630 * C2575 + C31633 * C7165 +
             C48410 * C7168) *
                C2687 -
            ((C34146 + C34145) * C2680 + (C34144 + C34143) * C2686) +
            (C31632 * C2576 + C31630 * C2580 + C31633 * C7169 +
             C48410 * C7171) *
                C48135) *
               C48377) *
              C48278 * C48044 * C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C2686 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C2680 -
             (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                 C2687 -
             (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                 C48135) *
                C16454 +
            ((C31667 + C31668) * C2686 + (C31669 + C31670) * C2680 -
             (C31861 + C31862) * C2687 - (C31863 + C31864) * C48135) *
                C48377) *
               C48278 * C48344 +
           (((C31862 + C31861) * C2687 -
             ((C31670 + C31669) * C2680 + (C31668 + C31667) * C2686) +
             (C31864 + C31863) * C48135) *
                C16454 +
            ((C31869 + C31870) * C2687 -
             ((C31671 + C31672) * C2680 + (C31673 + C31674) * C2686) +
             (C31871 + C31872) * C48135) *
                C48377) *
               C48278 * C48054) *
              C48173 +
          ((((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
              C48410 * C1421) *
                 C2687 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C2680 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C2686) +
             (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
              C48410 * C1436) *
                 C48135) *
                C16454 +
            ((C32565 + C32566) * C2687 -
             ((C32058 + C32057) * C2680 + (C32056 + C32055) * C2686) +
             (C32567 + C32568) * C48135) *
                C48377) *
               C48278 * C48344 +
           (((C32055 + C32056) * C2686 + (C32057 + C32058) * C2680 -
             (C32566 + C32565) * C2687 - (C32568 + C32567) * C48135) *
                C16454 +
            ((C32059 + C32060) * C2686 + (C32061 + C32062) * C2680 -
             (C32569 + C32570) * C2687 - (C32571 + C32572) * C48135) *
                C48377) *
               C48278 * C48054) *
              C48180 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C2686 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C2680 -
             (C31633 * C2570 + C48410 * C2573 + C31632 * C1409 +
              C31630 * C1421) *
                 C2687 -
             (C31633 * C2574 + C48410 * C2579 + C31632 * C1422 +
              C31630 * C1436) *
                 C48135) *
                C16454 +
            ((C32063 + C32064) * C2686 + (C32065 + C32066) * C2680 -
             (C34001 + C34002) * C2687 - (C34003 + C34004) * C48135) *
                C48377) *
               C48278 * C48344 +
           (((C34002 + C34001) * C2687 -
             ((C32066 + C32065) * C2680 + (C32064 + C32063) * C2686) +
             (C34004 + C34003) * C48135) *
                C16454 +
            ((C31632 * C1413 + C31630 * C1429 + C31633 * C2572 +
              C48410 * C2577) *
                 C2687 -
             ((C32067 + C32068) * C2680 + (C32069 + C32070) * C2686) +
             (C31632 * C1430 + C31630 * C1440 + C31633 * C2578 +
              C48410 * C2581) *
                 C48135) *
                C48377) *
               C48278 * C48054) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C2686 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C2680 -
             (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                 C2687 -
             (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                 C48135) *
                C16454 +
            ((C31667 + C31668) * C2686 + (C31669 + C31670) * C2680 -
             (C31861 + C31862) * C2687 - (C31863 + C31864) * C48135) *
                C48377) *
               C48278 * C48426 +
           (((C31862 + C31861) * C2687 -
             ((C31670 + C31669) * C2680 + (C31668 + C31667) * C2686) +
             (C31864 + C31863) * C48135) *
                C16454 +
            ((C31869 + C31870) * C2687 -
             ((C31671 + C31672) * C2680 + (C31673 + C31674) * C2686) +
             (C31871 + C31872) * C48135) *
                C48377) *
               C48278 * C48413 +
           (((C31674 + C31673) * C2686 + (C31672 + C31671) * C2680 -
             (C31870 + C31869) * C2687 - (C31872 + C31871) * C48135) *
                C16454 +
            ((C31675 + C31676) * C2686 + (C31677 + C31678) * C2680 -
             (C32209 + C32210) * C2687 - (C32211 + C32212) * C48135) *
                C48377) *
               C48278 * C48384) *
              C3547 +
          ((((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
              C48410 * C1421) *
                 C2687 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C2680 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C2686) +
             (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
              C48410 * C1436) *
                 C48135) *
                C16454 +
            ((C32565 + C32566) * C2687 -
             ((C32058 + C32057) * C2680 + (C32056 + C32055) * C2686) +
             (C32567 + C32568) * C48135) *
                C48377) *
               C48278 * C48426 +
           (((C32055 + C32056) * C2686 + (C32057 + C32058) * C2680 -
             (C32566 + C32565) * C2687 - (C32568 + C32567) * C48135) *
                C16454 +
            ((C32059 + C32060) * C2686 + (C32061 + C32062) * C2680 -
             (C32569 + C32570) * C2687 - (C32571 + C32572) * C48135) *
                C48377) *
               C48278 * C48413 +
           (((C32570 + C32569) * C2687 -
             ((C32062 + C32061) * C2680 + (C32060 + C32059) * C2686) +
             (C32572 + C32571) * C48135) *
                C16454 +
            ((C31632 * C1007 + C31630 * C1015 + C31633 * C2326 +
              C48410 * C2327) *
                 C2687 -
             ((C32351 + C32352) * C2680 + (C32353 + C32354) * C2686) +
             (C31632 * C1016 + C31630 * C1022 + C31633 * C2328 +
              C48410 * C2329) *
                 C48135) *
                C48377) *
               C48278 * C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C2814 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48436 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C2815 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C48432 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C2816 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C48422 -
            (C31633 * C1854 + C48410 * C1857 + C31632 * C1272 +
             C31630 * C1278) *
                C2817 -
            (C31633 * C1858 + C48410 * C1863 + C31632 * C1279 +
             C31630 * C1290) *
                C48400) *
               C16454 +
           ((C31667 + C31668) * C2814 + (C31669 + C31670) * C48436 -
            (C31861 + C31862) * C2815 - (C31863 + C31864) * C48432 +
            (C31865 + C31866) * C2816 + (C31867 + C31868) * C48422 -
            (C33085 + C33086) * C2817 - (C33087 + C33088) * C48400) *
               C48377) *
              C48278 * C48044 * C3547 +
          (((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
             C48410 * C1421) *
                C2815 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48436 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C2814) +
            (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
             C48410 * C1436) *
                C48432 -
            (C31633 * C1410 + C48410 * C1423 + C31632 * C1406 +
             C31630 * C1415) *
                C2816 -
            (C31633 * C1424 + C48410 * C1437 + C31632 * C1416 +
             C31630 * C1433) *
                C48422 +
            (C31632 * C1854 + C31630 * C1857 + C31633 * C6270 +
             C48410 * C6272) *
                C2817 +
            (C31632 * C1858 + C31630 * C1863 + C31633 * C6273 +
             C48410 * C6276) *
                C48400) *
               C16454 +
           ((C32565 + C32566) * C2815 -
            ((C32058 + C32057) * C48436 + (C32056 + C32055) * C2814) +
            (C32567 + C32568) * C48432 - (C33291 + C33292) * C2816 -
            (C33293 + C33294) * C48422 +
            (C31632 * C1855 + C31630 * C1859 + C31633 * C6271 +
             C48410 * C6274) *
                C2817 +
            (C31632 * C1860 + C31630 * C1864 + C31633 * C6275 +
             C48410 * C6277) *
                C48400) *
               C48377) *
              C48278 * C48044 * C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C1546 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C1540 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C1547 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C1541 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C1548 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C1542 -
            (C31633 * C1854 + C48410 * C1857 + C31632 * C1272 +
             C31630 * C1278) *
                C1549 -
            (C31633 * C1858 + C48410 * C1863 + C31632 * C1279 +
             C31630 * C1290) *
                C48400) *
               C16454 +
           ((C31667 + C31668) * C1546 + (C31669 + C31670) * C1540 -
            (C31861 + C31862) * C1547 - (C31863 + C31864) * C1541 +
            (C31865 + C31866) * C1548 + (C31867 + C31868) * C1542 -
            (C33085 + C33086) * C1549 - (C33087 + C33088) * C48400) *
               C48377) *
              C48278 * C48344 +
          (((C31862 + C31861) * C1547 -
            ((C31670 + C31669) * C1540 + (C31668 + C31667) * C1546) +
            (C31864 + C31863) * C1541 - (C31866 + C31865) * C1548 -
            (C31868 + C31867) * C1542 + (C33086 + C33085) * C1549 +
            (C33088 + C33087) * C48400) *
               C16454 +
           ((C31869 + C31870) * C1547 -
            ((C31671 + C31672) * C1540 + (C31673 + C31674) * C1546) +
            (C31871 + C31872) * C1541 - (C31873 + C31874) * C1548 -
            (C31875 + C31876) * C1542 +
            (C31632 * C1276 + C31630 * C1286 + C31633 * C1856 +
             C48410 * C1861) *
                C1549 +
            (C31632 * C1287 + C31630 * C1294 + C31633 * C1862 +
             C48410 * C1865) *
                C48400) *
               C48377) *
              C48278 * C48054) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C711 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48358 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C712 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C48135) *
               C16454 +
           ((C31667 + C31668) * C711 + (C31669 + C31670) * C48358 -
            (C31861 + C31862) * C712 - (C31863 + C31864) * C48135) *
               C48377) *
              C48278 * C707 +
          (((C31862 + C31861) * C712 -
            ((C31670 + C31669) * C48358 + (C31668 + C31667) * C711) +
            (C31864 + C31863) * C48135) *
               C16454 +
           ((C31869 + C31870) * C712 -
            ((C31671 + C31672) * C48358 + (C31673 + C31674) * C711) +
            (C31871 + C31872) * C48135) *
               C48377) *
              C48278 * C708 +
          (((C31674 + C31673) * C711 + (C31672 + C31671) * C48358 -
            (C31870 + C31869) * C712 - (C31872 + C31871) * C48135) *
               C16454 +
           ((C31675 + C31676) * C711 + (C31677 + C31678) * C48358 -
            (C32209 + C32210) * C712 - (C32211 + C32212) * C48135) *
               C48377) *
              C48278 * C709 +
          (((C32210 + C32209) * C712 -
            ((C31678 + C31677) * C48358 + (C31676 + C31675) * C711) +
            (C32212 + C32211) * C48135) *
               C16454 +
           ((C31632 * C313 + C31630 * C331 + C31633 * C1008 + C48410 * C1017) *
                C712 -
            ((C31679 + C31680) * C48358 + (C31681 + C31682) * C711) +
            (C31632 * C332 + C31630 * C343 + C31633 * C1018 + C48410 * C1023) *
                C48135) *
               C48377) *
              C48278 * C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C711 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48358 -
             (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                 C712 -
             (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                 C48135) *
                C16454 +
            ((C31667 + C31668) * C711 + (C31669 + C31670) * C48358 -
             (C31861 + C31862) * C712 - (C31863 + C31864) * C48135) *
                C48377) *
               C48278 * C48344 +
           (((C31862 + C31861) * C712 -
             ((C31670 + C31669) * C48358 + (C31668 + C31667) * C711) +
             (C31864 + C31863) * C48135) *
                C16454 +
            ((C31869 + C31870) * C712 -
             ((C31671 + C31672) * C48358 + (C31673 + C31674) * C711) +
             (C31871 + C31872) * C48135) *
                C48377) *
               C48278 * C48054) *
              C1976 +
          ((((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
              C48410 * C1421) *
                 C712 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C48358 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C711) +
             (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
              C48410 * C1436) *
                 C48135) *
                C16454 +
            ((C32565 + C32566) * C712 -
             ((C32058 + C32057) * C48358 + (C32056 + C32055) * C711) +
             (C32567 + C32568) * C48135) *
                C48377) *
               C48278 * C48344 +
           (((C32055 + C32056) * C711 + (C32057 + C32058) * C48358 -
             (C32566 + C32565) * C712 - (C32568 + C32567) * C48135) *
                C16454 +
            ((C32059 + C32060) * C711 + (C32061 + C32062) * C48358 -
             (C32569 + C32570) * C712 - (C32571 + C32572) * C48135) *
                C48377) *
               C48278 * C48054) *
              C1977 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C711 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C48358 -
             (C31633 * C2570 + C48410 * C2573 + C31632 * C1409 +
              C31630 * C1421) *
                 C712 -
             (C31633 * C2574 + C48410 * C2579 + C31632 * C1422 +
              C31630 * C1436) *
                 C48135) *
                C16454 +
            ((C32063 + C32064) * C711 + (C32065 + C32066) * C48358 -
             (C34001 + C34002) * C712 - (C34003 + C34004) * C48135) *
                C48377) *
               C48278 * C48344 +
           (((C34002 + C34001) * C712 -
             ((C32066 + C32065) * C48358 + (C32064 + C32063) * C711) +
             (C34004 + C34003) * C48135) *
                C16454 +
            ((C31632 * C1413 + C31630 * C1429 + C31633 * C2572 +
              C48410 * C2577) *
                 C712 -
             ((C32067 + C32068) * C48358 + (C32069 + C32070) * C711) +
             (C31632 * C1430 + C31630 * C1440 + C31633 * C2578 +
              C48410 * C2581) *
                 C48135) *
                C48377) *
               C48278 * C48054) *
              C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C1546 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C1540 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C1547 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C1541 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C1548 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C1542 -
            (C31633 * C1854 + C48410 * C1857 + C31632 * C1272 +
             C31630 * C1278) *
                C1549 -
            (C31633 * C1858 + C48410 * C1863 + C31632 * C1279 +
             C31630 * C1290) *
                C48400) *
               C16454 +
           ((C31667 + C31668) * C1546 + (C31669 + C31670) * C1540 -
            (C31861 + C31862) * C1547 - (C31863 + C31864) * C1541 +
            (C31865 + C31866) * C1548 + (C31867 + C31868) * C1542 -
            (C33085 + C33086) * C1549 - (C33087 + C33088) * C48400) *
               C48377) *
              C48278 * C48044 * C48359 +
          (((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
             C48410 * C1421) *
                C1547 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C1540 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C1546) +
            (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
             C48410 * C1436) *
                C1541 -
            (C31633 * C1410 + C48410 * C1423 + C31632 * C1406 +
             C31630 * C1415) *
                C1548 -
            (C31633 * C1424 + C48410 * C1437 + C31632 * C1416 +
             C31630 * C1433) *
                C1542 +
            (C31632 * C1854 + C31630 * C1857 + C31633 * C6270 +
             C48410 * C6272) *
                C1549 +
            (C31632 * C1858 + C31630 * C1863 + C31633 * C6273 +
             C48410 * C6276) *
                C48400) *
               C16454 +
           ((C32565 + C32566) * C1547 -
            ((C32058 + C32057) * C1540 + (C32056 + C32055) * C1546) +
            (C32567 + C32568) * C1541 - (C33291 + C33292) * C1548 -
            (C33293 + C33294) * C1542 +
            (C31632 * C1855 + C31630 * C1859 + C31633 * C6271 +
             C48410 * C6274) *
                C1549 +
            (C31632 * C1860 + C31630 * C1864 + C31633 * C6275 +
             C48410 * C6277) *
                C48400) *
               C48377) *
              C48278 * C48044 * C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C711 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48358 -
             (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                 C712 -
             (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                 C48135) *
                C16454 +
            ((C31667 + C31668) * C711 + (C31669 + C31670) * C48358 -
             (C31861 + C31862) * C712 - (C31863 + C31864) * C48135) *
                C48377) *
               C48278 * C299 +
           (((C31862 + C31861) * C712 -
             ((C31670 + C31669) * C48358 + (C31668 + C31667) * C711) +
             (C31864 + C31863) * C48135) *
                C16454 +
            ((C31869 + C31870) * C712 -
             ((C31671 + C31672) * C48358 + (C31673 + C31674) * C711) +
             (C31871 + C31872) * C48135) *
                C48377) *
               C48278 * C300 +
           (((C31674 + C31673) * C711 + (C31672 + C31671) * C48358 -
             (C31870 + C31869) * C712 - (C31872 + C31871) * C48135) *
                C16454 +
            ((C31675 + C31676) * C711 + (C31677 + C31678) * C48358 -
             (C32209 + C32210) * C712 - (C32211 + C32212) * C48135) *
                C48377) *
               C48278 * C48384) *
              C48359 +
          ((((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
              C48410 * C1421) *
                 C712 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C48358 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C711) +
             (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
              C48410 * C1436) *
                 C48135) *
                C16454 +
            ((C32565 + C32566) * C712 -
             ((C32058 + C32057) * C48358 + (C32056 + C32055) * C711) +
             (C32567 + C32568) * C48135) *
                C48377) *
               C48278 * C299 +
           (((C32055 + C32056) * C711 + (C32057 + C32058) * C48358 -
             (C32566 + C32565) * C712 - (C32568 + C32567) * C48135) *
                C16454 +
            ((C32059 + C32060) * C711 + (C32061 + C32062) * C48358 -
             (C32569 + C32570) * C712 - (C32571 + C32572) * C48135) *
                C48377) *
               C48278 * C300 +
           (((C32570 + C32569) * C712 -
             ((C32062 + C32061) * C48358 + (C32060 + C32059) * C711) +
             (C32572 + C32571) * C48135) *
                C16454 +
            ((C31632 * C1007 + C31630 * C1015 + C31633 * C2326 +
              C48410 * C2327) *
                 C712 -
             ((C32351 + C32352) * C48358 + (C32353 + C32354) * C711) +
             (C31632 * C1016 + C31630 * C1022 + C31633 * C2328 +
              C48410 * C2329) *
                 C48135) *
                C48377) *
               C48278 * C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C711 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48358 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C712 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C48135) *
               C16454 +
           ((C31667 + C31668) * C711 + (C31669 + C31670) * C48358 -
            (C31861 + C31862) * C712 - (C31863 + C31864) * C48135) *
               C48377) *
              C48278 * C48044 * C2448 +
          (((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
             C48410 * C1421) *
                C712 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48358 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C711) +
            (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
             C48410 * C1436) *
                C48135) *
               C16454 +
           ((C32565 + C32566) * C712 -
            ((C32058 + C32057) * C48358 + (C32056 + C32055) * C711) +
            (C32567 + C32568) * C48135) *
               C48377) *
              C48278 * C48044 * C2449 +
          (((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                C711 +
            (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                C48358 -
            (C31633 * C2570 + C48410 * C2573 + C31632 * C1409 +
             C31630 * C1421) *
                C712 -
            (C31633 * C2574 + C48410 * C2579 + C31632 * C1422 +
             C31630 * C1436) *
                C48135) *
               C16454 +
           ((C32063 + C32064) * C711 + (C32065 + C32066) * C48358 -
            (C34001 + C34002) * C712 - (C34003 + C34004) * C48135) *
               C48377) *
              C48278 * C48044 * C2450 +
          (((C31632 * C2570 + C31630 * C2573 + C31633 * C7164 +
             C48410 * C7166) *
                C712 -
            ((C31633 * C2169 + C48410 * C2177 + C31632 * C2166 +
              C31630 * C2176) *
                 C48358 +
             (C31633 * C2159 + C48410 * C2168 + C31632 * C2158 +
              C31630 * C2167) *
                 C711) +
            (C31632 * C2574 + C31630 * C2579 + C31633 * C7167 +
             C48410 * C7170) *
                C48135) *
               C16454 +
           ((C31632 * C2571 + C31630 * C2575 + C31633 * C7165 +
             C48410 * C7168) *
                C712 -
            ((C34146 + C34145) * C48358 + (C34144 + C34143) * C711) +
            (C31632 * C2576 + C31630 * C2580 + C31633 * C7169 +
             C48410 * C7171) *
                C48135) *
               C48377) *
              C48278 * C48044 * C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C31632 * C115 + C31630 * C122 + C31633 * C520 +
                 C48410 * C534) *
                    C114 +
                (C31632 * C123 + C31630 * C136 + C31633 * C533 +
                 C48410 * C550) *
                    C48072) *
                   C16454 +
               ((C31667 + C31668) * C114 + (C31669 + C31670) * C48072) *
                   C48377) *
                  C48278 * C107 -
              (((C31671 + C31672) * C48072 + (C31673 + C31674) * C114) *
                   C48377 +
               ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) *
                   C16454) *
                  C48278 * C108 +
              (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) *
                   C16454 +
               ((C31675 + C31676) * C114 + (C31677 + C31678) * C48072) *
                   C48377) *
                  C48278 * C109 -
              (((C31679 + C31680) * C48072 + (C31681 + C31682) * C114) *
                   C48377 +
               ((C31678 + C31677) * C48072 + (C31676 + C31675) * C114) *
                   C16454) *
                  C48278 * C110 +
              (((C31682 + C31681) * C114 + (C31680 + C31679) * C48072) *
                   C16454 +
               ((C31632 * C120 + C31630 * C133 + C31633 * C845 +
                 C48410 * C846) *
                    C114 +
                (C31632 * C132 + C31630 * C141 + C31633 * C847 +
                 C48410 * C848) *
                    C48072) *
                   C48377) *
                  C48278 * C111) *
             C48090 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C31632 * C115 + C31630 * C122 + C31633 * C520 +
                 C48410 * C534) *
                    C302 +
                (C31632 * C123 + C31630 * C136 + C31633 * C533 +
                 C48410 * C550) *
                    C48429 -
                (C31633 * C1004 + C48410 * C1009 + C31632 * C305 +
                 C31630 * C315) *
                    C303 -
                (C31633 * C1010 + C48410 * C1019 + C31632 * C316 +
                 C31630 * C335) *
                    C48417 +
                (C31632 * C306 + C31630 * C317 + C31633 * C1406 +
                 C48410 * C1415) *
                    C304 +
                (C31632 * C318 + C31630 * C336 + C31633 * C1416 +
                 C48410 * C1433) *
                    C48390) *
                   C16454 +
               ((C31667 + C31668) * C302 + (C31669 + C31670) * C48429 -
                (C31861 + C31862) * C303 - (C31863 + C31864) * C48417 +
                (C31865 + C31866) * C304 + (C31867 + C31868) * C48390) *
                   C48377) *
                  C48278 * C299 +
              (((C31862 + C31861) * C303 -
                ((C31670 + C31669) * C48429 + (C31668 + C31667) * C302) +
                (C31864 + C31863) * C48417 - (C31866 + C31865) * C304 -
                (C31868 + C31867) * C48390) *
                   C16454 +
               ((C31869 + C31870) * C303 -
                ((C31671 + C31672) * C48429 + (C31673 + C31674) * C302) +
                (C31871 + C31872) * C48417 - (C31873 + C31874) * C304 -
                (C31875 + C31876) * C48390) *
                   C48377) *
                  C48278 * C300 +
              (((C31674 + C31673) * C302 + (C31672 + C31671) * C48429 -
                (C31870 + C31869) * C303 - (C31872 + C31871) * C48417 +
                (C31874 + C31873) * C304 + (C31876 + C31875) * C48390) *
                   C16454 +
               ((C31675 + C31676) * C302 + (C31677 + C31678) * C48429 -
                (C31633 * C1007 + C48410 * C1015 + C31632 * C311 +
                 C31630 * C327) *
                    C303 -
                (C31633 * C1016 + C48410 * C1022 + C31632 * C328 +
                 C31630 * C341) *
                    C48417 +
                (C31632 * C312 + C31630 * C329 + C31633 * C1728 +
                 C48410 * C1729) *
                    C304 +
                (C31632 * C330 + C31630 * C342 + C31633 * C1730 +
                 C48410 * C1731) *
                    C48390) *
                   C48377) *
                  C48278 * C48384) *
             C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C16454 +
            ((C31667 + C31668) * C114 + (C31669 + C31670) * C48072) * C48377) *
               C48278 * C299 -
           (((C31671 + C31672) * C48072 + (C31673 + C31674) * C114) * C48377 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C16454) *
               C48278 * C300 +
           (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C16454 +
            ((C31675 + C31676) * C114 + (C31677 + C31678) * C48072) * C48377) *
               C48278 * C48384) *
              C48430 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C16454 +
            ((C32059 + C32060) * C114 + (C32061 + C32062) * C48072) * C48377) *
               C48278 * C300 -
           (((C32058 + C32057) * C48072 + (C32056 + C32055) * C114) * C48377 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C16454) *
               C48278 * C299 -
           (((C31633 * C543 + C48410 * C555 + C31632 * C532 + C31630 * C549) *
                 C48072 +
             (C31633 * C525 + C48410 * C544 + C31632 * C519 + C31630 * C531) *
                 C114) *
                C48377 +
            ((C32062 + C32061) * C48072 + (C32060 + C32059) * C114) * C16454) *
               C48278 * C48384) *
              C48419 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C114 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C48072) *
                C16454 +
            ((C32063 + C32064) * C114 + (C32065 + C32066) * C48072) * C48377) *
               C48278 * C299 -
           (((C32067 + C32068) * C48072 + (C32069 + C32070) * C114) * C48377 +
            ((C32066 + C32065) * C48072 + (C32064 + C32063) * C114) * C16454) *
               C48278 * C300 +
           (((C32070 + C32069) * C114 + (C32068 + C32067) * C48072) * C16454 +
            ((C31632 * C525 + C31630 * C544 + C31633 * C2452 + C48410 * C2453) *
                 C114 +
             (C31632 * C543 + C31630 * C555 + C31633 * C2454 + C48410 * C2455) *
                 C48072) *
                C48377) *
               C48278 * C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C1173 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C1167 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C1174 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C1168 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C1175 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C48390) *
               C16454 +
           ((C31667 + C31668) * C1173 + (C31669 + C31670) * C1167 -
            (C31861 + C31862) * C1174 - (C31863 + C31864) * C1168 +
            (C31865 + C31866) * C1175 + (C31867 + C31868) * C48390) *
               C48377) *
              C48278 * C48426 +
          (((C31862 + C31861) * C1174 -
            ((C31670 + C31669) * C1167 + (C31668 + C31667) * C1173) +
            (C31864 + C31863) * C1168 - (C31866 + C31865) * C1175 -
            (C31868 + C31867) * C48390) *
               C16454 +
           ((C31869 + C31870) * C1174 -
            ((C31671 + C31672) * C1167 + (C31673 + C31674) * C1173) +
            (C31871 + C31872) * C1168 - (C31873 + C31874) * C1175 -
            (C31875 + C31876) * C48390) *
               C48377) *
              C48278 * C48413 +
          (((C31674 + C31673) * C1173 + (C31672 + C31671) * C1167 -
            (C31870 + C31869) * C1174 - (C31872 + C31871) * C1168 +
            (C31874 + C31873) * C1175 + (C31876 + C31875) * C48390) *
               C16454 +
           ((C31675 + C31676) * C1173 + (C31677 + C31678) * C1167 -
            (C32209 + C32210) * C1174 - (C32211 + C32212) * C1168 +
            (C31632 * C312 + C31630 * C329 + C31633 * C1728 + C48410 * C1729) *
                C1175 +
            (C31632 * C330 + C31630 * C342 + C31633 * C1730 + C48410 * C1731) *
                C48390) *
               C48377) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
               C1267 +
           (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
               C1261 -
           (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
               C1268 -
           (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
               C1262 +
           (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
               C1269 +
           (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
               C1263 -
           (C31633 * C1854 + C48410 * C1857 + C31632 * C1272 + C31630 * C1278) *
               C1270 -
           (C31633 * C1858 + C48410 * C1863 + C31632 * C1279 + C31630 * C1290) *
               C1264 +
           (C31632 * C1273 + C31630 * C1280 + C31633 * C6776 + C48410 * C6778) *
               C1271 +
           (C31632 * C1281 + C31630 * C1291 + C31633 * C6779 + C48410 * C6782) *
               C1265) *
              C16454 +
          ((C31667 + C31668) * C1267 + (C31669 + C31670) * C1261 -
           (C31861 + C31862) * C1268 - (C31863 + C31864) * C1262 +
           (C31865 + C31866) * C1269 + (C31867 + C31868) * C1263 -
           (C31633 * C1855 + C48410 * C1859 + C31632 * C1274 + C31630 * C1282) *
               C1270 -
           (C31633 * C1860 + C48410 * C1864 + C31632 * C1283 + C31630 * C1292) *
               C1264 +
           (C31632 * C1275 + C31630 * C1284 + C31633 * C6777 + C48410 * C6780) *
               C1271 +
           (C31632 * C1285 + C31630 * C1293 + C31633 * C6781 + C48410 * C6783) *
               C1265) *
              C48377) *
         C48278 * C48044 * C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C1173 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C1167 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C1174 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C1168 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C1175 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C48390) *
               C16454 +
           ((C31667 + C31668) * C1173 + (C31669 + C31670) * C1167 -
            (C31861 + C31862) * C1174 - (C31863 + C31864) * C1168 +
            (C31865 + C31866) * C1175 + (C31867 + C31868) * C48390) *
               C48377) *
              C48278 * C48044 * C48430 +
          (((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
             C48410 * C1421) *
                C1174 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C1167 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C1173) +
            (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
             C48410 * C1436) *
                C1168 -
            (C31633 * C1410 + C48410 * C1423 + C31632 * C1406 +
             C31630 * C1415) *
                C1175 -
            (C31633 * C1424 + C48410 * C1437 + C31632 * C1416 +
             C31630 * C1433) *
                C48390) *
               C16454 +
           ((C32565 + C32566) * C1174 -
            ((C32058 + C32057) * C1167 + (C32056 + C32055) * C1173) +
            (C32567 + C32568) * C1168 -
            (C31633 * C1412 + C48410 * C1427 + C31632 * C1407 +
             C31630 * C1417) *
                C1175 -
            (C31633 * C1428 + C48410 * C1439 + C31632 * C1418 +
             C31630 * C1434) *
                C48390) *
               C48377) *
              C48278 * C48044 * C48419 +
          (((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                C1173 +
            (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                C1167 -
            (C31633 * C2570 + C48410 * C2573 + C31632 * C1409 +
             C31630 * C1421) *
                C1174 -
            (C31633 * C2574 + C48410 * C2579 + C31632 * C1422 +
             C31630 * C1436) *
                C1168 +
            (C31632 * C1410 + C31630 * C1423 + C31633 * C7638 +
             C48410 * C7640) *
                C1175 +
            (C31632 * C1424 + C31630 * C1437 + C31633 * C7641 +
             C48410 * C7644) *
                C48390) *
               C16454 +
           ((C32063 + C32064) * C1173 + (C32065 + C32066) * C1167 -
            (C31633 * C2571 + C48410 * C2575 + C31632 * C1411 +
             C31630 * C1425) *
                C1174 -
            (C31633 * C2576 + C48410 * C2580 + C31632 * C1426 +
             C31630 * C1438) *
                C1168 +
            (C31632 * C1412 + C31630 * C1427 + C31633 * C7639 +
             C48410 * C7642) *
                C1175 +
            (C31632 * C1428 + C31630 * C1439 + C31633 * C7643 +
             C48410 * C7645) *
                C48390) *
               C48377) *
              C48278 * C48044 * C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C16454 +
            ((C31667 + C31668) * C114 + (C31669 + C31670) * C48072) * C48377) *
               C48278 * C48426 -
           (((C31671 + C31672) * C48072 + (C31673 + C31674) * C114) * C48377 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C16454) *
               C48278 * C48413 +
           (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C16454 +
            ((C31675 + C31676) * C114 + (C31677 + C31678) * C48072) * C48377) *
               C48278 * C48384) *
              C1976 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C16454 +
            ((C32059 + C32060) * C114 + (C32061 + C32062) * C48072) * C48377) *
               C48278 * C48413 -
           (((C32058 + C32057) * C48072 + (C32056 + C32055) * C114) * C48377 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C16454) *
               C48278 * C48426 -
           (((C32351 + C32352) * C48072 + (C32353 + C32354) * C114) * C48377 +
            ((C32062 + C32061) * C48072 + (C32060 + C32059) * C114) * C16454) *
               C48278 * C48384) *
              C1977 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C114 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C48072) *
                C16454 +
            ((C32063 + C32064) * C114 + (C32065 + C32066) * C48072) * C48377) *
               C48278 * C48426 -
           (((C32067 + C32068) * C48072 + (C32069 + C32070) * C114) * C48377 +
            ((C32066 + C32065) * C48072 + (C32064 + C32063) * C114) * C16454) *
               C48278 * C48413 +
           (((C32070 + C32069) * C114 + (C32068 + C32067) * C48072) * C16454 +
            ((C31632 * C525 + C31630 * C544 + C31633 * C2452 + C48410 * C2453) *
                 C114 +
             (C31632 * C543 + C31630 * C555 + C31633 * C2454 + C48410 * C2455) *
                 C48072) *
                C48377) *
               C48278 * C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C302 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48429 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C303 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C48417 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C304 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C48390) *
               C16454 +
           ((C31667 + C31668) * C302 + (C31669 + C31670) * C48429 -
            (C31861 + C31862) * C303 - (C31863 + C31864) * C48417 +
            (C31865 + C31866) * C304 + (C31867 + C31868) * C48390) *
               C48377) *
              C48278 * C48044 * C1976 +
          (((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
             C48410 * C1421) *
                C303 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48429 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C302) +
            (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
             C48410 * C1436) *
                C48417 -
            (C31633 * C1410 + C48410 * C1423 + C31632 * C1406 +
             C31630 * C1415) *
                C304 -
            (C31633 * C1424 + C48410 * C1437 + C31632 * C1416 +
             C31630 * C1433) *
                C48390) *
               C16454 +
           ((C32565 + C32566) * C303 -
            ((C32058 + C32057) * C48429 + (C32056 + C32055) * C302) +
            (C32567 + C32568) * C48417 - (C33291 + C33292) * C304 -
            (C33293 + C33294) * C48390) *
               C48377) *
              C48278 * C48044 * C1977 +
          (((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                C302 +
            (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                C48429 -
            (C31633 * C2570 + C48410 * C2573 + C31632 * C1409 +
             C31630 * C1421) *
                C303 -
            (C31633 * C2574 + C48410 * C2579 + C31632 * C1422 +
             C31630 * C1436) *
                C48417 +
            (C31632 * C1410 + C31630 * C1423 + C31633 * C7638 +
             C48410 * C7640) *
                C304 +
            (C31632 * C1424 + C31630 * C1437 + C31633 * C7641 +
             C48410 * C7644) *
                C48390) *
               C16454 +
           ((C32063 + C32064) * C302 + (C32065 + C32066) * C48429 -
            (C31633 * C2571 + C48410 * C2575 + C31632 * C1411 +
             C31630 * C1425) *
                C303 -
            (C31633 * C2576 + C48410 * C2580 + C31632 * C1426 +
             C31630 * C1438) *
                C48417 +
            (C31632 * C1412 + C31630 * C1427 + C31633 * C7639 +
             C48410 * C7642) *
                C304 +
            (C31632 * C1428 + C31630 * C1439 + C31633 * C7643 +
             C48410 * C7645) *
                C48390) *
               C48377) *
              C48278 * C48044 * C48393)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C114 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48072) *
               C16454 +
           ((C31667 + C31668) * C114 + (C31669 + C31670) * C48072) * C48377) *
              C48278 * C48044 * C2151 -
          (((C32058 + C32057) * C48072 + (C32056 + C32055) * C114) * C48377 +
           ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                C48072 +
            (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                C114) *
               C16454) *
              C48278 * C48044 * C2152 +
          (((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                C114 +
            (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                C48072) *
               C16454 +
           ((C32063 + C32064) * C114 + (C32065 + C32066) * C48072) * C48377) *
              C48278 * C48044 * C2153 -
          (((C31633 * C2171 + C48410 * C2178 + C31632 * C2164 +
             C31630 * C2175) *
                C48072 +
            (C31633 * C2160 + C48410 * C2170 + C31632 * C2157 +
             C31630 * C2165) *
                C114) *
               C48377 +
           ((C31633 * C2169 + C48410 * C2177 + C31632 * C2166 +
             C31630 * C2176) *
                C48072 +
            (C31633 * C2159 + C48410 * C2168 + C31632 * C2158 +
             C31630 * C2167) *
                C114) *
               C16454) *
              C48278 * C48044 * C2154 +
          (((C31632 * C2159 + C31630 * C2168 + C31633 * C12922 +
             C48410 * C12924) *
                C114 +
            (C31632 * C2169 + C31630 * C2177 + C31633 * C12925 +
             C48410 * C12928) *
                C48072) *
               C16454 +
           ((C31632 * C2160 + C31630 * C2170 + C31633 * C12923 +
             C48410 * C12926) *
                C114 +
            (C31632 * C2171 + C31630 * C2178 + C31633 * C12927 +
             C48410 * C12929) *
                C48072) *
               C48377) *
              C48278 * C48044 * C2155)) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C1173 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C1167 -
             (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                 C1174 -
             (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                 C1168 +
             (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                 C1175 +
             (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                 C48390) *
                C16454 +
            ((C31667 + C31668) * C1173 + (C31669 + C31670) * C1167 -
             (C31861 + C31862) * C1174 - (C31863 + C31864) * C1168 +
             (C31865 + C31866) * C1175 + (C31867 + C31868) * C48390) *
                C48377) *
               C48278 * C48344 +
           (((C31862 + C31861) * C1174 -
             ((C31670 + C31669) * C1167 + (C31668 + C31667) * C1173) +
             (C31864 + C31863) * C1168 - (C31866 + C31865) * C1175 -
             (C31868 + C31867) * C48390) *
                C16454 +
            ((C31869 + C31870) * C1174 -
             ((C31671 + C31672) * C1167 + (C31673 + C31674) * C1173) +
             (C31871 + C31872) * C1168 - (C31873 + C31874) * C1175 -
             (C31875 + C31876) * C48390) *
                C48377) *
               C48278 * C48054) *
              C48359 +
          ((((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
              C48410 * C1421) *
                 C1174 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C1167 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C1173) +
             (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
              C48410 * C1436) *
                 C1168 -
             (C31633 * C1410 + C48410 * C1423 + C31632 * C1406 +
              C31630 * C1415) *
                 C1175 -
             (C31633 * C1424 + C48410 * C1437 + C31632 * C1416 +
              C31630 * C1433) *
                 C48390) *
                C16454 +
            ((C32565 + C32566) * C1174 -
             ((C32058 + C32057) * C1167 + (C32056 + C32055) * C1173) +
             (C32567 + C32568) * C1168 - (C33291 + C33292) * C1175 -
             (C33293 + C33294) * C48390) *
                C48377) *
               C48278 * C48344 +
           (((C32055 + C32056) * C1173 + (C32057 + C32058) * C1167 -
             (C32566 + C32565) * C1174 - (C32568 + C32567) * C1168 +
             (C33292 + C33291) * C1175 + (C33294 + C33293) * C48390) *
                C16454 +
            ((C32059 + C32060) * C1173 + (C32061 + C32062) * C1167 -
             (C32569 + C32570) * C1174 - (C32571 + C32572) * C1168 +
             (C31632 * C1408 + C31630 * C1419 + C31633 * C1414 +
              C48410 * C1431) *
                 C1175 +
             (C31632 * C1420 + C31630 * C1435 + C31633 * C1432 +
              C48410 * C1441) *
                 C48390) *
                C48377) *
               C48278 * C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C16454 +
            ((C31667 + C31668) * C114 + (C31669 + C31670) * C48072) * C48377) *
               C48278 * C707 -
           (((C31671 + C31672) * C48072 + (C31673 + C31674) * C114) * C48377 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C16454) *
               C48278 * C708 +
           (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C16454 +
            ((C31675 + C31676) * C114 + (C31677 + C31678) * C48072) * C48377) *
               C48278 * C709 -
           (((C31679 + C31680) * C48072 + (C31681 + C31682) * C114) * C48377 +
            ((C31678 + C31677) * C48072 + (C31676 + C31675) * C114) * C16454) *
               C48278 * C48394) *
              C48359 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C16454 +
            ((C32059 + C32060) * C114 + (C32061 + C32062) * C48072) * C48377) *
               C48278 * C708 -
           (((C32058 + C32057) * C48072 + (C32056 + C32055) * C114) * C48377 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C16454) *
               C48278 * C707 -
           (((C32351 + C32352) * C48072 + (C32353 + C32354) * C114) * C48377 +
            ((C32062 + C32061) * C48072 + (C32060 + C32059) * C114) * C16454) *
               C48278 * C709 +
           (((C32354 + C32353) * C114 + (C32352 + C32351) * C48072) * C16454 +
            ((C31632 * C521 + C31630 * C536 + C31633 * C526 + C48410 * C545) *
                 C114 +
             (C31632 * C535 + C31630 * C551 + C31633 * C546 + C48410 * C556) *
                 C48072) *
                C48377) *
               C48278 * C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C16454 +
            ((C31667 + C31668) * C114 + (C31669 + C31670) * C48072) * C48377) *
               C48278 * C48344 -
           (((C31671 + C31672) * C48072 + (C31673 + C31674) * C114) * C48377 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C16454) *
               C48278 * C48054) *
              C2448 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C16454 +
            ((C32059 + C32060) * C114 + (C32061 + C32062) * C48072) * C48377) *
               C48278 * C48054 -
           (((C32058 + C32057) * C48072 + (C32056 + C32055) * C114) * C48377 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C16454) *
               C48278 * C48344) *
              C2449 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C114 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C48072) *
                C16454 +
            ((C32063 + C32064) * C114 + (C32065 + C32066) * C48072) * C48377) *
               C48278 * C48344 -
           (((C32067 + C32068) * C48072 + (C32069 + C32070) * C114) * C48377 +
            ((C32066 + C32065) * C48072 + (C32064 + C32063) * C114) * C16454) *
               C48278 * C48054) *
              C2450 +
          ((((C34143 + C34144) * C114 + (C34145 + C34146) * C48072) * C16454 +
            ((C31632 * C2156 + C31630 * C2163 + C31633 * C2161 +
              C48410 * C2172) *
                 C114 +
             (C31632 * C2162 + C31630 * C2174 + C31633 * C2173 +
              C48410 * C2179) *
                 C48072) *
                C48377) *
               C48278 * C48054 -
           (((C34146 + C34145) * C48072 + (C34144 + C34143) * C114) * C48377 +
            ((C31633 * C2169 + C48410 * C2177 + C31632 * C2166 +
              C31630 * C2176) *
                 C48072 +
             (C31633 * C2159 + C48410 * C2168 + C31632 * C2158 +
              C31630 * C2167) *
                 C114) *
                C16454) *
               C48278 * C48344) *
              C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C302 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48429 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C303 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C48417 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C304 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C48390) *
               C16454 +
           ((C31667 + C31668) * C302 + (C31669 + C31670) * C48429 -
            (C31861 + C31862) * C303 - (C31863 + C31864) * C48417 +
            (C31865 + C31866) * C304 + (C31867 + C31868) * C48390) *
               C48377) *
              C48278 * C299 +
          (((C31862 + C31861) * C303 -
            ((C31670 + C31669) * C48429 + (C31668 + C31667) * C302) +
            (C31864 + C31863) * C48417 - (C31866 + C31865) * C304 -
            (C31868 + C31867) * C48390) *
               C16454 +
           ((C31869 + C31870) * C303 -
            ((C31671 + C31672) * C48429 + (C31673 + C31674) * C302) +
            (C31871 + C31872) * C48417 - (C31873 + C31874) * C304 -
            (C31875 + C31876) * C48390) *
               C48377) *
              C48278 * C300 +
          (((C31674 + C31673) * C302 + (C31672 + C31671) * C48429 -
            (C31870 + C31869) * C303 - (C31872 + C31871) * C48417 +
            (C31874 + C31873) * C304 + (C31876 + C31875) * C48390) *
               C16454 +
           ((C31675 + C31676) * C302 + (C31677 + C31678) * C48429 -
            (C31633 * C1007 + C48410 * C1015 + C31632 * C311 + C31630 * C327) *
                C303 -
            (C31633 * C1016 + C48410 * C1022 + C31632 * C328 + C31630 * C341) *
                C48417 +
            (C31632 * C312 + C31630 * C329 + C31633 * C1728 + C48410 * C1729) *
                C304 +
            (C31632 * C330 + C31630 * C342 + C31633 * C1730 + C48410 * C1731) *
                C48390) *
               C48377) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C114 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48072) *
               C16454 +
           ((C31667 + C31668) * C114 + (C31669 + C31670) * C48072) * C48377) *
              C48278 * C107 -
          (((C31671 + C31672) * C48072 + (C31673 + C31674) * C114) * C48377 +
           ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C16454) *
              C48278 * C108 +
          (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C16454 +
           ((C31675 + C31676) * C114 + (C31677 + C31678) * C48072) * C48377) *
              C48278 * C109 -
          (((C31679 + C31680) * C48072 + (C31681 + C31682) * C114) * C48377 +
           ((C31678 + C31677) * C48072 + (C31676 + C31675) * C114) * C16454) *
              C48278 * C110 +
          (((C31682 + C31681) * C114 + (C31680 + C31679) * C48072) * C16454 +
           ((C31632 * C120 + C31630 * C133 + C31633 * C845 + C48410 * C846) *
                C114 +
            (C31632 * C132 + C31630 * C141 + C31633 * C847 + C48410 * C848) *
                C48072) *
               C48377) *
              C48278 * C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C1173 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C1167 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C1174 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C1168 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C1175 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C48390) *
               C16454 +
           ((C31667 + C31668) * C1173 + (C31669 + C31670) * C1167 -
            (C31861 + C31862) * C1174 - (C31863 + C31864) * C1168 +
            (C31865 + C31866) * C1175 + (C31867 + C31868) * C48390) *
               C48377) *
              C48278 * C48426 +
          (((C31862 + C31861) * C1174 -
            ((C31670 + C31669) * C1167 + (C31668 + C31667) * C1173) +
            (C31864 + C31863) * C1168 - (C31866 + C31865) * C1175 -
            (C31868 + C31867) * C48390) *
               C16454 +
           ((C31869 + C31870) * C1174 -
            ((C31671 + C31672) * C1167 + (C31673 + C31674) * C1173) +
            (C31871 + C31872) * C1168 - (C31873 + C31874) * C1175 -
            (C31875 + C31876) * C48390) *
               C48377) *
              C48278 * C48413 +
          (((C31674 + C31673) * C1173 + (C31672 + C31671) * C1167 -
            (C31870 + C31869) * C1174 - (C31872 + C31871) * C1168 +
            (C31874 + C31873) * C1175 + (C31876 + C31875) * C48390) *
               C16454 +
           ((C31675 + C31676) * C1173 + (C31677 + C31678) * C1167 -
            (C32209 + C32210) * C1174 - (C32211 + C32212) * C1168 +
            (C31632 * C312 + C31630 * C329 + C31633 * C1728 + C48410 * C1729) *
                C1175 +
            (C31632 * C330 + C31630 * C342 + C31633 * C1730 + C48410 * C1731) *
                C48390) *
               C48377) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
               C1267 +
           (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
               C1261 -
           (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
               C1268 -
           (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
               C1262 +
           (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
               C1269 +
           (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
               C1263 -
           (C31633 * C1854 + C48410 * C1857 + C31632 * C1272 + C31630 * C1278) *
               C1270 -
           (C31633 * C1858 + C48410 * C1863 + C31632 * C1279 + C31630 * C1290) *
               C1264 +
           (C31632 * C1273 + C31630 * C1280 + C31633 * C6776 + C48410 * C6778) *
               C1271 +
           (C31632 * C1281 + C31630 * C1291 + C31633 * C6779 + C48410 * C6782) *
               C1265) *
              C16454 +
          ((C31667 + C31668) * C1267 + (C31669 + C31670) * C1261 -
           (C31861 + C31862) * C1268 - (C31863 + C31864) * C1262 +
           (C31865 + C31866) * C1269 + (C31867 + C31868) * C1263 -
           (C31633 * C1855 + C48410 * C1859 + C31632 * C1274 + C31630 * C1282) *
               C1270 -
           (C31633 * C1860 + C48410 * C1864 + C31632 * C1283 + C31630 * C1292) *
               C1264 +
           (C31632 * C1275 + C31630 * C1284 + C31633 * C6777 + C48410 * C6780) *
               C1271 +
           (C31632 * C1285 + C31630 * C1293 + C31633 * C6781 + C48410 * C6783) *
               C1265) *
              C48377) *
         C48278 * C48044 * C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C16454 +
            ((C31667 + C31668) * C114 + (C31669 + C31670) * C48072) * C48377) *
               C48278 * C48426 -
           (((C31671 + C31672) * C48072 + (C31673 + C31674) * C114) * C48377 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C16454) *
               C48278 * C48413 +
           (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C16454 +
            ((C31675 + C31676) * C114 + (C31677 + C31678) * C48072) * C48377) *
               C48278 * C48384) *
              C1976 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C16454 +
            ((C32059 + C32060) * C114 + (C32061 + C32062) * C48072) * C48377) *
               C48278 * C48413 -
           (((C32058 + C32057) * C48072 + (C32056 + C32055) * C114) * C48377 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C16454) *
               C48278 * C48426 -
           (((C32351 + C32352) * C48072 + (C32353 + C32354) * C114) * C48377 +
            ((C32062 + C32061) * C48072 + (C32060 + C32059) * C114) * C16454) *
               C48278 * C48384) *
              C1977 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C114 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C48072) *
                C16454 +
            ((C32063 + C32064) * C114 + (C32065 + C32066) * C48072) * C48377) *
               C48278 * C48426 -
           (((C32067 + C32068) * C48072 + (C32069 + C32070) * C114) * C48377 +
            ((C32066 + C32065) * C48072 + (C32064 + C32063) * C114) * C16454) *
               C48278 * C48413 +
           (((C32070 + C32069) * C114 + (C32068 + C32067) * C48072) * C16454 +
            ((C31632 * C525 + C31630 * C544 + C31633 * C2452 + C48410 * C2453) *
                 C114 +
             (C31632 * C543 + C31630 * C555 + C31633 * C2454 + C48410 * C2455) *
                 C48072) *
                C48377) *
               C48278 * C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C302 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48429 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C303 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C48417 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C304 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C48390) *
               C16454 +
           ((C31667 + C31668) * C302 + (C31669 + C31670) * C48429 -
            (C31861 + C31862) * C303 - (C31863 + C31864) * C48417 +
            (C31865 + C31866) * C304 + (C31867 + C31868) * C48390) *
               C48377) *
              C48278 * C48044 * C1976 +
          (((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
             C48410 * C1421) *
                C303 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48429 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C302) +
            (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
             C48410 * C1436) *
                C48417 -
            (C31633 * C1410 + C48410 * C1423 + C31632 * C1406 +
             C31630 * C1415) *
                C304 -
            (C31633 * C1424 + C48410 * C1437 + C31632 * C1416 +
             C31630 * C1433) *
                C48390) *
               C16454 +
           ((C32565 + C32566) * C303 -
            ((C32058 + C32057) * C48429 + (C32056 + C32055) * C302) +
            (C32567 + C32568) * C48417 - (C33291 + C33292) * C304 -
            (C33293 + C33294) * C48390) *
               C48377) *
              C48278 * C48044 * C1977 +
          (((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                C302 +
            (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                C48429 -
            (C31633 * C2570 + C48410 * C2573 + C31632 * C1409 +
             C31630 * C1421) *
                C303 -
            (C31633 * C2574 + C48410 * C2579 + C31632 * C1422 +
             C31630 * C1436) *
                C48417 +
            (C31632 * C1410 + C31630 * C1423 + C31633 * C7638 +
             C48410 * C7640) *
                C304 +
            (C31632 * C1424 + C31630 * C1437 + C31633 * C7641 +
             C48410 * C7644) *
                C48390) *
               C16454 +
           ((C32063 + C32064) * C302 + (C32065 + C32066) * C48429 -
            (C31633 * C2571 + C48410 * C2575 + C31632 * C1411 +
             C31630 * C1425) *
                C303 -
            (C31633 * C2576 + C48410 * C2580 + C31632 * C1426 +
             C31630 * C1438) *
                C48417 +
            (C31632 * C1412 + C31630 * C1427 + C31633 * C7639 +
             C48410 * C7642) *
                C304 +
            (C31632 * C1428 + C31630 * C1439 + C31633 * C7643 +
             C48410 * C7645) *
                C48390) *
               C48377) *
              C48278 * C48044 * C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C711 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48358 -
             (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                 C712 -
             (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                 C48135) *
                C16454 +
            ((C31667 + C31668) * C711 + (C31669 + C31670) * C48358 -
             (C31861 + C31862) * C712 - (C31863 + C31864) * C48135) *
                C48377) *
               C48278 * C48049 +
           (((C31862 + C31861) * C712 -
             ((C31670 + C31669) * C48358 + (C31668 + C31667) * C711) +
             (C31864 + C31863) * C48135) *
                C16454 +
            ((C31869 + C31870) * C712 -
             ((C31671 + C31672) * C48358 + (C31673 + C31674) * C711) +
             (C31871 + C31872) * C48135) *
                C48377) *
               C48278 * C48057 +
           (((C31674 + C31673) * C711 + (C31672 + C31671) * C48358 -
             (C31870 + C31869) * C712 - (C31872 + C31871) * C48135) *
                C16454 +
            ((C31675 + C31676) * C711 + (C31677 + C31678) * C48358 -
             (C32209 + C32210) * C712 - (C32211 + C32212) * C48135) *
                C48377) *
               C48278 * C3111) *
              C3547 +
          ((((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
              C48410 * C1421) *
                 C712 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C48358 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C711) +
             (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
              C48410 * C1436) *
                 C48135) *
                C16454 +
            ((C32565 + C32566) * C712 -
             ((C32058 + C32057) * C48358 + (C32056 + C32055) * C711) +
             (C32567 + C32568) * C48135) *
                C48377) *
               C48278 * C48049 +
           (((C32055 + C32056) * C711 + (C32057 + C32058) * C48358 -
             (C32566 + C32565) * C712 - (C32568 + C32567) * C48135) *
                C16454 +
            ((C32059 + C32060) * C711 + (C32061 + C32062) * C48358 -
             (C32569 + C32570) * C712 - (C32571 + C32572) * C48135) *
                C48377) *
               C48278 * C48057 +
           (((C32570 + C32569) * C712 -
             ((C32062 + C32061) * C48358 + (C32060 + C32059) * C711) +
             (C32572 + C32571) * C48135) *
                C16454 +
            ((C31632 * C1007 + C31630 * C1015 + C31633 * C2326 +
              C48410 * C2327) *
                 C712 -
             ((C32351 + C32352) * C48358 + (C32353 + C32354) * C711) +
             (C31632 * C1016 + C31630 * C1022 + C31633 * C2328 +
              C48410 * C2329) *
                 C48135) *
                C48377) *
               C48278 * C3111) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C711 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48358 -
             (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                 C712 -
             (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                 C48135) *
                C16454 +
            ((C31667 + C31668) * C711 + (C31669 + C31670) * C48358 -
             (C31861 + C31862) * C712 - (C31863 + C31864) * C48135) *
                C48377) *
               C48278 * C2812 +
           (((C31862 + C31861) * C712 -
             ((C31670 + C31669) * C48358 + (C31668 + C31667) * C711) +
             (C31864 + C31863) * C48135) *
                C16454 +
            ((C31869 + C31870) * C712 -
             ((C31671 + C31672) * C48358 + (C31673 + C31674) * C711) +
             (C31871 + C31872) * C48135) *
                C48377) *
               C48278 * C48054) *
              C48173 +
          ((((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
              C48410 * C1421) *
                 C712 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C48358 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C711) +
             (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
              C48410 * C1436) *
                 C48135) *
                C16454 +
            ((C32565 + C32566) * C712 -
             ((C32058 + C32057) * C48358 + (C32056 + C32055) * C711) +
             (C32567 + C32568) * C48135) *
                C48377) *
               C48278 * C2812 +
           (((C32055 + C32056) * C711 + (C32057 + C32058) * C48358 -
             (C32566 + C32565) * C712 - (C32568 + C32567) * C48135) *
                C16454 +
            ((C32059 + C32060) * C711 + (C32061 + C32062) * C48358 -
             (C32569 + C32570) * C712 - (C32571 + C32572) * C48135) *
                C48377) *
               C48278 * C48054) *
              C48180 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C711 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C48358 -
             (C31633 * C2570 + C48410 * C2573 + C31632 * C1409 +
              C31630 * C1421) *
                 C712 -
             (C31633 * C2574 + C48410 * C2579 + C31632 * C1422 +
              C31630 * C1436) *
                 C48135) *
                C16454 +
            ((C32063 + C32064) * C711 + (C32065 + C32066) * C48358 -
             (C34001 + C34002) * C712 - (C34003 + C34004) * C48135) *
                C48377) *
               C48278 * C2812 +
           (((C34002 + C34001) * C712 -
             ((C32066 + C32065) * C48358 + (C32064 + C32063) * C711) +
             (C34004 + C34003) * C48135) *
                C16454 +
            ((C31632 * C1413 + C31630 * C1429 + C31633 * C2572 +
              C48410 * C2577) *
                 C712 -
             ((C32067 + C32068) * C48358 + (C32069 + C32070) * C711) +
             (C31632 * C1430 + C31630 * C1440 + C31633 * C2578 +
              C48410 * C2581) *
                 C48135) *
                C48377) *
               C48278 * C48054) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C302 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48429 -
             (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                 C303 -
             (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                 C48417 +
             (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                 C304 +
             (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                 C48390) *
                C16454 +
            ((C31667 + C31668) * C302 + (C31669 + C31670) * C48429 -
             (C31861 + C31862) * C303 - (C31863 + C31864) * C48417 +
             (C31865 + C31866) * C304 + (C31867 + C31868) * C48390) *
                C48377) *
               C48278 * C2812 +
           (((C31862 + C31861) * C303 -
             ((C31670 + C31669) * C48429 + (C31668 + C31667) * C302) +
             (C31864 + C31863) * C48417 - (C31866 + C31865) * C304 -
             (C31868 + C31867) * C48390) *
                C16454 +
            ((C31869 + C31870) * C303 -
             ((C31671 + C31672) * C48429 + (C31673 + C31674) * C302) +
             (C31871 + C31872) * C48417 - (C31873 + C31874) * C304 -
             (C31875 + C31876) * C48390) *
                C48377) *
               C48278 * C48054) *
              C3547 +
          ((((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
              C48410 * C1421) *
                 C303 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C48429 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C302) +
             (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
              C48410 * C1436) *
                 C48417 -
             (C31633 * C1410 + C48410 * C1423 + C31632 * C1406 +
              C31630 * C1415) *
                 C304 -
             (C31633 * C1424 + C48410 * C1437 + C31632 * C1416 +
              C31630 * C1433) *
                 C48390) *
                C16454 +
            ((C32565 + C32566) * C303 -
             ((C32058 + C32057) * C48429 + (C32056 + C32055) * C302) +
             (C32567 + C32568) * C48417 - (C33291 + C33292) * C304 -
             (C33293 + C33294) * C48390) *
                C48377) *
               C48278 * C2812 +
           (((C32055 + C32056) * C302 + (C32057 + C32058) * C48429 -
             (C32566 + C32565) * C303 - (C32568 + C32567) * C48417 +
             (C33292 + C33291) * C304 + (C33294 + C33293) * C48390) *
                C16454 +
            ((C32059 + C32060) * C302 + (C32061 + C32062) * C48429 -
             (C32569 + C32570) * C303 - (C32571 + C32572) * C48417 +
             (C31632 * C1408 + C31630 * C1419 + C31633 * C1414 +
              C48410 * C1431) *
                 C304 +
             (C31632 * C1420 + C31630 * C1435 + C31633 * C1432 +
              C48410 * C1441) *
                 C48390) *
                C48377) *
               C48278 * C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C16454 +
            ((C31667 + C31668) * C114 + (C31669 + C31670) * C48072) * C48377) *
               C48278 * C48435 -
           (((C31671 + C31672) * C48072 + (C31673 + C31674) * C114) * C48377 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C16454) *
               C48278 * C48428 +
           (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C16454 +
            ((C31675 + C31676) * C114 + (C31677 + C31678) * C48072) * C48377) *
               C48278 * C48415 -
           (((C31679 + C31680) * C48072 + (C31681 + C31682) * C114) * C48377 +
            ((C31678 + C31677) * C48072 + (C31676 + C31675) * C114) * C16454) *
               C48278 * C48394) *
              C3547 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C16454 +
            ((C32059 + C32060) * C114 + (C32061 + C32062) * C48072) * C48377) *
               C48278 * C48428 -
           (((C32058 + C32057) * C48072 + (C32056 + C32055) * C114) * C48377 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C16454) *
               C48278 * C48435 -
           (((C32351 + C32352) * C48072 + (C32353 + C32354) * C114) * C48377 +
            ((C32062 + C32061) * C48072 + (C32060 + C32059) * C114) * C16454) *
               C48278 * C48415 +
           (((C32354 + C32353) * C114 + (C32352 + C32351) * C48072) * C16454 +
            ((C31632 * C521 + C31630 * C536 + C31633 * C526 + C48410 * C545) *
                 C114 +
             (C31632 * C535 + C31630 * C551 + C31633 * C546 + C48410 * C556) *
                 C48072) *
                C48377) *
               C48278 * C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C16454 +
            ((C31667 + C31668) * C114 + (C31669 + C31670) * C48072) * C48377) *
               C48278 * C2812 -
           (((C31671 + C31672) * C48072 + (C31673 + C31674) * C114) * C48377 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C16454) *
               C48278 * C48054) *
              C48437 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C16454 +
            ((C32059 + C32060) * C114 + (C32061 + C32062) * C48072) * C48377) *
               C48278 * C48054 -
           (((C32058 + C32057) * C48072 + (C32056 + C32055) * C114) * C48377 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C16454) *
               C48278 * C2812) *
              C48434 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C114 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C48072) *
                C16454 +
            ((C32063 + C32064) * C114 + (C32065 + C32066) * C48072) * C48377) *
               C48278 * C2812 -
           (((C32067 + C32068) * C48072 + (C32069 + C32070) * C114) * C48377 +
            ((C32066 + C32065) * C48072 + (C32064 + C32063) * C114) * C16454) *
               C48278 * C48054) *
              C48425 +
          ((((C34143 + C34144) * C114 + (C34145 + C34146) * C48072) * C16454 +
            ((C31632 * C2156 + C31630 * C2163 + C31633 * C2161 +
              C48410 * C2172) *
                 C114 +
             (C31632 * C2162 + C31630 * C2174 + C31633 * C2173 +
              C48410 * C2179) *
                 C48072) *
                C48377) *
               C48278 * C48054 -
           (((C34146 + C34145) * C48072 + (C34144 + C34143) * C114) * C48377 +
            ((C31633 * C2169 + C48410 * C2177 + C31632 * C2166 +
              C31630 * C2176) *
                 C48072 +
             (C31633 * C2159 + C48410 * C2168 + C31632 * C2158 +
              C31630 * C2167) *
                 C114) *
                C16454) *
               C48278 * C2812) *
              C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C16454 +
            ((C31667 + C31668) * C114 + (C31669 + C31670) * C48072) * C48377) *
               C48278 * C48049 -
           (((C31671 + C31672) * C48072 + (C31673 + C31674) * C114) * C48377 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C16454) *
               C48278 * C48057 +
           (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C16454 +
            ((C31675 + C31676) * C114 + (C31677 + C31678) * C48072) * C48377) *
               C48278 * C3111) *
              C48173 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C16454 +
            ((C32059 + C32060) * C114 + (C32061 + C32062) * C48072) * C48377) *
               C48278 * C48057 -
           (((C32058 + C32057) * C48072 + (C32056 + C32055) * C114) * C48377 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C16454) *
               C48278 * C48049 -
           (((C32351 + C32352) * C48072 + (C32353 + C32354) * C114) * C48377 +
            ((C32062 + C32061) * C48072 + (C32060 + C32059) * C114) * C16454) *
               C48278 * C3111) *
              C48180 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C114 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C48072) *
                C16454 +
            ((C32063 + C32064) * C114 + (C32065 + C32066) * C48072) * C48377) *
               C48278 * C48049 -
           (((C32067 + C32068) * C48072 + (C32069 + C32070) * C114) * C48377 +
            ((C32066 + C32065) * C48072 + (C32064 + C32063) * C114) * C16454) *
               C48278 * C48057 +
           (((C32070 + C32069) * C114 + (C32068 + C32067) * C48072) * C16454 +
            ((C31632 * C525 + C31630 * C544 + C31633 * C2452 + C48410 * C2453) *
                 C114 +
             (C31632 * C543 + C31630 * C555 + C31633 * C2454 + C48410 * C2455) *
                 C48072) *
                C48377) *
               C48278 * C3111) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C16454 +
            ((C31667 + C31668) * C114 + (C31669 + C31670) * C48072) * C48377) *
               C48278 * C48435 -
           (((C31671 + C31672) * C48072 + (C31673 + C31674) * C114) * C48377 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C16454) *
               C48278 * C48428 +
           (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C16454 +
            ((C31675 + C31676) * C114 + (C31677 + C31678) * C48072) * C48377) *
               C48278 * C48415 -
           (((C31679 + C31680) * C48072 + (C31681 + C31682) * C114) * C48377 +
            ((C31678 + C31677) * C48072 + (C31676 + C31675) * C114) * C16454) *
               C48278 * C48394) *
              C3547 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C16454 +
            ((C32059 + C32060) * C114 + (C32061 + C32062) * C48072) * C48377) *
               C48278 * C48428 -
           (((C32058 + C32057) * C48072 + (C32056 + C32055) * C114) * C48377 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C16454) *
               C48278 * C48435 -
           (((C32351 + C32352) * C48072 + (C32353 + C32354) * C114) * C48377 +
            ((C32062 + C32061) * C48072 + (C32060 + C32059) * C114) * C16454) *
               C48278 * C48415 +
           (((C32354 + C32353) * C114 + (C32352 + C32351) * C48072) * C16454 +
            ((C31632 * C521 + C31630 * C536 + C31633 * C526 + C48410 * C545) *
                 C114 +
             (C31632 * C535 + C31630 * C551 + C31633 * C546 + C48410 * C556) *
                 C48072) *
                C48377) *
               C48278 * C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C302 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48429 -
             (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                 C303 -
             (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                 C48417 +
             (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                 C304 +
             (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                 C48390) *
                C16454 +
            ((C31667 + C31668) * C302 + (C31669 + C31670) * C48429 -
             (C31861 + C31862) * C303 - (C31863 + C31864) * C48417 +
             (C31865 + C31866) * C304 + (C31867 + C31868) * C48390) *
                C48377) *
               C48278 * C2812 +
           (((C31862 + C31861) * C303 -
             ((C31670 + C31669) * C48429 + (C31668 + C31667) * C302) +
             (C31864 + C31863) * C48417 - (C31866 + C31865) * C304 -
             (C31868 + C31867) * C48390) *
                C16454 +
            ((C31869 + C31870) * C303 -
             ((C31671 + C31672) * C48429 + (C31673 + C31674) * C302) +
             (C31871 + C31872) * C48417 - (C31873 + C31874) * C304 -
             (C31875 + C31876) * C48390) *
                C48377) *
               C48278 * C48054) *
              C3547 +
          ((((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
              C48410 * C1421) *
                 C303 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C48429 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C302) +
             (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
              C48410 * C1436) *
                 C48417 -
             (C31633 * C1410 + C48410 * C1423 + C31632 * C1406 +
              C31630 * C1415) *
                 C304 -
             (C31633 * C1424 + C48410 * C1437 + C31632 * C1416 +
              C31630 * C1433) *
                 C48390) *
                C16454 +
            ((C32565 + C32566) * C303 -
             ((C32058 + C32057) * C48429 + (C32056 + C32055) * C302) +
             (C32567 + C32568) * C48417 - (C33291 + C33292) * C304 -
             (C33293 + C33294) * C48390) *
                C48377) *
               C48278 * C2812 +
           (((C32055 + C32056) * C302 + (C32057 + C32058) * C48429 -
             (C32566 + C32565) * C303 - (C32568 + C32567) * C48417 +
             (C33292 + C33291) * C304 + (C33294 + C33293) * C48390) *
                C16454 +
            ((C32059 + C32060) * C302 + (C32061 + C32062) * C48429 -
             (C32569 + C32570) * C303 - (C32571 + C32572) * C48417 +
             (C31632 * C1408 + C31630 * C1419 + C31633 * C1414 +
              C48410 * C1431) *
                 C304 +
             (C31632 * C1420 + C31630 * C1435 + C31633 * C1432 +
              C48410 * C1441) *
                 C48390) *
                C48377) *
               C48278 * C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C711 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48358 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C712 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C48135) *
               C16454 +
           ((C31667 + C31668) * C711 + (C31669 + C31670) * C48358 -
            (C31861 + C31862) * C712 - (C31863 + C31864) * C48135) *
               C48377) *
              C48278 * C707 +
          (((C31862 + C31861) * C712 -
            ((C31670 + C31669) * C48358 + (C31668 + C31667) * C711) +
            (C31864 + C31863) * C48135) *
               C16454 +
           ((C31869 + C31870) * C712 -
            ((C31671 + C31672) * C48358 + (C31673 + C31674) * C711) +
            (C31871 + C31872) * C48135) *
               C48377) *
              C48278 * C708 +
          (((C31674 + C31673) * C711 + (C31672 + C31671) * C48358 -
            (C31870 + C31869) * C712 - (C31872 + C31871) * C48135) *
               C16454 +
           ((C31675 + C31676) * C711 + (C31677 + C31678) * C48358 -
            (C32209 + C32210) * C712 - (C32211 + C32212) * C48135) *
               C48377) *
              C48278 * C709 +
          (((C32210 + C32209) * C712 -
            ((C31678 + C31677) * C48358 + (C31676 + C31675) * C711) +
            (C32212 + C32211) * C48135) *
               C16454 +
           ((C31632 * C313 + C31630 * C331 + C31633 * C1008 + C48410 * C1017) *
                C712 -
            ((C31679 + C31680) * C48358 + (C31681 + C31682) * C711) +
            (C31632 * C332 + C31630 * C343 + C31633 * C1018 + C48410 * C1023) *
                C48135) *
               C48377) *
              C48278 * C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C1546 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C1540 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C1547 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C1541 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C1548 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C1542 -
            (C31633 * C1854 + C48410 * C1857 + C31632 * C1272 +
             C31630 * C1278) *
                C1549 -
            (C31633 * C1858 + C48410 * C1863 + C31632 * C1279 +
             C31630 * C1290) *
                C48400) *
               C16454 +
           ((C31667 + C31668) * C1546 + (C31669 + C31670) * C1540 -
            (C31861 + C31862) * C1547 - (C31863 + C31864) * C1541 +
            (C31865 + C31866) * C1548 + (C31867 + C31868) * C1542 -
            (C33085 + C33086) * C1549 - (C33087 + C33088) * C48400) *
               C48377) *
              C48278 * C48344 +
          (((C31862 + C31861) * C1547 -
            ((C31670 + C31669) * C1540 + (C31668 + C31667) * C1546) +
            (C31864 + C31863) * C1541 - (C31866 + C31865) * C1548 -
            (C31868 + C31867) * C1542 + (C33086 + C33085) * C1549 +
            (C33088 + C33087) * C48400) *
               C16454 +
           ((C31869 + C31870) * C1547 -
            ((C31671 + C31672) * C1540 + (C31673 + C31674) * C1546) +
            (C31871 + C31872) * C1541 - (C31873 + C31874) * C1548 -
            (C31875 + C31876) * C1542 +
            (C31632 * C1276 + C31630 * C1286 + C31633 * C1856 +
             C48410 * C1861) *
                C1549 +
            (C31632 * C1287 + C31630 * C1294 + C31633 * C1862 +
             C48410 * C1865) *
                C48400) *
               C48377) *
              C48278 * C48054) *
         C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C711 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48358 -
             (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                 C712 -
             (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                 C48135) *
                C16454 +
            ((C31667 + C31668) * C711 + (C31669 + C31670) * C48358 -
             (C31861 + C31862) * C712 - (C31863 + C31864) * C48135) *
                C48377) *
               C48278 * C299 +
           (((C31862 + C31861) * C712 -
             ((C31670 + C31669) * C48358 + (C31668 + C31667) * C711) +
             (C31864 + C31863) * C48135) *
                C16454 +
            ((C31869 + C31870) * C712 -
             ((C31671 + C31672) * C48358 + (C31673 + C31674) * C711) +
             (C31871 + C31872) * C48135) *
                C48377) *
               C48278 * C300 +
           (((C31674 + C31673) * C711 + (C31672 + C31671) * C48358 -
             (C31870 + C31869) * C712 - (C31872 + C31871) * C48135) *
                C16454 +
            ((C31675 + C31676) * C711 + (C31677 + C31678) * C48358 -
             (C32209 + C32210) * C712 - (C32211 + C32212) * C48135) *
                C48377) *
               C48278 * C48384) *
              C48359 +
          ((((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
              C48410 * C1421) *
                 C712 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C48358 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C711) +
             (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
              C48410 * C1436) *
                 C48135) *
                C16454 +
            ((C32565 + C32566) * C712 -
             ((C32058 + C32057) * C48358 + (C32056 + C32055) * C711) +
             (C32567 + C32568) * C48135) *
                C48377) *
               C48278 * C299 +
           (((C32055 + C32056) * C711 + (C32057 + C32058) * C48358 -
             (C32566 + C32565) * C712 - (C32568 + C32567) * C48135) *
                C16454 +
            ((C32059 + C32060) * C711 + (C32061 + C32062) * C48358 -
             (C32569 + C32570) * C712 - (C32571 + C32572) * C48135) *
                C48377) *
               C48278 * C300 +
           (((C32570 + C32569) * C712 -
             ((C32062 + C32061) * C48358 + (C32060 + C32059) * C711) +
             (C32572 + C32571) * C48135) *
                C16454 +
            ((C31632 * C1007 + C31630 * C1015 + C31633 * C2326 +
              C48410 * C2327) *
                 C712 -
             ((C32351 + C32352) * C48358 + (C32353 + C32354) * C711) +
             (C31632 * C1016 + C31630 * C1022 + C31633 * C2328 +
              C48410 * C2329) *
                 C48135) *
                C48377) *
               C48278 * C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C1546 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C1540 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C1547 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C1541 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C1548 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C1542 -
            (C31633 * C1854 + C48410 * C1857 + C31632 * C1272 +
             C31630 * C1278) *
                C1549 -
            (C31633 * C1858 + C48410 * C1863 + C31632 * C1279 +
             C31630 * C1290) *
                C48400) *
               C16454 +
           ((C31667 + C31668) * C1546 + (C31669 + C31670) * C1540 -
            (C31861 + C31862) * C1547 - (C31863 + C31864) * C1541 +
            (C31865 + C31866) * C1548 + (C31867 + C31868) * C1542 -
            (C33085 + C33086) * C1549 - (C33087 + C33088) * C48400) *
               C48377) *
              C48278 * C48044 * C48359 +
          (((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
             C48410 * C1421) *
                C1547 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C1540 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C1546) +
            (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
             C48410 * C1436) *
                C1541 -
            (C31633 * C1410 + C48410 * C1423 + C31632 * C1406 +
             C31630 * C1415) *
                C1548 -
            (C31633 * C1424 + C48410 * C1437 + C31632 * C1416 +
             C31630 * C1433) *
                C1542 +
            (C31632 * C1854 + C31630 * C1857 + C31633 * C6270 +
             C48410 * C6272) *
                C1549 +
            (C31632 * C1858 + C31630 * C1863 + C31633 * C6273 +
             C48410 * C6276) *
                C48400) *
               C16454 +
           ((C32565 + C32566) * C1547 -
            ((C32058 + C32057) * C1540 + (C32056 + C32055) * C1546) +
            (C32567 + C32568) * C1541 - (C33291 + C33292) * C1548 -
            (C33293 + C33294) * C1542 +
            (C31632 * C1855 + C31630 * C1859 + C31633 * C6271 +
             C48410 * C6274) *
                C1549 +
            (C31632 * C1860 + C31630 * C1864 + C31633 * C6275 +
             C48410 * C6277) *
                C48400) *
               C48377) *
              C48278 * C48044 * C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C302 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48429 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C303 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C48417 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C304 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C48390) *
               C16454 +
           ((C31667 + C31668) * C302 + (C31669 + C31670) * C48429 -
            (C31861 + C31862) * C303 - (C31863 + C31864) * C48417 +
            (C31865 + C31866) * C304 + (C31867 + C31868) * C48390) *
               C48377) *
              C48278 * C299 +
          (((C31862 + C31861) * C303 -
            ((C31670 + C31669) * C48429 + (C31668 + C31667) * C302) +
            (C31864 + C31863) * C48417 - (C31866 + C31865) * C304 -
            (C31868 + C31867) * C48390) *
               C16454 +
           ((C31869 + C31870) * C303 -
            ((C31671 + C31672) * C48429 + (C31673 + C31674) * C302) +
            (C31871 + C31872) * C48417 - (C31873 + C31874) * C304 -
            (C31875 + C31876) * C48390) *
               C48377) *
              C48278 * C300 +
          (((C31674 + C31673) * C302 + (C31672 + C31671) * C48429 -
            (C31870 + C31869) * C303 - (C31872 + C31871) * C48417 +
            (C31874 + C31873) * C304 + (C31876 + C31875) * C48390) *
               C16454 +
           ((C31675 + C31676) * C302 + (C31677 + C31678) * C48429 -
            (C31633 * C1007 + C48410 * C1015 + C31632 * C311 + C31630 * C327) *
                C303 -
            (C31633 * C1016 + C48410 * C1022 + C31632 * C328 + C31630 * C341) *
                C48417 +
            (C31632 * C312 + C31630 * C329 + C31633 * C1728 + C48410 * C1729) *
                C304 +
            (C31632 * C330 + C31630 * C342 + C31633 * C1730 + C48410 * C1731) *
                C48390) *
               C48377) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C114 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48072) *
               C16454 +
           ((C31667 + C31668) * C114 + (C31669 + C31670) * C48072) * C48377) *
              C48278 * C107 -
          (((C31671 + C31672) * C48072 + (C31673 + C31674) * C114) * C48377 +
           ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C16454) *
              C48278 * C108 +
          (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C16454 +
           ((C31675 + C31676) * C114 + (C31677 + C31678) * C48072) * C48377) *
              C48278 * C109 -
          (((C31679 + C31680) * C48072 + (C31681 + C31682) * C114) * C48377 +
           ((C31678 + C31677) * C48072 + (C31676 + C31675) * C114) * C16454) *
              C48278 * C110 +
          (((C31682 + C31681) * C114 + (C31680 + C31679) * C48072) * C16454 +
           ((C31632 * C120 + C31630 * C133 + C31633 * C845 + C48410 * C846) *
                C114 +
            (C31632 * C132 + C31630 * C141 + C31633 * C847 + C48410 * C848) *
                C48072) *
               C48377) *
              C48278 * C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C16454 +
            ((C31667 + C31668) * C114 + (C31669 + C31670) * C48072) * C48377) *
               C48278 * C299 -
           (((C31671 + C31672) * C48072 + (C31673 + C31674) * C114) * C48377 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C16454) *
               C48278 * C300 +
           (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C16454 +
            ((C31675 + C31676) * C114 + (C31677 + C31678) * C48072) * C48377) *
               C48278 * C48384) *
              C48430 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C16454 +
            ((C32059 + C32060) * C114 + (C32061 + C32062) * C48072) * C48377) *
               C48278 * C300 -
           (((C32058 + C32057) * C48072 + (C32056 + C32055) * C114) * C48377 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C16454) *
               C48278 * C299 -
           (((C31633 * C543 + C48410 * C555 + C31632 * C532 + C31630 * C549) *
                 C48072 +
             (C31633 * C525 + C48410 * C544 + C31632 * C519 + C31630 * C531) *
                 C114) *
                C48377 +
            ((C32062 + C32061) * C48072 + (C32060 + C32059) * C114) * C16454) *
               C48278 * C48384) *
              C48419 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C114 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C48072) *
                C16454 +
            ((C32063 + C32064) * C114 + (C32065 + C32066) * C48072) * C48377) *
               C48278 * C299 -
           (((C32067 + C32068) * C48072 + (C32069 + C32070) * C114) * C48377 +
            ((C32066 + C32065) * C48072 + (C32064 + C32063) * C114) * C16454) *
               C48278 * C300 +
           (((C32070 + C32069) * C114 + (C32068 + C32067) * C48072) * C16454 +
            ((C31632 * C525 + C31630 * C544 + C31633 * C2452 + C48410 * C2453) *
                 C114 +
             (C31632 * C543 + C31630 * C555 + C31633 * C2454 + C48410 * C2455) *
                 C48072) *
                C48377) *
               C48278 * C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C1173 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C1167 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C1174 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C1168 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C1175 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C48390) *
               C16454 +
           ((C31667 + C31668) * C1173 + (C31669 + C31670) * C1167 -
            (C31861 + C31862) * C1174 - (C31863 + C31864) * C1168 +
            (C31865 + C31866) * C1175 + (C31867 + C31868) * C48390) *
               C48377) *
              C48278 * C48426 +
          (((C31862 + C31861) * C1174 -
            ((C31670 + C31669) * C1167 + (C31668 + C31667) * C1173) +
            (C31864 + C31863) * C1168 - (C31866 + C31865) * C1175 -
            (C31868 + C31867) * C48390) *
               C16454 +
           ((C31869 + C31870) * C1174 -
            ((C31671 + C31672) * C1167 + (C31673 + C31674) * C1173) +
            (C31871 + C31872) * C1168 - (C31873 + C31874) * C1175 -
            (C31875 + C31876) * C48390) *
               C48377) *
              C48278 * C48413 +
          (((C31674 + C31673) * C1173 + (C31672 + C31671) * C1167 -
            (C31870 + C31869) * C1174 - (C31872 + C31871) * C1168 +
            (C31874 + C31873) * C1175 + (C31876 + C31875) * C48390) *
               C16454 +
           ((C31675 + C31676) * C1173 + (C31677 + C31678) * C1167 -
            (C32209 + C32210) * C1174 - (C32211 + C32212) * C1168 +
            (C31632 * C312 + C31630 * C329 + C31633 * C1728 + C48410 * C1729) *
                C1175 +
            (C31632 * C330 + C31630 * C342 + C31633 * C1730 + C48410 * C1731) *
                C48390) *
               C48377) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
               C1267 +
           (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
               C1261 -
           (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
               C1268 -
           (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
               C1262 +
           (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
               C1269 +
           (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
               C1263 -
           (C31633 * C1854 + C48410 * C1857 + C31632 * C1272 + C31630 * C1278) *
               C1270 -
           (C31633 * C1858 + C48410 * C1863 + C31632 * C1279 + C31630 * C1290) *
               C1264 +
           (C31632 * C1273 + C31630 * C1280 + C31633 * C6776 + C48410 * C6778) *
               C1271 +
           (C31632 * C1281 + C31630 * C1291 + C31633 * C6779 + C48410 * C6782) *
               C1265) *
              C16454 +
          ((C31667 + C31668) * C1267 + (C31669 + C31670) * C1261 -
           (C31861 + C31862) * C1268 - (C31863 + C31864) * C1262 +
           (C31865 + C31866) * C1269 + (C31867 + C31868) * C1263 -
           (C31633 * C1855 + C48410 * C1859 + C31632 * C1274 + C31630 * C1282) *
               C1270 -
           (C31633 * C1860 + C48410 * C1864 + C31632 * C1283 + C31630 * C1292) *
               C1264 +
           (C31632 * C1275 + C31630 * C1284 + C31633 * C6777 + C48410 * C6780) *
               C1271 +
           (C31632 * C1285 + C31630 * C1293 + C31633 * C6781 + C48410 * C6783) *
               C1265) *
              C48377) *
         C48278 * C48044 * C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C1173 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C1167 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C1174 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C1168 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C1175 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C48390) *
               C16454 +
           ((C31667 + C31668) * C1173 + (C31669 + C31670) * C1167 -
            (C31861 + C31862) * C1174 - (C31863 + C31864) * C1168 +
            (C31865 + C31866) * C1175 + (C31867 + C31868) * C48390) *
               C48377) *
              C48278 * C48044 * C48430 +
          (((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
             C48410 * C1421) *
                C1174 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C1167 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C1173) +
            (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
             C48410 * C1436) *
                C1168 -
            (C31633 * C1410 + C48410 * C1423 + C31632 * C1406 +
             C31630 * C1415) *
                C1175 -
            (C31633 * C1424 + C48410 * C1437 + C31632 * C1416 +
             C31630 * C1433) *
                C48390) *
               C16454 +
           ((C32565 + C32566) * C1174 -
            ((C32058 + C32057) * C1167 + (C32056 + C32055) * C1173) +
            (C32567 + C32568) * C1168 -
            (C31633 * C1412 + C48410 * C1427 + C31632 * C1407 +
             C31630 * C1417) *
                C1175 -
            (C31633 * C1428 + C48410 * C1439 + C31632 * C1418 +
             C31630 * C1434) *
                C48390) *
               C48377) *
              C48278 * C48044 * C48419 +
          (((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                C1173 +
            (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                C1167 -
            (C31633 * C2570 + C48410 * C2573 + C31632 * C1409 +
             C31630 * C1421) *
                C1174 -
            (C31633 * C2574 + C48410 * C2579 + C31632 * C1422 +
             C31630 * C1436) *
                C1168 +
            (C31632 * C1410 + C31630 * C1423 + C31633 * C7638 +
             C48410 * C7640) *
                C1175 +
            (C31632 * C1424 + C31630 * C1437 + C31633 * C7641 +
             C48410 * C7644) *
                C48390) *
               C16454 +
           ((C32063 + C32064) * C1173 + (C32065 + C32066) * C1167 -
            (C31633 * C2571 + C48410 * C2575 + C31632 * C1411 +
             C31630 * C1425) *
                C1174 -
            (C31633 * C2576 + C48410 * C2580 + C31632 * C1426 +
             C31630 * C1438) *
                C1168 +
            (C31632 * C1412 + C31630 * C1427 + C31633 * C7639 +
             C48410 * C7642) *
                C1175 +
            (C31632 * C1428 + C31630 * C1439 + C31633 * C7643 +
             C48410 * C7645) *
                C48390) *
               C48377) *
              C48278 * C48044 * C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C16454 +
            ((C31667 + C31668) * C114 + (C31669 + C31670) * C48072) * C48377) *
               C48278 * C707 -
           (((C31671 + C31672) * C48072 + (C31673 + C31674) * C114) * C48377 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C16454) *
               C48278 * C708 +
           (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C16454 +
            ((C31675 + C31676) * C114 + (C31677 + C31678) * C48072) * C48377) *
               C48278 * C709 -
           (((C31679 + C31680) * C48072 + (C31681 + C31682) * C114) * C48377 +
            ((C31678 + C31677) * C48072 + (C31676 + C31675) * C114) * C16454) *
               C48278 * C48394) *
              C48359 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C16454 +
            ((C32059 + C32060) * C114 + (C32061 + C32062) * C48072) * C48377) *
               C48278 * C708 -
           (((C32058 + C32057) * C48072 + (C32056 + C32055) * C114) * C48377 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C16454) *
               C48278 * C707 -
           (((C32351 + C32352) * C48072 + (C32353 + C32354) * C114) * C48377 +
            ((C32062 + C32061) * C48072 + (C32060 + C32059) * C114) * C16454) *
               C48278 * C709 +
           (((C32354 + C32353) * C114 + (C32352 + C32351) * C48072) * C16454 +
            ((C31632 * C521 + C31630 * C536 + C31633 * C526 + C48410 * C545) *
                 C114 +
             (C31632 * C535 + C31630 * C551 + C31633 * C546 + C48410 * C556) *
                 C48072) *
                C48377) *
               C48278 * C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C1173 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C1167 -
             (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                 C1174 -
             (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                 C1168 +
             (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                 C1175 +
             (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                 C48390) *
                C16454 +
            ((C31667 + C31668) * C1173 + (C31669 + C31670) * C1167 -
             (C31861 + C31862) * C1174 - (C31863 + C31864) * C1168 +
             (C31865 + C31866) * C1175 + (C31867 + C31868) * C48390) *
                C48377) *
               C48278 * C48344 +
           (((C31862 + C31861) * C1174 -
             ((C31670 + C31669) * C1167 + (C31668 + C31667) * C1173) +
             (C31864 + C31863) * C1168 - (C31866 + C31865) * C1175 -
             (C31868 + C31867) * C48390) *
                C16454 +
            ((C31869 + C31870) * C1174 -
             ((C31671 + C31672) * C1167 + (C31673 + C31674) * C1173) +
             (C31871 + C31872) * C1168 - (C31873 + C31874) * C1175 -
             (C31875 + C31876) * C48390) *
                C48377) *
               C48278 * C48054) *
              C48359 +
          ((((C31632 * C1004 + C31630 * C1009 + C31633 * C1409 +
              C48410 * C1421) *
                 C1174 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C1167 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C1173) +
             (C31632 * C1010 + C31630 * C1019 + C31633 * C1422 +
              C48410 * C1436) *
                 C1168 -
             (C31633 * C1410 + C48410 * C1423 + C31632 * C1406 +
              C31630 * C1415) *
                 C1175 -
             (C31633 * C1424 + C48410 * C1437 + C31632 * C1416 +
              C31630 * C1433) *
                 C48390) *
                C16454 +
            ((C32565 + C32566) * C1174 -
             ((C32058 + C32057) * C1167 + (C32056 + C32055) * C1173) +
             (C32567 + C32568) * C1168 - (C33291 + C33292) * C1175 -
             (C33293 + C33294) * C48390) *
                C48377) *
               C48278 * C48344 +
           (((C32055 + C32056) * C1173 + (C32057 + C32058) * C1167 -
             (C32566 + C32565) * C1174 - (C32568 + C32567) * C1168 +
             (C33292 + C33291) * C1175 + (C33294 + C33293) * C48390) *
                C16454 +
            ((C32059 + C32060) * C1173 + (C32061 + C32062) * C1167 -
             (C32569 + C32570) * C1174 - (C32571 + C32572) * C1168 +
             (C31632 * C1408 + C31630 * C1419 + C31633 * C1414 +
              C48410 * C1431) *
                 C1175 +
             (C31632 * C1420 + C31630 * C1435 + C31633 * C1432 +
              C48410 * C1441) *
                 C48390) *
                C48377) *
               C48278 * C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C114 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48072) *
               C16454 +
           ((C31667 + C31668) * C114 + (C31669 + C31670) * C48072) * C48377) *
              C48278 * C107 -
          (((C31671 + C31672) * C48072 + (C31673 + C31674) * C114) * C48377 +
           ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C16454) *
              C48278 * C108 +
          (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C16454 +
           ((C31675 + C31676) * C114 + (C31677 + C31678) * C48072) * C48377) *
              C48278 * C109 -
          (((C31679 + C31680) * C48072 + (C31681 + C31682) * C114) * C48377 +
           ((C31678 + C31677) * C48072 + (C31676 + C31675) * C114) * C16454) *
              C48278 * C110 +
          (((C31682 + C31681) * C114 + (C31680 + C31679) * C48072) * C16454 +
           ((C31632 * C120 + C31630 * C133 + C31633 * C845 + C48410 * C846) *
                C114 +
            (C31632 * C132 + C31630 * C141 + C31633 * C847 + C48410 * C848) *
                C48072) *
               C48377) *
              C48278 * C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C302 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48429 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C303 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C48417 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C304 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C48390) *
               C16454 +
           ((C31667 + C31668) * C302 + (C31669 + C31670) * C48429 -
            (C31861 + C31862) * C303 - (C31863 + C31864) * C48417 +
            (C31865 + C31866) * C304 + (C31867 + C31868) * C48390) *
               C48377) *
              C48278 * C299 +
          (((C31862 + C31861) * C303 -
            ((C31670 + C31669) * C48429 + (C31668 + C31667) * C302) +
            (C31864 + C31863) * C48417 - (C31866 + C31865) * C304 -
            (C31868 + C31867) * C48390) *
               C16454 +
           ((C31869 + C31870) * C303 -
            ((C31671 + C31672) * C48429 + (C31673 + C31674) * C302) +
            (C31871 + C31872) * C48417 - (C31873 + C31874) * C304 -
            (C31875 + C31876) * C48390) *
               C48377) *
              C48278 * C300 +
          (((C31674 + C31673) * C302 + (C31672 + C31671) * C48429 -
            (C31870 + C31869) * C303 - (C31872 + C31871) * C48417 +
            (C31874 + C31873) * C304 + (C31876 + C31875) * C48390) *
               C16454 +
           ((C31675 + C31676) * C302 + (C31677 + C31678) * C48429 -
            (C31633 * C1007 + C48410 * C1015 + C31632 * C311 + C31630 * C327) *
                C303 -
            (C31633 * C1016 + C48410 * C1022 + C31632 * C328 + C31630 * C341) *
                C48417 +
            (C31632 * C312 + C31630 * C329 + C31633 * C1728 + C48410 * C1729) *
                C304 +
            (C31632 * C330 + C31630 * C342 + C31633 * C1730 + C48410 * C1731) *
                C48390) *
               C48377) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C1173 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C1167 -
            (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
                C1174 -
            (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
                C1168 +
            (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
                C1175 +
            (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
                C48390) *
               C16454 +
           ((C31667 + C31668) * C1173 + (C31669 + C31670) * C1167 -
            (C31861 + C31862) * C1174 - (C31863 + C31864) * C1168 +
            (C31865 + C31866) * C1175 + (C31867 + C31868) * C48390) *
               C48377) *
              C48278 * C48426 +
          (((C31862 + C31861) * C1174 -
            ((C31670 + C31669) * C1167 + (C31668 + C31667) * C1173) +
            (C31864 + C31863) * C1168 - (C31866 + C31865) * C1175 -
            (C31868 + C31867) * C48390) *
               C16454 +
           ((C31869 + C31870) * C1174 -
            ((C31671 + C31672) * C1167 + (C31673 + C31674) * C1173) +
            (C31871 + C31872) * C1168 - (C31873 + C31874) * C1175 -
            (C31875 + C31876) * C48390) *
               C48377) *
              C48278 * C48413 +
          (((C31674 + C31673) * C1173 + (C31672 + C31671) * C1167 -
            (C31870 + C31869) * C1174 - (C31872 + C31871) * C1168 +
            (C31874 + C31873) * C1175 + (C31876 + C31875) * C48390) *
               C16454 +
           ((C31675 + C31676) * C1173 + (C31677 + C31678) * C1167 -
            (C32209 + C32210) * C1174 - (C32211 + C32212) * C1168 +
            (C31632 * C312 + C31630 * C329 + C31633 * C1728 + C48410 * C1729) *
                C1175 +
            (C31632 * C330 + C31630 * C342 + C31633 * C1730 + C48410 * C1731) *
                C48390) *
               C48377) *
              C48278 * C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
               C1267 +
           (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
               C1261 -
           (C31633 * C1004 + C48410 * C1009 + C31632 * C305 + C31630 * C315) *
               C1268 -
           (C31633 * C1010 + C48410 * C1019 + C31632 * C316 + C31630 * C335) *
               C1262 +
           (C31632 * C306 + C31630 * C317 + C31633 * C1406 + C48410 * C1415) *
               C1269 +
           (C31632 * C318 + C31630 * C336 + C31633 * C1416 + C48410 * C1433) *
               C1263 -
           (C31633 * C1854 + C48410 * C1857 + C31632 * C1272 + C31630 * C1278) *
               C1270 -
           (C31633 * C1858 + C48410 * C1863 + C31632 * C1279 + C31630 * C1290) *
               C1264 +
           (C31632 * C1273 + C31630 * C1280 + C31633 * C6776 + C48410 * C6778) *
               C1271 +
           (C31632 * C1281 + C31630 * C1291 + C31633 * C6779 + C48410 * C6782) *
               C1265) *
              C16454 +
          ((C31667 + C31668) * C1267 + (C31669 + C31670) * C1261 -
           (C31861 + C31862) * C1268 - (C31863 + C31864) * C1262 +
           (C31865 + C31866) * C1269 + (C31867 + C31868) * C1263 -
           (C31633 * C1855 + C48410 * C1859 + C31632 * C1274 + C31630 * C1282) *
               C1270 -
           (C31633 * C1860 + C48410 * C1864 + C31632 * C1283 + C31630 * C1292) *
               C1264 +
           (C31632 * C1275 + C31630 * C1284 + C31633 * C6777 + C48410 * C6780) *
               C1271 +
           (C31632 * C1285 + C31630 * C1293 + C31633 * C6781 + C48410 * C6783) *
               C1265) *
              C48377) *
         C48278 * C48044 * C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C47015 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48131 -
            (C37485 + C37486) * C47007 - (C37487 + C37488) * C48138 +
            (C37489 + C37490) * C47021 + (C37491 + C37492) * C3108) *
               C48027 * C5042 +
           ((C37486 + C37485) * C47015 + (C37488 + C37487) * C48131 -
            (C37490 + C37489) * C47007 - (C37492 + C37491) * C48138 +
            (C38350 + C38349) * C47021 + (C38352 + C38351) * C3108) *
               C48027 * C48408) *
              C48049 +
          (((C31862 + C31861) * C47007 -
            ((C31670 + C31669) * C48131 + (C31668 + C31667) * C47015) +
            (C31864 + C31863) * C48138 - (C31866 + C31865) * C47021 -
            (C31868 + C31867) * C3108) *
               C48027 * C5042 +
           ((C31865 + C31866) * C47007 -
            ((C31863 + C31864) * C48131 + (C31861 + C31862) * C47015) +
            (C31867 + C31868) * C48138 - (C33085 + C33086) * C47021 -
            (C33087 + C33088) * C3108) *
               C48027 * C48408) *
              C48057 +
          (((C31674 + C31673) * C47015 + (C31672 + C31671) * C48131 -
            (C31870 + C31869) * C47007 - (C31872 + C31871) * C48138 +
            (C31874 + C31873) * C47021 + (C31876 + C31875) * C3108) *
               C48027 * C5042 +
           ((C31869 + C31870) * C47015 + (C31871 + C31872) * C48131 -
            (C31873 + C31874) * C47007 - (C31875 + C31876) * C48138 +
            (C31632 * C1276 + C31630 * C1286 + C31633 * C1856 +
             C48410 * C1861) *
                C47021 +
            (C31632 * C1287 + C31630 * C1294 + C31633 * C1862 +
             C48410 * C1865) *
                C3108) *
               C48027 * C48408) *
              C3111) *
         C48090) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C47015 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48131 -
             (C37485 + C37486) * C47007 - (C37487 + C37488) * C48138 +
             (C37489 + C37490) * C47021 + (C37491 + C37492) * C3108) *
                C48027 * C5042 +
            ((C37486 + C37485) * C47015 + (C37488 + C37487) * C48131 -
             (C37490 + C37489) * C47007 - (C37492 + C37491) * C48138 +
             (C38350 + C38349) * C47021 + (C38352 + C38351) * C3108) *
                C48027 * C48408) *
               C2812 +
           (((C31862 + C31861) * C47007 -
             ((C31670 + C31669) * C48131 + (C31668 + C31667) * C47015) +
             (C31864 + C31863) * C48138 - (C31866 + C31865) * C47021 -
             (C31868 + C31867) * C3108) *
                C48027 * C5042 +
            ((C31865 + C31866) * C47007 -
             ((C31863 + C31864) * C48131 + (C31861 + C31862) * C47015) +
             (C31867 + C31868) * C48138 - (C33085 + C33086) * C47021 -
             (C33087 + C33088) * C3108) *
                C48027 * C48408) *
               C48054) *
              C48359 +
          ((((C38101 + C38102) * C47007 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C48131 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C47015) +
             (C38103 + C38104) * C48138 - (C38527 + C38528) * C47021 -
             (C38529 + C38530) * C3108) *
                C48027 * C5042 +
            ((C38528 + C38527) * C47007 -
             ((C38104 + C38103) * C48131 + (C38102 + C38101) * C47015) +
             (C38530 + C38529) * C48138 - (C39002 + C39001) * C47021 -
             (C39004 + C39003) * C3108) *
                C48027 * C48408) *
               C2812 +
           (((C32055 + C32056) * C47015 + (C32057 + C32058) * C48131 -
             (C32566 + C32565) * C47007 - (C32568 + C32567) * C48138 +
             (C33292 + C33291) * C47021 + (C33294 + C33293) * C3108) *
                C48027 * C5042 +
            ((C32565 + C32566) * C47015 + (C32567 + C32568) * C48131 -
             (C33291 + C33292) * C47007 - (C33293 + C33294) * C48138 +
             (C31632 * C1855 + C31630 * C1859 + C31633 * C6271 +
              C48410 * C6274) *
                 C47021 +
             (C31632 * C1860 + C31630 * C1864 + C31633 * C6275 +
              C48410 * C6277) *
                 C3108) *
                C48027 * C48408) *
               C48054) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C2814 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48436 -
            (C37485 + C37486) * C2815 - (C37487 + C37488) * C48432 +
            (C37489 + C37490) * C2816 + (C37491 + C37492) * C48422 -
            (C38349 + C38350) * C2817 - (C38351 + C38352) * C48400) *
               C48027 * C5042 +
           ((C37486 + C37485) * C2814 + (C37488 + C37487) * C48436 -
            (C37490 + C37489) * C2815 - (C37492 + C37491) * C48432 +
            (C38350 + C38349) * C2816 + (C38352 + C38351) * C48422 -
            (C38354 + C38353) * C2817 - (C38356 + C38355) * C48400) *
               C48027 * C48408) *
              C2812 +
          (((C31862 + C31861) * C2815 -
            ((C31670 + C31669) * C48436 + (C31668 + C31667) * C2814) +
            (C31864 + C31863) * C48432 - (C31866 + C31865) * C2816 -
            (C31868 + C31867) * C48422 + (C33086 + C33085) * C2817 +
            (C33088 + C33087) * C48400) *
               C48027 * C5042 +
           ((C31865 + C31866) * C2815 -
            ((C31863 + C31864) * C48436 + (C31861 + C31862) * C2814) +
            (C31867 + C31868) * C48432 - (C33085 + C33086) * C2816 -
            (C33087 + C33088) * C48422 +
            (C31632 * C1275 + C31630 * C1284 + C31633 * C6777 +
             C48410 * C6780) *
                C2817 +
            (C31632 * C1285 + C31630 * C1293 + C31633 * C6781 +
             C48410 * C6783) *
                C48400) *
               C48027 * C48408) *
              C48054) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C2686 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C2680 -
            (C37485 + C37486) * C2687 - (C37487 + C37488) * C48135) *
               C48027 * C5042 +
           ((C37486 + C37485) * C2686 + (C37488 + C37487) * C2680 -
            (C37490 + C37489) * C2687 - (C37492 + C37491) * C48135) *
               C48027 * C48408) *
              C48435 +
          (((C31862 + C31861) * C2687 -
            ((C31670 + C31669) * C2680 + (C31668 + C31667) * C2686) +
            (C31864 + C31863) * C48135) *
               C48027 * C5042 +
           ((C31865 + C31866) * C2687 -
            ((C31863 + C31864) * C2680 + (C31861 + C31862) * C2686) +
            (C31867 + C31868) * C48135) *
               C48027 * C48408) *
              C48428 +
          (((C31674 + C31673) * C2686 + (C31672 + C31671) * C2680 -
            (C31870 + C31869) * C2687 - (C31872 + C31871) * C48135) *
               C48027 * C5042 +
           ((C31869 + C31870) * C2686 + (C31871 + C31872) * C2680 -
            (C31873 + C31874) * C2687 - (C31875 + C31876) * C48135) *
               C48027 * C48408) *
              C48415 +
          (((C32210 + C32209) * C2687 -
            ((C31678 + C31677) * C2680 + (C31676 + C31675) * C2686) +
            (C32212 + C32211) * C48135) *
               C48027 * C5042 +
           ((C31632 * C312 + C31630 * C329 + C31633 * C1728 + C48410 * C1729) *
                C2687 -
            ((C32211 + C32212) * C2680 + (C32209 + C32210) * C2686) +
            (C31632 * C330 + C31630 * C342 + C31633 * C1730 + C48410 * C1731) *
                C48135) *
               C48027 * C48408) *
              C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C2686 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C2680 -
             (C37485 + C37486) * C2687 - (C37487 + C37488) * C48135) *
                C48027 * C5042 +
            ((C37486 + C37485) * C2686 + (C37488 + C37487) * C2680 -
             (C37490 + C37489) * C2687 - (C37492 + C37491) * C48135) *
                C48027 * C48408) *
               C2812 +
           (((C31862 + C31861) * C2687 -
             ((C31670 + C31669) * C2680 + (C31668 + C31667) * C2686) +
             (C31864 + C31863) * C48135) *
                C48027 * C5042 +
            ((C31865 + C31866) * C2687 -
             ((C31863 + C31864) * C2680 + (C31861 + C31862) * C2686) +
             (C31867 + C31868) * C48135) *
                C48027 * C48408) *
               C48054) *
              C48430 +
          ((((C38101 + C38102) * C2687 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C2680 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C2686) +
             (C38103 + C38104) * C48135) *
                C48027 * C5042 +
            ((C38528 + C38527) * C2687 -
             ((C38104 + C38103) * C2680 + (C38102 + C38101) * C2686) +
             (C38530 + C38529) * C48135) *
                C48027 * C48408) *
               C2812 +
           (((C32055 + C32056) * C2686 + (C32057 + C32058) * C2680 -
             (C32566 + C32565) * C2687 - (C32568 + C32567) * C48135) *
                C48027 * C5042 +
            ((C32565 + C32566) * C2686 + (C32567 + C32568) * C2680 -
             (C33291 + C33292) * C2687 - (C33293 + C33294) * C48135) *
                C48027 * C48408) *
               C48054) *
              C48419 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C2686 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C2680 -
             (C38531 + C38532) * C2687 - (C38533 + C38534) * C48135) *
                C48027 * C5042 +
            ((C38532 + C38531) * C2686 + (C38534 + C38533) * C2680 -
             (C38536 + C38535) * C2687 - (C38538 + C38537) * C48135) *
                C48027 * C48408) *
               C2812 +
           (((C34002 + C34001) * C2687 -
             ((C32066 + C32065) * C2680 + (C32064 + C32063) * C2686) +
             (C34004 + C34003) * C48135) *
                C48027 * C5042 +
            ((C31632 * C1412 + C31630 * C1427 + C31633 * C7639 +
              C48410 * C7642) *
                 C2687 -
             ((C34003 + C34004) * C2680 + (C34001 + C34002) * C2686) +
             (C31632 * C1428 + C31630 * C1439 + C31633 * C7643 +
              C48410 * C7645) *
                 C48135) *
                C48027 * C48408) *
               C48054) *
              C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C2686 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C2680 -
             (C37485 + C37486) * C2687 - (C37487 + C37488) * C48135) *
                C48027 * C5042 +
            ((C37486 + C37485) * C2686 + (C37488 + C37487) * C2680 -
             (C37490 + C37489) * C2687 - (C37492 + C37491) * C48135) *
                C48027 * C48408) *
               C48049 +
           (((C31862 + C31861) * C2687 -
             ((C31670 + C31669) * C2680 + (C31668 + C31667) * C2686) +
             (C31864 + C31863) * C48135) *
                C48027 * C5042 +
            ((C31865 + C31866) * C2687 -
             ((C31863 + C31864) * C2680 + (C31861 + C31862) * C2686) +
             (C31867 + C31868) * C48135) *
                C48027 * C48408) *
               C48057 +
           (((C31674 + C31673) * C2686 + (C31672 + C31671) * C2680 -
             (C31870 + C31869) * C2687 - (C31872 + C31871) * C48135) *
                C48027 * C5042 +
            ((C31869 + C31870) * C2686 + (C31871 + C31872) * C2680 -
             (C31873 + C31874) * C2687 - (C31875 + C31876) * C48135) *
                C48027 * C48408) *
               C3111) *
              C48359 +
          ((((C38101 + C38102) * C2687 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C2680 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C2686) +
             (C38103 + C38104) * C48135) *
                C48027 * C5042 +
            ((C38528 + C38527) * C2687 -
             ((C38104 + C38103) * C2680 + (C38102 + C38101) * C2686) +
             (C38530 + C38529) * C48135) *
                C48027 * C48408) *
               C48049 +
           (((C32055 + C32056) * C2686 + (C32057 + C32058) * C2680 -
             (C32566 + C32565) * C2687 - (C32568 + C32567) * C48135) *
                C48027 * C5042 +
            ((C32565 + C32566) * C2686 + (C32567 + C32568) * C2680 -
             (C33291 + C33292) * C2687 - (C33293 + C33294) * C48135) *
                C48027 * C48408) *
               C48057 +
           (((C32570 + C32569) * C2687 -
             ((C32062 + C32061) * C2680 + (C32060 + C32059) * C2686) +
             (C32572 + C32571) * C48135) *
                C48027 * C5042 +
            ((C31632 * C1408 + C31630 * C1419 + C31633 * C1414 +
              C48410 * C1431) *
                 C2687 -
             ((C32571 + C32572) * C2680 + (C32569 + C32570) * C2686) +
             (C31632 * C1420 + C31630 * C1435 + C31633 * C1432 +
              C48410 * C1441) *
                 C48135) *
                C48027 * C48408) *
               C3111) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C2686 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C2680 -
            (C37485 + C37486) * C2687 - (C37487 + C37488) * C48135) *
               C48027 * C5042 +
           ((C37486 + C37485) * C2686 + (C37488 + C37487) * C2680 -
            (C37490 + C37489) * C2687 - (C37492 + C37491) * C48135) *
               C48027 * C48408) *
              C48435 +
          (((C31862 + C31861) * C2687 -
            ((C31670 + C31669) * C2680 + (C31668 + C31667) * C2686) +
            (C31864 + C31863) * C48135) *
               C48027 * C5042 +
           ((C31865 + C31866) * C2687 -
            ((C31863 + C31864) * C2680 + (C31861 + C31862) * C2686) +
            (C31867 + C31868) * C48135) *
               C48027 * C48408) *
              C48428 +
          (((C31674 + C31673) * C2686 + (C31672 + C31671) * C2680 -
            (C31870 + C31869) * C2687 - (C31872 + C31871) * C48135) *
               C48027 * C5042 +
           ((C31869 + C31870) * C2686 + (C31871 + C31872) * C2680 -
            (C31873 + C31874) * C2687 - (C31875 + C31876) * C48135) *
               C48027 * C48408) *
              C48415 +
          (((C32210 + C32209) * C2687 -
            ((C31678 + C31677) * C2680 + (C31676 + C31675) * C2686) +
            (C32212 + C32211) * C48135) *
               C48027 * C5042 +
           ((C31632 * C312 + C31630 * C329 + C31633 * C1728 + C48410 * C1729) *
                C2687 -
            ((C32211 + C32212) * C2680 + (C32209 + C32210) * C2686) +
            (C31632 * C330 + C31630 * C342 + C31633 * C1730 + C48410 * C1731) *
                C48135) *
               C48027 * C48408) *
              C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C2814 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48436 -
            (C37485 + C37486) * C2815 - (C37487 + C37488) * C48432 +
            (C37489 + C37490) * C2816 + (C37491 + C37492) * C48422 -
            (C38349 + C38350) * C2817 - (C38351 + C38352) * C48400) *
               C48027 * C5042 +
           ((C37486 + C37485) * C2814 + (C37488 + C37487) * C48436 -
            (C37490 + C37489) * C2815 - (C37492 + C37491) * C48432 +
            (C38350 + C38349) * C2816 + (C38352 + C38351) * C48422 -
            (C38354 + C38353) * C2817 - (C38356 + C38355) * C48400) *
               C48027 * C48408) *
              C2812 +
          (((C31862 + C31861) * C2815 -
            ((C31670 + C31669) * C48436 + (C31668 + C31667) * C2814) +
            (C31864 + C31863) * C48432 - (C31866 + C31865) * C2816 -
            (C31868 + C31867) * C48422 + (C33086 + C33085) * C2817 +
            (C33088 + C33087) * C48400) *
               C48027 * C5042 +
           ((C31865 + C31866) * C2815 -
            ((C31863 + C31864) * C48436 + (C31861 + C31862) * C2814) +
            (C31867 + C31868) * C48432 - (C33085 + C33086) * C2816 -
            (C33087 + C33088) * C48422 +
            (C31632 * C1275 + C31630 * C1284 + C31633 * C6777 +
             C48410 * C6780) *
                C2817 +
            (C31632 * C1285 + C31630 * C1293 + C31633 * C6781 +
             C48410 * C6783) *
                C48400) *
               C48027 * C48408) *
              C48054) *
         C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C47015 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48131 -
             (C37485 + C37486) * C47007 - (C37487 + C37488) * C48138 +
             (C37489 + C37490) * C47021 + (C37491 + C37492) * C3108) *
                C48027 * C5042 +
            ((C37486 + C37485) * C47015 + (C37488 + C37487) * C48131 -
             (C37490 + C37489) * C47007 - (C37492 + C37491) * C48138 +
             (C38350 + C38349) * C47021 + (C38352 + C38351) * C3108) *
                C48027 * C48408) *
               C48344 +
           (((C31862 + C31861) * C47007 -
             ((C31670 + C31669) * C48131 + (C31668 + C31667) * C47015) +
             (C31864 + C31863) * C48138 - (C31866 + C31865) * C47021 -
             (C31868 + C31867) * C3108) *
                C48027 * C5042 +
            ((C31865 + C31866) * C47007 -
             ((C31863 + C31864) * C48131 + (C31861 + C31862) * C47015) +
             (C31867 + C31868) * C48138 - (C33085 + C33086) * C47021 -
             (C33087 + C33088) * C3108) *
                C48027 * C48408) *
               C48054) *
              C3547 +
          ((((C38101 + C38102) * C47007 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C48131 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C47015) +
             (C38103 + C38104) * C48138 - (C38527 + C38528) * C47021 -
             (C38529 + C38530) * C3108) *
                C48027 * C5042 +
            ((C38528 + C38527) * C47007 -
             ((C38104 + C38103) * C48131 + (C38102 + C38101) * C47015) +
             (C38530 + C38529) * C48138 - (C39002 + C39001) * C47021 -
             (C39004 + C39003) * C3108) *
                C48027 * C48408) *
               C48344 +
           (((C32055 + C32056) * C47015 + (C32057 + C32058) * C48131 -
             (C32566 + C32565) * C47007 - (C32568 + C32567) * C48138 +
             (C33292 + C33291) * C47021 + (C33294 + C33293) * C3108) *
                C48027 * C5042 +
            ((C32565 + C32566) * C47015 + (C32567 + C32568) * C48131 -
             (C33291 + C33292) * C47007 - (C33293 + C33294) * C48138 +
             (C31632 * C1855 + C31630 * C1859 + C31633 * C6271 +
              C48410 * C6274) *
                 C47021 +
             (C31632 * C1860 + C31630 * C1864 + C31633 * C6275 +
              C48410 * C6277) *
                 C3108) *
                C48027 * C48408) *
               C48054) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C47015 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48131 -
            (C37485 + C37486) * C47007 - (C37487 + C37488) * C48138 +
            (C37489 + C37490) * C47021 + (C37491 + C37492) * C3108) *
               C48027 * C5042 +
           ((C37486 + C37485) * C47015 + (C37488 + C37487) * C48131 -
            (C37490 + C37489) * C47007 - (C37492 + C37491) * C48138 +
            (C38350 + C38349) * C47021 + (C38352 + C38351) * C3108) *
               C48027 * C48408) *
              C48044 * C48173 +
          (((C38101 + C38102) * C47007 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48131 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C47015) +
            (C38103 + C38104) * C48138 - (C38527 + C38528) * C47021 -
            (C38529 + C38530) * C3108) *
               C48027 * C5042 +
           ((C38528 + C38527) * C47007 -
            ((C38104 + C38103) * C48131 + (C38102 + C38101) * C47015) +
            (C38530 + C38529) * C48138 - (C39002 + C39001) * C47021 -
            (C39004 + C39003) * C3108) *
               C48027 * C48408) *
              C48044 * C48180 +
          (((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                C47015 +
            (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                C48131 -
            (C38531 + C38532) * C47007 - (C38533 + C38534) * C48138 +
            (C38535 + C38536) * C47021 + (C38537 + C38538) * C3108) *
               C48027 * C5042 +
           ((C38532 + C38531) * C47015 + (C38534 + C38533) * C48131 -
            (C38536 + C38535) * C47007 - (C38538 + C38537) * C48138 +
            (C31632 * C6270 + C31630 * C6272 + C31633 * C23734 +
             C48410 * C23735) *
                C47021 +
            (C31632 * C6273 + C31630 * C6276 + C31633 * C23736 +
             C48410 * C23737) *
                C3108) *
               C48027 * C48408) *
              C48044 * C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C2814 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48436 -
            (C37485 + C37486) * C2815 - (C37487 + C37488) * C48432 +
            (C37489 + C37490) * C2816 + (C37491 + C37492) * C48422 -
            (C38349 + C38350) * C2817 - (C38351 + C38352) * C48400) *
               C48027 * C5042 +
           ((C37486 + C37485) * C2814 + (C37488 + C37487) * C48436 -
            (C37490 + C37489) * C2815 - (C37492 + C37491) * C48432 +
            (C38350 + C38349) * C2816 + (C38352 + C38351) * C48422 -
            (C38354 + C38353) * C2817 - (C38356 + C38355) * C48400) *
               C48027 * C48408) *
              C48044 * C3547 +
          (((C38101 + C38102) * C2815 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48436 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C2814) +
            (C38103 + C38104) * C48432 - (C38527 + C38528) * C2816 -
            (C38529 + C38530) * C48422 + (C39001 + C39002) * C2817 +
            (C39003 + C39004) * C48400) *
               C48027 * C5042 +
           ((C38528 + C38527) * C2815 -
            ((C38104 + C38103) * C48436 + (C38102 + C38101) * C2814) +
            (C38530 + C38529) * C48432 - (C39002 + C39001) * C2816 -
            (C39004 + C39003) * C48422 +
            (C31632 * C6776 + C31630 * C6778 + C31633 * C22744 +
             C48410 * C22745) *
                C2817 +
            (C31632 * C6779 + C31630 * C6782 + C31633 * C22746 +
             C48410 * C22747) *
                C48400) *
               C48027 * C48408) *
              C48044 * C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C2686 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C2680 -
             (C37485 + C37486) * C2687 - (C37487 + C37488) * C48135) *
                C48027 * C5042 +
            ((C37486 + C37485) * C2686 + (C37488 + C37487) * C2680 -
             (C37490 + C37489) * C2687 - (C37492 + C37491) * C48135) *
                C48027 * C48408) *
               C48426 +
           (((C31862 + C31861) * C2687 -
             ((C31670 + C31669) * C2680 + (C31668 + C31667) * C2686) +
             (C31864 + C31863) * C48135) *
                C48027 * C5042 +
            ((C31865 + C31866) * C2687 -
             ((C31863 + C31864) * C2680 + (C31861 + C31862) * C2686) +
             (C31867 + C31868) * C48135) *
                C48027 * C48408) *
               C48413 +
           (((C31674 + C31673) * C2686 + (C31672 + C31671) * C2680 -
             (C31870 + C31869) * C2687 - (C31872 + C31871) * C48135) *
                C48027 * C5042 +
            ((C31869 + C31870) * C2686 + (C31871 + C31872) * C2680 -
             (C31873 + C31874) * C2687 - (C31875 + C31876) * C48135) *
                C48027 * C48408) *
               C48384) *
              C3547 +
          ((((C38101 + C38102) * C2687 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C2680 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C2686) +
             (C38103 + C38104) * C48135) *
                C48027 * C5042 +
            ((C38528 + C38527) * C2687 -
             ((C38104 + C38103) * C2680 + (C38102 + C38101) * C2686) +
             (C38530 + C38529) * C48135) *
                C48027 * C48408) *
               C48426 +
           (((C32055 + C32056) * C2686 + (C32057 + C32058) * C2680 -
             (C32566 + C32565) * C2687 - (C32568 + C32567) * C48135) *
                C48027 * C5042 +
            ((C32565 + C32566) * C2686 + (C32567 + C32568) * C2680 -
             (C33291 + C33292) * C2687 - (C33293 + C33294) * C48135) *
                C48027 * C48408) *
               C48413 +
           (((C32570 + C32569) * C2687 -
             ((C32062 + C32061) * C2680 + (C32060 + C32059) * C2686) +
             (C32572 + C32571) * C48135) *
                C48027 * C5042 +
            ((C31632 * C1408 + C31630 * C1419 + C31633 * C1414 +
              C48410 * C1431) *
                 C2687 -
             ((C32571 + C32572) * C2680 + (C32569 + C32570) * C2686) +
             (C31632 * C1420 + C31630 * C1435 + C31633 * C1432 +
              C48410 * C1441) *
                 C48135) *
                C48027 * C48408) *
               C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C2686 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C2680 -
            (C37485 + C37486) * C2687 - (C37487 + C37488) * C48135) *
               C48027 * C5042 +
           ((C37486 + C37485) * C2686 + (C37488 + C37487) * C2680 -
            (C37490 + C37489) * C2687 - (C37492 + C37491) * C48135) *
               C48027 * C48408) *
              C48044 * C48437 +
          (((C38101 + C38102) * C2687 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C2680 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C2686) +
            (C38103 + C38104) * C48135) *
               C48027 * C5042 +
           ((C38528 + C38527) * C2687 -
            ((C38104 + C38103) * C2680 + (C38102 + C38101) * C2686) +
            (C38530 + C38529) * C48135) *
               C48027 * C48408) *
              C48044 * C48434 +
          (((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                C2686 +
            (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                C2680 -
            (C38531 + C38532) * C2687 - (C38533 + C38534) * C48135) *
               C48027 * C5042 +
           ((C38532 + C38531) * C2686 + (C38534 + C38533) * C2680 -
            (C38536 + C38535) * C2687 - (C38538 + C38537) * C48135) *
               C48027 * C48408) *
              C48044 * C48425 +
          (((C39841 + C39842) * C2687 -
            ((C31633 * C2169 + C48410 * C2177 + C31632 * C2166 +
              C31630 * C2176) *
                 C2680 +
             (C31633 * C2159 + C48410 * C2168 + C31632 * C2158 +
              C31630 * C2167) *
                 C2686) +
            (C39843 + C39844) * C48135) *
               C48027 * C5042 +
           ((C31632 * C7638 + C31630 * C7640 + C31633 * C23388 +
             C48410 * C23389) *
                C2687 -
            ((C39844 + C39843) * C2680 + (C39842 + C39841) * C2686) +
            (C31632 * C7641 + C31630 * C7644 + C31633 * C23390 +
             C48410 * C23391) *
                C48135) *
               C48027 * C48408) *
              C48044 * C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C2686 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C2680 -
             (C37485 + C37486) * C2687 - (C37487 + C37488) * C48135) *
                C48027 * C5042 +
            ((C37486 + C37485) * C2686 + (C37488 + C37487) * C2680 -
             (C37490 + C37489) * C2687 - (C37492 + C37491) * C48135) *
                C48027 * C48408) *
               C48344 +
           (((C31862 + C31861) * C2687 -
             ((C31670 + C31669) * C2680 + (C31668 + C31667) * C2686) +
             (C31864 + C31863) * C48135) *
                C48027 * C5042 +
            ((C31865 + C31866) * C2687 -
             ((C31863 + C31864) * C2680 + (C31861 + C31862) * C2686) +
             (C31867 + C31868) * C48135) *
                C48027 * C48408) *
               C48054) *
              C48173 +
          ((((C38101 + C38102) * C2687 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C2680 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C2686) +
             (C38103 + C38104) * C48135) *
                C48027 * C5042 +
            ((C38528 + C38527) * C2687 -
             ((C38104 + C38103) * C2680 + (C38102 + C38101) * C2686) +
             (C38530 + C38529) * C48135) *
                C48027 * C48408) *
               C48344 +
           (((C32055 + C32056) * C2686 + (C32057 + C32058) * C2680 -
             (C32566 + C32565) * C2687 - (C32568 + C32567) * C48135) *
                C48027 * C5042 +
            ((C32565 + C32566) * C2686 + (C32567 + C32568) * C2680 -
             (C33291 + C33292) * C2687 - (C33293 + C33294) * C48135) *
                C48027 * C48408) *
               C48054) *
              C48180 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C2686 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C2680 -
             (C38531 + C38532) * C2687 - (C38533 + C38534) * C48135) *
                C48027 * C5042 +
            ((C38532 + C38531) * C2686 + (C38534 + C38533) * C2680 -
             (C38536 + C38535) * C2687 - (C38538 + C38537) * C48135) *
                C48027 * C48408) *
               C48344 +
           (((C34002 + C34001) * C2687 -
             ((C32066 + C32065) * C2680 + (C32064 + C32063) * C2686) +
             (C34004 + C34003) * C48135) *
                C48027 * C5042 +
            ((C31632 * C1412 + C31630 * C1427 + C31633 * C7639 +
              C48410 * C7642) *
                 C2687 -
             ((C34003 + C34004) * C2680 + (C34001 + C34002) * C2686) +
             (C31632 * C1428 + C31630 * C1439 + C31633 * C7643 +
              C48410 * C7645) *
                 C48135) *
                C48027 * C48408) *
               C48054) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C2686 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C2680 -
             (C37485 + C37486) * C2687 - (C37487 + C37488) * C48135) *
                C48027 * C5042 +
            ((C37486 + C37485) * C2686 + (C37488 + C37487) * C2680 -
             (C37490 + C37489) * C2687 - (C37492 + C37491) * C48135) *
                C48027 * C48408) *
               C48426 +
           (((C31862 + C31861) * C2687 -
             ((C31670 + C31669) * C2680 + (C31668 + C31667) * C2686) +
             (C31864 + C31863) * C48135) *
                C48027 * C5042 +
            ((C31865 + C31866) * C2687 -
             ((C31863 + C31864) * C2680 + (C31861 + C31862) * C2686) +
             (C31867 + C31868) * C48135) *
                C48027 * C48408) *
               C48413 +
           (((C31674 + C31673) * C2686 + (C31672 + C31671) * C2680 -
             (C31870 + C31869) * C2687 - (C31872 + C31871) * C48135) *
                C48027 * C5042 +
            ((C31869 + C31870) * C2686 + (C31871 + C31872) * C2680 -
             (C31873 + C31874) * C2687 - (C31875 + C31876) * C48135) *
                C48027 * C48408) *
               C48384) *
              C3547 +
          ((((C38101 + C38102) * C2687 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C2680 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C2686) +
             (C38103 + C38104) * C48135) *
                C48027 * C5042 +
            ((C38528 + C38527) * C2687 -
             ((C38104 + C38103) * C2680 + (C38102 + C38101) * C2686) +
             (C38530 + C38529) * C48135) *
                C48027 * C48408) *
               C48426 +
           (((C32055 + C32056) * C2686 + (C32057 + C32058) * C2680 -
             (C32566 + C32565) * C2687 - (C32568 + C32567) * C48135) *
                C48027 * C5042 +
            ((C32565 + C32566) * C2686 + (C32567 + C32568) * C2680 -
             (C33291 + C33292) * C2687 - (C33293 + C33294) * C48135) *
                C48027 * C48408) *
               C48413 +
           (((C32570 + C32569) * C2687 -
             ((C32062 + C32061) * C2680 + (C32060 + C32059) * C2686) +
             (C32572 + C32571) * C48135) *
                C48027 * C5042 +
            ((C31632 * C1408 + C31630 * C1419 + C31633 * C1414 +
              C48410 * C1431) *
                 C2687 -
             ((C32571 + C32572) * C2680 + (C32569 + C32570) * C2686) +
             (C31632 * C1420 + C31630 * C1435 + C31633 * C1432 +
              C48410 * C1441) *
                 C48135) *
                C48027 * C48408) *
               C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C2814 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48436 -
            (C37485 + C37486) * C2815 - (C37487 + C37488) * C48432 +
            (C37489 + C37490) * C2816 + (C37491 + C37492) * C48422 -
            (C38349 + C38350) * C2817 - (C38351 + C38352) * C48400) *
               C48027 * C5042 +
           ((C37486 + C37485) * C2814 + (C37488 + C37487) * C48436 -
            (C37490 + C37489) * C2815 - (C37492 + C37491) * C48432 +
            (C38350 + C38349) * C2816 + (C38352 + C38351) * C48422 -
            (C38354 + C38353) * C2817 - (C38356 + C38355) * C48400) *
               C48027 * C48408) *
              C48044 * C3547 +
          (((C38101 + C38102) * C2815 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48436 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C2814) +
            (C38103 + C38104) * C48432 - (C38527 + C38528) * C2816 -
            (C38529 + C38530) * C48422 + (C39001 + C39002) * C2817 +
            (C39003 + C39004) * C48400) *
               C48027 * C5042 +
           ((C38528 + C38527) * C2815 -
            ((C38104 + C38103) * C48436 + (C38102 + C38101) * C2814) +
            (C38530 + C38529) * C48432 - (C39002 + C39001) * C2816 -
            (C39004 + C39003) * C48422 +
            (C31632 * C6776 + C31630 * C6778 + C31633 * C22744 +
             C48410 * C22745) *
                C2817 +
            (C31632 * C6779 + C31630 * C6782 + C31633 * C22746 +
             C48410 * C22747) *
                C48400) *
               C48027 * C48408) *
              C48044 * C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C1546 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C1540 -
            (C37485 + C37486) * C1547 - (C37487 + C37488) * C1541 +
            (C37489 + C37490) * C1548 + (C37491 + C37492) * C1542 -
            (C38349 + C38350) * C1549 - (C38351 + C38352) * C48400) *
               C48027 * C5042 +
           ((C37486 + C37485) * C1546 + (C37488 + C37487) * C1540 -
            (C37490 + C37489) * C1547 - (C37492 + C37491) * C1541 +
            (C38350 + C38349) * C1548 + (C38352 + C38351) * C1542 -
            (C38354 + C38353) * C1549 - (C38356 + C38355) * C48400) *
               C48027 * C48408) *
              C48344 +
          (((C31862 + C31861) * C1547 -
            ((C31670 + C31669) * C1540 + (C31668 + C31667) * C1546) +
            (C31864 + C31863) * C1541 - (C31866 + C31865) * C1548 -
            (C31868 + C31867) * C1542 + (C33086 + C33085) * C1549 +
            (C33088 + C33087) * C48400) *
               C48027 * C5042 +
           ((C31865 + C31866) * C1547 -
            ((C31863 + C31864) * C1540 + (C31861 + C31862) * C1546) +
            (C31867 + C31868) * C1541 - (C33085 + C33086) * C1548 -
            (C33087 + C33088) * C1542 +
            (C31632 * C1275 + C31630 * C1284 + C31633 * C6777 +
             C48410 * C6780) *
                C1549 +
            (C31632 * C1285 + C31630 * C1293 + C31633 * C6781 +
             C48410 * C6783) *
                C48400) *
               C48027 * C48408) *
              C48054) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C711 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48358 -
            (C37485 + C37486) * C712 - (C37487 + C37488) * C48135) *
               C48027 * C5042 +
           ((C37486 + C37485) * C711 + (C37488 + C37487) * C48358 -
            (C37490 + C37489) * C712 - (C37492 + C37491) * C48135) *
               C48027 * C48408) *
              C707 +
          (((C31862 + C31861) * C712 -
            ((C31670 + C31669) * C48358 + (C31668 + C31667) * C711) +
            (C31864 + C31863) * C48135) *
               C48027 * C5042 +
           ((C31865 + C31866) * C712 -
            ((C31863 + C31864) * C48358 + (C31861 + C31862) * C711) +
            (C31867 + C31868) * C48135) *
               C48027 * C48408) *
              C708 +
          (((C31674 + C31673) * C711 + (C31672 + C31671) * C48358 -
            (C31870 + C31869) * C712 - (C31872 + C31871) * C48135) *
               C48027 * C5042 +
           ((C31869 + C31870) * C711 + (C31871 + C31872) * C48358 -
            (C31873 + C31874) * C712 - (C31875 + C31876) * C48135) *
               C48027 * C48408) *
              C709 +
          (((C32210 + C32209) * C712 -
            ((C31678 + C31677) * C48358 + (C31676 + C31675) * C711) +
            (C32212 + C32211) * C48135) *
               C48027 * C5042 +
           ((C31632 * C312 + C31630 * C329 + C31633 * C1728 + C48410 * C1729) *
                C712 -
            ((C32211 + C32212) * C48358 + (C32209 + C32210) * C711) +
            (C31632 * C330 + C31630 * C342 + C31633 * C1730 + C48410 * C1731) *
                C48135) *
               C48027 * C48408) *
              C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C711 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48358 -
             (C37485 + C37486) * C712 - (C37487 + C37488) * C48135) *
                C48027 * C5042 +
            ((C37486 + C37485) * C711 + (C37488 + C37487) * C48358 -
             (C37490 + C37489) * C712 - (C37492 + C37491) * C48135) *
                C48027 * C48408) *
               C48344 +
           (((C31862 + C31861) * C712 -
             ((C31670 + C31669) * C48358 + (C31668 + C31667) * C711) +
             (C31864 + C31863) * C48135) *
                C48027 * C5042 +
            ((C31865 + C31866) * C712 -
             ((C31863 + C31864) * C48358 + (C31861 + C31862) * C711) +
             (C31867 + C31868) * C48135) *
                C48027 * C48408) *
               C48054) *
              C1976 +
          ((((C38101 + C38102) * C712 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C48358 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C711) +
             (C38103 + C38104) * C48135) *
                C48027 * C5042 +
            ((C38528 + C38527) * C712 -
             ((C38104 + C38103) * C48358 + (C38102 + C38101) * C711) +
             (C38530 + C38529) * C48135) *
                C48027 * C48408) *
               C48344 +
           (((C32055 + C32056) * C711 + (C32057 + C32058) * C48358 -
             (C32566 + C32565) * C712 - (C32568 + C32567) * C48135) *
                C48027 * C5042 +
            ((C32565 + C32566) * C711 + (C32567 + C32568) * C48358 -
             (C33291 + C33292) * C712 - (C33293 + C33294) * C48135) *
                C48027 * C48408) *
               C48054) *
              C1977 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C711 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C48358 -
             (C38531 + C38532) * C712 - (C38533 + C38534) * C48135) *
                C48027 * C5042 +
            ((C38532 + C38531) * C711 + (C38534 + C38533) * C48358 -
             (C38536 + C38535) * C712 - (C38538 + C38537) * C48135) *
                C48027 * C48408) *
               C48344 +
           (((C34002 + C34001) * C712 -
             ((C32066 + C32065) * C48358 + (C32064 + C32063) * C711) +
             (C34004 + C34003) * C48135) *
                C48027 * C5042 +
            ((C31632 * C1412 + C31630 * C1427 + C31633 * C7639 +
              C48410 * C7642) *
                 C712 -
             ((C34003 + C34004) * C48358 + (C34001 + C34002) * C711) +
             (C31632 * C1428 + C31630 * C1439 + C31633 * C7643 +
              C48410 * C7645) *
                 C48135) *
                C48027 * C48408) *
               C48054) *
              C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C1546 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C1540 -
            (C37485 + C37486) * C1547 - (C37487 + C37488) * C1541 +
            (C37489 + C37490) * C1548 + (C37491 + C37492) * C1542 -
            (C38349 + C38350) * C1549 - (C38351 + C38352) * C48400) *
               C48027 * C5042 +
           ((C37486 + C37485) * C1546 + (C37488 + C37487) * C1540 -
            (C37490 + C37489) * C1547 - (C37492 + C37491) * C1541 +
            (C38350 + C38349) * C1548 + (C38352 + C38351) * C1542 -
            (C38354 + C38353) * C1549 - (C38356 + C38355) * C48400) *
               C48027 * C48408) *
              C48044 * C48359 +
          (((C38101 + C38102) * C1547 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C1540 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C1546) +
            (C38103 + C38104) * C1541 - (C38527 + C38528) * C1548 -
            (C38529 + C38530) * C1542 + (C39001 + C39002) * C1549 +
            (C39003 + C39004) * C48400) *
               C48027 * C5042 +
           ((C38528 + C38527) * C1547 -
            ((C38104 + C38103) * C1540 + (C38102 + C38101) * C1546) +
            (C38530 + C38529) * C1541 - (C39002 + C39001) * C1548 -
            (C39004 + C39003) * C1542 +
            (C31632 * C6776 + C31630 * C6778 + C31633 * C22744 +
             C48410 * C22745) *
                C1549 +
            (C31632 * C6779 + C31630 * C6782 + C31633 * C22746 +
             C48410 * C22747) *
                C48400) *
               C48027 * C48408) *
              C48044 * C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C711 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48358 -
             (C37485 + C37486) * C712 - (C37487 + C37488) * C48135) *
                C48027 * C5042 +
            ((C37486 + C37485) * C711 + (C37488 + C37487) * C48358 -
             (C37490 + C37489) * C712 - (C37492 + C37491) * C48135) *
                C48027 * C48408) *
               C299 +
           (((C31862 + C31861) * C712 -
             ((C31670 + C31669) * C48358 + (C31668 + C31667) * C711) +
             (C31864 + C31863) * C48135) *
                C48027 * C5042 +
            ((C31865 + C31866) * C712 -
             ((C31863 + C31864) * C48358 + (C31861 + C31862) * C711) +
             (C31867 + C31868) * C48135) *
                C48027 * C48408) *
               C300 +
           (((C31674 + C31673) * C711 + (C31672 + C31671) * C48358 -
             (C31870 + C31869) * C712 - (C31872 + C31871) * C48135) *
                C48027 * C5042 +
            ((C31869 + C31870) * C711 + (C31871 + C31872) * C48358 -
             (C31873 + C31874) * C712 - (C31875 + C31876) * C48135) *
                C48027 * C48408) *
               C48384) *
              C48359 +
          ((((C38101 + C38102) * C712 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C48358 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C711) +
             (C38103 + C38104) * C48135) *
                C48027 * C5042 +
            ((C31632 * C1406 + C31630 * C1415 + C31633 * C1410 +
              C48410 * C1423) *
                 C712 -
             ((C38104 + C38103) * C48358 + (C38102 + C38101) * C711) +
             (C31632 * C1416 + C31630 * C1433 + C31633 * C1424 +
              C48410 * C1437) *
                 C48135) *
                C48027 * C48408) *
               C299 +
           (((C32055 + C32056) * C711 + (C32057 + C32058) * C48358 -
             (C32566 + C32565) * C712 - (C32568 + C32567) * C48135) *
                C48027 * C5042 +
            ((C32565 + C32566) * C711 + (C32567 + C32568) * C48358 -
             (C33291 + C33292) * C712 - (C33293 + C33294) * C48135) *
                C48027 * C48408) *
               C300 +
           (((C32570 + C32569) * C712 -
             ((C32062 + C32061) * C48358 + (C32060 + C32059) * C711) +
             (C32572 + C32571) * C48135) *
                C48027 * C5042 +
            ((C31632 * C1408 + C31630 * C1419 + C31633 * C1414 +
              C48410 * C1431) *
                 C712 -
             ((C32571 + C32572) * C48358 + (C32569 + C32570) * C711) +
             (C31632 * C1420 + C31630 * C1435 + C31633 * C1432 +
              C48410 * C1441) *
                 C48135) *
                C48027 * C48408) *
               C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C711 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48358 -
            (C37485 + C37486) * C712 - (C37487 + C37488) * C48135) *
               C48027 * C5042 +
           ((C37486 + C37485) * C711 + (C37488 + C37487) * C48358 -
            (C37490 + C37489) * C712 - (C37492 + C37491) * C48135) *
               C48027 * C48408) *
              C48044 * C2448 +
          (((C38101 + C38102) * C712 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48358 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C711) +
            (C38103 + C38104) * C48135) *
               C48027 * C5042 +
           ((C38528 + C38527) * C712 -
            ((C38104 + C38103) * C48358 + (C38102 + C38101) * C711) +
            (C38530 + C38529) * C48135) *
               C48027 * C48408) *
              C48044 * C2449 +
          (((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                C711 +
            (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                C48358 -
            (C38531 + C38532) * C712 - (C38533 + C38534) * C48135) *
               C48027 * C5042 +
           ((C38532 + C38531) * C711 + (C38534 + C38533) * C48358 -
            (C38536 + C38535) * C712 - (C38538 + C38537) * C48135) *
               C48027 * C48408) *
              C48044 * C2450 +
          (((C39841 + C39842) * C712 -
            ((C31633 * C2169 + C48410 * C2177 + C31632 * C2166 +
              C31630 * C2176) *
                 C48358 +
             (C31633 * C2159 + C48410 * C2168 + C31632 * C2158 +
              C31630 * C2167) *
                 C711) +
            (C39843 + C39844) * C48135) *
               C48027 * C5042 +
           ((C31632 * C7638 + C31630 * C7640 + C31633 * C23388 +
             C48410 * C23389) *
                C712 -
            ((C39844 + C39843) * C48358 + (C39842 + C39841) * C711) +
            (C31632 * C7641 + C31630 * C7644 + C31633 * C23390 +
             C48410 * C23391) *
                C48135) *
               C48027 * C48408) *
              C48044 * C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C31632 * C115 + C31630 * C122 + C31633 * C520 +
                 C48410 * C534) *
                    C114 +
                (C31632 * C123 + C31630 * C136 + C31633 * C533 +
                 C48410 * C550) *
                    C48072) *
                   C48027 * C5042 +
               ((C31632 * C305 + C31630 * C315 + C31633 * C1004 +
                 C48410 * C1009) *
                    C114 +
                (C31632 * C316 + C31630 * C335 + C31633 * C1010 +
                 C48410 * C1019) *
                    C48072) *
                   C48027 * C48408) *
                  C107 -
              (((C31863 + C31864) * C48072 + (C31861 + C31862) * C114) *
                   C48027 * C48408 +
               ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) *
                   C48027 * C5042) *
                  C108 +
              (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) *
                   C48027 * C5042 +
               ((C31869 + C31870) * C114 + (C31871 + C31872) * C48072) *
                   C48027 * C48408) *
                  C109 -
              (((C32211 + C32212) * C48072 + (C32209 + C32210) * C114) *
                   C48027 * C48408 +
               ((C31678 + C31677) * C48072 + (C31676 + C31675) * C114) *
                   C48027 * C5042) *
                  C110 +
              (((C31682 + C31681) * C114 + (C31680 + C31679) * C48072) *
                   C48027 * C5042 +
               ((C31632 * C313 + C31630 * C331 + C31633 * C1008 +
                 C48410 * C1017) *
                    C114 +
                (C31632 * C332 + C31630 * C343 + C31633 * C1018 +
                 C48410 * C1023) *
                    C48072) *
                   C48027 * C48408) *
                  C111) *
             C48090 +
         0.5 * std::pow(Pi, 2.5) *
             ((((C31632 * C115 + C31630 * C122 + C31633 * C520 +
                 C48410 * C534) *
                    C302 +
                (C31632 * C123 + C31630 * C136 + C31633 * C533 +
                 C48410 * C550) *
                    C48429 -
                (C37485 + C37486) * C303 - (C37487 + C37488) * C48417 +
                (C37489 + C37490) * C304 + (C37491 + C37492) * C48390) *
                   C48027 * C5042 +
               ((C37486 + C37485) * C302 + (C37488 + C37487) * C48429 -
                (C37490 + C37489) * C303 - (C37492 + C37491) * C48417 +
                (C31632 * C1272 + C31630 * C1278 + C31633 * C1854 +
                 C48410 * C1857) *
                    C304 +
                (C31632 * C1279 + C31630 * C1290 + C31633 * C1858 +
                 C48410 * C1863) *
                    C48390) *
                   C48027 * C48408) *
                  C299 +
              (((C31862 + C31861) * C303 -
                ((C31670 + C31669) * C48429 + (C31668 + C31667) * C302) +
                (C31864 + C31863) * C48417 - (C31866 + C31865) * C304 -
                (C31868 + C31867) * C48390) *
                   C48027 * C5042 +
               ((C31865 + C31866) * C303 -
                ((C31863 + C31864) * C48429 + (C31861 + C31862) * C302) +
                (C31867 + C31868) * C48417 - (C33085 + C33086) * C304 -
                (C33087 + C33088) * C48390) *
                   C48027 * C48408) *
                  C300 +
              (((C31674 + C31673) * C302 + (C31672 + C31671) * C48429 -
                (C31870 + C31869) * C303 - (C31872 + C31871) * C48417 +
                (C31874 + C31873) * C304 + (C31876 + C31875) * C48390) *
                   C48027 * C5042 +
               ((C31869 + C31870) * C302 + (C31871 + C31872) * C48429 -
                (C31873 + C31874) * C303 - (C31875 + C31876) * C48417 +
                (C31632 * C1276 + C31630 * C1286 + C31633 * C1856 +
                 C48410 * C1861) *
                    C304 +
                (C31632 * C1287 + C31630 * C1294 + C31633 * C1862 +
                 C48410 * C1865) *
                    C48390) *
                   C48027 * C48408) *
                  C48384) *
             C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C5042 +
            ((C37486 + C37485) * C114 + (C37488 + C37487) * C48072) * C48027 *
                C48408) *
               C299 -
           (((C31863 + C31864) * C48072 + (C31861 + C31862) * C114) * C48027 *
                C48408 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C48027 *
                C5042) *
               C300 +
           (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C48027 *
                C5042 +
            ((C31869 + C31870) * C114 + (C31871 + C31872) * C48072) * C48027 *
                C48408) *
               C48384) *
              C48430 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C48027 *
                C5042 +
            ((C32565 + C32566) * C114 + (C32567 + C32568) * C48072) * C48027 *
                C48408) *
               C300 -
           (((C31633 * C1422 + C48410 * C1436 + C31632 * C1010 +
              C31630 * C1019) *
                 C48072 +
             (C31633 * C1409 + C48410 * C1421 + C31632 * C1004 +
              C31630 * C1009) *
                 C114) *
                C48027 * C48408 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C48027 * C5042) *
               C299 -
           (((C32571 + C32572) * C48072 + (C32569 + C32570) * C114) * C48027 *
                C48408 +
            ((C32062 + C32061) * C48072 + (C32060 + C32059) * C114) * C48027 *
                C5042) *
               C48384) *
              C48419 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C114 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C48072) *
                C48027 * C5042 +
            ((C31632 * C1409 + C31630 * C1421 + C31633 * C2570 +
              C48410 * C2573) *
                 C114 +
             (C31632 * C1422 + C31630 * C1436 + C31633 * C2574 +
              C48410 * C2579) *
                 C48072) *
                C48027 * C48408) *
               C299 -
           (((C34003 + C34004) * C48072 + (C34001 + C34002) * C114) * C48027 *
                C48408 +
            ((C32066 + C32065) * C48072 + (C32064 + C32063) * C114) * C48027 *
                C5042) *
               C300 +
           (((C32070 + C32069) * C114 + (C32068 + C32067) * C48072) * C48027 *
                C5042 +
            ((C31632 * C1413 + C31630 * C1429 + C31633 * C2572 +
              C48410 * C2577) *
                 C114 +
             (C31632 * C1430 + C31630 * C1440 + C31633 * C2578 +
              C48410 * C2581) *
                 C48072) *
                C48027 * C48408) *
               C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C1173 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C1167 -
            (C37485 + C37486) * C1174 - (C37487 + C37488) * C1168 +
            (C37489 + C37490) * C1175 + (C37491 + C37492) * C48390) *
               C48027 * C5042 +
           ((C37486 + C37485) * C1173 + (C37488 + C37487) * C1167 -
            (C37490 + C37489) * C1174 - (C37492 + C37491) * C1168 +
            (C31632 * C1272 + C31630 * C1278 + C31633 * C1854 +
             C48410 * C1857) *
                C1175 +
            (C31632 * C1279 + C31630 * C1290 + C31633 * C1858 +
             C48410 * C1863) *
                C48390) *
               C48027 * C48408) *
              C48426 +
          (((C31862 + C31861) * C1174 -
            ((C31670 + C31669) * C1167 + (C31668 + C31667) * C1173) +
            (C31864 + C31863) * C1168 - (C31866 + C31865) * C1175 -
            (C31868 + C31867) * C48390) *
               C48027 * C5042 +
           ((C31865 + C31866) * C1174 -
            ((C31863 + C31864) * C1167 + (C31861 + C31862) * C1173) +
            (C31867 + C31868) * C1168 - (C33085 + C33086) * C1175 -
            (C33087 + C33088) * C48390) *
               C48027 * C48408) *
              C48413 +
          (((C31674 + C31673) * C1173 + (C31672 + C31671) * C1167 -
            (C31870 + C31869) * C1174 - (C31872 + C31871) * C1168 +
            (C31874 + C31873) * C1175 + (C31876 + C31875) * C48390) *
               C48027 * C5042 +
           ((C31869 + C31870) * C1173 + (C31871 + C31872) * C1167 -
            (C31873 + C31874) * C1174 - (C31875 + C31876) * C1168 +
            (C31632 * C1276 + C31630 * C1286 + C31633 * C1856 +
             C48410 * C1861) *
                C1175 +
            (C31632 * C1287 + C31630 * C1294 + C31633 * C1862 +
             C48410 * C1865) *
                C48390) *
               C48027 * C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
               C1267 +
           (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
               C1261 -
           (C37485 + C37486) * C1268 - (C37487 + C37488) * C1262 +
           (C37489 + C37490) * C1269 + (C37491 + C37492) * C1263 -
           (C38349 + C38350) * C1270 - (C38351 + C38352) * C1264 +
           (C38353 + C38354) * C1271 + (C38355 + C38356) * C1265) *
              C48027 * C5042 +
          ((C37486 + C37485) * C1267 + (C37488 + C37487) * C1261 -
           (C37490 + C37489) * C1268 - (C37492 + C37491) * C1262 +
           (C38350 + C38349) * C1269 + (C38352 + C38351) * C1263 -
           (C38354 + C38353) * C1270 - (C38356 + C38355) * C1264 +
           (C31632 * C6098 + C31630 * C6100 + C31633 * C23096 +
            C48410 * C23097) *
               C1271 +
           (C31632 * C6101 + C31630 * C6104 + C31633 * C23098 +
            C48410 * C23099) *
               C1265) *
              C48027 * C48408) *
         C48044 * C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C1173 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C1167 -
            (C37485 + C37486) * C1174 - (C37487 + C37488) * C1168 +
            (C37489 + C37490) * C1175 + (C37491 + C37492) * C48390) *
               C48027 * C5042 +
           ((C37486 + C37485) * C1173 + (C37488 + C37487) * C1167 -
            (C37490 + C37489) * C1174 - (C37492 + C37491) * C1168 +
            (C38350 + C38349) * C1175 + (C38352 + C38351) * C48390) *
               C48027 * C48408) *
              C48044 * C48430 +
          (((C38101 + C38102) * C1174 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C1167 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C1173) +
            (C38103 + C38104) * C1168 - (C38527 + C38528) * C1175 -
            (C38529 + C38530) * C48390) *
               C48027 * C5042 +
           ((C38528 + C38527) * C1174 -
            ((C38104 + C38103) * C1167 + (C38102 + C38101) * C1173) +
            (C38530 + C38529) * C1168 -
            (C31633 * C6270 + C48410 * C6272 + C31632 * C1854 +
             C31630 * C1857) *
                C1175 -
            (C31633 * C6273 + C48410 * C6276 + C31632 * C1858 +
             C31630 * C1863) *
                C48390) *
               C48027 * C48408) *
              C48044 * C48419 +
          (((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                C1173 +
            (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                C1167 -
            (C38531 + C38532) * C1174 - (C38533 + C38534) * C1168 +
            (C38535 + C38536) * C1175 + (C38537 + C38538) * C48390) *
               C48027 * C5042 +
           ((C38532 + C38531) * C1173 + (C38534 + C38533) * C1167 -
            (C38536 + C38535) * C1174 - (C38538 + C38537) * C1168 +
            (C31632 * C6270 + C31630 * C6272 + C31633 * C23734 +
             C48410 * C23735) *
                C1175 +
            (C31632 * C6273 + C31630 * C6276 + C31633 * C23736 +
             C48410 * C23737) *
                C48390) *
               C48027 * C48408) *
              C48044 * C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C5042 +
            ((C37486 + C37485) * C114 + (C37488 + C37487) * C48072) * C48027 *
                C48408) *
               C48426 -
           (((C31863 + C31864) * C48072 + (C31861 + C31862) * C114) * C48027 *
                C48408 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C48027 *
                C5042) *
               C48413 +
           (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C48027 *
                C5042 +
            ((C31869 + C31870) * C114 + (C31871 + C31872) * C48072) * C48027 *
                C48408) *
               C48384) *
              C1976 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C48027 *
                C5042 +
            ((C32565 + C32566) * C114 + (C32567 + C32568) * C48072) * C48027 *
                C48408) *
               C48413 -
           (((C38104 + C38103) * C48072 + (C38102 + C38101) * C114) * C48027 *
                C48408 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C48027 * C5042) *
               C48426 -
           (((C32571 + C32572) * C48072 + (C32569 + C32570) * C114) * C48027 *
                C48408 +
            ((C32062 + C32061) * C48072 + (C32060 + C32059) * C114) * C48027 *
                C5042) *
               C48384) *
              C1977 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C114 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C48072) *
                C48027 * C5042 +
            ((C38532 + C38531) * C114 + (C38534 + C38533) * C48072) * C48027 *
                C48408) *
               C48426 -
           (((C34003 + C34004) * C48072 + (C34001 + C34002) * C114) * C48027 *
                C48408 +
            ((C32066 + C32065) * C48072 + (C32064 + C32063) * C114) * C48027 *
                C5042) *
               C48413 +
           (((C32070 + C32069) * C114 + (C32068 + C32067) * C48072) * C48027 *
                C5042 +
            ((C31632 * C1413 + C31630 * C1429 + C31633 * C2572 +
              C48410 * C2577) *
                 C114 +
             (C31632 * C1430 + C31630 * C1440 + C31633 * C2578 +
              C48410 * C2581) *
                 C48072) *
                C48027 * C48408) *
               C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C302 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48429 -
            (C37485 + C37486) * C303 - (C37487 + C37488) * C48417 +
            (C37489 + C37490) * C304 + (C37491 + C37492) * C48390) *
               C48027 * C5042 +
           ((C37486 + C37485) * C302 + (C37488 + C37487) * C48429 -
            (C37490 + C37489) * C303 - (C37492 + C37491) * C48417 +
            (C38350 + C38349) * C304 + (C38352 + C38351) * C48390) *
               C48027 * C48408) *
              C48044 * C1976 +
          (((C38101 + C38102) * C303 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48429 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C302) +
            (C38103 + C38104) * C48417 - (C38527 + C38528) * C304 -
            (C38529 + C38530) * C48390) *
               C48027 * C5042 +
           ((C38528 + C38527) * C303 -
            ((C38104 + C38103) * C48429 + (C38102 + C38101) * C302) +
            (C38530 + C38529) * C48417 - (C39002 + C39001) * C304 -
            (C39004 + C39003) * C48390) *
               C48027 * C48408) *
              C48044 * C1977 +
          (((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                C302 +
            (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                C48429 -
            (C38531 + C38532) * C303 - (C38533 + C38534) * C48417 +
            (C38535 + C38536) * C304 + (C38537 + C38538) * C48390) *
               C48027 * C5042 +
           ((C38532 + C38531) * C302 + (C38534 + C38533) * C48429 -
            (C38536 + C38535) * C303 - (C38538 + C38537) * C48417 +
            (C31632 * C6270 + C31630 * C6272 + C31633 * C23734 +
             C48410 * C23735) *
                C304 +
            (C31632 * C6273 + C31630 * C6276 + C31633 * C23736 +
             C48410 * C23737) *
                C48390) *
               C48027 * C48408) *
              C48044 * C48393)) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C114 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48072) *
               C48027 * C5042 +
           ((C37486 + C37485) * C114 + (C37488 + C37487) * C48072) * C48027 *
               C48408) *
              C48044 * C2151 -
          (((C38104 + C38103) * C48072 + (C38102 + C38101) * C114) * C48027 *
               C48408 +
           ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                C48072 +
            (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                C114) *
               C48027 * C5042) *
              C48044 * C2152 +
          (((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                C114 +
            (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                C48072) *
               C48027 * C5042 +
           ((C38532 + C38531) * C114 + (C38534 + C38533) * C48072) * C48027 *
               C48408) *
              C48044 * C2153 -
          (((C31633 * C7167 + C48410 * C7170 + C31632 * C2574 +
             C31630 * C2579) *
                C48072 +
            (C31633 * C7164 + C48410 * C7166 + C31632 * C2570 +
             C31630 * C2573) *
                C114) *
               C48027 * C48408 +
           ((C31633 * C2169 + C48410 * C2177 + C31632 * C2166 +
             C31630 * C2176) *
                C48072 +
            (C31633 * C2159 + C48410 * C2168 + C31632 * C2158 +
             C31630 * C2167) *
                C114) *
               C48027 * C5042) *
              C48044 * C2154 +
          (((C31632 * C2159 + C31630 * C2168 + C31633 * C12922 +
             C48410 * C12924) *
                C114 +
            (C31632 * C2169 + C31630 * C2177 + C31633 * C12925 +
             C48410 * C12928) *
                C48072) *
               C48027 * C5042 +
           ((C31632 * C7164 + C31630 * C7166 + C31633 * C28114 +
             C48410 * C28115) *
                C114 +
            (C31632 * C7167 + C31630 * C7170 + C31633 * C28116 +
             C48410 * C28117) *
                C48072) *
               C48027 * C48408) *
              C48044 * C2155)) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C1173 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C1167 -
             (C37485 + C37486) * C1174 - (C37487 + C37488) * C1168 +
             (C37489 + C37490) * C1175 + (C37491 + C37492) * C48390) *
                C48027 * C5042 +
            ((C37486 + C37485) * C1173 + (C37488 + C37487) * C1167 -
             (C37490 + C37489) * C1174 - (C37492 + C37491) * C1168 +
             (C38350 + C38349) * C1175 + (C38352 + C38351) * C48390) *
                C48027 * C48408) *
               C48344 +
           (((C31862 + C31861) * C1174 -
             ((C31670 + C31669) * C1167 + (C31668 + C31667) * C1173) +
             (C31864 + C31863) * C1168 - (C31866 + C31865) * C1175 -
             (C31868 + C31867) * C48390) *
                C48027 * C5042 +
            ((C31865 + C31866) * C1174 -
             ((C31863 + C31864) * C1167 + (C31861 + C31862) * C1173) +
             (C31867 + C31868) * C1168 - (C33085 + C33086) * C1175 -
             (C33087 + C33088) * C48390) *
                C48027 * C48408) *
               C48054) *
              C48359 +
          ((((C38101 + C38102) * C1174 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C1167 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C1173) +
             (C38103 + C38104) * C1168 - (C38527 + C38528) * C1175 -
             (C38529 + C38530) * C48390) *
                C48027 * C5042 +
            ((C38528 + C38527) * C1174 -
             ((C38104 + C38103) * C1167 + (C38102 + C38101) * C1173) +
             (C38530 + C38529) * C1168 -
             (C31633 * C6270 + C48410 * C6272 + C31632 * C1854 +
              C31630 * C1857) *
                 C1175 -
             (C31633 * C6273 + C48410 * C6276 + C31632 * C1858 +
              C31630 * C1863) *
                 C48390) *
                C48027 * C48408) *
               C48344 +
           (((C32055 + C32056) * C1173 + (C32057 + C32058) * C1167 -
             (C32566 + C32565) * C1174 - (C32568 + C32567) * C1168 +
             (C33292 + C33291) * C1175 + (C33294 + C33293) * C48390) *
                C48027 * C5042 +
            ((C32565 + C32566) * C1173 + (C32567 + C32568) * C1167 -
             (C33291 + C33292) * C1174 - (C33293 + C33294) * C1168 +
             (C31632 * C1855 + C31630 * C1859 + C31633 * C6271 +
              C48410 * C6274) *
                 C1175 +
             (C31632 * C1860 + C31630 * C1864 + C31633 * C6275 +
              C48410 * C6277) *
                 C48390) *
                C48027 * C48408) *
               C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C5042 +
            ((C37486 + C37485) * C114 + (C37488 + C37487) * C48072) * C48027 *
                C48408) *
               C707 -
           (((C31863 + C31864) * C48072 + (C31861 + C31862) * C114) * C48027 *
                C48408 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C48027 *
                C5042) *
               C708 +
           (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C48027 *
                C5042 +
            ((C31869 + C31870) * C114 + (C31871 + C31872) * C48072) * C48027 *
                C48408) *
               C709 -
           (((C32211 + C32212) * C48072 + (C32209 + C32210) * C114) * C48027 *
                C48408 +
            ((C31678 + C31677) * C48072 + (C31676 + C31675) * C114) * C48027 *
                C5042) *
               C48394) *
              C48359 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C48027 *
                C5042 +
            ((C32565 + C32566) * C114 + (C32567 + C32568) * C48072) * C48027 *
                C48408) *
               C708 -
           (((C31633 * C1422 + C48410 * C1436 + C31632 * C1010 +
              C31630 * C1019) *
                 C48072 +
             (C31633 * C1409 + C48410 * C1421 + C31632 * C1004 +
              C31630 * C1009) *
                 C114) *
                C48027 * C48408 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C48027 * C5042) *
               C707 -
           (((C32571 + C32572) * C48072 + (C32569 + C32570) * C114) * C48027 *
                C48408 +
            ((C32062 + C32061) * C48072 + (C32060 + C32059) * C114) * C48027 *
                C5042) *
               C709 +
           (((C32354 + C32353) * C114 + (C32352 + C32351) * C48072) * C48027 *
                C5042 +
            ((C31632 * C1007 + C31630 * C1015 + C31633 * C2326 +
              C48410 * C2327) *
                 C114 +
             (C31632 * C1016 + C31630 * C1022 + C31633 * C2328 +
              C48410 * C2329) *
                 C48072) *
                C48027 * C48408) *
               C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C5042 +
            ((C37486 + C37485) * C114 + (C37488 + C37487) * C48072) * C48027 *
                C48408) *
               C48344 -
           (((C31863 + C31864) * C48072 + (C31861 + C31862) * C114) * C48027 *
                C48408 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C48027 *
                C5042) *
               C48054) *
              C2448 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C48027 *
                C5042 +
            ((C32565 + C32566) * C114 + (C32567 + C32568) * C48072) * C48027 *
                C48408) *
               C48054 -
           (((C38104 + C38103) * C48072 + (C38102 + C38101) * C114) * C48027 *
                C48408 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C48027 * C5042) *
               C48344) *
              C2449 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C114 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C48072) *
                C48027 * C5042 +
            ((C38532 + C38531) * C114 + (C38534 + C38533) * C48072) * C48027 *
                C48408) *
               C48344 -
           (((C34003 + C34004) * C48072 + (C34001 + C34002) * C114) * C48027 *
                C48408 +
            ((C32066 + C32065) * C48072 + (C32064 + C32063) * C114) * C48027 *
                C5042) *
               C48054) *
              C2450 +
          ((((C34143 + C34144) * C114 + (C34145 + C34146) * C48072) * C48027 *
                C5042 +
            ((C31632 * C2571 + C31630 * C2575 + C31633 * C7165 +
              C48410 * C7168) *
                 C114 +
             (C31632 * C2576 + C31630 * C2580 + C31633 * C7169 +
              C48410 * C7171) *
                 C48072) *
                C48027 * C48408) *
               C48054 -
           (((C31633 * C7167 + C48410 * C7170 + C31632 * C2574 +
              C31630 * C2579) *
                 C48072 +
             (C31633 * C7164 + C48410 * C7166 + C31632 * C2570 +
              C31630 * C2573) *
                 C114) *
                C48027 * C48408 +
            ((C31633 * C2169 + C48410 * C2177 + C31632 * C2166 +
              C31630 * C2176) *
                 C48072 +
             (C31633 * C2159 + C48410 * C2168 + C31632 * C2158 +
              C31630 * C2167) *
                 C114) *
                C48027 * C5042) *
               C48344) *
              C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C302 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48429 -
            (C37485 + C37486) * C303 - (C37487 + C37488) * C48417 +
            (C37489 + C37490) * C304 + (C37491 + C37492) * C48390) *
               C48027 * C5042 +
           ((C37486 + C37485) * C302 + (C37488 + C37487) * C48429 -
            (C37490 + C37489) * C303 - (C37492 + C37491) * C48417 +
            (C31632 * C1272 + C31630 * C1278 + C31633 * C1854 +
             C48410 * C1857) *
                C304 +
            (C31632 * C1279 + C31630 * C1290 + C31633 * C1858 +
             C48410 * C1863) *
                C48390) *
               C48027 * C48408) *
              C299 +
          (((C31862 + C31861) * C303 -
            ((C31670 + C31669) * C48429 + (C31668 + C31667) * C302) +
            (C31864 + C31863) * C48417 - (C31866 + C31865) * C304 -
            (C31868 + C31867) * C48390) *
               C48027 * C5042 +
           ((C31865 + C31866) * C303 -
            ((C31863 + C31864) * C48429 + (C31861 + C31862) * C302) +
            (C31867 + C31868) * C48417 - (C33085 + C33086) * C304 -
            (C33087 + C33088) * C48390) *
               C48027 * C48408) *
              C300 +
          (((C31674 + C31673) * C302 + (C31672 + C31671) * C48429 -
            (C31870 + C31869) * C303 - (C31872 + C31871) * C48417 +
            (C31874 + C31873) * C304 + (C31876 + C31875) * C48390) *
               C48027 * C5042 +
           ((C31869 + C31870) * C302 + (C31871 + C31872) * C48429 -
            (C31873 + C31874) * C303 - (C31875 + C31876) * C48417 +
            (C31632 * C1276 + C31630 * C1286 + C31633 * C1856 +
             C48410 * C1861) *
                C304 +
            (C31632 * C1287 + C31630 * C1294 + C31633 * C1862 +
             C48410 * C1865) *
                C48390) *
               C48027 * C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C114 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48072) *
               C48027 * C5042 +
           ((C31632 * C305 + C31630 * C315 + C31633 * C1004 + C48410 * C1009) *
                C114 +
            (C31632 * C316 + C31630 * C335 + C31633 * C1010 + C48410 * C1019) *
                C48072) *
               C48027 * C48408) *
              C107 -
          (((C31863 + C31864) * C48072 + (C31861 + C31862) * C114) * C48027 *
               C48408 +
           ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C48027 *
               C5042) *
              C108 +
          (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C48027 *
               C5042 +
           ((C31869 + C31870) * C114 + (C31871 + C31872) * C48072) * C48027 *
               C48408) *
              C109 -
          (((C32211 + C32212) * C48072 + (C32209 + C32210) * C114) * C48027 *
               C48408 +
           ((C31678 + C31677) * C48072 + (C31676 + C31675) * C114) * C48027 *
               C5042) *
              C110 +
          (((C31682 + C31681) * C114 + (C31680 + C31679) * C48072) * C48027 *
               C5042 +
           ((C31632 * C313 + C31630 * C331 + C31633 * C1008 + C48410 * C1017) *
                C114 +
            (C31632 * C332 + C31630 * C343 + C31633 * C1018 + C48410 * C1023) *
                C48072) *
               C48027 * C48408) *
              C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C1173 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C1167 -
            (C37485 + C37486) * C1174 - (C37487 + C37488) * C1168 +
            (C37489 + C37490) * C1175 + (C37491 + C37492) * C48390) *
               C48027 * C5042 +
           ((C37486 + C37485) * C1173 + (C37488 + C37487) * C1167 -
            (C37490 + C37489) * C1174 - (C37492 + C37491) * C1168 +
            (C31632 * C1272 + C31630 * C1278 + C31633 * C1854 +
             C48410 * C1857) *
                C1175 +
            (C31632 * C1279 + C31630 * C1290 + C31633 * C1858 +
             C48410 * C1863) *
                C48390) *
               C48027 * C48408) *
              C48426 +
          (((C31862 + C31861) * C1174 -
            ((C31670 + C31669) * C1167 + (C31668 + C31667) * C1173) +
            (C31864 + C31863) * C1168 - (C31866 + C31865) * C1175 -
            (C31868 + C31867) * C48390) *
               C48027 * C5042 +
           ((C31865 + C31866) * C1174 -
            ((C31863 + C31864) * C1167 + (C31861 + C31862) * C1173) +
            (C31867 + C31868) * C1168 - (C33085 + C33086) * C1175 -
            (C33087 + C33088) * C48390) *
               C48027 * C48408) *
              C48413 +
          (((C31674 + C31673) * C1173 + (C31672 + C31671) * C1167 -
            (C31870 + C31869) * C1174 - (C31872 + C31871) * C1168 +
            (C31874 + C31873) * C1175 + (C31876 + C31875) * C48390) *
               C48027 * C5042 +
           ((C31869 + C31870) * C1173 + (C31871 + C31872) * C1167 -
            (C31873 + C31874) * C1174 - (C31875 + C31876) * C1168 +
            (C31632 * C1276 + C31630 * C1286 + C31633 * C1856 +
             C48410 * C1861) *
                C1175 +
            (C31632 * C1287 + C31630 * C1294 + C31633 * C1862 +
             C48410 * C1865) *
                C48390) *
               C48027 * C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
               C1267 +
           (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
               C1261 -
           (C37485 + C37486) * C1268 - (C37487 + C37488) * C1262 +
           (C37489 + C37490) * C1269 + (C37491 + C37492) * C1263 -
           (C38349 + C38350) * C1270 - (C38351 + C38352) * C1264 +
           (C38353 + C38354) * C1271 + (C38355 + C38356) * C1265) *
              C48027 * C5042 +
          ((C37486 + C37485) * C1267 + (C37488 + C37487) * C1261 -
           (C37490 + C37489) * C1268 - (C37492 + C37491) * C1262 +
           (C38350 + C38349) * C1269 + (C38352 + C38351) * C1263 -
           (C38354 + C38353) * C1270 - (C38356 + C38355) * C1264 +
           (C31632 * C6098 + C31630 * C6100 + C31633 * C23096 +
            C48410 * C23097) *
               C1271 +
           (C31632 * C6101 + C31630 * C6104 + C31633 * C23098 +
            C48410 * C23099) *
               C1265) *
              C48027 * C48408) *
         C48044 * C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C5042 +
            ((C37486 + C37485) * C114 + (C37488 + C37487) * C48072) * C48027 *
                C48408) *
               C48426 -
           (((C31863 + C31864) * C48072 + (C31861 + C31862) * C114) * C48027 *
                C48408 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C48027 *
                C5042) *
               C48413 +
           (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C48027 *
                C5042 +
            ((C31869 + C31870) * C114 + (C31871 + C31872) * C48072) * C48027 *
                C48408) *
               C48384) *
              C1976 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C48027 *
                C5042 +
            ((C32565 + C32566) * C114 + (C32567 + C32568) * C48072) * C48027 *
                C48408) *
               C48413 -
           (((C38104 + C38103) * C48072 + (C38102 + C38101) * C114) * C48027 *
                C48408 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C48027 * C5042) *
               C48426 -
           (((C32571 + C32572) * C48072 + (C32569 + C32570) * C114) * C48027 *
                C48408 +
            ((C32062 + C32061) * C48072 + (C32060 + C32059) * C114) * C48027 *
                C5042) *
               C48384) *
              C1977 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C114 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C48072) *
                C48027 * C5042 +
            ((C38532 + C38531) * C114 + (C38534 + C38533) * C48072) * C48027 *
                C48408) *
               C48426 -
           (((C34003 + C34004) * C48072 + (C34001 + C34002) * C114) * C48027 *
                C48408 +
            ((C32066 + C32065) * C48072 + (C32064 + C32063) * C114) * C48027 *
                C5042) *
               C48413 +
           (((C32070 + C32069) * C114 + (C32068 + C32067) * C48072) * C48027 *
                C5042 +
            ((C31632 * C1413 + C31630 * C1429 + C31633 * C2572 +
              C48410 * C2577) *
                 C114 +
             (C31632 * C1430 + C31630 * C1440 + C31633 * C2578 +
              C48410 * C2581) *
                 C48072) *
                C48027 * C48408) *
               C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C302 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48429 -
            (C37485 + C37486) * C303 - (C37487 + C37488) * C48417 +
            (C37489 + C37490) * C304 + (C37491 + C37492) * C48390) *
               C48027 * C5042 +
           ((C37486 + C37485) * C302 + (C37488 + C37487) * C48429 -
            (C37490 + C37489) * C303 - (C37492 + C37491) * C48417 +
            (C38350 + C38349) * C304 + (C38352 + C38351) * C48390) *
               C48027 * C48408) *
              C48044 * C1976 +
          (((C38101 + C38102) * C303 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48429 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C302) +
            (C38103 + C38104) * C48417 - (C38527 + C38528) * C304 -
            (C38529 + C38530) * C48390) *
               C48027 * C5042 +
           ((C38528 + C38527) * C303 -
            ((C38104 + C38103) * C48429 + (C38102 + C38101) * C302) +
            (C38530 + C38529) * C48417 - (C39002 + C39001) * C304 -
            (C39004 + C39003) * C48390) *
               C48027 * C48408) *
              C48044 * C1977 +
          (((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                C302 +
            (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                C48429 -
            (C38531 + C38532) * C303 - (C38533 + C38534) * C48417 +
            (C38535 + C38536) * C304 + (C38537 + C38538) * C48390) *
               C48027 * C5042 +
           ((C38532 + C38531) * C302 + (C38534 + C38533) * C48429 -
            (C38536 + C38535) * C303 - (C38538 + C38537) * C48417 +
            (C31632 * C6270 + C31630 * C6272 + C31633 * C23734 +
             C48410 * C23735) *
                C304 +
            (C31632 * C6273 + C31630 * C6276 + C31633 * C23736 +
             C48410 * C23737) *
                C48390) *
               C48027 * C48408) *
              C48044 * C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C711 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48358 -
             (C37485 + C37486) * C712 - (C37487 + C37488) * C48135) *
                C48027 * C5042 +
            ((C37486 + C37485) * C711 + (C37488 + C37487) * C48358 -
             (C37490 + C37489) * C712 - (C37492 + C37491) * C48135) *
                C48027 * C48408) *
               C48049 +
           (((C31862 + C31861) * C712 -
             ((C31670 + C31669) * C48358 + (C31668 + C31667) * C711) +
             (C31864 + C31863) * C48135) *
                C48027 * C5042 +
            ((C31865 + C31866) * C712 -
             ((C31863 + C31864) * C48358 + (C31861 + C31862) * C711) +
             (C31867 + C31868) * C48135) *
                C48027 * C48408) *
               C48057 +
           (((C31674 + C31673) * C711 + (C31672 + C31671) * C48358 -
             (C31870 + C31869) * C712 - (C31872 + C31871) * C48135) *
                C48027 * C5042 +
            ((C31869 + C31870) * C711 + (C31871 + C31872) * C48358 -
             (C31873 + C31874) * C712 - (C31875 + C31876) * C48135) *
                C48027 * C48408) *
               C3111) *
              C3547 +
          ((((C38101 + C38102) * C712 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C48358 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C711) +
             (C38103 + C38104) * C48135) *
                C48027 * C5042 +
            ((C38528 + C38527) * C712 -
             ((C38104 + C38103) * C48358 + (C38102 + C38101) * C711) +
             (C38530 + C38529) * C48135) *
                C48027 * C48408) *
               C48049 +
           (((C32055 + C32056) * C711 + (C32057 + C32058) * C48358 -
             (C32566 + C32565) * C712 - (C32568 + C32567) * C48135) *
                C48027 * C5042 +
            ((C32565 + C32566) * C711 + (C32567 + C32568) * C48358 -
             (C33291 + C33292) * C712 - (C33293 + C33294) * C48135) *
                C48027 * C48408) *
               C48057 +
           (((C32570 + C32569) * C712 -
             ((C32062 + C32061) * C48358 + (C32060 + C32059) * C711) +
             (C32572 + C32571) * C48135) *
                C48027 * C5042 +
            ((C31632 * C1408 + C31630 * C1419 + C31633 * C1414 +
              C48410 * C1431) *
                 C712 -
             ((C32571 + C32572) * C48358 + (C32569 + C32570) * C711) +
             (C31632 * C1420 + C31630 * C1435 + C31633 * C1432 +
              C48410 * C1441) *
                 C48135) *
                C48027 * C48408) *
               C3111) *
              C48177)) /
        (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C711 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48358 -
             (C37485 + C37486) * C712 - (C37487 + C37488) * C48135) *
                C48027 * C5042 +
            ((C37486 + C37485) * C711 + (C37488 + C37487) * C48358 -
             (C37490 + C37489) * C712 - (C37492 + C37491) * C48135) *
                C48027 * C48408) *
               C2812 +
           (((C31862 + C31861) * C712 -
             ((C31670 + C31669) * C48358 + (C31668 + C31667) * C711) +
             (C31864 + C31863) * C48135) *
                C48027 * C5042 +
            ((C31865 + C31866) * C712 -
             ((C31863 + C31864) * C48358 + (C31861 + C31862) * C711) +
             (C31867 + C31868) * C48135) *
                C48027 * C48408) *
               C48054) *
              C48173 +
          ((((C38101 + C38102) * C712 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C48358 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C711) +
             (C38103 + C38104) * C48135) *
                C48027 * C5042 +
            ((C38528 + C38527) * C712 -
             ((C38104 + C38103) * C48358 + (C38102 + C38101) * C711) +
             (C38530 + C38529) * C48135) *
                C48027 * C48408) *
               C2812 +
           (((C32055 + C32056) * C711 + (C32057 + C32058) * C48358 -
             (C32566 + C32565) * C712 - (C32568 + C32567) * C48135) *
                C48027 * C5042 +
            ((C32565 + C32566) * C711 + (C32567 + C32568) * C48358 -
             (C33291 + C33292) * C712 - (C33293 + C33294) * C48135) *
                C48027 * C48408) *
               C48054) *
              C48180 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C711 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C48358 -
             (C38531 + C38532) * C712 - (C38533 + C38534) * C48135) *
                C48027 * C5042 +
            ((C38532 + C38531) * C711 + (C38534 + C38533) * C48358 -
             (C38536 + C38535) * C712 - (C38538 + C38537) * C48135) *
                C48027 * C48408) *
               C2812 +
           (((C34002 + C34001) * C712 -
             ((C32066 + C32065) * C48358 + (C32064 + C32063) * C711) +
             (C34004 + C34003) * C48135) *
                C48027 * C5042 +
            ((C31632 * C1412 + C31630 * C1427 + C31633 * C7639 +
              C48410 * C7642) *
                 C712 -
             ((C34003 + C34004) * C48358 + (C34001 + C34002) * C711) +
             (C31632 * C1428 + C31630 * C1439 + C31633 * C7643 +
              C48410 * C7645) *
                 C48135) *
                C48027 * C48408) *
               C48054) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C302 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48429 -
             (C37485 + C37486) * C303 - (C37487 + C37488) * C48417 +
             (C37489 + C37490) * C304 + (C37491 + C37492) * C48390) *
                C48027 * C5042 +
            ((C37486 + C37485) * C302 + (C37488 + C37487) * C48429 -
             (C37490 + C37489) * C303 - (C37492 + C37491) * C48417 +
             (C38350 + C38349) * C304 + (C38352 + C38351) * C48390) *
                C48027 * C48408) *
               C2812 +
           (((C31862 + C31861) * C303 -
             ((C31670 + C31669) * C48429 + (C31668 + C31667) * C302) +
             (C31864 + C31863) * C48417 - (C31866 + C31865) * C304 -
             (C31868 + C31867) * C48390) *
                C48027 * C5042 +
            ((C31865 + C31866) * C303 -
             ((C31863 + C31864) * C48429 + (C31861 + C31862) * C302) +
             (C31867 + C31868) * C48417 - (C33085 + C33086) * C304 -
             (C33087 + C33088) * C48390) *
                C48027 * C48408) *
               C48054) *
              C3547 +
          ((((C38101 + C38102) * C303 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C48429 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C302) +
             (C38103 + C38104) * C48417 - (C38527 + C38528) * C304 -
             (C38529 + C38530) * C48390) *
                C48027 * C5042 +
            ((C38528 + C38527) * C303 -
             ((C38104 + C38103) * C48429 + (C38102 + C38101) * C302) +
             (C38530 + C38529) * C48417 - (C39002 + C39001) * C304 -
             (C39004 + C39003) * C48390) *
                C48027 * C48408) *
               C2812 +
           (((C32055 + C32056) * C302 + (C32057 + C32058) * C48429 -
             (C32566 + C32565) * C303 - (C32568 + C32567) * C48417 +
             (C33292 + C33291) * C304 + (C33294 + C33293) * C48390) *
                C48027 * C5042 +
            ((C32565 + C32566) * C302 + (C32567 + C32568) * C48429 -
             (C33291 + C33292) * C303 - (C33293 + C33294) * C48417 +
             (C31632 * C1855 + C31630 * C1859 + C31633 * C6271 +
              C48410 * C6274) *
                 C304 +
             (C31632 * C1860 + C31630 * C1864 + C31633 * C6275 +
              C48410 * C6277) *
                 C48390) *
                C48027 * C48408) *
               C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C5042 +
            ((C37486 + C37485) * C114 + (C37488 + C37487) * C48072) * C48027 *
                C48408) *
               C48435 -
           (((C31863 + C31864) * C48072 + (C31861 + C31862) * C114) * C48027 *
                C48408 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C48027 *
                C5042) *
               C48428 +
           (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C48027 *
                C5042 +
            ((C31869 + C31870) * C114 + (C31871 + C31872) * C48072) * C48027 *
                C48408) *
               C48415 -
           (((C32211 + C32212) * C48072 + (C32209 + C32210) * C114) * C48027 *
                C48408 +
            ((C31678 + C31677) * C48072 + (C31676 + C31675) * C114) * C48027 *
                C5042) *
               C48394) *
              C3547 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C48027 *
                C5042 +
            ((C32565 + C32566) * C114 + (C32567 + C32568) * C48072) * C48027 *
                C48408) *
               C48428 -
           (((C38104 + C38103) * C48072 + (C38102 + C38101) * C114) * C48027 *
                C48408 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C48027 * C5042) *
               C48435 -
           (((C32571 + C32572) * C48072 + (C32569 + C32570) * C114) * C48027 *
                C48408 +
            ((C32062 + C32061) * C48072 + (C32060 + C32059) * C114) * C48027 *
                C5042) *
               C48415 +
           (((C32354 + C32353) * C114 + (C32352 + C32351) * C48072) * C48027 *
                C5042 +
            ((C31632 * C1007 + C31630 * C1015 + C31633 * C2326 +
              C48410 * C2327) *
                 C114 +
             (C31632 * C1016 + C31630 * C1022 + C31633 * C2328 +
              C48410 * C2329) *
                 C48072) *
                C48027 * C48408) *
               C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C5042 +
            ((C37486 + C37485) * C114 + (C37488 + C37487) * C48072) * C48027 *
                C48408) *
               C2812 -
           (((C31863 + C31864) * C48072 + (C31861 + C31862) * C114) * C48027 *
                C48408 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C48027 *
                C5042) *
               C48054) *
              C48437 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C48027 *
                C5042 +
            ((C32565 + C32566) * C114 + (C32567 + C32568) * C48072) * C48027 *
                C48408) *
               C48054 -
           (((C38104 + C38103) * C48072 + (C38102 + C38101) * C114) * C48027 *
                C48408 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C48027 * C5042) *
               C2812) *
              C48434 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C114 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C48072) *
                C48027 * C5042 +
            ((C38532 + C38531) * C114 + (C38534 + C38533) * C48072) * C48027 *
                C48408) *
               C2812 -
           (((C34003 + C34004) * C48072 + (C34001 + C34002) * C114) * C48027 *
                C48408 +
            ((C32066 + C32065) * C48072 + (C32064 + C32063) * C114) * C48027 *
                C5042) *
               C48054) *
              C48425 +
          ((((C34143 + C34144) * C114 + (C34145 + C34146) * C48072) * C48027 *
                C5042 +
            ((C31632 * C2571 + C31630 * C2575 + C31633 * C7165 +
              C48410 * C7168) *
                 C114 +
             (C31632 * C2576 + C31630 * C2580 + C31633 * C7169 +
              C48410 * C7171) *
                 C48072) *
                C48027 * C48408) *
               C48054 -
           (((C39844 + C39843) * C48072 + (C39842 + C39841) * C114) * C48027 *
                C48408 +
            ((C31633 * C2169 + C48410 * C2177 + C31632 * C2166 +
              C31630 * C2176) *
                 C48072 +
             (C31633 * C2159 + C48410 * C2168 + C31632 * C2158 +
              C31630 * C2167) *
                 C114) *
                C48027 * C5042) *
               C2812) *
              C48406)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C5042 +
            ((C37486 + C37485) * C114 + (C37488 + C37487) * C48072) * C48027 *
                C48408) *
               C48049 -
           (((C31863 + C31864) * C48072 + (C31861 + C31862) * C114) * C48027 *
                C48408 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C48027 *
                C5042) *
               C48057 +
           (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C48027 *
                C5042 +
            ((C31869 + C31870) * C114 + (C31871 + C31872) * C48072) * C48027 *
                C48408) *
               C3111) *
              C48173 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C48027 *
                C5042 +
            ((C32565 + C32566) * C114 + (C32567 + C32568) * C48072) * C48027 *
                C48408) *
               C48057 -
           (((C38104 + C38103) * C48072 + (C38102 + C38101) * C114) * C48027 *
                C48408 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C48027 * C5042) *
               C48049 -
           (((C32571 + C32572) * C48072 + (C32569 + C32570) * C114) * C48027 *
                C48408 +
            ((C32062 + C32061) * C48072 + (C32060 + C32059) * C114) * C48027 *
                C5042) *
               C3111) *
              C48180 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C114 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C48072) *
                C48027 * C5042 +
            ((C38532 + C38531) * C114 + (C38534 + C38533) * C48072) * C48027 *
                C48408) *
               C48049 -
           (((C34003 + C34004) * C48072 + (C34001 + C34002) * C114) * C48027 *
                C48408 +
            ((C32066 + C32065) * C48072 + (C32064 + C32063) * C114) * C48027 *
                C5042) *
               C48057 +
           (((C32070 + C32069) * C114 + (C32068 + C32067) * C48072) * C48027 *
                C5042 +
            ((C31632 * C1413 + C31630 * C1429 + C31633 * C2572 +
              C48410 * C2577) *
                 C114 +
             (C31632 * C1430 + C31630 * C1440 + C31633 * C2578 +
              C48410 * C2581) *
                 C48072) *
                C48027 * C48408) *
               C3111) *
              C4067)) /
        (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C5042 +
            ((C37486 + C37485) * C114 + (C37488 + C37487) * C48072) * C48027 *
                C48408) *
               C48435 -
           (((C31863 + C31864) * C48072 + (C31861 + C31862) * C114) * C48027 *
                C48408 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C48027 *
                C5042) *
               C48428 +
           (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C48027 *
                C5042 +
            ((C31869 + C31870) * C114 + (C31871 + C31872) * C48072) * C48027 *
                C48408) *
               C48415 -
           (((C32211 + C32212) * C48072 + (C32209 + C32210) * C114) * C48027 *
                C48408 +
            ((C31678 + C31677) * C48072 + (C31676 + C31675) * C114) * C48027 *
                C5042) *
               C48394) *
              C3547 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C48027 *
                C5042 +
            ((C32565 + C32566) * C114 + (C32567 + C32568) * C48072) * C48027 *
                C48408) *
               C48428 -
           (((C38104 + C38103) * C48072 + (C38102 + C38101) * C114) * C48027 *
                C48408 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C48027 * C5042) *
               C48435 -
           (((C32571 + C32572) * C48072 + (C32569 + C32570) * C114) * C48027 *
                C48408 +
            ((C32062 + C32061) * C48072 + (C32060 + C32059) * C114) * C48027 *
                C5042) *
               C48415 +
           (((C32354 + C32353) * C114 + (C32352 + C32351) * C48072) * C48027 *
                C5042 +
            ((C31632 * C1007 + C31630 * C1015 + C31633 * C2326 +
              C48410 * C2327) *
                 C114 +
             (C31632 * C1016 + C31630 * C1022 + C31633 * C2328 +
              C48410 * C2329) *
                 C48072) *
                C48027 * C48408) *
               C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C302 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48429 -
             (C37485 + C37486) * C303 - (C37487 + C37488) * C48417 +
             (C37489 + C37490) * C304 + (C37491 + C37492) * C48390) *
                C48027 * C5042 +
            ((C37486 + C37485) * C302 + (C37488 + C37487) * C48429 -
             (C37490 + C37489) * C303 - (C37492 + C37491) * C48417 +
             (C38350 + C38349) * C304 + (C38352 + C38351) * C48390) *
                C48027 * C48408) *
               C2812 +
           (((C31862 + C31861) * C303 -
             ((C31670 + C31669) * C48429 + (C31668 + C31667) * C302) +
             (C31864 + C31863) * C48417 - (C31866 + C31865) * C304 -
             (C31868 + C31867) * C48390) *
                C48027 * C5042 +
            ((C31865 + C31866) * C303 -
             ((C31863 + C31864) * C48429 + (C31861 + C31862) * C302) +
             (C31867 + C31868) * C48417 - (C33085 + C33086) * C304 -
             (C33087 + C33088) * C48390) *
                C48027 * C48408) *
               C48054) *
              C3547 +
          ((((C38101 + C38102) * C303 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C48429 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C302) +
             (C38103 + C38104) * C48417 - (C38527 + C38528) * C304 -
             (C38529 + C38530) * C48390) *
                C48027 * C5042 +
            ((C38528 + C38527) * C303 -
             ((C38104 + C38103) * C48429 + (C38102 + C38101) * C302) +
             (C38530 + C38529) * C48417 - (C39002 + C39001) * C304 -
             (C39004 + C39003) * C48390) *
                C48027 * C48408) *
               C2812 +
           (((C32055 + C32056) * C302 + (C32057 + C32058) * C48429 -
             (C32566 + C32565) * C303 - (C32568 + C32567) * C48417 +
             (C33292 + C33291) * C304 + (C33294 + C33293) * C48390) *
                C48027 * C5042 +
            ((C32565 + C32566) * C302 + (C32567 + C32568) * C48429 -
             (C33291 + C33292) * C303 - (C33293 + C33294) * C48417 +
             (C31632 * C1855 + C31630 * C1859 + C31633 * C6271 +
              C48410 * C6274) *
                 C304 +
             (C31632 * C1860 + C31630 * C1864 + C31633 * C6275 +
              C48410 * C6277) *
                 C48390) *
                C48027 * C48408) *
               C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C711 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48358 -
            (C37485 + C37486) * C712 - (C37487 + C37488) * C48135) *
               C48027 * C5042 +
           ((C37486 + C37485) * C711 + (C37488 + C37487) * C48358 -
            (C37490 + C37489) * C712 - (C37492 + C37491) * C48135) *
               C48027 * C48408) *
              C707 +
          (((C31862 + C31861) * C712 -
            ((C31670 + C31669) * C48358 + (C31668 + C31667) * C711) +
            (C31864 + C31863) * C48135) *
               C48027 * C5042 +
           ((C31865 + C31866) * C712 -
            ((C31863 + C31864) * C48358 + (C31861 + C31862) * C711) +
            (C31867 + C31868) * C48135) *
               C48027 * C48408) *
              C708 +
          (((C31674 + C31673) * C711 + (C31672 + C31671) * C48358 -
            (C31870 + C31869) * C712 - (C31872 + C31871) * C48135) *
               C48027 * C5042 +
           ((C31869 + C31870) * C711 + (C31871 + C31872) * C48358 -
            (C31873 + C31874) * C712 - (C31875 + C31876) * C48135) *
               C48027 * C48408) *
              C709 +
          (((C32210 + C32209) * C712 -
            ((C31678 + C31677) * C48358 + (C31676 + C31675) * C711) +
            (C32212 + C32211) * C48135) *
               C48027 * C5042 +
           ((C31632 * C312 + C31630 * C329 + C31633 * C1728 + C48410 * C1729) *
                C712 -
            ((C32211 + C32212) * C48358 + (C32209 + C32210) * C711) +
            (C31632 * C330 + C31630 * C342 + C31633 * C1730 + C48410 * C1731) *
                C48135) *
               C48027 * C48408) *
              C48394) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C1546 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C1540 -
            (C37485 + C37486) * C1547 - (C37487 + C37488) * C1541 +
            (C37489 + C37490) * C1548 + (C37491 + C37492) * C1542 -
            (C38349 + C38350) * C1549 - (C38351 + C38352) * C48400) *
               C48027 * C5042 +
           ((C37486 + C37485) * C1546 + (C37488 + C37487) * C1540 -
            (C37490 + C37489) * C1547 - (C37492 + C37491) * C1541 +
            (C38350 + C38349) * C1548 + (C38352 + C38351) * C1542 -
            (C38354 + C38353) * C1549 - (C38356 + C38355) * C48400) *
               C48027 * C48408) *
              C48344 +
          (((C31862 + C31861) * C1547 -
            ((C31670 + C31669) * C1540 + (C31668 + C31667) * C1546) +
            (C31864 + C31863) * C1541 - (C31866 + C31865) * C1548 -
            (C31868 + C31867) * C1542 + (C33086 + C33085) * C1549 +
            (C33088 + C33087) * C48400) *
               C48027 * C5042 +
           ((C31865 + C31866) * C1547 -
            ((C31863 + C31864) * C1540 + (C31861 + C31862) * C1546) +
            (C31867 + C31868) * C1541 - (C33085 + C33086) * C1548 -
            (C33087 + C33088) * C1542 +
            (C31632 * C1275 + C31630 * C1284 + C31633 * C6777 +
             C48410 * C6780) *
                C1549 +
            (C31632 * C1285 + C31630 * C1293 + C31633 * C6781 +
             C48410 * C6783) *
                C48400) *
               C48027 * C48408) *
              C48054) *
         C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C711 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48358 -
             (C37485 + C37486) * C712 - (C37487 + C37488) * C48135) *
                C48027 * C5042 +
            ((C37486 + C37485) * C711 + (C37488 + C37487) * C48358 -
             (C37490 + C37489) * C712 - (C37492 + C37491) * C48135) *
                C48027 * C48408) *
               C299 +
           (((C31862 + C31861) * C712 -
             ((C31670 + C31669) * C48358 + (C31668 + C31667) * C711) +
             (C31864 + C31863) * C48135) *
                C48027 * C5042 +
            ((C31865 + C31866) * C712 -
             ((C31863 + C31864) * C48358 + (C31861 + C31862) * C711) +
             (C31867 + C31868) * C48135) *
                C48027 * C48408) *
               C300 +
           (((C31674 + C31673) * C711 + (C31672 + C31671) * C48358 -
             (C31870 + C31869) * C712 - (C31872 + C31871) * C48135) *
                C48027 * C5042 +
            ((C31869 + C31870) * C711 + (C31871 + C31872) * C48358 -
             (C31873 + C31874) * C712 - (C31875 + C31876) * C48135) *
                C48027 * C48408) *
               C48384) *
              C48359 +
          ((((C38101 + C38102) * C712 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C48358 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C711) +
             (C38103 + C38104) * C48135) *
                C48027 * C5042 +
            ((C31632 * C1406 + C31630 * C1415 + C31633 * C1410 +
              C48410 * C1423) *
                 C712 -
             ((C38104 + C38103) * C48358 + (C38102 + C38101) * C711) +
             (C31632 * C1416 + C31630 * C1433 + C31633 * C1424 +
              C48410 * C1437) *
                 C48135) *
                C48027 * C48408) *
               C299 +
           (((C32055 + C32056) * C711 + (C32057 + C32058) * C48358 -
             (C32566 + C32565) * C712 - (C32568 + C32567) * C48135) *
                C48027 * C5042 +
            ((C32565 + C32566) * C711 + (C32567 + C32568) * C48358 -
             (C33291 + C33292) * C712 - (C33293 + C33294) * C48135) *
                C48027 * C48408) *
               C300 +
           (((C32570 + C32569) * C712 -
             ((C32062 + C32061) * C48358 + (C32060 + C32059) * C711) +
             (C32572 + C32571) * C48135) *
                C48027 * C5042 +
            ((C31632 * C1408 + C31630 * C1419 + C31633 * C1414 +
              C48410 * C1431) *
                 C712 -
             ((C32571 + C32572) * C48358 + (C32569 + C32570) * C711) +
             (C31632 * C1420 + C31630 * C1435 + C31633 * C1432 +
              C48410 * C1441) *
                 C48135) *
                C48027 * C48408) *
               C48384) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C1546 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C1540 -
            (C37485 + C37486) * C1547 - (C37487 + C37488) * C1541 +
            (C37489 + C37490) * C1548 + (C37491 + C37492) * C1542 -
            (C38349 + C38350) * C1549 - (C38351 + C38352) * C48400) *
               C48027 * C5042 +
           ((C37486 + C37485) * C1546 + (C37488 + C37487) * C1540 -
            (C37490 + C37489) * C1547 - (C37492 + C37491) * C1541 +
            (C38350 + C38349) * C1548 + (C38352 + C38351) * C1542 -
            (C38354 + C38353) * C1549 - (C38356 + C38355) * C48400) *
               C48027 * C48408) *
              C48044 * C48359 +
          (((C38101 + C38102) * C1547 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C1540 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C1546) +
            (C38103 + C38104) * C1541 - (C38527 + C38528) * C1548 -
            (C38529 + C38530) * C1542 + (C39001 + C39002) * C1549 +
            (C39003 + C39004) * C48400) *
               C48027 * C5042 +
           ((C38528 + C38527) * C1547 -
            ((C38104 + C38103) * C1540 + (C38102 + C38101) * C1546) +
            (C38530 + C38529) * C1541 - (C39002 + C39001) * C1548 -
            (C39004 + C39003) * C1542 +
            (C31632 * C6776 + C31630 * C6778 + C31633 * C22744 +
             C48410 * C22745) *
                C1549 +
            (C31632 * C6779 + C31630 * C6782 + C31633 * C22746 +
             C48410 * C22747) *
                C48400) *
               C48027 * C48408) *
              C48044 * C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C302 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48429 -
            (C37485 + C37486) * C303 - (C37487 + C37488) * C48417 +
            (C37489 + C37490) * C304 + (C37491 + C37492) * C48390) *
               C48027 * C5042 +
           ((C37486 + C37485) * C302 + (C37488 + C37487) * C48429 -
            (C37490 + C37489) * C303 - (C37492 + C37491) * C48417 +
            (C31632 * C1272 + C31630 * C1278 + C31633 * C1854 +
             C48410 * C1857) *
                C304 +
            (C31632 * C1279 + C31630 * C1290 + C31633 * C1858 +
             C48410 * C1863) *
                C48390) *
               C48027 * C48408) *
              C299 +
          (((C31862 + C31861) * C303 -
            ((C31670 + C31669) * C48429 + (C31668 + C31667) * C302) +
            (C31864 + C31863) * C48417 - (C31866 + C31865) * C304 -
            (C31868 + C31867) * C48390) *
               C48027 * C5042 +
           ((C31865 + C31866) * C303 -
            ((C31863 + C31864) * C48429 + (C31861 + C31862) * C302) +
            (C31867 + C31868) * C48417 - (C33085 + C33086) * C304 -
            (C33087 + C33088) * C48390) *
               C48027 * C48408) *
              C300 +
          (((C31674 + C31673) * C302 + (C31672 + C31671) * C48429 -
            (C31870 + C31869) * C303 - (C31872 + C31871) * C48417 +
            (C31874 + C31873) * C304 + (C31876 + C31875) * C48390) *
               C48027 * C5042 +
           ((C31869 + C31870) * C302 + (C31871 + C31872) * C48429 -
            (C31873 + C31874) * C303 - (C31875 + C31876) * C48417 +
            (C31632 * C1276 + C31630 * C1286 + C31633 * C1856 +
             C48410 * C1861) *
                C304 +
            (C31632 * C1287 + C31630 * C1294 + C31633 * C1862 +
             C48410 * C1865) *
                C48390) *
               C48027 * C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C114 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48072) *
               C48027 * C5042 +
           ((C31632 * C305 + C31630 * C315 + C31633 * C1004 + C48410 * C1009) *
                C114 +
            (C31632 * C316 + C31630 * C335 + C31633 * C1010 + C48410 * C1019) *
                C48072) *
               C48027 * C48408) *
              C107 -
          (((C31863 + C31864) * C48072 + (C31861 + C31862) * C114) * C48027 *
               C48408 +
           ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C48027 *
               C5042) *
              C108 +
          (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C48027 *
               C5042 +
           ((C31869 + C31870) * C114 + (C31871 + C31872) * C48072) * C48027 *
               C48408) *
              C109 -
          (((C32211 + C32212) * C48072 + (C32209 + C32210) * C114) * C48027 *
               C48408 +
           ((C31678 + C31677) * C48072 + (C31676 + C31675) * C114) * C48027 *
               C5042) *
              C110 +
          (((C31682 + C31681) * C114 + (C31680 + C31679) * C48072) * C48027 *
               C5042 +
           ((C31632 * C313 + C31630 * C331 + C31633 * C1008 + C48410 * C1017) *
                C114 +
            (C31632 * C332 + C31630 * C343 + C31633 * C1018 + C48410 * C1023) *
                C48072) *
               C48027 * C48408) *
              C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C5042 +
            ((C37486 + C37485) * C114 + (C37488 + C37487) * C48072) * C48027 *
                C48408) *
               C299 -
           (((C31863 + C31864) * C48072 + (C31861 + C31862) * C114) * C48027 *
                C48408 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C48027 *
                C5042) *
               C300 +
           (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C48027 *
                C5042 +
            ((C31869 + C31870) * C114 + (C31871 + C31872) * C48072) * C48027 *
                C48408) *
               C48384) *
              C48430 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C48027 *
                C5042 +
            ((C32565 + C32566) * C114 + (C32567 + C32568) * C48072) * C48027 *
                C48408) *
               C300 -
           (((C31633 * C1422 + C48410 * C1436 + C31632 * C1010 +
              C31630 * C1019) *
                 C48072 +
             (C31633 * C1409 + C48410 * C1421 + C31632 * C1004 +
              C31630 * C1009) *
                 C114) *
                C48027 * C48408 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C48027 * C5042) *
               C299 -
           (((C32571 + C32572) * C48072 + (C32569 + C32570) * C114) * C48027 *
                C48408 +
            ((C32062 + C32061) * C48072 + (C32060 + C32059) * C114) * C48027 *
                C5042) *
               C48384) *
              C48419 +
          ((((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                 C114 +
             (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                 C48072) *
                C48027 * C5042 +
            ((C31632 * C1409 + C31630 * C1421 + C31633 * C2570 +
              C48410 * C2573) *
                 C114 +
             (C31632 * C1422 + C31630 * C1436 + C31633 * C2574 +
              C48410 * C2579) *
                 C48072) *
                C48027 * C48408) *
               C299 -
           (((C34003 + C34004) * C48072 + (C34001 + C34002) * C114) * C48027 *
                C48408 +
            ((C32066 + C32065) * C48072 + (C32064 + C32063) * C114) * C48027 *
                C5042) *
               C300 +
           (((C32070 + C32069) * C114 + (C32068 + C32067) * C48072) * C48027 *
                C5042 +
            ((C31632 * C1413 + C31630 * C1429 + C31633 * C2572 +
              C48410 * C2577) *
                 C114 +
             (C31632 * C1430 + C31630 * C1440 + C31633 * C2578 +
              C48410 * C2581) *
                 C48072) *
                C48027 * C48408) *
               C48384) *
              C48393)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C1173 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C1167 -
            (C37485 + C37486) * C1174 - (C37487 + C37488) * C1168 +
            (C37489 + C37490) * C1175 + (C37491 + C37492) * C48390) *
               C48027 * C5042 +
           ((C37486 + C37485) * C1173 + (C37488 + C37487) * C1167 -
            (C37490 + C37489) * C1174 - (C37492 + C37491) * C1168 +
            (C31632 * C1272 + C31630 * C1278 + C31633 * C1854 +
             C48410 * C1857) *
                C1175 +
            (C31632 * C1279 + C31630 * C1290 + C31633 * C1858 +
             C48410 * C1863) *
                C48390) *
               C48027 * C48408) *
              C48426 +
          (((C31862 + C31861) * C1174 -
            ((C31670 + C31669) * C1167 + (C31668 + C31667) * C1173) +
            (C31864 + C31863) * C1168 - (C31866 + C31865) * C1175 -
            (C31868 + C31867) * C48390) *
               C48027 * C5042 +
           ((C31865 + C31866) * C1174 -
            ((C31863 + C31864) * C1167 + (C31861 + C31862) * C1173) +
            (C31867 + C31868) * C1168 - (C33085 + C33086) * C1175 -
            (C33087 + C33088) * C48390) *
               C48027 * C48408) *
              C48413 +
          (((C31674 + C31673) * C1173 + (C31672 + C31671) * C1167 -
            (C31870 + C31869) * C1174 - (C31872 + C31871) * C1168 +
            (C31874 + C31873) * C1175 + (C31876 + C31875) * C48390) *
               C48027 * C5042 +
           ((C31869 + C31870) * C1173 + (C31871 + C31872) * C1167 -
            (C31873 + C31874) * C1174 - (C31875 + C31876) * C1168 +
            (C31632 * C1276 + C31630 * C1286 + C31633 * C1856 +
             C48410 * C1861) *
                C1175 +
            (C31632 * C1287 + C31630 * C1294 + C31633 * C1862 +
             C48410 * C1865) *
                C48390) *
               C48027 * C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
               C1267 +
           (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
               C1261 -
           (C37485 + C37486) * C1268 - (C37487 + C37488) * C1262 +
           (C37489 + C37490) * C1269 + (C37491 + C37492) * C1263 -
           (C38349 + C38350) * C1270 - (C38351 + C38352) * C1264 +
           (C38353 + C38354) * C1271 + (C38355 + C38356) * C1265) *
              C48027 * C5042 +
          ((C37486 + C37485) * C1267 + (C37488 + C37487) * C1261 -
           (C37490 + C37489) * C1268 - (C37492 + C37491) * C1262 +
           (C38350 + C38349) * C1269 + (C38352 + C38351) * C1263 -
           (C38354 + C38353) * C1270 - (C38356 + C38355) * C1264 +
           (C31632 * C6098 + C31630 * C6100 + C31633 * C23096 +
            C48410 * C23097) *
               C1271 +
           (C31632 * C6101 + C31630 * C6104 + C31633 * C23098 +
            C48410 * C23099) *
               C1265) *
              C48027 * C48408) *
         C48044 * C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C1173 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C1167 -
            (C37485 + C37486) * C1174 - (C37487 + C37488) * C1168 +
            (C37489 + C37490) * C1175 + (C37491 + C37492) * C48390) *
               C48027 * C5042 +
           ((C37486 + C37485) * C1173 + (C37488 + C37487) * C1167 -
            (C37490 + C37489) * C1174 - (C37492 + C37491) * C1168 +
            (C38350 + C38349) * C1175 + (C38352 + C38351) * C48390) *
               C48027 * C48408) *
              C48044 * C48430 +
          (((C38101 + C38102) * C1174 -
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C1167 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C1173) +
            (C38103 + C38104) * C1168 - (C38527 + C38528) * C1175 -
            (C38529 + C38530) * C48390) *
               C48027 * C5042 +
           ((C38528 + C38527) * C1174 -
            ((C38104 + C38103) * C1167 + (C38102 + C38101) * C1173) +
            (C38530 + C38529) * C1168 -
            (C31633 * C6270 + C48410 * C6272 + C31632 * C1854 +
             C31630 * C1857) *
                C1175 -
            (C31633 * C6273 + C48410 * C6276 + C31632 * C1858 +
             C31630 * C1863) *
                C48390) *
               C48027 * C48408) *
              C48044 * C48419 +
          (((C31632 * C522 + C31630 * C537 + C31633 * C2158 + C48410 * C2167) *
                C1173 +
            (C31632 * C538 + C31630 * C552 + C31633 * C2166 + C48410 * C2176) *
                C1167 -
            (C38531 + C38532) * C1174 - (C38533 + C38534) * C1168 +
            (C38535 + C38536) * C1175 + (C38537 + C38538) * C48390) *
               C48027 * C5042 +
           ((C38532 + C38531) * C1173 + (C38534 + C38533) * C1167 -
            (C38536 + C38535) * C1174 - (C38538 + C38537) * C1168 +
            (C31632 * C6270 + C31630 * C6272 + C31633 * C23734 +
             C48410 * C23735) *
                C1175 +
            (C31632 * C6273 + C31630 * C6276 + C31633 * C23736 +
             C48410 * C23737) *
                C48390) *
               C48027 * C48408) *
              C48044 * C48393)) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C114 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C48072) *
                C48027 * C5042 +
            ((C37486 + C37485) * C114 + (C37488 + C37487) * C48072) * C48027 *
                C48408) *
               C707 -
           (((C31863 + C31864) * C48072 + (C31861 + C31862) * C114) * C48027 *
                C48408 +
            ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C48027 *
                C5042) *
               C708 +
           (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C48027 *
                C5042 +
            ((C31869 + C31870) * C114 + (C31871 + C31872) * C48072) * C48027 *
                C48408) *
               C709 -
           (((C32211 + C32212) * C48072 + (C32209 + C32210) * C114) * C48027 *
                C48408 +
            ((C31678 + C31677) * C48072 + (C31676 + C31675) * C114) * C48027 *
                C5042) *
               C48394) *
              C48359 +
          ((((C32055 + C32056) * C114 + (C32057 + C32058) * C48072) * C48027 *
                C5042 +
            ((C32565 + C32566) * C114 + (C32567 + C32568) * C48072) * C48027 *
                C48408) *
               C708 -
           (((C31633 * C1422 + C48410 * C1436 + C31632 * C1010 +
              C31630 * C1019) *
                 C48072 +
             (C31633 * C1409 + C48410 * C1421 + C31632 * C1004 +
              C31630 * C1009) *
                 C114) *
                C48027 * C48408 +
            ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                 C48072 +
             (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                 C114) *
                C48027 * C5042) *
               C707 -
           (((C32571 + C32572) * C48072 + (C32569 + C32570) * C114) * C48027 *
                C48408 +
            ((C32062 + C32061) * C48072 + (C32060 + C32059) * C114) * C48027 *
                C5042) *
               C709 +
           (((C32354 + C32353) * C114 + (C32352 + C32351) * C48072) * C48027 *
                C5042 +
            ((C31632 * C1007 + C31630 * C1015 + C31633 * C2326 +
              C48410 * C2327) *
                 C114 +
             (C31632 * C1016 + C31630 * C1022 + C31633 * C2328 +
              C48410 * C2329) *
                 C48072) *
                C48027 * C48408) *
               C48394) *
              C48177)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                 C1173 +
             (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                 C1167 -
             (C37485 + C37486) * C1174 - (C37487 + C37488) * C1168 +
             (C37489 + C37490) * C1175 + (C37491 + C37492) * C48390) *
                C48027 * C5042 +
            ((C37486 + C37485) * C1173 + (C37488 + C37487) * C1167 -
             (C37490 + C37489) * C1174 - (C37492 + C37491) * C1168 +
             (C38350 + C38349) * C1175 + (C38352 + C38351) * C48390) *
                C48027 * C48408) *
               C48344 +
           (((C31862 + C31861) * C1174 -
             ((C31670 + C31669) * C1167 + (C31668 + C31667) * C1173) +
             (C31864 + C31863) * C1168 - (C31866 + C31865) * C1175 -
             (C31868 + C31867) * C48390) *
                C48027 * C5042 +
            ((C31865 + C31866) * C1174 -
             ((C31863 + C31864) * C1167 + (C31861 + C31862) * C1173) +
             (C31867 + C31868) * C1168 - (C33085 + C33086) * C1175 -
             (C33087 + C33088) * C48390) *
                C48027 * C48408) *
               C48054) *
              C48359 +
          ((((C38101 + C38102) * C1174 -
             ((C31633 * C538 + C48410 * C552 + C31632 * C533 + C31630 * C550) *
                  C1167 +
              (C31633 * C522 + C48410 * C537 + C31632 * C520 + C31630 * C534) *
                  C1173) +
             (C38103 + C38104) * C1168 - (C38527 + C38528) * C1175 -
             (C38529 + C38530) * C48390) *
                C48027 * C5042 +
            ((C38528 + C38527) * C1174 -
             ((C38104 + C38103) * C1167 + (C38102 + C38101) * C1173) +
             (C38530 + C38529) * C1168 -
             (C31633 * C6270 + C48410 * C6272 + C31632 * C1854 +
              C31630 * C1857) *
                 C1175 -
             (C31633 * C6273 + C48410 * C6276 + C31632 * C1858 +
              C31630 * C1863) *
                 C48390) *
                C48027 * C48408) *
               C48344 +
           (((C32055 + C32056) * C1173 + (C32057 + C32058) * C1167 -
             (C32566 + C32565) * C1174 - (C32568 + C32567) * C1168 +
             (C33292 + C33291) * C1175 + (C33294 + C33293) * C48390) *
                C48027 * C5042 +
            ((C32565 + C32566) * C1173 + (C32567 + C32568) * C1167 -
             (C33291 + C33292) * C1174 - (C33293 + C33294) * C1168 +
             (C31632 * C1855 + C31630 * C1859 + C31633 * C6271 +
              C48410 * C6274) *
                 C1175 +
             (C31632 * C1860 + C31630 * C1864 + C31633 * C6275 +
              C48410 * C6277) *
                 C48390) *
                C48027 * C48408) *
               C48054) *
              C48177)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C114 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48072) *
               C48027 * C5042 +
           ((C31632 * C305 + C31630 * C315 + C31633 * C1004 + C48410 * C1009) *
                C114 +
            (C31632 * C316 + C31630 * C335 + C31633 * C1010 + C48410 * C1019) *
                C48072) *
               C48027 * C48408) *
              C107 -
          (((C31863 + C31864) * C48072 + (C31861 + C31862) * C114) * C48027 *
               C48408 +
           ((C31670 + C31669) * C48072 + (C31668 + C31667) * C114) * C48027 *
               C5042) *
              C108 +
          (((C31674 + C31673) * C114 + (C31672 + C31671) * C48072) * C48027 *
               C5042 +
           ((C31869 + C31870) * C114 + (C31871 + C31872) * C48072) * C48027 *
               C48408) *
              C109 -
          (((C32211 + C32212) * C48072 + (C32209 + C32210) * C114) * C48027 *
               C48408 +
           ((C31678 + C31677) * C48072 + (C31676 + C31675) * C114) * C48027 *
               C5042) *
              C110 +
          (((C31682 + C31681) * C114 + (C31680 + C31679) * C48072) * C48027 *
               C5042 +
           ((C31632 * C313 + C31630 * C331 + C31633 * C1008 + C48410 * C1017) *
                C114 +
            (C31632 * C332 + C31630 * C343 + C31633 * C1018 + C48410 * C1023) *
                C48072) *
               C48027 * C48408) *
              C111) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C302 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C48429 -
            (C37485 + C37486) * C303 - (C37487 + C37488) * C48417 +
            (C37489 + C37490) * C304 + (C37491 + C37492) * C48390) *
               C48027 * C5042 +
           ((C37486 + C37485) * C302 + (C37488 + C37487) * C48429 -
            (C37490 + C37489) * C303 - (C37492 + C37491) * C48417 +
            (C31632 * C1272 + C31630 * C1278 + C31633 * C1854 +
             C48410 * C1857) *
                C304 +
            (C31632 * C1279 + C31630 * C1290 + C31633 * C1858 +
             C48410 * C1863) *
                C48390) *
               C48027 * C48408) *
              C299 +
          (((C31862 + C31861) * C303 -
            ((C31670 + C31669) * C48429 + (C31668 + C31667) * C302) +
            (C31864 + C31863) * C48417 - (C31866 + C31865) * C304 -
            (C31868 + C31867) * C48390) *
               C48027 * C5042 +
           ((C31865 + C31866) * C303 -
            ((C31863 + C31864) * C48429 + (C31861 + C31862) * C302) +
            (C31867 + C31868) * C48417 - (C33085 + C33086) * C304 -
            (C33087 + C33088) * C48390) *
               C48027 * C48408) *
              C300 +
          (((C31674 + C31673) * C302 + (C31672 + C31671) * C48429 -
            (C31870 + C31869) * C303 - (C31872 + C31871) * C48417 +
            (C31874 + C31873) * C304 + (C31876 + C31875) * C48390) *
               C48027 * C5042 +
           ((C31869 + C31870) * C302 + (C31871 + C31872) * C48429 -
            (C31873 + C31874) * C303 - (C31875 + C31876) * C48417 +
            (C31632 * C1276 + C31630 * C1286 + C31633 * C1856 +
             C48410 * C1861) *
                C304 +
            (C31632 * C1287 + C31630 * C1294 + C31633 * C1862 +
             C48410 * C1865) *
                C48390) *
               C48027 * C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
                C1173 +
            (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
                C1167 -
            (C37485 + C37486) * C1174 - (C37487 + C37488) * C1168 +
            (C37489 + C37490) * C1175 + (C37491 + C37492) * C48390) *
               C48027 * C5042 +
           ((C37486 + C37485) * C1173 + (C37488 + C37487) * C1167 -
            (C37490 + C37489) * C1174 - (C37492 + C37491) * C1168 +
            (C31632 * C1272 + C31630 * C1278 + C31633 * C1854 +
             C48410 * C1857) *
                C1175 +
            (C31632 * C1279 + C31630 * C1290 + C31633 * C1858 +
             C48410 * C1863) *
                C48390) *
               C48027 * C48408) *
              C48426 +
          (((C31862 + C31861) * C1174 -
            ((C31670 + C31669) * C1167 + (C31668 + C31667) * C1173) +
            (C31864 + C31863) * C1168 - (C31866 + C31865) * C1175 -
            (C31868 + C31867) * C48390) *
               C48027 * C5042 +
           ((C31865 + C31866) * C1174 -
            ((C31863 + C31864) * C1167 + (C31861 + C31862) * C1173) +
            (C31867 + C31868) * C1168 - (C33085 + C33086) * C1175 -
            (C33087 + C33088) * C48390) *
               C48027 * C48408) *
              C48413 +
          (((C31674 + C31673) * C1173 + (C31672 + C31671) * C1167 -
            (C31870 + C31869) * C1174 - (C31872 + C31871) * C1168 +
            (C31874 + C31873) * C1175 + (C31876 + C31875) * C48390) *
               C48027 * C5042 +
           ((C31869 + C31870) * C1173 + (C31871 + C31872) * C1167 -
            (C31873 + C31874) * C1174 - (C31875 + C31876) * C1168 +
            (C31632 * C1276 + C31630 * C1286 + C31633 * C1856 +
             C48410 * C1861) *
                C1175 +
            (C31632 * C1287 + C31630 * C1294 + C31633 * C1862 +
             C48410 * C1865) *
                C48390) *
               C48027 * C48408) *
              C48384) *
         C48090) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((C31632 * C115 + C31630 * C122 + C31633 * C520 + C48410 * C534) *
               C1267 +
           (C31632 * C123 + C31630 * C136 + C31633 * C533 + C48410 * C550) *
               C1261 -
           (C37485 + C37486) * C1268 - (C37487 + C37488) * C1262 +
           (C37489 + C37490) * C1269 + (C37491 + C37492) * C1263 -
           (C38349 + C38350) * C1270 - (C38351 + C38352) * C1264 +
           (C38353 + C38354) * C1271 + (C38355 + C38356) * C1265) *
              C48027 * C5042 +
          ((C37486 + C37485) * C1267 + (C37488 + C37487) * C1261 -
           (C37490 + C37489) * C1268 - (C37492 + C37491) * C1262 +
           (C38350 + C38349) * C1269 + (C38352 + C38351) * C1263 -
           (C38354 + C38353) * C1270 - (C38356 + C38355) * C1264 +
           (C31632 * C6098 + C31630 * C6100 + C31633 * C23096 +
            C48410 * C23097) *
               C1271 +
           (C31632 * C6101 + C31630 * C6104 + C31633 * C23098 +
            C48410 * C23099) *
               C1265) *
              C48027 * C48408) *
         C48044 * C48090) /
            (p * q * std::sqrt(p + q));
    d2ee[200] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C47015 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C48131 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C47007 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C48138 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C47021 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C3108) *
                       C48027 * C48278 * C48049 +
                   ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                     C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                        C47007 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C48131 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C47015) +
                    (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                     C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                        C48138 -
                    (C42875 * C1412 + C42872 * C1427 + C42874 * C1407 +
                     C42871 * C1417 + C42873 * C308 + C42870 * C321) *
                        C47021 -
                    (C42875 * C1428 + C42872 * C1439 + C42874 * C1418 +
                     C42871 * C1434 + C42873 * C322 + C42870 * C338) *
                        C3108) *
                       C48027 * C48278 * C48057 +
                   ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                     C42871 * C529 + C42875 * C524 + C42872 * C541) *
                        C47015 +
                    (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                     C42871 * C548 + C42875 * C542 + C42872 * C554) *
                        C48131 -
                    (C42875 * C1413 + C42872 * C1429 + C42874 * C1006 +
                     C42871 * C1013 + C42873 * C309 + C42870 * C323) *
                        C47007 -
                    (C42875 * C1430 + C42872 * C1440 + C42874 * C1014 +
                     C42871 * C1021 + C42873 * C324 + C42870 * C339) *
                        C48138 +
                    (C42873 * C310 + C42870 * C325 + C42874 * C1408 +
                     C42871 * C1419 + C42875 * C1414 + C42872 * C1431) *
                        C47021 +
                    (C42873 * C326 + C42870 * C340 + C42874 * C1420 +
                     C42871 * C1435 + C42875 * C1432 + C42872 * C1441) *
                        C3108) *
                       C48027 * C48278 * C3111) *
                  C48090) /
                 (p * q * std::sqrt(p + q));
    d2ee[201] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C47015 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C48131 -
                     (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                      C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                         C47007 -
                     (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                      C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                         C48138 +
                     (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                      C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                         C47021 +
                     (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                      C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                         C3108) *
                        C48027 * C48278 * C2812 +
                    ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                      C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                         C47007 -
                     ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                       C42871 * C547 + C42873 * C125 + C42870 * C137) *
                          C48131 +
                      (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                       C42871 * C527 + C42873 * C116 + C42870 * C124) *
                          C47015) +
                     (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                      C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                         C48138 -
                     (C42875 * C1412 + C42872 * C1427 + C42874 * C1407 +
                      C42871 * C1417 + C42873 * C308 + C42870 * C321) *
                         C47021 -
                     (C42875 * C1428 + C42872 * C1439 + C42874 * C1418 +
                      C42871 * C1434 + C42873 * C322 + C42870 * C338) *
                         C3108) *
                        C48027 * C48278 * C48054) *
                       C48359 +
                   (((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                      C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                         C47007 -
                     ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                       C42871 * C552 + C42873 * C533 + C42870 * C550) *
                          C48131 +
                      (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                       C42871 * C537 + C42873 * C520 + C42870 * C534) *
                          C47015) +
                     (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                      C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                         C48138 -
                     (C42875 * C7638 + C42872 * C7640 + C42874 * C1410 +
                      C42871 * C1423 + C42873 * C1406 + C42870 * C1415) *
                         C47021 -
                     (C42875 * C7641 + C42872 * C7644 + C42874 * C1424 +
                      C42871 * C1437 + C42873 * C1416 + C42870 * C1433) *
                         C3108) *
                        C48027 * C48278 * C2812 +
                    ((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C47015 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C48131 -
                     (C42875 * C2571 + C42872 * C2575 + C42874 * C1411 +
                      C42871 * C1425 + C42873 * C1005 + C42870 * C1011) *
                         C47007 -
                     (C42875 * C2576 + C42872 * C2580 + C42874 * C1426 +
                      C42871 * C1438 + C42873 * C1012 + C42870 * C1020) *
                         C48138 +
                     (C42873 * C1407 + C42870 * C1417 + C42874 * C1412 +
                      C42871 * C1427 + C42875 * C7639 + C42872 * C7642) *
                         C47021 +
                     (C42873 * C1418 + C42870 * C1434 + C42874 * C1428 +
                      C42871 * C1439 + C42875 * C7643 + C42872 * C7645) *
                         C3108) *
                        C48027 * C48278 * C48054) *
                       C48177)) /
                 (p * q * std::sqrt(p + q));
    d2ee[202] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C2814 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C48436 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C2815 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C48432 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C2816 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C48422 -
                    (C42875 * C6270 + C42872 * C6272 + C42874 * C1854 +
                     C42871 * C1857 + C42873 * C1272 + C42870 * C1278) *
                        C2817 -
                    (C42875 * C6273 + C42872 * C6276 + C42874 * C1858 +
                     C42871 * C1863 + C42873 * C1279 + C42870 * C1290) *
                        C48400) *
                       C48027 * C48278 * C2812 +
                   ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                     C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                        C2815 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C48436 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C2814) +
                    (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                     C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                        C48432 -
                    (C42875 * C1412 + C42872 * C1427 + C42874 * C1407 +
                     C42871 * C1417 + C42873 * C308 + C42870 * C321) *
                        C2816 -
                    (C42875 * C1428 + C42872 * C1439 + C42874 * C1418 +
                     C42871 * C1434 + C42873 * C322 + C42870 * C338) *
                        C48422 +
                    (C42873 * C1274 + C42870 * C1282 + C42874 * C1855 +
                     C42871 * C1859 + C42875 * C6271 + C42872 * C6274) *
                        C2817 +
                    (C42873 * C1283 + C42870 * C1292 + C42874 * C1860 +
                     C42871 * C1864 + C42875 * C6275 + C42872 * C6277) *
                        C48400) *
                       C48027 * C48278 * C48054) *
                  C48090) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C2686 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C2680 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C2687 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C48135) *
                       C48027 * C48278 * C48435 +
                   ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                     C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                        C2687 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C2680 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C2686) +
                    (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                     C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                        C48135) *
                       C48027 * C48278 * C48428 +
                   ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                     C42871 * C529 + C42875 * C524 + C42872 * C541) *
                        C2686 +
                    (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                     C42871 * C548 + C42875 * C542 + C42872 * C554) *
                        C2680 -
                    (C42875 * C1413 + C42872 * C1429 + C42874 * C1006 +
                     C42871 * C1013 + C42873 * C309 + C42870 * C323) *
                        C2687 -
                    (C42875 * C1430 + C42872 * C1440 + C42874 * C1014 +
                     C42871 * C1021 + C42873 * C324 + C42870 * C339) *
                        C48135) *
                       C48027 * C48278 * C48415 +
                   ((C42873 * C311 + C42870 * C327 + C42874 * C1007 +
                     C42871 * C1015 + C42875 * C2326 + C42872 * C2327) *
                        C2687 -
                    ((C42875 * C543 + C42872 * C555 + C42874 * C532 +
                      C42871 * C549 + C42873 * C128 + C42870 * C139) *
                         C2680 +
                     (C42875 * C525 + C42872 * C544 + C42874 * C519 +
                      C42871 * C531 + C42873 * C118 + C42870 * C129) *
                         C2686) +
                    (C42873 * C328 + C42870 * C341 + C42874 * C1016 +
                     C42871 * C1022 + C42875 * C2328 + C42872 * C2329) *
                        C48135) *
                       C48027 * C48278 * C48394) *
                  C48090) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C2686 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C2680 -
                     (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                      C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                         C2687 -
                     (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                      C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                         C48135) *
                        C48027 * C48278 * C2812 +
                    ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                      C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                         C2687 -
                     ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                       C42871 * C547 + C42873 * C125 + C42870 * C137) *
                          C2680 +
                      (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                       C42871 * C527 + C42873 * C116 + C42870 * C124) *
                          C2686) +
                     (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                      C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                         C48135) *
                        C48027 * C48278 * C48054) *
                       C48430 +
                   (((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                      C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                         C2687 -
                     ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                       C42871 * C552 + C42873 * C533 + C42870 * C550) *
                          C2680 +
                      (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                       C42871 * C537 + C42873 * C520 + C42870 * C534) *
                          C2686) +
                     (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                      C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                         C48135) *
                        C48027 * C48278 * C2812 +
                    ((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C2686 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C2680 -
                     (C42875 * C2571 + C42872 * C2575 + C42874 * C1411 +
                      C42871 * C1425 + C42873 * C1005 + C42870 * C1011) *
                         C2687 -
                     (C42875 * C2576 + C42872 * C2580 + C42874 * C1426 +
                      C42871 * C1438 + C42873 * C1012 + C42870 * C1020) *
                         C48135) *
                        C48027 * C48278 * C48054) *
                       C48419 +
                   (((C42873 * C522 + C42870 * C537 + C42874 * C2158 +
                      C42871 * C2167 + C42875 * C2159 + C42872 * C2168) *
                         C2686 +
                     (C42873 * C538 + C42870 * C552 + C42874 * C2166 +
                      C42871 * C2176 + C42875 * C2169 + C42872 * C2177) *
                         C2680 -
                     (C42875 * C7164 + C42872 * C7166 + C42874 * C2570 +
                      C42871 * C2573 + C42873 * C1409 + C42870 * C1421) *
                         C2687 -
                     (C42875 * C7167 + C42872 * C7170 + C42874 * C2574 +
                      C42871 * C2579 + C42873 * C1422 + C42870 * C1436) *
                         C48135) *
                        C48027 * C48278 * C2812 +
                    ((C42873 * C1411 + C42870 * C1425 + C42874 * C2571 +
                      C42871 * C2575 + C42875 * C7165 + C42872 * C7168) *
                         C2687 -
                     ((C42875 * C2171 + C42872 * C2178 + C42874 * C2164 +
                       C42871 * C2175 + C42873 * C540 + C42870 * C553) *
                          C2680 +
                      (C42875 * C2160 + C42872 * C2170 + C42874 * C2157 +
                       C42871 * C2165 + C42873 * C523 + C42870 * C539) *
                          C2686) +
                     (C42873 * C1426 + C42870 * C1438 + C42874 * C2576 +
                      C42871 * C2580 + C42875 * C7169 + C42872 * C7171) *
                         C48135) *
                        C48027 * C48278 * C48054) *
                       C48393)) /
                     (p * q * std::sqrt(p + q));
    d2ee[203] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C2686 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C2680 -
                     (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                      C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                         C2687 -
                     (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                      C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                         C48135) *
                        C48027 * C48278 * C48049 +
                    ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                      C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                         C2687 -
                     ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                       C42871 * C547 + C42873 * C125 + C42870 * C137) *
                          C2680 +
                      (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                       C42871 * C527 + C42873 * C116 + C42870 * C124) *
                          C2686) +
                     (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                      C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                         C48135) *
                        C48027 * C48278 * C48057 +
                    ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                      C42871 * C529 + C42875 * C524 + C42872 * C541) *
                         C2686 +
                     (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                      C42871 * C548 + C42875 * C542 + C42872 * C554) *
                         C2680 -
                     (C42875 * C1413 + C42872 * C1429 + C42874 * C1006 +
                      C42871 * C1013 + C42873 * C309 + C42870 * C323) *
                         C2687 -
                     (C42875 * C1430 + C42872 * C1440 + C42874 * C1014 +
                      C42871 * C1021 + C42873 * C324 + C42870 * C339) *
                         C48135) *
                        C48027 * C48278 * C3111) *
                       C48359 +
                   (((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                      C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                         C2687 -
                     ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                       C42871 * C552 + C42873 * C533 + C42870 * C550) *
                          C2680 +
                      (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                       C42871 * C537 + C42873 * C520 + C42870 * C534) *
                          C2686) +
                     (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                      C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                         C48135) *
                        C48027 * C48278 * C48049 +
                    ((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C2686 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C2680 -
                     (C42875 * C2571 + C42872 * C2575 + C42874 * C1411 +
                      C42871 * C1425 + C42873 * C1005 + C42870 * C1011) *
                         C2687 -
                     (C42875 * C2576 + C42872 * C2580 + C42874 * C1426 +
                      C42871 * C1438 + C42873 * C1012 + C42870 * C1020) *
                         C48135) *
                        C48027 * C48278 * C48057 +
                    ((C42873 * C1006 + C42870 * C1013 + C42874 * C1413 +
                      C42871 * C1429 + C42875 * C2572 + C42872 * C2577) *
                         C2687 -
                     ((C42875 * C2162 + C42872 * C2174 + C42874 * C542 +
                       C42871 * C554 + C42873 * C530 + C42870 * C548) *
                          C2680 +
                      (C42875 * C2156 + C42872 * C2163 + C42874 * C524 +
                       C42871 * C541 + C42873 * C518 + C42870 * C529) *
                          C2686) +
                     (C42873 * C1014 + C42870 * C1021 + C42874 * C1430 +
                      C42871 * C1440 + C42875 * C2578 + C42872 * C2581) *
                         C48135) *
                        C48027 * C48278 * C3111) *
                       C48177)) /
                 (p * q * std::sqrt(p + q));
    d2ee[204] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C2686 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C2680 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C2687 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C48135) *
                       C48027 * C48278 * C48435 +
                   ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                     C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                        C2687 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C2680 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C2686) +
                    (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                     C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                        C48135) *
                       C48027 * C48278 * C48428 +
                   ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                     C42871 * C529 + C42875 * C524 + C42872 * C541) *
                        C2686 +
                    (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                     C42871 * C548 + C42875 * C542 + C42872 * C554) *
                        C2680 -
                    (C42875 * C1413 + C42872 * C1429 + C42874 * C1006 +
                     C42871 * C1013 + C42873 * C309 + C42870 * C323) *
                        C2687 -
                    (C42875 * C1430 + C42872 * C1440 + C42874 * C1014 +
                     C42871 * C1021 + C42873 * C324 + C42870 * C339) *
                        C48135) *
                       C48027 * C48278 * C48415 +
                   ((C42873 * C311 + C42870 * C327 + C42874 * C1007 +
                     C42871 * C1015 + C42875 * C2326 + C42872 * C2327) *
                        C2687 -
                    ((C42875 * C543 + C42872 * C555 + C42874 * C532 +
                      C42871 * C549 + C42873 * C128 + C42870 * C139) *
                         C2680 +
                     (C42875 * C525 + C42872 * C544 + C42874 * C519 +
                      C42871 * C531 + C42873 * C118 + C42870 * C129) *
                         C2686) +
                    (C42873 * C328 + C42870 * C341 + C42874 * C1016 +
                     C42871 * C1022 + C42875 * C2328 + C42872 * C2329) *
                        C48135) *
                       C48027 * C48278 * C48394) *
                  C48090) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C2814 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C48436 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C2815 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C48432 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C2816 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C48422 -
                    (C42875 * C6270 + C42872 * C6272 + C42874 * C1854 +
                     C42871 * C1857 + C42873 * C1272 + C42870 * C1278) *
                        C2817 -
                    (C42875 * C6273 + C42872 * C6276 + C42874 * C1858 +
                     C42871 * C1863 + C42873 * C1279 + C42870 * C1290) *
                        C48400) *
                       C48027 * C48278 * C2812 +
                   ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                     C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                        C2815 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C48436 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C2814) +
                    (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                     C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                        C48432 -
                    (C42875 * C1412 + C42872 * C1427 + C42874 * C1407 +
                     C42871 * C1417 + C42873 * C308 + C42870 * C321) *
                        C2816 -
                    (C42875 * C1428 + C42872 * C1439 + C42874 * C1418 +
                     C42871 * C1434 + C42873 * C322 + C42870 * C338) *
                        C48422 +
                    (C42873 * C1274 + C42870 * C1282 + C42874 * C1855 +
                     C42871 * C1859 + C42875 * C6271 + C42872 * C6274) *
                        C2817 +
                    (C42873 * C1283 + C42870 * C1292 + C42874 * C1860 +
                     C42871 * C1864 + C42875 * C6275 + C42872 * C6277) *
                        C48400) *
                       C48027 * C48278 * C48054) *
                  C48090) /
                     (p * q * std::sqrt(p + q));
    d2ee[205] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C47015 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C48131 -
                     (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                      C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                         C47007 -
                     (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                      C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                         C48138 +
                     (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                      C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                         C47021 +
                     (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                      C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                         C3108) *
                        C48027 * C48278 * C48344 +
                    ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                      C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                         C47007 -
                     ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                       C42871 * C547 + C42873 * C125 + C42870 * C137) *
                          C48131 +
                      (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                       C42871 * C527 + C42873 * C116 + C42870 * C124) *
                          C47015) +
                     (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                      C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                         C48138 -
                     (C42875 * C1412 + C42872 * C1427 + C42874 * C1407 +
                      C42871 * C1417 + C42873 * C308 + C42870 * C321) *
                         C47021 -
                     (C42875 * C1428 + C42872 * C1439 + C42874 * C1418 +
                      C42871 * C1434 + C42873 * C322 + C42870 * C338) *
                         C3108) *
                        C48027 * C48278 * C48054) *
                       C3547 +
                   (((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                      C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                         C47007 -
                     ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                       C42871 * C552 + C42873 * C533 + C42870 * C550) *
                          C48131 +
                      (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                       C42871 * C537 + C42873 * C520 + C42870 * C534) *
                          C47015) +
                     (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                      C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                         C48138 -
                     (C42875 * C7638 + C42872 * C7640 + C42874 * C1410 +
                      C42871 * C1423 + C42873 * C1406 + C42870 * C1415) *
                         C47021 -
                     (C42875 * C7641 + C42872 * C7644 + C42874 * C1424 +
                      C42871 * C1437 + C42873 * C1416 + C42870 * C1433) *
                         C3108) *
                        C48027 * C48278 * C48344 +
                    ((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C47015 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C48131 -
                     (C42875 * C2571 + C42872 * C2575 + C42874 * C1411 +
                      C42871 * C1425 + C42873 * C1005 + C42870 * C1011) *
                         C47007 -
                     (C42875 * C2576 + C42872 * C2580 + C42874 * C1426 +
                      C42871 * C1438 + C42873 * C1012 + C42870 * C1020) *
                         C48138 +
                     (C42873 * C1407 + C42870 * C1417 + C42874 * C1412 +
                      C42871 * C1427 + C42875 * C7639 + C42872 * C7642) *
                         C47021 +
                     (C42873 * C1418 + C42870 * C1434 + C42874 * C1428 +
                      C42871 * C1439 + C42875 * C7643 + C42872 * C7645) *
                         C3108) *
                        C48027 * C48278 * C48054) *
                       C48177)) /
                 (p * q * std::sqrt(p + q));
    d2ee[206] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C47015 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C48131 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C47007 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C48138 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C47021 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C3108) *
                       C48027 * C48278 * C48044 * C48173 +
                   ((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                     C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                        C47007 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C48131 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C47015) +
                    (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                     C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                        C48138 -
                    (C42875 * C7638 + C42872 * C7640 + C42874 * C1410 +
                     C42871 * C1423 + C42873 * C1406 + C42870 * C1415) *
                        C47021 -
                    (C42875 * C7641 + C42872 * C7644 + C42874 * C1424 +
                     C42871 * C1437 + C42873 * C1416 + C42870 * C1433) *
                        C3108) *
                       C48027 * C48278 * C48044 * C48180 +
                   ((C42873 * C522 + C42870 * C537 + C42874 * C2158 +
                     C42871 * C2167 + C42875 * C2159 + C42872 * C2168) *
                        C47015 +
                    (C42873 * C538 + C42870 * C552 + C42874 * C2166 +
                     C42871 * C2176 + C42875 * C2169 + C42872 * C2177) *
                        C48131 -
                    (C42875 * C7164 + C42872 * C7166 + C42874 * C2570 +
                     C42871 * C2573 + C42873 * C1409 + C42870 * C1421) *
                        C47007 -
                    (C42875 * C7167 + C42872 * C7170 + C42874 * C2574 +
                     C42871 * C2579 + C42873 * C1422 + C42870 * C1436) *
                        C48138 +
                    (C42873 * C1410 + C42870 * C1423 + C42874 * C7638 +
                     C42871 * C7640 + C42875 * C23388 + C42872 * C23389) *
                        C47021 +
                    (C42873 * C1424 + C42870 * C1437 + C42874 * C7641 +
                     C42871 * C7644 + C42875 * C23390 + C42872 * C23391) *
                        C3108) *
                       C48027 * C48278 * C48044 * C4067)) /
                 (p * q * std::sqrt(p + q));
    d2ee[207] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C2814 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C48436 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C2815 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C48432 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C2816 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C48422 -
                    (C42875 * C6270 + C42872 * C6272 + C42874 * C1854 +
                     C42871 * C1857 + C42873 * C1272 + C42870 * C1278) *
                        C2817 -
                    (C42875 * C6273 + C42872 * C6276 + C42874 * C1858 +
                     C42871 * C1863 + C42873 * C1279 + C42870 * C1290) *
                        C48400) *
                       C48027 * C48278 * C48044 * C3547 +
                   ((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                     C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                        C2815 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C48436 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C2814) +
                    (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                     C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                        C48432 -
                    (C42875 * C7638 + C42872 * C7640 + C42874 * C1410 +
                     C42871 * C1423 + C42873 * C1406 + C42870 * C1415) *
                        C2816 -
                    (C42875 * C7641 + C42872 * C7644 + C42874 * C1424 +
                     C42871 * C1437 + C42873 * C1416 + C42870 * C1433) *
                        C48422 +
                    (C42873 * C1854 + C42870 * C1857 + C42874 * C6270 +
                     C42871 * C6272 + C42875 * C23734 + C42872 * C23735) *
                        C2817 +
                    (C42873 * C1858 + C42870 * C1863 + C42874 * C6273 +
                     C42871 * C6276 + C42875 * C23736 + C42872 * C23737) *
                        C48400) *
                       C48027 * C48278 * C48044 * C48177)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C2686 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C2680 -
                     (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                      C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                         C2687 -
                     (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                      C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                         C48135) *
                        C48027 * C48278 * C48426 +
                    ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                      C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                         C2687 -
                     ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                       C42871 * C547 + C42873 * C125 + C42870 * C137) *
                          C2680 +
                      (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                       C42871 * C527 + C42873 * C116 + C42870 * C124) *
                          C2686) +
                     (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                      C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                         C48135) *
                        C48027 * C48278 * C48413 +
                    ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                      C42871 * C529 + C42875 * C524 + C42872 * C541) *
                         C2686 +
                     (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                      C42871 * C548 + C42875 * C542 + C42872 * C554) *
                         C2680 -
                     (C42875 * C1413 + C42872 * C1429 + C42874 * C1006 +
                      C42871 * C1013 + C42873 * C309 + C42870 * C323) *
                         C2687 -
                     (C42875 * C1430 + C42872 * C1440 + C42874 * C1014 +
                      C42871 * C1021 + C42873 * C324 + C42870 * C339) *
                         C48135) *
                        C48027 * C48278 * C48384) *
                       C3547 +
                   (((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                      C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                         C2687 -
                     ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                       C42871 * C552 + C42873 * C533 + C42870 * C550) *
                          C2680 +
                      (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                       C42871 * C537 + C42873 * C520 + C42870 * C534) *
                          C2686) +
                     (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                      C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                         C48135) *
                        C48027 * C48278 * C48426 +
                    ((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C2686 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C2680 -
                     (C42875 * C2571 + C42872 * C2575 + C42874 * C1411 +
                      C42871 * C1425 + C42873 * C1005 + C42870 * C1011) *
                         C2687 -
                     (C42875 * C2576 + C42872 * C2580 + C42874 * C1426 +
                      C42871 * C1438 + C42873 * C1012 + C42870 * C1020) *
                         C48135) *
                        C48027 * C48278 * C48413 +
                    ((C42873 * C1006 + C42870 * C1013 + C42874 * C1413 +
                      C42871 * C1429 + C42875 * C2572 + C42872 * C2577) *
                         C2687 -
                     ((C42875 * C2162 + C42872 * C2174 + C42874 * C542 +
                       C42871 * C554 + C42873 * C530 + C42870 * C548) *
                          C2680 +
                      (C42875 * C2156 + C42872 * C2163 + C42874 * C524 +
                       C42871 * C541 + C42873 * C518 + C42870 * C529) *
                          C2686) +
                     (C42873 * C1014 + C42870 * C1021 + C42874 * C1430 +
                      C42871 * C1440 + C42875 * C2578 + C42872 * C2581) *
                         C48135) *
                        C48027 * C48278 * C48384) *
                       C48177)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C2686 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C2680 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C2687 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C48135) *
                       C48027 * C48278 * C48044 * C48437 +
                   ((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                     C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                        C2687 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C2680 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C2686) +
                    (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                     C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                        C48135) *
                       C48027 * C48278 * C48044 * C48434 +
                   ((C42873 * C522 + C42870 * C537 + C42874 * C2158 +
                     C42871 * C2167 + C42875 * C2159 + C42872 * C2168) *
                        C2686 +
                    (C42873 * C538 + C42870 * C552 + C42874 * C2166 +
                     C42871 * C2176 + C42875 * C2169 + C42872 * C2177) *
                        C2680 -
                    (C42875 * C7164 + C42872 * C7166 + C42874 * C2570 +
                     C42871 * C2573 + C42873 * C1409 + C42870 * C1421) *
                        C2687 -
                    (C42875 * C7167 + C42872 * C7170 + C42874 * C2574 +
                     C42871 * C2579 + C42873 * C1422 + C42870 * C1436) *
                        C48135) *
                       C48027 * C48278 * C48044 * C48425 +
                   ((C42873 * C2570 + C42870 * C2573 + C42874 * C7164 +
                     C42871 * C7166 + C42875 * C28114 + C42872 * C28115) *
                        C2687 -
                    ((C42875 * C12925 + C42872 * C12928 + C42874 * C2169 +
                      C42871 * C2177 + C42873 * C2166 + C42870 * C2176) *
                         C2680 +
                     (C42875 * C12922 + C42872 * C12924 + C42874 * C2159 +
                      C42871 * C2168 + C42873 * C2158 + C42870 * C2167) *
                         C2686) +
                    (C42873 * C2574 + C42870 * C2579 + C42874 * C7167 +
                     C42871 * C7170 + C42875 * C28116 + C42872 * C28117) *
                        C48135) *
                       C48027 * C48278 * C48044 * C48406)) /
                     (p * q * std::sqrt(p + q));
    d2ee[208] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C2686 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C2680 -
                     (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                      C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                         C2687 -
                     (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                      C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                         C48135) *
                        C48027 * C48278 * C48344 +
                    ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                      C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                         C2687 -
                     ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                       C42871 * C547 + C42873 * C125 + C42870 * C137) *
                          C2680 +
                      (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                       C42871 * C527 + C42873 * C116 + C42870 * C124) *
                          C2686) +
                     (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                      C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                         C48135) *
                        C48027 * C48278 * C48054) *
                       C48173 +
                   (((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                      C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                         C2687 -
                     ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                       C42871 * C552 + C42873 * C533 + C42870 * C550) *
                          C2680 +
                      (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                       C42871 * C537 + C42873 * C520 + C42870 * C534) *
                          C2686) +
                     (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                      C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                         C48135) *
                        C48027 * C48278 * C48344 +
                    ((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C2686 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C2680 -
                     (C42875 * C2571 + C42872 * C2575 + C42874 * C1411 +
                      C42871 * C1425 + C42873 * C1005 + C42870 * C1011) *
                         C2687 -
                     (C42875 * C2576 + C42872 * C2580 + C42874 * C1426 +
                      C42871 * C1438 + C42873 * C1012 + C42870 * C1020) *
                         C48135) *
                        C48027 * C48278 * C48054) *
                       C48180 +
                   (((C42873 * C522 + C42870 * C537 + C42874 * C2158 +
                      C42871 * C2167 + C42875 * C2159 + C42872 * C2168) *
                         C2686 +
                     (C42873 * C538 + C42870 * C552 + C42874 * C2166 +
                      C42871 * C2176 + C42875 * C2169 + C42872 * C2177) *
                         C2680 -
                     (C42875 * C7164 + C42872 * C7166 + C42874 * C2570 +
                      C42871 * C2573 + C42873 * C1409 + C42870 * C1421) *
                         C2687 -
                     (C42875 * C7167 + C42872 * C7170 + C42874 * C2574 +
                      C42871 * C2579 + C42873 * C1422 + C42870 * C1436) *
                         C48135) *
                        C48027 * C48278 * C48344 +
                    ((C42873 * C1411 + C42870 * C1425 + C42874 * C2571 +
                      C42871 * C2575 + C42875 * C7165 + C42872 * C7168) *
                         C2687 -
                     ((C42875 * C2171 + C42872 * C2178 + C42874 * C2164 +
                       C42871 * C2175 + C42873 * C540 + C42870 * C553) *
                          C2680 +
                      (C42875 * C2160 + C42872 * C2170 + C42874 * C2157 +
                       C42871 * C2165 + C42873 * C523 + C42870 * C539) *
                          C2686) +
                     (C42873 * C1426 + C42870 * C1438 + C42874 * C2576 +
                      C42871 * C2580 + C42875 * C7169 + C42872 * C7171) *
                         C48135) *
                        C48027 * C48278 * C48054) *
                       C4067)) /
                 (p * q * std::sqrt(p + q));
    d2ee[209] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C2686 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C2680 -
                     (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                      C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                         C2687 -
                     (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                      C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                         C48135) *
                        C48027 * C48278 * C48426 +
                    ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                      C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                         C2687 -
                     ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                       C42871 * C547 + C42873 * C125 + C42870 * C137) *
                          C2680 +
                      (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                       C42871 * C527 + C42873 * C116 + C42870 * C124) *
                          C2686) +
                     (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                      C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                         C48135) *
                        C48027 * C48278 * C48413 +
                    ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                      C42871 * C529 + C42875 * C524 + C42872 * C541) *
                         C2686 +
                     (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                      C42871 * C548 + C42875 * C542 + C42872 * C554) *
                         C2680 -
                     (C42875 * C1413 + C42872 * C1429 + C42874 * C1006 +
                      C42871 * C1013 + C42873 * C309 + C42870 * C323) *
                         C2687 -
                     (C42875 * C1430 + C42872 * C1440 + C42874 * C1014 +
                      C42871 * C1021 + C42873 * C324 + C42870 * C339) *
                         C48135) *
                        C48027 * C48278 * C48384) *
                       C3547 +
                   (((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                      C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                         C2687 -
                     ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                       C42871 * C552 + C42873 * C533 + C42870 * C550) *
                          C2680 +
                      (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                       C42871 * C537 + C42873 * C520 + C42870 * C534) *
                          C2686) +
                     (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                      C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                         C48135) *
                        C48027 * C48278 * C48426 +
                    ((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C2686 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C2680 -
                     (C42875 * C2571 + C42872 * C2575 + C42874 * C1411 +
                      C42871 * C1425 + C42873 * C1005 + C42870 * C1011) *
                         C2687 -
                     (C42875 * C2576 + C42872 * C2580 + C42874 * C1426 +
                      C42871 * C1438 + C42873 * C1012 + C42870 * C1020) *
                         C48135) *
                        C48027 * C48278 * C48413 +
                    ((C42873 * C1006 + C42870 * C1013 + C42874 * C1413 +
                      C42871 * C1429 + C42875 * C2572 + C42872 * C2577) *
                         C2687 -
                     ((C42875 * C2162 + C42872 * C2174 + C42874 * C542 +
                       C42871 * C554 + C42873 * C530 + C42870 * C548) *
                          C2680 +
                      (C42875 * C2156 + C42872 * C2163 + C42874 * C524 +
                       C42871 * C541 + C42873 * C518 + C42870 * C529) *
                          C2686) +
                     (C42873 * C1014 + C42870 * C1021 + C42874 * C1430 +
                      C42871 * C1440 + C42875 * C2578 + C42872 * C2581) *
                         C48135) *
                        C48027 * C48278 * C48384) *
                       C48177)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C2814 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C48436 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C2815 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C48432 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C2816 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C48422 -
                    (C42875 * C6270 + C42872 * C6272 + C42874 * C1854 +
                     C42871 * C1857 + C42873 * C1272 + C42870 * C1278) *
                        C2817 -
                    (C42875 * C6273 + C42872 * C6276 + C42874 * C1858 +
                     C42871 * C1863 + C42873 * C1279 + C42870 * C1290) *
                        C48400) *
                       C48027 * C48278 * C48044 * C3547 +
                   ((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                     C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                        C2815 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C48436 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C2814) +
                    (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                     C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                        C48432 -
                    (C42875 * C7638 + C42872 * C7640 + C42874 * C1410 +
                     C42871 * C1423 + C42873 * C1406 + C42870 * C1415) *
                        C2816 -
                    (C42875 * C7641 + C42872 * C7644 + C42874 * C1424 +
                     C42871 * C1437 + C42873 * C1416 + C42870 * C1433) *
                        C48422 +
                    (C42873 * C1854 + C42870 * C1857 + C42874 * C6270 +
                     C42871 * C6272 + C42875 * C23734 + C42872 * C23735) *
                        C2817 +
                    (C42873 * C1858 + C42870 * C1863 + C42874 * C6273 +
                     C42871 * C6276 + C42875 * C23736 + C42872 * C23737) *
                        C48400) *
                       C48027 * C48278 * C48044 * C48177)) /
                     (p * q * std::sqrt(p + q));
    d2ee[210] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C1546 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C1540 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C1547 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C1541 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C1548 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C1542 -
                    (C42875 * C6270 + C42872 * C6272 + C42874 * C1854 +
                     C42871 * C1857 + C42873 * C1272 + C42870 * C1278) *
                        C1549 -
                    (C42875 * C6273 + C42872 * C6276 + C42874 * C1858 +
                     C42871 * C1863 + C42873 * C1279 + C42870 * C1290) *
                        C48400) *
                       C48027 * C48278 * C48344 +
                   ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                     C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                        C1547 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C1540 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C1546) +
                    (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                     C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                        C1541 -
                    (C42875 * C1412 + C42872 * C1427 + C42874 * C1407 +
                     C42871 * C1417 + C42873 * C308 + C42870 * C321) *
                        C1548 -
                    (C42875 * C1428 + C42872 * C1439 + C42874 * C1418 +
                     C42871 * C1434 + C42873 * C322 + C42870 * C338) *
                        C1542 +
                    (C42873 * C1274 + C42870 * C1282 + C42874 * C1855 +
                     C42871 * C1859 + C42875 * C6271 + C42872 * C6274) *
                        C1549 +
                    (C42873 * C1283 + C42870 * C1292 + C42874 * C1860 +
                     C42871 * C1864 + C42875 * C6275 + C42872 * C6277) *
                        C48400) *
                       C48027 * C48278 * C48054) *
                  C48090) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C711 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C48358 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C712 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C48135) *
                       C48027 * C48278 * C707 +
                   ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                     C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                        C712 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C48358 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C711) +
                    (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                     C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                        C48135) *
                       C48027 * C48278 * C708 +
                   ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                     C42871 * C529 + C42875 * C524 + C42872 * C541) *
                        C711 +
                    (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                     C42871 * C548 + C42875 * C542 + C42872 * C554) *
                        C48358 -
                    (C42875 * C1413 + C42872 * C1429 + C42874 * C1006 +
                     C42871 * C1013 + C42873 * C309 + C42870 * C323) *
                        C712 -
                    (C42875 * C1430 + C42872 * C1440 + C42874 * C1014 +
                     C42871 * C1021 + C42873 * C324 + C42870 * C339) *
                        C48135) *
                       C48027 * C48278 * C709 +
                   ((C42873 * C311 + C42870 * C327 + C42874 * C1007 +
                     C42871 * C1015 + C42875 * C2326 + C42872 * C2327) *
                        C712 -
                    ((C42875 * C543 + C42872 * C555 + C42874 * C532 +
                      C42871 * C549 + C42873 * C128 + C42870 * C139) *
                         C48358 +
                     (C42875 * C525 + C42872 * C544 + C42874 * C519 +
                      C42871 * C531 + C42873 * C118 + C42870 * C129) *
                         C711) +
                    (C42873 * C328 + C42870 * C341 + C42874 * C1016 +
                     C42871 * C1022 + C42875 * C2328 + C42872 * C2329) *
                        C48135) *
                       C48027 * C48278 * C48394) *
                  C48090) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C711 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C48358 -
                     (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                      C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                         C712 -
                     (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                      C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                         C48135) *
                        C48027 * C48278 * C48344 +
                    ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                      C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                         C712 -
                     ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                       C42871 * C547 + C42873 * C125 + C42870 * C137) *
                          C48358 +
                      (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                       C42871 * C527 + C42873 * C116 + C42870 * C124) *
                          C711) +
                     (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                      C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                         C48135) *
                        C48027 * C48278 * C48054) *
                       C1976 +
                   (((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                      C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                         C712 -
                     ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                       C42871 * C552 + C42873 * C533 + C42870 * C550) *
                          C48358 +
                      (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                       C42871 * C537 + C42873 * C520 + C42870 * C534) *
                          C711) +
                     (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                      C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                         C48135) *
                        C48027 * C48278 * C48344 +
                    ((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C711 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C48358 -
                     (C42875 * C2571 + C42872 * C2575 + C42874 * C1411 +
                      C42871 * C1425 + C42873 * C1005 + C42870 * C1011) *
                         C712 -
                     (C42875 * C2576 + C42872 * C2580 + C42874 * C1426 +
                      C42871 * C1438 + C42873 * C1012 + C42870 * C1020) *
                         C48135) *
                        C48027 * C48278 * C48054) *
                       C1977 +
                   (((C42873 * C522 + C42870 * C537 + C42874 * C2158 +
                      C42871 * C2167 + C42875 * C2159 + C42872 * C2168) *
                         C711 +
                     (C42873 * C538 + C42870 * C552 + C42874 * C2166 +
                      C42871 * C2176 + C42875 * C2169 + C42872 * C2177) *
                         C48358 -
                     (C42875 * C7164 + C42872 * C7166 + C42874 * C2570 +
                      C42871 * C2573 + C42873 * C1409 + C42870 * C1421) *
                         C712 -
                     (C42875 * C7167 + C42872 * C7170 + C42874 * C2574 +
                      C42871 * C2579 + C42873 * C1422 + C42870 * C1436) *
                         C48135) *
                        C48027 * C48278 * C48344 +
                    ((C42873 * C1411 + C42870 * C1425 + C42874 * C2571 +
                      C42871 * C2575 + C42875 * C7165 + C42872 * C7168) *
                         C712 -
                     ((C42875 * C2171 + C42872 * C2178 + C42874 * C2164 +
                       C42871 * C2175 + C42873 * C540 + C42870 * C553) *
                          C48358 +
                      (C42875 * C2160 + C42872 * C2170 + C42874 * C2157 +
                       C42871 * C2165 + C42873 * C523 + C42870 * C539) *
                          C711) +
                     (C42873 * C1426 + C42870 * C1438 + C42874 * C2576 +
                      C42871 * C2580 + C42875 * C7169 + C42872 * C7171) *
                         C48135) *
                        C48027 * C48278 * C48054) *
                       C48393)) /
                     (p * q * std::sqrt(p + q));
    d2ee[211] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C1546 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C1540 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C1547 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C1541 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C1548 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C1542 -
                    (C42875 * C6270 + C42872 * C6272 + C42874 * C1854 +
                     C42871 * C1857 + C42873 * C1272 + C42870 * C1278) *
                        C1549 -
                    (C42875 * C6273 + C42872 * C6276 + C42874 * C1858 +
                     C42871 * C1863 + C42873 * C1279 + C42870 * C1290) *
                        C48400) *
                       C48027 * C48278 * C48044 * C48359 +
                   ((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                     C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                        C1547 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C1540 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C1546) +
                    (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                     C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                        C1541 -
                    (C42875 * C7638 + C42872 * C7640 + C42874 * C1410 +
                     C42871 * C1423 + C42873 * C1406 + C42870 * C1415) *
                        C1548 -
                    (C42875 * C7641 + C42872 * C7644 + C42874 * C1424 +
                     C42871 * C1437 + C42873 * C1416 + C42870 * C1433) *
                        C1542 +
                    (C42873 * C1854 + C42870 * C1857 + C42874 * C6270 +
                     C42871 * C6272 + C42875 * C23734 + C42872 * C23735) *
                        C1549 +
                    (C42873 * C1858 + C42870 * C1863 + C42874 * C6273 +
                     C42871 * C6276 + C42875 * C23736 + C42872 * C23737) *
                        C48400) *
                       C48027 * C48278 * C48044 * C48177)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C711 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C48358 -
                     (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                      C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                         C712 -
                     (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                      C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                         C48135) *
                        C48027 * C48278 * C299 +
                    ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                      C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                         C712 -
                     ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                       C42871 * C547 + C42873 * C125 + C42870 * C137) *
                          C48358 +
                      (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                       C42871 * C527 + C42873 * C116 + C42870 * C124) *
                          C711) +
                     (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                      C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                         C48135) *
                        C48027 * C48278 * C300 +
                    ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                      C42871 * C529 + C42875 * C524 + C42872 * C541) *
                         C711 +
                     (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                      C42871 * C548 + C42875 * C542 + C42872 * C554) *
                         C48358 -
                     (C42875 * C1413 + C42872 * C1429 + C42874 * C1006 +
                      C42871 * C1013 + C42873 * C309 + C42870 * C323) *
                         C712 -
                     (C42875 * C1430 + C42872 * C1440 + C42874 * C1014 +
                      C42871 * C1021 + C42873 * C324 + C42870 * C339) *
                         C48135) *
                        C48027 * C48278 * C48384) *
                       C48359 +
                   (((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                      C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                         C712 -
                     ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                       C42871 * C552 + C42873 * C533 + C42870 * C550) *
                          C48358 +
                      (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                       C42871 * C537 + C42873 * C520 + C42870 * C534) *
                          C711) +
                     (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                      C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                         C48135) *
                        C48027 * C48278 * C299 +
                    ((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C711 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C48358 -
                     (C42875 * C2571 + C42872 * C2575 + C42874 * C1411 +
                      C42871 * C1425 + C42873 * C1005 + C42870 * C1011) *
                         C712 -
                     (C42875 * C2576 + C42872 * C2580 + C42874 * C1426 +
                      C42871 * C1438 + C42873 * C1012 + C42870 * C1020) *
                         C48135) *
                        C48027 * C48278 * C300 +
                    ((C42873 * C1006 + C42870 * C1013 + C42874 * C1413 +
                      C42871 * C1429 + C42875 * C2572 + C42872 * C2577) *
                         C712 -
                     ((C42875 * C2162 + C42872 * C2174 + C42874 * C542 +
                       C42871 * C554 + C42873 * C530 + C42870 * C548) *
                          C48358 +
                      (C42875 * C2156 + C42872 * C2163 + C42874 * C524 +
                       C42871 * C541 + C42873 * C518 + C42870 * C529) *
                          C711) +
                     (C42873 * C1014 + C42870 * C1021 + C42874 * C1430 +
                      C42871 * C1440 + C42875 * C2578 + C42872 * C2581) *
                         C48135) *
                        C48027 * C48278 * C48384) *
                       C48177)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C711 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C48358 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C712 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C48135) *
                       C48027 * C48278 * C48044 * C2448 +
                   ((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                     C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                        C712 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C48358 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C711) +
                    (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                     C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                        C48135) *
                       C48027 * C48278 * C48044 * C2449 +
                   ((C42873 * C522 + C42870 * C537 + C42874 * C2158 +
                     C42871 * C2167 + C42875 * C2159 + C42872 * C2168) *
                        C711 +
                    (C42873 * C538 + C42870 * C552 + C42874 * C2166 +
                     C42871 * C2176 + C42875 * C2169 + C42872 * C2177) *
                        C48358 -
                    (C42875 * C7164 + C42872 * C7166 + C42874 * C2570 +
                     C42871 * C2573 + C42873 * C1409 + C42870 * C1421) *
                        C712 -
                    (C42875 * C7167 + C42872 * C7170 + C42874 * C2574 +
                     C42871 * C2579 + C42873 * C1422 + C42870 * C1436) *
                        C48135) *
                       C48027 * C48278 * C48044 * C2450 +
                   ((C42873 * C2570 + C42870 * C2573 + C42874 * C7164 +
                     C42871 * C7166 + C42875 * C28114 + C42872 * C28115) *
                        C712 -
                    ((C42875 * C12925 + C42872 * C12928 + C42874 * C2169 +
                      C42871 * C2177 + C42873 * C2166 + C42870 * C2176) *
                         C48358 +
                     (C42875 * C12922 + C42872 * C12924 + C42874 * C2159 +
                      C42871 * C2168 + C42873 * C2158 + C42870 * C2167) *
                         C711) +
                    (C42873 * C2574 + C42870 * C2579 + C42874 * C7167 +
                     C42871 * C7170 + C42875 * C28116 + C42872 * C28117) *
                        C48135) *
                       C48027 * C48278 * C48044 * C48406)) /
                     (p * q * std::sqrt(p + q));
    d2ee[212] += (0.5 * std::pow(Pi, 2.5) *
                      (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                         C42871 * C534 + C42875 * C522 + C42872 * C537) *
                            C114 +
                        (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                         C42871 * C550 + C42875 * C538 + C42872 * C552) *
                            C48072) *
                           C48027 * C48278 * C107 -
                       ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                         C42871 * C547 + C42873 * C125 + C42870 * C137) *
                            C48072 +
                        (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                         C42871 * C527 + C42873 * C116 + C42870 * C124) *
                            C114) *
                           C48027 * C48278 * C108 +
                       ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                         C42871 * C529 + C42875 * C524 + C42872 * C541) *
                            C114 +
                        (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                         C42871 * C548 + C42875 * C542 + C42872 * C554) *
                            C48072) *
                           C48027 * C48278 * C109 -
                       ((C42875 * C543 + C42872 * C555 + C42874 * C532 +
                         C42871 * C549 + C42873 * C128 + C42870 * C139) *
                            C48072 +
                        (C42875 * C525 + C42872 * C544 + C42874 * C519 +
                         C42871 * C531 + C42873 * C118 + C42870 * C129) *
                            C114) *
                           C48027 * C48278 * C110 +
                       ((C42873 * C119 + C42870 * C130 + C42874 * C521 +
                         C42871 * C536 + C42875 * C526 + C42872 * C545) *
                            C114 +
                        (C42873 * C131 + C42870 * C140 + C42874 * C535 +
                         C42871 * C551 + C42875 * C546 + C42872 * C556) *
                            C48072) *
                           C48027 * C48278 * C111) *
                      C48090 +
                  0.5 * std::pow(Pi, 2.5) *
                      (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                         C42871 * C534 + C42875 * C522 + C42872 * C537) *
                            C302 +
                        (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                         C42871 * C550 + C42875 * C538 + C42872 * C552) *
                            C48429 -
                        (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                         C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                            C303 -
                        (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                         C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                            C48417 +
                        (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                         C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                            C304 +
                        (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                         C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                            C48390) *
                           C48027 * C48278 * C299 +
                       ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                         C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                            C303 -
                        ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                          C42871 * C547 + C42873 * C125 + C42870 * C137) *
                             C48429 +
                         (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                          C42871 * C527 + C42873 * C116 + C42870 * C124) *
                             C302) +
                        (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                         C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                            C48417 -
                        (C42875 * C1412 + C42872 * C1427 + C42874 * C1407 +
                         C42871 * C1417 + C42873 * C308 + C42870 * C321) *
                            C304 -
                        (C42875 * C1428 + C42872 * C1439 + C42874 * C1418 +
                         C42871 * C1434 + C42873 * C322 + C42870 * C338) *
                            C48390) *
                           C48027 * C48278 * C300 +
                       ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                         C42871 * C529 + C42875 * C524 + C42872 * C541) *
                            C302 +
                        (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                         C42871 * C548 + C42875 * C542 + C42872 * C554) *
                            C48429 -
                        (C42875 * C1413 + C42872 * C1429 + C42874 * C1006 +
                         C42871 * C1013 + C42873 * C309 + C42870 * C323) *
                            C303 -
                        (C42875 * C1430 + C42872 * C1440 + C42874 * C1014 +
                         C42871 * C1021 + C42873 * C324 + C42870 * C339) *
                            C48417 +
                        (C42873 * C310 + C42870 * C325 + C42874 * C1408 +
                         C42871 * C1419 + C42875 * C1414 + C42872 * C1431) *
                            C304 +
                        (C42873 * C326 + C42870 * C340 + C42874 * C1420 +
                         C42871 * C1435 + C42875 * C1432 + C42872 * C1441) *
                            C48390) *
                           C48027 * C48278 * C48384) *
                      C48090) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C114 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C48072) *
                        C48027 * C48278 * C299 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C48072 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C114) *
                        C48027 * C48278 * C300 +
                    ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                      C42871 * C529 + C42875 * C524 + C42872 * C541) *
                         C114 +
                     (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                      C42871 * C548 + C42875 * C542 + C42872 * C554) *
                         C48072) *
                        C48027 * C48278 * C48384) *
                       C48430 +
                   (((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C114 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C48072) *
                        C48027 * C48278 * C300 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C48072 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C114) *
                        C48027 * C48278 * C299 -
                    ((C42875 * C2162 + C42872 * C2174 + C42874 * C542 +
                      C42871 * C554 + C42873 * C530 + C42870 * C548) *
                         C48072 +
                     (C42875 * C2156 + C42872 * C2163 + C42874 * C524 +
                      C42871 * C541 + C42873 * C518 + C42870 * C529) *
                         C114) *
                        C48027 * C48278 * C48384) *
                       C48419 +
                   (((C42873 * C522 + C42870 * C537 + C42874 * C2158 +
                      C42871 * C2167 + C42875 * C2159 + C42872 * C2168) *
                         C114 +
                     (C42873 * C538 + C42870 * C552 + C42874 * C2166 +
                      C42871 * C2176 + C42875 * C2169 + C42872 * C2177) *
                         C48072) *
                        C48027 * C48278 * C299 -
                    ((C42875 * C2171 + C42872 * C2178 + C42874 * C2164 +
                      C42871 * C2175 + C42873 * C540 + C42870 * C553) *
                         C48072 +
                     (C42875 * C2160 + C42872 * C2170 + C42874 * C2157 +
                      C42871 * C2165 + C42873 * C523 + C42870 * C539) *
                         C114) *
                        C48027 * C48278 * C300 +
                    ((C42873 * C524 + C42870 * C541 + C42874 * C2156 +
                      C42871 * C2163 + C42875 * C2161 + C42872 * C2172) *
                         C114 +
                     (C42873 * C542 + C42870 * C554 + C42874 * C2162 +
                      C42871 * C2174 + C42875 * C2173 + C42872 * C2179) *
                         C48072) *
                        C48027 * C48278 * C48384) *
                       C48393)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C1173 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C1167 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C1174 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C1168 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C1175 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C48390) *
                       C48027 * C48278 * C48426 +
                   ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                     C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                        C1174 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C1167 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C1173) +
                    (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                     C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                        C1168 -
                    (C42875 * C1412 + C42872 * C1427 + C42874 * C1407 +
                     C42871 * C1417 + C42873 * C308 + C42870 * C321) *
                        C1175 -
                    (C42875 * C1428 + C42872 * C1439 + C42874 * C1418 +
                     C42871 * C1434 + C42873 * C322 + C42870 * C338) *
                        C48390) *
                       C48027 * C48278 * C48413 +
                   ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                     C42871 * C529 + C42875 * C524 + C42872 * C541) *
                        C1173 +
                    (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                     C42871 * C548 + C42875 * C542 + C42872 * C554) *
                        C1167 -
                    (C42875 * C1413 + C42872 * C1429 + C42874 * C1006 +
                     C42871 * C1013 + C42873 * C309 + C42870 * C323) *
                        C1174 -
                    (C42875 * C1430 + C42872 * C1440 + C42874 * C1014 +
                     C42871 * C1021 + C42873 * C324 + C42870 * C339) *
                        C1168 +
                    (C42873 * C310 + C42870 * C325 + C42874 * C1408 +
                     C42871 * C1419 + C42875 * C1414 + C42872 * C1431) *
                        C1175 +
                    (C42873 * C326 + C42870 * C340 + C42874 * C1420 +
                     C42871 * C1435 + C42875 * C1432 + C42872 * C1441) *
                        C48390) *
                       C48027 * C48278 * C48384) *
                  C48090) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  ((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                    C42871 * C534 + C42875 * C522 + C42872 * C537) *
                       C1267 +
                   (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                    C42871 * C550 + C42875 * C538 + C42872 * C552) *
                       C1261 -
                   (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                    C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                       C1268 -
                   (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                    C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                       C1262 +
                   (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                    C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                       C1269 +
                   (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                    C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                       C1263 -
                   (C42875 * C6270 + C42872 * C6272 + C42874 * C1854 +
                    C42871 * C1857 + C42873 * C1272 + C42870 * C1278) *
                       C1270 -
                   (C42875 * C6273 + C42872 * C6276 + C42874 * C1858 +
                    C42871 * C1863 + C42873 * C1279 + C42870 * C1290) *
                       C1264 +
                   (C42873 * C1273 + C42870 * C1280 + C42874 * C6776 +
                    C42871 * C6778 + C42875 * C22744 + C42872 * C22745) *
                       C1271 +
                   (C42873 * C1281 + C42870 * C1291 + C42874 * C6779 +
                    C42871 * C6782 + C42875 * C22746 + C42872 * C22747) *
                       C1265) *
                  C48027 * C48278 * C48044 * C48090) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C1173 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C1167 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C1174 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C1168 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C1175 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C48390) *
                       C48027 * C48278 * C48044 * C48430 +
                   ((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                     C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                        C1174 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C1167 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C1173) +
                    (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                     C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                        C1168 -
                    (C42875 * C7638 + C42872 * C7640 + C42874 * C1410 +
                     C42871 * C1423 + C42873 * C1406 + C42870 * C1415) *
                        C1175 -
                    (C42875 * C7641 + C42872 * C7644 + C42874 * C1424 +
                     C42871 * C1437 + C42873 * C1416 + C42870 * C1433) *
                        C48390) *
                       C48027 * C48278 * C48044 * C48419 +
                   ((C42873 * C522 + C42870 * C537 + C42874 * C2158 +
                     C42871 * C2167 + C42875 * C2159 + C42872 * C2168) *
                        C1173 +
                    (C42873 * C538 + C42870 * C552 + C42874 * C2166 +
                     C42871 * C2176 + C42875 * C2169 + C42872 * C2177) *
                        C1167 -
                    (C42875 * C7164 + C42872 * C7166 + C42874 * C2570 +
                     C42871 * C2573 + C42873 * C1409 + C42870 * C1421) *
                        C1174 -
                    (C42875 * C7167 + C42872 * C7170 + C42874 * C2574 +
                     C42871 * C2579 + C42873 * C1422 + C42870 * C1436) *
                        C1168 +
                    (C42873 * C1410 + C42870 * C1423 + C42874 * C7638 +
                     C42871 * C7640 + C42875 * C23388 + C42872 * C23389) *
                        C1175 +
                    (C42873 * C1424 + C42870 * C1437 + C42874 * C7641 +
                     C42871 * C7644 + C42875 * C23390 + C42872 * C23391) *
                        C48390) *
                       C48027 * C48278 * C48044 * C48393)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C114 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C48072) *
                        C48027 * C48278 * C48426 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C48072 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C114) *
                        C48027 * C48278 * C48413 +
                    ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                      C42871 * C529 + C42875 * C524 + C42872 * C541) *
                         C114 +
                     (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                      C42871 * C548 + C42875 * C542 + C42872 * C554) *
                         C48072) *
                        C48027 * C48278 * C48384) *
                       C1976 +
                   (((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C114 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C48072) *
                        C48027 * C48278 * C48413 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C48072 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C114) *
                        C48027 * C48278 * C48426 -
                    ((C42875 * C2162 + C42872 * C2174 + C42874 * C542 +
                      C42871 * C554 + C42873 * C530 + C42870 * C548) *
                         C48072 +
                     (C42875 * C2156 + C42872 * C2163 + C42874 * C524 +
                      C42871 * C541 + C42873 * C518 + C42870 * C529) *
                         C114) *
                        C48027 * C48278 * C48384) *
                       C1977 +
                   (((C42873 * C522 + C42870 * C537 + C42874 * C2158 +
                      C42871 * C2167 + C42875 * C2159 + C42872 * C2168) *
                         C114 +
                     (C42873 * C538 + C42870 * C552 + C42874 * C2166 +
                      C42871 * C2176 + C42875 * C2169 + C42872 * C2177) *
                         C48072) *
                        C48027 * C48278 * C48426 -
                    ((C42875 * C2171 + C42872 * C2178 + C42874 * C2164 +
                      C42871 * C2175 + C42873 * C540 + C42870 * C553) *
                         C48072 +
                     (C42875 * C2160 + C42872 * C2170 + C42874 * C2157 +
                      C42871 * C2165 + C42873 * C523 + C42870 * C539) *
                         C114) *
                        C48027 * C48278 * C48413 +
                    ((C42873 * C524 + C42870 * C541 + C42874 * C2156 +
                      C42871 * C2163 + C42875 * C2161 + C42872 * C2172) *
                         C114 +
                     (C42873 * C542 + C42870 * C554 + C42874 * C2162 +
                      C42871 * C2174 + C42875 * C2173 + C42872 * C2179) *
                         C48072) *
                        C48027 * C48278 * C48384) *
                       C48393)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C302 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C48429 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C303 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C48417 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C304 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C48390) *
                       C48027 * C48278 * C48044 * C1976 +
                   ((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                     C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                        C303 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C48429 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C302) +
                    (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                     C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                        C48417 -
                    (C42875 * C7638 + C42872 * C7640 + C42874 * C1410 +
                     C42871 * C1423 + C42873 * C1406 + C42870 * C1415) *
                        C304 -
                    (C42875 * C7641 + C42872 * C7644 + C42874 * C1424 +
                     C42871 * C1437 + C42873 * C1416 + C42870 * C1433) *
                        C48390) *
                       C48027 * C48278 * C48044 * C1977 +
                   ((C42873 * C522 + C42870 * C537 + C42874 * C2158 +
                     C42871 * C2167 + C42875 * C2159 + C42872 * C2168) *
                        C302 +
                    (C42873 * C538 + C42870 * C552 + C42874 * C2166 +
                     C42871 * C2176 + C42875 * C2169 + C42872 * C2177) *
                        C48429 -
                    (C42875 * C7164 + C42872 * C7166 + C42874 * C2570 +
                     C42871 * C2573 + C42873 * C1409 + C42870 * C1421) *
                        C303 -
                    (C42875 * C7167 + C42872 * C7170 + C42874 * C2574 +
                     C42871 * C2579 + C42873 * C1422 + C42870 * C1436) *
                        C48417 +
                    (C42873 * C1410 + C42870 * C1423 + C42874 * C7638 +
                     C42871 * C7640 + C42875 * C23388 + C42872 * C23389) *
                        C304 +
                    (C42873 * C1424 + C42870 * C1437 + C42874 * C7641 +
                     C42871 * C7644 + C42875 * C23390 + C42872 * C23391) *
                        C48390) *
                       C48027 * C48278 * C48044 * C48393)) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C114 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C48072) *
                       C48027 * C48278 * C48044 * C2151 -
                   ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                     C42871 * C552 + C42873 * C533 + C42870 * C550) *
                        C48072 +
                    (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                     C42871 * C537 + C42873 * C520 + C42870 * C534) *
                        C114) *
                       C48027 * C48278 * C48044 * C2152 +
                   ((C42873 * C522 + C42870 * C537 + C42874 * C2158 +
                     C42871 * C2167 + C42875 * C2159 + C42872 * C2168) *
                        C114 +
                    (C42873 * C538 + C42870 * C552 + C42874 * C2166 +
                     C42871 * C2176 + C42875 * C2169 + C42872 * C2177) *
                        C48072) *
                       C48027 * C48278 * C48044 * C2153 -
                   ((C42875 * C12925 + C42872 * C12928 + C42874 * C2169 +
                     C42871 * C2177 + C42873 * C2166 + C42870 * C2176) *
                        C48072 +
                    (C42875 * C12922 + C42872 * C12924 + C42874 * C2159 +
                     C42871 * C2168 + C42873 * C2158 + C42870 * C2167) *
                        C114) *
                       C48027 * C48278 * C48044 * C2154 +
                   ((C42873 * C2159 + C42870 * C2168 + C42874 * C12922 +
                     C42871 * C12924 + C42875 * C44344 + C42872 * C44345) *
                        C114 +
                    (C42873 * C2169 + C42870 * C2177 + C42874 * C12925 +
                     C42871 * C12928 + C42875 * C44346 + C42872 * C44347) *
                        C48072) *
                       C48027 * C48278 * C48044 * C2155)) /
                     (p * q * std::sqrt(p + q));
    d2ee[213] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C1173 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C1167 -
                     (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                      C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                         C1174 -
                     (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                      C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                         C1168 +
                     (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                      C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                         C1175 +
                     (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                      C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                         C48390) *
                        C48027 * C48278 * C48344 +
                    ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                      C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                         C1174 -
                     ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                       C42871 * C547 + C42873 * C125 + C42870 * C137) *
                          C1167 +
                      (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                       C42871 * C527 + C42873 * C116 + C42870 * C124) *
                          C1173) +
                     (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                      C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                         C1168 -
                     (C42875 * C1412 + C42872 * C1427 + C42874 * C1407 +
                      C42871 * C1417 + C42873 * C308 + C42870 * C321) *
                         C1175 -
                     (C42875 * C1428 + C42872 * C1439 + C42874 * C1418 +
                      C42871 * C1434 + C42873 * C322 + C42870 * C338) *
                         C48390) *
                        C48027 * C48278 * C48054) *
                       C48359 +
                   (((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                      C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                         C1174 -
                     ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                       C42871 * C552 + C42873 * C533 + C42870 * C550) *
                          C1167 +
                      (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                       C42871 * C537 + C42873 * C520 + C42870 * C534) *
                          C1173) +
                     (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                      C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                         C1168 -
                     (C42875 * C7638 + C42872 * C7640 + C42874 * C1410 +
                      C42871 * C1423 + C42873 * C1406 + C42870 * C1415) *
                         C1175 -
                     (C42875 * C7641 + C42872 * C7644 + C42874 * C1424 +
                      C42871 * C1437 + C42873 * C1416 + C42870 * C1433) *
                         C48390) *
                        C48027 * C48278 * C48344 +
                    ((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C1173 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C1167 -
                     (C42875 * C2571 + C42872 * C2575 + C42874 * C1411 +
                      C42871 * C1425 + C42873 * C1005 + C42870 * C1011) *
                         C1174 -
                     (C42875 * C2576 + C42872 * C2580 + C42874 * C1426 +
                      C42871 * C1438 + C42873 * C1012 + C42870 * C1020) *
                         C1168 +
                     (C42873 * C1407 + C42870 * C1417 + C42874 * C1412 +
                      C42871 * C1427 + C42875 * C7639 + C42872 * C7642) *
                         C1175 +
                     (C42873 * C1418 + C42870 * C1434 + C42874 * C1428 +
                      C42871 * C1439 + C42875 * C7643 + C42872 * C7645) *
                         C48390) *
                        C48027 * C48278 * C48054) *
                       C48177)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C114 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C48072) *
                        C48027 * C48278 * C707 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C48072 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C114) *
                        C48027 * C48278 * C708 +
                    ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                      C42871 * C529 + C42875 * C524 + C42872 * C541) *
                         C114 +
                     (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                      C42871 * C548 + C42875 * C542 + C42872 * C554) *
                         C48072) *
                        C48027 * C48278 * C709 -
                    ((C42875 * C543 + C42872 * C555 + C42874 * C532 +
                      C42871 * C549 + C42873 * C128 + C42870 * C139) *
                         C48072 +
                     (C42875 * C525 + C42872 * C544 + C42874 * C519 +
                      C42871 * C531 + C42873 * C118 + C42870 * C129) *
                         C114) *
                        C48027 * C48278 * C48394) *
                       C48359 +
                   (((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C114 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C48072) *
                        C48027 * C48278 * C708 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C48072 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C114) *
                        C48027 * C48278 * C707 -
                    ((C42875 * C2162 + C42872 * C2174 + C42874 * C542 +
                      C42871 * C554 + C42873 * C530 + C42870 * C548) *
                         C48072 +
                     (C42875 * C2156 + C42872 * C2163 + C42874 * C524 +
                      C42871 * C541 + C42873 * C518 + C42870 * C529) *
                         C114) *
                        C48027 * C48278 * C709 +
                    ((C42873 * C519 + C42870 * C531 + C42874 * C525 +
                      C42871 * C544 + C42875 * C2452 + C42872 * C2453) *
                         C114 +
                     (C42873 * C532 + C42870 * C549 + C42874 * C543 +
                      C42871 * C555 + C42875 * C2454 + C42872 * C2455) *
                         C48072) *
                        C48027 * C48278 * C48394) *
                       C48177)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C114 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C48072) *
                        C48027 * C48278 * C48344 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C48072 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C114) *
                        C48027 * C48278 * C48054) *
                       C2448 +
                   (((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C114 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C48072) *
                        C48027 * C48278 * C48054 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C48072 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C114) *
                        C48027 * C48278 * C48344) *
                       C2449 +
                   (((C42873 * C522 + C42870 * C537 + C42874 * C2158 +
                      C42871 * C2167 + C42875 * C2159 + C42872 * C2168) *
                         C114 +
                     (C42873 * C538 + C42870 * C552 + C42874 * C2166 +
                      C42871 * C2176 + C42875 * C2169 + C42872 * C2177) *
                         C48072) *
                        C48027 * C48278 * C48344 -
                    ((C42875 * C2171 + C42872 * C2178 + C42874 * C2164 +
                      C42871 * C2175 + C42873 * C540 + C42870 * C553) *
                         C48072 +
                     (C42875 * C2160 + C42872 * C2170 + C42874 * C2157 +
                      C42871 * C2165 + C42873 * C523 + C42870 * C539) *
                         C114) *
                        C48027 * C48278 * C48054) *
                       C2450 +
                   (((C42873 * C2157 + C42870 * C2165 + C42874 * C2160 +
                      C42871 * C2170 + C42875 * C12923 + C42872 * C12926) *
                         C114 +
                     (C42873 * C2164 + C42870 * C2175 + C42874 * C2171 +
                      C42871 * C2178 + C42875 * C12927 + C42872 * C12929) *
                         C48072) *
                        C48027 * C48278 * C48054 -
                    ((C42875 * C12925 + C42872 * C12928 + C42874 * C2169 +
                      C42871 * C2177 + C42873 * C2166 + C42870 * C2176) *
                         C48072 +
                     (C42875 * C12922 + C42872 * C12924 + C42874 * C2159 +
                      C42871 * C2168 + C42873 * C2158 + C42870 * C2167) *
                         C114) *
                        C48027 * C48278 * C48344) *
                       C48406)) /
                     (p * q * std::sqrt(p + q));
    d2ee[214] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C302 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C48429 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C303 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C48417 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C304 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C48390) *
                       C48027 * C48278 * C299 +
                   ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                     C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                        C303 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C48429 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C302) +
                    (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                     C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                        C48417 -
                    (C42875 * C1412 + C42872 * C1427 + C42874 * C1407 +
                     C42871 * C1417 + C42873 * C308 + C42870 * C321) *
                        C304 -
                    (C42875 * C1428 + C42872 * C1439 + C42874 * C1418 +
                     C42871 * C1434 + C42873 * C322 + C42870 * C338) *
                        C48390) *
                       C48027 * C48278 * C300 +
                   ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                     C42871 * C529 + C42875 * C524 + C42872 * C541) *
                        C302 +
                    (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                     C42871 * C548 + C42875 * C542 + C42872 * C554) *
                        C48429 -
                    (C42875 * C1413 + C42872 * C1429 + C42874 * C1006 +
                     C42871 * C1013 + C42873 * C309 + C42870 * C323) *
                        C303 -
                    (C42875 * C1430 + C42872 * C1440 + C42874 * C1014 +
                     C42871 * C1021 + C42873 * C324 + C42870 * C339) *
                        C48417 +
                    (C42873 * C310 + C42870 * C325 + C42874 * C1408 +
                     C42871 * C1419 + C42875 * C1414 + C42872 * C1431) *
                        C304 +
                    (C42873 * C326 + C42870 * C340 + C42874 * C1420 +
                     C42871 * C1435 + C42875 * C1432 + C42872 * C1441) *
                        C48390) *
                       C48027 * C48278 * C48384) *
                  C48090) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C114 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C48072) *
                       C48027 * C48278 * C107 -
                   ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                     C42871 * C547 + C42873 * C125 + C42870 * C137) *
                        C48072 +
                    (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                     C42871 * C527 + C42873 * C116 + C42870 * C124) *
                        C114) *
                       C48027 * C48278 * C108 +
                   ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                     C42871 * C529 + C42875 * C524 + C42872 * C541) *
                        C114 +
                    (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                     C42871 * C548 + C42875 * C542 + C42872 * C554) *
                        C48072) *
                       C48027 * C48278 * C109 -
                   ((C42875 * C543 + C42872 * C555 + C42874 * C532 +
                     C42871 * C549 + C42873 * C128 + C42870 * C139) *
                        C48072 +
                    (C42875 * C525 + C42872 * C544 + C42874 * C519 +
                     C42871 * C531 + C42873 * C118 + C42870 * C129) *
                        C114) *
                       C48027 * C48278 * C110 +
                   ((C42873 * C119 + C42870 * C130 + C42874 * C521 +
                     C42871 * C536 + C42875 * C526 + C42872 * C545) *
                        C114 +
                    (C42873 * C131 + C42870 * C140 + C42874 * C535 +
                     C42871 * C551 + C42875 * C546 + C42872 * C556) *
                        C48072) *
                       C48027 * C48278 * C111) *
                  C48090) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C1173 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C1167 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C1174 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C1168 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C1175 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C48390) *
                       C48027 * C48278 * C48426 +
                   ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                     C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                        C1174 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C1167 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C1173) +
                    (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                     C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                        C1168 -
                    (C42875 * C1412 + C42872 * C1427 + C42874 * C1407 +
                     C42871 * C1417 + C42873 * C308 + C42870 * C321) *
                        C1175 -
                    (C42875 * C1428 + C42872 * C1439 + C42874 * C1418 +
                     C42871 * C1434 + C42873 * C322 + C42870 * C338) *
                        C48390) *
                       C48027 * C48278 * C48413 +
                   ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                     C42871 * C529 + C42875 * C524 + C42872 * C541) *
                        C1173 +
                    (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                     C42871 * C548 + C42875 * C542 + C42872 * C554) *
                        C1167 -
                    (C42875 * C1413 + C42872 * C1429 + C42874 * C1006 +
                     C42871 * C1013 + C42873 * C309 + C42870 * C323) *
                        C1174 -
                    (C42875 * C1430 + C42872 * C1440 + C42874 * C1014 +
                     C42871 * C1021 + C42873 * C324 + C42870 * C339) *
                        C1168 +
                    (C42873 * C310 + C42870 * C325 + C42874 * C1408 +
                     C42871 * C1419 + C42875 * C1414 + C42872 * C1431) *
                        C1175 +
                    (C42873 * C326 + C42870 * C340 + C42874 * C1420 +
                     C42871 * C1435 + C42875 * C1432 + C42872 * C1441) *
                        C48390) *
                       C48027 * C48278 * C48384) *
                  C48090) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                    C42871 * C534 + C42875 * C522 + C42872 * C537) *
                       C1267 +
                   (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                    C42871 * C550 + C42875 * C538 + C42872 * C552) *
                       C1261 -
                   (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                    C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                       C1268 -
                   (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                    C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                       C1262 +
                   (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                    C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                       C1269 +
                   (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                    C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                       C1263 -
                   (C42875 * C6270 + C42872 * C6272 + C42874 * C1854 +
                    C42871 * C1857 + C42873 * C1272 + C42870 * C1278) *
                       C1270 -
                   (C42875 * C6273 + C42872 * C6276 + C42874 * C1858 +
                    C42871 * C1863 + C42873 * C1279 + C42870 * C1290) *
                       C1264 +
                   (C42873 * C1273 + C42870 * C1280 + C42874 * C6776 +
                    C42871 * C6778 + C42875 * C22744 + C42872 * C22745) *
                       C1271 +
                   (C42873 * C1281 + C42870 * C1291 + C42874 * C6779 +
                    C42871 * C6782 + C42875 * C22746 + C42872 * C22747) *
                       C1265) *
                  C48027 * C48278 * C48044 * C48090) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C114 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C48072) *
                        C48027 * C48278 * C48426 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C48072 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C114) *
                        C48027 * C48278 * C48413 +
                    ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                      C42871 * C529 + C42875 * C524 + C42872 * C541) *
                         C114 +
                     (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                      C42871 * C548 + C42875 * C542 + C42872 * C554) *
                         C48072) *
                        C48027 * C48278 * C48384) *
                       C1976 +
                   (((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C114 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C48072) *
                        C48027 * C48278 * C48413 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C48072 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C114) *
                        C48027 * C48278 * C48426 -
                    ((C42875 * C2162 + C42872 * C2174 + C42874 * C542 +
                      C42871 * C554 + C42873 * C530 + C42870 * C548) *
                         C48072 +
                     (C42875 * C2156 + C42872 * C2163 + C42874 * C524 +
                      C42871 * C541 + C42873 * C518 + C42870 * C529) *
                         C114) *
                        C48027 * C48278 * C48384) *
                       C1977 +
                   (((C42873 * C522 + C42870 * C537 + C42874 * C2158 +
                      C42871 * C2167 + C42875 * C2159 + C42872 * C2168) *
                         C114 +
                     (C42873 * C538 + C42870 * C552 + C42874 * C2166 +
                      C42871 * C2176 + C42875 * C2169 + C42872 * C2177) *
                         C48072) *
                        C48027 * C48278 * C48426 -
                    ((C42875 * C2171 + C42872 * C2178 + C42874 * C2164 +
                      C42871 * C2175 + C42873 * C540 + C42870 * C553) *
                         C48072 +
                     (C42875 * C2160 + C42872 * C2170 + C42874 * C2157 +
                      C42871 * C2165 + C42873 * C523 + C42870 * C539) *
                         C114) *
                        C48027 * C48278 * C48413 +
                    ((C42873 * C524 + C42870 * C541 + C42874 * C2156 +
                      C42871 * C2163 + C42875 * C2161 + C42872 * C2172) *
                         C114 +
                     (C42873 * C542 + C42870 * C554 + C42874 * C2162 +
                      C42871 * C2174 + C42875 * C2173 + C42872 * C2179) *
                         C48072) *
                        C48027 * C48278 * C48384) *
                       C48393)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C302 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C48429 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C303 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C48417 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C304 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C48390) *
                       C48027 * C48278 * C48044 * C1976 +
                   ((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                     C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                        C303 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C48429 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C302) +
                    (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                     C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                        C48417 -
                    (C42875 * C7638 + C42872 * C7640 + C42874 * C1410 +
                     C42871 * C1423 + C42873 * C1406 + C42870 * C1415) *
                        C304 -
                    (C42875 * C7641 + C42872 * C7644 + C42874 * C1424 +
                     C42871 * C1437 + C42873 * C1416 + C42870 * C1433) *
                        C48390) *
                       C48027 * C48278 * C48044 * C1977 +
                   ((C42873 * C522 + C42870 * C537 + C42874 * C2158 +
                     C42871 * C2167 + C42875 * C2159 + C42872 * C2168) *
                        C302 +
                    (C42873 * C538 + C42870 * C552 + C42874 * C2166 +
                     C42871 * C2176 + C42875 * C2169 + C42872 * C2177) *
                        C48429 -
                    (C42875 * C7164 + C42872 * C7166 + C42874 * C2570 +
                     C42871 * C2573 + C42873 * C1409 + C42870 * C1421) *
                        C303 -
                    (C42875 * C7167 + C42872 * C7170 + C42874 * C2574 +
                     C42871 * C2579 + C42873 * C1422 + C42870 * C1436) *
                        C48417 +
                    (C42873 * C1410 + C42870 * C1423 + C42874 * C7638 +
                     C42871 * C7640 + C42875 * C23388 + C42872 * C23389) *
                        C304 +
                    (C42873 * C1424 + C42870 * C1437 + C42874 * C7641 +
                     C42871 * C7644 + C42875 * C23390 + C42872 * C23391) *
                        C48390) *
                       C48027 * C48278 * C48044 * C48393)) /
                     (p * q * std::sqrt(p + q));
    d2ee[215] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C711 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C48358 -
                     (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                      C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                         C712 -
                     (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                      C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                         C48135) *
                        C48027 * C48278 * C48049 +
                    ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                      C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                         C712 -
                     ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                       C42871 * C547 + C42873 * C125 + C42870 * C137) *
                          C48358 +
                      (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                       C42871 * C527 + C42873 * C116 + C42870 * C124) *
                          C711) +
                     (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                      C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                         C48135) *
                        C48027 * C48278 * C48057 +
                    ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                      C42871 * C529 + C42875 * C524 + C42872 * C541) *
                         C711 +
                     (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                      C42871 * C548 + C42875 * C542 + C42872 * C554) *
                         C48358 -
                     (C42875 * C1413 + C42872 * C1429 + C42874 * C1006 +
                      C42871 * C1013 + C42873 * C309 + C42870 * C323) *
                         C712 -
                     (C42875 * C1430 + C42872 * C1440 + C42874 * C1014 +
                      C42871 * C1021 + C42873 * C324 + C42870 * C339) *
                         C48135) *
                        C48027 * C48278 * C3111) *
                       C3547 +
                   (((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                      C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                         C712 -
                     ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                       C42871 * C552 + C42873 * C533 + C42870 * C550) *
                          C48358 +
                      (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                       C42871 * C537 + C42873 * C520 + C42870 * C534) *
                          C711) +
                     (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                      C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                         C48135) *
                        C48027 * C48278 * C48049 +
                    ((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C711 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C48358 -
                     (C42875 * C2571 + C42872 * C2575 + C42874 * C1411 +
                      C42871 * C1425 + C42873 * C1005 + C42870 * C1011) *
                         C712 -
                     (C42875 * C2576 + C42872 * C2580 + C42874 * C1426 +
                      C42871 * C1438 + C42873 * C1012 + C42870 * C1020) *
                         C48135) *
                        C48027 * C48278 * C48057 +
                    ((C42873 * C1006 + C42870 * C1013 + C42874 * C1413 +
                      C42871 * C1429 + C42875 * C2572 + C42872 * C2577) *
                         C712 -
                     ((C42875 * C2162 + C42872 * C2174 + C42874 * C542 +
                       C42871 * C554 + C42873 * C530 + C42870 * C548) *
                          C48358 +
                      (C42875 * C2156 + C42872 * C2163 + C42874 * C524 +
                       C42871 * C541 + C42873 * C518 + C42870 * C529) *
                          C711) +
                     (C42873 * C1014 + C42870 * C1021 + C42874 * C1430 +
                      C42871 * C1440 + C42875 * C2578 + C42872 * C2581) *
                         C48135) *
                        C48027 * C48278 * C3111) *
                       C48177)) /
                 (p * q * std::sqrt(p + q));
    d2ee[216] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C711 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C48358 -
                     (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                      C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                         C712 -
                     (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                      C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                         C48135) *
                        C48027 * C48278 * C2812 +
                    ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                      C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                         C712 -
                     ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                       C42871 * C547 + C42873 * C125 + C42870 * C137) *
                          C48358 +
                      (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                       C42871 * C527 + C42873 * C116 + C42870 * C124) *
                          C711) +
                     (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                      C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                         C48135) *
                        C48027 * C48278 * C48054) *
                       C48173 +
                   (((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                      C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                         C712 -
                     ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                       C42871 * C552 + C42873 * C533 + C42870 * C550) *
                          C48358 +
                      (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                       C42871 * C537 + C42873 * C520 + C42870 * C534) *
                          C711) +
                     (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                      C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                         C48135) *
                        C48027 * C48278 * C2812 +
                    ((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C711 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C48358 -
                     (C42875 * C2571 + C42872 * C2575 + C42874 * C1411 +
                      C42871 * C1425 + C42873 * C1005 + C42870 * C1011) *
                         C712 -
                     (C42875 * C2576 + C42872 * C2580 + C42874 * C1426 +
                      C42871 * C1438 + C42873 * C1012 + C42870 * C1020) *
                         C48135) *
                        C48027 * C48278 * C48054) *
                       C48180 +
                   (((C42873 * C522 + C42870 * C537 + C42874 * C2158 +
                      C42871 * C2167 + C42875 * C2159 + C42872 * C2168) *
                         C711 +
                     (C42873 * C538 + C42870 * C552 + C42874 * C2166 +
                      C42871 * C2176 + C42875 * C2169 + C42872 * C2177) *
                         C48358 -
                     (C42875 * C7164 + C42872 * C7166 + C42874 * C2570 +
                      C42871 * C2573 + C42873 * C1409 + C42870 * C1421) *
                         C712 -
                     (C42875 * C7167 + C42872 * C7170 + C42874 * C2574 +
                      C42871 * C2579 + C42873 * C1422 + C42870 * C1436) *
                         C48135) *
                        C48027 * C48278 * C2812 +
                    ((C42873 * C1411 + C42870 * C1425 + C42874 * C2571 +
                      C42871 * C2575 + C42875 * C7165 + C42872 * C7168) *
                         C712 -
                     ((C42875 * C2171 + C42872 * C2178 + C42874 * C2164 +
                       C42871 * C2175 + C42873 * C540 + C42870 * C553) *
                          C48358 +
                      (C42875 * C2160 + C42872 * C2170 + C42874 * C2157 +
                       C42871 * C2165 + C42873 * C523 + C42870 * C539) *
                          C711) +
                     (C42873 * C1426 + C42870 * C1438 + C42874 * C2576 +
                      C42871 * C2580 + C42875 * C7169 + C42872 * C7171) *
                         C48135) *
                        C48027 * C48278 * C48054) *
                       C4067)) /
                 (p * q * std::sqrt(p + q));
    d2ee[217] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C302 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C48429 -
                     (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                      C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                         C303 -
                     (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                      C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                         C48417 +
                     (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                      C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                         C304 +
                     (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                      C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                         C48390) *
                        C48027 * C48278 * C2812 +
                    ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                      C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                         C303 -
                     ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                       C42871 * C547 + C42873 * C125 + C42870 * C137) *
                          C48429 +
                      (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                       C42871 * C527 + C42873 * C116 + C42870 * C124) *
                          C302) +
                     (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                      C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                         C48417 -
                     (C42875 * C1412 + C42872 * C1427 + C42874 * C1407 +
                      C42871 * C1417 + C42873 * C308 + C42870 * C321) *
                         C304 -
                     (C42875 * C1428 + C42872 * C1439 + C42874 * C1418 +
                      C42871 * C1434 + C42873 * C322 + C42870 * C338) *
                         C48390) *
                        C48027 * C48278 * C48054) *
                       C3547 +
                   (((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                      C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                         C303 -
                     ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                       C42871 * C552 + C42873 * C533 + C42870 * C550) *
                          C48429 +
                      (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                       C42871 * C537 + C42873 * C520 + C42870 * C534) *
                          C302) +
                     (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                      C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                         C48417 -
                     (C42875 * C7638 + C42872 * C7640 + C42874 * C1410 +
                      C42871 * C1423 + C42873 * C1406 + C42870 * C1415) *
                         C304 -
                     (C42875 * C7641 + C42872 * C7644 + C42874 * C1424 +
                      C42871 * C1437 + C42873 * C1416 + C42870 * C1433) *
                         C48390) *
                        C48027 * C48278 * C2812 +
                    ((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C302 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C48429 -
                     (C42875 * C2571 + C42872 * C2575 + C42874 * C1411 +
                      C42871 * C1425 + C42873 * C1005 + C42870 * C1011) *
                         C303 -
                     (C42875 * C2576 + C42872 * C2580 + C42874 * C1426 +
                      C42871 * C1438 + C42873 * C1012 + C42870 * C1020) *
                         C48417 +
                     (C42873 * C1407 + C42870 * C1417 + C42874 * C1412 +
                      C42871 * C1427 + C42875 * C7639 + C42872 * C7642) *
                         C304 +
                     (C42873 * C1418 + C42870 * C1434 + C42874 * C1428 +
                      C42871 * C1439 + C42875 * C7643 + C42872 * C7645) *
                         C48390) *
                        C48027 * C48278 * C48054) *
                       C48177)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C114 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C48072) *
                        C48027 * C48278 * C48435 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C48072 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C114) *
                        C48027 * C48278 * C48428 +
                    ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                      C42871 * C529 + C42875 * C524 + C42872 * C541) *
                         C114 +
                     (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                      C42871 * C548 + C42875 * C542 + C42872 * C554) *
                         C48072) *
                        C48027 * C48278 * C48415 -
                    ((C42875 * C543 + C42872 * C555 + C42874 * C532 +
                      C42871 * C549 + C42873 * C128 + C42870 * C139) *
                         C48072 +
                     (C42875 * C525 + C42872 * C544 + C42874 * C519 +
                      C42871 * C531 + C42873 * C118 + C42870 * C129) *
                         C114) *
                        C48027 * C48278 * C48394) *
                       C3547 +
                   (((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C114 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C48072) *
                        C48027 * C48278 * C48428 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C48072 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C114) *
                        C48027 * C48278 * C48435 -
                    ((C42875 * C2162 + C42872 * C2174 + C42874 * C542 +
                      C42871 * C554 + C42873 * C530 + C42870 * C548) *
                         C48072 +
                     (C42875 * C2156 + C42872 * C2163 + C42874 * C524 +
                      C42871 * C541 + C42873 * C518 + C42870 * C529) *
                         C114) *
                        C48027 * C48278 * C48415 +
                    ((C42873 * C519 + C42870 * C531 + C42874 * C525 +
                      C42871 * C544 + C42875 * C2452 + C42872 * C2453) *
                         C114 +
                     (C42873 * C532 + C42870 * C549 + C42874 * C543 +
                      C42871 * C555 + C42875 * C2454 + C42872 * C2455) *
                         C48072) *
                        C48027 * C48278 * C48394) *
                       C48177)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C114 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C48072) *
                        C48027 * C48278 * C2812 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C48072 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C114) *
                        C48027 * C48278 * C48054) *
                       C48437 +
                   (((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C114 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C48072) *
                        C48027 * C48278 * C48054 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C48072 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C114) *
                        C48027 * C48278 * C2812) *
                       C48434 +
                   (((C42873 * C522 + C42870 * C537 + C42874 * C2158 +
                      C42871 * C2167 + C42875 * C2159 + C42872 * C2168) *
                         C114 +
                     (C42873 * C538 + C42870 * C552 + C42874 * C2166 +
                      C42871 * C2176 + C42875 * C2169 + C42872 * C2177) *
                         C48072) *
                        C48027 * C48278 * C2812 -
                    ((C42875 * C2171 + C42872 * C2178 + C42874 * C2164 +
                      C42871 * C2175 + C42873 * C540 + C42870 * C553) *
                         C48072 +
                     (C42875 * C2160 + C42872 * C2170 + C42874 * C2157 +
                      C42871 * C2165 + C42873 * C523 + C42870 * C539) *
                         C114) *
                        C48027 * C48278 * C48054) *
                       C48425 +
                   (((C42873 * C2157 + C42870 * C2165 + C42874 * C2160 +
                      C42871 * C2170 + C42875 * C12923 + C42872 * C12926) *
                         C114 +
                     (C42873 * C2164 + C42870 * C2175 + C42874 * C2171 +
                      C42871 * C2178 + C42875 * C12927 + C42872 * C12929) *
                         C48072) *
                        C48027 * C48278 * C48054 -
                    ((C42875 * C12925 + C42872 * C12928 + C42874 * C2169 +
                      C42871 * C2177 + C42873 * C2166 + C42870 * C2176) *
                         C48072 +
                     (C42875 * C12922 + C42872 * C12924 + C42874 * C2159 +
                      C42871 * C2168 + C42873 * C2158 + C42870 * C2167) *
                         C114) *
                        C48027 * C48278 * C2812) *
                       C48406)) /
                     (p * q * std::sqrt(p + q));
    d2ee[218] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C114 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C48072) *
                        C48027 * C48278 * C48049 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C48072 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C114) *
                        C48027 * C48278 * C48057 +
                    ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                      C42871 * C529 + C42875 * C524 + C42872 * C541) *
                         C114 +
                     (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                      C42871 * C548 + C42875 * C542 + C42872 * C554) *
                         C48072) *
                        C48027 * C48278 * C3111) *
                       C48173 +
                   (((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C114 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C48072) *
                        C48027 * C48278 * C48057 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C48072 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C114) *
                        C48027 * C48278 * C48049 -
                    ((C42875 * C2162 + C42872 * C2174 + C42874 * C542 +
                      C42871 * C554 + C42873 * C530 + C42870 * C548) *
                         C48072 +
                     (C42875 * C2156 + C42872 * C2163 + C42874 * C524 +
                      C42871 * C541 + C42873 * C518 + C42870 * C529) *
                         C114) *
                        C48027 * C48278 * C3111) *
                       C48180 +
                   (((C42873 * C522 + C42870 * C537 + C42874 * C2158 +
                      C42871 * C2167 + C42875 * C2159 + C42872 * C2168) *
                         C114 +
                     (C42873 * C538 + C42870 * C552 + C42874 * C2166 +
                      C42871 * C2176 + C42875 * C2169 + C42872 * C2177) *
                         C48072) *
                        C48027 * C48278 * C48049 -
                    ((C42875 * C2171 + C42872 * C2178 + C42874 * C2164 +
                      C42871 * C2175 + C42873 * C540 + C42870 * C553) *
                         C48072 +
                     (C42875 * C2160 + C42872 * C2170 + C42874 * C2157 +
                      C42871 * C2165 + C42873 * C523 + C42870 * C539) *
                         C114) *
                        C48027 * C48278 * C48057 +
                    ((C42873 * C524 + C42870 * C541 + C42874 * C2156 +
                      C42871 * C2163 + C42875 * C2161 + C42872 * C2172) *
                         C114 +
                     (C42873 * C542 + C42870 * C554 + C42874 * C2162 +
                      C42871 * C2174 + C42875 * C2173 + C42872 * C2179) *
                         C48072) *
                        C48027 * C48278 * C3111) *
                       C4067)) /
                 (p * q * std::sqrt(p + q));
    d2ee[219] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C114 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C48072) *
                        C48027 * C48278 * C48435 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C48072 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C114) *
                        C48027 * C48278 * C48428 +
                    ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                      C42871 * C529 + C42875 * C524 + C42872 * C541) *
                         C114 +
                     (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                      C42871 * C548 + C42875 * C542 + C42872 * C554) *
                         C48072) *
                        C48027 * C48278 * C48415 -
                    ((C42875 * C543 + C42872 * C555 + C42874 * C532 +
                      C42871 * C549 + C42873 * C128 + C42870 * C139) *
                         C48072 +
                     (C42875 * C525 + C42872 * C544 + C42874 * C519 +
                      C42871 * C531 + C42873 * C118 + C42870 * C129) *
                         C114) *
                        C48027 * C48278 * C48394) *
                       C3547 +
                   (((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C114 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C48072) *
                        C48027 * C48278 * C48428 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C48072 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C114) *
                        C48027 * C48278 * C48435 -
                    ((C42875 * C2162 + C42872 * C2174 + C42874 * C542 +
                      C42871 * C554 + C42873 * C530 + C42870 * C548) *
                         C48072 +
                     (C42875 * C2156 + C42872 * C2163 + C42874 * C524 +
                      C42871 * C541 + C42873 * C518 + C42870 * C529) *
                         C114) *
                        C48027 * C48278 * C48415 +
                    ((C42873 * C519 + C42870 * C531 + C42874 * C525 +
                      C42871 * C544 + C42875 * C2452 + C42872 * C2453) *
                         C114 +
                     (C42873 * C532 + C42870 * C549 + C42874 * C543 +
                      C42871 * C555 + C42875 * C2454 + C42872 * C2455) *
                         C48072) *
                        C48027 * C48278 * C48394) *
                       C48177)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C302 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C48429 -
                     (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                      C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                         C303 -
                     (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                      C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                         C48417 +
                     (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                      C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                         C304 +
                     (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                      C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                         C48390) *
                        C48027 * C48278 * C2812 +
                    ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                      C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                         C303 -
                     ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                       C42871 * C547 + C42873 * C125 + C42870 * C137) *
                          C48429 +
                      (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                       C42871 * C527 + C42873 * C116 + C42870 * C124) *
                          C302) +
                     (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                      C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                         C48417 -
                     (C42875 * C1412 + C42872 * C1427 + C42874 * C1407 +
                      C42871 * C1417 + C42873 * C308 + C42870 * C321) *
                         C304 -
                     (C42875 * C1428 + C42872 * C1439 + C42874 * C1418 +
                      C42871 * C1434 + C42873 * C322 + C42870 * C338) *
                         C48390) *
                        C48027 * C48278 * C48054) *
                       C3547 +
                   (((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                      C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                         C303 -
                     ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                       C42871 * C552 + C42873 * C533 + C42870 * C550) *
                          C48429 +
                      (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                       C42871 * C537 + C42873 * C520 + C42870 * C534) *
                          C302) +
                     (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                      C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                         C48417 -
                     (C42875 * C7638 + C42872 * C7640 + C42874 * C1410 +
                      C42871 * C1423 + C42873 * C1406 + C42870 * C1415) *
                         C304 -
                     (C42875 * C7641 + C42872 * C7644 + C42874 * C1424 +
                      C42871 * C1437 + C42873 * C1416 + C42870 * C1433) *
                         C48390) *
                        C48027 * C48278 * C2812 +
                    ((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C302 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C48429 -
                     (C42875 * C2571 + C42872 * C2575 + C42874 * C1411 +
                      C42871 * C1425 + C42873 * C1005 + C42870 * C1011) *
                         C303 -
                     (C42875 * C2576 + C42872 * C2580 + C42874 * C1426 +
                      C42871 * C1438 + C42873 * C1012 + C42870 * C1020) *
                         C48417 +
                     (C42873 * C1407 + C42870 * C1417 + C42874 * C1412 +
                      C42871 * C1427 + C42875 * C7639 + C42872 * C7642) *
                         C304 +
                     (C42873 * C1418 + C42870 * C1434 + C42874 * C1428 +
                      C42871 * C1439 + C42875 * C7643 + C42872 * C7645) *
                         C48390) *
                        C48027 * C48278 * C48054) *
                       C48177)) /
                     (p * q * std::sqrt(p + q));
    d2ee[220] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C711 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C48358 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C712 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C48135) *
                       C48027 * C48278 * C707 +
                   ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                     C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                        C712 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C48358 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C711) +
                    (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                     C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                        C48135) *
                       C48027 * C48278 * C708 +
                   ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                     C42871 * C529 + C42875 * C524 + C42872 * C541) *
                        C711 +
                    (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                     C42871 * C548 + C42875 * C542 + C42872 * C554) *
                        C48358 -
                    (C42875 * C1413 + C42872 * C1429 + C42874 * C1006 +
                     C42871 * C1013 + C42873 * C309 + C42870 * C323) *
                        C712 -
                    (C42875 * C1430 + C42872 * C1440 + C42874 * C1014 +
                     C42871 * C1021 + C42873 * C324 + C42870 * C339) *
                        C48135) *
                       C48027 * C48278 * C709 +
                   ((C42873 * C311 + C42870 * C327 + C42874 * C1007 +
                     C42871 * C1015 + C42875 * C2326 + C42872 * C2327) *
                        C712 -
                    ((C42875 * C543 + C42872 * C555 + C42874 * C532 +
                      C42871 * C549 + C42873 * C128 + C42870 * C139) *
                         C48358 +
                     (C42875 * C525 + C42872 * C544 + C42874 * C519 +
                      C42871 * C531 + C42873 * C118 + C42870 * C129) *
                         C711) +
                    (C42873 * C328 + C42870 * C341 + C42874 * C1016 +
                     C42871 * C1022 + C42875 * C2328 + C42872 * C2329) *
                        C48135) *
                       C48027 * C48278 * C48394) *
                  C48090) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C1546 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C1540 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C1547 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C1541 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C1548 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C1542 -
                    (C42875 * C6270 + C42872 * C6272 + C42874 * C1854 +
                     C42871 * C1857 + C42873 * C1272 + C42870 * C1278) *
                        C1549 -
                    (C42875 * C6273 + C42872 * C6276 + C42874 * C1858 +
                     C42871 * C1863 + C42873 * C1279 + C42870 * C1290) *
                        C48400) *
                       C48027 * C48278 * C48344 +
                   ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                     C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                        C1547 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C1540 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C1546) +
                    (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                     C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                        C1541 -
                    (C42875 * C1412 + C42872 * C1427 + C42874 * C1407 +
                     C42871 * C1417 + C42873 * C308 + C42870 * C321) *
                        C1548 -
                    (C42875 * C1428 + C42872 * C1439 + C42874 * C1418 +
                     C42871 * C1434 + C42873 * C322 + C42870 * C338) *
                        C1542 +
                    (C42873 * C1274 + C42870 * C1282 + C42874 * C1855 +
                     C42871 * C1859 + C42875 * C6271 + C42872 * C6274) *
                        C1549 +
                    (C42873 * C1283 + C42870 * C1292 + C42874 * C1860 +
                     C42871 * C1864 + C42875 * C6275 + C42872 * C6277) *
                        C48400) *
                       C48027 * C48278 * C48054) *
                  C48090) /
                     (p * q * std::sqrt(p + q));
    d2ee[221] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C711 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C48358 -
                     (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                      C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                         C712 -
                     (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                      C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                         C48135) *
                        C48027 * C48278 * C299 +
                    ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                      C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                         C712 -
                     ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                       C42871 * C547 + C42873 * C125 + C42870 * C137) *
                          C48358 +
                      (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                       C42871 * C527 + C42873 * C116 + C42870 * C124) *
                          C711) +
                     (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                      C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                         C48135) *
                        C48027 * C48278 * C300 +
                    ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                      C42871 * C529 + C42875 * C524 + C42872 * C541) *
                         C711 +
                     (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                      C42871 * C548 + C42875 * C542 + C42872 * C554) *
                         C48358 -
                     (C42875 * C1413 + C42872 * C1429 + C42874 * C1006 +
                      C42871 * C1013 + C42873 * C309 + C42870 * C323) *
                         C712 -
                     (C42875 * C1430 + C42872 * C1440 + C42874 * C1014 +
                      C42871 * C1021 + C42873 * C324 + C42870 * C339) *
                         C48135) *
                        C48027 * C48278 * C48384) *
                       C48359 +
                   (((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                      C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                         C712 -
                     ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                       C42871 * C552 + C42873 * C533 + C42870 * C550) *
                          C48358 +
                      (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                       C42871 * C537 + C42873 * C520 + C42870 * C534) *
                          C711) +
                     (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                      C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                         C48135) *
                        C48027 * C48278 * C299 +
                    ((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C711 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C48358 -
                     (C42875 * C2571 + C42872 * C2575 + C42874 * C1411 +
                      C42871 * C1425 + C42873 * C1005 + C42870 * C1011) *
                         C712 -
                     (C42875 * C2576 + C42872 * C2580 + C42874 * C1426 +
                      C42871 * C1438 + C42873 * C1012 + C42870 * C1020) *
                         C48135) *
                        C48027 * C48278 * C300 +
                    ((C42873 * C1006 + C42870 * C1013 + C42874 * C1413 +
                      C42871 * C1429 + C42875 * C2572 + C42872 * C2577) *
                         C712 -
                     ((C42875 * C2162 + C42872 * C2174 + C42874 * C542 +
                       C42871 * C554 + C42873 * C530 + C42870 * C548) *
                          C48358 +
                      (C42875 * C2156 + C42872 * C2163 + C42874 * C524 +
                       C42871 * C541 + C42873 * C518 + C42870 * C529) *
                          C711) +
                     (C42873 * C1014 + C42870 * C1021 + C42874 * C1430 +
                      C42871 * C1440 + C42875 * C2578 + C42872 * C2581) *
                         C48135) *
                        C48027 * C48278 * C48384) *
                       C48177)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C1546 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C1540 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C1547 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C1541 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C1548 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C1542 -
                    (C42875 * C6270 + C42872 * C6272 + C42874 * C1854 +
                     C42871 * C1857 + C42873 * C1272 + C42870 * C1278) *
                        C1549 -
                    (C42875 * C6273 + C42872 * C6276 + C42874 * C1858 +
                     C42871 * C1863 + C42873 * C1279 + C42870 * C1290) *
                        C48400) *
                       C48027 * C48278 * C48044 * C48359 +
                   ((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                     C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                        C1547 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C1540 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C1546) +
                    (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                     C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                        C1541 -
                    (C42875 * C7638 + C42872 * C7640 + C42874 * C1410 +
                     C42871 * C1423 + C42873 * C1406 + C42870 * C1415) *
                        C1548 -
                    (C42875 * C7641 + C42872 * C7644 + C42874 * C1424 +
                     C42871 * C1437 + C42873 * C1416 + C42870 * C1433) *
                        C1542 +
                    (C42873 * C1854 + C42870 * C1857 + C42874 * C6270 +
                     C42871 * C6272 + C42875 * C23734 + C42872 * C23735) *
                        C1549 +
                    (C42873 * C1858 + C42870 * C1863 + C42874 * C6273 +
                     C42871 * C6276 + C42875 * C23736 + C42872 * C23737) *
                        C48400) *
                       C48027 * C48278 * C48044 * C48177)) /
                     (p * q * std::sqrt(p + q));
    d2ee[222] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C302 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C48429 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C303 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C48417 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C304 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C48390) *
                       C48027 * C48278 * C299 +
                   ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                     C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                        C303 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C48429 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C302) +
                    (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                     C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                        C48417 -
                    (C42875 * C1412 + C42872 * C1427 + C42874 * C1407 +
                     C42871 * C1417 + C42873 * C308 + C42870 * C321) *
                        C304 -
                    (C42875 * C1428 + C42872 * C1439 + C42874 * C1418 +
                     C42871 * C1434 + C42873 * C322 + C42870 * C338) *
                        C48390) *
                       C48027 * C48278 * C300 +
                   ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                     C42871 * C529 + C42875 * C524 + C42872 * C541) *
                        C302 +
                    (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                     C42871 * C548 + C42875 * C542 + C42872 * C554) *
                        C48429 -
                    (C42875 * C1413 + C42872 * C1429 + C42874 * C1006 +
                     C42871 * C1013 + C42873 * C309 + C42870 * C323) *
                        C303 -
                    (C42875 * C1430 + C42872 * C1440 + C42874 * C1014 +
                     C42871 * C1021 + C42873 * C324 + C42870 * C339) *
                        C48417 +
                    (C42873 * C310 + C42870 * C325 + C42874 * C1408 +
                     C42871 * C1419 + C42875 * C1414 + C42872 * C1431) *
                        C304 +
                    (C42873 * C326 + C42870 * C340 + C42874 * C1420 +
                     C42871 * C1435 + C42875 * C1432 + C42872 * C1441) *
                        C48390) *
                       C48027 * C48278 * C48384) *
                  C48090) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C114 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C48072) *
                       C48027 * C48278 * C107 -
                   ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                     C42871 * C547 + C42873 * C125 + C42870 * C137) *
                        C48072 +
                    (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                     C42871 * C527 + C42873 * C116 + C42870 * C124) *
                        C114) *
                       C48027 * C48278 * C108 +
                   ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                     C42871 * C529 + C42875 * C524 + C42872 * C541) *
                        C114 +
                    (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                     C42871 * C548 + C42875 * C542 + C42872 * C554) *
                        C48072) *
                       C48027 * C48278 * C109 -
                   ((C42875 * C543 + C42872 * C555 + C42874 * C532 +
                     C42871 * C549 + C42873 * C128 + C42870 * C139) *
                        C48072 +
                    (C42875 * C525 + C42872 * C544 + C42874 * C519 +
                     C42871 * C531 + C42873 * C118 + C42870 * C129) *
                        C114) *
                       C48027 * C48278 * C110 +
                   ((C42873 * C119 + C42870 * C130 + C42874 * C521 +
                     C42871 * C536 + C42875 * C526 + C42872 * C545) *
                        C114 +
                    (C42873 * C131 + C42870 * C140 + C42874 * C535 +
                     C42871 * C551 + C42875 * C546 + C42872 * C556) *
                        C48072) *
                       C48027 * C48278 * C111) *
                  C48090) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C114 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C48072) *
                        C48027 * C48278 * C299 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C48072 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C114) *
                        C48027 * C48278 * C300 +
                    ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                      C42871 * C529 + C42875 * C524 + C42872 * C541) *
                         C114 +
                     (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                      C42871 * C548 + C42875 * C542 + C42872 * C554) *
                         C48072) *
                        C48027 * C48278 * C48384) *
                       C48430 +
                   (((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C114 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C48072) *
                        C48027 * C48278 * C300 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C48072 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C114) *
                        C48027 * C48278 * C299 -
                    ((C42875 * C2162 + C42872 * C2174 + C42874 * C542 +
                      C42871 * C554 + C42873 * C530 + C42870 * C548) *
                         C48072 +
                     (C42875 * C2156 + C42872 * C2163 + C42874 * C524 +
                      C42871 * C541 + C42873 * C518 + C42870 * C529) *
                         C114) *
                        C48027 * C48278 * C48384) *
                       C48419 +
                   (((C42873 * C522 + C42870 * C537 + C42874 * C2158 +
                      C42871 * C2167 + C42875 * C2159 + C42872 * C2168) *
                         C114 +
                     (C42873 * C538 + C42870 * C552 + C42874 * C2166 +
                      C42871 * C2176 + C42875 * C2169 + C42872 * C2177) *
                         C48072) *
                        C48027 * C48278 * C299 -
                    ((C42875 * C2171 + C42872 * C2178 + C42874 * C2164 +
                      C42871 * C2175 + C42873 * C540 + C42870 * C553) *
                         C48072 +
                     (C42875 * C2160 + C42872 * C2170 + C42874 * C2157 +
                      C42871 * C2165 + C42873 * C523 + C42870 * C539) *
                         C114) *
                        C48027 * C48278 * C300 +
                    ((C42873 * C524 + C42870 * C541 + C42874 * C2156 +
                      C42871 * C2163 + C42875 * C2161 + C42872 * C2172) *
                         C114 +
                     (C42873 * C542 + C42870 * C554 + C42874 * C2162 +
                      C42871 * C2174 + C42875 * C2173 + C42872 * C2179) *
                         C48072) *
                        C48027 * C48278 * C48384) *
                       C48393)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C1173 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C1167 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C1174 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C1168 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C1175 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C48390) *
                       C48027 * C48278 * C48426 +
                   ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                     C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                        C1174 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C1167 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C1173) +
                    (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                     C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                        C1168 -
                    (C42875 * C1412 + C42872 * C1427 + C42874 * C1407 +
                     C42871 * C1417 + C42873 * C308 + C42870 * C321) *
                        C1175 -
                    (C42875 * C1428 + C42872 * C1439 + C42874 * C1418 +
                     C42871 * C1434 + C42873 * C322 + C42870 * C338) *
                        C48390) *
                       C48027 * C48278 * C48413 +
                   ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                     C42871 * C529 + C42875 * C524 + C42872 * C541) *
                        C1173 +
                    (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                     C42871 * C548 + C42875 * C542 + C42872 * C554) *
                        C1167 -
                    (C42875 * C1413 + C42872 * C1429 + C42874 * C1006 +
                     C42871 * C1013 + C42873 * C309 + C42870 * C323) *
                        C1174 -
                    (C42875 * C1430 + C42872 * C1440 + C42874 * C1014 +
                     C42871 * C1021 + C42873 * C324 + C42870 * C339) *
                        C1168 +
                    (C42873 * C310 + C42870 * C325 + C42874 * C1408 +
                     C42871 * C1419 + C42875 * C1414 + C42872 * C1431) *
                        C1175 +
                    (C42873 * C326 + C42870 * C340 + C42874 * C1420 +
                     C42871 * C1435 + C42875 * C1432 + C42872 * C1441) *
                        C48390) *
                       C48027 * C48278 * C48384) *
                  C48090) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                    C42871 * C534 + C42875 * C522 + C42872 * C537) *
                       C1267 +
                   (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                    C42871 * C550 + C42875 * C538 + C42872 * C552) *
                       C1261 -
                   (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                    C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                       C1268 -
                   (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                    C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                       C1262 +
                   (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                    C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                       C1269 +
                   (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                    C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                       C1263 -
                   (C42875 * C6270 + C42872 * C6272 + C42874 * C1854 +
                    C42871 * C1857 + C42873 * C1272 + C42870 * C1278) *
                       C1270 -
                   (C42875 * C6273 + C42872 * C6276 + C42874 * C1858 +
                    C42871 * C1863 + C42873 * C1279 + C42870 * C1290) *
                       C1264 +
                   (C42873 * C1273 + C42870 * C1280 + C42874 * C6776 +
                    C42871 * C6778 + C42875 * C22744 + C42872 * C22745) *
                       C1271 +
                   (C42873 * C1281 + C42870 * C1291 + C42874 * C6779 +
                    C42871 * C6782 + C42875 * C22746 + C42872 * C22747) *
                       C1265) *
                  C48027 * C48278 * C48044 * C48090) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C1173 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C1167 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C1174 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C1168 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C1175 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C48390) *
                       C48027 * C48278 * C48044 * C48430 +
                   ((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                     C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                        C1174 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C1167 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C1173) +
                    (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                     C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                        C1168 -
                    (C42875 * C7638 + C42872 * C7640 + C42874 * C1410 +
                     C42871 * C1423 + C42873 * C1406 + C42870 * C1415) *
                        C1175 -
                    (C42875 * C7641 + C42872 * C7644 + C42874 * C1424 +
                     C42871 * C1437 + C42873 * C1416 + C42870 * C1433) *
                        C48390) *
                       C48027 * C48278 * C48044 * C48419 +
                   ((C42873 * C522 + C42870 * C537 + C42874 * C2158 +
                     C42871 * C2167 + C42875 * C2159 + C42872 * C2168) *
                        C1173 +
                    (C42873 * C538 + C42870 * C552 + C42874 * C2166 +
                     C42871 * C2176 + C42875 * C2169 + C42872 * C2177) *
                        C1167 -
                    (C42875 * C7164 + C42872 * C7166 + C42874 * C2570 +
                     C42871 * C2573 + C42873 * C1409 + C42870 * C1421) *
                        C1174 -
                    (C42875 * C7167 + C42872 * C7170 + C42874 * C2574 +
                     C42871 * C2579 + C42873 * C1422 + C42870 * C1436) *
                        C1168 +
                    (C42873 * C1410 + C42870 * C1423 + C42874 * C7638 +
                     C42871 * C7640 + C42875 * C23388 + C42872 * C23389) *
                        C1175 +
                    (C42873 * C1424 + C42870 * C1437 + C42874 * C7641 +
                     C42871 * C7644 + C42875 * C23390 + C42872 * C23391) *
                        C48390) *
                       C48027 * C48278 * C48044 * C48393)) /
                     (p * q * std::sqrt(p + q));
    d2ee[223] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C114 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C48072) *
                        C48027 * C48278 * C707 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C48072 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C114) *
                        C48027 * C48278 * C708 +
                    ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                      C42871 * C529 + C42875 * C524 + C42872 * C541) *
                         C114 +
                     (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                      C42871 * C548 + C42875 * C542 + C42872 * C554) *
                         C48072) *
                        C48027 * C48278 * C709 -
                    ((C42875 * C543 + C42872 * C555 + C42874 * C532 +
                      C42871 * C549 + C42873 * C128 + C42870 * C139) *
                         C48072 +
                     (C42875 * C525 + C42872 * C544 + C42874 * C519 +
                      C42871 * C531 + C42873 * C118 + C42870 * C129) *
                         C114) *
                        C48027 * C48278 * C48394) *
                       C48359 +
                   (((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C114 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C48072) *
                        C48027 * C48278 * C708 -
                    ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                      C42871 * C552 + C42873 * C533 + C42870 * C550) *
                         C48072 +
                     (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                      C42871 * C537 + C42873 * C520 + C42870 * C534) *
                         C114) *
                        C48027 * C48278 * C707 -
                    ((C42875 * C2162 + C42872 * C2174 + C42874 * C542 +
                      C42871 * C554 + C42873 * C530 + C42870 * C548) *
                         C48072 +
                     (C42875 * C2156 + C42872 * C2163 + C42874 * C524 +
                      C42871 * C541 + C42873 * C518 + C42870 * C529) *
                         C114) *
                        C48027 * C48278 * C709 +
                    ((C42873 * C519 + C42870 * C531 + C42874 * C525 +
                      C42871 * C544 + C42875 * C2452 + C42872 * C2453) *
                         C114 +
                     (C42873 * C532 + C42870 * C549 + C42874 * C543 +
                      C42871 * C555 + C42875 * C2454 + C42872 * C2455) *
                         C48072) *
                        C48027 * C48278 * C48394) *
                       C48177)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                      C42871 * C534 + C42875 * C522 + C42872 * C537) *
                         C1173 +
                     (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                      C42871 * C550 + C42875 * C538 + C42872 * C552) *
                         C1167 -
                     (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                      C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                         C1174 -
                     (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                      C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                         C1168 +
                     (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                      C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                         C1175 +
                     (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                      C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                         C48390) *
                        C48027 * C48278 * C48344 +
                    ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                      C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                         C1174 -
                     ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                       C42871 * C547 + C42873 * C125 + C42870 * C137) *
                          C1167 +
                      (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                       C42871 * C527 + C42873 * C116 + C42870 * C124) *
                          C1173) +
                     (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                      C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                         C1168 -
                     (C42875 * C1412 + C42872 * C1427 + C42874 * C1407 +
                      C42871 * C1417 + C42873 * C308 + C42870 * C321) *
                         C1175 -
                     (C42875 * C1428 + C42872 * C1439 + C42874 * C1418 +
                      C42871 * C1434 + C42873 * C322 + C42870 * C338) *
                         C48390) *
                        C48027 * C48278 * C48054) *
                       C48359 +
                   (((C42873 * C1004 + C42870 * C1009 + C42874 * C1409 +
                      C42871 * C1421 + C42875 * C2570 + C42872 * C2573) *
                         C1174 -
                     ((C42875 * C2166 + C42872 * C2176 + C42874 * C538 +
                       C42871 * C552 + C42873 * C533 + C42870 * C550) *
                          C1167 +
                      (C42875 * C2158 + C42872 * C2167 + C42874 * C522 +
                       C42871 * C537 + C42873 * C520 + C42870 * C534) *
                          C1173) +
                     (C42873 * C1010 + C42870 * C1019 + C42874 * C1422 +
                      C42871 * C1436 + C42875 * C2574 + C42872 * C2579) *
                         C1168 -
                     (C42875 * C7638 + C42872 * C7640 + C42874 * C1410 +
                      C42871 * C1423 + C42873 * C1406 + C42870 * C1415) *
                         C1175 -
                     (C42875 * C7641 + C42872 * C7644 + C42874 * C1424 +
                      C42871 * C1437 + C42873 * C1416 + C42870 * C1433) *
                         C48390) *
                        C48027 * C48278 * C48344 +
                    ((C42873 * C517 + C42870 * C527 + C42874 * C523 +
                      C42871 * C539 + C42875 * C2157 + C42872 * C2165) *
                         C1173 +
                     (C42873 * C528 + C42870 * C547 + C42874 * C540 +
                      C42871 * C553 + C42875 * C2164 + C42872 * C2175) *
                         C1167 -
                     (C42875 * C2571 + C42872 * C2575 + C42874 * C1411 +
                      C42871 * C1425 + C42873 * C1005 + C42870 * C1011) *
                         C1174 -
                     (C42875 * C2576 + C42872 * C2580 + C42874 * C1426 +
                      C42871 * C1438 + C42873 * C1012 + C42870 * C1020) *
                         C1168 +
                     (C42873 * C1407 + C42870 * C1417 + C42874 * C1412 +
                      C42871 * C1427 + C42875 * C7639 + C42872 * C7642) *
                         C1175 +
                     (C42873 * C1418 + C42870 * C1434 + C42874 * C1428 +
                      C42871 * C1439 + C42875 * C7643 + C42872 * C7645) *
                         C48390) *
                        C48027 * C48278 * C48054) *
                       C48177)) /
                     (p * q * std::sqrt(p + q));
    d2ee[224] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C114 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C48072) *
                       C48027 * C48278 * C107 -
                   ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                     C42871 * C547 + C42873 * C125 + C42870 * C137) *
                        C48072 +
                    (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                     C42871 * C527 + C42873 * C116 + C42870 * C124) *
                        C114) *
                       C48027 * C48278 * C108 +
                   ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                     C42871 * C529 + C42875 * C524 + C42872 * C541) *
                        C114 +
                    (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                     C42871 * C548 + C42875 * C542 + C42872 * C554) *
                        C48072) *
                       C48027 * C48278 * C109 -
                   ((C42875 * C543 + C42872 * C555 + C42874 * C532 +
                     C42871 * C549 + C42873 * C128 + C42870 * C139) *
                        C48072 +
                    (C42875 * C525 + C42872 * C544 + C42874 * C519 +
                     C42871 * C531 + C42873 * C118 + C42870 * C129) *
                        C114) *
                       C48027 * C48278 * C110 +
                   ((C42873 * C119 + C42870 * C130 + C42874 * C521 +
                     C42871 * C536 + C42875 * C526 + C42872 * C545) *
                        C114 +
                    (C42873 * C131 + C42870 * C140 + C42874 * C535 +
                     C42871 * C551 + C42875 * C546 + C42872 * C556) *
                        C48072) *
                       C48027 * C48278 * C111) *
                  C48090) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C302 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C48429 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C303 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C48417 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C304 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C48390) *
                       C48027 * C48278 * C299 +
                   ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                     C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                        C303 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C48429 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C302) +
                    (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                     C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                        C48417 -
                    (C42875 * C1412 + C42872 * C1427 + C42874 * C1407 +
                     C42871 * C1417 + C42873 * C308 + C42870 * C321) *
                        C304 -
                    (C42875 * C1428 + C42872 * C1439 + C42874 * C1418 +
                     C42871 * C1434 + C42873 * C322 + C42870 * C338) *
                        C48390) *
                       C48027 * C48278 * C300 +
                   ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                     C42871 * C529 + C42875 * C524 + C42872 * C541) *
                        C302 +
                    (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                     C42871 * C548 + C42875 * C542 + C42872 * C554) *
                        C48429 -
                    (C42875 * C1413 + C42872 * C1429 + C42874 * C1006 +
                     C42871 * C1013 + C42873 * C309 + C42870 * C323) *
                        C303 -
                    (C42875 * C1430 + C42872 * C1440 + C42874 * C1014 +
                     C42871 * C1021 + C42873 * C324 + C42870 * C339) *
                        C48417 +
                    (C42873 * C310 + C42870 * C325 + C42874 * C1408 +
                     C42871 * C1419 + C42875 * C1414 + C42872 * C1431) *
                        C304 +
                    (C42873 * C326 + C42870 * C340 + C42874 * C1420 +
                     C42871 * C1435 + C42875 * C1432 + C42872 * C1441) *
                        C48390) *
                       C48027 * C48278 * C48384) *
                  C48090) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                     C42871 * C534 + C42875 * C522 + C42872 * C537) *
                        C1173 +
                    (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                     C42871 * C550 + C42875 * C538 + C42872 * C552) *
                        C1167 -
                    (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                     C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                        C1174 -
                    (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                     C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                        C1168 +
                    (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                     C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                        C1175 +
                    (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                     C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                        C48390) *
                       C48027 * C48278 * C48426 +
                   ((C42873 * C307 + C42870 * C319 + C42874 * C1005 +
                     C42871 * C1011 + C42875 * C1411 + C42872 * C1425) *
                        C1174 -
                    ((C42875 * C540 + C42872 * C553 + C42874 * C528 +
                      C42871 * C547 + C42873 * C125 + C42870 * C137) *
                         C1167 +
                     (C42875 * C523 + C42872 * C539 + C42874 * C517 +
                      C42871 * C527 + C42873 * C116 + C42870 * C124) *
                         C1173) +
                    (C42873 * C320 + C42870 * C337 + C42874 * C1012 +
                     C42871 * C1020 + C42875 * C1426 + C42872 * C1438) *
                        C1168 -
                    (C42875 * C1412 + C42872 * C1427 + C42874 * C1407 +
                     C42871 * C1417 + C42873 * C308 + C42870 * C321) *
                        C1175 -
                    (C42875 * C1428 + C42872 * C1439 + C42874 * C1418 +
                     C42871 * C1434 + C42873 * C322 + C42870 * C338) *
                        C48390) *
                       C48027 * C48278 * C48413 +
                   ((C42873 * C117 + C42870 * C126 + C42874 * C518 +
                     C42871 * C529 + C42875 * C524 + C42872 * C541) *
                        C1173 +
                    (C42873 * C127 + C42870 * C138 + C42874 * C530 +
                     C42871 * C548 + C42875 * C542 + C42872 * C554) *
                        C1167 -
                    (C42875 * C1413 + C42872 * C1429 + C42874 * C1006 +
                     C42871 * C1013 + C42873 * C309 + C42870 * C323) *
                        C1174 -
                    (C42875 * C1430 + C42872 * C1440 + C42874 * C1014 +
                     C42871 * C1021 + C42873 * C324 + C42870 * C339) *
                        C1168 +
                    (C42873 * C310 + C42870 * C325 + C42874 * C1408 +
                     C42871 * C1419 + C42875 * C1414 + C42872 * C1431) *
                        C1175 +
                    (C42873 * C326 + C42870 * C340 + C42874 * C1420 +
                     C42871 * C1435 + C42875 * C1432 + C42872 * C1441) *
                        C48390) *
                       C48027 * C48278 * C48384) *
                  C48090) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((C42873 * C115 + C42870 * C122 + C42874 * C520 +
                    C42871 * C534 + C42875 * C522 + C42872 * C537) *
                       C1267 +
                   (C42873 * C123 + C42870 * C136 + C42874 * C533 +
                    C42871 * C550 + C42875 * C538 + C42872 * C552) *
                       C1261 -
                   (C42875 * C1409 + C42872 * C1421 + C42874 * C1004 +
                    C42871 * C1009 + C42873 * C305 + C42870 * C315) *
                       C1268 -
                   (C42875 * C1422 + C42872 * C1436 + C42874 * C1010 +
                    C42871 * C1019 + C42873 * C316 + C42870 * C335) *
                       C1262 +
                   (C42873 * C306 + C42870 * C317 + C42874 * C1406 +
                    C42871 * C1415 + C42875 * C1410 + C42872 * C1423) *
                       C1269 +
                   (C42873 * C318 + C42870 * C336 + C42874 * C1416 +
                    C42871 * C1433 + C42875 * C1424 + C42872 * C1437) *
                       C1263 -
                   (C42875 * C6270 + C42872 * C6272 + C42874 * C1854 +
                    C42871 * C1857 + C42873 * C1272 + C42870 * C1278) *
                       C1270 -
                   (C42875 * C6273 + C42872 * C6276 + C42874 * C1858 +
                    C42871 * C1863 + C42873 * C1279 + C42870 * C1290) *
                       C1264 +
                   (C42873 * C1273 + C42870 * C1280 + C42874 * C6776 +
                    C42871 * C6778 + C42875 * C22744 + C42872 * C22745) *
                       C1271 +
                   (C42873 * C1281 + C42870 * C1291 + C42874 * C6779 +
                    C42871 * C6782 + C42875 * C22746 + C42872 * C22747) *
                       C1265) *
                  C48027 * C48278 * C48044 * C48090) /
                     (p * q * std::sqrt(p + q));
}
