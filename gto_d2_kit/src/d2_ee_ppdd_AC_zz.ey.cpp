/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "gto_d2_kit/d2_ee_ppdd_AC_zz.hpp"
#include <cmath>
/*

*/
#pragma GCC optimize("O0")
namespace {
    const double Pi = M_PI;
}
#pragma GCC optimize("O0")

void second_derivative_ee_1122_13_33(const double ae,
                                     const double xA,
                                     const double yA,
                                     const double zA,
                                     const double be,
                                     const double xB,
                                     const double yB,
                                     const double zB,
                                     const double ce,
                                     const double xC,
                                     const double yC,
                                     const double zC,
                                     const double de,
                                     const double xD,
                                     const double yD,
                                     const double zD,
                                     const double* const bs,
                                     double* const d2ee)
{
    const double p = ae + be;
    const double q = ce + de;
    const double xP = (ae * xA + be * xB) / p;
    const double yP = (ae * yA + be * yB) / p;
    const double zP = (ae * zA + be * zB) / p;
    const double xQ = (ce * xC + de * xD) / q;
    const double yQ = (ce * yC + de * yD) / q;
    const double zQ = (ce * zC + de * zD) / q;
    const double C47084 = ce * de;
    const double C47083 = ce + de;
    const double C47082 = 0 * de;
    const double C47081 = zC - zD;
    const double C47122 = 0 * ce;
    const double C47117 = 0 * de;
    const double C47116 = 0 * de;
    const double C47167 = 0 * de;
    const double C47208 = ae + be;
    const double C47207 = zA - zB;
    const double C47222 = ae * be;
    const double C47220 = 0 * be;
    const double C47233 = p + q;
    const double C47232 = p * q;
    const double C47241 = ae * ce;
    const double C47240 = zP - zQ;
    const double C47238 = bs[3];
    const double C47247 = bs[4];
    const double C47245 = xP - xQ;
    const double C47256 = bs[5];
    const double C47265 = bs[6];
    const double C47280 = bs[7];
    const double C47308 = bs[2];
    const double C47403 = yP - yQ;
    const double C115 = bs[0];
    const double C48326 = xA - xB;
    const double C48343 = xC - xD;
    const double C48372 = yC - yD;
    const double C48559 = yA - yB;
    const double C47085 = std::pow(C47083, 2);
    const double C47100 = 2 * C47083;
    const double C47118 = C47082 / C47083;
    const double C47086 = C47084 * C47081;
    const double C47119 = C47081 * C47082;
    const double C48390 = std::pow(C47081, 2);
    const double C48473 = C47081 * de;
    const double C48471 = C47081 * ce;
    const double C47129 = C47122 / C47083;
    const double C47124 = C47081 * C47117;
    const double C47168 = C47167 / C47083;
    const double C47221 = std::pow(C47208, 2);
    const double C47249 = C47083 * C47208;
    const double C48336 = 2 * C47208;
    const double C48593 = std::pow(C47207, 2);
    const double C48679 = C47207 * be;
    const double C48677 = C47207 * ae;
    const double C47224 = C47222 * C47207;
    const double C47234 = 2 * C47232;
    const double C47243 = std::pow(C47240, 2);
    const double C47312 = C47240 * ae;
    const double C47310 = C47240 * ce;
    const double C47258 = std::pow(C47245, 2);
    const double C47413 = std::pow(C47403, 2);
    const double C48327 = std::pow(C48326, 2);
    const double C48644 = C48326 * be;
    const double C48643 = C48326 * ae;
    const double C48346 = C48343 * de;
    const double C48345 = C48343 * ce;
    const double C48344 = std::pow(C48343, 2);
    const double C48373 = std::pow(C48372, 2);
    const double C48431 = C48372 * de;
    const double C48429 = C48372 * ce;
    const double C48578 = std::pow(C48559, 2);
    const double C48678 = C48559 * be;
    const double C48676 = C48559 * ae;
    const double C47087 = 2 * C47085;
    const double C48656 = 4 * C47085;
    const double C48358 = std::pow(C47100, -1);
    const double C48657 = C47085 * C47100;
    const double C48653 = std::pow(C47100, -2);
    const double C47127 = C47119 / C47083;
    const double C48391 = C48390 * C47084;
    const double C48660 = std::pow(C48471, 2);
    const double C47130 = C47124 / C47083;
    const double C47223 = 2 * C47221;
    const double C48645 = std::pow(C48336, -1);
    const double C48594 = C48593 * C47222;
    const double C47236 = C47234 / C47233;
    const double C136 =
        (-((std::pow(zP - zQ, 2) * bs[2] * std::pow(C47234 / C47233, 2) -
            (bs[1] * C47234) / C47233) *
           ae * ce) /
         C47083) /
        C47208;
    const double C116 = -(C47245 * bs[1] * C47234) / C47233;
    const double C304 = -(C47403 * bs[1] * C47234) / C47233;
    const double C508 = -(C47240 * bs[1] * C47234) / C47233;
    const double C47250 = C47243 * C47247;
    const double C47259 = C47243 * C47256;
    const double C47268 = C47243 * C47265;
    const double C47284 = C47243 * C47280;
    const double C47314 = C47238 * C47312;
    const double C47321 = C47247 * C47312;
    const double C47330 = C47256 * C47312;
    const double C47345 = C47265 * C47312;
    const double C47374 = C47280 * C47312;
    const double C122 = (-(bs[1] * C47312 * C47234) / C47233) / C47208;
    const double C47313 = C47238 * C47310;
    const double C47319 = C47247 * C47310;
    const double C47328 = C47256 * C47310;
    const double C47341 = C47265 * C47310;
    const double C47368 = C47280 * C47310;
    const double C123 = (bs[1] * C47310 * C47234) / (C47233 * C47083);
    const double C48328 = C48327 * C47222;
    const double C48646 = std::pow(C48345, 2);
    const double C48347 = C48344 * C47084;
    const double C48374 = C48373 * C47084;
    const double C48658 = std::pow(C48429, 2);
    const double C48579 = C48578 * C47222;
    const double C47121 = C47082 / C47087;
    const double C47126 = C47117 / C47087;
    const double C47125 = C47116 / C47087;
    const double C48690 = C47083 * C48656;
    const double C48691 = 4 * C48657;
    const double C47131 = 0 - C47127;
    const double C48392 = C48391 / C47083;
    const double C47134 = 0 - C47130;
    const double C48595 = C48594 / C47208;
    const double C47239 = -C47236;
    const double C47248 = std::pow(C47236, 4);
    const double C47266 = std::pow(C47236, 6);
    const double C47307 = std::pow(C47236, 2);
    const double C137 =
        (-((xP - xQ) *
           (bs[2] * std::pow(C47236, 2) +
            std::pow(zP - zQ, 2) * bs[3] * std::pow(-C47236, 3)) *
           ae * ce) /
         C47083) /
        C47208;
    const double C48329 = C48328 / C47208;
    const double C48348 = C48347 / C47083;
    const double C48375 = C48374 / C47083;
    const double C48580 = C48579 / C47208;
    const double C47135 = C47131 * ce;
    const double C48393 = -C48392;
    const double C47138 = C47134 * ce;
    const double C48596 = -C48595;
    const double C47242 = std::pow(C47239, 3);
    const double C47257 = std::pow(C47239, 5);
    const double C47281 = std::pow(C47239, 7);
    const double C47251 = C47250 * C47248;
    const double C47255 = C47247 * C47248;
    const double C47323 = C47248 * C47321;
    const double C47322 = C47248 * C47319;
    const double C47269 = C47268 * C47266;
    const double C47279 = C47265 * C47266;
    const double C47351 = C47266 * C47345;
    const double C47347 = C47266 * C47341;
    const double C47311 = C47308 * C47307;
    const double C124 = (C47245 * C47307 * C47308 * C47312) / C47208;
    const double C125 = -(C47245 * C47307 * C47308 * C47310) / C47083;
    const double C316 = -(C47403 * C47307 * C47308 * C47310) / C47083;
    const double C317 = (C47403 * C47307 * C47308 * C47312) / C47208;
    const double C518 = (C47240 * C47307 * C47308 * C47312) / C47208 -
                        (ae * bs[1] * C47234) / (C47233 * C47208);
    const double C519 = (ce * bs[1] * C47234) / (C47233 * C47083) -
                        (C47240 * C47307 * C47308 * C47310) / C47083;
    const double C48330 = -C48329;
    const double C48349 = -C48348;
    const double C48376 = -C48375;
    const double C48581 = -C48580;
    const double C47139 = C47135 / C47083;
    const double C48394 = std::exp(C48393);
    const double C47142 = C47138 / C47083;
    const double C48597 = std::exp(C48596);
    const double C47246 = C47238 * C47242;
    const double C47316 = C47242 * C47314;
    const double C47315 = C47242 * C47313;
    const double C138 =
        (-((C47238 * C47242 + C47243 * bs[4] * std::pow(C47236, 4)) * C47241 *
           std::pow(xP - xQ, 2)) /
         C47083) /
            C47208 -
        ((bs[2] * std::pow(C47236, 2) + C47243 * C47238 * C47242) * C47241) /
            (C47083 * C47208);
    const double C334 =
        (-((yP - yQ) *
           (bs[2] * std::pow(C47236, 2) + C47243 * C47238 * C47242) * C47241) /
         C47083) /
        C47208;
    const double C538 =
        (-(C47307 * C47308 * C47240 * ae * ce) / C47083) / C47208 -
        (ae * C47307 * C47308 * C47240 * ce) / C47249 -
        (C47240 * (C47308 * C47307 + C47243 * C47238 * C47242) * C47241) /
            C47249;
    const double C47260 = C47259 * C47257;
    const double C47264 = C47256 * C47257;
    const double C47333 = C47257 * C47330;
    const double C47331 = C47257 * C47328;
    const double C47286 = C47284 * C47281;
    const double C47381 = C47281 * C47374;
    const double C47377 = C47281 * C47368;
    const double C47329 = C47255 * C47258;
    const double C47342 = C47245 * C47255;
    const double C47431 = C47255 * C47413;
    const double C47474 = C47255 * ae;
    const double C47472 = C47255 * C47243;
    const double C47471 = C47240 * C47255;
    const double C47470 = C47255 * ce;
    const double C47580 = C47403 * C47255;
    const double C47325 = C47245 * C47323;
    const double C47419 = C47403 * C47323;
    const double C47461 = C47240 * C47323;
    const double C47466 = C47323 * ce;
    const double C47324 = C47245 * C47322;
    const double C47417 = C47403 * C47322;
    const double C47458 = C47240 * C47322;
    const double C47467 = ae * C47322;
    const double C47371 = C47279 * C47258;
    const double C47649 = C47245 * C47279;
    const double C47872 = C47279 * C47413;
    const double C47940 = C47403 * C47279;
    const double C48010 = C47279 * ae;
    const double C48004 = C47279 * C47243;
    const double C48003 = C47240 * C47279;
    const double C48002 = C47279 * ce;
    const double C47355 = C47351 * C47258;
    const double C47373 = C47245 * C47351;
    const double C47633 = C47351 * C47413;
    const double C47674 = C47403 * C47351;
    const double C47761 = C47240 * C47351;
    const double C47996 = C47351 * ce;
    const double C47353 = C47347 * C47258;
    const double C47367 = C47245 * C47347;
    const double C47629 = C47347 * C47413;
    const double C47672 = C47403 * C47347;
    const double C47755 = C47240 * C47347;
    const double C47997 = ae * C47347;
    const double C117 = C47311 * C47258 - (bs[1] * C47234) / C47233;
    const double C303 = C47403 * C47245 * C47311;
    const double C305 = C47311 * C47413 - (bs[1] * C47234) / C47233;
    const double C509 = C47311 * C47243 - (bs[1] * C47234) / C47233;
    const double C510 = C47240 * C47245 * C47311;
    const double C1004 = C47240 * C47403 * C47311;
    const double C48331 = std::exp(C48330);
    const double C48350 = std::exp(C48349);
    const double C48377 = std::exp(C48376);
    const double C48582 = std::exp(C48581);
    const double C47143 = C47139 - C47126;
    const double C47088 = C47086 * C48394;
    const double C114 = -(2 * ce * de * (zC - zD) * C48394) / (ce + de);
    const double C48472 = C48394 / C47100;
    const double C48474 = C48394 * C48471;
    const double C48481 = C48358 * C48394;
    const double C48670 = C48394 * C48473;
    const double C48697 = C48653 * C48394;
    const double C48695 = C48394 * C48660;
    const double C47146 = C47142 - C47125;
    const double C147 = C48597 * C137;
    const double C145 = C48597 * C124;
    const double C5192 = C48597 * C317;
    const double C47225 = C47224 * C48597;
    const double C113 = -(2 * ae * be * (zA - zB) * C48597) / (ae + be);
    const double C10815 =
        ((C48597 - (C47207 * 2 * ae * be * C47207 * C48597) / C47208) * ae) /
            C47208 -
        (0 * be) / (2 * std::pow(C47208, 2));
    const double C10816 =
        (0 * ae) / C47208 - (ae * be * C47207 * C48597) / std::pow(C47208, 2);
    const double C31780 =
        (-(0 * be) / C47208) / (2 * C47208) -
        ((C48597 - (C47207 * 2 * ae * be * C47207 * C48597) / C47208) * be) /
            C47208;
    const double C31781 =
        (-(2 * ae * be * C47207 * C48597) / C47208) / (2 * C47208) -
        (0 * be) / C47208;
    const double C48714 = C48645 * C48597;
    const double C48713 = C48597 * C48677;
    const double C31778 = -(C48597 * C48679) / C47208;
    const double C47252 = C47246 + C47251;
    const double C47320 = C47245 * C47246;
    const double C47418 = C47403 * C47246;
    const double C47462 = C47246 * ae;
    const double C47460 = C47240 * C47246;
    const double C47459 = C47246 * ce;
    const double C118 =
        2 * C47245 * C47311 + C47245 * (C47311 + C47246 * C47258);
    const double C302 = C47403 * (C47311 + C47246 * C47258);
    const double C512 = C47240 * (C47311 + C47246 * C47258);
    const double C1243 =
        2 * C47403 * C47311 + C47403 * (C47311 + C47246 * C47413);
    const double C1378 = C47240 * (C47311 + C47246 * C47413);
    const double C2136 =
        2 * C47240 * C47311 + C47240 * (C47311 + C47246 * C47243);
    const double C126 = (C47307 * C47308 * C47312 + C47316 * C47258) / C47208;
    const double C129 =
        (2 * C47245 * C47316 + C47245 * (C47316 + C47323 * C47258)) / C47208;
    const double C313 = (C47403 * (C47316 + C47323 * C47258)) / C47208;
    const double C315 = (C47403 * C47245 * C47316) / C47208;
    const double C318 = (C47307 * C47308 * C47312 + C47316 * C47413) / C47208;
    const double C520 =
        (C47307 * C47308 * C47312 + C47240 * (C47240 * C47316 + C47311 * ae) +
         C47240 * C47311 * ae) /
        C47208;
    const double C522 =
        (C47240 * C47245 * C47316 + C47245 * C47311 * ae) / C47208;
    const double C526 = (C47240 * (C47316 + C47323 * C47258) +
                         (C47311 + C47246 * C47258) * ae) /
                        C47208;
    const double C1009 =
        (C47240 * C47403 * C47316 + C47403 * C47311 * ae) / C47208;
    const double C1252 =
        (2 * C47403 * C47316 + C47403 * (C47316 + C47323 * C47413)) / C47208;
    const double C1390 = (C47240 * (C47316 + C47323 * C47413) +
                          (C47311 + C47246 * C47413) * ae) /
                         C47208;
    const double C127 = -(C47315 * C47258 + C47307 * C47308 * C47310) / C47083;
    const double C128 = (-2 * C47245 * C47315) / C47083 -
                        (C47245 * (C47322 * C47258 + C47315)) / C47083;
    const double C312 = -(C47403 * (C47322 * C47258 + C47315)) / C47083;
    const double C314 = -(C47403 * C47245 * C47315) / C47083;
    const double C319 = -(C47315 * C47413 + C47307 * C47308 * C47310) / C47083;
    const double C521 = -(C47240 * (C47240 * C47315 + C47311 * ce) +
                          C47307 * C47308 * C47310 + C47240 * C47311 * ce) /
                        C47083;
    const double C523 =
        -(C47240 * C47245 * C47315 + C47245 * C47311 * ce) / C47083;
    const double C527 = -(C47240 * (C47322 * C47258 + C47315) +
                          (C47311 + C47246 * C47258) * ce) /
                        C47083;
    const double C1010 =
        -(C47240 * C47403 * C47315 + C47403 * C47311 * ce) / C47083;
    const double C1251 = (-2 * C47403 * C47315) / C47083 -
                         (C47403 * (C47322 * C47413 + C47315)) / C47083;
    const double C1391 = -(C47240 * (C47322 * C47413 + C47315) +
                           (C47311 + C47246 * C47413) * ce) /
                         C47083;
    const double C151 = C48597 * C138;
    const double C5194 = C48597 * C334;
    const double C47261 = C47255 + C47260;
    const double C47270 = C47264 + C47269;
    const double C47343 = C47264 * C47258;
    const double C47370 = C47245 * C47264;
    const double C47631 = C47264 * C47413;
    const double C47673 = C47403 * C47264;
    const double C47762 = C47264 * ae;
    const double C47758 = C47264 * C47243;
    const double C47757 = C47240 * C47264;
    const double C47756 = C47264 * ce;
    const double C47335 = C47333 * C47258;
    const double C47344 = C47245 * C47333;
    const double C47432 = C47333 * C47413;
    const double C47473 = C47240 * C47333;
    const double C47581 = C47403 * C47333;
    const double C47751 = C47333 * ce;
    const double C47334 = C47331 * C47258;
    const double C47340 = C47245 * C47331;
    const double C47430 = C47331 * C47413;
    const double C47469 = C47240 * C47331;
    const double C47579 = C47403 * C47331;
    const double C47752 = ae * C47331;
    const double C47287 = C47279 + C47286;
    const double C47385 = C47381 * C47258;
    const double C47651 = C47245 * C47381;
    const double C47875 = C47381 * C47413;
    const double C47943 = C47403 * C47381;
    const double C48009 = C47240 * C47381;
    const double C47383 = C47377 * C47258;
    const double C47647 = C47245 * C47377;
    const double C47869 = C47377 * C47413;
    const double C47939 = C47403 * C47377;
    const double C48001 = C47240 * C47377;
    const double C47332 = C47246 + C47329;
    const double C47348 = 2 * C47342;
    const double C47422 = C47403 * C47342;
    const double C47498 = C47342 * ae;
    const double C47496 = C47240 * C47342;
    const double C47495 = C47342 * ce;
    const double C47434 = C47246 + C47431;
    const double C47480 = C47246 + C47472;
    const double C47482 = C47471 * ae;
    const double C47479 = C47471 * ce;
    const double C47759 = 2 * C47471;
    const double C47586 = C47580 * ae;
    const double C47584 = C47240 * C47580;
    const double C47583 = C47580 * ce;
    const double C47630 = 2 * C47580;
    const double C320 = (C47245 * C47316 + C47325 * C47413) / C47208;
    const double C47475 = C47466 / C47083;
    const double C321 = -(C47324 * C47413 + C47245 * C47315) / C47083;
    const double C47476 = C47467 / C47249;
    const double C47379 = C47264 + C47371;
    const double C47654 = C47649 * C47413;
    const double C47705 = C47403 * C47649;
    const double C47816 = C47649 * ae;
    const double C47812 = C47649 * C47243;
    const double C47811 = C47240 * C47649;
    const double C47810 = C47649 * ce;
    const double C47879 = C47264 + C47872;
    const double C47955 = C47940 * ae;
    const double C47953 = C47940 * C47243;
    const double C47952 = C47240 * C47940;
    const double C47951 = C47940 * ce;
    const double C48022 = C47264 + C48004;
    const double C48024 = C48003 * ae;
    const double C48021 = C48003 * ce;
    const double C47358 = C47333 + C47355;
    const double C47380 = 2 * C47373;
    const double C47440 = C47373 * C47413;
    const double C47509 = C47240 * C47373;
    const double C47593 = C47403 * C47373;
    const double C47805 = C47373 * ce;
    const double C47637 = C47333 + C47633;
    const double C47682 = C47240 * C47674;
    const double C47874 = 2 * C47674;
    const double C47935 = C47674 * ce;
    const double C48015 = C47996 / C47083;
    const double C47356 = C47353 + C47331;
    const double C47376 = -2 * C47367;
    const double C47438 = C47367 * C47413;
    const double C47505 = C47240 * C47367;
    const double C47591 = C47403 * C47367;
    const double C47806 = ae * C47367;
    const double C47635 = C47629 + C47331;
    const double C47678 = C47240 * C47672;
    const double C47868 = -2 * C47672;
    const double C47936 = ae * C47672;
    const double C48016 = C47997 / C47249;
    const double C48681 = C48645 * C48331;
    const double C48680 = C48331 * C48643;
    const double C5040 = -(C48331 * C48644) / C47208;
    const double C48352 = C48350 * C48345;
    const double C48351 = C48350 / C47100;
    const double C48360 = C48358 * C48350;
    const double C48649 = C48350 * C48346;
    const double C48688 = C48653 * C48350;
    const double C48682 = C48350 * C48646;
    const double C48430 = C48377 / C47100;
    const double C48432 = C48377 * C48429;
    const double C48439 = C48358 * C48377;
    const double C48664 = C48377 * C48431;
    const double C48694 = C48653 * C48377;
    const double C48692 = C48377 * C48658;
    const double C48712 = C48645 * C48582;
    const double C48711 = C48582 * C48676;
    const double C16515 = -(C48582 * C48678) / C47208;
    const double C47148 = C47143 / C47100;
    const double C47147 = C47081 * C47143;
    const double C47101 = 2 * C47088;
    const double C47123 = C47088 / C47085;
    const double C507 = ((0 * ce) / C47083 - C47088 / C47085) / (2 * C47083) +
                        (0 * ce) / C47083;
    const double C824 =
        ((C48394 - (C47081 * 2 * C47088) / C47083) * ce) / C47083 -
        C47082 / C47087;
    const double C825 = (0 * ce) / C47083 - C47088 / C47085;
    const double C1925 = (C48394 * std::pow(C48473, 2)) / C47085 + C48472;
    const double C48475 = C48474 * C48473;
    const double C48480 = C48474 / C47087;
    const double C48663 = C48474 / C47083;
    const double C48661 = C48358 * C48474;
    const double C506 =
        (((C48394 - (C47081 * 2 * C47088) / C47083) * ce) / C47083 -
         C47082 / C47087) /
            (2 * C47083) +
        ((C47081 * ((0 * ce) / C47083 - C47088 / C47085) + C48481) * ce) /
            C47083;
    const double C48482 = C48481 * C48473;
    const double C48674 = C48471 * C48481;
    const double C48673 = 2 * C48481;
    const double C48710 = C48481 / C48656;
    const double C2130 = C48481 / C48691;
    const double C4029 = C48481 / C47100;
    const double C48706 = C48670 / C47083;
    const double C1926 = (-2 * C48358 * C48670) / C47083;
    const double C48722 = C48695 / C47085;
    const double C47152 = C47146 + C47118;
    const double C43023 = ((0 * ae) / C47208 - C47225 / C47221) / (2 * C47208) -
                          (0 * be) / C47208;
    const double C148 = C113 * C117;
    const double C146 = C113 * C125;
    const double C144 = C113 * C116;
    const double C349 = C113 * C303;
    const double C551 = C113 * C510;
    const double C5199 = C113 * C305;
    const double C5193 = C113 * C316;
    const double C5191 = C113 * C304;
    const double C5816 = C113 * C1004;
    const double C10832 = C10815 * C117;
    const double C10822 = C10815 * C125;
    const double C10818 = C10815 * C116;
    const double C11018 = C10815 * C303;
    const double C11208 = C10815 * C510;
    const double C26367 = C10815 * C305;
    const double C26357 = C10815 * C316;
    const double C26353 = C10815 * C304;
    const double C26979 = C10815 * C1004;
    const double C10820 = C10816 * C510;
    const double C26355 = C10816 * C1004;
    const double C31797 = C31780 * C117;
    const double C31787 = C31780 * C125;
    const double C31783 = C31780 * C116;
    const double C31983 = C31780 * C303;
    const double C32173 = C31780 * C510;
    const double C37631 = C31780 * C305;
    const double C37621 = C31780 * C316;
    const double C37617 = C31780 * C304;
    const double C38243 = C31780 * C1004;
    const double C31785 = C31781 * C510;
    const double C37619 = C31781 * C1004;
    const double C43022 =
        (((C48597 - (C47207 * 2 * C47225) / C47208) * ae) / C47208 -
         C47220 / C47223) /
            (2 * C47208) -
        ((C47207 * ((0 * ae) / C47208 - C47225 / C47221) + C48714) * be) /
            C47208;
    const double C43020 = C48714 / C48336;
    const double C10813 = C48713 / C47208;
    const double C43018 = C48597 / C48336 - (C48713 * C48679) / C47221;
    const double C43019 = C48713 / C47223 - (C48714 * C48679) / C47208;
    const double C31794 = C31778 * C138;
    const double C31788 = C31778 * C137;
    const double C31784 = C31778 * C124;
    const double C37622 = C31778 * C334;
    const double C37618 = C31778 * C317;
    const double C47253 = C47252 * C47241;
    const double C524 =
        (C47245 * C47316 + C47240 * (C47240 * C47325 + C47320 * ae) +
         C47240 * C47320 * ae) /
        C47208;
    const double C525 = -(C47240 * (C47240 * C47324 + C47320 * ce) +
                          C47245 * C47315 + C47240 * C47320 * ce) /
                        C47083;
    const double C1011 =
        (C47240 * C47403 * C47325 + C47403 * C47320 * ae) / C47208;
    const double C1012 =
        -(C47240 * C47403 * C47324 + C47403 * C47320 * ce) / C47083;
    const double C306 = C47245 * C47311 + C47320 * C47413;
    const double C511 = C47245 * C47311 + C47320 * C47243;
    const double C1005 = C47240 * C47403 * C47320;
    const double C1242 =
        2 * C47403 * C47320 + C47403 * (C47320 + C47342 * C47413);
    const double C1380 = C47240 * (C47320 + C47342 * C47413);
    const double C2138 =
        2 * C47240 * C47320 + C47240 * (C47320 + C47342 * C47243);
    const double C1384 =
        (C47403 * C47316 + C47240 * (C47240 * C47419 + C47418 * ae) +
         C47240 * C47418 * ae) /
        C47208;
    const double C1385 = -(C47240 * (C47240 * C47417 + C47418 * ce) +
                           C47403 * C47315 + C47240 * C47418 * ce) /
                         C47083;
    const double C1375 = C47403 * C47311 + C47418 * C47243;
    const double C2570 =
        2 * C47240 * C47418 + C47240 * (C47418 + C47580 * C47243);
    const double C47464 = C47461 + C47462;
    const double C47463 = C47458 + C47459;
    const double C154 = C113 * C118;
    const double C10834 = C10815 * C118;
    const double C31799 = C31780 * C118;
    const double C345 = C113 * C302;
    const double C11028 = C10815 * C302;
    const double C31993 = C31780 * C302;
    const double C561 = C113 * C512;
    const double C10830 = C10816 * C512;
    const double C11222 = C10815 * C512;
    const double C31795 = C31781 * C512;
    const double C32187 = C31780 * C512;
    const double C6069 = C113 * C1243;
    const double C27217 = C10815 * C1243;
    const double C38481 = C31780 * C1243;
    const double C6255 = C113 * C1378;
    const double C26365 = C10816 * C1378;
    const double C27395 = C10815 * C1378;
    const double C37629 = C31781 * C1378;
    const double C38659 = C31780 * C1378;
    const double C149 = C48597 * C126;
    const double C31798 = C31778 * C126;
    const double C155 = C48597 * C129;
    const double C31800 = C31778 * C129;
    const double C346 = C48597 * C313;
    const double C31994 = C31778 * C313;
    const double C350 = C48597 * C315;
    const double C31984 = C31778 * C315;
    const double C5200 = C48597 * C318;
    const double C37632 = C31778 * C318;
    const double C552 = C48597 * C522;
    const double C10821 = C48714 * C522;
    const double C31786 = C48714 * C522;
    const double C32174 = C31778 * C522;
    const double C562 = C48597 * C526;
    const double C10831 = C48714 * C526;
    const double C31796 = C48714 * C526;
    const double C32188 = C31778 * C526;
    const double C5817 = C48597 * C1009;
    const double C26356 = C48714 * C1009;
    const double C37620 = C48714 * C1009;
    const double C38244 = C31778 * C1009;
    const double C6070 = C48597 * C1252;
    const double C38482 = C31778 * C1252;
    const double C6256 = C48597 * C1390;
    const double C26366 = C48714 * C1390;
    const double C37630 = C48714 * C1390;
    const double C38660 = C31778 * C1390;
    const double C150 = C113 * C127;
    const double C10828 = C10815 * C127;
    const double C31793 = C31780 * C127;
    const double C152 = C113 * C128;
    const double C10838 = C10815 * C128;
    const double C31803 = C31780 * C128;
    const double C343 = C113 * C312;
    const double C11032 = C10815 * C312;
    const double C31997 = C31780 * C312;
    const double C347 = C113 * C314;
    const double C11014 = C10815 * C314;
    const double C31979 = C31780 * C314;
    const double C5197 = C113 * C319;
    const double C26363 = C10815 * C319;
    const double C37627 = C31780 * C319;
    const double C553 = C113 * C523;
    const double C10824 = C10816 * C523;
    const double C11212 = C10815 * C523;
    const double C31789 = C31781 * C523;
    const double C32177 = C31780 * C523;
    const double C563 = C113 * C527;
    const double C10826 = C10816 * C527;
    const double C11226 = C10815 * C527;
    const double C31791 = C31781 * C527;
    const double C32191 = C31780 * C527;
    const double C5818 = C113 * C1010;
    const double C26359 = C10816 * C1010;
    const double C26983 = C10815 * C1010;
    const double C37623 = C31781 * C1010;
    const double C38247 = C31780 * C1010;
    const double C6071 = C113 * C1251;
    const double C27221 = C10815 * C1251;
    const double C38485 = C31780 * C1251;
    const double C6259 = C113 * C1391;
    const double C26361 = C10816 * C1391;
    const double C27399 = C10815 * C1391;
    const double C37625 = C31781 * C1391;
    const double C38663 = C31780 * C1391;
    const double C47262 = C47261 * C47241;
    const double C47271 = C47270 * C47241;
    const double C47349 = C47255 + C47343;
    const double C47378 = 2 * C47370;
    const double C47439 = C47370 * C47413;
    const double C47510 = C47370 * ae;
    const double C47508 = C47370 * C47243;
    const double C47507 = C47240 * C47370;
    const double C47506 = C47370 * ce;
    const double C47592 = C47403 * C47370;
    const double C47636 = C47255 + C47631;
    const double C47683 = C47673 * ae;
    const double C47681 = C47673 * C47243;
    const double C47680 = C47240 * C47673;
    const double C47679 = C47673 * ce;
    const double C47871 = 2 * C47673;
    const double C47772 = C47761 + C47762;
    const double C47771 = C47255 + C47758;
    const double C47773 = C47757 * ae;
    const double C47770 = C47757 * ce;
    const double C48005 = 2 * C47757;
    const double C47769 = C47755 + C47756;
    const double C47337 = C47323 + C47335;
    const double C47350 = 2 * C47344;
    const double C47423 = C47403 * C47344;
    const double C47497 = C47240 * C47344;
    const double C47502 = C47344 * ce;
    const double C1250 =
        (2 * C47403 * C47325 + C47403 * (C47325 + C47344 * C47413)) / C47208;
    const double C1394 = (C47240 * (C47325 + C47344 * C47413) +
                          (C47320 + C47342 * C47413) * ae) /
                         C47208;
    const double C47435 = C47323 + C47432;
    const double C47481 = C47473 + C47474;
    const double C47585 = C47240 * C47581;
    const double C47632 = 2 * C47581;
    const double C47669 = C47581 * ce;
    const double C47765 = C47751 / C47083;
    const double C47336 = C47334 + C47322;
    const double C47346 = -2 * C47340;
    const double C47421 = C47403 * C47340;
    const double C47494 = C47240 * C47340;
    const double C47503 = ae * C47340;
    const double C1249 = (-2 * C47403 * C47324) / C47083 -
                         (C47403 * (C47340 * C47413 + C47324)) / C47083;
    const double C1395 = -(C47240 * (C47340 * C47413 + C47324) +
                           (C47320 + C47342 * C47413) * ce) /
                         C47083;
    const double C47433 = C47430 + C47322;
    const double C47478 = C47469 + C47470;
    const double C47582 = C47240 * C47579;
    const double C47628 = -2 * C47579;
    const double C47670 = ae * C47579;
    const double C47766 = C47752 / C47249;
    const double C47288 = C47287 * C47241;
    const double C47388 = C47351 + C47385;
    const double C47655 = C47651 * C47413;
    const double C47706 = C47403 * C47651;
    const double C47815 = C47240 * C47651;
    const double C47880 = C47351 + C47875;
    const double C47954 = C47240 * C47943;
    const double C48023 = C48009 + C48010;
    const double C47386 = C47383 + C47347;
    const double C47653 = C47647 * C47413;
    const double C47704 = C47403 * C47647;
    const double C47809 = C47240 * C47647;
    const double C47878 = C47869 + C47347;
    const double C47950 = C47240 * C47939;
    const double C48020 = C48001 + C48002;
    const double C119 = 3 * (C47311 + C47246 * C47258) +
                        C47245 * (2 * C47320 + C47245 * C47332);
    const double C307 = C47311 + C47246 * C47258 + C47332 * C47413;
    const double C308 = C47403 * (2 * C47320 + C47245 * C47332);
    const double C513 = C47311 + C47246 * C47258 + C47332 * C47243;
    const double C514 = C47240 * (2 * C47320 + C47245 * C47332);
    const double C1006 = C47240 * C47403 * C47332;
    const double C1376 = C47403 * C47320 + C47422 * C47243;
    const double C1244 = 3 * (C47311 + C47246 * C47413) +
                         C47403 * (2 * C47418 + C47403 * C47434);
    const double C1379 = C47311 + C47246 * C47413 + C47434 * C47243;
    const double C1803 = C47240 * (2 * C47418 + C47403 * C47434);
    const double C2137 = 3 * (C47311 + C47246 * C47243) +
                         C47240 * (2 * C47460 + C47240 * C47480);
    const double C352 = C48597 * C320;
    const double C31986 = C31778 * C320;
    const double C47483 = -C47475;
    const double C353 = C113 * C321;
    const double C11024 = C10815 * C321;
    const double C31989 = C31780 * C321;
    const double C47384 = C47245 * C47379;
    const double C47447 = C47379 * C47413;
    const double C47546 = C47379 * ae;
    const double C47544 = C47379 * C47243;
    const double C47543 = C47240 * C47379;
    const double C47542 = C47379 * ce;
    const double C47604 = C47403 * C47379;
    const double C47657 = C47370 + C47654;
    const double C47715 = C47705 * ae;
    const double C47713 = C47705 * C47243;
    const double C47712 = C47240 * C47705;
    const double C47711 = C47705 * ce;
    const double C47825 = C47370 + C47812;
    const double C47827 = C47811 * ae;
    const double C47824 = C47811 * ce;
    const double C47882 = C47403 * C47879;
    const double C47904 = C47879 * ae;
    const double C47902 = C47879 * C47243;
    const double C47901 = C47240 * C47879;
    const double C47900 = C47879 * ce;
    const double C47961 = C47673 + C47953;
    const double C47963 = C47952 * ae;
    const double C47960 = C47952 * ce;
    const double C48032 = C48022 * ae;
    const double C48030 = C47240 * C48022;
    const double C48029 = C48022 * ce;
    const double C47360 = C47245 * C47358;
    const double C47372 = 3 * C47358;
    const double C47427 = C47403 * C47358;
    const double C47533 = C47240 * C47358;
    const double C47538 = C47358 * ce;
    const double C47443 = C47344 + C47440;
    const double C47597 = C47240 * C47593;
    const double C47650 = 2 * C47593;
    const double C47701 = C47593 * ce;
    const double C47819 = C47805 / C47083;
    const double C47640 = C47403 * C47637;
    const double C47736 = C47240 * C47637;
    const double C47873 = 3 * C47637;
    const double C47896 = C47637 * ce;
    const double C47946 = C47935 / C47083;
    const double C48027 = -C48015;
    const double C47359 = C47245 * C47356;
    const double C47366 = -3 * C47356;
    const double C47425 = C47403 * C47356;
    const double C47530 = C47240 * C47356;
    const double C47539 = ae * C47356;
    const double C47382 = C47376 / C47083;
    const double C47441 = C47438 + C47340;
    const double C47594 = C47240 * C47591;
    const double C47646 = -2 * C47591;
    const double C47702 = ae * C47591;
    const double C47820 = C47806 / C47249;
    const double C47638 = C47403 * C47635;
    const double C47733 = C47240 * C47635;
    const double C47867 = -3 * C47635;
    const double C47897 = ae * C47635;
    const double C47877 = C47868 / C47083;
    const double C47947 = C47936 / C47249;
    const double C105 = C48681 / C48336;
    const double C103 = C48331 / C48336 - (C48680 * C48644) / C47221;
    const double C104 = C48680 / C47223 - (C48681 * C48644) / C47208;
    const double C16513 = C48680 / C47208;
    const double C48353 = C48352 * C48346;
    const double C48359 = C48352 / C47087;
    const double C48650 = C48358 * C48352;
    const double C48648 = C48352 / C47083;
    const double C299 = (C48350 * std::pow(C48346, 2)) / C47085 + C48351;
    const double C48361 = C48360 * C48346;
    const double C48654 = C48345 * C48360;
    const double C48652 = 2 * C48360;
    const double C48698 = C48360 / C48656;
    const double C112 = C48360 / C48691;
    const double C3063 = C48360 / C47100;
    const double C48684 = C48649 / C47083;
    const double C300 = (-2 * C48358 * C48649) / C47083;
    const double C48715 = C48682 / C47085;
    const double C1167 = (C48377 * std::pow(C48431, 2)) / C47085 + C48430;
    const double C48433 = C48432 * C48431;
    const double C48438 = C48432 / C47087;
    const double C48662 = C48432 / C47083;
    const double C48659 = C48358 * C48432;
    const double C48440 = C48439 * C48431;
    const double C48668 = C48429 * C48439;
    const double C48667 = 2 * C48439;
    const double C48704 = C48439 / C48656;
    const double C1239 = C48439 / C48691;
    const double C3060 = C48439 / C47100;
    const double C48700 = C48664 / C47083;
    const double C1168 = (-2 * C48358 * C48664) / C47083;
    const double C48720 = C48692 / C47085;
    const double C21948 = C48712 / C48336;
    const double C5042 = C48711 / C47208;
    const double C21946 = C48582 / C48336 - (C48711 * C48678) / C47221;
    const double C21947 = C48711 / C47223 - (C48712 * C48678) / C47208;
    const double C47153 = C47147 + 0;
    const double C47120 = C47081 * C47101;
    const double C1929 =
        ((-C47082 / C47083) / C47100 -
         ((C48394 - (C47081 * C47101) / C47083) * de) / C47083) /
            C47100 -
        ((C47081 * ((-C47101 / C47083) / C47100 - (0 * de) / C47083) + C48481) *
         de) /
            C47083;
    const double C1930 =
        ((-C47101 / C47083) / C47100 - (0 * de) / C47083) / C47100 -
        (0 * de) / C47083;
    const double C3457 = (-C47101 / C47083) / C47100 - (0 * de) / C47083;
    const double C47133 = C47129 - C47123;
    const double C48476 = C48475 / C47085;
    const double C505 =
        (((0 - (C47081 * C47082) / C47083) * ce) / C47083 - (0 * de) / C47087) /
            (2 * C47083) +
        ((C47081 * (((C48394 - (C47081 * 2 * C47088) / C47083) * ce) / C47083 -
                    C47082 / C47087) +
          C48663) *
         ce) /
            C47083 +
        (0 * ce) / C47083 - C47088 / C47085;
    const double C48696 = 2 * C48661;
    const double C48483 = C48482 / C47083;
    const double C48709 = C48674 / C47087;
    const double C48727 = C48663 - C48706;
    const double C3454 = -C48706;
    const double C48734 = C48722 + C48472;
    const double C47156 = C47152 / C47100;
    const double C165 = C146 + C147;
    const double C164 = C144 + C145;
    const double C5206 = C5193 + C5194;
    const double C5205 = C5191 + C5192;
    const double C10835 = C10813 * C129;
    const double C10833 = C10813 * C126;
    const double C10829 = C10813 * C138;
    const double C10823 = C10813 * C137;
    const double C10819 = C10813 * C124;
    const double C11029 = C10813 * C313;
    const double C11021 = C10813 * C320;
    const double C11019 = C10813 * C315;
    const double C11223 = C10813 * C526;
    const double C11209 = C10813 * C522;
    const double C26368 = C10813 * C318;
    const double C26358 = C10813 * C334;
    const double C26354 = C10813 * C317;
    const double C26980 = C10813 * C1009;
    const double C27218 = C10813 * C1252;
    const double C27396 = C10813 * C1390;
    const double C43021 =
        (((0 - (C47207 * C47220) / C47208) * ae) / C47208 - (0 * be) / C47223) /
            (2 * C47208) -
        ((C47207 * (((C48597 - (C47207 * 2 * C47225) / C47208) * ae) / C47208 -
                    C47220 / C47223) +
          C10813) *
         be) /
            C47208 +
        (0 * ae) / C47208 - C47225 / C47221;
    const double C31817 = C31787 + C31788;
    const double C31815 = C31783 + C31784;
    const double C37635 = C37621 + C37622;
    const double C37633 = C37617 + C37618;
    const double C139 =
        (-2 * C47245 * C47253) / C47249 +
        C47245 * ((-((C47247 * C47248 + C47243 * bs[5] * std::pow(C47239, 5)) *
                     C47241 * std::pow(C47245, 2)) /
                   C47083) /
                      C47208 -
                  C47253 / C47249);
    const double C333 = (-((yP - yQ) * C47245 * C47253) / C47083) / C47208;
    const double C335 =
        (-(C47253 * std::pow(yP - yQ, 2)) / C47083) / C47208 -
        ((bs[2] * std::pow(C47236, 2) + C47243 * C47238 * C47242) * C47241) /
            C47249;
    const double C539 =
        (-(ae * (C47240 * C47315 + C47311 * ce)) / C47083) / C47208 -
        ((C47311 + C47243 * C47238 * C47242) * C47241) / C47249 -
        ((C47240 * C47316 + C47311 * ae) * ce) / C47249 +
        C47240 * ((-(C47316 * ce) / C47083) / C47208 - (ae * C47315) / C47249 -
                  (C47240 * C47253) / C47249);
    const double C540 = (-(C47245 * C47316 * ce) / C47083) / C47208 -
                        (ae * C47245 * C47315) / C47249 -
                        (C47240 * C47245 * C47253) / C47249;
    const double C1019 = (-(C47403 * C47316 * ce) / C47083) / C47208 -
                         (ae * C47403 * C47315) / C47249 -
                         (C47240 * C47403 * C47253) / C47249;
    const double C556 = C48597 * C524;
    const double C11215 = C10813 * C524;
    const double C11207 = C48714 * C524;
    const double C32180 = C31778 * C524;
    const double C32172 = C48714 * C524;
    const double C557 = C113 * C525;
    const double C11218 = C10815 * C525;
    const double C11210 = C10816 * C525;
    const double C32183 = C31780 * C525;
    const double C32175 = C31781 * C525;
    const double C1026 = C48597 * C1011;
    const double C11017 = C48714 * C1011;
    const double C11733 = C10813 * C1011;
    const double C31982 = C48714 * C1011;
    const double C32698 = C31778 * C1011;
    const double C1029 = C113 * C1012;
    const double C11012 = C10816 * C1012;
    const double C11736 = C10815 * C1012;
    const double C31977 = C31781 * C1012;
    const double C32701 = C31780 * C1012;
    const double C351 = C113 * C306;
    const double C11020 = C10815 * C306;
    const double C31985 = C31780 * C306;
    const double C555 = C113 * C511;
    const double C11214 = C10815 * C511;
    const double C11206 = C10816 * C511;
    const double C32179 = C31780 * C511;
    const double C32171 = C31781 * C511;
    const double C1025 = C113 * C1005;
    const double C11016 = C10816 * C1005;
    const double C11732 = C10815 * C1005;
    const double C31981 = C31781 * C1005;
    const double C32697 = C31780 * C1005;
    const double C1526 = C113 * C1242;
    const double C12266 = C10815 * C1242;
    const double C33231 = C31780 * C1242;
    const double C1688 = C113 * C1380;
    const double C11022 = C10816 * C1380;
    const double C12468 = C10815 * C1380;
    const double C31987 = C31781 * C1380;
    const double C33433 = C31780 * C1380;
    const double C2451 = C113 * C2138;
    const double C11216 = C10816 * C2138;
    const double C13328 = C10815 * C2138;
    const double C32181 = C31781 * C2138;
    const double C34285 = C31780 * C2138;
    const double C6252 = C48597 * C1384;
    const double C26978 = C48714 * C1384;
    const double C27388 = C10813 * C1384;
    const double C38242 = C48714 * C1384;
    const double C38652 = C31778 * C1384;
    const double C6253 = C113 * C1385;
    const double C26981 = C10816 * C1385;
    const double C27391 = C10815 * C1385;
    const double C38245 = C31781 * C1385;
    const double C38655 = C31780 * C1385;
    const double C6251 = C113 * C1375;
    const double C26977 = C10816 * C1375;
    const double C27387 = C10815 * C1375;
    const double C38241 = C31781 * C1375;
    const double C38651 = C31780 * C1375;
    const double C7675 = C113 * C2570;
    const double C27389 = C10816 * C2570;
    const double C28723 = C10815 * C2570;
    const double C38653 = C31781 * C2570;
    const double C39983 = C31780 * C2570;
    const double C2142 = (2 * (C47240 * C47316 + C47311 * ae) +
                          C47240 * (C47316 + C47240 * C47464 + C47460 * ae) +
                          (C47311 + C47246 * C47243) * ae) /
                         C47208;
    const double C2143 =
        (-2 * (C47240 * C47315 + C47311 * ce)) / C47083 -
        (C47240 * (C47240 * C47463 + C47315 + C47460 * ce)) / C47083 -
        ((C47311 + C47246 * C47243) * ce) / C47083;
    const double C166 = C148 + C149;
    const double C31822 = C31797 + C31798;
    const double C169 = C154 + C155;
    const double C31823 = C31799 + C31800;
    const double C368 = C345 + C346;
    const double C32017 = C31993 + C31994;
    const double C370 = C349 + C350;
    const double C32012 = C31983 + C31984;
    const double C5208 = C5199 + C5200;
    const double C37640 = C37631 + C37632;
    const double C579 = C551 + C552;
    const double C10851 = C10820 + C10821;
    const double C31816 = C31785 + C31786;
    const double C32204 = C32173 + C32174;
    const double C584 = C561 + C562;
    const double C10856 = C10830 + C10831;
    const double C31821 = C31795 + C31796;
    const double C32211 = C32187 + C32188;
    const double C5823 = C5816 + C5817;
    const double C26370 = C26355 + C26356;
    const double C37634 = C37619 + C37620;
    const double C38250 = C38243 + C38244;
    const double C6081 = C6069 + C6070;
    const double C38497 = C38481 + C38482;
    const double C6275 = C6255 + C6256;
    const double C26375 = C26365 + C26366;
    const double C37639 = C37629 + C37630;
    const double C38679 = C38659 + C38660;
    const double C167 = C150 + C151;
    const double C31820 = C31793 + C31794;
    const double C47267 = C47262 / C47249;
    const double C47410 = C47245 * C47262;
    const double C47468 = C47240 * C47262;
    const double C47578 = C47403 * C47262;
    const double C140 =
        3 * ((-(C47262 * C47258) / C47083) / C47208 - C47253 / C47249) +
        C47245 *
            ((-2 * C47245 * C47262) / C47249 +
             C47245 *
                 ((-((C47256 * C47257 + C47243 * bs[6] * std::pow(C47236, 6)) *
                     C47241 * C47258) /
                   C47083) /
                      C47208 -
                  C47262 / C47249));
    const double C332 =
        (yP - yQ) * ((-(C47262 * C47258) / C47083) / C47208 - C47253 / C47249);
    const double C336 =
        (-(C47245 * C47262 * std::pow(yP - yQ, 2)) / C47083) / C47208 -
        (C47245 * C47253) / C47249;
    const double C541 =
        (-(ae * (C47240 * C47324 + C47320 * ce)) / C47083) / C47208 -
        (C47245 * C47253) / C47249 -
        ((C47240 * C47325 + C47320 * ae) * ce) / C47249 +
        C47240 * ((-(C47325 * ce) / C47083) / C47208 - (ae * C47324) / C47249 -
                  (C47240 * C47245 * C47262) / C47249);
    const double C542 =
        (-((C47316 + C47323 * C47258) * ce) / C47083) / C47208 -
        (ae * (C47322 * C47258 + C47315)) / C47249 +
        C47240 * ((-(C47262 * C47258) / C47083) / C47208 - C47253 / C47249);
    const double C1020 = (-(C47403 * C47325 * ce) / C47083) / C47208 -
                         (ae * C47403 * C47324) / C47249 -
                         (C47240 * C47403 * C47245 * C47262) / C47249;
    const double C1261 =
        (-2 * C47403 * C47253) / C47249 +
        C47403 * ((-(C47262 * std::pow(C47403, 2)) / C47083) / C47208 -
                  C47253 / C47249);
    const double C1402 =
        (-(ae * (C47240 * C47417 + C47418 * ce)) / C47083) / C47208 -
        (C47403 * C47253) / C47249 -
        ((C47240 * C47419 + C47418 * ae) * ce) / C47249 +
        C47240 * ((-(C47419 * ce) / C47083) / C47208 - (ae * C47417) / C47249 -
                  (C47240 * C47403 * C47262) / C47249);
    const double C1405 =
        (-((C47316 + C47323 * C47413) * ce) / C47083) / C47208 -
        (ae * (C47322 * C47413 + C47315)) / C47249 +
        C47240 * ((-(C47262 * C47413) / C47083) / C47208 - C47253 / C47249);
    const double C2154 =
        2 * ((-(C47316 * ce) / C47083) / C47208 - (ae * C47315) / C47249 -
             (C47240 * C47253) / C47249) -
        (ae * (C47240 * C47463 + C47315 + C47460 * ce)) / C47249 -
        ((C47316 + C47240 * C47464 + C47460 * ae) * ce) / C47249 +
        C47240 *
            ((-(ae * C47463) / C47083) / C47208 - C47253 / C47249 -
             (C47464 * ce) / C47249 +
             C47240 * ((-(C47323 * ce) / C47083) / C47208 -
                       (ae * C47322) / C47249 - (C47240 * C47262) / C47249));
    const double C47272 = C47271 * C47258;
    const double C47282 = C47271 / C47249;
    const double C47278 = C47245 * C47271;
    const double C47614 = C47271 * C47413;
    const double C47671 = C47403 * C47271;
    const double C47753 = C47240 * C47271;
    const double C47354 = C47245 * C47349;
    const double C47369 = 3 * C47349;
    const double C47426 = C47403 * C47349;
    const double C47534 = C47349 * ae;
    const double C47532 = C47240 * C47349;
    const double C47531 = C47349 * ce;
    const double C1241 =
        2 * C47403 * C47332 + C47403 * (C47332 + C47349 * C47413);
    const double C1382 = C47240 * (C47332 + C47349 * C47413);
    const double C2140 =
        2 * C47240 * C47332 + C47240 * (C47332 + C47349 * C47243);
    const double C47442 = C47342 + C47439;
    const double C47517 = C47509 + C47510;
    const double C47516 = C47342 + C47508;
    const double C47518 = C47507 * ae;
    const double C47515 = C47507 * ce;
    const double C47813 = 2 * C47507;
    const double C47514 = C47505 + C47506;
    const double C47598 = C47592 * ae;
    const double C47596 = C47240 * C47592;
    const double C47595 = C47592 * ce;
    const double C47648 = 2 * C47592;
    const double C2571 =
        2 * C47240 * C47422 + C47240 * (C47422 + C47592 * C47243);
    const double C47639 = C47403 * C47636;
    const double C47737 = C47636 * ae;
    const double C47735 = C47240 * C47636;
    const double C47734 = C47636 * ce;
    const double C47870 = 3 * C47636;
    const double C7660 =
        2 * C47240 * C47434 + C47240 * (C47434 + C47636 * C47243);
    const double C47689 = C47682 + C47683;
    const double C47688 = C47580 + C47681;
    const double C47690 = C47680 * ae;
    const double C47687 = C47680 * ce;
    const double C47941 = 2 * C47680;
    const double C47686 = C47678 + C47679;
    const double C47779 = C47240 * C47772;
    const double C48008 = 2 * C47772;
    const double C47995 = C47772 * ce;
    const double C47780 = C47771 * ae;
    const double C47778 = C47240 * C47771;
    const double C47777 = C47771 * ce;
    const double C48006 = 3 * C47771;
    const double C47776 = C47240 * C47769;
    const double C48000 = -2 * C47769;
    const double C47994 = ae * C47769;
    const double C130 = (3 * (C47316 + C47323 * C47258) +
                         C47245 * (2 * C47325 + C47245 * C47337)) /
                        C47208;
    const double C322 = (C47316 + C47323 * C47258 + C47337 * C47413) / C47208;
    const double C324 = (C47403 * (2 * C47325 + C47245 * C47337)) / C47208;
    const double C528 =
        (C47316 + C47323 * C47258 + C47240 * (C47240 * C47337 + C47332 * ae) +
         C47240 * C47332 * ae) /
        C47208;
    const double C530 = (C47240 * (2 * C47325 + C47245 * C47337) +
                         (2 * C47320 + C47245 * C47332) * ae) /
                        C47208;
    const double C1013 =
        (C47240 * C47403 * C47337 + C47403 * C47332 * ae) / C47208;
    const double C1248 =
        (2 * C47403 * C47337 + C47403 * (C47337 + C47358 * C47413)) / C47208;
    const double C1398 = (C47240 * (C47337 + C47358 * C47413) +
                          (C47332 + C47349 * C47413) * ae) /
                         C47208;
    const double C1386 =
        (C47403 * C47325 + C47240 * (C47240 * C47423 + C47422 * ae) +
         C47240 * C47422 * ae) /
        C47208;
    const double C47500 = C47497 + C47498;
    const double C47511 = C47502 / C47083;
    const double C1527 = C48597 * C1250;
    const double C12267 = C10813 * C1250;
    const double C33232 = C31778 * C1250;
    const double C1689 = C48597 * C1394;
    const double C11023 = C48714 * C1394;
    const double C12469 = C10813 * C1394;
    const double C31988 = C48714 * C1394;
    const double C33434 = C31778 * C1394;
    const double C1253 = (3 * (C47316 + C47323 * C47413) +
                          C47403 * (2 * C47419 + C47403 * C47435)) /
                         C47208;
    const double C1392 =
        (C47316 + C47323 * C47413 + C47240 * (C47240 * C47435 + C47434 * ae) +
         C47240 * C47434 * ae) /
        C47208;
    const double C1806 = (C47240 * (2 * C47419 + C47403 * C47435) +
                          (2 * C47418 + C47403 * C47434) * ae) /
                         C47208;
    const double C47485 = C47240 * C47481;
    const double C47760 = 2 * C47481;
    const double C47750 = C47481 * ce;
    const double C47588 = C47585 + C47586;
    const double C47675 = C47669 / C47083;
    const double C47775 = -C47765;
    const double C131 =
        (-3 * (C47322 * C47258 + C47315)) / C47083 +
        C47245 * ((-2 * C47324) / C47083 - (C47245 * C47336) / C47083);
    const double C323 = -(C47336 * C47413 + C47322 * C47258 + C47315) / C47083;
    const double C325 =
        C47403 * ((-2 * C47324) / C47083 - (C47245 * C47336) / C47083);
    const double C529 = -(C47240 * (C47240 * C47336 + C47332 * ce) +
                          C47322 * C47258 + C47315 + C47240 * C47332 * ce) /
                        C47083;
    const double C531 =
        C47240 * ((-2 * C47324) / C47083 - (C47245 * C47336) / C47083) -
        ((2 * C47320 + C47245 * C47332) * ce) / C47083;
    const double C1014 =
        -(C47240 * C47403 * C47336 + C47403 * C47332 * ce) / C47083;
    const double C1247 = (-2 * C47403 * C47336) / C47083 -
                         (C47403 * (C47356 * C47413 + C47336)) / C47083;
    const double C1399 = -(C47240 * (C47356 * C47413 + C47336) +
                           (C47332 + C47349 * C47413) * ce) /
                         C47083;
    const double C47352 = C47346 / C47083;
    const double C1387 = -(C47240 * (C47240 * C47421 + C47422 * ce) +
                           C47403 * C47324 + C47240 * C47422 * ce) /
                         C47083;
    const double C47499 = C47494 + C47495;
    const double C47512 = C47503 / C47249;
    const double C1524 = C113 * C1249;
    const double C12262 = C10815 * C1249;
    const double C33227 = C31780 * C1249;
    const double C1690 = C113 * C1395;
    const double C11026 = C10816 * C1395;
    const double C12472 = C10815 * C1395;
    const double C31991 = C31781 * C1395;
    const double C33437 = C31780 * C1395;
    const double C1254 =
        (-3 * (C47322 * C47413 + C47315)) / C47083 +
        C47403 * ((-2 * C47417) / C47083 - (C47403 * C47433) / C47083);
    const double C1393 = -(C47240 * (C47240 * C47433 + C47434 * ce) +
                           C47322 * C47413 + C47315 + C47240 * C47434 * ce) /
                         C47083;
    const double C1807 =
        C47240 * ((-2 * C47417) / C47083 - (C47403 * C47433) / C47083) -
        ((2 * C47418 + C47403 * C47434) * ce) / C47083;
    const double C47484 = C47240 * C47478;
    const double C47754 = -2 * C47478;
    const double C47749 = ae * C47478;
    const double C47587 = C47582 + C47583;
    const double C47634 = C47628 / C47083;
    const double C47676 = C47670 / C47249;
    const double C47289 = C47288 * C47258;
    const double C47620 = C47245 * C47288;
    const double C47858 = C47288 * C47413;
    const double C47937 = C47403 * C47288;
    const double C47998 = C47240 * C47288;
    const double C47391 = C47245 * C47388;
    const double C47448 = C47388 * C47413;
    const double C47545 = C47240 * C47388;
    const double C47605 = C47403 * C47388;
    const double C47658 = C47373 + C47655;
    const double C47714 = C47240 * C47706;
    const double C47826 = C47815 + C47816;
    const double C47883 = C47403 * C47880;
    const double C47903 = C47240 * C47880;
    const double C47962 = C47954 + C47955;
    const double C48031 = C47240 * C48023;
    const double C47389 = C47245 * C47386;
    const double C47446 = C47386 * C47413;
    const double C47541 = C47240 * C47386;
    const double C47603 = C47403 * C47386;
    const double C47656 = C47653 + C47367;
    const double C47710 = C47240 * C47704;
    const double C47823 = C47809 + C47810;
    const double C47881 = C47403 * C47878;
    const double C47899 = C47240 * C47878;
    const double C47959 = C47950 + C47951;
    const double C48028 = C47240 * C48020;
    const double C156 = C113 * C119;
    const double C10848 = C10815 * C119;
    const double C31813 = C31780 * C119;
    const double C355 = C113 * C307;
    const double C11042 = C10815 * C307;
    const double C32007 = C31780 * C307;
    const double C359 = C113 * C308;
    const double C11390 = C10815 * C308;
    const double C32355 = C31780 * C308;
    const double C565 = C113 * C513;
    const double C11232 = C10815 * C513;
    const double C11224 = C10816 * C513;
    const double C32197 = C31780 * C513;
    const double C32189 = C31781 * C513;
    const double C569 = C113 * C514;
    const double C10836 = C10816 * C514;
    const double C11528 = C10815 * C514;
    const double C31801 = C31781 * C514;
    const double C32493 = C31780 * C514;
    const double C1031 = C113 * C1006;
    const double C11030 = C10816 * C1006;
    const double C11742 = C10815 * C1006;
    const double C31995 = C31781 * C1006;
    const double C32707 = C31780 * C1006;
    const double C2315 = C113 * C1376;
    const double C11734 = C10816 * C1376;
    const double C13186 = C10815 * C1376;
    const double C32699 = C31781 * C1376;
    const double C34143 = C31780 * C1376;
    const double C6079 = C113 * C1244;
    const double C27231 = C10815 * C1244;
    const double C38495 = C31780 * C1244;
    const double C6261 = C113 * C1379;
    const double C27405 = C10815 * C1379;
    const double C27397 = C10816 * C1379;
    const double C38669 = C31780 * C1379;
    const double C38661 = C31781 * C1379;
    const double C6775 = C113 * C1803;
    const double C27219 = C10816 * C1803;
    const double C27879 = C10815 * C1803;
    const double C38483 = C31781 * C1803;
    const double C39143 = C31780 * C1803;
    const double C47486 = C47483 / C47208;
    const double C47387 = C47378 + C47384;
    const double C47450 = C47349 + C47447;
    const double C47551 = C47349 + C47544;
    const double C47553 = C47543 * ae;
    const double C47550 = C47543 * ce;
    const double C47610 = C47604 * ae;
    const double C47608 = C47240 * C47604;
    const double C47607 = C47604 * ce;
    const double C47660 = C47403 * C47657;
    const double C47745 = C47657 * ae;
    const double C47743 = C47240 * C47657;
    const double C47742 = C47657 * ce;
    const double C47720 = C47592 + C47713;
    const double C47722 = C47712 * ae;
    const double C47719 = C47712 * ce;
    const double C47834 = C47825 * ae;
    const double C47832 = C47240 * C47825;
    const double C47831 = C47825 * ce;
    const double C47885 = C47871 + C47882;
    const double C47909 = C47636 + C47902;
    const double C47911 = C47901 * ae;
    const double C47908 = C47901 * ce;
    const double C47970 = C47961 * ae;
    const double C47968 = C47240 * C47961;
    const double C47967 = C47961 * ce;
    const double C48038 = C48005 + C48030;
    const double C48037 = C48029 / C47083;
    const double C47362 = C47350 + C47360;
    const double C47547 = C47538 / C47083;
    const double C1255 = (3 * (C47325 + C47344 * C47413) +
                          C47403 * (2 * C47423 + C47403 * C47443)) /
                         C47208;
    const double C47707 = C47701 / C47083;
    const double C47829 = -C47819;
    const double C47643 = C47632 + C47640;
    const double C47905 = C47896 / C47083;
    const double C47957 = -C47946;
    const double C48035 = C48027 / C47208;
    const double C47361 = C47359 / C47083;
    const double C47375 = C47366 / C47083;
    const double C47548 = C47539 / C47249;
    const double C1256 =
        (-3 * (C47340 * C47413 + C47324)) / C47083 +
        C47403 * ((-2 * C47421) / C47083 - (C47403 * C47441) / C47083);
    const double C47652 = C47646 / C47083;
    const double C47708 = C47702 / C47249;
    const double C47641 = C47638 / C47083;
    const double C47876 = C47867 / C47083;
    const double C47906 = C47897 / C47249;
    const double C48354 = C48353 / C47085;
    const double C48685 = 2 * C48650;
    const double C48362 = C48361 / C47083;
    const double C48689 = C48654 / C47087;
    const double C48716 = C48648 - C48684;
    const double C2788 = -C48684;
    const double C48730 = C48715 + C48351;
    const double C48434 = C48433 / C47085;
    const double C48693 = 2 * C48659;
    const double C48441 = C48440 / C47083;
    const double C48703 = C48668 / C47087;
    const double C48724 = C48662 - C48700;
    const double C2680 = -C48700;
    const double C48733 = C48720 + C48430;
    const double C47157 = C47153 * de;
    const double C47128 = C47120 / C47083;
    const double C47137 = C47081 * C47133;
    const double C47166 = C47133 / C47100;
    const double C48477 = C48472 - C48476;
    const double C48723 = C48696 / C47083;
    const double C48484 = C48480 - C48483;
    const double C48737 = C48727 / C47100;
    const double C1928 =
        ((-(0 * de) / C47083) / C47100 -
         ((0 - (C47081 * C47082) / C47083) * de) / C47083) /
            C47100 -
        ((C47081 * ((-C47082 / C47083) / C47100 -
                    ((C48394 - (C47081 * C47101) / C47083) * de) / C47083) +
          C3454) *
         de) /
            C47083 +
        (-C47101 / C47083) / C47100 - (0 * de) / C47083;
    const double C175 = C165 * C48394;
    const double C550 = C165 * C48734;
    const double C832 = C165 * C48663;
    const double C1933 = C165 * C1925;
    const double C3460 = C165 * C3454;
    const double C174 = C164 * C114;
    const double C549 = C164 * C505;
    const double C831 = C164 * C824;
    const double C5210 = C5206 * C48394;
    const double C5815 = C5206 * C48663;
    const double C6248 = C5206 * C48734;
    const double C7076 = C5206 * C1925;
    const double C9006 = C5206 * C3454;
    const double C5209 = C5205 * C114;
    const double C5814 = C5205 * C824;
    const double C6247 = C5205 * C505;
    const double C10858 = C10834 + C10835;
    const double C10857 = C10832 + C10833;
    const double C10855 = C10828 + C10829;
    const double C10852 = C10822 + C10823;
    const double C10850 = C10818 + C10819;
    const double C11052 = C11028 + C11029;
    const double C11047 = C11018 + C11019;
    const double C11246 = C11222 + C11223;
    const double C11239 = C11208 + C11209;
    const double C26376 = C26367 + C26368;
    const double C26371 = C26357 + C26358;
    const double C26369 = C26353 + C26354;
    const double C26986 = C26979 + C26980;
    const double C27233 = C27217 + C27218;
    const double C27415 = C27395 + C27396;
    const double C153 = C48597 * C139;
    const double C10839 = C10813 * C139;
    const double C31804 = C31778 * C139;
    const double C348 = C48597 * C333;
    const double C11015 = C10813 * C333;
    const double C31980 = C31778 * C333;
    const double C5198 = C48597 * C335;
    const double C26364 = C10813 * C335;
    const double C37628 = C31778 * C335;
    const double C554 = C48597 * C540;
    const double C10825 = C48714 * C540;
    const double C11213 = C10813 * C540;
    const double C31790 = C48714 * C540;
    const double C32178 = C31778 * C540;
    const double C5819 = C48597 * C1019;
    const double C26360 = C48714 * C1019;
    const double C26984 = C10813 * C1019;
    const double C37624 = C48714 * C1019;
    const double C38248 = C31778 * C1019;
    const double C371 = C351 + C352;
    const double C11048 = C11020 + C11021;
    const double C32013 = C31985 + C31986;
    const double C581 = C555 + C556;
    const double C11242 = C11214 + C11215;
    const double C11238 = C11206 + C11207;
    const double C32207 = C32179 + C32180;
    const double C32203 = C32171 + C32172;
    const double C1043 = C1025 + C1026;
    const double C11046 = C11016 + C11017;
    const double C11748 = C11732 + C11733;
    const double C32011 = C31981 + C31982;
    const double C32713 = C32697 + C32698;
    const double C6273 = C6251 + C6252;
    const double C26985 = C26977 + C26978;
    const double C27411 = C27387 + C27388;
    const double C38249 = C38241 + C38242;
    const double C38675 = C38651 + C38652;
    const double C176 = C166 * C114;
    const double C559 = C166 * C505;
    const double C835 = C166 * C824;
    const double C179 = C169 * C114;
    const double C572 = C169 * C505;
    const double C841 = C169 * C824;
    const double C380 = C368 * C114;
    const double C1034 = C368 * C824;
    const double C2945 = C368 * C505;
    const double C382 = C370 * C114;
    const double C1028 = C370 * C824;
    const double C2939 = C370 * C505;
    const double C5212 = C5208 * C114;
    const double C6258 = C5208 * C505;
    const double C6617 = C5208 * C824;
    const double C592 = C579 * C506;
    const double C833 = C579 * C825;
    const double C1934 = C579 * C1929;
    const double C3461 = C579 * C3457;
    const double C596 = C584 * C506;
    const double C837 = C584 * C825;
    const double C1940 = C584 * C1929;
    const double C3465 = C584 * C3457;
    const double C5828 = C5823 * C825;
    const double C6249 = C5823 * C506;
    const double C7077 = C5823 * C1929;
    const double C9007 = C5823 * C3457;
    const double C6087 = C6081 * C114;
    const double C6773 = C6081 * C824;
    const double C22821 = C6081 * C505;
    const double C6283 = C6275 * C506;
    const double C6615 = C6275 * C825;
    const double C7081 = C6275 * C1929;
    const double C9011 = C6275 * C3457;
    const double C177 = C167 * C48394;
    const double C560 = C167 * C48734;
    const double C836 = C167 * C48663;
    const double C1939 = C167 * C1925;
    const double C3464 = C167 * C3454;
    const double C1262 =
        3 * ((-(C47262 * C47413) / C47083) / C47208 - C47253 / C47249) +
        C47403 * ((-2 * C47403 * C47262) / C47249 +
                  C47403 * ((-(C47271 * C47413) / C47083) / C47208 - C47267));
    const double C1406 =
        (-(C47262 * C47413) / C47083) / C47208 - C47253 / C47249 -
        (ae * (C47240 * C47433 + C47434 * ce)) / C47249 -
        ((C47240 * C47435 + C47434 * ae) * ce) / C47249 +
        C47240 * ((-(C47435 * ce) / C47083) / C47208 - (ae * C47433) / C47249 +
                  C47240 * ((-(C47271 * C47413) / C47083) / C47208 - C47267));
    const double C1812 =
        (((-2 * C47417) / C47083 - (C47403 * C47433) / C47083) * ae) / C47208 -
        ((2 * C47419 + C47403 * C47435) * ce) / C47249 +
        C47240 * ((-2 * C47403 * C47262) / C47249 +
                  C47403 * ((-(C47271 * C47413) / C47083) / C47208 - C47267));
    const double C47477 = C47468 / C47249;
    const double C159 = C48597 * C140;
    const double C10845 = C10813 * C140;
    const double C31810 = C31778 * C140;
    const double C344 = C48597 * C332;
    const double C11033 = C10813 * C332;
    const double C31998 = C31778 * C332;
    const double C354 = C48597 * C336;
    const double C11025 = C10813 * C336;
    const double C31990 = C31778 * C336;
    const double C558 = C48597 * C541;
    const double C11219 = C10813 * C541;
    const double C11211 = C48714 * C541;
    const double C32184 = C31778 * C541;
    const double C32176 = C48714 * C541;
    const double C564 = C48597 * C542;
    const double C10827 = C48714 * C542;
    const double C11227 = C10813 * C542;
    const double C31792 = C48714 * C542;
    const double C32192 = C31778 * C542;
    const double C1030 = C48597 * C1020;
    const double C11013 = C48714 * C1020;
    const double C11737 = C10813 * C1020;
    const double C31978 = C48714 * C1020;
    const double C32702 = C31778 * C1020;
    const double C6072 = C48597 * C1261;
    const double C27222 = C10813 * C1261;
    const double C38486 = C31778 * C1261;
    const double C6254 = C48597 * C1402;
    const double C26982 = C48714 * C1402;
    const double C27392 = C10813 * C1402;
    const double C38246 = C48714 * C1402;
    const double C38656 = C31778 * C1402;
    const double C6260 = C48597 * C1405;
    const double C26362 = C48714 * C1405;
    const double C27400 = C10813 * C1405;
    const double C37626 = C48714 * C1405;
    const double C38664 = C31778 * C1405;
    const double C47273 = C47272 / C47083;
    const double C47283 = -2 * C47278;
    const double C47504 = C47240 * C47278;
    const double C47590 = C47403 * C47278;
    const double C47621 = C47278 / C47249;
    const double C1260 =
        (-2 * C47403 * C47410) / C47249 +
        C47403 * ((-(C47278 * std::pow(C47403, 2)) / C47083) / C47208 -
                  C47410 / C47249);
    const double C1263 =
        3 * ((-(C47278 * C47413) / C47083) / C47208 - C47410 / C47249) +
        C47403 * ((-2 * C47403 * C47278) / C47249 +
                  C47403 * ((-(C47245 * C47288 * C47413) / C47083) / C47208 -
                            C47278 / C47249));
    const double C1403 =
        (-(ae * (C47240 * C47421 + C47422 * ce)) / C47083) / C47208 -
        (C47403 * C47410) / C47249 -
        ((C47240 * C47423 + C47422 * ae) * ce) / C47249 +
        C47240 * ((-(C47423 * ce) / C47083) / C47208 - (ae * C47421) / C47249 -
                  (C47240 * C47403 * C47278) / C47249);
    const double C1407 =
        (-((C47325 + C47344 * C47413) * ce) / C47083) / C47208 -
        (ae * (C47340 * C47413 + C47324)) / C47249 +
        C47240 * ((-(C47278 * C47413) / C47083) / C47208 - C47410 / C47249);
    const double C1813 =
        (((-2 * C47421) / C47083 - (C47403 * C47441) / C47083) * ae) / C47208 -
        ((2 * C47423 + C47403 * C47443) * ce) / C47249 +
        C47240 * ((-2 * C47403 * C47278) / C47249 +
                  C47403 * ((-(C47245 * C47288 * C47413) / C47083) / C47208 -
                            C47278 / C47249));
    const double C47615 = C47614 / C47083;
    const double C47677 = C47240 * C47671;
    const double C47857 = -2 * C47671;
    const double C47933 = C47671 / C47249;
    const double C47767 = C47753 / C47249;
    const double C47357 = C47348 + C47354;
    const double C1388 =
        (C47403 * C47337 + C47240 * (C47240 * C47427 + C47426 * ae) +
         C47240 * C47426 * ae) /
        C47208;
    const double C1389 = -(C47240 * (C47240 * C47425 + C47426 * ce) +
                           C47403 * C47336 + C47240 * C47426 * ce) /
                         C47083;
    const double C1377 = C47403 * C47332 + C47426 * C47243;
    const double C2572 =
        2 * C47240 * C47426 + C47240 * (C47426 + C47604 * C47243);
    const double C47536 = C47533 + C47534;
    const double C47535 = C47530 + C47531;
    const double C1522 = C113 * C1241;
    const double C1694 = C113 * C1382;
    const double C11040 = C10816 * C1382;
    const double C32005 = C31781 * C1382;
    const double C2461 = C113 * C2140;
    const double C11230 = C10816 * C2140;
    const double C32195 = C31781 * C2140;
    const double C1408 =
        (-(C47278 * C47413) / C47083) / C47208 - C47410 / C47249 -
        (ae * (C47240 * C47441 + C47442 * ce)) / C47249 -
        ((C47240 * C47443 + C47442 * ae) * ce) / C47249 +
        C47240 * ((-(C47443 * ce) / C47083) / C47208 - (ae * C47441) / C47249 +
                  C47240 * ((-(C47245 * C47288 * C47413) / C47083) / C47208 -
                            C47278 / C47249));
    const double C1396 =
        (C47325 + C47344 * C47413 + C47240 * (C47240 * C47443 + C47442 * ae) +
         C47240 * C47442 * ae) /
        C47208;
    const double C1397 = -(C47240 * (C47240 * C47441 + C47442 * ce) +
                           C47340 * C47413 + C47324 + C47240 * C47442 * ce) /
                         C47083;
    const double C1808 = (C47240 * (2 * C47423 + C47403 * C47443) +
                          (2 * C47422 + C47403 * C47442) * ae) /
                         C47208;
    const double C1809 =
        C47240 * ((-2 * C47421) / C47083 - (C47403 * C47441) / C47083) -
        ((2 * C47422 + C47403 * C47442) * ce) / C47083;
    const double C1245 = 3 * (C47320 + C47342 * C47413) +
                         C47403 * (2 * C47422 + C47403 * C47442);
    const double C1381 = C47320 + C47342 * C47413 + C47442 * C47243;
    const double C1804 = C47240 * (2 * C47422 + C47403 * C47442);
    const double C7661 =
        2 * C47240 * C47442 + C47240 * (C47442 + C47657 * C47243);
    const double C47521 = C47240 * C47517;
    const double C47814 = 2 * C47517;
    const double C47804 = C47517 * ce;
    const double C2139 = 3 * (C47320 + C47342 * C47243) +
                         C47240 * (2 * C47496 + C47240 * C47516);
    const double C47520 = C47240 * C47514;
    const double C47808 = -2 * C47514;
    const double C47803 = ae * C47514;
    const double C47600 = C47597 + C47598;
    const double C47599 = C47594 + C47595;
    const double C7523 = C113 * C2571;
    const double C13184 = C10816 * C2571;
    const double C34141 = C31781 * C2571;
    const double C47642 = C47630 + C47639;
    const double C47739 = C47736 + C47737;
    const double C47738 = C47733 + C47734;
    const double C23852 = C113 * C7660;
    const double C27403 = C10816 * C7660;
    const double C38667 = C31781 * C7660;
    const double C47693 = C47240 * C47689;
    const double C47942 = 2 * C47689;
    const double C47934 = C47689 * ce;
    const double C7174 = 3 * (C47418 + C47580 * C47243) +
                         C47240 * (2 * C47584 + C47240 * C47688);
    const double C47692 = C47240 * C47686;
    const double C47938 = -2 * C47686;
    const double C47932 = ae * C47686;
    const double C47786 = C47333 + C47779;
    const double C48014 = C47995 / C47249;
    const double C47785 = C47759 + C47778;
    const double C47784 = C47777 / C47083;
    const double C47783 = C47776 + C47331;
    const double C48019 = C48000 / C47083;
    const double C48013 = C47994 / C47083;
    const double C157 = C48597 * C130;
    const double C10849 = C10813 * C130;
    const double C31814 = C31778 * C130;
    const double C356 = C48597 * C322;
    const double C11043 = C10813 * C322;
    const double C32008 = C31778 * C322;
    const double C360 = C48597 * C324;
    const double C11391 = C10813 * C324;
    const double C32356 = C31778 * C324;
    const double C566 = C48597 * C528;
    const double C11233 = C10813 * C528;
    const double C11225 = C48714 * C528;
    const double C32198 = C31778 * C528;
    const double C32190 = C48714 * C528;
    const double C570 = C48597 * C530;
    const double C10837 = C48714 * C530;
    const double C11529 = C10813 * C530;
    const double C31802 = C48714 * C530;
    const double C32494 = C31778 * C530;
    const double C1032 = C48597 * C1013;
    const double C11031 = C48714 * C1013;
    const double C11743 = C10813 * C1013;
    const double C31996 = C48714 * C1013;
    const double C32708 = C31778 * C1013;
    const double C1523 = C48597 * C1248;
    const double C1695 = C48597 * C1398;
    const double C11041 = C48714 * C1398;
    const double C32006 = C48714 * C1398;
    const double C2316 = C48597 * C1386;
    const double C11735 = C48714 * C1386;
    const double C13187 = C10813 * C1386;
    const double C32700 = C48714 * C1386;
    const double C34144 = C31778 * C1386;
    const double C2146 = (2 * (C47240 * C47325 + C47320 * ae) +
                          C47240 * (C47325 + C47240 * C47500 + C47496 * ae) +
                          (C47320 + C47342 * C47243) * ae) /
                         C47208;
    const double C47519 = -C47511;
    const double C1531 = C1526 + C1527;
    const double C12271 = C12266 + C12267;
    const double C33236 = C33231 + C33232;
    const double C1698 = C1688 + C1689;
    const double C11049 = C11022 + C11023;
    const double C12475 = C12468 + C12469;
    const double C32014 = C31987 + C31988;
    const double C33440 = C33433 + C33434;
    const double C6080 = C48597 * C1253;
    const double C27232 = C10813 * C1253;
    const double C38496 = C31778 * C1253;
    const double C6262 = C48597 * C1392;
    const double C27406 = C10813 * C1392;
    const double C27398 = C48714 * C1392;
    const double C38670 = C31778 * C1392;
    const double C38662 = C48714 * C1392;
    const double C6776 = C48597 * C1806;
    const double C27220 = C48714 * C1806;
    const double C27880 = C10813 * C1806;
    const double C38484 = C48714 * C1806;
    const double C39144 = C31778 * C1806;
    const double C47488 = C47323 + C47485;
    const double C47764 = C47750 / C47249;
    const double C2573 = (2 * (C47240 * C47419 + C47418 * ae) +
                          C47240 * (C47419 + C47240 * C47588 + C47584 * ae) +
                          (C47418 + C47580 * C47243) * ae) /
                         C47208;
    const double C47684 = -C47675;
    const double C47782 = C47775 / C47208;
    const double C158 = C113 * C131;
    const double C10844 = C10815 * C131;
    const double C31809 = C31780 * C131;
    const double C357 = C113 * C323;
    const double C11038 = C10815 * C323;
    const double C32003 = C31780 * C323;
    const double C361 = C113 * C325;
    const double C11386 = C10815 * C325;
    const double C32351 = C31780 * C325;
    const double C567 = C113 * C529;
    const double C11236 = C10815 * C529;
    const double C11228 = C10816 * C529;
    const double C32201 = C31780 * C529;
    const double C32193 = C31781 * C529;
    const double C573 = C113 * C531;
    const double C10840 = C10816 * C531;
    const double C11532 = C10815 * C531;
    const double C31805 = C31781 * C531;
    const double C32497 = C31780 * C531;
    const double C1035 = C113 * C1014;
    const double C11034 = C10816 * C1014;
    const double C11746 = C10815 * C1014;
    const double C31999 = C31781 * C1014;
    const double C32711 = C31780 * C1014;
    const double C1520 = C113 * C1247;
    const double C1696 = C113 * C1399;
    const double C11036 = C10816 * C1399;
    const double C32001 = C31781 * C1399;
    const double C2317 = C113 * C1387;
    const double C11738 = C10816 * C1387;
    const double C13190 = C10815 * C1387;
    const double C32703 = C31781 * C1387;
    const double C34147 = C31780 * C1387;
    const double C2156 =
        2 * ((-(C47325 * ce) / C47083) / C47208 - (ae * C47324) / C47249 -
             (C47240 * C47410) / C47249) -
        (ae * (C47240 * C47499 + C47324 + C47496 * ce)) / C47249 -
        ((C47325 + C47240 * C47500 + C47496 * ae) * ce) / C47249 +
        C47240 *
            ((-(ae * C47499) / C47083) / C47208 - C47410 / C47249 -
             (C47500 * ce) / C47249 +
             C47240 * ((-(C47344 * ce) / C47083) / C47208 -
                       (ae * C47340) / C47249 - (C47240 * C47278) / C47249));
    const double C2147 =
        (-2 * (C47240 * C47324 + C47320 * ce)) / C47083 -
        (C47240 * (C47240 * C47499 + C47324 + C47496 * ce)) / C47083 -
        ((C47320 + C47342 * C47243) * ce) / C47083;
    const double C6077 = C113 * C1254;
    const double C27227 = C10815 * C1254;
    const double C38491 = C31780 * C1254;
    const double C6263 = C113 * C1393;
    const double C27409 = C10815 * C1393;
    const double C27401 = C10816 * C1393;
    const double C38673 = C31780 * C1393;
    const double C38665 = C31781 * C1393;
    const double C6777 = C113 * C1807;
    const double C27223 = C10816 * C1807;
    const double C27883 = C10815 * C1807;
    const double C38487 = C31781 * C1807;
    const double C39147 = C31780 * C1807;
    const double C47487 = C47484 + C47322;
    const double C47768 = C47754 / C47083;
    const double C47763 = C47749 / C47083;
    const double C2579 =
        2 * ((-(C47419 * ce) / C47083) / C47208 - (ae * C47417) / C47249 -
             (C47240 * C47578) / C47249) -
        (ae * (C47240 * C47587 + C47417 + C47584 * ce)) / C47249 -
        ((C47419 + C47240 * C47588 + C47584 * ae) * ce) / C47249 +
        C47240 * ((-(ae * C47587) / C47083) / C47208 - C47578 / C47249 -
                  (C47588 * ce) / C47249 +
                  C47240 * ((-(C47581 * ce) / C47083) / C47208 -
                            (ae * C47579) / C47249 -
                            (C47240 * C47403 * C47271) / C47249));
    const double C2574 =
        (-2 * (C47240 * C47417 + C47418 * ce)) / C47083 -
        (C47240 * (C47240 * C47587 + C47417 + C47584 * ce)) / C47083 -
        ((C47418 + C47580 * C47243) * ce) / C47083;
    const double C47290 = C47289 / C47083;
    const double C47622 = C47620 * C47413;
    const double C47703 = C47403 * C47620;
    const double C47807 = C47240 * C47620;
    const double C47860 = C47858 / C47083;
    const double C47948 = C47240 * C47937;
    const double C48017 = C47998 / C47249;
    const double C47394 = C47380 + C47391;
    const double C47451 = C47358 + C47448;
    const double C47552 = C47545 + C47546;
    const double C47609 = C47240 * C47605;
    const double C47661 = C47403 * C47658;
    const double C47744 = C47240 * C47658;
    const double C47721 = C47714 + C47715;
    const double C47833 = C47240 * C47826;
    const double C47886 = C47874 + C47883;
    const double C47910 = C47903 + C47904;
    const double C47969 = C47240 * C47962;
    const double C48039 = C47351 + C48031;
    const double C47392 = C47389 / C47083;
    const double C47449 = C47446 + C47356;
    const double C47549 = C47541 + C47542;
    const double C47606 = C47240 * C47603;
    const double C47659 = C47403 * C47656;
    const double C47741 = C47240 * C47656;
    const double C47718 = C47710 + C47711;
    const double C47830 = C47240 * C47823;
    const double C47884 = C47881 / C47083;
    const double C47907 = C47899 + C47900;
    const double C47966 = C47240 * C47959;
    const double C48036 = C48028 + C47347;
    const double C47489 = C47486 - C47476;
    const double C47390 = C47245 * C47387;
    const double C47566 = C47403 * C47387;
    const double C47573 = C47387 * ae;
    const double C47571 = C47240 * C47387;
    const double C47570 = C47387 * ce;
    const double C1246 = 3 * (C47332 + C47349 * C47413) +
                         C47403 * (2 * C47426 + C47403 * C47450);
    const double C1383 = C47332 + C47349 * C47413 + C47450 * C47243;
    const double C1805 = C47240 * (2 * C47426 + C47403 * C47450);
    const double C2141 = 3 * (C47332 + C47349 * C47243) +
                         C47240 * (2 * C47532 + C47240 * C47551);
    const double C47663 = C47648 + C47660;
    const double C7175 = 3 * (C47422 + C47592 * C47243) +
                         C47240 * (2 * C47596 + C47240 * C47720);
    const double C47839 = C47813 + C47832;
    const double C47838 = C47831 / C47083;
    const double C47888 = C47403 * C47885;
    const double C47927 = C47885 * ae;
    const double C47925 = C47240 * C47885;
    const double C47924 = C47885 * ce;
    const double C23495 = 3 * (C47434 + C47636 * C47243) +
                          C47240 * (2 * C47735 + C47240 * C47909);
    const double C47975 = C47941 + C47968;
    const double C47974 = C47967 / C47083;
    const double C48046 = C48038 * ae;
    const double C48044 = C47240 * C48038;
    const double C48043 = C48038 * ce;
    const double C133 = (4 * (2 * C47325 + C47245 * C47337) +
                         C47245 * (3 * C47337 + C47245 * C47362)) /
                        C47208;
    const double C327 =
        (2 * C47325 + C47245 * C47337 + C47362 * C47413) / C47208;
    const double C329 = (C47403 * (3 * C47337 + C47245 * C47362)) / C47208;
    const double C47554 = -C47547;
    const double C6076 = C48597 * C1255;
    const double C47716 = -C47707;
    const double C47836 = C47829 / C47208;
    const double C6062 = (4 * (2 * C47419 + C47403 * C47435) +
                          C47403 * (3 * C47435 + C47403 * C47643)) /
                         C47208;
    const double C47912 = -C47905;
    const double C47965 = C47957 / C47208;
    const double C48041 = C48035 - C48016;
    const double C47363 = C47352 - C47361;
    const double C6073 = C113 * C1256;
    const double C47644 = C47634 - C47641;
    const double C48355 = C48351 - C48354;
    const double C48717 = C48685 / C47083;
    const double C48363 = C48359 - C48362;
    const double C48731 = C48716 / C47100;
    const double C48435 = C48430 - C48434;
    const double C48721 = C48693 / C47083;
    const double C48442 = C48438 - C48441;
    const double C48735 = C48724 / C47100;
    const double C47159 = C47157 / C47083;
    const double C47132 = C48394 - C47128;
    const double C47141 = C47137 + C48481;
    const double C47169 = C47166 - C47168;
    const double C4041 = C167 * C48477;
    const double C4035 = C165 * C48477;
    const double C9705 = C5206 * C48477;
    const double C48671 = C48477 * C48471;
    const double C48708 = C48673 + C48477;
    const double C48675 = C48484 / C47100;
    const double C48672 = C48484 * C48471;
    const double C2432 = C48737 - (C48477 * C48473) / C47083;
    const double C1946 = C169 * C1928;
    const double C1938 = C166 * C1928;
    const double C1932 = C164 * C1928;
    const double C2321 = C368 * C1928;
    const double C2313 = C370 * C1928;
    const double C7083 = C5208 * C1928;
    const double C7075 = C5205 * C1928;
    const double C23425 = C6081 * C1928;
    const double C168 = C152 + C153;
    const double C10860 = C10838 + C10839;
    const double C31825 = C31803 + C31804;
    const double C369 = C347 + C348;
    const double C11045 = C11014 + C11015;
    const double C32010 = C31979 + C31980;
    const double C5207 = C5197 + C5198;
    const double C26374 = C26363 + C26364;
    const double C37638 = C37627 + C37628;
    const double C580 = C553 + C554;
    const double C10853 = C10824 + C10825;
    const double C11241 = C11212 + C11213;
    const double C31818 = C31789 + C31790;
    const double C32206 = C32177 + C32178;
    const double C5824 = C5818 + C5819;
    const double C26372 = C26359 + C26360;
    const double C26988 = C26983 + C26984;
    const double C37636 = C37623 + C37624;
    const double C38252 = C38247 + C38248;
    const double C383 = C371 * C114;
    const double C1686 = C371 * C824;
    const double C6267 = C371 * C505;
    const double C7089 = C371 * C1928;
    const double C594 = C581 * C507;
    const double C1936 = C581 * C1930;
    const double C1050 = C1043 * C825;
    const double C2311 = C1043 * C1929;
    const double C2937 = C1043 * C506;
    const double C3627 = C1043 * C3457;
    const double C6281 = C6273 * C507;
    const double C7079 = C6273 * C1930;
    const double C184 = C176 + C177;
    const double C583 = C559 + C560;
    const double C849 = C835 + C836;
    const double C6078 = C48597 * C1262;
    const double C27228 = C10813 * C1262;
    const double C38492 = C31778 * C1262;
    const double C6264 = C48597 * C1406;
    const double C27410 = C10813 * C1406;
    const double C27402 = C48714 * C1406;
    const double C38674 = C31778 * C1406;
    const double C38666 = C48714 * C1406;
    const double C6778 = C48597 * C1812;
    const double C27224 = C48714 * C1812;
    const double C27884 = C10813 * C1812;
    const double C38488 = C48714 * C1812;
    const double C39148 = C31778 * C1812;
    const double C367 = C343 + C344;
    const double C11054 = C11032 + C11033;
    const double C32019 = C31997 + C31998;
    const double C372 = C353 + C354;
    const double C11050 = C11024 + C11025;
    const double C32015 = C31989 + C31990;
    const double C582 = C557 + C558;
    const double C11244 = C11218 + C11219;
    const double C11240 = C11210 + C11211;
    const double C32209 = C32183 + C32184;
    const double C32205 = C32175 + C32176;
    const double C585 = C563 + C564;
    const double C10854 = C10826 + C10827;
    const double C11248 = C11226 + C11227;
    const double C31819 = C31791 + C31792;
    const double C32213 = C32191 + C32192;
    const double C1044 = C1029 + C1030;
    const double C11044 = C11012 + C11013;
    const double C11750 = C11736 + C11737;
    const double C32009 = C31977 + C31978;
    const double C32715 = C32701 + C32702;
    const double C6082 = C6071 + C6072;
    const double C27235 = C27221 + C27222;
    const double C38499 = C38485 + C38486;
    const double C6274 = C6253 + C6254;
    const double C26987 = C26981 + C26982;
    const double C27413 = C27391 + C27392;
    const double C38251 = C38245 + C38246;
    const double C38677 = C38655 + C38656;
    const double C6276 = C6259 + C6260;
    const double C26373 = C26361 + C26362;
    const double C27417 = C27399 + C27400;
    const double C37637 = C37625 + C37626;
    const double C38681 = C38663 + C38664;
    const double C47274 = -C47273;
    const double C47285 = C47283 / C47249;
    const double C47513 = C47504 / C47249;
    const double C1525 = C48597 * C1260;
    const double C12263 = C10813 * C1260;
    const double C33228 = C31778 * C1260;
    const double C6074 = C48597 * C1263;
    const double C2318 = C48597 * C1403;
    const double C11739 = C48714 * C1403;
    const double C13191 = C10813 * C1403;
    const double C32704 = C48714 * C1403;
    const double C34148 = C31778 * C1403;
    const double C1691 = C48597 * C1407;
    const double C11027 = C48714 * C1407;
    const double C12473 = C10813 * C1407;
    const double C31992 = C48714 * C1407;
    const double C33438 = C31778 * C1407;
    const double C6626 = C48597 * C1813;
    const double C12261 = C48714 * C1813;
    const double C33226 = C48714 * C1813;
    const double C47616 = -C47615;
    const double C47685 = C47677 / C47249;
    const double C47859 = C47857 / C47249;
    const double C532 =
        (2 * C47325 + C47245 * C47337 +
         C47240 * (C47240 * C47362 + C47357 * ae) + C47240 * C47357 * ae) /
        C47208;
    const double C534 = (C47240 * (3 * C47337 + C47245 * C47362) +
                         (3 * C47332 + C47245 * C47357) * ae) /
                        C47208;
    const double C1015 =
        (C47240 * C47403 * C47362 + C47403 * C47357 * ae) / C47208;
    const double C120 = 4 * (2 * C47320 + C47245 * C47332) +
                        C47245 * (3 * C47332 + C47245 * C47357);
    const double C309 = 2 * C47320 + C47245 * C47332 + C47357 * C47413;
    const double C310 = C47403 * (3 * C47332 + C47245 * C47357);
    const double C515 = 2 * C47320 + C47245 * C47332 + C47357 * C47243;
    const double C516 = C47240 * (3 * C47332 + C47245 * C47357);
    const double C1007 = C47240 * C47403 * C47357;
    const double C1515 =
        2 * C47403 * C47357 + C47403 * (C47357 + C47387 * C47413);
    const double C1681 = C47240 * (C47357 + C47387 * C47413);
    const double C2440 =
        2 * C47240 * C47357 + C47240 * (C47357 + C47387 * C47243);
    const double C2324 = C48597 * C1388;
    const double C11741 = C48714 * C1388;
    const double C32706 = C48714 * C1388;
    const double C2325 = C113 * C1389;
    const double C11744 = C10816 * C1389;
    const double C32709 = C31781 * C1389;
    const double C2323 = C113 * C1377;
    const double C11740 = C10816 * C1377;
    const double C32705 = C31781 * C1377;
    const double C2150 = (2 * (C47240 * C47337 + C47332 * ae) +
                          C47240 * (C47337 + C47240 * C47536 + C47532 * ae) +
                          (C47332 + C47349 * C47243) * ae) /
                         C47208;
    const double C2151 =
        (-2 * (C47240 * C47336 + C47332 * ce)) / C47083 -
        (C47240 * (C47240 * C47535 + C47336 + C47532 * ce)) / C47083 -
        ((C47332 + C47349 * C47243) * ce) / C47083;
    const double C6272 = C48597 * C1408;
    const double C12471 = C48714 * C1408;
    const double C33436 = C48714 * C1408;
    const double C6270 = C48597 * C1396;
    const double C12467 = C48714 * C1396;
    const double C33432 = C48714 * C1396;
    const double C6271 = C113 * C1397;
    const double C12470 = C10816 * C1397;
    const double C33435 = C31781 * C1397;
    const double C6624 = C48597 * C1808;
    const double C12265 = C48714 * C1808;
    const double C33230 = C48714 * C1808;
    const double C6625 = C113 * C1809;
    const double C12260 = C10816 * C1809;
    const double C33225 = C31781 * C1809;
    const double C6075 = C113 * C1245;
    const double C6269 = C113 * C1381;
    const double C12466 = C10816 * C1381;
    const double C33431 = C31781 * C1381;
    const double C6623 = C113 * C1804;
    const double C12264 = C10816 * C1804;
    const double C33229 = C31781 * C1804;
    const double C47524 = C47344 + C47521;
    const double C47818 = C47804 / C47249;
    const double C13326 = C10816 * C2139;
    const double C34283 = C31781 * C2139;
    const double C47523 = C47520 + C47340;
    const double C47822 = C47808 / C47083;
    const double C47817 = C47803 / C47083;
    const double C2575 = (2 * (C47240 * C47423 + C47422 * ae) +
                          C47240 * (C47423 + C47240 * C47600 + C47596 * ae) +
                          (C47422 + C47592 * C47243) * ae) /
                         C47208;
    const double C2580 =
        2 * ((-(C47423 * ce) / C47083) / C47208 - (ae * C47421) / C47249 -
             (C47240 * C47590) / C47249) -
        (ae * (C47240 * C47599 + C47421 + C47596 * ce)) / C47249 -
        ((C47423 + C47240 * C47600 + C47596 * ae) * ce) / C47249 +
        C47240 * ((-(ae * C47599) / C47083) / C47208 - C47590 / C47249 -
                  (C47600 * ce) / C47249 +
                  C47240 * ((-(C47593 * ce) / C47083) / C47208 -
                            (ae * C47591) / C47249 -
                            (C47240 * C47403 * C47245 * C47288) / C47249));
    const double C2576 =
        (-2 * (C47240 * C47421 + C47422 * ce)) / C47083 -
        (C47240 * (C47240 * C47599 + C47421 + C47596 * ce)) / C47083 -
        ((C47422 + C47592 * C47243) * ce) / C47083;
    const double C6240 =
        (2 * C47419 + C47403 * C47435 +
         C47240 * (C47240 * C47643 + C47642 * ae) + C47240 * C47642 * ae) /
        C47208;
    const double C6766 = (C47240 * (3 * C47435 + C47403 * C47643) +
                          (3 * C47434 + C47403 * C47642) * ae) /
                         C47208;
    const double C6060 = 4 * (2 * C47418 + C47403 * C47434) +
                         C47403 * (3 * C47434 + C47403 * C47642);
    const double C6238 = 2 * C47418 + C47403 * C47434 + C47642 * C47243;
    const double C6764 = C47240 * (3 * C47434 + C47403 * C47642);
    const double C23841 =
        2 * C47240 * C47642 + C47240 * (C47642 + C47885 * C47243);
    const double C7662 = (2 * (C47240 * C47435 + C47434 * ae) +
                          C47240 * (C47435 + C47240 * C47739 + C47735 * ae) +
                          (C47434 + C47636 * C47243) * ae) /
                         C47208;
    const double C7663 =
        (-2 * (C47240 * C47433 + C47434 * ce)) / C47083 -
        (C47240 * (C47240 * C47738 + C47433 + C47735 * ce)) / C47083 -
        ((C47434 + C47636 * C47243) * ce) / C47083;
    const double C47696 = C47581 + C47693;
    const double C47945 = C47934 / C47249;
    const double C28721 = C10816 * C7174;
    const double C39981 = C31781 * C7174;
    const double C47695 = C47692 + C47579;
    const double C47949 = C47938 / C47083;
    const double C47944 = C47932 / C47083;
    const double C47790 = C47786 + C47773;
    const double C12981 = 4 * (2 * C47460 + C47240 * C47480) +
                          C47240 * (3 * C47480 + C47240 * C47785);
    const double C47789 = C47783 + C47770;
    const double C48026 = -C48013;
    const double C170 = C156 + C157;
    const double C10865 = C10848 + C10849;
    const double C31830 = C31813 + C31814;
    const double C373 = C355 + C356;
    const double C11059 = C11042 + C11043;
    const double C32024 = C32007 + C32008;
    const double C375 = C359 + C360;
    const double C11395 = C11390 + C11391;
    const double C32360 = C32355 + C32356;
    const double C586 = C565 + C566;
    const double C11251 = C11232 + C11233;
    const double C11247 = C11224 + C11225;
    const double C32216 = C32197 + C32198;
    const double C32212 = C32189 + C32190;
    const double C588 = C569 + C570;
    const double C10859 = C10836 + C10837;
    const double C11535 = C11528 + C11529;
    const double C31824 = C31801 + C31802;
    const double C32500 = C32493 + C32494;
    const double C1045 = C1031 + C1032;
    const double C11053 = C11030 + C11031;
    const double C11753 = C11742 + C11743;
    const double C32018 = C31995 + C31996;
    const double C32718 = C32707 + C32708;
    const double C1529 = C1522 + C1523;
    const double C1700 = C1694 + C1695;
    const double C11058 = C11040 + C11041;
    const double C32023 = C32005 + C32006;
    const double C2327 = C2315 + C2316;
    const double C11749 = C11734 + C11735;
    const double C13193 = C13186 + C13187;
    const double C32714 = C32699 + C32700;
    const double C34150 = C34143 + C34144;
    const double C2452 = C48597 * C2146;
    const double C11217 = C48714 * C2146;
    const double C13329 = C10813 * C2146;
    const double C32182 = C48714 * C2146;
    const double C34286 = C31778 * C2146;
    const double C47522 = C47519 / C47208;
    const double C1535 = C1531 * C114;
    const double C6621 = C1531 * C824;
    const double C1702 = C1698 * C825;
    const double C3637 = C1698 * C3457;
    const double C6265 = C1698 * C506;
    const double C7087 = C1698 * C1929;
    const double C6086 = C6079 + C6080;
    const double C27240 = C27231 + C27232;
    const double C38504 = C38495 + C38496;
    const double C6277 = C6261 + C6262;
    const double C27420 = C27405 + C27406;
    const double C27416 = C27397 + C27398;
    const double C38684 = C38669 + C38670;
    const double C38680 = C38661 + C38662;
    const double C6779 = C6775 + C6776;
    const double C27234 = C27219 + C27220;
    const double C27886 = C27879 + C27880;
    const double C38498 = C38483 + C38484;
    const double C39150 = C39143 + C39144;
    const double C47491 = C47488 + C47482;
    const double C7676 = C48597 * C2573;
    const double C27390 = C48714 * C2573;
    const double C28724 = C10813 * C2573;
    const double C38654 = C48714 * C2573;
    const double C39984 = C31778 * C2573;
    const double C47691 = C47684 / C47208;
    const double C47788 = C47782 - C47766;
    const double C171 = C158 + C159;
    const double C10863 = C10844 + C10845;
    const double C31828 = C31809 + C31810;
    const double C2454 = C48597 * C2156;
    const double C11221 = C48714 * C2156;
    const double C13333 = C10813 * C2156;
    const double C32186 = C48714 * C2156;
    const double C34290 = C31778 * C2156;
    const double C2453 = C113 * C2147;
    const double C11220 = C10816 * C2147;
    const double C13332 = C10815 * C2147;
    const double C32185 = C31781 * C2147;
    const double C34289 = C31780 * C2147;
    const double C47490 = C47487 + C47479;
    const double C47774 = -C47763;
    const double C7678 = C48597 * C2579;
    const double C27394 = C48714 * C2579;
    const double C28728 = C10813 * C2579;
    const double C38658 = C48714 * C2579;
    const double C39988 = C31778 * C2579;
    const double C7677 = C113 * C2574;
    const double C27393 = C10816 * C2574;
    const double C28727 = C10815 * C2574;
    const double C38657 = C31781 * C2574;
    const double C39987 = C31780 * C2574;
    const double C47291 = -C47290;
    const double C47623 = C47622 / C47083;
    const double C47709 = C47240 * C47703;
    const double C47821 = C47807 / C47249;
    const double C47861 = -C47860;
    const double C47958 = C47948 / C47249;
    const double C47396 = C47245 * C47394;
    const double C47567 = C47403 * C47394;
    const double C47572 = C47240 * C47394;
    const double C1516 =
        (2 * C47403 * C47362 + C47403 * (C47362 + C47394 * C47413)) / C47208;
    const double C1682 = (C47240 * (C47362 + C47394 * C47413) +
                          (C47357 + C47387 * C47413) * ae) /
                         C47208;
    const double C1257 = (3 * (C47337 + C47358 * C47413) +
                          C47403 * (2 * C47427 + C47403 * C47451)) /
                         C47208;
    const double C1400 =
        (C47337 + C47358 * C47413 + C47240 * (C47240 * C47451 + C47450 * ae) +
         C47240 * C47450 * ae) /
        C47208;
    const double C1810 = (C47240 * (2 * C47427 + C47403 * C47451) +
                          (2 * C47426 + C47403 * C47450) * ae) /
                         C47208;
    const double C47556 = C47240 * C47552;
    const double C47612 = C47609 + C47610;
    const double C47664 = C47650 + C47661;
    const double C47747 = C47744 + C47745;
    const double C47725 = C47240 * C47721;
    const double C47840 = C47373 + C47833;
    const double C47889 = C47403 * C47886;
    const double C47926 = C47240 * C47886;
    const double C47914 = C47240 * C47910;
    const double C47976 = C47674 + C47969;
    const double C48045 = C48039 + C48024;
    const double C47395 = C47382 - C47392;
    const double C1258 =
        (-3 * (C47356 * C47413 + C47336)) / C47083 +
        C47403 * ((-2 * C47425) / C47083 - (C47403 * C47449) / C47083);
    const double C1401 = -(C47240 * (C47240 * C47449 + C47450 * ce) +
                           C47356 * C47413 + C47336 + C47240 * C47450 * ce) /
                         C47083;
    const double C1811 =
        C47240 * ((-2 * C47425) / C47083 - (C47403 * C47449) / C47083) -
        ((2 * C47426 + C47403 * C47450) * ce) / C47083;
    const double C47555 = C47240 * C47549;
    const double C47611 = C47606 + C47607;
    const double C47662 = C47659 / C47083;
    const double C47746 = C47741 + C47742;
    const double C47724 = C47240 * C47718;
    const double C47837 = C47830 + C47367;
    const double C47887 = C47877 - C47884;
    const double C47913 = C47240 * C47907;
    const double C47973 = C47966 + C47672;
    const double C48042 = C48036 + C48021;
    const double C47492 = C47489 - C47477;
    const double C47393 = C47369 + C47390;
    const double C2306 = C47403 * C47357 + C47566 * C47243;
    const double C47574 = C47570 / C47083;
    const double C6061 = 4 * (2 * C47422 + C47403 * C47442) +
                         C47403 * (3 * C47442 + C47403 * C47663);
    const double C6239 = 2 * C47422 + C47403 * C47442 + C47663 * C47243;
    const double C6765 = C47240 * (3 * C47442 + C47403 * C47663);
    const double C12982 = 4 * (2 * C47496 + C47240 * C47516) +
                          C47240 * (3 * C47516 + C47240 * C47839);
    const double C47891 = C47870 + C47888;
    const double C47928 = C47924 / C47083;
    const double C28262 = 4 * (2 * C47584 + C47240 * C47688) +
                          C47240 * (3 * C47688 + C47240 * C47975);
    const double C48051 = C48006 + C48044;
    const double C48050 = C48043 / C47083;
    const double C163 = C48597 * C133;
    const double C366 = C48597 * C327;
    const double C720 = C48597 * C329;
    const double C47557 = C47554 / C47208;
    const double C47723 = C47716 / C47208;
    const double C47842 = C47836 - C47820;
    const double C22697 = C48597 * C6062;
    const double C47915 = C47912 / C47208;
    const double C47972 = C47965 - C47947;
    const double C48048 = C48041 - C48017;
    const double C132 =
        4 * ((-2 * C47324) / C47083 - (C47245 * C47336) / C47083) +
        C47245 * ((-3 * C47336) / C47083 + C47245 * C47363);
    const double C326 =
        (-2 * C47324) / C47083 - (C47245 * C47336) / C47083 + C47363 * C47413;
    const double C328 = C47403 * ((-3 * C47336) / C47083 + C47245 * C47363);
    const double C533 = (-2 * C47324) / C47083 - (C47245 * C47336) / C47083 +
                        C47240 * (C47240 * C47363 - (C47357 * ce) / C47083) -
                        (C47240 * C47357 * ce) / C47083;
    const double C535 = C47240 * ((-3 * C47336) / C47083 + C47245 * C47363) -
                        ((3 * C47332 + C47245 * C47357) * ce) / C47083;
    const double C1016 =
        C47240 * C47403 * C47363 - (C47403 * C47357 * ce) / C47083;
    const double C6063 =
        4 * ((-2 * C47417) / C47083 - (C47403 * C47433) / C47083) +
        C47403 * ((-3 * C47433) / C47083 + C47403 * C47644);
    const double C6241 = (-2 * C47417) / C47083 - (C47403 * C47433) / C47083 +
                         C47240 * (C47240 * C47644 - (C47642 * ce) / C47083) -
                         (C47240 * C47642 * ce) / C47083;
    const double C6767 = C47240 * ((-3 * C47433) / C47083 + C47403 * C47644) -
                         ((3 * C47434 + C47403 * C47642) * ce) / C47083;
    const double C48647 = C48355 * C48345;
    const double C48687 = C48652 + C48355;
    const double C48655 = C48363 / C47100;
    const double C48651 = C48363 * C48345;
    const double C707 = C48731 - (C48355 * C48346) / C47083;
    const double C48665 = C48435 * C48429;
    const double C48702 = C48667 + C48435;
    const double C48669 = C48442 / C47100;
    const double C48666 = C48442 * C48429;
    const double C1509 = C48735 - (C48435 * C48431) / C47083;
    const double C47161 = C47156 - C47159;
    const double C47136 = C47132 * ce;
    const double C3456 = (-C47118) / C47100 - (C47132 * de) / C47083;
    const double C47145 = C47141 * de;
    const double C4038 = C581 * C47169;
    const double C9708 = C6273 * C47169;
    const double C2135 =
        (C47169 / C47100 + (0 * ce) / C47083) / C47100 - (0 * de) / C47083;
    const double C2439 = C47169 / C47100 - (0 * de) / C47083;
    const double C3747 = C47169 / C47100 + (0 * ce) / C47083;
    const double C48705 = C48671 / C47083;
    const double C48728 = C48708 / C47100;
    const double C48729 = C48709 + C48675;
    const double C2434 = C48675 - C48482 / C47087;
    const double C48707 = C48672 / C47083;
    const double C2456 = C167 * C2432;
    const double C2446 = C165 * C2432;
    const double C7670 = C5206 * C2432;
    const double C1950 = C1938 + C1939;
    const double C178 = C168 * C48394;
    const double C571 = C168 * C48734;
    const double C840 = C168 * C48663;
    const double C1945 = C168 * C1925;
    const double C3468 = C168 * C3454;
    const double C4047 = C168 * C48477;
    const double C381 = C369 * C48394;
    const double C1027 = C369 * C48663;
    const double C2312 = C369 * C1925;
    const double C2938 = C369 * C48734;
    const double C3628 = C369 * C3454;
    const double C4204 = C369 * C48477;
    const double C7518 = C369 * C2432;
    const double C5211 = C5207 * C48394;
    const double C6257 = C5207 * C48734;
    const double C6616 = C5207 * C48663;
    const double C7082 = C5207 * C1925;
    const double C9012 = C5207 * C3454;
    const double C10727 = C5207 * C48477;
    const double C23847 = C5207 * C2432;
    const double C593 = C580 * C48723;
    const double C834 = C580 * C48481;
    const double C1935 = C580 * C1926;
    const double C3462 = C580 * C48481;
    const double C4037 = C580 * C48484;
    const double C5829 = C5824 * C48481;
    const double C6250 = C5824 * C48723;
    const double C7078 = C5824 * C1926;
    const double C9008 = C5824 * C48481;
    const double C9707 = C5824 * C48484;
    const double C604 = C583 - C596;
    const double C853 = C849 - C837;
    const double C6085 = C6077 + C6078;
    const double C27238 = C27227 + C27228;
    const double C38502 = C38491 + C38492;
    const double C6278 = C6263 + C6264;
    const double C27422 = C27409 + C27410;
    const double C27418 = C27401 + C27402;
    const double C38686 = C38673 + C38674;
    const double C38682 = C38665 + C38666;
    const double C6780 = C6777 + C6778;
    const double C27236 = C27223 + C27224;
    const double C27888 = C27883 + C27884;
    const double C38500 = C38487 + C38488;
    const double C39152 = C39147 + C39148;
    const double C379 = C367 * C48394;
    const double C1033 = C367 * C48663;
    const double C2320 = C367 * C1925;
    const double C2944 = C367 * C48734;
    const double C3632 = C367 * C3454;
    const double C4210 = C367 * C48477;
    const double C384 = C372 * C48394;
    const double C1687 = C372 * C48663;
    const double C3636 = C372 * C3454;
    const double C6266 = C372 * C48734;
    const double C7088 = C372 * C1925;
    const double C9713 = C372 * C48477;
    const double C595 = C582 * C48697;
    const double C1937 = C582 * C48697;
    const double C4039 = C582 * C4029;
    const double C597 = C585 * C48723;
    const double C838 = C585 * C48481;
    const double C1941 = C585 * C1926;
    const double C3466 = C585 * C48481;
    const double C4043 = C585 * C48484;
    const double C1051 = C1044 * C48481;
    const double C2314 = C1044 * C1926;
    const double C2940 = C1044 * C48723;
    const double C3630 = C1044 * C48481;
    const double C4206 = C1044 * C48484;
    const double C6088 = C6082 * C48394;
    const double C6774 = C6082 * C48663;
    const double C10051 = C6082 * C3454;
    const double C22820 = C6082 * C48734;
    const double C23424 = C6082 * C1925;
    const double C26115 = C6082 * C48477;
    const double C6282 = C6274 * C48697;
    const double C7080 = C6274 * C48697;
    const double C9709 = C6274 * C4029;
    const double C6284 = C6276 * C48723;
    const double C6618 = C6276 * C48481;
    const double C7084 = C6276 * C1926;
    const double C9014 = C6276 * C48481;
    const double C10729 = C6276 * C48484;
    const double C47275 = C47274 / C47208;
    const double C1530 = C1524 + C1525;
    const double C12269 = C12262 + C12263;
    const double C33234 = C33227 + C33228;
    const double C6083 = C6073 + C6074;
    const double C2328 = C2317 + C2318;
    const double C11751 = C11738 + C11739;
    const double C13195 = C13190 + C13191;
    const double C32716 = C32703 + C32704;
    const double C34152 = C34147 + C34148;
    const double C1699 = C1690 + C1691;
    const double C11051 = C11026 + C11027;
    const double C12477 = C12472 + C12473;
    const double C32016 = C31991 + C31992;
    const double C33442 = C33437 + C33438;
    const double C47617 = C47616 / C47208;
    const double C576 = C48597 * C532;
    const double C11527 = C48714 * C532;
    const double C32492 = C48714 * C532;
    const double C846 = C48597 * C534;
    const double C10847 = C48714 * C534;
    const double C31812 = C48714 * C534;
    const double C1040 = C48597 * C1015;
    const double C11389 = C48714 * C1015;
    const double C32354 = C48714 * C1015;
    const double C162 = C113 * C120;
    const double C365 = C113 * C309;
    const double C719 = C113 * C310;
    const double C575 = C113 * C515;
    const double C11526 = C10816 * C515;
    const double C32491 = C31781 * C515;
    const double C845 = C113 * C516;
    const double C10846 = C10816 * C516;
    const double C31811 = C31781 * C516;
    const double C1039 = C113 * C1007;
    const double C11388 = C10816 * C1007;
    const double C32353 = C31781 * C1007;
    const double C2329 = C2323 + C2324;
    const double C11752 = C11740 + C11741;
    const double C32717 = C32705 + C32706;
    const double C2462 = C48597 * C2150;
    const double C11231 = C48714 * C2150;
    const double C32196 = C48714 * C2150;
    const double C2463 = C113 * C2151;
    const double C11234 = C10816 * C2151;
    const double C32199 = C31781 * C2151;
    const double C6280 = C6271 + C6272;
    const double C12476 = C12470 + C12471;
    const double C33441 = C33435 + C33436;
    const double C6630 = C6625 + C6626;
    const double C12268 = C12260 + C12261;
    const double C33233 = C33225 + C33226;
    const double C6084 = C6075 + C6076;
    const double C6279 = C6269 + C6270;
    const double C12474 = C12466 + C12467;
    const double C33439 = C33431 + C33432;
    const double C6629 = C6623 + C6624;
    const double C12270 = C12264 + C12265;
    const double C33235 = C33229 + C33230;
    const double C47527 = C47524 + C47518;
    const double C47526 = C47523 + C47515;
    const double C47828 = -C47817;
    const double C7524 = C48597 * C2575;
    const double C13185 = C48714 * C2575;
    const double C34142 = C48714 * C2575;
    const double C7526 = C48597 * C2580;
    const double C13189 = C48714 * C2580;
    const double C34146 = C48714 * C2580;
    const double C7525 = C113 * C2576;
    const double C13188 = C10816 * C2576;
    const double C34145 = C31781 * C2576;
    const double C22824 = C48597 * C6240;
    const double C27878 = C48714 * C6240;
    const double C39142 = C48714 * C6240;
    const double C23192 = C48597 * C6766;
    const double C27230 = C48714 * C6766;
    const double C38494 = C48714 * C6766;
    const double C22696 = C113 * C6060;
    const double C22823 = C113 * C6238;
    const double C27877 = C10816 * C6238;
    const double C39141 = C31781 * C6238;
    const double C23191 = C113 * C6764;
    const double C27229 = C10816 * C6764;
    const double C38493 = C31781 * C6764;
    const double C23853 = C48597 * C7662;
    const double C27404 = C48714 * C7662;
    const double C38668 = C48714 * C7662;
    const double C23854 = C113 * C7663;
    const double C27407 = C10816 * C7663;
    const double C38671 = C31781 * C7663;
    const double C47699 = C47696 + C47690;
    const double C47698 = C47695 + C47687;
    const double C47956 = -C47944;
    const double C47794 = C47240 * C47790;
    const double C48007 = 3 * C47790;
    const double C47993 = C47790 * ce;
    const double C47793 = C47240 * C47789;
    const double C47999 = -3 * C47789;
    const double C47992 = ae * C47789;
    const double C48034 = C48026 / C47208;
    const double C180 = C170 * C114;
    const double C843 = C170 * C824;
    const double C385 = C373 * C114;
    const double C1692 = C373 * C824;
    const double C387 = C375 * C114;
    const double C1037 = C375 * C824;
    const double C598 = C586 * C507;
    const double C1942 = C586 * C1930;
    const double C4044 = C586 * C47169;
    const double C600 = C588 * C506;
    const double C839 = C588 * C825;
    const double C1944 = C588 * C1929;
    const double C3467 = C588 * C3457;
    const double C1052 = C1045 * C825;
    const double C2319 = C1045 * C1929;
    const double C2943 = C1045 * C506;
    const double C3631 = C1045 * C3457;
    const double C1533 = C1529 * C114;
    const double C1704 = C1700 * C825;
    const double C3641 = C1700 * C3457;
    const double C2331 = C2327 * C1930;
    const double C2941 = C2327 * C507;
    const double C4207 = C2327 * C47169;
    const double C2465 = C2451 + C2452;
    const double C11243 = C11216 + C11217;
    const double C13335 = C13328 + C13329;
    const double C32208 = C32181 + C32182;
    const double C34292 = C34285 + C34286;
    const double C47525 = C47522 - C47512;
    const double C6092 = C6086 * C114;
    const double C23189 = C6086 * C824;
    const double C6285 = C6277 * C507;
    const double C7085 = C6277 * C1930;
    const double C10730 = C6277 * C47169;
    const double C6781 = C6779 * C825;
    const double C10052 = C6779 * C3457;
    const double C22819 = C6779 * C506;
    const double C23423 = C6779 * C1929;
    const double C2144 =
        (3 * (C47316 + C47240 * C47464 + C47460 * ae) +
         C47240 * (2 * C47464 + C47240 * C47491 + C47480 * ae) +
         (2 * C47460 + C47240 * C47480) * ae) /
        C47208;
    const double C7679 = C7675 + C7676;
    const double C27412 = C27389 + C27390;
    const double C28730 = C28723 + C28724;
    const double C38676 = C38653 + C38654;
    const double C39990 = C39983 + C39984;
    const double C47694 = C47691 - C47676;
    const double C47792 = C47788 - C47767;
    const double C181 = C171 * C48394;
    const double C844 = C171 * C48663;
    const double C3472 = C171 * C3454;
    const double C2466 = C2453 + C2454;
    const double C11245 = C11220 + C11221;
    const double C13337 = C13332 + C13333;
    const double C32210 = C32185 + C32186;
    const double C34294 = C34289 + C34290;
    const double C2145 =
        (-3 * (C47240 * C47463 + C47315 + C47460 * ce)) / C47083 +
        C47240 * ((-2 * C47463) / C47083 - (C47240 * C47490) / C47083 -
                  (C47480 * ce) / C47083) -
        ((2 * C47460 + C47240 * C47480) * ce) / C47083;
    const double C47781 = C47774 / C47208;
    const double C7680 = C7677 + C7678;
    const double C27414 = C27393 + C27394;
    const double C28732 = C28727 + C28728;
    const double C38678 = C38657 + C38658;
    const double C39992 = C39987 + C39988;
    const double C47292 = C47291 / C47208;
    const double C47624 = -C47623;
    const double C47717 = C47709 / C47249;
    const double C47862 = C47861 / C47208;
    const double C47398 = C47372 + C47396;
    const double C2307 =
        (C47403 * C47362 + C47240 * (C47240 * C47567 + C47566 * ae) +
         C47240 * C47566 * ae) /
        C47208;
    const double C47575 = C47572 + C47573;
    const double C47559 = C47358 + C47556;
    const double C2577 = (2 * (C47240 * C47427 + C47426 * ae) +
                          C47240 * (C47427 + C47240 * C47612 + C47608 * ae) +
                          (C47426 + C47604 * C47243) * ae) /
                         C47208;
    const double C6064 = (4 * (2 * C47423 + C47403 * C47443) +
                          C47403 * (3 * C47443 + C47403 * C47664)) /
                         C47208;
    const double C6242 =
        (2 * C47423 + C47403 * C47443 +
         C47240 * (C47240 * C47664 + C47663 * ae) + C47240 * C47663 * ae) /
        C47208;
    const double C6768 = (C47240 * (3 * C47443 + C47403 * C47664) +
                          (3 * C47442 + C47403 * C47663) * ae) /
                         C47208;
    const double C7664 = (2 * (C47240 * C47443 + C47442 * ae) +
                          C47240 * (C47443 + C47240 * C47747 + C47743 * ae) +
                          (C47442 + C47657 * C47243) * ae) /
                         C47208;
    const double C47728 = C47593 + C47725;
    const double C47844 = C47840 + C47827;
    const double C47892 = C47873 + C47889;
    const double C47929 = C47926 + C47927;
    const double C47917 = C47637 + C47914;
    const double C47980 = C47976 + C47963;
    const double C48052 = C47240 * C48045;
    const double C47397 = C47245 * C47395;
    const double C47565 = C47403 * C47395;
    const double C47569 = C47240 * C47395;
    const double C1517 =
        2 * C47403 * C47363 + C47403 * (C47363 + C47395 * C47413);
    const double C1683 = C47240 * (C47363 + C47395 * C47413) -
                         ((C47357 + C47387 * C47413) * ce) / C47083;
    const double C47558 = C47555 + C47356;
    const double C2578 =
        (-2 * (C47240 * C47425 + C47426 * ce)) / C47083 -
        (C47240 * (C47240 * C47611 + C47425 + C47608 * ce)) / C47083 -
        ((C47426 + C47604 * C47243) * ce) / C47083;
    const double C47665 = C47652 - C47662;
    const double C7665 =
        (-2 * (C47240 * C47441 + C47442 * ce)) / C47083 -
        (C47240 * (C47240 * C47746 + C47441 + C47743 * ce)) / C47083 -
        ((C47442 + C47657 * C47243) * ce) / C47083;
    const double C47727 = C47724 + C47591;
    const double C47843 = C47837 + C47824;
    const double C47890 = C47403 * C47887;
    const double C47923 = C47240 * C47887;
    const double C47916 = C47913 + C47635;
    const double C47979 = C47973 + C47960;
    const double C48049 = C47240 * C48042;
    const double C2155 =
        3 * ((-(ae * C47463) / C47083) / C47208 - C47253 / C47249 -
             (C47464 * ce) / C47249 + C47240 * C47492) +
        (((-2 * C47463) / C47083 - (C47240 * C47490) / C47083 -
          (C47480 * ce) / C47083) *
         ae) /
            C47208 -
        ((2 * C47464 + C47240 * C47491 + C47480 * ae) * ce) / C47249 +
        C47240 * (2 * C47492 - (ae * C47490) / C47249 - (C47491 * ce) / C47249 +
                  C47240 * ((-(ae * C47478) / C47083) / C47208 - C47267 -
                            (C47481 * ce) / C47249 +
                            C47240 * ((-(C47333 * ce) / C47083) / C47208 -
                                      (ae * C47331) / C47249 -
                                      (C47240 * C47271) / C47249)));
    const double C121 = 5 * (3 * C47332 + C47245 * C47357) +
                        C47245 * (4 * C47357 + C47245 * C47393);
    const double C311 = 3 * C47332 + C47245 * C47357 + C47393 * C47413;
    const double C517 = 3 * C47332 + C47245 * C47357 + C47393 * C47243;
    const double C711 = C47403 * (4 * C47357 + C47245 * C47393);
    const double C826 = C47240 * (4 * C47357 + C47245 * C47393);
    const double C1008 = C47240 * C47403 * C47393;
    const double C22687 = 5 * (3 * C47434 + C47403 * C47642) +
                          C47403 * (4 * C47642 + C47403 * C47891);
    const double C22813 = 3 * C47434 + C47403 * C47642 + C47891 * C47243;
    const double C23183 = C47240 * (4 * C47642 + C47403 * C47891);
    const double C44492 = 5 * (3 * C47480 + C47240 * C47785) +
                          C47240 * (4 * C47785 + C47240 * C48051);
    const double C47560 = C47557 - C47548;
    const double C47726 = C47723 - C47708;
    const double C47846 = C47842 - C47821;
    const double C47918 = C47915 - C47906;
    const double C47978 = C47972 - C47958;
    const double C48053 = C47240 * C48048;
    const double C160 = C113 * C132;
    const double C363 = C113 * C326;
    const double C717 = C113 * C328;
    const double C577 = C113 * C533;
    const double C11530 = C10816 * C533;
    const double C32495 = C31781 * C533;
    const double C847 = C113 * C535;
    const double C10842 = C10816 * C535;
    const double C31807 = C31781 * C535;
    const double C1041 = C113 * C1016;
    const double C11384 = C10816 * C1016;
    const double C32349 = C31781 * C1016;
    const double C22694 = C113 * C6063;
    const double C22825 = C113 * C6241;
    const double C27881 = C10816 * C6241;
    const double C39145 = C31781 * C6241;
    const double C23193 = C113 * C6767;
    const double C27225 = C10816 * C6767;
    const double C38489 = C31781 * C6767;
    const double C48683 = C48647 / C47083;
    const double C48718 = C48687 / C47100;
    const double C48719 = C48689 + C48655;
    const double C709 = C48655 - C48361 / C47087;
    const double C48686 = C48651 / C47083;
    const double C48699 = C48665 / C47083;
    const double C48725 = C48702 / C47100;
    const double C48726 = C48703 + C48669;
    const double C1511 = C48669 - C48440 / C47087;
    const double C48701 = C48666 / C47083;
    const double C47140 = C47136 / C47083;
    const double C3471 = C170 * C3456;
    const double C3469 = C169 * C3456;
    const double C3463 = C166 * C3456;
    const double C3459 = C164 * C3456;
    const double C3639 = C373 * C3456;
    const double C3635 = C371 * C3456;
    const double C3633 = C368 * C3456;
    const double C3629 = C370 * C3456;
    const double C3912 = C375 * C3456;
    const double C9017 = C1531 * C3456;
    const double C9013 = C5208 * C3456;
    const double C9005 = C5205 * C3456;
    const double C10050 = C6081 * C3456;
    const double C25598 = C6086 * C3456;
    const double C47151 = C47145 / C47083;
    const double C48741 = C48705 + C48737;
    const double C2433 = C48728 - (C48484 * C48473) / C47083;
    const double C3754 = C582 * C48729;
    const double C10189 = C6274 * C48729;
    const double C2129 = C48729 / C47100 - C48482 / C48690;
    const double C2450 = C582 * C2434;
    const double C7674 = C6274 * C2434;
    const double C48738 = C48707 + C48728;
    const double C1951 = C1950 - C1940;
    const double C185 = C178 + C179;
    const double C850 = C840 + C841;
    const double C5201 = C381 + C382;
    const double C5195 = C382 + C381;
    const double C5821 = C1027 + C1028;
    const double C5820 = C1028 + C1027;
    const double C7378 = C2312 + C2313;
    const double C7377 = C2313 + C2312;
    const double C8138 = C2938 + C2939;
    const double C8137 = C2939 + C2938;
    const double C22060 = C5212 + C5211;
    const double C22818 = C6258 + C6257;
    const double C23081 = C6617 + C6616;
    const double C23422 = C7083 + C7082;
    const double C6091 = C6085 * C48394;
    const double C23190 = C6085 * C48663;
    const double C25599 = C6085 * C3454;
    const double C6286 = C6278 * C48697;
    const double C7086 = C6278 * C48697;
    const double C10731 = C6278 * C4029;
    const double C23851 = C6278 * C2434;
    const double C25708 = C6278 * C48729;
    const double C6782 = C6780 * C48481;
    const double C10053 = C6780 * C48481;
    const double C22822 = C6780 * C48723;
    const double C23426 = C6780 * C1926;
    const double C26117 = C6780 * C48484;
    const double C391 = C379 + C380;
    const double C5203 = C380 + C379;
    const double C1046 = C1033 + C1034;
    const double C5822 = C1034 + C1033;
    const double C5202 = C383 + C384;
    const double C5196 = C384 + C383;
    const double C6620 = C1686 + C1687;
    const double C6619 = C1687 + C1686;
    const double C605 = C604 - C597;
    const double C857 = C853 - C838;
    const double C22692 = C6088 + C6087;
    const double C23188 = C6774 + C6773;
    const double C47276 = C47275 - C47267;
    const double C1534 = C1530 * C48394;
    const double C6622 = C1530 * C48663;
    const double C9018 = C1530 * C3454;
    const double C6089 = C6083 * C48394;
    const double C2332 = C2328 * C48697;
    const double C2942 = C2328 * C48697;
    const double C4208 = C2328 * C4029;
    const double C7522 = C2328 * C2434;
    const double C9164 = C2328 * C48729;
    const double C1703 = C1699 * C48481;
    const double C3638 = C1699 * C48481;
    const double C6268 = C1699 * C48723;
    const double C7090 = C1699 * C1926;
    const double C9715 = C1699 * C48484;
    const double C47618 = C47617 - C47267;
    const double C173 = C162 + C163;
    const double C378 = C365 + C366;
    const double C722 = C719 + C720;
    const double C590 = C575 + C576;
    const double C11534 = C11526 + C11527;
    const double C32499 = C32491 + C32492;
    const double C851 = C845 + C846;
    const double C10864 = C10846 + C10847;
    const double C31829 = C31811 + C31812;
    const double C1048 = C1039 + C1040;
    const double C11394 = C11388 + C11389;
    const double C32359 = C32353 + C32354;
    const double C2333 = C2329 * C1930;
    const double C2947 = C2329 * C507;
    const double C4213 = C2329 * C47169;
    const double C2467 = C2461 + C2462;
    const double C11250 = C11230 + C11231;
    const double C32215 = C32195 + C32196;
    const double C6288 = C6280 * C48697;
    const double C7092 = C6280 * C48697;
    const double C9717 = C6280 * C4029;
    const double C6634 = C6630 * C48481;
    const double C9020 = C6630 * C48481;
    const double C6090 = C6084 * C114;
    const double C6287 = C6279 * C507;
    const double C7091 = C6279 * C1930;
    const double C9716 = C6279 * C47169;
    const double C6633 = C6629 * C825;
    const double C9019 = C6629 * C3457;
    const double C2148 =
        (3 * (C47325 + C47240 * C47500 + C47496 * ae) +
         C47240 * (2 * C47500 + C47240 * C47527 + C47516 * ae) +
         (2 * C47496 + C47240 * C47516) * ae) /
        C47208;
    const double C2149 =
        (-3 * (C47240 * C47499 + C47324 + C47496 * ce)) / C47083 +
        C47240 * ((-2 * C47499) / C47083 - (C47240 * C47526) / C47083 -
                  (C47516 * ce) / C47083) -
        ((2 * C47496 + C47240 * C47516) * ce) / C47083;
    const double C47835 = C47828 / C47208;
    const double C7527 = C7523 + C7524;
    const double C13192 = C13184 + C13185;
    const double C34149 = C34141 + C34142;
    const double C7528 = C7525 + C7526;
    const double C13194 = C13188 + C13189;
    const double C34151 = C34145 + C34146;
    const double C22701 = C22696 + C22697;
    const double C22828 = C22823 + C22824;
    const double C27885 = C27877 + C27878;
    const double C39149 = C39141 + C39142;
    const double C23196 = C23191 + C23192;
    const double C27239 = C27229 + C27230;
    const double C38503 = C38493 + C38494;
    const double C23856 = C23852 + C23853;
    const double C27419 = C27403 + C27404;
    const double C38683 = C38667 + C38668;
    const double C7176 =
        (3 * (C47419 + C47240 * C47588 + C47584 * ae) +
         C47240 * (2 * C47588 + C47240 * C47699 + C47688 * ae) +
         (2 * C47584 + C47240 * C47688) * ae) /
        C47208;
    const double C7177 =
        (-3 * (C47240 * C47587 + C47417 + C47584 * ce)) / C47083 +
        C47240 * ((-2 * C47587) / C47083 - (C47240 * C47698) / C47083 -
                  (C47688 * ce) / C47083) -
        ((2 * C47584 + C47240 * C47688) * ce) / C47083;
    const double C47964 = C47956 / C47208;
    const double C47797 = C47760 + C47794;
    const double C48012 = C47993 / C47249;
    const double C47796 = C47793 / C47083;
    const double C48018 = C47999 / C47083;
    const double C48011 = C47992 / C47249;
    const double C48040 = C48034 - C47282;
    const double C2469 = C2465 * C2439;
    const double C3755 = C2465 * C3747;
    const double C47528 = C47525 - C47513;
    const double C7681 = C7679 * C2439;
    const double C10190 = C7679 * C3747;
    const double C47697 = C47694 - C47685;
    const double C47795 = C47240 * C47792;
    const double C47991 = 2 * C47792;
    const double C186 = C180 + C181;
    const double C2470 = C2466 * C48710;
    const double C3756 = C2466 * C48710;
    const double C47787 = C47781 - C47267;
    const double C7682 = C7680 * C48710;
    const double C10191 = C7680 * C48710;
    const double C47293 = C47292 - C47282;
    const double C47625 = C47624 / C47208;
    const double C47863 = C47862 - C47282;
    const double C134 = (5 * (3 * C47337 + C47245 * C47362) +
                         C47245 * (4 * C47362 + C47245 * C47398)) /
                        C47208;
    const double C330 =
        (3 * C47337 + C47245 * C47362 + C47398 * C47413) / C47208;
    const double C536 =
        (3 * C47337 + C47245 * C47362 +
         C47240 * (C47240 * C47398 + C47393 * ae) + C47240 * C47393 * ae) /
        C47208;
    const double C712 = (C47403 * (4 * C47362 + C47245 * C47398)) / C47208;
    const double C827 = (C47240 * (4 * C47362 + C47245 * C47398) +
                         (4 * C47357 + C47245 * C47393) * ae) /
                        C47208;
    const double C1017 =
        (C47240 * C47403 * C47398 + C47403 * C47393 * ae) / C47208;
    const double C2441 = (2 * (C47240 * C47362 + C47357 * ae) +
                          C47240 * (C47362 + C47240 * C47575 + C47571 * ae) +
                          (C47357 + C47387 * C47243) * ae) /
                         C47208;
    const double C47562 = C47559 + C47553;
    const double C47731 = C47728 + C47722;
    const double C47848 = C47240 * C47844;
    const double C22688 = (5 * (3 * C47435 + C47403 * C47643) +
                           C47403 * (4 * C47643 + C47403 * C47892)) /
                          C47208;
    const double C22814 =
        (3 * C47435 + C47403 * C47643 +
         C47240 * (C47240 * C47892 + C47891 * ae) + C47240 * C47891 * ae) /
        C47208;
    const double C23184 = (C47240 * (4 * C47643 + C47403 * C47892) +
                           (4 * C47642 + C47403 * C47891) * ae) /
                          C47208;
    const double C23842 = (2 * (C47240 * C47643 + C47642 * ae) +
                           C47240 * (C47643 + C47240 * C47929 + C47925 * ae) +
                           (C47642 + C47885 * C47243) * ae) /
                          C47208;
    const double C47920 = C47917 + C47911;
    const double C47983 = C47240 * C47980;
    const double C48055 = C48008 + C48052;
    const double C47399 = C47375 + C47397;
    const double C2308 = C47403 * C47363 +
                         C47240 * (C47240 * C47565 - (C47566 * ce) / C47083) -
                         (C47240 * C47566 * ce) / C47083;
    const double C47576 = C47569 - C47574;
    const double C47561 = C47558 + C47550;
    const double C6065 =
        4 * ((-2 * C47421) / C47083 - (C47403 * C47441) / C47083) +
        C47403 * ((-3 * C47441) / C47083 + C47403 * C47665);
    const double C6243 = (-2 * C47421) / C47083 - (C47403 * C47441) / C47083 +
                         C47240 * (C47240 * C47665 - (C47663 * ce) / C47083) -
                         (C47240 * C47663 * ce) / C47083;
    const double C6769 = C47240 * ((-3 * C47441) / C47083 + C47403 * C47665) -
                         ((3 * C47442 + C47403 * C47663) * ce) / C47083;
    const double C47730 = C47727 + C47719;
    const double C47847 = C47240 * C47843;
    const double C47893 = C47876 + C47890;
    const double C47930 = C47923 - C47928;
    const double C47919 = C47916 + C47908;
    const double C47982 = C47240 * C47979;
    const double C48054 = C48049 / C47083;
    const double C47729 = C47726 - C47717;
    const double C47849 = C47240 * C47846;
    const double C47981 = C47240 * C47978;
    const double C48739 = C48683 + C48731;
    const double C708 = C48718 - (C48363 * C48346) / C47083;
    const double C111 = C48719 / C47100 - C48361 / C48690;
    const double C48732 = C48686 + C48718;
    const double C48740 = C48699 + C48735;
    const double C1510 = C48725 - (C48442 * C48431) / C47083;
    const double C1238 = C48726 / C47100 - C48440 / C48690;
    const double C48736 = C48701 + C48725;
    const double C47144 = C47140 - C47121;
    const double C3476 = C3468 + C3469;
    const double C3475 = C3463 + C3464;
    const double C9016 = C3635 + C3636;
    const double C9015 = C3636 + C3635;
    const double C3911 = C3632 + C3633;
    const double C9361 = C3633 + C3632;
    const double C9010 = C3628 + C3629;
    const double C9009 = C3629 + C3628;
    const double C24848 = C9013 + C9012;
    const double C25597 = C10051 + C10050;
    const double C3758 = C167 * C48741;
    const double C3750 = C165 * C48741;
    const double C9160 = C369 * C48741;
    const double C10185 = C5206 * C48741;
    const double C25704 = C5207 * C48741;
    const double C2126 =
        (C48734 + 2 * C48477) / C47100 - (C48741 * C48473) / C47083;
    const double C2458 = C585 * C2433;
    const double C2448 = C580 * C2433;
    const double C7520 = C1044 * C2433;
    const double C7672 = C5824 * C2433;
    const double C23849 = C6276 * C2433;
    const double C3760 = C585 * C48738;
    const double C3752 = C580 * C48738;
    const double C9162 = C1044 * C48738;
    const double C10187 = C5824 * C48738;
    const double C25706 = C6276 * C48738;
    const double C2127 =
        (C48723 + 2 * C48484 + C48741) / C47100 - (C48738 * C48473) / C47083;
    const double C2128 = (C48697 + C48481 / C47083 + C48738) / C47100 -
                         (C48729 * C48473) / C47083;
    const double C1952 = C1951 - C1941;
    const double C854 = C839 - C850;
    const double C5826 = C1050 - C5821;
    const double C5825 = C5820 - C1050;
    const double C7380 = C2311 - C7378;
    const double C7379 = C7377 - C2311;
    const double C8140 = C2937 - C8138;
    const double C8139 = C8137 - C2937;
    const double C22063 = C22060 * C48331;
    const double C22827 = C22818 - C6283;
    const double C23083 = C23081 - C6615;
    const double C23429 = C23422 - C7081;
    const double C22693 = C6092 + C6091;
    const double C1056 = C1052 - C1046;
    const double C5827 = C5822 - C1052;
    const double C22061 = C5196 * C48331;
    const double C6628 = C6620 - C1702;
    const double C6627 = C1702 - C6619;
    const double C606 = C605 + C598;
    const double C22698 = C22692 * C48331;
    const double C23195 = C6781 - C23188;
    const double C141 =
        4 * ((-2 * C47245 * C47262) / C47249 + C47245 * C47276) +
        C47245 *
            (3 * C47276 +
             C47245 * ((-2 * C47245 * C47271) / C47249 +
                       C47245 * ((-((C47265 * C47266 +
                                     C47243 * bs[7] * std::pow(C47239, 7)) *
                                    C47241 * C47258) /
                                  C47083) /
                                     C47208 -
                                 C47271 / C47249)));
    const double C337 = (-(C47262 * C47258) / C47083) / C47208 -
                        C47253 / C47249 + C47276 * std::pow(yP - yQ, 2);
    const double C338 =
        (yP - yQ) * ((-2 * C47245 * C47262) / C47249 + C47245 * C47276);
    const double C543 = (-(C47262 * C47258) / C47083) / C47208 -
                        C47253 / C47249 -
                        (ae * (C47240 * C47336 + C47332 * ce)) / C47249 -
                        ((C47240 * C47337 + C47332 * ae) * ce) / C47249 +
                        C47240 * ((-(C47337 * ce) / C47083) / C47208 -
                                  (ae * C47336) / C47249 + C47240 * C47276);
    const double C544 =
        (((-2 * C47324) / C47083 - (C47245 * C47336) / C47083) * ae) / C47208 -
        ((2 * C47325 + C47245 * C47337) * ce) / C47249 +
        C47240 * ((-2 * C47245 * C47262) / C47249 + C47245 * C47276);
    const double C1021 = (-(C47403 * C47337 * ce) / C47083) / C47208 -
                         (ae * C47403 * C47336) / C47249 +
                         C47240 * C47403 * C47276;
    const double C6420 = C1534 + C1535;
    const double C6419 = C1535 + C1534;
    const double C6066 =
        4 * ((-2 * C47578) / C47249 + C47403 * C47618) +
        C47403 * (3 * C47618 +
                  C47403 * ((-2 * C47403 * C47271) / C47249 +
                            C47403 * ((-(C47288 * C47413) / C47083) / C47208 -
                                      C47282)));
    const double C6244 =
        (-2 * C47578) / C47249 + C47403 * C47618 +
        ((C47240 * C47644 - (C47642 * ce) / C47083) * ae) / C47208 -
        ((C47240 * C47643 + C47642 * ae) * ce) / C47249 +
        C47240 * ((C47644 * ae) / C47208 - (C47643 * ce) / C47249 +
                  C47240 * ((-2 * C47403 * C47271) / C47249 +
                            C47403 * ((-(C47288 * C47413) / C47083) / C47208 -
                                      C47282)));
    const double C6770 =
        (((-3 * C47433) / C47083 + C47403 * C47644) * ae) / C47208 -
        ((3 * C47435 + C47403 * C47643) * ce) / C47249 +
        C47240 * (3 * C47618 +
                  C47403 * ((-2 * C47403 * C47271) / C47249 +
                            C47403 * ((-(C47288 * C47413) / C47083) / C47208 -
                                      C47282)));
    const double C7666 =
        2 * ((-(C47435 * ce) / C47083) / C47208 - (ae * C47433) / C47249 +
             C47240 * C47618) -
        (ae * (C47240 * C47738 + C47433 + C47735 * ce)) / C47249 -
        ((C47435 + C47240 * C47739 + C47735 * ae) * ce) / C47249 +
        C47240 *
            (C47618 - (ae * C47738) / C47249 - (C47739 * ce) / C47249 +
             C47240 *
                 ((-(C47637 * ce) / C47083) / C47208 - (ae * C47635) / C47249 +
                  C47240 * ((-(C47288 * C47413) / C47083) / C47208 - C47282)));
    const double C183 = C173 * C114;
    const double C390 = C378 * C114;
    const double C724 = C722 * C114;
    const double C602 = C590 * C507;
    const double C1948 = C590 * C1930;
    const double C4050 = C590 * C47169;
    const double C855 = C851 * C825;
    const double C3473 = C851 * C3457;
    const double C1054 = C1048 * C825;
    const double C3914 = C1048 * C3457;
    const double C2471 = C2467 * C2439;
    const double C3763 = C2467 * C3747;
    const double C13327 = C48714 * C2148;
    const double C34284 = C48714 * C2148;
    const double C13330 = C10816 * C2149;
    const double C34287 = C31781 * C2149;
    const double C47841 = C47835 - C47621;
    const double C7529 = C7527 * C2439;
    const double C9165 = C7527 * C3747;
    const double C7530 = C7528 * C48710;
    const double C9166 = C7528 * C48710;
    const double C22703 = C22701 * C114;
    const double C22831 = C22828 * C507;
    const double C23427 = C22828 * C1930;
    const double C26118 = C22828 * C47169;
    const double C23199 = C23196 * C825;
    const double C25600 = C23196 * C3457;
    const double C23858 = C23856 * C2439;
    const double C25709 = C23856 * C3747;
    const double C28722 = C48714 * C7176;
    const double C39982 = C48714 * C7176;
    const double C28725 = C10816 * C7177;
    const double C39985 = C31781 * C7177;
    const double C47971 = C47964 - C47933;
    const double C47800 = C47797 + C47780;
    const double C47799 = C47768 - C47796;
    const double C48047 = C48040 - C48014;
    const double C2157 =
        3 * ((-(ae * C47499) / C47083) / C47208 - C47410 / C47249 -
             (C47500 * ce) / C47249 + C47240 * C47528) +
        (((-2 * C47499) / C47083 - (C47240 * C47526) / C47083 -
          (C47516 * ce) / C47083) *
         ae) /
            C47208 -
        ((2 * C47500 + C47240 * C47527 + C47516 * ae) * ce) / C47249 +
        C47240 * (2 * C47528 - (ae * C47526) / C47249 - (C47527 * ce) / C47249 +
                  C47240 * ((-(ae * C47514) / C47083) / C47208 -
                            C47278 / C47249 - (C47517 * ce) / C47249 +
                            C47240 * ((-(C47373 * ce) / C47083) / C47208 -
                                      (ae * C47367) / C47249 -
                                      (C47240 * C47245 * C47288) / C47249)));
    const double C7180 =
        3 * ((-(ae * C47587) / C47083) / C47208 - C47578 / C47249 -
             (C47588 * ce) / C47249 + C47240 * C47697) +
        (((-2 * C47587) / C47083 - (C47240 * C47698) / C47083 -
          (C47688 * ce) / C47083) *
         ae) /
            C47208 -
        ((2 * C47588 + C47240 * C47699 + C47688 * ae) * ce) / C47249 +
        C47240 * (2 * C47697 - (ae * C47698) / C47249 - (C47699 * ce) / C47249 +
                  C47240 * ((-(ae * C47686) / C47083) / C47208 -
                            C47671 / C47249 - (C47689 * ce) / C47249 +
                            C47240 * ((-(C47674 * ce) / C47083) / C47208 -
                                      (ae * C47672) / C47249 -
                                      (C47240 * C47403 * C47288) / C47249)));
    const double C48025 = C47991 - C48011;
    const double C47791 = C47787 - C47764;
    const double C47294 = C47245 * C47293;
    const double C47540 = C47240 * C47293;
    const double C47602 = C47403 * C47293;
    const double C1259 =
        2 * C47403 * C47276 + C47403 * (C47276 + C47293 * std::pow(C47403, 2));
    const double C1264 =
        3 * (C47276 + C47293 * C47413) +
        C47403 *
            (2 * C47403 * C47293 +
             C47403 *
                 (C47293 +
                  ((-((C47280 * C47281 + C47243 * bs[8] * std::pow(C47236, 8)) *
                      C47241 * C47258) /
                    C47083) /
                       C47208 -
                   C47288 / C47249) *
                      C47413));
    const double C1404 =
        C47403 * C47276 - (ae * (C47240 * C47425 + C47426 * ce)) / C47249 -
        ((C47240 * C47427 + C47426 * ae) * ce) / C47249 +
        C47240 * ((-(C47427 * ce) / C47083) / C47208 - (ae * C47425) / C47249 +
                  C47240 * C47403 * C47293);
    const double C1409 =
        (-((C47337 + C47358 * C47413) * ce) / C47083) / C47208 -
        (ae * (C47356 * C47413 + C47336)) / C47249 +
        C47240 * (C47276 + C47293 * C47413);
    const double C1410 =
        C47276 + C47293 * C47413 -
        (ae * (C47240 * C47449 + C47450 * ce)) / C47249 -
        ((C47240 * C47451 + C47450 * ae) * ce) / C47249 +
        C47240 *
            ((-(C47451 * ce) / C47083) / C47208 - (ae * C47449) / C47249 +
             C47240 *
                 (C47293 +
                  ((-((C47280 * C47281 + C47243 * bs[8] * std::pow(C47236, 8)) *
                      C47241 * C47258) /
                    C47083) /
                       C47208 -
                   C47288 / C47249) *
                      C47413));
    const double C1814 =
        (((-2 * C47425) / C47083 - (C47403 * C47449) / C47083) * ae) / C47208 -
        ((2 * C47427 + C47403 * C47451) * ce) / C47249 +
        C47240 *
            (2 * C47403 * C47293 +
             C47403 *
                 (C47293 +
                  ((-((C47280 * C47281 + C47243 * bs[8] * std::pow(C47236, 8)) *
                      C47241 * C47258) /
                    C47083) /
                       C47208 -
                   C47288 / C47249) *
                      C47413));
    const double C2158 =
        2 * ((-(C47337 * ce) / C47083) / C47208 - (ae * C47336) / C47249 +
             C47240 * C47276) -
        (ae * (C47240 * C47535 + C47336 + C47532 * ce)) / C47249 -
        ((C47337 + C47240 * C47536 + C47532 * ae) * ce) / C47249 +
        C47240 * (C47276 - (ae * C47535) / C47249 - (C47536 * ce) / C47249 +
                  C47240 * ((-(C47358 * ce) / C47083) / C47208 -
                            (ae * C47356) / C47249 + C47240 * C47293));
    const double C47626 = C47625 - C47621;
    const double C47864 = C47403 * C47863;
    const double C47898 = C47240 * C47863;
    const double C2152 =
        (3 * (C47337 + C47240 * C47536 + C47532 * ae) +
         C47240 * (2 * C47536 + C47240 * C47562 + C47551 * ae) +
         (2 * C47532 + C47240 * C47551) * ae) /
        C47208;
    const double C7178 =
        (3 * (C47423 + C47240 * C47600 + C47596 * ae) +
         C47240 * (2 * C47600 + C47240 * C47731 + C47720 * ae) +
         (2 * C47596 + C47240 * C47720) * ae) /
        C47208;
    const double C47851 = C47814 + C47848;
    const double C23496 =
        (3 * (C47435 + C47240 * C47739 + C47735 * ae) +
         C47240 * (2 * C47739 + C47240 * C47920 + C47909 * ae) +
         (2 * C47735 + C47240 * C47909) * ae) /
        C47208;
    const double C47986 = C47942 + C47983;
    const double C48058 = C48055 + C48032;
    const double C1023 =
        (C47403 * C47399 * ae) / C47208 - (C47403 * C47398 * ce) / C47249 +
        C47240 * C47403 *
            (3 * C47293 +
             C47245 * ((-2 * C47245 * C47288) / C47249 +
                       C47245 * ((-((C47280 * C47281 +
                                     C47243 * bs[8] * std::pow(C47236, 8)) *
                                    C47241 * C47258) /
                                  C47083) /
                                     C47208 -
                                 C47288 / C47249)));
    const double C135 = 5 * ((-3 * C47336) / C47083 + C47245 * C47363) +
                        C47245 * (4 * C47363 + C47245 * C47399);
    const double C331 =
        (-3 * C47336) / C47083 + C47245 * C47363 + C47399 * C47413;
    const double C537 = (-3 * C47336) / C47083 + C47245 * C47363 +
                        C47240 * (C47240 * C47399 - (C47393 * ce) / C47083) -
                        (C47240 * C47393 * ce) / C47083;
    const double C713 = C47403 * (4 * C47363 + C47245 * C47399);
    const double C828 = C47240 * (4 * C47363 + C47245 * C47399) -
                        ((4 * C47357 + C47245 * C47393) * ce) / C47083;
    const double C1018 =
        C47240 * C47403 * C47399 - (C47403 * C47393 * ce) / C47083;
    const double C2442 =
        2 * (C47240 * C47363 - (C47357 * ce) / C47083) +
        C47240 * (C47363 + C47240 * C47576 - (C47571 * ce) / C47083) -
        ((C47357 + C47387 * C47243) * ce) / C47083;
    const double C2153 =
        (-3 * (C47240 * C47535 + C47336 + C47532 * ce)) / C47083 +
        C47240 * ((-2 * C47535) / C47083 - (C47240 * C47561) / C47083 -
                  (C47551 * ce) / C47083) -
        ((2 * C47532 + C47240 * C47551) * ce) / C47083;
    const double C7179 =
        (-3 * (C47240 * C47599 + C47421 + C47596 * ce)) / C47083 +
        C47240 * ((-2 * C47599) / C47083 - (C47240 * C47730) / C47083 -
                  (C47720 * ce) / C47083) -
        ((2 * C47596 + C47240 * C47720) * ce) / C47083;
    const double C47850 = C47847 / C47083;
    const double C22689 = 5 * ((-3 * C47433) / C47083 + C47403 * C47644) +
                          C47403 * (4 * C47644 + C47403 * C47893);
    const double C22815 = (-3 * C47433) / C47083 + C47403 * C47644 +
                          C47240 * (C47240 * C47893 - (C47891 * ce) / C47083) -
                          (C47240 * C47891 * ce) / C47083;
    const double C23185 = C47240 * (4 * C47644 + C47403 * C47893) -
                          ((4 * C47642 + C47403 * C47891) * ce) / C47083;
    const double C23843 =
        2 * (C47240 * C47644 - (C47642 * ce) / C47083) +
        C47240 * (C47644 + C47240 * C47930 - (C47925 * ce) / C47083) -
        ((C47642 + C47885 * C47243) * ce) / C47083;
    const double C23497 =
        (-3 * (C47240 * C47738 + C47433 + C47735 * ce)) / C47083 +
        C47240 * ((-2 * C47738) / C47083 - (C47240 * C47919) / C47083 -
                  (C47909 * ce) / C47083) -
        ((2 * C47735 + C47240 * C47909) * ce) / C47083;
    const double C47985 = C47982 / C47083;
    const double C48057 = C48019 - C48054;
    const double C7181 =
        3 * ((-(ae * C47599) / C47083) / C47208 - C47590 / C47249 -
             (C47600 * ce) / C47249 + C47240 * C47729) +
        (((-2 * C47599) / C47083 - (C47240 * C47730) / C47083 -
          (C47720 * ce) / C47083) *
         ae) /
            C47208 -
        ((2 * C47600 + C47240 * C47731 + C47720 * ae) * ce) / C47249 +
        C47240 * (2 * C47729 - (ae * C47730) / C47249 - (C47731 * ce) / C47249 +
                  C47240 * ((-(ae * C47718) / C47083) / C47208 -
                            C47703 / C47249 - (C47721 * ce) / C47249 +
                            C47240 * ((-(C47706 * ce) / C47083) / C47208 -
                                      (ae * C47704) / C47249 -
                                      (C47240 * C47403 * C47245 *
                                       (C47280 * C47281 +
                                        C47243 * bs[8] * std::pow(C47236, 8)) *
                                       C47241) /
                                          C47249)));
    const double C108 =
        (C48730 + 2 * C48355) / C47100 - (C48739 * C48346) / C47083;
    const double C109 =
        (C48717 + 2 * C48363 + C48739) / C47100 - (C48732 * C48346) / C47083;
    const double C110 = (C48688 + C48360 / C47083 + C48732) / C47100 -
                        (C48719 * C48346) / C47083;
    const double C1235 =
        (C48733 + 2 * C48435) / C47100 - (C48740 * C48431) / C47083;
    const double C1236 =
        (C48721 + 2 * C48442 + C48740) / C47100 - (C48736 * C48431) / C47083;
    const double C1237 = (C48694 + C48439 / C47083 + C48736) / C47100 -
                         (C48726 * C48431) / C47083;
    const double C47150 = C47144 / C47100;
    const double C47149 = C47081 * C47144;
    const double C3478 = C3467 - C3476;
    const double C3477 = C3475 - C3465;
    const double C9024 = C9016 - C3637;
    const double C9023 = C3637 - C9015;
    const double C3916 = C3631 - C3911;
    const double C9362 = C9361 - C3631;
    const double C9022 = C3627 - C9010;
    const double C9021 = C9009 - C3627;
    const double C24850 = C24848 - C9011;
    const double C25602 = C10052 - C25597;
    const double C1953 = C1952 + C1942;
    const double C5831 = C5826 + C1051;
    const double C5830 = C5825 - C1051;
    const double C7382 = C7380 + C2314;
    const double C7381 = C7379 - C2314;
    const double C8142 = C8140 + C2940;
    const double C8141 = C8139 - C2940;
    const double C22830 = C22827 - C6284;
    const double C23084 = C23083 - C6618;
    const double C23430 = C23429 - C7084;
    const double C22699 = C22693 * C48331;
    const double C6632 = C6628 - C1703;
    const double C6631 = C6627 + C1703;
    const double C23198 = C23195 + C6782;
    const double C161 = C48597 * C141;
    const double C358 = C48597 * C337;
    const double C11039 = C10813 * C337;
    const double C32004 = C31778 * C337;
    const double C362 = C48597 * C338;
    const double C11387 = C10813 * C338;
    const double C32352 = C31778 * C338;
    const double C568 = C48597 * C543;
    const double C11237 = C10813 * C543;
    const double C11229 = C48714 * C543;
    const double C32202 = C31778 * C543;
    const double C32194 = C48714 * C543;
    const double C574 = C48597 * C544;
    const double C10841 = C48714 * C544;
    const double C11533 = C10813 * C544;
    const double C31806 = C48714 * C544;
    const double C32498 = C31778 * C544;
    const double C1036 = C48597 * C1021;
    const double C11035 = C48714 * C1021;
    const double C11747 = C10813 * C1021;
    const double C32000 = C48714 * C1021;
    const double C32712 = C31778 * C1021;
    const double C22934 = C6419 * C48331;
    const double C22695 = C48597 * C6066;
    const double C22826 = C48597 * C6244;
    const double C27882 = C48714 * C6244;
    const double C39146 = C48714 * C6244;
    const double C23194 = C48597 * C6770;
    const double C27226 = C48714 * C6770;
    const double C38490 = C48714 * C6770;
    const double C23855 = C48597 * C7666;
    const double C27408 = C48714 * C7666;
    const double C38672 = C48714 * C7666;
    const double C13334 = C13326 + C13327;
    const double C34291 = C34283 + C34284;
    const double C47845 = C47841 - C47818;
    const double C28729 = C28721 + C28722;
    const double C39989 = C39981 + C39982;
    const double C47977 = C47971 - C47945;
    const double C12983 =
        (4 * (2 * C47464 + C47240 * C47491 + C47480 * ae) +
         C47240 * (3 * C47491 + C47240 * C47800 + C47785 * ae) +
         (3 * C47480 + C47240 * C47785) * ae) /
        C47208;
    const double C47801 = C47799 - C47784;
    const double C48056 = C48047 + C48053;
    const double C13331 = C48714 * C2157;
    const double C34288 = C48714 * C2157;
    const double C28726 = C48714 * C7180;
    const double C39986 = C48714 * C7180;
    const double C48033 = C48025 - C48012;
    const double C47798 = C47791 + C47795;
    const double C47295 = C47285 + C47294;
    const double C47563 = C47560 + C47540;
    const double C2581 =
        2 * ((-(C47427 * ce) / C47083) / C47208 - (ae * C47425) / C47249 +
             C47240 * C47602) -
        (ae * (C47240 * C47611 + C47425 + C47608 * ce)) / C47249 -
        ((C47427 + C47240 * C47612 + C47608 * ae) * ce) / C47249 +
        C47240 * (C47602 - (ae * C47611) / C47249 - (C47612 * ce) / C47249 +
                  C47240 * ((-(C47605 * ce) / C47083) / C47208 -
                            (ae * C47603) / C47249 +
                            C47240 * C47403 *
                                ((-((C47280 * C47281 +
                                     C47243 * bs[8] * std::pow(C47236, 8)) *
                                    C47241 * C47258) /
                                  C47083) /
                                     C47208 -
                                 C47288 / C47249)));
    const double C1521 = C48597 * C1259;
    const double C2326 = C48597 * C1404;
    const double C11745 = C48714 * C1404;
    const double C32710 = C48714 * C1404;
    const double C1697 = C48597 * C1409;
    const double C11037 = C48714 * C1409;
    const double C32002 = C48714 * C1409;
    const double C2464 = C48597 * C2158;
    const double C11235 = C48714 * C2158;
    const double C32200 = C48714 * C2158;
    const double C6067 =
        4 * ((-2 * C47590) / C47249 + C47403 * C47626) +
        C47403 *
            (3 * C47626 +
             C47403 * ((-2 * C47403 * C47620) / C47249 +
                       C47403 * ((-(C47245 *
                                    (C47280 * C47281 +
                                     C47243 * bs[8] * std::pow(C47236, 8)) *
                                    C47241 * C47413) /
                                  C47083) /
                                     C47208 -
                                 C47620 / C47249)));
    const double C6245 =
        (-2 * C47590) / C47249 + C47403 * C47626 +
        ((C47240 * C47665 - (C47663 * ce) / C47083) * ae) / C47208 -
        ((C47240 * C47664 + C47663 * ae) * ce) / C47249 +
        C47240 *
            ((C47665 * ae) / C47208 - (C47664 * ce) / C47249 +
             C47240 * ((-2 * C47403 * C47620) / C47249 +
                       C47403 * ((-(C47245 *
                                    (C47280 * C47281 +
                                     C47243 * bs[8] * std::pow(C47236, 8)) *
                                    C47241 * C47413) /
                                  C47083) /
                                     C47208 -
                                 C47620 / C47249)));
    const double C6771 =
        (((-3 * C47441) / C47083 + C47403 * C47665) * ae) / C47208 -
        ((3 * C47443 + C47403 * C47664) * ce) / C47249 +
        C47240 *
            (3 * C47626 +
             C47403 * ((-2 * C47403 * C47620) / C47249 +
                       C47403 * ((-(C47245 *
                                    (C47280 * C47281 +
                                     C47243 * bs[8] * std::pow(C47236, 8)) *
                                    C47241 * C47413) /
                                  C47083) /
                                     C47208 -
                                 C47620 / C47249)));
    const double C7667 =
        2 * ((-(C47443 * ce) / C47083) / C47208 - (ae * C47441) / C47249 +
             C47240 * C47626) -
        (ae * (C47240 * C47746 + C47441 + C47743 * ce)) / C47249 -
        ((C47443 + C47240 * C47747 + C47743 * ae) * ce) / C47249 +
        C47240 *
            (C47626 - (ae * C47746) / C47249 - (C47747 * ce) / C47249 +
             C47240 *
                 ((-(C47658 * ce) / C47083) / C47208 - (ae * C47656) / C47249 +
                  C47240 * ((-(C47245 *
                               (C47280 * C47281 +
                                C47243 * bs[8] * std::pow(C47236, 8)) *
                               C47241 * C47413) /
                             C47083) /
                                C47208 -
                            C47620 / C47249)));
    const double C47865 = C47859 + C47864;
    const double C47921 = C47918 + C47898;
    const double C47854 = C47851 + C47834;
    const double C47988 = C47986 + C47970;
    const double C48061 = C47240 * C48058;
    const double C47853 = C47822 - C47850;
    const double C47987 = C47949 - C47985;
    const double C48060 = C48057 - C48037;
    const double C47155 = C47150 - C47151;
    const double C47154 = C47149 + C48663;
    const double C3479 = C3477 - C3466;
    const double C9028 = C9024 - C3638;
    const double C9027 = C9023 + C3638;
    const double C9026 = C9022 + C3630;
    const double C9025 = C9021 - C3630;
    const double C24851 = C24850 - C9014;
    const double C25603 = C25602 + C10053;
    const double C7384 = C7382 - C2331;
    const double C7383 = C7381 + C2331;
    const double C8144 = C8142 - C2941;
    const double C8143 = C8141 + C2941;
    const double C22833 = C22830 + C6285;
    const double C23085 = C23084 * C48331;
    const double C23431 = C23430 + C7085;
    const double C23082 = C6631 * C48331;
    const double C23201 = C23198 * C48331;
    const double C172 = C160 + C161;
    const double C374 = C357 + C358;
    const double C11057 = C11038 + C11039;
    const double C32022 = C32003 + C32004;
    const double C376 = C361 + C362;
    const double C11393 = C11386 + C11387;
    const double C32358 = C32351 + C32352;
    const double C587 = C567 + C568;
    const double C11253 = C11236 + C11237;
    const double C11249 = C11228 + C11229;
    const double C32218 = C32201 + C32202;
    const double C32214 = C32193 + C32194;
    const double C589 = C573 + C574;
    const double C10861 = C10840 + C10841;
    const double C11537 = C11532 + C11533;
    const double C31826 = C31805 + C31806;
    const double C32502 = C32497 + C32498;
    const double C1047 = C1035 + C1036;
    const double C11055 = C11034 + C11035;
    const double C11755 = C11746 + C11747;
    const double C32020 = C31999 + C32000;
    const double C32720 = C32711 + C32712;
    const double C22700 = C22694 + C22695;
    const double C22829 = C22825 + C22826;
    const double C27887 = C27881 + C27882;
    const double C39151 = C39145 + C39146;
    const double C23197 = C23193 + C23194;
    const double C27237 = C27225 + C27226;
    const double C38501 = C38489 + C38490;
    const double C23857 = C23854 + C23855;
    const double C27421 = C27407 + C27408;
    const double C38685 = C38671 + C38672;
    const double C47852 = C47845 + C47849;
    const double C47984 = C47977 + C47981;
    const double C12984 =
        4 * ((-2 * C47463) / C47083 - (C47240 * C47490) / C47083 -
             (C47480 * ce) / C47083) +
        C47240 * ((-3 * C47490) / C47083 + C47240 * C47801 -
                  (C47785 * ce) / C47083) -
        ((3 * C47480 + C47240 * C47785) * ce) / C47083;
    const double C48059 = C47240 * C48056;
    const double C13336 = C13330 + C13331;
    const double C34293 = C34287 + C34288;
    const double C28731 = C28725 + C28726;
    const double C39991 = C39985 + C39986;
    const double C12987 =
        4 * (2 * C47492 - (ae * C47490) / C47249 - (C47491 * ce) / C47249 +
             C47240 * C47798) +
        (((-3 * C47490) / C47083 + C47240 * C47801 - (C47785 * ce) / C47083) *
         ae) /
            C47208 -
        ((3 * C47491 + C47240 * C47800 + C47785 * ae) * ce) / C47249 +
        C47240 *
            (3 * C47798 + (C47801 * ae) / C47208 - (C47800 * ce) / C47249 +
             C47240 *
                 (2 * C47792 - (ae * C47789) / C47249 - (C47790 * ce) / C47249 +
                  C47240 * ((-(ae * C47769) / C47083) / C47208 - C47282 -
                            (C47772 * ce) / C47249 +
                            C47240 * ((-(C47351 * ce) / C47083) / C47208 -
                                      (ae * C47347) / C47249 -
                                      (C47240 * C47288) / C47249))));
    const double C142 =
        5 * (3 * C47276 + C47245 * C47295) +
        C47245 * (4 * C47295 +
                  C47245 * (3 * C47293 +
                            C47245 * ((-2 * C47245 * C47288) / C47249 +
                                      C47245 * ((-((C47280 * C47281 +
                                                    C47243 * bs[8] *
                                                        std::pow(C47236, 8)) *
                                                   C47241 * C47258) /
                                                 C47083) /
                                                    C47208 -
                                                C47288 / C47249))));
    const double C339 = (-2 * C47245 * C47262) / C47249 + C47245 * C47276 +
                        C47295 * std::pow(yP - yQ, 2);
    const double C340 = (yP - yQ) * (3 * C47276 + C47245 * C47295);
    const double C341 =
        3 * C47276 + C47245 * C47295 +
        (3 * C47293 +
         C47245 *
             ((-2 * C47245 * C47288) / C47249 +
              C47245 *
                  ((-((C47280 * C47281 + C47243 * bs[8] * std::pow(C47236, 8)) *
                      C47241 * C47258) /
                    C47083) /
                       C47208 -
                   C47288 / C47249))) *
            std::pow(yP - yQ, 2);
    const double C545 =
        (-2 * C47245 * C47262) / C47249 + C47245 * C47276 +
        ((C47240 * C47363 - (C47357 * ce) / C47083) * ae) / C47208 -
        ((C47240 * C47362 + C47357 * ae) * ce) / C47249 +
        C47240 *
            ((C47363 * ae) / C47208 - (C47362 * ce) / C47249 + C47240 * C47295);
    const double C546 =
        (((-3 * C47336) / C47083 + C47245 * C47363) * ae) / C47208 -
        ((3 * C47337 + C47245 * C47362) * ce) / C47249 +
        C47240 * (3 * C47276 + C47245 * C47295);
    const double C547 =
        3 * C47276 + C47245 * C47295 +
        ((C47240 * C47399 - (C47393 * ce) / C47083) * ae) / C47208 -
        ((C47240 * C47398 + C47393 * ae) * ce) / C47249 +
        C47240 * ((C47399 * ae) / C47208 - (C47398 * ce) / C47249 +
                  C47240 * (3 * C47293 +
                            C47245 * ((-2 * C47245 * C47288) / C47249 +
                                      C47245 * ((-((C47280 * C47281 +
                                                    C47243 * bs[8] *
                                                        std::pow(C47236, 8)) *
                                                   C47241 * C47258) /
                                                 C47083) /
                                                    C47208 -
                                                C47288 / C47249))));
    const double C714 =
        (yP - yQ) *
        (4 * C47295 +
         C47245 *
             (3 * C47293 +
              C47245 * ((-2 * C47245 * C47288) / C47249 +
                        C47245 * ((-((C47280 * C47281 +
                                      C47243 * bs[8] * std::pow(C47236, 8)) *
                                     C47241 * C47258) /
                                   C47083) /
                                      C47208 -
                                  C47288 / C47249))));
    const double C829 =
        ((4 * C47363 + C47245 * C47399) * ae) / C47208 -
        ((4 * C47362 + C47245 * C47398) * ce) / C47249 +
        C47240 * (4 * C47295 +
                  C47245 * (3 * C47293 +
                            C47245 * ((-2 * C47245 * C47288) / C47249 +
                                      C47245 * ((-((C47280 * C47281 +
                                                    C47243 * bs[8] *
                                                        std::pow(C47236, 8)) *
                                                   C47241 * C47258) /
                                                 C47083) /
                                                    C47208 -
                                                C47288 / C47249))));
    const double C1022 = (C47403 * C47363 * ae) / C47208 -
                         (C47403 * C47362 * ce) / C47249 +
                         C47240 * C47403 * C47295;
    const double C1518 =
        2 * C47403 * C47295 +
        C47403 *
            (C47295 +
             ((-2 * C47245 * C47288) / C47249 +
              C47245 *
                  ((-((C47280 * C47281 + C47243 * bs[8] * std::pow(C47236, 8)) *
                      C47241 * C47258) /
                    C47083) /
                       C47208 -
                   C47288 / C47249)) *
                 C47413);
    const double C1684 =
        ((C47363 + C47395 * C47413) * ae) / C47208 -
        ((C47362 + C47394 * C47413) * ce) / C47249 +
        C47240 *
            (C47295 +
             ((-2 * C47245 * C47288) / C47249 +
              C47245 *
                  ((-((C47280 * C47281 + C47243 * bs[8] * std::pow(C47236, 8)) *
                      C47241 * C47258) /
                    C47083) /
                       C47208 -
                   C47288 / C47249)) *
                 C47413);
    const double C2309 =
        C47403 * C47295 +
        ((C47240 * C47565 - (C47566 * ce) / C47083) * ae) / C47208 -
        ((C47240 * C47567 + C47566 * ae) * ce) / C47249 +
        C47240 * ((C47565 * ae) / C47208 - (C47567 * ce) / C47249 +
                  C47240 * C47403 *
                      ((-2 * C47245 * C47288) / C47249 +
                       C47245 * ((-((C47280 * C47281 +
                                     C47243 * bs[8] * std::pow(C47236, 8)) *
                                    C47241 * C47258) /
                                  C47083) /
                                     C47208 -
                                 C47288 / C47249)));
    const double C2443 =
        2 * ((C47363 * ae) / C47208 - (C47362 * ce) / C47249 +
             C47240 * C47295) +
        ((C47363 + C47240 * C47576 - (C47571 * ce) / C47083) * ae) / C47208 -
        ((C47362 + C47240 * C47575 + C47571 * ae) * ce) / C47249 +
        C47240 * (C47295 + (C47576 * ae) / C47208 - (C47575 * ce) / C47249 +
                  C47240 * ((C47395 * ae) / C47208 - (C47394 * ce) / C47249 +
                            C47240 * ((-2 * C47245 * C47288) / C47249 +
                                      C47245 * ((-((C47280 * C47281 +
                                                    C47243 * bs[8] *
                                                        std::pow(C47236, 8)) *
                                                   C47241 * C47258) /
                                                 C47083) /
                                                    C47208 -
                                                C47288 / C47249))));
    const double C2159 =
        3 * (C47276 - (ae * C47535) / C47249 - (C47536 * ce) / C47249 +
             C47240 * C47563) +
        (((-2 * C47535) / C47083 - (C47240 * C47561) / C47083 -
          (C47551 * ce) / C47083) *
         ae) /
            C47208 -
        ((2 * C47536 + C47240 * C47562 + C47551 * ae) * ce) / C47249 +
        C47240 *
            (2 * C47563 - (ae * C47561) / C47249 - (C47562 * ce) / C47249 +
             C47240 *
                 (C47293 - (ae * C47549) / C47249 - (C47552 * ce) / C47249 +
                  C47240 *
                      ((-(C47388 * ce) / C47083) / C47208 -
                       (ae * C47386) / C47249 +
                       C47240 * ((-((C47280 * C47281 +
                                     C47243 * bs[8] * std::pow(C47236, 8)) *
                                    C47241 * C47258) /
                                  C47083) /
                                     C47208 -
                                 C47288 / C47249))));
    const double C1528 = C1520 + C1521;
    const double C2330 = C2325 + C2326;
    const double C11754 = C11744 + C11745;
    const double C32719 = C32709 + C32710;
    const double C1701 = C1696 + C1697;
    const double C11056 = C11036 + C11037;
    const double C32021 = C32001 + C32002;
    const double C2468 = C2463 + C2464;
    const double C11252 = C11234 + C11235;
    const double C32217 = C32199 + C32200;
    const double C22690 =
        5 * (3 * C47618 + C47403 * C47865) +
        C47403 * (4 * C47865 +
                  C47403 * (3 * C47863 +
                            C47403 * ((-2 * C47403 * C47288) / C47249 +
                                      C47403 * ((-((C47280 * C47281 +
                                                    C47243 * bs[8] *
                                                        std::pow(C47236, 8)) *
                                                   C47241 * C47413) /
                                                 C47083) /
                                                    C47208 -
                                                C47288 / C47249))));
    const double C22816 =
        3 * C47618 + C47403 * C47865 +
        ((C47240 * C47893 - (C47891 * ce) / C47083) * ae) / C47208 -
        ((C47240 * C47892 + C47891 * ae) * ce) / C47249 +
        C47240 * ((C47893 * ae) / C47208 - (C47892 * ce) / C47249 +
                  C47240 * (3 * C47863 +
                            C47403 * ((-2 * C47403 * C47288) / C47249 +
                                      C47403 * ((-((C47280 * C47281 +
                                                    C47243 * bs[8] *
                                                        std::pow(C47236, 8)) *
                                                   C47241 * C47413) /
                                                 C47083) /
                                                    C47208 -
                                                C47288 / C47249))));
    const double C23186 =
        ((4 * C47644 + C47403 * C47893) * ae) / C47208 -
        ((4 * C47643 + C47403 * C47892) * ce) / C47249 +
        C47240 * (4 * C47865 +
                  C47403 * (3 * C47863 +
                            C47403 * ((-2 * C47403 * C47288) / C47249 +
                                      C47403 * ((-((C47280 * C47281 +
                                                    C47243 * bs[8] *
                                                        std::pow(C47236, 8)) *
                                                   C47241 * C47413) /
                                                 C47083) /
                                                    C47208 -
                                                C47288 / C47249))));
    const double C23844 =
        2 * ((C47644 * ae) / C47208 - (C47643 * ce) / C47249 +
             C47240 * C47865) +
        ((C47644 + C47240 * C47930 - (C47925 * ce) / C47083) * ae) / C47208 -
        ((C47643 + C47240 * C47929 + C47925 * ae) * ce) / C47249 +
        C47240 * (C47865 + (C47930 * ae) / C47208 - (C47929 * ce) / C47249 +
                  C47240 * ((C47887 * ae) / C47208 - (C47886 * ce) / C47249 +
                            C47240 * ((-2 * C47403 * C47288) / C47249 +
                                      C47403 * ((-((C47280 * C47281 +
                                                    C47243 * bs[8] *
                                                        std::pow(C47236, 8)) *
                                                   C47241 * C47413) /
                                                 C47083) /
                                                    C47208 -
                                                C47288 / C47249))));
    const double C23498 =
        3 * (C47618 - (ae * C47738) / C47249 - (C47739 * ce) / C47249 +
             C47240 * C47921) +
        (((-2 * C47738) / C47083 - (C47240 * C47919) / C47083 -
          (C47909 * ce) / C47083) *
         ae) /
            C47208 -
        ((2 * C47739 + C47240 * C47920 + C47909 * ae) * ce) / C47249 +
        C47240 *
            (2 * C47921 - (ae * C47919) / C47249 - (C47920 * ce) / C47249 +
             C47240 *
                 (C47863 - (ae * C47907) / C47249 - (C47910 * ce) / C47249 +
                  C47240 *
                      ((-(C47880 * ce) / C47083) / C47208 -
                       (ae * C47878) / C47249 +
                       C47240 * ((-((C47280 * C47281 +
                                     C47243 * bs[8] * std::pow(C47236, 8)) *
                                    C47241 * C47413) /
                                  C47083) /
                                     C47208 -
                                 C47288 / C47249))));
    const double C12985 =
        (4 * (2 * C47500 + C47240 * C47527 + C47516 * ae) +
         C47240 * (3 * C47527 + C47240 * C47854 + C47839 * ae) +
         (3 * C47516 + C47240 * C47839) * ae) /
        C47208;
    const double C28263 =
        (4 * (2 * C47588 + C47240 * C47699 + C47688 * ae) +
         C47240 * (3 * C47699 + C47240 * C47988 + C47975 * ae) +
         (3 * C47688 + C47240 * C47975) * ae) /
        C47208;
    const double C48064 = C48007 + C48061;
    const double C47855 = C47853 - C47838;
    const double C47989 = C47987 - C47974;
    const double C48063 = C47240 * C48060;
    const double C4046 = C588 * C47155;
    const double C4042 = C584 * C47155;
    const double C4036 = C579 * C47155;
    const double C4209 = C1045 * C47155;
    const double C4203 = C1043 * C47155;
    const double C9712 = C1698 * C47155;
    const double C9706 = C5823 * C47155;
    const double C10726 = C6275 * C47155;
    const double C26114 = C6779 * C47155;
    const double C2134 =
        (C47155 / C47100 + ((C47081 * C47169 + C4029) * ce) / C47083) / C47100 -
        ((C47081 * (C47169 / C47100 + (0 * ce) / C47083) + C48710) * de) /
            C47083;
    const double C2438 =
        C47155 / C47100 - ((C47081 * C47169 + C4029) * de) / C47083;
    const double C3746 =
        C47155 / C47100 + ((C47081 * C47169 + C4029) * ce) / C47083;
    const double C47158 = C47154 * de;
    const double C24849 = C9027 * C48331;
    const double C24852 = C24851 * C48331;
    const double C25604 = C25603 * C48331;
    const double C7386 = C7384 - C2332;
    const double C7385 = C7383 + C2332;
    const double C8146 = C8144 - C2942;
    const double C8145 = C8143 + C2942;
    const double C22834 = C22833 + C6286;
    const double C23432 = C23431 + C7086;
    const double C182 = C172 * C48394;
    const double C386 = C374 * C48394;
    const double C1693 = C374 * C48663;
    const double C3640 = C374 * C3454;
    const double C388 = C376 * C48394;
    const double C1038 = C376 * C48663;
    const double C3913 = C376 * C3454;
    const double C599 = C587 * C48697;
    const double C1943 = C587 * C48697;
    const double C2460 = C587 * C2434;
    const double C3762 = C587 * C48729;
    const double C4045 = C587 * C4029;
    const double C601 = C589 * C48723;
    const double C842 = C589 * C48481;
    const double C1947 = C589 * C1926;
    const double C3470 = C589 * C48481;
    const double C4049 = C589 * C48484;
    const double C1053 = C1047 * C48481;
    const double C2322 = C1047 * C1926;
    const double C2946 = C1047 * C48723;
    const double C3634 = C1047 * C48481;
    const double C4212 = C1047 * C48484;
    const double C22702 = C22700 * C48394;
    const double C22832 = C22829 * C48697;
    const double C23428 = C22829 * C48697;
    const double C26119 = C22829 * C4029;
    const double C23200 = C23197 * C48481;
    const double C25601 = C23197 * C48481;
    const double C23859 = C23857 * C48710;
    const double C25710 = C23857 * C48710;
    const double C48062 = C48033 + C48059;
    const double C364 = C48597 * C339;
    const double C718 = C48597 * C340;
    const double C578 = C48597 * C545;
    const double C11531 = C48714 * C545;
    const double C32496 = C48714 * C545;
    const double C848 = C48597 * C546;
    const double C10843 = C48714 * C546;
    const double C31808 = C48714 * C546;
    const double C1042 = C48597 * C1022;
    const double C11385 = C48714 * C1022;
    const double C32350 = C48714 * C1022;
    const double C1532 = C1528 * C48394;
    const double C2334 = C2330 * C48697;
    const double C2948 = C2330 * C48697;
    const double C4214 = C2330 * C4029;
    const double C1705 = C1701 * C48481;
    const double C3642 = C1701 * C48481;
    const double C2472 = C2468 * C48710;
    const double C3764 = C2468 * C48710;
    const double C48066 = C48064 + C48046;
    const double C12988 =
        4 * (2 * C47528 - (ae * C47526) / C47249 - (C47527 * ce) / C47249 +
             C47240 * C47852) +
        (((-3 * C47526) / C47083 + C47240 * C47855 - (C47839 * ce) / C47083) *
         ae) /
            C47208 -
        ((3 * C47527 + C47240 * C47854 + C47839 * ae) * ce) / C47249 +
        C47240 *
            (3 * C47852 + (C47855 * ae) / C47208 - (C47854 * ce) / C47249 +
             C47240 *
                 (2 * C47846 - (ae * C47843) / C47249 - (C47844 * ce) / C47249 +
                  C47240 * ((-(ae * C47823) / C47083) / C47208 -
                            C47620 / C47249 - (C47826 * ce) / C47249 +
                            C47240 * ((-(C47651 * ce) / C47083) / C47208 -
                                      (ae * C47647) / C47249 -
                                      (C47240 * C47245 *
                                       (C47280 * C47281 +
                                        C47243 * bs[8] * std::pow(C47236, 8)) *
                                       C47241) /
                                          C47249))));
    const double C12986 =
        4 * ((-2 * C47499) / C47083 - (C47240 * C47526) / C47083 -
             (C47516 * ce) / C47083) +
        C47240 * ((-3 * C47526) / C47083 + C47240 * C47855 -
                  (C47839 * ce) / C47083) -
        ((3 * C47516 + C47240 * C47839) * ce) / C47083;
    const double C28265 =
        4 * (2 * C47697 - (ae * C47698) / C47249 - (C47699 * ce) / C47249 +
             C47240 * C47984) +
        (((-3 * C47698) / C47083 + C47240 * C47989 - (C47975 * ce) / C47083) *
         ae) /
            C47208 -
        ((3 * C47699 + C47240 * C47988 + C47975 * ae) * ce) / C47249 +
        C47240 *
            (3 * C47984 + (C47989 * ae) / C47208 - (C47988 * ce) / C47249 +
             C47240 *
                 (2 * C47978 - (ae * C47979) / C47249 - (C47980 * ce) / C47249 +
                  C47240 * ((-(ae * C47959) / C47083) / C47208 -
                            C47937 / C47249 - (C47962 * ce) / C47249 +
                            C47240 * ((-(C47943 * ce) / C47083) / C47208 -
                                      (ae * C47939) / C47249 -
                                      (C47240 * C47403 *
                                       (C47280 * C47281 +
                                        C47243 * bs[8] * std::pow(C47236, 8)) *
                                       C47241) /
                                          C47249))));
    const double C28264 =
        4 * ((-2 * C47587) / C47083 - (C47240 * C47698) / C47083 -
             (C47688 * ce) / C47083) +
        C47240 * ((-3 * C47698) / C47083 + C47240 * C47989 -
                  (C47975 * ce) / C47083) -
        ((3 * C47688 + C47240 * C47975) * ce) / C47083;
    const double C48065 = C48018 + C48063;
    const double C2459 = C586 * C2438;
    const double C2449 = C581 * C2438;
    const double C7521 = C2327 * C2438;
    const double C7673 = C6273 * C2438;
    const double C23850 = C6277 * C2438;
    const double C3761 = C586 * C3746;
    const double C3753 = C581 * C3746;
    const double C9163 = C2327 * C3746;
    const double C10188 = C6273 * C3746;
    const double C25707 = C6277 * C3746;
    const double C47160 = C47158 / C47083;
    const double C22835 = C22834 * C48331;
    const double C23433 = C23432 * C48331;
    const double C392 = C385 + C386;
    const double C5204 = C386 + C385;
    const double C716 = C387 + C388;
    const double C5489 = C388 + C387;
    const double C607 = C606 + C599;
    const double C1954 = C1953 + C1943;
    const double C858 = C854 + C842;
    const double C3480 = C3478 + C3470;
    const double C1057 = C1056 + C1053;
    const double C5832 = C5827 - C1053;
    const double C3917 = C3916 + C3634;
    const double C9363 = C9362 - C3634;
    const double C377 = C363 + C364;
    const double C721 = C717 + C718;
    const double C591 = C577 + C578;
    const double C11536 = C11530 + C11531;
    const double C32501 = C32495 + C32496;
    const double C852 = C847 + C848;
    const double C10862 = C10842 + C10843;
    const double C31827 = C31807 + C31808;
    const double C1049 = C1041 + C1042;
    const double C11392 = C11384 + C11385;
    const double C32357 = C32349 + C32350;
    const double C44493 =
        (5 * (3 * C47491 + C47240 * C47800 + C47785 * ae) +
         C47240 * (4 * C47800 + C47240 * C48066 + C48051 * ae) +
         (4 * C47785 + C47240 * C48051) * ae) /
        C47208;
    const double C48067 = C48065 - C48050;
    const double C47162 = C47148 - C47160;
    const double C22062 = C392 * C48331;
    const double C389 = C377 * C48394;
    const double C723 = C721 * C48394;
    const double C603 = C591 * C48697;
    const double C1949 = C591 * C48697;
    const double C4051 = C591 * C4029;
    const double C856 = C852 * C48481;
    const double C3474 = C852 * C48481;
    const double C1055 = C1049 * C48481;
    const double C3915 = C1049 * C48481;
    const double C44495 =
        5 * (3 * C47798 + (C47801 * ae) / C47208 - (C47800 * ce) / C47249 +
             C47240 * C48062) +
        ((4 * C47801 + C47240 * C48067 - (C48051 * ce) / C47083) * ae) /
            C47208 -
        ((4 * C47800 + C47240 * C48066 + C48051 * ae) * ce) / C47249 +
        C47240 *
            (4 * C48062 + (C48067 * ae) / C47208 - (C48066 * ce) / C47249 +
             C47240 *
                 (3 * C48056 + (C48060 * ae) / C47208 - (C48058 * ce) / C47249 +
                  C47240 *
                      (2 * C48048 - (ae * C48042) / C47249 -
                       (C48045 * ce) / C47249 +
                       C47240 *
                           ((-(ae * C48020) / C47083) / C47208 -
                            C47288 / C47249 - (C48023 * ce) / C47249 +
                            C47240 * ((-(C47381 * ce) / C47083) / C47208 -
                                      (ae * C47377) / C47249 -
                                      (C47240 *
                                       (C47280 * C47281 +
                                        C47243 * bs[8] * std::pow(C47236, 8)) *
                                       C47241) /
                                          C47249)))));
    const double C44494 =
        5 * ((-3 * C47490) / C47083 + C47240 * C47801 -
             (C47785 * ce) / C47083) +
        C47240 * (4 * C47801 + C47240 * C48067 - (C48051 * ce) / C47083) -
        ((4 * C47785 + C47240 * C48051) * ce) / C47083;
    const double C47163 = C47162 + C47133;
    const double C4048 = C169 * C47163;
    const double C4040 = C166 * C47163;
    const double C4034 = C164 * C47163;
    const double C4211 = C368 * C47163;
    const double C4205 = C370 * C47163;
    const double C9714 = C371 * C47163;
    const double C9704 = C5205 * C47163;
    const double C10728 = C5208 * C47163;
    const double C26116 = C6081 * C47163;
    const double C2131 =
        (((((0 - (C47081 * C47116) / C47083) * ce) / C47083 -
           (0 * de) / C47087 + (2 * C47117) / C47083) /
              C47100 -
          ((C47081 * C47152 + 0) * de) / C47083 + C47126 - C47139) /
             C47100 +
         ((C47081 * C47161 + 0) * ce) / C47083) /
            C47100 -
        ((C47081 * (C47161 / C47100 +
                    ((C47081 * C47163 + C48477) * ce) / C47083 + C47155) +
          C48741) *
         de) /
            C47083 +
        C47163 / C47100 + ((C47081 * C47155 + C48484) * ce) / C47083 +
        2 * (C47133 / C47100 - (0 * de) / C47083);
    const double C2132 =
        (C47161 / C47100 + ((C47081 * C47163 + C48477) * ce) / C47083 +
         C47155) /
            C47100 -
        ((C47081 * (C47163 / C47100 +
                    ((C47081 * C47155 + C48484) * ce) / C47083 + 2 * C47169) +
          C48738) *
         de) /
            C47083 +
        2 * (C47155 / C47100 + ((C47081 * C47169 + C4029) * ce) / C47083);
    const double C2133 =
        (C47163 / C47100 + ((C47081 * C47155 + C48484) * ce) / C47083 +
         2 * C47169) /
            C47100 -
        ((C47081 *
              (C47155 / C47100 + ((C47081 * C47169 + C4029) * ce) / C47083) +
          C48729) *
         de) /
            C47083 +
        3 * (C47169 / C47100 + (0 * ce) / C47083);
    const double C2436 =
        C47161 / C47100 - ((C47081 * C47163 + C48477) * de) / C47083 + C47155;
    const double C2437 = C47163 / C47100 -
                         ((C47081 * C47155 + C48484) * de) / C47083 +
                         2 * C47169;
    const double C3744 =
        C47161 / C47100 + ((C47081 * C47163 + C48477) * ce) / C47083 + C47155;
    const double C3745 = C47163 / C47100 +
                         ((C47081 * C47155 + C48484) * ce) / C47083 +
                         2 * C47169;
    const double C4052 = C4040 + C4041;
    const double C9711 = C4204 + C4205;
    const double C9710 = C4205 + C4204;
    const double C26113 = C10728 + C10727;
    const double C2455 = C166 * C2436;
    const double C2445 = C164 * C2436;
    const double C7517 = C370 * C2436;
    const double C7669 = C5205 * C2436;
    const double C23846 = C5208 * C2436;
    const double C2457 = C584 * C2437;
    const double C2447 = C579 * C2437;
    const double C7519 = C1043 * C2437;
    const double C7671 = C5823 * C2437;
    const double C23848 = C6275 * C2437;
    const double C3757 = C166 * C3744;
    const double C3749 = C164 * C3744;
    const double C9159 = C370 * C3744;
    const double C10184 = C5205 * C3744;
    const double C25703 = C5208 * C3744;
    const double C3759 = C584 * C3745;
    const double C3751 = C579 * C3745;
    const double C9161 = C1043 * C3745;
    const double C10186 = C5823 * C3745;
    const double C25705 = C6275 * C3745;
    const double C4053 = C4052 - C4042;
    const double C9719 = C4203 - C9711;
    const double C9718 = C9710 - C4203;
    const double C26120 = C26113 - C10726;
    const double C4054 = C4053 - C4043;
    const double C9721 = C9719 + C4206;
    const double C9720 = C9718 - C4206;
    const double C26121 = C26120 - C10729;
    const double C4055 = C4054 + C4044;
    const double C9723 = C9721 - C4207;
    const double C9722 = C9720 + C4207;
    const double C26122 = C26121 + C10730;
    const double C4056 = C4055 + C4045;
    const double C9725 = C9723 - C4208;
    const double C9724 = C9722 + C4208;
    const double C26123 = C26122 + C10731;
    const double C26124 = C26123 * C48331;
    d2ee[0] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C48597 * C122) * C114 +
                    (C113 * C123 + C48597 * C136) * C48394) *
                       C103 +
                   (C174 + C175) * C104 + C184 * C105) *
                      C48582 * C48435 -
                  (C391 * C105 + (C381 + C382) * C104 +
                   ((C113 * C316 + C48597 * C334) * C48394 +
                    (C113 * C304 + C48597 * C317) * C114) *
                       C103) *
                      C48582 * C48442 +
                  (((C113 * C305 + C48597 * C318) * C114 +
                    (C113 * C319 + C48597 * C335) * C48394) *
                       C103 +
                   (C383 + C384) * C104 + C392 * C105) *
                      C48582 * C3060) *
                     C48355 +
                 (((C382 + C381) * C103 + (C380 + C379) * C104 + C716 * C105) *
                      C48582 * C48442 -
                  (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                      C48582 * C48435 -
                  ((C389 + C390) * C105 + (C386 + C385) * C104 +
                   (C384 + C383) * C103) *
                      C48582 * C3060) *
                     C48363 +
                 ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48582 *
                      C48435 -
                  ((C723 + C724) * C105 + (C388 + C387) * C104 + C391 * C103) *
                      C48582 * C48442 +
                  (C392 * C103 + (C390 + C389) * C104 +
                   ((C113 * C311 + C48597 * C330) * C114 +
                    (C113 * C331 + C48597 * C341) * C48394) *
                       C105) *
                      C48582 * C3060) *
                     C3063)) /
               (p * q * std::sqrt(p + q));
    d2ee[1] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C48597 * C122) * C824 +
                    (C113 * C123 + C48597 * C136) * C48663 -
                    (C113 * C508 + C48597 * C518) * C825 -
                    (C113 * C519 + C48597 * C538) * C48481) *
                       C103 +
                   (C831 + C832 - C833 - C834) * C104 + C857 * C105) *
                      C48582 * C48435 +
                  (((C113 * C1004 + C48597 * C1009) * C825 -
                    ((C113 * C316 + C48597 * C334) * C48663 +
                     (C113 * C304 + C48597 * C317) * C824) +
                    (C113 * C1010 + C48597 * C1019) * C48481) *
                       C103 +
                   (C1050 - (C1027 + C1028) + C1051) * C104 + C1057 * C105) *
                      C48582 * C48442 +
                  (((C113 * C305 + C48597 * C318) * C824 +
                    (C113 * C319 + C48597 * C335) * C48663 -
                    (C113 * C1378 + C48597 * C1390) * C825 -
                    (C113 * C1391 + C48597 * C1405) * C48481) *
                       C103 +
                   (C1686 + C1687 - C1702 - C1703) * C104 +
                   (C1692 + C1693 - C1704 - C1705) * C105) *
                      C48582 * C3060) *
                     C2788 +
                 (((C833 - (C832 + C831) + C834) * C103 +
                   (C837 - (C836 + C835) + C838) * C104 + C858 * C105) *
                      C48582 * C48435 +
                  ((C1028 + C1027 - C1050 - C1051) * C103 +
                   (C1034 + C1033 - C1052 - C1053) * C104 +
                   (C1037 + C1038 - C1054 - C1055) * C105) *
                      C48582 * C48442 +
                  ((C1702 - (C1687 + C1686) + C1703) * C103 +
                   (C1704 - (C1693 + C1692) + C1705) * C104 +
                   ((C113 * C1681 + C48597 * C1682) * C825 -
                    (C377 * C48663 + C378 * C824) +
                    (C113 * C1683 + C48597 * C1684) * C48481) *
                       C105) *
                      C48582 * C3060) *
                     C48360)) /
               (p * q * std::sqrt(p + q));
    d2ee[2] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48582 * C48740 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C48597 * C334) * C48394 +
             (C113 * C304 + C48597 * C317) * C114) *
                C103) *
               C48582 * C48736 +
           (((C113 * C305 + C48597 * C318) * C114 +
             (C113 * C319 + C48597 * C335) * C48394) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C48582 * C48726 -
           ((C1532 + C1533) * C105 + (C1534 + C1535) * C104 +
            ((C113 * C1251 + C48597 * C1261) * C48394 +
             (C113 * C1243 + C48597 * C1252) * C114) *
                C103) *
               C48582 * C48704) *
              C2788 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C716 * C105) *
               C48582 * C48736 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48582 * C48740 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C48582 * C48726 +
           ((C1535 + C1534) * C103 + (C1533 + C1532) * C104 +
            ((C113 * C1515 + C48597 * C1516) * C114 +
             (C113 * C1517 + C48597 * C1518) * C48394) *
                C105) *
               C48582 * C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48582 * C2680 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C48597 * C334) * C48394 +
             (C113 * C304 + C48597 * C317) * C114) *
                C103) *
               C48582 * C48439) *
              C48739 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C716 * C105) *
               C48582 * C48439 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48582 * C2680) *
              C48732 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48582 * C2680 -
           ((C723 + C724) * C105 + (C388 + C387) * C104 + C391 * C103) *
               C48582 * C48439) *
              C48719 +
          ((C716 * C103 + (C724 + C723) * C104 +
            ((C113 * C711 + C48597 * C712) * C114 +
             (C113 * C713 + C48597 * C714) * C48394) *
                C105) *
               C48582 * C48439 -
           ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
               C48582 * C2680) *
              C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C505 +
             (C113 * C123 + C48597 * C136) * C48734 -
             (C113 * C508 + C48597 * C518) * C506 -
             (C113 * C519 + C48597 * C538) * C48723 +
             (C113 * C509 + C48597 * C520) * C507 +
             (C113 * C521 + C48597 * C539) * C48697) *
                C103 +
            (C549 + C550 - C592 - C593 + C594 + C595) * C104 + C607 * C105) *
               C48582 * C2680 +
           (((C113 * C1004 + C48597 * C1009) * C506 -
             ((C113 * C316 + C48597 * C334) * C48734 +
              (C113 * C304 + C48597 * C317) * C505) +
             (C113 * C1010 + C48597 * C1019) * C48723 -
             (C113 * C1375 + C48597 * C1384) * C507 -
             (C113 * C1385 + C48597 * C1402) * C48697) *
                C103 +
            (C2937 - (C2938 + C2939) + C2940 - C2941 - C2942) * C104 +
            (C2943 - (C2944 + C2945) + C2946 - C2947 - C2948) * C105) *
               C48582 * C48439) *
              C2788 +
          (((C592 - (C550 + C549) + C593 - C594 - C595) * C103 +
            (C596 - (C560 + C559) + C597 - C598 - C599) * C104 +
            (C600 - (C571 + C572) + C601 - C602 - C603) * C105) *
               C48582 * C2680 +
           ((C2939 + C2938 - C2937 - C2940 + C2941 + C2942) * C103 +
            (C2945 + C2944 - C2943 - C2946 + C2947 + C2948) * C104 +
            (C375 * C505 + C376 * C48734 - C1048 * C506 - C1049 * C48723 +
             (C113 * C2306 + C48597 * C2307) * C507 +
             (C113 * C2308 + C48597 * C2309) * C48697) *
                C105) *
               C48582 * C48439) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[3] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C48597 * C122) * C824 +
                    (C113 * C123 + C48597 * C136) * C48663 -
                    (C113 * C508 + C48597 * C518) * C825 -
                    (C113 * C519 + C48597 * C538) * C48481) *
                       C103 +
                   (C831 + C832 - C833 - C834) * C104 + C857 * C105) *
                      C48582 * C2680 +
                  (((C113 * C1004 + C48597 * C1009) * C825 -
                    ((C113 * C316 + C48597 * C334) * C48663 +
                     (C113 * C304 + C48597 * C317) * C824) +
                    (C113 * C1010 + C48597 * C1019) * C48481) *
                       C103 +
                   (C1050 - (C1027 + C1028) + C1051) * C104 + C1057 * C105) *
                      C48582 * C48439) *
                     C48355 +
                 (((C833 - (C832 + C831) + C834) * C103 +
                   (C837 - (C836 + C835) + C838) * C104 + C858 * C105) *
                      C48582 * C2680 +
                  ((C1028 + C1027 - C1050 - C1051) * C103 +
                   (C1034 + C1033 - C1052 - C1053) * C104 +
                   (C1037 + C1038 - C1054 - C1055) * C105) *
                      C48582 * C48439) *
                     C48363 +
                 ((C857 * C103 + (C841 + C840 - C839 - C842) * C104 +
                   (C843 + C844 - C855 - C856) * C105) *
                      C48582 * C2680 +
                  (C1057 * C103 + (C1054 - (C1038 + C1037) + C1055) * C104 +
                   ((C113 * C1008 + C48597 * C1017) * C825 -
                    (C721 * C48663 + C722 * C824) +
                    (C113 * C1018 + C48597 * C1023) * C48481) *
                       C105) *
                      C48582 * C48439) *
                     C3063)) /
               (p * q * std::sqrt(p + q));
    d2ee[4] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48582 * C2680 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C48597 * C334) * C48394 +
             (C113 * C304 + C48597 * C317) * C114) *
                C103) *
               C48582 * C48439) *
              C48739 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C716 * C105) *
               C48582 * C48439 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48582 * C2680) *
              C48732 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48582 * C2680 -
           ((C723 + C724) * C105 + (C388 + C387) * C104 + C391 * C103) *
               C48582 * C48439) *
              C48719 +
          ((C716 * C103 + (C724 + C723) * C104 +
            ((C113 * C711 + C48597 * C712) * C114 +
             (C113 * C713 + C48597 * C714) * C48394) *
                C105) *
               C48582 * C48439 -
           ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
               C48582 * C2680) *
              C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48582 * C48740 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C48597 * C334) * C48394 +
             (C113 * C304 + C48597 * C317) * C114) *
                C103) *
               C48582 * C48736 +
           (((C113 * C305 + C48597 * C318) * C114 +
             (C113 * C319 + C48597 * C335) * C48394) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C48582 * C48726 -
           ((C1532 + C1533) * C105 + (C1534 + C1535) * C104 +
            ((C113 * C1251 + C48597 * C1261) * C48394 +
             (C113 * C1243 + C48597 * C1252) * C114) *
                C103) *
               C48582 * C48704) *
              C2788 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C716 * C105) *
               C48582 * C48736 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48582 * C48740 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C48582 * C48726 +
           ((C1535 + C1534) * C103 + (C1533 + C1532) * C104 +
            ((C113 * C1515 + C48597 * C1516) * C114 +
             (C113 * C1517 + C48597 * C1518) * C48394) *
                C105) *
               C48582 * C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[5] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C48597 * C122) * C3456 +
                    (C113 * C123 + C48597 * C136) * C3454 -
                    (C113 * C508 + C48597 * C518) * C3457 -
                    (C113 * C519 + C48597 * C538) * C48481) *
                       C103 +
                   (C3459 + C3460 - C3461 - C3462) * C104 + C3479 * C105) *
                      C48582 * C48435 +
                  (((C113 * C1004 + C48597 * C1009) * C3457 -
                    ((C113 * C316 + C48597 * C334) * C3454 +
                     (C113 * C304 + C48597 * C317) * C3456) +
                    (C113 * C1010 + C48597 * C1019) * C48481) *
                       C103 +
                   (C3627 - (C3628 + C3629) + C3630) * C104 + C3917 * C105) *
                      C48582 * C48442 +
                  (((C113 * C305 + C48597 * C318) * C3456 +
                    (C113 * C319 + C48597 * C335) * C3454 -
                    (C113 * C1378 + C48597 * C1390) * C3457 -
                    (C113 * C1391 + C48597 * C1405) * C48481) *
                       C103 +
                   (C3635 + C3636 - C3637 - C3638) * C104 +
                   (C3639 + C3640 - C3641 - C3642) * C105) *
                      C48582 * C3060) *
                     C48648 +
                 (((C3461 - (C3460 + C3459) + C3462) * C103 +
                   (C3465 - (C3464 + C3463) + C3466) * C104 + C3480 * C105) *
                      C48582 * C48435 +
                  ((C3629 + C3628 - C3627 - C3630) * C103 +
                   (C3633 + C3632 - C3631 - C3634) * C104 +
                   (C3912 + C3913 - C3914 - C3915) * C105) *
                      C48582 * C48442 +
                  ((C3637 - (C3636 + C3635) + C3638) * C103 +
                   (C3641 - (C3640 + C3639) + C3642) * C104 +
                   ((C113 * C1681 + C48597 * C1682) * C3457 -
                    (C377 * C3454 + C378 * C3456) +
                    (C113 * C1683 + C48597 * C1684) * C48481) *
                       C105) *
                      C48582 * C3060) *
                     C48360)) /
               (p * q * std::sqrt(p + q));
    d2ee[6] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C115 + C48597 * C122) * C47163 +
                   (C113 * C123 + C48597 * C136) * C48477 -
                   (C113 * C508 + C48597 * C518) * C47155 -
                   (C113 * C519 + C48597 * C538) * C48484 +
                   (C113 * C509 + C48597 * C520) * C47169 +
                   (C113 * C521 + C48597 * C539) * C4029) *
                      C103 +
                  (C4034 + C4035 - C4036 - C4037 + C4038 + C4039) * C104 +
                  C4056 * C105) *
                     C48582 * C48435 +
                 (((C113 * C1004 + C48597 * C1009) * C47155 -
                   ((C113 * C316 + C48597 * C334) * C48477 +
                    (C113 * C304 + C48597 * C317) * C47163) +
                   (C113 * C1010 + C48597 * C1019) * C48484 -
                   (C113 * C1375 + C48597 * C1384) * C47169 -
                   (C113 * C1385 + C48597 * C1402) * C4029) *
                      C103 +
                  (C4203 - (C4204 + C4205) + C4206 - C4207 - C4208) * C104 +
                  (C4209 - (C4210 + C4211) + C4212 - C4213 - C4214) * C105) *
                     C48582 * C48442 +
                 (((C113 * C305 + C48597 * C318) * C47163 +
                   (C113 * C319 + C48597 * C335) * C48477 -
                   (C113 * C1378 + C48597 * C1390) * C47155 -
                   (C113 * C1391 + C48597 * C1405) * C48484 +
                   (C113 * C1379 + C48597 * C1392) * C47169 +
                   (C113 * C1393 + C48597 * C1406) * C4029) *
                      C103 +
                  (C371 * C47163 + C372 * C48477 - C1698 * C47155 -
                   C1699 * C48484 + (C113 * C1381 + C48597 * C1396) * C47169 +
                   (C113 * C1397 + C48597 * C1408) * C4029) *
                      C104 +
                  (C373 * C47163 + C374 * C48477 - C1700 * C47155 -
                   C1701 * C48484 + (C113 * C1383 + C48597 * C1400) * C47169 +
                   (C113 * C1401 + C48597 * C1410) * C4029) *
                      C105) *
                     C48582 * C3060) *
                C48350) /
               (p * q * std::sqrt(p + q));
    d2ee[7] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C3456 +
            (C113 * C123 + C48597 * C136) * C3454 -
            (C113 * C508 + C48597 * C518) * C3457 -
            (C113 * C519 + C48597 * C538) * C48481) *
               C103 +
           (C3459 + C3460 - C3461 - C3462) * C104 + C3479 * C105) *
              C48582 * C48740 +
          (((C113 * C1004 + C48597 * C1009) * C3457 -
            ((C113 * C316 + C48597 * C334) * C3454 +
             (C113 * C304 + C48597 * C317) * C3456) +
            (C113 * C1010 + C48597 * C1019) * C48481) *
               C103 +
           (C3627 - (C3628 + C3629) + C3630) * C104 + C3917 * C105) *
              C48582 * C48736 +
          (((C113 * C305 + C48597 * C318) * C3456 +
            (C113 * C319 + C48597 * C335) * C3454 -
            (C113 * C1378 + C48597 * C1390) * C3457 -
            (C113 * C1391 + C48597 * C1405) * C48481) *
               C103 +
           (C3635 + C3636 - C3637 - C3638) * C104 +
           (C3639 + C3640 - C3641 - C3642) * C105) *
              C48582 * C48726 +
          (((C113 * C1803 + C48597 * C1806) * C3457 -
            ((C113 * C1251 + C48597 * C1261) * C3454 +
             (C113 * C1243 + C48597 * C1252) * C3456) +
            (C113 * C1807 + C48597 * C1812) * C48481) *
               C103 +
           ((C113 * C1804 + C48597 * C1808) * C3457 -
            (C1530 * C3454 + C1531 * C3456) +
            (C113 * C1809 + C48597 * C1813) * C48481) *
               C104 +
           ((C113 * C1805 + C48597 * C1810) * C3457 -
            (C1528 * C3454 + C1529 * C3456) +
            (C113 * C1811 + C48597 * C1814) * C48481) *
               C105) *
              C48582 * C48704) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C3456 +
             (C113 * C123 + C48597 * C136) * C3454 -
             (C113 * C508 + C48597 * C518) * C3457 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C103 +
            (C3459 + C3460 - C3461 - C3462) * C104 + C3479 * C105) *
               C48582 * C2680 +
           (((C113 * C1004 + C48597 * C1009) * C3457 -
             ((C113 * C316 + C48597 * C334) * C3454 +
              (C113 * C304 + C48597 * C317) * C3456) +
             (C113 * C1010 + C48597 * C1019) * C48481) *
                C103 +
            (C3627 - (C3628 + C3629) + C3630) * C104 + C3917 * C105) *
               C48582 * C48439) *
              C48730 +
          (((C3461 - (C3460 + C3459) + C3462) * C103 +
            (C3465 - (C3464 + C3463) + C3466) * C104 + C3480 * C105) *
               C48582 * C2680 +
           ((C3629 + C3628 - C3627 - C3630) * C103 +
            (C3633 + C3632 - C3631 - C3634) * C104 +
            (C3912 + C3913 - C3914 - C3915) * C105) *
               C48582 * C48439) *
              C48717 +
          ((C3479 * C103 + (C3469 + C3468 - C3467 - C3470) * C104 +
            (C3471 + C3472 - C3473 - C3474) * C105) *
               C48582 * C2680 +
           (C3917 * C103 + (C3914 - (C3913 + C3912) + C3915) * C104 +
            ((C113 * C1008 + C48597 * C1017) * C3457 -
             (C721 * C3454 + C722 * C3456) +
             (C113 * C1018 + C48597 * C1023) * C48481) *
                C105) *
               C48582 * C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C3744 +
            (C113 * C123 + C48597 * C136) * C48741 -
            (C113 * C508 + C48597 * C518) * C3745 -
            (C113 * C519 + C48597 * C538) * C48738 +
            (C113 * C509 + C48597 * C520) * C3746 +
            (C113 * C521 + C48597 * C539) * C48729 -
            (C113 * C2136 + C48597 * C2142) * C3747 -
            (C113 * C2143 + C48597 * C2154) * C48710) *
               C103 +
           (C3749 + C3750 - C3751 - C3752 + C3753 + C3754 - C3755 - C3756) *
               C104 +
           (C3757 + C3758 - C3759 - C3760 + C3761 + C3762 - C3763 - C3764) *
               C105) *
              C48582 * C2680 +
          (((C113 * C1004 + C48597 * C1009) * C3745 -
            ((C113 * C316 + C48597 * C334) * C48741 +
             (C113 * C304 + C48597 * C317) * C3744) +
            (C113 * C1010 + C48597 * C1019) * C48738 -
            (C113 * C1375 + C48597 * C1384) * C3746 -
            (C113 * C1385 + C48597 * C1402) * C48729 +
            (C113 * C2570 + C48597 * C2573) * C3747 +
            (C113 * C2574 + C48597 * C2579) * C48710) *
               C103 +
           (C1043 * C3745 - (C369 * C48741 + C370 * C3744) + C1044 * C48738 -
            C2327 * C3746 - C2328 * C48729 +
            (C113 * C2571 + C48597 * C2575) * C3747 +
            (C113 * C2576 + C48597 * C2580) * C48710) *
               C104 +
           (C1045 * C3745 - (C367 * C48741 + C368 * C3744) + C1047 * C48738 -
            C2329 * C3746 - C2330 * C48729 +
            (C113 * C2572 + C48597 * C2577) * C3747 +
            (C113 * C2578 + C48597 * C2581) * C48710) *
               C105) *
              C48582 * C48439) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[8] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C48597 * C122) * C47163 +
                    (C113 * C123 + C48597 * C136) * C48477 -
                    (C113 * C508 + C48597 * C518) * C47155 -
                    (C113 * C519 + C48597 * C538) * C48484 +
                    (C113 * C509 + C48597 * C520) * C47169 +
                    (C113 * C521 + C48597 * C539) * C4029) *
                       C103 +
                   (C4034 + C4035 - C4036 - C4037 + C4038 + C4039) * C104 +
                   C4056 * C105) *
                      C48582 * C2680 +
                  (((C113 * C1004 + C48597 * C1009) * C47155 -
                    ((C113 * C316 + C48597 * C334) * C48477 +
                     (C113 * C304 + C48597 * C317) * C47163) +
                    (C113 * C1010 + C48597 * C1019) * C48484 -
                    (C113 * C1375 + C48597 * C1384) * C47169 -
                    (C113 * C1385 + C48597 * C1402) * C4029) *
                       C103 +
                   (C4203 - (C4204 + C4205) + C4206 - C4207 - C4208) * C104 +
                   (C4209 - (C4210 + C4211) + C4212 - C4213 - C4214) * C105) *
                      C48582 * C48439) *
                     C48648 +
                 (((C4036 - (C4035 + C4034) + C4037 - C4038 - C4039) * C103 +
                   (C4042 - (C4041 + C4040) + C4043 - C4044 - C4045) * C104 +
                   (C4046 - (C4047 + C4048) + C4049 - C4050 - C4051) * C105) *
                      C48582 * C2680 +
                  ((C4205 + C4204 - C4203 - C4206 + C4207 + C4208) * C103 +
                   (C4211 + C4210 - C4209 - C4212 + C4213 + C4214) * C104 +
                   (C375 * C47163 + C376 * C48477 - C1048 * C47155 -
                    C1049 * C48484 + (C113 * C2306 + C48597 * C2307) * C47169 +
                    (C113 * C2308 + C48597 * C2309) * C4029) *
                       C105) *
                      C48582 * C48439) *
                     C48360)) /
               (p * q * std::sqrt(p + q));
    d2ee[9] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                (((((C113 * C115 + C48597 * C122) * C3456 +
                    (C113 * C123 + C48597 * C136) * C3454 -
                    (C113 * C508 + C48597 * C518) * C3457 -
                    (C113 * C519 + C48597 * C538) * C48481) *
                       C103 +
                   (C3459 + C3460 - C3461 - C3462) * C104 + C3479 * C105) *
                      C48582 * C2680 +
                  (((C113 * C1004 + C48597 * C1009) * C3457 -
                    ((C113 * C316 + C48597 * C334) * C3454 +
                     (C113 * C304 + C48597 * C317) * C3456) +
                    (C113 * C1010 + C48597 * C1019) * C48481) *
                       C103 +
                   (C3627 - (C3628 + C3629) + C3630) * C104 + C3917 * C105) *
                      C48582 * C48439) *
                     C48730 +
                 (((C3461 - (C3460 + C3459) + C3462) * C103 +
                   (C3465 - (C3464 + C3463) + C3466) * C104 + C3480 * C105) *
                      C48582 * C2680 +
                  ((C3629 + C3628 - C3627 - C3630) * C103 +
                   (C3633 + C3632 - C3631 - C3634) * C104 +
                   (C3912 + C3913 - C3914 - C3915) * C105) *
                      C48582 * C48439) *
                     C48717 +
                 ((C3479 * C103 + (C3469 + C3468 - C3467 - C3470) * C104 +
                   (C3471 + C3472 - C3473 - C3474) * C105) *
                      C48582 * C2680 +
                  (C3917 * C103 + (C3914 - (C3913 + C3912) + C3915) * C104 +
                   ((C113 * C1008 + C48597 * C1017) * C3457 -
                    (C721 * C3454 + C722 * C3456) +
                    (C113 * C1018 + C48597 * C1023) * C48481) *
                       C105) *
                      C48582 * C48439) *
                     C48688)) /
                   (p * q * std::sqrt(p + q)) -
               (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                ((((C113 * C115 + C48597 * C122) * C3456 +
                   (C113 * C123 + C48597 * C136) * C3454 -
                   (C113 * C508 + C48597 * C518) * C3457 -
                   (C113 * C519 + C48597 * C538) * C48481) *
                      C103 +
                  (C3459 + C3460 - C3461 - C3462) * C104 + C3479 * C105) *
                     C48582 * C48740 +
                 (((C113 * C1004 + C48597 * C1009) * C3457 -
                   ((C113 * C316 + C48597 * C334) * C3454 +
                    (C113 * C304 + C48597 * C317) * C3456) +
                   (C113 * C1010 + C48597 * C1019) * C48481) *
                      C103 +
                  (C3627 - (C3628 + C3629) + C3630) * C104 + C3917 * C105) *
                     C48582 * C48736 +
                 (((C113 * C305 + C48597 * C318) * C3456 +
                   (C113 * C319 + C48597 * C335) * C3454 -
                   (C113 * C1378 + C48597 * C1390) * C3457 -
                   (C113 * C1391 + C48597 * C1405) * C48481) *
                      C103 +
                  (C3635 + C3636 - C3637 - C3638) * C104 +
                  (C3639 + C3640 - C3641 - C3642) * C105) *
                     C48582 * C48726 +
                 (((C113 * C1803 + C48597 * C1806) * C3457 -
                   ((C113 * C1251 + C48597 * C1261) * C3454 +
                    (C113 * C1243 + C48597 * C1252) * C3456) +
                   (C113 * C1807 + C48597 * C1812) * C48481) *
                      C103 +
                  ((C113 * C1804 + C48597 * C1808) * C3457 -
                   (C1530 * C3454 + C1531 * C3456) +
                   (C113 * C1809 + C48597 * C1813) * C48481) *
                      C104 +
                  ((C113 * C1805 + C48597 * C1810) * C3457 -
                   (C1528 * C3454 + C1529 * C3456) +
                   (C113 * C1811 + C48597 * C1814) * C48481) *
                      C105) *
                     C48582 * C48704) *
                C48350) /
                   (p * q * std::sqrt(p + q));
    d2ee[10] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48597 * C122) * C114 +
                     (C113 * C123 + C48597 * C136) * C48394) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C48582 * C1509 -
                   (C391 * C105 + (C381 + C382) * C104 +
                    ((C113 * C316 + C48597 * C334) * C48394 +
                     (C113 * C304 + C48597 * C317) * C114) *
                        C103) *
                       C48582 * C1510 +
                   (((C113 * C305 + C48597 * C318) * C114 +
                     (C113 * C319 + C48597 * C335) * C48394) *
                        C103 +
                    (C383 + C384) * C104 + C392 * C105) *
                       C48582 * C1511 -
                   ((C1532 + C1533) * C105 + (C1534 + C1535) * C104 +
                    ((C113 * C1251 + C48597 * C1261) * C48394 +
                     (C113 * C1243 + C48597 * C1252) * C114) *
                        C103) *
                       C48582 * C48704) *
                      C48648 +
                  (((C382 + C381) * C103 + (C380 + C379) * C104 + C716 * C105) *
                       C48582 * C1510 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C48582 * C1509 -
                   ((C389 + C390) * C105 + (C386 + C385) * C104 +
                    (C384 + C383) * C103) *
                       C48582 * C1511 +
                   ((C1535 + C1534) * C103 + (C1533 + C1532) * C104 +
                    ((C113 * C1515 + C48597 * C1516) * C114 +
                     (C113 * C1517 + C48597 * C1518) * C48394) *
                        C105) *
                       C48582 * C48704) *
                      C48360)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48597 * C122) * C114 +
                     (C113 * C123 + C48597 * C136) * C48394) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C48582 * C48662 -
                   (C391 * C105 + (C381 + C382) * C104 +
                    ((C113 * C316 + C48597 * C334) * C48394 +
                     (C113 * C304 + C48597 * C317) * C114) *
                        C103) *
                       C48582 * C48439) *
                      C707 +
                  (((C382 + C381) * C103 + (C380 + C379) * C104 + C716 * C105) *
                       C48582 * C48439 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C48582 * C48662) *
                      C708 +
                  ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48582 *
                       C48662 -
                   ((C723 + C724) * C105 + (C388 + C387) * C104 + C391 * C103) *
                       C48582 * C48439) *
                      C709 +
                  ((C716 * C103 + (C724 + C723) * C104 +
                    ((C113 * C711 + C48597 * C712) * C114 +
                     (C113 * C713 + C48597 * C714) * C48394) *
                        C105) *
                       C48582 * C48439 -
                   ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
                       C48582 * C48662) *
                      C48698)) /
                    (p * q * std::sqrt(p + q)) +
                (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48597 * C122) * C1928 +
                     (C113 * C123 + C48597 * C136) * C1925 -
                     (C113 * C508 + C48597 * C518) * C1929 -
                     (C113 * C519 + C48597 * C538) * C1926 +
                     (C113 * C509 + C48597 * C520) * C1930 +
                     (C113 * C521 + C48597 * C539) * C48697) *
                        C103 +
                    (C1932 + C1933 - C1934 - C1935 + C1936 + C1937) * C104 +
                    C1954 * C105) *
                       C48582 * C48662 +
                   (((C113 * C1004 + C48597 * C1009) * C1929 -
                     ((C113 * C316 + C48597 * C334) * C1925 +
                      (C113 * C304 + C48597 * C317) * C1928) +
                     (C113 * C1010 + C48597 * C1019) * C1926 -
                     (C113 * C1375 + C48597 * C1384) * C1930 -
                     (C113 * C1385 + C48597 * C1402) * C48697) *
                        C103 +
                    (C2311 - (C2312 + C2313) + C2314 - C2331 - C2332) * C104 +
                    (C2319 - (C2320 + C2321) + C2322 - C2333 - C2334) * C105) *
                       C48582 * C48439) *
                      C48648 +
                  (((C1934 - (C1933 + C1932) + C1935 - C1936 - C1937) * C103 +
                    (C1940 - (C1939 + C1938) + C1941 - C1942 - C1943) * C104 +
                    (C1944 - (C1945 + C1946) + C1947 - C1948 - C1949) * C105) *
                       C48582 * C48662 +
                   ((C2313 + C2312 - C2311 - C2314 + C2331 + C2332) * C103 +
                    (C2321 + C2320 - C2319 - C2322 + C2333 + C2334) * C104 +
                    (C375 * C1928 + C376 * C1925 - C1048 * C1929 -
                     C1049 * C1926 + (C113 * C2306 + C48597 * C2307) * C1930 +
                     (C113 * C2308 + C48597 * C2309) * C48697) *
                        C105) *
                       C48582 * C48439) *
                      C48360)) /
                    (p * q * std::sqrt(p + q));
    d2ee[11] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C824 +
            (C113 * C123 + C48597 * C136) * C48663 -
            (C113 * C508 + C48597 * C518) * C825 -
            (C113 * C519 + C48597 * C538) * C48481) *
               C103 +
           (C831 + C832 - C833 - C834) * C104 + C857 * C105) *
              C48582 * C1509 +
          (((C113 * C1004 + C48597 * C1009) * C825 -
            ((C113 * C316 + C48597 * C334) * C48663 +
             (C113 * C304 + C48597 * C317) * C824) +
            (C113 * C1010 + C48597 * C1019) * C48481) *
               C103 +
           (C1050 - (C1027 + C1028) + C1051) * C104 + C1057 * C105) *
              C48582 * C1510 +
          (((C113 * C305 + C48597 * C318) * C824 +
            (C113 * C319 + C48597 * C335) * C48663 -
            (C113 * C1378 + C48597 * C1390) * C825 -
            (C113 * C1391 + C48597 * C1405) * C48481) *
               C103 +
           (C1686 + C1687 - C1702 - C1703) * C104 +
           (C1692 + C1693 - C1704 - C1705) * C105) *
              C48582 * C1511 +
          (((C113 * C1803 + C48597 * C1806) * C825 -
            ((C113 * C1251 + C48597 * C1261) * C48663 +
             (C113 * C1243 + C48597 * C1252) * C824) +
            (C113 * C1807 + C48597 * C1812) * C48481) *
               C103 +
           ((C113 * C1804 + C48597 * C1808) * C825 -
            (C1530 * C48663 + C1531 * C824) +
            (C113 * C1809 + C48597 * C1813) * C48481) *
               C104 +
           ((C113 * C1805 + C48597 * C1810) * C825 -
            (C1528 * C48663 + C1529 * C824) +
            (C113 * C1811 + C48597 * C1814) * C48481) *
               C105) *
              C48582 * C48704) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C824 +
             (C113 * C123 + C48597 * C136) * C48663 -
             (C113 * C508 + C48597 * C518) * C825 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C103 +
            (C831 + C832 - C833 - C834) * C104 + C857 * C105) *
               C48582 * C48662 +
           (((C113 * C1004 + C48597 * C1009) * C825 -
             ((C113 * C316 + C48597 * C334) * C48663 +
              (C113 * C304 + C48597 * C317) * C824) +
             (C113 * C1010 + C48597 * C1019) * C48481) *
                C103 +
            (C1050 - (C1027 + C1028) + C1051) * C104 + C1057 * C105) *
               C48582 * C48439) *
              C299 +
          (((C833 - (C832 + C831) + C834) * C103 +
            (C837 - (C836 + C835) + C838) * C104 + C858 * C105) *
               C48582 * C48662 +
           ((C1028 + C1027 - C1050 - C1051) * C103 +
            (C1034 + C1033 - C1052 - C1053) * C104 +
            (C1037 + C1038 - C1054 - C1055) * C105) *
               C48582 * C48439) *
              C300 +
          ((C857 * C103 + (C841 + C840 - C839 - C842) * C104 +
            (C843 + C844 - C855 - C856) * C105) *
               C48582 * C48662 +
           (C1057 * C103 + (C1054 - (C1038 + C1037) + C1055) * C104 +
            ((C113 * C1008 + C48597 * C1017) * C825 -
             (C721 * C48663 + C722 * C824) +
             (C113 * C1018 + C48597 * C1023) * C48481) *
                C105) *
               C48582 * C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C2436 +
            (C113 * C123 + C48597 * C136) * C2432 -
            (C113 * C508 + C48597 * C518) * C2437 -
            (C113 * C519 + C48597 * C538) * C2433 +
            (C113 * C509 + C48597 * C520) * C2438 +
            (C113 * C521 + C48597 * C539) * C2434 -
            (C113 * C2136 + C48597 * C2142) * C2439 -
            (C113 * C2143 + C48597 * C2154) * C48710) *
               C103 +
           (C2445 + C2446 - C2447 - C2448 + C2449 + C2450 - C2469 - C2470) *
               C104 +
           (C2455 + C2456 - C2457 - C2458 + C2459 + C2460 - C2471 - C2472) *
               C105) *
              C48582 * C48662 +
          (((C113 * C1004 + C48597 * C1009) * C2437 -
            ((C113 * C316 + C48597 * C334) * C2432 +
             (C113 * C304 + C48597 * C317) * C2436) +
            (C113 * C1010 + C48597 * C1019) * C2433 -
            (C113 * C1375 + C48597 * C1384) * C2438 -
            (C113 * C1385 + C48597 * C1402) * C2434 +
            (C113 * C2570 + C48597 * C2573) * C2439 +
            (C113 * C2574 + C48597 * C2579) * C48710) *
               C103 +
           (C1043 * C2437 - (C369 * C2432 + C370 * C2436) + C1044 * C2433 -
            C2327 * C2438 - C2328 * C2434 +
            (C113 * C2571 + C48597 * C2575) * C2439 +
            (C113 * C2576 + C48597 * C2580) * C48710) *
               C104 +
           (C1045 * C2437 - (C367 * C2432 + C368 * C2436) + C1047 * C2433 -
            C2329 * C2438 - C2330 * C2434 +
            (C113 * C2572 + C48597 * C2577) * C2439 +
            (C113 * C2578 + C48597 * C2581) * C48710) *
               C105) *
              C48582 * C48439) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[12] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C48597 * C122) * C114 +
                (C113 * C123 + C48597 * C136) * C48394) *
                   C103 +
               (C174 + C175) * C104 + C184 * C105) *
                  C48582 * C48377 * C108 -
              (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                  C48582 * C48377 * C109 +
              (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48582 *
                  C48377 * C110 -
              ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
                  C48582 * C48377 * C111 +
              (C186 * C103 + (C183 + C182) * C104 +
               ((C113 * C121 + C48597 * C134) * C114 +
                (C113 * C135 + C48597 * C142) * C48394) *
                   C105) *
                  C48582 * C48377 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48597 * C122) * C114 +
                 (C113 * C123 + C48597 * C136) * C48394) *
                    C103 +
                (C174 + C175) * C104 + C184 * C105) *
                   C48582 * C48733 -
               (C391 * C105 + (C381 + C382) * C104 +
                ((C113 * C316 + C48597 * C334) * C48394 +
                 (C113 * C304 + C48597 * C317) * C114) *
                    C103) *
                   C48582 * C48721 +
               (((C113 * C305 + C48597 * C318) * C114 +
                 (C113 * C319 + C48597 * C335) * C48394) *
                    C103 +
                (C383 + C384) * C104 + C392 * C105) *
                   C48582 * C48694) *
                  C299 +
              (((C382 + C381) * C103 + (C380 + C379) * C104 +
                (C387 + C388) * C105) *
                   C48582 * C48721 -
               (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                   C48582 * C48733 -
               ((C389 + C390) * C105 + (C386 + C385) * C104 +
                (C384 + C383) * C103) *
                   C48582 * C48694) *
                  C300 +
              ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48582 *
                   C48733 -
               (((C113 * C328 + C48597 * C340) * C48394 +
                 (C113 * C310 + C48597 * C329) * C114) *
                    C105 +
                (C388 + C387) * C104 + C391 * C103) *
                   C48582 * C48721 +
               (C392 * C103 + (C390 + C389) * C104 +
                ((C113 * C311 + C48597 * C330) * C114 +
                 (C113 * C331 + C48597 * C341) * C48394) *
                    C105) *
                   C48582 * C48694) *
                  C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C505 +
            (C113 * C123 + C48597 * C136) * C48734 -
            (C113 * C508 + C48597 * C518) * C506 -
            (C113 * C519 + C48597 * C538) * C48723 +
            (C113 * C509 + C48597 * C520) * C507 +
            (C113 * C521 + C48597 * C539) * C48697) *
               C103 +
           (C549 + C550 - C592 - C593 + C594 + C595) * C104 + C607 * C105) *
              C48582 * C48377 * C299 +
          ((C592 - (C550 + C549) + C593 - C594 - C595) * C103 +
           (C596 - (C560 + C559) + C597 - C598 - C599) * C104 +
           (C600 - (C571 + C572) + C601 - C602 - C603) * C105) *
              C48582 * C48377 * C300 +
          (C607 * C103 + (C572 + C571 - C600 - C601 + C602 + C603) * C104 +
           (C170 * C505 + C171 * C48734 - (C113 * C516 + C48597 * C534) * C506 -
            (C113 * C535 + C48597 * C546) * C48723 +
            (C113 * C517 + C48597 * C536) * C507 +
            (C113 * C537 + C48597 * C547) * C48697) *
               C105) *
              C48582 * C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48582 * C1167 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C48597 * C334) * C48394 +
             (C113 * C304 + C48597 * C317) * C114) *
                C103) *
               C48582 * C1168 +
           (((C113 * C305 + C48597 * C318) * C114 +
             (C113 * C319 + C48597 * C335) * C48394) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C48582 * C48694) *
              C48730 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C716 * C105) *
               C48582 * C1168 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48582 * C1167 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C48582 * C48694) *
              C48717 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48582 * C1167 -
           ((C723 + C724) * C105 + (C388 + C387) * C104 + C391 * C103) *
               C48582 * C1168 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C48597 * C330) * C114 +
             (C113 * C331 + C48597 * C341) * C48394) *
                C105) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C114 +
            (C113 * C123 + C48597 * C136) * C48394) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C48582 * C1235 -
          (C391 * C105 + (C381 + C382) * C104 +
           ((C113 * C316 + C48597 * C334) * C48394 +
            (C113 * C304 + C48597 * C317) * C114) *
               C103) *
              C48582 * C1236 +
          (((C113 * C305 + C48597 * C318) * C114 +
            (C113 * C319 + C48597 * C335) * C48394) *
               C103 +
           (C383 + C384) * C104 + C392 * C105) *
              C48582 * C1237 -
          (((C113 * C1247 + C48597 * C1259) * C48394 +
            (C113 * C1241 + C48597 * C1248) * C114) *
               C105 +
           ((C113 * C1249 + C48597 * C1260) * C48394 +
            (C113 * C1242 + C48597 * C1250) * C114) *
               C104 +
           ((C113 * C1251 + C48597 * C1261) * C48394 +
            (C113 * C1243 + C48597 * C1252) * C114) *
               C103) *
              C48582 * C1238 +
          (((C113 * C1244 + C48597 * C1253) * C114 +
            (C113 * C1254 + C48597 * C1262) * C48394) *
               C103 +
           ((C113 * C1245 + C48597 * C1255) * C114 +
            (C113 * C1256 + C48597 * C1263) * C48394) *
               C104 +
           ((C113 * C1246 + C48597 * C1257) * C114 +
            (C113 * C1258 + C48597 * C1264) * C48394) *
               C105) *
              C48582 * C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C505 +
            (C113 * C123 + C48597 * C136) * C48734 -
            (C113 * C508 + C48597 * C518) * C506 -
            (C113 * C519 + C48597 * C538) * C48723 +
            (C113 * C509 + C48597 * C520) * C507 +
            (C113 * C521 + C48597 * C539) * C48697) *
               C103 +
           (C549 + C550 - C592 - C593 + C594 + C595) * C104 + C607 * C105) *
              C48582 * C1167 +
          (((C113 * C1004 + C48597 * C1009) * C506 -
            ((C113 * C316 + C48597 * C334) * C48734 +
             (C113 * C304 + C48597 * C317) * C505) +
            (C113 * C1010 + C48597 * C1019) * C48723 -
            (C113 * C1375 + C48597 * C1384) * C507 -
            (C113 * C1385 + C48597 * C1402) * C48697) *
               C103 +
           (C1043 * C506 - (C369 * C48734 + C370 * C505) + C1044 * C48723 -
            (C113 * C1376 + C48597 * C1386) * C507 -
            (C113 * C1387 + C48597 * C1403) * C48697) *
               C104 +
           (C1045 * C506 - (C367 * C48734 + C368 * C505) + C1047 * C48723 -
            (C113 * C1377 + C48597 * C1388) * C507 -
            (C113 * C1389 + C48597 * C1404) * C48697) *
               C105) *
              C48582 * C1168 +
          (((C113 * C305 + C48597 * C318) * C505 +
            (C113 * C319 + C48597 * C335) * C48734 -
            (C113 * C1378 + C48597 * C1390) * C506 -
            (C113 * C1391 + C48597 * C1405) * C48723 +
            (C113 * C1379 + C48597 * C1392) * C507 +
            (C113 * C1393 + C48597 * C1406) * C48697) *
               C103 +
           (C371 * C505 + C372 * C48734 -
            (C113 * C1380 + C48597 * C1394) * C506 -
            (C113 * C1395 + C48597 * C1407) * C48723 +
            (C113 * C1381 + C48597 * C1396) * C507 +
            (C113 * C1397 + C48597 * C1408) * C48697) *
               C104 +
           (C373 * C505 + C374 * C48734 -
            (C113 * C1382 + C48597 * C1398) * C506 -
            (C113 * C1399 + C48597 * C1409) * C48723 +
            (C113 * C1383 + C48597 * C1400) * C507 +
            (C113 * C1401 + C48597 * C1410) * C48697) *
               C105) *
              C48582 * C48694) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C1928 +
            (C113 * C123 + C48597 * C136) * C1925 -
            (C113 * C508 + C48597 * C518) * C1929 -
            (C113 * C519 + C48597 * C538) * C1926 +
            (C113 * C509 + C48597 * C520) * C1930 +
            (C113 * C521 + C48597 * C539) * C48697) *
               C103 +
           (C1932 + C1933 - C1934 - C1935 + C1936 + C1937) * C104 +
           C1954 * C105) *
              C48582 * C48377 * C48730 +
          ((C1934 - (C1933 + C1932) + C1935 - C1936 - C1937) * C103 +
           (C1940 - (C1939 + C1938) + C1941 - C1942 - C1943) * C104 +
           (C1944 - (C1945 + C1946) + C1947 - C1948 - C1949) * C105) *
              C48582 * C48377 * C48717 +
          (C1954 * C103 +
           (C1946 + C1945 - C1944 - C1947 + C1948 + C1949) * C104 +
           (C170 * C1928 + C171 * C1925 - C851 * C1929 - C852 * C1926 +
            (C113 * C517 + C48597 * C536) * C1930 +
            (C113 * C537 + C48597 * C547) * C48697) *
               C105) *
              C48582 * C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C1928 +
            (C113 * C123 + C48597 * C136) * C1925 -
            (C113 * C508 + C48597 * C518) * C1929 -
            (C113 * C519 + C48597 * C538) * C1926 +
            (C113 * C509 + C48597 * C520) * C1930 +
            (C113 * C521 + C48597 * C539) * C48697) *
               C103 +
           (C1932 + C1933 - C1934 - C1935 + C1936 + C1937) * C104 +
           C1954 * C105) *
              C48582 * C48733 +
          (((C113 * C1004 + C48597 * C1009) * C1929 -
            ((C113 * C316 + C48597 * C334) * C1925 +
             (C113 * C304 + C48597 * C317) * C1928) +
            (C113 * C1010 + C48597 * C1019) * C1926 -
            (C113 * C1375 + C48597 * C1384) * C1930 -
            (C113 * C1385 + C48597 * C1402) * C48697) *
               C103 +
           (C1043 * C1929 - (C369 * C1925 + C370 * C1928) + C1044 * C1926 -
            (C113 * C1376 + C48597 * C1386) * C1930 -
            (C113 * C1387 + C48597 * C1403) * C48697) *
               C104 +
           (C1045 * C1929 - (C367 * C1925 + C368 * C1928) + C1047 * C1926 -
            (C113 * C1377 + C48597 * C1388) * C1930 -
            (C113 * C1389 + C48597 * C1404) * C48697) *
               C105) *
              C48582 * C48721 +
          (((C113 * C305 + C48597 * C318) * C1928 +
            (C113 * C319 + C48597 * C335) * C1925 -
            (C113 * C1378 + C48597 * C1390) * C1929 -
            (C113 * C1391 + C48597 * C1405) * C1926 +
            (C113 * C1379 + C48597 * C1392) * C1930 +
            (C113 * C1393 + C48597 * C1406) * C48697) *
               C103 +
           (C371 * C1928 + C372 * C1925 - C1698 * C1929 - C1699 * C1926 +
            (C113 * C1381 + C48597 * C1396) * C1930 +
            (C113 * C1397 + C48597 * C1408) * C48697) *
               C104 +
           (C373 * C1928 + C374 * C1925 - C1700 * C1929 - C1701 * C1926 +
            (C113 * C1383 + C48597 * C1400) * C1930 +
            (C113 * C1401 + C48597 * C1410) * C48697) *
               C105) *
              C48582 * C48694) *
         C48350) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48597 * C122) * C2131 +
           (C113 * C123 + C48597 * C136) * C2126 -
           (C113 * C508 + C48597 * C518) * C2132 -
           (C113 * C519 + C48597 * C538) * C2127 +
           (C113 * C509 + C48597 * C520) * C2133 +
           (C113 * C521 + C48597 * C539) * C2128 -
           (C113 * C2136 + C48597 * C2142) * C2134 -
           (C113 * C2143 + C48597 * C2154) * C2129 +
           (C113 * C2137 + C48597 * C2144) * C2135 +
           (C113 * C2145 + C48597 * C2155) * C2130) *
              C103 +
          (C164 * C2131 + C165 * C2126 - C579 * C2132 - C580 * C2127 +
           C581 * C2133 + C582 * C2128 -
           (C113 * C2138 + C48597 * C2146) * C2134 -
           (C113 * C2147 + C48597 * C2156) * C2129 +
           (C113 * C2139 + C48597 * C2148) * C2135 +
           (C113 * C2149 + C48597 * C2157) * C2130) *
              C104 +
          (C166 * C2131 + C167 * C2126 - C584 * C2132 - C585 * C2127 +
           C586 * C2133 + C587 * C2128 -
           (C113 * C2140 + C48597 * C2150) * C2134 -
           (C113 * C2151 + C48597 * C2158) * C2129 +
           (C113 * C2141 + C48597 * C2152) * C2135 +
           (C113 * C2153 + C48597 * C2159) * C2130) *
              C105) *
         C48582 * C48377 * C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[13] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C824 +
             (C113 * C123 + C48597 * C136) * C48663 -
             (C113 * C508 + C48597 * C518) * C825 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C103 +
            (C831 + C832 - C833 - C834) * C104 + C857 * C105) *
               C48582 * C1167 +
           (((C113 * C1004 + C48597 * C1009) * C825 -
             ((C113 * C316 + C48597 * C334) * C48663 +
              (C113 * C304 + C48597 * C317) * C824) +
             (C113 * C1010 + C48597 * C1019) * C48481) *
                C103 +
            (C1050 - (C1027 + C1028) + C1051) * C104 + C1057 * C105) *
               C48582 * C1168 +
           (((C113 * C305 + C48597 * C318) * C824 +
             (C113 * C319 + C48597 * C335) * C48663 -
             (C113 * C1378 + C48597 * C1390) * C825 -
             (C113 * C1391 + C48597 * C1405) * C48481) *
                C103 +
            (C1686 + C1687 - C1702 - C1703) * C104 +
            (C1692 + C1693 - C1704 - C1705) * C105) *
               C48582 * C48694) *
              C48648 +
          (((C833 - (C832 + C831) + C834) * C103 +
            (C837 - (C836 + C835) + C838) * C104 + C858 * C105) *
               C48582 * C1167 +
           ((C1028 + C1027 - C1050 - C1051) * C103 +
            (C1034 + C1033 - C1052 - C1053) * C104 +
            (C1037 + C1038 - C1054 - C1055) * C105) *
               C48582 * C1168 +
           ((C1702 - (C1687 + C1686) + C1703) * C103 +
            (C1704 - (C1693 + C1692) + C1705) * C104 +
            ((C113 * C1681 + C48597 * C1682) * C825 -
             (C377 * C48663 + C378 * C824) +
             (C113 * C1683 + C48597 * C1684) * C48481) *
                C105) *
               C48582 * C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C824 +
            (C113 * C123 + C48597 * C136) * C48663 -
            (C113 * C508 + C48597 * C518) * C825 -
            (C113 * C519 + C48597 * C538) * C48481) *
               C103 +
           (C831 + C832 - C833 - C834) * C104 + C857 * C105) *
              C48582 * C48377 * C707 +
          ((C833 - (C832 + C831) + C834) * C103 +
           (C837 - (C836 + C835) + C838) * C104 + C858 * C105) *
              C48582 * C48377 * C708 +
          (C857 * C103 + (C841 + C840 - C839 - C842) * C104 +
           (C843 + C844 - C855 - C856) * C105) *
              C48582 * C48377 * C709 +
          (C858 * C103 + (C855 - (C844 + C843) + C856) * C104 +
           ((C113 * C826 + C48597 * C827) * C825 -
            (C172 * C48663 + C173 * C824) +
            (C113 * C828 + C48597 * C829) * C48481) *
               C105) *
              C48582 * C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C2436 +
            (C113 * C123 + C48597 * C136) * C2432 -
            (C113 * C508 + C48597 * C518) * C2437 -
            (C113 * C519 + C48597 * C538) * C2433 +
            (C113 * C509 + C48597 * C520) * C2438 +
            (C113 * C521 + C48597 * C539) * C2434 -
            (C113 * C2136 + C48597 * C2142) * C2439 -
            (C113 * C2143 + C48597 * C2154) * C48710) *
               C103 +
           (C2445 + C2446 - C2447 - C2448 + C2449 + C2450 - C2469 - C2470) *
               C104 +
           (C2455 + C2456 - C2457 - C2458 + C2459 + C2460 - C2471 - C2472) *
               C105) *
              C48582 * C48377 * C48648 +
          ((C2447 - (C2446 + C2445) + C2448 - C2449 - C2450 + C2469 + C2470) *
               C103 +
           (C2457 - (C2456 + C2455) + C2458 - C2459 - C2460 + C2471 + C2472) *
               C104 +
           (C588 * C2437 - (C168 * C2432 + C169 * C2436) + C589 * C2433 -
            C590 * C2438 - C591 * C2434 +
            (C113 * C2440 + C48597 * C2441) * C2439 +
            (C113 * C2442 + C48597 * C2443) * C48710) *
               C105) *
              C48582 * C48377 * C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[14] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48582 * C48733 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C48597 * C334) * C48394 +
             (C113 * C304 + C48597 * C317) * C114) *
                C103) *
               C48582 * C48721 +
           (((C113 * C305 + C48597 * C318) * C114 +
             (C113 * C319 + C48597 * C335) * C48394) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C48582 * C48694) *
              C299 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 +
            (C387 + C388) * C105) *
               C48582 * C48721 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48582 * C48733 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C48582 * C48694) *
              C300 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48582 *
               C48733 -
           (((C113 * C328 + C48597 * C340) * C48394 +
             (C113 * C310 + C48597 * C329) * C114) *
                C105 +
            (C388 + C387) * C104 + C391 * C103) *
               C48582 * C48721 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C48597 * C330) * C114 +
             (C113 * C331 + C48597 * C341) * C48394) *
                C105) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C114 +
            (C113 * C123 + C48597 * C136) * C48394) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C48582 * C48377 * C108 -
          (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) * C48582 *
              C48377 * C109 +
          (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48582 * C48377 *
              C110 -
          ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) * C48582 *
              C48377 * C111 +
          (C186 * C103 + (C183 + C182) * C104 +
           ((C113 * C121 + C48597 * C134) * C114 +
            (C113 * C135 + C48597 * C142) * C48394) *
               C105) *
              C48582 * C48377 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48582 * C1167 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C48597 * C334) * C48394 +
             (C113 * C304 + C48597 * C317) * C114) *
                C103) *
               C48582 * C1168 +
           (((C113 * C305 + C48597 * C318) * C114 +
             (C113 * C319 + C48597 * C335) * C48394) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C48582 * C48694) *
              C48730 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C716 * C105) *
               C48582 * C1168 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48582 * C1167 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C48582 * C48694) *
              C48717 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48582 * C1167 -
           ((C723 + C724) * C105 + (C388 + C387) * C104 + C391 * C103) *
               C48582 * C1168 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C48597 * C330) * C114 +
             (C113 * C331 + C48597 * C341) * C48394) *
                C105) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C114 +
            (C113 * C123 + C48597 * C136) * C48394) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C48582 * C1235 -
          (C391 * C105 + (C381 + C382) * C104 +
           ((C113 * C316 + C48597 * C334) * C48394 +
            (C113 * C304 + C48597 * C317) * C114) *
               C103) *
              C48582 * C1236 +
          (((C113 * C305 + C48597 * C318) * C114 +
            (C113 * C319 + C48597 * C335) * C48394) *
               C103 +
           (C383 + C384) * C104 + C392 * C105) *
              C48582 * C1237 -
          (((C113 * C1247 + C48597 * C1259) * C48394 +
            (C113 * C1241 + C48597 * C1248) * C114) *
               C105 +
           ((C113 * C1249 + C48597 * C1260) * C48394 +
            (C113 * C1242 + C48597 * C1250) * C114) *
               C104 +
           ((C113 * C1251 + C48597 * C1261) * C48394 +
            (C113 * C1243 + C48597 * C1252) * C114) *
               C103) *
              C48582 * C1238 +
          (((C113 * C1244 + C48597 * C1253) * C114 +
            (C113 * C1254 + C48597 * C1262) * C48394) *
               C103 +
           ((C113 * C1245 + C48597 * C1255) * C114 +
            (C113 * C1256 + C48597 * C1263) * C48394) *
               C104 +
           ((C113 * C1246 + C48597 * C1257) * C114 +
            (C113 * C1258 + C48597 * C1264) * C48394) *
               C105) *
              C48582 * C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C1928 +
            (C113 * C123 + C48597 * C136) * C1925 -
            (C113 * C508 + C48597 * C518) * C1929 -
            (C113 * C519 + C48597 * C538) * C1926 +
            (C113 * C509 + C48597 * C520) * C1930 +
            (C113 * C521 + C48597 * C539) * C48697) *
               C103 +
           (C1932 + C1933 - C1934 - C1935 + C1936 + C1937) * C104 +
           C1954 * C105) *
              C48582 * C48377 * C48730 +
          ((C1934 - (C1933 + C1932) + C1935 - C1936 - C1937) * C103 +
           (C1940 - (C1939 + C1938) + C1941 - C1942 - C1943) * C104 +
           (C1944 - (C1945 + C1946) + C1947 - C1948 - C1949) * C105) *
              C48582 * C48377 * C48717 +
          (C1954 * C103 +
           (C1946 + C1945 - C1944 - C1947 + C1948 + C1949) * C104 +
           (C170 * C1928 + C171 * C1925 - C851 * C1929 - C852 * C1926 +
            (C113 * C517 + C48597 * C536) * C1930 +
            (C113 * C537 + C48597 * C547) * C48697) *
               C105) *
              C48582 * C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C1928 +
            (C113 * C123 + C48597 * C136) * C1925 -
            (C113 * C508 + C48597 * C518) * C1929 -
            (C113 * C519 + C48597 * C538) * C1926 +
            (C113 * C509 + C48597 * C520) * C1930 +
            (C113 * C521 + C48597 * C539) * C48697) *
               C103 +
           (C1932 + C1933 - C1934 - C1935 + C1936 + C1937) * C104 +
           C1954 * C105) *
              C48582 * C48733 +
          (((C113 * C1004 + C48597 * C1009) * C1929 -
            ((C113 * C316 + C48597 * C334) * C1925 +
             (C113 * C304 + C48597 * C317) * C1928) +
            (C113 * C1010 + C48597 * C1019) * C1926 -
            (C113 * C1375 + C48597 * C1384) * C1930 -
            (C113 * C1385 + C48597 * C1402) * C48697) *
               C103 +
           (C1043 * C1929 - (C369 * C1925 + C370 * C1928) + C1044 * C1926 -
            (C113 * C1376 + C48597 * C1386) * C1930 -
            (C113 * C1387 + C48597 * C1403) * C48697) *
               C104 +
           (C1045 * C1929 - (C367 * C1925 + C368 * C1928) + C1047 * C1926 -
            (C113 * C1377 + C48597 * C1388) * C1930 -
            (C113 * C1389 + C48597 * C1404) * C48697) *
               C105) *
              C48582 * C48721 +
          (((C113 * C305 + C48597 * C318) * C1928 +
            (C113 * C319 + C48597 * C335) * C1925 -
            (C113 * C1378 + C48597 * C1390) * C1929 -
            (C113 * C1391 + C48597 * C1405) * C1926 +
            (C113 * C1379 + C48597 * C1392) * C1930 +
            (C113 * C1393 + C48597 * C1406) * C48697) *
               C103 +
           (C371 * C1928 + C372 * C1925 - C1698 * C1929 - C1699 * C1926 +
            (C113 * C1381 + C48597 * C1396) * C1930 +
            (C113 * C1397 + C48597 * C1408) * C48697) *
               C104 +
           (C373 * C1928 + C374 * C1925 - C1700 * C1929 - C1701 * C1926 +
            (C113 * C1383 + C48597 * C1400) * C1930 +
            (C113 * C1401 + C48597 * C1410) * C48697) *
               C105) *
              C48582 * C48694) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[15] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48597 * C122) * C3456 +
                     (C113 * C123 + C48597 * C136) * C3454 -
                     (C113 * C508 + C48597 * C518) * C3457 -
                     (C113 * C519 + C48597 * C538) * C48481) *
                        C103 +
                    (C3459 + C3460 - C3461 - C3462) * C104 + C3479 * C105) *
                       C48582 * C48662 +
                   (((C113 * C1004 + C48597 * C1009) * C3457 -
                     ((C113 * C316 + C48597 * C334) * C3454 +
                      (C113 * C304 + C48597 * C317) * C3456) +
                     (C113 * C1010 + C48597 * C1019) * C48481) *
                        C103 +
                    (C3627 - (C3628 + C3629) + C3630) * C104 + C3917 * C105) *
                       C48582 * C48439) *
                      C48355 +
                  (((C3461 - (C3460 + C3459) + C3462) * C103 +
                    (C3465 - (C3464 + C3463) + C3466) * C104 + C3480 * C105) *
                       C48582 * C48662 +
                   ((C3629 + C3628 - C3627 - C3630) * C103 +
                    (C3633 + C3632 - C3631 - C3634) * C104 +
                    (C3912 + C3913 - C3914 - C3915) * C105) *
                       C48582 * C48439) *
                      C48363 +
                  ((C3479 * C103 + (C3469 + C3468 - C3467 - C3470) * C104 +
                    (C3471 + C3472 - C3473 - C3474) * C105) *
                       C48582 * C48662 +
                   (C3917 * C103 + (C3914 - (C3913 + C3912) + C3915) * C104 +
                    ((C113 * C1008 + C48597 * C1017) * C3457 -
                     (C721 * C3454 + C722 * C3456) +
                     (C113 * C1018 + C48597 * C1023) * C48481) *
                        C105) *
                       C48582 * C48439) *
                      C3063)) /
                (p * q * std::sqrt(p + q));
    d2ee[16] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48597 * C122) * C47163 +
                     (C113 * C123 + C48597 * C136) * C48477 -
                     (C113 * C508 + C48597 * C518) * C47155 -
                     (C113 * C519 + C48597 * C538) * C48484 +
                     (C113 * C509 + C48597 * C520) * C47169 +
                     (C113 * C521 + C48597 * C539) * C4029) *
                        C103 +
                    (C4034 + C4035 - C4036 - C4037 + C4038 + C4039) * C104 +
                    C4056 * C105) *
                       C48582 * C48662 +
                   (((C113 * C1004 + C48597 * C1009) * C47155 -
                     ((C113 * C316 + C48597 * C334) * C48477 +
                      (C113 * C304 + C48597 * C317) * C47163) +
                     (C113 * C1010 + C48597 * C1019) * C48484 -
                     (C113 * C1375 + C48597 * C1384) * C47169 -
                     (C113 * C1385 + C48597 * C1402) * C4029) *
                        C103 +
                    (C4203 - (C4204 + C4205) + C4206 - C4207 - C4208) * C104 +
                    (C4209 - (C4210 + C4211) + C4212 - C4213 - C4214) * C105) *
                       C48582 * C48439) *
                      C2788 +
                  (((C4036 - (C4035 + C4034) + C4037 - C4038 - C4039) * C103 +
                    (C4042 - (C4041 + C4040) + C4043 - C4044 - C4045) * C104 +
                    (C4046 - (C4047 + C4048) + C4049 - C4050 - C4051) * C105) *
                       C48582 * C48662 +
                   ((C4205 + C4204 - C4203 - C4206 + C4207 + C4208) * C103 +
                    (C4211 + C4210 - C4209 - C4212 + C4213 + C4214) * C104 +
                    (C375 * C47163 + C376 * C48477 - C1048 * C47155 -
                     C1049 * C48484 + (C113 * C2306 + C48597 * C2307) * C47169 +
                     (C113 * C2308 + C48597 * C2309) * C4029) *
                        C105) *
                       C48582 * C48439) *
                      C48360)) /
                (p * q * std::sqrt(p + q));
    d2ee[17] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C3456 +
             (C113 * C123 + C48597 * C136) * C3454 -
             (C113 * C508 + C48597 * C518) * C3457 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C103 +
            (C3459 + C3460 - C3461 - C3462) * C104 + C3479 * C105) *
               C48582 * C48733 +
           (((C113 * C1004 + C48597 * C1009) * C3457 -
             ((C113 * C316 + C48597 * C334) * C3454 +
              (C113 * C304 + C48597 * C317) * C3456) +
             (C113 * C1010 + C48597 * C1019) * C48481) *
                C103 +
            (C3627 - (C3628 + C3629) + C3630) * C104 +
            (C3631 - (C3632 + C3633) + C3634) * C105) *
               C48582 * C48721 +
           (((C113 * C305 + C48597 * C318) * C3456 +
             (C113 * C319 + C48597 * C335) * C3454 -
             (C113 * C1378 + C48597 * C1390) * C3457 -
             (C113 * C1391 + C48597 * C1405) * C48481) *
                C103 +
            (C3635 + C3636 - C3637 - C3638) * C104 +
            (C3639 + C3640 - C3641 - C3642) * C105) *
               C48582 * C48694) *
              C2788 +
          (((C3461 - (C3460 + C3459) + C3462) * C103 +
            (C3465 - (C3464 + C3463) + C3466) * C104 + C3480 * C105) *
               C48582 * C48733 +
           ((C3629 + C3628 - C3627 - C3630) * C103 +
            (C3633 + C3632 - C3631 - C3634) * C104 +
            (C375 * C3456 + C376 * C3454 - C1048 * C3457 - C1049 * C48481) *
                C105) *
               C48582 * C48721 +
           ((C3637 - (C3636 + C3635) + C3638) * C103 +
            (C3641 - (C3640 + C3639) + C3642) * C104 +
            ((C113 * C1681 + C48597 * C1682) * C3457 -
             (C377 * C3454 + C378 * C3456) +
             (C113 * C1683 + C48597 * C1684) * C48481) *
                C105) *
               C48582 * C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C3456 +
            (C113 * C123 + C48597 * C136) * C3454 -
            (C113 * C508 + C48597 * C518) * C3457 -
            (C113 * C519 + C48597 * C538) * C48481) *
               C103 +
           (C3459 + C3460 - C3461 - C3462) * C104 + C3479 * C105) *
              C48582 * C48377 * C48739 +
          ((C3461 - (C3460 + C3459) + C3462) * C103 +
           (C3465 - (C3464 + C3463) + C3466) * C104 + C3480 * C105) *
              C48582 * C48377 * C48732 +
          (C3479 * C103 + (C3469 + C3468 - C3467 - C3470) * C104 +
           (C3471 + C3472 - C3473 - C3474) * C105) *
              C48582 * C48377 * C48719 +
          (C3480 * C103 + (C3473 - (C3472 + C3471) + C3474) * C104 +
           ((C113 * C826 + C48597 * C827) * C3457 -
            (C172 * C3454 + C173 * C3456) +
            (C113 * C828 + C48597 * C829) * C48481) *
               C105) *
              C48582 * C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C3744 +
            (C113 * C123 + C48597 * C136) * C48741 -
            (C113 * C508 + C48597 * C518) * C3745 -
            (C113 * C519 + C48597 * C538) * C48738 +
            (C113 * C509 + C48597 * C520) * C3746 +
            (C113 * C521 + C48597 * C539) * C48729 -
            (C113 * C2136 + C48597 * C2142) * C3747 -
            (C113 * C2143 + C48597 * C2154) * C48710) *
               C103 +
           (C3749 + C3750 - C3751 - C3752 + C3753 + C3754 - C3755 - C3756) *
               C104 +
           (C3757 + C3758 - C3759 - C3760 + C3761 + C3762 - C3763 - C3764) *
               C105) *
              C48582 * C48377 * C2788 +
          ((C3751 - (C3750 + C3749) + C3752 - C3753 - C3754 + C3755 + C3756) *
               C103 +
           (C3759 - (C3758 + C3757) + C3760 - C3761 - C3762 + C3763 + C3764) *
               C104 +
           (C588 * C3745 - (C168 * C48741 + C169 * C3744) + C589 * C48738 -
            C590 * C3746 - C591 * C48729 +
            (C113 * C2440 + C48597 * C2441) * C3747 +
            (C113 * C2442 + C48597 * C2443) * C48710) *
               C105) *
              C48582 * C48377 * C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[18] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C115 + C48597 * C122) * C47163 +
                    (C113 * C123 + C48597 * C136) * C48477 -
                    (C113 * C508 + C48597 * C518) * C47155 -
                    (C113 * C519 + C48597 * C538) * C48484 +
                    (C113 * C509 + C48597 * C520) * C47169 +
                    (C113 * C521 + C48597 * C539) * C4029) *
                       C103 +
                   (C4034 + C4035 - C4036 - C4037 + C4038 + C4039) * C104 +
                   C4056 * C105) *
                      C48582 * C48377 * C48355 +
                  ((C4036 - (C4035 + C4034) + C4037 - C4038 - C4039) * C103 +
                   (C4042 - (C4041 + C4040) + C4043 - C4044 - C4045) * C104 +
                   (C4046 - (C4047 + C4048) + C4049 - C4050 - C4051) * C105) *
                      C48582 * C48377 * C48363 +
                  (C4056 * C103 +
                   (C4048 + C4047 - C4046 - C4049 + C4050 + C4051) * C104 +
                   (C170 * C47163 + C171 * C48477 - C851 * C47155 -
                    C852 * C48484 + (C113 * C517 + C48597 * C536) * C47169 +
                    (C113 * C537 + C48597 * C547) * C4029) *
                       C105) *
                      C48582 * C48377 * C3063)) /
                (p * q * std::sqrt(p + q));
    d2ee[19] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C3456 +
            (C113 * C123 + C48597 * C136) * C3454 -
            (C113 * C508 + C48597 * C518) * C3457 -
            (C113 * C519 + C48597 * C538) * C48481) *
               C103 +
           (C3459 + C3460 - C3461 - C3462) * C104 + C3479 * C105) *
              C48582 * C48377 * C48739 +
          ((C3461 - (C3460 + C3459) + C3462) * C103 +
           (C3465 - (C3464 + C3463) + C3466) * C104 + C3480 * C105) *
              C48582 * C48377 * C48732 +
          (C3479 * C103 + (C3469 + C3468 - C3467 - C3470) * C104 +
           (C3471 + C3472 - C3473 - C3474) * C105) *
              C48582 * C48377 * C48719 +
          (C3480 * C103 + (C3473 - (C3472 + C3471) + C3474) * C104 +
           ((C113 * C826 + C48597 * C827) * C3457 -
            (C172 * C3454 + C173 * C3456) +
            (C113 * C828 + C48597 * C829) * C48481) *
               C105) *
              C48582 * C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C3456 +
             (C113 * C123 + C48597 * C136) * C3454 -
             (C113 * C508 + C48597 * C518) * C3457 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C103 +
            (C3459 + C3460 - C3461 - C3462) * C104 + C3479 * C105) *
               C48582 * C48733 +
           (((C113 * C1004 + C48597 * C1009) * C3457 -
             ((C113 * C316 + C48597 * C334) * C3454 +
              (C113 * C304 + C48597 * C317) * C3456) +
             (C113 * C1010 + C48597 * C1019) * C48481) *
                C103 +
            (C3627 - (C3628 + C3629) + C3630) * C104 +
            (C3631 - (C3632 + C3633) + C3634) * C105) *
               C48582 * C48721 +
           (((C113 * C305 + C48597 * C318) * C3456 +
             (C113 * C319 + C48597 * C335) * C3454 -
             (C113 * C1378 + C48597 * C1390) * C3457 -
             (C113 * C1391 + C48597 * C1405) * C48481) *
                C103 +
            (C3635 + C3636 - C3637 - C3638) * C104 +
            (C3639 + C3640 - C3641 - C3642) * C105) *
               C48582 * C48694) *
              C2788 +
          (((C3461 - (C3460 + C3459) + C3462) * C103 +
            (C3465 - (C3464 + C3463) + C3466) * C104 + C3480 * C105) *
               C48582 * C48733 +
           ((C3629 + C3628 - C3627 - C3630) * C103 +
            (C3633 + C3632 - C3631 - C3634) * C104 +
            (C375 * C3456 + C376 * C3454 - C1048 * C3457 - C1049 * C48481) *
                C105) *
               C48582 * C48721 +
           ((C3637 - (C3636 + C3635) + C3638) * C103 +
            (C3641 - (C3640 + C3639) + C3642) * C104 +
            ((C113 * C1681 + C48597 * C1682) * C3457 -
             (C377 * C3454 + C378 * C3456) +
             (C113 * C1683 + C48597 * C1684) * C48481) *
                C105) *
               C48582 * C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[20] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48597 * C122) * C114 +
                     (C113 * C123 + C48597 * C136) * C48394) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C48582 * C48662 -
                   (C391 * C105 + (C381 + C382) * C104 +
                    ((C113 * C316 + C48597 * C334) * C48394 +
                     (C113 * C304 + C48597 * C317) * C114) *
                        C103) *
                       C48582 * C48439) *
                      C707 +
                  (((C382 + C381) * C103 + (C380 + C379) * C104 + C716 * C105) *
                       C48582 * C48439 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C48582 * C48662) *
                      C708 +
                  ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48582 *
                       C48662 -
                   ((C723 + C724) * C105 + (C388 + C387) * C104 + C391 * C103) *
                       C48582 * C48439) *
                      C709 +
                  ((C716 * C103 + (C724 + C723) * C104 +
                    ((C113 * C711 + C48597 * C712) * C114 +
                     (C113 * C713 + C48597 * C714) * C48394) *
                        C105) *
                       C48582 * C48439 -
                   ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) *
                       C48582 * C48662) *
                      C48698)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48597 * C122) * C114 +
                     (C113 * C123 + C48597 * C136) * C48394) *
                        C103 +
                    (C174 + C175) * C104 + C184 * C105) *
                       C48582 * C1509 -
                   (C391 * C105 + (C381 + C382) * C104 +
                    ((C113 * C316 + C48597 * C334) * C48394 +
                     (C113 * C304 + C48597 * C317) * C114) *
                        C103) *
                       C48582 * C1510 +
                   (((C113 * C305 + C48597 * C318) * C114 +
                     (C113 * C319 + C48597 * C335) * C48394) *
                        C103 +
                    (C383 + C384) * C104 + C392 * C105) *
                       C48582 * C1511 -
                   ((C1532 + C1533) * C105 + (C1534 + C1535) * C104 +
                    ((C113 * C1251 + C48597 * C1261) * C48394 +
                     (C113 * C1243 + C48597 * C1252) * C114) *
                        C103) *
                       C48582 * C48704) *
                      C48648 +
                  (((C382 + C381) * C103 + (C380 + C379) * C104 + C716 * C105) *
                       C48582 * C1510 -
                   (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
                       C48582 * C1509 -
                   ((C389 + C390) * C105 + (C386 + C385) * C104 +
                    (C384 + C383) * C103) *
                       C48582 * C1511 +
                   ((C1535 + C1534) * C103 + (C1533 + C1532) * C104 +
                    ((C113 * C1515 + C48597 * C1516) * C114 +
                     (C113 * C1517 + C48597 * C1518) * C48394) *
                        C105) *
                       C48582 * C48704) *
                      C48360)) /
                    (p * q * std::sqrt(p + q));
    d2ee[21] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48597 * C122) * C824 +
                     (C113 * C123 + C48597 * C136) * C48663 -
                     (C113 * C508 + C48597 * C518) * C825 -
                     (C113 * C519 + C48597 * C538) * C48481) *
                        C103 +
                    (C831 + C832 - C833 - C834) * C104 + C857 * C105) *
                       C48582 * C48662 +
                   (((C113 * C1004 + C48597 * C1009) * C825 -
                     ((C113 * C316 + C48597 * C334) * C48663 +
                      (C113 * C304 + C48597 * C317) * C824) +
                     (C113 * C1010 + C48597 * C1019) * C48481) *
                        C103 +
                    (C1050 - (C1027 + C1028) + C1051) * C104 + C1057 * C105) *
                       C48582 * C48439) *
                      C299 +
                  (((C833 - (C832 + C831) + C834) * C103 +
                    (C837 - (C836 + C835) + C838) * C104 + C858 * C105) *
                       C48582 * C48662 +
                   ((C1028 + C1027 - C1050 - C1051) * C103 +
                    (C1034 + C1033 - C1052 - C1053) * C104 +
                    (C1037 + C1038 - C1054 - C1055) * C105) *
                       C48582 * C48439) *
                      C300 +
                  ((C857 * C103 + (C841 + C840 - C839 - C842) * C104 +
                    (C843 + C844 - C855 - C856) * C105) *
                       C48582 * C48662 +
                   (C1057 * C103 + (C1054 - (C1038 + C1037) + C1055) * C104 +
                    ((C113 * C1008 + C48597 * C1017) * C825 -
                     (C721 * C48663 + C722 * C824) +
                     (C113 * C1018 + C48597 * C1023) * C48481) *
                        C105) *
                       C48582 * C48439) *
                      C48688)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C115 + C48597 * C122) * C824 +
                    (C113 * C123 + C48597 * C136) * C48663 -
                    (C113 * C508 + C48597 * C518) * C825 -
                    (C113 * C519 + C48597 * C538) * C48481) *
                       C103 +
                   (C831 + C832 - C833 - C834) * C104 + C857 * C105) *
                      C48582 * C1509 +
                  (((C113 * C1004 + C48597 * C1009) * C825 -
                    ((C113 * C316 + C48597 * C334) * C48663 +
                     (C113 * C304 + C48597 * C317) * C824) +
                    (C113 * C1010 + C48597 * C1019) * C48481) *
                       C103 +
                   (C1050 - (C1027 + C1028) + C1051) * C104 + C1057 * C105) *
                      C48582 * C1510 +
                  (((C113 * C305 + C48597 * C318) * C824 +
                    (C113 * C319 + C48597 * C335) * C48663 -
                    (C113 * C1378 + C48597 * C1390) * C825 -
                    (C113 * C1391 + C48597 * C1405) * C48481) *
                       C103 +
                   (C1686 + C1687 - C1702 - C1703) * C104 +
                   (C1692 + C1693 - C1704 - C1705) * C105) *
                      C48582 * C1511 +
                  (((C113 * C1803 + C48597 * C1806) * C825 -
                    ((C113 * C1251 + C48597 * C1261) * C48663 +
                     (C113 * C1243 + C48597 * C1252) * C824) +
                    (C113 * C1807 + C48597 * C1812) * C48481) *
                       C103 +
                   ((C113 * C1804 + C48597 * C1808) * C825 -
                    (C1530 * C48663 + C1531 * C824) +
                    (C113 * C1809 + C48597 * C1813) * C48481) *
                       C104 +
                   ((C113 * C1805 + C48597 * C1810) * C825 -
                    (C1528 * C48663 + C1529 * C824) +
                    (C113 * C1811 + C48597 * C1814) * C48481) *
                       C105) *
                      C48582 * C48704) *
                 C48350) /
                    (p * q * std::sqrt(p + q));
    d2ee[22] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48582 * C48733 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C48597 * C334) * C48394 +
             (C113 * C304 + C48597 * C317) * C114) *
                C103) *
               C48582 * C48721 +
           (((C113 * C305 + C48597 * C318) * C114 +
             (C113 * C319 + C48597 * C335) * C48394) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C48582 * C48694) *
              C299 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 +
            (C387 + C388) * C105) *
               C48582 * C48721 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48582 * C48733 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C48582 * C48694) *
              C300 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48582 *
               C48733 -
           (((C113 * C328 + C48597 * C340) * C48394 +
             (C113 * C310 + C48597 * C329) * C114) *
                C105 +
            (C388 + C387) * C104 + C391 * C103) *
               C48582 * C48721 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C48597 * C330) * C114 +
             (C113 * C331 + C48597 * C341) * C48394) *
                C105) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C114 +
            (C113 * C123 + C48597 * C136) * C48394) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C48582 * C48377 * C108 -
          (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) * C48582 *
              C48377 * C109 +
          (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48582 * C48377 *
              C110 -
          ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) * C48582 *
              C48377 * C111 +
          (C186 * C103 + (C183 + C182) * C104 +
           ((C113 * C121 + C48597 * C134) * C114 +
            (C113 * C135 + C48597 * C142) * C48394) *
               C105) *
              C48582 * C48377 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C505 +
            (C113 * C123 + C48597 * C136) * C48734 -
            (C113 * C508 + C48597 * C518) * C506 -
            (C113 * C519 + C48597 * C538) * C48723 +
            (C113 * C509 + C48597 * C520) * C507 +
            (C113 * C521 + C48597 * C539) * C48697) *
               C103 +
           (C549 + C550 - C592 - C593 + C594 + C595) * C104 + C607 * C105) *
              C48582 * C48377 * C299 +
          ((C592 - (C550 + C549) + C593 - C594 - C595) * C103 +
           (C596 - (C560 + C559) + C597 - C598 - C599) * C104 +
           (C600 - (C571 + C572) + C601 - C602 - C603) * C105) *
              C48582 * C48377 * C300 +
          (C607 * C103 + (C572 + C571 - C600 - C601 + C602 + C603) * C104 +
           (C170 * C505 + C171 * C48734 - (C113 * C516 + C48597 * C534) * C506 -
            (C113 * C535 + C48597 * C546) * C48723 +
            (C113 * C517 + C48597 * C536) * C507 +
            (C113 * C537 + C48597 * C547) * C48697) *
               C105) *
              C48582 * C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48582 * C1167 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C48597 * C334) * C48394 +
             (C113 * C304 + C48597 * C317) * C114) *
                C103) *
               C48582 * C1168 +
           (((C113 * C305 + C48597 * C318) * C114 +
             (C113 * C319 + C48597 * C335) * C48394) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C48582 * C48694) *
              C48730 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C716 * C105) *
               C48582 * C1168 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48582 * C1167 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C48582 * C48694) *
              C48717 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48582 * C1167 -
           ((C723 + C724) * C105 + (C388 + C387) * C104 + C391 * C103) *
               C48582 * C1168 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C48597 * C330) * C114 +
             (C113 * C331 + C48597 * C341) * C48394) *
                C105) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C114 +
            (C113 * C123 + C48597 * C136) * C48394) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C48582 * C1235 -
          (C391 * C105 + (C381 + C382) * C104 +
           ((C113 * C316 + C48597 * C334) * C48394 +
            (C113 * C304 + C48597 * C317) * C114) *
               C103) *
              C48582 * C1236 +
          (((C113 * C305 + C48597 * C318) * C114 +
            (C113 * C319 + C48597 * C335) * C48394) *
               C103 +
           (C383 + C384) * C104 + C392 * C105) *
              C48582 * C1237 -
          (((C113 * C1247 + C48597 * C1259) * C48394 +
            (C113 * C1241 + C48597 * C1248) * C114) *
               C105 +
           ((C113 * C1249 + C48597 * C1260) * C48394 +
            (C113 * C1242 + C48597 * C1250) * C114) *
               C104 +
           ((C113 * C1251 + C48597 * C1261) * C48394 +
            (C113 * C1243 + C48597 * C1252) * C114) *
               C103) *
              C48582 * C1238 +
          (((C113 * C1244 + C48597 * C1253) * C114 +
            (C113 * C1254 + C48597 * C1262) * C48394) *
               C103 +
           ((C113 * C1245 + C48597 * C1255) * C114 +
            (C113 * C1256 + C48597 * C1263) * C48394) *
               C104 +
           ((C113 * C1246 + C48597 * C1257) * C114 +
            (C113 * C1258 + C48597 * C1264) * C48394) *
               C105) *
              C48582 * C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C505 +
            (C113 * C123 + C48597 * C136) * C48734 -
            (C113 * C508 + C48597 * C518) * C506 -
            (C113 * C519 + C48597 * C538) * C48723 +
            (C113 * C509 + C48597 * C520) * C507 +
            (C113 * C521 + C48597 * C539) * C48697) *
               C103 +
           (C549 + C550 - C592 - C593 + C594 + C595) * C104 + C607 * C105) *
              C48582 * C1167 +
          (((C113 * C1004 + C48597 * C1009) * C506 -
            ((C113 * C316 + C48597 * C334) * C48734 +
             (C113 * C304 + C48597 * C317) * C505) +
            (C113 * C1010 + C48597 * C1019) * C48723 -
            (C113 * C1375 + C48597 * C1384) * C507 -
            (C113 * C1385 + C48597 * C1402) * C48697) *
               C103 +
           (C1043 * C506 - (C369 * C48734 + C370 * C505) + C1044 * C48723 -
            (C113 * C1376 + C48597 * C1386) * C507 -
            (C113 * C1387 + C48597 * C1403) * C48697) *
               C104 +
           (C1045 * C506 - (C367 * C48734 + C368 * C505) + C1047 * C48723 -
            (C113 * C1377 + C48597 * C1388) * C507 -
            (C113 * C1389 + C48597 * C1404) * C48697) *
               C105) *
              C48582 * C1168 +
          (((C113 * C305 + C48597 * C318) * C505 +
            (C113 * C319 + C48597 * C335) * C48734 -
            (C113 * C1378 + C48597 * C1390) * C506 -
            (C113 * C1391 + C48597 * C1405) * C48723 +
            (C113 * C1379 + C48597 * C1392) * C507 +
            (C113 * C1393 + C48597 * C1406) * C48697) *
               C103 +
           (C371 * C505 + C372 * C48734 -
            (C113 * C1380 + C48597 * C1394) * C506 -
            (C113 * C1395 + C48597 * C1407) * C48723 +
            (C113 * C1381 + C48597 * C1396) * C507 +
            (C113 * C1397 + C48597 * C1408) * C48697) *
               C104 +
           (C373 * C505 + C374 * C48734 -
            (C113 * C1382 + C48597 * C1398) * C506 -
            (C113 * C1399 + C48597 * C1409) * C48723 +
            (C113 * C1383 + C48597 * C1400) * C507 +
            (C113 * C1401 + C48597 * C1410) * C48697) *
               C105) *
              C48582 * C48694) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[23] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 ((((C113 * C115 + C48597 * C122) * C824 +
                    (C113 * C123 + C48597 * C136) * C48663 -
                    (C113 * C508 + C48597 * C518) * C825 -
                    (C113 * C519 + C48597 * C538) * C48481) *
                       C103 +
                   (C831 + C832 - C833 - C834) * C104 + C857 * C105) *
                      C48582 * C48377 * C707 +
                  ((C833 - (C832 + C831) + C834) * C103 +
                   (C837 - (C836 + C835) + C838) * C104 + C858 * C105) *
                      C48582 * C48377 * C708 +
                  (C857 * C103 + (C841 + C840 - C839 - C842) * C104 +
                   (C843 + C844 - C855 - C856) * C105) *
                      C48582 * C48377 * C709 +
                  (C858 * C103 + (C855 - (C844 + C843) + C856) * C104 +
                   ((C113 * C826 + C48597 * C827) * C825 -
                    (C172 * C48663 + C173 * C824) +
                    (C113 * C828 + C48597 * C829) * C48481) *
                       C105) *
                      C48582 * C48377 * C48698)) /
                    (p * q * std::sqrt(p + q)) -
                (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                 (((((C113 * C115 + C48597 * C122) * C824 +
                     (C113 * C123 + C48597 * C136) * C48663 -
                     (C113 * C508 + C48597 * C518) * C825 -
                     (C113 * C519 + C48597 * C538) * C48481) *
                        C103 +
                    (C831 + C832 - C833 - C834) * C104 + C857 * C105) *
                       C48582 * C1167 +
                   (((C113 * C1004 + C48597 * C1009) * C825 -
                     ((C113 * C316 + C48597 * C334) * C48663 +
                      (C113 * C304 + C48597 * C317) * C824) +
                     (C113 * C1010 + C48597 * C1019) * C48481) *
                        C103 +
                    (C1050 - (C1027 + C1028) + C1051) * C104 + C1057 * C105) *
                       C48582 * C1168 +
                   (((C113 * C305 + C48597 * C318) * C824 +
                     (C113 * C319 + C48597 * C335) * C48663 -
                     (C113 * C1378 + C48597 * C1390) * C825 -
                     (C113 * C1391 + C48597 * C1405) * C48481) *
                        C103 +
                    (C1686 + C1687 - C1702 - C1703) * C104 +
                    (C1692 + C1693 - C1704 - C1705) * C105) *
                       C48582 * C48694) *
                      C48648 +
                  (((C833 - (C832 + C831) + C834) * C103 +
                    (C837 - (C836 + C835) + C838) * C104 + C858 * C105) *
                       C48582 * C1167 +
                   ((C1028 + C1027 - C1050 - C1051) * C103 +
                    (C1034 + C1033 - C1052 - C1053) * C104 +
                    (C1037 + C1038 - C1054 - C1055) * C105) *
                       C48582 * C1168 +
                   ((C1702 - (C1687 + C1686) + C1703) * C103 +
                    (C1704 - (C1693 + C1692) + C1705) * C104 +
                    ((C113 * C1681 + C48597 * C1682) * C825 -
                     (C377 * C48663 + C378 * C824) +
                     (C113 * C1683 + C48597 * C1684) * C48481) *
                        C105) *
                       C48582 * C48694) *
                      C48360)) /
                    (p * q * std::sqrt(p + q));
    d2ee[24] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C114 +
            (C113 * C123 + C48597 * C136) * C48394) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C48582 * C48377 * C108 -
          (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) * C48582 *
              C48377 * C109 +
          (C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48582 * C48377 *
              C110 -
          ((C182 + C183) * C105 + (C181 + C180) * C104 + C185 * C103) * C48582 *
              C48377 * C111 +
          (C186 * C103 + (C183 + C182) * C104 +
           ((C113 * C121 + C48597 * C134) * C114 +
            (C113 * C135 + C48597 * C142) * C48394) *
               C105) *
              C48582 * C48377 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48582 * C48733 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C48597 * C334) * C48394 +
             (C113 * C304 + C48597 * C317) * C114) *
                C103) *
               C48582 * C48721 +
           (((C113 * C305 + C48597 * C318) * C114 +
             (C113 * C319 + C48597 * C335) * C48394) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C48582 * C48694) *
              C299 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 +
            (C387 + C388) * C105) *
               C48582 * C48721 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48582 * C48733 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C48582 * C48694) *
              C300 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48582 *
               C48733 -
           (((C113 * C328 + C48597 * C340) * C48394 +
             (C113 * C310 + C48597 * C329) * C114) *
                C105 +
            (C388 + C387) * C104 + C391 * C103) *
               C48582 * C48721 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C48597 * C330) * C114 +
             (C113 * C331 + C48597 * C341) * C48394) *
                C105) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C103 +
            (C174 + C175) * C104 + C184 * C105) *
               C48582 * C1167 -
           (C391 * C105 + (C381 + C382) * C104 +
            ((C113 * C316 + C48597 * C334) * C48394 +
             (C113 * C304 + C48597 * C317) * C114) *
                C103) *
               C48582 * C1168 +
           (((C113 * C305 + C48597 * C318) * C114 +
             (C113 * C319 + C48597 * C335) * C48394) *
                C103 +
            (C383 + C384) * C104 + C392 * C105) *
               C48582 * C48694) *
              C48730 +
          (((C382 + C381) * C103 + (C380 + C379) * C104 + C716 * C105) *
               C48582 * C1168 -
           (C185 * C105 + (C177 + C176) * C104 + (C175 + C174) * C103) *
               C48582 * C1167 -
           ((C389 + C390) * C105 + (C386 + C385) * C104 +
            (C384 + C383) * C103) *
               C48582 * C48694) *
              C48717 +
          ((C184 * C103 + (C179 + C178) * C104 + C186 * C105) * C48582 * C1167 -
           ((C723 + C724) * C105 + (C388 + C387) * C104 + C391 * C103) *
               C48582 * C1168 +
           (C392 * C103 + (C390 + C389) * C104 +
            ((C113 * C311 + C48597 * C330) * C114 +
             (C113 * C331 + C48597 * C341) * C48394) *
                C105) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C114 +
            (C113 * C123 + C48597 * C136) * C48394) *
               C103 +
           (C174 + C175) * C104 + C184 * C105) *
              C48582 * C1235 -
          (C391 * C105 + (C381 + C382) * C104 +
           ((C113 * C316 + C48597 * C334) * C48394 +
            (C113 * C304 + C48597 * C317) * C114) *
               C103) *
              C48582 * C1236 +
          (((C113 * C305 + C48597 * C318) * C114 +
            (C113 * C319 + C48597 * C335) * C48394) *
               C103 +
           (C383 + C384) * C104 + C392 * C105) *
              C48582 * C1237 -
          (((C113 * C1247 + C48597 * C1259) * C48394 +
            (C113 * C1241 + C48597 * C1248) * C114) *
               C105 +
           ((C113 * C1249 + C48597 * C1260) * C48394 +
            (C113 * C1242 + C48597 * C1250) * C114) *
               C104 +
           ((C113 * C1251 + C48597 * C1261) * C48394 +
            (C113 * C1243 + C48597 * C1252) * C114) *
               C103) *
              C48582 * C1238 +
          (((C113 * C1244 + C48597 * C1253) * C114 +
            (C113 * C1254 + C48597 * C1262) * C48394) *
               C103 +
           ((C113 * C1245 + C48597 * C1255) * C114 +
            (C113 * C1256 + C48597 * C1263) * C48394) *
               C104 +
           ((C113 * C1246 + C48597 * C1257) * C114 +
            (C113 * C1258 + C48597 * C1264) * C48394) *
               C105) *
              C48582 * C1239) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[25] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                 ((((((C113 * C115 + C48597 * C122) * C114 +
                      (C113 * C123 + C48597 * C136) * C48394) *
                         C5040 +
                     (C174 + C175) * C48681) *
                        C5042 +
                    ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
                       C48435 -
                   ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
                    (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
                       C48442 +
                   (((C5212 + C5211) * C5040 + C5202 * C48681) * C5042 +
                    ((C6087 + C6088) * C5040 + C6419 * C48681) * C48712) *
                       C3060) *
                      C48355 +
                  (((C5195 * C5040 + C5203 * C48681) * C5042 +
                    (C5202 * C5040 + C392 * C48681) * C48712) *
                       C48442 -
                   ((C391 * C48681 + C5201 * C5040) * C48712 +
                    ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
                       C48435 -
                   (((C1532 + C1533) * C48681 + C6420 * C5040) * C48712 +
                    (C5204 * C48681 + C5196 * C5040) * C5042) *
                       C3060) *
                      C48363 +
                  (((C184 * C5040 + (C179 + C178) * C48681) * C5042 +
                    (C5203 * C5040 + C716 * C48681) * C48712) *
                       C48435 -
                   (((C389 + C390) * C48681 + C5204 * C5040) * C48712 +
                    (C5489 * C48681 + C391 * C5040) * C5042) *
                       C48442 +
                   ((C392 * C5040 + (C390 + C389) * C48681) * C5042 +
                    ((C1533 + C1532) * C5040 +
                     ((C113 * C1515 + C48597 * C1516) * C114 +
                      (C113 * C1517 + C48597 * C1518) * C48394) *
                         C48681) *
                        C48712) *
                       C3060) *
                      C3063)) /
                (p * q * std::sqrt(p + q));
    d2ee[26] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C824 +
              (C113 * C123 + C48597 * C136) * C48663 -
              (C113 * C508 + C48597 * C518) * C825 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C5040 +
             (C831 + C832 - C833 - C834) * C48681) *
                C5042 +
            ((C5814 + C5815 - C5828 - C5829) * C5040 + C5830 * C48681) *
                C48712) *
               C48435 +
           (((C5828 - (C5815 + C5814) + C5829) * C5040 + C5831 * C48681) *
                C5042 +
            ((C6615 - (C6616 + C6617) + C6618) * C5040 + C6631 * C48681) *
                C48712) *
               C48442 +
           (((C6617 + C6616 - C6615 - C6618) * C5040 + C6632 * C48681) * C5042 +
            ((C6773 + C6774 - C6781 - C6782) * C5040 +
             (C6621 + C6622 - C6633 - C6634) * C48681) *
                C48712) *
               C3060) *
              C2788 +
          ((((C833 - (C832 + C831) + C834) * C5040 +
             (C837 - (C836 + C835) + C838) * C48681) *
                C5042 +
            (C5831 * C5040 + C1057 * C48681) * C48712) *
               C48435 +
           ((C5830 * C5040 + C5832 * C48681) * C5042 +
            (C6632 * C5040 + (C1692 + C1693 - C1704 - C1705) * C48681) *
                C48712) *
               C48442 +
           ((C6631 * C5040 + (C1704 - (C1693 + C1692) + C1705) * C48681) *
                C5042 +
            ((C6633 - (C6622 + C6621) + C6634) * C5040 +
             ((C113 * C1805 + C48597 * C1810) * C825 -
              (C1528 * C48663 + C1529 * C824) +
              (C113 * C1811 + C48597 * C1814) * C48481) *
                 C48681) *
                C48712) *
               C3060) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[27] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C5040 +
             (C174 + C175) * C48681) *
                C5042 +
            ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
               C48740 -
           ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
               C48736 +
           (((C5212 + C5211) * C5040 + C5202 * C48681) * C5042 +
            ((C6087 + C6088) * C5040 + C6419 * C48681) * C48712) *
               C48726 -
           (((C6089 + C6090) * C48681 + (C6091 + C6092) * C5040) * C48712 +
            (C6420 * C48681 + (C6088 + C6087) * C5040) * C5042) *
               C48704) *
              C2788 +
          (((C5195 * C5040 + C5203 * C48681) * C5042 +
            (C5202 * C5040 + C392 * C48681) * C48712) *
               C48736 -
           ((C391 * C48681 + C5201 * C5040) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
               C48740 -
           (((C1532 + C1533) * C48681 + C6420 * C5040) * C48712 +
            (C5204 * C48681 + C5196 * C5040) * C5042) *
               C48726 +
           ((C6419 * C5040 + (C1533 + C1532) * C48681) * C5042 +
            ((C6090 + C6089) * C5040 +
             ((C113 * C1246 + C48597 * C1257) * C114 +
              (C113 * C1258 + C48597 * C1264) * C48394) *
                 C48681) *
                C48712) *
               C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C5040 +
             (C174 + C175) * C48681) *
                C5042 +
            ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
               C2680 -
           ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
               C48439) *
              C48739 +
          (((C5195 * C5040 + C5203 * C48681) * C5042 +
            (C5202 * C5040 + C392 * C48681) * C48712) *
               C48439 -
           ((C391 * C48681 + C5201 * C5040) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
               C2680) *
              C48732 +
          (((C184 * C5040 + (C179 + C178) * C48681) * C5042 +
            (C5203 * C5040 + C716 * C48681) * C48712) *
               C2680 -
           (((C389 + C390) * C48681 + C5204 * C5040) * C48712 +
            (C5489 * C48681 + C391 * C5040) * C5042) *
               C48439) *
              C48719 +
          (((C716 * C5040 + (C724 + C723) * C48681) * C5042 +
            ((C390 + C389) * C5040 + ((C113 * C311 + C48597 * C330) * C114 +
                                      (C113 * C331 + C48597 * C341) * C48394) *
                                         C48681) *
                C48712) *
               C48439 -
           (((C723 + C724) * C48681 + C5489 * C5040) * C48712 +
            ((C181 + C180) * C48681 + C185 * C5040) * C5042) *
               C2680) *
              C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C505 +
              (C113 * C123 + C48597 * C136) * C48734 -
              (C113 * C508 + C48597 * C518) * C506 -
              (C113 * C519 + C48597 * C538) * C48723 +
              (C113 * C509 + C48597 * C520) * C507 +
              (C113 * C521 + C48597 * C539) * C48697) *
                 C5040 +
             (C549 + C550 - C592 - C593 + C594 + C595) * C48681) *
                C5042 +
            ((C6247 + C6248 - C6249 - C6250 + C6281 + C6282) * C5040 +
             C8145 * C48681) *
                C48712) *
               C2680 +
           (((C6249 - (C6248 + C6247) + C6250 - C6281 - C6282) * C5040 +
             C8146 * C48681) *
                C5042 +
            ((C6283 - (C6257 + C6258) + C6284 - C6285 - C6286) * C5040 +
             (C6265 - (C6266 + C6267) + C6268 - C6287 - C6288) * C48681) *
                C48712) *
               C48439) *
              C2788 +
          ((((C592 - (C550 + C549) + C593 - C594 - C595) * C5040 +
             (C596 - (C560 + C559) + C597 - C598 - C599) * C48681) *
                C5042 +
            (C8146 * C5040 +
             (C2943 - (C2944 + C2945) + C2946 - C2947 - C2948) * C48681) *
                C48712) *
               C2680 +
           ((C8145 * C5040 +
             (C2945 + C2944 - C2943 - C2946 + C2947 + C2948) * C48681) *
                C5042 +
            ((C6267 + C6266 - C6265 - C6268 + C6287 + C6288) * C5040 +
             (C373 * C505 + C374 * C48734 - C1700 * C506 - C1701 * C48723 +
              (C113 * C1383 + C48597 * C1400) * C507 +
              (C113 * C1401 + C48597 * C1410) * C48697) *
                 C48681) *
                C48712) *
               C48439) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[28] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C824 +
              (C113 * C123 + C48597 * C136) * C48663 -
              (C113 * C508 + C48597 * C518) * C825 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C5040 +
             (C831 + C832 - C833 - C834) * C48681) *
                C5042 +
            ((C5814 + C5815 - C5828 - C5829) * C5040 + C5830 * C48681) *
                C48712) *
               C2680 +
           (((C5828 - (C5815 + C5814) + C5829) * C5040 + C5831 * C48681) *
                C5042 +
            ((C6615 - (C6616 + C6617) + C6618) * C5040 + C6631 * C48681) *
                C48712) *
               C48439) *
              C48355 +
          ((((C833 - (C832 + C831) + C834) * C5040 +
             (C837 - (C836 + C835) + C838) * C48681) *
                C5042 +
            (C5831 * C5040 + C1057 * C48681) * C48712) *
               C2680 +
           ((C5830 * C5040 + C5832 * C48681) * C5042 +
            (C6632 * C5040 + (C1692 + C1693 - C1704 - C1705) * C48681) *
                C48712) *
               C48439) *
              C48363 +
          (((C857 * C5040 + (C841 + C840 - C839 - C842) * C48681) * C5042 +
            (C5832 * C5040 + (C1037 + C1038 - C1054 - C1055) * C48681) *
                C48712) *
               C2680 +
           ((C1057 * C5040 + (C1054 - (C1038 + C1037) + C1055) * C48681) *
                C5042 +
            ((C1704 - (C1693 + C1692) + C1705) * C5040 +
             ((C113 * C1681 + C48597 * C1682) * C825 -
              (C377 * C48663 + C378 * C824) +
              (C113 * C1683 + C48597 * C1684) * C48481) *
                 C48681) *
                C48712) *
               C48439) *
              C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[29] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C5040 +
             (C174 + C175) * C48681) *
                C5042 +
            ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
               C2680 -
           ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
               C48439) *
              C48739 +
          (((C5195 * C5040 + C5203 * C48681) * C5042 +
            (C5202 * C5040 + C392 * C48681) * C48712) *
               C48439 -
           ((C391 * C48681 + C5201 * C5040) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
               C2680) *
              C48732 +
          (((C184 * C5040 + (C179 + C178) * C48681) * C5042 +
            (C5203 * C5040 + C716 * C48681) * C48712) *
               C2680 -
           (((C389 + C390) * C48681 + C5204 * C5040) * C48712 +
            (C5489 * C48681 + C391 * C5040) * C5042) *
               C48439) *
              C48719 +
          (((C716 * C5040 + (C724 + C723) * C48681) * C5042 +
            ((C390 + C389) * C5040 + ((C113 * C311 + C48597 * C330) * C114 +
                                      (C113 * C331 + C48597 * C341) * C48394) *
                                         C48681) *
                C48712) *
               C48439 -
           (((C723 + C724) * C48681 + C5489 * C5040) * C48712 +
            ((C181 + C180) * C48681 + C185 * C5040) * C5042) *
               C2680) *
              C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C5040 +
             (C174 + C175) * C48681) *
                C5042 +
            ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
               C48740 -
           ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
               C48736 +
           (((C5212 + C5211) * C5040 + C5202 * C48681) * C5042 +
            ((C6087 + C6088) * C5040 + C6419 * C48681) * C48712) *
               C48726 -
           (((C6089 + C6090) * C48681 + (C6091 + C6092) * C5040) * C48712 +
            (C6420 * C48681 + (C6088 + C6087) * C5040) * C5042) *
               C48704) *
              C2788 +
          (((C5195 * C5040 + C5203 * C48681) * C5042 +
            (C5202 * C5040 + C392 * C48681) * C48712) *
               C48736 -
           ((C391 * C48681 + C5201 * C5040) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
               C48740 -
           (((C1532 + C1533) * C48681 + C6420 * C5040) * C48712 +
            (C5204 * C48681 + C5196 * C5040) * C5042) *
               C48726 +
           ((C6419 * C5040 + (C1533 + C1532) * C48681) * C5042 +
            ((C6090 + C6089) * C5040 +
             ((C113 * C1246 + C48597 * C1257) * C114 +
              (C113 * C1258 + C48597 * C1264) * C48394) *
                 C48681) *
                C48712) *
               C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[30] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C3456 +
              (C113 * C123 + C48597 * C136) * C3454 -
              (C113 * C508 + C48597 * C518) * C3457 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C5040 +
             (C3459 + C3460 - C3461 - C3462) * C48681) *
                C5042 +
            ((C9005 + C9006 - C9007 - C9008) * C5040 + C9025 * C48681) *
                C48712) *
               C48435 +
           (((C9007 - (C9006 + C9005) + C9008) * C5040 + C9026 * C48681) *
                C5042 +
            ((C9011 - (C9012 + C9013) + C9014) * C5040 + C9027 * C48681) *
                C48712) *
               C48442 +
           (((C9013 + C9012 - C9011 - C9014) * C5040 + C9028 * C48681) * C5042 +
            ((C10050 + C10051 - C10052 - C10053) * C5040 +
             (C9017 + C9018 - C9019 - C9020) * C48681) *
                C48712) *
               C3060) *
              C48648 +
          ((((C3461 - (C3460 + C3459) + C3462) * C5040 +
             (C3465 - (C3464 + C3463) + C3466) * C48681) *
                C5042 +
            (C9026 * C5040 + C3917 * C48681) * C48712) *
               C48435 +
           ((C9025 * C5040 + C9363 * C48681) * C5042 +
            (C9028 * C5040 + (C3639 + C3640 - C3641 - C3642) * C48681) *
                C48712) *
               C48442 +
           ((C9027 * C5040 + (C3641 - (C3640 + C3639) + C3642) * C48681) *
                C5042 +
            ((C9019 - (C9018 + C9017) + C9020) * C5040 +
             ((C113 * C1805 + C48597 * C1810) * C3457 -
              (C1528 * C3454 + C1529 * C3456) +
              (C113 * C1811 + C48597 * C1814) * C48481) *
                 C48681) *
                C48712) *
               C3060) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[31] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C47163 +
             (C113 * C123 + C48597 * C136) * C48477 -
             (C113 * C508 + C48597 * C518) * C47155 -
             (C113 * C519 + C48597 * C538) * C48484 +
             (C113 * C509 + C48597 * C520) * C47169 +
             (C113 * C521 + C48597 * C539) * C4029) *
                C5040 +
            (C4034 + C4035 - C4036 - C4037 + C4038 + C4039) * C48681) *
               C5042 +
           ((C9704 + C9705 - C9706 - C9707 + C9708 + C9709) * C5040 +
            C9724 * C48681) *
               C48712) *
              C48435 +
          (((C9706 - (C9705 + C9704) + C9707 - C9708 - C9709) * C5040 +
            C9725 * C48681) *
               C5042 +
           ((C10726 - (C10727 + C10728) + C10729 - C10730 - C10731) * C5040 +
            (C9712 - (C9713 + C9714) + C9715 - C9716 - C9717) * C48681) *
               C48712) *
              C48442 +
          (((C10728 + C10727 - C10726 - C10729 + C10730 + C10731) * C5040 +
            (C9714 + C9713 - C9712 - C9715 + C9716 + C9717) * C48681) *
               C5042 +
           ((C6081 * C47163 + C6082 * C48477 - C6779 * C47155 - C6780 * C48484 +
             (C113 * C6238 + C48597 * C6240) * C47169 +
             (C113 * C6241 + C48597 * C6244) * C4029) *
                C5040 +
            (C1531 * C47163 + C1530 * C48477 - C6629 * C47155 - C6630 * C48484 +
             (C113 * C6239 + C48597 * C6242) * C47169 +
             (C113 * C6243 + C48597 * C6245) * C4029) *
                C48681) *
               C48712) *
              C3060) *
         C48350) /
        (p * q * std::sqrt(p + q));
    d2ee[32] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C3456 +
             (C113 * C123 + C48597 * C136) * C3454 -
             (C113 * C508 + C48597 * C518) * C3457 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C5040 +
            (C3459 + C3460 - C3461 - C3462) * C48681) *
               C5042 +
           ((C9005 + C9006 - C9007 - C9008) * C5040 + C9025 * C48681) *
               C48712) *
              C48740 +
          (((C9007 - (C9006 + C9005) + C9008) * C5040 + C9026 * C48681) *
               C5042 +
           ((C9011 - (C9012 + C9013) + C9014) * C5040 + C9027 * C48681) *
               C48712) *
              C48736 +
          (((C9013 + C9012 - C9011 - C9014) * C5040 + C9028 * C48681) * C5042 +
           ((C10050 + C10051 - C10052 - C10053) * C5040 +
            (C9017 + C9018 - C9019 - C9020) * C48681) *
               C48712) *
              C48726 +
          (((C10052 - (C10051 + C10050) + C10053) * C5040 +
            (C9019 - (C9018 + C9017) + C9020) * C48681) *
               C5042 +
           (((C113 * C6764 + C48597 * C6766) * C3457 -
             (C6085 * C3454 + C6086 * C3456) +
             (C113 * C6767 + C48597 * C6770) * C48481) *
                C5040 +
            ((C113 * C6765 + C48597 * C6768) * C3457 -
             (C6083 * C3454 + C6084 * C3456) +
             (C113 * C6769 + C48597 * C6771) * C48481) *
                C48681) *
               C48712) *
              C48704) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C3456 +
              (C113 * C123 + C48597 * C136) * C3454 -
              (C113 * C508 + C48597 * C518) * C3457 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C5040 +
             (C3459 + C3460 - C3461 - C3462) * C48681) *
                C5042 +
            ((C9005 + C9006 - C9007 - C9008) * C5040 + C9025 * C48681) *
                C48712) *
               C2680 +
           (((C9007 - (C9006 + C9005) + C9008) * C5040 + C9026 * C48681) *
                C5042 +
            ((C9011 - (C9012 + C9013) + C9014) * C5040 + C9027 * C48681) *
                C48712) *
               C48439) *
              C48730 +
          ((((C3461 - (C3460 + C3459) + C3462) * C5040 +
             (C3465 - (C3464 + C3463) + C3466) * C48681) *
                C5042 +
            (C9026 * C5040 + C3917 * C48681) * C48712) *
               C2680 +
           ((C9025 * C5040 + C9363 * C48681) * C5042 +
            (C9028 * C5040 + (C3639 + C3640 - C3641 - C3642) * C48681) *
                C48712) *
               C48439) *
              C48717 +
          (((C3479 * C5040 + (C3469 + C3468 - C3467 - C3470) * C48681) * C5042 +
            (C9363 * C5040 + (C3912 + C3913 - C3914 - C3915) * C48681) *
                C48712) *
               C2680 +
           ((C3917 * C5040 + (C3914 - (C3913 + C3912) + C3915) * C48681) *
                C5042 +
            ((C3641 - (C3640 + C3639) + C3642) * C5040 +
             ((C113 * C1681 + C48597 * C1682) * C3457 -
              (C377 * C3454 + C378 * C3456) +
              (C113 * C1683 + C48597 * C1684) * C48481) *
                 C48681) *
                C48712) *
               C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C3744 +
             (C113 * C123 + C48597 * C136) * C48741 -
             (C113 * C508 + C48597 * C518) * C3745 -
             (C113 * C519 + C48597 * C538) * C48738 +
             (C113 * C509 + C48597 * C520) * C3746 +
             (C113 * C521 + C48597 * C539) * C48729 -
             (C113 * C2136 + C48597 * C2142) * C3747 -
             (C113 * C2143 + C48597 * C2154) * C48710) *
                C5040 +
            (C3749 + C3750 - C3751 - C3752 + C3753 + C3754 - C3755 - C3756) *
                C48681) *
               C5042 +
           ((C10184 + C10185 - C10186 - C10187 + C10188 + C10189 - C10190 -
             C10191) *
                C5040 +
            (C9159 + C9160 - C9161 - C9162 + C9163 + C9164 - C9165 - C9166) *
                C48681) *
               C48712) *
              C2680 +
          (((C10186 - (C10185 + C10184) + C10187 - C10188 - C10189 + C10190 +
             C10191) *
                C5040 +
            (C9161 - (C9160 + C9159) + C9162 - C9163 - C9164 + C9165 + C9166) *
                C48681) *
               C5042 +
           ((C6275 * C3745 - (C5207 * C48741 + C5208 * C3744) + C6276 * C48738 -
             C6277 * C3746 - C6278 * C48729 +
             (C113 * C7660 + C48597 * C7662) * C3747 +
             (C113 * C7663 + C48597 * C7666) * C48710) *
                C5040 +
            (C1698 * C3745 - (C372 * C48741 + C371 * C3744) + C1699 * C48738 -
             C6279 * C3746 - C6280 * C48729 +
             (C113 * C7661 + C48597 * C7664) * C3747 +
             (C113 * C7665 + C48597 * C7667) * C48710) *
                C48681) *
               C48712) *
              C48439) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[33] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C47163 +
              (C113 * C123 + C48597 * C136) * C48477 -
              (C113 * C508 + C48597 * C518) * C47155 -
              (C113 * C519 + C48597 * C538) * C48484 +
              (C113 * C509 + C48597 * C520) * C47169 +
              (C113 * C521 + C48597 * C539) * C4029) *
                 C5040 +
             (C4034 + C4035 - C4036 - C4037 + C4038 + C4039) * C48681) *
                C5042 +
            ((C9704 + C9705 - C9706 - C9707 + C9708 + C9709) * C5040 +
             C9724 * C48681) *
                C48712) *
               C2680 +
           (((C9706 - (C9705 + C9704) + C9707 - C9708 - C9709) * C5040 +
             C9725 * C48681) *
                C5042 +
            ((C6275 * C47155 - (C5207 * C48477 + C5208 * C47163) +
              C6276 * C48484 - C6277 * C47169 - C6278 * C4029) *
                 C5040 +
             (C9712 - (C9713 + C9714) + C9715 - C9716 - C9717) * C48681) *
                C48712) *
               C48439) *
              C48648 +
          ((((C4036 - (C4035 + C4034) + C4037 - C4038 - C4039) * C5040 +
             (C4042 - (C4041 + C4040) + C4043 - C4044 - C4045) * C48681) *
                C5042 +
            (C9725 * C5040 +
             (C4209 - (C4210 + C4211) + C4212 - C4213 - C4214) * C48681) *
                C48712) *
               C2680 +
           ((C9724 * C5040 +
             (C4211 + C4210 - C4209 - C4212 + C4213 + C4214) * C48681) *
                C5042 +
            ((C9714 + C9713 - C9712 - C9715 + C9716 + C9717) * C5040 +
             (C373 * C47163 + C374 * C48477 - C1700 * C47155 - C1701 * C48484 +
              (C113 * C1383 + C48597 * C1400) * C47169 +
              (C113 * C1401 + C48597 * C1410) * C4029) *
                 C48681) *
                C48712) *
               C48439) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[34] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C3456 +
              (C113 * C123 + C48597 * C136) * C3454 -
              (C113 * C508 + C48597 * C518) * C3457 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C5040 +
             (C3459 + C3460 - C3461 - C3462) * C48681) *
                C5042 +
            ((C9005 + C9006 - C9007 - C9008) * C5040 + C9025 * C48681) *
                C48712) *
               C2680 +
           (((C9007 - (C9006 + C9005) + C9008) * C5040 + C9026 * C48681) *
                C5042 +
            ((C9011 - (C9012 + C9013) + C9014) * C5040 + C9027 * C48681) *
                C48712) *
               C48439) *
              C48730 +
          ((((C3461 - (C3460 + C3459) + C3462) * C5040 +
             (C3465 - (C3464 + C3463) + C3466) * C48681) *
                C5042 +
            (C9026 * C5040 + C3917 * C48681) * C48712) *
               C2680 +
           ((C9025 * C5040 + C9363 * C48681) * C5042 +
            (C9028 * C5040 + (C3639 + C3640 - C3641 - C3642) * C48681) *
                C48712) *
               C48439) *
              C48717 +
          (((C3479 * C5040 + (C3469 + C3468 - C3467 - C3470) * C48681) * C5042 +
            (C9363 * C5040 + (C3912 + C3913 - C3914 - C3915) * C48681) *
                C48712) *
               C2680 +
           ((C3917 * C5040 + (C3914 - (C3913 + C3912) + C3915) * C48681) *
                C5042 +
            ((C3641 - (C3640 + C3639) + C3642) * C5040 +
             ((C113 * C1681 + C48597 * C1682) * C3457 -
              (C377 * C3454 + C378 * C3456) +
              (C113 * C1683 + C48597 * C1684) * C48481) *
                 C48681) *
                C48712) *
               C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C3456 +
             (C113 * C123 + C48597 * C136) * C3454 -
             (C113 * C508 + C48597 * C518) * C3457 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C5040 +
            (C3459 + C3460 - C3461 - C3462) * C48681) *
               C5042 +
           ((C9005 + C9006 - C9007 - C9008) * C5040 + C9025 * C48681) *
               C48712) *
              C48740 +
          (((C9007 - (C9006 + C9005) + C9008) * C5040 + C9026 * C48681) *
               C5042 +
           ((C9011 - (C9012 + C9013) + C9014) * C5040 + C9027 * C48681) *
               C48712) *
              C48736 +
          (((C9013 + C9012 - C9011 - C9014) * C5040 + C9028 * C48681) * C5042 +
           ((C10050 + C10051 - C10052 - C10053) * C5040 +
            (C9017 + C9018 - C9019 - C9020) * C48681) *
               C48712) *
              C48726 +
          (((C10052 - (C10051 + C10050) + C10053) * C5040 +
            (C9019 - (C9018 + C9017) + C9020) * C48681) *
               C5042 +
           (((C113 * C6764 + C48597 * C6766) * C3457 -
             (C6085 * C3454 + C6086 * C3456) +
             (C113 * C6767 + C48597 * C6770) * C48481) *
                C5040 +
            ((C113 * C6765 + C48597 * C6768) * C3457 -
             (C6083 * C3454 + C6084 * C3456) +
             (C113 * C6769 + C48597 * C6771) * C48481) *
                C48681) *
               C48712) *
              C48704) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[35] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C5040 +
             (C174 + C175) * C48681) *
                C5042 +
            ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
               C1509 -
           ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
               C1510 +
           (((C5212 + C5211) * C5040 + C5202 * C48681) * C5042 +
            ((C6087 + C6088) * C5040 + C6419 * C48681) * C48712) *
               C1511 -
           (((C6089 + C6090) * C48681 + (C6091 + C6092) * C5040) * C48712 +
            (C6420 * C48681 + (C6088 + C6087) * C5040) * C5042) *
               C48704) *
              C48648 +
          (((C5195 * C5040 + C5203 * C48681) * C5042 +
            (C5202 * C5040 + C392 * C48681) * C48712) *
               C1510 -
           ((C391 * C48681 + C5201 * C5040) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
               C1509 -
           (((C1532 + C1533) * C48681 + C6420 * C5040) * C48712 +
            (C5204 * C48681 + C5196 * C5040) * C5042) *
               C1511 +
           ((C6419 * C5040 + (C1533 + C1532) * C48681) * C5042 +
            ((C6090 + C6089) * C5040 +
             ((C113 * C1246 + C48597 * C1257) * C114 +
              (C113 * C1258 + C48597 * C1264) * C48394) *
                 C48681) *
                C48712) *
               C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C5040 +
             (C174 + C175) * C48681) *
                C5042 +
            ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
               C48662 -
           ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
               C48439) *
              C707 +
          (((C5195 * C5040 + C5203 * C48681) * C5042 +
            (C5202 * C5040 + C392 * C48681) * C48712) *
               C48439 -
           ((C391 * C48681 + C5201 * C5040) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
               C48662) *
              C708 +
          (((C184 * C5040 + (C179 + C178) * C48681) * C5042 +
            (C5203 * C5040 + C716 * C48681) * C48712) *
               C48662 -
           (((C389 + C390) * C48681 + C5204 * C5040) * C48712 +
            (C5489 * C48681 + C391 * C5040) * C5042) *
               C48439) *
              C709 +
          (((C716 * C5040 + (C724 + C723) * C48681) * C5042 +
            ((C390 + C389) * C5040 + ((C113 * C311 + C48597 * C330) * C114 +
                                      (C113 * C331 + C48597 * C341) * C48394) *
                                         C48681) *
                C48712) *
               C48439 -
           (((C723 + C724) * C48681 + C5489 * C5040) * C48712 +
            ((C181 + C180) * C48681 + C185 * C5040) * C5042) *
               C48662) *
              C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C1928 +
              (C113 * C123 + C48597 * C136) * C1925 -
              (C113 * C508 + C48597 * C518) * C1929 -
              (C113 * C519 + C48597 * C538) * C1926 +
              (C113 * C509 + C48597 * C520) * C1930 +
              (C113 * C521 + C48597 * C539) * C48697) *
                 C5040 +
             (C1932 + C1933 - C1934 - C1935 + C1936 + C1937) * C48681) *
                C5042 +
            ((C7075 + C7076 - C7077 - C7078 + C7079 + C7080) * C5040 +
             C7385 * C48681) *
                C48712) *
               C48662 +
           (((C7077 - (C7076 + C7075) + C7078 - C7079 - C7080) * C5040 +
             C7386 * C48681) *
                C5042 +
            ((C7081 - (C7082 + C7083) + C7084 - C7085 - C7086) * C5040 +
             (C7087 - (C7088 + C7089) + C7090 - C7091 - C7092) * C48681) *
                C48712) *
               C48439) *
              C48648 +
          ((((C1934 - (C1933 + C1932) + C1935 - C1936 - C1937) * C5040 +
             (C1940 - (C1939 + C1938) + C1941 - C1942 - C1943) * C48681) *
                C5042 +
            (C7386 * C5040 +
             (C2319 - (C2320 + C2321) + C2322 - C2333 - C2334) * C48681) *
                C48712) *
               C48662 +
           ((C7385 * C5040 +
             (C2321 + C2320 - C2319 - C2322 + C2333 + C2334) * C48681) *
                C5042 +
            ((C7089 + C7088 - C7087 - C7090 + C7091 + C7092) * C5040 +
             (C373 * C1928 + C374 * C1925 - C1700 * C1929 - C1701 * C1926 +
              (C113 * C1383 + C48597 * C1400) * C1930 +
              (C113 * C1401 + C48597 * C1410) * C48697) *
                 C48681) *
                C48712) *
               C48439) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[36] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C824 +
             (C113 * C123 + C48597 * C136) * C48663 -
             (C113 * C508 + C48597 * C518) * C825 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C5040 +
            (C831 + C832 - C833 - C834) * C48681) *
               C5042 +
           ((C5814 + C5815 - C5828 - C5829) * C5040 + C5830 * C48681) *
               C48712) *
              C1509 +
          (((C5828 - (C5815 + C5814) + C5829) * C5040 + C5831 * C48681) *
               C5042 +
           ((C6615 - (C6616 + C6617) + C6618) * C5040 + C6631 * C48681) *
               C48712) *
              C1510 +
          (((C6617 + C6616 - C6615 - C6618) * C5040 + C6632 * C48681) * C5042 +
           ((C6773 + C6774 - C6781 - C6782) * C5040 +
            (C6621 + C6622 - C6633 - C6634) * C48681) *
               C48712) *
              C1511 +
          (((C6781 - (C6774 + C6773) + C6782) * C5040 +
            (C6633 - (C6622 + C6621) + C6634) * C48681) *
               C5042 +
           (((C113 * C6764 + C48597 * C6766) * C825 -
             (C6085 * C48663 + C6086 * C824) +
             (C113 * C6767 + C48597 * C6770) * C48481) *
                C5040 +
            ((C113 * C6765 + C48597 * C6768) * C825 -
             (C6083 * C48663 + C6084 * C824) +
             (C113 * C6769 + C48597 * C6771) * C48481) *
                C48681) *
               C48712) *
              C48704) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C824 +
              (C113 * C123 + C48597 * C136) * C48663 -
              (C113 * C508 + C48597 * C518) * C825 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C5040 +
             (C831 + C832 - C833 - C834) * C48681) *
                C5042 +
            ((C5814 + C5815 - C5828 - C5829) * C5040 + C5830 * C48681) *
                C48712) *
               C48662 +
           (((C5828 - (C5815 + C5814) + C5829) * C5040 + C5831 * C48681) *
                C5042 +
            (((C113 * C1378 + C48597 * C1390) * C825 -
              (C5207 * C48663 + C5208 * C824) +
              (C113 * C1391 + C48597 * C1405) * C48481) *
                 C5040 +
             (C1702 - (C1687 + C1686) + C1703) * C48681) *
                C48712) *
               C48439) *
              C299 +
          ((((C833 - (C832 + C831) + C834) * C5040 +
             (C837 - (C836 + C835) + C838) * C48681) *
                C5042 +
            (C5831 * C5040 + C1057 * C48681) * C48712) *
               C48662 +
           ((C5830 * C5040 + C5832 * C48681) * C5042 +
            ((C1686 + C1687 - C1702 - C1703) * C5040 +
             (C1692 + C1693 - C1704 - C1705) * C48681) *
                C48712) *
               C48439) *
              C300 +
          (((C857 * C5040 + (C841 + C840 - C839 - C842) * C48681) * C5042 +
            (C5832 * C5040 + (C1037 + C1038 - C1054 - C1055) * C48681) *
                C48712) *
               C48662 +
           ((C1057 * C5040 + (C1054 - (C1038 + C1037) + C1055) * C48681) *
                C5042 +
            ((C1704 - (C1693 + C1692) + C1705) * C5040 +
             ((C113 * C1681 + C48597 * C1682) * C825 -
              (C377 * C48663 + C378 * C824) +
              (C113 * C1683 + C48597 * C1684) * C48481) *
                 C48681) *
                C48712) *
               C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C2436 +
             (C113 * C123 + C48597 * C136) * C2432 -
             (C113 * C508 + C48597 * C518) * C2437 -
             (C113 * C519 + C48597 * C538) * C2433 +
             (C113 * C509 + C48597 * C520) * C2438 +
             (C113 * C521 + C48597 * C539) * C2434 -
             (C113 * C2136 + C48597 * C2142) * C2439 -
             (C113 * C2143 + C48597 * C2154) * C48710) *
                C5040 +
            (C2445 + C2446 - C2447 - C2448 + C2449 + C2450 - C2469 - C2470) *
                C48681) *
               C5042 +
           ((C7669 + C7670 - C7671 - C7672 + C7673 + C7674 - C7681 - C7682) *
                C5040 +
            (C7517 + C7518 - C7519 - C7520 + C7521 + C7522 - C7529 - C7530) *
                C48681) *
               C48712) *
              C48662 +
          (((C7671 - (C7670 + C7669) + C7672 - C7673 - C7674 + C7681 + C7682) *
                C5040 +
            (C7519 - (C7518 + C7517) + C7520 - C7521 - C7522 + C7529 + C7530) *
                C48681) *
               C5042 +
           ((C6275 * C2437 - (C5207 * C2432 + C5208 * C2436) + C6276 * C2433 -
             C6277 * C2438 - C6278 * C2434 +
             (C113 * C7660 + C48597 * C7662) * C2439 +
             (C113 * C7663 + C48597 * C7666) * C48710) *
                C5040 +
            (C1698 * C2437 - (C372 * C2432 + C371 * C2436) + C1699 * C2433 -
             C6279 * C2438 - C6280 * C2434 +
             (C113 * C7661 + C48597 * C7664) * C2439 +
             (C113 * C7665 + C48597 * C7667) * C48710) *
                C48681) *
               C48712) *
              C48439) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[37] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48597 * C122) * C114 +
                 (C113 * C123 + C48597 * C136) * C48394) *
                    C5040 +
                (C174 + C175) * C48681) *
                   C5042 +
               (((C113 * C304 + C48597 * C317) * C114 +
                 (C113 * C316 + C48597 * C334) * C48394) *
                    C5040 +
                (C382 + C381) * C48681) *
                   C48712) *
                  C48377 * C108 -
              ((C391 * C48681 + (C381 + C382) * C5040) * C48712 +
               ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
                  C48377 * C109 +
              ((C184 * C5040 + (C179 + C178) * C48681) * C5042 +
               ((C380 + C379) * C5040 + C716 * C48681) * C48712) *
                  C48377 * C110 -
              (((C723 + C724) * C48681 + (C388 + C387) * C5040) * C48712 +
               ((C181 + C180) * C48681 + C185 * C5040) * C5042) *
                  C48377 * C111 +
              ((C186 * C5040 + (C183 + C182) * C48681) * C5042 +
               ((C724 + C723) * C5040 +
                ((C113 * C711 + C48597 * C712) * C114 +
                 (C113 * C713 + C48597 * C714) * C48394) *
                    C48681) *
                   C48712) *
                  C48377 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((((C113 * C115 + C48597 * C122) * C114 +
                  (C113 * C123 + C48597 * C136) * C48394) *
                     C5040 +
                 (C174 + C175) * C48681) *
                    C5042 +
                ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
                   C48733 -
               ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
                (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
                   C48721 +
               (((C5212 + C5211) * C5040 + C5202 * C48681) * C5042 +
                (((C113 * C1243 + C48597 * C1252) * C114 +
                  (C113 * C1251 + C48597 * C1261) * C48394) *
                     C5040 +
                 (C1535 + C1534) * C48681) *
                    C48712) *
                   C48694) *
                  C299 +
              (((C5195 * C5040 + C5203 * C48681) * C5042 +
                (C5202 * C5040 + C392 * C48681) * C48712) *
                   C48721 -
               ((C391 * C48681 + C5201 * C5040) * C48712 +
                ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
                   C48733 -
               (((C1532 + C1533) * C48681 + (C1534 + C1535) * C5040) * C48712 +
                (C5204 * C48681 + C5196 * C5040) * C5042) *
                   C48694) *
                  C300 +
              (((C184 * C5040 + (C179 + C178) * C48681) * C5042 +
                (C5203 * C5040 + C716 * C48681) * C48712) *
                   C48733 -
               (((C389 + C390) * C48681 + C5204 * C5040) * C48712 +
                ((C388 + C387) * C48681 + C391 * C5040) * C5042) *
                   C48721 +
               ((C392 * C5040 + (C390 + C389) * C48681) * C5042 +
                ((C1533 + C1532) * C5040 +
                 ((C113 * C1515 + C48597 * C1516) * C114 +
                  (C113 * C1517 + C48597 * C1518) * C48394) *
                     C48681) *
                    C48712) *
                   C48694) *
                  C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C505 +
             (C113 * C123 + C48597 * C136) * C48734 -
             (C113 * C508 + C48597 * C518) * C506 -
             (C113 * C519 + C48597 * C538) * C48723 +
             (C113 * C509 + C48597 * C520) * C507 +
             (C113 * C521 + C48597 * C539) * C48697) *
                C5040 +
            (C549 + C550 - C592 - C593 + C594 + C595) * C48681) *
               C5042 +
           ((C5205 * C505 + C5206 * C48734 -
             (C113 * C1004 + C48597 * C1009) * C506 -
             (C113 * C1010 + C48597 * C1019) * C48723 +
             (C113 * C1375 + C48597 * C1384) * C507 +
             (C113 * C1385 + C48597 * C1402) * C48697) *
                C5040 +
            (C2939 + C2938 - C2937 - C2940 + C2941 + C2942) * C48681) *
               C48712) *
              C48377 * C299 +
          (((C592 - (C550 + C549) + C593 - C594 - C595) * C5040 +
            (C596 - (C560 + C559) + C597 - C598 - C599) * C48681) *
               C5042 +
           ((C2937 - (C2938 + C2939) + C2940 - C2941 - C2942) * C5040 +
            (C2943 - (C2944 + C2945) + C2946 - C2947 - C2948) * C48681) *
               C48712) *
              C48377 * C300 +
          ((C607 * C5040 + (C572 + C571 - C600 - C601 + C602 + C603) * C48681) *
               C5042 +
           ((C2945 + C2944 - C2943 - C2946 + C2947 + C2948) * C5040 +
            (C375 * C505 + C376 * C48734 - C1048 * C506 - C1049 * C48723 +
             (C113 * C2306 + C48597 * C2307) * C507 +
             (C113 * C2308 + C48597 * C2309) * C48697) *
                C48681) *
               C48712) *
              C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C5040 +
             (C174 + C175) * C48681) *
                C5042 +
            ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
               C1167 -
           ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
               C1168 +
           (((C5212 + C5211) * C5040 + C5202 * C48681) * C5042 +
            (((C113 * C1243 + C48597 * C1252) * C114 +
              (C113 * C1251 + C48597 * C1261) * C48394) *
                 C5040 +
             (C1535 + C1534) * C48681) *
                C48712) *
               C48694) *
              C48730 +
          (((C5195 * C5040 + C5203 * C48681) * C5042 +
            (C5202 * C5040 + C392 * C48681) * C48712) *
               C1168 -
           ((C391 * C48681 + C5201 * C5040) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
               C1167 -
           (((C1532 + C1533) * C48681 + (C1534 + C1535) * C5040) * C48712 +
            (C5204 * C48681 + C5196 * C5040) * C5042) *
               C48694) *
              C48717 +
          (((C184 * C5040 + (C179 + C178) * C48681) * C5042 +
            (C5203 * C5040 + C716 * C48681) * C48712) *
               C1167 -
           (((C389 + C390) * C48681 + C5204 * C5040) * C48712 +
            (C5489 * C48681 + C391 * C5040) * C5042) *
               C1168 +
           ((C392 * C5040 + (C390 + C389) * C48681) * C5042 +
            ((C1533 + C1532) * C5040 +
             ((C113 * C1515 + C48597 * C1516) * C114 +
              (C113 * C1517 + C48597 * C1518) * C48394) *
                 C48681) *
                C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C5040 +
            (C174 + C175) * C48681) *
               C5042 +
           ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
              C1235 -
          ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
           (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
              C1236 +
          (((C5212 + C5211) * C5040 + C5202 * C48681) * C5042 +
           ((C6087 + C6088) * C5040 + (C1535 + C1534) * C48681) * C48712) *
              C1237 -
          (((C6089 + C6090) * C48681 + (C6091 + C6092) * C5040) * C48712 +
           ((C1534 + C1535) * C48681 + (C6088 + C6087) * C5040) * C5042) *
              C1238 +
          (((C6092 + C6091) * C5040 + (C6090 + C6089) * C48681) * C5042 +
           (((C113 * C6060 + C48597 * C6062) * C114 +
             (C113 * C6063 + C48597 * C6066) * C48394) *
                C5040 +
            ((C113 * C6061 + C48597 * C6064) * C114 +
             (C113 * C6065 + C48597 * C6067) * C48394) *
                C48681) *
               C48712) *
              C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C505 +
             (C113 * C123 + C48597 * C136) * C48734 -
             (C113 * C508 + C48597 * C518) * C506 -
             (C113 * C519 + C48597 * C538) * C48723 +
             (C113 * C509 + C48597 * C520) * C507 +
             (C113 * C521 + C48597 * C539) * C48697) *
                C5040 +
            (C549 + C550 - C592 - C593 + C594 + C595) * C48681) *
               C5042 +
           ((C6247 + C6248 - C6249 - C6250 + C6281 + C6282) * C5040 +
            (C2939 + C2938 - C2937 - C2940 + C2941 + C2942) * C48681) *
               C48712) *
              C1167 +
          (((C6249 - (C6248 + C6247) + C6250 - C6281 - C6282) * C5040 +
            (C2937 - (C2938 + C2939) + C2940 - C2941 - C2942) * C48681) *
               C5042 +
           ((C6283 - (C6257 + C6258) + C6284 - C6285 - C6286) * C5040 +
            (C6265 - (C6266 + C6267) + C6268 - C6287 - C6288) * C48681) *
               C48712) *
              C1168 +
          (((C6258 + C6257 - C6283 - C6284 + C6285 + C6286) * C5040 +
            (C6267 + C6266 - C6265 - C6268 + C6287 + C6288) * C48681) *
               C5042 +
           ((C6081 * C505 + C6082 * C48734 -
             (C113 * C1803 + C48597 * C1806) * C506 -
             (C113 * C1807 + C48597 * C1812) * C48723 +
             (C113 * C6238 + C48597 * C6240) * C507 +
             (C113 * C6241 + C48597 * C6244) * C48697) *
                C5040 +
            (C1531 * C505 + C1530 * C48734 -
             (C113 * C1804 + C48597 * C1808) * C506 -
             (C113 * C1809 + C48597 * C1813) * C48723 +
             (C113 * C6239 + C48597 * C6242) * C507 +
             (C113 * C6243 + C48597 * C6245) * C48697) *
                C48681) *
               C48712) *
              C48694) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C1928 +
             (C113 * C123 + C48597 * C136) * C1925 -
             (C113 * C508 + C48597 * C518) * C1929 -
             (C113 * C519 + C48597 * C538) * C1926 +
             (C113 * C509 + C48597 * C520) * C1930 +
             (C113 * C521 + C48597 * C539) * C48697) *
                C5040 +
            (C1932 + C1933 - C1934 - C1935 + C1936 + C1937) * C48681) *
               C5042 +
           ((C5205 * C1928 + C5206 * C1925 - C5823 * C1929 - C5824 * C1926 +
             C6273 * C1930 + C6274 * C48697) *
                C5040 +
            (C2313 + C2312 - C2311 - C2314 + C2331 + C2332) * C48681) *
               C48712) *
              C48377 * C48730 +
          (((C1934 - (C1933 + C1932) + C1935 - C1936 - C1937) * C5040 +
            (C1940 - (C1939 + C1938) + C1941 - C1942 - C1943) * C48681) *
               C5042 +
           ((C2311 - (C2312 + C2313) + C2314 - C2331 - C2332) * C5040 +
            (C2319 - (C2320 + C2321) + C2322 - C2333 - C2334) * C48681) *
               C48712) *
              C48377 * C48717 +
          ((C1954 * C5040 +
            (C1946 + C1945 - C1944 - C1947 + C1948 + C1949) * C48681) *
               C5042 +
           ((C2321 + C2320 - C2319 - C2322 + C2333 + C2334) * C5040 +
            (C375 * C1928 + C376 * C1925 - C1048 * C1929 - C1049 * C1926 +
             (C113 * C2306 + C48597 * C2307) * C1930 +
             (C113 * C2308 + C48597 * C2309) * C48697) *
                C48681) *
               C48712) *
              C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C1928 +
             (C113 * C123 + C48597 * C136) * C1925 -
             (C113 * C508 + C48597 * C518) * C1929 -
             (C113 * C519 + C48597 * C538) * C1926 +
             (C113 * C509 + C48597 * C520) * C1930 +
             (C113 * C521 + C48597 * C539) * C48697) *
                C5040 +
            (C1932 + C1933 - C1934 - C1935 + C1936 + C1937) * C48681) *
               C5042 +
           ((C7075 + C7076 - C7077 - C7078 + C7079 + C7080) * C5040 +
            (C2313 + C2312 - C2311 - C2314 + C2331 + C2332) * C48681) *
               C48712) *
              C48733 +
          (((C7077 - (C7076 + C7075) + C7078 - C7079 - C7080) * C5040 +
            (C2311 - (C2312 + C2313) + C2314 - C2331 - C2332) * C48681) *
               C5042 +
           ((C7081 - (C7082 + C7083) + C7084 - C7085 - C7086) * C5040 +
            (C7087 - (C7088 + C7089) + C7090 - C7091 - C7092) * C48681) *
               C48712) *
              C48721 +
          (((C7083 + C7082 - C7081 - C7084 + C7085 + C7086) * C5040 +
            (C7089 + C7088 - C7087 - C7090 + C7091 + C7092) * C48681) *
               C5042 +
           ((C6081 * C1928 + C6082 * C1925 - C6779 * C1929 - C6780 * C1926 +
             (C113 * C6238 + C48597 * C6240) * C1930 +
             (C113 * C6241 + C48597 * C6244) * C48697) *
                C5040 +
            (C1531 * C1928 + C1530 * C1925 - C6629 * C1929 - C6630 * C1926 +
             (C113 * C6239 + C48597 * C6242) * C1930 +
             (C113 * C6243 + C48597 * C6245) * C48697) *
                C48681) *
               C48712) *
              C48694) *
         C48350) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C2131 +
            (C113 * C123 + C48597 * C136) * C2126 -
            (C113 * C508 + C48597 * C518) * C2132 -
            (C113 * C519 + C48597 * C538) * C2127 +
            (C113 * C509 + C48597 * C520) * C2133 +
            (C113 * C521 + C48597 * C539) * C2128 -
            (C113 * C2136 + C48597 * C2142) * C2134 -
            (C113 * C2143 + C48597 * C2154) * C2129 +
            (C113 * C2137 + C48597 * C2144) * C2135 +
            (C113 * C2145 + C48597 * C2155) * C2130) *
               C5040 +
           (C164 * C2131 + C165 * C2126 - C579 * C2132 - C580 * C2127 +
            C581 * C2133 + C582 * C2128 - C2465 * C2134 - C2466 * C2129 +
            (C113 * C2139 + C48597 * C2148) * C2135 +
            (C113 * C2149 + C48597 * C2157) * C2130) *
               C48681) *
              C5042 +
          ((C5205 * C2131 + C5206 * C2126 - C5823 * C2132 - C5824 * C2127 +
            C6273 * C2133 + C6274 * C2128 -
            (C113 * C2570 + C48597 * C2573) * C2134 -
            (C113 * C2574 + C48597 * C2579) * C2129 +
            (C113 * C7174 + C48597 * C7176) * C2135 +
            (C113 * C7177 + C48597 * C7180) * C2130) *
               C5040 +
           (C370 * C2131 + C369 * C2126 - C1043 * C2132 - C1044 * C2127 +
            C2327 * C2133 + C2328 * C2128 -
            (C113 * C2571 + C48597 * C2575) * C2134 -
            (C113 * C2576 + C48597 * C2580) * C2129 +
            (C113 * C7175 + C48597 * C7178) * C2135 +
            (C113 * C7179 + C48597 * C7181) * C2130) *
               C48681) *
              C48712) *
         C48377 * C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[38] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C824 +
              (C113 * C123 + C48597 * C136) * C48663 -
              (C113 * C508 + C48597 * C518) * C825 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C5040 +
             (C831 + C832 - C833 - C834) * C48681) *
                C5042 +
            ((C5814 + C5815 - C5828 - C5829) * C5040 + C5830 * C48681) *
                C48712) *
               C1167 +
           (((C5828 - (C5815 + C5814) + C5829) * C5040 + C5831 * C48681) *
                C5042 +
            ((C6615 - (C6616 + C6617) + C6618) * C5040 + C6631 * C48681) *
                C48712) *
               C1168 +
           (((C6617 + C6616 - C6615 - C6618) * C5040 + C6632 * C48681) * C5042 +
            ((C6081 * C824 + C6082 * C48663 -
              (C113 * C1803 + C48597 * C1806) * C825 -
              (C113 * C1807 + C48597 * C1812) * C48481) *
                 C5040 +
             (C6621 + C6622 - C6633 - C6634) * C48681) *
                C48712) *
               C48694) *
              C48648 +
          ((((C833 - (C832 + C831) + C834) * C5040 +
             (C837 - (C836 + C835) + C838) * C48681) *
                C5042 +
            (C5831 * C5040 + C1057 * C48681) * C48712) *
               C1167 +
           ((C5830 * C5040 + C5832 * C48681) * C5042 +
            (C6632 * C5040 + (C1692 + C1693 - C1704 - C1705) * C48681) *
                C48712) *
               C1168 +
           ((C6631 * C5040 + (C1704 - (C1693 + C1692) + C1705) * C48681) *
                C5042 +
            ((C6633 - (C6622 + C6621) + C6634) * C5040 +
             ((C113 * C1805 + C48597 * C1810) * C825 -
              (C1528 * C48663 + C1529 * C824) +
              (C113 * C1811 + C48597 * C1814) * C48481) *
                 C48681) *
                C48712) *
               C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C824 +
             (C113 * C123 + C48597 * C136) * C48663 -
             (C113 * C508 + C48597 * C518) * C825 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C5040 +
            (C831 + C832 - C833 - C834) * C48681) *
               C5042 +
           ((C5205 * C824 + C5206 * C48663 -
             (C113 * C1004 + C48597 * C1009) * C825 -
             (C113 * C1010 + C48597 * C1019) * C48481) *
                C5040 +
            (C1028 + C1027 - C1050 - C1051) * C48681) *
               C48712) *
              C48377 * C707 +
          (((C833 - (C832 + C831) + C834) * C5040 +
            (C837 - (C836 + C835) + C838) * C48681) *
               C5042 +
           ((C1050 - (C1027 + C1028) + C1051) * C5040 + C1057 * C48681) *
               C48712) *
              C48377 * C708 +
          ((C857 * C5040 + (C841 + C840 - C839 - C842) * C48681) * C5042 +
           ((C1034 + C1033 - C1052 - C1053) * C5040 +
            (C1037 + C1038 - C1054 - C1055) * C48681) *
               C48712) *
              C48377 * C709 +
          ((C858 * C5040 + (C855 - (C844 + C843) + C856) * C48681) * C5042 +
           ((C1054 - (C1038 + C1037) + C1055) * C5040 +
            ((C113 * C1008 + C48597 * C1017) * C825 -
             (C721 * C48663 + C722 * C824) +
             (C113 * C1018 + C48597 * C1023) * C48481) *
                C48681) *
               C48712) *
              C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C2436 +
             (C113 * C123 + C48597 * C136) * C2432 -
             (C113 * C508 + C48597 * C518) * C2437 -
             (C113 * C519 + C48597 * C538) * C2433 +
             (C113 * C509 + C48597 * C520) * C2438 +
             (C113 * C521 + C48597 * C539) * C2434 -
             (C113 * C2136 + C48597 * C2142) * C2439 -
             (C113 * C2143 + C48597 * C2154) * C48710) *
                C5040 +
            (C2445 + C2446 - C2447 - C2448 + C2449 + C2450 - C2469 - C2470) *
                C48681) *
               C5042 +
           ((C5205 * C2436 + C5206 * C2432 - C5823 * C2437 - C5824 * C2433 +
             C6273 * C2438 + C6274 * C2434 -
             (C113 * C2570 + C48597 * C2573) * C2439 -
             (C113 * C2574 + C48597 * C2579) * C48710) *
                C5040 +
            (C7517 + C7518 - C7519 - C7520 + C7521 + C7522 - C7529 - C7530) *
                C48681) *
               C48712) *
              C48377 * C48648 +
          (((C2447 - (C2446 + C2445) + C2448 - C2449 - C2450 + C2469 + C2470) *
                C5040 +
            (C2457 - (C2456 + C2455) + C2458 - C2459 - C2460 + C2471 + C2472) *
                C48681) *
               C5042 +
           ((C7519 - (C7518 + C7517) + C7520 - C7521 - C7522 + C7529 + C7530) *
                C5040 +
            (C1045 * C2437 - (C367 * C2432 + C368 * C2436) + C1047 * C2433 -
             C2329 * C2438 - C2330 * C2434 +
             (C113 * C2572 + C48597 * C2577) * C2439 +
             (C113 * C2578 + C48597 * C2581) * C48710) *
                C48681) *
               C48712) *
              C48377 * C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[39] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C5040 +
             (C174 + C175) * C48681) *
                C5042 +
            ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
               C48733 -
           ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
               C48721 +
           (((C5212 + C5211) * C5040 + C5202 * C48681) * C5042 +
            (((C113 * C1243 + C48597 * C1252) * C114 +
              (C113 * C1251 + C48597 * C1261) * C48394) *
                 C5040 +
             (C1535 + C1534) * C48681) *
                C48712) *
               C48694) *
              C299 +
          (((C5195 * C5040 + C5203 * C48681) * C5042 +
            (C5202 * C5040 + C392 * C48681) * C48712) *
               C48721 -
           ((C391 * C48681 + C5201 * C5040) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
               C48733 -
           (((C1532 + C1533) * C48681 + (C1534 + C1535) * C5040) * C48712 +
            (C5204 * C48681 + C5196 * C5040) * C5042) *
               C48694) *
              C300 +
          (((C184 * C5040 + (C179 + C178) * C48681) * C5042 +
            (C5203 * C5040 + C716 * C48681) * C48712) *
               C48733 -
           (((C389 + C390) * C48681 + C5204 * C5040) * C48712 +
            ((C388 + C387) * C48681 + C391 * C5040) * C5042) *
               C48721 +
           ((C392 * C5040 + (C390 + C389) * C48681) * C5042 +
            ((C1533 + C1532) * C5040 +
             ((C113 * C1515 + C48597 * C1516) * C114 +
              (C113 * C1517 + C48597 * C1518) * C48394) *
                 C48681) *
                C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C5040 +
            (C174 + C175) * C48681) *
               C5042 +
           (((C113 * C304 + C48597 * C317) * C114 +
             (C113 * C316 + C48597 * C334) * C48394) *
                C5040 +
            (C382 + C381) * C48681) *
               C48712) *
              C48377 * C108 -
          ((C391 * C48681 + (C381 + C382) * C5040) * C48712 +
           ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
              C48377 * C109 +
          ((C184 * C5040 + (C179 + C178) * C48681) * C5042 +
           ((C380 + C379) * C5040 + C716 * C48681) * C48712) *
              C48377 * C110 -
          (((C723 + C724) * C48681 + (C388 + C387) * C5040) * C48712 +
           ((C181 + C180) * C48681 + C185 * C5040) * C5042) *
              C48377 * C111 +
          ((C186 * C5040 + (C183 + C182) * C48681) * C5042 +
           ((C724 + C723) * C5040 + ((C113 * C711 + C48597 * C712) * C114 +
                                     (C113 * C713 + C48597 * C714) * C48394) *
                                        C48681) *
               C48712) *
              C48377 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C5040 +
             (C174 + C175) * C48681) *
                C5042 +
            ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
               C1167 -
           ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
               C1168 +
           (((C5212 + C5211) * C5040 + C5202 * C48681) * C5042 +
            (((C113 * C1243 + C48597 * C1252) * C114 +
              (C113 * C1251 + C48597 * C1261) * C48394) *
                 C5040 +
             (C1535 + C1534) * C48681) *
                C48712) *
               C48694) *
              C48730 +
          (((C5195 * C5040 + C5203 * C48681) * C5042 +
            (C5202 * C5040 + C392 * C48681) * C48712) *
               C1168 -
           ((C391 * C48681 + C5201 * C5040) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
               C1167 -
           (((C1532 + C1533) * C48681 + (C1534 + C1535) * C5040) * C48712 +
            (C5204 * C48681 + C5196 * C5040) * C5042) *
               C48694) *
              C48717 +
          (((C184 * C5040 + (C179 + C178) * C48681) * C5042 +
            (C5203 * C5040 + C716 * C48681) * C48712) *
               C1167 -
           (((C389 + C390) * C48681 + C5204 * C5040) * C48712 +
            (C5489 * C48681 + C391 * C5040) * C5042) *
               C1168 +
           ((C392 * C5040 + (C390 + C389) * C48681) * C5042 +
            ((C1533 + C1532) * C5040 +
             ((C113 * C1515 + C48597 * C1516) * C114 +
              (C113 * C1517 + C48597 * C1518) * C48394) *
                 C48681) *
                C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C5040 +
            (C174 + C175) * C48681) *
               C5042 +
           ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
              C1235 -
          ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
           (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
              C1236 +
          (((C5212 + C5211) * C5040 + C5202 * C48681) * C5042 +
           ((C6087 + C6088) * C5040 + (C1535 + C1534) * C48681) * C48712) *
              C1237 -
          (((C6089 + C6090) * C48681 + (C6091 + C6092) * C5040) * C48712 +
           ((C1534 + C1535) * C48681 + (C6088 + C6087) * C5040) * C5042) *
              C1238 +
          (((C6092 + C6091) * C5040 + (C6090 + C6089) * C48681) * C5042 +
           (((C113 * C6060 + C48597 * C6062) * C114 +
             (C113 * C6063 + C48597 * C6066) * C48394) *
                C5040 +
            ((C113 * C6061 + C48597 * C6064) * C114 +
             (C113 * C6065 + C48597 * C6067) * C48394) *
                C48681) *
               C48712) *
              C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C1928 +
             (C113 * C123 + C48597 * C136) * C1925 -
             (C113 * C508 + C48597 * C518) * C1929 -
             (C113 * C519 + C48597 * C538) * C1926 +
             (C113 * C509 + C48597 * C520) * C1930 +
             (C113 * C521 + C48597 * C539) * C48697) *
                C5040 +
            (C1932 + C1933 - C1934 - C1935 + C1936 + C1937) * C48681) *
               C5042 +
           ((C5205 * C1928 + C5206 * C1925 - C5823 * C1929 - C5824 * C1926 +
             C6273 * C1930 + C6274 * C48697) *
                C5040 +
            (C2313 + C2312 - C2311 - C2314 + C2331 + C2332) * C48681) *
               C48712) *
              C48377 * C48730 +
          (((C1934 - (C1933 + C1932) + C1935 - C1936 - C1937) * C5040 +
            (C1940 - (C1939 + C1938) + C1941 - C1942 - C1943) * C48681) *
               C5042 +
           ((C2311 - (C2312 + C2313) + C2314 - C2331 - C2332) * C5040 +
            (C2319 - (C2320 + C2321) + C2322 - C2333 - C2334) * C48681) *
               C48712) *
              C48377 * C48717 +
          ((C1954 * C5040 +
            (C1946 + C1945 - C1944 - C1947 + C1948 + C1949) * C48681) *
               C5042 +
           ((C2321 + C2320 - C2319 - C2322 + C2333 + C2334) * C5040 +
            (C375 * C1928 + C376 * C1925 - C1048 * C1929 - C1049 * C1926 +
             (C113 * C2306 + C48597 * C2307) * C1930 +
             (C113 * C2308 + C48597 * C2309) * C48697) *
                C48681) *
               C48712) *
              C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C1928 +
             (C113 * C123 + C48597 * C136) * C1925 -
             (C113 * C508 + C48597 * C518) * C1929 -
             (C113 * C519 + C48597 * C538) * C1926 +
             (C113 * C509 + C48597 * C520) * C1930 +
             (C113 * C521 + C48597 * C539) * C48697) *
                C5040 +
            (C1932 + C1933 - C1934 - C1935 + C1936 + C1937) * C48681) *
               C5042 +
           ((C7075 + C7076 - C7077 - C7078 + C7079 + C7080) * C5040 +
            (C2313 + C2312 - C2311 - C2314 + C2331 + C2332) * C48681) *
               C48712) *
              C48733 +
          (((C7077 - (C7076 + C7075) + C7078 - C7079 - C7080) * C5040 +
            (C2311 - (C2312 + C2313) + C2314 - C2331 - C2332) * C48681) *
               C5042 +
           ((C7081 - (C7082 + C7083) + C7084 - C7085 - C7086) * C5040 +
            (C7087 - (C7088 + C7089) + C7090 - C7091 - C7092) * C48681) *
               C48712) *
              C48721 +
          (((C7083 + C7082 - C7081 - C7084 + C7085 + C7086) * C5040 +
            (C7089 + C7088 - C7087 - C7090 + C7091 + C7092) * C48681) *
               C5042 +
           ((C6081 * C1928 + C6082 * C1925 - C6779 * C1929 - C6780 * C1926 +
             (C113 * C6238 + C48597 * C6240) * C1930 +
             (C113 * C6241 + C48597 * C6244) * C48697) *
                C5040 +
            (C1531 * C1928 + C1530 * C1925 - C6629 * C1929 - C6630 * C1926 +
             (C113 * C6239 + C48597 * C6242) * C1930 +
             (C113 * C6243 + C48597 * C6245) * C48697) *
                C48681) *
               C48712) *
              C48694) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[40] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C3456 +
              (C113 * C123 + C48597 * C136) * C3454 -
              (C113 * C508 + C48597 * C518) * C3457 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C5040 +
             (C3459 + C3460 - C3461 - C3462) * C48681) *
                C5042 +
            ((C9005 + C9006 - C9007 - C9008) * C5040 + C9025 * C48681) *
                C48712) *
               C48662 +
           (((C9007 - (C9006 + C9005) + C9008) * C5040 + C9026 * C48681) *
                C5042 +
            ((C9011 - (C9012 + C9013) + C9014) * C5040 + C9027 * C48681) *
                C48712) *
               C48439) *
              C48355 +
          ((((C3461 - (C3460 + C3459) + C3462) * C5040 +
             (C3465 - (C3464 + C3463) + C3466) * C48681) *
                C5042 +
            (C9026 * C5040 + C3917 * C48681) * C48712) *
               C48662 +
           ((C9025 * C5040 + C9363 * C48681) * C5042 +
            (C9028 * C5040 + (C3639 + C3640 - C3641 - C3642) * C48681) *
                C48712) *
               C48439) *
              C48363 +
          (((C3479 * C5040 + (C3469 + C3468 - C3467 - C3470) * C48681) * C5042 +
            (C9363 * C5040 + (C3912 + C3913 - C3914 - C3915) * C48681) *
                C48712) *
               C48662 +
           ((C3917 * C5040 + (C3914 - (C3913 + C3912) + C3915) * C48681) *
                C5042 +
            ((C3641 - (C3640 + C3639) + C3642) * C5040 +
             ((C113 * C1681 + C48597 * C1682) * C3457 -
              (C377 * C3454 + C378 * C3456) +
              (C113 * C1683 + C48597 * C1684) * C48481) *
                 C48681) *
                C48712) *
               C48439) *
              C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[41] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C47163 +
              (C113 * C123 + C48597 * C136) * C48477 -
              (C113 * C508 + C48597 * C518) * C47155 -
              (C113 * C519 + C48597 * C538) * C48484 +
              (C113 * C509 + C48597 * C520) * C47169 +
              (C113 * C521 + C48597 * C539) * C4029) *
                 C5040 +
             (C4034 + C4035 - C4036 - C4037 + C4038 + C4039) * C48681) *
                C5042 +
            ((C9704 + C9705 - C9706 - C9707 + C9708 + C9709) * C5040 +
             C9724 * C48681) *
                C48712) *
               C48662 +
           (((C9706 - (C9705 + C9704) + C9707 - C9708 - C9709) * C5040 +
             C9725 * C48681) *
                C5042 +
            ((C6275 * C47155 - (C5207 * C48477 + C5208 * C47163) +
              C6276 * C48484 - C6277 * C47169 - C6278 * C4029) *
                 C5040 +
             (C9712 - (C9713 + C9714) + C9715 - C9716 - C9717) * C48681) *
                C48712) *
               C48439) *
              C2788 +
          ((((C4036 - (C4035 + C4034) + C4037 - C4038 - C4039) * C5040 +
             (C4042 - (C4041 + C4040) + C4043 - C4044 - C4045) * C48681) *
                C5042 +
            (C9725 * C5040 +
             (C4209 - (C4210 + C4211) + C4212 - C4213 - C4214) * C48681) *
                C48712) *
               C48662 +
           ((C9724 * C5040 +
             (C4211 + C4210 - C4209 - C4212 + C4213 + C4214) * C48681) *
                C5042 +
            ((C9714 + C9713 - C9712 - C9715 + C9716 + C9717) * C5040 +
             (C373 * C47163 + C374 * C48477 - C1700 * C47155 - C1701 * C48484 +
              (C113 * C1383 + C48597 * C1400) * C47169 +
              (C113 * C1401 + C48597 * C1410) * C4029) *
                 C48681) *
                C48712) *
               C48439) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[42] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C3456 +
              (C113 * C123 + C48597 * C136) * C3454 -
              (C113 * C508 + C48597 * C518) * C3457 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C5040 +
             (C3459 + C3460 - C3461 - C3462) * C48681) *
                C5042 +
            ((C9005 + C9006 - C9007 - C9008) * C5040 + C9025 * C48681) *
                C48712) *
               C48733 +
           (((C9007 - (C9006 + C9005) + C9008) * C5040 + C9026 * C48681) *
                C5042 +
            ((C9011 - (C9012 + C9013) + C9014) * C5040 + C9027 * C48681) *
                C48712) *
               C48721 +
           (((C9013 + C9012 - C9011 - C9014) * C5040 + C9028 * C48681) * C5042 +
            ((C6081 * C3456 + C6082 * C3454 - C6779 * C3457 - C6780 * C48481) *
                 C5040 +
             (C9017 + C9018 - C9019 - C9020) * C48681) *
                C48712) *
               C48694) *
              C2788 +
          ((((C3461 - (C3460 + C3459) + C3462) * C5040 +
             (C3465 - (C3464 + C3463) + C3466) * C48681) *
                C5042 +
            (C9026 * C5040 + C3917 * C48681) * C48712) *
               C48733 +
           ((C9025 * C5040 + (C3633 + C3632 - C3631 - C3634) * C48681) * C5042 +
            (C9028 * C5040 + (C3639 + C3640 - C3641 - C3642) * C48681) *
                C48712) *
               C48721 +
           ((C9027 * C5040 + (C3641 - (C3640 + C3639) + C3642) * C48681) *
                C5042 +
            ((C9019 - (C9018 + C9017) + C9020) * C5040 +
             ((C113 * C1805 + C48597 * C1810) * C3457 -
              (C1528 * C3454 + C1529 * C3456) +
              (C113 * C1811 + C48597 * C1814) * C48481) *
                 C48681) *
                C48712) *
               C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C3456 +
             (C113 * C123 + C48597 * C136) * C3454 -
             (C113 * C508 + C48597 * C518) * C3457 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C5040 +
            (C3459 + C3460 - C3461 - C3462) * C48681) *
               C5042 +
           ((C5205 * C3456 + C5206 * C3454 - C5823 * C3457 - C5824 * C48481) *
                C5040 +
            (C3629 + C3628 - C3627 - C3630) * C48681) *
               C48712) *
              C48377 * C48739 +
          (((C3461 - (C3460 + C3459) + C3462) * C5040 +
            (C3465 - (C3464 + C3463) + C3466) * C48681) *
               C5042 +
           ((C3627 - (C3628 + C3629) + C3630) * C5040 + C3917 * C48681) *
               C48712) *
              C48377 * C48732 +
          ((C3479 * C5040 + (C3469 + C3468 - C3467 - C3470) * C48681) * C5042 +
           ((C3633 + C3632 - C3631 - C3634) * C5040 +
            (C3912 + C3913 - C3914 - C3915) * C48681) *
               C48712) *
              C48377 * C48719 +
          ((C3480 * C5040 + (C3473 - (C3472 + C3471) + C3474) * C48681) *
               C5042 +
           ((C3914 - (C3913 + C3912) + C3915) * C5040 +
            ((C113 * C1008 + C48597 * C1017) * C3457 -
             (C721 * C3454 + C722 * C3456) +
             (C113 * C1018 + C48597 * C1023) * C48481) *
                C48681) *
               C48712) *
              C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C3744 +
             (C113 * C123 + C48597 * C136) * C48741 -
             (C113 * C508 + C48597 * C518) * C3745 -
             (C113 * C519 + C48597 * C538) * C48738 +
             (C113 * C509 + C48597 * C520) * C3746 +
             (C113 * C521 + C48597 * C539) * C48729 -
             (C113 * C2136 + C48597 * C2142) * C3747 -
             (C113 * C2143 + C48597 * C2154) * C48710) *
                C5040 +
            (C3749 + C3750 - C3751 - C3752 + C3753 + C3754 - C3755 - C3756) *
                C48681) *
               C5042 +
           ((C5205 * C3744 + C5206 * C48741 - C5823 * C3745 - C5824 * C48738 +
             C6273 * C3746 + C6274 * C48729 - C7679 * C3747 - C7680 * C48710) *
                C5040 +
            (C9159 + C9160 - C9161 - C9162 + C9163 + C9164 - C9165 - C9166) *
                C48681) *
               C48712) *
              C48377 * C2788 +
          (((C3751 - (C3750 + C3749) + C3752 - C3753 - C3754 + C3755 + C3756) *
                C5040 +
            (C3759 - (C3758 + C3757) + C3760 - C3761 - C3762 + C3763 + C3764) *
                C48681) *
               C5042 +
           ((C9161 - (C9160 + C9159) + C9162 - C9163 - C9164 + C9165 + C9166) *
                C5040 +
            (C1045 * C3745 - (C367 * C48741 + C368 * C3744) + C1047 * C48738 -
             C2329 * C3746 - C2330 * C48729 +
             (C113 * C2572 + C48597 * C2577) * C3747 +
             (C113 * C2578 + C48597 * C2581) * C48710) *
                C48681) *
               C48712) *
              C48377 * C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[43] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C47163 +
             (C113 * C123 + C48597 * C136) * C48477 -
             (C113 * C508 + C48597 * C518) * C47155 -
             (C113 * C519 + C48597 * C538) * C48484 +
             (C113 * C509 + C48597 * C520) * C47169 +
             (C113 * C521 + C48597 * C539) * C4029) *
                C5040 +
            (C4034 + C4035 - C4036 - C4037 + C4038 + C4039) * C48681) *
               C5042 +
           ((C5205 * C47163 + C5206 * C48477 - C5823 * C47155 - C5824 * C48484 +
             C6273 * C47169 + C6274 * C4029) *
                C5040 +
            (C4205 + C4204 - C4203 - C4206 + C4207 + C4208) * C48681) *
               C48712) *
              C48377 * C48355 +
          (((C4036 - (C4035 + C4034) + C4037 - C4038 - C4039) * C5040 +
            (C4042 - (C4041 + C4040) + C4043 - C4044 - C4045) * C48681) *
               C5042 +
           ((C4203 - (C4204 + C4205) + C4206 - C4207 - C4208) * C5040 +
            (C4209 - (C4210 + C4211) + C4212 - C4213 - C4214) * C48681) *
               C48712) *
              C48377 * C48363 +
          ((C4056 * C5040 +
            (C4048 + C4047 - C4046 - C4049 + C4050 + C4051) * C48681) *
               C5042 +
           ((C4211 + C4210 - C4209 - C4212 + C4213 + C4214) * C5040 +
            (C375 * C47163 + C376 * C48477 - C1048 * C47155 - C1049 * C48484 +
             (C113 * C2306 + C48597 * C2307) * C47169 +
             (C113 * C2308 + C48597 * C2309) * C4029) *
                C48681) *
               C48712) *
              C48377 * C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[44] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C3456 +
             (C113 * C123 + C48597 * C136) * C3454 -
             (C113 * C508 + C48597 * C518) * C3457 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C5040 +
            (C3459 + C3460 - C3461 - C3462) * C48681) *
               C5042 +
           ((C5205 * C3456 + C5206 * C3454 - C5823 * C3457 - C5824 * C48481) *
                C5040 +
            (C3629 + C3628 - C3627 - C3630) * C48681) *
               C48712) *
              C48377 * C48739 +
          (((C3461 - (C3460 + C3459) + C3462) * C5040 +
            (C3465 - (C3464 + C3463) + C3466) * C48681) *
               C5042 +
           ((C3627 - (C3628 + C3629) + C3630) * C5040 + C3917 * C48681) *
               C48712) *
              C48377 * C48732 +
          ((C3479 * C5040 + (C3469 + C3468 - C3467 - C3470) * C48681) * C5042 +
           ((C3633 + C3632 - C3631 - C3634) * C5040 +
            (C3912 + C3913 - C3914 - C3915) * C48681) *
               C48712) *
              C48377 * C48719 +
          ((C3480 * C5040 + (C3473 - (C3472 + C3471) + C3474) * C48681) *
               C5042 +
           ((C3914 - (C3913 + C3912) + C3915) * C5040 +
            ((C113 * C1008 + C48597 * C1017) * C3457 -
             (C721 * C3454 + C722 * C3456) +
             (C113 * C1018 + C48597 * C1023) * C48481) *
                C48681) *
               C48712) *
              C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C3456 +
              (C113 * C123 + C48597 * C136) * C3454 -
              (C113 * C508 + C48597 * C518) * C3457 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C5040 +
             (C3459 + C3460 - C3461 - C3462) * C48681) *
                C5042 +
            ((C9005 + C9006 - C9007 - C9008) * C5040 + C9025 * C48681) *
                C48712) *
               C48733 +
           (((C9007 - (C9006 + C9005) + C9008) * C5040 + C9026 * C48681) *
                C5042 +
            ((C9011 - (C9012 + C9013) + C9014) * C5040 + C9027 * C48681) *
                C48712) *
               C48721 +
           (((C9013 + C9012 - C9011 - C9014) * C5040 + C9028 * C48681) * C5042 +
            ((C6081 * C3456 + C6082 * C3454 - C6779 * C3457 - C6780 * C48481) *
                 C5040 +
             (C9017 + C9018 - C9019 - C9020) * C48681) *
                C48712) *
               C48694) *
              C2788 +
          ((((C3461 - (C3460 + C3459) + C3462) * C5040 +
             (C3465 - (C3464 + C3463) + C3466) * C48681) *
                C5042 +
            (C9026 * C5040 + C3917 * C48681) * C48712) *
               C48733 +
           ((C9025 * C5040 + (C3633 + C3632 - C3631 - C3634) * C48681) * C5042 +
            (C9028 * C5040 + (C3639 + C3640 - C3641 - C3642) * C48681) *
                C48712) *
               C48721 +
           ((C9027 * C5040 + (C3641 - (C3640 + C3639) + C3642) * C48681) *
                C5042 +
            ((C9019 - (C9018 + C9017) + C9020) * C5040 +
             ((C113 * C1805 + C48597 * C1810) * C3457 -
              (C1528 * C3454 + C1529 * C3456) +
              (C113 * C1811 + C48597 * C1814) * C48481) *
                 C48681) *
                C48712) *
               C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[45] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C5040 +
             (C174 + C175) * C48681) *
                C5042 +
            ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
               C48662 -
           ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
               C48439) *
              C707 +
          (((C5195 * C5040 + C5203 * C48681) * C5042 +
            (C5202 * C5040 + C392 * C48681) * C48712) *
               C48439 -
           ((C391 * C48681 + C5201 * C5040) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
               C48662) *
              C708 +
          (((C184 * C5040 + (C179 + C178) * C48681) * C5042 +
            (C5203 * C5040 + C716 * C48681) * C48712) *
               C48662 -
           (((C389 + C390) * C48681 + C5204 * C5040) * C48712 +
            (C5489 * C48681 + C391 * C5040) * C5042) *
               C48439) *
              C709 +
          (((C716 * C5040 + (C724 + C723) * C48681) * C5042 +
            ((C390 + C389) * C5040 + ((C113 * C311 + C48597 * C330) * C114 +
                                      (C113 * C331 + C48597 * C341) * C48394) *
                                         C48681) *
                C48712) *
               C48439 -
           (((C723 + C724) * C48681 + C5489 * C5040) * C48712 +
            ((C181 + C180) * C48681 + C185 * C5040) * C5042) *
               C48662) *
              C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C5040 +
             (C174 + C175) * C48681) *
                C5042 +
            ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
               C1509 -
           ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
               C1510 +
           (((C5212 + C5211) * C5040 + C5202 * C48681) * C5042 +
            ((C6087 + C6088) * C5040 + C6419 * C48681) * C48712) *
               C1511 -
           (((C6089 + C6090) * C48681 + (C6091 + C6092) * C5040) * C48712 +
            (C6420 * C48681 + (C6088 + C6087) * C5040) * C5042) *
               C48704) *
              C48648 +
          (((C5195 * C5040 + C5203 * C48681) * C5042 +
            (C5202 * C5040 + C392 * C48681) * C48712) *
               C1510 -
           ((C391 * C48681 + C5201 * C5040) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
               C1509 -
           (((C1532 + C1533) * C48681 + C6420 * C5040) * C48712 +
            (C5204 * C48681 + C5196 * C5040) * C5042) *
               C1511 +
           ((C6419 * C5040 + (C1533 + C1532) * C48681) * C5042 +
            ((C6090 + C6089) * C5040 +
             ((C113 * C1246 + C48597 * C1257) * C114 +
              (C113 * C1258 + C48597 * C1264) * C48394) *
                 C48681) *
                C48712) *
               C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[46] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C824 +
              (C113 * C123 + C48597 * C136) * C48663 -
              (C113 * C508 + C48597 * C518) * C825 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C5040 +
             (C831 + C832 - C833 - C834) * C48681) *
                C5042 +
            ((C5814 + C5815 - C5828 - C5829) * C5040 + C5830 * C48681) *
                C48712) *
               C48662 +
           (((C5828 - (C5815 + C5814) + C5829) * C5040 + C5831 * C48681) *
                C5042 +
            (((C113 * C1378 + C48597 * C1390) * C825 -
              (C5207 * C48663 + C5208 * C824) +
              (C113 * C1391 + C48597 * C1405) * C48481) *
                 C5040 +
             (C1702 - (C1687 + C1686) + C1703) * C48681) *
                C48712) *
               C48439) *
              C299 +
          ((((C833 - (C832 + C831) + C834) * C5040 +
             (C837 - (C836 + C835) + C838) * C48681) *
                C5042 +
            (C5831 * C5040 + C1057 * C48681) * C48712) *
               C48662 +
           ((C5830 * C5040 + C5832 * C48681) * C5042 +
            ((C1686 + C1687 - C1702 - C1703) * C5040 +
             (C1692 + C1693 - C1704 - C1705) * C48681) *
                C48712) *
               C48439) *
              C300 +
          (((C857 * C5040 + (C841 + C840 - C839 - C842) * C48681) * C5042 +
            (C5832 * C5040 + (C1037 + C1038 - C1054 - C1055) * C48681) *
                C48712) *
               C48662 +
           ((C1057 * C5040 + (C1054 - (C1038 + C1037) + C1055) * C48681) *
                C5042 +
            ((C1704 - (C1693 + C1692) + C1705) * C5040 +
             ((C113 * C1681 + C48597 * C1682) * C825 -
              (C377 * C48663 + C378 * C824) +
              (C113 * C1683 + C48597 * C1684) * C48481) *
                 C48681) *
                C48712) *
               C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C824 +
             (C113 * C123 + C48597 * C136) * C48663 -
             (C113 * C508 + C48597 * C518) * C825 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C5040 +
            (C831 + C832 - C833 - C834) * C48681) *
               C5042 +
           ((C5814 + C5815 - C5828 - C5829) * C5040 + C5830 * C48681) *
               C48712) *
              C1509 +
          (((C5828 - (C5815 + C5814) + C5829) * C5040 + C5831 * C48681) *
               C5042 +
           ((C6615 - (C6616 + C6617) + C6618) * C5040 + C6631 * C48681) *
               C48712) *
              C1510 +
          (((C6617 + C6616 - C6615 - C6618) * C5040 + C6632 * C48681) * C5042 +
           ((C6773 + C6774 - C6781 - C6782) * C5040 +
            (C6621 + C6622 - C6633 - C6634) * C48681) *
               C48712) *
              C1511 +
          (((C6781 - (C6774 + C6773) + C6782) * C5040 +
            (C6633 - (C6622 + C6621) + C6634) * C48681) *
               C5042 +
           (((C113 * C6764 + C48597 * C6766) * C825 -
             (C6085 * C48663 + C6086 * C824) +
             (C113 * C6767 + C48597 * C6770) * C48481) *
                C5040 +
            ((C113 * C6765 + C48597 * C6768) * C825 -
             (C6083 * C48663 + C6084 * C824) +
             (C113 * C6769 + C48597 * C6771) * C48481) *
                C48681) *
               C48712) *
              C48704) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[47] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C5040 +
             (C174 + C175) * C48681) *
                C5042 +
            ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
               C48733 -
           ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
               C48721 +
           (((C5212 + C5211) * C5040 + C5202 * C48681) * C5042 +
            (((C113 * C1243 + C48597 * C1252) * C114 +
              (C113 * C1251 + C48597 * C1261) * C48394) *
                 C5040 +
             (C1535 + C1534) * C48681) *
                C48712) *
               C48694) *
              C299 +
          (((C5195 * C5040 + C5203 * C48681) * C5042 +
            (C5202 * C5040 + C392 * C48681) * C48712) *
               C48721 -
           ((C391 * C48681 + C5201 * C5040) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
               C48733 -
           (((C1532 + C1533) * C48681 + (C1534 + C1535) * C5040) * C48712 +
            (C5204 * C48681 + C5196 * C5040) * C5042) *
               C48694) *
              C300 +
          (((C184 * C5040 + (C179 + C178) * C48681) * C5042 +
            (C5203 * C5040 + C716 * C48681) * C48712) *
               C48733 -
           (((C389 + C390) * C48681 + C5204 * C5040) * C48712 +
            ((C388 + C387) * C48681 + C391 * C5040) * C5042) *
               C48721 +
           ((C392 * C5040 + (C390 + C389) * C48681) * C5042 +
            ((C1533 + C1532) * C5040 +
             ((C113 * C1515 + C48597 * C1516) * C114 +
              (C113 * C1517 + C48597 * C1518) * C48394) *
                 C48681) *
                C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C5040 +
            (C174 + C175) * C48681) *
               C5042 +
           (((C113 * C304 + C48597 * C317) * C114 +
             (C113 * C316 + C48597 * C334) * C48394) *
                C5040 +
            (C382 + C381) * C48681) *
               C48712) *
              C48377 * C108 -
          ((C391 * C48681 + (C381 + C382) * C5040) * C48712 +
           ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
              C48377 * C109 +
          ((C184 * C5040 + (C179 + C178) * C48681) * C5042 +
           ((C380 + C379) * C5040 + C716 * C48681) * C48712) *
              C48377 * C110 -
          (((C723 + C724) * C48681 + (C388 + C387) * C5040) * C48712 +
           ((C181 + C180) * C48681 + C185 * C5040) * C5042) *
              C48377 * C111 +
          ((C186 * C5040 + (C183 + C182) * C48681) * C5042 +
           ((C724 + C723) * C5040 + ((C113 * C711 + C48597 * C712) * C114 +
                                     (C113 * C713 + C48597 * C714) * C48394) *
                                        C48681) *
               C48712) *
              C48377 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C505 +
             (C113 * C123 + C48597 * C136) * C48734 -
             (C113 * C508 + C48597 * C518) * C506 -
             (C113 * C519 + C48597 * C538) * C48723 +
             (C113 * C509 + C48597 * C520) * C507 +
             (C113 * C521 + C48597 * C539) * C48697) *
                C5040 +
            (C549 + C550 - C592 - C593 + C594 + C595) * C48681) *
               C5042 +
           ((C5205 * C505 + C5206 * C48734 -
             (C113 * C1004 + C48597 * C1009) * C506 -
             (C113 * C1010 + C48597 * C1019) * C48723 +
             (C113 * C1375 + C48597 * C1384) * C507 +
             (C113 * C1385 + C48597 * C1402) * C48697) *
                C5040 +
            (C2939 + C2938 - C2937 - C2940 + C2941 + C2942) * C48681) *
               C48712) *
              C48377 * C299 +
          (((C592 - (C550 + C549) + C593 - C594 - C595) * C5040 +
            (C596 - (C560 + C559) + C597 - C598 - C599) * C48681) *
               C5042 +
           ((C2937 - (C2938 + C2939) + C2940 - C2941 - C2942) * C5040 +
            (C2943 - (C2944 + C2945) + C2946 - C2947 - C2948) * C48681) *
               C48712) *
              C48377 * C300 +
          ((C607 * C5040 + (C572 + C571 - C600 - C601 + C602 + C603) * C48681) *
               C5042 +
           ((C2945 + C2944 - C2943 - C2946 + C2947 + C2948) * C5040 +
            (C375 * C505 + C376 * C48734 - C1048 * C506 - C1049 * C48723 +
             (C113 * C2306 + C48597 * C2307) * C507 +
             (C113 * C2308 + C48597 * C2309) * C48697) *
                C48681) *
               C48712) *
              C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C5040 +
             (C174 + C175) * C48681) *
                C5042 +
            ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
               C1167 -
           ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
               C1168 +
           (((C5212 + C5211) * C5040 + C5202 * C48681) * C5042 +
            (((C113 * C1243 + C48597 * C1252) * C114 +
              (C113 * C1251 + C48597 * C1261) * C48394) *
                 C5040 +
             (C1535 + C1534) * C48681) *
                C48712) *
               C48694) *
              C48730 +
          (((C5195 * C5040 + C5203 * C48681) * C5042 +
            (C5202 * C5040 + C392 * C48681) * C48712) *
               C1168 -
           ((C391 * C48681 + C5201 * C5040) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
               C1167 -
           (((C1532 + C1533) * C48681 + (C1534 + C1535) * C5040) * C48712 +
            (C5204 * C48681 + C5196 * C5040) * C5042) *
               C48694) *
              C48717 +
          (((C184 * C5040 + (C179 + C178) * C48681) * C5042 +
            (C5203 * C5040 + C716 * C48681) * C48712) *
               C1167 -
           (((C389 + C390) * C48681 + C5204 * C5040) * C48712 +
            (C5489 * C48681 + C391 * C5040) * C5042) *
               C1168 +
           ((C392 * C5040 + (C390 + C389) * C48681) * C5042 +
            ((C1533 + C1532) * C5040 +
             ((C113 * C1515 + C48597 * C1516) * C114 +
              (C113 * C1517 + C48597 * C1518) * C48394) *
                 C48681) *
                C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C5040 +
            (C174 + C175) * C48681) *
               C5042 +
           ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
              C1235 -
          ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
           (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
              C1236 +
          (((C5212 + C5211) * C5040 + C5202 * C48681) * C5042 +
           ((C6087 + C6088) * C5040 + (C1535 + C1534) * C48681) * C48712) *
              C1237 -
          (((C6089 + C6090) * C48681 + (C6091 + C6092) * C5040) * C48712 +
           ((C1534 + C1535) * C48681 + (C6088 + C6087) * C5040) * C5042) *
              C1238 +
          (((C6092 + C6091) * C5040 + (C6090 + C6089) * C48681) * C5042 +
           (((C113 * C6060 + C48597 * C6062) * C114 +
             (C113 * C6063 + C48597 * C6066) * C48394) *
                C5040 +
            ((C113 * C6061 + C48597 * C6064) * C114 +
             (C113 * C6065 + C48597 * C6067) * C48394) *
                C48681) *
               C48712) *
              C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C505 +
             (C113 * C123 + C48597 * C136) * C48734 -
             (C113 * C508 + C48597 * C518) * C506 -
             (C113 * C519 + C48597 * C538) * C48723 +
             (C113 * C509 + C48597 * C520) * C507 +
             (C113 * C521 + C48597 * C539) * C48697) *
                C5040 +
            (C549 + C550 - C592 - C593 + C594 + C595) * C48681) *
               C5042 +
           ((C6247 + C6248 - C6249 - C6250 + C6281 + C6282) * C5040 +
            (C2939 + C2938 - C2937 - C2940 + C2941 + C2942) * C48681) *
               C48712) *
              C1167 +
          (((C6249 - (C6248 + C6247) + C6250 - C6281 - C6282) * C5040 +
            (C2937 - (C2938 + C2939) + C2940 - C2941 - C2942) * C48681) *
               C5042 +
           ((C6283 - (C6257 + C6258) + C6284 - C6285 - C6286) * C5040 +
            (C6265 - (C6266 + C6267) + C6268 - C6287 - C6288) * C48681) *
               C48712) *
              C1168 +
          (((C6258 + C6257 - C6283 - C6284 + C6285 + C6286) * C5040 +
            (C6267 + C6266 - C6265 - C6268 + C6287 + C6288) * C48681) *
               C5042 +
           ((C6081 * C505 + C6082 * C48734 -
             (C113 * C1803 + C48597 * C1806) * C506 -
             (C113 * C1807 + C48597 * C1812) * C48723 +
             (C113 * C6238 + C48597 * C6240) * C507 +
             (C113 * C6241 + C48597 * C6244) * C48697) *
                C5040 +
            (C1531 * C505 + C1530 * C48734 -
             (C113 * C1804 + C48597 * C1808) * C506 -
             (C113 * C1809 + C48597 * C1813) * C48723 +
             (C113 * C6239 + C48597 * C6242) * C507 +
             (C113 * C6243 + C48597 * C6245) * C48697) *
                C48681) *
               C48712) *
              C48694) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[48] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C824 +
             (C113 * C123 + C48597 * C136) * C48663 -
             (C113 * C508 + C48597 * C518) * C825 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C5040 +
            (C831 + C832 - C833 - C834) * C48681) *
               C5042 +
           ((C5205 * C824 + C5206 * C48663 -
             (C113 * C1004 + C48597 * C1009) * C825 -
             (C113 * C1010 + C48597 * C1019) * C48481) *
                C5040 +
            (C1028 + C1027 - C1050 - C1051) * C48681) *
               C48712) *
              C48377 * C707 +
          (((C833 - (C832 + C831) + C834) * C5040 +
            (C837 - (C836 + C835) + C838) * C48681) *
               C5042 +
           ((C1050 - (C1027 + C1028) + C1051) * C5040 + C1057 * C48681) *
               C48712) *
              C48377 * C708 +
          ((C857 * C5040 + (C841 + C840 - C839 - C842) * C48681) * C5042 +
           ((C1034 + C1033 - C1052 - C1053) * C5040 +
            (C1037 + C1038 - C1054 - C1055) * C48681) *
               C48712) *
              C48377 * C709 +
          ((C858 * C5040 + (C855 - (C844 + C843) + C856) * C48681) * C5042 +
           ((C1054 - (C1038 + C1037) + C1055) * C5040 +
            ((C113 * C1008 + C48597 * C1017) * C825 -
             (C721 * C48663 + C722 * C824) +
             (C113 * C1018 + C48597 * C1023) * C48481) *
                C48681) *
               C48712) *
              C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C824 +
              (C113 * C123 + C48597 * C136) * C48663 -
              (C113 * C508 + C48597 * C518) * C825 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C5040 +
             (C831 + C832 - C833 - C834) * C48681) *
                C5042 +
            ((C5814 + C5815 - C5828 - C5829) * C5040 + C5830 * C48681) *
                C48712) *
               C1167 +
           (((C5828 - (C5815 + C5814) + C5829) * C5040 + C5831 * C48681) *
                C5042 +
            ((C6615 - (C6616 + C6617) + C6618) * C5040 + C6631 * C48681) *
                C48712) *
               C1168 +
           (((C6617 + C6616 - C6615 - C6618) * C5040 + C6632 * C48681) * C5042 +
            ((C6081 * C824 + C6082 * C48663 -
              (C113 * C1803 + C48597 * C1806) * C825 -
              (C113 * C1807 + C48597 * C1812) * C48481) *
                 C5040 +
             (C6621 + C6622 - C6633 - C6634) * C48681) *
                C48712) *
               C48694) *
              C48648 +
          ((((C833 - (C832 + C831) + C834) * C5040 +
             (C837 - (C836 + C835) + C838) * C48681) *
                C5042 +
            (C5831 * C5040 + C1057 * C48681) * C48712) *
               C1167 +
           ((C5830 * C5040 + C5832 * C48681) * C5042 +
            (C6632 * C5040 + (C1692 + C1693 - C1704 - C1705) * C48681) *
                C48712) *
               C1168 +
           ((C6631 * C5040 + (C1704 - (C1693 + C1692) + C1705) * C48681) *
                C5042 +
            ((C6633 - (C6622 + C6621) + C6634) * C5040 +
             ((C113 * C1805 + C48597 * C1810) * C825 -
              (C1528 * C48663 + C1529 * C824) +
              (C113 * C1811 + C48597 * C1814) * C48481) *
                 C48681) *
                C48712) *
               C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[49] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C5040 +
            (C174 + C175) * C48681) *
               C5042 +
           (((C113 * C304 + C48597 * C317) * C114 +
             (C113 * C316 + C48597 * C334) * C48394) *
                C5040 +
            (C382 + C381) * C48681) *
               C48712) *
              C48377 * C108 -
          ((C391 * C48681 + (C381 + C382) * C5040) * C48712 +
           ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
              C48377 * C109 +
          ((C184 * C5040 + (C179 + C178) * C48681) * C5042 +
           ((C380 + C379) * C5040 + C716 * C48681) * C48712) *
              C48377 * C110 -
          (((C723 + C724) * C48681 + (C388 + C387) * C5040) * C48712 +
           ((C181 + C180) * C48681 + C185 * C5040) * C5042) *
              C48377 * C111 +
          ((C186 * C5040 + (C183 + C182) * C48681) * C5042 +
           ((C724 + C723) * C5040 + ((C113 * C711 + C48597 * C712) * C114 +
                                     (C113 * C713 + C48597 * C714) * C48394) *
                                        C48681) *
               C48712) *
              C48377 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C5040 +
             (C174 + C175) * C48681) *
                C5042 +
            ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
               C48733 -
           ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
               C48721 +
           (((C5212 + C5211) * C5040 + C5202 * C48681) * C5042 +
            (((C113 * C1243 + C48597 * C1252) * C114 +
              (C113 * C1251 + C48597 * C1261) * C48394) *
                 C5040 +
             (C1535 + C1534) * C48681) *
                C48712) *
               C48694) *
              C299 +
          (((C5195 * C5040 + C5203 * C48681) * C5042 +
            (C5202 * C5040 + C392 * C48681) * C48712) *
               C48721 -
           ((C391 * C48681 + C5201 * C5040) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
               C48733 -
           (((C1532 + C1533) * C48681 + (C1534 + C1535) * C5040) * C48712 +
            (C5204 * C48681 + C5196 * C5040) * C5042) *
               C48694) *
              C300 +
          (((C184 * C5040 + (C179 + C178) * C48681) * C5042 +
            (C5203 * C5040 + C716 * C48681) * C48712) *
               C48733 -
           (((C389 + C390) * C48681 + C5204 * C5040) * C48712 +
            ((C388 + C387) * C48681 + C391 * C5040) * C5042) *
               C48721 +
           ((C392 * C5040 + (C390 + C389) * C48681) * C5042 +
            ((C1533 + C1532) * C5040 +
             ((C113 * C1515 + C48597 * C1516) * C114 +
              (C113 * C1517 + C48597 * C1518) * C48394) *
                 C48681) *
                C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C5040 +
             (C174 + C175) * C48681) *
                C5042 +
            ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
               C1167 -
           ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
               C1168 +
           (((C5212 + C5211) * C5040 + C5202 * C48681) * C5042 +
            (((C113 * C1243 + C48597 * C1252) * C114 +
              (C113 * C1251 + C48597 * C1261) * C48394) *
                 C5040 +
             (C1535 + C1534) * C48681) *
                C48712) *
               C48694) *
              C48730 +
          (((C5195 * C5040 + C5203 * C48681) * C5042 +
            (C5202 * C5040 + C392 * C48681) * C48712) *
               C1168 -
           ((C391 * C48681 + C5201 * C5040) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C5040) * C5042) *
               C1167 -
           (((C1532 + C1533) * C48681 + (C1534 + C1535) * C5040) * C48712 +
            (C5204 * C48681 + C5196 * C5040) * C5042) *
               C48694) *
              C48717 +
          (((C184 * C5040 + (C179 + C178) * C48681) * C5042 +
            (C5203 * C5040 + C716 * C48681) * C48712) *
               C1167 -
           (((C389 + C390) * C48681 + C5204 * C5040) * C48712 +
            (C5489 * C48681 + C391 * C5040) * C5042) *
               C1168 +
           ((C392 * C5040 + (C390 + C389) * C48681) * C5042 +
            ((C1533 + C1532) * C5040 +
             ((C113 * C1515 + C48597 * C1516) * C114 +
              (C113 * C1517 + C48597 * C1518) * C48394) *
                 C48681) *
                C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C5040 +
            (C174 + C175) * C48681) *
               C5042 +
           ((C5209 + C5210) * C5040 + C5195 * C48681) * C48712) *
              C1235 -
          ((C5196 * C48681 + (C5211 + C5212) * C5040) * C48712 +
           (C5201 * C48681 + (C5210 + C5209) * C5040) * C5042) *
              C1236 +
          (((C5212 + C5211) * C5040 + C5202 * C48681) * C5042 +
           ((C6087 + C6088) * C5040 + (C1535 + C1534) * C48681) * C48712) *
              C1237 -
          (((C6089 + C6090) * C48681 + (C6091 + C6092) * C5040) * C48712 +
           ((C1534 + C1535) * C48681 + (C6088 + C6087) * C5040) * C5042) *
              C1238 +
          (((C6092 + C6091) * C5040 + (C6090 + C6089) * C48681) * C5042 +
           (((C113 * C6060 + C48597 * C6062) * C114 +
             (C113 * C6063 + C48597 * C6066) * C48394) *
                C5040 +
            ((C113 * C6061 + C48597 * C6064) * C114 +
             (C113 * C6065 + C48597 * C6067) * C48394) *
                C48681) *
               C48712) *
              C1239) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[50] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C5040 +
            ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
               C48582 * C48435 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48681 +
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48394 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C114) *
                C5040) *
               C48582 * C48442 +
           (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                 C114 +
             (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                 C48394) *
                C5040 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48681) *
               C48582 * C3060) *
              C48355 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C5040 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48681) *
               C48582 * C48442 -
           (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) * C48681 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C5040) *
               C48582 * C48435 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48681 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C5040) *
               C48582 * C3060) *
              C48363 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C5040 +
            ((C10858 + C10859) * C114 + (C10860 + C10861) * C48394) * C48681) *
               C48582 * C48435 -
           (((C11392 + C11393) * C48394 + (C11394 + C11395) * C114) * C48681 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C5040) *
               C48582 * C48442 +
           (((C11059 + C11058) * C114 + (C11057 + C11056) * C48394) * C5040 +
            ((C10815 * C309 + C10813 * C327 + C10816 * C1681 + C48714 * C1682) *
                 C114 +
             (C10815 * C326 + C10813 * C339 + C10816 * C1683 + C48714 * C1684) *
                 C48394) *
                C48681) *
               C48582 * C3060) *
              C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[51] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C824 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48663 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C825 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C5040 +
            ((C10850 + C10851) * C824 + (C10852 + C10853) * C48663 -
             (C11238 + C11239) * C825 - (C11240 + C11241) * C48481) *
                C48681) *
               C48582 * C48435 +
           (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
              C48714 * C1384) *
                 C825 -
             ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 +
               C10813 * C334) *
                  C48663 +
              (C10816 * C1004 + C48714 * C1009 + C10815 * C304 +
               C10813 * C317) *
                  C824) +
             (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C5040 +
            ((C11748 + C11749) * C825 -
             ((C11044 + C11045) * C48663 + (C11046 + C11047) * C824) +
             (C11750 + C11751) * C48481) *
                C48681) *
               C48582 * C48442 +
           (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                 C824 +
             (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                 C48663 -
             (C10816 * C1379 + C48714 * C1392 + C10815 * C1378 +
              C10813 * C1390) *
                 C825 -
             (C10816 * C1393 + C48714 * C1406 + C10815 * C1391 +
              C10813 * C1405) *
                 C48481) *
                C5040 +
            ((C11048 + C11049) * C824 + (C11050 + C11051) * C48663 -
             (C12474 + C12475) * C825 - (C12476 + C12477) * C48481) *
                C48681) *
               C48582 * C3060) *
              C2788 +
          ((((C11239 + C11238) * C825 -
             ((C10853 + C10852) * C48663 + (C10851 + C10850) * C824) +
             (C11241 + C11240) * C48481) *
                C5040 +
            ((C11246 + C11247) * C825 -
             ((C10854 + C10855) * C48663 + (C10856 + C10857) * C824) +
             (C11248 + C11249) * C48481) *
                C48681) *
               C48582 * C48435 +
           (((C11047 + C11046) * C824 + (C11045 + C11044) * C48663 -
             (C11749 + C11748) * C825 - (C11751 + C11750) * C48481) *
                C5040 +
            ((C11052 + C11053) * C824 + (C11054 + C11055) * C48663 -
             (C11752 + C11753) * C825 - (C11754 + C11755) * C48481) *
                C48681) *
               C48582 * C48442 +
           (((C12475 + C12474) * C825 -
             ((C11051 + C11050) * C48663 + (C11049 + C11048) * C824) +
             (C12477 + C12476) * C48481) *
                C5040 +
            ((C10815 * C1382 + C10813 * C1398 + C10816 * C1383 +
              C48714 * C1400) *
                 C825 -
             ((C11056 + C11057) * C48663 + (C11058 + C11059) * C824) +
             (C10815 * C1399 + C10813 * C1409 + C10816 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48681) *
               C48582 * C3060) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[52] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C5040 +
            ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
               C48582 * C48740 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48681 +
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48394 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C114) *
                C5040) *
               C48582 * C48736 +
           (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                 C114 +
             (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                 C48394) *
                C5040 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48681) *
               C48582 * C48726 -
           (((C12268 + C12269) * C48394 + (C12270 + C12271) * C114) * C48681 +
            ((C10816 * C1807 + C48714 * C1812 + C10815 * C1251 +
              C10813 * C1261) *
                 C48394 +
             (C10816 * C1803 + C48714 * C1806 + C10815 * C1243 +
              C10813 * C1252) *
                 C114) *
                C5040) *
               C48582 * C48704) *
              C2788 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C5040 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48681) *
               C48582 * C48736 -
           (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) * C48681 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C5040) *
               C48582 * C48740 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48681 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C5040) *
               C48582 * C48726 +
           (((C12271 + C12270) * C114 + (C12269 + C12268) * C48394) * C5040 +
            ((C10815 * C1241 + C10813 * C1248 + C10816 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C10815 * C1247 + C10813 * C1259 + C10816 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48681) *
               C48582 * C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C5040 +
            ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
               C48582 * C2680 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48681 +
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48394 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C114) *
                C5040) *
               C48582 * C48439) *
              C48739 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C5040 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48681) *
               C48582 * C48439 -
           (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) * C48681 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C5040) *
               C48582 * C2680) *
              C48732 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C5040 +
            ((C10858 + C10859) * C114 + (C10860 + C10861) * C48394) * C48681) *
               C48582 * C2680 -
           (((C11392 + C11393) * C48394 + (C11394 + C11395) * C114) * C48681 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C5040) *
               C48582 * C48439) *
              C48719 +
          ((((C11395 + C11394) * C114 + (C11393 + C11392) * C48394) * C5040 +
            ((C10815 * C310 + C10813 * C329 + C10816 * C1008 + C48714 * C1017) *
                 C114 +
             (C10815 * C328 + C10813 * C340 + C10816 * C1018 + C48714 * C1023) *
                 C48394) *
                C48681) *
               C48582 * C48439 -
           (((C10862 + C10863) * C48394 + (C10864 + C10865) * C114) * C48681 +
            ((C10861 + C10860) * C48394 + (C10859 + C10858) * C114) * C5040) *
               C48582 * C2680) *
              C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C505 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48734 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C506 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48723 +
             (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                 C507 +
             (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                 C48697) *
                C5040 +
            ((C10850 + C10851) * C505 + (C10852 + C10853) * C48734 -
             (C11238 + C11239) * C506 - (C11240 + C11241) * C48723 +
             (C11242 + C11243) * C507 + (C11244 + C11245) * C48697) *
                C48681) *
               C48582 * C2680 +
           (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
              C48714 * C1384) *
                 C506 -
             ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 +
               C10813 * C334) *
                  C48734 +
              (C10816 * C1004 + C48714 * C1009 + C10815 * C304 +
               C10813 * C317) *
                  C505) +
             (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
              C48714 * C1402) *
                 C48723 -
             (C10816 * C2570 + C48714 * C2573 + C10815 * C1375 +
              C10813 * C1384) *
                 C507 -
             (C10816 * C2574 + C48714 * C2579 + C10815 * C1385 +
              C10813 * C1402) *
                 C48697) *
                C5040 +
            ((C11748 + C11749) * C506 -
             ((C11044 + C11045) * C48734 + (C11046 + C11047) * C505) +
             (C11750 + C11751) * C48723 - (C13192 + C13193) * C507 -
             (C13194 + C13195) * C48697) *
                C48681) *
               C48582 * C48439) *
              C2788 +
          ((((C11239 + C11238) * C506 -
             ((C10853 + C10852) * C48734 + (C10851 + C10850) * C505) +
             (C11241 + C11240) * C48723 - (C11243 + C11242) * C507 -
             (C11245 + C11244) * C48697) *
                C5040 +
            ((C11246 + C11247) * C506 -
             ((C10854 + C10855) * C48734 + (C10856 + C10857) * C505) +
             (C11248 + C11249) * C48723 - (C11250 + C11251) * C507 -
             (C11252 + C11253) * C48697) *
                C48681) *
               C48582 * C2680 +
           (((C11047 + C11046) * C505 + (C11045 + C11044) * C48734 -
             (C11749 + C11748) * C506 - (C11751 + C11750) * C48723 +
             (C13193 + C13192) * C507 + (C13195 + C13194) * C48697) *
                C5040 +
            ((C11052 + C11053) * C505 + (C11054 + C11055) * C48734 -
             (C11752 + C11753) * C506 - (C11754 + C11755) * C48723 +
             (C10815 * C1377 + C10813 * C1388 + C10816 * C2572 +
              C48714 * C2577) *
                 C507 +
             (C10815 * C1389 + C10813 * C1404 + C10816 * C2578 +
              C48714 * C2581) *
                 C48697) *
                C48681) *
               C48582 * C48439) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[53] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C824 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48663 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C825 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C5040 +
            ((C10850 + C10851) * C824 + (C10852 + C10853) * C48663 -
             (C11238 + C11239) * C825 - (C11240 + C11241) * C48481) *
                C48681) *
               C48582 * C2680 +
           (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
              C48714 * C1384) *
                 C825 -
             ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 +
               C10813 * C334) *
                  C48663 +
              (C10816 * C1004 + C48714 * C1009 + C10815 * C304 +
               C10813 * C317) *
                  C824) +
             (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C5040 +
            ((C11748 + C11749) * C825 -
             ((C11044 + C11045) * C48663 + (C11046 + C11047) * C824) +
             (C11750 + C11751) * C48481) *
                C48681) *
               C48582 * C48439) *
              C48355 +
          ((((C11239 + C11238) * C825 -
             ((C10853 + C10852) * C48663 + (C10851 + C10850) * C824) +
             (C11241 + C11240) * C48481) *
                C5040 +
            ((C11246 + C11247) * C825 -
             ((C10854 + C10855) * C48663 + (C10856 + C10857) * C824) +
             (C11248 + C11249) * C48481) *
                C48681) *
               C48582 * C2680 +
           (((C11047 + C11046) * C824 + (C11045 + C11044) * C48663 -
             (C11749 + C11748) * C825 - (C11751 + C11750) * C48481) *
                C5040 +
            ((C11052 + C11053) * C824 + (C11054 + C11055) * C48663 -
             (C11752 + C11753) * C825 - (C11754 + C11755) * C48481) *
                C48681) *
               C48582 * C48439) *
              C48363 +
          ((((C10857 + C10856) * C824 + (C10855 + C10854) * C48663 -
             (C11247 + C11246) * C825 - (C11249 + C11248) * C48481) *
                C5040 +
            ((C10858 + C10859) * C824 + (C10860 + C10861) * C48663 -
             (C11534 + C11535) * C825 - (C11536 + C11537) * C48481) *
                C48681) *
               C48582 * C2680 +
           (((C11753 + C11752) * C825 -
             ((C11055 + C11054) * C48663 + (C11053 + C11052) * C824) +
             (C11755 + C11754) * C48481) *
                C5040 +
            ((C10815 * C1007 + C10813 * C1015 + C10816 * C2306 +
              C48714 * C2307) *
                 C825 -
             ((C11392 + C11393) * C48663 + (C11394 + C11395) * C824) +
             (C10815 * C1016 + C10813 * C1022 + C10816 * C2308 +
              C48714 * C2309) *
                 C48481) *
                C48681) *
               C48582 * C48439) *
              C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[54] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C5040 +
            ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
               C48582 * C2680 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48681 +
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48394 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C114) *
                C5040) *
               C48582 * C48439) *
              C48739 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C5040 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48681) *
               C48582 * C48439 -
           (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) * C48681 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C5040) *
               C48582 * C2680) *
              C48732 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C5040 +
            ((C10858 + C10859) * C114 + (C10860 + C10861) * C48394) * C48681) *
               C48582 * C2680 -
           (((C11392 + C11393) * C48394 + (C11394 + C11395) * C114) * C48681 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C5040) *
               C48582 * C48439) *
              C48719 +
          ((((C11395 + C11394) * C114 + (C11393 + C11392) * C48394) * C5040 +
            ((C10815 * C310 + C10813 * C329 + C10816 * C1008 + C48714 * C1017) *
                 C114 +
             (C10815 * C328 + C10813 * C340 + C10816 * C1018 + C48714 * C1023) *
                 C48394) *
                C48681) *
               C48582 * C48439 -
           (((C10862 + C10863) * C48394 + (C10864 + C10865) * C114) * C48681 +
            ((C10861 + C10860) * C48394 + (C10859 + C10858) * C114) * C5040) *
               C48582 * C2680) *
              C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C5040 +
            ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
               C48582 * C48740 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48681 +
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48394 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C114) *
                C5040) *
               C48582 * C48736 +
           (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                 C114 +
             (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                 C48394) *
                C5040 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48681) *
               C48582 * C48726 -
           (((C12268 + C12269) * C48394 + (C12270 + C12271) * C114) * C48681 +
            ((C10816 * C1807 + C48714 * C1812 + C10815 * C1251 +
              C10813 * C1261) *
                 C48394 +
             (C10816 * C1803 + C48714 * C1806 + C10815 * C1243 +
              C10813 * C1252) *
                 C114) *
                C5040) *
               C48582 * C48704) *
              C2788 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C5040 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48681) *
               C48582 * C48736 -
           (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) * C48681 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C5040) *
               C48582 * C48740 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48681 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C5040) *
               C48582 * C48726 +
           (((C12271 + C12270) * C114 + (C12269 + C12268) * C48394) * C5040 +
            ((C10815 * C1241 + C10813 * C1248 + C10816 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C10815 * C1247 + C10813 * C1259 + C10816 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48681) *
               C48582 * C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[55] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C3456 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C3454 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C3457 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C5040 +
            ((C10850 + C10851) * C3456 + (C10852 + C10853) * C3454 -
             (C11238 + C11239) * C3457 - (C11240 + C11241) * C48481) *
                C48681) *
               C48582 * C48435 +
           (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
              C48714 * C1384) *
                 C3457 -
             ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 +
               C10813 * C334) *
                  C3454 +
              (C10816 * C1004 + C48714 * C1009 + C10815 * C304 +
               C10813 * C317) *
                  C3456) +
             (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C5040 +
            ((C11748 + C11749) * C3457 -
             ((C11044 + C11045) * C3454 + (C11046 + C11047) * C3456) +
             (C11750 + C11751) * C48481) *
                C48681) *
               C48582 * C48442 +
           (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                 C3456 +
             (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                 C3454 -
             (C10816 * C1379 + C48714 * C1392 + C10815 * C1378 +
              C10813 * C1390) *
                 C3457 -
             (C10816 * C1393 + C48714 * C1406 + C10815 * C1391 +
              C10813 * C1405) *
                 C48481) *
                C5040 +
            ((C11048 + C11049) * C3456 + (C11050 + C11051) * C3454 -
             (C12474 + C12475) * C3457 - (C12476 + C12477) * C48481) *
                C48681) *
               C48582 * C3060) *
              C48648 +
          ((((C11239 + C11238) * C3457 -
             ((C10853 + C10852) * C3454 + (C10851 + C10850) * C3456) +
             (C11241 + C11240) * C48481) *
                C5040 +
            ((C11246 + C11247) * C3457 -
             ((C10854 + C10855) * C3454 + (C10856 + C10857) * C3456) +
             (C11248 + C11249) * C48481) *
                C48681) *
               C48582 * C48435 +
           (((C11047 + C11046) * C3456 + (C11045 + C11044) * C3454 -
             (C11749 + C11748) * C3457 - (C11751 + C11750) * C48481) *
                C5040 +
            ((C11052 + C11053) * C3456 + (C11054 + C11055) * C3454 -
             (C11752 + C11753) * C3457 - (C11754 + C11755) * C48481) *
                C48681) *
               C48582 * C48442 +
           (((C12475 + C12474) * C3457 -
             ((C11051 + C11050) * C3454 + (C11049 + C11048) * C3456) +
             (C12477 + C12476) * C48481) *
                C5040 +
            ((C10815 * C1382 + C10813 * C1398 + C10816 * C1383 +
              C48714 * C1400) *
                 C3457 -
             ((C11056 + C11057) * C3454 + (C11058 + C11059) * C3456) +
             (C10815 * C1399 + C10813 * C1409 + C10816 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48681) *
               C48582 * C3060) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[56] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C47163 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48477 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C47155 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48484 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C47169 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C4029) *
               C5040 +
           ((C10850 + C10851) * C47163 + (C10852 + C10853) * C48477 -
            (C11238 + C11239) * C47155 - (C11240 + C11241) * C48484 +
            (C11242 + C11243) * C47169 + (C11244 + C11245) * C4029) *
               C48681) *
              C48582 * C48435 +
          (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
             C48714 * C1384) *
                C47155 -
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48477 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C47163) +
            (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
             C48714 * C1402) *
                C48484 -
            (C10816 * C2570 + C48714 * C2573 + C10815 * C1375 +
             C10813 * C1384) *
                C47169 -
            (C10816 * C2574 + C48714 * C2579 + C10815 * C1385 +
             C10813 * C1402) *
                C4029) *
               C5040 +
           ((C11748 + C11749) * C47155 -
            ((C11044 + C11045) * C48477 + (C11046 + C11047) * C47163) +
            (C11750 + C11751) * C48484 - (C13192 + C13193) * C47169 -
            (C13194 + C13195) * C4029) *
               C48681) *
              C48582 * C48442 +
          (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                C47163 +
            (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                C48477 -
            (C10816 * C1379 + C48714 * C1392 + C10815 * C1378 +
             C10813 * C1390) *
                C47155 -
            (C10816 * C1393 + C48714 * C1406 + C10815 * C1391 +
             C10813 * C1405) *
                C48484 +
            (C10815 * C1379 + C10813 * C1392 + C10816 * C7660 +
             C48714 * C7662) *
                C47169 +
            (C10815 * C1393 + C10813 * C1406 + C10816 * C7663 +
             C48714 * C7666) *
                C4029) *
               C5040 +
           ((C11048 + C11049) * C47163 + (C11050 + C11051) * C48477 -
            (C12474 + C12475) * C47155 - (C12476 + C12477) * C48484 +
            (C10815 * C1381 + C10813 * C1396 + C10816 * C7661 +
             C48714 * C7664) *
                C47169 +
            (C10815 * C1397 + C10813 * C1408 + C10816 * C7665 +
             C48714 * C7667) *
                C4029) *
               C48681) *
              C48582 * C3060) *
         C48350) /
        (p * q * std::sqrt(p + q));
    d2ee[57] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C3456 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C3454 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C3457 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48481) *
               C5040 +
           ((C10850 + C10851) * C3456 + (C10852 + C10853) * C3454 -
            (C11238 + C11239) * C3457 - (C11240 + C11241) * C48481) *
               C48681) *
              C48582 * C48740 +
          (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
             C48714 * C1384) *
                C3457 -
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C3454 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C3456) +
            (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
             C48714 * C1402) *
                C48481) *
               C5040 +
           ((C11748 + C11749) * C3457 -
            ((C11044 + C11045) * C3454 + (C11046 + C11047) * C3456) +
            (C11750 + C11751) * C48481) *
               C48681) *
              C48582 * C48736 +
          (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                C3456 +
            (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                C3454 -
            (C10816 * C1379 + C48714 * C1392 + C10815 * C1378 +
             C10813 * C1390) *
                C3457 -
            (C10816 * C1393 + C48714 * C1406 + C10815 * C1391 +
             C10813 * C1405) *
                C48481) *
               C5040 +
           ((C11048 + C11049) * C3456 + (C11050 + C11051) * C3454 -
            (C12474 + C12475) * C3457 - (C12476 + C12477) * C48481) *
               C48681) *
              C48582 * C48726 +
          (((C10815 * C1803 + C10813 * C1806 + C10816 * C6238 +
             C48714 * C6240) *
                C3457 -
            ((C10816 * C1807 + C48714 * C1812 + C10815 * C1251 +
              C10813 * C1261) *
                 C3454 +
             (C10816 * C1803 + C48714 * C1806 + C10815 * C1243 +
              C10813 * C1252) *
                 C3456) +
            (C10815 * C1807 + C10813 * C1812 + C10816 * C6241 +
             C48714 * C6244) *
                C48481) *
               C5040 +
           ((C10815 * C1804 + C10813 * C1808 + C10816 * C6239 +
             C48714 * C6242) *
                C3457 -
            ((C12268 + C12269) * C3454 + (C12270 + C12271) * C3456) +
            (C10815 * C1809 + C10813 * C1813 + C10816 * C6243 +
             C48714 * C6245) *
                C48481) *
               C48681) *
              C48582 * C48704) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C3456 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C3454 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C3457 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C5040 +
            ((C10850 + C10851) * C3456 + (C10852 + C10853) * C3454 -
             (C11238 + C11239) * C3457 - (C11240 + C11241) * C48481) *
                C48681) *
               C48582 * C2680 +
           (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
              C48714 * C1384) *
                 C3457 -
             ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 +
               C10813 * C334) *
                  C3454 +
              (C10816 * C1004 + C48714 * C1009 + C10815 * C304 +
               C10813 * C317) *
                  C3456) +
             (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C5040 +
            ((C11748 + C11749) * C3457 -
             ((C11044 + C11045) * C3454 + (C11046 + C11047) * C3456) +
             (C11750 + C11751) * C48481) *
                C48681) *
               C48582 * C48439) *
              C48730 +
          ((((C11239 + C11238) * C3457 -
             ((C10853 + C10852) * C3454 + (C10851 + C10850) * C3456) +
             (C11241 + C11240) * C48481) *
                C5040 +
            ((C11246 + C11247) * C3457 -
             ((C10854 + C10855) * C3454 + (C10856 + C10857) * C3456) +
             (C11248 + C11249) * C48481) *
                C48681) *
               C48582 * C2680 +
           (((C11047 + C11046) * C3456 + (C11045 + C11044) * C3454 -
             (C11749 + C11748) * C3457 - (C11751 + C11750) * C48481) *
                C5040 +
            ((C11052 + C11053) * C3456 + (C11054 + C11055) * C3454 -
             (C11752 + C11753) * C3457 - (C11754 + C11755) * C48481) *
                C48681) *
               C48582 * C48439) *
              C48717 +
          ((((C10857 + C10856) * C3456 + (C10855 + C10854) * C3454 -
             (C11247 + C11246) * C3457 - (C11249 + C11248) * C48481) *
                C5040 +
            ((C10858 + C10859) * C3456 + (C10860 + C10861) * C3454 -
             (C11534 + C11535) * C3457 - (C11536 + C11537) * C48481) *
                C48681) *
               C48582 * C2680 +
           (((C11753 + C11752) * C3457 -
             ((C11055 + C11054) * C3454 + (C11053 + C11052) * C3456) +
             (C11755 + C11754) * C48481) *
                C5040 +
            ((C10815 * C1007 + C10813 * C1015 + C10816 * C2306 +
              C48714 * C2307) *
                 C3457 -
             ((C11392 + C11393) * C3454 + (C11394 + C11395) * C3456) +
             (C10815 * C1016 + C10813 * C1022 + C10816 * C2308 +
              C48714 * C2309) *
                 C48481) *
                C48681) *
               C48582 * C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C3744 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48741 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C3745 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48738 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C3746 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C48729 -
            (C10816 * C2137 + C48714 * C2144 + C10815 * C2136 +
             C10813 * C2142) *
                C3747 -
            (C10816 * C2145 + C48714 * C2155 + C10815 * C2143 +
             C10813 * C2154) *
                C48710) *
               C5040 +
           ((C10850 + C10851) * C3744 + (C10852 + C10853) * C48741 -
            (C11238 + C11239) * C3745 - (C11240 + C11241) * C48738 +
            (C11242 + C11243) * C3746 + (C11244 + C11245) * C48729 -
            (C13334 + C13335) * C3747 - (C13336 + C13337) * C48710) *
               C48681) *
              C48582 * C2680 +
          (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
             C48714 * C1384) *
                C3745 -
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48741 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C3744) +
            (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
             C48714 * C1402) *
                C48738 -
            (C10816 * C2570 + C48714 * C2573 + C10815 * C1375 +
             C10813 * C1384) *
                C3746 -
            (C10816 * C2574 + C48714 * C2579 + C10815 * C1385 +
             C10813 * C1402) *
                C48729 +
            (C10815 * C2570 + C10813 * C2573 + C10816 * C7174 +
             C48714 * C7176) *
                C3747 +
            (C10815 * C2574 + C10813 * C2579 + C10816 * C7177 +
             C48714 * C7180) *
                C48710) *
               C5040 +
           ((C11748 + C11749) * C3745 -
            ((C11044 + C11045) * C48741 + (C11046 + C11047) * C3744) +
            (C11750 + C11751) * C48738 - (C13192 + C13193) * C3746 -
            (C13194 + C13195) * C48729 +
            (C10815 * C2571 + C10813 * C2575 + C10816 * C7175 +
             C48714 * C7178) *
                C3747 +
            (C10815 * C2576 + C10813 * C2580 + C10816 * C7179 +
             C48714 * C7181) *
                C48710) *
               C48681) *
              C48582 * C48439) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[58] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C47163 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48477 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C47155 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48484 +
             (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                 C47169 +
             (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                 C4029) *
                C5040 +
            ((C10850 + C10851) * C47163 + (C10852 + C10853) * C48477 -
             (C11238 + C11239) * C47155 - (C11240 + C11241) * C48484 +
             (C11242 + C11243) * C47169 + (C11244 + C11245) * C4029) *
                C48681) *
               C48582 * C2680 +
           (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
              C48714 * C1384) *
                 C47155 -
             ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 +
               C10813 * C334) *
                  C48477 +
              (C10816 * C1004 + C48714 * C1009 + C10815 * C304 +
               C10813 * C317) *
                  C47163) +
             (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
              C48714 * C1402) *
                 C48484 -
             (C10816 * C2570 + C48714 * C2573 + C10815 * C1375 +
              C10813 * C1384) *
                 C47169 -
             (C10816 * C2574 + C48714 * C2579 + C10815 * C1385 +
              C10813 * C1402) *
                 C4029) *
                C5040 +
            ((C11748 + C11749) * C47155 -
             ((C11044 + C11045) * C48477 + (C11046 + C11047) * C47163) +
             (C11750 + C11751) * C48484 - (C13192 + C13193) * C47169 -
             (C13194 + C13195) * C4029) *
                C48681) *
               C48582 * C48439) *
              C48648 +
          ((((C11239 + C11238) * C47155 -
             ((C10853 + C10852) * C48477 + (C10851 + C10850) * C47163) +
             (C11241 + C11240) * C48484 - (C11243 + C11242) * C47169 -
             (C11245 + C11244) * C4029) *
                C5040 +
            ((C11246 + C11247) * C47155 -
             ((C10854 + C10855) * C48477 + (C10856 + C10857) * C47163) +
             (C11248 + C11249) * C48484 - (C11250 + C11251) * C47169 -
             (C11252 + C11253) * C4029) *
                C48681) *
               C48582 * C2680 +
           (((C11047 + C11046) * C47163 + (C11045 + C11044) * C48477 -
             (C11749 + C11748) * C47155 - (C11751 + C11750) * C48484 +
             (C13193 + C13192) * C47169 + (C13195 + C13194) * C4029) *
                C5040 +
            ((C11052 + C11053) * C47163 + (C11054 + C11055) * C48477 -
             (C11752 + C11753) * C47155 - (C11754 + C11755) * C48484 +
             (C10815 * C1377 + C10813 * C1388 + C10816 * C2572 +
              C48714 * C2577) *
                 C47169 +
             (C10815 * C1389 + C10813 * C1404 + C10816 * C2578 +
              C48714 * C2581) *
                 C4029) *
                C48681) *
               C48582 * C48439) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[59] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C3456 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C3454 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C3457 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C5040 +
            ((C10850 + C10851) * C3456 + (C10852 + C10853) * C3454 -
             (C11238 + C11239) * C3457 - (C11240 + C11241) * C48481) *
                C48681) *
               C48582 * C2680 +
           (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
              C48714 * C1384) *
                 C3457 -
             ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 +
               C10813 * C334) *
                  C3454 +
              (C10816 * C1004 + C48714 * C1009 + C10815 * C304 +
               C10813 * C317) *
                  C3456) +
             (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C5040 +
            ((C11748 + C11749) * C3457 -
             ((C11044 + C11045) * C3454 + (C11046 + C11047) * C3456) +
             (C11750 + C11751) * C48481) *
                C48681) *
               C48582 * C48439) *
              C48730 +
          ((((C11239 + C11238) * C3457 -
             ((C10853 + C10852) * C3454 + (C10851 + C10850) * C3456) +
             (C11241 + C11240) * C48481) *
                C5040 +
            ((C11246 + C11247) * C3457 -
             ((C10854 + C10855) * C3454 + (C10856 + C10857) * C3456) +
             (C11248 + C11249) * C48481) *
                C48681) *
               C48582 * C2680 +
           (((C11047 + C11046) * C3456 + (C11045 + C11044) * C3454 -
             (C11749 + C11748) * C3457 - (C11751 + C11750) * C48481) *
                C5040 +
            ((C11052 + C11053) * C3456 + (C11054 + C11055) * C3454 -
             (C11752 + C11753) * C3457 - (C11754 + C11755) * C48481) *
                C48681) *
               C48582 * C48439) *
              C48717 +
          ((((C10857 + C10856) * C3456 + (C10855 + C10854) * C3454 -
             (C11247 + C11246) * C3457 - (C11249 + C11248) * C48481) *
                C5040 +
            ((C10858 + C10859) * C3456 + (C10860 + C10861) * C3454 -
             (C11534 + C11535) * C3457 - (C11536 + C11537) * C48481) *
                C48681) *
               C48582 * C2680 +
           (((C11753 + C11752) * C3457 -
             ((C11055 + C11054) * C3454 + (C11053 + C11052) * C3456) +
             (C11755 + C11754) * C48481) *
                C5040 +
            ((C10815 * C1007 + C10813 * C1015 + C10816 * C2306 +
              C48714 * C2307) *
                 C3457 -
             ((C11392 + C11393) * C3454 + (C11394 + C11395) * C3456) +
             (C10815 * C1016 + C10813 * C1022 + C10816 * C2308 +
              C48714 * C2309) *
                 C48481) *
                C48681) *
               C48582 * C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C3456 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C3454 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C3457 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48481) *
               C5040 +
           ((C10850 + C10851) * C3456 + (C10852 + C10853) * C3454 -
            (C11238 + C11239) * C3457 - (C11240 + C11241) * C48481) *
               C48681) *
              C48582 * C48740 +
          (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
             C48714 * C1384) *
                C3457 -
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C3454 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C3456) +
            (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
             C48714 * C1402) *
                C48481) *
               C5040 +
           ((C11748 + C11749) * C3457 -
            ((C11044 + C11045) * C3454 + (C11046 + C11047) * C3456) +
            (C11750 + C11751) * C48481) *
               C48681) *
              C48582 * C48736 +
          (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                C3456 +
            (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                C3454 -
            (C10816 * C1379 + C48714 * C1392 + C10815 * C1378 +
             C10813 * C1390) *
                C3457 -
            (C10816 * C1393 + C48714 * C1406 + C10815 * C1391 +
             C10813 * C1405) *
                C48481) *
               C5040 +
           ((C11048 + C11049) * C3456 + (C11050 + C11051) * C3454 -
            (C12474 + C12475) * C3457 - (C12476 + C12477) * C48481) *
               C48681) *
              C48582 * C48726 +
          (((C10815 * C1803 + C10813 * C1806 + C10816 * C6238 +
             C48714 * C6240) *
                C3457 -
            ((C10816 * C1807 + C48714 * C1812 + C10815 * C1251 +
              C10813 * C1261) *
                 C3454 +
             (C10816 * C1803 + C48714 * C1806 + C10815 * C1243 +
              C10813 * C1252) *
                 C3456) +
            (C10815 * C1807 + C10813 * C1812 + C10816 * C6241 +
             C48714 * C6244) *
                C48481) *
               C5040 +
           ((C10815 * C1804 + C10813 * C1808 + C10816 * C6239 +
             C48714 * C6242) *
                C3457 -
            ((C12268 + C12269) * C3454 + (C12270 + C12271) * C3456) +
            (C10815 * C1809 + C10813 * C1813 + C10816 * C6243 +
             C48714 * C6245) *
                C48481) *
               C48681) *
              C48582 * C48704) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[60] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C5040 +
            ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
               C48582 * C1509 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48681 +
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48394 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C114) *
                C5040) *
               C48582 * C1510 +
           (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                 C114 +
             (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                 C48394) *
                C5040 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48681) *
               C48582 * C1511 -
           (((C12268 + C12269) * C48394 + (C12270 + C12271) * C114) * C48681 +
            ((C10816 * C1807 + C48714 * C1812 + C10815 * C1251 +
              C10813 * C1261) *
                 C48394 +
             (C10816 * C1803 + C48714 * C1806 + C10815 * C1243 +
              C10813 * C1252) *
                 C114) *
                C5040) *
               C48582 * C48704) *
              C48648 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C5040 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48681) *
               C48582 * C1510 -
           (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) * C48681 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C5040) *
               C48582 * C1509 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48681 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C5040) *
               C48582 * C1511 +
           (((C12271 + C12270) * C114 + (C12269 + C12268) * C48394) * C5040 +
            ((C10815 * C1241 + C10813 * C1248 + C10816 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C10815 * C1247 + C10813 * C1259 + C10816 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48681) *
               C48582 * C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C5040 +
            ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
               C48582 * C48662 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48681 +
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48394 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C114) *
                C5040) *
               C48582 * C48439) *
              C707 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C5040 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48681) *
               C48582 * C48439 -
           (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) * C48681 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C5040) *
               C48582 * C48662) *
              C708 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C5040 +
            ((C10858 + C10859) * C114 + (C10860 + C10861) * C48394) * C48681) *
               C48582 * C48662 -
           (((C11392 + C11393) * C48394 + (C11394 + C11395) * C114) * C48681 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C5040) *
               C48582 * C48439) *
              C709 +
          ((((C11395 + C11394) * C114 + (C11393 + C11392) * C48394) * C5040 +
            ((C10815 * C310 + C10813 * C329 + C10816 * C1008 + C48714 * C1017) *
                 C114 +
             (C10815 * C328 + C10813 * C340 + C10816 * C1018 + C48714 * C1023) *
                 C48394) *
                C48681) *
               C48582 * C48439 -
           (((C10862 + C10863) * C48394 + (C10864 + C10865) * C114) * C48681 +
            ((C10861 + C10860) * C48394 + (C10859 + C10858) * C114) * C5040) *
               C48582 * C48662) *
              C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C1928 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C1925 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C1929 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C1926 +
             (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                 C1930 +
             (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                 C48697) *
                C5040 +
            ((C10850 + C10851) * C1928 + (C10852 + C10853) * C1925 -
             (C11238 + C11239) * C1929 - (C11240 + C11241) * C1926 +
             (C11242 + C11243) * C1930 + (C11244 + C11245) * C48697) *
                C48681) *
               C48582 * C48662 +
           (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
              C48714 * C1384) *
                 C1929 -
             ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 +
               C10813 * C334) *
                  C1925 +
              (C10816 * C1004 + C48714 * C1009 + C10815 * C304 +
               C10813 * C317) *
                  C1928) +
             (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
              C48714 * C1402) *
                 C1926 -
             (C10816 * C2570 + C48714 * C2573 + C10815 * C1375 +
              C10813 * C1384) *
                 C1930 -
             (C10816 * C2574 + C48714 * C2579 + C10815 * C1385 +
              C10813 * C1402) *
                 C48697) *
                C5040 +
            ((C11748 + C11749) * C1929 -
             ((C11044 + C11045) * C1925 + (C11046 + C11047) * C1928) +
             (C11750 + C11751) * C1926 - (C13192 + C13193) * C1930 -
             (C13194 + C13195) * C48697) *
                C48681) *
               C48582 * C48439) *
              C48648 +
          ((((C11239 + C11238) * C1929 -
             ((C10853 + C10852) * C1925 + (C10851 + C10850) * C1928) +
             (C11241 + C11240) * C1926 - (C11243 + C11242) * C1930 -
             (C11245 + C11244) * C48697) *
                C5040 +
            ((C11246 + C11247) * C1929 -
             ((C10854 + C10855) * C1925 + (C10856 + C10857) * C1928) +
             (C11248 + C11249) * C1926 - (C11250 + C11251) * C1930 -
             (C11252 + C11253) * C48697) *
                C48681) *
               C48582 * C48662 +
           (((C11047 + C11046) * C1928 + (C11045 + C11044) * C1925 -
             (C11749 + C11748) * C1929 - (C11751 + C11750) * C1926 +
             (C13193 + C13192) * C1930 + (C13195 + C13194) * C48697) *
                C5040 +
            ((C11052 + C11053) * C1928 + (C11054 + C11055) * C1925 -
             (C11752 + C11753) * C1929 - (C11754 + C11755) * C1926 +
             (C10815 * C1377 + C10813 * C1388 + C10816 * C2572 +
              C48714 * C2577) *
                 C1930 +
             (C10815 * C1389 + C10813 * C1404 + C10816 * C2578 +
              C48714 * C2581) *
                 C48697) *
                C48681) *
               C48582 * C48439) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[61] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C824 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48663 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C825 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48481) *
               C5040 +
           ((C10850 + C10851) * C824 + (C10852 + C10853) * C48663 -
            (C11238 + C11239) * C825 - (C11240 + C11241) * C48481) *
               C48681) *
              C48582 * C1509 +
          (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
             C48714 * C1384) *
                C825 -
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48663 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C824) +
            (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
             C48714 * C1402) *
                C48481) *
               C5040 +
           ((C11748 + C11749) * C825 -
            ((C11044 + C11045) * C48663 + (C11046 + C11047) * C824) +
            (C11750 + C11751) * C48481) *
               C48681) *
              C48582 * C1510 +
          (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                C824 +
            (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                C48663 -
            (C10816 * C1379 + C48714 * C1392 + C10815 * C1378 +
             C10813 * C1390) *
                C825 -
            (C10816 * C1393 + C48714 * C1406 + C10815 * C1391 +
             C10813 * C1405) *
                C48481) *
               C5040 +
           ((C11048 + C11049) * C824 + (C11050 + C11051) * C48663 -
            (C12474 + C12475) * C825 - (C12476 + C12477) * C48481) *
               C48681) *
              C48582 * C1511 +
          (((C10815 * C1803 + C10813 * C1806 + C10816 * C6238 +
             C48714 * C6240) *
                C825 -
            ((C10816 * C1807 + C48714 * C1812 + C10815 * C1251 +
              C10813 * C1261) *
                 C48663 +
             (C10816 * C1803 + C48714 * C1806 + C10815 * C1243 +
              C10813 * C1252) *
                 C824) +
            (C10815 * C1807 + C10813 * C1812 + C10816 * C6241 +
             C48714 * C6244) *
                C48481) *
               C5040 +
           ((C10815 * C1804 + C10813 * C1808 + C10816 * C6239 +
             C48714 * C6242) *
                C825 -
            ((C12268 + C12269) * C48663 + (C12270 + C12271) * C824) +
            (C10815 * C1809 + C10813 * C1813 + C10816 * C6243 +
             C48714 * C6245) *
                C48481) *
               C48681) *
              C48582 * C48704) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C824 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48663 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C825 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C5040 +
            ((C10850 + C10851) * C824 + (C10852 + C10853) * C48663 -
             (C11238 + C11239) * C825 - (C11240 + C11241) * C48481) *
                C48681) *
               C48582 * C48662 +
           (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
              C48714 * C1384) *
                 C825 -
             ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 +
               C10813 * C334) *
                  C48663 +
              (C10816 * C1004 + C48714 * C1009 + C10815 * C304 +
               C10813 * C317) *
                  C824) +
             (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C5040 +
            ((C11748 + C11749) * C825 -
             ((C11044 + C11045) * C48663 + (C11046 + C11047) * C824) +
             (C11750 + C11751) * C48481) *
                C48681) *
               C48582 * C48439) *
              C299 +
          ((((C11239 + C11238) * C825 -
             ((C10853 + C10852) * C48663 + (C10851 + C10850) * C824) +
             (C11241 + C11240) * C48481) *
                C5040 +
            ((C11246 + C11247) * C825 -
             ((C10854 + C10855) * C48663 + (C10856 + C10857) * C824) +
             (C11248 + C11249) * C48481) *
                C48681) *
               C48582 * C48662 +
           (((C11047 + C11046) * C824 + (C11045 + C11044) * C48663 -
             (C11749 + C11748) * C825 - (C11751 + C11750) * C48481) *
                C5040 +
            ((C11052 + C11053) * C824 + (C11054 + C11055) * C48663 -
             (C11752 + C11753) * C825 - (C11754 + C11755) * C48481) *
                C48681) *
               C48582 * C48439) *
              C300 +
          ((((C10857 + C10856) * C824 + (C10855 + C10854) * C48663 -
             (C11247 + C11246) * C825 - (C11249 + C11248) * C48481) *
                C5040 +
            ((C10858 + C10859) * C824 + (C10860 + C10861) * C48663 -
             (C11534 + C11535) * C825 - (C11536 + C11537) * C48481) *
                C48681) *
               C48582 * C48662 +
           (((C11753 + C11752) * C825 -
             ((C11055 + C11054) * C48663 + (C11053 + C11052) * C824) +
             (C11755 + C11754) * C48481) *
                C5040 +
            ((C10815 * C1007 + C10813 * C1015 + C10816 * C2306 +
              C48714 * C2307) *
                 C825 -
             ((C11392 + C11393) * C48663 + (C11394 + C11395) * C824) +
             (C10815 * C1016 + C10813 * C1022 + C10816 * C2308 +
              C48714 * C2309) *
                 C48481) *
                C48681) *
               C48582 * C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C2436 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C2432 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C2437 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C2433 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C2438 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C2434 -
            (C10816 * C2137 + C48714 * C2144 + C10815 * C2136 +
             C10813 * C2142) *
                C2439 -
            (C10816 * C2145 + C48714 * C2155 + C10815 * C2143 +
             C10813 * C2154) *
                C48710) *
               C5040 +
           ((C10850 + C10851) * C2436 + (C10852 + C10853) * C2432 -
            (C11238 + C11239) * C2437 - (C11240 + C11241) * C2433 +
            (C11242 + C11243) * C2438 + (C11244 + C11245) * C2434 -
            (C13334 + C13335) * C2439 - (C13336 + C13337) * C48710) *
               C48681) *
              C48582 * C48662 +
          (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
             C48714 * C1384) *
                C2437 -
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C2432 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C2436) +
            (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
             C48714 * C1402) *
                C2433 -
            (C10816 * C2570 + C48714 * C2573 + C10815 * C1375 +
             C10813 * C1384) *
                C2438 -
            (C10816 * C2574 + C48714 * C2579 + C10815 * C1385 +
             C10813 * C1402) *
                C2434 +
            (C10815 * C2570 + C10813 * C2573 + C10816 * C7174 +
             C48714 * C7176) *
                C2439 +
            (C10815 * C2574 + C10813 * C2579 + C10816 * C7177 +
             C48714 * C7180) *
                C48710) *
               C5040 +
           ((C11748 + C11749) * C2437 -
            ((C11044 + C11045) * C2432 + (C11046 + C11047) * C2436) +
            (C11750 + C11751) * C2433 - (C13192 + C13193) * C2438 -
            (C13194 + C13195) * C2434 +
            (C10815 * C2571 + C10813 * C2575 + C10816 * C7175 +
             C48714 * C7178) *
                C2439 +
            (C10815 * C2576 + C10813 * C2580 + C10816 * C7179 +
             C48714 * C7181) *
                C48710) *
               C48681) *
              C48582 * C48439) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[62] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C10815 * C115 + C10813 * C122 + C10816 * C508 +
                 C48714 * C518) *
                    C114 +
                (C10815 * C123 + C10813 * C136 + C10816 * C519 +
                 C48714 * C538) *
                    C48394) *
                   C5040 +
               ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) *
                   C48681) *
                  C48582 * C48377 * C108 -
              (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) *
                   C48681 +
               ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) *
                   C5040) *
                  C48582 * C48377 * C109 +
              (((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C5040 +
               ((C10858 + C10859) * C114 + (C10860 + C10861) * C48394) *
                   C48681) *
                  C48582 * C48377 * C110 -
              (((C10862 + C10863) * C48394 + (C10864 + C10865) * C114) *
                   C48681 +
               ((C10861 + C10860) * C48394 + (C10859 + C10858) * C114) *
                   C5040) *
                  C48582 * C48377 * C111 +
              (((C10865 + C10864) * C114 + (C10863 + C10862) * C48394) * C5040 +
               ((C10815 * C120 + C10813 * C133 + C10816 * C826 +
                 C48714 * C827) *
                    C114 +
                (C10815 * C132 + C10813 * C141 + C10816 * C828 +
                 C48714 * C829) *
                    C48394) *
                   C48681) *
                  C48582 * C48377 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C10815 * C115 + C10813 * C122 + C10816 * C508 +
                  C48714 * C518) *
                     C114 +
                 (C10815 * C123 + C10813 * C136 + C10816 * C519 +
                  C48714 * C538) *
                     C48394) *
                    C5040 +
                ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) *
                    C48681) *
                   C48582 * C48733 -
               (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) *
                    C48681 +
                ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 +
                  C10813 * C334) *
                     C48394 +
                 (C10816 * C1004 + C48714 * C1009 + C10815 * C304 +
                  C10813 * C317) *
                     C114) *
                    C5040) *
                   C48582 * C48721 +
               (((C10815 * C305 + C10813 * C318 + C10816 * C1378 +
                  C48714 * C1390) *
                     C114 +
                 (C10815 * C319 + C10813 * C335 + C10816 * C1391 +
                  C48714 * C1405) *
                     C48394) *
                    C5040 +
                ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) *
                    C48681) *
                   C48582 * C48694) *
                  C299 +
              ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) *
                    C5040 +
                ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) *
                    C48681) *
                   C48582 * C48721 -
               (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) *
                    C48681 +
                ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) *
                    C5040) *
                   C48582 * C48733 -
               (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) *
                    C48681 +
                ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) *
                    C5040) *
                   C48582 * C48694) *
                  C300 +
              ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) *
                    C5040 +
                ((C10858 + C10859) * C114 + (C10860 + C10861) * C48394) *
                    C48681) *
                   C48582 * C48733 -
               (((C10816 * C1016 + C48714 * C1022 + C10815 * C325 +
                  C10813 * C338) *
                     C48394 +
                 (C10816 * C1007 + C48714 * C1015 + C10815 * C308 +
                  C10813 * C324) *
                     C114) *
                    C48681 +
                ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) *
                    C5040) *
                   C48582 * C48721 +
               (((C11059 + C11058) * C114 + (C11057 + C11056) * C48394) *
                    C5040 +
                ((C10815 * C309 + C10813 * C327 + C10816 * C1681 +
                  C48714 * C1682) *
                     C114 +
                 (C10815 * C326 + C10813 * C339 + C10816 * C1683 +
                  C48714 * C1684) *
                     C48394) *
                    C48681) *
                   C48582 * C48694) *
                  C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C505 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48734 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C506 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48723 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C507 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C48697) *
               C5040 +
           ((C10850 + C10851) * C505 + (C10852 + C10853) * C48734 -
            (C11238 + C11239) * C506 - (C11240 + C11241) * C48723 +
            (C11242 + C11243) * C507 + (C11244 + C11245) * C48697) *
               C48681) *
              C48582 * C48377 * C299 +
          (((C11239 + C11238) * C506 -
            ((C10853 + C10852) * C48734 + (C10851 + C10850) * C505) +
            (C11241 + C11240) * C48723 - (C11243 + C11242) * C507 -
            (C11245 + C11244) * C48697) *
               C5040 +
           ((C11246 + C11247) * C506 -
            ((C10854 + C10855) * C48734 + (C10856 + C10857) * C505) +
            (C11248 + C11249) * C48723 - (C11250 + C11251) * C507 -
            (C11252 + C11253) * C48697) *
               C48681) *
              C48582 * C48377 * C300 +
          (((C10857 + C10856) * C505 + (C10855 + C10854) * C48734 -
            (C11247 + C11246) * C506 - (C11249 + C11248) * C48723 +
            (C11251 + C11250) * C507 + (C11253 + C11252) * C48697) *
               C5040 +
           ((C10858 + C10859) * C505 + (C10860 + C10861) * C48734 -
            (C10816 * C515 + C48714 * C532 + C10815 * C514 + C10813 * C530) *
                C506 -
            (C10816 * C533 + C48714 * C545 + C10815 * C531 + C10813 * C544) *
                C48723 +
            (C10815 * C515 + C10813 * C532 + C10816 * C2440 + C48714 * C2441) *
                C507 +
            (C10815 * C533 + C10813 * C545 + C10816 * C2442 + C48714 * C2443) *
                C48697) *
               C48681) *
              C48582 * C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C5040 +
            ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
               C48582 * C1167 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48681 +
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48394 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C114) *
                C5040) *
               C48582 * C1168 +
           (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                 C114 +
             (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                 C48394) *
                C5040 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48681) *
               C48582 * C48694) *
              C48730 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C5040 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48681) *
               C48582 * C1168 -
           (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) * C48681 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C5040) *
               C48582 * C1167 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48681 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C5040) *
               C48582 * C48694) *
              C48717 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C5040 +
            ((C10858 + C10859) * C114 + (C10860 + C10861) * C48394) * C48681) *
               C48582 * C1167 -
           (((C11392 + C11393) * C48394 + (C11394 + C11395) * C114) * C48681 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C5040) *
               C48582 * C1168 +
           (((C11059 + C11058) * C114 + (C11057 + C11056) * C48394) * C5040 +
            ((C10815 * C309 + C10813 * C327 + C10816 * C1681 + C48714 * C1682) *
                 C114 +
             (C10815 * C326 + C10813 * C339 + C10816 * C1683 + C48714 * C1684) *
                 C48394) *
                C48681) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C114 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48394) *
               C5040 +
           ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
              C48582 * C1235 -
          (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48681 +
           ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                C48394 +
            (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                C114) *
               C5040) *
              C48582 * C1236 +
          (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                C114 +
            (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                C48394) *
               C5040 +
           ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48681) *
              C48582 * C1237 -
          (((C10816 * C1809 + C48714 * C1813 + C10815 * C1249 +
             C10813 * C1260) *
                C48394 +
            (C10816 * C1804 + C48714 * C1808 + C10815 * C1242 +
             C10813 * C1250) *
                C114) *
               C48681 +
           ((C10816 * C1807 + C48714 * C1812 + C10815 * C1251 +
             C10813 * C1261) *
                C48394 +
            (C10816 * C1803 + C48714 * C1806 + C10815 * C1243 +
             C10813 * C1252) *
                C114) *
               C5040) *
              C48582 * C1238 +
          (((C10815 * C1244 + C10813 * C1253 + C10816 * C6764 +
             C48714 * C6766) *
                C114 +
            (C10815 * C1254 + C10813 * C1262 + C10816 * C6767 +
             C48714 * C6770) *
                C48394) *
               C5040 +
           ((C10815 * C1245 + C10813 * C1255 + C10816 * C6765 +
             C48714 * C6768) *
                C114 +
            (C10815 * C1256 + C10813 * C1263 + C10816 * C6769 +
             C48714 * C6771) *
                C48394) *
               C48681) *
              C48582 * C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C505 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48734 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C506 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48723 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C507 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C48697) *
               C5040 +
           ((C10850 + C10851) * C505 + (C10852 + C10853) * C48734 -
            (C11238 + C11239) * C506 - (C11240 + C11241) * C48723 +
            (C11242 + C11243) * C507 + (C11244 + C11245) * C48697) *
               C48681) *
              C48582 * C1167 +
          (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
             C48714 * C1384) *
                C506 -
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48734 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C505) +
            (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
             C48714 * C1402) *
                C48723 -
            (C10816 * C2570 + C48714 * C2573 + C10815 * C1375 +
             C10813 * C1384) *
                C507 -
            (C10816 * C2574 + C48714 * C2579 + C10815 * C1385 +
             C10813 * C1402) *
                C48697) *
               C5040 +
           ((C11748 + C11749) * C506 -
            ((C11044 + C11045) * C48734 + (C11046 + C11047) * C505) +
            (C11750 + C11751) * C48723 -
            (C10816 * C2571 + C48714 * C2575 + C10815 * C1376 +
             C10813 * C1386) *
                C507 -
            (C10816 * C2576 + C48714 * C2580 + C10815 * C1387 +
             C10813 * C1403) *
                C48697) *
               C48681) *
              C48582 * C1168 +
          (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                C505 +
            (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                C48734 -
            (C10816 * C1379 + C48714 * C1392 + C10815 * C1378 +
             C10813 * C1390) *
                C506 -
            (C10816 * C1393 + C48714 * C1406 + C10815 * C1391 +
             C10813 * C1405) *
                C48723 +
            (C10815 * C1379 + C10813 * C1392 + C10816 * C7660 +
             C48714 * C7662) *
                C507 +
            (C10815 * C1393 + C10813 * C1406 + C10816 * C7663 +
             C48714 * C7666) *
                C48697) *
               C5040 +
           ((C11048 + C11049) * C505 + (C11050 + C11051) * C48734 -
            (C10816 * C1381 + C48714 * C1396 + C10815 * C1380 +
             C10813 * C1394) *
                C506 -
            (C10816 * C1397 + C48714 * C1408 + C10815 * C1395 +
             C10813 * C1407) *
                C48723 +
            (C10815 * C1381 + C10813 * C1396 + C10816 * C7661 +
             C48714 * C7664) *
                C507 +
            (C10815 * C1397 + C10813 * C1408 + C10816 * C7665 +
             C48714 * C7667) *
                C48697) *
               C48681) *
              C48582 * C48694) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C1928 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C1925 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C1929 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C1926 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C1930 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C48697) *
               C5040 +
           ((C10850 + C10851) * C1928 + (C10852 + C10853) * C1925 -
            (C11238 + C11239) * C1929 - (C11240 + C11241) * C1926 +
            (C11242 + C11243) * C1930 + (C11244 + C11245) * C48697) *
               C48681) *
              C48582 * C48377 * C48730 +
          (((C11239 + C11238) * C1929 -
            ((C10853 + C10852) * C1925 + (C10851 + C10850) * C1928) +
            (C11241 + C11240) * C1926 - (C11243 + C11242) * C1930 -
            (C11245 + C11244) * C48697) *
               C5040 +
           ((C11246 + C11247) * C1929 -
            ((C10854 + C10855) * C1925 + (C10856 + C10857) * C1928) +
            (C11248 + C11249) * C1926 - (C11250 + C11251) * C1930 -
            (C11252 + C11253) * C48697) *
               C48681) *
              C48582 * C48377 * C48717 +
          (((C10857 + C10856) * C1928 + (C10855 + C10854) * C1925 -
            (C11247 + C11246) * C1929 - (C11249 + C11248) * C1926 +
            (C11251 + C11250) * C1930 + (C11253 + C11252) * C48697) *
               C5040 +
           ((C10858 + C10859) * C1928 + (C10860 + C10861) * C1925 -
            (C11534 + C11535) * C1929 - (C11536 + C11537) * C1926 +
            (C10815 * C515 + C10813 * C532 + C10816 * C2440 + C48714 * C2441) *
                C1930 +
            (C10815 * C533 + C10813 * C545 + C10816 * C2442 + C48714 * C2443) *
                C48697) *
               C48681) *
              C48582 * C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C1928 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C1925 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C1929 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C1926 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C1930 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C48697) *
               C5040 +
           ((C10850 + C10851) * C1928 + (C10852 + C10853) * C1925 -
            (C11238 + C11239) * C1929 - (C11240 + C11241) * C1926 +
            (C11242 + C11243) * C1930 + (C11244 + C11245) * C48697) *
               C48681) *
              C48582 * C48733 +
          (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
             C48714 * C1384) *
                C1929 -
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C1925 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C1928) +
            (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
             C48714 * C1402) *
                C1926 -
            (C10816 * C2570 + C48714 * C2573 + C10815 * C1375 +
             C10813 * C1384) *
                C1930 -
            (C10816 * C2574 + C48714 * C2579 + C10815 * C1385 +
             C10813 * C1402) *
                C48697) *
               C5040 +
           ((C11748 + C11749) * C1929 -
            ((C11044 + C11045) * C1925 + (C11046 + C11047) * C1928) +
            (C11750 + C11751) * C1926 -
            (C10816 * C2571 + C48714 * C2575 + C10815 * C1376 +
             C10813 * C1386) *
                C1930 -
            (C10816 * C2576 + C48714 * C2580 + C10815 * C1387 +
             C10813 * C1403) *
                C48697) *
               C48681) *
              C48582 * C48721 +
          (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                C1928 +
            (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                C1925 -
            (C10816 * C1379 + C48714 * C1392 + C10815 * C1378 +
             C10813 * C1390) *
                C1929 -
            (C10816 * C1393 + C48714 * C1406 + C10815 * C1391 +
             C10813 * C1405) *
                C1926 +
            (C10815 * C1379 + C10813 * C1392 + C10816 * C7660 +
             C48714 * C7662) *
                C1930 +
            (C10815 * C1393 + C10813 * C1406 + C10816 * C7663 +
             C48714 * C7666) *
                C48697) *
               C5040 +
           ((C11048 + C11049) * C1928 + (C11050 + C11051) * C1925 -
            (C12474 + C12475) * C1929 - (C12476 + C12477) * C1926 +
            (C10815 * C1381 + C10813 * C1396 + C10816 * C7661 +
             C48714 * C7664) *
                C1930 +
            (C10815 * C1397 + C10813 * C1408 + C10816 * C7665 +
             C48714 * C7667) *
                C48697) *
               C48681) *
              C48582 * C48694) *
         C48350) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
               C2131 +
           (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
               C2126 -
           (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
               C2132 -
           (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
               C2127 +
           (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
               C2133 +
           (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
               C2128 -
           (C10816 * C2137 + C48714 * C2144 + C10815 * C2136 + C10813 * C2142) *
               C2134 -
           (C10816 * C2145 + C48714 * C2155 + C10815 * C2143 + C10813 * C2154) *
               C2129 +
           (C10815 * C2137 + C10813 * C2144 + C10816 * C12981 +
            C48714 * C12983) *
               C2135 +
           (C10815 * C2145 + C10813 * C2155 + C10816 * C12984 +
            C48714 * C12987) *
               C2130) *
              C5040 +
          ((C10850 + C10851) * C2131 + (C10852 + C10853) * C2126 -
           (C11238 + C11239) * C2132 - (C11240 + C11241) * C2127 +
           (C11242 + C11243) * C2133 + (C11244 + C11245) * C2128 -
           (C10816 * C2139 + C48714 * C2148 + C10815 * C2138 + C10813 * C2146) *
               C2134 -
           (C10816 * C2149 + C48714 * C2157 + C10815 * C2147 + C10813 * C2156) *
               C2129 +
           (C10815 * C2139 + C10813 * C2148 + C10816 * C12982 +
            C48714 * C12985) *
               C2135 +
           (C10815 * C2149 + C10813 * C2157 + C10816 * C12986 +
            C48714 * C12988) *
               C2130) *
              C48681) *
         C48582 * C48377 * C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[63] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C824 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48663 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C825 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C5040 +
            ((C10850 + C10851) * C824 + (C10852 + C10853) * C48663 -
             (C11238 + C11239) * C825 - (C11240 + C11241) * C48481) *
                C48681) *
               C48582 * C1167 +
           (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
              C48714 * C1384) *
                 C825 -
             ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 +
               C10813 * C334) *
                  C48663 +
              (C10816 * C1004 + C48714 * C1009 + C10815 * C304 +
               C10813 * C317) *
                  C824) +
             (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C5040 +
            ((C11748 + C11749) * C825 -
             ((C11044 + C11045) * C48663 + (C11046 + C11047) * C824) +
             (C11750 + C11751) * C48481) *
                C48681) *
               C48582 * C1168 +
           (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                 C824 +
             (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                 C48663 -
             (C10816 * C1379 + C48714 * C1392 + C10815 * C1378 +
              C10813 * C1390) *
                 C825 -
             (C10816 * C1393 + C48714 * C1406 + C10815 * C1391 +
              C10813 * C1405) *
                 C48481) *
                C5040 +
            ((C11048 + C11049) * C824 + (C11050 + C11051) * C48663 -
             (C12474 + C12475) * C825 - (C12476 + C12477) * C48481) *
                C48681) *
               C48582 * C48694) *
              C48648 +
          ((((C11239 + C11238) * C825 -
             ((C10853 + C10852) * C48663 + (C10851 + C10850) * C824) +
             (C11241 + C11240) * C48481) *
                C5040 +
            ((C11246 + C11247) * C825 -
             ((C10854 + C10855) * C48663 + (C10856 + C10857) * C824) +
             (C11248 + C11249) * C48481) *
                C48681) *
               C48582 * C1167 +
           (((C11047 + C11046) * C824 + (C11045 + C11044) * C48663 -
             (C11749 + C11748) * C825 - (C11751 + C11750) * C48481) *
                C5040 +
            ((C11052 + C11053) * C824 + (C11054 + C11055) * C48663 -
             (C11752 + C11753) * C825 - (C11754 + C11755) * C48481) *
                C48681) *
               C48582 * C1168 +
           (((C12475 + C12474) * C825 -
             ((C11051 + C11050) * C48663 + (C11049 + C11048) * C824) +
             (C12477 + C12476) * C48481) *
                C5040 +
            ((C10815 * C1382 + C10813 * C1398 + C10816 * C1383 +
              C48714 * C1400) *
                 C825 -
             ((C11056 + C11057) * C48663 + (C11058 + C11059) * C824) +
             (C10815 * C1399 + C10813 * C1409 + C10816 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48681) *
               C48582 * C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C824 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48663 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C825 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48481) *
               C5040 +
           ((C10850 + C10851) * C824 + (C10852 + C10853) * C48663 -
            (C11238 + C11239) * C825 - (C11240 + C11241) * C48481) *
               C48681) *
              C48582 * C48377 * C707 +
          (((C11239 + C11238) * C825 -
            ((C10853 + C10852) * C48663 + (C10851 + C10850) * C824) +
            (C11241 + C11240) * C48481) *
               C5040 +
           ((C11246 + C11247) * C825 -
            ((C10854 + C10855) * C48663 + (C10856 + C10857) * C824) +
            (C11248 + C11249) * C48481) *
               C48681) *
              C48582 * C48377 * C708 +
          (((C10857 + C10856) * C824 + (C10855 + C10854) * C48663 -
            (C11247 + C11246) * C825 - (C11249 + C11248) * C48481) *
               C5040 +
           ((C10858 + C10859) * C824 + (C10860 + C10861) * C48663 -
            (C11534 + C11535) * C825 - (C11536 + C11537) * C48481) *
               C48681) *
              C48582 * C48377 * C709 +
          (((C11535 + C11534) * C825 -
            ((C10861 + C10860) * C48663 + (C10859 + C10858) * C824) +
            (C11537 + C11536) * C48481) *
               C5040 +
           ((C10815 * C516 + C10813 * C534 + C10816 * C517 + C48714 * C536) *
                C825 -
            ((C10862 + C10863) * C48663 + (C10864 + C10865) * C824) +
            (C10815 * C535 + C10813 * C546 + C10816 * C537 + C48714 * C547) *
                C48481) *
               C48681) *
              C48582 * C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C2436 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C2432 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C2437 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C2433 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C2438 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C2434 -
            (C10816 * C2137 + C48714 * C2144 + C10815 * C2136 +
             C10813 * C2142) *
                C2439 -
            (C10816 * C2145 + C48714 * C2155 + C10815 * C2143 +
             C10813 * C2154) *
                C48710) *
               C5040 +
           ((C10850 + C10851) * C2436 + (C10852 + C10853) * C2432 -
            (C11238 + C11239) * C2437 - (C11240 + C11241) * C2433 +
            (C11242 + C11243) * C2438 + (C11244 + C11245) * C2434 -
            (C13334 + C13335) * C2439 - (C13336 + C13337) * C48710) *
               C48681) *
              C48582 * C48377 * C48648 +
          (((C11239 + C11238) * C2437 -
            ((C10853 + C10852) * C2432 + (C10851 + C10850) * C2436) +
            (C11241 + C11240) * C2433 - (C11243 + C11242) * C2438 -
            (C11245 + C11244) * C2434 + (C13335 + C13334) * C2439 +
            (C13337 + C13336) * C48710) *
               C5040 +
           ((C11246 + C11247) * C2437 -
            ((C10854 + C10855) * C2432 + (C10856 + C10857) * C2436) +
            (C11248 + C11249) * C2433 - (C11250 + C11251) * C2438 -
            (C11252 + C11253) * C2434 +
            (C10815 * C2140 + C10813 * C2150 + C10816 * C2141 +
             C48714 * C2152) *
                C2439 +
            (C10815 * C2151 + C10813 * C2158 + C10816 * C2153 +
             C48714 * C2159) *
                C48710) *
               C48681) *
              C48582 * C48377 * C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[64] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C5040 +
            ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
               C48582 * C48733 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48681 +
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48394 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C114) *
                C5040) *
               C48582 * C48721 +
           (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                 C114 +
             (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                 C48394) *
                C5040 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48681) *
               C48582 * C48694) *
              C299 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C5040 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48681) *
               C48582 * C48721 -
           (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) * C48681 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C5040) *
               C48582 * C48733 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48681 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C5040) *
               C48582 * C48694) *
              C300 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C5040 +
            ((C10858 + C10859) * C114 + (C10860 + C10861) * C48394) * C48681) *
               C48582 * C48733 -
           (((C10816 * C1016 + C48714 * C1022 + C10815 * C325 + C10813 * C338) *
                 C48394 +
             (C10816 * C1007 + C48714 * C1015 + C10815 * C308 + C10813 * C324) *
                 C114) *
                C48681 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C5040) *
               C48582 * C48721 +
           (((C11059 + C11058) * C114 + (C11057 + C11056) * C48394) * C5040 +
            ((C10815 * C309 + C10813 * C327 + C10816 * C1681 + C48714 * C1682) *
                 C114 +
             (C10815 * C326 + C10813 * C339 + C10816 * C1683 + C48714 * C1684) *
                 C48394) *
                C48681) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C114 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48394) *
               C5040 +
           ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
              C48582 * C48377 * C108 -
          (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) * C48681 +
           ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C5040) *
              C48582 * C48377 * C109 +
          (((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C5040 +
           ((C10858 + C10859) * C114 + (C10860 + C10861) * C48394) * C48681) *
              C48582 * C48377 * C110 -
          (((C10862 + C10863) * C48394 + (C10864 + C10865) * C114) * C48681 +
           ((C10861 + C10860) * C48394 + (C10859 + C10858) * C114) * C5040) *
              C48582 * C48377 * C111 +
          (((C10865 + C10864) * C114 + (C10863 + C10862) * C48394) * C5040 +
           ((C10815 * C120 + C10813 * C133 + C10816 * C826 + C48714 * C827) *
                C114 +
            (C10815 * C132 + C10813 * C141 + C10816 * C828 + C48714 * C829) *
                C48394) *
               C48681) *
              C48582 * C48377 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C5040 +
            ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
               C48582 * C1167 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48681 +
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48394 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C114) *
                C5040) *
               C48582 * C1168 +
           (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                 C114 +
             (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                 C48394) *
                C5040 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48681) *
               C48582 * C48694) *
              C48730 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C5040 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48681) *
               C48582 * C1168 -
           (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) * C48681 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C5040) *
               C48582 * C1167 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48681 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C5040) *
               C48582 * C48694) *
              C48717 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C5040 +
            ((C10858 + C10859) * C114 + (C10860 + C10861) * C48394) * C48681) *
               C48582 * C1167 -
           (((C11392 + C11393) * C48394 + (C11394 + C11395) * C114) * C48681 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C5040) *
               C48582 * C1168 +
           (((C11059 + C11058) * C114 + (C11057 + C11056) * C48394) * C5040 +
            ((C10815 * C309 + C10813 * C327 + C10816 * C1681 + C48714 * C1682) *
                 C114 +
             (C10815 * C326 + C10813 * C339 + C10816 * C1683 + C48714 * C1684) *
                 C48394) *
                C48681) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C114 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48394) *
               C5040 +
           ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
              C48582 * C1235 -
          (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48681 +
           ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                C48394 +
            (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                C114) *
               C5040) *
              C48582 * C1236 +
          (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                C114 +
            (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                C48394) *
               C5040 +
           ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48681) *
              C48582 * C1237 -
          (((C10816 * C1809 + C48714 * C1813 + C10815 * C1249 +
             C10813 * C1260) *
                C48394 +
            (C10816 * C1804 + C48714 * C1808 + C10815 * C1242 +
             C10813 * C1250) *
                C114) *
               C48681 +
           ((C10816 * C1807 + C48714 * C1812 + C10815 * C1251 +
             C10813 * C1261) *
                C48394 +
            (C10816 * C1803 + C48714 * C1806 + C10815 * C1243 +
             C10813 * C1252) *
                C114) *
               C5040) *
              C48582 * C1238 +
          (((C10815 * C1244 + C10813 * C1253 + C10816 * C6764 +
             C48714 * C6766) *
                C114 +
            (C10815 * C1254 + C10813 * C1262 + C10816 * C6767 +
             C48714 * C6770) *
                C48394) *
               C5040 +
           ((C10815 * C1245 + C10813 * C1255 + C10816 * C6765 +
             C48714 * C6768) *
                C114 +
            (C10815 * C1256 + C10813 * C1263 + C10816 * C6769 +
             C48714 * C6771) *
                C48394) *
               C48681) *
              C48582 * C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C1928 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C1925 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C1929 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C1926 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C1930 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C48697) *
               C5040 +
           ((C10850 + C10851) * C1928 + (C10852 + C10853) * C1925 -
            (C11238 + C11239) * C1929 - (C11240 + C11241) * C1926 +
            (C11242 + C11243) * C1930 + (C11244 + C11245) * C48697) *
               C48681) *
              C48582 * C48377 * C48730 +
          (((C11239 + C11238) * C1929 -
            ((C10853 + C10852) * C1925 + (C10851 + C10850) * C1928) +
            (C11241 + C11240) * C1926 - (C11243 + C11242) * C1930 -
            (C11245 + C11244) * C48697) *
               C5040 +
           ((C11246 + C11247) * C1929 -
            ((C10854 + C10855) * C1925 + (C10856 + C10857) * C1928) +
            (C11248 + C11249) * C1926 - (C11250 + C11251) * C1930 -
            (C11252 + C11253) * C48697) *
               C48681) *
              C48582 * C48377 * C48717 +
          (((C10857 + C10856) * C1928 + (C10855 + C10854) * C1925 -
            (C11247 + C11246) * C1929 - (C11249 + C11248) * C1926 +
            (C11251 + C11250) * C1930 + (C11253 + C11252) * C48697) *
               C5040 +
           ((C10858 + C10859) * C1928 + (C10860 + C10861) * C1925 -
            (C11534 + C11535) * C1929 - (C11536 + C11537) * C1926 +
            (C10815 * C515 + C10813 * C532 + C10816 * C2440 + C48714 * C2441) *
                C1930 +
            (C10815 * C533 + C10813 * C545 + C10816 * C2442 + C48714 * C2443) *
                C48697) *
               C48681) *
              C48582 * C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C1928 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C1925 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C1929 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C1926 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C1930 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C48697) *
               C5040 +
           ((C10850 + C10851) * C1928 + (C10852 + C10853) * C1925 -
            (C11238 + C11239) * C1929 - (C11240 + C11241) * C1926 +
            (C11242 + C11243) * C1930 + (C11244 + C11245) * C48697) *
               C48681) *
              C48582 * C48733 +
          (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
             C48714 * C1384) *
                C1929 -
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C1925 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C1928) +
            (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
             C48714 * C1402) *
                C1926 -
            (C10816 * C2570 + C48714 * C2573 + C10815 * C1375 +
             C10813 * C1384) *
                C1930 -
            (C10816 * C2574 + C48714 * C2579 + C10815 * C1385 +
             C10813 * C1402) *
                C48697) *
               C5040 +
           ((C11748 + C11749) * C1929 -
            ((C11044 + C11045) * C1925 + (C11046 + C11047) * C1928) +
            (C11750 + C11751) * C1926 -
            (C10816 * C2571 + C48714 * C2575 + C10815 * C1376 +
             C10813 * C1386) *
                C1930 -
            (C10816 * C2576 + C48714 * C2580 + C10815 * C1387 +
             C10813 * C1403) *
                C48697) *
               C48681) *
              C48582 * C48721 +
          (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                C1928 +
            (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                C1925 -
            (C10816 * C1379 + C48714 * C1392 + C10815 * C1378 +
             C10813 * C1390) *
                C1929 -
            (C10816 * C1393 + C48714 * C1406 + C10815 * C1391 +
             C10813 * C1405) *
                C1926 +
            (C10815 * C1379 + C10813 * C1392 + C10816 * C7660 +
             C48714 * C7662) *
                C1930 +
            (C10815 * C1393 + C10813 * C1406 + C10816 * C7663 +
             C48714 * C7666) *
                C48697) *
               C5040 +
           ((C11048 + C11049) * C1928 + (C11050 + C11051) * C1925 -
            (C12474 + C12475) * C1929 - (C12476 + C12477) * C1926 +
            (C10815 * C1381 + C10813 * C1396 + C10816 * C7661 +
             C48714 * C7664) *
                C1930 +
            (C10815 * C1397 + C10813 * C1408 + C10816 * C7665 +
             C48714 * C7667) *
                C48697) *
               C48681) *
              C48582 * C48694) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[65] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C3456 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C3454 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C3457 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C5040 +
            ((C10850 + C10851) * C3456 + (C10852 + C10853) * C3454 -
             (C11238 + C11239) * C3457 - (C11240 + C11241) * C48481) *
                C48681) *
               C48582 * C48662 +
           (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
              C48714 * C1384) *
                 C3457 -
             ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 +
               C10813 * C334) *
                  C3454 +
              (C10816 * C1004 + C48714 * C1009 + C10815 * C304 +
               C10813 * C317) *
                  C3456) +
             (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C5040 +
            ((C11748 + C11749) * C3457 -
             ((C11044 + C11045) * C3454 + (C11046 + C11047) * C3456) +
             (C11750 + C11751) * C48481) *
                C48681) *
               C48582 * C48439) *
              C48355 +
          ((((C11239 + C11238) * C3457 -
             ((C10853 + C10852) * C3454 + (C10851 + C10850) * C3456) +
             (C11241 + C11240) * C48481) *
                C5040 +
            ((C11246 + C11247) * C3457 -
             ((C10854 + C10855) * C3454 + (C10856 + C10857) * C3456) +
             (C11248 + C11249) * C48481) *
                C48681) *
               C48582 * C48662 +
           (((C11047 + C11046) * C3456 + (C11045 + C11044) * C3454 -
             (C11749 + C11748) * C3457 - (C11751 + C11750) * C48481) *
                C5040 +
            ((C11052 + C11053) * C3456 + (C11054 + C11055) * C3454 -
             (C11752 + C11753) * C3457 - (C11754 + C11755) * C48481) *
                C48681) *
               C48582 * C48439) *
              C48363 +
          ((((C10857 + C10856) * C3456 + (C10855 + C10854) * C3454 -
             (C11247 + C11246) * C3457 - (C11249 + C11248) * C48481) *
                C5040 +
            ((C10858 + C10859) * C3456 + (C10860 + C10861) * C3454 -
             (C11534 + C11535) * C3457 - (C11536 + C11537) * C48481) *
                C48681) *
               C48582 * C48662 +
           (((C11753 + C11752) * C3457 -
             ((C11055 + C11054) * C3454 + (C11053 + C11052) * C3456) +
             (C11755 + C11754) * C48481) *
                C5040 +
            ((C10815 * C1007 + C10813 * C1015 + C10816 * C2306 +
              C48714 * C2307) *
                 C3457 -
             ((C11392 + C11393) * C3454 + (C11394 + C11395) * C3456) +
             (C10815 * C1016 + C10813 * C1022 + C10816 * C2308 +
              C48714 * C2309) *
                 C48481) *
                C48681) *
               C48582 * C48439) *
              C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[66] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C47163 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48477 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C47155 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48484 +
             (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                 C47169 +
             (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                 C4029) *
                C5040 +
            ((C10850 + C10851) * C47163 + (C10852 + C10853) * C48477 -
             (C11238 + C11239) * C47155 - (C11240 + C11241) * C48484 +
             (C11242 + C11243) * C47169 + (C11244 + C11245) * C4029) *
                C48681) *
               C48582 * C48662 +
           (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
              C48714 * C1384) *
                 C47155 -
             ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 +
               C10813 * C334) *
                  C48477 +
              (C10816 * C1004 + C48714 * C1009 + C10815 * C304 +
               C10813 * C317) *
                  C47163) +
             (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
              C48714 * C1402) *
                 C48484 -
             (C10816 * C2570 + C48714 * C2573 + C10815 * C1375 +
              C10813 * C1384) *
                 C47169 -
             (C10816 * C2574 + C48714 * C2579 + C10815 * C1385 +
              C10813 * C1402) *
                 C4029) *
                C5040 +
            ((C11748 + C11749) * C47155 -
             ((C11044 + C11045) * C48477 + (C11046 + C11047) * C47163) +
             (C11750 + C11751) * C48484 - (C13192 + C13193) * C47169 -
             (C13194 + C13195) * C4029) *
                C48681) *
               C48582 * C48439) *
              C2788 +
          ((((C11239 + C11238) * C47155 -
             ((C10853 + C10852) * C48477 + (C10851 + C10850) * C47163) +
             (C11241 + C11240) * C48484 - (C11243 + C11242) * C47169 -
             (C11245 + C11244) * C4029) *
                C5040 +
            ((C11246 + C11247) * C47155 -
             ((C10854 + C10855) * C48477 + (C10856 + C10857) * C47163) +
             (C11248 + C11249) * C48484 - (C11250 + C11251) * C47169 -
             (C11252 + C11253) * C4029) *
                C48681) *
               C48582 * C48662 +
           (((C11047 + C11046) * C47163 + (C11045 + C11044) * C48477 -
             (C11749 + C11748) * C47155 - (C11751 + C11750) * C48484 +
             (C13193 + C13192) * C47169 + (C13195 + C13194) * C4029) *
                C5040 +
            ((C11052 + C11053) * C47163 + (C11054 + C11055) * C48477 -
             (C11752 + C11753) * C47155 - (C11754 + C11755) * C48484 +
             (C10815 * C1377 + C10813 * C1388 + C10816 * C2572 +
              C48714 * C2577) *
                 C47169 +
             (C10815 * C1389 + C10813 * C1404 + C10816 * C2578 +
              C48714 * C2581) *
                 C4029) *
                C48681) *
               C48582 * C48439) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[67] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C3456 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C3454 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C3457 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C5040 +
            ((C10850 + C10851) * C3456 + (C10852 + C10853) * C3454 -
             (C11238 + C11239) * C3457 - (C11240 + C11241) * C48481) *
                C48681) *
               C48582 * C48733 +
           (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
              C48714 * C1384) *
                 C3457 -
             ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 +
               C10813 * C334) *
                  C3454 +
              (C10816 * C1004 + C48714 * C1009 + C10815 * C304 +
               C10813 * C317) *
                  C3456) +
             (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C5040 +
            ((C11748 + C11749) * C3457 -
             ((C11044 + C11045) * C3454 + (C11046 + C11047) * C3456) +
             (C11750 + C11751) * C48481) *
                C48681) *
               C48582 * C48721 +
           (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                 C3456 +
             (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                 C3454 -
             (C10816 * C1379 + C48714 * C1392 + C10815 * C1378 +
              C10813 * C1390) *
                 C3457 -
             (C10816 * C1393 + C48714 * C1406 + C10815 * C1391 +
              C10813 * C1405) *
                 C48481) *
                C5040 +
            ((C11048 + C11049) * C3456 + (C11050 + C11051) * C3454 -
             (C12474 + C12475) * C3457 - (C12476 + C12477) * C48481) *
                C48681) *
               C48582 * C48694) *
              C2788 +
          ((((C11239 + C11238) * C3457 -
             ((C10853 + C10852) * C3454 + (C10851 + C10850) * C3456) +
             (C11241 + C11240) * C48481) *
                C5040 +
            ((C11246 + C11247) * C3457 -
             ((C10854 + C10855) * C3454 + (C10856 + C10857) * C3456) +
             (C11248 + C11249) * C48481) *
                C48681) *
               C48582 * C48733 +
           (((C11047 + C11046) * C3456 + (C11045 + C11044) * C3454 -
             (C11749 + C11748) * C3457 - (C11751 + C11750) * C48481) *
                C5040 +
            ((C11052 + C11053) * C3456 + (C11054 + C11055) * C3454 -
             (C11752 + C11753) * C3457 - (C11754 + C11755) * C48481) *
                C48681) *
               C48582 * C48721 +
           (((C12475 + C12474) * C3457 -
             ((C11051 + C11050) * C3454 + (C11049 + C11048) * C3456) +
             (C12477 + C12476) * C48481) *
                C5040 +
            ((C10815 * C1382 + C10813 * C1398 + C10816 * C1383 +
              C48714 * C1400) *
                 C3457 -
             ((C11056 + C11057) * C3454 + (C11058 + C11059) * C3456) +
             (C10815 * C1399 + C10813 * C1409 + C10816 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48681) *
               C48582 * C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C3456 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C3454 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C3457 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48481) *
               C5040 +
           ((C10850 + C10851) * C3456 + (C10852 + C10853) * C3454 -
            (C11238 + C11239) * C3457 - (C11240 + C11241) * C48481) *
               C48681) *
              C48582 * C48377 * C48739 +
          (((C11239 + C11238) * C3457 -
            ((C10853 + C10852) * C3454 + (C10851 + C10850) * C3456) +
            (C11241 + C11240) * C48481) *
               C5040 +
           ((C11246 + C11247) * C3457 -
            ((C10854 + C10855) * C3454 + (C10856 + C10857) * C3456) +
            (C11248 + C11249) * C48481) *
               C48681) *
              C48582 * C48377 * C48732 +
          (((C10857 + C10856) * C3456 + (C10855 + C10854) * C3454 -
            (C11247 + C11246) * C3457 - (C11249 + C11248) * C48481) *
               C5040 +
           ((C10858 + C10859) * C3456 + (C10860 + C10861) * C3454 -
            (C11534 + C11535) * C3457 - (C11536 + C11537) * C48481) *
               C48681) *
              C48582 * C48377 * C48719 +
          (((C11535 + C11534) * C3457 -
            ((C10861 + C10860) * C3454 + (C10859 + C10858) * C3456) +
            (C11537 + C11536) * C48481) *
               C5040 +
           ((C10815 * C516 + C10813 * C534 + C10816 * C517 + C48714 * C536) *
                C3457 -
            ((C10862 + C10863) * C3454 + (C10864 + C10865) * C3456) +
            (C10815 * C535 + C10813 * C546 + C10816 * C537 + C48714 * C547) *
                C48481) *
               C48681) *
              C48582 * C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C3744 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48741 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C3745 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48738 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C3746 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C48729 -
            (C10816 * C2137 + C48714 * C2144 + C10815 * C2136 +
             C10813 * C2142) *
                C3747 -
            (C10816 * C2145 + C48714 * C2155 + C10815 * C2143 +
             C10813 * C2154) *
                C48710) *
               C5040 +
           ((C10850 + C10851) * C3744 + (C10852 + C10853) * C48741 -
            (C11238 + C11239) * C3745 - (C11240 + C11241) * C48738 +
            (C11242 + C11243) * C3746 + (C11244 + C11245) * C48729 -
            (C13334 + C13335) * C3747 - (C13336 + C13337) * C48710) *
               C48681) *
              C48582 * C48377 * C2788 +
          (((C11239 + C11238) * C3745 -
            ((C10853 + C10852) * C48741 + (C10851 + C10850) * C3744) +
            (C11241 + C11240) * C48738 - (C11243 + C11242) * C3746 -
            (C11245 + C11244) * C48729 + (C13335 + C13334) * C3747 +
            (C13337 + C13336) * C48710) *
               C5040 +
           ((C11246 + C11247) * C3745 -
            ((C10854 + C10855) * C48741 + (C10856 + C10857) * C3744) +
            (C11248 + C11249) * C48738 - (C11250 + C11251) * C3746 -
            (C11252 + C11253) * C48729 +
            (C10815 * C2140 + C10813 * C2150 + C10816 * C2141 +
             C48714 * C2152) *
                C3747 +
            (C10815 * C2151 + C10813 * C2158 + C10816 * C2153 +
             C48714 * C2159) *
                C48710) *
               C48681) *
              C48582 * C48377 * C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[68] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C47163 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48477 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C47155 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48484 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C47169 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C4029) *
               C5040 +
           ((C10850 + C10851) * C47163 + (C10852 + C10853) * C48477 -
            (C11238 + C11239) * C47155 - (C11240 + C11241) * C48484 +
            (C11242 + C11243) * C47169 + (C11244 + C11245) * C4029) *
               C48681) *
              C48582 * C48377 * C48355 +
          (((C11239 + C11238) * C47155 -
            ((C10853 + C10852) * C48477 + (C10851 + C10850) * C47163) +
            (C11241 + C11240) * C48484 - (C11243 + C11242) * C47169 -
            (C11245 + C11244) * C4029) *
               C5040 +
           ((C11246 + C11247) * C47155 -
            ((C10854 + C10855) * C48477 + (C10856 + C10857) * C47163) +
            (C11248 + C11249) * C48484 - (C11250 + C11251) * C47169 -
            (C11252 + C11253) * C4029) *
               C48681) *
              C48582 * C48377 * C48363 +
          (((C10857 + C10856) * C47163 + (C10855 + C10854) * C48477 -
            (C11247 + C11246) * C47155 - (C11249 + C11248) * C48484 +
            (C11251 + C11250) * C47169 + (C11253 + C11252) * C4029) *
               C5040 +
           ((C10858 + C10859) * C47163 + (C10860 + C10861) * C48477 -
            (C11534 + C11535) * C47155 - (C11536 + C11537) * C48484 +
            (C10815 * C515 + C10813 * C532 + C10816 * C2440 + C48714 * C2441) *
                C47169 +
            (C10815 * C533 + C10813 * C545 + C10816 * C2442 + C48714 * C2443) *
                C4029) *
               C48681) *
              C48582 * C48377 * C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[69] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C3456 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C3454 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C3457 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48481) *
               C5040 +
           ((C10850 + C10851) * C3456 + (C10852 + C10853) * C3454 -
            (C11238 + C11239) * C3457 - (C11240 + C11241) * C48481) *
               C48681) *
              C48582 * C48377 * C48739 +
          (((C11239 + C11238) * C3457 -
            ((C10853 + C10852) * C3454 + (C10851 + C10850) * C3456) +
            (C11241 + C11240) * C48481) *
               C5040 +
           ((C11246 + C11247) * C3457 -
            ((C10854 + C10855) * C3454 + (C10856 + C10857) * C3456) +
            (C11248 + C11249) * C48481) *
               C48681) *
              C48582 * C48377 * C48732 +
          (((C10857 + C10856) * C3456 + (C10855 + C10854) * C3454 -
            (C11247 + C11246) * C3457 - (C11249 + C11248) * C48481) *
               C5040 +
           ((C10858 + C10859) * C3456 + (C10860 + C10861) * C3454 -
            (C11534 + C11535) * C3457 - (C11536 + C11537) * C48481) *
               C48681) *
              C48582 * C48377 * C48719 +
          (((C11535 + C11534) * C3457 -
            ((C10861 + C10860) * C3454 + (C10859 + C10858) * C3456) +
            (C11537 + C11536) * C48481) *
               C5040 +
           ((C10815 * C516 + C10813 * C534 + C10816 * C517 + C48714 * C536) *
                C3457 -
            ((C10862 + C10863) * C3454 + (C10864 + C10865) * C3456) +
            (C10815 * C535 + C10813 * C546 + C10816 * C537 + C48714 * C547) *
                C48481) *
               C48681) *
              C48582 * C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C3456 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C3454 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C3457 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C5040 +
            ((C10850 + C10851) * C3456 + (C10852 + C10853) * C3454 -
             (C11238 + C11239) * C3457 - (C11240 + C11241) * C48481) *
                C48681) *
               C48582 * C48733 +
           (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
              C48714 * C1384) *
                 C3457 -
             ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 +
               C10813 * C334) *
                  C3454 +
              (C10816 * C1004 + C48714 * C1009 + C10815 * C304 +
               C10813 * C317) *
                  C3456) +
             (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C5040 +
            ((C11748 + C11749) * C3457 -
             ((C11044 + C11045) * C3454 + (C11046 + C11047) * C3456) +
             (C11750 + C11751) * C48481) *
                C48681) *
               C48582 * C48721 +
           (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                 C3456 +
             (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                 C3454 -
             (C10816 * C1379 + C48714 * C1392 + C10815 * C1378 +
              C10813 * C1390) *
                 C3457 -
             (C10816 * C1393 + C48714 * C1406 + C10815 * C1391 +
              C10813 * C1405) *
                 C48481) *
                C5040 +
            ((C11048 + C11049) * C3456 + (C11050 + C11051) * C3454 -
             (C12474 + C12475) * C3457 - (C12476 + C12477) * C48481) *
                C48681) *
               C48582 * C48694) *
              C2788 +
          ((((C11239 + C11238) * C3457 -
             ((C10853 + C10852) * C3454 + (C10851 + C10850) * C3456) +
             (C11241 + C11240) * C48481) *
                C5040 +
            ((C11246 + C11247) * C3457 -
             ((C10854 + C10855) * C3454 + (C10856 + C10857) * C3456) +
             (C11248 + C11249) * C48481) *
                C48681) *
               C48582 * C48733 +
           (((C11047 + C11046) * C3456 + (C11045 + C11044) * C3454 -
             (C11749 + C11748) * C3457 - (C11751 + C11750) * C48481) *
                C5040 +
            ((C11052 + C11053) * C3456 + (C11054 + C11055) * C3454 -
             (C11752 + C11753) * C3457 - (C11754 + C11755) * C48481) *
                C48681) *
               C48582 * C48721 +
           (((C12475 + C12474) * C3457 -
             ((C11051 + C11050) * C3454 + (C11049 + C11048) * C3456) +
             (C12477 + C12476) * C48481) *
                C5040 +
            ((C10815 * C1382 + C10813 * C1398 + C10816 * C1383 +
              C48714 * C1400) *
                 C3457 -
             ((C11056 + C11057) * C3454 + (C11058 + C11059) * C3456) +
             (C10815 * C1399 + C10813 * C1409 + C10816 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48681) *
               C48582 * C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[70] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C5040 +
            ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
               C48582 * C48662 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48681 +
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48394 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C114) *
                C5040) *
               C48582 * C48439) *
              C707 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C5040 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48681) *
               C48582 * C48439 -
           (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) * C48681 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C5040) *
               C48582 * C48662) *
              C708 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C5040 +
            ((C10858 + C10859) * C114 + (C10860 + C10861) * C48394) * C48681) *
               C48582 * C48662 -
           (((C11392 + C11393) * C48394 + (C11394 + C11395) * C114) * C48681 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C5040) *
               C48582 * C48439) *
              C709 +
          ((((C11395 + C11394) * C114 + (C11393 + C11392) * C48394) * C5040 +
            ((C10815 * C310 + C10813 * C329 + C10816 * C1008 + C48714 * C1017) *
                 C114 +
             (C10815 * C328 + C10813 * C340 + C10816 * C1018 + C48714 * C1023) *
                 C48394) *
                C48681) *
               C48582 * C48439 -
           (((C10862 + C10863) * C48394 + (C10864 + C10865) * C114) * C48681 +
            ((C10861 + C10860) * C48394 + (C10859 + C10858) * C114) * C5040) *
               C48582 * C48662) *
              C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C5040 +
            ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
               C48582 * C1509 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48681 +
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48394 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C114) *
                C5040) *
               C48582 * C1510 +
           (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                 C114 +
             (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                 C48394) *
                C5040 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48681) *
               C48582 * C1511 -
           (((C12268 + C12269) * C48394 + (C12270 + C12271) * C114) * C48681 +
            ((C10816 * C1807 + C48714 * C1812 + C10815 * C1251 +
              C10813 * C1261) *
                 C48394 +
             (C10816 * C1803 + C48714 * C1806 + C10815 * C1243 +
              C10813 * C1252) *
                 C114) *
                C5040) *
               C48582 * C48704) *
              C48648 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C5040 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48681) *
               C48582 * C1510 -
           (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) * C48681 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C5040) *
               C48582 * C1509 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48681 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C5040) *
               C48582 * C1511 +
           (((C12271 + C12270) * C114 + (C12269 + C12268) * C48394) * C5040 +
            ((C10815 * C1241 + C10813 * C1248 + C10816 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C10815 * C1247 + C10813 * C1259 + C10816 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48681) *
               C48582 * C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[71] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C824 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48663 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C825 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C5040 +
            ((C10850 + C10851) * C824 + (C10852 + C10853) * C48663 -
             (C11238 + C11239) * C825 - (C11240 + C11241) * C48481) *
                C48681) *
               C48582 * C48662 +
           (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
              C48714 * C1384) *
                 C825 -
             ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 +
               C10813 * C334) *
                  C48663 +
              (C10816 * C1004 + C48714 * C1009 + C10815 * C304 +
               C10813 * C317) *
                  C824) +
             (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C5040 +
            ((C11748 + C11749) * C825 -
             ((C11044 + C11045) * C48663 + (C11046 + C11047) * C824) +
             (C11750 + C11751) * C48481) *
                C48681) *
               C48582 * C48439) *
              C299 +
          ((((C11239 + C11238) * C825 -
             ((C10853 + C10852) * C48663 + (C10851 + C10850) * C824) +
             (C11241 + C11240) * C48481) *
                C5040 +
            ((C11246 + C11247) * C825 -
             ((C10854 + C10855) * C48663 + (C10856 + C10857) * C824) +
             (C11248 + C11249) * C48481) *
                C48681) *
               C48582 * C48662 +
           (((C11047 + C11046) * C824 + (C11045 + C11044) * C48663 -
             (C11749 + C11748) * C825 - (C11751 + C11750) * C48481) *
                C5040 +
            ((C11052 + C11053) * C824 + (C11054 + C11055) * C48663 -
             (C11752 + C11753) * C825 - (C11754 + C11755) * C48481) *
                C48681) *
               C48582 * C48439) *
              C300 +
          ((((C10857 + C10856) * C824 + (C10855 + C10854) * C48663 -
             (C11247 + C11246) * C825 - (C11249 + C11248) * C48481) *
                C5040 +
            ((C10858 + C10859) * C824 + (C10860 + C10861) * C48663 -
             (C11534 + C11535) * C825 - (C11536 + C11537) * C48481) *
                C48681) *
               C48582 * C48662 +
           (((C11753 + C11752) * C825 -
             ((C11055 + C11054) * C48663 + (C11053 + C11052) * C824) +
             (C11755 + C11754) * C48481) *
                C5040 +
            ((C10815 * C1007 + C10813 * C1015 + C10816 * C2306 +
              C48714 * C2307) *
                 C825 -
             ((C11392 + C11393) * C48663 + (C11394 + C11395) * C824) +
             (C10815 * C1016 + C10813 * C1022 + C10816 * C2308 +
              C48714 * C2309) *
                 C48481) *
                C48681) *
               C48582 * C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C824 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48663 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C825 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48481) *
               C5040 +
           ((C10850 + C10851) * C824 + (C10852 + C10853) * C48663 -
            (C11238 + C11239) * C825 - (C11240 + C11241) * C48481) *
               C48681) *
              C48582 * C1509 +
          (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
             C48714 * C1384) *
                C825 -
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48663 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C824) +
            (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
             C48714 * C1402) *
                C48481) *
               C5040 +
           ((C11748 + C11749) * C825 -
            ((C11044 + C11045) * C48663 + (C11046 + C11047) * C824) +
            (C11750 + C11751) * C48481) *
               C48681) *
              C48582 * C1510 +
          (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                C824 +
            (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                C48663 -
            (C10816 * C1379 + C48714 * C1392 + C10815 * C1378 +
             C10813 * C1390) *
                C825 -
            (C10816 * C1393 + C48714 * C1406 + C10815 * C1391 +
             C10813 * C1405) *
                C48481) *
               C5040 +
           ((C11048 + C11049) * C824 + (C11050 + C11051) * C48663 -
            (C12474 + C12475) * C825 - (C12476 + C12477) * C48481) *
               C48681) *
              C48582 * C1511 +
          (((C10815 * C1803 + C10813 * C1806 + C10816 * C6238 +
             C48714 * C6240) *
                C825 -
            ((C10816 * C1807 + C48714 * C1812 + C10815 * C1251 +
              C10813 * C1261) *
                 C48663 +
             (C10816 * C1803 + C48714 * C1806 + C10815 * C1243 +
              C10813 * C1252) *
                 C824) +
            (C10815 * C1807 + C10813 * C1812 + C10816 * C6241 +
             C48714 * C6244) *
                C48481) *
               C5040 +
           ((C10815 * C1804 + C10813 * C1808 + C10816 * C6239 +
             C48714 * C6242) *
                C825 -
            ((C12268 + C12269) * C48663 + (C12270 + C12271) * C824) +
            (C10815 * C1809 + C10813 * C1813 + C10816 * C6243 +
             C48714 * C6245) *
                C48481) *
               C48681) *
              C48582 * C48704) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[72] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C5040 +
            ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
               C48582 * C48733 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48681 +
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48394 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C114) *
                C5040) *
               C48582 * C48721 +
           (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                 C114 +
             (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                 C48394) *
                C5040 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48681) *
               C48582 * C48694) *
              C299 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C5040 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48681) *
               C48582 * C48721 -
           (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) * C48681 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C5040) *
               C48582 * C48733 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48681 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C5040) *
               C48582 * C48694) *
              C300 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C5040 +
            ((C10858 + C10859) * C114 + (C10860 + C10861) * C48394) * C48681) *
               C48582 * C48733 -
           (((C10816 * C1016 + C48714 * C1022 + C10815 * C325 + C10813 * C338) *
                 C48394 +
             (C10816 * C1007 + C48714 * C1015 + C10815 * C308 + C10813 * C324) *
                 C114) *
                C48681 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C5040) *
               C48582 * C48721 +
           (((C11059 + C11058) * C114 + (C11057 + C11056) * C48394) * C5040 +
            ((C10815 * C309 + C10813 * C327 + C10816 * C1681 + C48714 * C1682) *
                 C114 +
             (C10815 * C326 + C10813 * C339 + C10816 * C1683 + C48714 * C1684) *
                 C48394) *
                C48681) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C114 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48394) *
               C5040 +
           ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
              C48582 * C48377 * C108 -
          (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) * C48681 +
           ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C5040) *
              C48582 * C48377 * C109 +
          (((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C5040 +
           ((C10858 + C10859) * C114 + (C10860 + C10861) * C48394) * C48681) *
              C48582 * C48377 * C110 -
          (((C10862 + C10863) * C48394 + (C10864 + C10865) * C114) * C48681 +
           ((C10861 + C10860) * C48394 + (C10859 + C10858) * C114) * C5040) *
              C48582 * C48377 * C111 +
          (((C10865 + C10864) * C114 + (C10863 + C10862) * C48394) * C5040 +
           ((C10815 * C120 + C10813 * C133 + C10816 * C826 + C48714 * C827) *
                C114 +
            (C10815 * C132 + C10813 * C141 + C10816 * C828 + C48714 * C829) *
                C48394) *
               C48681) *
              C48582 * C48377 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C505 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48734 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C506 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48723 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C507 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C48697) *
               C5040 +
           ((C10850 + C10851) * C505 + (C10852 + C10853) * C48734 -
            (C11238 + C11239) * C506 - (C11240 + C11241) * C48723 +
            (C11242 + C11243) * C507 + (C11244 + C11245) * C48697) *
               C48681) *
              C48582 * C48377 * C299 +
          (((C11239 + C11238) * C506 -
            ((C10853 + C10852) * C48734 + (C10851 + C10850) * C505) +
            (C11241 + C11240) * C48723 - (C11243 + C11242) * C507 -
            (C11245 + C11244) * C48697) *
               C5040 +
           ((C11246 + C11247) * C506 -
            ((C10854 + C10855) * C48734 + (C10856 + C10857) * C505) +
            (C11248 + C11249) * C48723 - (C11250 + C11251) * C507 -
            (C11252 + C11253) * C48697) *
               C48681) *
              C48582 * C48377 * C300 +
          (((C10857 + C10856) * C505 + (C10855 + C10854) * C48734 -
            (C11247 + C11246) * C506 - (C11249 + C11248) * C48723 +
            (C11251 + C11250) * C507 + (C11253 + C11252) * C48697) *
               C5040 +
           ((C10858 + C10859) * C505 + (C10860 + C10861) * C48734 -
            (C10816 * C515 + C48714 * C532 + C10815 * C514 + C10813 * C530) *
                C506 -
            (C10816 * C533 + C48714 * C545 + C10815 * C531 + C10813 * C544) *
                C48723 +
            (C10815 * C515 + C10813 * C532 + C10816 * C2440 + C48714 * C2441) *
                C507 +
            (C10815 * C533 + C10813 * C545 + C10816 * C2442 + C48714 * C2443) *
                C48697) *
               C48681) *
              C48582 * C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C5040 +
            ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
               C48582 * C1167 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48681 +
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48394 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C114) *
                C5040) *
               C48582 * C1168 +
           (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                 C114 +
             (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                 C48394) *
                C5040 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48681) *
               C48582 * C48694) *
              C48730 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C5040 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48681) *
               C48582 * C1168 -
           (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) * C48681 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C5040) *
               C48582 * C1167 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48681 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C5040) *
               C48582 * C48694) *
              C48717 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C5040 +
            ((C10858 + C10859) * C114 + (C10860 + C10861) * C48394) * C48681) *
               C48582 * C1167 -
           (((C11392 + C11393) * C48394 + (C11394 + C11395) * C114) * C48681 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C5040) *
               C48582 * C1168 +
           (((C11059 + C11058) * C114 + (C11057 + C11056) * C48394) * C5040 +
            ((C10815 * C309 + C10813 * C327 + C10816 * C1681 + C48714 * C1682) *
                 C114 +
             (C10815 * C326 + C10813 * C339 + C10816 * C1683 + C48714 * C1684) *
                 C48394) *
                C48681) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C114 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48394) *
               C5040 +
           ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
              C48582 * C1235 -
          (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48681 +
           ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                C48394 +
            (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                C114) *
               C5040) *
              C48582 * C1236 +
          (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                C114 +
            (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                C48394) *
               C5040 +
           ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48681) *
              C48582 * C1237 -
          (((C10816 * C1809 + C48714 * C1813 + C10815 * C1249 +
             C10813 * C1260) *
                C48394 +
            (C10816 * C1804 + C48714 * C1808 + C10815 * C1242 +
             C10813 * C1250) *
                C114) *
               C48681 +
           ((C10816 * C1807 + C48714 * C1812 + C10815 * C1251 +
             C10813 * C1261) *
                C48394 +
            (C10816 * C1803 + C48714 * C1806 + C10815 * C1243 +
             C10813 * C1252) *
                C114) *
               C5040) *
              C48582 * C1238 +
          (((C10815 * C1244 + C10813 * C1253 + C10816 * C6764 +
             C48714 * C6766) *
                C114 +
            (C10815 * C1254 + C10813 * C1262 + C10816 * C6767 +
             C48714 * C6770) *
                C48394) *
               C5040 +
           ((C10815 * C1245 + C10813 * C1255 + C10816 * C6765 +
             C48714 * C6768) *
                C114 +
            (C10815 * C1256 + C10813 * C1263 + C10816 * C6769 +
             C48714 * C6771) *
                C48394) *
               C48681) *
              C48582 * C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C505 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48734 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C506 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48723 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C507 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C48697) *
               C5040 +
           ((C10850 + C10851) * C505 + (C10852 + C10853) * C48734 -
            (C11238 + C11239) * C506 - (C11240 + C11241) * C48723 +
            (C11242 + C11243) * C507 + (C11244 + C11245) * C48697) *
               C48681) *
              C48582 * C1167 +
          (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
             C48714 * C1384) *
                C506 -
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48734 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C505) +
            (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
             C48714 * C1402) *
                C48723 -
            (C10816 * C2570 + C48714 * C2573 + C10815 * C1375 +
             C10813 * C1384) *
                C507 -
            (C10816 * C2574 + C48714 * C2579 + C10815 * C1385 +
             C10813 * C1402) *
                C48697) *
               C5040 +
           ((C11748 + C11749) * C506 -
            ((C11044 + C11045) * C48734 + (C11046 + C11047) * C505) +
            (C11750 + C11751) * C48723 -
            (C10816 * C2571 + C48714 * C2575 + C10815 * C1376 +
             C10813 * C1386) *
                C507 -
            (C10816 * C2576 + C48714 * C2580 + C10815 * C1387 +
             C10813 * C1403) *
                C48697) *
               C48681) *
              C48582 * C1168 +
          (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                C505 +
            (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                C48734 -
            (C10816 * C1379 + C48714 * C1392 + C10815 * C1378 +
             C10813 * C1390) *
                C506 -
            (C10816 * C1393 + C48714 * C1406 + C10815 * C1391 +
             C10813 * C1405) *
                C48723 +
            (C10815 * C1379 + C10813 * C1392 + C10816 * C7660 +
             C48714 * C7662) *
                C507 +
            (C10815 * C1393 + C10813 * C1406 + C10816 * C7663 +
             C48714 * C7666) *
                C48697) *
               C5040 +
           ((C11048 + C11049) * C505 + (C11050 + C11051) * C48734 -
            (C10816 * C1381 + C48714 * C1396 + C10815 * C1380 +
             C10813 * C1394) *
                C506 -
            (C10816 * C1397 + C48714 * C1408 + C10815 * C1395 +
             C10813 * C1407) *
                C48723 +
            (C10815 * C1381 + C10813 * C1396 + C10816 * C7661 +
             C48714 * C7664) *
                C507 +
            (C10815 * C1397 + C10813 * C1408 + C10816 * C7665 +
             C48714 * C7667) *
                C48697) *
               C48681) *
              C48582 * C48694) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[73] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C824 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48663 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C825 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48481) *
               C5040 +
           ((C10850 + C10851) * C824 + (C10852 + C10853) * C48663 -
            (C11238 + C11239) * C825 - (C11240 + C11241) * C48481) *
               C48681) *
              C48582 * C48377 * C707 +
          (((C11239 + C11238) * C825 -
            ((C10853 + C10852) * C48663 + (C10851 + C10850) * C824) +
            (C11241 + C11240) * C48481) *
               C5040 +
           ((C11246 + C11247) * C825 -
            ((C10854 + C10855) * C48663 + (C10856 + C10857) * C824) +
            (C11248 + C11249) * C48481) *
               C48681) *
              C48582 * C48377 * C708 +
          (((C10857 + C10856) * C824 + (C10855 + C10854) * C48663 -
            (C11247 + C11246) * C825 - (C11249 + C11248) * C48481) *
               C5040 +
           ((C10858 + C10859) * C824 + (C10860 + C10861) * C48663 -
            (C11534 + C11535) * C825 - (C11536 + C11537) * C48481) *
               C48681) *
              C48582 * C48377 * C709 +
          (((C11535 + C11534) * C825 -
            ((C10861 + C10860) * C48663 + (C10859 + C10858) * C824) +
            (C11537 + C11536) * C48481) *
               C5040 +
           ((C10815 * C516 + C10813 * C534 + C10816 * C517 + C48714 * C536) *
                C825 -
            ((C10862 + C10863) * C48663 + (C10864 + C10865) * C824) +
            (C10815 * C535 + C10813 * C546 + C10816 * C537 + C48714 * C547) *
                C48481) *
               C48681) *
              C48582 * C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C824 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48663 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C825 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C5040 +
            ((C10850 + C10851) * C824 + (C10852 + C10853) * C48663 -
             (C11238 + C11239) * C825 - (C11240 + C11241) * C48481) *
                C48681) *
               C48582 * C1167 +
           (((C10815 * C1004 + C10813 * C1009 + C10816 * C1375 +
              C48714 * C1384) *
                 C825 -
             ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 +
               C10813 * C334) *
                  C48663 +
              (C10816 * C1004 + C48714 * C1009 + C10815 * C304 +
               C10813 * C317) *
                  C824) +
             (C10815 * C1010 + C10813 * C1019 + C10816 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C5040 +
            ((C11748 + C11749) * C825 -
             ((C11044 + C11045) * C48663 + (C11046 + C11047) * C824) +
             (C11750 + C11751) * C48481) *
                C48681) *
               C48582 * C1168 +
           (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                 C824 +
             (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                 C48663 -
             (C10816 * C1379 + C48714 * C1392 + C10815 * C1378 +
              C10813 * C1390) *
                 C825 -
             (C10816 * C1393 + C48714 * C1406 + C10815 * C1391 +
              C10813 * C1405) *
                 C48481) *
                C5040 +
            ((C11048 + C11049) * C824 + (C11050 + C11051) * C48663 -
             (C12474 + C12475) * C825 - (C12476 + C12477) * C48481) *
                C48681) *
               C48582 * C48694) *
              C48648 +
          ((((C11239 + C11238) * C825 -
             ((C10853 + C10852) * C48663 + (C10851 + C10850) * C824) +
             (C11241 + C11240) * C48481) *
                C5040 +
            ((C11246 + C11247) * C825 -
             ((C10854 + C10855) * C48663 + (C10856 + C10857) * C824) +
             (C11248 + C11249) * C48481) *
                C48681) *
               C48582 * C1167 +
           (((C11047 + C11046) * C824 + (C11045 + C11044) * C48663 -
             (C11749 + C11748) * C825 - (C11751 + C11750) * C48481) *
                C5040 +
            ((C11052 + C11053) * C824 + (C11054 + C11055) * C48663 -
             (C11752 + C11753) * C825 - (C11754 + C11755) * C48481) *
                C48681) *
               C48582 * C1168 +
           (((C12475 + C12474) * C825 -
             ((C11051 + C11050) * C48663 + (C11049 + C11048) * C824) +
             (C12477 + C12476) * C48481) *
                C5040 +
            ((C10815 * C1382 + C10813 * C1398 + C10816 * C1383 +
              C48714 * C1400) *
                 C825 -
             ((C11056 + C11057) * C48663 + (C11058 + C11059) * C824) +
             (C10815 * C1399 + C10813 * C1409 + C10816 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48681) *
               C48582 * C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[74] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C114 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48394) *
               C5040 +
           ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
              C48582 * C48377 * C108 -
          (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) * C48681 +
           ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C5040) *
              C48582 * C48377 * C109 +
          (((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C5040 +
           ((C10858 + C10859) * C114 + (C10860 + C10861) * C48394) * C48681) *
              C48582 * C48377 * C110 -
          (((C10862 + C10863) * C48394 + (C10864 + C10865) * C114) * C48681 +
           ((C10861 + C10860) * C48394 + (C10859 + C10858) * C114) * C5040) *
              C48582 * C48377 * C111 +
          (((C10865 + C10864) * C114 + (C10863 + C10862) * C48394) * C5040 +
           ((C10815 * C120 + C10813 * C133 + C10816 * C826 + C48714 * C827) *
                C114 +
            (C10815 * C132 + C10813 * C141 + C10816 * C828 + C48714 * C829) *
                C48394) *
               C48681) *
              C48582 * C48377 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C5040 +
            ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
               C48582 * C48733 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48681 +
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48394 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C114) *
                C5040) *
               C48582 * C48721 +
           (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                 C114 +
             (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                 C48394) *
                C5040 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48681) *
               C48582 * C48694) *
              C299 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C5040 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48681) *
               C48582 * C48721 -
           (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) * C48681 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C5040) *
               C48582 * C48733 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48681 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C5040) *
               C48582 * C48694) *
              C300 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C5040 +
            ((C10858 + C10859) * C114 + (C10860 + C10861) * C48394) * C48681) *
               C48582 * C48733 -
           (((C10816 * C1016 + C48714 * C1022 + C10815 * C325 + C10813 * C338) *
                 C48394 +
             (C10816 * C1007 + C48714 * C1015 + C10815 * C308 + C10813 * C324) *
                 C114) *
                C48681 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C5040) *
               C48582 * C48721 +
           (((C11059 + C11058) * C114 + (C11057 + C11056) * C48394) * C5040 +
            ((C10815 * C309 + C10813 * C327 + C10816 * C1681 + C48714 * C1682) *
                 C114 +
             (C10815 * C326 + C10813 * C339 + C10816 * C1683 + C48714 * C1684) *
                 C48394) *
                C48681) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C5040 +
            ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
               C48582 * C1167 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48681 +
            ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                 C48394 +
             (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                 C114) *
                C5040) *
               C48582 * C1168 +
           (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                 C114 +
             (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                 C48394) *
                C5040 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48681) *
               C48582 * C48694) *
              C48730 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C5040 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48681) *
               C48582 * C1168 -
           (((C10854 + C10855) * C48394 + (C10856 + C10857) * C114) * C48681 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C5040) *
               C48582 * C1167 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48681 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C5040) *
               C48582 * C48694) *
              C48717 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C5040 +
            ((C10858 + C10859) * C114 + (C10860 + C10861) * C48394) * C48681) *
               C48582 * C1167 -
           (((C11392 + C11393) * C48394 + (C11394 + C11395) * C114) * C48681 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C5040) *
               C48582 * C1168 +
           (((C11059 + C11058) * C114 + (C11057 + C11056) * C48394) * C5040 +
            ((C10815 * C309 + C10813 * C327 + C10816 * C1681 + C48714 * C1682) *
                 C114 +
             (C10815 * C326 + C10813 * C339 + C10816 * C1683 + C48714 * C1684) *
                 C48394) *
                C48681) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C114 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48394) *
               C5040 +
           ((C10850 + C10851) * C114 + (C10852 + C10853) * C48394) * C48681) *
              C48582 * C1235 -
          (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48681 +
           ((C10816 * C1010 + C48714 * C1019 + C10815 * C316 + C10813 * C334) *
                C48394 +
            (C10816 * C1004 + C48714 * C1009 + C10815 * C304 + C10813 * C317) *
                C114) *
               C5040) *
              C48582 * C1236 +
          (((C10815 * C305 + C10813 * C318 + C10816 * C1378 + C48714 * C1390) *
                C114 +
            (C10815 * C319 + C10813 * C335 + C10816 * C1391 + C48714 * C1405) *
                C48394) *
               C5040 +
           ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48681) *
              C48582 * C1237 -
          (((C10816 * C1809 + C48714 * C1813 + C10815 * C1249 +
             C10813 * C1260) *
                C48394 +
            (C10816 * C1804 + C48714 * C1808 + C10815 * C1242 +
             C10813 * C1250) *
                C114) *
               C48681 +
           ((C10816 * C1807 + C48714 * C1812 + C10815 * C1251 +
             C10813 * C1261) *
                C48394 +
            (C10816 * C1803 + C48714 * C1806 + C10815 * C1243 +
             C10813 * C1252) *
                C114) *
               C5040) *
              C48582 * C1238 +
          (((C10815 * C1244 + C10813 * C1253 + C10816 * C6764 +
             C48714 * C6766) *
                C114 +
            (C10815 * C1254 + C10813 * C1262 + C10816 * C6767 +
             C48714 * C6770) *
                C48394) *
               C5040 +
           ((C10815 * C1245 + C10813 * C1255 + C10816 * C6765 +
             C48714 * C6768) *
                C114 +
            (C10815 * C1256 + C10813 * C1263 + C10816 * C6769 +
             C48714 * C6771) *
                C48394) *
               C48681) *
              C48582 * C1239) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[75] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C16513 +
             (C174 + C175) * C48681) *
                C16515 +
            ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
               C48435 -
           ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
               C48442 +
           (((C5212 + C5211) * C16513 + C5202 * C48681) * C16515 +
            ((C6087 + C6088) * C16513 + C6419 * C48681) * C48712) *
               C3060) *
              C48355 +
          (((C5195 * C16513 + C5203 * C48681) * C16515 +
            (C5202 * C16513 + C392 * C48681) * C48712) *
               C48442 -
           ((C391 * C48681 + C5201 * C16513) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
               C48435 -
           (((C1532 + C1533) * C48681 + C6420 * C16513) * C48712 +
            (C5204 * C48681 + C5196 * C16513) * C16515) *
               C3060) *
              C48363 +
          (((C184 * C16513 + (C179 + C178) * C48681) * C16515 +
            (C5203 * C16513 + C716 * C48681) * C48712) *
               C48435 -
           (((C389 + C390) * C48681 + C5204 * C16513) * C48712 +
            (C5489 * C48681 + C391 * C16513) * C16515) *
               C48442 +
           ((C392 * C16513 + (C390 + C389) * C48681) * C16515 +
            ((C1533 + C1532) * C16513 +
             ((C113 * C1515 + C48597 * C1516) * C114 +
              (C113 * C1517 + C48597 * C1518) * C48394) *
                 C48681) *
                C48712) *
               C3060) *
              C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[76] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C824 +
              (C113 * C123 + C48597 * C136) * C48663 -
              (C113 * C508 + C48597 * C518) * C825 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C16513 +
             (C831 + C832 - C833 - C834) * C48681) *
                C16515 +
            ((C5814 + C5815 - C5828 - C5829) * C16513 + C5830 * C48681) *
                C48712) *
               C48435 +
           (((C5828 - (C5815 + C5814) + C5829) * C16513 + C5831 * C48681) *
                C16515 +
            ((C6615 - (C6616 + C6617) + C6618) * C16513 + C6631 * C48681) *
                C48712) *
               C48442 +
           (((C6617 + C6616 - C6615 - C6618) * C16513 + C6632 * C48681) *
                C16515 +
            ((C6773 + C6774 - C6781 - C6782) * C16513 +
             (C6621 + C6622 - C6633 - C6634) * C48681) *
                C48712) *
               C3060) *
              C2788 +
          ((((C833 - (C832 + C831) + C834) * C16513 +
             (C837 - (C836 + C835) + C838) * C48681) *
                C16515 +
            (C5831 * C16513 + C1057 * C48681) * C48712) *
               C48435 +
           ((C5830 * C16513 + C5832 * C48681) * C16515 +
            (C6632 * C16513 + (C1692 + C1693 - C1704 - C1705) * C48681) *
                C48712) *
               C48442 +
           ((C6631 * C16513 + (C1704 - (C1693 + C1692) + C1705) * C48681) *
                C16515 +
            ((C6633 - (C6622 + C6621) + C6634) * C16513 +
             ((C113 * C1805 + C48597 * C1810) * C825 -
              (C1528 * C48663 + C1529 * C824) +
              (C113 * C1811 + C48597 * C1814) * C48481) *
                 C48681) *
                C48712) *
               C3060) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[77] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C16513 +
             (C174 + C175) * C48681) *
                C16515 +
            ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
               C48740 -
           ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
               C48736 +
           (((C5212 + C5211) * C16513 + C5202 * C48681) * C16515 +
            ((C6087 + C6088) * C16513 + C6419 * C48681) * C48712) *
               C48726 -
           (((C6089 + C6090) * C48681 + (C6091 + C6092) * C16513) * C48712 +
            (C6420 * C48681 + (C6088 + C6087) * C16513) * C16515) *
               C48704) *
              C2788 +
          (((C5195 * C16513 + C5203 * C48681) * C16515 +
            (C5202 * C16513 + C392 * C48681) * C48712) *
               C48736 -
           ((C391 * C48681 + C5201 * C16513) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
               C48740 -
           (((C1532 + C1533) * C48681 + C6420 * C16513) * C48712 +
            (C5204 * C48681 + C5196 * C16513) * C16515) *
               C48726 +
           ((C6419 * C16513 + (C1533 + C1532) * C48681) * C16515 +
            ((C6090 + C6089) * C16513 +
             ((C113 * C1246 + C48597 * C1257) * C114 +
              (C113 * C1258 + C48597 * C1264) * C48394) *
                 C48681) *
                C48712) *
               C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C16513 +
             (C174 + C175) * C48681) *
                C16515 +
            ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
               C2680 -
           ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
               C48439) *
              C48739 +
          (((C5195 * C16513 + C5203 * C48681) * C16515 +
            (C5202 * C16513 + C392 * C48681) * C48712) *
               C48439 -
           ((C391 * C48681 + C5201 * C16513) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
               C2680) *
              C48732 +
          (((C184 * C16513 + (C179 + C178) * C48681) * C16515 +
            (C5203 * C16513 + C716 * C48681) * C48712) *
               C2680 -
           (((C389 + C390) * C48681 + C5204 * C16513) * C48712 +
            (C5489 * C48681 + C391 * C16513) * C16515) *
               C48439) *
              C48719 +
          (((C716 * C16513 + (C724 + C723) * C48681) * C16515 +
            ((C390 + C389) * C16513 + ((C113 * C311 + C48597 * C330) * C114 +
                                       (C113 * C331 + C48597 * C341) * C48394) *
                                          C48681) *
                C48712) *
               C48439 -
           (((C723 + C724) * C48681 + C5489 * C16513) * C48712 +
            ((C181 + C180) * C48681 + C185 * C16513) * C16515) *
               C2680) *
              C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C505 +
              (C113 * C123 + C48597 * C136) * C48734 -
              (C113 * C508 + C48597 * C518) * C506 -
              (C113 * C519 + C48597 * C538) * C48723 +
              (C113 * C509 + C48597 * C520) * C507 +
              (C113 * C521 + C48597 * C539) * C48697) *
                 C16513 +
             (C549 + C550 - C592 - C593 + C594 + C595) * C48681) *
                C16515 +
            ((C6247 + C6248 - C6249 - C6250 + C6281 + C6282) * C16513 +
             C8145 * C48681) *
                C48712) *
               C2680 +
           (((C6249 - (C6248 + C6247) + C6250 - C6281 - C6282) * C16513 +
             C8146 * C48681) *
                C16515 +
            ((C6283 - (C6257 + C6258) + C6284 - C6285 - C6286) * C16513 +
             (C6265 - (C6266 + C6267) + C6268 - C6287 - C6288) * C48681) *
                C48712) *
               C48439) *
              C2788 +
          ((((C592 - (C550 + C549) + C593 - C594 - C595) * C16513 +
             (C596 - (C560 + C559) + C597 - C598 - C599) * C48681) *
                C16515 +
            (C8146 * C16513 +
             (C2943 - (C2944 + C2945) + C2946 - C2947 - C2948) * C48681) *
                C48712) *
               C2680 +
           ((C8145 * C16513 +
             (C2945 + C2944 - C2943 - C2946 + C2947 + C2948) * C48681) *
                C16515 +
            ((C6267 + C6266 - C6265 - C6268 + C6287 + C6288) * C16513 +
             (C373 * C505 + C374 * C48734 - C1700 * C506 - C1701 * C48723 +
              (C113 * C1383 + C48597 * C1400) * C507 +
              (C113 * C1401 + C48597 * C1410) * C48697) *
                 C48681) *
                C48712) *
               C48439) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[78] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C824 +
              (C113 * C123 + C48597 * C136) * C48663 -
              (C113 * C508 + C48597 * C518) * C825 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C16513 +
             (C831 + C832 - C833 - C834) * C48681) *
                C16515 +
            ((C5814 + C5815 - C5828 - C5829) * C16513 + C5830 * C48681) *
                C48712) *
               C2680 +
           (((C5828 - (C5815 + C5814) + C5829) * C16513 + C5831 * C48681) *
                C16515 +
            ((C6615 - (C6616 + C6617) + C6618) * C16513 + C6631 * C48681) *
                C48712) *
               C48439) *
              C48355 +
          ((((C833 - (C832 + C831) + C834) * C16513 +
             (C837 - (C836 + C835) + C838) * C48681) *
                C16515 +
            (C5831 * C16513 + C1057 * C48681) * C48712) *
               C2680 +
           ((C5830 * C16513 + C5832 * C48681) * C16515 +
            (C6632 * C16513 + (C1692 + C1693 - C1704 - C1705) * C48681) *
                C48712) *
               C48439) *
              C48363 +
          (((C857 * C16513 + (C841 + C840 - C839 - C842) * C48681) * C16515 +
            (C5832 * C16513 + (C1037 + C1038 - C1054 - C1055) * C48681) *
                C48712) *
               C2680 +
           ((C1057 * C16513 + (C1054 - (C1038 + C1037) + C1055) * C48681) *
                C16515 +
            ((C1704 - (C1693 + C1692) + C1705) * C16513 +
             ((C113 * C1681 + C48597 * C1682) * C825 -
              (C377 * C48663 + C378 * C824) +
              (C113 * C1683 + C48597 * C1684) * C48481) *
                 C48681) *
                C48712) *
               C48439) *
              C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[79] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C16513 +
             (C174 + C175) * C48681) *
                C16515 +
            ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
               C2680 -
           ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
               C48439) *
              C48739 +
          (((C5195 * C16513 + C5203 * C48681) * C16515 +
            (C5202 * C16513 + C392 * C48681) * C48712) *
               C48439 -
           ((C391 * C48681 + C5201 * C16513) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
               C2680) *
              C48732 +
          (((C184 * C16513 + (C179 + C178) * C48681) * C16515 +
            (C5203 * C16513 + C716 * C48681) * C48712) *
               C2680 -
           (((C389 + C390) * C48681 + C5204 * C16513) * C48712 +
            (C5489 * C48681 + C391 * C16513) * C16515) *
               C48439) *
              C48719 +
          (((C716 * C16513 + (C724 + C723) * C48681) * C16515 +
            ((C390 + C389) * C16513 + ((C113 * C311 + C48597 * C330) * C114 +
                                       (C113 * C331 + C48597 * C341) * C48394) *
                                          C48681) *
                C48712) *
               C48439 -
           (((C723 + C724) * C48681 + C5489 * C16513) * C48712 +
            ((C181 + C180) * C48681 + C185 * C16513) * C16515) *
               C2680) *
              C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C16513 +
             (C174 + C175) * C48681) *
                C16515 +
            ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
               C48740 -
           ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
               C48736 +
           (((C5212 + C5211) * C16513 + C5202 * C48681) * C16515 +
            ((C6087 + C6088) * C16513 + C6419 * C48681) * C48712) *
               C48726 -
           (((C6089 + C6090) * C48681 + (C6091 + C6092) * C16513) * C48712 +
            (C6420 * C48681 + (C6088 + C6087) * C16513) * C16515) *
               C48704) *
              C2788 +
          (((C5195 * C16513 + C5203 * C48681) * C16515 +
            (C5202 * C16513 + C392 * C48681) * C48712) *
               C48736 -
           ((C391 * C48681 + C5201 * C16513) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
               C48740 -
           (((C1532 + C1533) * C48681 + C6420 * C16513) * C48712 +
            (C5204 * C48681 + C5196 * C16513) * C16515) *
               C48726 +
           ((C6419 * C16513 + (C1533 + C1532) * C48681) * C16515 +
            ((C6090 + C6089) * C16513 +
             ((C113 * C1246 + C48597 * C1257) * C114 +
              (C113 * C1258 + C48597 * C1264) * C48394) *
                 C48681) *
                C48712) *
               C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[80] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C3456 +
              (C113 * C123 + C48597 * C136) * C3454 -
              (C113 * C508 + C48597 * C518) * C3457 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C16513 +
             (C3459 + C3460 - C3461 - C3462) * C48681) *
                C16515 +
            ((C9005 + C9006 - C9007 - C9008) * C16513 + C9025 * C48681) *
                C48712) *
               C48435 +
           (((C9007 - (C9006 + C9005) + C9008) * C16513 + C9026 * C48681) *
                C16515 +
            ((C9011 - (C9012 + C9013) + C9014) * C16513 + C9027 * C48681) *
                C48712) *
               C48442 +
           (((C9013 + C9012 - C9011 - C9014) * C16513 + C9028 * C48681) *
                C16515 +
            ((C10050 + C10051 - C10052 - C10053) * C16513 +
             (C9017 + C9018 - C9019 - C9020) * C48681) *
                C48712) *
               C3060) *
              C48648 +
          ((((C3461 - (C3460 + C3459) + C3462) * C16513 +
             (C3465 - (C3464 + C3463) + C3466) * C48681) *
                C16515 +
            (C9026 * C16513 + C3917 * C48681) * C48712) *
               C48435 +
           ((C9025 * C16513 + C9363 * C48681) * C16515 +
            (C9028 * C16513 + (C3639 + C3640 - C3641 - C3642) * C48681) *
                C48712) *
               C48442 +
           ((C9027 * C16513 + (C3641 - (C3640 + C3639) + C3642) * C48681) *
                C16515 +
            ((C9019 - (C9018 + C9017) + C9020) * C16513 +
             ((C113 * C1805 + C48597 * C1810) * C3457 -
              (C1528 * C3454 + C1529 * C3456) +
              (C113 * C1811 + C48597 * C1814) * C48481) *
                 C48681) *
                C48712) *
               C3060) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[81] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C47163 +
             (C113 * C123 + C48597 * C136) * C48477 -
             (C113 * C508 + C48597 * C518) * C47155 -
             (C113 * C519 + C48597 * C538) * C48484 +
             (C113 * C509 + C48597 * C520) * C47169 +
             (C113 * C521 + C48597 * C539) * C4029) *
                C16513 +
            (C4034 + C4035 - C4036 - C4037 + C4038 + C4039) * C48681) *
               C16515 +
           ((C9704 + C9705 - C9706 - C9707 + C9708 + C9709) * C16513 +
            C9724 * C48681) *
               C48712) *
              C48435 +
          (((C9706 - (C9705 + C9704) + C9707 - C9708 - C9709) * C16513 +
            C9725 * C48681) *
               C16515 +
           ((C10726 - (C10727 + C10728) + C10729 - C10730 - C10731) * C16513 +
            (C9712 - (C9713 + C9714) + C9715 - C9716 - C9717) * C48681) *
               C48712) *
              C48442 +
          (((C10728 + C10727 - C10726 - C10729 + C10730 + C10731) * C16513 +
            (C9714 + C9713 - C9712 - C9715 + C9716 + C9717) * C48681) *
               C16515 +
           ((C6081 * C47163 + C6082 * C48477 - C6779 * C47155 - C6780 * C48484 +
             (C113 * C6238 + C48597 * C6240) * C47169 +
             (C113 * C6241 + C48597 * C6244) * C4029) *
                C16513 +
            (C1531 * C47163 + C1530 * C48477 - C6629 * C47155 - C6630 * C48484 +
             (C113 * C6239 + C48597 * C6242) * C47169 +
             (C113 * C6243 + C48597 * C6245) * C4029) *
                C48681) *
               C48712) *
              C3060) *
         C48350) /
        (p * q * std::sqrt(p + q));
    d2ee[82] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C3456 +
             (C113 * C123 + C48597 * C136) * C3454 -
             (C113 * C508 + C48597 * C518) * C3457 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C16513 +
            (C3459 + C3460 - C3461 - C3462) * C48681) *
               C16515 +
           ((C9005 + C9006 - C9007 - C9008) * C16513 + C9025 * C48681) *
               C48712) *
              C48740 +
          (((C9007 - (C9006 + C9005) + C9008) * C16513 + C9026 * C48681) *
               C16515 +
           ((C9011 - (C9012 + C9013) + C9014) * C16513 + C9027 * C48681) *
               C48712) *
              C48736 +
          (((C9013 + C9012 - C9011 - C9014) * C16513 + C9028 * C48681) *
               C16515 +
           ((C10050 + C10051 - C10052 - C10053) * C16513 +
            (C9017 + C9018 - C9019 - C9020) * C48681) *
               C48712) *
              C48726 +
          (((C10052 - (C10051 + C10050) + C10053) * C16513 +
            (C9019 - (C9018 + C9017) + C9020) * C48681) *
               C16515 +
           (((C113 * C6764 + C48597 * C6766) * C3457 -
             (C6085 * C3454 + C6086 * C3456) +
             (C113 * C6767 + C48597 * C6770) * C48481) *
                C16513 +
            ((C113 * C6765 + C48597 * C6768) * C3457 -
             (C6083 * C3454 + C6084 * C3456) +
             (C113 * C6769 + C48597 * C6771) * C48481) *
                C48681) *
               C48712) *
              C48704) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C3456 +
              (C113 * C123 + C48597 * C136) * C3454 -
              (C113 * C508 + C48597 * C518) * C3457 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C16513 +
             (C3459 + C3460 - C3461 - C3462) * C48681) *
                C16515 +
            ((C9005 + C9006 - C9007 - C9008) * C16513 + C9025 * C48681) *
                C48712) *
               C2680 +
           (((C9007 - (C9006 + C9005) + C9008) * C16513 + C9026 * C48681) *
                C16515 +
            ((C9011 - (C9012 + C9013) + C9014) * C16513 + C9027 * C48681) *
                C48712) *
               C48439) *
              C48730 +
          ((((C3461 - (C3460 + C3459) + C3462) * C16513 +
             (C3465 - (C3464 + C3463) + C3466) * C48681) *
                C16515 +
            (C9026 * C16513 + C3917 * C48681) * C48712) *
               C2680 +
           ((C9025 * C16513 + C9363 * C48681) * C16515 +
            (C9028 * C16513 + (C3639 + C3640 - C3641 - C3642) * C48681) *
                C48712) *
               C48439) *
              C48717 +
          (((C3479 * C16513 + (C3469 + C3468 - C3467 - C3470) * C48681) *
                C16515 +
            (C9363 * C16513 + (C3912 + C3913 - C3914 - C3915) * C48681) *
                C48712) *
               C2680 +
           ((C3917 * C16513 + (C3914 - (C3913 + C3912) + C3915) * C48681) *
                C16515 +
            ((C3641 - (C3640 + C3639) + C3642) * C16513 +
             ((C113 * C1681 + C48597 * C1682) * C3457 -
              (C377 * C3454 + C378 * C3456) +
              (C113 * C1683 + C48597 * C1684) * C48481) *
                 C48681) *
                C48712) *
               C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C3744 +
             (C113 * C123 + C48597 * C136) * C48741 -
             (C113 * C508 + C48597 * C518) * C3745 -
             (C113 * C519 + C48597 * C538) * C48738 +
             (C113 * C509 + C48597 * C520) * C3746 +
             (C113 * C521 + C48597 * C539) * C48729 -
             (C113 * C2136 + C48597 * C2142) * C3747 -
             (C113 * C2143 + C48597 * C2154) * C48710) *
                C16513 +
            (C3749 + C3750 - C3751 - C3752 + C3753 + C3754 - C3755 - C3756) *
                C48681) *
               C16515 +
           ((C10184 + C10185 - C10186 - C10187 + C10188 + C10189 - C10190 -
             C10191) *
                C16513 +
            (C9159 + C9160 - C9161 - C9162 + C9163 + C9164 - C9165 - C9166) *
                C48681) *
               C48712) *
              C2680 +
          (((C10186 - (C10185 + C10184) + C10187 - C10188 - C10189 + C10190 +
             C10191) *
                C16513 +
            (C9161 - (C9160 + C9159) + C9162 - C9163 - C9164 + C9165 + C9166) *
                C48681) *
               C16515 +
           ((C6275 * C3745 - (C5207 * C48741 + C5208 * C3744) + C6276 * C48738 -
             C6277 * C3746 - C6278 * C48729 +
             (C113 * C7660 + C48597 * C7662) * C3747 +
             (C113 * C7663 + C48597 * C7666) * C48710) *
                C16513 +
            (C1698 * C3745 - (C372 * C48741 + C371 * C3744) + C1699 * C48738 -
             C6279 * C3746 - C6280 * C48729 +
             (C113 * C7661 + C48597 * C7664) * C3747 +
             (C113 * C7665 + C48597 * C7667) * C48710) *
                C48681) *
               C48712) *
              C48439) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[83] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C47163 +
              (C113 * C123 + C48597 * C136) * C48477 -
              (C113 * C508 + C48597 * C518) * C47155 -
              (C113 * C519 + C48597 * C538) * C48484 +
              (C113 * C509 + C48597 * C520) * C47169 +
              (C113 * C521 + C48597 * C539) * C4029) *
                 C16513 +
             (C4034 + C4035 - C4036 - C4037 + C4038 + C4039) * C48681) *
                C16515 +
            ((C9704 + C9705 - C9706 - C9707 + C9708 + C9709) * C16513 +
             C9724 * C48681) *
                C48712) *
               C2680 +
           (((C9706 - (C9705 + C9704) + C9707 - C9708 - C9709) * C16513 +
             C9725 * C48681) *
                C16515 +
            ((C10726 - (C10727 + C10728) + C10729 - C10730 - C10731) * C16513 +
             (C9712 - (C9713 + C9714) + C9715 - C9716 - C9717) * C48681) *
                C48712) *
               C48439) *
              C48648 +
          ((((C4036 - (C4035 + C4034) + C4037 - C4038 - C4039) * C16513 +
             (C4042 - (C4041 + C4040) + C4043 - C4044 - C4045) * C48681) *
                C16515 +
            (C9725 * C16513 +
             (C4209 - (C4210 + C4211) + C4212 - C4213 - C4214) * C48681) *
                C48712) *
               C2680 +
           ((C9724 * C16513 +
             (C4211 + C4210 - C4209 - C4212 + C4213 + C4214) * C48681) *
                C16515 +
            ((C9714 + C9713 - C9712 - C9715 + C9716 + C9717) * C16513 +
             (C373 * C47163 + C374 * C48477 - C1700 * C47155 - C1701 * C48484 +
              (C113 * C1383 + C48597 * C1400) * C47169 +
              (C113 * C1401 + C48597 * C1410) * C4029) *
                 C48681) *
                C48712) *
               C48439) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[84] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C3456 +
              (C113 * C123 + C48597 * C136) * C3454 -
              (C113 * C508 + C48597 * C518) * C3457 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C16513 +
             (C3459 + C3460 - C3461 - C3462) * C48681) *
                C16515 +
            ((C9005 + C9006 - C9007 - C9008) * C16513 + C9025 * C48681) *
                C48712) *
               C2680 +
           (((C9007 - (C9006 + C9005) + C9008) * C16513 + C9026 * C48681) *
                C16515 +
            ((C9011 - (C9012 + C9013) + C9014) * C16513 + C9027 * C48681) *
                C48712) *
               C48439) *
              C48730 +
          ((((C3461 - (C3460 + C3459) + C3462) * C16513 +
             (C3465 - (C3464 + C3463) + C3466) * C48681) *
                C16515 +
            (C9026 * C16513 + C3917 * C48681) * C48712) *
               C2680 +
           ((C9025 * C16513 + C9363 * C48681) * C16515 +
            (C9028 * C16513 + (C3639 + C3640 - C3641 - C3642) * C48681) *
                C48712) *
               C48439) *
              C48717 +
          (((C3479 * C16513 + (C3469 + C3468 - C3467 - C3470) * C48681) *
                C16515 +
            (C9363 * C16513 + (C3912 + C3913 - C3914 - C3915) * C48681) *
                C48712) *
               C2680 +
           ((C3917 * C16513 + (C3914 - (C3913 + C3912) + C3915) * C48681) *
                C16515 +
            ((C3641 - (C3640 + C3639) + C3642) * C16513 +
             ((C113 * C1681 + C48597 * C1682) * C3457 -
              (C377 * C3454 + C378 * C3456) +
              (C113 * C1683 + C48597 * C1684) * C48481) *
                 C48681) *
                C48712) *
               C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C3456 +
             (C113 * C123 + C48597 * C136) * C3454 -
             (C113 * C508 + C48597 * C518) * C3457 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C16513 +
            (C3459 + C3460 - C3461 - C3462) * C48681) *
               C16515 +
           ((C9005 + C9006 - C9007 - C9008) * C16513 + C9025 * C48681) *
               C48712) *
              C48740 +
          (((C9007 - (C9006 + C9005) + C9008) * C16513 + C9026 * C48681) *
               C16515 +
           ((C9011 - (C9012 + C9013) + C9014) * C16513 + C9027 * C48681) *
               C48712) *
              C48736 +
          (((C9013 + C9012 - C9011 - C9014) * C16513 + C9028 * C48681) *
               C16515 +
           ((C10050 + C10051 - C10052 - C10053) * C16513 +
            (C9017 + C9018 - C9019 - C9020) * C48681) *
               C48712) *
              C48726 +
          (((C10052 - (C10051 + C10050) + C10053) * C16513 +
            (C9019 - (C9018 + C9017) + C9020) * C48681) *
               C16515 +
           (((C113 * C6764 + C48597 * C6766) * C3457 -
             (C6085 * C3454 + C6086 * C3456) +
             (C113 * C6767 + C48597 * C6770) * C48481) *
                C16513 +
            ((C113 * C6765 + C48597 * C6768) * C3457 -
             (C6083 * C3454 + C6084 * C3456) +
             (C113 * C6769 + C48597 * C6771) * C48481) *
                C48681) *
               C48712) *
              C48704) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[85] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C16513 +
             (C174 + C175) * C48681) *
                C16515 +
            ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
               C1509 -
           ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
               C1510 +
           (((C5212 + C5211) * C16513 + C5202 * C48681) * C16515 +
            ((C6087 + C6088) * C16513 + C6419 * C48681) * C48712) *
               C1511 -
           (((C6089 + C6090) * C48681 + (C6091 + C6092) * C16513) * C48712 +
            (C6420 * C48681 + (C6088 + C6087) * C16513) * C16515) *
               C48704) *
              C48648 +
          (((C5195 * C16513 + C5203 * C48681) * C16515 +
            (C5202 * C16513 + C392 * C48681) * C48712) *
               C1510 -
           ((C391 * C48681 + C5201 * C16513) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
               C1509 -
           (((C1532 + C1533) * C48681 + C6420 * C16513) * C48712 +
            (C5204 * C48681 + C5196 * C16513) * C16515) *
               C1511 +
           ((C6419 * C16513 + (C1533 + C1532) * C48681) * C16515 +
            ((C6090 + C6089) * C16513 +
             ((C113 * C1246 + C48597 * C1257) * C114 +
              (C113 * C1258 + C48597 * C1264) * C48394) *
                 C48681) *
                C48712) *
               C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C16513 +
             (C174 + C175) * C48681) *
                C16515 +
            ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
               C48662 -
           ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
               C48439) *
              C707 +
          (((C5195 * C16513 + C5203 * C48681) * C16515 +
            (C5202 * C16513 + C392 * C48681) * C48712) *
               C48439 -
           ((C391 * C48681 + C5201 * C16513) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
               C48662) *
              C708 +
          (((C184 * C16513 + (C179 + C178) * C48681) * C16515 +
            (C5203 * C16513 + C716 * C48681) * C48712) *
               C48662 -
           (((C389 + C390) * C48681 + C5204 * C16513) * C48712 +
            (C5489 * C48681 + C391 * C16513) * C16515) *
               C48439) *
              C709 +
          (((C716 * C16513 + (C724 + C723) * C48681) * C16515 +
            ((C390 + C389) * C16513 + ((C113 * C311 + C48597 * C330) * C114 +
                                       (C113 * C331 + C48597 * C341) * C48394) *
                                          C48681) *
                C48712) *
               C48439 -
           (((C723 + C724) * C48681 + C5489 * C16513) * C48712 +
            ((C181 + C180) * C48681 + C185 * C16513) * C16515) *
               C48662) *
              C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C1928 +
              (C113 * C123 + C48597 * C136) * C1925 -
              (C113 * C508 + C48597 * C518) * C1929 -
              (C113 * C519 + C48597 * C538) * C1926 +
              (C113 * C509 + C48597 * C520) * C1930 +
              (C113 * C521 + C48597 * C539) * C48697) *
                 C16513 +
             (C1932 + C1933 - C1934 - C1935 + C1936 + C1937) * C48681) *
                C16515 +
            ((C7075 + C7076 - C7077 - C7078 + C7079 + C7080) * C16513 +
             C7385 * C48681) *
                C48712) *
               C48662 +
           (((C7077 - (C7076 + C7075) + C7078 - C7079 - C7080) * C16513 +
             C7386 * C48681) *
                C16515 +
            ((C7081 - (C7082 + C7083) + C7084 - C7085 - C7086) * C16513 +
             (C7087 - (C7088 + C7089) + C7090 - C7091 - C7092) * C48681) *
                C48712) *
               C48439) *
              C48648 +
          ((((C1934 - (C1933 + C1932) + C1935 - C1936 - C1937) * C16513 +
             (C1940 - (C1939 + C1938) + C1941 - C1942 - C1943) * C48681) *
                C16515 +
            (C7386 * C16513 +
             (C2319 - (C2320 + C2321) + C2322 - C2333 - C2334) * C48681) *
                C48712) *
               C48662 +
           ((C7385 * C16513 +
             (C2321 + C2320 - C2319 - C2322 + C2333 + C2334) * C48681) *
                C16515 +
            ((C7089 + C7088 - C7087 - C7090 + C7091 + C7092) * C16513 +
             (C373 * C1928 + C374 * C1925 - C1700 * C1929 - C1701 * C1926 +
              (C113 * C1383 + C48597 * C1400) * C1930 +
              (C113 * C1401 + C48597 * C1410) * C48697) *
                 C48681) *
                C48712) *
               C48439) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[86] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C824 +
             (C113 * C123 + C48597 * C136) * C48663 -
             (C113 * C508 + C48597 * C518) * C825 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C16513 +
            (C831 + C832 - C833 - C834) * C48681) *
               C16515 +
           ((C5814 + C5815 - C5828 - C5829) * C16513 + C5830 * C48681) *
               C48712) *
              C1509 +
          (((C5828 - (C5815 + C5814) + C5829) * C16513 + C5831 * C48681) *
               C16515 +
           ((C6615 - (C6616 + C6617) + C6618) * C16513 + C6631 * C48681) *
               C48712) *
              C1510 +
          (((C6617 + C6616 - C6615 - C6618) * C16513 + C6632 * C48681) *
               C16515 +
           ((C6773 + C6774 - C6781 - C6782) * C16513 +
            (C6621 + C6622 - C6633 - C6634) * C48681) *
               C48712) *
              C1511 +
          (((C6781 - (C6774 + C6773) + C6782) * C16513 +
            (C6633 - (C6622 + C6621) + C6634) * C48681) *
               C16515 +
           (((C113 * C6764 + C48597 * C6766) * C825 -
             (C6085 * C48663 + C6086 * C824) +
             (C113 * C6767 + C48597 * C6770) * C48481) *
                C16513 +
            ((C113 * C6765 + C48597 * C6768) * C825 -
             (C6083 * C48663 + C6084 * C824) +
             (C113 * C6769 + C48597 * C6771) * C48481) *
                C48681) *
               C48712) *
              C48704) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C824 +
              (C113 * C123 + C48597 * C136) * C48663 -
              (C113 * C508 + C48597 * C518) * C825 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C16513 +
             (C831 + C832 - C833 - C834) * C48681) *
                C16515 +
            ((C5814 + C5815 - C5828 - C5829) * C16513 + C5830 * C48681) *
                C48712) *
               C48662 +
           (((C5828 - (C5815 + C5814) + C5829) * C16513 + C5831 * C48681) *
                C16515 +
            ((C6615 - (C6616 + C6617) + C6618) * C16513 + C6631 * C48681) *
                C48712) *
               C48439) *
              C299 +
          ((((C833 - (C832 + C831) + C834) * C16513 +
             (C837 - (C836 + C835) + C838) * C48681) *
                C16515 +
            (C5831 * C16513 + C1057 * C48681) * C48712) *
               C48662 +
           ((C5830 * C16513 + C5832 * C48681) * C16515 +
            (C6632 * C16513 + (C1692 + C1693 - C1704 - C1705) * C48681) *
                C48712) *
               C48439) *
              C300 +
          (((C857 * C16513 + (C841 + C840 - C839 - C842) * C48681) * C16515 +
            (C5832 * C16513 + (C1037 + C1038 - C1054 - C1055) * C48681) *
                C48712) *
               C48662 +
           ((C1057 * C16513 + (C1054 - (C1038 + C1037) + C1055) * C48681) *
                C16515 +
            ((C1704 - (C1693 + C1692) + C1705) * C16513 +
             ((C113 * C1681 + C48597 * C1682) * C825 -
              (C377 * C48663 + C378 * C824) +
              (C113 * C1683 + C48597 * C1684) * C48481) *
                 C48681) *
                C48712) *
               C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C2436 +
             (C113 * C123 + C48597 * C136) * C2432 -
             (C113 * C508 + C48597 * C518) * C2437 -
             (C113 * C519 + C48597 * C538) * C2433 +
             (C113 * C509 + C48597 * C520) * C2438 +
             (C113 * C521 + C48597 * C539) * C2434 -
             (C113 * C2136 + C48597 * C2142) * C2439 -
             (C113 * C2143 + C48597 * C2154) * C48710) *
                C16513 +
            (C2445 + C2446 - C2447 - C2448 + C2449 + C2450 - C2469 - C2470) *
                C48681) *
               C16515 +
           ((C7669 + C7670 - C7671 - C7672 + C7673 + C7674 - C7681 - C7682) *
                C16513 +
            (C7517 + C7518 - C7519 - C7520 + C7521 + C7522 - C7529 - C7530) *
                C48681) *
               C48712) *
              C48662 +
          (((C7671 - (C7670 + C7669) + C7672 - C7673 - C7674 + C7681 + C7682) *
                C16513 +
            (C7519 - (C7518 + C7517) + C7520 - C7521 - C7522 + C7529 + C7530) *
                C48681) *
               C16515 +
           ((C6275 * C2437 - (C5207 * C2432 + C5208 * C2436) + C6276 * C2433 -
             C6277 * C2438 - C6278 * C2434 +
             (C113 * C7660 + C48597 * C7662) * C2439 +
             (C113 * C7663 + C48597 * C7666) * C48710) *
                C16513 +
            (C1698 * C2437 - (C372 * C2432 + C371 * C2436) + C1699 * C2433 -
             C6279 * C2438 - C6280 * C2434 +
             (C113 * C7661 + C48597 * C7664) * C2439 +
             (C113 * C7665 + C48597 * C7667) * C48710) *
                C48681) *
               C48712) *
              C48439) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[87] +=
        (0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48597 * C122) * C114 +
                 (C113 * C123 + C48597 * C136) * C48394) *
                    C16513 +
                (C174 + C175) * C48681) *
                   C16515 +
               ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
                  C48377 * C108 -
              ((C391 * C48681 + C5201 * C16513) * C48712 +
               ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
                  C48377 * C109 +
              ((C184 * C16513 + (C179 + C178) * C48681) * C16515 +
               (C5203 * C16513 + C716 * C48681) * C48712) *
                  C48377 * C110 -
              (((C723 + C724) * C48681 + C5489 * C16513) * C48712 +
               ((C181 + C180) * C48681 + C185 * C16513) * C16515) *
                  C48377 * C111 +
              ((C186 * C16513 + (C183 + C182) * C48681) * C16515 +
               ((C724 + C723) * C16513 +
                ((C113 * C711 + C48597 * C712) * C114 +
                 (C113 * C713 + C48597 * C714) * C48394) *
                    C48681) *
                   C48712) *
                  C48377 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             ((((((C113 * C115 + C48597 * C122) * C114 +
                  (C113 * C123 + C48597 * C136) * C48394) *
                     C16513 +
                 (C174 + C175) * C48681) *
                    C16515 +
                ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
                   C48733 -
               ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
                (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
                   C48721 +
               (((C5212 + C5211) * C16513 + C5202 * C48681) * C16515 +
                ((C6087 + C6088) * C16513 + C6419 * C48681) * C48712) *
                   C48694) *
                  C299 +
              (((C5195 * C16513 + C5203 * C48681) * C16515 +
                (C5202 * C16513 + C392 * C48681) * C48712) *
                   C48721 -
               ((C391 * C48681 + C5201 * C16513) * C48712 +
                ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
                   C48733 -
               (((C1532 + C1533) * C48681 + C6420 * C16513) * C48712 +
                (C5204 * C48681 + C5196 * C16513) * C16515) *
                   C48694) *
                  C300 +
              (((C184 * C16513 + (C179 + C178) * C48681) * C16515 +
                (C5203 * C16513 + C716 * C48681) * C48712) *
                   C48733 -
               (((C389 + C390) * C48681 + C5204 * C16513) * C48712 +
                (C5489 * C48681 + C391 * C16513) * C16515) *
                   C48721 +
               ((C392 * C16513 + (C390 + C389) * C48681) * C16515 +
                ((C1533 + C1532) * C16513 +
                 ((C113 * C1515 + C48597 * C1516) * C114 +
                  (C113 * C1517 + C48597 * C1518) * C48394) *
                     C48681) *
                    C48712) *
                   C48694) *
                  C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C505 +
             (C113 * C123 + C48597 * C136) * C48734 -
             (C113 * C508 + C48597 * C518) * C506 -
             (C113 * C519 + C48597 * C538) * C48723 +
             (C113 * C509 + C48597 * C520) * C507 +
             (C113 * C521 + C48597 * C539) * C48697) *
                C16513 +
            (C549 + C550 - C592 - C593 + C594 + C595) * C48681) *
               C16515 +
           ((C6247 + C6248 - C6249 - C6250 + C6281 + C6282) * C16513 +
            C8145 * C48681) *
               C48712) *
              C48377 * C299 +
          (((C592 - (C550 + C549) + C593 - C594 - C595) * C16513 +
            (C596 - (C560 + C559) + C597 - C598 - C599) * C48681) *
               C16515 +
           (C8146 * C16513 +
            (C2943 - (C2944 + C2945) + C2946 - C2947 - C2948) * C48681) *
               C48712) *
              C48377 * C300 +
          ((C607 * C16513 +
            (C572 + C571 - C600 - C601 + C602 + C603) * C48681) *
               C16515 +
           ((C2945 + C2944 - C2943 - C2946 + C2947 + C2948) * C16513 +
            (C375 * C505 + C376 * C48734 - C1048 * C506 - C1049 * C48723 +
             (C113 * C2306 + C48597 * C2307) * C507 +
             (C113 * C2308 + C48597 * C2309) * C48697) *
                C48681) *
               C48712) *
              C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C16513 +
             (C174 + C175) * C48681) *
                C16515 +
            ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
               C1167 -
           ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
               C1168 +
           (((C5212 + C5211) * C16513 + C5202 * C48681) * C16515 +
            ((C6087 + C6088) * C16513 + C6419 * C48681) * C48712) *
               C48694) *
              C48730 +
          (((C5195 * C16513 + C5203 * C48681) * C16515 +
            (C5202 * C16513 + C392 * C48681) * C48712) *
               C1168 -
           ((C391 * C48681 + C5201 * C16513) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
               C1167 -
           (((C1532 + C1533) * C48681 + C6420 * C16513) * C48712 +
            (C5204 * C48681 + C5196 * C16513) * C16515) *
               C48694) *
              C48717 +
          (((C184 * C16513 + (C179 + C178) * C48681) * C16515 +
            (C5203 * C16513 + C716 * C48681) * C48712) *
               C1167 -
           (((C389 + C390) * C48681 + C5204 * C16513) * C48712 +
            (C5489 * C48681 + C391 * C16513) * C16515) *
               C1168 +
           ((C392 * C16513 + (C390 + C389) * C48681) * C16515 +
            ((C1533 + C1532) * C16513 +
             ((C113 * C1515 + C48597 * C1516) * C114 +
              (C113 * C1517 + C48597 * C1518) * C48394) *
                 C48681) *
                C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C16513 +
            (C174 + C175) * C48681) *
               C16515 +
           ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
              C1235 -
          ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
           (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
              C1236 +
          (((C5212 + C5211) * C16513 + C5202 * C48681) * C16515 +
           ((C6087 + C6088) * C16513 + C6419 * C48681) * C48712) *
              C1237 -
          (((C6089 + C6090) * C48681 + (C6091 + C6092) * C16513) * C48712 +
           (C6420 * C48681 + (C6088 + C6087) * C16513) * C16515) *
              C1238 +
          (((C6092 + C6091) * C16513 + (C6090 + C6089) * C48681) * C16515 +
           (((C113 * C6060 + C48597 * C6062) * C114 +
             (C113 * C6063 + C48597 * C6066) * C48394) *
                C16513 +
            ((C113 * C6061 + C48597 * C6064) * C114 +
             (C113 * C6065 + C48597 * C6067) * C48394) *
                C48681) *
               C48712) *
              C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C505 +
             (C113 * C123 + C48597 * C136) * C48734 -
             (C113 * C508 + C48597 * C518) * C506 -
             (C113 * C519 + C48597 * C538) * C48723 +
             (C113 * C509 + C48597 * C520) * C507 +
             (C113 * C521 + C48597 * C539) * C48697) *
                C16513 +
            (C549 + C550 - C592 - C593 + C594 + C595) * C48681) *
               C16515 +
           ((C6247 + C6248 - C6249 - C6250 + C6281 + C6282) * C16513 +
            C8145 * C48681) *
               C48712) *
              C1167 +
          (((C6249 - (C6248 + C6247) + C6250 - C6281 - C6282) * C16513 +
            C8146 * C48681) *
               C16515 +
           ((C6283 - (C6257 + C6258) + C6284 - C6285 - C6286) * C16513 +
            (C6265 - (C6266 + C6267) + C6268 - C6287 - C6288) * C48681) *
               C48712) *
              C1168 +
          (((C6258 + C6257 - C6283 - C6284 + C6285 + C6286) * C16513 +
            (C6267 + C6266 - C6265 - C6268 + C6287 + C6288) * C48681) *
               C16515 +
           ((C6081 * C505 + C6082 * C48734 - C6779 * C506 - C6780 * C48723 +
             (C113 * C6238 + C48597 * C6240) * C507 +
             (C113 * C6241 + C48597 * C6244) * C48697) *
                C16513 +
            (C1531 * C505 + C1530 * C48734 - C6629 * C506 - C6630 * C48723 +
             (C113 * C6239 + C48597 * C6242) * C507 +
             (C113 * C6243 + C48597 * C6245) * C48697) *
                C48681) *
               C48712) *
              C48694) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C1928 +
             (C113 * C123 + C48597 * C136) * C1925 -
             (C113 * C508 + C48597 * C518) * C1929 -
             (C113 * C519 + C48597 * C538) * C1926 +
             (C113 * C509 + C48597 * C520) * C1930 +
             (C113 * C521 + C48597 * C539) * C48697) *
                C16513 +
            (C1932 + C1933 - C1934 - C1935 + C1936 + C1937) * C48681) *
               C16515 +
           ((C7075 + C7076 - C7077 - C7078 + C7079 + C7080) * C16513 +
            C7385 * C48681) *
               C48712) *
              C48377 * C48730 +
          (((C1934 - (C1933 + C1932) + C1935 - C1936 - C1937) * C16513 +
            (C1940 - (C1939 + C1938) + C1941 - C1942 - C1943) * C48681) *
               C16515 +
           (C7386 * C16513 +
            (C2319 - (C2320 + C2321) + C2322 - C2333 - C2334) * C48681) *
               C48712) *
              C48377 * C48717 +
          ((C1954 * C16513 +
            (C1946 + C1945 - C1944 - C1947 + C1948 + C1949) * C48681) *
               C16515 +
           ((C2321 + C2320 - C2319 - C2322 + C2333 + C2334) * C16513 +
            (C375 * C1928 + C376 * C1925 - C1048 * C1929 - C1049 * C1926 +
             (C113 * C2306 + C48597 * C2307) * C1930 +
             (C113 * C2308 + C48597 * C2309) * C48697) *
                C48681) *
               C48712) *
              C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C1928 +
             (C113 * C123 + C48597 * C136) * C1925 -
             (C113 * C508 + C48597 * C518) * C1929 -
             (C113 * C519 + C48597 * C538) * C1926 +
             (C113 * C509 + C48597 * C520) * C1930 +
             (C113 * C521 + C48597 * C539) * C48697) *
                C16513 +
            (C1932 + C1933 - C1934 - C1935 + C1936 + C1937) * C48681) *
               C16515 +
           ((C7075 + C7076 - C7077 - C7078 + C7079 + C7080) * C16513 +
            C7385 * C48681) *
               C48712) *
              C48733 +
          (((C7077 - (C7076 + C7075) + C7078 - C7079 - C7080) * C16513 +
            C7386 * C48681) *
               C16515 +
           ((C7081 - (C7082 + C7083) + C7084 - C7085 - C7086) * C16513 +
            (C7087 - (C7088 + C7089) + C7090 - C7091 - C7092) * C48681) *
               C48712) *
              C48721 +
          (((C7083 + C7082 - C7081 - C7084 + C7085 + C7086) * C16513 +
            (C7089 + C7088 - C7087 - C7090 + C7091 + C7092) * C48681) *
               C16515 +
           ((C6081 * C1928 + C6082 * C1925 - C6779 * C1929 - C6780 * C1926 +
             (C113 * C6238 + C48597 * C6240) * C1930 +
             (C113 * C6241 + C48597 * C6244) * C48697) *
                C16513 +
            (C1531 * C1928 + C1530 * C1925 - C6629 * C1929 - C6630 * C1926 +
             (C113 * C6239 + C48597 * C6242) * C1930 +
             (C113 * C6243 + C48597 * C6245) * C48697) *
                C48681) *
               C48712) *
              C48694) *
         C48350) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C2131 +
            (C113 * C123 + C48597 * C136) * C2126 -
            (C113 * C508 + C48597 * C518) * C2132 -
            (C113 * C519 + C48597 * C538) * C2127 +
            (C113 * C509 + C48597 * C520) * C2133 +
            (C113 * C521 + C48597 * C539) * C2128 -
            (C113 * C2136 + C48597 * C2142) * C2134 -
            (C113 * C2143 + C48597 * C2154) * C2129 +
            (C113 * C2137 + C48597 * C2144) * C2135 +
            (C113 * C2145 + C48597 * C2155) * C2130) *
               C16513 +
           (C164 * C2131 + C165 * C2126 - C579 * C2132 - C580 * C2127 +
            C581 * C2133 + C582 * C2128 - C2465 * C2134 - C2466 * C2129 +
            (C113 * C2139 + C48597 * C2148) * C2135 +
            (C113 * C2149 + C48597 * C2157) * C2130) *
               C48681) *
              C16515 +
          ((C5205 * C2131 + C5206 * C2126 - C5823 * C2132 - C5824 * C2127 +
            C6273 * C2133 + C6274 * C2128 - C7679 * C2134 - C7680 * C2129 +
            (C113 * C7174 + C48597 * C7176) * C2135 +
            (C113 * C7177 + C48597 * C7180) * C2130) *
               C16513 +
           (C370 * C2131 + C369 * C2126 - C1043 * C2132 - C1044 * C2127 +
            C2327 * C2133 + C2328 * C2128 - C7527 * C2134 - C7528 * C2129 +
            (C113 * C7175 + C48597 * C7178) * C2135 +
            (C113 * C7179 + C48597 * C7181) * C2130) *
               C48681) *
              C48712) *
         C48377 * C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[88] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C824 +
              (C113 * C123 + C48597 * C136) * C48663 -
              (C113 * C508 + C48597 * C518) * C825 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C16513 +
             (C831 + C832 - C833 - C834) * C48681) *
                C16515 +
            ((C5814 + C5815 - C5828 - C5829) * C16513 + C5830 * C48681) *
                C48712) *
               C1167 +
           (((C5828 - (C5815 + C5814) + C5829) * C16513 + C5831 * C48681) *
                C16515 +
            ((C6615 - (C6616 + C6617) + C6618) * C16513 + C6631 * C48681) *
                C48712) *
               C1168 +
           (((C6617 + C6616 - C6615 - C6618) * C16513 + C6632 * C48681) *
                C16515 +
            ((C6773 + C6774 - C6781 - C6782) * C16513 +
             (C6621 + C6622 - C6633 - C6634) * C48681) *
                C48712) *
               C48694) *
              C48648 +
          ((((C833 - (C832 + C831) + C834) * C16513 +
             (C837 - (C836 + C835) + C838) * C48681) *
                C16515 +
            (C5831 * C16513 + C1057 * C48681) * C48712) *
               C1167 +
           ((C5830 * C16513 + C5832 * C48681) * C16515 +
            (C6632 * C16513 + (C1692 + C1693 - C1704 - C1705) * C48681) *
                C48712) *
               C1168 +
           ((C6631 * C16513 + (C1704 - (C1693 + C1692) + C1705) * C48681) *
                C16515 +
            ((C6633 - (C6622 + C6621) + C6634) * C16513 +
             ((C113 * C1805 + C48597 * C1810) * C825 -
              (C1528 * C48663 + C1529 * C824) +
              (C113 * C1811 + C48597 * C1814) * C48481) *
                 C48681) *
                C48712) *
               C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C824 +
             (C113 * C123 + C48597 * C136) * C48663 -
             (C113 * C508 + C48597 * C518) * C825 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C16513 +
            (C831 + C832 - C833 - C834) * C48681) *
               C16515 +
           ((C5814 + C5815 - C5828 - C5829) * C16513 + C5830 * C48681) *
               C48712) *
              C48377 * C707 +
          (((C833 - (C832 + C831) + C834) * C16513 +
            (C837 - (C836 + C835) + C838) * C48681) *
               C16515 +
           (C5831 * C16513 + C1057 * C48681) * C48712) *
              C48377 * C708 +
          ((C857 * C16513 + (C841 + C840 - C839 - C842) * C48681) * C16515 +
           (C5832 * C16513 + (C1037 + C1038 - C1054 - C1055) * C48681) *
               C48712) *
              C48377 * C709 +
          ((C858 * C16513 + (C855 - (C844 + C843) + C856) * C48681) * C16515 +
           ((C1054 - (C1038 + C1037) + C1055) * C16513 +
            ((C113 * C1008 + C48597 * C1017) * C825 -
             (C721 * C48663 + C722 * C824) +
             (C113 * C1018 + C48597 * C1023) * C48481) *
                C48681) *
               C48712) *
              C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C2436 +
             (C113 * C123 + C48597 * C136) * C2432 -
             (C113 * C508 + C48597 * C518) * C2437 -
             (C113 * C519 + C48597 * C538) * C2433 +
             (C113 * C509 + C48597 * C520) * C2438 +
             (C113 * C521 + C48597 * C539) * C2434 -
             (C113 * C2136 + C48597 * C2142) * C2439 -
             (C113 * C2143 + C48597 * C2154) * C48710) *
                C16513 +
            (C2445 + C2446 - C2447 - C2448 + C2449 + C2450 - C2469 - C2470) *
                C48681) *
               C16515 +
           ((C7669 + C7670 - C7671 - C7672 + C7673 + C7674 - C7681 - C7682) *
                C16513 +
            (C7517 + C7518 - C7519 - C7520 + C7521 + C7522 - C7529 - C7530) *
                C48681) *
               C48712) *
              C48377 * C48648 +
          (((C2447 - (C2446 + C2445) + C2448 - C2449 - C2450 + C2469 + C2470) *
                C16513 +
            (C2457 - (C2456 + C2455) + C2458 - C2459 - C2460 + C2471 + C2472) *
                C48681) *
               C16515 +
           ((C7519 - (C7518 + C7517) + C7520 - C7521 - C7522 + C7529 + C7530) *
                C16513 +
            (C1045 * C2437 - (C367 * C2432 + C368 * C2436) + C1047 * C2433 -
             C2329 * C2438 - C2330 * C2434 +
             (C113 * C2572 + C48597 * C2577) * C2439 +
             (C113 * C2578 + C48597 * C2581) * C48710) *
                C48681) *
               C48712) *
              C48377 * C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[89] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C16513 +
             (C174 + C175) * C48681) *
                C16515 +
            ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
               C48733 -
           ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
               C48721 +
           (((C5212 + C5211) * C16513 + C5202 * C48681) * C16515 +
            ((C6087 + C6088) * C16513 + C6419 * C48681) * C48712) *
               C48694) *
              C299 +
          (((C5195 * C16513 + C5203 * C48681) * C16515 +
            (C5202 * C16513 + C392 * C48681) * C48712) *
               C48721 -
           ((C391 * C48681 + C5201 * C16513) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
               C48733 -
           (((C1532 + C1533) * C48681 + C6420 * C16513) * C48712 +
            (C5204 * C48681 + C5196 * C16513) * C16515) *
               C48694) *
              C300 +
          (((C184 * C16513 + (C179 + C178) * C48681) * C16515 +
            (C5203 * C16513 + C716 * C48681) * C48712) *
               C48733 -
           (((C389 + C390) * C48681 + C5204 * C16513) * C48712 +
            (C5489 * C48681 + C391 * C16513) * C16515) *
               C48721 +
           ((C392 * C16513 + (C390 + C389) * C48681) * C16515 +
            ((C1533 + C1532) * C16513 +
             ((C113 * C1515 + C48597 * C1516) * C114 +
              (C113 * C1517 + C48597 * C1518) * C48394) *
                 C48681) *
                C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C16513 +
            (C174 + C175) * C48681) *
               C16515 +
           ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
              C48377 * C108 -
          ((C391 * C48681 + C5201 * C16513) * C48712 +
           ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
              C48377 * C109 +
          ((C184 * C16513 + (C179 + C178) * C48681) * C16515 +
           (C5203 * C16513 + C716 * C48681) * C48712) *
              C48377 * C110 -
          (((C723 + C724) * C48681 + C5489 * C16513) * C48712 +
           ((C181 + C180) * C48681 + C185 * C16513) * C16515) *
              C48377 * C111 +
          ((C186 * C16513 + (C183 + C182) * C48681) * C16515 +
           ((C724 + C723) * C16513 + ((C113 * C711 + C48597 * C712) * C114 +
                                      (C113 * C713 + C48597 * C714) * C48394) *
                                         C48681) *
               C48712) *
              C48377 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C16513 +
             (C174 + C175) * C48681) *
                C16515 +
            ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
               C1167 -
           ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
               C1168 +
           (((C5212 + C5211) * C16513 + C5202 * C48681) * C16515 +
            ((C6087 + C6088) * C16513 + C6419 * C48681) * C48712) *
               C48694) *
              C48730 +
          (((C5195 * C16513 + C5203 * C48681) * C16515 +
            (C5202 * C16513 + C392 * C48681) * C48712) *
               C1168 -
           ((C391 * C48681 + C5201 * C16513) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
               C1167 -
           (((C1532 + C1533) * C48681 + C6420 * C16513) * C48712 +
            (C5204 * C48681 + C5196 * C16513) * C16515) *
               C48694) *
              C48717 +
          (((C184 * C16513 + (C179 + C178) * C48681) * C16515 +
            (C5203 * C16513 + C716 * C48681) * C48712) *
               C1167 -
           (((C389 + C390) * C48681 + C5204 * C16513) * C48712 +
            (C5489 * C48681 + C391 * C16513) * C16515) *
               C1168 +
           ((C392 * C16513 + (C390 + C389) * C48681) * C16515 +
            ((C1533 + C1532) * C16513 +
             ((C113 * C1515 + C48597 * C1516) * C114 +
              (C113 * C1517 + C48597 * C1518) * C48394) *
                 C48681) *
                C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C16513 +
            (C174 + C175) * C48681) *
               C16515 +
           ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
              C1235 -
          ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
           (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
              C1236 +
          (((C5212 + C5211) * C16513 + C5202 * C48681) * C16515 +
           ((C6087 + C6088) * C16513 + C6419 * C48681) * C48712) *
              C1237 -
          (((C6089 + C6090) * C48681 + (C6091 + C6092) * C16513) * C48712 +
           (C6420 * C48681 + (C6088 + C6087) * C16513) * C16515) *
              C1238 +
          (((C6092 + C6091) * C16513 + (C6090 + C6089) * C48681) * C16515 +
           (((C113 * C6060 + C48597 * C6062) * C114 +
             (C113 * C6063 + C48597 * C6066) * C48394) *
                C16513 +
            ((C113 * C6061 + C48597 * C6064) * C114 +
             (C113 * C6065 + C48597 * C6067) * C48394) *
                C48681) *
               C48712) *
              C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C1928 +
             (C113 * C123 + C48597 * C136) * C1925 -
             (C113 * C508 + C48597 * C518) * C1929 -
             (C113 * C519 + C48597 * C538) * C1926 +
             (C113 * C509 + C48597 * C520) * C1930 +
             (C113 * C521 + C48597 * C539) * C48697) *
                C16513 +
            (C1932 + C1933 - C1934 - C1935 + C1936 + C1937) * C48681) *
               C16515 +
           ((C7075 + C7076 - C7077 - C7078 + C7079 + C7080) * C16513 +
            C7385 * C48681) *
               C48712) *
              C48377 * C48730 +
          (((C1934 - (C1933 + C1932) + C1935 - C1936 - C1937) * C16513 +
            (C1940 - (C1939 + C1938) + C1941 - C1942 - C1943) * C48681) *
               C16515 +
           (C7386 * C16513 +
            (C2319 - (C2320 + C2321) + C2322 - C2333 - C2334) * C48681) *
               C48712) *
              C48377 * C48717 +
          ((C1954 * C16513 +
            (C1946 + C1945 - C1944 - C1947 + C1948 + C1949) * C48681) *
               C16515 +
           ((C2321 + C2320 - C2319 - C2322 + C2333 + C2334) * C16513 +
            (C375 * C1928 + C376 * C1925 - C1048 * C1929 - C1049 * C1926 +
             (C113 * C2306 + C48597 * C2307) * C1930 +
             (C113 * C2308 + C48597 * C2309) * C48697) *
                C48681) *
               C48712) *
              C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C1928 +
             (C113 * C123 + C48597 * C136) * C1925 -
             (C113 * C508 + C48597 * C518) * C1929 -
             (C113 * C519 + C48597 * C538) * C1926 +
             (C113 * C509 + C48597 * C520) * C1930 +
             (C113 * C521 + C48597 * C539) * C48697) *
                C16513 +
            (C1932 + C1933 - C1934 - C1935 + C1936 + C1937) * C48681) *
               C16515 +
           ((C7075 + C7076 - C7077 - C7078 + C7079 + C7080) * C16513 +
            C7385 * C48681) *
               C48712) *
              C48733 +
          (((C7077 - (C7076 + C7075) + C7078 - C7079 - C7080) * C16513 +
            C7386 * C48681) *
               C16515 +
           ((C7081 - (C7082 + C7083) + C7084 - C7085 - C7086) * C16513 +
            (C7087 - (C7088 + C7089) + C7090 - C7091 - C7092) * C48681) *
               C48712) *
              C48721 +
          (((C7083 + C7082 - C7081 - C7084 + C7085 + C7086) * C16513 +
            (C7089 + C7088 - C7087 - C7090 + C7091 + C7092) * C48681) *
               C16515 +
           ((C6081 * C1928 + C6082 * C1925 - C6779 * C1929 - C6780 * C1926 +
             (C113 * C6238 + C48597 * C6240) * C1930 +
             (C113 * C6241 + C48597 * C6244) * C48697) *
                C16513 +
            (C1531 * C1928 + C1530 * C1925 - C6629 * C1929 - C6630 * C1926 +
             (C113 * C6239 + C48597 * C6242) * C1930 +
             (C113 * C6243 + C48597 * C6245) * C48697) *
                C48681) *
               C48712) *
              C48694) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[90] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C3456 +
              (C113 * C123 + C48597 * C136) * C3454 -
              (C113 * C508 + C48597 * C518) * C3457 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C16513 +
             (C3459 + C3460 - C3461 - C3462) * C48681) *
                C16515 +
            ((C9005 + C9006 - C9007 - C9008) * C16513 + C9025 * C48681) *
                C48712) *
               C48662 +
           (((C9007 - (C9006 + C9005) + C9008) * C16513 + C9026 * C48681) *
                C16515 +
            ((C9011 - (C9012 + C9013) + C9014) * C16513 + C9027 * C48681) *
                C48712) *
               C48439) *
              C48355 +
          ((((C3461 - (C3460 + C3459) + C3462) * C16513 +
             (C3465 - (C3464 + C3463) + C3466) * C48681) *
                C16515 +
            (C9026 * C16513 + C3917 * C48681) * C48712) *
               C48662 +
           ((C9025 * C16513 + C9363 * C48681) * C16515 +
            (C9028 * C16513 + (C3639 + C3640 - C3641 - C3642) * C48681) *
                C48712) *
               C48439) *
              C48363 +
          (((C3479 * C16513 + (C3469 + C3468 - C3467 - C3470) * C48681) *
                C16515 +
            (C9363 * C16513 + (C3912 + C3913 - C3914 - C3915) * C48681) *
                C48712) *
               C48662 +
           ((C3917 * C16513 + (C3914 - (C3913 + C3912) + C3915) * C48681) *
                C16515 +
            ((C3641 - (C3640 + C3639) + C3642) * C16513 +
             ((C113 * C1681 + C48597 * C1682) * C3457 -
              (C377 * C3454 + C378 * C3456) +
              (C113 * C1683 + C48597 * C1684) * C48481) *
                 C48681) *
                C48712) *
               C48439) *
              C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[91] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C47163 +
              (C113 * C123 + C48597 * C136) * C48477 -
              (C113 * C508 + C48597 * C518) * C47155 -
              (C113 * C519 + C48597 * C538) * C48484 +
              (C113 * C509 + C48597 * C520) * C47169 +
              (C113 * C521 + C48597 * C539) * C4029) *
                 C16513 +
             (C4034 + C4035 - C4036 - C4037 + C4038 + C4039) * C48681) *
                C16515 +
            ((C9704 + C9705 - C9706 - C9707 + C9708 + C9709) * C16513 +
             C9724 * C48681) *
                C48712) *
               C48662 +
           (((C9706 - (C9705 + C9704) + C9707 - C9708 - C9709) * C16513 +
             C9725 * C48681) *
                C16515 +
            ((C10726 - (C10727 + C10728) + C10729 - C10730 - C10731) * C16513 +
             (C9712 - (C9713 + C9714) + C9715 - C9716 - C9717) * C48681) *
                C48712) *
               C48439) *
              C2788 +
          ((((C4036 - (C4035 + C4034) + C4037 - C4038 - C4039) * C16513 +
             (C4042 - (C4041 + C4040) + C4043 - C4044 - C4045) * C48681) *
                C16515 +
            (C9725 * C16513 +
             (C4209 - (C4210 + C4211) + C4212 - C4213 - C4214) * C48681) *
                C48712) *
               C48662 +
           ((C9724 * C16513 +
             (C4211 + C4210 - C4209 - C4212 + C4213 + C4214) * C48681) *
                C16515 +
            ((C9714 + C9713 - C9712 - C9715 + C9716 + C9717) * C16513 +
             (C373 * C47163 + C374 * C48477 - C1700 * C47155 - C1701 * C48484 +
              (C113 * C1383 + C48597 * C1400) * C47169 +
              (C113 * C1401 + C48597 * C1410) * C4029) *
                 C48681) *
                C48712) *
               C48439) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[92] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C3456 +
              (C113 * C123 + C48597 * C136) * C3454 -
              (C113 * C508 + C48597 * C518) * C3457 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C16513 +
             (C3459 + C3460 - C3461 - C3462) * C48681) *
                C16515 +
            ((C9005 + C9006 - C9007 - C9008) * C16513 + C9025 * C48681) *
                C48712) *
               C48733 +
           (((C9007 - (C9006 + C9005) + C9008) * C16513 + C9026 * C48681) *
                C16515 +
            ((C9011 - (C9012 + C9013) + C9014) * C16513 + C9027 * C48681) *
                C48712) *
               C48721 +
           (((C9013 + C9012 - C9011 - C9014) * C16513 + C9028 * C48681) *
                C16515 +
            ((C10050 + C10051 - C10052 - C10053) * C16513 +
             (C9017 + C9018 - C9019 - C9020) * C48681) *
                C48712) *
               C48694) *
              C2788 +
          ((((C3461 - (C3460 + C3459) + C3462) * C16513 +
             (C3465 - (C3464 + C3463) + C3466) * C48681) *
                C16515 +
            (C9026 * C16513 + C3917 * C48681) * C48712) *
               C48733 +
           ((C9025 * C16513 + C9363 * C48681) * C16515 +
            (C9028 * C16513 + (C3639 + C3640 - C3641 - C3642) * C48681) *
                C48712) *
               C48721 +
           ((C9027 * C16513 + (C3641 - (C3640 + C3639) + C3642) * C48681) *
                C16515 +
            ((C9019 - (C9018 + C9017) + C9020) * C16513 +
             ((C113 * C1805 + C48597 * C1810) * C3457 -
              (C1528 * C3454 + C1529 * C3456) +
              (C113 * C1811 + C48597 * C1814) * C48481) *
                 C48681) *
                C48712) *
               C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C3456 +
             (C113 * C123 + C48597 * C136) * C3454 -
             (C113 * C508 + C48597 * C518) * C3457 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C16513 +
            (C3459 + C3460 - C3461 - C3462) * C48681) *
               C16515 +
           ((C9005 + C9006 - C9007 - C9008) * C16513 + C9025 * C48681) *
               C48712) *
              C48377 * C48739 +
          (((C3461 - (C3460 + C3459) + C3462) * C16513 +
            (C3465 - (C3464 + C3463) + C3466) * C48681) *
               C16515 +
           (C9026 * C16513 + C3917 * C48681) * C48712) *
              C48377 * C48732 +
          ((C3479 * C16513 + (C3469 + C3468 - C3467 - C3470) * C48681) *
               C16515 +
           (C9363 * C16513 + (C3912 + C3913 - C3914 - C3915) * C48681) *
               C48712) *
              C48377 * C48719 +
          ((C3480 * C16513 + (C3473 - (C3472 + C3471) + C3474) * C48681) *
               C16515 +
           ((C3914 - (C3913 + C3912) + C3915) * C16513 +
            ((C113 * C1008 + C48597 * C1017) * C3457 -
             (C721 * C3454 + C722 * C3456) +
             (C113 * C1018 + C48597 * C1023) * C48481) *
                C48681) *
               C48712) *
              C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C3744 +
             (C113 * C123 + C48597 * C136) * C48741 -
             (C113 * C508 + C48597 * C518) * C3745 -
             (C113 * C519 + C48597 * C538) * C48738 +
             (C113 * C509 + C48597 * C520) * C3746 +
             (C113 * C521 + C48597 * C539) * C48729 -
             (C113 * C2136 + C48597 * C2142) * C3747 -
             (C113 * C2143 + C48597 * C2154) * C48710) *
                C16513 +
            (C3749 + C3750 - C3751 - C3752 + C3753 + C3754 - C3755 - C3756) *
                C48681) *
               C16515 +
           ((C10184 + C10185 - C10186 - C10187 + C10188 + C10189 - C10190 -
             C10191) *
                C16513 +
            (C9159 + C9160 - C9161 - C9162 + C9163 + C9164 - C9165 - C9166) *
                C48681) *
               C48712) *
              C48377 * C2788 +
          (((C3751 - (C3750 + C3749) + C3752 - C3753 - C3754 + C3755 + C3756) *
                C16513 +
            (C3759 - (C3758 + C3757) + C3760 - C3761 - C3762 + C3763 + C3764) *
                C48681) *
               C16515 +
           ((C9161 - (C9160 + C9159) + C9162 - C9163 - C9164 + C9165 + C9166) *
                C16513 +
            (C1045 * C3745 - (C367 * C48741 + C368 * C3744) + C1047 * C48738 -
             C2329 * C3746 - C2330 * C48729 +
             (C113 * C2572 + C48597 * C2577) * C3747 +
             (C113 * C2578 + C48597 * C2581) * C48710) *
                C48681) *
               C48712) *
              C48377 * C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[93] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C47163 +
             (C113 * C123 + C48597 * C136) * C48477 -
             (C113 * C508 + C48597 * C518) * C47155 -
             (C113 * C519 + C48597 * C538) * C48484 +
             (C113 * C509 + C48597 * C520) * C47169 +
             (C113 * C521 + C48597 * C539) * C4029) *
                C16513 +
            (C4034 + C4035 - C4036 - C4037 + C4038 + C4039) * C48681) *
               C16515 +
           ((C9704 + C9705 - C9706 - C9707 + C9708 + C9709) * C16513 +
            C9724 * C48681) *
               C48712) *
              C48377 * C48355 +
          (((C4036 - (C4035 + C4034) + C4037 - C4038 - C4039) * C16513 +
            (C4042 - (C4041 + C4040) + C4043 - C4044 - C4045) * C48681) *
               C16515 +
           (C9725 * C16513 +
            (C4209 - (C4210 + C4211) + C4212 - C4213 - C4214) * C48681) *
               C48712) *
              C48377 * C48363 +
          ((C4056 * C16513 +
            (C4048 + C4047 - C4046 - C4049 + C4050 + C4051) * C48681) *
               C16515 +
           ((C4211 + C4210 - C4209 - C4212 + C4213 + C4214) * C16513 +
            (C375 * C47163 + C376 * C48477 - C1048 * C47155 - C1049 * C48484 +
             (C113 * C2306 + C48597 * C2307) * C47169 +
             (C113 * C2308 + C48597 * C2309) * C4029) *
                C48681) *
               C48712) *
              C48377 * C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[94] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C3456 +
             (C113 * C123 + C48597 * C136) * C3454 -
             (C113 * C508 + C48597 * C518) * C3457 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C16513 +
            (C3459 + C3460 - C3461 - C3462) * C48681) *
               C16515 +
           ((C9005 + C9006 - C9007 - C9008) * C16513 + C9025 * C48681) *
               C48712) *
              C48377 * C48739 +
          (((C3461 - (C3460 + C3459) + C3462) * C16513 +
            (C3465 - (C3464 + C3463) + C3466) * C48681) *
               C16515 +
           (C9026 * C16513 + C3917 * C48681) * C48712) *
              C48377 * C48732 +
          ((C3479 * C16513 + (C3469 + C3468 - C3467 - C3470) * C48681) *
               C16515 +
           (C9363 * C16513 + (C3912 + C3913 - C3914 - C3915) * C48681) *
               C48712) *
              C48377 * C48719 +
          ((C3480 * C16513 + (C3473 - (C3472 + C3471) + C3474) * C48681) *
               C16515 +
           ((C3914 - (C3913 + C3912) + C3915) * C16513 +
            ((C113 * C1008 + C48597 * C1017) * C3457 -
             (C721 * C3454 + C722 * C3456) +
             (C113 * C1018 + C48597 * C1023) * C48481) *
                C48681) *
               C48712) *
              C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C3456 +
              (C113 * C123 + C48597 * C136) * C3454 -
              (C113 * C508 + C48597 * C518) * C3457 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C16513 +
             (C3459 + C3460 - C3461 - C3462) * C48681) *
                C16515 +
            ((C9005 + C9006 - C9007 - C9008) * C16513 + C9025 * C48681) *
                C48712) *
               C48733 +
           (((C9007 - (C9006 + C9005) + C9008) * C16513 + C9026 * C48681) *
                C16515 +
            ((C9011 - (C9012 + C9013) + C9014) * C16513 + C9027 * C48681) *
                C48712) *
               C48721 +
           (((C9013 + C9012 - C9011 - C9014) * C16513 + C9028 * C48681) *
                C16515 +
            ((C10050 + C10051 - C10052 - C10053) * C16513 +
             (C9017 + C9018 - C9019 - C9020) * C48681) *
                C48712) *
               C48694) *
              C2788 +
          ((((C3461 - (C3460 + C3459) + C3462) * C16513 +
             (C3465 - (C3464 + C3463) + C3466) * C48681) *
                C16515 +
            (C9026 * C16513 + C3917 * C48681) * C48712) *
               C48733 +
           ((C9025 * C16513 + C9363 * C48681) * C16515 +
            (C9028 * C16513 + (C3639 + C3640 - C3641 - C3642) * C48681) *
                C48712) *
               C48721 +
           ((C9027 * C16513 + (C3641 - (C3640 + C3639) + C3642) * C48681) *
                C16515 +
            ((C9019 - (C9018 + C9017) + C9020) * C16513 +
             ((C113 * C1805 + C48597 * C1810) * C3457 -
              (C1528 * C3454 + C1529 * C3456) +
              (C113 * C1811 + C48597 * C1814) * C48481) *
                 C48681) *
                C48712) *
               C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[95] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C16513 +
             (C174 + C175) * C48681) *
                C16515 +
            ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
               C48662 -
           ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
               C48439) *
              C707 +
          (((C5195 * C16513 + C5203 * C48681) * C16515 +
            (C5202 * C16513 + C392 * C48681) * C48712) *
               C48439 -
           ((C391 * C48681 + C5201 * C16513) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
               C48662) *
              C708 +
          (((C184 * C16513 + (C179 + C178) * C48681) * C16515 +
            (C5203 * C16513 + C716 * C48681) * C48712) *
               C48662 -
           (((C389 + C390) * C48681 + C5204 * C16513) * C48712 +
            (C5489 * C48681 + C391 * C16513) * C16515) *
               C48439) *
              C709 +
          (((C716 * C16513 + (C724 + C723) * C48681) * C16515 +
            ((C390 + C389) * C16513 + ((C113 * C311 + C48597 * C330) * C114 +
                                       (C113 * C331 + C48597 * C341) * C48394) *
                                          C48681) *
                C48712) *
               C48439 -
           (((C723 + C724) * C48681 + C5489 * C16513) * C48712 +
            ((C181 + C180) * C48681 + C185 * C16513) * C16515) *
               C48662) *
              C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C16513 +
             (C174 + C175) * C48681) *
                C16515 +
            ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
               C1509 -
           ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
               C1510 +
           (((C5212 + C5211) * C16513 + C5202 * C48681) * C16515 +
            ((C6087 + C6088) * C16513 + C6419 * C48681) * C48712) *
               C1511 -
           (((C6089 + C6090) * C48681 + (C6091 + C6092) * C16513) * C48712 +
            (C6420 * C48681 + (C6088 + C6087) * C16513) * C16515) *
               C48704) *
              C48648 +
          (((C5195 * C16513 + C5203 * C48681) * C16515 +
            (C5202 * C16513 + C392 * C48681) * C48712) *
               C1510 -
           ((C391 * C48681 + C5201 * C16513) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
               C1509 -
           (((C1532 + C1533) * C48681 + C6420 * C16513) * C48712 +
            (C5204 * C48681 + C5196 * C16513) * C16515) *
               C1511 +
           ((C6419 * C16513 + (C1533 + C1532) * C48681) * C16515 +
            ((C6090 + C6089) * C16513 +
             ((C113 * C1246 + C48597 * C1257) * C114 +
              (C113 * C1258 + C48597 * C1264) * C48394) *
                 C48681) *
                C48712) *
               C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[96] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C824 +
              (C113 * C123 + C48597 * C136) * C48663 -
              (C113 * C508 + C48597 * C518) * C825 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C16513 +
             (C831 + C832 - C833 - C834) * C48681) *
                C16515 +
            ((C5814 + C5815 - C5828 - C5829) * C16513 + C5830 * C48681) *
                C48712) *
               C48662 +
           (((C5828 - (C5815 + C5814) + C5829) * C16513 + C5831 * C48681) *
                C16515 +
            ((C6615 - (C6616 + C6617) + C6618) * C16513 + C6631 * C48681) *
                C48712) *
               C48439) *
              C299 +
          ((((C833 - (C832 + C831) + C834) * C16513 +
             (C837 - (C836 + C835) + C838) * C48681) *
                C16515 +
            (C5831 * C16513 + C1057 * C48681) * C48712) *
               C48662 +
           ((C5830 * C16513 + C5832 * C48681) * C16515 +
            (C6632 * C16513 + (C1692 + C1693 - C1704 - C1705) * C48681) *
                C48712) *
               C48439) *
              C300 +
          (((C857 * C16513 + (C841 + C840 - C839 - C842) * C48681) * C16515 +
            (C5832 * C16513 + (C1037 + C1038 - C1054 - C1055) * C48681) *
                C48712) *
               C48662 +
           ((C1057 * C16513 + (C1054 - (C1038 + C1037) + C1055) * C48681) *
                C16515 +
            ((C1704 - (C1693 + C1692) + C1705) * C16513 +
             ((C113 * C1681 + C48597 * C1682) * C825 -
              (C377 * C48663 + C378 * C824) +
              (C113 * C1683 + C48597 * C1684) * C48481) *
                 C48681) *
                C48712) *
               C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C824 +
             (C113 * C123 + C48597 * C136) * C48663 -
             (C113 * C508 + C48597 * C518) * C825 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C16513 +
            (C831 + C832 - C833 - C834) * C48681) *
               C16515 +
           ((C5814 + C5815 - C5828 - C5829) * C16513 + C5830 * C48681) *
               C48712) *
              C1509 +
          (((C5828 - (C5815 + C5814) + C5829) * C16513 + C5831 * C48681) *
               C16515 +
           ((C6615 - (C6616 + C6617) + C6618) * C16513 + C6631 * C48681) *
               C48712) *
              C1510 +
          (((C6617 + C6616 - C6615 - C6618) * C16513 + C6632 * C48681) *
               C16515 +
           ((C6773 + C6774 - C6781 - C6782) * C16513 +
            (C6621 + C6622 - C6633 - C6634) * C48681) *
               C48712) *
              C1511 +
          (((C6781 - (C6774 + C6773) + C6782) * C16513 +
            (C6633 - (C6622 + C6621) + C6634) * C48681) *
               C16515 +
           (((C113 * C6764 + C48597 * C6766) * C825 -
             (C6085 * C48663 + C6086 * C824) +
             (C113 * C6767 + C48597 * C6770) * C48481) *
                C16513 +
            ((C113 * C6765 + C48597 * C6768) * C825 -
             (C6083 * C48663 + C6084 * C824) +
             (C113 * C6769 + C48597 * C6771) * C48481) *
                C48681) *
               C48712) *
              C48704) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[97] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C16513 +
             (C174 + C175) * C48681) *
                C16515 +
            ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
               C48733 -
           ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
               C48721 +
           (((C5212 + C5211) * C16513 + C5202 * C48681) * C16515 +
            ((C6087 + C6088) * C16513 + C6419 * C48681) * C48712) *
               C48694) *
              C299 +
          (((C5195 * C16513 + C5203 * C48681) * C16515 +
            (C5202 * C16513 + C392 * C48681) * C48712) *
               C48721 -
           ((C391 * C48681 + C5201 * C16513) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
               C48733 -
           (((C1532 + C1533) * C48681 + C6420 * C16513) * C48712 +
            (C5204 * C48681 + C5196 * C16513) * C16515) *
               C48694) *
              C300 +
          (((C184 * C16513 + (C179 + C178) * C48681) * C16515 +
            (C5203 * C16513 + C716 * C48681) * C48712) *
               C48733 -
           (((C389 + C390) * C48681 + C5204 * C16513) * C48712 +
            (C5489 * C48681 + C391 * C16513) * C16515) *
               C48721 +
           ((C392 * C16513 + (C390 + C389) * C48681) * C16515 +
            ((C1533 + C1532) * C16513 +
             ((C113 * C1515 + C48597 * C1516) * C114 +
              (C113 * C1517 + C48597 * C1518) * C48394) *
                 C48681) *
                C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C16513 +
            (C174 + C175) * C48681) *
               C16515 +
           ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
              C48377 * C108 -
          ((C391 * C48681 + C5201 * C16513) * C48712 +
           ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
              C48377 * C109 +
          ((C184 * C16513 + (C179 + C178) * C48681) * C16515 +
           (C5203 * C16513 + C716 * C48681) * C48712) *
              C48377 * C110 -
          (((C723 + C724) * C48681 + C5489 * C16513) * C48712 +
           ((C181 + C180) * C48681 + C185 * C16513) * C16515) *
              C48377 * C111 +
          ((C186 * C16513 + (C183 + C182) * C48681) * C16515 +
           ((C724 + C723) * C16513 + ((C113 * C711 + C48597 * C712) * C114 +
                                      (C113 * C713 + C48597 * C714) * C48394) *
                                         C48681) *
               C48712) *
              C48377 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C505 +
             (C113 * C123 + C48597 * C136) * C48734 -
             (C113 * C508 + C48597 * C518) * C506 -
             (C113 * C519 + C48597 * C538) * C48723 +
             (C113 * C509 + C48597 * C520) * C507 +
             (C113 * C521 + C48597 * C539) * C48697) *
                C16513 +
            (C549 + C550 - C592 - C593 + C594 + C595) * C48681) *
               C16515 +
           ((C6247 + C6248 - C6249 - C6250 + C6281 + C6282) * C16513 +
            C8145 * C48681) *
               C48712) *
              C48377 * C299 +
          (((C592 - (C550 + C549) + C593 - C594 - C595) * C16513 +
            (C596 - (C560 + C559) + C597 - C598 - C599) * C48681) *
               C16515 +
           (C8146 * C16513 +
            (C2943 - (C2944 + C2945) + C2946 - C2947 - C2948) * C48681) *
               C48712) *
              C48377 * C300 +
          ((C607 * C16513 +
            (C572 + C571 - C600 - C601 + C602 + C603) * C48681) *
               C16515 +
           ((C2945 + C2944 - C2943 - C2946 + C2947 + C2948) * C16513 +
            (C375 * C505 + C376 * C48734 - C1048 * C506 - C1049 * C48723 +
             (C113 * C2306 + C48597 * C2307) * C507 +
             (C113 * C2308 + C48597 * C2309) * C48697) *
                C48681) *
               C48712) *
              C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C16513 +
             (C174 + C175) * C48681) *
                C16515 +
            ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
               C1167 -
           ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
               C1168 +
           (((C5212 + C5211) * C16513 + C5202 * C48681) * C16515 +
            ((C6087 + C6088) * C16513 + C6419 * C48681) * C48712) *
               C48694) *
              C48730 +
          (((C5195 * C16513 + C5203 * C48681) * C16515 +
            (C5202 * C16513 + C392 * C48681) * C48712) *
               C1168 -
           ((C391 * C48681 + C5201 * C16513) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
               C1167 -
           (((C1532 + C1533) * C48681 + C6420 * C16513) * C48712 +
            (C5204 * C48681 + C5196 * C16513) * C16515) *
               C48694) *
              C48717 +
          (((C184 * C16513 + (C179 + C178) * C48681) * C16515 +
            (C5203 * C16513 + C716 * C48681) * C48712) *
               C1167 -
           (((C389 + C390) * C48681 + C5204 * C16513) * C48712 +
            (C5489 * C48681 + C391 * C16513) * C16515) *
               C1168 +
           ((C392 * C16513 + (C390 + C389) * C48681) * C16515 +
            ((C1533 + C1532) * C16513 +
             ((C113 * C1515 + C48597 * C1516) * C114 +
              (C113 * C1517 + C48597 * C1518) * C48394) *
                 C48681) *
                C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C16513 +
            (C174 + C175) * C48681) *
               C16515 +
           ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
              C1235 -
          ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
           (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
              C1236 +
          (((C5212 + C5211) * C16513 + C5202 * C48681) * C16515 +
           ((C6087 + C6088) * C16513 + C6419 * C48681) * C48712) *
              C1237 -
          (((C6089 + C6090) * C48681 + (C6091 + C6092) * C16513) * C48712 +
           (C6420 * C48681 + (C6088 + C6087) * C16513) * C16515) *
              C1238 +
          (((C6092 + C6091) * C16513 + (C6090 + C6089) * C48681) * C16515 +
           (((C113 * C6060 + C48597 * C6062) * C114 +
             (C113 * C6063 + C48597 * C6066) * C48394) *
                C16513 +
            ((C113 * C6061 + C48597 * C6064) * C114 +
             (C113 * C6065 + C48597 * C6067) * C48394) *
                C48681) *
               C48712) *
              C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C505 +
             (C113 * C123 + C48597 * C136) * C48734 -
             (C113 * C508 + C48597 * C518) * C506 -
             (C113 * C519 + C48597 * C538) * C48723 +
             (C113 * C509 + C48597 * C520) * C507 +
             (C113 * C521 + C48597 * C539) * C48697) *
                C16513 +
            (C549 + C550 - C592 - C593 + C594 + C595) * C48681) *
               C16515 +
           ((C6247 + C6248 - C6249 - C6250 + C6281 + C6282) * C16513 +
            C8145 * C48681) *
               C48712) *
              C1167 +
          (((C6249 - (C6248 + C6247) + C6250 - C6281 - C6282) * C16513 +
            C8146 * C48681) *
               C16515 +
           ((C6283 - (C6257 + C6258) + C6284 - C6285 - C6286) * C16513 +
            (C6265 - (C6266 + C6267) + C6268 - C6287 - C6288) * C48681) *
               C48712) *
              C1168 +
          (((C6258 + C6257 - C6283 - C6284 + C6285 + C6286) * C16513 +
            (C6267 + C6266 - C6265 - C6268 + C6287 + C6288) * C48681) *
               C16515 +
           ((C6081 * C505 + C6082 * C48734 - C6779 * C506 - C6780 * C48723 +
             (C113 * C6238 + C48597 * C6240) * C507 +
             (C113 * C6241 + C48597 * C6244) * C48697) *
                C16513 +
            (C1531 * C505 + C1530 * C48734 - C6629 * C506 - C6630 * C48723 +
             (C113 * C6239 + C48597 * C6242) * C507 +
             (C113 * C6243 + C48597 * C6245) * C48697) *
                C48681) *
               C48712) *
              C48694) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[98] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C824 +
             (C113 * C123 + C48597 * C136) * C48663 -
             (C113 * C508 + C48597 * C518) * C825 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C16513 +
            (C831 + C832 - C833 - C834) * C48681) *
               C16515 +
           ((C5814 + C5815 - C5828 - C5829) * C16513 + C5830 * C48681) *
               C48712) *
              C48377 * C707 +
          (((C833 - (C832 + C831) + C834) * C16513 +
            (C837 - (C836 + C835) + C838) * C48681) *
               C16515 +
           (C5831 * C16513 + C1057 * C48681) * C48712) *
              C48377 * C708 +
          ((C857 * C16513 + (C841 + C840 - C839 - C842) * C48681) * C16515 +
           (C5832 * C16513 + (C1037 + C1038 - C1054 - C1055) * C48681) *
               C48712) *
              C48377 * C709 +
          ((C858 * C16513 + (C855 - (C844 + C843) + C856) * C48681) * C16515 +
           ((C1054 - (C1038 + C1037) + C1055) * C16513 +
            ((C113 * C1008 + C48597 * C1017) * C825 -
             (C721 * C48663 + C722 * C824) +
             (C113 * C1018 + C48597 * C1023) * C48481) *
                C48681) *
               C48712) *
              C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C824 +
              (C113 * C123 + C48597 * C136) * C48663 -
              (C113 * C508 + C48597 * C518) * C825 -
              (C113 * C519 + C48597 * C538) * C48481) *
                 C16513 +
             (C831 + C832 - C833 - C834) * C48681) *
                C16515 +
            ((C5814 + C5815 - C5828 - C5829) * C16513 + C5830 * C48681) *
                C48712) *
               C1167 +
           (((C5828 - (C5815 + C5814) + C5829) * C16513 + C5831 * C48681) *
                C16515 +
            ((C6615 - (C6616 + C6617) + C6618) * C16513 + C6631 * C48681) *
                C48712) *
               C1168 +
           (((C6617 + C6616 - C6615 - C6618) * C16513 + C6632 * C48681) *
                C16515 +
            ((C6773 + C6774 - C6781 - C6782) * C16513 +
             (C6621 + C6622 - C6633 - C6634) * C48681) *
                C48712) *
               C48694) *
              C48648 +
          ((((C833 - (C832 + C831) + C834) * C16513 +
             (C837 - (C836 + C835) + C838) * C48681) *
                C16515 +
            (C5831 * C16513 + C1057 * C48681) * C48712) *
               C1167 +
           ((C5830 * C16513 + C5832 * C48681) * C16515 +
            (C6632 * C16513 + (C1692 + C1693 - C1704 - C1705) * C48681) *
                C48712) *
               C1168 +
           ((C6631 * C16513 + (C1704 - (C1693 + C1692) + C1705) * C48681) *
                C16515 +
            ((C6633 - (C6622 + C6621) + C6634) * C16513 +
             ((C113 * C1805 + C48597 * C1810) * C825 -
              (C1528 * C48663 + C1529 * C824) +
              (C113 * C1811 + C48597 * C1814) * C48481) *
                 C48681) *
                C48712) *
               C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[99] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C16513 +
            (C174 + C175) * C48681) *
               C16515 +
           ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
              C48377 * C108 -
          ((C391 * C48681 + C5201 * C16513) * C48712 +
           ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
              C48377 * C109 +
          ((C184 * C16513 + (C179 + C178) * C48681) * C16515 +
           (C5203 * C16513 + C716 * C48681) * C48712) *
              C48377 * C110 -
          (((C723 + C724) * C48681 + C5489 * C16513) * C48712 +
           ((C181 + C180) * C48681 + C185 * C16513) * C16515) *
              C48377 * C111 +
          ((C186 * C16513 + (C183 + C182) * C48681) * C16515 +
           ((C724 + C723) * C16513 + ((C113 * C711 + C48597 * C712) * C114 +
                                      (C113 * C713 + C48597 * C714) * C48394) *
                                         C48681) *
               C48712) *
              C48377 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C16513 +
             (C174 + C175) * C48681) *
                C16515 +
            ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
               C48733 -
           ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
               C48721 +
           (((C5212 + C5211) * C16513 + C5202 * C48681) * C16515 +
            ((C6087 + C6088) * C16513 + C6419 * C48681) * C48712) *
               C48694) *
              C299 +
          (((C5195 * C16513 + C5203 * C48681) * C16515 +
            (C5202 * C16513 + C392 * C48681) * C48712) *
               C48721 -
           ((C391 * C48681 + C5201 * C16513) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
               C48733 -
           (((C1532 + C1533) * C48681 + C6420 * C16513) * C48712 +
            (C5204 * C48681 + C5196 * C16513) * C16515) *
               C48694) *
              C300 +
          (((C184 * C16513 + (C179 + C178) * C48681) * C16515 +
            (C5203 * C16513 + C716 * C48681) * C48712) *
               C48733 -
           (((C389 + C390) * C48681 + C5204 * C16513) * C48712 +
            (C5489 * C48681 + C391 * C16513) * C16515) *
               C48721 +
           ((C392 * C16513 + (C390 + C389) * C48681) * C16515 +
            ((C1533 + C1532) * C16513 +
             ((C113 * C1515 + C48597 * C1516) * C114 +
              (C113 * C1517 + C48597 * C1518) * C48394) *
                 C48681) *
                C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((((C113 * C115 + C48597 * C122) * C114 +
              (C113 * C123 + C48597 * C136) * C48394) *
                 C16513 +
             (C174 + C175) * C48681) *
                C16515 +
            ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
               C1167 -
           ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
            (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
               C1168 +
           (((C5212 + C5211) * C16513 + C5202 * C48681) * C16515 +
            ((C6087 + C6088) * C16513 + C6419 * C48681) * C48712) *
               C48694) *
              C48730 +
          (((C5195 * C16513 + C5203 * C48681) * C16515 +
            (C5202 * C16513 + C392 * C48681) * C48712) *
               C1168 -
           ((C391 * C48681 + C5201 * C16513) * C48712 +
            ((C177 + C176) * C48681 + (C175 + C174) * C16513) * C16515) *
               C1167 -
           (((C1532 + C1533) * C48681 + C6420 * C16513) * C48712 +
            (C5204 * C48681 + C5196 * C16513) * C16515) *
               C48694) *
              C48717 +
          (((C184 * C16513 + (C179 + C178) * C48681) * C16515 +
            (C5203 * C16513 + C716 * C48681) * C48712) *
               C1167 -
           (((C389 + C390) * C48681 + C5204 * C16513) * C48712 +
            (C5489 * C48681 + C391 * C16513) * C16515) *
               C1168 +
           ((C392 * C16513 + (C390 + C389) * C48681) * C16515 +
            ((C1533 + C1532) * C16513 +
             ((C113 * C1515 + C48597 * C1516) * C114 +
              (C113 * C1517 + C48597 * C1518) * C48394) *
                 C48681) *
                C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C16513 +
            (C174 + C175) * C48681) *
               C16515 +
           ((C5209 + C5210) * C16513 + C5195 * C48681) * C48712) *
              C1235 -
          ((C5196 * C48681 + (C5211 + C5212) * C16513) * C48712 +
           (C5201 * C48681 + (C5210 + C5209) * C16513) * C16515) *
              C1236 +
          (((C5212 + C5211) * C16513 + C5202 * C48681) * C16515 +
           ((C6087 + C6088) * C16513 + C6419 * C48681) * C48712) *
              C1237 -
          (((C6089 + C6090) * C48681 + (C6091 + C6092) * C16513) * C48712 +
           (C6420 * C48681 + (C6088 + C6087) * C16513) * C16515) *
              C1238 +
          (((C6092 + C6091) * C16513 + (C6090 + C6089) * C48681) * C16515 +
           (((C113 * C6060 + C48597 * C6062) * C114 +
             (C113 * C6063 + C48597 * C6066) * C48394) *
                C16513 +
            ((C113 * C6061 + C48597 * C6064) * C114 +
             (C113 * C6065 + C48597 * C6067) * C48394) *
                C48681) *
               C48712) *
              C1239) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[100] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48597 * C122) * C114 +
                      (C113 * C123 + C48597 * C136) * C48394) *
                         C48331 * C21946 +
                     (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
                        C48435 -
                    (C22698 * C21948 + (C5211 + C5212) * C48331 * C21947 +
                     (C5210 + C5209) * C48331 * C21946) *
                        C48442 +
                    (C22063 * C21946 + (C6087 + C6088) * C48331 * C21947 +
                     C22699 * C21948) *
                        C3060) *
                       C48355 +
                   ((C5195 * C48331 * C21946 + C5202 * C48331 * C21947 +
                     C22934 * C21948) *
                        C48442 -
                    (C22061 * C21948 + C5201 * C48331 * C21947 +
                     (C175 + C174) * C48331 * C21946) *
                        C48435 -
                    ((C6089 + C6090) * C48331 * C21948 +
                     C6420 * C48331 * C21947 + C22061 * C21946) *
                        C3060) *
                       C48363 +
                   ((C184 * C48331 * C21946 + C5203 * C48331 * C21947 +
                     C22062 * C21948) *
                        C48435 -
                    ((C1532 + C1533) * C48331 * C21948 +
                     C5204 * C48331 * C21947 + C391 * C48331 * C21946) *
                        C48442 +
                    (C22062 * C21946 + (C1533 + C1532) * C48331 * C21947 +
                     ((C113 * C1246 + C48597 * C1257) * C114 +
                      (C113 * C1258 + C48597 * C1264) * C48394) *
                         C48331 * C21948) *
                        C3060) *
                       C3063)) /
                 (p * q * std::sqrt(p + q));
    d2ee[101] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48597 * C122) * C824 +
                      (C113 * C123 + C48597 * C136) * C48663 -
                      (C113 * C508 + C48597 * C518) * C825 -
                      (C113 * C519 + C48597 * C538) * C48481) *
                         C48331 * C21946 +
                     (C5814 + C5815 - C5828 - C5829) * C48331 * C21947 +
                     C23085 * C21948) *
                        C48435 +
                    ((C5828 - (C5815 + C5814) + C5829) * C48331 * C21946 +
                     (C6615 - (C6616 + C6617) + C6618) * C48331 * C21947 +
                     C23201 * C21948) *
                        C48442 +
                    (C23085 * C21946 +
                     (C6773 + C6774 - C6781 - C6782) * C48331 * C21947 +
                     (C23189 + C23190 - C23199 - C23200) * C48331 * C21948) *
                        C3060) *
                       C2788 +
                   (((C833 - (C832 + C831) + C834) * C48331 * C21946 +
                     C5831 * C48331 * C21947 + C23082 * C21948) *
                        C48435 +
                    (C5830 * C48331 * C21946 + C6632 * C48331 * C21947 +
                     (C6621 + C6622 - C6633 - C6634) * C48331 * C21948) *
                        C48442 +
                    (C23082 * C21946 +
                     (C6633 - (C6622 + C6621) + C6634) * C48331 * C21947 +
                     ((C113 * C6765 + C48597 * C6768) * C825 -
                      (C6083 * C48663 + C6084 * C824) +
                      (C113 * C6769 + C48597 * C6771) * C48481) *
                         C48331 * C21948) *
                        C3060) *
                       C48360)) /
                 (p * q * std::sqrt(p + q));
    d2ee[102] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C48331 * C21946 +
            (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
               C48740 -
           (C22698 * C21948 + (C5211 + C5212) * C48331 * C21947 +
            (C5210 + C5209) * C48331 * C21946) *
               C48736 +
           (C22063 * C21946 + (C6087 + C6088) * C48331 * C21947 +
            C22699 * C21948) *
               C48726 -
           ((C22702 + C22703) * C48331 * C21948 +
            (C6091 + C6092) * C48331 * C21947 + C22698 * C21946) *
               C48704) *
              C2788 +
          ((C5195 * C48331 * C21946 + C5202 * C48331 * C21947 +
            C22934 * C21948) *
               C48736 -
           (C22061 * C21948 + C5201 * C48331 * C21947 +
            (C175 + C174) * C48331 * C21946) *
               C48740 -
           ((C6089 + C6090) * C48331 * C21948 + C6420 * C48331 * C21947 +
            C22061 * C21946) *
               C48726 +
           (C22934 * C21946 + (C6090 + C6089) * C48331 * C21947 +
            ((C113 * C6061 + C48597 * C6064) * C114 +
             (C113 * C6065 + C48597 * C6067) * C48394) *
                C48331 * C21948) *
               C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C48331 * C21946 +
            (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
               C2680 -
           (C22698 * C21948 + (C5211 + C5212) * C48331 * C21947 +
            (C5210 + C5209) * C48331 * C21946) *
               C48439) *
              C48739 +
          ((C5195 * C48331 * C21946 + C5202 * C48331 * C21947 +
            C22934 * C21948) *
               C48439 -
           (C22061 * C21948 + C5201 * C48331 * C21947 +
            (C175 + C174) * C48331 * C21946) *
               C2680) *
              C48732 +
          ((C184 * C48331 * C21946 + C5203 * C48331 * C21947 +
            C22062 * C21948) *
               C2680 -
           ((C1532 + C1533) * C48331 * C21948 + C5204 * C48331 * C21947 +
            C391 * C48331 * C21946) *
               C48439) *
              C48719 +
          ((C716 * C48331 * C21946 + (C390 + C389) * C48331 * C21947 +
            ((C113 * C1515 + C48597 * C1516) * C114 +
             (C113 * C1517 + C48597 * C1518) * C48394) *
                C48331 * C21948) *
               C48439 -
           ((C389 + C390) * C48331 * C21948 + C5489 * C48331 * C21947 +
            C185 * C48331 * C21946) *
               C2680) *
              C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C505 +
             (C113 * C123 + C48597 * C136) * C48734 -
             (C113 * C508 + C48597 * C518) * C506 -
             (C113 * C519 + C48597 * C538) * C48723 +
             (C113 * C509 + C48597 * C520) * C507 +
             (C113 * C521 + C48597 * C539) * C48697) *
                C48331 * C21946 +
            (C6247 + C6248 - C6249 - C6250 + C6281 + C6282) * C48331 * C21947 +
            C22835 * C21948) *
               C2680 +
           ((C6249 - (C6248 + C6247) + C6250 - C6281 - C6282) * C48331 *
                C21946 +
            (C6283 - (C6257 + C6258) + C6284 - C6285 - C6286) * C48331 *
                C21947 +
            (C22819 - (C22820 + C22821) + C22822 - C22831 - C22832) * C48331 *
                C21948) *
               C48439) *
              C2788 +
          (((C592 - (C550 + C549) + C593 - C594 - C595) * C48331 * C21946 +
            C8146 * C48331 * C21947 +
            (C6265 - (C6266 + C6267) + C6268 - C6287 - C6288) * C48331 *
                C21948) *
               C2680 +
           (C8145 * C48331 * C21946 +
            (C6267 + C6266 - C6265 - C6268 + C6287 + C6288) * C48331 * C21947 +
            (C1531 * C505 + C1530 * C48734 - C6629 * C506 - C6630 * C48723 +
             (C113 * C6239 + C48597 * C6242) * C507 +
             (C113 * C6243 + C48597 * C6245) * C48697) *
                C48331 * C21948) *
               C48439) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[103] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48597 * C122) * C824 +
                      (C113 * C123 + C48597 * C136) * C48663 -
                      (C113 * C508 + C48597 * C518) * C825 -
                      (C113 * C519 + C48597 * C538) * C48481) *
                         C48331 * C21946 +
                     (C5814 + C5815 - C5828 - C5829) * C48331 * C21947 +
                     C23085 * C21948) *
                        C2680 +
                    ((C5828 - (C5815 + C5814) + C5829) * C48331 * C21946 +
                     (C6615 - (C6616 + C6617) + C6618) * C48331 * C21947 +
                     C23201 * C21948) *
                        C48439) *
                       C48355 +
                   (((C833 - (C832 + C831) + C834) * C48331 * C21946 +
                     C5831 * C48331 * C21947 + C23082 * C21948) *
                        C2680 +
                    (C5830 * C48331 * C21946 + C6632 * C48331 * C21947 +
                     (C6621 + C6622 - C6633 - C6634) * C48331 * C21948) *
                        C48439) *
                       C48363 +
                   ((C857 * C48331 * C21946 + C5832 * C48331 * C21947 +
                     (C1692 + C1693 - C1704 - C1705) * C48331 * C21948) *
                        C2680 +
                    (C1057 * C48331 * C21946 +
                     (C1704 - (C1693 + C1692) + C1705) * C48331 * C21947 +
                     ((C113 * C1805 + C48597 * C1810) * C825 -
                      (C1528 * C48663 + C1529 * C824) +
                      (C113 * C1811 + C48597 * C1814) * C48481) *
                         C48331 * C21948) *
                        C48439) *
                       C3063)) /
                 (p * q * std::sqrt(p + q));
    d2ee[104] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48597 * C122) * C114 +
                      (C113 * C123 + C48597 * C136) * C48394) *
                         C48331 * C21946 +
                     (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
                        C2680 -
                    (C22698 * C21948 + (C5211 + C5212) * C48331 * C21947 +
                     (C5210 + C5209) * C48331 * C21946) *
                        C48439) *
                       C48739 +
                   ((C5195 * C48331 * C21946 + C5202 * C48331 * C21947 +
                     C22934 * C21948) *
                        C48439 -
                    (C22061 * C21948 + C5201 * C48331 * C21947 +
                     (C175 + C174) * C48331 * C21946) *
                        C2680) *
                       C48732 +
                   ((C184 * C48331 * C21946 + C5203 * C48331 * C21947 +
                     C22062 * C21948) *
                        C2680 -
                    ((C1532 + C1533) * C48331 * C21948 +
                     C5204 * C48331 * C21947 + C391 * C48331 * C21946) *
                        C48439) *
                       C48719 +
                   ((C716 * C48331 * C21946 + (C390 + C389) * C48331 * C21947 +
                     ((C113 * C1515 + C48597 * C1516) * C114 +
                      (C113 * C1517 + C48597 * C1518) * C48394) *
                         C48331 * C21948) *
                        C48439 -
                    ((C389 + C390) * C48331 * C21948 + C5489 * C48331 * C21947 +
                     C185 * C48331 * C21946) *
                        C2680) *
                       C48698)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48597 * C122) * C114 +
                      (C113 * C123 + C48597 * C136) * C48394) *
                         C48331 * C21946 +
                     (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
                        C48740 -
                    (C22698 * C21948 + (C5211 + C5212) * C48331 * C21947 +
                     (C5210 + C5209) * C48331 * C21946) *
                        C48736 +
                    (C22063 * C21946 + (C6087 + C6088) * C48331 * C21947 +
                     C22699 * C21948) *
                        C48726 -
                    ((C22702 + C22703) * C48331 * C21948 +
                     (C6091 + C6092) * C48331 * C21947 + C22698 * C21946) *
                        C48704) *
                       C2788 +
                   ((C5195 * C48331 * C21946 + C5202 * C48331 * C21947 +
                     C22934 * C21948) *
                        C48736 -
                    (C22061 * C21948 + C5201 * C48331 * C21947 +
                     (C175 + C174) * C48331 * C21946) *
                        C48740 -
                    ((C6089 + C6090) * C48331 * C21948 +
                     C6420 * C48331 * C21947 + C22061 * C21946) *
                        C48726 +
                    (C22934 * C21946 + (C6090 + C6089) * C48331 * C21947 +
                     ((C113 * C6061 + C48597 * C6064) * C114 +
                      (C113 * C6065 + C48597 * C6067) * C48394) *
                         C48331 * C21948) *
                        C48704) *
                       C48360)) /
                     (p * q * std::sqrt(p + q));
    d2ee[105] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48597 * C122) * C3456 +
                      (C113 * C123 + C48597 * C136) * C3454 -
                      (C113 * C508 + C48597 * C518) * C3457 -
                      (C113 * C519 + C48597 * C538) * C48481) *
                         C48331 * C21946 +
                     (C9005 + C9006 - C9007 - C9008) * C48331 * C21947 +
                     C24852 * C21948) *
                        C48435 +
                    ((C9007 - (C9006 + C9005) + C9008) * C48331 * C21946 +
                     (C9011 - (C9012 + C9013) + C9014) * C48331 * C21947 +
                     C25604 * C21948) *
                        C48442 +
                    (C24852 * C21946 +
                     (C10050 + C10051 - C10052 - C10053) * C48331 * C21947 +
                     (C25598 + C25599 - C25600 - C25601) * C48331 * C21948) *
                        C3060) *
                       C48648 +
                   (((C3461 - (C3460 + C3459) + C3462) * C48331 * C21946 +
                     C9026 * C48331 * C21947 + C24849 * C21948) *
                        C48435 +
                    (C9025 * C48331 * C21946 + C9028 * C48331 * C21947 +
                     (C9017 + C9018 - C9019 - C9020) * C48331 * C21948) *
                        C48442 +
                    (C24849 * C21946 +
                     (C9019 - (C9018 + C9017) + C9020) * C48331 * C21947 +
                     ((C113 * C6765 + C48597 * C6768) * C3457 -
                      (C6083 * C3454 + C6084 * C3456) +
                      (C113 * C6769 + C48597 * C6771) * C48481) *
                         C48331 * C21948) *
                        C3060) *
                       C48360)) /
                 (p * q * std::sqrt(p + q));
    d2ee[106] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C47163 +
            (C113 * C123 + C48597 * C136) * C48477 -
            (C113 * C508 + C48597 * C518) * C47155 -
            (C113 * C519 + C48597 * C538) * C48484 +
            (C113 * C509 + C48597 * C520) * C47169 +
            (C113 * C521 + C48597 * C539) * C4029) *
               C48331 * C21946 +
           (C9704 + C9705 - C9706 - C9707 + C9708 + C9709) * C48331 * C21947 +
           C26124 * C21948) *
              C48435 +
          ((C9706 - (C9705 + C9704) + C9707 - C9708 - C9709) * C48331 * C21946 +
           (C10726 - (C10727 + C10728) + C10729 - C10730 - C10731) * C48331 *
               C21947 +
           (C26114 - (C26115 + C26116) + C26117 - C26118 - C26119) * C48331 *
               C21948) *
              C48442 +
          (C26124 * C21946 +
           (C26116 + C26115 - C26114 - C26117 + C26118 + C26119) * C48331 *
               C21947 +
           (C6086 * C47163 + C6085 * C48477 - C23196 * C47155 -
            C23197 * C48484 + (C113 * C22813 + C48597 * C22814) * C47169 +
            (C113 * C22815 + C48597 * C22816) * C4029) *
               C48331 * C21948) *
              C3060) *
         C48350) /
        (p * q * std::sqrt(p + q));
    d2ee[107] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C48597 * C122) * C3456 +
                     (C113 * C123 + C48597 * C136) * C3454 -
                     (C113 * C508 + C48597 * C518) * C3457 -
                     (C113 * C519 + C48597 * C538) * C48481) *
                        C48331 * C21946 +
                    (C9005 + C9006 - C9007 - C9008) * C48331 * C21947 +
                    C24852 * C21948) *
                       C48740 +
                   ((C9007 - (C9006 + C9005) + C9008) * C48331 * C21946 +
                    (C9011 - (C9012 + C9013) + C9014) * C48331 * C21947 +
                    C25604 * C21948) *
                       C48736 +
                   (C24852 * C21946 +
                    (C10050 + C10051 - C10052 - C10053) * C48331 * C21947 +
                    (C25598 + C25599 - C25600 - C25601) * C48331 * C21948) *
                       C48726 +
                   (C25604 * C21946 +
                    (C25600 - (C25599 + C25598) + C25601) * C48331 * C21947 +
                    ((C113 * C23183 + C48597 * C23184) * C3457 -
                     (C22700 * C3454 + C22701 * C3456) +
                     (C113 * C23185 + C48597 * C23186) * C48481) *
                        C48331 * C21948) *
                       C48704) *
                  C48350) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48597 * C122) * C3456 +
                      (C113 * C123 + C48597 * C136) * C3454 -
                      (C113 * C508 + C48597 * C518) * C3457 -
                      (C113 * C519 + C48597 * C538) * C48481) *
                         C48331 * C21946 +
                     (C9005 + C9006 - C9007 - C9008) * C48331 * C21947 +
                     C24852 * C21948) *
                        C2680 +
                    ((C9007 - (C9006 + C9005) + C9008) * C48331 * C21946 +
                     (C9011 - (C9012 + C9013) + C9014) * C48331 * C21947 +
                     (C10052 - (C10051 + C10050) + C10053) * C48331 * C21948) *
                        C48439) *
                       C48730 +
                   (((C3461 - (C3460 + C3459) + C3462) * C48331 * C21946 +
                     C9026 * C48331 * C21947 + C24849 * C21948) *
                        C2680 +
                    (C9025 * C48331 * C21946 + C9028 * C48331 * C21947 +
                     (C9017 + C9018 - C9019 - C9020) * C48331 * C21948) *
                        C48439) *
                       C48717 +
                   ((C3479 * C48331 * C21946 + C9363 * C48331 * C21947 +
                     (C3639 + C3640 - C3641 - C3642) * C48331 * C21948) *
                        C2680 +
                    (C3917 * C48331 * C21946 +
                     (C3641 - (C3640 + C3639) + C3642) * C48331 * C21947 +
                     ((C113 * C1805 + C48597 * C1810) * C3457 -
                      (C1528 * C3454 + C1529 * C3456) +
                      (C113 * C1811 + C48597 * C1814) * C48481) *
                         C48331 * C21948) *
                        C48439) *
                       C48688)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C48597 * C122) * C3744 +
                     (C113 * C123 + C48597 * C136) * C48741 -
                     (C113 * C508 + C48597 * C518) * C3745 -
                     (C113 * C519 + C48597 * C538) * C48738 +
                     (C113 * C509 + C48597 * C520) * C3746 +
                     (C113 * C521 + C48597 * C539) * C48729 -
                     (C113 * C2136 + C48597 * C2142) * C3747 -
                     (C113 * C2143 + C48597 * C2154) * C48710) *
                        C48331 * C21946 +
                    (C10184 + C10185 - C10186 - C10187 + C10188 + C10189 -
                     C10190 - C10191) *
                        C48331 * C21947 +
                    (C25703 + C25704 - C25705 - C25706 + C25707 + C25708 -
                     C25709 - C25710) *
                        C48331 * C21948) *
                       C2680 +
                   ((C10186 - (C10185 + C10184) + C10187 - C10188 - C10189 +
                     C10190 + C10191) *
                        C48331 * C21946 +
                    (C25705 - (C25704 + C25703) + C25706 - C25707 - C25708 +
                     C25709 + C25710) *
                        C48331 * C21947 +
                    (C6779 * C3745 - (C6082 * C48741 + C6081 * C3744) +
                     C6780 * C48738 - C22828 * C3746 - C22829 * C48729 +
                     (C113 * C23841 + C48597 * C23842) * C3747 +
                     (C113 * C23843 + C48597 * C23844) * C48710) *
                        C48331 * C21948) *
                       C48439) *
                  C48350) /
                     (p * q * std::sqrt(p + q));
    d2ee[108] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C47163 +
             (C113 * C123 + C48597 * C136) * C48477 -
             (C113 * C508 + C48597 * C518) * C47155 -
             (C113 * C519 + C48597 * C538) * C48484 +
             (C113 * C509 + C48597 * C520) * C47169 +
             (C113 * C521 + C48597 * C539) * C4029) *
                C48331 * C21946 +
            (C9704 + C9705 - C9706 - C9707 + C9708 + C9709) * C48331 * C21947 +
            (C10728 + C10727 - C10726 - C10729 + C10730 + C10731) * C48331 *
                C21948) *
               C2680 +
           ((C9706 - (C9705 + C9704) + C9707 - C9708 - C9709) * C48331 *
                C21946 +
            (C10726 - (C10727 + C10728) + C10729 - C10730 - C10731) * C48331 *
                C21947 +
            (C6779 * C47155 - (C6082 * C48477 + C6081 * C47163) +
             C6780 * C48484 - C22828 * C47169 - C22829 * C4029) *
                C48331 * C21948) *
               C48439) *
              C48648 +
          (((C4036 - (C4035 + C4034) + C4037 - C4038 - C4039) * C48331 *
                C21946 +
            C9725 * C48331 * C21947 +
            (C9712 - (C9713 + C9714) + C9715 - C9716 - C9717) * C48331 *
                C21948) *
               C2680 +
           (C9724 * C48331 * C21946 +
            (C9714 + C9713 - C9712 - C9715 + C9716 + C9717) * C48331 * C21947 +
            (C1531 * C47163 + C1530 * C48477 - C6629 * C47155 - C6630 * C48484 +
             (C113 * C6239 + C48597 * C6242) * C47169 +
             (C113 * C6243 + C48597 * C6245) * C4029) *
                C48331 * C21948) *
               C48439) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[109] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48597 * C122) * C3456 +
                      (C113 * C123 + C48597 * C136) * C3454 -
                      (C113 * C508 + C48597 * C518) * C3457 -
                      (C113 * C519 + C48597 * C538) * C48481) *
                         C48331 * C21946 +
                     (C9005 + C9006 - C9007 - C9008) * C48331 * C21947 +
                     C24852 * C21948) *
                        C2680 +
                    ((C9007 - (C9006 + C9005) + C9008) * C48331 * C21946 +
                     (C9011 - (C9012 + C9013) + C9014) * C48331 * C21947 +
                     (C10052 - (C10051 + C10050) + C10053) * C48331 * C21948) *
                        C48439) *
                       C48730 +
                   (((C3461 - (C3460 + C3459) + C3462) * C48331 * C21946 +
                     C9026 * C48331 * C21947 + C24849 * C21948) *
                        C2680 +
                    (C9025 * C48331 * C21946 + C9028 * C48331 * C21947 +
                     (C9017 + C9018 - C9019 - C9020) * C48331 * C21948) *
                        C48439) *
                       C48717 +
                   ((C3479 * C48331 * C21946 + C9363 * C48331 * C21947 +
                     (C3639 + C3640 - C3641 - C3642) * C48331 * C21948) *
                        C2680 +
                    (C3917 * C48331 * C21946 +
                     (C3641 - (C3640 + C3639) + C3642) * C48331 * C21947 +
                     ((C113 * C1805 + C48597 * C1810) * C3457 -
                      (C1528 * C3454 + C1529 * C3456) +
                      (C113 * C1811 + C48597 * C1814) * C48481) *
                         C48331 * C21948) *
                        C48439) *
                       C48688)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C48597 * C122) * C3456 +
                     (C113 * C123 + C48597 * C136) * C3454 -
                     (C113 * C508 + C48597 * C518) * C3457 -
                     (C113 * C519 + C48597 * C538) * C48481) *
                        C48331 * C21946 +
                    (C9005 + C9006 - C9007 - C9008) * C48331 * C21947 +
                    C24852 * C21948) *
                       C48740 +
                   ((C9007 - (C9006 + C9005) + C9008) * C48331 * C21946 +
                    (C9011 - (C9012 + C9013) + C9014) * C48331 * C21947 +
                    C25604 * C21948) *
                       C48736 +
                   (C24852 * C21946 +
                    (C10050 + C10051 - C10052 - C10053) * C48331 * C21947 +
                    (C25598 + C25599 - C25600 - C25601) * C48331 * C21948) *
                       C48726 +
                   (C25604 * C21946 +
                    (C25600 - (C25599 + C25598) + C25601) * C48331 * C21947 +
                    ((C113 * C23183 + C48597 * C23184) * C3457 -
                     (C22700 * C3454 + C22701 * C3456) +
                     (C113 * C23185 + C48597 * C23186) * C48481) *
                        C48331 * C21948) *
                       C48704) *
                  C48350) /
                     (p * q * std::sqrt(p + q));
    d2ee[110] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C48331 * C21946 +
            (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
               C1509 -
           (C22698 * C21948 + (C5211 + C5212) * C48331 * C21947 +
            (C5210 + C5209) * C48331 * C21946) *
               C1510 +
           (C22063 * C21946 + (C6087 + C6088) * C48331 * C21947 +
            C22699 * C21948) *
               C1511 -
           ((C22702 + C22703) * C48331 * C21948 +
            (C6091 + C6092) * C48331 * C21947 + C22698 * C21946) *
               C48704) *
              C48648 +
          ((C5195 * C48331 * C21946 + C5202 * C48331 * C21947 +
            C22934 * C21948) *
               C1510 -
           (C22061 * C21948 + C5201 * C48331 * C21947 +
            (C175 + C174) * C48331 * C21946) *
               C1509 -
           ((C6089 + C6090) * C48331 * C21948 + C6420 * C48331 * C21947 +
            C22061 * C21946) *
               C1511 +
           (C22934 * C21946 + (C6090 + C6089) * C48331 * C21947 +
            ((C113 * C6061 + C48597 * C6064) * C114 +
             (C113 * C6065 + C48597 * C6067) * C48394) *
                C48331 * C21948) *
               C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C48331 * C21946 +
            (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
               C48662 -
           ((C6088 + C6087) * C48331 * C21948 +
            (C5211 + C5212) * C48331 * C21947 +
            (C5210 + C5209) * C48331 * C21946) *
               C48439) *
              C707 +
          ((C5195 * C48331 * C21946 + C5202 * C48331 * C21947 +
            C6419 * C48331 * C21948) *
               C48439 -
           (C22061 * C21948 + C5201 * C48331 * C21947 +
            (C175 + C174) * C48331 * C21946) *
               C48662) *
              C708 +
          ((C184 * C48331 * C21946 + C5203 * C48331 * C21947 +
            C22062 * C21948) *
               C48662 -
           ((C1532 + C1533) * C48331 * C21948 + C5204 * C48331 * C21947 +
            C391 * C48331 * C21946) *
               C48439) *
              C709 +
          ((C716 * C48331 * C21946 + (C390 + C389) * C48331 * C21947 +
            ((C113 * C1515 + C48597 * C1516) * C114 +
             (C113 * C1517 + C48597 * C1518) * C48394) *
                C48331 * C21948) *
               C48439 -
           ((C389 + C390) * C48331 * C21948 + C5489 * C48331 * C21947 +
            C185 * C48331 * C21946) *
               C48662) *
              C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C1928 +
             (C113 * C123 + C48597 * C136) * C1925 -
             (C113 * C508 + C48597 * C518) * C1929 -
             (C113 * C519 + C48597 * C538) * C1926 +
             (C113 * C509 + C48597 * C520) * C1930 +
             (C113 * C521 + C48597 * C539) * C48697) *
                C48331 * C21946 +
            (C7075 + C7076 - C7077 - C7078 + C7079 + C7080) * C48331 * C21947 +
            C23433 * C21948) *
               C48662 +
           ((C7077 - (C7076 + C7075) + C7078 - C7079 - C7080) * C48331 *
                C21946 +
            (C7081 - (C7082 + C7083) + C7084 - C7085 - C7086) * C48331 *
                C21947 +
            (C23423 - (C23424 + C23425) + C23426 - C23427 - C23428) * C48331 *
                C21948) *
               C48439) *
              C48648 +
          (((C1934 - (C1933 + C1932) + C1935 - C1936 - C1937) * C48331 *
                C21946 +
            C7386 * C48331 * C21947 +
            (C7087 - (C7088 + C7089) + C7090 - C7091 - C7092) * C48331 *
                C21948) *
               C48662 +
           (C7385 * C48331 * C21946 +
            (C7089 + C7088 - C7087 - C7090 + C7091 + C7092) * C48331 * C21947 +
            (C1531 * C1928 + C1530 * C1925 - C6629 * C1929 - C6630 * C1926 +
             (C113 * C6239 + C48597 * C6242) * C1930 +
             (C113 * C6243 + C48597 * C6245) * C48697) *
                C48331 * C21948) *
               C48439) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[111] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C824 +
            (C113 * C123 + C48597 * C136) * C48663 -
            (C113 * C508 + C48597 * C518) * C825 -
            (C113 * C519 + C48597 * C538) * C48481) *
               C48331 * C21946 +
           (C5814 + C5815 - C5828 - C5829) * C48331 * C21947 +
           C23085 * C21948) *
              C1509 +
          ((C5828 - (C5815 + C5814) + C5829) * C48331 * C21946 +
           (C6615 - (C6616 + C6617) + C6618) * C48331 * C21947 +
           C23201 * C21948) *
              C1510 +
          (C23085 * C21946 + (C6773 + C6774 - C6781 - C6782) * C48331 * C21947 +
           (C23189 + C23190 - C23199 - C23200) * C48331 * C21948) *
              C1511 +
          (C23201 * C21946 +
           (C23199 - (C23190 + C23189) + C23200) * C48331 * C21947 +
           ((C113 * C23183 + C48597 * C23184) * C825 -
            (C22700 * C48663 + C22701 * C824) +
            (C113 * C23185 + C48597 * C23186) * C48481) *
               C48331 * C21948) *
              C48704) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C824 +
             (C113 * C123 + C48597 * C136) * C48663 -
             (C113 * C508 + C48597 * C518) * C825 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C48331 * C21946 +
            (C5814 + C5815 - C5828 - C5829) * C48331 * C21947 +
            (C6617 + C6616 - C6615 - C6618) * C48331 * C21948) *
               C48662 +
           ((C5828 - (C5815 + C5814) + C5829) * C48331 * C21946 +
            (C6615 - (C6616 + C6617) + C6618) * C48331 * C21947 +
            (C6781 - (C6774 + C6773) + C6782) * C48331 * C21948) *
               C48439) *
              C299 +
          (((C833 - (C832 + C831) + C834) * C48331 * C21946 +
            C5831 * C48331 * C21947 + C6631 * C48331 * C21948) *
               C48662 +
           (C5830 * C48331 * C21946 + C6632 * C48331 * C21947 +
            (C6621 + C6622 - C6633 - C6634) * C48331 * C21948) *
               C48439) *
              C300 +
          ((C857 * C48331 * C21946 + C5832 * C48331 * C21947 +
            (C1692 + C1693 - C1704 - C1705) * C48331 * C21948) *
               C48662 +
           (C1057 * C48331 * C21946 +
            (C1704 - (C1693 + C1692) + C1705) * C48331 * C21947 +
            ((C113 * C1805 + C48597 * C1810) * C825 -
             (C1528 * C48663 + C1529 * C824) +
             (C113 * C1811 + C48597 * C1814) * C48481) *
                C48331 * C21948) *
               C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C2436 +
            (C113 * C123 + C48597 * C136) * C2432 -
            (C113 * C508 + C48597 * C518) * C2437 -
            (C113 * C519 + C48597 * C538) * C2433 +
            (C113 * C509 + C48597 * C520) * C2438 +
            (C113 * C521 + C48597 * C539) * C2434 -
            (C113 * C2136 + C48597 * C2142) * C2439 -
            (C113 * C2143 + C48597 * C2154) * C48710) *
               C48331 * C21946 +
           (C7669 + C7670 - C7671 - C7672 + C7673 + C7674 - C7681 - C7682) *
               C48331 * C21947 +
           (C23846 + C23847 - C23848 - C23849 + C23850 + C23851 - C23858 -
            C23859) *
               C48331 * C21948) *
              C48662 +
          ((C7671 - (C7670 + C7669) + C7672 - C7673 - C7674 + C7681 + C7682) *
               C48331 * C21946 +
           (C23848 - (C23847 + C23846) + C23849 - C23850 - C23851 + C23858 +
            C23859) *
               C48331 * C21947 +
           (C6779 * C2437 - (C6082 * C2432 + C6081 * C2436) + C6780 * C2433 -
            C22828 * C2438 - C22829 * C2434 +
            (C113 * C23841 + C48597 * C23842) * C2439 +
            (C113 * C23843 + C48597 * C23844) * C48710) *
               C48331 * C21948) *
              C48439) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[112] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C113 * C115 + C48597 * C122) * C114 +
                (C113 * C123 + C48597 * C136) * C48394) *
                   C48331 * C21946 +
               (C5209 + C5210) * C48331 * C21947 +
               (C5212 + C5211) * C48331 * C21948) *
                  C48377 * C108 -
              (C5196 * C48331 * C21948 + C5201 * C48331 * C21947 +
               (C175 + C174) * C48331 * C21946) *
                  C48377 * C109 +
              (C184 * C48331 * C21946 + C5203 * C48331 * C21947 +
               C392 * C48331 * C21948) *
                  C48377 * C110 -
              ((C389 + C390) * C48331 * C21948 + C5489 * C48331 * C21947 +
               C185 * C48331 * C21946) *
                  C48377 * C111 +
              (C186 * C48331 * C21946 + (C724 + C723) * C48331 * C21947 +
               ((C113 * C311 + C48597 * C330) * C114 +
                (C113 * C331 + C48597 * C341) * C48394) *
                   C48331 * C21948) *
                  C48377 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C113 * C115 + C48597 * C122) * C114 +
                 (C113 * C123 + C48597 * C136) * C48394) *
                    C48331 * C21946 +
                (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
                   C48733 -
               ((C6088 + C6087) * C48331 * C21948 +
                (C5211 + C5212) * C48331 * C21947 +
                (C5210 + C5209) * C48331 * C21946) *
                   C48721 +
               (C22063 * C21946 + (C6087 + C6088) * C48331 * C21947 +
                (C6092 + C6091) * C48331 * C21948) *
                   C48694) *
                  C299 +
              ((C5195 * C48331 * C21946 + C5202 * C48331 * C21947 +
                C6419 * C48331 * C21948) *
                   C48721 -
               (C22061 * C21948 + C5201 * C48331 * C21947 +
                (C175 + C174) * C48331 * C21946) *
                   C48733 -
               ((C6089 + C6090) * C48331 * C21948 + C6420 * C48331 * C21947 +
                C22061 * C21946) *
                   C48694) *
                  C300 +
              ((C184 * C48331 * C21946 + C5203 * C48331 * C21947 +
                C22062 * C21948) *
                   C48733 -
               ((C1532 + C1533) * C48331 * C21948 + C5204 * C48331 * C21947 +
                C391 * C48331 * C21946) *
                   C48721 +
               (C22062 * C21946 + (C1533 + C1532) * C48331 * C21947 +
                ((C113 * C1246 + C48597 * C1257) * C114 +
                 (C113 * C1258 + C48597 * C1264) * C48394) *
                    C48331 * C21948) *
                   C48694) *
                  C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C505 +
            (C113 * C123 + C48597 * C136) * C48734 -
            (C113 * C508 + C48597 * C518) * C506 -
            (C113 * C519 + C48597 * C538) * C48723 +
            (C113 * C509 + C48597 * C520) * C507 +
            (C113 * C521 + C48597 * C539) * C48697) *
               C48331 * C21946 +
           (C6247 + C6248 - C6249 - C6250 + C6281 + C6282) * C48331 * C21947 +
           (C6258 + C6257 - C6283 - C6284 + C6285 + C6286) * C48331 * C21948) *
              C48377 * C299 +
          ((C592 - (C550 + C549) + C593 - C594 - C595) * C48331 * C21946 +
           C8146 * C48331 * C21947 +
           (C6265 - (C6266 + C6267) + C6268 - C6287 - C6288) * C48331 *
               C21948) *
              C48377 * C300 +
          (C607 * C48331 * C21946 +
           (C2945 + C2944 - C2943 - C2946 + C2947 + C2948) * C48331 * C21947 +
           (C373 * C505 + C374 * C48734 - C1700 * C506 - C1701 * C48723 +
            (C113 * C1383 + C48597 * C1400) * C507 +
            (C113 * C1401 + C48597 * C1410) * C48697) *
               C48331 * C21948) *
              C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C48331 * C21946 +
            (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
               C1167 -
           ((C6088 + C6087) * C48331 * C21948 +
            (C5211 + C5212) * C48331 * C21947 +
            (C5210 + C5209) * C48331 * C21946) *
               C1168 +
           (C22063 * C21946 + (C6087 + C6088) * C48331 * C21947 +
            (C6092 + C6091) * C48331 * C21948) *
               C48694) *
              C48730 +
          ((C5195 * C48331 * C21946 + C5202 * C48331 * C21947 +
            C6419 * C48331 * C21948) *
               C1168 -
           (C22061 * C21948 + C5201 * C48331 * C21947 +
            (C175 + C174) * C48331 * C21946) *
               C1167 -
           ((C6089 + C6090) * C48331 * C21948 + C6420 * C48331 * C21947 +
            C22061 * C21946) *
               C48694) *
              C48717 +
          ((C184 * C48331 * C21946 + C5203 * C48331 * C21947 +
            C22062 * C21948) *
               C1167 -
           ((C1532 + C1533) * C48331 * C21948 + C5204 * C48331 * C21947 +
            C391 * C48331 * C21946) *
               C1168 +
           (C22062 * C21946 + (C1533 + C1532) * C48331 * C21947 +
            ((C113 * C1246 + C48597 * C1257) * C114 +
             (C113 * C1258 + C48597 * C1264) * C48394) *
                C48331 * C21948) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C114 +
            (C113 * C123 + C48597 * C136) * C48394) *
               C48331 * C21946 +
           (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
              C1235 -
          (C22698 * C21948 + (C5211 + C5212) * C48331 * C21947 +
           (C5210 + C5209) * C48331 * C21946) *
              C1236 +
          (C22063 * C21946 + (C6087 + C6088) * C48331 * C21947 +
           C22699 * C21948) *
              C1237 -
          ((C22702 + C22703) * C48331 * C21948 +
           (C6091 + C6092) * C48331 * C21947 + C22698 * C21946) *
              C1238 +
          (C22699 * C21946 + (C22703 + C22702) * C48331 * C21947 +
           ((C113 * C22687 + C48597 * C22688) * C114 +
            (C113 * C22689 + C48597 * C22690) * C48394) *
               C48331 * C21948) *
              C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C505 +
            (C113 * C123 + C48597 * C136) * C48734 -
            (C113 * C508 + C48597 * C518) * C506 -
            (C113 * C519 + C48597 * C538) * C48723 +
            (C113 * C509 + C48597 * C520) * C507 +
            (C113 * C521 + C48597 * C539) * C48697) *
               C48331 * C21946 +
           (C6247 + C6248 - C6249 - C6250 + C6281 + C6282) * C48331 * C21947 +
           C22835 * C21948) *
              C1167 +
          ((C6249 - (C6248 + C6247) + C6250 - C6281 - C6282) * C48331 * C21946 +
           (C6283 - (C6257 + C6258) + C6284 - C6285 - C6286) * C48331 * C21947 +
           (C22819 - (C22820 + C22821) + C22822 - C22831 - C22832) * C48331 *
               C21948) *
              C1168 +
          (C22835 * C21946 +
           (C22821 + C22820 - C22819 - C22822 + C22831 + C22832) * C48331 *
               C21947 +
           (C6086 * C505 + C6085 * C48734 -
            (C113 * C6764 + C48597 * C6766) * C506 -
            (C113 * C6767 + C48597 * C6770) * C48723 +
            (C113 * C22813 + C48597 * C22814) * C507 +
            (C113 * C22815 + C48597 * C22816) * C48697) *
               C48331 * C21948) *
              C48694) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C1928 +
            (C113 * C123 + C48597 * C136) * C1925 -
            (C113 * C508 + C48597 * C518) * C1929 -
            (C113 * C519 + C48597 * C538) * C1926 +
            (C113 * C509 + C48597 * C520) * C1930 +
            (C113 * C521 + C48597 * C539) * C48697) *
               C48331 * C21946 +
           (C7075 + C7076 - C7077 - C7078 + C7079 + C7080) * C48331 * C21947 +
           (C7083 + C7082 - C7081 - C7084 + C7085 + C7086) * C48331 * C21948) *
              C48377 * C48730 +
          ((C1934 - (C1933 + C1932) + C1935 - C1936 - C1937) * C48331 * C21946 +
           C7386 * C48331 * C21947 +
           (C7087 - (C7088 + C7089) + C7090 - C7091 - C7092) * C48331 *
               C21948) *
              C48377 * C48717 +
          (C1954 * C48331 * C21946 +
           (C2321 + C2320 - C2319 - C2322 + C2333 + C2334) * C48331 * C21947 +
           (C373 * C1928 + C374 * C1925 - C1700 * C1929 - C1701 * C1926 +
            (C113 * C1383 + C48597 * C1400) * C1930 +
            (C113 * C1401 + C48597 * C1410) * C48697) *
               C48331 * C21948) *
              C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C1928 +
            (C113 * C123 + C48597 * C136) * C1925 -
            (C113 * C508 + C48597 * C518) * C1929 -
            (C113 * C519 + C48597 * C538) * C1926 +
            (C113 * C509 + C48597 * C520) * C1930 +
            (C113 * C521 + C48597 * C539) * C48697) *
               C48331 * C21946 +
           (C7075 + C7076 - C7077 - C7078 + C7079 + C7080) * C48331 * C21947 +
           C23433 * C21948) *
              C48733 +
          ((C7077 - (C7076 + C7075) + C7078 - C7079 - C7080) * C48331 * C21946 +
           (C7081 - (C7082 + C7083) + C7084 - C7085 - C7086) * C48331 * C21947 +
           (C23423 - (C23424 + C23425) + C23426 - C23427 - C23428) * C48331 *
               C21948) *
              C48721 +
          (C23433 * C21946 +
           (C23425 + C23424 - C23423 - C23426 + C23427 + C23428) * C48331 *
               C21947 +
           (C6086 * C1928 + C6085 * C1925 - C23196 * C1929 - C23197 * C1926 +
            (C113 * C22813 + C48597 * C22814) * C1930 +
            (C113 * C22815 + C48597 * C22816) * C48697) *
               C48331 * C21948) *
              C48694) *
         C48350) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C113 * C115 + C48597 * C122) * C2131 +
           (C113 * C123 + C48597 * C136) * C2126 -
           (C113 * C508 + C48597 * C518) * C2132 -
           (C113 * C519 + C48597 * C538) * C2127 +
           (C113 * C509 + C48597 * C520) * C2133 +
           (C113 * C521 + C48597 * C539) * C2128 -
           (C113 * C2136 + C48597 * C2142) * C2134 -
           (C113 * C2143 + C48597 * C2154) * C2129 +
           (C113 * C2137 + C48597 * C2144) * C2135 +
           (C113 * C2145 + C48597 * C2155) * C2130) *
              C48331 * C21946 +
          (C5205 * C2131 + C5206 * C2126 - C5823 * C2132 - C5824 * C2127 +
           C6273 * C2133 + C6274 * C2128 - C7679 * C2134 - C7680 * C2129 +
           (C113 * C7174 + C48597 * C7176) * C2135 +
           (C113 * C7177 + C48597 * C7180) * C2130) *
              C48331 * C21947 +
          (C5208 * C2131 + C5207 * C2126 - C6275 * C2132 - C6276 * C2127 +
           C6277 * C2133 + C6278 * C2128 -
           (C113 * C7660 + C48597 * C7662) * C2134 -
           (C113 * C7663 + C48597 * C7666) * C2129 +
           (C113 * C23495 + C48597 * C23496) * C2135 +
           (C113 * C23497 + C48597 * C23498) * C2130) *
              C48331 * C21948) *
         C48377 * C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[113] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C824 +
             (C113 * C123 + C48597 * C136) * C48663 -
             (C113 * C508 + C48597 * C518) * C825 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C48331 * C21946 +
            (C5814 + C5815 - C5828 - C5829) * C48331 * C21947 +
            C23085 * C21948) *
               C1167 +
           ((C5828 - (C5815 + C5814) + C5829) * C48331 * C21946 +
            (C6615 - (C6616 + C6617) + C6618) * C48331 * C21947 +
            (C6781 - (C6774 + C6773) + C6782) * C48331 * C21948) *
               C1168 +
           (C23085 * C21946 +
            (C6773 + C6774 - C6781 - C6782) * C48331 * C21947 +
            (C6086 * C824 + C6085 * C48663 -
             (C113 * C6764 + C48597 * C6766) * C825 -
             (C113 * C6767 + C48597 * C6770) * C48481) *
                C48331 * C21948) *
               C48694) *
              C48648 +
          (((C833 - (C832 + C831) + C834) * C48331 * C21946 +
            C5831 * C48331 * C21947 + C23082 * C21948) *
               C1167 +
           (C5830 * C48331 * C21946 + C6632 * C48331 * C21947 +
            (C6621 + C6622 - C6633 - C6634) * C48331 * C21948) *
               C1168 +
           (C23082 * C21946 +
            (C6633 - (C6622 + C6621) + C6634) * C48331 * C21947 +
            ((C113 * C6765 + C48597 * C6768) * C825 -
             (C6083 * C48663 + C6084 * C824) +
             (C113 * C6769 + C48597 * C6771) * C48481) *
                C48331 * C21948) *
               C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C824 +
            (C113 * C123 + C48597 * C136) * C48663 -
            (C113 * C508 + C48597 * C518) * C825 -
            (C113 * C519 + C48597 * C538) * C48481) *
               C48331 * C21946 +
           (C5814 + C5815 - C5828 - C5829) * C48331 * C21947 +
           (C6617 + C6616 - C6615 - C6618) * C48331 * C21948) *
              C48377 * C707 +
          ((C833 - (C832 + C831) + C834) * C48331 * C21946 +
           C5831 * C48331 * C21947 + C6631 * C48331 * C21948) *
              C48377 * C708 +
          (C857 * C48331 * C21946 + C5832 * C48331 * C21947 +
           (C1692 + C1693 - C1704 - C1705) * C48331 * C21948) *
              C48377 * C709 +
          (C858 * C48331 * C21946 +
           (C1054 - (C1038 + C1037) + C1055) * C48331 * C21947 +
           ((C113 * C1681 + C48597 * C1682) * C825 -
            (C377 * C48663 + C378 * C824) +
            (C113 * C1683 + C48597 * C1684) * C48481) *
               C48331 * C21948) *
              C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C2436 +
            (C113 * C123 + C48597 * C136) * C2432 -
            (C113 * C508 + C48597 * C518) * C2437 -
            (C113 * C519 + C48597 * C538) * C2433 +
            (C113 * C509 + C48597 * C520) * C2438 +
            (C113 * C521 + C48597 * C539) * C2434 -
            (C113 * C2136 + C48597 * C2142) * C2439 -
            (C113 * C2143 + C48597 * C2154) * C48710) *
               C48331 * C21946 +
           (C7669 + C7670 - C7671 - C7672 + C7673 + C7674 - C7681 - C7682) *
               C48331 * C21947 +
           (C5208 * C2436 + C5207 * C2432 - C6275 * C2437 - C6276 * C2433 +
            C6277 * C2438 + C6278 * C2434 -
            (C113 * C7660 + C48597 * C7662) * C2439 -
            (C113 * C7663 + C48597 * C7666) * C48710) *
               C48331 * C21948) *
              C48377 * C48648 +
          ((C2447 - (C2446 + C2445) + C2448 - C2449 - C2450 + C2469 + C2470) *
               C48331 * C21946 +
           (C7519 - (C7518 + C7517) + C7520 - C7521 - C7522 + C7529 + C7530) *
               C48331 * C21947 +
           (C1698 * C2437 - (C372 * C2432 + C371 * C2436) + C1699 * C2433 -
            C6279 * C2438 - C6280 * C2434 +
            (C113 * C7661 + C48597 * C7664) * C2439 +
            (C113 * C7665 + C48597 * C7667) * C48710) *
               C48331 * C21948) *
              C48377 * C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[114] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C48331 * C21946 +
            (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
               C48733 -
           ((C6088 + C6087) * C48331 * C21948 +
            (C5211 + C5212) * C48331 * C21947 +
            (C5210 + C5209) * C48331 * C21946) *
               C48721 +
           (C22063 * C21946 + (C6087 + C6088) * C48331 * C21947 +
            (C6092 + C6091) * C48331 * C21948) *
               C48694) *
              C299 +
          ((C5195 * C48331 * C21946 + C5202 * C48331 * C21947 +
            C6419 * C48331 * C21948) *
               C48721 -
           (C22061 * C21948 + C5201 * C48331 * C21947 +
            (C175 + C174) * C48331 * C21946) *
               C48733 -
           ((C6089 + C6090) * C48331 * C21948 + C6420 * C48331 * C21947 +
            C22061 * C21946) *
               C48694) *
              C300 +
          ((C184 * C48331 * C21946 + C5203 * C48331 * C21947 +
            C22062 * C21948) *
               C48733 -
           ((C1532 + C1533) * C48331 * C21948 + C5204 * C48331 * C21947 +
            C391 * C48331 * C21946) *
               C48721 +
           (C22062 * C21946 + (C1533 + C1532) * C48331 * C21947 +
            ((C113 * C1246 + C48597 * C1257) * C114 +
             (C113 * C1258 + C48597 * C1264) * C48394) *
                C48331 * C21948) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C114 +
            (C113 * C123 + C48597 * C136) * C48394) *
               C48331 * C21946 +
           (C5209 + C5210) * C48331 * C21947 +
           (C5212 + C5211) * C48331 * C21948) *
              C48377 * C108 -
          (C5196 * C48331 * C21948 + C5201 * C48331 * C21947 +
           (C175 + C174) * C48331 * C21946) *
              C48377 * C109 +
          (C184 * C48331 * C21946 + C5203 * C48331 * C21947 +
           C392 * C48331 * C21948) *
              C48377 * C110 -
          ((C389 + C390) * C48331 * C21948 + C5489 * C48331 * C21947 +
           C185 * C48331 * C21946) *
              C48377 * C111 +
          (C186 * C48331 * C21946 + (C724 + C723) * C48331 * C21947 +
           ((C113 * C311 + C48597 * C330) * C114 +
            (C113 * C331 + C48597 * C341) * C48394) *
               C48331 * C21948) *
              C48377 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C48331 * C21946 +
            (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
               C1167 -
           ((C6088 + C6087) * C48331 * C21948 +
            (C5211 + C5212) * C48331 * C21947 +
            (C5210 + C5209) * C48331 * C21946) *
               C1168 +
           (C22063 * C21946 + (C6087 + C6088) * C48331 * C21947 +
            (C6092 + C6091) * C48331 * C21948) *
               C48694) *
              C48730 +
          ((C5195 * C48331 * C21946 + C5202 * C48331 * C21947 +
            C6419 * C48331 * C21948) *
               C1168 -
           (C22061 * C21948 + C5201 * C48331 * C21947 +
            (C175 + C174) * C48331 * C21946) *
               C1167 -
           ((C6089 + C6090) * C48331 * C21948 + C6420 * C48331 * C21947 +
            C22061 * C21946) *
               C48694) *
              C48717 +
          ((C184 * C48331 * C21946 + C5203 * C48331 * C21947 +
            C22062 * C21948) *
               C1167 -
           ((C1532 + C1533) * C48331 * C21948 + C5204 * C48331 * C21947 +
            C391 * C48331 * C21946) *
               C1168 +
           (C22062 * C21946 + (C1533 + C1532) * C48331 * C21947 +
            ((C113 * C1246 + C48597 * C1257) * C114 +
             (C113 * C1258 + C48597 * C1264) * C48394) *
                C48331 * C21948) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C114 +
            (C113 * C123 + C48597 * C136) * C48394) *
               C48331 * C21946 +
           (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
              C1235 -
          (C22698 * C21948 + (C5211 + C5212) * C48331 * C21947 +
           (C5210 + C5209) * C48331 * C21946) *
              C1236 +
          (C22063 * C21946 + (C6087 + C6088) * C48331 * C21947 +
           C22699 * C21948) *
              C1237 -
          ((C22702 + C22703) * C48331 * C21948 +
           (C6091 + C6092) * C48331 * C21947 + C22698 * C21946) *
              C1238 +
          (C22699 * C21946 + (C22703 + C22702) * C48331 * C21947 +
           ((C113 * C22687 + C48597 * C22688) * C114 +
            (C113 * C22689 + C48597 * C22690) * C48394) *
               C48331 * C21948) *
              C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C1928 +
            (C113 * C123 + C48597 * C136) * C1925 -
            (C113 * C508 + C48597 * C518) * C1929 -
            (C113 * C519 + C48597 * C538) * C1926 +
            (C113 * C509 + C48597 * C520) * C1930 +
            (C113 * C521 + C48597 * C539) * C48697) *
               C48331 * C21946 +
           (C7075 + C7076 - C7077 - C7078 + C7079 + C7080) * C48331 * C21947 +
           (C7083 + C7082 - C7081 - C7084 + C7085 + C7086) * C48331 * C21948) *
              C48377 * C48730 +
          ((C1934 - (C1933 + C1932) + C1935 - C1936 - C1937) * C48331 * C21946 +
           C7386 * C48331 * C21947 +
           (C7087 - (C7088 + C7089) + C7090 - C7091 - C7092) * C48331 *
               C21948) *
              C48377 * C48717 +
          (C1954 * C48331 * C21946 +
           (C2321 + C2320 - C2319 - C2322 + C2333 + C2334) * C48331 * C21947 +
           (C373 * C1928 + C374 * C1925 - C1700 * C1929 - C1701 * C1926 +
            (C113 * C1383 + C48597 * C1400) * C1930 +
            (C113 * C1401 + C48597 * C1410) * C48697) *
               C48331 * C21948) *
              C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C1928 +
            (C113 * C123 + C48597 * C136) * C1925 -
            (C113 * C508 + C48597 * C518) * C1929 -
            (C113 * C519 + C48597 * C538) * C1926 +
            (C113 * C509 + C48597 * C520) * C1930 +
            (C113 * C521 + C48597 * C539) * C48697) *
               C48331 * C21946 +
           (C7075 + C7076 - C7077 - C7078 + C7079 + C7080) * C48331 * C21947 +
           C23433 * C21948) *
              C48733 +
          ((C7077 - (C7076 + C7075) + C7078 - C7079 - C7080) * C48331 * C21946 +
           (C7081 - (C7082 + C7083) + C7084 - C7085 - C7086) * C48331 * C21947 +
           (C23423 - (C23424 + C23425) + C23426 - C23427 - C23428) * C48331 *
               C21948) *
              C48721 +
          (C23433 * C21946 +
           (C23425 + C23424 - C23423 - C23426 + C23427 + C23428) * C48331 *
               C21947 +
           (C6086 * C1928 + C6085 * C1925 - C23196 * C1929 - C23197 * C1926 +
            (C113 * C22813 + C48597 * C22814) * C1930 +
            (C113 * C22815 + C48597 * C22816) * C48697) *
               C48331 * C21948) *
              C48694) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[115] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48597 * C122) * C3456 +
                      (C113 * C123 + C48597 * C136) * C3454 -
                      (C113 * C508 + C48597 * C518) * C3457 -
                      (C113 * C519 + C48597 * C538) * C48481) *
                         C48331 * C21946 +
                     (C9005 + C9006 - C9007 - C9008) * C48331 * C21947 +
                     C24852 * C21948) *
                        C48662 +
                    ((C9007 - (C9006 + C9005) + C9008) * C48331 * C21946 +
                     (C9011 - (C9012 + C9013) + C9014) * C48331 * C21947 +
                     (C10052 - (C10051 + C10050) + C10053) * C48331 * C21948) *
                        C48439) *
                       C48355 +
                   (((C3461 - (C3460 + C3459) + C3462) * C48331 * C21946 +
                     C9026 * C48331 * C21947 + C24849 * C21948) *
                        C48662 +
                    (C9025 * C48331 * C21946 + C9028 * C48331 * C21947 +
                     (C9017 + C9018 - C9019 - C9020) * C48331 * C21948) *
                        C48439) *
                       C48363 +
                   ((C3479 * C48331 * C21946 + C9363 * C48331 * C21947 +
                     (C3639 + C3640 - C3641 - C3642) * C48331 * C21948) *
                        C48662 +
                    (C3917 * C48331 * C21946 +
                     (C3641 - (C3640 + C3639) + C3642) * C48331 * C21947 +
                     ((C113 * C1805 + C48597 * C1810) * C3457 -
                      (C1528 * C3454 + C1529 * C3456) +
                      (C113 * C1811 + C48597 * C1814) * C48481) *
                         C48331 * C21948) *
                        C48439) *
                       C3063)) /
                 (p * q * std::sqrt(p + q));
    d2ee[116] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C47163 +
             (C113 * C123 + C48597 * C136) * C48477 -
             (C113 * C508 + C48597 * C518) * C47155 -
             (C113 * C519 + C48597 * C538) * C48484 +
             (C113 * C509 + C48597 * C520) * C47169 +
             (C113 * C521 + C48597 * C539) * C4029) *
                C48331 * C21946 +
            (C9704 + C9705 - C9706 - C9707 + C9708 + C9709) * C48331 * C21947 +
            (C10728 + C10727 - C10726 - C10729 + C10730 + C10731) * C48331 *
                C21948) *
               C48662 +
           ((C9706 - (C9705 + C9704) + C9707 - C9708 - C9709) * C48331 *
                C21946 +
            (C10726 - (C10727 + C10728) + C10729 - C10730 - C10731) * C48331 *
                C21947 +
            (C6779 * C47155 - (C6082 * C48477 + C6081 * C47163) +
             C6780 * C48484 - C22828 * C47169 - C22829 * C4029) *
                C48331 * C21948) *
               C48439) *
              C2788 +
          (((C4036 - (C4035 + C4034) + C4037 - C4038 - C4039) * C48331 *
                C21946 +
            C9725 * C48331 * C21947 +
            (C9712 - (C9713 + C9714) + C9715 - C9716 - C9717) * C48331 *
                C21948) *
               C48662 +
           (C9724 * C48331 * C21946 +
            (C9714 + C9713 - C9712 - C9715 + C9716 + C9717) * C48331 * C21947 +
            (C1531 * C47163 + C1530 * C48477 - C6629 * C47155 - C6630 * C48484 +
             (C113 * C6239 + C48597 * C6242) * C47169 +
             (C113 * C6243 + C48597 * C6245) * C4029) *
                C48331 * C21948) *
               C48439) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[117] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C3456 +
             (C113 * C123 + C48597 * C136) * C3454 -
             (C113 * C508 + C48597 * C518) * C3457 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C48331 * C21946 +
            (C9005 + C9006 - C9007 - C9008) * C48331 * C21947 +
            C24852 * C21948) *
               C48733 +
           ((C9007 - (C9006 + C9005) + C9008) * C48331 * C21946 +
            (C9011 - (C9012 + C9013) + C9014) * C48331 * C21947 +
            (C10052 - (C10051 + C10050) + C10053) * C48331 * C21948) *
               C48721 +
           (C24852 * C21946 +
            (C10050 + C10051 - C10052 - C10053) * C48331 * C21947 +
            (C6086 * C3456 + C6085 * C3454 - C23196 * C3457 - C23197 * C48481) *
                C48331 * C21948) *
               C48694) *
              C2788 +
          (((C3461 - (C3460 + C3459) + C3462) * C48331 * C21946 +
            C9026 * C48331 * C21947 + C24849 * C21948) *
               C48733 +
           (C9025 * C48331 * C21946 + C9028 * C48331 * C21947 +
            (C9017 + C9018 - C9019 - C9020) * C48331 * C21948) *
               C48721 +
           (C24849 * C21946 +
            (C9019 - (C9018 + C9017) + C9020) * C48331 * C21947 +
            ((C113 * C6765 + C48597 * C6768) * C3457 -
             (C6083 * C3454 + C6084 * C3456) +
             (C113 * C6769 + C48597 * C6771) * C48481) *
                C48331 * C21948) *
               C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C3456 +
            (C113 * C123 + C48597 * C136) * C3454 -
            (C113 * C508 + C48597 * C518) * C3457 -
            (C113 * C519 + C48597 * C538) * C48481) *
               C48331 * C21946 +
           (C9005 + C9006 - C9007 - C9008) * C48331 * C21947 +
           (C9013 + C9012 - C9011 - C9014) * C48331 * C21948) *
              C48377 * C48739 +
          ((C3461 - (C3460 + C3459) + C3462) * C48331 * C21946 +
           C9026 * C48331 * C21947 + C9027 * C48331 * C21948) *
              C48377 * C48732 +
          (C3479 * C48331 * C21946 + C9363 * C48331 * C21947 +
           (C3639 + C3640 - C3641 - C3642) * C48331 * C21948) *
              C48377 * C48719 +
          (C3480 * C48331 * C21946 +
           (C3914 - (C3913 + C3912) + C3915) * C48331 * C21947 +
           ((C113 * C1681 + C48597 * C1682) * C3457 -
            (C377 * C3454 + C378 * C3456) +
            (C113 * C1683 + C48597 * C1684) * C48481) *
               C48331 * C21948) *
              C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C3744 +
            (C113 * C123 + C48597 * C136) * C48741 -
            (C113 * C508 + C48597 * C518) * C3745 -
            (C113 * C519 + C48597 * C538) * C48738 +
            (C113 * C509 + C48597 * C520) * C3746 +
            (C113 * C521 + C48597 * C539) * C48729 -
            (C113 * C2136 + C48597 * C2142) * C3747 -
            (C113 * C2143 + C48597 * C2154) * C48710) *
               C48331 * C21946 +
           (C10184 + C10185 - C10186 - C10187 + C10188 + C10189 - C10190 -
            C10191) *
               C48331 * C21947 +
           (C5208 * C3744 + C5207 * C48741 - C6275 * C3745 - C6276 * C48738 +
            C6277 * C3746 + C6278 * C48729 - C23856 * C3747 - C23857 * C48710) *
               C48331 * C21948) *
              C48377 * C2788 +
          ((C3751 - (C3750 + C3749) + C3752 - C3753 - C3754 + C3755 + C3756) *
               C48331 * C21946 +
           (C9161 - (C9160 + C9159) + C9162 - C9163 - C9164 + C9165 + C9166) *
               C48331 * C21947 +
           (C1698 * C3745 - (C372 * C48741 + C371 * C3744) + C1699 * C48738 -
            C6279 * C3746 - C6280 * C48729 +
            (C113 * C7661 + C48597 * C7664) * C3747 +
            (C113 * C7665 + C48597 * C7667) * C48710) *
               C48331 * C21948) *
              C48377 * C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[118] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C47163 +
            (C113 * C123 + C48597 * C136) * C48477 -
            (C113 * C508 + C48597 * C518) * C47155 -
            (C113 * C519 + C48597 * C538) * C48484 +
            (C113 * C509 + C48597 * C520) * C47169 +
            (C113 * C521 + C48597 * C539) * C4029) *
               C48331 * C21946 +
           (C9704 + C9705 - C9706 - C9707 + C9708 + C9709) * C48331 * C21947 +
           (C10728 + C10727 - C10726 - C10729 + C10730 + C10731) * C48331 *
               C21948) *
              C48377 * C48355 +
          ((C4036 - (C4035 + C4034) + C4037 - C4038 - C4039) * C48331 * C21946 +
           C9725 * C48331 * C21947 +
           (C9712 - (C9713 + C9714) + C9715 - C9716 - C9717) * C48331 *
               C21948) *
              C48377 * C48363 +
          (C4056 * C48331 * C21946 +
           (C4211 + C4210 - C4209 - C4212 + C4213 + C4214) * C48331 * C21947 +
           (C373 * C47163 + C374 * C48477 - C1700 * C47155 - C1701 * C48484 +
            (C113 * C1383 + C48597 * C1400) * C47169 +
            (C113 * C1401 + C48597 * C1410) * C4029) *
               C48331 * C21948) *
              C48377 * C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[119] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C3456 +
            (C113 * C123 + C48597 * C136) * C3454 -
            (C113 * C508 + C48597 * C518) * C3457 -
            (C113 * C519 + C48597 * C538) * C48481) *
               C48331 * C21946 +
           (C9005 + C9006 - C9007 - C9008) * C48331 * C21947 +
           (C9013 + C9012 - C9011 - C9014) * C48331 * C21948) *
              C48377 * C48739 +
          ((C3461 - (C3460 + C3459) + C3462) * C48331 * C21946 +
           C9026 * C48331 * C21947 + C9027 * C48331 * C21948) *
              C48377 * C48732 +
          (C3479 * C48331 * C21946 + C9363 * C48331 * C21947 +
           (C3639 + C3640 - C3641 - C3642) * C48331 * C21948) *
              C48377 * C48719 +
          (C3480 * C48331 * C21946 +
           (C3914 - (C3913 + C3912) + C3915) * C48331 * C21947 +
           ((C113 * C1681 + C48597 * C1682) * C3457 -
            (C377 * C3454 + C378 * C3456) +
            (C113 * C1683 + C48597 * C1684) * C48481) *
               C48331 * C21948) *
              C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C3456 +
             (C113 * C123 + C48597 * C136) * C3454 -
             (C113 * C508 + C48597 * C518) * C3457 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C48331 * C21946 +
            (C9005 + C9006 - C9007 - C9008) * C48331 * C21947 +
            C24852 * C21948) *
               C48733 +
           ((C9007 - (C9006 + C9005) + C9008) * C48331 * C21946 +
            (C9011 - (C9012 + C9013) + C9014) * C48331 * C21947 +
            (C10052 - (C10051 + C10050) + C10053) * C48331 * C21948) *
               C48721 +
           (C24852 * C21946 +
            (C10050 + C10051 - C10052 - C10053) * C48331 * C21947 +
            (C6086 * C3456 + C6085 * C3454 - C23196 * C3457 - C23197 * C48481) *
                C48331 * C21948) *
               C48694) *
              C2788 +
          (((C3461 - (C3460 + C3459) + C3462) * C48331 * C21946 +
            C9026 * C48331 * C21947 + C24849 * C21948) *
               C48733 +
           (C9025 * C48331 * C21946 + C9028 * C48331 * C21947 +
            (C9017 + C9018 - C9019 - C9020) * C48331 * C21948) *
               C48721 +
           (C24849 * C21946 +
            (C9019 - (C9018 + C9017) + C9020) * C48331 * C21947 +
            ((C113 * C6765 + C48597 * C6768) * C3457 -
             (C6083 * C3454 + C6084 * C3456) +
             (C113 * C6769 + C48597 * C6771) * C48481) *
                C48331 * C21948) *
               C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[120] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48597 * C122) * C114 +
                      (C113 * C123 + C48597 * C136) * C48394) *
                         C48331 * C21946 +
                     (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
                        C48662 -
                    ((C6088 + C6087) * C48331 * C21948 +
                     (C5211 + C5212) * C48331 * C21947 +
                     (C5210 + C5209) * C48331 * C21946) *
                        C48439) *
                       C707 +
                   ((C5195 * C48331 * C21946 + C5202 * C48331 * C21947 +
                     C6419 * C48331 * C21948) *
                        C48439 -
                    (C22061 * C21948 + C5201 * C48331 * C21947 +
                     (C175 + C174) * C48331 * C21946) *
                        C48662) *
                       C708 +
                   ((C184 * C48331 * C21946 + C5203 * C48331 * C21947 +
                     C22062 * C21948) *
                        C48662 -
                    ((C1532 + C1533) * C48331 * C21948 +
                     C5204 * C48331 * C21947 + C391 * C48331 * C21946) *
                        C48439) *
                       C709 +
                   ((C716 * C48331 * C21946 + (C390 + C389) * C48331 * C21947 +
                     ((C113 * C1515 + C48597 * C1516) * C114 +
                      (C113 * C1517 + C48597 * C1518) * C48394) *
                         C48331 * C21948) *
                        C48439 -
                    ((C389 + C390) * C48331 * C21948 + C5489 * C48331 * C21947 +
                     C185 * C48331 * C21946) *
                        C48662) *
                       C48698)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48597 * C122) * C114 +
                      (C113 * C123 + C48597 * C136) * C48394) *
                         C48331 * C21946 +
                     (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
                        C1509 -
                    (C22698 * C21948 + (C5211 + C5212) * C48331 * C21947 +
                     (C5210 + C5209) * C48331 * C21946) *
                        C1510 +
                    (C22063 * C21946 + (C6087 + C6088) * C48331 * C21947 +
                     C22699 * C21948) *
                        C1511 -
                    ((C22702 + C22703) * C48331 * C21948 +
                     (C6091 + C6092) * C48331 * C21947 + C22698 * C21946) *
                        C48704) *
                       C48648 +
                   ((C5195 * C48331 * C21946 + C5202 * C48331 * C21947 +
                     C22934 * C21948) *
                        C1510 -
                    (C22061 * C21948 + C5201 * C48331 * C21947 +
                     (C175 + C174) * C48331 * C21946) *
                        C1509 -
                    ((C6089 + C6090) * C48331 * C21948 +
                     C6420 * C48331 * C21947 + C22061 * C21946) *
                        C1511 +
                    (C22934 * C21946 + (C6090 + C6089) * C48331 * C21947 +
                     ((C113 * C6061 + C48597 * C6064) * C114 +
                      (C113 * C6065 + C48597 * C6067) * C48394) *
                         C48331 * C21948) *
                        C48704) *
                       C48360)) /
                     (p * q * std::sqrt(p + q));
    d2ee[121] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C824 +
             (C113 * C123 + C48597 * C136) * C48663 -
             (C113 * C508 + C48597 * C518) * C825 -
             (C113 * C519 + C48597 * C538) * C48481) *
                C48331 * C21946 +
            (C5814 + C5815 - C5828 - C5829) * C48331 * C21947 +
            (C6617 + C6616 - C6615 - C6618) * C48331 * C21948) *
               C48662 +
           ((C5828 - (C5815 + C5814) + C5829) * C48331 * C21946 +
            (C6615 - (C6616 + C6617) + C6618) * C48331 * C21947 +
            (C6781 - (C6774 + C6773) + C6782) * C48331 * C21948) *
               C48439) *
              C299 +
          (((C833 - (C832 + C831) + C834) * C48331 * C21946 +
            C5831 * C48331 * C21947 + C6631 * C48331 * C21948) *
               C48662 +
           (C5830 * C48331 * C21946 + C6632 * C48331 * C21947 +
            (C6621 + C6622 - C6633 - C6634) * C48331 * C21948) *
               C48439) *
              C300 +
          ((C857 * C48331 * C21946 + C5832 * C48331 * C21947 +
            (C1692 + C1693 - C1704 - C1705) * C48331 * C21948) *
               C48662 +
           (C1057 * C48331 * C21946 +
            (C1704 - (C1693 + C1692) + C1705) * C48331 * C21947 +
            ((C113 * C1805 + C48597 * C1810) * C825 -
             (C1528 * C48663 + C1529 * C824) +
             (C113 * C1811 + C48597 * C1814) * C48481) *
                C48331 * C21948) *
               C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C824 +
            (C113 * C123 + C48597 * C136) * C48663 -
            (C113 * C508 + C48597 * C518) * C825 -
            (C113 * C519 + C48597 * C538) * C48481) *
               C48331 * C21946 +
           (C5814 + C5815 - C5828 - C5829) * C48331 * C21947 +
           C23085 * C21948) *
              C1509 +
          ((C5828 - (C5815 + C5814) + C5829) * C48331 * C21946 +
           (C6615 - (C6616 + C6617) + C6618) * C48331 * C21947 +
           C23201 * C21948) *
              C1510 +
          (C23085 * C21946 + (C6773 + C6774 - C6781 - C6782) * C48331 * C21947 +
           (C23189 + C23190 - C23199 - C23200) * C48331 * C21948) *
              C1511 +
          (C23201 * C21946 +
           (C23199 - (C23190 + C23189) + C23200) * C48331 * C21947 +
           ((C113 * C23183 + C48597 * C23184) * C825 -
            (C22700 * C48663 + C22701 * C824) +
            (C113 * C23185 + C48597 * C23186) * C48481) *
               C48331 * C21948) *
              C48704) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[122] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C48331 * C21946 +
            (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
               C48733 -
           ((C6088 + C6087) * C48331 * C21948 +
            (C5211 + C5212) * C48331 * C21947 +
            (C5210 + C5209) * C48331 * C21946) *
               C48721 +
           (C22063 * C21946 + (C6087 + C6088) * C48331 * C21947 +
            (C6092 + C6091) * C48331 * C21948) *
               C48694) *
              C299 +
          ((C5195 * C48331 * C21946 + C5202 * C48331 * C21947 +
            C6419 * C48331 * C21948) *
               C48721 -
           (C22061 * C21948 + C5201 * C48331 * C21947 +
            (C175 + C174) * C48331 * C21946) *
               C48733 -
           ((C6089 + C6090) * C48331 * C21948 + C6420 * C48331 * C21947 +
            C22061 * C21946) *
               C48694) *
              C300 +
          ((C184 * C48331 * C21946 + C5203 * C48331 * C21947 +
            C22062 * C21948) *
               C48733 -
           ((C1532 + C1533) * C48331 * C21948 + C5204 * C48331 * C21947 +
            C391 * C48331 * C21946) *
               C48721 +
           (C22062 * C21946 + (C1533 + C1532) * C48331 * C21947 +
            ((C113 * C1246 + C48597 * C1257) * C114 +
             (C113 * C1258 + C48597 * C1264) * C48394) *
                C48331 * C21948) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C114 +
            (C113 * C123 + C48597 * C136) * C48394) *
               C48331 * C21946 +
           (C5209 + C5210) * C48331 * C21947 +
           (C5212 + C5211) * C48331 * C21948) *
              C48377 * C108 -
          (C5196 * C48331 * C21948 + C5201 * C48331 * C21947 +
           (C175 + C174) * C48331 * C21946) *
              C48377 * C109 +
          (C184 * C48331 * C21946 + C5203 * C48331 * C21947 +
           C392 * C48331 * C21948) *
              C48377 * C110 -
          ((C389 + C390) * C48331 * C21948 + C5489 * C48331 * C21947 +
           C185 * C48331 * C21946) *
              C48377 * C111 +
          (C186 * C48331 * C21946 + (C724 + C723) * C48331 * C21947 +
           ((C113 * C311 + C48597 * C330) * C114 +
            (C113 * C331 + C48597 * C341) * C48394) *
               C48331 * C21948) *
              C48377 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C505 +
            (C113 * C123 + C48597 * C136) * C48734 -
            (C113 * C508 + C48597 * C518) * C506 -
            (C113 * C519 + C48597 * C538) * C48723 +
            (C113 * C509 + C48597 * C520) * C507 +
            (C113 * C521 + C48597 * C539) * C48697) *
               C48331 * C21946 +
           (C6247 + C6248 - C6249 - C6250 + C6281 + C6282) * C48331 * C21947 +
           (C6258 + C6257 - C6283 - C6284 + C6285 + C6286) * C48331 * C21948) *
              C48377 * C299 +
          ((C592 - (C550 + C549) + C593 - C594 - C595) * C48331 * C21946 +
           C8146 * C48331 * C21947 +
           (C6265 - (C6266 + C6267) + C6268 - C6287 - C6288) * C48331 *
               C21948) *
              C48377 * C300 +
          (C607 * C48331 * C21946 +
           (C2945 + C2944 - C2943 - C2946 + C2947 + C2948) * C48331 * C21947 +
           (C373 * C505 + C374 * C48734 - C1700 * C506 - C1701 * C48723 +
            (C113 * C1383 + C48597 * C1400) * C507 +
            (C113 * C1401 + C48597 * C1410) * C48697) *
               C48331 * C21948) *
              C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C113 * C115 + C48597 * C122) * C114 +
             (C113 * C123 + C48597 * C136) * C48394) *
                C48331 * C21946 +
            (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
               C1167 -
           ((C6088 + C6087) * C48331 * C21948 +
            (C5211 + C5212) * C48331 * C21947 +
            (C5210 + C5209) * C48331 * C21946) *
               C1168 +
           (C22063 * C21946 + (C6087 + C6088) * C48331 * C21947 +
            (C6092 + C6091) * C48331 * C21948) *
               C48694) *
              C48730 +
          ((C5195 * C48331 * C21946 + C5202 * C48331 * C21947 +
            C6419 * C48331 * C21948) *
               C1168 -
           (C22061 * C21948 + C5201 * C48331 * C21947 +
            (C175 + C174) * C48331 * C21946) *
               C1167 -
           ((C6089 + C6090) * C48331 * C21948 + C6420 * C48331 * C21947 +
            C22061 * C21946) *
               C48694) *
              C48717 +
          ((C184 * C48331 * C21946 + C5203 * C48331 * C21947 +
            C22062 * C21948) *
               C1167 -
           ((C1532 + C1533) * C48331 * C21948 + C5204 * C48331 * C21947 +
            C391 * C48331 * C21946) *
               C1168 +
           (C22062 * C21946 + (C1533 + C1532) * C48331 * C21947 +
            ((C113 * C1246 + C48597 * C1257) * C114 +
             (C113 * C1258 + C48597 * C1264) * C48394) *
                C48331 * C21948) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C114 +
            (C113 * C123 + C48597 * C136) * C48394) *
               C48331 * C21946 +
           (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
              C1235 -
          (C22698 * C21948 + (C5211 + C5212) * C48331 * C21947 +
           (C5210 + C5209) * C48331 * C21946) *
              C1236 +
          (C22063 * C21946 + (C6087 + C6088) * C48331 * C21947 +
           C22699 * C21948) *
              C1237 -
          ((C22702 + C22703) * C48331 * C21948 +
           (C6091 + C6092) * C48331 * C21947 + C22698 * C21946) *
              C1238 +
          (C22699 * C21946 + (C22703 + C22702) * C48331 * C21947 +
           ((C113 * C22687 + C48597 * C22688) * C114 +
            (C113 * C22689 + C48597 * C22690) * C48394) *
               C48331 * C21948) *
              C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C113 * C115 + C48597 * C122) * C505 +
            (C113 * C123 + C48597 * C136) * C48734 -
            (C113 * C508 + C48597 * C518) * C506 -
            (C113 * C519 + C48597 * C538) * C48723 +
            (C113 * C509 + C48597 * C520) * C507 +
            (C113 * C521 + C48597 * C539) * C48697) *
               C48331 * C21946 +
           (C6247 + C6248 - C6249 - C6250 + C6281 + C6282) * C48331 * C21947 +
           C22835 * C21948) *
              C1167 +
          ((C6249 - (C6248 + C6247) + C6250 - C6281 - C6282) * C48331 * C21946 +
           (C6283 - (C6257 + C6258) + C6284 - C6285 - C6286) * C48331 * C21947 +
           (C22819 - (C22820 + C22821) + C22822 - C22831 - C22832) * C48331 *
               C21948) *
              C1168 +
          (C22835 * C21946 +
           (C22821 + C22820 - C22819 - C22822 + C22831 + C22832) * C48331 *
               C21947 +
           (C6086 * C505 + C6085 * C48734 -
            (C113 * C6764 + C48597 * C6766) * C506 -
            (C113 * C6767 + C48597 * C6770) * C48723 +
            (C113 * C22813 + C48597 * C22814) * C507 +
            (C113 * C22815 + C48597 * C22816) * C48697) *
               C48331 * C21948) *
              C48694) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[123] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C48597 * C122) * C824 +
                     (C113 * C123 + C48597 * C136) * C48663 -
                     (C113 * C508 + C48597 * C518) * C825 -
                     (C113 * C519 + C48597 * C538) * C48481) *
                        C48331 * C21946 +
                    (C5814 + C5815 - C5828 - C5829) * C48331 * C21947 +
                    (C6617 + C6616 - C6615 - C6618) * C48331 * C21948) *
                       C48377 * C707 +
                   ((C833 - (C832 + C831) + C834) * C48331 * C21946 +
                    C5831 * C48331 * C21947 + C6631 * C48331 * C21948) *
                       C48377 * C708 +
                   (C857 * C48331 * C21946 + C5832 * C48331 * C21947 +
                    (C1692 + C1693 - C1704 - C1705) * C48331 * C21948) *
                       C48377 * C709 +
                   (C858 * C48331 * C21946 +
                    (C1054 - (C1038 + C1037) + C1055) * C48331 * C21947 +
                    ((C113 * C1681 + C48597 * C1682) * C825 -
                     (C377 * C48663 + C378 * C824) +
                     (C113 * C1683 + C48597 * C1684) * C48481) *
                        C48331 * C21948) *
                       C48377 * C48698)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48597 * C122) * C824 +
                      (C113 * C123 + C48597 * C136) * C48663 -
                      (C113 * C508 + C48597 * C518) * C825 -
                      (C113 * C519 + C48597 * C538) * C48481) *
                         C48331 * C21946 +
                     (C5814 + C5815 - C5828 - C5829) * C48331 * C21947 +
                     C23085 * C21948) *
                        C1167 +
                    ((C5828 - (C5815 + C5814) + C5829) * C48331 * C21946 +
                     (C6615 - (C6616 + C6617) + C6618) * C48331 * C21947 +
                     (C6781 - (C6774 + C6773) + C6782) * C48331 * C21948) *
                        C1168 +
                    (C23085 * C21946 +
                     (C6773 + C6774 - C6781 - C6782) * C48331 * C21947 +
                     (C6086 * C824 + C6085 * C48663 -
                      (C113 * C6764 + C48597 * C6766) * C825 -
                      (C113 * C6767 + C48597 * C6770) * C48481) *
                         C48331 * C21948) *
                        C48694) *
                       C48648 +
                   (((C833 - (C832 + C831) + C834) * C48331 * C21946 +
                     C5831 * C48331 * C21947 + C23082 * C21948) *
                        C1167 +
                    (C5830 * C48331 * C21946 + C6632 * C48331 * C21947 +
                     (C6621 + C6622 - C6633 - C6634) * C48331 * C21948) *
                        C1168 +
                    (C23082 * C21946 +
                     (C6633 - (C6622 + C6621) + C6634) * C48331 * C21947 +
                     ((C113 * C6765 + C48597 * C6768) * C825 -
                      (C6083 * C48663 + C6084 * C824) +
                      (C113 * C6769 + C48597 * C6771) * C48481) *
                         C48331 * C21948) *
                        C48694) *
                       C48360)) /
                     (p * q * std::sqrt(p + q));
    d2ee[124] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C48597 * C122) * C114 +
                     (C113 * C123 + C48597 * C136) * C48394) *
                        C48331 * C21946 +
                    (C5209 + C5210) * C48331 * C21947 +
                    (C5212 + C5211) * C48331 * C21948) *
                       C48377 * C108 -
                   (C5196 * C48331 * C21948 + C5201 * C48331 * C21947 +
                    (C175 + C174) * C48331 * C21946) *
                       C48377 * C109 +
                   (C184 * C48331 * C21946 + C5203 * C48331 * C21947 +
                    C392 * C48331 * C21948) *
                       C48377 * C110 -
                   ((C389 + C390) * C48331 * C21948 + C5489 * C48331 * C21947 +
                    C185 * C48331 * C21946) *
                       C48377 * C111 +
                   (C186 * C48331 * C21946 + (C724 + C723) * C48331 * C21947 +
                    ((C113 * C311 + C48597 * C330) * C114 +
                     (C113 * C331 + C48597 * C341) * C48394) *
                        C48331 * C21948) *
                       C48377 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48597 * C122) * C114 +
                      (C113 * C123 + C48597 * C136) * C48394) *
                         C48331 * C21946 +
                     (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
                        C48733 -
                    ((C6088 + C6087) * C48331 * C21948 +
                     (C5211 + C5212) * C48331 * C21947 +
                     (C5210 + C5209) * C48331 * C21946) *
                        C48721 +
                    (C22063 * C21946 + (C6087 + C6088) * C48331 * C21947 +
                     (C6092 + C6091) * C48331 * C21948) *
                        C48694) *
                       C299 +
                   ((C5195 * C48331 * C21946 + C5202 * C48331 * C21947 +
                     C6419 * C48331 * C21948) *
                        C48721 -
                    (C22061 * C21948 + C5201 * C48331 * C21947 +
                     (C175 + C174) * C48331 * C21946) *
                        C48733 -
                    ((C6089 + C6090) * C48331 * C21948 +
                     C6420 * C48331 * C21947 + C22061 * C21946) *
                        C48694) *
                       C300 +
                   ((C184 * C48331 * C21946 + C5203 * C48331 * C21947 +
                     C22062 * C21948) *
                        C48733 -
                    ((C1532 + C1533) * C48331 * C21948 +
                     C5204 * C48331 * C21947 + C391 * C48331 * C21946) *
                        C48721 +
                    (C22062 * C21946 + (C1533 + C1532) * C48331 * C21947 +
                     ((C113 * C1246 + C48597 * C1257) * C114 +
                      (C113 * C1258 + C48597 * C1264) * C48394) *
                         C48331 * C21948) *
                        C48694) *
                       C48688)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((((C113 * C115 + C48597 * C122) * C114 +
                      (C113 * C123 + C48597 * C136) * C48394) *
                         C48331 * C21946 +
                     (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
                        C1167 -
                    ((C6088 + C6087) * C48331 * C21948 +
                     (C5211 + C5212) * C48331 * C21947 +
                     (C5210 + C5209) * C48331 * C21946) *
                        C1168 +
                    (C22063 * C21946 + (C6087 + C6088) * C48331 * C21947 +
                     (C6092 + C6091) * C48331 * C21948) *
                        C48694) *
                       C48730 +
                   ((C5195 * C48331 * C21946 + C5202 * C48331 * C21947 +
                     C6419 * C48331 * C21948) *
                        C1168 -
                    (C22061 * C21948 + C5201 * C48331 * C21947 +
                     (C175 + C174) * C48331 * C21946) *
                        C1167 -
                    ((C6089 + C6090) * C48331 * C21948 +
                     C6420 * C48331 * C21947 + C22061 * C21946) *
                        C48694) *
                       C48717 +
                   ((C184 * C48331 * C21946 + C5203 * C48331 * C21947 +
                     C22062 * C21948) *
                        C1167 -
                    ((C1532 + C1533) * C48331 * C21948 +
                     C5204 * C48331 * C21947 + C391 * C48331 * C21946) *
                        C1168 +
                    (C22062 * C21946 + (C1533 + C1532) * C48331 * C21947 +
                     ((C113 * C1246 + C48597 * C1257) * C114 +
                      (C113 * C1258 + C48597 * C1264) * C48394) *
                         C48331 * C21948) *
                        C48694) *
                       C48688)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C113 * C115 + C48597 * C122) * C114 +
                     (C113 * C123 + C48597 * C136) * C48394) *
                        C48331 * C21946 +
                    (C5209 + C5210) * C48331 * C21947 + C22063 * C21948) *
                       C1235 -
                   (C22698 * C21948 + (C5211 + C5212) * C48331 * C21947 +
                    (C5210 + C5209) * C48331 * C21946) *
                       C1236 +
                   (C22063 * C21946 + (C6087 + C6088) * C48331 * C21947 +
                    C22699 * C21948) *
                       C1237 -
                   ((C22702 + C22703) * C48331 * C21948 +
                    (C6091 + C6092) * C48331 * C21947 + C22698 * C21946) *
                       C1238 +
                   (C22699 * C21946 + (C22703 + C22702) * C48331 * C21947 +
                    ((C113 * C22687 + C48597 * C22688) * C114 +
                     (C113 * C22689 + C48597 * C22690) * C48394) *
                        C48331 * C21948) *
                       C1239) *
                  C48350) /
                     (p * q * std::sqrt(p + q));
    d2ee[125] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C16515 +
            ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) * C48331 *
                C48712) *
               C48435 -
           (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) * C48331 *
                C48712 +
            ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) * C48331 *
                C16515) *
               C48442 +
           (((C26376 + C26375) * C114 + (C26374 + C26373) * C48394) * C48331 *
                C16515 +
            ((C27233 + C27234) * C114 + (C27235 + C27236) * C48394) * C48331 *
                C48712) *
               C3060) *
              C48355 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C48331 *
                C16515 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48331 *
                C48712) *
               C48442 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48331 *
                C48712 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C48331 *
                C16515) *
               C48435 -
           (((C12268 + C12269) * C48394 + (C12270 + C12271) * C114) * C48331 *
                C48712 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C48331 *
                C16515) *
               C3060) *
              C48363 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C48331 *
                C16515 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48331 *
                C48712) *
               C48435 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48331 *
                C48712 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C48331 *
                C16515) *
               C48442 +
           (((C11059 + C11058) * C114 + (C11057 + C11056) * C48394) * C48331 *
                C16515 +
            ((C10815 * C1241 + C10813 * C1248 + C10816 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C10815 * C1247 + C10813 * C1259 + C10816 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48331 * C48712) *
               C3060) *
              C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[126] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C824 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48663 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C825 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C48331 * C16515 +
            ((C26369 + C26370) * C824 + (C26371 + C26372) * C48663 -
             (C26985 + C26986) * C825 - (C26987 + C26988) * C48481) *
                C48331 * C48712) *
               C48435 +
           (((C26986 + C26985) * C825 -
             ((C26372 + C26371) * C48663 + (C26370 + C26369) * C824) +
             (C26988 + C26987) * C48481) *
                C48331 * C16515 +
            ((C27415 + C27416) * C825 -
             ((C26373 + C26374) * C48663 + (C26375 + C26376) * C824) +
             (C27417 + C27418) * C48481) *
                C48331 * C48712) *
               C48442 +
           (((C26376 + C26375) * C824 + (C26374 + C26373) * C48663 -
             (C27416 + C27415) * C825 - (C27418 + C27417) * C48481) *
                C48331 * C16515 +
            ((C27233 + C27234) * C824 + (C27235 + C27236) * C48663 -
             (C27885 + C27886) * C825 - (C27887 + C27888) * C48481) *
                C48331 * C48712) *
               C3060) *
              C2788 +
          ((((C11239 + C11238) * C825 -
             ((C10853 + C10852) * C48663 + (C10851 + C10850) * C824) +
             (C11241 + C11240) * C48481) *
                C48331 * C16515 +
            ((C11748 + C11749) * C825 -
             ((C11044 + C11045) * C48663 + (C11046 + C11047) * C824) +
             (C11750 + C11751) * C48481) *
                C48331 * C48712) *
               C48435 +
           (((C11047 + C11046) * C824 + (C11045 + C11044) * C48663 -
             (C11749 + C11748) * C825 - (C11751 + C11750) * C48481) *
                C48331 * C16515 +
            ((C11048 + C11049) * C824 + (C11050 + C11051) * C48663 -
             (C12474 + C12475) * C825 - (C12476 + C12477) * C48481) *
                C48331 * C48712) *
               C48442 +
           (((C12475 + C12474) * C825 -
             ((C11051 + C11050) * C48663 + (C11049 + C11048) * C824) +
             (C12477 + C12476) * C48481) *
                C48331 * C16515 +
            ((C10815 * C1804 + C10813 * C1808 + C10816 * C6239 +
              C48714 * C6242) *
                 C825 -
             ((C12268 + C12269) * C48663 + (C12270 + C12271) * C824) +
             (C10815 * C1809 + C10813 * C1813 + C10816 * C6243 +
              C48714 * C6245) *
                 C48481) *
                C48331 * C48712) *
               C3060) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[127] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C16515 +
            ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) * C48331 *
                C48712) *
               C48740 -
           (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) * C48331 *
                C48712 +
            ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) * C48331 *
                C16515) *
               C48736 +
           (((C26376 + C26375) * C114 + (C26374 + C26373) * C48394) * C48331 *
                C16515 +
            ((C27233 + C27234) * C114 + (C27235 + C27236) * C48394) * C48331 *
                C48712) *
               C48726 -
           (((C27237 + C27238) * C48394 + (C27239 + C27240) * C114) * C48331 *
                C48712 +
            ((C27236 + C27235) * C48394 + (C27234 + C27233) * C114) * C48331 *
                C16515) *
               C48704) *
              C2788 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C48331 *
                C16515 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48331 *
                C48712) *
               C48736 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48331 *
                C48712 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C48331 *
                C16515) *
               C48740 -
           (((C12268 + C12269) * C48394 + (C12270 + C12271) * C114) * C48331 *
                C48712 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C48331 *
                C16515) *
               C48726 +
           (((C12271 + C12270) * C114 + (C12269 + C12268) * C48394) * C48331 *
                C16515 +
            ((C10815 * C1245 + C10813 * C1255 + C10816 * C6765 +
              C48714 * C6768) *
                 C114 +
             (C10815 * C1256 + C10813 * C1263 + C10816 * C6769 +
              C48714 * C6771) *
                 C48394) *
                C48331 * C48712) *
               C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C16515 +
            ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) * C48331 *
                C48712) *
               C2680 -
           (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) * C48331 *
                C48712 +
            ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) * C48331 *
                C16515) *
               C48439) *
              C48739 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C48331 *
                C16515 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48331 *
                C48712) *
               C48439 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48331 *
                C48712 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C48331 *
                C16515) *
               C2680) *
              C48732 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C48331 *
                C16515 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48331 *
                C48712) *
               C2680 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48331 *
                C48712 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C48331 *
                C16515) *
               C48439) *
              C48719 +
          ((((C11395 + C11394) * C114 + (C11393 + C11392) * C48394) * C48331 *
                C16515 +
            ((C10815 * C309 + C10813 * C327 + C10816 * C1681 + C48714 * C1682) *
                 C114 +
             (C10815 * C326 + C10813 * C339 + C10816 * C1683 + C48714 * C1684) *
                 C48394) *
                C48331 * C48712) *
               C48439 -
           (((C11392 + C11393) * C48394 + (C11394 + C11395) * C114) * C48331 *
                C48712 +
            ((C10861 + C10860) * C48394 + (C10859 + C10858) * C114) * C48331 *
                C16515) *
               C2680) *
              C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C505 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48734 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C506 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48723 +
             (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                 C507 +
             (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                 C48697) *
                C48331 * C16515 +
            ((C26369 + C26370) * C505 + (C26371 + C26372) * C48734 -
             (C26985 + C26986) * C506 - (C26987 + C26988) * C48723 +
             (C27411 + C27412) * C507 + (C27413 + C27414) * C48697) *
                C48331 * C48712) *
               C2680 +
           (((C26986 + C26985) * C506 -
             ((C26372 + C26371) * C48734 + (C26370 + C26369) * C505) +
             (C26988 + C26987) * C48723 - (C27412 + C27411) * C507 -
             (C27414 + C27413) * C48697) *
                C48331 * C16515 +
            ((C27415 + C27416) * C506 -
             ((C26373 + C26374) * C48734 + (C26375 + C26376) * C505) +
             (C27417 + C27418) * C48723 - (C27419 + C27420) * C507 -
             (C27421 + C27422) * C48697) *
                C48331 * C48712) *
               C48439) *
              C2788 +
          ((((C11239 + C11238) * C506 -
             ((C10853 + C10852) * C48734 + (C10851 + C10850) * C505) +
             (C11241 + C11240) * C48723 - (C11243 + C11242) * C507 -
             (C11245 + C11244) * C48697) *
                C48331 * C16515 +
            ((C11748 + C11749) * C506 -
             ((C11044 + C11045) * C48734 + (C11046 + C11047) * C505) +
             (C11750 + C11751) * C48723 - (C13192 + C13193) * C507 -
             (C13194 + C13195) * C48697) *
                C48331 * C48712) *
               C2680 +
           (((C11047 + C11046) * C505 + (C11045 + C11044) * C48734 -
             (C11749 + C11748) * C506 - (C11751 + C11750) * C48723 +
             (C13193 + C13192) * C507 + (C13195 + C13194) * C48697) *
                C48331 * C16515 +
            ((C11048 + C11049) * C505 + (C11050 + C11051) * C48734 -
             (C12474 + C12475) * C506 - (C12476 + C12477) * C48723 +
             (C10815 * C1381 + C10813 * C1396 + C10816 * C7661 +
              C48714 * C7664) *
                 C507 +
             (C10815 * C1397 + C10813 * C1408 + C10816 * C7665 +
              C48714 * C7667) *
                 C48697) *
                C48331 * C48712) *
               C48439) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[128] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C824 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48663 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C825 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C48331 * C16515 +
            ((C26369 + C26370) * C824 + (C26371 + C26372) * C48663 -
             (C26985 + C26986) * C825 - (C26987 + C26988) * C48481) *
                C48331 * C48712) *
               C2680 +
           (((C26986 + C26985) * C825 -
             ((C26372 + C26371) * C48663 + (C26370 + C26369) * C824) +
             (C26988 + C26987) * C48481) *
                C48331 * C16515 +
            ((C27415 + C27416) * C825 -
             ((C26373 + C26374) * C48663 + (C26375 + C26376) * C824) +
             (C27417 + C27418) * C48481) *
                C48331 * C48712) *
               C48439) *
              C48355 +
          ((((C11239 + C11238) * C825 -
             ((C10853 + C10852) * C48663 + (C10851 + C10850) * C824) +
             (C11241 + C11240) * C48481) *
                C48331 * C16515 +
            ((C11748 + C11749) * C825 -
             ((C11044 + C11045) * C48663 + (C11046 + C11047) * C824) +
             (C11750 + C11751) * C48481) *
                C48331 * C48712) *
               C2680 +
           (((C11047 + C11046) * C824 + (C11045 + C11044) * C48663 -
             (C11749 + C11748) * C825 - (C11751 + C11750) * C48481) *
                C48331 * C16515 +
            ((C11048 + C11049) * C824 + (C11050 + C11051) * C48663 -
             (C12474 + C12475) * C825 - (C12476 + C12477) * C48481) *
                C48331 * C48712) *
               C48439) *
              C48363 +
          ((((C10857 + C10856) * C824 + (C10855 + C10854) * C48663 -
             (C11247 + C11246) * C825 - (C11249 + C11248) * C48481) *
                C48331 * C16515 +
            ((C11052 + C11053) * C824 + (C11054 + C11055) * C48663 -
             (C11752 + C11753) * C825 - (C11754 + C11755) * C48481) *
                C48331 * C48712) *
               C2680 +
           (((C11753 + C11752) * C825 -
             ((C11055 + C11054) * C48663 + (C11053 + C11052) * C824) +
             (C11755 + C11754) * C48481) *
                C48331 * C16515 +
            ((C10815 * C1382 + C10813 * C1398 + C10816 * C1383 +
              C48714 * C1400) *
                 C825 -
             ((C11056 + C11057) * C48663 + (C11058 + C11059) * C824) +
             (C10815 * C1399 + C10813 * C1409 + C10816 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48331 * C48712) *
               C48439) *
              C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[129] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C16515 +
            ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) * C48331 *
                C48712) *
               C2680 -
           (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) * C48331 *
                C48712 +
            ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) * C48331 *
                C16515) *
               C48439) *
              C48739 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C48331 *
                C16515 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48331 *
                C48712) *
               C48439 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48331 *
                C48712 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C48331 *
                C16515) *
               C2680) *
              C48732 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C48331 *
                C16515 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48331 *
                C48712) *
               C2680 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48331 *
                C48712 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C48331 *
                C16515) *
               C48439) *
              C48719 +
          ((((C11395 + C11394) * C114 + (C11393 + C11392) * C48394) * C48331 *
                C16515 +
            ((C10815 * C309 + C10813 * C327 + C10816 * C1681 + C48714 * C1682) *
                 C114 +
             (C10815 * C326 + C10813 * C339 + C10816 * C1683 + C48714 * C1684) *
                 C48394) *
                C48331 * C48712) *
               C48439 -
           (((C11392 + C11393) * C48394 + (C11394 + C11395) * C114) * C48331 *
                C48712 +
            ((C10861 + C10860) * C48394 + (C10859 + C10858) * C114) * C48331 *
                C16515) *
               C2680) *
              C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C16515 +
            ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) * C48331 *
                C48712) *
               C48740 -
           (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) * C48331 *
                C48712 +
            ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) * C48331 *
                C16515) *
               C48736 +
           (((C26376 + C26375) * C114 + (C26374 + C26373) * C48394) * C48331 *
                C16515 +
            ((C27233 + C27234) * C114 + (C27235 + C27236) * C48394) * C48331 *
                C48712) *
               C48726 -
           (((C27237 + C27238) * C48394 + (C27239 + C27240) * C114) * C48331 *
                C48712 +
            ((C27236 + C27235) * C48394 + (C27234 + C27233) * C114) * C48331 *
                C16515) *
               C48704) *
              C2788 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C48331 *
                C16515 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48331 *
                C48712) *
               C48736 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48331 *
                C48712 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C48331 *
                C16515) *
               C48740 -
           (((C12268 + C12269) * C48394 + (C12270 + C12271) * C114) * C48331 *
                C48712 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C48331 *
                C16515) *
               C48726 +
           (((C12271 + C12270) * C114 + (C12269 + C12268) * C48394) * C48331 *
                C16515 +
            ((C10815 * C1245 + C10813 * C1255 + C10816 * C6765 +
              C48714 * C6768) *
                 C114 +
             (C10815 * C1256 + C10813 * C1263 + C10816 * C6769 +
              C48714 * C6771) *
                 C48394) *
                C48331 * C48712) *
               C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[130] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C3456 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C3454 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C3457 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C48331 * C16515 +
            ((C26369 + C26370) * C3456 + (C26371 + C26372) * C3454 -
             (C26985 + C26986) * C3457 - (C26987 + C26988) * C48481) *
                C48331 * C48712) *
               C48435 +
           (((C26986 + C26985) * C3457 -
             ((C26372 + C26371) * C3454 + (C26370 + C26369) * C3456) +
             (C26988 + C26987) * C48481) *
                C48331 * C16515 +
            ((C27415 + C27416) * C3457 -
             ((C26373 + C26374) * C3454 + (C26375 + C26376) * C3456) +
             (C27417 + C27418) * C48481) *
                C48331 * C48712) *
               C48442 +
           (((C26376 + C26375) * C3456 + (C26374 + C26373) * C3454 -
             (C27416 + C27415) * C3457 - (C27418 + C27417) * C48481) *
                C48331 * C16515 +
            ((C27233 + C27234) * C3456 + (C27235 + C27236) * C3454 -
             (C27885 + C27886) * C3457 - (C27887 + C27888) * C48481) *
                C48331 * C48712) *
               C3060) *
              C48648 +
          ((((C11239 + C11238) * C3457 -
             ((C10853 + C10852) * C3454 + (C10851 + C10850) * C3456) +
             (C11241 + C11240) * C48481) *
                C48331 * C16515 +
            ((C11748 + C11749) * C3457 -
             ((C11044 + C11045) * C3454 + (C11046 + C11047) * C3456) +
             (C11750 + C11751) * C48481) *
                C48331 * C48712) *
               C48435 +
           (((C11047 + C11046) * C3456 + (C11045 + C11044) * C3454 -
             (C11749 + C11748) * C3457 - (C11751 + C11750) * C48481) *
                C48331 * C16515 +
            ((C11048 + C11049) * C3456 + (C11050 + C11051) * C3454 -
             (C12474 + C12475) * C3457 - (C12476 + C12477) * C48481) *
                C48331 * C48712) *
               C48442 +
           (((C12475 + C12474) * C3457 -
             ((C11051 + C11050) * C3454 + (C11049 + C11048) * C3456) +
             (C12477 + C12476) * C48481) *
                C48331 * C16515 +
            ((C10815 * C1804 + C10813 * C1808 + C10816 * C6239 +
              C48714 * C6242) *
                 C3457 -
             ((C12268 + C12269) * C3454 + (C12270 + C12271) * C3456) +
             (C10815 * C1809 + C10813 * C1813 + C10816 * C6243 +
              C48714 * C6245) *
                 C48481) *
                C48331 * C48712) *
               C3060) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[131] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C47163 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48477 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C47155 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48484 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C47169 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C4029) *
               C48331 * C16515 +
           ((C26369 + C26370) * C47163 + (C26371 + C26372) * C48477 -
            (C26985 + C26986) * C47155 - (C26987 + C26988) * C48484 +
            (C27411 + C27412) * C47169 + (C27413 + C27414) * C4029) *
               C48331 * C48712) *
              C48435 +
          (((C26986 + C26985) * C47155 -
            ((C26372 + C26371) * C48477 + (C26370 + C26369) * C47163) +
            (C26988 + C26987) * C48484 - (C27412 + C27411) * C47169 -
            (C27414 + C27413) * C4029) *
               C48331 * C16515 +
           ((C27415 + C27416) * C47155 -
            ((C26373 + C26374) * C48477 + (C26375 + C26376) * C47163) +
            (C27417 + C27418) * C48484 - (C27419 + C27420) * C47169 -
            (C27421 + C27422) * C4029) *
               C48331 * C48712) *
              C48442 +
          (((C26376 + C26375) * C47163 + (C26374 + C26373) * C48477 -
            (C27416 + C27415) * C47155 - (C27418 + C27417) * C48484 +
            (C27420 + C27419) * C47169 + (C27422 + C27421) * C4029) *
               C48331 * C16515 +
           ((C27233 + C27234) * C47163 + (C27235 + C27236) * C48477 -
            (C27885 + C27886) * C47155 - (C27887 + C27888) * C48484 +
            (C10815 * C6238 + C10813 * C6240 + C10816 * C23841 +
             C48714 * C23842) *
                C47169 +
            (C10815 * C6241 + C10813 * C6244 + C10816 * C23843 +
             C48714 * C23844) *
                C4029) *
               C48331 * C48712) *
              C3060) *
         C48350) /
        (p * q * std::sqrt(p + q));
    d2ee[132] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C3456 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C3454 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C3457 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48481) *
               C48331 * C16515 +
           ((C26369 + C26370) * C3456 + (C26371 + C26372) * C3454 -
            (C26985 + C26986) * C3457 - (C26987 + C26988) * C48481) *
               C48331 * C48712) *
              C48740 +
          (((C26986 + C26985) * C3457 -
            ((C26372 + C26371) * C3454 + (C26370 + C26369) * C3456) +
            (C26988 + C26987) * C48481) *
               C48331 * C16515 +
           ((C27415 + C27416) * C3457 -
            ((C26373 + C26374) * C3454 + (C26375 + C26376) * C3456) +
            (C27417 + C27418) * C48481) *
               C48331 * C48712) *
              C48736 +
          (((C26376 + C26375) * C3456 + (C26374 + C26373) * C3454 -
            (C27416 + C27415) * C3457 - (C27418 + C27417) * C48481) *
               C48331 * C16515 +
           ((C27233 + C27234) * C3456 + (C27235 + C27236) * C3454 -
            (C27885 + C27886) * C3457 - (C27887 + C27888) * C48481) *
               C48331 * C48712) *
              C48726 +
          (((C27886 + C27885) * C3457 -
            ((C27236 + C27235) * C3454 + (C27234 + C27233) * C3456) +
            (C27888 + C27887) * C48481) *
               C48331 * C16515 +
           ((C10815 * C6764 + C10813 * C6766 + C10816 * C22813 +
             C48714 * C22814) *
                C3457 -
            ((C27237 + C27238) * C3454 + (C27239 + C27240) * C3456) +
            (C10815 * C6767 + C10813 * C6770 + C10816 * C22815 +
             C48714 * C22816) *
                C48481) *
               C48331 * C48712) *
              C48704) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C3456 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C3454 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C3457 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C48331 * C16515 +
            ((C26369 + C26370) * C3456 + (C26371 + C26372) * C3454 -
             (C26985 + C26986) * C3457 - (C26987 + C26988) * C48481) *
                C48331 * C48712) *
               C2680 +
           (((C26986 + C26985) * C3457 -
             ((C26372 + C26371) * C3454 + (C26370 + C26369) * C3456) +
             (C26988 + C26987) * C48481) *
                C48331 * C16515 +
            ((C27415 + C27416) * C3457 -
             ((C26373 + C26374) * C3454 + (C26375 + C26376) * C3456) +
             (C27417 + C27418) * C48481) *
                C48331 * C48712) *
               C48439) *
              C48730 +
          ((((C11239 + C11238) * C3457 -
             ((C10853 + C10852) * C3454 + (C10851 + C10850) * C3456) +
             (C11241 + C11240) * C48481) *
                C48331 * C16515 +
            ((C11748 + C11749) * C3457 -
             ((C11044 + C11045) * C3454 + (C11046 + C11047) * C3456) +
             (C11750 + C11751) * C48481) *
                C48331 * C48712) *
               C2680 +
           (((C11047 + C11046) * C3456 + (C11045 + C11044) * C3454 -
             (C11749 + C11748) * C3457 - (C11751 + C11750) * C48481) *
                C48331 * C16515 +
            ((C11048 + C11049) * C3456 + (C11050 + C11051) * C3454 -
             (C12474 + C12475) * C3457 - (C12476 + C12477) * C48481) *
                C48331 * C48712) *
               C48439) *
              C48717 +
          ((((C10857 + C10856) * C3456 + (C10855 + C10854) * C3454 -
             (C11247 + C11246) * C3457 - (C11249 + C11248) * C48481) *
                C48331 * C16515 +
            ((C11052 + C11053) * C3456 + (C11054 + C11055) * C3454 -
             (C11752 + C11753) * C3457 - (C11754 + C11755) * C48481) *
                C48331 * C48712) *
               C2680 +
           (((C11753 + C11752) * C3457 -
             ((C11055 + C11054) * C3454 + (C11053 + C11052) * C3456) +
             (C11755 + C11754) * C48481) *
                C48331 * C16515 +
            ((C10815 * C1382 + C10813 * C1398 + C10816 * C1383 +
              C48714 * C1400) *
                 C3457 -
             ((C11056 + C11057) * C3454 + (C11058 + C11059) * C3456) +
             (C10815 * C1399 + C10813 * C1409 + C10816 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48331 * C48712) *
               C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C3744 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48741 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C3745 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48738 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C3746 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C48729 -
            (C10816 * C2137 + C48714 * C2144 + C10815 * C2136 +
             C10813 * C2142) *
                C3747 -
            (C10816 * C2145 + C48714 * C2155 + C10815 * C2143 +
             C10813 * C2154) *
                C48710) *
               C48331 * C16515 +
           ((C26369 + C26370) * C3744 + (C26371 + C26372) * C48741 -
            (C26985 + C26986) * C3745 - (C26987 + C26988) * C48738 +
            (C27411 + C27412) * C3746 + (C27413 + C27414) * C48729 -
            (C28729 + C28730) * C3747 - (C28731 + C28732) * C48710) *
               C48331 * C48712) *
              C2680 +
          (((C26986 + C26985) * C3745 -
            ((C26372 + C26371) * C48741 + (C26370 + C26369) * C3744) +
            (C26988 + C26987) * C48738 - (C27412 + C27411) * C3746 -
            (C27414 + C27413) * C48729 + (C28730 + C28729) * C3747 +
            (C28732 + C28731) * C48710) *
               C48331 * C16515 +
           ((C27415 + C27416) * C3745 -
            ((C26373 + C26374) * C48741 + (C26375 + C26376) * C3744) +
            (C27417 + C27418) * C48738 - (C27419 + C27420) * C3746 -
            (C27421 + C27422) * C48729 +
            (C10815 * C7660 + C10813 * C7662 + C10816 * C23495 +
             C48714 * C23496) *
                C3747 +
            (C10815 * C7663 + C10813 * C7666 + C10816 * C23497 +
             C48714 * C23498) *
                C48710) *
               C48331 * C48712) *
              C48439) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[133] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C47163 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48477 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C47155 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48484 +
             (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                 C47169 +
             (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                 C4029) *
                C48331 * C16515 +
            ((C26369 + C26370) * C47163 + (C26371 + C26372) * C48477 -
             (C26985 + C26986) * C47155 - (C26987 + C26988) * C48484 +
             (C27411 + C27412) * C47169 + (C27413 + C27414) * C4029) *
                C48331 * C48712) *
               C2680 +
           (((C26986 + C26985) * C47155 -
             ((C26372 + C26371) * C48477 + (C26370 + C26369) * C47163) +
             (C26988 + C26987) * C48484 - (C27412 + C27411) * C47169 -
             (C27414 + C27413) * C4029) *
                C48331 * C16515 +
            ((C27415 + C27416) * C47155 -
             ((C26373 + C26374) * C48477 + (C26375 + C26376) * C47163) +
             (C27417 + C27418) * C48484 - (C27419 + C27420) * C47169 -
             (C27421 + C27422) * C4029) *
                C48331 * C48712) *
               C48439) *
              C48648 +
          ((((C11239 + C11238) * C47155 -
             ((C10853 + C10852) * C48477 + (C10851 + C10850) * C47163) +
             (C11241 + C11240) * C48484 - (C11243 + C11242) * C47169 -
             (C11245 + C11244) * C4029) *
                C48331 * C16515 +
            ((C11748 + C11749) * C47155 -
             ((C11044 + C11045) * C48477 + (C11046 + C11047) * C47163) +
             (C11750 + C11751) * C48484 - (C13192 + C13193) * C47169 -
             (C13194 + C13195) * C4029) *
                C48331 * C48712) *
               C2680 +
           (((C11047 + C11046) * C47163 + (C11045 + C11044) * C48477 -
             (C11749 + C11748) * C47155 - (C11751 + C11750) * C48484 +
             (C13193 + C13192) * C47169 + (C13195 + C13194) * C4029) *
                C48331 * C16515 +
            ((C11048 + C11049) * C47163 + (C11050 + C11051) * C48477 -
             (C12474 + C12475) * C47155 - (C12476 + C12477) * C48484 +
             (C10815 * C1381 + C10813 * C1396 + C10816 * C7661 +
              C48714 * C7664) *
                 C47169 +
             (C10815 * C1397 + C10813 * C1408 + C10816 * C7665 +
              C48714 * C7667) *
                 C4029) *
                C48331 * C48712) *
               C48439) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[134] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C3456 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C3454 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C3457 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C48331 * C16515 +
            ((C26369 + C26370) * C3456 + (C26371 + C26372) * C3454 -
             (C26985 + C26986) * C3457 - (C26987 + C26988) * C48481) *
                C48331 * C48712) *
               C2680 +
           (((C26986 + C26985) * C3457 -
             ((C26372 + C26371) * C3454 + (C26370 + C26369) * C3456) +
             (C26988 + C26987) * C48481) *
                C48331 * C16515 +
            ((C27415 + C27416) * C3457 -
             ((C26373 + C26374) * C3454 + (C26375 + C26376) * C3456) +
             (C27417 + C27418) * C48481) *
                C48331 * C48712) *
               C48439) *
              C48730 +
          ((((C11239 + C11238) * C3457 -
             ((C10853 + C10852) * C3454 + (C10851 + C10850) * C3456) +
             (C11241 + C11240) * C48481) *
                C48331 * C16515 +
            ((C11748 + C11749) * C3457 -
             ((C11044 + C11045) * C3454 + (C11046 + C11047) * C3456) +
             (C11750 + C11751) * C48481) *
                C48331 * C48712) *
               C2680 +
           (((C11047 + C11046) * C3456 + (C11045 + C11044) * C3454 -
             (C11749 + C11748) * C3457 - (C11751 + C11750) * C48481) *
                C48331 * C16515 +
            ((C11048 + C11049) * C3456 + (C11050 + C11051) * C3454 -
             (C12474 + C12475) * C3457 - (C12476 + C12477) * C48481) *
                C48331 * C48712) *
               C48439) *
              C48717 +
          ((((C10857 + C10856) * C3456 + (C10855 + C10854) * C3454 -
             (C11247 + C11246) * C3457 - (C11249 + C11248) * C48481) *
                C48331 * C16515 +
            ((C11052 + C11053) * C3456 + (C11054 + C11055) * C3454 -
             (C11752 + C11753) * C3457 - (C11754 + C11755) * C48481) *
                C48331 * C48712) *
               C2680 +
           (((C11753 + C11752) * C3457 -
             ((C11055 + C11054) * C3454 + (C11053 + C11052) * C3456) +
             (C11755 + C11754) * C48481) *
                C48331 * C16515 +
            ((C10815 * C1382 + C10813 * C1398 + C10816 * C1383 +
              C48714 * C1400) *
                 C3457 -
             ((C11056 + C11057) * C3454 + (C11058 + C11059) * C3456) +
             (C10815 * C1399 + C10813 * C1409 + C10816 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48331 * C48712) *
               C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C3456 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C3454 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C3457 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48481) *
               C48331 * C16515 +
           ((C26369 + C26370) * C3456 + (C26371 + C26372) * C3454 -
            (C26985 + C26986) * C3457 - (C26987 + C26988) * C48481) *
               C48331 * C48712) *
              C48740 +
          (((C26986 + C26985) * C3457 -
            ((C26372 + C26371) * C3454 + (C26370 + C26369) * C3456) +
            (C26988 + C26987) * C48481) *
               C48331 * C16515 +
           ((C27415 + C27416) * C3457 -
            ((C26373 + C26374) * C3454 + (C26375 + C26376) * C3456) +
            (C27417 + C27418) * C48481) *
               C48331 * C48712) *
              C48736 +
          (((C26376 + C26375) * C3456 + (C26374 + C26373) * C3454 -
            (C27416 + C27415) * C3457 - (C27418 + C27417) * C48481) *
               C48331 * C16515 +
           ((C27233 + C27234) * C3456 + (C27235 + C27236) * C3454 -
            (C27885 + C27886) * C3457 - (C27887 + C27888) * C48481) *
               C48331 * C48712) *
              C48726 +
          (((C27886 + C27885) * C3457 -
            ((C27236 + C27235) * C3454 + (C27234 + C27233) * C3456) +
            (C27888 + C27887) * C48481) *
               C48331 * C16515 +
           ((C10815 * C6764 + C10813 * C6766 + C10816 * C22813 +
             C48714 * C22814) *
                C3457 -
            ((C27237 + C27238) * C3454 + (C27239 + C27240) * C3456) +
            (C10815 * C6767 + C10813 * C6770 + C10816 * C22815 +
             C48714 * C22816) *
                C48481) *
               C48331 * C48712) *
              C48704) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[135] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C16515 +
            ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) * C48331 *
                C48712) *
               C1509 -
           (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) * C48331 *
                C48712 +
            ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) * C48331 *
                C16515) *
               C1510 +
           (((C26376 + C26375) * C114 + (C26374 + C26373) * C48394) * C48331 *
                C16515 +
            ((C27233 + C27234) * C114 + (C27235 + C27236) * C48394) * C48331 *
                C48712) *
               C1511 -
           (((C27237 + C27238) * C48394 + (C27239 + C27240) * C114) * C48331 *
                C48712 +
            ((C27236 + C27235) * C48394 + (C27234 + C27233) * C114) * C48331 *
                C16515) *
               C48704) *
              C48648 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C48331 *
                C16515 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48331 *
                C48712) *
               C1510 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48331 *
                C48712 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C48331 *
                C16515) *
               C1509 -
           (((C12268 + C12269) * C48394 + (C12270 + C12271) * C114) * C48331 *
                C48712 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C48331 *
                C16515) *
               C1511 +
           (((C12271 + C12270) * C114 + (C12269 + C12268) * C48394) * C48331 *
                C16515 +
            ((C10815 * C1245 + C10813 * C1255 + C10816 * C6765 +
              C48714 * C6768) *
                 C114 +
             (C10815 * C1256 + C10813 * C1263 + C10816 * C6769 +
              C48714 * C6771) *
                 C48394) *
                C48331 * C48712) *
               C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C16515 +
            ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) * C48331 *
                C48712) *
               C48662 -
           (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) * C48331 *
                C48712 +
            ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) * C48331 *
                C16515) *
               C48439) *
              C707 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C48331 *
                C16515 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48331 *
                C48712) *
               C48439 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48331 *
                C48712 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C48331 *
                C16515) *
               C48662) *
              C708 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C48331 *
                C16515 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48331 *
                C48712) *
               C48662 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48331 *
                C48712 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C48331 *
                C16515) *
               C48439) *
              C709 +
          ((((C11395 + C11394) * C114 + (C11393 + C11392) * C48394) * C48331 *
                C16515 +
            ((C10815 * C309 + C10813 * C327 + C10816 * C1681 + C48714 * C1682) *
                 C114 +
             (C10815 * C326 + C10813 * C339 + C10816 * C1683 + C48714 * C1684) *
                 C48394) *
                C48331 * C48712) *
               C48439 -
           (((C11392 + C11393) * C48394 + (C11394 + C11395) * C114) * C48331 *
                C48712 +
            ((C10861 + C10860) * C48394 + (C10859 + C10858) * C114) * C48331 *
                C16515) *
               C48662) *
              C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C1928 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C1925 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C1929 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C1926 +
             (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                 C1930 +
             (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                 C48697) *
                C48331 * C16515 +
            ((C26369 + C26370) * C1928 + (C26371 + C26372) * C1925 -
             (C26985 + C26986) * C1929 - (C26987 + C26988) * C1926 +
             (C27411 + C27412) * C1930 + (C27413 + C27414) * C48697) *
                C48331 * C48712) *
               C48662 +
           (((C26986 + C26985) * C1929 -
             ((C26372 + C26371) * C1925 + (C26370 + C26369) * C1928) +
             (C26988 + C26987) * C1926 - (C27412 + C27411) * C1930 -
             (C27414 + C27413) * C48697) *
                C48331 * C16515 +
            ((C27415 + C27416) * C1929 -
             ((C26373 + C26374) * C1925 + (C26375 + C26376) * C1928) +
             (C27417 + C27418) * C1926 - (C27419 + C27420) * C1930 -
             (C27421 + C27422) * C48697) *
                C48331 * C48712) *
               C48439) *
              C48648 +
          ((((C11239 + C11238) * C1929 -
             ((C10853 + C10852) * C1925 + (C10851 + C10850) * C1928) +
             (C11241 + C11240) * C1926 - (C11243 + C11242) * C1930 -
             (C11245 + C11244) * C48697) *
                C48331 * C16515 +
            ((C11748 + C11749) * C1929 -
             ((C11044 + C11045) * C1925 + (C11046 + C11047) * C1928) +
             (C11750 + C11751) * C1926 - (C13192 + C13193) * C1930 -
             (C13194 + C13195) * C48697) *
                C48331 * C48712) *
               C48662 +
           (((C11047 + C11046) * C1928 + (C11045 + C11044) * C1925 -
             (C11749 + C11748) * C1929 - (C11751 + C11750) * C1926 +
             (C13193 + C13192) * C1930 + (C13195 + C13194) * C48697) *
                C48331 * C16515 +
            ((C11048 + C11049) * C1928 + (C11050 + C11051) * C1925 -
             (C12474 + C12475) * C1929 - (C12476 + C12477) * C1926 +
             (C10815 * C1381 + C10813 * C1396 + C10816 * C7661 +
              C48714 * C7664) *
                 C1930 +
             (C10815 * C1397 + C10813 * C1408 + C10816 * C7665 +
              C48714 * C7667) *
                 C48697) *
                C48331 * C48712) *
               C48439) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[136] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C824 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48663 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C825 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48481) *
               C48331 * C16515 +
           ((C26369 + C26370) * C824 + (C26371 + C26372) * C48663 -
            (C26985 + C26986) * C825 - (C26987 + C26988) * C48481) *
               C48331 * C48712) *
              C1509 +
          (((C26986 + C26985) * C825 -
            ((C26372 + C26371) * C48663 + (C26370 + C26369) * C824) +
            (C26988 + C26987) * C48481) *
               C48331 * C16515 +
           ((C27415 + C27416) * C825 -
            ((C26373 + C26374) * C48663 + (C26375 + C26376) * C824) +
            (C27417 + C27418) * C48481) *
               C48331 * C48712) *
              C1510 +
          (((C26376 + C26375) * C824 + (C26374 + C26373) * C48663 -
            (C27416 + C27415) * C825 - (C27418 + C27417) * C48481) *
               C48331 * C16515 +
           ((C27233 + C27234) * C824 + (C27235 + C27236) * C48663 -
            (C27885 + C27886) * C825 - (C27887 + C27888) * C48481) *
               C48331 * C48712) *
              C1511 +
          (((C27886 + C27885) * C825 -
            ((C27236 + C27235) * C48663 + (C27234 + C27233) * C824) +
            (C27888 + C27887) * C48481) *
               C48331 * C16515 +
           ((C10815 * C6764 + C10813 * C6766 + C10816 * C22813 +
             C48714 * C22814) *
                C825 -
            ((C27237 + C27238) * C48663 + (C27239 + C27240) * C824) +
            (C10815 * C6767 + C10813 * C6770 + C10816 * C22815 +
             C48714 * C22816) *
                C48481) *
               C48331 * C48712) *
              C48704) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C824 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48663 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C825 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C48331 * C16515 +
            ((C26369 + C26370) * C824 + (C26371 + C26372) * C48663 -
             (C26985 + C26986) * C825 - (C26987 + C26988) * C48481) *
                C48331 * C48712) *
               C48662 +
           (((C26986 + C26985) * C825 -
             ((C26372 + C26371) * C48663 + (C26370 + C26369) * C824) +
             (C26988 + C26987) * C48481) *
                C48331 * C16515 +
            ((C10815 * C1378 + C10813 * C1390 + C10816 * C1379 +
              C48714 * C1392) *
                 C825 -
             ((C26373 + C26374) * C48663 + (C26375 + C26376) * C824) +
             (C10815 * C1391 + C10813 * C1405 + C10816 * C1393 +
              C48714 * C1406) *
                 C48481) *
                C48331 * C48712) *
               C48439) *
              C299 +
          ((((C11239 + C11238) * C825 -
             ((C10853 + C10852) * C48663 + (C10851 + C10850) * C824) +
             (C11241 + C11240) * C48481) *
                C48331 * C16515 +
            ((C11748 + C11749) * C825 -
             ((C11044 + C11045) * C48663 + (C11046 + C11047) * C824) +
             (C11750 + C11751) * C48481) *
                C48331 * C48712) *
               C48662 +
           (((C11047 + C11046) * C824 + (C11045 + C11044) * C48663 -
             (C11749 + C11748) * C825 - (C11751 + C11750) * C48481) *
                C48331 * C16515 +
            ((C11048 + C11049) * C824 + (C11050 + C11051) * C48663 -
             (C12474 + C12475) * C825 - (C12476 + C12477) * C48481) *
                C48331 * C48712) *
               C48439) *
              C300 +
          ((((C10857 + C10856) * C824 + (C10855 + C10854) * C48663 -
             (C11247 + C11246) * C825 - (C11249 + C11248) * C48481) *
                C48331 * C16515 +
            ((C11052 + C11053) * C824 + (C11054 + C11055) * C48663 -
             (C11752 + C11753) * C825 - (C11754 + C11755) * C48481) *
                C48331 * C48712) *
               C48662 +
           (((C11753 + C11752) * C825 -
             ((C11055 + C11054) * C48663 + (C11053 + C11052) * C824) +
             (C11755 + C11754) * C48481) *
                C48331 * C16515 +
            ((C10815 * C1382 + C10813 * C1398 + C10816 * C1383 +
              C48714 * C1400) *
                 C825 -
             ((C11056 + C11057) * C48663 + (C11058 + C11059) * C824) +
             (C10815 * C1399 + C10813 * C1409 + C10816 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48331 * C48712) *
               C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C2436 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C2432 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C2437 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C2433 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C2438 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C2434 -
            (C10816 * C2137 + C48714 * C2144 + C10815 * C2136 +
             C10813 * C2142) *
                C2439 -
            (C10816 * C2145 + C48714 * C2155 + C10815 * C2143 +
             C10813 * C2154) *
                C48710) *
               C48331 * C16515 +
           ((C26369 + C26370) * C2436 + (C26371 + C26372) * C2432 -
            (C26985 + C26986) * C2437 - (C26987 + C26988) * C2433 +
            (C27411 + C27412) * C2438 + (C27413 + C27414) * C2434 -
            (C28729 + C28730) * C2439 - (C28731 + C28732) * C48710) *
               C48331 * C48712) *
              C48662 +
          (((C26986 + C26985) * C2437 -
            ((C26372 + C26371) * C2432 + (C26370 + C26369) * C2436) +
            (C26988 + C26987) * C2433 - (C27412 + C27411) * C2438 -
            (C27414 + C27413) * C2434 + (C28730 + C28729) * C2439 +
            (C28732 + C28731) * C48710) *
               C48331 * C16515 +
           ((C27415 + C27416) * C2437 -
            ((C26373 + C26374) * C2432 + (C26375 + C26376) * C2436) +
            (C27417 + C27418) * C2433 - (C27419 + C27420) * C2438 -
            (C27421 + C27422) * C2434 +
            (C10815 * C7660 + C10813 * C7662 + C10816 * C23495 +
             C48714 * C23496) *
                C2439 +
            (C10815 * C7663 + C10813 * C7666 + C10816 * C23497 +
             C48714 * C23498) *
                C48710) *
               C48331 * C48712) *
              C48439) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[137] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C10815 * C115 + C10813 * C122 + C10816 * C508 +
                 C48714 * C518) *
                    C114 +
                (C10815 * C123 + C10813 * C136 + C10816 * C519 +
                 C48714 * C538) *
                    C48394) *
                   C48331 * C16515 +
               ((C10815 * C304 + C10813 * C317 + C10816 * C1004 +
                 C48714 * C1009) *
                    C114 +
                (C10815 * C316 + C10813 * C334 + C10816 * C1010 +
                 C48714 * C1019) *
                    C48394) *
                   C48331 * C48712) *
                  C48377 * C108 -
              (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) *
                   C48331 * C48712 +
               ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) *
                   C48331 * C16515) *
                  C48377 * C109 +
              (((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) *
                   C48331 * C16515 +
               ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) *
                   C48331 * C48712) *
                  C48377 * C110 -
              (((C11392 + C11393) * C48394 + (C11394 + C11395) * C114) *
                   C48331 * C48712 +
               ((C10861 + C10860) * C48394 + (C10859 + C10858) * C114) *
                   C48331 * C16515) *
                  C48377 * C111 +
              (((C10865 + C10864) * C114 + (C10863 + C10862) * C48394) *
                   C48331 * C16515 +
               ((C10815 * C310 + C10813 * C329 + C10816 * C1008 +
                 C48714 * C1017) *
                    C114 +
                (C10815 * C328 + C10813 * C340 + C10816 * C1018 +
                 C48714 * C1023) *
                    C48394) *
                   C48331 * C48712) *
                  C48377 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C10815 * C115 + C10813 * C122 + C10816 * C508 +
                  C48714 * C518) *
                     C114 +
                 (C10815 * C123 + C10813 * C136 + C10816 * C519 +
                  C48714 * C538) *
                     C48394) *
                    C48331 * C16515 +
                ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) *
                    C48331 * C48712) *
                   C48733 -
               (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) *
                    C48331 * C48712 +
                ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) *
                    C48331 * C16515) *
                   C48721 +
               (((C26376 + C26375) * C114 + (C26374 + C26373) * C48394) *
                    C48331 * C16515 +
                ((C10815 * C1243 + C10813 * C1252 + C10816 * C1803 +
                  C48714 * C1806) *
                     C114 +
                 (C10815 * C1251 + C10813 * C1261 + C10816 * C1807 +
                  C48714 * C1812) *
                     C48394) *
                    C48331 * C48712) *
                   C48694) *
                  C299 +
              ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) *
                    C48331 * C16515 +
                ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) *
                    C48331 * C48712) *
                   C48721 -
               (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) *
                    C48331 * C48712 +
                ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) *
                    C48331 * C16515) *
                   C48733 -
               (((C12268 + C12269) * C48394 + (C12270 + C12271) * C114) *
                    C48331 * C48712 +
                ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) *
                    C48331 * C16515) *
                   C48694) *
                  C300 +
              ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) *
                    C48331 * C16515 +
                ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) *
                    C48331 * C48712) *
                   C48733 -
               (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) *
                    C48331 * C48712 +
                ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) *
                    C48331 * C16515) *
                   C48721 +
               (((C11059 + C11058) * C114 + (C11057 + C11056) * C48394) *
                    C48331 * C16515 +
                ((C10815 * C1241 + C10813 * C1248 + C10816 * C1805 +
                  C48714 * C1810) *
                     C114 +
                 (C10815 * C1247 + C10813 * C1259 + C10816 * C1811 +
                  C48714 * C1814) *
                     C48394) *
                    C48331 * C48712) *
                   C48694) *
                  C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C505 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48734 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C506 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48723 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C507 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C48697) *
               C48331 * C16515 +
           ((C26369 + C26370) * C505 + (C26371 + C26372) * C48734 -
            (C10816 * C1375 + C48714 * C1384 + C10815 * C1004 +
             C10813 * C1009) *
                C506 -
            (C10816 * C1385 + C48714 * C1402 + C10815 * C1010 +
             C10813 * C1019) *
                C48723 +
            (C10815 * C1375 + C10813 * C1384 + C10816 * C2570 +
             C48714 * C2573) *
                C507 +
            (C10815 * C1385 + C10813 * C1402 + C10816 * C2574 +
             C48714 * C2579) *
                C48697) *
               C48331 * C48712) *
              C48377 * C299 +
          (((C11239 + C11238) * C506 -
            ((C10853 + C10852) * C48734 + (C10851 + C10850) * C505) +
            (C11241 + C11240) * C48723 - (C11243 + C11242) * C507 -
            (C11245 + C11244) * C48697) *
               C48331 * C16515 +
           ((C11748 + C11749) * C506 -
            ((C11044 + C11045) * C48734 + (C11046 + C11047) * C505) +
            (C11750 + C11751) * C48723 - (C13192 + C13193) * C507 -
            (C13194 + C13195) * C48697) *
               C48331 * C48712) *
              C48377 * C300 +
          (((C10857 + C10856) * C505 + (C10855 + C10854) * C48734 -
            (C11247 + C11246) * C506 - (C11249 + C11248) * C48723 +
            (C11251 + C11250) * C507 + (C11253 + C11252) * C48697) *
               C48331 * C16515 +
           ((C11052 + C11053) * C505 + (C11054 + C11055) * C48734 -
            (C11752 + C11753) * C506 - (C11754 + C11755) * C48723 +
            (C10815 * C1377 + C10813 * C1388 + C10816 * C2572 +
             C48714 * C2577) *
                C507 +
            (C10815 * C1389 + C10813 * C1404 + C10816 * C2578 +
             C48714 * C2581) *
                C48697) *
               C48331 * C48712) *
              C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C16515 +
            ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) * C48331 *
                C48712) *
               C1167 -
           (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) * C48331 *
                C48712 +
            ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) * C48331 *
                C16515) *
               C1168 +
           (((C26376 + C26375) * C114 + (C26374 + C26373) * C48394) * C48331 *
                C16515 +
            ((C10815 * C1243 + C10813 * C1252 + C10816 * C1803 +
              C48714 * C1806) *
                 C114 +
             (C10815 * C1251 + C10813 * C1261 + C10816 * C1807 +
              C48714 * C1812) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48730 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C48331 *
                C16515 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48331 *
                C48712) *
               C1168 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48331 *
                C48712 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C48331 *
                C16515) *
               C1167 -
           (((C12268 + C12269) * C48394 + (C12270 + C12271) * C114) * C48331 *
                C48712 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C48331 *
                C16515) *
               C48694) *
              C48717 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C48331 *
                C16515 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48331 *
                C48712) *
               C1167 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48331 *
                C48712 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C48331 *
                C16515) *
               C1168 +
           (((C11059 + C11058) * C114 + (C11057 + C11056) * C48394) * C48331 *
                C16515 +
            ((C10815 * C1241 + C10813 * C1248 + C10816 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C10815 * C1247 + C10813 * C1259 + C10816 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C114 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48394) *
               C48331 * C16515 +
           ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) * C48331 *
               C48712) *
              C1235 -
          (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) * C48331 *
               C48712 +
           ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) * C48331 *
               C16515) *
              C1236 +
          (((C26376 + C26375) * C114 + (C26374 + C26373) * C48394) * C48331 *
               C16515 +
           ((C27233 + C27234) * C114 + (C27235 + C27236) * C48394) * C48331 *
               C48712) *
              C1237 -
          (((C27237 + C27238) * C48394 + (C27239 + C27240) * C114) * C48331 *
               C48712 +
           ((C27236 + C27235) * C48394 + (C27234 + C27233) * C114) * C48331 *
               C16515) *
              C1238 +
          (((C27240 + C27239) * C114 + (C27238 + C27237) * C48394) * C48331 *
               C16515 +
           ((C10815 * C6060 + C10813 * C6062 + C10816 * C23183 +
             C48714 * C23184) *
                C114 +
            (C10815 * C6063 + C10813 * C6066 + C10816 * C23185 +
             C48714 * C23186) *
                C48394) *
               C48331 * C48712) *
              C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C505 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48734 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C506 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48723 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C507 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C48697) *
               C48331 * C16515 +
           ((C26369 + C26370) * C505 + (C26371 + C26372) * C48734 -
            (C26985 + C26986) * C506 - (C26987 + C26988) * C48723 +
            (C27411 + C27412) * C507 + (C27413 + C27414) * C48697) *
               C48331 * C48712) *
              C1167 +
          (((C26986 + C26985) * C506 -
            ((C26372 + C26371) * C48734 + (C26370 + C26369) * C505) +
            (C26988 + C26987) * C48723 - (C27412 + C27411) * C507 -
            (C27414 + C27413) * C48697) *
               C48331 * C16515 +
           ((C27415 + C27416) * C506 -
            ((C26373 + C26374) * C48734 + (C26375 + C26376) * C505) +
            (C27417 + C27418) * C48723 - (C27419 + C27420) * C507 -
            (C27421 + C27422) * C48697) *
               C48331 * C48712) *
              C1168 +
          (((C26376 + C26375) * C505 + (C26374 + C26373) * C48734 -
            (C27416 + C27415) * C506 - (C27418 + C27417) * C48723 +
            (C27420 + C27419) * C507 + (C27422 + C27421) * C48697) *
               C48331 * C16515 +
           ((C27233 + C27234) * C505 + (C27235 + C27236) * C48734 -
            (C10816 * C6238 + C48714 * C6240 + C10815 * C1803 +
             C10813 * C1806) *
                C506 -
            (C10816 * C6241 + C48714 * C6244 + C10815 * C1807 +
             C10813 * C1812) *
                C48723 +
            (C10815 * C6238 + C10813 * C6240 + C10816 * C23841 +
             C48714 * C23842) *
                C507 +
            (C10815 * C6241 + C10813 * C6244 + C10816 * C23843 +
             C48714 * C23844) *
                C48697) *
               C48331 * C48712) *
              C48694) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C1928 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C1925 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C1929 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C1926 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C1930 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C48697) *
               C48331 * C16515 +
           ((C26369 + C26370) * C1928 + (C26371 + C26372) * C1925 -
            (C26985 + C26986) * C1929 - (C26987 + C26988) * C1926 +
            (C27411 + C27412) * C1930 + (C27413 + C27414) * C48697) *
               C48331 * C48712) *
              C48377 * C48730 +
          (((C11239 + C11238) * C1929 -
            ((C10853 + C10852) * C1925 + (C10851 + C10850) * C1928) +
            (C11241 + C11240) * C1926 - (C11243 + C11242) * C1930 -
            (C11245 + C11244) * C48697) *
               C48331 * C16515 +
           ((C11748 + C11749) * C1929 -
            ((C11044 + C11045) * C1925 + (C11046 + C11047) * C1928) +
            (C11750 + C11751) * C1926 - (C13192 + C13193) * C1930 -
            (C13194 + C13195) * C48697) *
               C48331 * C48712) *
              C48377 * C48717 +
          (((C10857 + C10856) * C1928 + (C10855 + C10854) * C1925 -
            (C11247 + C11246) * C1929 - (C11249 + C11248) * C1926 +
            (C11251 + C11250) * C1930 + (C11253 + C11252) * C48697) *
               C48331 * C16515 +
           ((C11052 + C11053) * C1928 + (C11054 + C11055) * C1925 -
            (C11752 + C11753) * C1929 - (C11754 + C11755) * C1926 +
            (C10815 * C1377 + C10813 * C1388 + C10816 * C2572 +
             C48714 * C2577) *
                C1930 +
            (C10815 * C1389 + C10813 * C1404 + C10816 * C2578 +
             C48714 * C2581) *
                C48697) *
               C48331 * C48712) *
              C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C1928 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C1925 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C1929 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C1926 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C1930 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C48697) *
               C48331 * C16515 +
           ((C26369 + C26370) * C1928 + (C26371 + C26372) * C1925 -
            (C26985 + C26986) * C1929 - (C26987 + C26988) * C1926 +
            (C27411 + C27412) * C1930 + (C27413 + C27414) * C48697) *
               C48331 * C48712) *
              C48733 +
          (((C26986 + C26985) * C1929 -
            ((C26372 + C26371) * C1925 + (C26370 + C26369) * C1928) +
            (C26988 + C26987) * C1926 - (C27412 + C27411) * C1930 -
            (C27414 + C27413) * C48697) *
               C48331 * C16515 +
           ((C27415 + C27416) * C1929 -
            ((C26373 + C26374) * C1925 + (C26375 + C26376) * C1928) +
            (C27417 + C27418) * C1926 - (C27419 + C27420) * C1930 -
            (C27421 + C27422) * C48697) *
               C48331 * C48712) *
              C48721 +
          (((C26376 + C26375) * C1928 + (C26374 + C26373) * C1925 -
            (C27416 + C27415) * C1929 - (C27418 + C27417) * C1926 +
            (C27420 + C27419) * C1930 + (C27422 + C27421) * C48697) *
               C48331 * C16515 +
           ((C27233 + C27234) * C1928 + (C27235 + C27236) * C1925 -
            (C27885 + C27886) * C1929 - (C27887 + C27888) * C1926 +
            (C10815 * C6238 + C10813 * C6240 + C10816 * C23841 +
             C48714 * C23842) *
                C1930 +
            (C10815 * C6241 + C10813 * C6244 + C10816 * C23843 +
             C48714 * C23844) *
                C48697) *
               C48331 * C48712) *
              C48694) *
         C48350) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
               C2131 +
           (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
               C2126 -
           (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
               C2132 -
           (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
               C2127 +
           (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
               C2133 +
           (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
               C2128 -
           (C10816 * C2137 + C48714 * C2144 + C10815 * C2136 + C10813 * C2142) *
               C2134 -
           (C10816 * C2145 + C48714 * C2155 + C10815 * C2143 + C10813 * C2154) *
               C2129 +
           (C10815 * C2137 + C10813 * C2144 + C10816 * C12981 +
            C48714 * C12983) *
               C2135 +
           (C10815 * C2145 + C10813 * C2155 + C10816 * C12984 +
            C48714 * C12987) *
               C2130) *
              C48331 * C16515 +
          ((C26369 + C26370) * C2131 + (C26371 + C26372) * C2126 -
           (C26985 + C26986) * C2132 - (C26987 + C26988) * C2127 +
           (C27411 + C27412) * C2133 + (C27413 + C27414) * C2128 -
           (C10816 * C7174 + C48714 * C7176 + C10815 * C2570 + C10813 * C2573) *
               C2134 -
           (C10816 * C7177 + C48714 * C7180 + C10815 * C2574 + C10813 * C2579) *
               C2129 +
           (C10815 * C7174 + C10813 * C7176 + C10816 * C28262 +
            C48714 * C28263) *
               C2135 +
           (C10815 * C7177 + C10813 * C7180 + C10816 * C28264 +
            C48714 * C28265) *
               C2130) *
              C48331 * C48712) *
         C48377 * C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[138] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C824 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48663 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C825 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C48331 * C16515 +
            ((C26369 + C26370) * C824 + (C26371 + C26372) * C48663 -
             (C26985 + C26986) * C825 - (C26987 + C26988) * C48481) *
                C48331 * C48712) *
               C1167 +
           (((C26986 + C26985) * C825 -
             ((C26372 + C26371) * C48663 + (C26370 + C26369) * C824) +
             (C26988 + C26987) * C48481) *
                C48331 * C16515 +
            ((C27415 + C27416) * C825 -
             ((C26373 + C26374) * C48663 + (C26375 + C26376) * C824) +
             (C27417 + C27418) * C48481) *
                C48331 * C48712) *
               C1168 +
           (((C26376 + C26375) * C824 + (C26374 + C26373) * C48663 -
             (C27416 + C27415) * C825 - (C27418 + C27417) * C48481) *
                C48331 * C16515 +
            ((C27233 + C27234) * C824 + (C27235 + C27236) * C48663 -
             (C10816 * C6238 + C48714 * C6240 + C10815 * C1803 +
              C10813 * C1806) *
                 C825 -
             (C10816 * C6241 + C48714 * C6244 + C10815 * C1807 +
              C10813 * C1812) *
                 C48481) *
                C48331 * C48712) *
               C48694) *
              C48648 +
          ((((C11239 + C11238) * C825 -
             ((C10853 + C10852) * C48663 + (C10851 + C10850) * C824) +
             (C11241 + C11240) * C48481) *
                C48331 * C16515 +
            ((C11748 + C11749) * C825 -
             ((C11044 + C11045) * C48663 + (C11046 + C11047) * C824) +
             (C11750 + C11751) * C48481) *
                C48331 * C48712) *
               C1167 +
           (((C11047 + C11046) * C824 + (C11045 + C11044) * C48663 -
             (C11749 + C11748) * C825 - (C11751 + C11750) * C48481) *
                C48331 * C16515 +
            ((C11048 + C11049) * C824 + (C11050 + C11051) * C48663 -
             (C12474 + C12475) * C825 - (C12476 + C12477) * C48481) *
                C48331 * C48712) *
               C1168 +
           (((C12475 + C12474) * C825 -
             ((C11051 + C11050) * C48663 + (C11049 + C11048) * C824) +
             (C12477 + C12476) * C48481) *
                C48331 * C16515 +
            ((C10815 * C1804 + C10813 * C1808 + C10816 * C6239 +
              C48714 * C6242) *
                 C825 -
             ((C12268 + C12269) * C48663 + (C12270 + C12271) * C824) +
             (C10815 * C1809 + C10813 * C1813 + C10816 * C6243 +
              C48714 * C6245) *
                 C48481) *
                C48331 * C48712) *
               C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C824 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48663 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C825 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48481) *
               C48331 * C16515 +
           ((C26369 + C26370) * C824 + (C26371 + C26372) * C48663 -
            (C10816 * C1375 + C48714 * C1384 + C10815 * C1004 +
             C10813 * C1009) *
                C825 -
            (C10816 * C1385 + C48714 * C1402 + C10815 * C1010 +
             C10813 * C1019) *
                C48481) *
               C48331 * C48712) *
              C48377 * C707 +
          (((C11239 + C11238) * C825 -
            ((C10853 + C10852) * C48663 + (C10851 + C10850) * C824) +
            (C11241 + C11240) * C48481) *
               C48331 * C16515 +
           ((C11748 + C11749) * C825 -
            ((C11044 + C11045) * C48663 + (C11046 + C11047) * C824) +
            (C11750 + C11751) * C48481) *
               C48331 * C48712) *
              C48377 * C708 +
          (((C10857 + C10856) * C824 + (C10855 + C10854) * C48663 -
            (C11247 + C11246) * C825 - (C11249 + C11248) * C48481) *
               C48331 * C16515 +
           ((C11052 + C11053) * C824 + (C11054 + C11055) * C48663 -
            (C11752 + C11753) * C825 - (C11754 + C11755) * C48481) *
               C48331 * C48712) *
              C48377 * C709 +
          (((C11535 + C11534) * C825 -
            ((C10861 + C10860) * C48663 + (C10859 + C10858) * C824) +
            (C11537 + C11536) * C48481) *
               C48331 * C16515 +
           ((C10815 * C1007 + C10813 * C1015 + C10816 * C2306 +
             C48714 * C2307) *
                C825 -
            ((C11392 + C11393) * C48663 + (C11394 + C11395) * C824) +
            (C10815 * C1016 + C10813 * C1022 + C10816 * C2308 +
             C48714 * C2309) *
                C48481) *
               C48331 * C48712) *
              C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C2436 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C2432 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C2437 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C2433 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C2438 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C2434 -
            (C10816 * C2137 + C48714 * C2144 + C10815 * C2136 +
             C10813 * C2142) *
                C2439 -
            (C10816 * C2145 + C48714 * C2155 + C10815 * C2143 +
             C10813 * C2154) *
                C48710) *
               C48331 * C16515 +
           ((C26369 + C26370) * C2436 + (C26371 + C26372) * C2432 -
            (C26985 + C26986) * C2437 - (C26987 + C26988) * C2433 +
            (C27411 + C27412) * C2438 + (C27413 + C27414) * C2434 -
            (C10816 * C7174 + C48714 * C7176 + C10815 * C2570 +
             C10813 * C2573) *
                C2439 -
            (C10816 * C7177 + C48714 * C7180 + C10815 * C2574 +
             C10813 * C2579) *
                C48710) *
               C48331 * C48712) *
              C48377 * C48648 +
          (((C11239 + C11238) * C2437 -
            ((C10853 + C10852) * C2432 + (C10851 + C10850) * C2436) +
            (C11241 + C11240) * C2433 - (C11243 + C11242) * C2438 -
            (C11245 + C11244) * C2434 + (C13335 + C13334) * C2439 +
            (C13337 + C13336) * C48710) *
               C48331 * C16515 +
           ((C11748 + C11749) * C2437 -
            ((C11044 + C11045) * C2432 + (C11046 + C11047) * C2436) +
            (C11750 + C11751) * C2433 - (C13192 + C13193) * C2438 -
            (C13194 + C13195) * C2434 +
            (C10815 * C2571 + C10813 * C2575 + C10816 * C7175 +
             C48714 * C7178) *
                C2439 +
            (C10815 * C2576 + C10813 * C2580 + C10816 * C7179 +
             C48714 * C7181) *
                C48710) *
               C48331 * C48712) *
              C48377 * C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[139] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C16515 +
            ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) * C48331 *
                C48712) *
               C48733 -
           (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) * C48331 *
                C48712 +
            ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) * C48331 *
                C16515) *
               C48721 +
           (((C26376 + C26375) * C114 + (C26374 + C26373) * C48394) * C48331 *
                C16515 +
            ((C10815 * C1243 + C10813 * C1252 + C10816 * C1803 +
              C48714 * C1806) *
                 C114 +
             (C10815 * C1251 + C10813 * C1261 + C10816 * C1807 +
              C48714 * C1812) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C299 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C48331 *
                C16515 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48331 *
                C48712) *
               C48721 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48331 *
                C48712 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C48331 *
                C16515) *
               C48733 -
           (((C12268 + C12269) * C48394 + (C12270 + C12271) * C114) * C48331 *
                C48712 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C48331 *
                C16515) *
               C48694) *
              C300 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C48331 *
                C16515 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48331 *
                C48712) *
               C48733 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48331 *
                C48712 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C48331 *
                C16515) *
               C48721 +
           (((C11059 + C11058) * C114 + (C11057 + C11056) * C48394) * C48331 *
                C16515 +
            ((C10815 * C1241 + C10813 * C1248 + C10816 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C10815 * C1247 + C10813 * C1259 + C10816 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C114 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48394) *
               C48331 * C16515 +
           ((C10815 * C304 + C10813 * C317 + C10816 * C1004 + C48714 * C1009) *
                C114 +
            (C10815 * C316 + C10813 * C334 + C10816 * C1010 + C48714 * C1019) *
                C48394) *
               C48331 * C48712) *
              C48377 * C108 -
          (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48331 *
               C48712 +
           ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C48331 *
               C16515) *
              C48377 * C109 +
          (((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C48331 *
               C16515 +
           ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48331 *
               C48712) *
              C48377 * C110 -
          (((C11392 + C11393) * C48394 + (C11394 + C11395) * C114) * C48331 *
               C48712 +
           ((C10861 + C10860) * C48394 + (C10859 + C10858) * C114) * C48331 *
               C16515) *
              C48377 * C111 +
          (((C10865 + C10864) * C114 + (C10863 + C10862) * C48394) * C48331 *
               C16515 +
           ((C10815 * C310 + C10813 * C329 + C10816 * C1008 + C48714 * C1017) *
                C114 +
            (C10815 * C328 + C10813 * C340 + C10816 * C1018 + C48714 * C1023) *
                C48394) *
               C48331 * C48712) *
              C48377 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C16515 +
            ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) * C48331 *
                C48712) *
               C1167 -
           (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) * C48331 *
                C48712 +
            ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) * C48331 *
                C16515) *
               C1168 +
           (((C26376 + C26375) * C114 + (C26374 + C26373) * C48394) * C48331 *
                C16515 +
            ((C10815 * C1243 + C10813 * C1252 + C10816 * C1803 +
              C48714 * C1806) *
                 C114 +
             (C10815 * C1251 + C10813 * C1261 + C10816 * C1807 +
              C48714 * C1812) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48730 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C48331 *
                C16515 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48331 *
                C48712) *
               C1168 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48331 *
                C48712 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C48331 *
                C16515) *
               C1167 -
           (((C12268 + C12269) * C48394 + (C12270 + C12271) * C114) * C48331 *
                C48712 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C48331 *
                C16515) *
               C48694) *
              C48717 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C48331 *
                C16515 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48331 *
                C48712) *
               C1167 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48331 *
                C48712 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C48331 *
                C16515) *
               C1168 +
           (((C11059 + C11058) * C114 + (C11057 + C11056) * C48394) * C48331 *
                C16515 +
            ((C10815 * C1241 + C10813 * C1248 + C10816 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C10815 * C1247 + C10813 * C1259 + C10816 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C114 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48394) *
               C48331 * C16515 +
           ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) * C48331 *
               C48712) *
              C1235 -
          (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) * C48331 *
               C48712 +
           ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) * C48331 *
               C16515) *
              C1236 +
          (((C26376 + C26375) * C114 + (C26374 + C26373) * C48394) * C48331 *
               C16515 +
           ((C27233 + C27234) * C114 + (C27235 + C27236) * C48394) * C48331 *
               C48712) *
              C1237 -
          (((C27237 + C27238) * C48394 + (C27239 + C27240) * C114) * C48331 *
               C48712 +
           ((C27236 + C27235) * C48394 + (C27234 + C27233) * C114) * C48331 *
               C16515) *
              C1238 +
          (((C27240 + C27239) * C114 + (C27238 + C27237) * C48394) * C48331 *
               C16515 +
           ((C10815 * C6060 + C10813 * C6062 + C10816 * C23183 +
             C48714 * C23184) *
                C114 +
            (C10815 * C6063 + C10813 * C6066 + C10816 * C23185 +
             C48714 * C23186) *
                C48394) *
               C48331 * C48712) *
              C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C1928 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C1925 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C1929 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C1926 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C1930 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C48697) *
               C48331 * C16515 +
           ((C26369 + C26370) * C1928 + (C26371 + C26372) * C1925 -
            (C26985 + C26986) * C1929 - (C26987 + C26988) * C1926 +
            (C27411 + C27412) * C1930 + (C27413 + C27414) * C48697) *
               C48331 * C48712) *
              C48377 * C48730 +
          (((C11239 + C11238) * C1929 -
            ((C10853 + C10852) * C1925 + (C10851 + C10850) * C1928) +
            (C11241 + C11240) * C1926 - (C11243 + C11242) * C1930 -
            (C11245 + C11244) * C48697) *
               C48331 * C16515 +
           ((C11748 + C11749) * C1929 -
            ((C11044 + C11045) * C1925 + (C11046 + C11047) * C1928) +
            (C11750 + C11751) * C1926 - (C13192 + C13193) * C1930 -
            (C13194 + C13195) * C48697) *
               C48331 * C48712) *
              C48377 * C48717 +
          (((C10857 + C10856) * C1928 + (C10855 + C10854) * C1925 -
            (C11247 + C11246) * C1929 - (C11249 + C11248) * C1926 +
            (C11251 + C11250) * C1930 + (C11253 + C11252) * C48697) *
               C48331 * C16515 +
           ((C11052 + C11053) * C1928 + (C11054 + C11055) * C1925 -
            (C11752 + C11753) * C1929 - (C11754 + C11755) * C1926 +
            (C10815 * C1377 + C10813 * C1388 + C10816 * C2572 +
             C48714 * C2577) *
                C1930 +
            (C10815 * C1389 + C10813 * C1404 + C10816 * C2578 +
             C48714 * C2581) *
                C48697) *
               C48331 * C48712) *
              C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C1928 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C1925 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C1929 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C1926 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C1930 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C48697) *
               C48331 * C16515 +
           ((C26369 + C26370) * C1928 + (C26371 + C26372) * C1925 -
            (C26985 + C26986) * C1929 - (C26987 + C26988) * C1926 +
            (C27411 + C27412) * C1930 + (C27413 + C27414) * C48697) *
               C48331 * C48712) *
              C48733 +
          (((C26986 + C26985) * C1929 -
            ((C26372 + C26371) * C1925 + (C26370 + C26369) * C1928) +
            (C26988 + C26987) * C1926 - (C27412 + C27411) * C1930 -
            (C27414 + C27413) * C48697) *
               C48331 * C16515 +
           ((C27415 + C27416) * C1929 -
            ((C26373 + C26374) * C1925 + (C26375 + C26376) * C1928) +
            (C27417 + C27418) * C1926 - (C27419 + C27420) * C1930 -
            (C27421 + C27422) * C48697) *
               C48331 * C48712) *
              C48721 +
          (((C26376 + C26375) * C1928 + (C26374 + C26373) * C1925 -
            (C27416 + C27415) * C1929 - (C27418 + C27417) * C1926 +
            (C27420 + C27419) * C1930 + (C27422 + C27421) * C48697) *
               C48331 * C16515 +
           ((C27233 + C27234) * C1928 + (C27235 + C27236) * C1925 -
            (C27885 + C27886) * C1929 - (C27887 + C27888) * C1926 +
            (C10815 * C6238 + C10813 * C6240 + C10816 * C23841 +
             C48714 * C23842) *
                C1930 +
            (C10815 * C6241 + C10813 * C6244 + C10816 * C23843 +
             C48714 * C23844) *
                C48697) *
               C48331 * C48712) *
              C48694) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[140] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C3456 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C3454 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C3457 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C48331 * C16515 +
            ((C26369 + C26370) * C3456 + (C26371 + C26372) * C3454 -
             (C26985 + C26986) * C3457 - (C26987 + C26988) * C48481) *
                C48331 * C48712) *
               C48662 +
           (((C26986 + C26985) * C3457 -
             ((C26372 + C26371) * C3454 + (C26370 + C26369) * C3456) +
             (C26988 + C26987) * C48481) *
                C48331 * C16515 +
            ((C27415 + C27416) * C3457 -
             ((C26373 + C26374) * C3454 + (C26375 + C26376) * C3456) +
             (C27417 + C27418) * C48481) *
                C48331 * C48712) *
               C48439) *
              C48355 +
          ((((C11239 + C11238) * C3457 -
             ((C10853 + C10852) * C3454 + (C10851 + C10850) * C3456) +
             (C11241 + C11240) * C48481) *
                C48331 * C16515 +
            ((C11748 + C11749) * C3457 -
             ((C11044 + C11045) * C3454 + (C11046 + C11047) * C3456) +
             (C11750 + C11751) * C48481) *
                C48331 * C48712) *
               C48662 +
           (((C11047 + C11046) * C3456 + (C11045 + C11044) * C3454 -
             (C11749 + C11748) * C3457 - (C11751 + C11750) * C48481) *
                C48331 * C16515 +
            ((C11048 + C11049) * C3456 + (C11050 + C11051) * C3454 -
             (C12474 + C12475) * C3457 - (C12476 + C12477) * C48481) *
                C48331 * C48712) *
               C48439) *
              C48363 +
          ((((C10857 + C10856) * C3456 + (C10855 + C10854) * C3454 -
             (C11247 + C11246) * C3457 - (C11249 + C11248) * C48481) *
                C48331 * C16515 +
            ((C11052 + C11053) * C3456 + (C11054 + C11055) * C3454 -
             (C11752 + C11753) * C3457 - (C11754 + C11755) * C48481) *
                C48331 * C48712) *
               C48662 +
           (((C11753 + C11752) * C3457 -
             ((C11055 + C11054) * C3454 + (C11053 + C11052) * C3456) +
             (C11755 + C11754) * C48481) *
                C48331 * C16515 +
            ((C10815 * C1382 + C10813 * C1398 + C10816 * C1383 +
              C48714 * C1400) *
                 C3457 -
             ((C11056 + C11057) * C3454 + (C11058 + C11059) * C3456) +
             (C10815 * C1399 + C10813 * C1409 + C10816 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48331 * C48712) *
               C48439) *
              C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[141] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C47163 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48477 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C47155 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48484 +
             (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                 C47169 +
             (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                 C4029) *
                C48331 * C16515 +
            ((C26369 + C26370) * C47163 + (C26371 + C26372) * C48477 -
             (C26985 + C26986) * C47155 - (C26987 + C26988) * C48484 +
             (C27411 + C27412) * C47169 + (C27413 + C27414) * C4029) *
                C48331 * C48712) *
               C48662 +
           (((C26986 + C26985) * C47155 -
             ((C26372 + C26371) * C48477 + (C26370 + C26369) * C47163) +
             (C26988 + C26987) * C48484 - (C27412 + C27411) * C47169 -
             (C27414 + C27413) * C4029) *
                C48331 * C16515 +
            ((C27415 + C27416) * C47155 -
             ((C26373 + C26374) * C48477 + (C26375 + C26376) * C47163) +
             (C27417 + C27418) * C48484 - (C27419 + C27420) * C47169 -
             (C27421 + C27422) * C4029) *
                C48331 * C48712) *
               C48439) *
              C2788 +
          ((((C11239 + C11238) * C47155 -
             ((C10853 + C10852) * C48477 + (C10851 + C10850) * C47163) +
             (C11241 + C11240) * C48484 - (C11243 + C11242) * C47169 -
             (C11245 + C11244) * C4029) *
                C48331 * C16515 +
            ((C11748 + C11749) * C47155 -
             ((C11044 + C11045) * C48477 + (C11046 + C11047) * C47163) +
             (C11750 + C11751) * C48484 - (C13192 + C13193) * C47169 -
             (C13194 + C13195) * C4029) *
                C48331 * C48712) *
               C48662 +
           (((C11047 + C11046) * C47163 + (C11045 + C11044) * C48477 -
             (C11749 + C11748) * C47155 - (C11751 + C11750) * C48484 +
             (C13193 + C13192) * C47169 + (C13195 + C13194) * C4029) *
                C48331 * C16515 +
            ((C11048 + C11049) * C47163 + (C11050 + C11051) * C48477 -
             (C12474 + C12475) * C47155 - (C12476 + C12477) * C48484 +
             (C10815 * C1381 + C10813 * C1396 + C10816 * C7661 +
              C48714 * C7664) *
                 C47169 +
             (C10815 * C1397 + C10813 * C1408 + C10816 * C7665 +
              C48714 * C7667) *
                 C4029) *
                C48331 * C48712) *
               C48439) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[142] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C3456 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C3454 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C3457 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C48331 * C16515 +
            ((C26369 + C26370) * C3456 + (C26371 + C26372) * C3454 -
             (C26985 + C26986) * C3457 - (C26987 + C26988) * C48481) *
                C48331 * C48712) *
               C48733 +
           (((C26986 + C26985) * C3457 -
             ((C26372 + C26371) * C3454 + (C26370 + C26369) * C3456) +
             (C26988 + C26987) * C48481) *
                C48331 * C16515 +
            ((C27415 + C27416) * C3457 -
             ((C26373 + C26374) * C3454 + (C26375 + C26376) * C3456) +
             (C27417 + C27418) * C48481) *
                C48331 * C48712) *
               C48721 +
           (((C26376 + C26375) * C3456 + (C26374 + C26373) * C3454 -
             (C27416 + C27415) * C3457 - (C27418 + C27417) * C48481) *
                C48331 * C16515 +
            ((C27233 + C27234) * C3456 + (C27235 + C27236) * C3454 -
             (C27885 + C27886) * C3457 - (C27887 + C27888) * C48481) *
                C48331 * C48712) *
               C48694) *
              C2788 +
          ((((C11239 + C11238) * C3457 -
             ((C10853 + C10852) * C3454 + (C10851 + C10850) * C3456) +
             (C11241 + C11240) * C48481) *
                C48331 * C16515 +
            ((C11748 + C11749) * C3457 -
             ((C11044 + C11045) * C3454 + (C11046 + C11047) * C3456) +
             (C11750 + C11751) * C48481) *
                C48331 * C48712) *
               C48733 +
           (((C11047 + C11046) * C3456 + (C11045 + C11044) * C3454 -
             (C11749 + C11748) * C3457 - (C11751 + C11750) * C48481) *
                C48331 * C16515 +
            ((C11048 + C11049) * C3456 + (C11050 + C11051) * C3454 -
             (C12474 + C12475) * C3457 - (C12476 + C12477) * C48481) *
                C48331 * C48712) *
               C48721 +
           (((C12475 + C12474) * C3457 -
             ((C11051 + C11050) * C3454 + (C11049 + C11048) * C3456) +
             (C12477 + C12476) * C48481) *
                C48331 * C16515 +
            ((C10815 * C1804 + C10813 * C1808 + C10816 * C6239 +
              C48714 * C6242) *
                 C3457 -
             ((C12268 + C12269) * C3454 + (C12270 + C12271) * C3456) +
             (C10815 * C1809 + C10813 * C1813 + C10816 * C6243 +
              C48714 * C6245) *
                 C48481) *
                C48331 * C48712) *
               C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C3456 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C3454 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C3457 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48481) *
               C48331 * C16515 +
           ((C26369 + C26370) * C3456 + (C26371 + C26372) * C3454 -
            (C26985 + C26986) * C3457 - (C26987 + C26988) * C48481) *
               C48331 * C48712) *
              C48377 * C48739 +
          (((C11239 + C11238) * C3457 -
            ((C10853 + C10852) * C3454 + (C10851 + C10850) * C3456) +
            (C11241 + C11240) * C48481) *
               C48331 * C16515 +
           ((C11748 + C11749) * C3457 -
            ((C11044 + C11045) * C3454 + (C11046 + C11047) * C3456) +
            (C11750 + C11751) * C48481) *
               C48331 * C48712) *
              C48377 * C48732 +
          (((C10857 + C10856) * C3456 + (C10855 + C10854) * C3454 -
            (C11247 + C11246) * C3457 - (C11249 + C11248) * C48481) *
               C48331 * C16515 +
           ((C11052 + C11053) * C3456 + (C11054 + C11055) * C3454 -
            (C11752 + C11753) * C3457 - (C11754 + C11755) * C48481) *
               C48331 * C48712) *
              C48377 * C48719 +
          (((C11535 + C11534) * C3457 -
            ((C10861 + C10860) * C3454 + (C10859 + C10858) * C3456) +
            (C11537 + C11536) * C48481) *
               C48331 * C16515 +
           ((C10815 * C1007 + C10813 * C1015 + C10816 * C2306 +
             C48714 * C2307) *
                C3457 -
            ((C11392 + C11393) * C3454 + (C11394 + C11395) * C3456) +
            (C10815 * C1016 + C10813 * C1022 + C10816 * C2308 +
             C48714 * C2309) *
                C48481) *
               C48331 * C48712) *
              C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C3744 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48741 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C3745 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48738 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C3746 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C48729 -
            (C10816 * C2137 + C48714 * C2144 + C10815 * C2136 +
             C10813 * C2142) *
                C3747 -
            (C10816 * C2145 + C48714 * C2155 + C10815 * C2143 +
             C10813 * C2154) *
                C48710) *
               C48331 * C16515 +
           ((C26369 + C26370) * C3744 + (C26371 + C26372) * C48741 -
            (C26985 + C26986) * C3745 - (C26987 + C26988) * C48738 +
            (C27411 + C27412) * C3746 + (C27413 + C27414) * C48729 -
            (C28729 + C28730) * C3747 - (C28731 + C28732) * C48710) *
               C48331 * C48712) *
              C48377 * C2788 +
          (((C11239 + C11238) * C3745 -
            ((C10853 + C10852) * C48741 + (C10851 + C10850) * C3744) +
            (C11241 + C11240) * C48738 - (C11243 + C11242) * C3746 -
            (C11245 + C11244) * C48729 + (C13335 + C13334) * C3747 +
            (C13337 + C13336) * C48710) *
               C48331 * C16515 +
           ((C11748 + C11749) * C3745 -
            ((C11044 + C11045) * C48741 + (C11046 + C11047) * C3744) +
            (C11750 + C11751) * C48738 - (C13192 + C13193) * C3746 -
            (C13194 + C13195) * C48729 +
            (C10815 * C2571 + C10813 * C2575 + C10816 * C7175 +
             C48714 * C7178) *
                C3747 +
            (C10815 * C2576 + C10813 * C2580 + C10816 * C7179 +
             C48714 * C7181) *
                C48710) *
               C48331 * C48712) *
              C48377 * C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[143] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C47163 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48477 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C47155 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48484 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C47169 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C4029) *
               C48331 * C16515 +
           ((C26369 + C26370) * C47163 + (C26371 + C26372) * C48477 -
            (C26985 + C26986) * C47155 - (C26987 + C26988) * C48484 +
            (C27411 + C27412) * C47169 + (C27413 + C27414) * C4029) *
               C48331 * C48712) *
              C48377 * C48355 +
          (((C11239 + C11238) * C47155 -
            ((C10853 + C10852) * C48477 + (C10851 + C10850) * C47163) +
            (C11241 + C11240) * C48484 - (C11243 + C11242) * C47169 -
            (C11245 + C11244) * C4029) *
               C48331 * C16515 +
           ((C11748 + C11749) * C47155 -
            ((C11044 + C11045) * C48477 + (C11046 + C11047) * C47163) +
            (C11750 + C11751) * C48484 - (C13192 + C13193) * C47169 -
            (C13194 + C13195) * C4029) *
               C48331 * C48712) *
              C48377 * C48363 +
          (((C10857 + C10856) * C47163 + (C10855 + C10854) * C48477 -
            (C11247 + C11246) * C47155 - (C11249 + C11248) * C48484 +
            (C11251 + C11250) * C47169 + (C11253 + C11252) * C4029) *
               C48331 * C16515 +
           ((C11052 + C11053) * C47163 + (C11054 + C11055) * C48477 -
            (C11752 + C11753) * C47155 - (C11754 + C11755) * C48484 +
            (C10815 * C1377 + C10813 * C1388 + C10816 * C2572 +
             C48714 * C2577) *
                C47169 +
            (C10815 * C1389 + C10813 * C1404 + C10816 * C2578 +
             C48714 * C2581) *
                C4029) *
               C48331 * C48712) *
              C48377 * C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[144] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C3456 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C3454 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C3457 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48481) *
               C48331 * C16515 +
           ((C26369 + C26370) * C3456 + (C26371 + C26372) * C3454 -
            (C26985 + C26986) * C3457 - (C26987 + C26988) * C48481) *
               C48331 * C48712) *
              C48377 * C48739 +
          (((C11239 + C11238) * C3457 -
            ((C10853 + C10852) * C3454 + (C10851 + C10850) * C3456) +
            (C11241 + C11240) * C48481) *
               C48331 * C16515 +
           ((C11748 + C11749) * C3457 -
            ((C11044 + C11045) * C3454 + (C11046 + C11047) * C3456) +
            (C11750 + C11751) * C48481) *
               C48331 * C48712) *
              C48377 * C48732 +
          (((C10857 + C10856) * C3456 + (C10855 + C10854) * C3454 -
            (C11247 + C11246) * C3457 - (C11249 + C11248) * C48481) *
               C48331 * C16515 +
           ((C11052 + C11053) * C3456 + (C11054 + C11055) * C3454 -
            (C11752 + C11753) * C3457 - (C11754 + C11755) * C48481) *
               C48331 * C48712) *
              C48377 * C48719 +
          (((C11535 + C11534) * C3457 -
            ((C10861 + C10860) * C3454 + (C10859 + C10858) * C3456) +
            (C11537 + C11536) * C48481) *
               C48331 * C16515 +
           ((C10815 * C1007 + C10813 * C1015 + C10816 * C2306 +
             C48714 * C2307) *
                C3457 -
            ((C11392 + C11393) * C3454 + (C11394 + C11395) * C3456) +
            (C10815 * C1016 + C10813 * C1022 + C10816 * C2308 +
             C48714 * C2309) *
                C48481) *
               C48331 * C48712) *
              C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C3456 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C3454 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C3457 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C48331 * C16515 +
            ((C26369 + C26370) * C3456 + (C26371 + C26372) * C3454 -
             (C26985 + C26986) * C3457 - (C26987 + C26988) * C48481) *
                C48331 * C48712) *
               C48733 +
           (((C26986 + C26985) * C3457 -
             ((C26372 + C26371) * C3454 + (C26370 + C26369) * C3456) +
             (C26988 + C26987) * C48481) *
                C48331 * C16515 +
            ((C27415 + C27416) * C3457 -
             ((C26373 + C26374) * C3454 + (C26375 + C26376) * C3456) +
             (C27417 + C27418) * C48481) *
                C48331 * C48712) *
               C48721 +
           (((C26376 + C26375) * C3456 + (C26374 + C26373) * C3454 -
             (C27416 + C27415) * C3457 - (C27418 + C27417) * C48481) *
                C48331 * C16515 +
            ((C27233 + C27234) * C3456 + (C27235 + C27236) * C3454 -
             (C27885 + C27886) * C3457 - (C27887 + C27888) * C48481) *
                C48331 * C48712) *
               C48694) *
              C2788 +
          ((((C11239 + C11238) * C3457 -
             ((C10853 + C10852) * C3454 + (C10851 + C10850) * C3456) +
             (C11241 + C11240) * C48481) *
                C48331 * C16515 +
            ((C11748 + C11749) * C3457 -
             ((C11044 + C11045) * C3454 + (C11046 + C11047) * C3456) +
             (C11750 + C11751) * C48481) *
                C48331 * C48712) *
               C48733 +
           (((C11047 + C11046) * C3456 + (C11045 + C11044) * C3454 -
             (C11749 + C11748) * C3457 - (C11751 + C11750) * C48481) *
                C48331 * C16515 +
            ((C11048 + C11049) * C3456 + (C11050 + C11051) * C3454 -
             (C12474 + C12475) * C3457 - (C12476 + C12477) * C48481) *
                C48331 * C48712) *
               C48721 +
           (((C12475 + C12474) * C3457 -
             ((C11051 + C11050) * C3454 + (C11049 + C11048) * C3456) +
             (C12477 + C12476) * C48481) *
                C48331 * C16515 +
            ((C10815 * C1804 + C10813 * C1808 + C10816 * C6239 +
              C48714 * C6242) *
                 C3457 -
             ((C12268 + C12269) * C3454 + (C12270 + C12271) * C3456) +
             (C10815 * C1809 + C10813 * C1813 + C10816 * C6243 +
              C48714 * C6245) *
                 C48481) *
                C48331 * C48712) *
               C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[145] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C16515 +
            ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) * C48331 *
                C48712) *
               C48662 -
           (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) * C48331 *
                C48712 +
            ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) * C48331 *
                C16515) *
               C48439) *
              C707 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C48331 *
                C16515 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48331 *
                C48712) *
               C48439 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48331 *
                C48712 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C48331 *
                C16515) *
               C48662) *
              C708 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C48331 *
                C16515 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48331 *
                C48712) *
               C48662 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48331 *
                C48712 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C48331 *
                C16515) *
               C48439) *
              C709 +
          ((((C11395 + C11394) * C114 + (C11393 + C11392) * C48394) * C48331 *
                C16515 +
            ((C10815 * C309 + C10813 * C327 + C10816 * C1681 + C48714 * C1682) *
                 C114 +
             (C10815 * C326 + C10813 * C339 + C10816 * C1683 + C48714 * C1684) *
                 C48394) *
                C48331 * C48712) *
               C48439 -
           (((C11392 + C11393) * C48394 + (C11394 + C11395) * C114) * C48331 *
                C48712 +
            ((C10861 + C10860) * C48394 + (C10859 + C10858) * C114) * C48331 *
                C16515) *
               C48662) *
              C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C16515 +
            ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) * C48331 *
                C48712) *
               C1509 -
           (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) * C48331 *
                C48712 +
            ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) * C48331 *
                C16515) *
               C1510 +
           (((C26376 + C26375) * C114 + (C26374 + C26373) * C48394) * C48331 *
                C16515 +
            ((C27233 + C27234) * C114 + (C27235 + C27236) * C48394) * C48331 *
                C48712) *
               C1511 -
           (((C27237 + C27238) * C48394 + (C27239 + C27240) * C114) * C48331 *
                C48712 +
            ((C27236 + C27235) * C48394 + (C27234 + C27233) * C114) * C48331 *
                C16515) *
               C48704) *
              C48648 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C48331 *
                C16515 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48331 *
                C48712) *
               C1510 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48331 *
                C48712 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C48331 *
                C16515) *
               C1509 -
           (((C12268 + C12269) * C48394 + (C12270 + C12271) * C114) * C48331 *
                C48712 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C48331 *
                C16515) *
               C1511 +
           (((C12271 + C12270) * C114 + (C12269 + C12268) * C48394) * C48331 *
                C16515 +
            ((C10815 * C1245 + C10813 * C1255 + C10816 * C6765 +
              C48714 * C6768) *
                 C114 +
             (C10815 * C1256 + C10813 * C1263 + C10816 * C6769 +
              C48714 * C6771) *
                 C48394) *
                C48331 * C48712) *
               C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[146] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C824 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48663 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C825 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C48331 * C16515 +
            ((C26369 + C26370) * C824 + (C26371 + C26372) * C48663 -
             (C26985 + C26986) * C825 - (C26987 + C26988) * C48481) *
                C48331 * C48712) *
               C48662 +
           (((C26986 + C26985) * C825 -
             ((C26372 + C26371) * C48663 + (C26370 + C26369) * C824) +
             (C26988 + C26987) * C48481) *
                C48331 * C16515 +
            ((C10815 * C1378 + C10813 * C1390 + C10816 * C1379 +
              C48714 * C1392) *
                 C825 -
             ((C26373 + C26374) * C48663 + (C26375 + C26376) * C824) +
             (C10815 * C1391 + C10813 * C1405 + C10816 * C1393 +
              C48714 * C1406) *
                 C48481) *
                C48331 * C48712) *
               C48439) *
              C299 +
          ((((C11239 + C11238) * C825 -
             ((C10853 + C10852) * C48663 + (C10851 + C10850) * C824) +
             (C11241 + C11240) * C48481) *
                C48331 * C16515 +
            ((C11748 + C11749) * C825 -
             ((C11044 + C11045) * C48663 + (C11046 + C11047) * C824) +
             (C11750 + C11751) * C48481) *
                C48331 * C48712) *
               C48662 +
           (((C11047 + C11046) * C824 + (C11045 + C11044) * C48663 -
             (C11749 + C11748) * C825 - (C11751 + C11750) * C48481) *
                C48331 * C16515 +
            ((C11048 + C11049) * C824 + (C11050 + C11051) * C48663 -
             (C12474 + C12475) * C825 - (C12476 + C12477) * C48481) *
                C48331 * C48712) *
               C48439) *
              C300 +
          ((((C10857 + C10856) * C824 + (C10855 + C10854) * C48663 -
             (C11247 + C11246) * C825 - (C11249 + C11248) * C48481) *
                C48331 * C16515 +
            ((C11052 + C11053) * C824 + (C11054 + C11055) * C48663 -
             (C11752 + C11753) * C825 - (C11754 + C11755) * C48481) *
                C48331 * C48712) *
               C48662 +
           (((C11753 + C11752) * C825 -
             ((C11055 + C11054) * C48663 + (C11053 + C11052) * C824) +
             (C11755 + C11754) * C48481) *
                C48331 * C16515 +
            ((C10815 * C1382 + C10813 * C1398 + C10816 * C1383 +
              C48714 * C1400) *
                 C825 -
             ((C11056 + C11057) * C48663 + (C11058 + C11059) * C824) +
             (C10815 * C1399 + C10813 * C1409 + C10816 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48331 * C48712) *
               C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C824 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48663 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C825 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48481) *
               C48331 * C16515 +
           ((C26369 + C26370) * C824 + (C26371 + C26372) * C48663 -
            (C26985 + C26986) * C825 - (C26987 + C26988) * C48481) *
               C48331 * C48712) *
              C1509 +
          (((C26986 + C26985) * C825 -
            ((C26372 + C26371) * C48663 + (C26370 + C26369) * C824) +
            (C26988 + C26987) * C48481) *
               C48331 * C16515 +
           ((C27415 + C27416) * C825 -
            ((C26373 + C26374) * C48663 + (C26375 + C26376) * C824) +
            (C27417 + C27418) * C48481) *
               C48331 * C48712) *
              C1510 +
          (((C26376 + C26375) * C824 + (C26374 + C26373) * C48663 -
            (C27416 + C27415) * C825 - (C27418 + C27417) * C48481) *
               C48331 * C16515 +
           ((C27233 + C27234) * C824 + (C27235 + C27236) * C48663 -
            (C27885 + C27886) * C825 - (C27887 + C27888) * C48481) *
               C48331 * C48712) *
              C1511 +
          (((C27886 + C27885) * C825 -
            ((C27236 + C27235) * C48663 + (C27234 + C27233) * C824) +
            (C27888 + C27887) * C48481) *
               C48331 * C16515 +
           ((C10815 * C6764 + C10813 * C6766 + C10816 * C22813 +
             C48714 * C22814) *
                C825 -
            ((C27237 + C27238) * C48663 + (C27239 + C27240) * C824) +
            (C10815 * C6767 + C10813 * C6770 + C10816 * C22815 +
             C48714 * C22816) *
                C48481) *
               C48331 * C48712) *
              C48704) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[147] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C16515 +
            ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) * C48331 *
                C48712) *
               C48733 -
           (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) * C48331 *
                C48712 +
            ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) * C48331 *
                C16515) *
               C48721 +
           (((C26376 + C26375) * C114 + (C26374 + C26373) * C48394) * C48331 *
                C16515 +
            ((C10815 * C1243 + C10813 * C1252 + C10816 * C1803 +
              C48714 * C1806) *
                 C114 +
             (C10815 * C1251 + C10813 * C1261 + C10816 * C1807 +
              C48714 * C1812) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C299 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C48331 *
                C16515 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48331 *
                C48712) *
               C48721 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48331 *
                C48712 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C48331 *
                C16515) *
               C48733 -
           (((C12268 + C12269) * C48394 + (C12270 + C12271) * C114) * C48331 *
                C48712 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C48331 *
                C16515) *
               C48694) *
              C300 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C48331 *
                C16515 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48331 *
                C48712) *
               C48733 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48331 *
                C48712 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C48331 *
                C16515) *
               C48721 +
           (((C11059 + C11058) * C114 + (C11057 + C11056) * C48394) * C48331 *
                C16515 +
            ((C10815 * C1241 + C10813 * C1248 + C10816 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C10815 * C1247 + C10813 * C1259 + C10816 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C114 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48394) *
               C48331 * C16515 +
           ((C10815 * C304 + C10813 * C317 + C10816 * C1004 + C48714 * C1009) *
                C114 +
            (C10815 * C316 + C10813 * C334 + C10816 * C1010 + C48714 * C1019) *
                C48394) *
               C48331 * C48712) *
              C48377 * C108 -
          (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48331 *
               C48712 +
           ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C48331 *
               C16515) *
              C48377 * C109 +
          (((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C48331 *
               C16515 +
           ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48331 *
               C48712) *
              C48377 * C110 -
          (((C11392 + C11393) * C48394 + (C11394 + C11395) * C114) * C48331 *
               C48712 +
           ((C10861 + C10860) * C48394 + (C10859 + C10858) * C114) * C48331 *
               C16515) *
              C48377 * C111 +
          (((C10865 + C10864) * C114 + (C10863 + C10862) * C48394) * C48331 *
               C16515 +
           ((C10815 * C310 + C10813 * C329 + C10816 * C1008 + C48714 * C1017) *
                C114 +
            (C10815 * C328 + C10813 * C340 + C10816 * C1018 + C48714 * C1023) *
                C48394) *
               C48331 * C48712) *
              C48377 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C505 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48734 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C506 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48723 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C507 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C48697) *
               C48331 * C16515 +
           ((C26369 + C26370) * C505 + (C26371 + C26372) * C48734 -
            (C10816 * C1375 + C48714 * C1384 + C10815 * C1004 +
             C10813 * C1009) *
                C506 -
            (C10816 * C1385 + C48714 * C1402 + C10815 * C1010 +
             C10813 * C1019) *
                C48723 +
            (C10815 * C1375 + C10813 * C1384 + C10816 * C2570 +
             C48714 * C2573) *
                C507 +
            (C10815 * C1385 + C10813 * C1402 + C10816 * C2574 +
             C48714 * C2579) *
                C48697) *
               C48331 * C48712) *
              C48377 * C299 +
          (((C11239 + C11238) * C506 -
            ((C10853 + C10852) * C48734 + (C10851 + C10850) * C505) +
            (C11241 + C11240) * C48723 - (C11243 + C11242) * C507 -
            (C11245 + C11244) * C48697) *
               C48331 * C16515 +
           ((C11748 + C11749) * C506 -
            ((C11044 + C11045) * C48734 + (C11046 + C11047) * C505) +
            (C11750 + C11751) * C48723 - (C13192 + C13193) * C507 -
            (C13194 + C13195) * C48697) *
               C48331 * C48712) *
              C48377 * C300 +
          (((C10857 + C10856) * C505 + (C10855 + C10854) * C48734 -
            (C11247 + C11246) * C506 - (C11249 + C11248) * C48723 +
            (C11251 + C11250) * C507 + (C11253 + C11252) * C48697) *
               C48331 * C16515 +
           ((C11052 + C11053) * C505 + (C11054 + C11055) * C48734 -
            (C11752 + C11753) * C506 - (C11754 + C11755) * C48723 +
            (C10815 * C1377 + C10813 * C1388 + C10816 * C2572 +
             C48714 * C2577) *
                C507 +
            (C10815 * C1389 + C10813 * C1404 + C10816 * C2578 +
             C48714 * C2581) *
                C48697) *
               C48331 * C48712) *
              C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C16515 +
            ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) * C48331 *
                C48712) *
               C1167 -
           (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) * C48331 *
                C48712 +
            ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) * C48331 *
                C16515) *
               C1168 +
           (((C26376 + C26375) * C114 + (C26374 + C26373) * C48394) * C48331 *
                C16515 +
            ((C10815 * C1243 + C10813 * C1252 + C10816 * C1803 +
              C48714 * C1806) *
                 C114 +
             (C10815 * C1251 + C10813 * C1261 + C10816 * C1807 +
              C48714 * C1812) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48730 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C48331 *
                C16515 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48331 *
                C48712) *
               C1168 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48331 *
                C48712 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C48331 *
                C16515) *
               C1167 -
           (((C12268 + C12269) * C48394 + (C12270 + C12271) * C114) * C48331 *
                C48712 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C48331 *
                C16515) *
               C48694) *
              C48717 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C48331 *
                C16515 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48331 *
                C48712) *
               C1167 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48331 *
                C48712 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C48331 *
                C16515) *
               C1168 +
           (((C11059 + C11058) * C114 + (C11057 + C11056) * C48394) * C48331 *
                C16515 +
            ((C10815 * C1241 + C10813 * C1248 + C10816 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C10815 * C1247 + C10813 * C1259 + C10816 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C114 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48394) *
               C48331 * C16515 +
           ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) * C48331 *
               C48712) *
              C1235 -
          (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) * C48331 *
               C48712 +
           ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) * C48331 *
               C16515) *
              C1236 +
          (((C26376 + C26375) * C114 + (C26374 + C26373) * C48394) * C48331 *
               C16515 +
           ((C27233 + C27234) * C114 + (C27235 + C27236) * C48394) * C48331 *
               C48712) *
              C1237 -
          (((C27237 + C27238) * C48394 + (C27239 + C27240) * C114) * C48331 *
               C48712 +
           ((C27236 + C27235) * C48394 + (C27234 + C27233) * C114) * C48331 *
               C16515) *
              C1238 +
          (((C27240 + C27239) * C114 + (C27238 + C27237) * C48394) * C48331 *
               C16515 +
           ((C10815 * C6060 + C10813 * C6062 + C10816 * C23183 +
             C48714 * C23184) *
                C114 +
            (C10815 * C6063 + C10813 * C6066 + C10816 * C23185 +
             C48714 * C23186) *
                C48394) *
               C48331 * C48712) *
              C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C505 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48734 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C506 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48723 +
            (C10815 * C509 + C10813 * C520 + C10816 * C2136 + C48714 * C2142) *
                C507 +
            (C10815 * C521 + C10813 * C539 + C10816 * C2143 + C48714 * C2154) *
                C48697) *
               C48331 * C16515 +
           ((C26369 + C26370) * C505 + (C26371 + C26372) * C48734 -
            (C26985 + C26986) * C506 - (C26987 + C26988) * C48723 +
            (C27411 + C27412) * C507 + (C27413 + C27414) * C48697) *
               C48331 * C48712) *
              C1167 +
          (((C26986 + C26985) * C506 -
            ((C26372 + C26371) * C48734 + (C26370 + C26369) * C505) +
            (C26988 + C26987) * C48723 - (C27412 + C27411) * C507 -
            (C27414 + C27413) * C48697) *
               C48331 * C16515 +
           ((C27415 + C27416) * C506 -
            ((C26373 + C26374) * C48734 + (C26375 + C26376) * C505) +
            (C27417 + C27418) * C48723 - (C27419 + C27420) * C507 -
            (C27421 + C27422) * C48697) *
               C48331 * C48712) *
              C1168 +
          (((C26376 + C26375) * C505 + (C26374 + C26373) * C48734 -
            (C27416 + C27415) * C506 - (C27418 + C27417) * C48723 +
            (C27420 + C27419) * C507 + (C27422 + C27421) * C48697) *
               C48331 * C16515 +
           ((C27233 + C27234) * C505 + (C27235 + C27236) * C48734 -
            (C10816 * C6238 + C48714 * C6240 + C10815 * C1803 +
             C10813 * C1806) *
                C506 -
            (C10816 * C6241 + C48714 * C6244 + C10815 * C1807 +
             C10813 * C1812) *
                C48723 +
            (C10815 * C6238 + C10813 * C6240 + C10816 * C23841 +
             C48714 * C23842) *
                C507 +
            (C10815 * C6241 + C10813 * C6244 + C10816 * C23843 +
             C48714 * C23844) *
                C48697) *
               C48331 * C48712) *
              C48694) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[148] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C824 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48663 -
            (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                C825 -
            (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                C48481) *
               C48331 * C16515 +
           ((C26369 + C26370) * C824 + (C26371 + C26372) * C48663 -
            (C10816 * C1375 + C48714 * C1384 + C10815 * C1004 +
             C10813 * C1009) *
                C825 -
            (C10816 * C1385 + C48714 * C1402 + C10815 * C1010 +
             C10813 * C1019) *
                C48481) *
               C48331 * C48712) *
              C48377 * C707 +
          (((C11239 + C11238) * C825 -
            ((C10853 + C10852) * C48663 + (C10851 + C10850) * C824) +
            (C11241 + C11240) * C48481) *
               C48331 * C16515 +
           ((C11748 + C11749) * C825 -
            ((C11044 + C11045) * C48663 + (C11046 + C11047) * C824) +
            (C11750 + C11751) * C48481) *
               C48331 * C48712) *
              C48377 * C708 +
          (((C10857 + C10856) * C824 + (C10855 + C10854) * C48663 -
            (C11247 + C11246) * C825 - (C11249 + C11248) * C48481) *
               C48331 * C16515 +
           ((C11052 + C11053) * C824 + (C11054 + C11055) * C48663 -
            (C11752 + C11753) * C825 - (C11754 + C11755) * C48481) *
               C48331 * C48712) *
              C48377 * C709 +
          (((C11535 + C11534) * C825 -
            ((C10861 + C10860) * C48663 + (C10859 + C10858) * C824) +
            (C11537 + C11536) * C48481) *
               C48331 * C16515 +
           ((C10815 * C1007 + C10813 * C1015 + C10816 * C2306 +
             C48714 * C2307) *
                C825 -
            ((C11392 + C11393) * C48663 + (C11394 + C11395) * C824) +
            (C10815 * C1016 + C10813 * C1022 + C10816 * C2308 +
             C48714 * C2309) *
                C48481) *
               C48331 * C48712) *
              C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C824 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48663 -
             (C10816 * C509 + C48714 * C520 + C10815 * C508 + C10813 * C518) *
                 C825 -
             (C10816 * C521 + C48714 * C539 + C10815 * C519 + C10813 * C538) *
                 C48481) *
                C48331 * C16515 +
            ((C26369 + C26370) * C824 + (C26371 + C26372) * C48663 -
             (C26985 + C26986) * C825 - (C26987 + C26988) * C48481) *
                C48331 * C48712) *
               C1167 +
           (((C26986 + C26985) * C825 -
             ((C26372 + C26371) * C48663 + (C26370 + C26369) * C824) +
             (C26988 + C26987) * C48481) *
                C48331 * C16515 +
            ((C27415 + C27416) * C825 -
             ((C26373 + C26374) * C48663 + (C26375 + C26376) * C824) +
             (C27417 + C27418) * C48481) *
                C48331 * C48712) *
               C1168 +
           (((C26376 + C26375) * C824 + (C26374 + C26373) * C48663 -
             (C27416 + C27415) * C825 - (C27418 + C27417) * C48481) *
                C48331 * C16515 +
            ((C27233 + C27234) * C824 + (C27235 + C27236) * C48663 -
             (C10816 * C6238 + C48714 * C6240 + C10815 * C1803 +
              C10813 * C1806) *
                 C825 -
             (C10816 * C6241 + C48714 * C6244 + C10815 * C1807 +
              C10813 * C1812) *
                 C48481) *
                C48331 * C48712) *
               C48694) *
              C48648 +
          ((((C11239 + C11238) * C825 -
             ((C10853 + C10852) * C48663 + (C10851 + C10850) * C824) +
             (C11241 + C11240) * C48481) *
                C48331 * C16515 +
            ((C11748 + C11749) * C825 -
             ((C11044 + C11045) * C48663 + (C11046 + C11047) * C824) +
             (C11750 + C11751) * C48481) *
                C48331 * C48712) *
               C1167 +
           (((C11047 + C11046) * C824 + (C11045 + C11044) * C48663 -
             (C11749 + C11748) * C825 - (C11751 + C11750) * C48481) *
                C48331 * C16515 +
            ((C11048 + C11049) * C824 + (C11050 + C11051) * C48663 -
             (C12474 + C12475) * C825 - (C12476 + C12477) * C48481) *
                C48331 * C48712) *
               C1168 +
           (((C12475 + C12474) * C825 -
             ((C11051 + C11050) * C48663 + (C11049 + C11048) * C824) +
             (C12477 + C12476) * C48481) *
                C48331 * C16515 +
            ((C10815 * C1804 + C10813 * C1808 + C10816 * C6239 +
              C48714 * C6242) *
                 C825 -
             ((C12268 + C12269) * C48663 + (C12270 + C12271) * C824) +
             (C10815 * C1809 + C10813 * C1813 + C10816 * C6243 +
              C48714 * C6245) *
                 C48481) *
                C48331 * C48712) *
               C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[149] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C114 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48394) *
               C48331 * C16515 +
           ((C10815 * C304 + C10813 * C317 + C10816 * C1004 + C48714 * C1009) *
                C114 +
            (C10815 * C316 + C10813 * C334 + C10816 * C1010 + C48714 * C1019) *
                C48394) *
               C48331 * C48712) *
              C48377 * C108 -
          (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48331 *
               C48712 +
           ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C48331 *
               C16515) *
              C48377 * C109 +
          (((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C48331 *
               C16515 +
           ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48331 *
               C48712) *
              C48377 * C110 -
          (((C11392 + C11393) * C48394 + (C11394 + C11395) * C114) * C48331 *
               C48712 +
           ((C10861 + C10860) * C48394 + (C10859 + C10858) * C114) * C48331 *
               C16515) *
              C48377 * C111 +
          (((C10865 + C10864) * C114 + (C10863 + C10862) * C48394) * C48331 *
               C16515 +
           ((C10815 * C310 + C10813 * C329 + C10816 * C1008 + C48714 * C1017) *
                C114 +
            (C10815 * C328 + C10813 * C340 + C10816 * C1018 + C48714 * C1023) *
                C48394) *
               C48331 * C48712) *
              C48377 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C16515 +
            ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) * C48331 *
                C48712) *
               C48733 -
           (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) * C48331 *
                C48712 +
            ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) * C48331 *
                C16515) *
               C48721 +
           (((C26376 + C26375) * C114 + (C26374 + C26373) * C48394) * C48331 *
                C16515 +
            ((C10815 * C1243 + C10813 * C1252 + C10816 * C1803 +
              C48714 * C1806) *
                 C114 +
             (C10815 * C1251 + C10813 * C1261 + C10816 * C1807 +
              C48714 * C1812) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C299 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C48331 *
                C16515 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48331 *
                C48712) *
               C48721 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48331 *
                C48712 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C48331 *
                C16515) *
               C48733 -
           (((C12268 + C12269) * C48394 + (C12270 + C12271) * C114) * C48331 *
                C48712 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C48331 *
                C16515) *
               C48694) *
              C300 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C48331 *
                C16515 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48331 *
                C48712) *
               C48733 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48331 *
                C48712 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C48331 *
                C16515) *
               C48721 +
           (((C11059 + C11058) * C114 + (C11057 + C11056) * C48394) * C48331 *
                C16515 +
            ((C10815 * C1241 + C10813 * C1248 + C10816 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C10815 * C1247 + C10813 * C1259 + C10816 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                 C114 +
             (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C16515 +
            ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) * C48331 *
                C48712) *
               C1167 -
           (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) * C48331 *
                C48712 +
            ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) * C48331 *
                C16515) *
               C1168 +
           (((C26376 + C26375) * C114 + (C26374 + C26373) * C48394) * C48331 *
                C16515 +
            ((C10815 * C1243 + C10813 * C1252 + C10816 * C1803 +
              C48714 * C1806) *
                 C114 +
             (C10815 * C1251 + C10813 * C1261 + C10816 * C1807 +
              C48714 * C1812) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48730 +
          ((((C11047 + C11046) * C114 + (C11045 + C11044) * C48394) * C48331 *
                C16515 +
            ((C11048 + C11049) * C114 + (C11050 + C11051) * C48394) * C48331 *
                C48712) *
               C1168 -
           (((C11044 + C11045) * C48394 + (C11046 + C11047) * C114) * C48331 *
                C48712 +
            ((C10853 + C10852) * C48394 + (C10851 + C10850) * C114) * C48331 *
                C16515) *
               C1167 -
           (((C12268 + C12269) * C48394 + (C12270 + C12271) * C114) * C48331 *
                C48712 +
            ((C11051 + C11050) * C48394 + (C11049 + C11048) * C114) * C48331 *
                C16515) *
               C48694) *
              C48717 +
          ((((C10857 + C10856) * C114 + (C10855 + C10854) * C48394) * C48331 *
                C16515 +
            ((C11052 + C11053) * C114 + (C11054 + C11055) * C48394) * C48331 *
                C48712) *
               C1167 -
           (((C11056 + C11057) * C48394 + (C11058 + C11059) * C114) * C48331 *
                C48712 +
            ((C11055 + C11054) * C48394 + (C11053 + C11052) * C114) * C48331 *
                C16515) *
               C1168 +
           (((C11059 + C11058) * C114 + (C11057 + C11056) * C48394) * C48331 *
                C16515 +
            ((C10815 * C1241 + C10813 * C1248 + C10816 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C10815 * C1247 + C10813 * C1259 + C10816 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C10815 * C115 + C10813 * C122 + C10816 * C508 + C48714 * C518) *
                C114 +
            (C10815 * C123 + C10813 * C136 + C10816 * C519 + C48714 * C538) *
                C48394) *
               C48331 * C16515 +
           ((C26369 + C26370) * C114 + (C26371 + C26372) * C48394) * C48331 *
               C48712) *
              C1235 -
          (((C26373 + C26374) * C48394 + (C26375 + C26376) * C114) * C48331 *
               C48712 +
           ((C26372 + C26371) * C48394 + (C26370 + C26369) * C114) * C48331 *
               C16515) *
              C1236 +
          (((C26376 + C26375) * C114 + (C26374 + C26373) * C48394) * C48331 *
               C16515 +
           ((C27233 + C27234) * C114 + (C27235 + C27236) * C48394) * C48331 *
               C48712) *
              C1237 -
          (((C27237 + C27238) * C48394 + (C27239 + C27240) * C114) * C48331 *
               C48712 +
           ((C27236 + C27235) * C48394 + (C27234 + C27233) * C114) * C48331 *
               C16515) *
              C1238 +
          (((C27240 + C27239) * C114 + (C27238 + C27237) * C48394) * C48331 *
               C16515 +
           ((C10815 * C6060 + C10813 * C6062 + C10816 * C23183 +
             C48714 * C23184) *
                C114 +
            (C10815 * C6063 + C10813 * C6066 + C10816 * C23185 +
             C48714 * C23186) *
                C48394) *
               C48331 * C48712) *
              C1239) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[150] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C16513 +
            ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
               C48582 * C48435 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48681 +
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48394 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C114) *
                C16513) *
               C48582 * C48442 +
           (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                 C114 +
             (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                 C48394) *
                C16513 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48681) *
               C48582 * C3060) *
              C48355 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C16513 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48681) *
               C48582 * C48442 -
           (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) * C48681 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C16513) *
               C48582 * C48435 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48681 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C16513) *
               C48582 * C3060) *
              C48363 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C16513 +
            ((C31823 + C31824) * C114 + (C31825 + C31826) * C48394) * C48681) *
               C48582 * C48435 -
           (((C32357 + C32358) * C48394 + (C32359 + C32360) * C114) * C48681 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C16513) *
               C48582 * C48442 +
           (((C32024 + C32023) * C114 + (C32022 + C32021) * C48394) * C16513 +
            ((C31780 * C309 + C31778 * C327 + C31781 * C1681 + C48714 * C1682) *
                 C114 +
             (C31780 * C326 + C31778 * C339 + C31781 * C1683 + C48714 * C1684) *
                 C48394) *
                C48681) *
               C48582 * C3060) *
              C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[151] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C824 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48663 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C825 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C16513 +
            ((C31815 + C31816) * C824 + (C31817 + C31818) * C48663 -
             (C32203 + C32204) * C825 - (C32205 + C32206) * C48481) *
                C48681) *
               C48582 * C48435 +
           (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
              C48714 * C1384) *
                 C825 -
             ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 +
               C31778 * C334) *
                  C48663 +
              (C31781 * C1004 + C48714 * C1009 + C31780 * C304 +
               C31778 * C317) *
                  C824) +
             (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C16513 +
            ((C32713 + C32714) * C825 -
             ((C32009 + C32010) * C48663 + (C32011 + C32012) * C824) +
             (C32715 + C32716) * C48481) *
                C48681) *
               C48582 * C48442 +
           (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                 C824 +
             (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                 C48663 -
             (C31781 * C1379 + C48714 * C1392 + C31780 * C1378 +
              C31778 * C1390) *
                 C825 -
             (C31781 * C1393 + C48714 * C1406 + C31780 * C1391 +
              C31778 * C1405) *
                 C48481) *
                C16513 +
            ((C32013 + C32014) * C824 + (C32015 + C32016) * C48663 -
             (C33439 + C33440) * C825 - (C33441 + C33442) * C48481) *
                C48681) *
               C48582 * C3060) *
              C2788 +
          ((((C32204 + C32203) * C825 -
             ((C31818 + C31817) * C48663 + (C31816 + C31815) * C824) +
             (C32206 + C32205) * C48481) *
                C16513 +
            ((C32211 + C32212) * C825 -
             ((C31819 + C31820) * C48663 + (C31821 + C31822) * C824) +
             (C32213 + C32214) * C48481) *
                C48681) *
               C48582 * C48435 +
           (((C32012 + C32011) * C824 + (C32010 + C32009) * C48663 -
             (C32714 + C32713) * C825 - (C32716 + C32715) * C48481) *
                C16513 +
            ((C32017 + C32018) * C824 + (C32019 + C32020) * C48663 -
             (C32717 + C32718) * C825 - (C32719 + C32720) * C48481) *
                C48681) *
               C48582 * C48442 +
           (((C33440 + C33439) * C825 -
             ((C32016 + C32015) * C48663 + (C32014 + C32013) * C824) +
             (C33442 + C33441) * C48481) *
                C16513 +
            ((C31780 * C1382 + C31778 * C1398 + C31781 * C1383 +
              C48714 * C1400) *
                 C825 -
             ((C32021 + C32022) * C48663 + (C32023 + C32024) * C824) +
             (C31780 * C1399 + C31778 * C1409 + C31781 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48681) *
               C48582 * C3060) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[152] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C16513 +
            ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
               C48582 * C48740 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48681 +
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48394 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C114) *
                C16513) *
               C48582 * C48736 +
           (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                 C114 +
             (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                 C48394) *
                C16513 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48681) *
               C48582 * C48726 -
           (((C33233 + C33234) * C48394 + (C33235 + C33236) * C114) * C48681 +
            ((C31781 * C1807 + C48714 * C1812 + C31780 * C1251 +
              C31778 * C1261) *
                 C48394 +
             (C31781 * C1803 + C48714 * C1806 + C31780 * C1243 +
              C31778 * C1252) *
                 C114) *
                C16513) *
               C48582 * C48704) *
              C2788 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C16513 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48681) *
               C48582 * C48736 -
           (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) * C48681 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C16513) *
               C48582 * C48740 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48681 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C16513) *
               C48582 * C48726 +
           (((C33236 + C33235) * C114 + (C33234 + C33233) * C48394) * C16513 +
            ((C31780 * C1241 + C31778 * C1248 + C31781 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C31780 * C1247 + C31778 * C1259 + C31781 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48681) *
               C48582 * C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C16513 +
            ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
               C48582 * C2680 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48681 +
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48394 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C114) *
                C16513) *
               C48582 * C48439) *
              C48739 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C16513 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48681) *
               C48582 * C48439 -
           (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) * C48681 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C16513) *
               C48582 * C2680) *
              C48732 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C16513 +
            ((C31823 + C31824) * C114 + (C31825 + C31826) * C48394) * C48681) *
               C48582 * C2680 -
           (((C32357 + C32358) * C48394 + (C32359 + C32360) * C114) * C48681 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C16513) *
               C48582 * C48439) *
              C48719 +
          ((((C32360 + C32359) * C114 + (C32358 + C32357) * C48394) * C16513 +
            ((C31780 * C310 + C31778 * C329 + C31781 * C1008 + C48714 * C1017) *
                 C114 +
             (C31780 * C328 + C31778 * C340 + C31781 * C1018 + C48714 * C1023) *
                 C48394) *
                C48681) *
               C48582 * C48439 -
           (((C31827 + C31828) * C48394 + (C31829 + C31830) * C114) * C48681 +
            ((C31826 + C31825) * C48394 + (C31824 + C31823) * C114) * C16513) *
               C48582 * C2680) *
              C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C505 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48734 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C506 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48723 +
             (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                 C507 +
             (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                 C48697) *
                C16513 +
            ((C31815 + C31816) * C505 + (C31817 + C31818) * C48734 -
             (C32203 + C32204) * C506 - (C32205 + C32206) * C48723 +
             (C32207 + C32208) * C507 + (C32209 + C32210) * C48697) *
                C48681) *
               C48582 * C2680 +
           (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
              C48714 * C1384) *
                 C506 -
             ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 +
               C31778 * C334) *
                  C48734 +
              (C31781 * C1004 + C48714 * C1009 + C31780 * C304 +
               C31778 * C317) *
                  C505) +
             (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
              C48714 * C1402) *
                 C48723 -
             (C31781 * C2570 + C48714 * C2573 + C31780 * C1375 +
              C31778 * C1384) *
                 C507 -
             (C31781 * C2574 + C48714 * C2579 + C31780 * C1385 +
              C31778 * C1402) *
                 C48697) *
                C16513 +
            ((C32713 + C32714) * C506 -
             ((C32009 + C32010) * C48734 + (C32011 + C32012) * C505) +
             (C32715 + C32716) * C48723 - (C34149 + C34150) * C507 -
             (C34151 + C34152) * C48697) *
                C48681) *
               C48582 * C48439) *
              C2788 +
          ((((C32204 + C32203) * C506 -
             ((C31818 + C31817) * C48734 + (C31816 + C31815) * C505) +
             (C32206 + C32205) * C48723 - (C32208 + C32207) * C507 -
             (C32210 + C32209) * C48697) *
                C16513 +
            ((C32211 + C32212) * C506 -
             ((C31819 + C31820) * C48734 + (C31821 + C31822) * C505) +
             (C32213 + C32214) * C48723 - (C32215 + C32216) * C507 -
             (C32217 + C32218) * C48697) *
                C48681) *
               C48582 * C2680 +
           (((C32012 + C32011) * C505 + (C32010 + C32009) * C48734 -
             (C32714 + C32713) * C506 - (C32716 + C32715) * C48723 +
             (C34150 + C34149) * C507 + (C34152 + C34151) * C48697) *
                C16513 +
            ((C32017 + C32018) * C505 + (C32019 + C32020) * C48734 -
             (C32717 + C32718) * C506 - (C32719 + C32720) * C48723 +
             (C31780 * C1377 + C31778 * C1388 + C31781 * C2572 +
              C48714 * C2577) *
                 C507 +
             (C31780 * C1389 + C31778 * C1404 + C31781 * C2578 +
              C48714 * C2581) *
                 C48697) *
                C48681) *
               C48582 * C48439) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[153] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C824 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48663 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C825 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C16513 +
            ((C31815 + C31816) * C824 + (C31817 + C31818) * C48663 -
             (C32203 + C32204) * C825 - (C32205 + C32206) * C48481) *
                C48681) *
               C48582 * C2680 +
           (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
              C48714 * C1384) *
                 C825 -
             ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 +
               C31778 * C334) *
                  C48663 +
              (C31781 * C1004 + C48714 * C1009 + C31780 * C304 +
               C31778 * C317) *
                  C824) +
             (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C16513 +
            ((C32713 + C32714) * C825 -
             ((C32009 + C32010) * C48663 + (C32011 + C32012) * C824) +
             (C32715 + C32716) * C48481) *
                C48681) *
               C48582 * C48439) *
              C48355 +
          ((((C32204 + C32203) * C825 -
             ((C31818 + C31817) * C48663 + (C31816 + C31815) * C824) +
             (C32206 + C32205) * C48481) *
                C16513 +
            ((C32211 + C32212) * C825 -
             ((C31819 + C31820) * C48663 + (C31821 + C31822) * C824) +
             (C32213 + C32214) * C48481) *
                C48681) *
               C48582 * C2680 +
           (((C32012 + C32011) * C824 + (C32010 + C32009) * C48663 -
             (C32714 + C32713) * C825 - (C32716 + C32715) * C48481) *
                C16513 +
            ((C32017 + C32018) * C824 + (C32019 + C32020) * C48663 -
             (C32717 + C32718) * C825 - (C32719 + C32720) * C48481) *
                C48681) *
               C48582 * C48439) *
              C48363 +
          ((((C31822 + C31821) * C824 + (C31820 + C31819) * C48663 -
             (C32212 + C32211) * C825 - (C32214 + C32213) * C48481) *
                C16513 +
            ((C31823 + C31824) * C824 + (C31825 + C31826) * C48663 -
             (C32499 + C32500) * C825 - (C32501 + C32502) * C48481) *
                C48681) *
               C48582 * C2680 +
           (((C32718 + C32717) * C825 -
             ((C32020 + C32019) * C48663 + (C32018 + C32017) * C824) +
             (C32720 + C32719) * C48481) *
                C16513 +
            ((C31780 * C1007 + C31778 * C1015 + C31781 * C2306 +
              C48714 * C2307) *
                 C825 -
             ((C32357 + C32358) * C48663 + (C32359 + C32360) * C824) +
             (C31780 * C1016 + C31778 * C1022 + C31781 * C2308 +
              C48714 * C2309) *
                 C48481) *
                C48681) *
               C48582 * C48439) *
              C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[154] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C16513 +
            ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
               C48582 * C2680 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48681 +
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48394 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C114) *
                C16513) *
               C48582 * C48439) *
              C48739 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C16513 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48681) *
               C48582 * C48439 -
           (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) * C48681 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C16513) *
               C48582 * C2680) *
              C48732 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C16513 +
            ((C31823 + C31824) * C114 + (C31825 + C31826) * C48394) * C48681) *
               C48582 * C2680 -
           (((C32357 + C32358) * C48394 + (C32359 + C32360) * C114) * C48681 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C16513) *
               C48582 * C48439) *
              C48719 +
          ((((C32360 + C32359) * C114 + (C32358 + C32357) * C48394) * C16513 +
            ((C31780 * C310 + C31778 * C329 + C31781 * C1008 + C48714 * C1017) *
                 C114 +
             (C31780 * C328 + C31778 * C340 + C31781 * C1018 + C48714 * C1023) *
                 C48394) *
                C48681) *
               C48582 * C48439 -
           (((C31827 + C31828) * C48394 + (C31829 + C31830) * C114) * C48681 +
            ((C31826 + C31825) * C48394 + (C31824 + C31823) * C114) * C16513) *
               C48582 * C2680) *
              C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C16513 +
            ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
               C48582 * C48740 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48681 +
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48394 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C114) *
                C16513) *
               C48582 * C48736 +
           (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                 C114 +
             (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                 C48394) *
                C16513 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48681) *
               C48582 * C48726 -
           (((C33233 + C33234) * C48394 + (C33235 + C33236) * C114) * C48681 +
            ((C31781 * C1807 + C48714 * C1812 + C31780 * C1251 +
              C31778 * C1261) *
                 C48394 +
             (C31781 * C1803 + C48714 * C1806 + C31780 * C1243 +
              C31778 * C1252) *
                 C114) *
                C16513) *
               C48582 * C48704) *
              C2788 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C16513 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48681) *
               C48582 * C48736 -
           (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) * C48681 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C16513) *
               C48582 * C48740 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48681 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C16513) *
               C48582 * C48726 +
           (((C33236 + C33235) * C114 + (C33234 + C33233) * C48394) * C16513 +
            ((C31780 * C1241 + C31778 * C1248 + C31781 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C31780 * C1247 + C31778 * C1259 + C31781 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48681) *
               C48582 * C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[155] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C3456 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C3454 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C3457 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C16513 +
            ((C31815 + C31816) * C3456 + (C31817 + C31818) * C3454 -
             (C32203 + C32204) * C3457 - (C32205 + C32206) * C48481) *
                C48681) *
               C48582 * C48435 +
           (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
              C48714 * C1384) *
                 C3457 -
             ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 +
               C31778 * C334) *
                  C3454 +
              (C31781 * C1004 + C48714 * C1009 + C31780 * C304 +
               C31778 * C317) *
                  C3456) +
             (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C16513 +
            ((C32713 + C32714) * C3457 -
             ((C32009 + C32010) * C3454 + (C32011 + C32012) * C3456) +
             (C32715 + C32716) * C48481) *
                C48681) *
               C48582 * C48442 +
           (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                 C3456 +
             (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                 C3454 -
             (C31781 * C1379 + C48714 * C1392 + C31780 * C1378 +
              C31778 * C1390) *
                 C3457 -
             (C31781 * C1393 + C48714 * C1406 + C31780 * C1391 +
              C31778 * C1405) *
                 C48481) *
                C16513 +
            ((C32013 + C32014) * C3456 + (C32015 + C32016) * C3454 -
             (C33439 + C33440) * C3457 - (C33441 + C33442) * C48481) *
                C48681) *
               C48582 * C3060) *
              C48648 +
          ((((C32204 + C32203) * C3457 -
             ((C31818 + C31817) * C3454 + (C31816 + C31815) * C3456) +
             (C32206 + C32205) * C48481) *
                C16513 +
            ((C32211 + C32212) * C3457 -
             ((C31819 + C31820) * C3454 + (C31821 + C31822) * C3456) +
             (C32213 + C32214) * C48481) *
                C48681) *
               C48582 * C48435 +
           (((C32012 + C32011) * C3456 + (C32010 + C32009) * C3454 -
             (C32714 + C32713) * C3457 - (C32716 + C32715) * C48481) *
                C16513 +
            ((C32017 + C32018) * C3456 + (C32019 + C32020) * C3454 -
             (C32717 + C32718) * C3457 - (C32719 + C32720) * C48481) *
                C48681) *
               C48582 * C48442 +
           (((C33440 + C33439) * C3457 -
             ((C32016 + C32015) * C3454 + (C32014 + C32013) * C3456) +
             (C33442 + C33441) * C48481) *
                C16513 +
            ((C31780 * C1382 + C31778 * C1398 + C31781 * C1383 +
              C48714 * C1400) *
                 C3457 -
             ((C32021 + C32022) * C3454 + (C32023 + C32024) * C3456) +
             (C31780 * C1399 + C31778 * C1409 + C31781 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48681) *
               C48582 * C3060) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[156] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C47163 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48477 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C47155 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48484 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C47169 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C4029) *
               C16513 +
           ((C31815 + C31816) * C47163 + (C31817 + C31818) * C48477 -
            (C32203 + C32204) * C47155 - (C32205 + C32206) * C48484 +
            (C32207 + C32208) * C47169 + (C32209 + C32210) * C4029) *
               C48681) *
              C48582 * C48435 +
          (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
             C48714 * C1384) *
                C47155 -
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48477 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C47163) +
            (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
             C48714 * C1402) *
                C48484 -
            (C31781 * C2570 + C48714 * C2573 + C31780 * C1375 +
             C31778 * C1384) *
                C47169 -
            (C31781 * C2574 + C48714 * C2579 + C31780 * C1385 +
             C31778 * C1402) *
                C4029) *
               C16513 +
           ((C32713 + C32714) * C47155 -
            ((C32009 + C32010) * C48477 + (C32011 + C32012) * C47163) +
            (C32715 + C32716) * C48484 - (C34149 + C34150) * C47169 -
            (C34151 + C34152) * C4029) *
               C48681) *
              C48582 * C48442 +
          (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                C47163 +
            (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                C48477 -
            (C31781 * C1379 + C48714 * C1392 + C31780 * C1378 +
             C31778 * C1390) *
                C47155 -
            (C31781 * C1393 + C48714 * C1406 + C31780 * C1391 +
             C31778 * C1405) *
                C48484 +
            (C31780 * C1379 + C31778 * C1392 + C31781 * C7660 +
             C48714 * C7662) *
                C47169 +
            (C31780 * C1393 + C31778 * C1406 + C31781 * C7663 +
             C48714 * C7666) *
                C4029) *
               C16513 +
           ((C32013 + C32014) * C47163 + (C32015 + C32016) * C48477 -
            (C33439 + C33440) * C47155 - (C33441 + C33442) * C48484 +
            (C31780 * C1381 + C31778 * C1396 + C31781 * C7661 +
             C48714 * C7664) *
                C47169 +
            (C31780 * C1397 + C31778 * C1408 + C31781 * C7665 +
             C48714 * C7667) *
                C4029) *
               C48681) *
              C48582 * C3060) *
         C48350) /
        (p * q * std::sqrt(p + q));
    d2ee[157] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C3456 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C3454 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C3457 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48481) *
               C16513 +
           ((C31815 + C31816) * C3456 + (C31817 + C31818) * C3454 -
            (C32203 + C32204) * C3457 - (C32205 + C32206) * C48481) *
               C48681) *
              C48582 * C48740 +
          (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
             C48714 * C1384) *
                C3457 -
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C3454 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C3456) +
            (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
             C48714 * C1402) *
                C48481) *
               C16513 +
           ((C32713 + C32714) * C3457 -
            ((C32009 + C32010) * C3454 + (C32011 + C32012) * C3456) +
            (C32715 + C32716) * C48481) *
               C48681) *
              C48582 * C48736 +
          (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                C3456 +
            (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                C3454 -
            (C31781 * C1379 + C48714 * C1392 + C31780 * C1378 +
             C31778 * C1390) *
                C3457 -
            (C31781 * C1393 + C48714 * C1406 + C31780 * C1391 +
             C31778 * C1405) *
                C48481) *
               C16513 +
           ((C32013 + C32014) * C3456 + (C32015 + C32016) * C3454 -
            (C33439 + C33440) * C3457 - (C33441 + C33442) * C48481) *
               C48681) *
              C48582 * C48726 +
          (((C31780 * C1803 + C31778 * C1806 + C31781 * C6238 +
             C48714 * C6240) *
                C3457 -
            ((C31781 * C1807 + C48714 * C1812 + C31780 * C1251 +
              C31778 * C1261) *
                 C3454 +
             (C31781 * C1803 + C48714 * C1806 + C31780 * C1243 +
              C31778 * C1252) *
                 C3456) +
            (C31780 * C1807 + C31778 * C1812 + C31781 * C6241 +
             C48714 * C6244) *
                C48481) *
               C16513 +
           ((C31780 * C1804 + C31778 * C1808 + C31781 * C6239 +
             C48714 * C6242) *
                C3457 -
            ((C33233 + C33234) * C3454 + (C33235 + C33236) * C3456) +
            (C31780 * C1809 + C31778 * C1813 + C31781 * C6243 +
             C48714 * C6245) *
                C48481) *
               C48681) *
              C48582 * C48704) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C3456 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C3454 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C3457 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C16513 +
            ((C31815 + C31816) * C3456 + (C31817 + C31818) * C3454 -
             (C32203 + C32204) * C3457 - (C32205 + C32206) * C48481) *
                C48681) *
               C48582 * C2680 +
           (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
              C48714 * C1384) *
                 C3457 -
             ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 +
               C31778 * C334) *
                  C3454 +
              (C31781 * C1004 + C48714 * C1009 + C31780 * C304 +
               C31778 * C317) *
                  C3456) +
             (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C16513 +
            ((C32713 + C32714) * C3457 -
             ((C32009 + C32010) * C3454 + (C32011 + C32012) * C3456) +
             (C32715 + C32716) * C48481) *
                C48681) *
               C48582 * C48439) *
              C48730 +
          ((((C32204 + C32203) * C3457 -
             ((C31818 + C31817) * C3454 + (C31816 + C31815) * C3456) +
             (C32206 + C32205) * C48481) *
                C16513 +
            ((C32211 + C32212) * C3457 -
             ((C31819 + C31820) * C3454 + (C31821 + C31822) * C3456) +
             (C32213 + C32214) * C48481) *
                C48681) *
               C48582 * C2680 +
           (((C32012 + C32011) * C3456 + (C32010 + C32009) * C3454 -
             (C32714 + C32713) * C3457 - (C32716 + C32715) * C48481) *
                C16513 +
            ((C32017 + C32018) * C3456 + (C32019 + C32020) * C3454 -
             (C32717 + C32718) * C3457 - (C32719 + C32720) * C48481) *
                C48681) *
               C48582 * C48439) *
              C48717 +
          ((((C31822 + C31821) * C3456 + (C31820 + C31819) * C3454 -
             (C32212 + C32211) * C3457 - (C32214 + C32213) * C48481) *
                C16513 +
            ((C31823 + C31824) * C3456 + (C31825 + C31826) * C3454 -
             (C32499 + C32500) * C3457 - (C32501 + C32502) * C48481) *
                C48681) *
               C48582 * C2680 +
           (((C32718 + C32717) * C3457 -
             ((C32020 + C32019) * C3454 + (C32018 + C32017) * C3456) +
             (C32720 + C32719) * C48481) *
                C16513 +
            ((C31780 * C1007 + C31778 * C1015 + C31781 * C2306 +
              C48714 * C2307) *
                 C3457 -
             ((C32357 + C32358) * C3454 + (C32359 + C32360) * C3456) +
             (C31780 * C1016 + C31778 * C1022 + C31781 * C2308 +
              C48714 * C2309) *
                 C48481) *
                C48681) *
               C48582 * C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C3744 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48741 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C3745 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48738 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C3746 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C48729 -
            (C31781 * C2137 + C48714 * C2144 + C31780 * C2136 +
             C31778 * C2142) *
                C3747 -
            (C31781 * C2145 + C48714 * C2155 + C31780 * C2143 +
             C31778 * C2154) *
                C48710) *
               C16513 +
           ((C31815 + C31816) * C3744 + (C31817 + C31818) * C48741 -
            (C32203 + C32204) * C3745 - (C32205 + C32206) * C48738 +
            (C32207 + C32208) * C3746 + (C32209 + C32210) * C48729 -
            (C34291 + C34292) * C3747 - (C34293 + C34294) * C48710) *
               C48681) *
              C48582 * C2680 +
          (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
             C48714 * C1384) *
                C3745 -
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48741 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C3744) +
            (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
             C48714 * C1402) *
                C48738 -
            (C31781 * C2570 + C48714 * C2573 + C31780 * C1375 +
             C31778 * C1384) *
                C3746 -
            (C31781 * C2574 + C48714 * C2579 + C31780 * C1385 +
             C31778 * C1402) *
                C48729 +
            (C31780 * C2570 + C31778 * C2573 + C31781 * C7174 +
             C48714 * C7176) *
                C3747 +
            (C31780 * C2574 + C31778 * C2579 + C31781 * C7177 +
             C48714 * C7180) *
                C48710) *
               C16513 +
           ((C32713 + C32714) * C3745 -
            ((C32009 + C32010) * C48741 + (C32011 + C32012) * C3744) +
            (C32715 + C32716) * C48738 - (C34149 + C34150) * C3746 -
            (C34151 + C34152) * C48729 +
            (C31780 * C2571 + C31778 * C2575 + C31781 * C7175 +
             C48714 * C7178) *
                C3747 +
            (C31780 * C2576 + C31778 * C2580 + C31781 * C7179 +
             C48714 * C7181) *
                C48710) *
               C48681) *
              C48582 * C48439) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[158] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C47163 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48477 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C47155 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48484 +
             (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                 C47169 +
             (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                 C4029) *
                C16513 +
            ((C31815 + C31816) * C47163 + (C31817 + C31818) * C48477 -
             (C32203 + C32204) * C47155 - (C32205 + C32206) * C48484 +
             (C32207 + C32208) * C47169 + (C32209 + C32210) * C4029) *
                C48681) *
               C48582 * C2680 +
           (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
              C48714 * C1384) *
                 C47155 -
             ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 +
               C31778 * C334) *
                  C48477 +
              (C31781 * C1004 + C48714 * C1009 + C31780 * C304 +
               C31778 * C317) *
                  C47163) +
             (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
              C48714 * C1402) *
                 C48484 -
             (C31781 * C2570 + C48714 * C2573 + C31780 * C1375 +
              C31778 * C1384) *
                 C47169 -
             (C31781 * C2574 + C48714 * C2579 + C31780 * C1385 +
              C31778 * C1402) *
                 C4029) *
                C16513 +
            ((C32713 + C32714) * C47155 -
             ((C32009 + C32010) * C48477 + (C32011 + C32012) * C47163) +
             (C32715 + C32716) * C48484 - (C34149 + C34150) * C47169 -
             (C34151 + C34152) * C4029) *
                C48681) *
               C48582 * C48439) *
              C48648 +
          ((((C32204 + C32203) * C47155 -
             ((C31818 + C31817) * C48477 + (C31816 + C31815) * C47163) +
             (C32206 + C32205) * C48484 - (C32208 + C32207) * C47169 -
             (C32210 + C32209) * C4029) *
                C16513 +
            ((C32211 + C32212) * C47155 -
             ((C31819 + C31820) * C48477 + (C31821 + C31822) * C47163) +
             (C32213 + C32214) * C48484 - (C32215 + C32216) * C47169 -
             (C32217 + C32218) * C4029) *
                C48681) *
               C48582 * C2680 +
           (((C32012 + C32011) * C47163 + (C32010 + C32009) * C48477 -
             (C32714 + C32713) * C47155 - (C32716 + C32715) * C48484 +
             (C34150 + C34149) * C47169 + (C34152 + C34151) * C4029) *
                C16513 +
            ((C32017 + C32018) * C47163 + (C32019 + C32020) * C48477 -
             (C32717 + C32718) * C47155 - (C32719 + C32720) * C48484 +
             (C31780 * C1377 + C31778 * C1388 + C31781 * C2572 +
              C48714 * C2577) *
                 C47169 +
             (C31780 * C1389 + C31778 * C1404 + C31781 * C2578 +
              C48714 * C2581) *
                 C4029) *
                C48681) *
               C48582 * C48439) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[159] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C3456 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C3454 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C3457 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C16513 +
            ((C31815 + C31816) * C3456 + (C31817 + C31818) * C3454 -
             (C32203 + C32204) * C3457 - (C32205 + C32206) * C48481) *
                C48681) *
               C48582 * C2680 +
           (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
              C48714 * C1384) *
                 C3457 -
             ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 +
               C31778 * C334) *
                  C3454 +
              (C31781 * C1004 + C48714 * C1009 + C31780 * C304 +
               C31778 * C317) *
                  C3456) +
             (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C16513 +
            ((C32713 + C32714) * C3457 -
             ((C32009 + C32010) * C3454 + (C32011 + C32012) * C3456) +
             (C32715 + C32716) * C48481) *
                C48681) *
               C48582 * C48439) *
              C48730 +
          ((((C32204 + C32203) * C3457 -
             ((C31818 + C31817) * C3454 + (C31816 + C31815) * C3456) +
             (C32206 + C32205) * C48481) *
                C16513 +
            ((C32211 + C32212) * C3457 -
             ((C31819 + C31820) * C3454 + (C31821 + C31822) * C3456) +
             (C32213 + C32214) * C48481) *
                C48681) *
               C48582 * C2680 +
           (((C32012 + C32011) * C3456 + (C32010 + C32009) * C3454 -
             (C32714 + C32713) * C3457 - (C32716 + C32715) * C48481) *
                C16513 +
            ((C32017 + C32018) * C3456 + (C32019 + C32020) * C3454 -
             (C32717 + C32718) * C3457 - (C32719 + C32720) * C48481) *
                C48681) *
               C48582 * C48439) *
              C48717 +
          ((((C31822 + C31821) * C3456 + (C31820 + C31819) * C3454 -
             (C32212 + C32211) * C3457 - (C32214 + C32213) * C48481) *
                C16513 +
            ((C31823 + C31824) * C3456 + (C31825 + C31826) * C3454 -
             (C32499 + C32500) * C3457 - (C32501 + C32502) * C48481) *
                C48681) *
               C48582 * C2680 +
           (((C32718 + C32717) * C3457 -
             ((C32020 + C32019) * C3454 + (C32018 + C32017) * C3456) +
             (C32720 + C32719) * C48481) *
                C16513 +
            ((C31780 * C1007 + C31778 * C1015 + C31781 * C2306 +
              C48714 * C2307) *
                 C3457 -
             ((C32357 + C32358) * C3454 + (C32359 + C32360) * C3456) +
             (C31780 * C1016 + C31778 * C1022 + C31781 * C2308 +
              C48714 * C2309) *
                 C48481) *
                C48681) *
               C48582 * C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C3456 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C3454 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C3457 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48481) *
               C16513 +
           ((C31815 + C31816) * C3456 + (C31817 + C31818) * C3454 -
            (C32203 + C32204) * C3457 - (C32205 + C32206) * C48481) *
               C48681) *
              C48582 * C48740 +
          (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
             C48714 * C1384) *
                C3457 -
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C3454 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C3456) +
            (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
             C48714 * C1402) *
                C48481) *
               C16513 +
           ((C32713 + C32714) * C3457 -
            ((C32009 + C32010) * C3454 + (C32011 + C32012) * C3456) +
            (C32715 + C32716) * C48481) *
               C48681) *
              C48582 * C48736 +
          (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                C3456 +
            (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                C3454 -
            (C31781 * C1379 + C48714 * C1392 + C31780 * C1378 +
             C31778 * C1390) *
                C3457 -
            (C31781 * C1393 + C48714 * C1406 + C31780 * C1391 +
             C31778 * C1405) *
                C48481) *
               C16513 +
           ((C32013 + C32014) * C3456 + (C32015 + C32016) * C3454 -
            (C33439 + C33440) * C3457 - (C33441 + C33442) * C48481) *
               C48681) *
              C48582 * C48726 +
          (((C31780 * C1803 + C31778 * C1806 + C31781 * C6238 +
             C48714 * C6240) *
                C3457 -
            ((C31781 * C1807 + C48714 * C1812 + C31780 * C1251 +
              C31778 * C1261) *
                 C3454 +
             (C31781 * C1803 + C48714 * C1806 + C31780 * C1243 +
              C31778 * C1252) *
                 C3456) +
            (C31780 * C1807 + C31778 * C1812 + C31781 * C6241 +
             C48714 * C6244) *
                C48481) *
               C16513 +
           ((C31780 * C1804 + C31778 * C1808 + C31781 * C6239 +
             C48714 * C6242) *
                C3457 -
            ((C33233 + C33234) * C3454 + (C33235 + C33236) * C3456) +
            (C31780 * C1809 + C31778 * C1813 + C31781 * C6243 +
             C48714 * C6245) *
                C48481) *
               C48681) *
              C48582 * C48704) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[160] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C16513 +
            ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
               C48582 * C1509 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48681 +
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48394 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C114) *
                C16513) *
               C48582 * C1510 +
           (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                 C114 +
             (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                 C48394) *
                C16513 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48681) *
               C48582 * C1511 -
           (((C33233 + C33234) * C48394 + (C33235 + C33236) * C114) * C48681 +
            ((C31781 * C1807 + C48714 * C1812 + C31780 * C1251 +
              C31778 * C1261) *
                 C48394 +
             (C31781 * C1803 + C48714 * C1806 + C31780 * C1243 +
              C31778 * C1252) *
                 C114) *
                C16513) *
               C48582 * C48704) *
              C48648 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C16513 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48681) *
               C48582 * C1510 -
           (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) * C48681 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C16513) *
               C48582 * C1509 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48681 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C16513) *
               C48582 * C1511 +
           (((C33236 + C33235) * C114 + (C33234 + C33233) * C48394) * C16513 +
            ((C31780 * C1241 + C31778 * C1248 + C31781 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C31780 * C1247 + C31778 * C1259 + C31781 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48681) *
               C48582 * C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C16513 +
            ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
               C48582 * C48662 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48681 +
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48394 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C114) *
                C16513) *
               C48582 * C48439) *
              C707 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C16513 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48681) *
               C48582 * C48439 -
           (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) * C48681 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C16513) *
               C48582 * C48662) *
              C708 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C16513 +
            ((C31823 + C31824) * C114 + (C31825 + C31826) * C48394) * C48681) *
               C48582 * C48662 -
           (((C32357 + C32358) * C48394 + (C32359 + C32360) * C114) * C48681 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C16513) *
               C48582 * C48439) *
              C709 +
          ((((C32360 + C32359) * C114 + (C32358 + C32357) * C48394) * C16513 +
            ((C31780 * C310 + C31778 * C329 + C31781 * C1008 + C48714 * C1017) *
                 C114 +
             (C31780 * C328 + C31778 * C340 + C31781 * C1018 + C48714 * C1023) *
                 C48394) *
                C48681) *
               C48582 * C48439 -
           (((C31827 + C31828) * C48394 + (C31829 + C31830) * C114) * C48681 +
            ((C31826 + C31825) * C48394 + (C31824 + C31823) * C114) * C16513) *
               C48582 * C48662) *
              C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C1928 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C1925 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C1929 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C1926 +
             (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                 C1930 +
             (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                 C48697) *
                C16513 +
            ((C31815 + C31816) * C1928 + (C31817 + C31818) * C1925 -
             (C32203 + C32204) * C1929 - (C32205 + C32206) * C1926 +
             (C32207 + C32208) * C1930 + (C32209 + C32210) * C48697) *
                C48681) *
               C48582 * C48662 +
           (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
              C48714 * C1384) *
                 C1929 -
             ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 +
               C31778 * C334) *
                  C1925 +
              (C31781 * C1004 + C48714 * C1009 + C31780 * C304 +
               C31778 * C317) *
                  C1928) +
             (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
              C48714 * C1402) *
                 C1926 -
             (C31781 * C2570 + C48714 * C2573 + C31780 * C1375 +
              C31778 * C1384) *
                 C1930 -
             (C31781 * C2574 + C48714 * C2579 + C31780 * C1385 +
              C31778 * C1402) *
                 C48697) *
                C16513 +
            ((C32713 + C32714) * C1929 -
             ((C32009 + C32010) * C1925 + (C32011 + C32012) * C1928) +
             (C32715 + C32716) * C1926 - (C34149 + C34150) * C1930 -
             (C34151 + C34152) * C48697) *
                C48681) *
               C48582 * C48439) *
              C48648 +
          ((((C32204 + C32203) * C1929 -
             ((C31818 + C31817) * C1925 + (C31816 + C31815) * C1928) +
             (C32206 + C32205) * C1926 - (C32208 + C32207) * C1930 -
             (C32210 + C32209) * C48697) *
                C16513 +
            ((C32211 + C32212) * C1929 -
             ((C31819 + C31820) * C1925 + (C31821 + C31822) * C1928) +
             (C32213 + C32214) * C1926 - (C32215 + C32216) * C1930 -
             (C32217 + C32218) * C48697) *
                C48681) *
               C48582 * C48662 +
           (((C32012 + C32011) * C1928 + (C32010 + C32009) * C1925 -
             (C32714 + C32713) * C1929 - (C32716 + C32715) * C1926 +
             (C34150 + C34149) * C1930 + (C34152 + C34151) * C48697) *
                C16513 +
            ((C32017 + C32018) * C1928 + (C32019 + C32020) * C1925 -
             (C32717 + C32718) * C1929 - (C32719 + C32720) * C1926 +
             (C31780 * C1377 + C31778 * C1388 + C31781 * C2572 +
              C48714 * C2577) *
                 C1930 +
             (C31780 * C1389 + C31778 * C1404 + C31781 * C2578 +
              C48714 * C2581) *
                 C48697) *
                C48681) *
               C48582 * C48439) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[161] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C824 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48663 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C825 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48481) *
               C16513 +
           ((C31815 + C31816) * C824 + (C31817 + C31818) * C48663 -
            (C32203 + C32204) * C825 - (C32205 + C32206) * C48481) *
               C48681) *
              C48582 * C1509 +
          (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
             C48714 * C1384) *
                C825 -
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48663 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C824) +
            (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
             C48714 * C1402) *
                C48481) *
               C16513 +
           ((C32713 + C32714) * C825 -
            ((C32009 + C32010) * C48663 + (C32011 + C32012) * C824) +
            (C32715 + C32716) * C48481) *
               C48681) *
              C48582 * C1510 +
          (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                C824 +
            (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                C48663 -
            (C31781 * C1379 + C48714 * C1392 + C31780 * C1378 +
             C31778 * C1390) *
                C825 -
            (C31781 * C1393 + C48714 * C1406 + C31780 * C1391 +
             C31778 * C1405) *
                C48481) *
               C16513 +
           ((C32013 + C32014) * C824 + (C32015 + C32016) * C48663 -
            (C33439 + C33440) * C825 - (C33441 + C33442) * C48481) *
               C48681) *
              C48582 * C1511 +
          (((C31780 * C1803 + C31778 * C1806 + C31781 * C6238 +
             C48714 * C6240) *
                C825 -
            ((C31781 * C1807 + C48714 * C1812 + C31780 * C1251 +
              C31778 * C1261) *
                 C48663 +
             (C31781 * C1803 + C48714 * C1806 + C31780 * C1243 +
              C31778 * C1252) *
                 C824) +
            (C31780 * C1807 + C31778 * C1812 + C31781 * C6241 +
             C48714 * C6244) *
                C48481) *
               C16513 +
           ((C31780 * C1804 + C31778 * C1808 + C31781 * C6239 +
             C48714 * C6242) *
                C825 -
            ((C33233 + C33234) * C48663 + (C33235 + C33236) * C824) +
            (C31780 * C1809 + C31778 * C1813 + C31781 * C6243 +
             C48714 * C6245) *
                C48481) *
               C48681) *
              C48582 * C48704) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C824 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48663 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C825 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C16513 +
            ((C31815 + C31816) * C824 + (C31817 + C31818) * C48663 -
             (C32203 + C32204) * C825 - (C32205 + C32206) * C48481) *
                C48681) *
               C48582 * C48662 +
           (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
              C48714 * C1384) *
                 C825 -
             ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 +
               C31778 * C334) *
                  C48663 +
              (C31781 * C1004 + C48714 * C1009 + C31780 * C304 +
               C31778 * C317) *
                  C824) +
             (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C16513 +
            ((C32713 + C32714) * C825 -
             ((C32009 + C32010) * C48663 + (C32011 + C32012) * C824) +
             (C32715 + C32716) * C48481) *
                C48681) *
               C48582 * C48439) *
              C299 +
          ((((C32204 + C32203) * C825 -
             ((C31818 + C31817) * C48663 + (C31816 + C31815) * C824) +
             (C32206 + C32205) * C48481) *
                C16513 +
            ((C32211 + C32212) * C825 -
             ((C31819 + C31820) * C48663 + (C31821 + C31822) * C824) +
             (C32213 + C32214) * C48481) *
                C48681) *
               C48582 * C48662 +
           (((C32012 + C32011) * C824 + (C32010 + C32009) * C48663 -
             (C32714 + C32713) * C825 - (C32716 + C32715) * C48481) *
                C16513 +
            ((C32017 + C32018) * C824 + (C32019 + C32020) * C48663 -
             (C32717 + C32718) * C825 - (C32719 + C32720) * C48481) *
                C48681) *
               C48582 * C48439) *
              C300 +
          ((((C31822 + C31821) * C824 + (C31820 + C31819) * C48663 -
             (C32212 + C32211) * C825 - (C32214 + C32213) * C48481) *
                C16513 +
            ((C31823 + C31824) * C824 + (C31825 + C31826) * C48663 -
             (C32499 + C32500) * C825 - (C32501 + C32502) * C48481) *
                C48681) *
               C48582 * C48662 +
           (((C32718 + C32717) * C825 -
             ((C32020 + C32019) * C48663 + (C32018 + C32017) * C824) +
             (C32720 + C32719) * C48481) *
                C16513 +
            ((C31780 * C1007 + C31778 * C1015 + C31781 * C2306 +
              C48714 * C2307) *
                 C825 -
             ((C32357 + C32358) * C48663 + (C32359 + C32360) * C824) +
             (C31780 * C1016 + C31778 * C1022 + C31781 * C2308 +
              C48714 * C2309) *
                 C48481) *
                C48681) *
               C48582 * C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C2436 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C2432 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C2437 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C2433 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C2438 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C2434 -
            (C31781 * C2137 + C48714 * C2144 + C31780 * C2136 +
             C31778 * C2142) *
                C2439 -
            (C31781 * C2145 + C48714 * C2155 + C31780 * C2143 +
             C31778 * C2154) *
                C48710) *
               C16513 +
           ((C31815 + C31816) * C2436 + (C31817 + C31818) * C2432 -
            (C32203 + C32204) * C2437 - (C32205 + C32206) * C2433 +
            (C32207 + C32208) * C2438 + (C32209 + C32210) * C2434 -
            (C34291 + C34292) * C2439 - (C34293 + C34294) * C48710) *
               C48681) *
              C48582 * C48662 +
          (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
             C48714 * C1384) *
                C2437 -
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C2432 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C2436) +
            (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
             C48714 * C1402) *
                C2433 -
            (C31781 * C2570 + C48714 * C2573 + C31780 * C1375 +
             C31778 * C1384) *
                C2438 -
            (C31781 * C2574 + C48714 * C2579 + C31780 * C1385 +
             C31778 * C1402) *
                C2434 +
            (C31780 * C2570 + C31778 * C2573 + C31781 * C7174 +
             C48714 * C7176) *
                C2439 +
            (C31780 * C2574 + C31778 * C2579 + C31781 * C7177 +
             C48714 * C7180) *
                C48710) *
               C16513 +
           ((C32713 + C32714) * C2437 -
            ((C32009 + C32010) * C2432 + (C32011 + C32012) * C2436) +
            (C32715 + C32716) * C2433 - (C34149 + C34150) * C2438 -
            (C34151 + C34152) * C2434 +
            (C31780 * C2571 + C31778 * C2575 + C31781 * C7175 +
             C48714 * C7178) *
                C2439 +
            (C31780 * C2576 + C31778 * C2580 + C31781 * C7179 +
             C48714 * C7181) *
                C48710) *
               C48681) *
              C48582 * C48439) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[162] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C31780 * C115 + C31778 * C122 + C31781 * C508 +
                 C48714 * C518) *
                    C114 +
                (C31780 * C123 + C31778 * C136 + C31781 * C519 +
                 C48714 * C538) *
                    C48394) *
                   C16513 +
               ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) *
                   C48681) *
                  C48582 * C48377 * C108 -
              (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) *
                   C48681 +
               ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) *
                   C16513) *
                  C48582 * C48377 * C109 +
              (((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) *
                   C16513 +
               ((C31823 + C31824) * C114 + (C31825 + C31826) * C48394) *
                   C48681) *
                  C48582 * C48377 * C110 -
              (((C31827 + C31828) * C48394 + (C31829 + C31830) * C114) *
                   C48681 +
               ((C31826 + C31825) * C48394 + (C31824 + C31823) * C114) *
                   C16513) *
                  C48582 * C48377 * C111 +
              (((C31830 + C31829) * C114 + (C31828 + C31827) * C48394) *
                   C16513 +
               ((C31780 * C120 + C31778 * C133 + C31781 * C826 +
                 C48714 * C827) *
                    C114 +
                (C31780 * C132 + C31778 * C141 + C31781 * C828 +
                 C48714 * C829) *
                    C48394) *
                   C48681) *
                  C48582 * C48377 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C31780 * C115 + C31778 * C122 + C31781 * C508 +
                  C48714 * C518) *
                     C114 +
                 (C31780 * C123 + C31778 * C136 + C31781 * C519 +
                  C48714 * C538) *
                     C48394) *
                    C16513 +
                ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) *
                    C48681) *
                   C48582 * C48733 -
               (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) *
                    C48681 +
                ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 +
                  C31778 * C334) *
                     C48394 +
                 (C31781 * C1004 + C48714 * C1009 + C31780 * C304 +
                  C31778 * C317) *
                     C114) *
                    C16513) *
                   C48582 * C48721 +
               (((C31780 * C305 + C31778 * C318 + C31781 * C1378 +
                  C48714 * C1390) *
                     C114 +
                 (C31780 * C319 + C31778 * C335 + C31781 * C1391 +
                  C48714 * C1405) *
                     C48394) *
                    C16513 +
                ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) *
                    C48681) *
                   C48582 * C48694) *
                  C299 +
              ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) *
                    C16513 +
                ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) *
                    C48681) *
                   C48582 * C48721 -
               (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) *
                    C48681 +
                ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) *
                    C16513) *
                   C48582 * C48733 -
               (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) *
                    C48681 +
                ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) *
                    C16513) *
                   C48582 * C48694) *
                  C300 +
              ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) *
                    C16513 +
                ((C31823 + C31824) * C114 + (C31825 + C31826) * C48394) *
                    C48681) *
                   C48582 * C48733 -
               (((C31781 * C1016 + C48714 * C1022 + C31780 * C325 +
                  C31778 * C338) *
                     C48394 +
                 (C31781 * C1007 + C48714 * C1015 + C31780 * C308 +
                  C31778 * C324) *
                     C114) *
                    C48681 +
                ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) *
                    C16513) *
                   C48582 * C48721 +
               (((C32024 + C32023) * C114 + (C32022 + C32021) * C48394) *
                    C16513 +
                ((C31780 * C309 + C31778 * C327 + C31781 * C1681 +
                  C48714 * C1682) *
                     C114 +
                 (C31780 * C326 + C31778 * C339 + C31781 * C1683 +
                  C48714 * C1684) *
                     C48394) *
                    C48681) *
                   C48582 * C48694) *
                  C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C505 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48734 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C506 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48723 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C507 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C48697) *
               C16513 +
           ((C31815 + C31816) * C505 + (C31817 + C31818) * C48734 -
            (C32203 + C32204) * C506 - (C32205 + C32206) * C48723 +
            (C32207 + C32208) * C507 + (C32209 + C32210) * C48697) *
               C48681) *
              C48582 * C48377 * C299 +
          (((C32204 + C32203) * C506 -
            ((C31818 + C31817) * C48734 + (C31816 + C31815) * C505) +
            (C32206 + C32205) * C48723 - (C32208 + C32207) * C507 -
            (C32210 + C32209) * C48697) *
               C16513 +
           ((C32211 + C32212) * C506 -
            ((C31819 + C31820) * C48734 + (C31821 + C31822) * C505) +
            (C32213 + C32214) * C48723 - (C32215 + C32216) * C507 -
            (C32217 + C32218) * C48697) *
               C48681) *
              C48582 * C48377 * C300 +
          (((C31822 + C31821) * C505 + (C31820 + C31819) * C48734 -
            (C32212 + C32211) * C506 - (C32214 + C32213) * C48723 +
            (C32216 + C32215) * C507 + (C32218 + C32217) * C48697) *
               C16513 +
           ((C31823 + C31824) * C505 + (C31825 + C31826) * C48734 -
            (C31781 * C515 + C48714 * C532 + C31780 * C514 + C31778 * C530) *
                C506 -
            (C31781 * C533 + C48714 * C545 + C31780 * C531 + C31778 * C544) *
                C48723 +
            (C31780 * C515 + C31778 * C532 + C31781 * C2440 + C48714 * C2441) *
                C507 +
            (C31780 * C533 + C31778 * C545 + C31781 * C2442 + C48714 * C2443) *
                C48697) *
               C48681) *
              C48582 * C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C16513 +
            ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
               C48582 * C1167 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48681 +
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48394 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C114) *
                C16513) *
               C48582 * C1168 +
           (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                 C114 +
             (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                 C48394) *
                C16513 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48681) *
               C48582 * C48694) *
              C48730 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C16513 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48681) *
               C48582 * C1168 -
           (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) * C48681 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C16513) *
               C48582 * C1167 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48681 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C16513) *
               C48582 * C48694) *
              C48717 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C16513 +
            ((C31823 + C31824) * C114 + (C31825 + C31826) * C48394) * C48681) *
               C48582 * C1167 -
           (((C32357 + C32358) * C48394 + (C32359 + C32360) * C114) * C48681 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C16513) *
               C48582 * C1168 +
           (((C32024 + C32023) * C114 + (C32022 + C32021) * C48394) * C16513 +
            ((C31780 * C309 + C31778 * C327 + C31781 * C1681 + C48714 * C1682) *
                 C114 +
             (C31780 * C326 + C31778 * C339 + C31781 * C1683 + C48714 * C1684) *
                 C48394) *
                C48681) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C114 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48394) *
               C16513 +
           ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
              C48582 * C1235 -
          (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48681 +
           ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                C48394 +
            (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                C114) *
               C16513) *
              C48582 * C1236 +
          (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                C114 +
            (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                C48394) *
               C16513 +
           ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48681) *
              C48582 * C1237 -
          (((C31781 * C1809 + C48714 * C1813 + C31780 * C1249 +
             C31778 * C1260) *
                C48394 +
            (C31781 * C1804 + C48714 * C1808 + C31780 * C1242 +
             C31778 * C1250) *
                C114) *
               C48681 +
           ((C31781 * C1807 + C48714 * C1812 + C31780 * C1251 +
             C31778 * C1261) *
                C48394 +
            (C31781 * C1803 + C48714 * C1806 + C31780 * C1243 +
             C31778 * C1252) *
                C114) *
               C16513) *
              C48582 * C1238 +
          (((C31780 * C1244 + C31778 * C1253 + C31781 * C6764 +
             C48714 * C6766) *
                C114 +
            (C31780 * C1254 + C31778 * C1262 + C31781 * C6767 +
             C48714 * C6770) *
                C48394) *
               C16513 +
           ((C31780 * C1245 + C31778 * C1255 + C31781 * C6765 +
             C48714 * C6768) *
                C114 +
            (C31780 * C1256 + C31778 * C1263 + C31781 * C6769 +
             C48714 * C6771) *
                C48394) *
               C48681) *
              C48582 * C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C505 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48734 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C506 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48723 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C507 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C48697) *
               C16513 +
           ((C31815 + C31816) * C505 + (C31817 + C31818) * C48734 -
            (C32203 + C32204) * C506 - (C32205 + C32206) * C48723 +
            (C32207 + C32208) * C507 + (C32209 + C32210) * C48697) *
               C48681) *
              C48582 * C1167 +
          (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
             C48714 * C1384) *
                C506 -
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48734 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C505) +
            (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
             C48714 * C1402) *
                C48723 -
            (C31781 * C2570 + C48714 * C2573 + C31780 * C1375 +
             C31778 * C1384) *
                C507 -
            (C31781 * C2574 + C48714 * C2579 + C31780 * C1385 +
             C31778 * C1402) *
                C48697) *
               C16513 +
           ((C32713 + C32714) * C506 -
            ((C32009 + C32010) * C48734 + (C32011 + C32012) * C505) +
            (C32715 + C32716) * C48723 -
            (C31781 * C2571 + C48714 * C2575 + C31780 * C1376 +
             C31778 * C1386) *
                C507 -
            (C31781 * C2576 + C48714 * C2580 + C31780 * C1387 +
             C31778 * C1403) *
                C48697) *
               C48681) *
              C48582 * C1168 +
          (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                C505 +
            (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                C48734 -
            (C31781 * C1379 + C48714 * C1392 + C31780 * C1378 +
             C31778 * C1390) *
                C506 -
            (C31781 * C1393 + C48714 * C1406 + C31780 * C1391 +
             C31778 * C1405) *
                C48723 +
            (C31780 * C1379 + C31778 * C1392 + C31781 * C7660 +
             C48714 * C7662) *
                C507 +
            (C31780 * C1393 + C31778 * C1406 + C31781 * C7663 +
             C48714 * C7666) *
                C48697) *
               C16513 +
           ((C32013 + C32014) * C505 + (C32015 + C32016) * C48734 -
            (C31781 * C1381 + C48714 * C1396 + C31780 * C1380 +
             C31778 * C1394) *
                C506 -
            (C31781 * C1397 + C48714 * C1408 + C31780 * C1395 +
             C31778 * C1407) *
                C48723 +
            (C31780 * C1381 + C31778 * C1396 + C31781 * C7661 +
             C48714 * C7664) *
                C507 +
            (C31780 * C1397 + C31778 * C1408 + C31781 * C7665 +
             C48714 * C7667) *
                C48697) *
               C48681) *
              C48582 * C48694) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C1928 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C1925 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C1929 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C1926 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C1930 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C48697) *
               C16513 +
           ((C31815 + C31816) * C1928 + (C31817 + C31818) * C1925 -
            (C32203 + C32204) * C1929 - (C32205 + C32206) * C1926 +
            (C32207 + C32208) * C1930 + (C32209 + C32210) * C48697) *
               C48681) *
              C48582 * C48377 * C48730 +
          (((C32204 + C32203) * C1929 -
            ((C31818 + C31817) * C1925 + (C31816 + C31815) * C1928) +
            (C32206 + C32205) * C1926 - (C32208 + C32207) * C1930 -
            (C32210 + C32209) * C48697) *
               C16513 +
           ((C32211 + C32212) * C1929 -
            ((C31819 + C31820) * C1925 + (C31821 + C31822) * C1928) +
            (C32213 + C32214) * C1926 - (C32215 + C32216) * C1930 -
            (C32217 + C32218) * C48697) *
               C48681) *
              C48582 * C48377 * C48717 +
          (((C31822 + C31821) * C1928 + (C31820 + C31819) * C1925 -
            (C32212 + C32211) * C1929 - (C32214 + C32213) * C1926 +
            (C32216 + C32215) * C1930 + (C32218 + C32217) * C48697) *
               C16513 +
           ((C31823 + C31824) * C1928 + (C31825 + C31826) * C1925 -
            (C32499 + C32500) * C1929 - (C32501 + C32502) * C1926 +
            (C31780 * C515 + C31778 * C532 + C31781 * C2440 + C48714 * C2441) *
                C1930 +
            (C31780 * C533 + C31778 * C545 + C31781 * C2442 + C48714 * C2443) *
                C48697) *
               C48681) *
              C48582 * C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C1928 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C1925 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C1929 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C1926 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C1930 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C48697) *
               C16513 +
           ((C31815 + C31816) * C1928 + (C31817 + C31818) * C1925 -
            (C32203 + C32204) * C1929 - (C32205 + C32206) * C1926 +
            (C32207 + C32208) * C1930 + (C32209 + C32210) * C48697) *
               C48681) *
              C48582 * C48733 +
          (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
             C48714 * C1384) *
                C1929 -
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C1925 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C1928) +
            (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
             C48714 * C1402) *
                C1926 -
            (C31781 * C2570 + C48714 * C2573 + C31780 * C1375 +
             C31778 * C1384) *
                C1930 -
            (C31781 * C2574 + C48714 * C2579 + C31780 * C1385 +
             C31778 * C1402) *
                C48697) *
               C16513 +
           ((C32713 + C32714) * C1929 -
            ((C32009 + C32010) * C1925 + (C32011 + C32012) * C1928) +
            (C32715 + C32716) * C1926 -
            (C31781 * C2571 + C48714 * C2575 + C31780 * C1376 +
             C31778 * C1386) *
                C1930 -
            (C31781 * C2576 + C48714 * C2580 + C31780 * C1387 +
             C31778 * C1403) *
                C48697) *
               C48681) *
              C48582 * C48721 +
          (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                C1928 +
            (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                C1925 -
            (C31781 * C1379 + C48714 * C1392 + C31780 * C1378 +
             C31778 * C1390) *
                C1929 -
            (C31781 * C1393 + C48714 * C1406 + C31780 * C1391 +
             C31778 * C1405) *
                C1926 +
            (C31780 * C1379 + C31778 * C1392 + C31781 * C7660 +
             C48714 * C7662) *
                C1930 +
            (C31780 * C1393 + C31778 * C1406 + C31781 * C7663 +
             C48714 * C7666) *
                C48697) *
               C16513 +
           ((C32013 + C32014) * C1928 + (C32015 + C32016) * C1925 -
            (C33439 + C33440) * C1929 - (C33441 + C33442) * C1926 +
            (C31780 * C1381 + C31778 * C1396 + C31781 * C7661 +
             C48714 * C7664) *
                C1930 +
            (C31780 * C1397 + C31778 * C1408 + C31781 * C7665 +
             C48714 * C7667) *
                C48697) *
               C48681) *
              C48582 * C48694) *
         C48350) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
               C2131 +
           (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
               C2126 -
           (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
               C2132 -
           (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
               C2127 +
           (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
               C2133 +
           (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
               C2128 -
           (C31781 * C2137 + C48714 * C2144 + C31780 * C2136 + C31778 * C2142) *
               C2134 -
           (C31781 * C2145 + C48714 * C2155 + C31780 * C2143 + C31778 * C2154) *
               C2129 +
           (C31780 * C2137 + C31778 * C2144 + C31781 * C12981 +
            C48714 * C12983) *
               C2135 +
           (C31780 * C2145 + C31778 * C2155 + C31781 * C12984 +
            C48714 * C12987) *
               C2130) *
              C16513 +
          ((C31815 + C31816) * C2131 + (C31817 + C31818) * C2126 -
           (C32203 + C32204) * C2132 - (C32205 + C32206) * C2127 +
           (C32207 + C32208) * C2133 + (C32209 + C32210) * C2128 -
           (C31781 * C2139 + C48714 * C2148 + C31780 * C2138 + C31778 * C2146) *
               C2134 -
           (C31781 * C2149 + C48714 * C2157 + C31780 * C2147 + C31778 * C2156) *
               C2129 +
           (C31780 * C2139 + C31778 * C2148 + C31781 * C12982 +
            C48714 * C12985) *
               C2135 +
           (C31780 * C2149 + C31778 * C2157 + C31781 * C12986 +
            C48714 * C12988) *
               C2130) *
              C48681) *
         C48582 * C48377 * C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[163] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C824 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48663 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C825 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C16513 +
            ((C31815 + C31816) * C824 + (C31817 + C31818) * C48663 -
             (C32203 + C32204) * C825 - (C32205 + C32206) * C48481) *
                C48681) *
               C48582 * C1167 +
           (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
              C48714 * C1384) *
                 C825 -
             ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 +
               C31778 * C334) *
                  C48663 +
              (C31781 * C1004 + C48714 * C1009 + C31780 * C304 +
               C31778 * C317) *
                  C824) +
             (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C16513 +
            ((C32713 + C32714) * C825 -
             ((C32009 + C32010) * C48663 + (C32011 + C32012) * C824) +
             (C32715 + C32716) * C48481) *
                C48681) *
               C48582 * C1168 +
           (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                 C824 +
             (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                 C48663 -
             (C31781 * C1379 + C48714 * C1392 + C31780 * C1378 +
              C31778 * C1390) *
                 C825 -
             (C31781 * C1393 + C48714 * C1406 + C31780 * C1391 +
              C31778 * C1405) *
                 C48481) *
                C16513 +
            ((C32013 + C32014) * C824 + (C32015 + C32016) * C48663 -
             (C33439 + C33440) * C825 - (C33441 + C33442) * C48481) *
                C48681) *
               C48582 * C48694) *
              C48648 +
          ((((C32204 + C32203) * C825 -
             ((C31818 + C31817) * C48663 + (C31816 + C31815) * C824) +
             (C32206 + C32205) * C48481) *
                C16513 +
            ((C32211 + C32212) * C825 -
             ((C31819 + C31820) * C48663 + (C31821 + C31822) * C824) +
             (C32213 + C32214) * C48481) *
                C48681) *
               C48582 * C1167 +
           (((C32012 + C32011) * C824 + (C32010 + C32009) * C48663 -
             (C32714 + C32713) * C825 - (C32716 + C32715) * C48481) *
                C16513 +
            ((C32017 + C32018) * C824 + (C32019 + C32020) * C48663 -
             (C32717 + C32718) * C825 - (C32719 + C32720) * C48481) *
                C48681) *
               C48582 * C1168 +
           (((C33440 + C33439) * C825 -
             ((C32016 + C32015) * C48663 + (C32014 + C32013) * C824) +
             (C33442 + C33441) * C48481) *
                C16513 +
            ((C31780 * C1382 + C31778 * C1398 + C31781 * C1383 +
              C48714 * C1400) *
                 C825 -
             ((C32021 + C32022) * C48663 + (C32023 + C32024) * C824) +
             (C31780 * C1399 + C31778 * C1409 + C31781 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48681) *
               C48582 * C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C824 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48663 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C825 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48481) *
               C16513 +
           ((C31815 + C31816) * C824 + (C31817 + C31818) * C48663 -
            (C32203 + C32204) * C825 - (C32205 + C32206) * C48481) *
               C48681) *
              C48582 * C48377 * C707 +
          (((C32204 + C32203) * C825 -
            ((C31818 + C31817) * C48663 + (C31816 + C31815) * C824) +
            (C32206 + C32205) * C48481) *
               C16513 +
           ((C32211 + C32212) * C825 -
            ((C31819 + C31820) * C48663 + (C31821 + C31822) * C824) +
            (C32213 + C32214) * C48481) *
               C48681) *
              C48582 * C48377 * C708 +
          (((C31822 + C31821) * C824 + (C31820 + C31819) * C48663 -
            (C32212 + C32211) * C825 - (C32214 + C32213) * C48481) *
               C16513 +
           ((C31823 + C31824) * C824 + (C31825 + C31826) * C48663 -
            (C32499 + C32500) * C825 - (C32501 + C32502) * C48481) *
               C48681) *
              C48582 * C48377 * C709 +
          (((C32500 + C32499) * C825 -
            ((C31826 + C31825) * C48663 + (C31824 + C31823) * C824) +
            (C32502 + C32501) * C48481) *
               C16513 +
           ((C31780 * C516 + C31778 * C534 + C31781 * C517 + C48714 * C536) *
                C825 -
            ((C31827 + C31828) * C48663 + (C31829 + C31830) * C824) +
            (C31780 * C535 + C31778 * C546 + C31781 * C537 + C48714 * C547) *
                C48481) *
               C48681) *
              C48582 * C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C2436 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C2432 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C2437 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C2433 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C2438 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C2434 -
            (C31781 * C2137 + C48714 * C2144 + C31780 * C2136 +
             C31778 * C2142) *
                C2439 -
            (C31781 * C2145 + C48714 * C2155 + C31780 * C2143 +
             C31778 * C2154) *
                C48710) *
               C16513 +
           ((C31815 + C31816) * C2436 + (C31817 + C31818) * C2432 -
            (C32203 + C32204) * C2437 - (C32205 + C32206) * C2433 +
            (C32207 + C32208) * C2438 + (C32209 + C32210) * C2434 -
            (C34291 + C34292) * C2439 - (C34293 + C34294) * C48710) *
               C48681) *
              C48582 * C48377 * C48648 +
          (((C32204 + C32203) * C2437 -
            ((C31818 + C31817) * C2432 + (C31816 + C31815) * C2436) +
            (C32206 + C32205) * C2433 - (C32208 + C32207) * C2438 -
            (C32210 + C32209) * C2434 + (C34292 + C34291) * C2439 +
            (C34294 + C34293) * C48710) *
               C16513 +
           ((C32211 + C32212) * C2437 -
            ((C31819 + C31820) * C2432 + (C31821 + C31822) * C2436) +
            (C32213 + C32214) * C2433 - (C32215 + C32216) * C2438 -
            (C32217 + C32218) * C2434 +
            (C31780 * C2140 + C31778 * C2150 + C31781 * C2141 +
             C48714 * C2152) *
                C2439 +
            (C31780 * C2151 + C31778 * C2158 + C31781 * C2153 +
             C48714 * C2159) *
                C48710) *
               C48681) *
              C48582 * C48377 * C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[164] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C16513 +
            ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
               C48582 * C48733 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48681 +
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48394 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C114) *
                C16513) *
               C48582 * C48721 +
           (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                 C114 +
             (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                 C48394) *
                C16513 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48681) *
               C48582 * C48694) *
              C299 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C16513 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48681) *
               C48582 * C48721 -
           (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) * C48681 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C16513) *
               C48582 * C48733 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48681 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C16513) *
               C48582 * C48694) *
              C300 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C16513 +
            ((C31823 + C31824) * C114 + (C31825 + C31826) * C48394) * C48681) *
               C48582 * C48733 -
           (((C31781 * C1016 + C48714 * C1022 + C31780 * C325 + C31778 * C338) *
                 C48394 +
             (C31781 * C1007 + C48714 * C1015 + C31780 * C308 + C31778 * C324) *
                 C114) *
                C48681 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C16513) *
               C48582 * C48721 +
           (((C32024 + C32023) * C114 + (C32022 + C32021) * C48394) * C16513 +
            ((C31780 * C309 + C31778 * C327 + C31781 * C1681 + C48714 * C1682) *
                 C114 +
             (C31780 * C326 + C31778 * C339 + C31781 * C1683 + C48714 * C1684) *
                 C48394) *
                C48681) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C114 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48394) *
               C16513 +
           ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
              C48582 * C48377 * C108 -
          (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) * C48681 +
           ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C16513) *
              C48582 * C48377 * C109 +
          (((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C16513 +
           ((C31823 + C31824) * C114 + (C31825 + C31826) * C48394) * C48681) *
              C48582 * C48377 * C110 -
          (((C31827 + C31828) * C48394 + (C31829 + C31830) * C114) * C48681 +
           ((C31826 + C31825) * C48394 + (C31824 + C31823) * C114) * C16513) *
              C48582 * C48377 * C111 +
          (((C31830 + C31829) * C114 + (C31828 + C31827) * C48394) * C16513 +
           ((C31780 * C120 + C31778 * C133 + C31781 * C826 + C48714 * C827) *
                C114 +
            (C31780 * C132 + C31778 * C141 + C31781 * C828 + C48714 * C829) *
                C48394) *
               C48681) *
              C48582 * C48377 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C16513 +
            ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
               C48582 * C1167 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48681 +
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48394 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C114) *
                C16513) *
               C48582 * C1168 +
           (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                 C114 +
             (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                 C48394) *
                C16513 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48681) *
               C48582 * C48694) *
              C48730 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C16513 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48681) *
               C48582 * C1168 -
           (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) * C48681 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C16513) *
               C48582 * C1167 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48681 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C16513) *
               C48582 * C48694) *
              C48717 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C16513 +
            ((C31823 + C31824) * C114 + (C31825 + C31826) * C48394) * C48681) *
               C48582 * C1167 -
           (((C32357 + C32358) * C48394 + (C32359 + C32360) * C114) * C48681 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C16513) *
               C48582 * C1168 +
           (((C32024 + C32023) * C114 + (C32022 + C32021) * C48394) * C16513 +
            ((C31780 * C309 + C31778 * C327 + C31781 * C1681 + C48714 * C1682) *
                 C114 +
             (C31780 * C326 + C31778 * C339 + C31781 * C1683 + C48714 * C1684) *
                 C48394) *
                C48681) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C114 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48394) *
               C16513 +
           ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
              C48582 * C1235 -
          (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48681 +
           ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                C48394 +
            (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                C114) *
               C16513) *
              C48582 * C1236 +
          (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                C114 +
            (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                C48394) *
               C16513 +
           ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48681) *
              C48582 * C1237 -
          (((C31781 * C1809 + C48714 * C1813 + C31780 * C1249 +
             C31778 * C1260) *
                C48394 +
            (C31781 * C1804 + C48714 * C1808 + C31780 * C1242 +
             C31778 * C1250) *
                C114) *
               C48681 +
           ((C31781 * C1807 + C48714 * C1812 + C31780 * C1251 +
             C31778 * C1261) *
                C48394 +
            (C31781 * C1803 + C48714 * C1806 + C31780 * C1243 +
             C31778 * C1252) *
                C114) *
               C16513) *
              C48582 * C1238 +
          (((C31780 * C1244 + C31778 * C1253 + C31781 * C6764 +
             C48714 * C6766) *
                C114 +
            (C31780 * C1254 + C31778 * C1262 + C31781 * C6767 +
             C48714 * C6770) *
                C48394) *
               C16513 +
           ((C31780 * C1245 + C31778 * C1255 + C31781 * C6765 +
             C48714 * C6768) *
                C114 +
            (C31780 * C1256 + C31778 * C1263 + C31781 * C6769 +
             C48714 * C6771) *
                C48394) *
               C48681) *
              C48582 * C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C1928 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C1925 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C1929 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C1926 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C1930 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C48697) *
               C16513 +
           ((C31815 + C31816) * C1928 + (C31817 + C31818) * C1925 -
            (C32203 + C32204) * C1929 - (C32205 + C32206) * C1926 +
            (C32207 + C32208) * C1930 + (C32209 + C32210) * C48697) *
               C48681) *
              C48582 * C48377 * C48730 +
          (((C32204 + C32203) * C1929 -
            ((C31818 + C31817) * C1925 + (C31816 + C31815) * C1928) +
            (C32206 + C32205) * C1926 - (C32208 + C32207) * C1930 -
            (C32210 + C32209) * C48697) *
               C16513 +
           ((C32211 + C32212) * C1929 -
            ((C31819 + C31820) * C1925 + (C31821 + C31822) * C1928) +
            (C32213 + C32214) * C1926 - (C32215 + C32216) * C1930 -
            (C32217 + C32218) * C48697) *
               C48681) *
              C48582 * C48377 * C48717 +
          (((C31822 + C31821) * C1928 + (C31820 + C31819) * C1925 -
            (C32212 + C32211) * C1929 - (C32214 + C32213) * C1926 +
            (C32216 + C32215) * C1930 + (C32218 + C32217) * C48697) *
               C16513 +
           ((C31823 + C31824) * C1928 + (C31825 + C31826) * C1925 -
            (C32499 + C32500) * C1929 - (C32501 + C32502) * C1926 +
            (C31780 * C515 + C31778 * C532 + C31781 * C2440 + C48714 * C2441) *
                C1930 +
            (C31780 * C533 + C31778 * C545 + C31781 * C2442 + C48714 * C2443) *
                C48697) *
               C48681) *
              C48582 * C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C1928 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C1925 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C1929 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C1926 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C1930 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C48697) *
               C16513 +
           ((C31815 + C31816) * C1928 + (C31817 + C31818) * C1925 -
            (C32203 + C32204) * C1929 - (C32205 + C32206) * C1926 +
            (C32207 + C32208) * C1930 + (C32209 + C32210) * C48697) *
               C48681) *
              C48582 * C48733 +
          (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
             C48714 * C1384) *
                C1929 -
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C1925 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C1928) +
            (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
             C48714 * C1402) *
                C1926 -
            (C31781 * C2570 + C48714 * C2573 + C31780 * C1375 +
             C31778 * C1384) *
                C1930 -
            (C31781 * C2574 + C48714 * C2579 + C31780 * C1385 +
             C31778 * C1402) *
                C48697) *
               C16513 +
           ((C32713 + C32714) * C1929 -
            ((C32009 + C32010) * C1925 + (C32011 + C32012) * C1928) +
            (C32715 + C32716) * C1926 -
            (C31781 * C2571 + C48714 * C2575 + C31780 * C1376 +
             C31778 * C1386) *
                C1930 -
            (C31781 * C2576 + C48714 * C2580 + C31780 * C1387 +
             C31778 * C1403) *
                C48697) *
               C48681) *
              C48582 * C48721 +
          (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                C1928 +
            (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                C1925 -
            (C31781 * C1379 + C48714 * C1392 + C31780 * C1378 +
             C31778 * C1390) *
                C1929 -
            (C31781 * C1393 + C48714 * C1406 + C31780 * C1391 +
             C31778 * C1405) *
                C1926 +
            (C31780 * C1379 + C31778 * C1392 + C31781 * C7660 +
             C48714 * C7662) *
                C1930 +
            (C31780 * C1393 + C31778 * C1406 + C31781 * C7663 +
             C48714 * C7666) *
                C48697) *
               C16513 +
           ((C32013 + C32014) * C1928 + (C32015 + C32016) * C1925 -
            (C33439 + C33440) * C1929 - (C33441 + C33442) * C1926 +
            (C31780 * C1381 + C31778 * C1396 + C31781 * C7661 +
             C48714 * C7664) *
                C1930 +
            (C31780 * C1397 + C31778 * C1408 + C31781 * C7665 +
             C48714 * C7667) *
                C48697) *
               C48681) *
              C48582 * C48694) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[165] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C3456 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C3454 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C3457 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C16513 +
            ((C31815 + C31816) * C3456 + (C31817 + C31818) * C3454 -
             (C32203 + C32204) * C3457 - (C32205 + C32206) * C48481) *
                C48681) *
               C48582 * C48662 +
           (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
              C48714 * C1384) *
                 C3457 -
             ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 +
               C31778 * C334) *
                  C3454 +
              (C31781 * C1004 + C48714 * C1009 + C31780 * C304 +
               C31778 * C317) *
                  C3456) +
             (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C16513 +
            ((C32713 + C32714) * C3457 -
             ((C32009 + C32010) * C3454 + (C32011 + C32012) * C3456) +
             (C32715 + C32716) * C48481) *
                C48681) *
               C48582 * C48439) *
              C48355 +
          ((((C32204 + C32203) * C3457 -
             ((C31818 + C31817) * C3454 + (C31816 + C31815) * C3456) +
             (C32206 + C32205) * C48481) *
                C16513 +
            ((C32211 + C32212) * C3457 -
             ((C31819 + C31820) * C3454 + (C31821 + C31822) * C3456) +
             (C32213 + C32214) * C48481) *
                C48681) *
               C48582 * C48662 +
           (((C32012 + C32011) * C3456 + (C32010 + C32009) * C3454 -
             (C32714 + C32713) * C3457 - (C32716 + C32715) * C48481) *
                C16513 +
            ((C32017 + C32018) * C3456 + (C32019 + C32020) * C3454 -
             (C32717 + C32718) * C3457 - (C32719 + C32720) * C48481) *
                C48681) *
               C48582 * C48439) *
              C48363 +
          ((((C31822 + C31821) * C3456 + (C31820 + C31819) * C3454 -
             (C32212 + C32211) * C3457 - (C32214 + C32213) * C48481) *
                C16513 +
            ((C31823 + C31824) * C3456 + (C31825 + C31826) * C3454 -
             (C32499 + C32500) * C3457 - (C32501 + C32502) * C48481) *
                C48681) *
               C48582 * C48662 +
           (((C32718 + C32717) * C3457 -
             ((C32020 + C32019) * C3454 + (C32018 + C32017) * C3456) +
             (C32720 + C32719) * C48481) *
                C16513 +
            ((C31780 * C1007 + C31778 * C1015 + C31781 * C2306 +
              C48714 * C2307) *
                 C3457 -
             ((C32357 + C32358) * C3454 + (C32359 + C32360) * C3456) +
             (C31780 * C1016 + C31778 * C1022 + C31781 * C2308 +
              C48714 * C2309) *
                 C48481) *
                C48681) *
               C48582 * C48439) *
              C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[166] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C47163 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48477 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C47155 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48484 +
             (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                 C47169 +
             (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                 C4029) *
                C16513 +
            ((C31815 + C31816) * C47163 + (C31817 + C31818) * C48477 -
             (C32203 + C32204) * C47155 - (C32205 + C32206) * C48484 +
             (C32207 + C32208) * C47169 + (C32209 + C32210) * C4029) *
                C48681) *
               C48582 * C48662 +
           (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
              C48714 * C1384) *
                 C47155 -
             ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 +
               C31778 * C334) *
                  C48477 +
              (C31781 * C1004 + C48714 * C1009 + C31780 * C304 +
               C31778 * C317) *
                  C47163) +
             (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
              C48714 * C1402) *
                 C48484 -
             (C31781 * C2570 + C48714 * C2573 + C31780 * C1375 +
              C31778 * C1384) *
                 C47169 -
             (C31781 * C2574 + C48714 * C2579 + C31780 * C1385 +
              C31778 * C1402) *
                 C4029) *
                C16513 +
            ((C32713 + C32714) * C47155 -
             ((C32009 + C32010) * C48477 + (C32011 + C32012) * C47163) +
             (C32715 + C32716) * C48484 - (C34149 + C34150) * C47169 -
             (C34151 + C34152) * C4029) *
                C48681) *
               C48582 * C48439) *
              C2788 +
          ((((C32204 + C32203) * C47155 -
             ((C31818 + C31817) * C48477 + (C31816 + C31815) * C47163) +
             (C32206 + C32205) * C48484 - (C32208 + C32207) * C47169 -
             (C32210 + C32209) * C4029) *
                C16513 +
            ((C32211 + C32212) * C47155 -
             ((C31819 + C31820) * C48477 + (C31821 + C31822) * C47163) +
             (C32213 + C32214) * C48484 - (C32215 + C32216) * C47169 -
             (C32217 + C32218) * C4029) *
                C48681) *
               C48582 * C48662 +
           (((C32012 + C32011) * C47163 + (C32010 + C32009) * C48477 -
             (C32714 + C32713) * C47155 - (C32716 + C32715) * C48484 +
             (C34150 + C34149) * C47169 + (C34152 + C34151) * C4029) *
                C16513 +
            ((C32017 + C32018) * C47163 + (C32019 + C32020) * C48477 -
             (C32717 + C32718) * C47155 - (C32719 + C32720) * C48484 +
             (C31780 * C1377 + C31778 * C1388 + C31781 * C2572 +
              C48714 * C2577) *
                 C47169 +
             (C31780 * C1389 + C31778 * C1404 + C31781 * C2578 +
              C48714 * C2581) *
                 C4029) *
                C48681) *
               C48582 * C48439) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[167] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C3456 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C3454 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C3457 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C16513 +
            ((C31815 + C31816) * C3456 + (C31817 + C31818) * C3454 -
             (C32203 + C32204) * C3457 - (C32205 + C32206) * C48481) *
                C48681) *
               C48582 * C48733 +
           (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
              C48714 * C1384) *
                 C3457 -
             ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 +
               C31778 * C334) *
                  C3454 +
              (C31781 * C1004 + C48714 * C1009 + C31780 * C304 +
               C31778 * C317) *
                  C3456) +
             (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C16513 +
            ((C32713 + C32714) * C3457 -
             ((C32009 + C32010) * C3454 + (C32011 + C32012) * C3456) +
             (C32715 + C32716) * C48481) *
                C48681) *
               C48582 * C48721 +
           (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                 C3456 +
             (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                 C3454 -
             (C31781 * C1379 + C48714 * C1392 + C31780 * C1378 +
              C31778 * C1390) *
                 C3457 -
             (C31781 * C1393 + C48714 * C1406 + C31780 * C1391 +
              C31778 * C1405) *
                 C48481) *
                C16513 +
            ((C32013 + C32014) * C3456 + (C32015 + C32016) * C3454 -
             (C33439 + C33440) * C3457 - (C33441 + C33442) * C48481) *
                C48681) *
               C48582 * C48694) *
              C2788 +
          ((((C32204 + C32203) * C3457 -
             ((C31818 + C31817) * C3454 + (C31816 + C31815) * C3456) +
             (C32206 + C32205) * C48481) *
                C16513 +
            ((C32211 + C32212) * C3457 -
             ((C31819 + C31820) * C3454 + (C31821 + C31822) * C3456) +
             (C32213 + C32214) * C48481) *
                C48681) *
               C48582 * C48733 +
           (((C32012 + C32011) * C3456 + (C32010 + C32009) * C3454 -
             (C32714 + C32713) * C3457 - (C32716 + C32715) * C48481) *
                C16513 +
            ((C32017 + C32018) * C3456 + (C32019 + C32020) * C3454 -
             (C32717 + C32718) * C3457 - (C32719 + C32720) * C48481) *
                C48681) *
               C48582 * C48721 +
           (((C33440 + C33439) * C3457 -
             ((C32016 + C32015) * C3454 + (C32014 + C32013) * C3456) +
             (C33442 + C33441) * C48481) *
                C16513 +
            ((C31780 * C1382 + C31778 * C1398 + C31781 * C1383 +
              C48714 * C1400) *
                 C3457 -
             ((C32021 + C32022) * C3454 + (C32023 + C32024) * C3456) +
             (C31780 * C1399 + C31778 * C1409 + C31781 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48681) *
               C48582 * C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C3456 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C3454 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C3457 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48481) *
               C16513 +
           ((C31815 + C31816) * C3456 + (C31817 + C31818) * C3454 -
            (C32203 + C32204) * C3457 - (C32205 + C32206) * C48481) *
               C48681) *
              C48582 * C48377 * C48739 +
          (((C32204 + C32203) * C3457 -
            ((C31818 + C31817) * C3454 + (C31816 + C31815) * C3456) +
            (C32206 + C32205) * C48481) *
               C16513 +
           ((C32211 + C32212) * C3457 -
            ((C31819 + C31820) * C3454 + (C31821 + C31822) * C3456) +
            (C32213 + C32214) * C48481) *
               C48681) *
              C48582 * C48377 * C48732 +
          (((C31822 + C31821) * C3456 + (C31820 + C31819) * C3454 -
            (C32212 + C32211) * C3457 - (C32214 + C32213) * C48481) *
               C16513 +
           ((C31823 + C31824) * C3456 + (C31825 + C31826) * C3454 -
            (C32499 + C32500) * C3457 - (C32501 + C32502) * C48481) *
               C48681) *
              C48582 * C48377 * C48719 +
          (((C32500 + C32499) * C3457 -
            ((C31826 + C31825) * C3454 + (C31824 + C31823) * C3456) +
            (C32502 + C32501) * C48481) *
               C16513 +
           ((C31780 * C516 + C31778 * C534 + C31781 * C517 + C48714 * C536) *
                C3457 -
            ((C31827 + C31828) * C3454 + (C31829 + C31830) * C3456) +
            (C31780 * C535 + C31778 * C546 + C31781 * C537 + C48714 * C547) *
                C48481) *
               C48681) *
              C48582 * C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C3744 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48741 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C3745 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48738 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C3746 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C48729 -
            (C31781 * C2137 + C48714 * C2144 + C31780 * C2136 +
             C31778 * C2142) *
                C3747 -
            (C31781 * C2145 + C48714 * C2155 + C31780 * C2143 +
             C31778 * C2154) *
                C48710) *
               C16513 +
           ((C31815 + C31816) * C3744 + (C31817 + C31818) * C48741 -
            (C32203 + C32204) * C3745 - (C32205 + C32206) * C48738 +
            (C32207 + C32208) * C3746 + (C32209 + C32210) * C48729 -
            (C34291 + C34292) * C3747 - (C34293 + C34294) * C48710) *
               C48681) *
              C48582 * C48377 * C2788 +
          (((C32204 + C32203) * C3745 -
            ((C31818 + C31817) * C48741 + (C31816 + C31815) * C3744) +
            (C32206 + C32205) * C48738 - (C32208 + C32207) * C3746 -
            (C32210 + C32209) * C48729 + (C34292 + C34291) * C3747 +
            (C34294 + C34293) * C48710) *
               C16513 +
           ((C32211 + C32212) * C3745 -
            ((C31819 + C31820) * C48741 + (C31821 + C31822) * C3744) +
            (C32213 + C32214) * C48738 - (C32215 + C32216) * C3746 -
            (C32217 + C32218) * C48729 +
            (C31780 * C2140 + C31778 * C2150 + C31781 * C2141 +
             C48714 * C2152) *
                C3747 +
            (C31780 * C2151 + C31778 * C2158 + C31781 * C2153 +
             C48714 * C2159) *
                C48710) *
               C48681) *
              C48582 * C48377 * C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[168] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C47163 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48477 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C47155 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48484 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C47169 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C4029) *
               C16513 +
           ((C31815 + C31816) * C47163 + (C31817 + C31818) * C48477 -
            (C32203 + C32204) * C47155 - (C32205 + C32206) * C48484 +
            (C32207 + C32208) * C47169 + (C32209 + C32210) * C4029) *
               C48681) *
              C48582 * C48377 * C48355 +
          (((C32204 + C32203) * C47155 -
            ((C31818 + C31817) * C48477 + (C31816 + C31815) * C47163) +
            (C32206 + C32205) * C48484 - (C32208 + C32207) * C47169 -
            (C32210 + C32209) * C4029) *
               C16513 +
           ((C32211 + C32212) * C47155 -
            ((C31819 + C31820) * C48477 + (C31821 + C31822) * C47163) +
            (C32213 + C32214) * C48484 - (C32215 + C32216) * C47169 -
            (C32217 + C32218) * C4029) *
               C48681) *
              C48582 * C48377 * C48363 +
          (((C31822 + C31821) * C47163 + (C31820 + C31819) * C48477 -
            (C32212 + C32211) * C47155 - (C32214 + C32213) * C48484 +
            (C32216 + C32215) * C47169 + (C32218 + C32217) * C4029) *
               C16513 +
           ((C31823 + C31824) * C47163 + (C31825 + C31826) * C48477 -
            (C32499 + C32500) * C47155 - (C32501 + C32502) * C48484 +
            (C31780 * C515 + C31778 * C532 + C31781 * C2440 + C48714 * C2441) *
                C47169 +
            (C31780 * C533 + C31778 * C545 + C31781 * C2442 + C48714 * C2443) *
                C4029) *
               C48681) *
              C48582 * C48377 * C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[169] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C3456 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C3454 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C3457 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48481) *
               C16513 +
           ((C31815 + C31816) * C3456 + (C31817 + C31818) * C3454 -
            (C32203 + C32204) * C3457 - (C32205 + C32206) * C48481) *
               C48681) *
              C48582 * C48377 * C48739 +
          (((C32204 + C32203) * C3457 -
            ((C31818 + C31817) * C3454 + (C31816 + C31815) * C3456) +
            (C32206 + C32205) * C48481) *
               C16513 +
           ((C32211 + C32212) * C3457 -
            ((C31819 + C31820) * C3454 + (C31821 + C31822) * C3456) +
            (C32213 + C32214) * C48481) *
               C48681) *
              C48582 * C48377 * C48732 +
          (((C31822 + C31821) * C3456 + (C31820 + C31819) * C3454 -
            (C32212 + C32211) * C3457 - (C32214 + C32213) * C48481) *
               C16513 +
           ((C31823 + C31824) * C3456 + (C31825 + C31826) * C3454 -
            (C32499 + C32500) * C3457 - (C32501 + C32502) * C48481) *
               C48681) *
              C48582 * C48377 * C48719 +
          (((C32500 + C32499) * C3457 -
            ((C31826 + C31825) * C3454 + (C31824 + C31823) * C3456) +
            (C32502 + C32501) * C48481) *
               C16513 +
           ((C31780 * C516 + C31778 * C534 + C31781 * C517 + C48714 * C536) *
                C3457 -
            ((C31827 + C31828) * C3454 + (C31829 + C31830) * C3456) +
            (C31780 * C535 + C31778 * C546 + C31781 * C537 + C48714 * C547) *
                C48481) *
               C48681) *
              C48582 * C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C3456 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C3454 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C3457 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C16513 +
            ((C31815 + C31816) * C3456 + (C31817 + C31818) * C3454 -
             (C32203 + C32204) * C3457 - (C32205 + C32206) * C48481) *
                C48681) *
               C48582 * C48733 +
           (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
              C48714 * C1384) *
                 C3457 -
             ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 +
               C31778 * C334) *
                  C3454 +
              (C31781 * C1004 + C48714 * C1009 + C31780 * C304 +
               C31778 * C317) *
                  C3456) +
             (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C16513 +
            ((C32713 + C32714) * C3457 -
             ((C32009 + C32010) * C3454 + (C32011 + C32012) * C3456) +
             (C32715 + C32716) * C48481) *
                C48681) *
               C48582 * C48721 +
           (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                 C3456 +
             (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                 C3454 -
             (C31781 * C1379 + C48714 * C1392 + C31780 * C1378 +
              C31778 * C1390) *
                 C3457 -
             (C31781 * C1393 + C48714 * C1406 + C31780 * C1391 +
              C31778 * C1405) *
                 C48481) *
                C16513 +
            ((C32013 + C32014) * C3456 + (C32015 + C32016) * C3454 -
             (C33439 + C33440) * C3457 - (C33441 + C33442) * C48481) *
                C48681) *
               C48582 * C48694) *
              C2788 +
          ((((C32204 + C32203) * C3457 -
             ((C31818 + C31817) * C3454 + (C31816 + C31815) * C3456) +
             (C32206 + C32205) * C48481) *
                C16513 +
            ((C32211 + C32212) * C3457 -
             ((C31819 + C31820) * C3454 + (C31821 + C31822) * C3456) +
             (C32213 + C32214) * C48481) *
                C48681) *
               C48582 * C48733 +
           (((C32012 + C32011) * C3456 + (C32010 + C32009) * C3454 -
             (C32714 + C32713) * C3457 - (C32716 + C32715) * C48481) *
                C16513 +
            ((C32017 + C32018) * C3456 + (C32019 + C32020) * C3454 -
             (C32717 + C32718) * C3457 - (C32719 + C32720) * C48481) *
                C48681) *
               C48582 * C48721 +
           (((C33440 + C33439) * C3457 -
             ((C32016 + C32015) * C3454 + (C32014 + C32013) * C3456) +
             (C33442 + C33441) * C48481) *
                C16513 +
            ((C31780 * C1382 + C31778 * C1398 + C31781 * C1383 +
              C48714 * C1400) *
                 C3457 -
             ((C32021 + C32022) * C3454 + (C32023 + C32024) * C3456) +
             (C31780 * C1399 + C31778 * C1409 + C31781 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48681) *
               C48582 * C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[170] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C16513 +
            ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
               C48582 * C48662 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48681 +
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48394 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C114) *
                C16513) *
               C48582 * C48439) *
              C707 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C16513 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48681) *
               C48582 * C48439 -
           (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) * C48681 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C16513) *
               C48582 * C48662) *
              C708 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C16513 +
            ((C31823 + C31824) * C114 + (C31825 + C31826) * C48394) * C48681) *
               C48582 * C48662 -
           (((C32357 + C32358) * C48394 + (C32359 + C32360) * C114) * C48681 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C16513) *
               C48582 * C48439) *
              C709 +
          ((((C32360 + C32359) * C114 + (C32358 + C32357) * C48394) * C16513 +
            ((C31780 * C310 + C31778 * C329 + C31781 * C1008 + C48714 * C1017) *
                 C114 +
             (C31780 * C328 + C31778 * C340 + C31781 * C1018 + C48714 * C1023) *
                 C48394) *
                C48681) *
               C48582 * C48439 -
           (((C31827 + C31828) * C48394 + (C31829 + C31830) * C114) * C48681 +
            ((C31826 + C31825) * C48394 + (C31824 + C31823) * C114) * C16513) *
               C48582 * C48662) *
              C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C16513 +
            ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
               C48582 * C1509 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48681 +
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48394 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C114) *
                C16513) *
               C48582 * C1510 +
           (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                 C114 +
             (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                 C48394) *
                C16513 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48681) *
               C48582 * C1511 -
           (((C33233 + C33234) * C48394 + (C33235 + C33236) * C114) * C48681 +
            ((C31781 * C1807 + C48714 * C1812 + C31780 * C1251 +
              C31778 * C1261) *
                 C48394 +
             (C31781 * C1803 + C48714 * C1806 + C31780 * C1243 +
              C31778 * C1252) *
                 C114) *
                C16513) *
               C48582 * C48704) *
              C48648 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C16513 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48681) *
               C48582 * C1510 -
           (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) * C48681 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C16513) *
               C48582 * C1509 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48681 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C16513) *
               C48582 * C1511 +
           (((C33236 + C33235) * C114 + (C33234 + C33233) * C48394) * C16513 +
            ((C31780 * C1241 + C31778 * C1248 + C31781 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C31780 * C1247 + C31778 * C1259 + C31781 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48681) *
               C48582 * C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[171] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C824 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48663 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C825 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C16513 +
            ((C31815 + C31816) * C824 + (C31817 + C31818) * C48663 -
             (C32203 + C32204) * C825 - (C32205 + C32206) * C48481) *
                C48681) *
               C48582 * C48662 +
           (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
              C48714 * C1384) *
                 C825 -
             ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 +
               C31778 * C334) *
                  C48663 +
              (C31781 * C1004 + C48714 * C1009 + C31780 * C304 +
               C31778 * C317) *
                  C824) +
             (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C16513 +
            ((C32713 + C32714) * C825 -
             ((C32009 + C32010) * C48663 + (C32011 + C32012) * C824) +
             (C32715 + C32716) * C48481) *
                C48681) *
               C48582 * C48439) *
              C299 +
          ((((C32204 + C32203) * C825 -
             ((C31818 + C31817) * C48663 + (C31816 + C31815) * C824) +
             (C32206 + C32205) * C48481) *
                C16513 +
            ((C32211 + C32212) * C825 -
             ((C31819 + C31820) * C48663 + (C31821 + C31822) * C824) +
             (C32213 + C32214) * C48481) *
                C48681) *
               C48582 * C48662 +
           (((C32012 + C32011) * C824 + (C32010 + C32009) * C48663 -
             (C32714 + C32713) * C825 - (C32716 + C32715) * C48481) *
                C16513 +
            ((C32017 + C32018) * C824 + (C32019 + C32020) * C48663 -
             (C32717 + C32718) * C825 - (C32719 + C32720) * C48481) *
                C48681) *
               C48582 * C48439) *
              C300 +
          ((((C31822 + C31821) * C824 + (C31820 + C31819) * C48663 -
             (C32212 + C32211) * C825 - (C32214 + C32213) * C48481) *
                C16513 +
            ((C31823 + C31824) * C824 + (C31825 + C31826) * C48663 -
             (C32499 + C32500) * C825 - (C32501 + C32502) * C48481) *
                C48681) *
               C48582 * C48662 +
           (((C32718 + C32717) * C825 -
             ((C32020 + C32019) * C48663 + (C32018 + C32017) * C824) +
             (C32720 + C32719) * C48481) *
                C16513 +
            ((C31780 * C1007 + C31778 * C1015 + C31781 * C2306 +
              C48714 * C2307) *
                 C825 -
             ((C32357 + C32358) * C48663 + (C32359 + C32360) * C824) +
             (C31780 * C1016 + C31778 * C1022 + C31781 * C2308 +
              C48714 * C2309) *
                 C48481) *
                C48681) *
               C48582 * C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C824 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48663 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C825 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48481) *
               C16513 +
           ((C31815 + C31816) * C824 + (C31817 + C31818) * C48663 -
            (C32203 + C32204) * C825 - (C32205 + C32206) * C48481) *
               C48681) *
              C48582 * C1509 +
          (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
             C48714 * C1384) *
                C825 -
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48663 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C824) +
            (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
             C48714 * C1402) *
                C48481) *
               C16513 +
           ((C32713 + C32714) * C825 -
            ((C32009 + C32010) * C48663 + (C32011 + C32012) * C824) +
            (C32715 + C32716) * C48481) *
               C48681) *
              C48582 * C1510 +
          (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                C824 +
            (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                C48663 -
            (C31781 * C1379 + C48714 * C1392 + C31780 * C1378 +
             C31778 * C1390) *
                C825 -
            (C31781 * C1393 + C48714 * C1406 + C31780 * C1391 +
             C31778 * C1405) *
                C48481) *
               C16513 +
           ((C32013 + C32014) * C824 + (C32015 + C32016) * C48663 -
            (C33439 + C33440) * C825 - (C33441 + C33442) * C48481) *
               C48681) *
              C48582 * C1511 +
          (((C31780 * C1803 + C31778 * C1806 + C31781 * C6238 +
             C48714 * C6240) *
                C825 -
            ((C31781 * C1807 + C48714 * C1812 + C31780 * C1251 +
              C31778 * C1261) *
                 C48663 +
             (C31781 * C1803 + C48714 * C1806 + C31780 * C1243 +
              C31778 * C1252) *
                 C824) +
            (C31780 * C1807 + C31778 * C1812 + C31781 * C6241 +
             C48714 * C6244) *
                C48481) *
               C16513 +
           ((C31780 * C1804 + C31778 * C1808 + C31781 * C6239 +
             C48714 * C6242) *
                C825 -
            ((C33233 + C33234) * C48663 + (C33235 + C33236) * C824) +
            (C31780 * C1809 + C31778 * C1813 + C31781 * C6243 +
             C48714 * C6245) *
                C48481) *
               C48681) *
              C48582 * C48704) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[172] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C16513 +
            ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
               C48582 * C48733 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48681 +
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48394 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C114) *
                C16513) *
               C48582 * C48721 +
           (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                 C114 +
             (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                 C48394) *
                C16513 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48681) *
               C48582 * C48694) *
              C299 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C16513 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48681) *
               C48582 * C48721 -
           (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) * C48681 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C16513) *
               C48582 * C48733 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48681 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C16513) *
               C48582 * C48694) *
              C300 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C16513 +
            ((C31823 + C31824) * C114 + (C31825 + C31826) * C48394) * C48681) *
               C48582 * C48733 -
           (((C31781 * C1016 + C48714 * C1022 + C31780 * C325 + C31778 * C338) *
                 C48394 +
             (C31781 * C1007 + C48714 * C1015 + C31780 * C308 + C31778 * C324) *
                 C114) *
                C48681 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C16513) *
               C48582 * C48721 +
           (((C32024 + C32023) * C114 + (C32022 + C32021) * C48394) * C16513 +
            ((C31780 * C309 + C31778 * C327 + C31781 * C1681 + C48714 * C1682) *
                 C114 +
             (C31780 * C326 + C31778 * C339 + C31781 * C1683 + C48714 * C1684) *
                 C48394) *
                C48681) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C114 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48394) *
               C16513 +
           ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
              C48582 * C48377 * C108 -
          (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) * C48681 +
           ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C16513) *
              C48582 * C48377 * C109 +
          (((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C16513 +
           ((C31823 + C31824) * C114 + (C31825 + C31826) * C48394) * C48681) *
              C48582 * C48377 * C110 -
          (((C31827 + C31828) * C48394 + (C31829 + C31830) * C114) * C48681 +
           ((C31826 + C31825) * C48394 + (C31824 + C31823) * C114) * C16513) *
              C48582 * C48377 * C111 +
          (((C31830 + C31829) * C114 + (C31828 + C31827) * C48394) * C16513 +
           ((C31780 * C120 + C31778 * C133 + C31781 * C826 + C48714 * C827) *
                C114 +
            (C31780 * C132 + C31778 * C141 + C31781 * C828 + C48714 * C829) *
                C48394) *
               C48681) *
              C48582 * C48377 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C505 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48734 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C506 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48723 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C507 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C48697) *
               C16513 +
           ((C31815 + C31816) * C505 + (C31817 + C31818) * C48734 -
            (C32203 + C32204) * C506 - (C32205 + C32206) * C48723 +
            (C32207 + C32208) * C507 + (C32209 + C32210) * C48697) *
               C48681) *
              C48582 * C48377 * C299 +
          (((C32204 + C32203) * C506 -
            ((C31818 + C31817) * C48734 + (C31816 + C31815) * C505) +
            (C32206 + C32205) * C48723 - (C32208 + C32207) * C507 -
            (C32210 + C32209) * C48697) *
               C16513 +
           ((C32211 + C32212) * C506 -
            ((C31819 + C31820) * C48734 + (C31821 + C31822) * C505) +
            (C32213 + C32214) * C48723 - (C32215 + C32216) * C507 -
            (C32217 + C32218) * C48697) *
               C48681) *
              C48582 * C48377 * C300 +
          (((C31822 + C31821) * C505 + (C31820 + C31819) * C48734 -
            (C32212 + C32211) * C506 - (C32214 + C32213) * C48723 +
            (C32216 + C32215) * C507 + (C32218 + C32217) * C48697) *
               C16513 +
           ((C31823 + C31824) * C505 + (C31825 + C31826) * C48734 -
            (C31781 * C515 + C48714 * C532 + C31780 * C514 + C31778 * C530) *
                C506 -
            (C31781 * C533 + C48714 * C545 + C31780 * C531 + C31778 * C544) *
                C48723 +
            (C31780 * C515 + C31778 * C532 + C31781 * C2440 + C48714 * C2441) *
                C507 +
            (C31780 * C533 + C31778 * C545 + C31781 * C2442 + C48714 * C2443) *
                C48697) *
               C48681) *
              C48582 * C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C16513 +
            ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
               C48582 * C1167 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48681 +
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48394 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C114) *
                C16513) *
               C48582 * C1168 +
           (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                 C114 +
             (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                 C48394) *
                C16513 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48681) *
               C48582 * C48694) *
              C48730 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C16513 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48681) *
               C48582 * C1168 -
           (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) * C48681 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C16513) *
               C48582 * C1167 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48681 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C16513) *
               C48582 * C48694) *
              C48717 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C16513 +
            ((C31823 + C31824) * C114 + (C31825 + C31826) * C48394) * C48681) *
               C48582 * C1167 -
           (((C32357 + C32358) * C48394 + (C32359 + C32360) * C114) * C48681 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C16513) *
               C48582 * C1168 +
           (((C32024 + C32023) * C114 + (C32022 + C32021) * C48394) * C16513 +
            ((C31780 * C309 + C31778 * C327 + C31781 * C1681 + C48714 * C1682) *
                 C114 +
             (C31780 * C326 + C31778 * C339 + C31781 * C1683 + C48714 * C1684) *
                 C48394) *
                C48681) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C114 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48394) *
               C16513 +
           ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
              C48582 * C1235 -
          (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48681 +
           ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                C48394 +
            (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                C114) *
               C16513) *
              C48582 * C1236 +
          (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                C114 +
            (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                C48394) *
               C16513 +
           ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48681) *
              C48582 * C1237 -
          (((C31781 * C1809 + C48714 * C1813 + C31780 * C1249 +
             C31778 * C1260) *
                C48394 +
            (C31781 * C1804 + C48714 * C1808 + C31780 * C1242 +
             C31778 * C1250) *
                C114) *
               C48681 +
           ((C31781 * C1807 + C48714 * C1812 + C31780 * C1251 +
             C31778 * C1261) *
                C48394 +
            (C31781 * C1803 + C48714 * C1806 + C31780 * C1243 +
             C31778 * C1252) *
                C114) *
               C16513) *
              C48582 * C1238 +
          (((C31780 * C1244 + C31778 * C1253 + C31781 * C6764 +
             C48714 * C6766) *
                C114 +
            (C31780 * C1254 + C31778 * C1262 + C31781 * C6767 +
             C48714 * C6770) *
                C48394) *
               C16513 +
           ((C31780 * C1245 + C31778 * C1255 + C31781 * C6765 +
             C48714 * C6768) *
                C114 +
            (C31780 * C1256 + C31778 * C1263 + C31781 * C6769 +
             C48714 * C6771) *
                C48394) *
               C48681) *
              C48582 * C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C505 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48734 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C506 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48723 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C507 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C48697) *
               C16513 +
           ((C31815 + C31816) * C505 + (C31817 + C31818) * C48734 -
            (C32203 + C32204) * C506 - (C32205 + C32206) * C48723 +
            (C32207 + C32208) * C507 + (C32209 + C32210) * C48697) *
               C48681) *
              C48582 * C1167 +
          (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
             C48714 * C1384) *
                C506 -
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48734 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C505) +
            (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
             C48714 * C1402) *
                C48723 -
            (C31781 * C2570 + C48714 * C2573 + C31780 * C1375 +
             C31778 * C1384) *
                C507 -
            (C31781 * C2574 + C48714 * C2579 + C31780 * C1385 +
             C31778 * C1402) *
                C48697) *
               C16513 +
           ((C32713 + C32714) * C506 -
            ((C32009 + C32010) * C48734 + (C32011 + C32012) * C505) +
            (C32715 + C32716) * C48723 -
            (C31781 * C2571 + C48714 * C2575 + C31780 * C1376 +
             C31778 * C1386) *
                C507 -
            (C31781 * C2576 + C48714 * C2580 + C31780 * C1387 +
             C31778 * C1403) *
                C48697) *
               C48681) *
              C48582 * C1168 +
          (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                C505 +
            (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                C48734 -
            (C31781 * C1379 + C48714 * C1392 + C31780 * C1378 +
             C31778 * C1390) *
                C506 -
            (C31781 * C1393 + C48714 * C1406 + C31780 * C1391 +
             C31778 * C1405) *
                C48723 +
            (C31780 * C1379 + C31778 * C1392 + C31781 * C7660 +
             C48714 * C7662) *
                C507 +
            (C31780 * C1393 + C31778 * C1406 + C31781 * C7663 +
             C48714 * C7666) *
                C48697) *
               C16513 +
           ((C32013 + C32014) * C505 + (C32015 + C32016) * C48734 -
            (C31781 * C1381 + C48714 * C1396 + C31780 * C1380 +
             C31778 * C1394) *
                C506 -
            (C31781 * C1397 + C48714 * C1408 + C31780 * C1395 +
             C31778 * C1407) *
                C48723 +
            (C31780 * C1381 + C31778 * C1396 + C31781 * C7661 +
             C48714 * C7664) *
                C507 +
            (C31780 * C1397 + C31778 * C1408 + C31781 * C7665 +
             C48714 * C7667) *
                C48697) *
               C48681) *
              C48582 * C48694) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[173] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C824 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48663 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C825 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48481) *
               C16513 +
           ((C31815 + C31816) * C824 + (C31817 + C31818) * C48663 -
            (C32203 + C32204) * C825 - (C32205 + C32206) * C48481) *
               C48681) *
              C48582 * C48377 * C707 +
          (((C32204 + C32203) * C825 -
            ((C31818 + C31817) * C48663 + (C31816 + C31815) * C824) +
            (C32206 + C32205) * C48481) *
               C16513 +
           ((C32211 + C32212) * C825 -
            ((C31819 + C31820) * C48663 + (C31821 + C31822) * C824) +
            (C32213 + C32214) * C48481) *
               C48681) *
              C48582 * C48377 * C708 +
          (((C31822 + C31821) * C824 + (C31820 + C31819) * C48663 -
            (C32212 + C32211) * C825 - (C32214 + C32213) * C48481) *
               C16513 +
           ((C31823 + C31824) * C824 + (C31825 + C31826) * C48663 -
            (C32499 + C32500) * C825 - (C32501 + C32502) * C48481) *
               C48681) *
              C48582 * C48377 * C709 +
          (((C32500 + C32499) * C825 -
            ((C31826 + C31825) * C48663 + (C31824 + C31823) * C824) +
            (C32502 + C32501) * C48481) *
               C16513 +
           ((C31780 * C516 + C31778 * C534 + C31781 * C517 + C48714 * C536) *
                C825 -
            ((C31827 + C31828) * C48663 + (C31829 + C31830) * C824) +
            (C31780 * C535 + C31778 * C546 + C31781 * C537 + C48714 * C547) *
                C48481) *
               C48681) *
              C48582 * C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C824 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48663 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C825 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C16513 +
            ((C31815 + C31816) * C824 + (C31817 + C31818) * C48663 -
             (C32203 + C32204) * C825 - (C32205 + C32206) * C48481) *
                C48681) *
               C48582 * C1167 +
           (((C31780 * C1004 + C31778 * C1009 + C31781 * C1375 +
              C48714 * C1384) *
                 C825 -
             ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 +
               C31778 * C334) *
                  C48663 +
              (C31781 * C1004 + C48714 * C1009 + C31780 * C304 +
               C31778 * C317) *
                  C824) +
             (C31780 * C1010 + C31778 * C1019 + C31781 * C1385 +
              C48714 * C1402) *
                 C48481) *
                C16513 +
            ((C32713 + C32714) * C825 -
             ((C32009 + C32010) * C48663 + (C32011 + C32012) * C824) +
             (C32715 + C32716) * C48481) *
                C48681) *
               C48582 * C1168 +
           (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                 C824 +
             (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                 C48663 -
             (C31781 * C1379 + C48714 * C1392 + C31780 * C1378 +
              C31778 * C1390) *
                 C825 -
             (C31781 * C1393 + C48714 * C1406 + C31780 * C1391 +
              C31778 * C1405) *
                 C48481) *
                C16513 +
            ((C32013 + C32014) * C824 + (C32015 + C32016) * C48663 -
             (C33439 + C33440) * C825 - (C33441 + C33442) * C48481) *
                C48681) *
               C48582 * C48694) *
              C48648 +
          ((((C32204 + C32203) * C825 -
             ((C31818 + C31817) * C48663 + (C31816 + C31815) * C824) +
             (C32206 + C32205) * C48481) *
                C16513 +
            ((C32211 + C32212) * C825 -
             ((C31819 + C31820) * C48663 + (C31821 + C31822) * C824) +
             (C32213 + C32214) * C48481) *
                C48681) *
               C48582 * C1167 +
           (((C32012 + C32011) * C824 + (C32010 + C32009) * C48663 -
             (C32714 + C32713) * C825 - (C32716 + C32715) * C48481) *
                C16513 +
            ((C32017 + C32018) * C824 + (C32019 + C32020) * C48663 -
             (C32717 + C32718) * C825 - (C32719 + C32720) * C48481) *
                C48681) *
               C48582 * C1168 +
           (((C33440 + C33439) * C825 -
             ((C32016 + C32015) * C48663 + (C32014 + C32013) * C824) +
             (C33442 + C33441) * C48481) *
                C16513 +
            ((C31780 * C1382 + C31778 * C1398 + C31781 * C1383 +
              C48714 * C1400) *
                 C825 -
             ((C32021 + C32022) * C48663 + (C32023 + C32024) * C824) +
             (C31780 * C1399 + C31778 * C1409 + C31781 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48681) *
               C48582 * C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[174] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C114 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48394) *
               C16513 +
           ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
              C48582 * C48377 * C108 -
          (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) * C48681 +
           ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C16513) *
              C48582 * C48377 * C109 +
          (((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C16513 +
           ((C31823 + C31824) * C114 + (C31825 + C31826) * C48394) * C48681) *
              C48582 * C48377 * C110 -
          (((C31827 + C31828) * C48394 + (C31829 + C31830) * C114) * C48681 +
           ((C31826 + C31825) * C48394 + (C31824 + C31823) * C114) * C16513) *
              C48582 * C48377 * C111 +
          (((C31830 + C31829) * C114 + (C31828 + C31827) * C48394) * C16513 +
           ((C31780 * C120 + C31778 * C133 + C31781 * C826 + C48714 * C827) *
                C114 +
            (C31780 * C132 + C31778 * C141 + C31781 * C828 + C48714 * C829) *
                C48394) *
               C48681) *
              C48582 * C48377 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C16513 +
            ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
               C48582 * C48733 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48681 +
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48394 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C114) *
                C16513) *
               C48582 * C48721 +
           (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                 C114 +
             (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                 C48394) *
                C16513 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48681) *
               C48582 * C48694) *
              C299 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C16513 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48681) *
               C48582 * C48721 -
           (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) * C48681 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C16513) *
               C48582 * C48733 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48681 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C16513) *
               C48582 * C48694) *
              C300 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C16513 +
            ((C31823 + C31824) * C114 + (C31825 + C31826) * C48394) * C48681) *
               C48582 * C48733 -
           (((C31781 * C1016 + C48714 * C1022 + C31780 * C325 + C31778 * C338) *
                 C48394 +
             (C31781 * C1007 + C48714 * C1015 + C31780 * C308 + C31778 * C324) *
                 C114) *
                C48681 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C16513) *
               C48582 * C48721 +
           (((C32024 + C32023) * C114 + (C32022 + C32021) * C48394) * C16513 +
            ((C31780 * C309 + C31778 * C327 + C31781 * C1681 + C48714 * C1682) *
                 C114 +
             (C31780 * C326 + C31778 * C339 + C31781 * C1683 + C48714 * C1684) *
                 C48394) *
                C48681) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C16513 +
            ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
               C48582 * C1167 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48681 +
            ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                 C48394 +
             (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                 C114) *
                C16513) *
               C48582 * C1168 +
           (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                 C114 +
             (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                 C48394) *
                C16513 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48681) *
               C48582 * C48694) *
              C48730 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C16513 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48681) *
               C48582 * C1168 -
           (((C31819 + C31820) * C48394 + (C31821 + C31822) * C114) * C48681 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C16513) *
               C48582 * C1167 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48681 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C16513) *
               C48582 * C48694) *
              C48717 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C16513 +
            ((C31823 + C31824) * C114 + (C31825 + C31826) * C48394) * C48681) *
               C48582 * C1167 -
           (((C32357 + C32358) * C48394 + (C32359 + C32360) * C114) * C48681 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C16513) *
               C48582 * C1168 +
           (((C32024 + C32023) * C114 + (C32022 + C32021) * C48394) * C16513 +
            ((C31780 * C309 + C31778 * C327 + C31781 * C1681 + C48714 * C1682) *
                 C114 +
             (C31780 * C326 + C31778 * C339 + C31781 * C1683 + C48714 * C1684) *
                 C48394) *
                C48681) *
               C48582 * C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C114 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48394) *
               C16513 +
           ((C31815 + C31816) * C114 + (C31817 + C31818) * C48394) * C48681) *
              C48582 * C1235 -
          (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48681 +
           ((C31781 * C1010 + C48714 * C1019 + C31780 * C316 + C31778 * C334) *
                C48394 +
            (C31781 * C1004 + C48714 * C1009 + C31780 * C304 + C31778 * C317) *
                C114) *
               C16513) *
              C48582 * C1236 +
          (((C31780 * C305 + C31778 * C318 + C31781 * C1378 + C48714 * C1390) *
                C114 +
            (C31780 * C319 + C31778 * C335 + C31781 * C1391 + C48714 * C1405) *
                C48394) *
               C16513 +
           ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48681) *
              C48582 * C1237 -
          (((C31781 * C1809 + C48714 * C1813 + C31780 * C1249 +
             C31778 * C1260) *
                C48394 +
            (C31781 * C1804 + C48714 * C1808 + C31780 * C1242 +
             C31778 * C1250) *
                C114) *
               C48681 +
           ((C31781 * C1807 + C48714 * C1812 + C31780 * C1251 +
             C31778 * C1261) *
                C48394 +
            (C31781 * C1803 + C48714 * C1806 + C31780 * C1243 +
             C31778 * C1252) *
                C114) *
               C16513) *
              C48582 * C1238 +
          (((C31780 * C1244 + C31778 * C1253 + C31781 * C6764 +
             C48714 * C6766) *
                C114 +
            (C31780 * C1254 + C31778 * C1262 + C31781 * C6767 +
             C48714 * C6770) *
                C48394) *
               C16513 +
           ((C31780 * C1245 + C31778 * C1255 + C31781 * C6765 +
             C48714 * C6768) *
                C114 +
            (C31780 * C1256 + C31778 * C1263 + C31781 * C6769 +
             C48714 * C6771) *
                C48394) *
               C48681) *
              C48582 * C1239) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[175] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C5042 +
            ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) * C48331 *
                C48712) *
               C48435 -
           (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) * C48331 *
                C48712 +
            ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) * C48331 *
                C5042) *
               C48442 +
           (((C37640 + C37639) * C114 + (C37638 + C37637) * C48394) * C48331 *
                C5042 +
            ((C38497 + C38498) * C114 + (C38499 + C38500) * C48394) * C48331 *
                C48712) *
               C3060) *
              C48355 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C48331 *
                C5042 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48331 *
                C48712) *
               C48442 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48331 *
                C48712 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C48331 *
                C5042) *
               C48435 -
           (((C33233 + C33234) * C48394 + (C33235 + C33236) * C114) * C48331 *
                C48712 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C48331 *
                C5042) *
               C3060) *
              C48363 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C48331 *
                C5042 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48331 *
                C48712) *
               C48435 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48331 *
                C48712 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C48331 *
                C5042) *
               C48442 +
           (((C32024 + C32023) * C114 + (C32022 + C32021) * C48394) * C48331 *
                C5042 +
            ((C31780 * C1241 + C31778 * C1248 + C31781 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C31780 * C1247 + C31778 * C1259 + C31781 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48331 * C48712) *
               C3060) *
              C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[176] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C824 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48663 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C825 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C48331 * C5042 +
            ((C37633 + C37634) * C824 + (C37635 + C37636) * C48663 -
             (C38249 + C38250) * C825 - (C38251 + C38252) * C48481) *
                C48331 * C48712) *
               C48435 +
           (((C38250 + C38249) * C825 -
             ((C37636 + C37635) * C48663 + (C37634 + C37633) * C824) +
             (C38252 + C38251) * C48481) *
                C48331 * C5042 +
            ((C38679 + C38680) * C825 -
             ((C37637 + C37638) * C48663 + (C37639 + C37640) * C824) +
             (C38681 + C38682) * C48481) *
                C48331 * C48712) *
               C48442 +
           (((C37640 + C37639) * C824 + (C37638 + C37637) * C48663 -
             (C38680 + C38679) * C825 - (C38682 + C38681) * C48481) *
                C48331 * C5042 +
            ((C38497 + C38498) * C824 + (C38499 + C38500) * C48663 -
             (C39149 + C39150) * C825 - (C39151 + C39152) * C48481) *
                C48331 * C48712) *
               C3060) *
              C2788 +
          ((((C32204 + C32203) * C825 -
             ((C31818 + C31817) * C48663 + (C31816 + C31815) * C824) +
             (C32206 + C32205) * C48481) *
                C48331 * C5042 +
            ((C32713 + C32714) * C825 -
             ((C32009 + C32010) * C48663 + (C32011 + C32012) * C824) +
             (C32715 + C32716) * C48481) *
                C48331 * C48712) *
               C48435 +
           (((C32012 + C32011) * C824 + (C32010 + C32009) * C48663 -
             (C32714 + C32713) * C825 - (C32716 + C32715) * C48481) *
                C48331 * C5042 +
            ((C32013 + C32014) * C824 + (C32015 + C32016) * C48663 -
             (C33439 + C33440) * C825 - (C33441 + C33442) * C48481) *
                C48331 * C48712) *
               C48442 +
           (((C33440 + C33439) * C825 -
             ((C32016 + C32015) * C48663 + (C32014 + C32013) * C824) +
             (C33442 + C33441) * C48481) *
                C48331 * C5042 +
            ((C31780 * C1804 + C31778 * C1808 + C31781 * C6239 +
              C48714 * C6242) *
                 C825 -
             ((C33233 + C33234) * C48663 + (C33235 + C33236) * C824) +
             (C31780 * C1809 + C31778 * C1813 + C31781 * C6243 +
              C48714 * C6245) *
                 C48481) *
                C48331 * C48712) *
               C3060) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[177] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C5042 +
            ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) * C48331 *
                C48712) *
               C48740 -
           (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) * C48331 *
                C48712 +
            ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) * C48331 *
                C5042) *
               C48736 +
           (((C37640 + C37639) * C114 + (C37638 + C37637) * C48394) * C48331 *
                C5042 +
            ((C38497 + C38498) * C114 + (C38499 + C38500) * C48394) * C48331 *
                C48712) *
               C48726 -
           (((C38501 + C38502) * C48394 + (C38503 + C38504) * C114) * C48331 *
                C48712 +
            ((C38500 + C38499) * C48394 + (C38498 + C38497) * C114) * C48331 *
                C5042) *
               C48704) *
              C2788 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C48331 *
                C5042 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48331 *
                C48712) *
               C48736 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48331 *
                C48712 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C48331 *
                C5042) *
               C48740 -
           (((C33233 + C33234) * C48394 + (C33235 + C33236) * C114) * C48331 *
                C48712 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C48331 *
                C5042) *
               C48726 +
           (((C33236 + C33235) * C114 + (C33234 + C33233) * C48394) * C48331 *
                C5042 +
            ((C31780 * C1245 + C31778 * C1255 + C31781 * C6765 +
              C48714 * C6768) *
                 C114 +
             (C31780 * C1256 + C31778 * C1263 + C31781 * C6769 +
              C48714 * C6771) *
                 C48394) *
                C48331 * C48712) *
               C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C5042 +
            ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) * C48331 *
                C48712) *
               C2680 -
           (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) * C48331 *
                C48712 +
            ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) * C48331 *
                C5042) *
               C48439) *
              C48739 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C48331 *
                C5042 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48331 *
                C48712) *
               C48439 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48331 *
                C48712 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C48331 *
                C5042) *
               C2680) *
              C48732 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C48331 *
                C5042 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48331 *
                C48712) *
               C2680 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48331 *
                C48712 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C48331 *
                C5042) *
               C48439) *
              C48719 +
          ((((C32360 + C32359) * C114 + (C32358 + C32357) * C48394) * C48331 *
                C5042 +
            ((C31780 * C309 + C31778 * C327 + C31781 * C1681 + C48714 * C1682) *
                 C114 +
             (C31780 * C326 + C31778 * C339 + C31781 * C1683 + C48714 * C1684) *
                 C48394) *
                C48331 * C48712) *
               C48439 -
           (((C32357 + C32358) * C48394 + (C32359 + C32360) * C114) * C48331 *
                C48712 +
            ((C31826 + C31825) * C48394 + (C31824 + C31823) * C114) * C48331 *
                C5042) *
               C2680) *
              C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C505 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48734 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C506 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48723 +
             (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                 C507 +
             (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                 C48697) *
                C48331 * C5042 +
            ((C37633 + C37634) * C505 + (C37635 + C37636) * C48734 -
             (C38249 + C38250) * C506 - (C38251 + C38252) * C48723 +
             (C38675 + C38676) * C507 + (C38677 + C38678) * C48697) *
                C48331 * C48712) *
               C2680 +
           (((C38250 + C38249) * C506 -
             ((C37636 + C37635) * C48734 + (C37634 + C37633) * C505) +
             (C38252 + C38251) * C48723 - (C38676 + C38675) * C507 -
             (C38678 + C38677) * C48697) *
                C48331 * C5042 +
            ((C38679 + C38680) * C506 -
             ((C37637 + C37638) * C48734 + (C37639 + C37640) * C505) +
             (C38681 + C38682) * C48723 - (C38683 + C38684) * C507 -
             (C38685 + C38686) * C48697) *
                C48331 * C48712) *
               C48439) *
              C2788 +
          ((((C32204 + C32203) * C506 -
             ((C31818 + C31817) * C48734 + (C31816 + C31815) * C505) +
             (C32206 + C32205) * C48723 - (C32208 + C32207) * C507 -
             (C32210 + C32209) * C48697) *
                C48331 * C5042 +
            ((C32713 + C32714) * C506 -
             ((C32009 + C32010) * C48734 + (C32011 + C32012) * C505) +
             (C32715 + C32716) * C48723 - (C34149 + C34150) * C507 -
             (C34151 + C34152) * C48697) *
                C48331 * C48712) *
               C2680 +
           (((C32012 + C32011) * C505 + (C32010 + C32009) * C48734 -
             (C32714 + C32713) * C506 - (C32716 + C32715) * C48723 +
             (C34150 + C34149) * C507 + (C34152 + C34151) * C48697) *
                C48331 * C5042 +
            ((C32013 + C32014) * C505 + (C32015 + C32016) * C48734 -
             (C33439 + C33440) * C506 - (C33441 + C33442) * C48723 +
             (C31780 * C1381 + C31778 * C1396 + C31781 * C7661 +
              C48714 * C7664) *
                 C507 +
             (C31780 * C1397 + C31778 * C1408 + C31781 * C7665 +
              C48714 * C7667) *
                 C48697) *
                C48331 * C48712) *
               C48439) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[178] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C824 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48663 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C825 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C48331 * C5042 +
            ((C37633 + C37634) * C824 + (C37635 + C37636) * C48663 -
             (C38249 + C38250) * C825 - (C38251 + C38252) * C48481) *
                C48331 * C48712) *
               C2680 +
           (((C38250 + C38249) * C825 -
             ((C37636 + C37635) * C48663 + (C37634 + C37633) * C824) +
             (C38252 + C38251) * C48481) *
                C48331 * C5042 +
            ((C38679 + C38680) * C825 -
             ((C37637 + C37638) * C48663 + (C37639 + C37640) * C824) +
             (C38681 + C38682) * C48481) *
                C48331 * C48712) *
               C48439) *
              C48355 +
          ((((C32204 + C32203) * C825 -
             ((C31818 + C31817) * C48663 + (C31816 + C31815) * C824) +
             (C32206 + C32205) * C48481) *
                C48331 * C5042 +
            ((C32713 + C32714) * C825 -
             ((C32009 + C32010) * C48663 + (C32011 + C32012) * C824) +
             (C32715 + C32716) * C48481) *
                C48331 * C48712) *
               C2680 +
           (((C32012 + C32011) * C824 + (C32010 + C32009) * C48663 -
             (C32714 + C32713) * C825 - (C32716 + C32715) * C48481) *
                C48331 * C5042 +
            ((C32013 + C32014) * C824 + (C32015 + C32016) * C48663 -
             (C33439 + C33440) * C825 - (C33441 + C33442) * C48481) *
                C48331 * C48712) *
               C48439) *
              C48363 +
          ((((C31822 + C31821) * C824 + (C31820 + C31819) * C48663 -
             (C32212 + C32211) * C825 - (C32214 + C32213) * C48481) *
                C48331 * C5042 +
            ((C32017 + C32018) * C824 + (C32019 + C32020) * C48663 -
             (C32717 + C32718) * C825 - (C32719 + C32720) * C48481) *
                C48331 * C48712) *
               C2680 +
           (((C32718 + C32717) * C825 -
             ((C32020 + C32019) * C48663 + (C32018 + C32017) * C824) +
             (C32720 + C32719) * C48481) *
                C48331 * C5042 +
            ((C31780 * C1382 + C31778 * C1398 + C31781 * C1383 +
              C48714 * C1400) *
                 C825 -
             ((C32021 + C32022) * C48663 + (C32023 + C32024) * C824) +
             (C31780 * C1399 + C31778 * C1409 + C31781 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48331 * C48712) *
               C48439) *
              C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[179] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C5042 +
            ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) * C48331 *
                C48712) *
               C2680 -
           (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) * C48331 *
                C48712 +
            ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) * C48331 *
                C5042) *
               C48439) *
              C48739 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C48331 *
                C5042 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48331 *
                C48712) *
               C48439 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48331 *
                C48712 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C48331 *
                C5042) *
               C2680) *
              C48732 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C48331 *
                C5042 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48331 *
                C48712) *
               C2680 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48331 *
                C48712 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C48331 *
                C5042) *
               C48439) *
              C48719 +
          ((((C32360 + C32359) * C114 + (C32358 + C32357) * C48394) * C48331 *
                C5042 +
            ((C31780 * C309 + C31778 * C327 + C31781 * C1681 + C48714 * C1682) *
                 C114 +
             (C31780 * C326 + C31778 * C339 + C31781 * C1683 + C48714 * C1684) *
                 C48394) *
                C48331 * C48712) *
               C48439 -
           (((C32357 + C32358) * C48394 + (C32359 + C32360) * C114) * C48331 *
                C48712 +
            ((C31826 + C31825) * C48394 + (C31824 + C31823) * C114) * C48331 *
                C5042) *
               C2680) *
              C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C5042 +
            ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) * C48331 *
                C48712) *
               C48740 -
           (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) * C48331 *
                C48712 +
            ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) * C48331 *
                C5042) *
               C48736 +
           (((C37640 + C37639) * C114 + (C37638 + C37637) * C48394) * C48331 *
                C5042 +
            ((C38497 + C38498) * C114 + (C38499 + C38500) * C48394) * C48331 *
                C48712) *
               C48726 -
           (((C38501 + C38502) * C48394 + (C38503 + C38504) * C114) * C48331 *
                C48712 +
            ((C38500 + C38499) * C48394 + (C38498 + C38497) * C114) * C48331 *
                C5042) *
               C48704) *
              C2788 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C48331 *
                C5042 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48331 *
                C48712) *
               C48736 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48331 *
                C48712 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C48331 *
                C5042) *
               C48740 -
           (((C33233 + C33234) * C48394 + (C33235 + C33236) * C114) * C48331 *
                C48712 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C48331 *
                C5042) *
               C48726 +
           (((C33236 + C33235) * C114 + (C33234 + C33233) * C48394) * C48331 *
                C5042 +
            ((C31780 * C1245 + C31778 * C1255 + C31781 * C6765 +
              C48714 * C6768) *
                 C114 +
             (C31780 * C1256 + C31778 * C1263 + C31781 * C6769 +
              C48714 * C6771) *
                 C48394) *
                C48331 * C48712) *
               C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[180] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C3456 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C3454 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C3457 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C48331 * C5042 +
            ((C37633 + C37634) * C3456 + (C37635 + C37636) * C3454 -
             (C38249 + C38250) * C3457 - (C38251 + C38252) * C48481) *
                C48331 * C48712) *
               C48435 +
           (((C38250 + C38249) * C3457 -
             ((C37636 + C37635) * C3454 + (C37634 + C37633) * C3456) +
             (C38252 + C38251) * C48481) *
                C48331 * C5042 +
            ((C38679 + C38680) * C3457 -
             ((C37637 + C37638) * C3454 + (C37639 + C37640) * C3456) +
             (C38681 + C38682) * C48481) *
                C48331 * C48712) *
               C48442 +
           (((C37640 + C37639) * C3456 + (C37638 + C37637) * C3454 -
             (C38680 + C38679) * C3457 - (C38682 + C38681) * C48481) *
                C48331 * C5042 +
            ((C38497 + C38498) * C3456 + (C38499 + C38500) * C3454 -
             (C39149 + C39150) * C3457 - (C39151 + C39152) * C48481) *
                C48331 * C48712) *
               C3060) *
              C48648 +
          ((((C32204 + C32203) * C3457 -
             ((C31818 + C31817) * C3454 + (C31816 + C31815) * C3456) +
             (C32206 + C32205) * C48481) *
                C48331 * C5042 +
            ((C32713 + C32714) * C3457 -
             ((C32009 + C32010) * C3454 + (C32011 + C32012) * C3456) +
             (C32715 + C32716) * C48481) *
                C48331 * C48712) *
               C48435 +
           (((C32012 + C32011) * C3456 + (C32010 + C32009) * C3454 -
             (C32714 + C32713) * C3457 - (C32716 + C32715) * C48481) *
                C48331 * C5042 +
            ((C32013 + C32014) * C3456 + (C32015 + C32016) * C3454 -
             (C33439 + C33440) * C3457 - (C33441 + C33442) * C48481) *
                C48331 * C48712) *
               C48442 +
           (((C33440 + C33439) * C3457 -
             ((C32016 + C32015) * C3454 + (C32014 + C32013) * C3456) +
             (C33442 + C33441) * C48481) *
                C48331 * C5042 +
            ((C31780 * C1804 + C31778 * C1808 + C31781 * C6239 +
              C48714 * C6242) *
                 C3457 -
             ((C33233 + C33234) * C3454 + (C33235 + C33236) * C3456) +
             (C31780 * C1809 + C31778 * C1813 + C31781 * C6243 +
              C48714 * C6245) *
                 C48481) *
                C48331 * C48712) *
               C3060) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[181] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C47163 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48477 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C47155 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48484 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C47169 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C4029) *
               C48331 * C5042 +
           ((C37633 + C37634) * C47163 + (C37635 + C37636) * C48477 -
            (C38249 + C38250) * C47155 - (C38251 + C38252) * C48484 +
            (C38675 + C38676) * C47169 + (C38677 + C38678) * C4029) *
               C48331 * C48712) *
              C48435 +
          (((C38250 + C38249) * C47155 -
            ((C37636 + C37635) * C48477 + (C37634 + C37633) * C47163) +
            (C38252 + C38251) * C48484 - (C38676 + C38675) * C47169 -
            (C38678 + C38677) * C4029) *
               C48331 * C5042 +
           ((C38679 + C38680) * C47155 -
            ((C37637 + C37638) * C48477 + (C37639 + C37640) * C47163) +
            (C38681 + C38682) * C48484 - (C38683 + C38684) * C47169 -
            (C38685 + C38686) * C4029) *
               C48331 * C48712) *
              C48442 +
          (((C37640 + C37639) * C47163 + (C37638 + C37637) * C48477 -
            (C38680 + C38679) * C47155 - (C38682 + C38681) * C48484 +
            (C38684 + C38683) * C47169 + (C38686 + C38685) * C4029) *
               C48331 * C5042 +
           ((C38497 + C38498) * C47163 + (C38499 + C38500) * C48477 -
            (C39149 + C39150) * C47155 - (C39151 + C39152) * C48484 +
            (C31780 * C6238 + C31778 * C6240 + C31781 * C23841 +
             C48714 * C23842) *
                C47169 +
            (C31780 * C6241 + C31778 * C6244 + C31781 * C23843 +
             C48714 * C23844) *
                C4029) *
               C48331 * C48712) *
              C3060) *
         C48350) /
        (p * q * std::sqrt(p + q));
    d2ee[182] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C3456 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C3454 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C3457 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48481) *
               C48331 * C5042 +
           ((C37633 + C37634) * C3456 + (C37635 + C37636) * C3454 -
            (C38249 + C38250) * C3457 - (C38251 + C38252) * C48481) *
               C48331 * C48712) *
              C48740 +
          (((C38250 + C38249) * C3457 -
            ((C37636 + C37635) * C3454 + (C37634 + C37633) * C3456) +
            (C38252 + C38251) * C48481) *
               C48331 * C5042 +
           ((C38679 + C38680) * C3457 -
            ((C37637 + C37638) * C3454 + (C37639 + C37640) * C3456) +
            (C38681 + C38682) * C48481) *
               C48331 * C48712) *
              C48736 +
          (((C37640 + C37639) * C3456 + (C37638 + C37637) * C3454 -
            (C38680 + C38679) * C3457 - (C38682 + C38681) * C48481) *
               C48331 * C5042 +
           ((C38497 + C38498) * C3456 + (C38499 + C38500) * C3454 -
            (C39149 + C39150) * C3457 - (C39151 + C39152) * C48481) *
               C48331 * C48712) *
              C48726 +
          (((C39150 + C39149) * C3457 -
            ((C38500 + C38499) * C3454 + (C38498 + C38497) * C3456) +
            (C39152 + C39151) * C48481) *
               C48331 * C5042 +
           ((C31780 * C6764 + C31778 * C6766 + C31781 * C22813 +
             C48714 * C22814) *
                C3457 -
            ((C38501 + C38502) * C3454 + (C38503 + C38504) * C3456) +
            (C31780 * C6767 + C31778 * C6770 + C31781 * C22815 +
             C48714 * C22816) *
                C48481) *
               C48331 * C48712) *
              C48704) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C3456 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C3454 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C3457 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C48331 * C5042 +
            ((C37633 + C37634) * C3456 + (C37635 + C37636) * C3454 -
             (C38249 + C38250) * C3457 - (C38251 + C38252) * C48481) *
                C48331 * C48712) *
               C2680 +
           (((C38250 + C38249) * C3457 -
             ((C37636 + C37635) * C3454 + (C37634 + C37633) * C3456) +
             (C38252 + C38251) * C48481) *
                C48331 * C5042 +
            ((C38679 + C38680) * C3457 -
             ((C37637 + C37638) * C3454 + (C37639 + C37640) * C3456) +
             (C38681 + C38682) * C48481) *
                C48331 * C48712) *
               C48439) *
              C48730 +
          ((((C32204 + C32203) * C3457 -
             ((C31818 + C31817) * C3454 + (C31816 + C31815) * C3456) +
             (C32206 + C32205) * C48481) *
                C48331 * C5042 +
            ((C32713 + C32714) * C3457 -
             ((C32009 + C32010) * C3454 + (C32011 + C32012) * C3456) +
             (C32715 + C32716) * C48481) *
                C48331 * C48712) *
               C2680 +
           (((C32012 + C32011) * C3456 + (C32010 + C32009) * C3454 -
             (C32714 + C32713) * C3457 - (C32716 + C32715) * C48481) *
                C48331 * C5042 +
            ((C32013 + C32014) * C3456 + (C32015 + C32016) * C3454 -
             (C33439 + C33440) * C3457 - (C33441 + C33442) * C48481) *
                C48331 * C48712) *
               C48439) *
              C48717 +
          ((((C31822 + C31821) * C3456 + (C31820 + C31819) * C3454 -
             (C32212 + C32211) * C3457 - (C32214 + C32213) * C48481) *
                C48331 * C5042 +
            ((C32017 + C32018) * C3456 + (C32019 + C32020) * C3454 -
             (C32717 + C32718) * C3457 - (C32719 + C32720) * C48481) *
                C48331 * C48712) *
               C2680 +
           (((C32718 + C32717) * C3457 -
             ((C32020 + C32019) * C3454 + (C32018 + C32017) * C3456) +
             (C32720 + C32719) * C48481) *
                C48331 * C5042 +
            ((C31780 * C1382 + C31778 * C1398 + C31781 * C1383 +
              C48714 * C1400) *
                 C3457 -
             ((C32021 + C32022) * C3454 + (C32023 + C32024) * C3456) +
             (C31780 * C1399 + C31778 * C1409 + C31781 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48331 * C48712) *
               C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C3744 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48741 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C3745 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48738 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C3746 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C48729 -
            (C31781 * C2137 + C48714 * C2144 + C31780 * C2136 +
             C31778 * C2142) *
                C3747 -
            (C31781 * C2145 + C48714 * C2155 + C31780 * C2143 +
             C31778 * C2154) *
                C48710) *
               C48331 * C5042 +
           ((C37633 + C37634) * C3744 + (C37635 + C37636) * C48741 -
            (C38249 + C38250) * C3745 - (C38251 + C38252) * C48738 +
            (C38675 + C38676) * C3746 + (C38677 + C38678) * C48729 -
            (C39989 + C39990) * C3747 - (C39991 + C39992) * C48710) *
               C48331 * C48712) *
              C2680 +
          (((C38250 + C38249) * C3745 -
            ((C37636 + C37635) * C48741 + (C37634 + C37633) * C3744) +
            (C38252 + C38251) * C48738 - (C38676 + C38675) * C3746 -
            (C38678 + C38677) * C48729 + (C39990 + C39989) * C3747 +
            (C39992 + C39991) * C48710) *
               C48331 * C5042 +
           ((C38679 + C38680) * C3745 -
            ((C37637 + C37638) * C48741 + (C37639 + C37640) * C3744) +
            (C38681 + C38682) * C48738 - (C38683 + C38684) * C3746 -
            (C38685 + C38686) * C48729 +
            (C31780 * C7660 + C31778 * C7662 + C31781 * C23495 +
             C48714 * C23496) *
                C3747 +
            (C31780 * C7663 + C31778 * C7666 + C31781 * C23497 +
             C48714 * C23498) *
                C48710) *
               C48331 * C48712) *
              C48439) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[183] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C47163 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48477 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C47155 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48484 +
             (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                 C47169 +
             (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                 C4029) *
                C48331 * C5042 +
            ((C37633 + C37634) * C47163 + (C37635 + C37636) * C48477 -
             (C38249 + C38250) * C47155 - (C38251 + C38252) * C48484 +
             (C38675 + C38676) * C47169 + (C38677 + C38678) * C4029) *
                C48331 * C48712) *
               C2680 +
           (((C38250 + C38249) * C47155 -
             ((C37636 + C37635) * C48477 + (C37634 + C37633) * C47163) +
             (C38252 + C38251) * C48484 - (C38676 + C38675) * C47169 -
             (C38678 + C38677) * C4029) *
                C48331 * C5042 +
            ((C38679 + C38680) * C47155 -
             ((C37637 + C37638) * C48477 + (C37639 + C37640) * C47163) +
             (C38681 + C38682) * C48484 - (C38683 + C38684) * C47169 -
             (C38685 + C38686) * C4029) *
                C48331 * C48712) *
               C48439) *
              C48648 +
          ((((C32204 + C32203) * C47155 -
             ((C31818 + C31817) * C48477 + (C31816 + C31815) * C47163) +
             (C32206 + C32205) * C48484 - (C32208 + C32207) * C47169 -
             (C32210 + C32209) * C4029) *
                C48331 * C5042 +
            ((C32713 + C32714) * C47155 -
             ((C32009 + C32010) * C48477 + (C32011 + C32012) * C47163) +
             (C32715 + C32716) * C48484 - (C34149 + C34150) * C47169 -
             (C34151 + C34152) * C4029) *
                C48331 * C48712) *
               C2680 +
           (((C32012 + C32011) * C47163 + (C32010 + C32009) * C48477 -
             (C32714 + C32713) * C47155 - (C32716 + C32715) * C48484 +
             (C34150 + C34149) * C47169 + (C34152 + C34151) * C4029) *
                C48331 * C5042 +
            ((C32013 + C32014) * C47163 + (C32015 + C32016) * C48477 -
             (C33439 + C33440) * C47155 - (C33441 + C33442) * C48484 +
             (C31780 * C1381 + C31778 * C1396 + C31781 * C7661 +
              C48714 * C7664) *
                 C47169 +
             (C31780 * C1397 + C31778 * C1408 + C31781 * C7665 +
              C48714 * C7667) *
                 C4029) *
                C48331 * C48712) *
               C48439) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[184] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C3456 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C3454 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C3457 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C48331 * C5042 +
            ((C37633 + C37634) * C3456 + (C37635 + C37636) * C3454 -
             (C38249 + C38250) * C3457 - (C38251 + C38252) * C48481) *
                C48331 * C48712) *
               C2680 +
           (((C38250 + C38249) * C3457 -
             ((C37636 + C37635) * C3454 + (C37634 + C37633) * C3456) +
             (C38252 + C38251) * C48481) *
                C48331 * C5042 +
            ((C38679 + C38680) * C3457 -
             ((C37637 + C37638) * C3454 + (C37639 + C37640) * C3456) +
             (C38681 + C38682) * C48481) *
                C48331 * C48712) *
               C48439) *
              C48730 +
          ((((C32204 + C32203) * C3457 -
             ((C31818 + C31817) * C3454 + (C31816 + C31815) * C3456) +
             (C32206 + C32205) * C48481) *
                C48331 * C5042 +
            ((C32713 + C32714) * C3457 -
             ((C32009 + C32010) * C3454 + (C32011 + C32012) * C3456) +
             (C32715 + C32716) * C48481) *
                C48331 * C48712) *
               C2680 +
           (((C32012 + C32011) * C3456 + (C32010 + C32009) * C3454 -
             (C32714 + C32713) * C3457 - (C32716 + C32715) * C48481) *
                C48331 * C5042 +
            ((C32013 + C32014) * C3456 + (C32015 + C32016) * C3454 -
             (C33439 + C33440) * C3457 - (C33441 + C33442) * C48481) *
                C48331 * C48712) *
               C48439) *
              C48717 +
          ((((C31822 + C31821) * C3456 + (C31820 + C31819) * C3454 -
             (C32212 + C32211) * C3457 - (C32214 + C32213) * C48481) *
                C48331 * C5042 +
            ((C32017 + C32018) * C3456 + (C32019 + C32020) * C3454 -
             (C32717 + C32718) * C3457 - (C32719 + C32720) * C48481) *
                C48331 * C48712) *
               C2680 +
           (((C32718 + C32717) * C3457 -
             ((C32020 + C32019) * C3454 + (C32018 + C32017) * C3456) +
             (C32720 + C32719) * C48481) *
                C48331 * C5042 +
            ((C31780 * C1382 + C31778 * C1398 + C31781 * C1383 +
              C48714 * C1400) *
                 C3457 -
             ((C32021 + C32022) * C3454 + (C32023 + C32024) * C3456) +
             (C31780 * C1399 + C31778 * C1409 + C31781 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48331 * C48712) *
               C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C3456 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C3454 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C3457 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48481) *
               C48331 * C5042 +
           ((C37633 + C37634) * C3456 + (C37635 + C37636) * C3454 -
            (C38249 + C38250) * C3457 - (C38251 + C38252) * C48481) *
               C48331 * C48712) *
              C48740 +
          (((C38250 + C38249) * C3457 -
            ((C37636 + C37635) * C3454 + (C37634 + C37633) * C3456) +
            (C38252 + C38251) * C48481) *
               C48331 * C5042 +
           ((C38679 + C38680) * C3457 -
            ((C37637 + C37638) * C3454 + (C37639 + C37640) * C3456) +
            (C38681 + C38682) * C48481) *
               C48331 * C48712) *
              C48736 +
          (((C37640 + C37639) * C3456 + (C37638 + C37637) * C3454 -
            (C38680 + C38679) * C3457 - (C38682 + C38681) * C48481) *
               C48331 * C5042 +
           ((C38497 + C38498) * C3456 + (C38499 + C38500) * C3454 -
            (C39149 + C39150) * C3457 - (C39151 + C39152) * C48481) *
               C48331 * C48712) *
              C48726 +
          (((C39150 + C39149) * C3457 -
            ((C38500 + C38499) * C3454 + (C38498 + C38497) * C3456) +
            (C39152 + C39151) * C48481) *
               C48331 * C5042 +
           ((C31780 * C6764 + C31778 * C6766 + C31781 * C22813 +
             C48714 * C22814) *
                C3457 -
            ((C38501 + C38502) * C3454 + (C38503 + C38504) * C3456) +
            (C31780 * C6767 + C31778 * C6770 + C31781 * C22815 +
             C48714 * C22816) *
                C48481) *
               C48331 * C48712) *
              C48704) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[185] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C5042 +
            ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) * C48331 *
                C48712) *
               C1509 -
           (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) * C48331 *
                C48712 +
            ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) * C48331 *
                C5042) *
               C1510 +
           (((C37640 + C37639) * C114 + (C37638 + C37637) * C48394) * C48331 *
                C5042 +
            ((C38497 + C38498) * C114 + (C38499 + C38500) * C48394) * C48331 *
                C48712) *
               C1511 -
           (((C38501 + C38502) * C48394 + (C38503 + C38504) * C114) * C48331 *
                C48712 +
            ((C38500 + C38499) * C48394 + (C38498 + C38497) * C114) * C48331 *
                C5042) *
               C48704) *
              C48648 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C48331 *
                C5042 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48331 *
                C48712) *
               C1510 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48331 *
                C48712 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C48331 *
                C5042) *
               C1509 -
           (((C33233 + C33234) * C48394 + (C33235 + C33236) * C114) * C48331 *
                C48712 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C48331 *
                C5042) *
               C1511 +
           (((C33236 + C33235) * C114 + (C33234 + C33233) * C48394) * C48331 *
                C5042 +
            ((C31780 * C1245 + C31778 * C1255 + C31781 * C6765 +
              C48714 * C6768) *
                 C114 +
             (C31780 * C1256 + C31778 * C1263 + C31781 * C6769 +
              C48714 * C6771) *
                 C48394) *
                C48331 * C48712) *
               C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C5042 +
            ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) * C48331 *
                C48712) *
               C48662 -
           (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) * C48331 *
                C48712 +
            ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) * C48331 *
                C5042) *
               C48439) *
              C707 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C48331 *
                C5042 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48331 *
                C48712) *
               C48439 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48331 *
                C48712 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C48331 *
                C5042) *
               C48662) *
              C708 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C48331 *
                C5042 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48331 *
                C48712) *
               C48662 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48331 *
                C48712 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C48331 *
                C5042) *
               C48439) *
              C709 +
          ((((C32360 + C32359) * C114 + (C32358 + C32357) * C48394) * C48331 *
                C5042 +
            ((C31780 * C309 + C31778 * C327 + C31781 * C1681 + C48714 * C1682) *
                 C114 +
             (C31780 * C326 + C31778 * C339 + C31781 * C1683 + C48714 * C1684) *
                 C48394) *
                C48331 * C48712) *
               C48439 -
           (((C32357 + C32358) * C48394 + (C32359 + C32360) * C114) * C48331 *
                C48712 +
            ((C31826 + C31825) * C48394 + (C31824 + C31823) * C114) * C48331 *
                C5042) *
               C48662) *
              C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C1928 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C1925 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C1929 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C1926 +
             (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                 C1930 +
             (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                 C48697) *
                C48331 * C5042 +
            ((C37633 + C37634) * C1928 + (C37635 + C37636) * C1925 -
             (C38249 + C38250) * C1929 - (C38251 + C38252) * C1926 +
             (C38675 + C38676) * C1930 + (C38677 + C38678) * C48697) *
                C48331 * C48712) *
               C48662 +
           (((C38250 + C38249) * C1929 -
             ((C37636 + C37635) * C1925 + (C37634 + C37633) * C1928) +
             (C38252 + C38251) * C1926 - (C38676 + C38675) * C1930 -
             (C38678 + C38677) * C48697) *
                C48331 * C5042 +
            ((C38679 + C38680) * C1929 -
             ((C37637 + C37638) * C1925 + (C37639 + C37640) * C1928) +
             (C38681 + C38682) * C1926 - (C38683 + C38684) * C1930 -
             (C38685 + C38686) * C48697) *
                C48331 * C48712) *
               C48439) *
              C48648 +
          ((((C32204 + C32203) * C1929 -
             ((C31818 + C31817) * C1925 + (C31816 + C31815) * C1928) +
             (C32206 + C32205) * C1926 - (C32208 + C32207) * C1930 -
             (C32210 + C32209) * C48697) *
                C48331 * C5042 +
            ((C32713 + C32714) * C1929 -
             ((C32009 + C32010) * C1925 + (C32011 + C32012) * C1928) +
             (C32715 + C32716) * C1926 - (C34149 + C34150) * C1930 -
             (C34151 + C34152) * C48697) *
                C48331 * C48712) *
               C48662 +
           (((C32012 + C32011) * C1928 + (C32010 + C32009) * C1925 -
             (C32714 + C32713) * C1929 - (C32716 + C32715) * C1926 +
             (C34150 + C34149) * C1930 + (C34152 + C34151) * C48697) *
                C48331 * C5042 +
            ((C32013 + C32014) * C1928 + (C32015 + C32016) * C1925 -
             (C33439 + C33440) * C1929 - (C33441 + C33442) * C1926 +
             (C31780 * C1381 + C31778 * C1396 + C31781 * C7661 +
              C48714 * C7664) *
                 C1930 +
             (C31780 * C1397 + C31778 * C1408 + C31781 * C7665 +
              C48714 * C7667) *
                 C48697) *
                C48331 * C48712) *
               C48439) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[186] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C824 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48663 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C825 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48481) *
               C48331 * C5042 +
           ((C37633 + C37634) * C824 + (C37635 + C37636) * C48663 -
            (C38249 + C38250) * C825 - (C38251 + C38252) * C48481) *
               C48331 * C48712) *
              C1509 +
          (((C38250 + C38249) * C825 -
            ((C37636 + C37635) * C48663 + (C37634 + C37633) * C824) +
            (C38252 + C38251) * C48481) *
               C48331 * C5042 +
           ((C38679 + C38680) * C825 -
            ((C37637 + C37638) * C48663 + (C37639 + C37640) * C824) +
            (C38681 + C38682) * C48481) *
               C48331 * C48712) *
              C1510 +
          (((C37640 + C37639) * C824 + (C37638 + C37637) * C48663 -
            (C38680 + C38679) * C825 - (C38682 + C38681) * C48481) *
               C48331 * C5042 +
           ((C38497 + C38498) * C824 + (C38499 + C38500) * C48663 -
            (C39149 + C39150) * C825 - (C39151 + C39152) * C48481) *
               C48331 * C48712) *
              C1511 +
          (((C39150 + C39149) * C825 -
            ((C38500 + C38499) * C48663 + (C38498 + C38497) * C824) +
            (C39152 + C39151) * C48481) *
               C48331 * C5042 +
           ((C31780 * C6764 + C31778 * C6766 + C31781 * C22813 +
             C48714 * C22814) *
                C825 -
            ((C38501 + C38502) * C48663 + (C38503 + C38504) * C824) +
            (C31780 * C6767 + C31778 * C6770 + C31781 * C22815 +
             C48714 * C22816) *
                C48481) *
               C48331 * C48712) *
              C48704) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C824 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48663 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C825 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C48331 * C5042 +
            ((C37633 + C37634) * C824 + (C37635 + C37636) * C48663 -
             (C38249 + C38250) * C825 - (C38251 + C38252) * C48481) *
                C48331 * C48712) *
               C48662 +
           (((C38250 + C38249) * C825 -
             ((C37636 + C37635) * C48663 + (C37634 + C37633) * C824) +
             (C38252 + C38251) * C48481) *
                C48331 * C5042 +
            ((C31780 * C1378 + C31778 * C1390 + C31781 * C1379 +
              C48714 * C1392) *
                 C825 -
             ((C37637 + C37638) * C48663 + (C37639 + C37640) * C824) +
             (C31780 * C1391 + C31778 * C1405 + C31781 * C1393 +
              C48714 * C1406) *
                 C48481) *
                C48331 * C48712) *
               C48439) *
              C299 +
          ((((C32204 + C32203) * C825 -
             ((C31818 + C31817) * C48663 + (C31816 + C31815) * C824) +
             (C32206 + C32205) * C48481) *
                C48331 * C5042 +
            ((C32713 + C32714) * C825 -
             ((C32009 + C32010) * C48663 + (C32011 + C32012) * C824) +
             (C32715 + C32716) * C48481) *
                C48331 * C48712) *
               C48662 +
           (((C32012 + C32011) * C824 + (C32010 + C32009) * C48663 -
             (C32714 + C32713) * C825 - (C32716 + C32715) * C48481) *
                C48331 * C5042 +
            ((C32013 + C32014) * C824 + (C32015 + C32016) * C48663 -
             (C33439 + C33440) * C825 - (C33441 + C33442) * C48481) *
                C48331 * C48712) *
               C48439) *
              C300 +
          ((((C31822 + C31821) * C824 + (C31820 + C31819) * C48663 -
             (C32212 + C32211) * C825 - (C32214 + C32213) * C48481) *
                C48331 * C5042 +
            ((C32017 + C32018) * C824 + (C32019 + C32020) * C48663 -
             (C32717 + C32718) * C825 - (C32719 + C32720) * C48481) *
                C48331 * C48712) *
               C48662 +
           (((C32718 + C32717) * C825 -
             ((C32020 + C32019) * C48663 + (C32018 + C32017) * C824) +
             (C32720 + C32719) * C48481) *
                C48331 * C5042 +
            ((C31780 * C1382 + C31778 * C1398 + C31781 * C1383 +
              C48714 * C1400) *
                 C825 -
             ((C32021 + C32022) * C48663 + (C32023 + C32024) * C824) +
             (C31780 * C1399 + C31778 * C1409 + C31781 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48331 * C48712) *
               C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C2436 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C2432 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C2437 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C2433 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C2438 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C2434 -
            (C31781 * C2137 + C48714 * C2144 + C31780 * C2136 +
             C31778 * C2142) *
                C2439 -
            (C31781 * C2145 + C48714 * C2155 + C31780 * C2143 +
             C31778 * C2154) *
                C48710) *
               C48331 * C5042 +
           ((C37633 + C37634) * C2436 + (C37635 + C37636) * C2432 -
            (C38249 + C38250) * C2437 - (C38251 + C38252) * C2433 +
            (C38675 + C38676) * C2438 + (C38677 + C38678) * C2434 -
            (C39989 + C39990) * C2439 - (C39991 + C39992) * C48710) *
               C48331 * C48712) *
              C48662 +
          (((C38250 + C38249) * C2437 -
            ((C37636 + C37635) * C2432 + (C37634 + C37633) * C2436) +
            (C38252 + C38251) * C2433 - (C38676 + C38675) * C2438 -
            (C38678 + C38677) * C2434 + (C39990 + C39989) * C2439 +
            (C39992 + C39991) * C48710) *
               C48331 * C5042 +
           ((C38679 + C38680) * C2437 -
            ((C37637 + C37638) * C2432 + (C37639 + C37640) * C2436) +
            (C38681 + C38682) * C2433 - (C38683 + C38684) * C2438 -
            (C38685 + C38686) * C2434 +
            (C31780 * C7660 + C31778 * C7662 + C31781 * C23495 +
             C48714 * C23496) *
                C2439 +
            (C31780 * C7663 + C31778 * C7666 + C31781 * C23497 +
             C48714 * C23498) *
                C48710) *
               C48331 * C48712) *
              C48439) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[187] +=
        (0.5 * std::pow(Pi, 2.5) *
             ((((C31780 * C115 + C31778 * C122 + C31781 * C508 +
                 C48714 * C518) *
                    C114 +
                (C31780 * C123 + C31778 * C136 + C31781 * C519 +
                 C48714 * C538) *
                    C48394) *
                   C48331 * C5042 +
               ((C31780 * C304 + C31778 * C317 + C31781 * C1004 +
                 C48714 * C1009) *
                    C114 +
                (C31780 * C316 + C31778 * C334 + C31781 * C1010 +
                 C48714 * C1019) *
                    C48394) *
                   C48331 * C48712) *
                  C48377 * C108 -
              (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) *
                   C48331 * C48712 +
               ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) *
                   C48331 * C5042) *
                  C48377 * C109 +
              (((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) *
                   C48331 * C5042 +
               ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) *
                   C48331 * C48712) *
                  C48377 * C110 -
              (((C32357 + C32358) * C48394 + (C32359 + C32360) * C114) *
                   C48331 * C48712 +
               ((C31826 + C31825) * C48394 + (C31824 + C31823) * C114) *
                   C48331 * C5042) *
                  C48377 * C111 +
              (((C31830 + C31829) * C114 + (C31828 + C31827) * C48394) *
                   C48331 * C5042 +
               ((C31780 * C310 + C31778 * C329 + C31781 * C1008 +
                 C48714 * C1017) *
                    C114 +
                (C31780 * C328 + C31778 * C340 + C31781 * C1018 +
                 C48714 * C1023) *
                    C48394) *
                   C48331 * C48712) *
                  C48377 * C112) +
         0.5 * std::pow(Pi, 2.5) *
             (((((C31780 * C115 + C31778 * C122 + C31781 * C508 +
                  C48714 * C518) *
                     C114 +
                 (C31780 * C123 + C31778 * C136 + C31781 * C519 +
                  C48714 * C538) *
                     C48394) *
                    C48331 * C5042 +
                ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) *
                    C48331 * C48712) *
                   C48733 -
               (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) *
                    C48331 * C48712 +
                ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) *
                    C48331 * C5042) *
                   C48721 +
               (((C37640 + C37639) * C114 + (C37638 + C37637) * C48394) *
                    C48331 * C5042 +
                ((C31780 * C1243 + C31778 * C1252 + C31781 * C1803 +
                  C48714 * C1806) *
                     C114 +
                 (C31780 * C1251 + C31778 * C1261 + C31781 * C1807 +
                  C48714 * C1812) *
                     C48394) *
                    C48331 * C48712) *
                   C48694) *
                  C299 +
              ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) *
                    C48331 * C5042 +
                ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) *
                    C48331 * C48712) *
                   C48721 -
               (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) *
                    C48331 * C48712 +
                ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) *
                    C48331 * C5042) *
                   C48733 -
               (((C33233 + C33234) * C48394 + (C33235 + C33236) * C114) *
                    C48331 * C48712 +
                ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) *
                    C48331 * C5042) *
                   C48694) *
                  C300 +
              ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) *
                    C48331 * C5042 +
                ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) *
                    C48331 * C48712) *
                   C48733 -
               (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) *
                    C48331 * C48712 +
                ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) *
                    C48331 * C5042) *
                   C48721 +
               (((C32024 + C32023) * C114 + (C32022 + C32021) * C48394) *
                    C48331 * C5042 +
                ((C31780 * C1241 + C31778 * C1248 + C31781 * C1805 +
                  C48714 * C1810) *
                     C114 +
                 (C31780 * C1247 + C31778 * C1259 + C31781 * C1811 +
                  C48714 * C1814) *
                     C48394) *
                    C48331 * C48712) *
                   C48694) *
                  C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C505 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48734 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C506 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48723 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C507 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C48697) *
               C48331 * C5042 +
           ((C37633 + C37634) * C505 + (C37635 + C37636) * C48734 -
            (C31781 * C1375 + C48714 * C1384 + C31780 * C1004 +
             C31778 * C1009) *
                C506 -
            (C31781 * C1385 + C48714 * C1402 + C31780 * C1010 +
             C31778 * C1019) *
                C48723 +
            (C31780 * C1375 + C31778 * C1384 + C31781 * C2570 +
             C48714 * C2573) *
                C507 +
            (C31780 * C1385 + C31778 * C1402 + C31781 * C2574 +
             C48714 * C2579) *
                C48697) *
               C48331 * C48712) *
              C48377 * C299 +
          (((C32204 + C32203) * C506 -
            ((C31818 + C31817) * C48734 + (C31816 + C31815) * C505) +
            (C32206 + C32205) * C48723 - (C32208 + C32207) * C507 -
            (C32210 + C32209) * C48697) *
               C48331 * C5042 +
           ((C32713 + C32714) * C506 -
            ((C32009 + C32010) * C48734 + (C32011 + C32012) * C505) +
            (C32715 + C32716) * C48723 - (C34149 + C34150) * C507 -
            (C34151 + C34152) * C48697) *
               C48331 * C48712) *
              C48377 * C300 +
          (((C31822 + C31821) * C505 + (C31820 + C31819) * C48734 -
            (C32212 + C32211) * C506 - (C32214 + C32213) * C48723 +
            (C32216 + C32215) * C507 + (C32218 + C32217) * C48697) *
               C48331 * C5042 +
           ((C32017 + C32018) * C505 + (C32019 + C32020) * C48734 -
            (C32717 + C32718) * C506 - (C32719 + C32720) * C48723 +
            (C31780 * C1377 + C31778 * C1388 + C31781 * C2572 +
             C48714 * C2577) *
                C507 +
            (C31780 * C1389 + C31778 * C1404 + C31781 * C2578 +
             C48714 * C2581) *
                C48697) *
               C48331 * C48712) *
              C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C5042 +
            ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) * C48331 *
                C48712) *
               C1167 -
           (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) * C48331 *
                C48712 +
            ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) * C48331 *
                C5042) *
               C1168 +
           (((C37640 + C37639) * C114 + (C37638 + C37637) * C48394) * C48331 *
                C5042 +
            ((C31780 * C1243 + C31778 * C1252 + C31781 * C1803 +
              C48714 * C1806) *
                 C114 +
             (C31780 * C1251 + C31778 * C1261 + C31781 * C1807 +
              C48714 * C1812) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48730 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C48331 *
                C5042 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48331 *
                C48712) *
               C1168 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48331 *
                C48712 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C48331 *
                C5042) *
               C1167 -
           (((C33233 + C33234) * C48394 + (C33235 + C33236) * C114) * C48331 *
                C48712 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C48331 *
                C5042) *
               C48694) *
              C48717 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C48331 *
                C5042 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48331 *
                C48712) *
               C1167 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48331 *
                C48712 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C48331 *
                C5042) *
               C1168 +
           (((C32024 + C32023) * C114 + (C32022 + C32021) * C48394) * C48331 *
                C5042 +
            ((C31780 * C1241 + C31778 * C1248 + C31781 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C31780 * C1247 + C31778 * C1259 + C31781 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (0.5 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C114 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48394) *
               C48331 * C5042 +
           ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) * C48331 *
               C48712) *
              C1235 -
          (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) * C48331 *
               C48712 +
           ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) * C48331 *
               C5042) *
              C1236 +
          (((C37640 + C37639) * C114 + (C37638 + C37637) * C48394) * C48331 *
               C5042 +
           ((C38497 + C38498) * C114 + (C38499 + C38500) * C48394) * C48331 *
               C48712) *
              C1237 -
          (((C38501 + C38502) * C48394 + (C38503 + C38504) * C114) * C48331 *
               C48712 +
           ((C38500 + C38499) * C48394 + (C38498 + C38497) * C114) * C48331 *
               C5042) *
              C1238 +
          (((C38504 + C38503) * C114 + (C38502 + C38501) * C48394) * C48331 *
               C5042 +
           ((C31780 * C6060 + C31778 * C6062 + C31781 * C23183 +
             C48714 * C23184) *
                C114 +
            (C31780 * C6063 + C31778 * C6066 + C31781 * C23185 +
             C48714 * C23186) *
                C48394) *
               C48331 * C48712) *
              C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C505 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48734 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C506 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48723 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C507 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C48697) *
               C48331 * C5042 +
           ((C37633 + C37634) * C505 + (C37635 + C37636) * C48734 -
            (C38249 + C38250) * C506 - (C38251 + C38252) * C48723 +
            (C38675 + C38676) * C507 + (C38677 + C38678) * C48697) *
               C48331 * C48712) *
              C1167 +
          (((C38250 + C38249) * C506 -
            ((C37636 + C37635) * C48734 + (C37634 + C37633) * C505) +
            (C38252 + C38251) * C48723 - (C38676 + C38675) * C507 -
            (C38678 + C38677) * C48697) *
               C48331 * C5042 +
           ((C38679 + C38680) * C506 -
            ((C37637 + C37638) * C48734 + (C37639 + C37640) * C505) +
            (C38681 + C38682) * C48723 - (C38683 + C38684) * C507 -
            (C38685 + C38686) * C48697) *
               C48331 * C48712) *
              C1168 +
          (((C37640 + C37639) * C505 + (C37638 + C37637) * C48734 -
            (C38680 + C38679) * C506 - (C38682 + C38681) * C48723 +
            (C38684 + C38683) * C507 + (C38686 + C38685) * C48697) *
               C48331 * C5042 +
           ((C38497 + C38498) * C505 + (C38499 + C38500) * C48734 -
            (C31781 * C6238 + C48714 * C6240 + C31780 * C1803 +
             C31778 * C1806) *
                C506 -
            (C31781 * C6241 + C48714 * C6244 + C31780 * C1807 +
             C31778 * C1812) *
                C48723 +
            (C31780 * C6238 + C31778 * C6240 + C31781 * C23841 +
             C48714 * C23842) *
                C507 +
            (C31780 * C6241 + C31778 * C6244 + C31781 * C23843 +
             C48714 * C23844) *
                C48697) *
               C48331 * C48712) *
              C48694) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C1928 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C1925 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C1929 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C1926 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C1930 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C48697) *
               C48331 * C5042 +
           ((C37633 + C37634) * C1928 + (C37635 + C37636) * C1925 -
            (C38249 + C38250) * C1929 - (C38251 + C38252) * C1926 +
            (C38675 + C38676) * C1930 + (C38677 + C38678) * C48697) *
               C48331 * C48712) *
              C48377 * C48730 +
          (((C32204 + C32203) * C1929 -
            ((C31818 + C31817) * C1925 + (C31816 + C31815) * C1928) +
            (C32206 + C32205) * C1926 - (C32208 + C32207) * C1930 -
            (C32210 + C32209) * C48697) *
               C48331 * C5042 +
           ((C32713 + C32714) * C1929 -
            ((C32009 + C32010) * C1925 + (C32011 + C32012) * C1928) +
            (C32715 + C32716) * C1926 - (C34149 + C34150) * C1930 -
            (C34151 + C34152) * C48697) *
               C48331 * C48712) *
              C48377 * C48717 +
          (((C31822 + C31821) * C1928 + (C31820 + C31819) * C1925 -
            (C32212 + C32211) * C1929 - (C32214 + C32213) * C1926 +
            (C32216 + C32215) * C1930 + (C32218 + C32217) * C48697) *
               C48331 * C5042 +
           ((C32017 + C32018) * C1928 + (C32019 + C32020) * C1925 -
            (C32717 + C32718) * C1929 - (C32719 + C32720) * C1926 +
            (C31780 * C1377 + C31778 * C1388 + C31781 * C2572 +
             C48714 * C2577) *
                C1930 +
            (C31780 * C1389 + C31778 * C1404 + C31781 * C2578 +
             C48714 * C2581) *
                C48697) *
               C48331 * C48712) *
              C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C1928 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C1925 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C1929 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C1926 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C1930 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C48697) *
               C48331 * C5042 +
           ((C37633 + C37634) * C1928 + (C37635 + C37636) * C1925 -
            (C38249 + C38250) * C1929 - (C38251 + C38252) * C1926 +
            (C38675 + C38676) * C1930 + (C38677 + C38678) * C48697) *
               C48331 * C48712) *
              C48733 +
          (((C38250 + C38249) * C1929 -
            ((C37636 + C37635) * C1925 + (C37634 + C37633) * C1928) +
            (C38252 + C38251) * C1926 - (C38676 + C38675) * C1930 -
            (C38678 + C38677) * C48697) *
               C48331 * C5042 +
           ((C38679 + C38680) * C1929 -
            ((C37637 + C37638) * C1925 + (C37639 + C37640) * C1928) +
            (C38681 + C38682) * C1926 - (C38683 + C38684) * C1930 -
            (C38685 + C38686) * C48697) *
               C48331 * C48712) *
              C48721 +
          (((C37640 + C37639) * C1928 + (C37638 + C37637) * C1925 -
            (C38680 + C38679) * C1929 - (C38682 + C38681) * C1926 +
            (C38684 + C38683) * C1930 + (C38686 + C38685) * C48697) *
               C48331 * C5042 +
           ((C38497 + C38498) * C1928 + (C38499 + C38500) * C1925 -
            (C39149 + C39150) * C1929 - (C39151 + C39152) * C1926 +
            (C31780 * C6238 + C31778 * C6240 + C31781 * C23841 +
             C48714 * C23842) *
                C1930 +
            (C31780 * C6241 + C31778 * C6244 + C31781 * C23843 +
             C48714 * C23844) *
                C48697) *
               C48331 * C48712) *
              C48694) *
         C48350) /
            (p * q * std::sqrt(p + q)) +
        (2 * std::pow(Pi, 2.5) *
         (((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
               C2131 +
           (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
               C2126 -
           (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
               C2132 -
           (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
               C2127 +
           (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
               C2133 +
           (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
               C2128 -
           (C31781 * C2137 + C48714 * C2144 + C31780 * C2136 + C31778 * C2142) *
               C2134 -
           (C31781 * C2145 + C48714 * C2155 + C31780 * C2143 + C31778 * C2154) *
               C2129 +
           (C31780 * C2137 + C31778 * C2144 + C31781 * C12981 +
            C48714 * C12983) *
               C2135 +
           (C31780 * C2145 + C31778 * C2155 + C31781 * C12984 +
            C48714 * C12987) *
               C2130) *
              C48331 * C5042 +
          ((C37633 + C37634) * C2131 + (C37635 + C37636) * C2126 -
           (C38249 + C38250) * C2132 - (C38251 + C38252) * C2127 +
           (C38675 + C38676) * C2133 + (C38677 + C38678) * C2128 -
           (C31781 * C7174 + C48714 * C7176 + C31780 * C2570 + C31778 * C2573) *
               C2134 -
           (C31781 * C7177 + C48714 * C7180 + C31780 * C2574 + C31778 * C2579) *
               C2129 +
           (C31780 * C7174 + C31778 * C7176 + C31781 * C28262 +
            C48714 * C28263) *
               C2135 +
           (C31780 * C7177 + C31778 * C7180 + C31781 * C28264 +
            C48714 * C28265) *
               C2130) *
              C48331 * C48712) *
         C48377 * C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[188] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C824 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48663 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C825 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C48331 * C5042 +
            ((C37633 + C37634) * C824 + (C37635 + C37636) * C48663 -
             (C38249 + C38250) * C825 - (C38251 + C38252) * C48481) *
                C48331 * C48712) *
               C1167 +
           (((C38250 + C38249) * C825 -
             ((C37636 + C37635) * C48663 + (C37634 + C37633) * C824) +
             (C38252 + C38251) * C48481) *
                C48331 * C5042 +
            ((C38679 + C38680) * C825 -
             ((C37637 + C37638) * C48663 + (C37639 + C37640) * C824) +
             (C38681 + C38682) * C48481) *
                C48331 * C48712) *
               C1168 +
           (((C37640 + C37639) * C824 + (C37638 + C37637) * C48663 -
             (C38680 + C38679) * C825 - (C38682 + C38681) * C48481) *
                C48331 * C5042 +
            ((C38497 + C38498) * C824 + (C38499 + C38500) * C48663 -
             (C31781 * C6238 + C48714 * C6240 + C31780 * C1803 +
              C31778 * C1806) *
                 C825 -
             (C31781 * C6241 + C48714 * C6244 + C31780 * C1807 +
              C31778 * C1812) *
                 C48481) *
                C48331 * C48712) *
               C48694) *
              C48648 +
          ((((C32204 + C32203) * C825 -
             ((C31818 + C31817) * C48663 + (C31816 + C31815) * C824) +
             (C32206 + C32205) * C48481) *
                C48331 * C5042 +
            ((C32713 + C32714) * C825 -
             ((C32009 + C32010) * C48663 + (C32011 + C32012) * C824) +
             (C32715 + C32716) * C48481) *
                C48331 * C48712) *
               C1167 +
           (((C32012 + C32011) * C824 + (C32010 + C32009) * C48663 -
             (C32714 + C32713) * C825 - (C32716 + C32715) * C48481) *
                C48331 * C5042 +
            ((C32013 + C32014) * C824 + (C32015 + C32016) * C48663 -
             (C33439 + C33440) * C825 - (C33441 + C33442) * C48481) *
                C48331 * C48712) *
               C1168 +
           (((C33440 + C33439) * C825 -
             ((C32016 + C32015) * C48663 + (C32014 + C32013) * C824) +
             (C33442 + C33441) * C48481) *
                C48331 * C5042 +
            ((C31780 * C1804 + C31778 * C1808 + C31781 * C6239 +
              C48714 * C6242) *
                 C825 -
             ((C33233 + C33234) * C48663 + (C33235 + C33236) * C824) +
             (C31780 * C1809 + C31778 * C1813 + C31781 * C6243 +
              C48714 * C6245) *
                 C48481) *
                C48331 * C48712) *
               C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C824 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48663 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C825 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48481) *
               C48331 * C5042 +
           ((C37633 + C37634) * C824 + (C37635 + C37636) * C48663 -
            (C31781 * C1375 + C48714 * C1384 + C31780 * C1004 +
             C31778 * C1009) *
                C825 -
            (C31781 * C1385 + C48714 * C1402 + C31780 * C1010 +
             C31778 * C1019) *
                C48481) *
               C48331 * C48712) *
              C48377 * C707 +
          (((C32204 + C32203) * C825 -
            ((C31818 + C31817) * C48663 + (C31816 + C31815) * C824) +
            (C32206 + C32205) * C48481) *
               C48331 * C5042 +
           ((C32713 + C32714) * C825 -
            ((C32009 + C32010) * C48663 + (C32011 + C32012) * C824) +
            (C32715 + C32716) * C48481) *
               C48331 * C48712) *
              C48377 * C708 +
          (((C31822 + C31821) * C824 + (C31820 + C31819) * C48663 -
            (C32212 + C32211) * C825 - (C32214 + C32213) * C48481) *
               C48331 * C5042 +
           ((C32017 + C32018) * C824 + (C32019 + C32020) * C48663 -
            (C32717 + C32718) * C825 - (C32719 + C32720) * C48481) *
               C48331 * C48712) *
              C48377 * C709 +
          (((C32500 + C32499) * C825 -
            ((C31826 + C31825) * C48663 + (C31824 + C31823) * C824) +
            (C32502 + C32501) * C48481) *
               C48331 * C5042 +
           ((C31780 * C1007 + C31778 * C1015 + C31781 * C2306 +
             C48714 * C2307) *
                C825 -
            ((C32357 + C32358) * C48663 + (C32359 + C32360) * C824) +
            (C31780 * C1016 + C31778 * C1022 + C31781 * C2308 +
             C48714 * C2309) *
                C48481) *
               C48331 * C48712) *
              C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C2436 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C2432 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C2437 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C2433 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C2438 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C2434 -
            (C31781 * C2137 + C48714 * C2144 + C31780 * C2136 +
             C31778 * C2142) *
                C2439 -
            (C31781 * C2145 + C48714 * C2155 + C31780 * C2143 +
             C31778 * C2154) *
                C48710) *
               C48331 * C5042 +
           ((C37633 + C37634) * C2436 + (C37635 + C37636) * C2432 -
            (C38249 + C38250) * C2437 - (C38251 + C38252) * C2433 +
            (C38675 + C38676) * C2438 + (C38677 + C38678) * C2434 -
            (C31781 * C7174 + C48714 * C7176 + C31780 * C2570 +
             C31778 * C2573) *
                C2439 -
            (C31781 * C7177 + C48714 * C7180 + C31780 * C2574 +
             C31778 * C2579) *
                C48710) *
               C48331 * C48712) *
              C48377 * C48648 +
          (((C32204 + C32203) * C2437 -
            ((C31818 + C31817) * C2432 + (C31816 + C31815) * C2436) +
            (C32206 + C32205) * C2433 - (C32208 + C32207) * C2438 -
            (C32210 + C32209) * C2434 + (C34292 + C34291) * C2439 +
            (C34294 + C34293) * C48710) *
               C48331 * C5042 +
           ((C32713 + C32714) * C2437 -
            ((C32009 + C32010) * C2432 + (C32011 + C32012) * C2436) +
            (C32715 + C32716) * C2433 - (C34149 + C34150) * C2438 -
            (C34151 + C34152) * C2434 +
            (C31780 * C2571 + C31778 * C2575 + C31781 * C7175 +
             C48714 * C7178) *
                C2439 +
            (C31780 * C2576 + C31778 * C2580 + C31781 * C7179 +
             C48714 * C7181) *
                C48710) *
               C48331 * C48712) *
              C48377 * C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[189] +=
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C5042 +
            ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) * C48331 *
                C48712) *
               C48733 -
           (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) * C48331 *
                C48712 +
            ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) * C48331 *
                C5042) *
               C48721 +
           (((C37640 + C37639) * C114 + (C37638 + C37637) * C48394) * C48331 *
                C5042 +
            ((C31780 * C1243 + C31778 * C1252 + C31781 * C1803 +
              C48714 * C1806) *
                 C114 +
             (C31780 * C1251 + C31778 * C1261 + C31781 * C1807 +
              C48714 * C1812) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C299 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C48331 *
                C5042 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48331 *
                C48712) *
               C48721 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48331 *
                C48712 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C48331 *
                C5042) *
               C48733 -
           (((C33233 + C33234) * C48394 + (C33235 + C33236) * C114) * C48331 *
                C48712 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C48331 *
                C5042) *
               C48694) *
              C300 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C48331 *
                C5042 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48331 *
                C48712) *
               C48733 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48331 *
                C48712 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C48331 *
                C5042) *
               C48721 +
           (((C32024 + C32023) * C114 + (C32022 + C32021) * C48394) * C48331 *
                C5042 +
            ((C31780 * C1241 + C31778 * C1248 + C31781 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C31780 * C1247 + C31778 * C1259 + C31781 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C114 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48394) *
               C48331 * C5042 +
           ((C31780 * C304 + C31778 * C317 + C31781 * C1004 + C48714 * C1009) *
                C114 +
            (C31780 * C316 + C31778 * C334 + C31781 * C1010 + C48714 * C1019) *
                C48394) *
               C48331 * C48712) *
              C48377 * C108 -
          (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48331 *
               C48712 +
           ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C48331 *
               C5042) *
              C48377 * C109 +
          (((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C48331 *
               C5042 +
           ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48331 *
               C48712) *
              C48377 * C110 -
          (((C32357 + C32358) * C48394 + (C32359 + C32360) * C114) * C48331 *
               C48712 +
           ((C31826 + C31825) * C48394 + (C31824 + C31823) * C114) * C48331 *
               C5042) *
              C48377 * C111 +
          (((C31830 + C31829) * C114 + (C31828 + C31827) * C48394) * C48331 *
               C5042 +
           ((C31780 * C310 + C31778 * C329 + C31781 * C1008 + C48714 * C1017) *
                C114 +
            (C31780 * C328 + C31778 * C340 + C31781 * C1018 + C48714 * C1023) *
                C48394) *
               C48331 * C48712) *
              C48377 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C5042 +
            ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) * C48331 *
                C48712) *
               C1167 -
           (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) * C48331 *
                C48712 +
            ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) * C48331 *
                C5042) *
               C1168 +
           (((C37640 + C37639) * C114 + (C37638 + C37637) * C48394) * C48331 *
                C5042 +
            ((C31780 * C1243 + C31778 * C1252 + C31781 * C1803 +
              C48714 * C1806) *
                 C114 +
             (C31780 * C1251 + C31778 * C1261 + C31781 * C1807 +
              C48714 * C1812) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48730 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C48331 *
                C5042 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48331 *
                C48712) *
               C1168 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48331 *
                C48712 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C48331 *
                C5042) *
               C1167 -
           (((C33233 + C33234) * C48394 + (C33235 + C33236) * C114) * C48331 *
                C48712 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C48331 *
                C5042) *
               C48694) *
              C48717 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C48331 *
                C5042 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48331 *
                C48712) *
               C1167 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48331 *
                C48712 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C48331 *
                C5042) *
               C1168 +
           (((C32024 + C32023) * C114 + (C32022 + C32021) * C48394) * C48331 *
                C5042 +
            ((C31780 * C1241 + C31778 * C1248 + C31781 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C31780 * C1247 + C31778 * C1259 + C31781 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C114 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48394) *
               C48331 * C5042 +
           ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) * C48331 *
               C48712) *
              C1235 -
          (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) * C48331 *
               C48712 +
           ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) * C48331 *
               C5042) *
              C1236 +
          (((C37640 + C37639) * C114 + (C37638 + C37637) * C48394) * C48331 *
               C5042 +
           ((C38497 + C38498) * C114 + (C38499 + C38500) * C48394) * C48331 *
               C48712) *
              C1237 -
          (((C38501 + C38502) * C48394 + (C38503 + C38504) * C114) * C48331 *
               C48712 +
           ((C38500 + C38499) * C48394 + (C38498 + C38497) * C114) * C48331 *
               C5042) *
              C1238 +
          (((C38504 + C38503) * C114 + (C38502 + C38501) * C48394) * C48331 *
               C5042 +
           ((C31780 * C6060 + C31778 * C6062 + C31781 * C23183 +
             C48714 * C23184) *
                C114 +
            (C31780 * C6063 + C31778 * C6066 + C31781 * C23185 +
             C48714 * C23186) *
                C48394) *
               C48331 * C48712) *
              C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C1928 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C1925 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C1929 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C1926 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C1930 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C48697) *
               C48331 * C5042 +
           ((C37633 + C37634) * C1928 + (C37635 + C37636) * C1925 -
            (C38249 + C38250) * C1929 - (C38251 + C38252) * C1926 +
            (C38675 + C38676) * C1930 + (C38677 + C38678) * C48697) *
               C48331 * C48712) *
              C48377 * C48730 +
          (((C32204 + C32203) * C1929 -
            ((C31818 + C31817) * C1925 + (C31816 + C31815) * C1928) +
            (C32206 + C32205) * C1926 - (C32208 + C32207) * C1930 -
            (C32210 + C32209) * C48697) *
               C48331 * C5042 +
           ((C32713 + C32714) * C1929 -
            ((C32009 + C32010) * C1925 + (C32011 + C32012) * C1928) +
            (C32715 + C32716) * C1926 - (C34149 + C34150) * C1930 -
            (C34151 + C34152) * C48697) *
               C48331 * C48712) *
              C48377 * C48717 +
          (((C31822 + C31821) * C1928 + (C31820 + C31819) * C1925 -
            (C32212 + C32211) * C1929 - (C32214 + C32213) * C1926 +
            (C32216 + C32215) * C1930 + (C32218 + C32217) * C48697) *
               C48331 * C5042 +
           ((C32017 + C32018) * C1928 + (C32019 + C32020) * C1925 -
            (C32717 + C32718) * C1929 - (C32719 + C32720) * C1926 +
            (C31780 * C1377 + C31778 * C1388 + C31781 * C2572 +
             C48714 * C2577) *
                C1930 +
            (C31780 * C1389 + C31778 * C1404 + C31781 * C2578 +
             C48714 * C2581) *
                C48697) *
               C48331 * C48712) *
              C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C1928 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C1925 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C1929 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C1926 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C1930 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C48697) *
               C48331 * C5042 +
           ((C37633 + C37634) * C1928 + (C37635 + C37636) * C1925 -
            (C38249 + C38250) * C1929 - (C38251 + C38252) * C1926 +
            (C38675 + C38676) * C1930 + (C38677 + C38678) * C48697) *
               C48331 * C48712) *
              C48733 +
          (((C38250 + C38249) * C1929 -
            ((C37636 + C37635) * C1925 + (C37634 + C37633) * C1928) +
            (C38252 + C38251) * C1926 - (C38676 + C38675) * C1930 -
            (C38678 + C38677) * C48697) *
               C48331 * C5042 +
           ((C38679 + C38680) * C1929 -
            ((C37637 + C37638) * C1925 + (C37639 + C37640) * C1928) +
            (C38681 + C38682) * C1926 - (C38683 + C38684) * C1930 -
            (C38685 + C38686) * C48697) *
               C48331 * C48712) *
              C48721 +
          (((C37640 + C37639) * C1928 + (C37638 + C37637) * C1925 -
            (C38680 + C38679) * C1929 - (C38682 + C38681) * C1926 +
            (C38684 + C38683) * C1930 + (C38686 + C38685) * C48697) *
               C48331 * C5042 +
           ((C38497 + C38498) * C1928 + (C38499 + C38500) * C1925 -
            (C39149 + C39150) * C1929 - (C39151 + C39152) * C1926 +
            (C31780 * C6238 + C31778 * C6240 + C31781 * C23841 +
             C48714 * C23842) *
                C1930 +
            (C31780 * C6241 + C31778 * C6244 + C31781 * C23843 +
             C48714 * C23844) *
                C48697) *
               C48331 * C48712) *
              C48694) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[190] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C3456 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C3454 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C3457 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C48331 * C5042 +
            ((C37633 + C37634) * C3456 + (C37635 + C37636) * C3454 -
             (C38249 + C38250) * C3457 - (C38251 + C38252) * C48481) *
                C48331 * C48712) *
               C48662 +
           (((C38250 + C38249) * C3457 -
             ((C37636 + C37635) * C3454 + (C37634 + C37633) * C3456) +
             (C38252 + C38251) * C48481) *
                C48331 * C5042 +
            ((C38679 + C38680) * C3457 -
             ((C37637 + C37638) * C3454 + (C37639 + C37640) * C3456) +
             (C38681 + C38682) * C48481) *
                C48331 * C48712) *
               C48439) *
              C48355 +
          ((((C32204 + C32203) * C3457 -
             ((C31818 + C31817) * C3454 + (C31816 + C31815) * C3456) +
             (C32206 + C32205) * C48481) *
                C48331 * C5042 +
            ((C32713 + C32714) * C3457 -
             ((C32009 + C32010) * C3454 + (C32011 + C32012) * C3456) +
             (C32715 + C32716) * C48481) *
                C48331 * C48712) *
               C48662 +
           (((C32012 + C32011) * C3456 + (C32010 + C32009) * C3454 -
             (C32714 + C32713) * C3457 - (C32716 + C32715) * C48481) *
                C48331 * C5042 +
            ((C32013 + C32014) * C3456 + (C32015 + C32016) * C3454 -
             (C33439 + C33440) * C3457 - (C33441 + C33442) * C48481) *
                C48331 * C48712) *
               C48439) *
              C48363 +
          ((((C31822 + C31821) * C3456 + (C31820 + C31819) * C3454 -
             (C32212 + C32211) * C3457 - (C32214 + C32213) * C48481) *
                C48331 * C5042 +
            ((C32017 + C32018) * C3456 + (C32019 + C32020) * C3454 -
             (C32717 + C32718) * C3457 - (C32719 + C32720) * C48481) *
                C48331 * C48712) *
               C48662 +
           (((C32718 + C32717) * C3457 -
             ((C32020 + C32019) * C3454 + (C32018 + C32017) * C3456) +
             (C32720 + C32719) * C48481) *
                C48331 * C5042 +
            ((C31780 * C1382 + C31778 * C1398 + C31781 * C1383 +
              C48714 * C1400) *
                 C3457 -
             ((C32021 + C32022) * C3454 + (C32023 + C32024) * C3456) +
             (C31780 * C1399 + C31778 * C1409 + C31781 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48331 * C48712) *
               C48439) *
              C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[191] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C47163 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48477 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C47155 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48484 +
             (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                 C47169 +
             (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                 C4029) *
                C48331 * C5042 +
            ((C37633 + C37634) * C47163 + (C37635 + C37636) * C48477 -
             (C38249 + C38250) * C47155 - (C38251 + C38252) * C48484 +
             (C38675 + C38676) * C47169 + (C38677 + C38678) * C4029) *
                C48331 * C48712) *
               C48662 +
           (((C38250 + C38249) * C47155 -
             ((C37636 + C37635) * C48477 + (C37634 + C37633) * C47163) +
             (C38252 + C38251) * C48484 - (C38676 + C38675) * C47169 -
             (C38678 + C38677) * C4029) *
                C48331 * C5042 +
            ((C38679 + C38680) * C47155 -
             ((C37637 + C37638) * C48477 + (C37639 + C37640) * C47163) +
             (C38681 + C38682) * C48484 - (C38683 + C38684) * C47169 -
             (C38685 + C38686) * C4029) *
                C48331 * C48712) *
               C48439) *
              C2788 +
          ((((C32204 + C32203) * C47155 -
             ((C31818 + C31817) * C48477 + (C31816 + C31815) * C47163) +
             (C32206 + C32205) * C48484 - (C32208 + C32207) * C47169 -
             (C32210 + C32209) * C4029) *
                C48331 * C5042 +
            ((C32713 + C32714) * C47155 -
             ((C32009 + C32010) * C48477 + (C32011 + C32012) * C47163) +
             (C32715 + C32716) * C48484 - (C34149 + C34150) * C47169 -
             (C34151 + C34152) * C4029) *
                C48331 * C48712) *
               C48662 +
           (((C32012 + C32011) * C47163 + (C32010 + C32009) * C48477 -
             (C32714 + C32713) * C47155 - (C32716 + C32715) * C48484 +
             (C34150 + C34149) * C47169 + (C34152 + C34151) * C4029) *
                C48331 * C5042 +
            ((C32013 + C32014) * C47163 + (C32015 + C32016) * C48477 -
             (C33439 + C33440) * C47155 - (C33441 + C33442) * C48484 +
             (C31780 * C1381 + C31778 * C1396 + C31781 * C7661 +
              C48714 * C7664) *
                 C47169 +
             (C31780 * C1397 + C31778 * C1408 + C31781 * C7665 +
              C48714 * C7667) *
                 C4029) *
                C48331 * C48712) *
               C48439) *
              C48360)) /
        (p * q * std::sqrt(p + q));
    d2ee[192] +=
        (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C3456 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C3454 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C3457 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C48331 * C5042 +
            ((C37633 + C37634) * C3456 + (C37635 + C37636) * C3454 -
             (C38249 + C38250) * C3457 - (C38251 + C38252) * C48481) *
                C48331 * C48712) *
               C48733 +
           (((C38250 + C38249) * C3457 -
             ((C37636 + C37635) * C3454 + (C37634 + C37633) * C3456) +
             (C38252 + C38251) * C48481) *
                C48331 * C5042 +
            ((C38679 + C38680) * C3457 -
             ((C37637 + C37638) * C3454 + (C37639 + C37640) * C3456) +
             (C38681 + C38682) * C48481) *
                C48331 * C48712) *
               C48721 +
           (((C37640 + C37639) * C3456 + (C37638 + C37637) * C3454 -
             (C38680 + C38679) * C3457 - (C38682 + C38681) * C48481) *
                C48331 * C5042 +
            ((C38497 + C38498) * C3456 + (C38499 + C38500) * C3454 -
             (C39149 + C39150) * C3457 - (C39151 + C39152) * C48481) *
                C48331 * C48712) *
               C48694) *
              C2788 +
          ((((C32204 + C32203) * C3457 -
             ((C31818 + C31817) * C3454 + (C31816 + C31815) * C3456) +
             (C32206 + C32205) * C48481) *
                C48331 * C5042 +
            ((C32713 + C32714) * C3457 -
             ((C32009 + C32010) * C3454 + (C32011 + C32012) * C3456) +
             (C32715 + C32716) * C48481) *
                C48331 * C48712) *
               C48733 +
           (((C32012 + C32011) * C3456 + (C32010 + C32009) * C3454 -
             (C32714 + C32713) * C3457 - (C32716 + C32715) * C48481) *
                C48331 * C5042 +
            ((C32013 + C32014) * C3456 + (C32015 + C32016) * C3454 -
             (C33439 + C33440) * C3457 - (C33441 + C33442) * C48481) *
                C48331 * C48712) *
               C48721 +
           (((C33440 + C33439) * C3457 -
             ((C32016 + C32015) * C3454 + (C32014 + C32013) * C3456) +
             (C33442 + C33441) * C48481) *
                C48331 * C5042 +
            ((C31780 * C1804 + C31778 * C1808 + C31781 * C6239 +
              C48714 * C6242) *
                 C3457 -
             ((C33233 + C33234) * C3454 + (C33235 + C33236) * C3456) +
             (C31780 * C1809 + C31778 * C1813 + C31781 * C6243 +
              C48714 * C6245) *
                 C48481) *
                C48331 * C48712) *
               C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C3456 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C3454 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C3457 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48481) *
               C48331 * C5042 +
           ((C37633 + C37634) * C3456 + (C37635 + C37636) * C3454 -
            (C38249 + C38250) * C3457 - (C38251 + C38252) * C48481) *
               C48331 * C48712) *
              C48377 * C48739 +
          (((C32204 + C32203) * C3457 -
            ((C31818 + C31817) * C3454 + (C31816 + C31815) * C3456) +
            (C32206 + C32205) * C48481) *
               C48331 * C5042 +
           ((C32713 + C32714) * C3457 -
            ((C32009 + C32010) * C3454 + (C32011 + C32012) * C3456) +
            (C32715 + C32716) * C48481) *
               C48331 * C48712) *
              C48377 * C48732 +
          (((C31822 + C31821) * C3456 + (C31820 + C31819) * C3454 -
            (C32212 + C32211) * C3457 - (C32214 + C32213) * C48481) *
               C48331 * C5042 +
           ((C32017 + C32018) * C3456 + (C32019 + C32020) * C3454 -
            (C32717 + C32718) * C3457 - (C32719 + C32720) * C48481) *
               C48331 * C48712) *
              C48377 * C48719 +
          (((C32500 + C32499) * C3457 -
            ((C31826 + C31825) * C3454 + (C31824 + C31823) * C3456) +
            (C32502 + C32501) * C48481) *
               C48331 * C5042 +
           ((C31780 * C1007 + C31778 * C1015 + C31781 * C2306 +
             C48714 * C2307) *
                C3457 -
            ((C32357 + C32358) * C3454 + (C32359 + C32360) * C3456) +
            (C31780 * C1016 + C31778 * C1022 + C31781 * C2308 +
             C48714 * C2309) *
                C48481) *
               C48331 * C48712) *
              C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C3744 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48741 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C3745 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48738 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C3746 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C48729 -
            (C31781 * C2137 + C48714 * C2144 + C31780 * C2136 +
             C31778 * C2142) *
                C3747 -
            (C31781 * C2145 + C48714 * C2155 + C31780 * C2143 +
             C31778 * C2154) *
                C48710) *
               C48331 * C5042 +
           ((C37633 + C37634) * C3744 + (C37635 + C37636) * C48741 -
            (C38249 + C38250) * C3745 - (C38251 + C38252) * C48738 +
            (C38675 + C38676) * C3746 + (C38677 + C38678) * C48729 -
            (C39989 + C39990) * C3747 - (C39991 + C39992) * C48710) *
               C48331 * C48712) *
              C48377 * C2788 +
          (((C32204 + C32203) * C3745 -
            ((C31818 + C31817) * C48741 + (C31816 + C31815) * C3744) +
            (C32206 + C32205) * C48738 - (C32208 + C32207) * C3746 -
            (C32210 + C32209) * C48729 + (C34292 + C34291) * C3747 +
            (C34294 + C34293) * C48710) *
               C48331 * C5042 +
           ((C32713 + C32714) * C3745 -
            ((C32009 + C32010) * C48741 + (C32011 + C32012) * C3744) +
            (C32715 + C32716) * C48738 - (C34149 + C34150) * C3746 -
            (C34151 + C34152) * C48729 +
            (C31780 * C2571 + C31778 * C2575 + C31781 * C7175 +
             C48714 * C7178) *
                C3747 +
            (C31780 * C2576 + C31778 * C2580 + C31781 * C7179 +
             C48714 * C7181) *
                C48710) *
               C48331 * C48712) *
              C48377 * C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[193] +=
        (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C47163 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48477 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C47155 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48484 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C47169 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C4029) *
               C48331 * C5042 +
           ((C37633 + C37634) * C47163 + (C37635 + C37636) * C48477 -
            (C38249 + C38250) * C47155 - (C38251 + C38252) * C48484 +
            (C38675 + C38676) * C47169 + (C38677 + C38678) * C4029) *
               C48331 * C48712) *
              C48377 * C48355 +
          (((C32204 + C32203) * C47155 -
            ((C31818 + C31817) * C48477 + (C31816 + C31815) * C47163) +
            (C32206 + C32205) * C48484 - (C32208 + C32207) * C47169 -
            (C32210 + C32209) * C4029) *
               C48331 * C5042 +
           ((C32713 + C32714) * C47155 -
            ((C32009 + C32010) * C48477 + (C32011 + C32012) * C47163) +
            (C32715 + C32716) * C48484 - (C34149 + C34150) * C47169 -
            (C34151 + C34152) * C4029) *
               C48331 * C48712) *
              C48377 * C48363 +
          (((C31822 + C31821) * C47163 + (C31820 + C31819) * C48477 -
            (C32212 + C32211) * C47155 - (C32214 + C32213) * C48484 +
            (C32216 + C32215) * C47169 + (C32218 + C32217) * C4029) *
               C48331 * C5042 +
           ((C32017 + C32018) * C47163 + (C32019 + C32020) * C48477 -
            (C32717 + C32718) * C47155 - (C32719 + C32720) * C48484 +
            (C31780 * C1377 + C31778 * C1388 + C31781 * C2572 +
             C48714 * C2577) *
                C47169 +
            (C31780 * C1389 + C31778 * C1404 + C31781 * C2578 +
             C48714 * C2581) *
                C4029) *
               C48331 * C48712) *
              C48377 * C3063)) /
        (p * q * std::sqrt(p + q));
    d2ee[194] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C3456 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C3454 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C3457 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48481) *
               C48331 * C5042 +
           ((C37633 + C37634) * C3456 + (C37635 + C37636) * C3454 -
            (C38249 + C38250) * C3457 - (C38251 + C38252) * C48481) *
               C48331 * C48712) *
              C48377 * C48739 +
          (((C32204 + C32203) * C3457 -
            ((C31818 + C31817) * C3454 + (C31816 + C31815) * C3456) +
            (C32206 + C32205) * C48481) *
               C48331 * C5042 +
           ((C32713 + C32714) * C3457 -
            ((C32009 + C32010) * C3454 + (C32011 + C32012) * C3456) +
            (C32715 + C32716) * C48481) *
               C48331 * C48712) *
              C48377 * C48732 +
          (((C31822 + C31821) * C3456 + (C31820 + C31819) * C3454 -
            (C32212 + C32211) * C3457 - (C32214 + C32213) * C48481) *
               C48331 * C5042 +
           ((C32017 + C32018) * C3456 + (C32019 + C32020) * C3454 -
            (C32717 + C32718) * C3457 - (C32719 + C32720) * C48481) *
               C48331 * C48712) *
              C48377 * C48719 +
          (((C32500 + C32499) * C3457 -
            ((C31826 + C31825) * C3454 + (C31824 + C31823) * C3456) +
            (C32502 + C32501) * C48481) *
               C48331 * C5042 +
           ((C31780 * C1007 + C31778 * C1015 + C31781 * C2306 +
             C48714 * C2307) *
                C3457 -
            ((C32357 + C32358) * C3454 + (C32359 + C32360) * C3456) +
            (C31780 * C1016 + C31778 * C1022 + C31781 * C2308 +
             C48714 * C2309) *
                C48481) *
               C48331 * C48712) *
              C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C3456 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C3454 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C3457 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C48331 * C5042 +
            ((C37633 + C37634) * C3456 + (C37635 + C37636) * C3454 -
             (C38249 + C38250) * C3457 - (C38251 + C38252) * C48481) *
                C48331 * C48712) *
               C48733 +
           (((C38250 + C38249) * C3457 -
             ((C37636 + C37635) * C3454 + (C37634 + C37633) * C3456) +
             (C38252 + C38251) * C48481) *
                C48331 * C5042 +
            ((C38679 + C38680) * C3457 -
             ((C37637 + C37638) * C3454 + (C37639 + C37640) * C3456) +
             (C38681 + C38682) * C48481) *
                C48331 * C48712) *
               C48721 +
           (((C37640 + C37639) * C3456 + (C37638 + C37637) * C3454 -
             (C38680 + C38679) * C3457 - (C38682 + C38681) * C48481) *
                C48331 * C5042 +
            ((C38497 + C38498) * C3456 + (C38499 + C38500) * C3454 -
             (C39149 + C39150) * C3457 - (C39151 + C39152) * C48481) *
                C48331 * C48712) *
               C48694) *
              C2788 +
          ((((C32204 + C32203) * C3457 -
             ((C31818 + C31817) * C3454 + (C31816 + C31815) * C3456) +
             (C32206 + C32205) * C48481) *
                C48331 * C5042 +
            ((C32713 + C32714) * C3457 -
             ((C32009 + C32010) * C3454 + (C32011 + C32012) * C3456) +
             (C32715 + C32716) * C48481) *
                C48331 * C48712) *
               C48733 +
           (((C32012 + C32011) * C3456 + (C32010 + C32009) * C3454 -
             (C32714 + C32713) * C3457 - (C32716 + C32715) * C48481) *
                C48331 * C5042 +
            ((C32013 + C32014) * C3456 + (C32015 + C32016) * C3454 -
             (C33439 + C33440) * C3457 - (C33441 + C33442) * C48481) *
                C48331 * C48712) *
               C48721 +
           (((C33440 + C33439) * C3457 -
             ((C32016 + C32015) * C3454 + (C32014 + C32013) * C3456) +
             (C33442 + C33441) * C48481) *
                C48331 * C5042 +
            ((C31780 * C1804 + C31778 * C1808 + C31781 * C6239 +
              C48714 * C6242) *
                 C3457 -
             ((C33233 + C33234) * C3454 + (C33235 + C33236) * C3456) +
             (C31780 * C1809 + C31778 * C1813 + C31781 * C6243 +
              C48714 * C6245) *
                 C48481) *
                C48331 * C48712) *
               C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[195] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C5042 +
            ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) * C48331 *
                C48712) *
               C48662 -
           (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) * C48331 *
                C48712 +
            ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) * C48331 *
                C5042) *
               C48439) *
              C707 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C48331 *
                C5042 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48331 *
                C48712) *
               C48439 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48331 *
                C48712 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C48331 *
                C5042) *
               C48662) *
              C708 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C48331 *
                C5042 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48331 *
                C48712) *
               C48662 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48331 *
                C48712 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C48331 *
                C5042) *
               C48439) *
              C709 +
          ((((C32360 + C32359) * C114 + (C32358 + C32357) * C48394) * C48331 *
                C5042 +
            ((C31780 * C309 + C31778 * C327 + C31781 * C1681 + C48714 * C1682) *
                 C114 +
             (C31780 * C326 + C31778 * C339 + C31781 * C1683 + C48714 * C1684) *
                 C48394) *
                C48331 * C48712) *
               C48439 -
           (((C32357 + C32358) * C48394 + (C32359 + C32360) * C114) * C48331 *
                C48712 +
            ((C31826 + C31825) * C48394 + (C31824 + C31823) * C114) * C48331 *
                C5042) *
               C48662) *
              C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C5042 +
            ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) * C48331 *
                C48712) *
               C1509 -
           (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) * C48331 *
                C48712 +
            ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) * C48331 *
                C5042) *
               C1510 +
           (((C37640 + C37639) * C114 + (C37638 + C37637) * C48394) * C48331 *
                C5042 +
            ((C38497 + C38498) * C114 + (C38499 + C38500) * C48394) * C48331 *
                C48712) *
               C1511 -
           (((C38501 + C38502) * C48394 + (C38503 + C38504) * C114) * C48331 *
                C48712 +
            ((C38500 + C38499) * C48394 + (C38498 + C38497) * C114) * C48331 *
                C5042) *
               C48704) *
              C48648 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C48331 *
                C5042 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48331 *
                C48712) *
               C1510 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48331 *
                C48712 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C48331 *
                C5042) *
               C1509 -
           (((C33233 + C33234) * C48394 + (C33235 + C33236) * C114) * C48331 *
                C48712 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C48331 *
                C5042) *
               C1511 +
           (((C33236 + C33235) * C114 + (C33234 + C33233) * C48394) * C48331 *
                C5042 +
            ((C31780 * C1245 + C31778 * C1255 + C31781 * C6765 +
              C48714 * C6768) *
                 C114 +
             (C31780 * C1256 + C31778 * C1263 + C31781 * C6769 +
              C48714 * C6771) *
                 C48394) *
                C48331 * C48712) *
               C48704) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[196] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C824 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48663 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C825 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C48331 * C5042 +
            ((C37633 + C37634) * C824 + (C37635 + C37636) * C48663 -
             (C38249 + C38250) * C825 - (C38251 + C38252) * C48481) *
                C48331 * C48712) *
               C48662 +
           (((C38250 + C38249) * C825 -
             ((C37636 + C37635) * C48663 + (C37634 + C37633) * C824) +
             (C38252 + C38251) * C48481) *
                C48331 * C5042 +
            ((C31780 * C1378 + C31778 * C1390 + C31781 * C1379 +
              C48714 * C1392) *
                 C825 -
             ((C37637 + C37638) * C48663 + (C37639 + C37640) * C824) +
             (C31780 * C1391 + C31778 * C1405 + C31781 * C1393 +
              C48714 * C1406) *
                 C48481) *
                C48331 * C48712) *
               C48439) *
              C299 +
          ((((C32204 + C32203) * C825 -
             ((C31818 + C31817) * C48663 + (C31816 + C31815) * C824) +
             (C32206 + C32205) * C48481) *
                C48331 * C5042 +
            ((C32713 + C32714) * C825 -
             ((C32009 + C32010) * C48663 + (C32011 + C32012) * C824) +
             (C32715 + C32716) * C48481) *
                C48331 * C48712) *
               C48662 +
           (((C32012 + C32011) * C824 + (C32010 + C32009) * C48663 -
             (C32714 + C32713) * C825 - (C32716 + C32715) * C48481) *
                C48331 * C5042 +
            ((C32013 + C32014) * C824 + (C32015 + C32016) * C48663 -
             (C33439 + C33440) * C825 - (C33441 + C33442) * C48481) *
                C48331 * C48712) *
               C48439) *
              C300 +
          ((((C31822 + C31821) * C824 + (C31820 + C31819) * C48663 -
             (C32212 + C32211) * C825 - (C32214 + C32213) * C48481) *
                C48331 * C5042 +
            ((C32017 + C32018) * C824 + (C32019 + C32020) * C48663 -
             (C32717 + C32718) * C825 - (C32719 + C32720) * C48481) *
                C48331 * C48712) *
               C48662 +
           (((C32718 + C32717) * C825 -
             ((C32020 + C32019) * C48663 + (C32018 + C32017) * C824) +
             (C32720 + C32719) * C48481) *
                C48331 * C5042 +
            ((C31780 * C1382 + C31778 * C1398 + C31781 * C1383 +
              C48714 * C1400) *
                 C825 -
             ((C32021 + C32022) * C48663 + (C32023 + C32024) * C824) +
             (C31780 * C1399 + C31778 * C1409 + C31781 * C1401 +
              C48714 * C1410) *
                 C48481) *
                C48331 * C48712) *
               C48439) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C824 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48663 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C825 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48481) *
               C48331 * C5042 +
           ((C37633 + C37634) * C824 + (C37635 + C37636) * C48663 -
            (C38249 + C38250) * C825 - (C38251 + C38252) * C48481) *
               C48331 * C48712) *
              C1509 +
          (((C38250 + C38249) * C825 -
            ((C37636 + C37635) * C48663 + (C37634 + C37633) * C824) +
            (C38252 + C38251) * C48481) *
               C48331 * C5042 +
           ((C38679 + C38680) * C825 -
            ((C37637 + C37638) * C48663 + (C37639 + C37640) * C824) +
            (C38681 + C38682) * C48481) *
               C48331 * C48712) *
              C1510 +
          (((C37640 + C37639) * C824 + (C37638 + C37637) * C48663 -
            (C38680 + C38679) * C825 - (C38682 + C38681) * C48481) *
               C48331 * C5042 +
           ((C38497 + C38498) * C824 + (C38499 + C38500) * C48663 -
            (C39149 + C39150) * C825 - (C39151 + C39152) * C48481) *
               C48331 * C48712) *
              C1511 +
          (((C39150 + C39149) * C825 -
            ((C38500 + C38499) * C48663 + (C38498 + C38497) * C824) +
            (C39152 + C39151) * C48481) *
               C48331 * C5042 +
           ((C31780 * C6764 + C31778 * C6766 + C31781 * C22813 +
             C48714 * C22814) *
                C825 -
            ((C38501 + C38502) * C48663 + (C38503 + C38504) * C824) +
            (C31780 * C6767 + C31778 * C6770 + C31781 * C22815 +
             C48714 * C22816) *
                C48481) *
               C48331 * C48712) *
              C48704) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[197] +=
        (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C5042 +
            ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) * C48331 *
                C48712) *
               C48733 -
           (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) * C48331 *
                C48712 +
            ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) * C48331 *
                C5042) *
               C48721 +
           (((C37640 + C37639) * C114 + (C37638 + C37637) * C48394) * C48331 *
                C5042 +
            ((C31780 * C1243 + C31778 * C1252 + C31781 * C1803 +
              C48714 * C1806) *
                 C114 +
             (C31780 * C1251 + C31778 * C1261 + C31781 * C1807 +
              C48714 * C1812) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C299 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C48331 *
                C5042 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48331 *
                C48712) *
               C48721 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48331 *
                C48712 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C48331 *
                C5042) *
               C48733 -
           (((C33233 + C33234) * C48394 + (C33235 + C33236) * C114) * C48331 *
                C48712 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C48331 *
                C5042) *
               C48694) *
              C300 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C48331 *
                C5042 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48331 *
                C48712) *
               C48733 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48331 *
                C48712 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C48331 *
                C5042) *
               C48721 +
           (((C32024 + C32023) * C114 + (C32022 + C32021) * C48394) * C48331 *
                C5042 +
            ((C31780 * C1241 + C31778 * C1248 + C31781 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C31780 * C1247 + C31778 * C1259 + C31781 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C114 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48394) *
               C48331 * C5042 +
           ((C31780 * C304 + C31778 * C317 + C31781 * C1004 + C48714 * C1009) *
                C114 +
            (C31780 * C316 + C31778 * C334 + C31781 * C1010 + C48714 * C1019) *
                C48394) *
               C48331 * C48712) *
              C48377 * C108 -
          (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48331 *
               C48712 +
           ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C48331 *
               C5042) *
              C48377 * C109 +
          (((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C48331 *
               C5042 +
           ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48331 *
               C48712) *
              C48377 * C110 -
          (((C32357 + C32358) * C48394 + (C32359 + C32360) * C114) * C48331 *
               C48712 +
           ((C31826 + C31825) * C48394 + (C31824 + C31823) * C114) * C48331 *
               C5042) *
              C48377 * C111 +
          (((C31830 + C31829) * C114 + (C31828 + C31827) * C48394) * C48331 *
               C5042 +
           ((C31780 * C310 + C31778 * C329 + C31781 * C1008 + C48714 * C1017) *
                C114 +
            (C31780 * C328 + C31778 * C340 + C31781 * C1018 + C48714 * C1023) *
                C48394) *
               C48331 * C48712) *
              C48377 * C112)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C505 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48734 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C506 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48723 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C507 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C48697) *
               C48331 * C5042 +
           ((C37633 + C37634) * C505 + (C37635 + C37636) * C48734 -
            (C31781 * C1375 + C48714 * C1384 + C31780 * C1004 +
             C31778 * C1009) *
                C506 -
            (C31781 * C1385 + C48714 * C1402 + C31780 * C1010 +
             C31778 * C1019) *
                C48723 +
            (C31780 * C1375 + C31778 * C1384 + C31781 * C2570 +
             C48714 * C2573) *
                C507 +
            (C31780 * C1385 + C31778 * C1402 + C31781 * C2574 +
             C48714 * C2579) *
                C48697) *
               C48331 * C48712) *
              C48377 * C299 +
          (((C32204 + C32203) * C506 -
            ((C31818 + C31817) * C48734 + (C31816 + C31815) * C505) +
            (C32206 + C32205) * C48723 - (C32208 + C32207) * C507 -
            (C32210 + C32209) * C48697) *
               C48331 * C5042 +
           ((C32713 + C32714) * C506 -
            ((C32009 + C32010) * C48734 + (C32011 + C32012) * C505) +
            (C32715 + C32716) * C48723 - (C34149 + C34150) * C507 -
            (C34151 + C34152) * C48697) *
               C48331 * C48712) *
              C48377 * C300 +
          (((C31822 + C31821) * C505 + (C31820 + C31819) * C48734 -
            (C32212 + C32211) * C506 - (C32214 + C32213) * C48723 +
            (C32216 + C32215) * C507 + (C32218 + C32217) * C48697) *
               C48331 * C5042 +
           ((C32017 + C32018) * C505 + (C32019 + C32020) * C48734 -
            (C32717 + C32718) * C506 - (C32719 + C32720) * C48723 +
            (C31780 * C1377 + C31778 * C1388 + C31781 * C2572 +
             C48714 * C2577) *
                C507 +
            (C31780 * C1389 + C31778 * C1404 + C31781 * C2578 +
             C48714 * C2581) *
                C48697) *
               C48331 * C48712) *
              C48377 * C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C5042 +
            ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) * C48331 *
                C48712) *
               C1167 -
           (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) * C48331 *
                C48712 +
            ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) * C48331 *
                C5042) *
               C1168 +
           (((C37640 + C37639) * C114 + (C37638 + C37637) * C48394) * C48331 *
                C5042 +
            ((C31780 * C1243 + C31778 * C1252 + C31781 * C1803 +
              C48714 * C1806) *
                 C114 +
             (C31780 * C1251 + C31778 * C1261 + C31781 * C1807 +
              C48714 * C1812) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48730 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C48331 *
                C5042 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48331 *
                C48712) *
               C1168 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48331 *
                C48712 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C48331 *
                C5042) *
               C1167 -
           (((C33233 + C33234) * C48394 + (C33235 + C33236) * C114) * C48331 *
                C48712 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C48331 *
                C5042) *
               C48694) *
              C48717 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C48331 *
                C5042 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48331 *
                C48712) *
               C1167 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48331 *
                C48712 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C48331 *
                C5042) *
               C1168 +
           (((C32024 + C32023) * C114 + (C32022 + C32021) * C48394) * C48331 *
                C5042 +
            ((C31780 * C1241 + C31778 * C1248 + C31781 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C31780 * C1247 + C31778 * C1259 + C31781 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C114 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48394) *
               C48331 * C5042 +
           ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) * C48331 *
               C48712) *
              C1235 -
          (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) * C48331 *
               C48712 +
           ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) * C48331 *
               C5042) *
              C1236 +
          (((C37640 + C37639) * C114 + (C37638 + C37637) * C48394) * C48331 *
               C5042 +
           ((C38497 + C38498) * C114 + (C38499 + C38500) * C48394) * C48331 *
               C48712) *
              C1237 -
          (((C38501 + C38502) * C48394 + (C38503 + C38504) * C114) * C48331 *
               C48712 +
           ((C38500 + C38499) * C48394 + (C38498 + C38497) * C114) * C48331 *
               C5042) *
              C1238 +
          (((C38504 + C38503) * C114 + (C38502 + C38501) * C48394) * C48331 *
               C5042 +
           ((C31780 * C6060 + C31778 * C6062 + C31781 * C23183 +
             C48714 * C23184) *
                C114 +
            (C31780 * C6063 + C31778 * C6066 + C31781 * C23185 +
             C48714 * C23186) *
                C48394) *
               C48331 * C48712) *
              C1239) *
         C48350) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C505 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48734 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C506 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48723 +
            (C31780 * C509 + C31778 * C520 + C31781 * C2136 + C48714 * C2142) *
                C507 +
            (C31780 * C521 + C31778 * C539 + C31781 * C2143 + C48714 * C2154) *
                C48697) *
               C48331 * C5042 +
           ((C37633 + C37634) * C505 + (C37635 + C37636) * C48734 -
            (C38249 + C38250) * C506 - (C38251 + C38252) * C48723 +
            (C38675 + C38676) * C507 + (C38677 + C38678) * C48697) *
               C48331 * C48712) *
              C1167 +
          (((C38250 + C38249) * C506 -
            ((C37636 + C37635) * C48734 + (C37634 + C37633) * C505) +
            (C38252 + C38251) * C48723 - (C38676 + C38675) * C507 -
            (C38678 + C38677) * C48697) *
               C48331 * C5042 +
           ((C38679 + C38680) * C506 -
            ((C37637 + C37638) * C48734 + (C37639 + C37640) * C505) +
            (C38681 + C38682) * C48723 - (C38683 + C38684) * C507 -
            (C38685 + C38686) * C48697) *
               C48331 * C48712) *
              C1168 +
          (((C37640 + C37639) * C505 + (C37638 + C37637) * C48734 -
            (C38680 + C38679) * C506 - (C38682 + C38681) * C48723 +
            (C38684 + C38683) * C507 + (C38686 + C38685) * C48697) *
               C48331 * C5042 +
           ((C38497 + C38498) * C505 + (C38499 + C38500) * C48734 -
            (C31781 * C6238 + C48714 * C6240 + C31780 * C1803 +
             C31778 * C1806) *
                C506 -
            (C31781 * C6241 + C48714 * C6244 + C31780 * C1807 +
             C31778 * C1812) *
                C48723 +
            (C31780 * C6238 + C31778 * C6240 + C31781 * C23841 +
             C48714 * C23842) *
                C507 +
            (C31780 * C6241 + C31778 * C6244 + C31781 * C23843 +
             C48714 * C23844) *
                C48697) *
               C48331 * C48712) *
              C48694) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[198] +=
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C824 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48663 -
            (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                C825 -
            (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                C48481) *
               C48331 * C5042 +
           ((C37633 + C37634) * C824 + (C37635 + C37636) * C48663 -
            (C31781 * C1375 + C48714 * C1384 + C31780 * C1004 +
             C31778 * C1009) *
                C825 -
            (C31781 * C1385 + C48714 * C1402 + C31780 * C1010 +
             C31778 * C1019) *
                C48481) *
               C48331 * C48712) *
              C48377 * C707 +
          (((C32204 + C32203) * C825 -
            ((C31818 + C31817) * C48663 + (C31816 + C31815) * C824) +
            (C32206 + C32205) * C48481) *
               C48331 * C5042 +
           ((C32713 + C32714) * C825 -
            ((C32009 + C32010) * C48663 + (C32011 + C32012) * C824) +
            (C32715 + C32716) * C48481) *
               C48331 * C48712) *
              C48377 * C708 +
          (((C31822 + C31821) * C824 + (C31820 + C31819) * C48663 -
            (C32212 + C32211) * C825 - (C32214 + C32213) * C48481) *
               C48331 * C5042 +
           ((C32017 + C32018) * C824 + (C32019 + C32020) * C48663 -
            (C32717 + C32718) * C825 - (C32719 + C32720) * C48481) *
               C48331 * C48712) *
              C48377 * C709 +
          (((C32500 + C32499) * C825 -
            ((C31826 + C31825) * C48663 + (C31824 + C31823) * C824) +
            (C32502 + C32501) * C48481) *
               C48331 * C5042 +
           ((C31780 * C1007 + C31778 * C1015 + C31781 * C2306 +
             C48714 * C2307) *
                C825 -
            ((C32357 + C32358) * C48663 + (C32359 + C32360) * C824) +
            (C31780 * C1016 + C31778 * C1022 + C31781 * C2308 +
             C48714 * C2309) *
                C48481) *
               C48331 * C48712) *
              C48377 * C48698)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C824 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48663 -
             (C31781 * C509 + C48714 * C520 + C31780 * C508 + C31778 * C518) *
                 C825 -
             (C31781 * C521 + C48714 * C539 + C31780 * C519 + C31778 * C538) *
                 C48481) *
                C48331 * C5042 +
            ((C37633 + C37634) * C824 + (C37635 + C37636) * C48663 -
             (C38249 + C38250) * C825 - (C38251 + C38252) * C48481) *
                C48331 * C48712) *
               C1167 +
           (((C38250 + C38249) * C825 -
             ((C37636 + C37635) * C48663 + (C37634 + C37633) * C824) +
             (C38252 + C38251) * C48481) *
                C48331 * C5042 +
            ((C38679 + C38680) * C825 -
             ((C37637 + C37638) * C48663 + (C37639 + C37640) * C824) +
             (C38681 + C38682) * C48481) *
                C48331 * C48712) *
               C1168 +
           (((C37640 + C37639) * C824 + (C37638 + C37637) * C48663 -
             (C38680 + C38679) * C825 - (C38682 + C38681) * C48481) *
                C48331 * C5042 +
            ((C38497 + C38498) * C824 + (C38499 + C38500) * C48663 -
             (C31781 * C6238 + C48714 * C6240 + C31780 * C1803 +
              C31778 * C1806) *
                 C825 -
             (C31781 * C6241 + C48714 * C6244 + C31780 * C1807 +
              C31778 * C1812) *
                 C48481) *
                C48331 * C48712) *
               C48694) *
              C48648 +
          ((((C32204 + C32203) * C825 -
             ((C31818 + C31817) * C48663 + (C31816 + C31815) * C824) +
             (C32206 + C32205) * C48481) *
                C48331 * C5042 +
            ((C32713 + C32714) * C825 -
             ((C32009 + C32010) * C48663 + (C32011 + C32012) * C824) +
             (C32715 + C32716) * C48481) *
                C48331 * C48712) *
               C1167 +
           (((C32012 + C32011) * C824 + (C32010 + C32009) * C48663 -
             (C32714 + C32713) * C825 - (C32716 + C32715) * C48481) *
                C48331 * C5042 +
            ((C32013 + C32014) * C824 + (C32015 + C32016) * C48663 -
             (C33439 + C33440) * C825 - (C33441 + C33442) * C48481) *
                C48331 * C48712) *
               C1168 +
           (((C33440 + C33439) * C825 -
             ((C32016 + C32015) * C48663 + (C32014 + C32013) * C824) +
             (C33442 + C33441) * C48481) *
                C48331 * C5042 +
            ((C31780 * C1804 + C31778 * C1808 + C31781 * C6239 +
              C48714 * C6242) *
                 C825 -
             ((C33233 + C33234) * C48663 + (C33235 + C33236) * C824) +
             (C31780 * C1809 + C31778 * C1813 + C31781 * C6243 +
              C48714 * C6245) *
                 C48481) *
                C48331 * C48712) *
               C48694) *
              C48360)) /
            (p * q * std::sqrt(p + q));
    d2ee[199] +=
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C114 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48394) *
               C48331 * C5042 +
           ((C31780 * C304 + C31778 * C317 + C31781 * C1004 + C48714 * C1009) *
                C114 +
            (C31780 * C316 + C31778 * C334 + C31781 * C1010 + C48714 * C1019) *
                C48394) *
               C48331 * C48712) *
              C48377 * C108 -
          (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48331 *
               C48712 +
           ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C48331 *
               C5042) *
              C48377 * C109 +
          (((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C48331 *
               C5042 +
           ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48331 *
               C48712) *
              C48377 * C110 -
          (((C32357 + C32358) * C48394 + (C32359 + C32360) * C114) * C48331 *
               C48712 +
           ((C31826 + C31825) * C48394 + (C31824 + C31823) * C114) * C48331 *
               C5042) *
              C48377 * C111 +
          (((C31830 + C31829) * C114 + (C31828 + C31827) * C48394) * C48331 *
               C5042 +
           ((C31780 * C310 + C31778 * C329 + C31781 * C1008 + C48714 * C1017) *
                C114 +
            (C31780 * C328 + C31778 * C340 + C31781 * C1018 + C48714 * C1023) *
                C48394) *
               C48331 * C48712) *
              C48377 * C112)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C5042 +
            ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) * C48331 *
                C48712) *
               C48733 -
           (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) * C48331 *
                C48712 +
            ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) * C48331 *
                C5042) *
               C48721 +
           (((C37640 + C37639) * C114 + (C37638 + C37637) * C48394) * C48331 *
                C5042 +
            ((C31780 * C1243 + C31778 * C1252 + C31781 * C1803 +
              C48714 * C1806) *
                 C114 +
             (C31780 * C1251 + C31778 * C1261 + C31781 * C1807 +
              C48714 * C1812) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C299 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C48331 *
                C5042 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48331 *
                C48712) *
               C48721 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48331 *
                C48712 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C48331 *
                C5042) *
               C48733 -
           (((C33233 + C33234) * C48394 + (C33235 + C33236) * C114) * C48331 *
                C48712 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C48331 *
                C5042) *
               C48694) *
              C300 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C48331 *
                C5042 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48331 *
                C48712) *
               C48733 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48331 *
                C48712 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C48331 *
                C5042) *
               C48721 +
           (((C32024 + C32023) * C114 + (C32022 + C32021) * C48394) * C48331 *
                C5042 +
            ((C31780 * C1241 + C31778 * C1248 + C31781 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C31780 * C1247 + C31778 * C1259 + C31781 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) -
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         (((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                 C114 +
             (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                 C48394) *
                C48331 * C5042 +
            ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) * C48331 *
                C48712) *
               C1167 -
           (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) * C48331 *
                C48712 +
            ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) * C48331 *
                C5042) *
               C1168 +
           (((C37640 + C37639) * C114 + (C37638 + C37637) * C48394) * C48331 *
                C5042 +
            ((C31780 * C1243 + C31778 * C1252 + C31781 * C1803 +
              C48714 * C1806) *
                 C114 +
             (C31780 * C1251 + C31778 * C1261 + C31781 * C1807 +
              C48714 * C1812) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48730 +
          ((((C32012 + C32011) * C114 + (C32010 + C32009) * C48394) * C48331 *
                C5042 +
            ((C32013 + C32014) * C114 + (C32015 + C32016) * C48394) * C48331 *
                C48712) *
               C1168 -
           (((C32009 + C32010) * C48394 + (C32011 + C32012) * C114) * C48331 *
                C48712 +
            ((C31818 + C31817) * C48394 + (C31816 + C31815) * C114) * C48331 *
                C5042) *
               C1167 -
           (((C33233 + C33234) * C48394 + (C33235 + C33236) * C114) * C48331 *
                C48712 +
            ((C32016 + C32015) * C48394 + (C32014 + C32013) * C114) * C48331 *
                C5042) *
               C48694) *
              C48717 +
          ((((C31822 + C31821) * C114 + (C31820 + C31819) * C48394) * C48331 *
                C5042 +
            ((C32017 + C32018) * C114 + (C32019 + C32020) * C48394) * C48331 *
                C48712) *
               C1167 -
           (((C32021 + C32022) * C48394 + (C32023 + C32024) * C114) * C48331 *
                C48712 +
            ((C32020 + C32019) * C48394 + (C32018 + C32017) * C114) * C48331 *
                C5042) *
               C1168 +
           (((C32024 + C32023) * C114 + (C32022 + C32021) * C48394) * C48331 *
                C5042 +
            ((C31780 * C1241 + C31778 * C1248 + C31781 * C1805 +
              C48714 * C1810) *
                 C114 +
             (C31780 * C1247 + C31778 * C1259 + C31781 * C1811 +
              C48714 * C1814) *
                 C48394) *
                C48331 * C48712) *
               C48694) *
              C48688)) /
            (p * q * std::sqrt(p + q)) +
        (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
         ((((C31780 * C115 + C31778 * C122 + C31781 * C508 + C48714 * C518) *
                C114 +
            (C31780 * C123 + C31778 * C136 + C31781 * C519 + C48714 * C538) *
                C48394) *
               C48331 * C5042 +
           ((C37633 + C37634) * C114 + (C37635 + C37636) * C48394) * C48331 *
               C48712) *
              C1235 -
          (((C37637 + C37638) * C48394 + (C37639 + C37640) * C114) * C48331 *
               C48712 +
           ((C37636 + C37635) * C48394 + (C37634 + C37633) * C114) * C48331 *
               C5042) *
              C1236 +
          (((C37640 + C37639) * C114 + (C37638 + C37637) * C48394) * C48331 *
               C5042 +
           ((C38497 + C38498) * C114 + (C38499 + C38500) * C48394) * C48331 *
               C48712) *
              C1237 -
          (((C38501 + C38502) * C48394 + (C38503 + C38504) * C114) * C48331 *
               C48712 +
           ((C38500 + C38499) * C48394 + (C38498 + C38497) * C114) * C48331 *
               C5042) *
              C1238 +
          (((C38504 + C38503) * C114 + (C38502 + C38501) * C48394) * C48331 *
               C5042 +
           ((C31780 * C6060 + C31778 * C6062 + C31781 * C23183 +
             C48714 * C23184) *
                C114 +
            (C31780 * C6063 + C31778 * C6066 + C31781 * C23185 +
             C48714 * C23186) *
                C48394) *
               C48331 * C48712) *
              C1239) *
         C48350) /
            (p * q * std::sqrt(p + q));
    d2ee[200] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C114 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48394) *
                        C48331 * C48582 * C48435 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48394 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C114) *
                        C48331 * C48582 * C48442 +
                    ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                      C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                         C114 +
                     (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                      C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                         C48394) *
                        C48331 * C48582 * C3060) *
                       C48355 +
                   (((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C114 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48394) *
                        C48331 * C48582 * C48442 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48394 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C114) *
                        C48331 * C48582 * C48435 -
                    ((C43023 * C1397 + C43020 * C1408 + C43022 * C1395 +
                      C43019 * C1407 + C43021 * C321 + C43018 * C336) *
                         C48394 +
                     (C43023 * C1381 + C43020 * C1396 + C43022 * C1380 +
                      C43019 * C1394 + C43021 * C306 + C43018 * C320) *
                         C114) *
                        C48331 * C48582 * C3060) *
                       C48363 +
                   (((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                      C43019 * C526 + C43023 * C513 + C43020 * C528) *
                         C114 +
                     (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                      C43019 * C542 + C43023 * C529 + C43020 * C543) *
                         C48394) *
                        C48331 * C48582 * C48435 -
                    ((C43023 * C1389 + C43020 * C1404 + C43022 * C1014 +
                      C43019 * C1021 + C43021 * C312 + C43018 * C332) *
                         C48394 +
                     (C43023 * C1377 + C43020 * C1388 + C43022 * C1006 +
                      C43019 * C1013 + C43021 * C302 + C43018 * C313) *
                         C114) *
                        C48331 * C48582 * C48442 +
                    ((C43021 * C307 + C43018 * C322 + C43022 * C1382 +
                      C43019 * C1398 + C43023 * C1383 + C43020 * C1400) *
                         C114 +
                     (C43021 * C323 + C43018 * C337 + C43022 * C1399 +
                      C43019 * C1409 + C43023 * C1401 + C43020 * C1410) *
                         C48394) *
                        C48331 * C48582 * C3060) *
                       C3063)) /
                 (p * q * std::sqrt(p + q));
    d2ee[201] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C824 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48663 -
                     (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                      C43019 * C520 + C43021 * C508 + C43018 * C518) *
                         C825 -
                     (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                      C43019 * C539 + C43021 * C519 + C43018 * C538) *
                         C48481) *
                        C48331 * C48582 * C48435 +
                    ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                      C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                         C825 -
                     ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                       C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                          C48663 +
                      (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                       C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                          C824) +
                     (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                      C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                         C48481) *
                        C48331 * C48582 * C48442 +
                    ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                      C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                         C824 +
                     (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                      C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                         C48663 -
                     (C43023 * C7660 + C43020 * C7662 + C43022 * C1379 +
                      C43019 * C1392 + C43021 * C1378 + C43018 * C1390) *
                         C825 -
                     (C43023 * C7663 + C43020 * C7666 + C43022 * C1393 +
                      C43019 * C1406 + C43021 * C1391 + C43018 * C1405) *
                         C48481) *
                        C48331 * C48582 * C3060) *
                       C2788 +
                   (((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                      C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                         C825 -
                     ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                       C43019 * C540 + C43021 * C125 + C43018 * C137) *
                          C48663 +
                      (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                       C43019 * C522 + C43021 * C116 + C43018 * C124) *
                          C824) +
                     (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                      C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                         C48481) *
                        C48331 * C48582 * C48435 +
                    ((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C824 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48663 -
                     (C43023 * C2571 + C43020 * C2575 + C43022 * C1376 +
                      C43019 * C1386 + C43021 * C1005 + C43018 * C1011) *
                         C825 -
                     (C43023 * C2576 + C43020 * C2580 + C43022 * C1387 +
                      C43019 * C1403 + C43021 * C1012 + C43018 * C1020) *
                         C48481) *
                        C48331 * C48582 * C48442 +
                    ((C43021 * C1380 + C43018 * C1394 + C43022 * C1381 +
                      C43019 * C1396 + C43023 * C7661 + C43020 * C7664) *
                         C825 -
                     ((C43023 * C1397 + C43020 * C1408 + C43022 * C1395 +
                       C43019 * C1407 + C43021 * C321 + C43018 * C336) *
                          C48663 +
                      (C43023 * C1381 + C43020 * C1396 + C43022 * C1380 +
                       C43019 * C1394 + C43021 * C306 + C43018 * C320) *
                          C824) +
                     (C43021 * C1395 + C43018 * C1407 + C43022 * C1397 +
                      C43019 * C1408 + C43023 * C7665 + C43020 * C7667) *
                         C48481) *
                        C48331 * C48582 * C3060) *
                       C48360)) /
                 (p * q * std::sqrt(p + q));
    d2ee[202] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C114 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48394) *
                        C48331 * C48582 * C48740 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48394 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C114) *
                        C48331 * C48582 * C48736 +
                    ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                      C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                         C114 +
                     (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                      C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                         C48394) *
                        C48331 * C48582 * C48726 -
                    ((C43023 * C6241 + C43020 * C6244 + C43022 * C1807 +
                      C43019 * C1812 + C43021 * C1251 + C43018 * C1261) *
                         C48394 +
                     (C43023 * C6238 + C43020 * C6240 + C43022 * C1803 +
                      C43019 * C1806 + C43021 * C1243 + C43018 * C1252) *
                         C114) *
                        C48331 * C48582 * C48704) *
                       C2788 +
                   (((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C114 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48394) *
                        C48331 * C48582 * C48736 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48394 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C114) *
                        C48331 * C48582 * C48740 -
                    ((C43023 * C1397 + C43020 * C1408 + C43022 * C1395 +
                      C43019 * C1407 + C43021 * C321 + C43018 * C336) *
                         C48394 +
                     (C43023 * C1381 + C43020 * C1396 + C43022 * C1380 +
                      C43019 * C1394 + C43021 * C306 + C43018 * C320) *
                         C114) *
                        C48331 * C48582 * C48726 +
                    ((C43021 * C1242 + C43018 * C1250 + C43022 * C1804 +
                      C43019 * C1808 + C43023 * C6239 + C43020 * C6242) *
                         C114 +
                     (C43021 * C1249 + C43018 * C1260 + C43022 * C1809 +
                      C43019 * C1813 + C43023 * C6243 + C43020 * C6245) *
                         C48394) *
                        C48331 * C48582 * C48704) *
                       C48360)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C114 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48394) *
                        C48331 * C48582 * C2680 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48394 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C114) *
                        C48331 * C48582 * C48439) *
                       C48739 +
                   (((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C114 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48394) *
                        C48331 * C48582 * C48439 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48394 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C114) *
                        C48331 * C48582 * C2680) *
                       C48732 +
                   (((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                      C43019 * C526 + C43023 * C513 + C43020 * C528) *
                         C114 +
                     (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                      C43019 * C542 + C43023 * C529 + C43020 * C543) *
                         C48394) *
                        C48331 * C48582 * C2680 -
                    ((C43023 * C1389 + C43020 * C1404 + C43022 * C1014 +
                      C43019 * C1021 + C43021 * C312 + C43018 * C332) *
                         C48394 +
                     (C43023 * C1377 + C43020 * C1388 + C43022 * C1006 +
                      C43019 * C1013 + C43021 * C302 + C43018 * C313) *
                         C114) *
                        C48331 * C48582 * C48439) *
                       C48719 +
                   (((C43021 * C308 + C43018 * C324 + C43022 * C1007 +
                      C43019 * C1015 + C43023 * C2306 + C43020 * C2307) *
                         C114 +
                     (C43021 * C325 + C43018 * C338 + C43022 * C1016 +
                      C43019 * C1022 + C43023 * C2308 + C43020 * C2309) *
                         C48394) *
                        C48331 * C48582 * C48439 -
                    ((C43023 * C533 + C43020 * C545 + C43022 * C531 +
                      C43019 * C544 + C43021 * C128 + C43018 * C139) *
                         C48394 +
                     (C43023 * C515 + C43020 * C532 + C43022 * C514 +
                      C43019 * C530 + C43021 * C118 + C43018 * C129) *
                         C114) *
                        C48331 * C48582 * C2680) *
                       C48698)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C505 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48734 -
                     (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                      C43019 * C520 + C43021 * C508 + C43018 * C518) *
                         C506 -
                     (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                      C43019 * C539 + C43021 * C519 + C43018 * C538) *
                         C48723 +
                     (C43021 * C509 + C43018 * C520 + C43022 * C2136 +
                      C43019 * C2142 + C43023 * C2137 + C43020 * C2144) *
                         C507 +
                     (C43021 * C521 + C43018 * C539 + C43022 * C2143 +
                      C43019 * C2154 + C43023 * C2145 + C43020 * C2155) *
                         C48697) *
                        C48331 * C48582 * C2680 +
                    ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                      C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                         C506 -
                     ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                       C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                          C48734 +
                      (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                       C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                          C505) +
                     (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                      C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                         C48723 -
                     (C43023 * C7174 + C43020 * C7176 + C43022 * C2570 +
                      C43019 * C2573 + C43021 * C1375 + C43018 * C1384) *
                         C507 -
                     (C43023 * C7177 + C43020 * C7180 + C43022 * C2574 +
                      C43019 * C2579 + C43021 * C1385 + C43018 * C1402) *
                         C48697) *
                        C48331 * C48582 * C48439) *
                       C2788 +
                   (((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                      C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                         C506 -
                     ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                       C43019 * C540 + C43021 * C125 + C43018 * C137) *
                          C48734 +
                      (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                       C43019 * C522 + C43021 * C116 + C43018 * C124) *
                          C505) +
                     (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                      C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                         C48723 -
                     (C43023 * C2139 + C43020 * C2148 + C43022 * C2138 +
                      C43019 * C2146 + C43021 * C511 + C43018 * C524) *
                         C507 -
                     (C43023 * C2149 + C43020 * C2157 + C43022 * C2147 +
                      C43019 * C2156 + C43021 * C525 + C43018 * C541) *
                         C48697) *
                        C48331 * C48582 * C2680 +
                    ((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C505 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48734 -
                     (C43023 * C2571 + C43020 * C2575 + C43022 * C1376 +
                      C43019 * C1386 + C43021 * C1005 + C43018 * C1011) *
                         C506 -
                     (C43023 * C2576 + C43020 * C2580 + C43022 * C1387 +
                      C43019 * C1403 + C43021 * C1012 + C43018 * C1020) *
                         C48723 +
                     (C43021 * C1376 + C43018 * C1386 + C43022 * C2571 +
                      C43019 * C2575 + C43023 * C7175 + C43020 * C7178) *
                         C507 +
                     (C43021 * C1387 + C43018 * C1403 + C43022 * C2576 +
                      C43019 * C2580 + C43023 * C7179 + C43020 * C7181) *
                         C48697) *
                        C48331 * C48582 * C48439) *
                       C48360)) /
                     (p * q * std::sqrt(p + q));
    d2ee[203] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C824 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48663 -
                     (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                      C43019 * C520 + C43021 * C508 + C43018 * C518) *
                         C825 -
                     (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                      C43019 * C539 + C43021 * C519 + C43018 * C538) *
                         C48481) *
                        C48331 * C48582 * C2680 +
                    ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                      C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                         C825 -
                     ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                       C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                          C48663 +
                      (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                       C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                          C824) +
                     (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                      C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                         C48481) *
                        C48331 * C48582 * C48439) *
                       C48355 +
                   (((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                      C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                         C825 -
                     ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                       C43019 * C540 + C43021 * C125 + C43018 * C137) *
                          C48663 +
                      (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                       C43019 * C522 + C43021 * C116 + C43018 * C124) *
                          C824) +
                     (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                      C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                         C48481) *
                        C48331 * C48582 * C2680 +
                    ((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C824 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48663 -
                     (C43023 * C2571 + C43020 * C2575 + C43022 * C1376 +
                      C43019 * C1386 + C43021 * C1005 + C43018 * C1011) *
                         C825 -
                     (C43023 * C2576 + C43020 * C2580 + C43022 * C1387 +
                      C43019 * C1403 + C43021 * C1012 + C43018 * C1020) *
                         C48481) *
                        C48331 * C48582 * C48439) *
                       C48363 +
                   (((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                      C43019 * C526 + C43023 * C513 + C43020 * C528) *
                         C824 +
                     (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                      C43019 * C542 + C43023 * C529 + C43020 * C543) *
                         C48663 -
                     (C43023 * C2140 + C43020 * C2150 + C43022 * C513 +
                      C43019 * C528 + C43021 * C512 + C43018 * C526) *
                         C825 -
                     (C43023 * C2151 + C43020 * C2158 + C43022 * C529 +
                      C43019 * C543 + C43021 * C527 + C43018 * C542) *
                         C48481) *
                        C48331 * C48582 * C2680 +
                    ((C43021 * C1006 + C43018 * C1013 + C43022 * C1377 +
                      C43019 * C1388 + C43023 * C2572 + C43020 * C2577) *
                         C825 -
                     ((C43023 * C1389 + C43020 * C1404 + C43022 * C1014 +
                       C43019 * C1021 + C43021 * C312 + C43018 * C332) *
                          C48663 +
                      (C43023 * C1377 + C43020 * C1388 + C43022 * C1006 +
                       C43019 * C1013 + C43021 * C302 + C43018 * C313) *
                          C824) +
                     (C43021 * C1014 + C43018 * C1021 + C43022 * C1389 +
                      C43019 * C1404 + C43023 * C2578 + C43020 * C2581) *
                         C48481) *
                        C48331 * C48582 * C48439) *
                       C3063)) /
                 (p * q * std::sqrt(p + q));
    d2ee[204] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C114 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48394) *
                        C48331 * C48582 * C2680 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48394 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C114) *
                        C48331 * C48582 * C48439) *
                       C48739 +
                   (((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C114 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48394) *
                        C48331 * C48582 * C48439 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48394 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C114) *
                        C48331 * C48582 * C2680) *
                       C48732 +
                   (((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                      C43019 * C526 + C43023 * C513 + C43020 * C528) *
                         C114 +
                     (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                      C43019 * C542 + C43023 * C529 + C43020 * C543) *
                         C48394) *
                        C48331 * C48582 * C2680 -
                    ((C43023 * C1389 + C43020 * C1404 + C43022 * C1014 +
                      C43019 * C1021 + C43021 * C312 + C43018 * C332) *
                         C48394 +
                     (C43023 * C1377 + C43020 * C1388 + C43022 * C1006 +
                      C43019 * C1013 + C43021 * C302 + C43018 * C313) *
                         C114) *
                        C48331 * C48582 * C48439) *
                       C48719 +
                   (((C43021 * C308 + C43018 * C324 + C43022 * C1007 +
                      C43019 * C1015 + C43023 * C2306 + C43020 * C2307) *
                         C114 +
                     (C43021 * C325 + C43018 * C338 + C43022 * C1016 +
                      C43019 * C1022 + C43023 * C2308 + C43020 * C2309) *
                         C48394) *
                        C48331 * C48582 * C48439 -
                    ((C43023 * C533 + C43020 * C545 + C43022 * C531 +
                      C43019 * C544 + C43021 * C128 + C43018 * C139) *
                         C48394 +
                     (C43023 * C515 + C43020 * C532 + C43022 * C514 +
                      C43019 * C530 + C43021 * C118 + C43018 * C129) *
                         C114) *
                        C48331 * C48582 * C2680) *
                       C48698)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C114 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48394) *
                        C48331 * C48582 * C48740 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48394 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C114) *
                        C48331 * C48582 * C48736 +
                    ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                      C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                         C114 +
                     (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                      C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                         C48394) *
                        C48331 * C48582 * C48726 -
                    ((C43023 * C6241 + C43020 * C6244 + C43022 * C1807 +
                      C43019 * C1812 + C43021 * C1251 + C43018 * C1261) *
                         C48394 +
                     (C43023 * C6238 + C43020 * C6240 + C43022 * C1803 +
                      C43019 * C1806 + C43021 * C1243 + C43018 * C1252) *
                         C114) *
                        C48331 * C48582 * C48704) *
                       C2788 +
                   (((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C114 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48394) *
                        C48331 * C48582 * C48736 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48394 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C114) *
                        C48331 * C48582 * C48740 -
                    ((C43023 * C1397 + C43020 * C1408 + C43022 * C1395 +
                      C43019 * C1407 + C43021 * C321 + C43018 * C336) *
                         C48394 +
                     (C43023 * C1381 + C43020 * C1396 + C43022 * C1380 +
                      C43019 * C1394 + C43021 * C306 + C43018 * C320) *
                         C114) *
                        C48331 * C48582 * C48726 +
                    ((C43021 * C1242 + C43018 * C1250 + C43022 * C1804 +
                      C43019 * C1808 + C43023 * C6239 + C43020 * C6242) *
                         C114 +
                     (C43021 * C1249 + C43018 * C1260 + C43022 * C1809 +
                      C43019 * C1813 + C43023 * C6243 + C43020 * C6245) *
                         C48394) *
                        C48331 * C48582 * C48704) *
                       C48360)) /
                     (p * q * std::sqrt(p + q));
    d2ee[205] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C3456 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C3454 -
                     (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                      C43019 * C520 + C43021 * C508 + C43018 * C518) *
                         C3457 -
                     (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                      C43019 * C539 + C43021 * C519 + C43018 * C538) *
                         C48481) *
                        C48331 * C48582 * C48435 +
                    ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                      C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                         C3457 -
                     ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                       C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                          C3454 +
                      (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                       C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                          C3456) +
                     (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                      C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                         C48481) *
                        C48331 * C48582 * C48442 +
                    ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                      C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                         C3456 +
                     (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                      C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                         C3454 -
                     (C43023 * C7660 + C43020 * C7662 + C43022 * C1379 +
                      C43019 * C1392 + C43021 * C1378 + C43018 * C1390) *
                         C3457 -
                     (C43023 * C7663 + C43020 * C7666 + C43022 * C1393 +
                      C43019 * C1406 + C43021 * C1391 + C43018 * C1405) *
                         C48481) *
                        C48331 * C48582 * C3060) *
                       C48648 +
                   (((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                      C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                         C3457 -
                     ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                       C43019 * C540 + C43021 * C125 + C43018 * C137) *
                          C3454 +
                      (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                       C43019 * C522 + C43021 * C116 + C43018 * C124) *
                          C3456) +
                     (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                      C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                         C48481) *
                        C48331 * C48582 * C48435 +
                    ((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C3456 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C3454 -
                     (C43023 * C2571 + C43020 * C2575 + C43022 * C1376 +
                      C43019 * C1386 + C43021 * C1005 + C43018 * C1011) *
                         C3457 -
                     (C43023 * C2576 + C43020 * C2580 + C43022 * C1387 +
                      C43019 * C1403 + C43021 * C1012 + C43018 * C1020) *
                         C48481) *
                        C48331 * C48582 * C48442 +
                    ((C43021 * C1380 + C43018 * C1394 + C43022 * C1381 +
                      C43019 * C1396 + C43023 * C7661 + C43020 * C7664) *
                         C3457 -
                     ((C43023 * C1397 + C43020 * C1408 + C43022 * C1395 +
                       C43019 * C1407 + C43021 * C321 + C43018 * C336) *
                          C3454 +
                      (C43023 * C1381 + C43020 * C1396 + C43022 * C1380 +
                       C43019 * C1394 + C43021 * C306 + C43018 * C320) *
                          C3456) +
                     (C43021 * C1395 + C43018 * C1407 + C43022 * C1397 +
                      C43019 * C1408 + C43023 * C7665 + C43020 * C7667) *
                         C48481) *
                        C48331 * C48582 * C3060) *
                       C48360)) /
                 (p * q * std::sqrt(p + q));
    d2ee[206] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C47163 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C48477 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C47155 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C48484 +
                    (C43021 * C509 + C43018 * C520 + C43022 * C2136 +
                     C43019 * C2142 + C43023 * C2137 + C43020 * C2144) *
                        C47169 +
                    (C43021 * C521 + C43018 * C539 + C43022 * C2143 +
                     C43019 * C2154 + C43023 * C2145 + C43020 * C2155) *
                        C4029) *
                       C48331 * C48582 * C48435 +
                   ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                     C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                        C47155 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48477 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C47163) +
                    (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                     C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                        C48484 -
                    (C43023 * C7174 + C43020 * C7176 + C43022 * C2570 +
                     C43019 * C2573 + C43021 * C1375 + C43018 * C1384) *
                        C47169 -
                    (C43023 * C7177 + C43020 * C7180 + C43022 * C2574 +
                     C43019 * C2579 + C43021 * C1385 + C43018 * C1402) *
                        C4029) *
                       C48331 * C48582 * C48442 +
                   ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                     C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                        C47163 +
                    (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                     C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                        C48477 -
                    (C43023 * C7660 + C43020 * C7662 + C43022 * C1379 +
                     C43019 * C1392 + C43021 * C1378 + C43018 * C1390) *
                        C47155 -
                    (C43023 * C7663 + C43020 * C7666 + C43022 * C1393 +
                     C43019 * C1406 + C43021 * C1391 + C43018 * C1405) *
                        C48484 +
                    (C43021 * C1379 + C43018 * C1392 + C43022 * C7660 +
                     C43019 * C7662 + C43023 * C23495 + C43020 * C23496) *
                        C47169 +
                    (C43021 * C1393 + C43018 * C1406 + C43022 * C7663 +
                     C43019 * C7666 + C43023 * C23497 + C43020 * C23498) *
                        C4029) *
                       C48331 * C48582 * C3060) *
                  C48350) /
                 (p * q * std::sqrt(p + q));
    d2ee[207] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C3456 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C3454 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C3457 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C48481) *
                       C48331 * C48582 * C48740 +
                   ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                     C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                        C3457 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C3454 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C3456) +
                    (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                     C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                        C48481) *
                       C48331 * C48582 * C48736 +
                   ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                     C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                        C3456 +
                    (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                     C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                        C3454 -
                    (C43023 * C7660 + C43020 * C7662 + C43022 * C1379 +
                     C43019 * C1392 + C43021 * C1378 + C43018 * C1390) *
                        C3457 -
                    (C43023 * C7663 + C43020 * C7666 + C43022 * C1393 +
                     C43019 * C1406 + C43021 * C1391 + C43018 * C1405) *
                        C48481) *
                       C48331 * C48582 * C48726 +
                   ((C43021 * C1803 + C43018 * C1806 + C43022 * C6238 +
                     C43019 * C6240 + C43023 * C23841 + C43020 * C23842) *
                        C3457 -
                    ((C43023 * C6241 + C43020 * C6244 + C43022 * C1807 +
                      C43019 * C1812 + C43021 * C1251 + C43018 * C1261) *
                         C3454 +
                     (C43023 * C6238 + C43020 * C6240 + C43022 * C1803 +
                      C43019 * C1806 + C43021 * C1243 + C43018 * C1252) *
                         C3456) +
                    (C43021 * C1807 + C43018 * C1812 + C43022 * C6241 +
                     C43019 * C6244 + C43023 * C23843 + C43020 * C23844) *
                        C48481) *
                       C48331 * C48582 * C48704) *
                  C48350) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C3456 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C3454 -
                     (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                      C43019 * C520 + C43021 * C508 + C43018 * C518) *
                         C3457 -
                     (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                      C43019 * C539 + C43021 * C519 + C43018 * C538) *
                         C48481) *
                        C48331 * C48582 * C2680 +
                    ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                      C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                         C3457 -
                     ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                       C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                          C3454 +
                      (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                       C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                          C3456) +
                     (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                      C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                         C48481) *
                        C48331 * C48582 * C48439) *
                       C48730 +
                   (((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                      C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                         C3457 -
                     ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                       C43019 * C540 + C43021 * C125 + C43018 * C137) *
                          C3454 +
                      (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                       C43019 * C522 + C43021 * C116 + C43018 * C124) *
                          C3456) +
                     (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                      C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                         C48481) *
                        C48331 * C48582 * C2680 +
                    ((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C3456 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C3454 -
                     (C43023 * C2571 + C43020 * C2575 + C43022 * C1376 +
                      C43019 * C1386 + C43021 * C1005 + C43018 * C1011) *
                         C3457 -
                     (C43023 * C2576 + C43020 * C2580 + C43022 * C1387 +
                      C43019 * C1403 + C43021 * C1012 + C43018 * C1020) *
                         C48481) *
                        C48331 * C48582 * C48439) *
                       C48717 +
                   (((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                      C43019 * C526 + C43023 * C513 + C43020 * C528) *
                         C3456 +
                     (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                      C43019 * C542 + C43023 * C529 + C43020 * C543) *
                         C3454 -
                     (C43023 * C2140 + C43020 * C2150 + C43022 * C513 +
                      C43019 * C528 + C43021 * C512 + C43018 * C526) *
                         C3457 -
                     (C43023 * C2151 + C43020 * C2158 + C43022 * C529 +
                      C43019 * C543 + C43021 * C527 + C43018 * C542) *
                         C48481) *
                        C48331 * C48582 * C2680 +
                    ((C43021 * C1006 + C43018 * C1013 + C43022 * C1377 +
                      C43019 * C1388 + C43023 * C2572 + C43020 * C2577) *
                         C3457 -
                     ((C43023 * C1389 + C43020 * C1404 + C43022 * C1014 +
                       C43019 * C1021 + C43021 * C312 + C43018 * C332) *
                          C3454 +
                      (C43023 * C1377 + C43020 * C1388 + C43022 * C1006 +
                       C43019 * C1013 + C43021 * C302 + C43018 * C313) *
                          C3456) +
                     (C43021 * C1014 + C43018 * C1021 + C43022 * C1389 +
                      C43019 * C1404 + C43023 * C2578 + C43020 * C2581) *
                         C48481) *
                        C48331 * C48582 * C48439) *
                       C48688)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C3744 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C48741 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C3745 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C48738 +
                    (C43021 * C509 + C43018 * C520 + C43022 * C2136 +
                     C43019 * C2142 + C43023 * C2137 + C43020 * C2144) *
                        C3746 +
                    (C43021 * C521 + C43018 * C539 + C43022 * C2143 +
                     C43019 * C2154 + C43023 * C2145 + C43020 * C2155) *
                        C48729 -
                    (C43023 * C12981 + C43020 * C12983 + C43022 * C2137 +
                     C43019 * C2144 + C43021 * C2136 + C43018 * C2142) *
                        C3747 -
                    (C43023 * C12984 + C43020 * C12987 + C43022 * C2145 +
                     C43019 * C2155 + C43021 * C2143 + C43018 * C2154) *
                        C48710) *
                       C48331 * C48582 * C2680 +
                   ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                     C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                        C3745 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48741 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C3744) +
                    (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                     C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                        C48738 -
                    (C43023 * C7174 + C43020 * C7176 + C43022 * C2570 +
                     C43019 * C2573 + C43021 * C1375 + C43018 * C1384) *
                        C3746 -
                    (C43023 * C7177 + C43020 * C7180 + C43022 * C2574 +
                     C43019 * C2579 + C43021 * C1385 + C43018 * C1402) *
                        C48729 +
                    (C43021 * C2570 + C43018 * C2573 + C43022 * C7174 +
                     C43019 * C7176 + C43023 * C28262 + C43020 * C28263) *
                        C3747 +
                    (C43021 * C2574 + C43018 * C2579 + C43022 * C7177 +
                     C43019 * C7180 + C43023 * C28264 + C43020 * C28265) *
                        C48710) *
                       C48331 * C48582 * C48439) *
                  C48350) /
                     (p * q * std::sqrt(p + q));
    d2ee[208] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C47163 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48477 -
                     (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                      C43019 * C520 + C43021 * C508 + C43018 * C518) *
                         C47155 -
                     (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                      C43019 * C539 + C43021 * C519 + C43018 * C538) *
                         C48484 +
                     (C43021 * C509 + C43018 * C520 + C43022 * C2136 +
                      C43019 * C2142 + C43023 * C2137 + C43020 * C2144) *
                         C47169 +
                     (C43021 * C521 + C43018 * C539 + C43022 * C2143 +
                      C43019 * C2154 + C43023 * C2145 + C43020 * C2155) *
                         C4029) *
                        C48331 * C48582 * C2680 +
                    ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                      C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                         C47155 -
                     ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                       C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                          C48477 +
                      (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                       C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                          C47163) +
                     (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                      C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                         C48484 -
                     (C43023 * C7174 + C43020 * C7176 + C43022 * C2570 +
                      C43019 * C2573 + C43021 * C1375 + C43018 * C1384) *
                         C47169 -
                     (C43023 * C7177 + C43020 * C7180 + C43022 * C2574 +
                      C43019 * C2579 + C43021 * C1385 + C43018 * C1402) *
                         C4029) *
                        C48331 * C48582 * C48439) *
                       C48648 +
                   (((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                      C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                         C47155 -
                     ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                       C43019 * C540 + C43021 * C125 + C43018 * C137) *
                          C48477 +
                      (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                       C43019 * C522 + C43021 * C116 + C43018 * C124) *
                          C47163) +
                     (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                      C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                         C48484 -
                     (C43023 * C2139 + C43020 * C2148 + C43022 * C2138 +
                      C43019 * C2146 + C43021 * C511 + C43018 * C524) *
                         C47169 -
                     (C43023 * C2149 + C43020 * C2157 + C43022 * C2147 +
                      C43019 * C2156 + C43021 * C525 + C43018 * C541) *
                         C4029) *
                        C48331 * C48582 * C2680 +
                    ((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C47163 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48477 -
                     (C43023 * C2571 + C43020 * C2575 + C43022 * C1376 +
                      C43019 * C1386 + C43021 * C1005 + C43018 * C1011) *
                         C47155 -
                     (C43023 * C2576 + C43020 * C2580 + C43022 * C1387 +
                      C43019 * C1403 + C43021 * C1012 + C43018 * C1020) *
                         C48484 +
                     (C43021 * C1376 + C43018 * C1386 + C43022 * C2571 +
                      C43019 * C2575 + C43023 * C7175 + C43020 * C7178) *
                         C47169 +
                     (C43021 * C1387 + C43018 * C1403 + C43022 * C2576 +
                      C43019 * C2580 + C43023 * C7179 + C43020 * C7181) *
                         C4029) *
                        C48331 * C48582 * C48439) *
                       C48360)) /
                 (p * q * std::sqrt(p + q));
    d2ee[209] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C3456 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C3454 -
                     (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                      C43019 * C520 + C43021 * C508 + C43018 * C518) *
                         C3457 -
                     (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                      C43019 * C539 + C43021 * C519 + C43018 * C538) *
                         C48481) *
                        C48331 * C48582 * C2680 +
                    ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                      C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                         C3457 -
                     ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                       C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                          C3454 +
                      (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                       C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                          C3456) +
                     (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                      C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                         C48481) *
                        C48331 * C48582 * C48439) *
                       C48730 +
                   (((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                      C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                         C3457 -
                     ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                       C43019 * C540 + C43021 * C125 + C43018 * C137) *
                          C3454 +
                      (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                       C43019 * C522 + C43021 * C116 + C43018 * C124) *
                          C3456) +
                     (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                      C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                         C48481) *
                        C48331 * C48582 * C2680 +
                    ((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C3456 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C3454 -
                     (C43023 * C2571 + C43020 * C2575 + C43022 * C1376 +
                      C43019 * C1386 + C43021 * C1005 + C43018 * C1011) *
                         C3457 -
                     (C43023 * C2576 + C43020 * C2580 + C43022 * C1387 +
                      C43019 * C1403 + C43021 * C1012 + C43018 * C1020) *
                         C48481) *
                        C48331 * C48582 * C48439) *
                       C48717 +
                   (((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                      C43019 * C526 + C43023 * C513 + C43020 * C528) *
                         C3456 +
                     (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                      C43019 * C542 + C43023 * C529 + C43020 * C543) *
                         C3454 -
                     (C43023 * C2140 + C43020 * C2150 + C43022 * C513 +
                      C43019 * C528 + C43021 * C512 + C43018 * C526) *
                         C3457 -
                     (C43023 * C2151 + C43020 * C2158 + C43022 * C529 +
                      C43019 * C543 + C43021 * C527 + C43018 * C542) *
                         C48481) *
                        C48331 * C48582 * C2680 +
                    ((C43021 * C1006 + C43018 * C1013 + C43022 * C1377 +
                      C43019 * C1388 + C43023 * C2572 + C43020 * C2577) *
                         C3457 -
                     ((C43023 * C1389 + C43020 * C1404 + C43022 * C1014 +
                       C43019 * C1021 + C43021 * C312 + C43018 * C332) *
                          C3454 +
                      (C43023 * C1377 + C43020 * C1388 + C43022 * C1006 +
                       C43019 * C1013 + C43021 * C302 + C43018 * C313) *
                          C3456) +
                     (C43021 * C1014 + C43018 * C1021 + C43022 * C1389 +
                      C43019 * C1404 + C43023 * C2578 + C43020 * C2581) *
                         C48481) *
                        C48331 * C48582 * C48439) *
                       C48688)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C3456 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C3454 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C3457 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C48481) *
                       C48331 * C48582 * C48740 +
                   ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                     C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                        C3457 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C3454 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C3456) +
                    (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                     C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                        C48481) *
                       C48331 * C48582 * C48736 +
                   ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                     C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                        C3456 +
                    (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                     C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                        C3454 -
                    (C43023 * C7660 + C43020 * C7662 + C43022 * C1379 +
                     C43019 * C1392 + C43021 * C1378 + C43018 * C1390) *
                        C3457 -
                    (C43023 * C7663 + C43020 * C7666 + C43022 * C1393 +
                     C43019 * C1406 + C43021 * C1391 + C43018 * C1405) *
                        C48481) *
                       C48331 * C48582 * C48726 +
                   ((C43021 * C1803 + C43018 * C1806 + C43022 * C6238 +
                     C43019 * C6240 + C43023 * C23841 + C43020 * C23842) *
                        C3457 -
                    ((C43023 * C6241 + C43020 * C6244 + C43022 * C1807 +
                      C43019 * C1812 + C43021 * C1251 + C43018 * C1261) *
                         C3454 +
                     (C43023 * C6238 + C43020 * C6240 + C43022 * C1803 +
                      C43019 * C1806 + C43021 * C1243 + C43018 * C1252) *
                         C3456) +
                    (C43021 * C1807 + C43018 * C1812 + C43022 * C6241 +
                     C43019 * C6244 + C43023 * C23843 + C43020 * C23844) *
                        C48481) *
                       C48331 * C48582 * C48704) *
                  C48350) /
                     (p * q * std::sqrt(p + q));
    d2ee[210] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C114 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48394) *
                        C48331 * C48582 * C1509 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48394 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C114) *
                        C48331 * C48582 * C1510 +
                    ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                      C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                         C114 +
                     (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                      C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                         C48394) *
                        C48331 * C48582 * C1511 -
                    ((C43023 * C6241 + C43020 * C6244 + C43022 * C1807 +
                      C43019 * C1812 + C43021 * C1251 + C43018 * C1261) *
                         C48394 +
                     (C43023 * C6238 + C43020 * C6240 + C43022 * C1803 +
                      C43019 * C1806 + C43021 * C1243 + C43018 * C1252) *
                         C114) *
                        C48331 * C48582 * C48704) *
                       C48648 +
                   (((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C114 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48394) *
                        C48331 * C48582 * C1510 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48394 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C114) *
                        C48331 * C48582 * C1509 -
                    ((C43023 * C1397 + C43020 * C1408 + C43022 * C1395 +
                      C43019 * C1407 + C43021 * C321 + C43018 * C336) *
                         C48394 +
                     (C43023 * C1381 + C43020 * C1396 + C43022 * C1380 +
                      C43019 * C1394 + C43021 * C306 + C43018 * C320) *
                         C114) *
                        C48331 * C48582 * C1511 +
                    ((C43021 * C1242 + C43018 * C1250 + C43022 * C1804 +
                      C43019 * C1808 + C43023 * C6239 + C43020 * C6242) *
                         C114 +
                     (C43021 * C1249 + C43018 * C1260 + C43022 * C1809 +
                      C43019 * C1813 + C43023 * C6243 + C43020 * C6245) *
                         C48394) *
                        C48331 * C48582 * C48704) *
                       C48360)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C114 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48394) *
                        C48331 * C48582 * C48662 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48394 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C114) *
                        C48331 * C48582 * C48439) *
                       C707 +
                   (((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C114 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48394) *
                        C48331 * C48582 * C48439 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48394 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C114) *
                        C48331 * C48582 * C48662) *
                       C708 +
                   (((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                      C43019 * C526 + C43023 * C513 + C43020 * C528) *
                         C114 +
                     (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                      C43019 * C542 + C43023 * C529 + C43020 * C543) *
                         C48394) *
                        C48331 * C48582 * C48662 -
                    ((C43023 * C1389 + C43020 * C1404 + C43022 * C1014 +
                      C43019 * C1021 + C43021 * C312 + C43018 * C332) *
                         C48394 +
                     (C43023 * C1377 + C43020 * C1388 + C43022 * C1006 +
                      C43019 * C1013 + C43021 * C302 + C43018 * C313) *
                         C114) *
                        C48331 * C48582 * C48439) *
                       C709 +
                   (((C43021 * C308 + C43018 * C324 + C43022 * C1007 +
                      C43019 * C1015 + C43023 * C2306 + C43020 * C2307) *
                         C114 +
                     (C43021 * C325 + C43018 * C338 + C43022 * C1016 +
                      C43019 * C1022 + C43023 * C2308 + C43020 * C2309) *
                         C48394) *
                        C48331 * C48582 * C48439 -
                    ((C43023 * C533 + C43020 * C545 + C43022 * C531 +
                      C43019 * C544 + C43021 * C128 + C43018 * C139) *
                         C48394 +
                     (C43023 * C515 + C43020 * C532 + C43022 * C514 +
                      C43019 * C530 + C43021 * C118 + C43018 * C129) *
                         C114) *
                        C48331 * C48582 * C48662) *
                       C48698)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C1928 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C1925 -
                     (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                      C43019 * C520 + C43021 * C508 + C43018 * C518) *
                         C1929 -
                     (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                      C43019 * C539 + C43021 * C519 + C43018 * C538) *
                         C1926 +
                     (C43021 * C509 + C43018 * C520 + C43022 * C2136 +
                      C43019 * C2142 + C43023 * C2137 + C43020 * C2144) *
                         C1930 +
                     (C43021 * C521 + C43018 * C539 + C43022 * C2143 +
                      C43019 * C2154 + C43023 * C2145 + C43020 * C2155) *
                         C48697) *
                        C48331 * C48582 * C48662 +
                    ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                      C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                         C1929 -
                     ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                       C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                          C1925 +
                      (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                       C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                          C1928) +
                     (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                      C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                         C1926 -
                     (C43023 * C7174 + C43020 * C7176 + C43022 * C2570 +
                      C43019 * C2573 + C43021 * C1375 + C43018 * C1384) *
                         C1930 -
                     (C43023 * C7177 + C43020 * C7180 + C43022 * C2574 +
                      C43019 * C2579 + C43021 * C1385 + C43018 * C1402) *
                         C48697) *
                        C48331 * C48582 * C48439) *
                       C48648 +
                   (((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                      C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                         C1929 -
                     ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                       C43019 * C540 + C43021 * C125 + C43018 * C137) *
                          C1925 +
                      (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                       C43019 * C522 + C43021 * C116 + C43018 * C124) *
                          C1928) +
                     (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                      C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                         C1926 -
                     (C43023 * C2139 + C43020 * C2148 + C43022 * C2138 +
                      C43019 * C2146 + C43021 * C511 + C43018 * C524) *
                         C1930 -
                     (C43023 * C2149 + C43020 * C2157 + C43022 * C2147 +
                      C43019 * C2156 + C43021 * C525 + C43018 * C541) *
                         C48697) *
                        C48331 * C48582 * C48662 +
                    ((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C1928 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C1925 -
                     (C43023 * C2571 + C43020 * C2575 + C43022 * C1376 +
                      C43019 * C1386 + C43021 * C1005 + C43018 * C1011) *
                         C1929 -
                     (C43023 * C2576 + C43020 * C2580 + C43022 * C1387 +
                      C43019 * C1403 + C43021 * C1012 + C43018 * C1020) *
                         C1926 +
                     (C43021 * C1376 + C43018 * C1386 + C43022 * C2571 +
                      C43019 * C2575 + C43023 * C7175 + C43020 * C7178) *
                         C1930 +
                     (C43021 * C1387 + C43018 * C1403 + C43022 * C2576 +
                      C43019 * C2580 + C43023 * C7179 + C43020 * C7181) *
                         C48697) *
                        C48331 * C48582 * C48439) *
                       C48360)) /
                     (p * q * std::sqrt(p + q));
    d2ee[211] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C824 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C48663 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C825 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C48481) *
                       C48331 * C48582 * C1509 +
                   ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                     C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                        C825 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48663 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C824) +
                    (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                     C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                        C48481) *
                       C48331 * C48582 * C1510 +
                   ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                     C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                        C824 +
                    (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                     C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                        C48663 -
                    (C43023 * C7660 + C43020 * C7662 + C43022 * C1379 +
                     C43019 * C1392 + C43021 * C1378 + C43018 * C1390) *
                        C825 -
                    (C43023 * C7663 + C43020 * C7666 + C43022 * C1393 +
                     C43019 * C1406 + C43021 * C1391 + C43018 * C1405) *
                        C48481) *
                       C48331 * C48582 * C1511 +
                   ((C43021 * C1803 + C43018 * C1806 + C43022 * C6238 +
                     C43019 * C6240 + C43023 * C23841 + C43020 * C23842) *
                        C825 -
                    ((C43023 * C6241 + C43020 * C6244 + C43022 * C1807 +
                      C43019 * C1812 + C43021 * C1251 + C43018 * C1261) *
                         C48663 +
                     (C43023 * C6238 + C43020 * C6240 + C43022 * C1803 +
                      C43019 * C1806 + C43021 * C1243 + C43018 * C1252) *
                         C824) +
                    (C43021 * C1807 + C43018 * C1812 + C43022 * C6241 +
                     C43019 * C6244 + C43023 * C23843 + C43020 * C23844) *
                        C48481) *
                       C48331 * C48582 * C48704) *
                  C48350) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C824 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48663 -
                     (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                      C43019 * C520 + C43021 * C508 + C43018 * C518) *
                         C825 -
                     (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                      C43019 * C539 + C43021 * C519 + C43018 * C538) *
                         C48481) *
                        C48331 * C48582 * C48662 +
                    ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                      C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                         C825 -
                     ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                       C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                          C48663 +
                      (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                       C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                          C824) +
                     (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                      C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                         C48481) *
                        C48331 * C48582 * C48439) *
                       C299 +
                   (((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                      C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                         C825 -
                     ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                       C43019 * C540 + C43021 * C125 + C43018 * C137) *
                          C48663 +
                      (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                       C43019 * C522 + C43021 * C116 + C43018 * C124) *
                          C824) +
                     (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                      C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                         C48481) *
                        C48331 * C48582 * C48662 +
                    ((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C824 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48663 -
                     (C43023 * C2571 + C43020 * C2575 + C43022 * C1376 +
                      C43019 * C1386 + C43021 * C1005 + C43018 * C1011) *
                         C825 -
                     (C43023 * C2576 + C43020 * C2580 + C43022 * C1387 +
                      C43019 * C1403 + C43021 * C1012 + C43018 * C1020) *
                         C48481) *
                        C48331 * C48582 * C48439) *
                       C300 +
                   (((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                      C43019 * C526 + C43023 * C513 + C43020 * C528) *
                         C824 +
                     (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                      C43019 * C542 + C43023 * C529 + C43020 * C543) *
                         C48663 -
                     (C43023 * C2140 + C43020 * C2150 + C43022 * C513 +
                      C43019 * C528 + C43021 * C512 + C43018 * C526) *
                         C825 -
                     (C43023 * C2151 + C43020 * C2158 + C43022 * C529 +
                      C43019 * C543 + C43021 * C527 + C43018 * C542) *
                         C48481) *
                        C48331 * C48582 * C48662 +
                    ((C43021 * C1006 + C43018 * C1013 + C43022 * C1377 +
                      C43019 * C1388 + C43023 * C2572 + C43020 * C2577) *
                         C825 -
                     ((C43023 * C1389 + C43020 * C1404 + C43022 * C1014 +
                       C43019 * C1021 + C43021 * C312 + C43018 * C332) *
                          C48663 +
                      (C43023 * C1377 + C43020 * C1388 + C43022 * C1006 +
                       C43019 * C1013 + C43021 * C302 + C43018 * C313) *
                          C824) +
                     (C43021 * C1014 + C43018 * C1021 + C43022 * C1389 +
                      C43019 * C1404 + C43023 * C2578 + C43020 * C2581) *
                         C48481) *
                        C48331 * C48582 * C48439) *
                       C48688)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C2436 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C2432 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C2437 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C2433 +
                    (C43021 * C509 + C43018 * C520 + C43022 * C2136 +
                     C43019 * C2142 + C43023 * C2137 + C43020 * C2144) *
                        C2438 +
                    (C43021 * C521 + C43018 * C539 + C43022 * C2143 +
                     C43019 * C2154 + C43023 * C2145 + C43020 * C2155) *
                        C2434 -
                    (C43023 * C12981 + C43020 * C12983 + C43022 * C2137 +
                     C43019 * C2144 + C43021 * C2136 + C43018 * C2142) *
                        C2439 -
                    (C43023 * C12984 + C43020 * C12987 + C43022 * C2145 +
                     C43019 * C2155 + C43021 * C2143 + C43018 * C2154) *
                        C48710) *
                       C48331 * C48582 * C48662 +
                   ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                     C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                        C2437 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C2432 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C2436) +
                    (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                     C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                        C2433 -
                    (C43023 * C7174 + C43020 * C7176 + C43022 * C2570 +
                     C43019 * C2573 + C43021 * C1375 + C43018 * C1384) *
                        C2438 -
                    (C43023 * C7177 + C43020 * C7180 + C43022 * C2574 +
                     C43019 * C2579 + C43021 * C1385 + C43018 * C1402) *
                        C2434 +
                    (C43021 * C2570 + C43018 * C2573 + C43022 * C7174 +
                     C43019 * C7176 + C43023 * C28262 + C43020 * C28263) *
                        C2439 +
                    (C43021 * C2574 + C43018 * C2579 + C43022 * C7177 +
                     C43019 * C7180 + C43023 * C28264 + C43020 * C28265) *
                        C48710) *
                       C48331 * C48582 * C48439) *
                  C48350) /
                     (p * q * std::sqrt(p + q));
    d2ee[212] += (0.5 * std::pow(Pi, 2.5) *
                      (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                         C43019 * C518 + C43023 * C509 + C43020 * C520) *
                            C114 +
                        (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                         C43019 * C538 + C43023 * C521 + C43020 * C539) *
                            C48394) *
                           C48331 * C48582 * C48377 * C108 -
                       ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                         C43019 * C540 + C43021 * C125 + C43018 * C137) *
                            C48394 +
                        (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                         C43019 * C522 + C43021 * C116 + C43018 * C124) *
                            C114) *
                           C48331 * C48582 * C48377 * C109 +
                       ((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                         C43019 * C526 + C43023 * C513 + C43020 * C528) *
                            C114 +
                        (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                         C43019 * C542 + C43023 * C529 + C43020 * C543) *
                            C48394) *
                           C48331 * C48582 * C48377 * C110 -
                       ((C43023 * C533 + C43020 * C545 + C43022 * C531 +
                         C43019 * C544 + C43021 * C128 + C43018 * C139) *
                            C48394 +
                        (C43023 * C515 + C43020 * C532 + C43022 * C514 +
                         C43019 * C530 + C43021 * C118 + C43018 * C129) *
                            C114) *
                           C48331 * C48582 * C48377 * C111 +
                       ((C43021 * C119 + C43018 * C130 + C43022 * C516 +
                         C43019 * C534 + C43023 * C517 + C43020 * C536) *
                            C114 +
                        (C43021 * C131 + C43018 * C140 + C43022 * C535 +
                         C43019 * C546 + C43023 * C537 + C43020 * C547) *
                            C48394) *
                           C48331 * C48582 * C48377 * C112) +
                  0.5 * std::pow(Pi, 2.5) *
                      ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                          C43019 * C518 + C43023 * C509 + C43020 * C520) *
                             C114 +
                         (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                          C43019 * C538 + C43023 * C521 + C43020 * C539) *
                             C48394) *
                            C48331 * C48582 * C48733 -
                        ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                          C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                             C48394 +
                         (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                          C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                             C114) *
                            C48331 * C48582 * C48721 +
                        ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                          C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                             C114 +
                         (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                          C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                             C48394) *
                            C48331 * C48582 * C48694) *
                           C299 +
                       (((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                          C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                             C114 +
                         (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                          C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                             C48394) *
                            C48331 * C48582 * C48721 -
                        ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                          C43019 * C540 + C43021 * C125 + C43018 * C137) *
                             C48394 +
                         (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                          C43019 * C522 + C43021 * C116 + C43018 * C124) *
                             C114) *
                            C48331 * C48582 * C48733 -
                        ((C43023 * C1397 + C43020 * C1408 + C43022 * C1395 +
                          C43019 * C1407 + C43021 * C321 + C43018 * C336) *
                             C48394 +
                         (C43023 * C1381 + C43020 * C1396 + C43022 * C1380 +
                          C43019 * C1394 + C43021 * C306 + C43018 * C320) *
                             C114) *
                            C48331 * C48582 * C48694) *
                           C300 +
                       (((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                          C43019 * C526 + C43023 * C513 + C43020 * C528) *
                             C114 +
                         (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                          C43019 * C542 + C43023 * C529 + C43020 * C543) *
                             C48394) *
                            C48331 * C48582 * C48733 -
                        ((C43023 * C1389 + C43020 * C1404 + C43022 * C1014 +
                          C43019 * C1021 + C43021 * C312 + C43018 * C332) *
                             C48394 +
                         (C43023 * C1377 + C43020 * C1388 + C43022 * C1006 +
                          C43019 * C1013 + C43021 * C302 + C43018 * C313) *
                             C114) *
                            C48331 * C48582 * C48721 +
                        ((C43021 * C307 + C43018 * C322 + C43022 * C1382 +
                          C43019 * C1398 + C43023 * C1383 + C43020 * C1400) *
                             C114 +
                         (C43021 * C323 + C43018 * C337 + C43022 * C1399 +
                          C43019 * C1409 + C43023 * C1401 + C43020 * C1410) *
                             C48394) *
                            C48331 * C48582 * C48694) *
                           C48688)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C505 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C48734 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C506 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C48723 +
                    (C43021 * C509 + C43018 * C520 + C43022 * C2136 +
                     C43019 * C2142 + C43023 * C2137 + C43020 * C2144) *
                        C507 +
                    (C43021 * C521 + C43018 * C539 + C43022 * C2143 +
                     C43019 * C2154 + C43023 * C2145 + C43020 * C2155) *
                        C48697) *
                       C48331 * C48582 * C48377 * C299 +
                   ((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                     C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                        C506 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48734 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C505) +
                    (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                     C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                        C48723 -
                    (C43023 * C2139 + C43020 * C2148 + C43022 * C2138 +
                     C43019 * C2146 + C43021 * C511 + C43018 * C524) *
                        C507 -
                    (C43023 * C2149 + C43020 * C2157 + C43022 * C2147 +
                     C43019 * C2156 + C43021 * C525 + C43018 * C541) *
                        C48697) *
                       C48331 * C48582 * C48377 * C300 +
                   ((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                     C43019 * C526 + C43023 * C513 + C43020 * C528) *
                        C505 +
                    (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                     C43019 * C542 + C43023 * C529 + C43020 * C543) *
                        C48734 -
                    (C43023 * C2140 + C43020 * C2150 + C43022 * C513 +
                     C43019 * C528 + C43021 * C512 + C43018 * C526) *
                        C506 -
                    (C43023 * C2151 + C43020 * C2158 + C43022 * C529 +
                     C43019 * C543 + C43021 * C527 + C43018 * C542) *
                        C48723 +
                    (C43021 * C513 + C43018 * C528 + C43022 * C2140 +
                     C43019 * C2150 + C43023 * C2141 + C43020 * C2152) *
                        C507 +
                    (C43021 * C529 + C43018 * C543 + C43022 * C2151 +
                     C43019 * C2158 + C43023 * C2153 + C43020 * C2159) *
                        C48697) *
                       C48331 * C48582 * C48377 * C48688)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C114 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48394) *
                        C48331 * C48582 * C1167 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48394 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C114) *
                        C48331 * C48582 * C1168 +
                    ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                      C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                         C114 +
                     (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                      C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                         C48394) *
                        C48331 * C48582 * C48694) *
                       C48730 +
                   (((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C114 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48394) *
                        C48331 * C48582 * C1168 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48394 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C114) *
                        C48331 * C48582 * C1167 -
                    ((C43023 * C1397 + C43020 * C1408 + C43022 * C1395 +
                      C43019 * C1407 + C43021 * C321 + C43018 * C336) *
                         C48394 +
                     (C43023 * C1381 + C43020 * C1396 + C43022 * C1380 +
                      C43019 * C1394 + C43021 * C306 + C43018 * C320) *
                         C114) *
                        C48331 * C48582 * C48694) *
                       C48717 +
                   (((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                      C43019 * C526 + C43023 * C513 + C43020 * C528) *
                         C114 +
                     (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                      C43019 * C542 + C43023 * C529 + C43020 * C543) *
                         C48394) *
                        C48331 * C48582 * C1167 -
                    ((C43023 * C1389 + C43020 * C1404 + C43022 * C1014 +
                      C43019 * C1021 + C43021 * C312 + C43018 * C332) *
                         C48394 +
                     (C43023 * C1377 + C43020 * C1388 + C43022 * C1006 +
                      C43019 * C1013 + C43021 * C302 + C43018 * C313) *
                         C114) *
                        C48331 * C48582 * C1168 +
                    ((C43021 * C307 + C43018 * C322 + C43022 * C1382 +
                      C43019 * C1398 + C43023 * C1383 + C43020 * C1400) *
                         C114 +
                     (C43021 * C323 + C43018 * C337 + C43022 * C1399 +
                      C43019 * C1409 + C43023 * C1401 + C43020 * C1410) *
                         C48394) *
                        C48331 * C48582 * C48694) *
                       C48688)) /
                     (p * q * std::sqrt(p + q)) +
                 (0.5 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C114 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C48394) *
                       C48331 * C48582 * C1235 -
                   ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                     C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                        C48394 +
                    (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                     C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                        C114) *
                       C48331 * C48582 * C1236 +
                   ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                     C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                        C114 +
                    (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                     C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                        C48394) *
                       C48331 * C48582 * C1237 -
                   ((C43023 * C6241 + C43020 * C6244 + C43022 * C1807 +
                     C43019 * C1812 + C43021 * C1251 + C43018 * C1261) *
                        C48394 +
                    (C43023 * C6238 + C43020 * C6240 + C43022 * C1803 +
                     C43019 * C1806 + C43021 * C1243 + C43018 * C1252) *
                        C114) *
                       C48331 * C48582 * C1238 +
                   ((C43021 * C1244 + C43018 * C1253 + C43022 * C6764 +
                     C43019 * C6766 + C43023 * C22813 + C43020 * C22814) *
                        C114 +
                    (C43021 * C1254 + C43018 * C1262 + C43022 * C6767 +
                     C43019 * C6770 + C43023 * C22815 + C43020 * C22816) *
                        C48394) *
                       C48331 * C48582 * C1239) *
                  C48350) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C505 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C48734 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C506 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C48723 +
                    (C43021 * C509 + C43018 * C520 + C43022 * C2136 +
                     C43019 * C2142 + C43023 * C2137 + C43020 * C2144) *
                        C507 +
                    (C43021 * C521 + C43018 * C539 + C43022 * C2143 +
                     C43019 * C2154 + C43023 * C2145 + C43020 * C2155) *
                        C48697) *
                       C48331 * C48582 * C1167 +
                   ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                     C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                        C506 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48734 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C505) +
                    (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                     C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                        C48723 -
                    (C43023 * C7174 + C43020 * C7176 + C43022 * C2570 +
                     C43019 * C2573 + C43021 * C1375 + C43018 * C1384) *
                        C507 -
                    (C43023 * C7177 + C43020 * C7180 + C43022 * C2574 +
                     C43019 * C2579 + C43021 * C1385 + C43018 * C1402) *
                        C48697) *
                       C48331 * C48582 * C1168 +
                   ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                     C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                        C505 +
                    (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                     C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                        C48734 -
                    (C43023 * C7660 + C43020 * C7662 + C43022 * C1379 +
                     C43019 * C1392 + C43021 * C1378 + C43018 * C1390) *
                        C506 -
                    (C43023 * C7663 + C43020 * C7666 + C43022 * C1393 +
                     C43019 * C1406 + C43021 * C1391 + C43018 * C1405) *
                        C48723 +
                    (C43021 * C1379 + C43018 * C1392 + C43022 * C7660 +
                     C43019 * C7662 + C43023 * C23495 + C43020 * C23496) *
                        C507 +
                    (C43021 * C1393 + C43018 * C1406 + C43022 * C7663 +
                     C43019 * C7666 + C43023 * C23497 + C43020 * C23498) *
                        C48697) *
                       C48331 * C48582 * C48694) *
                  C48350) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C1928 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C1925 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C1929 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C1926 +
                    (C43021 * C509 + C43018 * C520 + C43022 * C2136 +
                     C43019 * C2142 + C43023 * C2137 + C43020 * C2144) *
                        C1930 +
                    (C43021 * C521 + C43018 * C539 + C43022 * C2143 +
                     C43019 * C2154 + C43023 * C2145 + C43020 * C2155) *
                        C48697) *
                       C48331 * C48582 * C48377 * C48730 +
                   ((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                     C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                        C1929 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C1925 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C1928) +
                    (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                     C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                        C1926 -
                    (C43023 * C2139 + C43020 * C2148 + C43022 * C2138 +
                     C43019 * C2146 + C43021 * C511 + C43018 * C524) *
                        C1930 -
                    (C43023 * C2149 + C43020 * C2157 + C43022 * C2147 +
                     C43019 * C2156 + C43021 * C525 + C43018 * C541) *
                        C48697) *
                       C48331 * C48582 * C48377 * C48717 +
                   ((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                     C43019 * C526 + C43023 * C513 + C43020 * C528) *
                        C1928 +
                    (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                     C43019 * C542 + C43023 * C529 + C43020 * C543) *
                        C1925 -
                    (C43023 * C2140 + C43020 * C2150 + C43022 * C513 +
                     C43019 * C528 + C43021 * C512 + C43018 * C526) *
                        C1929 -
                    (C43023 * C2151 + C43020 * C2158 + C43022 * C529 +
                     C43019 * C543 + C43021 * C527 + C43018 * C542) *
                        C1926 +
                    (C43021 * C513 + C43018 * C528 + C43022 * C2140 +
                     C43019 * C2150 + C43023 * C2141 + C43020 * C2152) *
                        C1930 +
                    (C43021 * C529 + C43018 * C543 + C43022 * C2151 +
                     C43019 * C2158 + C43023 * C2153 + C43020 * C2159) *
                        C48697) *
                       C48331 * C48582 * C48377 * C48688)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C1928 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C1925 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C1929 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C1926 +
                    (C43021 * C509 + C43018 * C520 + C43022 * C2136 +
                     C43019 * C2142 + C43023 * C2137 + C43020 * C2144) *
                        C1930 +
                    (C43021 * C521 + C43018 * C539 + C43022 * C2143 +
                     C43019 * C2154 + C43023 * C2145 + C43020 * C2155) *
                        C48697) *
                       C48331 * C48582 * C48733 +
                   ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                     C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                        C1929 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C1925 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C1928) +
                    (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                     C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                        C1926 -
                    (C43023 * C7174 + C43020 * C7176 + C43022 * C2570 +
                     C43019 * C2573 + C43021 * C1375 + C43018 * C1384) *
                        C1930 -
                    (C43023 * C7177 + C43020 * C7180 + C43022 * C2574 +
                     C43019 * C2579 + C43021 * C1385 + C43018 * C1402) *
                        C48697) *
                       C48331 * C48582 * C48721 +
                   ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                     C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                        C1928 +
                    (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                     C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                        C1925 -
                    (C43023 * C7660 + C43020 * C7662 + C43022 * C1379 +
                     C43019 * C1392 + C43021 * C1378 + C43018 * C1390) *
                        C1929 -
                    (C43023 * C7663 + C43020 * C7666 + C43022 * C1393 +
                     C43019 * C1406 + C43021 * C1391 + C43018 * C1405) *
                        C1926 +
                    (C43021 * C1379 + C43018 * C1392 + C43022 * C7660 +
                     C43019 * C7662 + C43023 * C23495 + C43020 * C23496) *
                        C1930 +
                    (C43021 * C1393 + C43018 * C1406 + C43022 * C7663 +
                     C43019 * C7666 + C43023 * C23497 + C43020 * C23498) *
                        C48697) *
                       C48331 * C48582 * C48694) *
                  C48350) /
                     (p * q * std::sqrt(p + q)) +
                 (2 * std::pow(Pi, 2.5) *
                  ((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                    C43019 * C518 + C43023 * C509 + C43020 * C520) *
                       C2131 +
                   (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                    C43019 * C538 + C43023 * C521 + C43020 * C539) *
                       C2126 -
                   (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                    C43019 * C520 + C43021 * C508 + C43018 * C518) *
                       C2132 -
                   (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                    C43019 * C539 + C43021 * C519 + C43018 * C538) *
                       C2127 +
                   (C43021 * C509 + C43018 * C520 + C43022 * C2136 +
                    C43019 * C2142 + C43023 * C2137 + C43020 * C2144) *
                       C2133 +
                   (C43021 * C521 + C43018 * C539 + C43022 * C2143 +
                    C43019 * C2154 + C43023 * C2145 + C43020 * C2155) *
                       C2128 -
                   (C43023 * C12981 + C43020 * C12983 + C43022 * C2137 +
                    C43019 * C2144 + C43021 * C2136 + C43018 * C2142) *
                       C2134 -
                   (C43023 * C12984 + C43020 * C12987 + C43022 * C2145 +
                    C43019 * C2155 + C43021 * C2143 + C43018 * C2154) *
                       C2129 +
                   (C43021 * C2137 + C43018 * C2144 + C43022 * C12981 +
                    C43019 * C12983 + C43023 * C44492 + C43020 * C44493) *
                       C2135 +
                   (C43021 * C2145 + C43018 * C2155 + C43022 * C12984 +
                    C43019 * C12987 + C43023 * C44494 + C43020 * C44495) *
                       C2130) *
                  C48331 * C48582 * C48377 * C48350) /
                     (p * q * std::sqrt(p + q));
    d2ee[213] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C824 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48663 -
                     (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                      C43019 * C520 + C43021 * C508 + C43018 * C518) *
                         C825 -
                     (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                      C43019 * C539 + C43021 * C519 + C43018 * C538) *
                         C48481) *
                        C48331 * C48582 * C1167 +
                    ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                      C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                         C825 -
                     ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                       C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                          C48663 +
                      (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                       C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                          C824) +
                     (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                      C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                         C48481) *
                        C48331 * C48582 * C1168 +
                    ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                      C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                         C824 +
                     (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                      C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                         C48663 -
                     (C43023 * C7660 + C43020 * C7662 + C43022 * C1379 +
                      C43019 * C1392 + C43021 * C1378 + C43018 * C1390) *
                         C825 -
                     (C43023 * C7663 + C43020 * C7666 + C43022 * C1393 +
                      C43019 * C1406 + C43021 * C1391 + C43018 * C1405) *
                         C48481) *
                        C48331 * C48582 * C48694) *
                       C48648 +
                   (((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                      C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                         C825 -
                     ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                       C43019 * C540 + C43021 * C125 + C43018 * C137) *
                          C48663 +
                      (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                       C43019 * C522 + C43021 * C116 + C43018 * C124) *
                          C824) +
                     (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                      C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                         C48481) *
                        C48331 * C48582 * C1167 +
                    ((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C824 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48663 -
                     (C43023 * C2571 + C43020 * C2575 + C43022 * C1376 +
                      C43019 * C1386 + C43021 * C1005 + C43018 * C1011) *
                         C825 -
                     (C43023 * C2576 + C43020 * C2580 + C43022 * C1387 +
                      C43019 * C1403 + C43021 * C1012 + C43018 * C1020) *
                         C48481) *
                        C48331 * C48582 * C1168 +
                    ((C43021 * C1380 + C43018 * C1394 + C43022 * C1381 +
                      C43019 * C1396 + C43023 * C7661 + C43020 * C7664) *
                         C825 -
                     ((C43023 * C1397 + C43020 * C1408 + C43022 * C1395 +
                       C43019 * C1407 + C43021 * C321 + C43018 * C336) *
                          C48663 +
                      (C43023 * C1381 + C43020 * C1396 + C43022 * C1380 +
                       C43019 * C1394 + C43021 * C306 + C43018 * C320) *
                          C824) +
                     (C43021 * C1395 + C43018 * C1407 + C43022 * C1397 +
                      C43019 * C1408 + C43023 * C7665 + C43020 * C7667) *
                         C48481) *
                        C48331 * C48582 * C48694) *
                       C48360)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C824 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C48663 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C825 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C48481) *
                       C48331 * C48582 * C48377 * C707 +
                   ((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                     C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                        C825 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48663 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C824) +
                    (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                     C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                        C48481) *
                       C48331 * C48582 * C48377 * C708 +
                   ((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                     C43019 * C526 + C43023 * C513 + C43020 * C528) *
                        C824 +
                    (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                     C43019 * C542 + C43023 * C529 + C43020 * C543) *
                        C48663 -
                    (C43023 * C2140 + C43020 * C2150 + C43022 * C513 +
                     C43019 * C528 + C43021 * C512 + C43018 * C526) *
                        C825 -
                    (C43023 * C2151 + C43020 * C2158 + C43022 * C529 +
                     C43019 * C543 + C43021 * C527 + C43018 * C542) *
                        C48481) *
                       C48331 * C48582 * C48377 * C709 +
                   ((C43021 * C514 + C43018 * C530 + C43022 * C515 +
                     C43019 * C532 + C43023 * C2440 + C43020 * C2441) *
                        C825 -
                    ((C43023 * C533 + C43020 * C545 + C43022 * C531 +
                      C43019 * C544 + C43021 * C128 + C43018 * C139) *
                         C48663 +
                     (C43023 * C515 + C43020 * C532 + C43022 * C514 +
                      C43019 * C530 + C43021 * C118 + C43018 * C129) *
                         C824) +
                    (C43021 * C531 + C43018 * C544 + C43022 * C533 +
                     C43019 * C545 + C43023 * C2442 + C43020 * C2443) *
                        C48481) *
                       C48331 * C48582 * C48377 * C48698)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C2436 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C2432 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C2437 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C2433 +
                    (C43021 * C509 + C43018 * C520 + C43022 * C2136 +
                     C43019 * C2142 + C43023 * C2137 + C43020 * C2144) *
                        C2438 +
                    (C43021 * C521 + C43018 * C539 + C43022 * C2143 +
                     C43019 * C2154 + C43023 * C2145 + C43020 * C2155) *
                        C2434 -
                    (C43023 * C12981 + C43020 * C12983 + C43022 * C2137 +
                     C43019 * C2144 + C43021 * C2136 + C43018 * C2142) *
                        C2439 -
                    (C43023 * C12984 + C43020 * C12987 + C43022 * C2145 +
                     C43019 * C2155 + C43021 * C2143 + C43018 * C2154) *
                        C48710) *
                       C48331 * C48582 * C48377 * C48648 +
                   ((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                     C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                        C2437 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C2432 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C2436) +
                    (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                     C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                        C2433 -
                    (C43023 * C2139 + C43020 * C2148 + C43022 * C2138 +
                     C43019 * C2146 + C43021 * C511 + C43018 * C524) *
                        C2438 -
                    (C43023 * C2149 + C43020 * C2157 + C43022 * C2147 +
                     C43019 * C2156 + C43021 * C525 + C43018 * C541) *
                        C2434 +
                    (C43021 * C2138 + C43018 * C2146 + C43022 * C2139 +
                     C43019 * C2148 + C43023 * C12982 + C43020 * C12985) *
                        C2439 +
                    (C43021 * C2147 + C43018 * C2156 + C43022 * C2149 +
                     C43019 * C2157 + C43023 * C12986 + C43020 * C12988) *
                        C48710) *
                       C48331 * C48582 * C48377 * C48360)) /
                     (p * q * std::sqrt(p + q));
    d2ee[214] += (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C114 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48394) *
                        C48331 * C48582 * C48733 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48394 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C114) *
                        C48331 * C48582 * C48721 +
                    ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                      C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                         C114 +
                     (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                      C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                         C48394) *
                        C48331 * C48582 * C48694) *
                       C299 +
                   (((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C114 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48394) *
                        C48331 * C48582 * C48721 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48394 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C114) *
                        C48331 * C48582 * C48733 -
                    ((C43023 * C1397 + C43020 * C1408 + C43022 * C1395 +
                      C43019 * C1407 + C43021 * C321 + C43018 * C336) *
                         C48394 +
                     (C43023 * C1381 + C43020 * C1396 + C43022 * C1380 +
                      C43019 * C1394 + C43021 * C306 + C43018 * C320) *
                         C114) *
                        C48331 * C48582 * C48694) *
                       C300 +
                   (((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                      C43019 * C526 + C43023 * C513 + C43020 * C528) *
                         C114 +
                     (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                      C43019 * C542 + C43023 * C529 + C43020 * C543) *
                         C48394) *
                        C48331 * C48582 * C48733 -
                    ((C43023 * C1389 + C43020 * C1404 + C43022 * C1014 +
                      C43019 * C1021 + C43021 * C312 + C43018 * C332) *
                         C48394 +
                     (C43023 * C1377 + C43020 * C1388 + C43022 * C1006 +
                      C43019 * C1013 + C43021 * C302 + C43018 * C313) *
                         C114) *
                        C48331 * C48582 * C48721 +
                    ((C43021 * C307 + C43018 * C322 + C43022 * C1382 +
                      C43019 * C1398 + C43023 * C1383 + C43020 * C1400) *
                         C114 +
                     (C43021 * C323 + C43018 * C337 + C43022 * C1399 +
                      C43019 * C1409 + C43023 * C1401 + C43020 * C1410) *
                         C48394) *
                        C48331 * C48582 * C48694) *
                       C48688)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C114 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C48394) *
                       C48331 * C48582 * C48377 * C108 -
                   ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                     C43019 * C540 + C43021 * C125 + C43018 * C137) *
                        C48394 +
                    (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                     C43019 * C522 + C43021 * C116 + C43018 * C124) *
                        C114) *
                       C48331 * C48582 * C48377 * C109 +
                   ((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                     C43019 * C526 + C43023 * C513 + C43020 * C528) *
                        C114 +
                    (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                     C43019 * C542 + C43023 * C529 + C43020 * C543) *
                        C48394) *
                       C48331 * C48582 * C48377 * C110 -
                   ((C43023 * C533 + C43020 * C545 + C43022 * C531 +
                     C43019 * C544 + C43021 * C128 + C43018 * C139) *
                        C48394 +
                    (C43023 * C515 + C43020 * C532 + C43022 * C514 +
                     C43019 * C530 + C43021 * C118 + C43018 * C129) *
                        C114) *
                       C48331 * C48582 * C48377 * C111 +
                   ((C43021 * C119 + C43018 * C130 + C43022 * C516 +
                     C43019 * C534 + C43023 * C517 + C43020 * C536) *
                        C114 +
                    (C43021 * C131 + C43018 * C140 + C43022 * C535 +
                     C43019 * C546 + C43023 * C537 + C43020 * C547) *
                        C48394) *
                       C48331 * C48582 * C48377 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C114 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48394) *
                        C48331 * C48582 * C1167 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48394 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C114) *
                        C48331 * C48582 * C1168 +
                    ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                      C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                         C114 +
                     (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                      C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                         C48394) *
                        C48331 * C48582 * C48694) *
                       C48730 +
                   (((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C114 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48394) *
                        C48331 * C48582 * C1168 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48394 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C114) *
                        C48331 * C48582 * C1167 -
                    ((C43023 * C1397 + C43020 * C1408 + C43022 * C1395 +
                      C43019 * C1407 + C43021 * C321 + C43018 * C336) *
                         C48394 +
                     (C43023 * C1381 + C43020 * C1396 + C43022 * C1380 +
                      C43019 * C1394 + C43021 * C306 + C43018 * C320) *
                         C114) *
                        C48331 * C48582 * C48694) *
                       C48717 +
                   (((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                      C43019 * C526 + C43023 * C513 + C43020 * C528) *
                         C114 +
                     (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                      C43019 * C542 + C43023 * C529 + C43020 * C543) *
                         C48394) *
                        C48331 * C48582 * C1167 -
                    ((C43023 * C1389 + C43020 * C1404 + C43022 * C1014 +
                      C43019 * C1021 + C43021 * C312 + C43018 * C332) *
                         C48394 +
                     (C43023 * C1377 + C43020 * C1388 + C43022 * C1006 +
                      C43019 * C1013 + C43021 * C302 + C43018 * C313) *
                         C114) *
                        C48331 * C48582 * C1168 +
                    ((C43021 * C307 + C43018 * C322 + C43022 * C1382 +
                      C43019 * C1398 + C43023 * C1383 + C43020 * C1400) *
                         C114 +
                     (C43021 * C323 + C43018 * C337 + C43022 * C1399 +
                      C43019 * C1409 + C43023 * C1401 + C43020 * C1410) *
                         C48394) *
                        C48331 * C48582 * C48694) *
                       C48688)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C114 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C48394) *
                       C48331 * C48582 * C1235 -
                   ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                     C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                        C48394 +
                    (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                     C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                        C114) *
                       C48331 * C48582 * C1236 +
                   ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                     C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                        C114 +
                    (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                     C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                        C48394) *
                       C48331 * C48582 * C1237 -
                   ((C43023 * C6241 + C43020 * C6244 + C43022 * C1807 +
                     C43019 * C1812 + C43021 * C1251 + C43018 * C1261) *
                        C48394 +
                    (C43023 * C6238 + C43020 * C6240 + C43022 * C1803 +
                     C43019 * C1806 + C43021 * C1243 + C43018 * C1252) *
                        C114) *
                       C48331 * C48582 * C1238 +
                   ((C43021 * C1244 + C43018 * C1253 + C43022 * C6764 +
                     C43019 * C6766 + C43023 * C22813 + C43020 * C22814) *
                        C114 +
                    (C43021 * C1254 + C43018 * C1262 + C43022 * C6767 +
                     C43019 * C6770 + C43023 * C22815 + C43020 * C22816) *
                        C48394) *
                       C48331 * C48582 * C1239) *
                  C48350) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C1928 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C1925 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C1929 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C1926 +
                    (C43021 * C509 + C43018 * C520 + C43022 * C2136 +
                     C43019 * C2142 + C43023 * C2137 + C43020 * C2144) *
                        C1930 +
                    (C43021 * C521 + C43018 * C539 + C43022 * C2143 +
                     C43019 * C2154 + C43023 * C2145 + C43020 * C2155) *
                        C48697) *
                       C48331 * C48582 * C48377 * C48730 +
                   ((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                     C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                        C1929 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C1925 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C1928) +
                    (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                     C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                        C1926 -
                    (C43023 * C2139 + C43020 * C2148 + C43022 * C2138 +
                     C43019 * C2146 + C43021 * C511 + C43018 * C524) *
                        C1930 -
                    (C43023 * C2149 + C43020 * C2157 + C43022 * C2147 +
                     C43019 * C2156 + C43021 * C525 + C43018 * C541) *
                        C48697) *
                       C48331 * C48582 * C48377 * C48717 +
                   ((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                     C43019 * C526 + C43023 * C513 + C43020 * C528) *
                        C1928 +
                    (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                     C43019 * C542 + C43023 * C529 + C43020 * C543) *
                        C1925 -
                    (C43023 * C2140 + C43020 * C2150 + C43022 * C513 +
                     C43019 * C528 + C43021 * C512 + C43018 * C526) *
                        C1929 -
                    (C43023 * C2151 + C43020 * C2158 + C43022 * C529 +
                     C43019 * C543 + C43021 * C527 + C43018 * C542) *
                        C1926 +
                    (C43021 * C513 + C43018 * C528 + C43022 * C2140 +
                     C43019 * C2150 + C43023 * C2141 + C43020 * C2152) *
                        C1930 +
                    (C43021 * C529 + C43018 * C543 + C43022 * C2151 +
                     C43019 * C2158 + C43023 * C2153 + C43020 * C2159) *
                        C48697) *
                       C48331 * C48582 * C48377 * C48688)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C1928 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C1925 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C1929 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C1926 +
                    (C43021 * C509 + C43018 * C520 + C43022 * C2136 +
                     C43019 * C2142 + C43023 * C2137 + C43020 * C2144) *
                        C1930 +
                    (C43021 * C521 + C43018 * C539 + C43022 * C2143 +
                     C43019 * C2154 + C43023 * C2145 + C43020 * C2155) *
                        C48697) *
                       C48331 * C48582 * C48733 +
                   ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                     C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                        C1929 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C1925 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C1928) +
                    (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                     C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                        C1926 -
                    (C43023 * C7174 + C43020 * C7176 + C43022 * C2570 +
                     C43019 * C2573 + C43021 * C1375 + C43018 * C1384) *
                        C1930 -
                    (C43023 * C7177 + C43020 * C7180 + C43022 * C2574 +
                     C43019 * C2579 + C43021 * C1385 + C43018 * C1402) *
                        C48697) *
                       C48331 * C48582 * C48721 +
                   ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                     C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                        C1928 +
                    (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                     C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                        C1925 -
                    (C43023 * C7660 + C43020 * C7662 + C43022 * C1379 +
                     C43019 * C1392 + C43021 * C1378 + C43018 * C1390) *
                        C1929 -
                    (C43023 * C7663 + C43020 * C7666 + C43022 * C1393 +
                     C43019 * C1406 + C43021 * C1391 + C43018 * C1405) *
                        C1926 +
                    (C43021 * C1379 + C43018 * C1392 + C43022 * C7660 +
                     C43019 * C7662 + C43023 * C23495 + C43020 * C23496) *
                        C1930 +
                    (C43021 * C1393 + C43018 * C1406 + C43022 * C7663 +
                     C43019 * C7666 + C43023 * C23497 + C43020 * C23498) *
                        C48697) *
                       C48331 * C48582 * C48694) *
                  C48350) /
                     (p * q * std::sqrt(p + q));
    d2ee[215] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C3456 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C3454 -
                     (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                      C43019 * C520 + C43021 * C508 + C43018 * C518) *
                         C3457 -
                     (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                      C43019 * C539 + C43021 * C519 + C43018 * C538) *
                         C48481) *
                        C48331 * C48582 * C48662 +
                    ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                      C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                         C3457 -
                     ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                       C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                          C3454 +
                      (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                       C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                          C3456) +
                     (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                      C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                         C48481) *
                        C48331 * C48582 * C48439) *
                       C48355 +
                   (((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                      C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                         C3457 -
                     ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                       C43019 * C540 + C43021 * C125 + C43018 * C137) *
                          C3454 +
                      (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                       C43019 * C522 + C43021 * C116 + C43018 * C124) *
                          C3456) +
                     (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                      C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                         C48481) *
                        C48331 * C48582 * C48662 +
                    ((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C3456 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C3454 -
                     (C43023 * C2571 + C43020 * C2575 + C43022 * C1376 +
                      C43019 * C1386 + C43021 * C1005 + C43018 * C1011) *
                         C3457 -
                     (C43023 * C2576 + C43020 * C2580 + C43022 * C1387 +
                      C43019 * C1403 + C43021 * C1012 + C43018 * C1020) *
                         C48481) *
                        C48331 * C48582 * C48439) *
                       C48363 +
                   (((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                      C43019 * C526 + C43023 * C513 + C43020 * C528) *
                         C3456 +
                     (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                      C43019 * C542 + C43023 * C529 + C43020 * C543) *
                         C3454 -
                     (C43023 * C2140 + C43020 * C2150 + C43022 * C513 +
                      C43019 * C528 + C43021 * C512 + C43018 * C526) *
                         C3457 -
                     (C43023 * C2151 + C43020 * C2158 + C43022 * C529 +
                      C43019 * C543 + C43021 * C527 + C43018 * C542) *
                         C48481) *
                        C48331 * C48582 * C48662 +
                    ((C43021 * C1006 + C43018 * C1013 + C43022 * C1377 +
                      C43019 * C1388 + C43023 * C2572 + C43020 * C2577) *
                         C3457 -
                     ((C43023 * C1389 + C43020 * C1404 + C43022 * C1014 +
                       C43019 * C1021 + C43021 * C312 + C43018 * C332) *
                          C3454 +
                      (C43023 * C1377 + C43020 * C1388 + C43022 * C1006 +
                       C43019 * C1013 + C43021 * C302 + C43018 * C313) *
                          C3456) +
                     (C43021 * C1014 + C43018 * C1021 + C43022 * C1389 +
                      C43019 * C1404 + C43023 * C2578 + C43020 * C2581) *
                         C48481) *
                        C48331 * C48582 * C48439) *
                       C3063)) /
                 (p * q * std::sqrt(p + q));
    d2ee[216] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C47163 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48477 -
                     (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                      C43019 * C520 + C43021 * C508 + C43018 * C518) *
                         C47155 -
                     (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                      C43019 * C539 + C43021 * C519 + C43018 * C538) *
                         C48484 +
                     (C43021 * C509 + C43018 * C520 + C43022 * C2136 +
                      C43019 * C2142 + C43023 * C2137 + C43020 * C2144) *
                         C47169 +
                     (C43021 * C521 + C43018 * C539 + C43022 * C2143 +
                      C43019 * C2154 + C43023 * C2145 + C43020 * C2155) *
                         C4029) *
                        C48331 * C48582 * C48662 +
                    ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                      C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                         C47155 -
                     ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                       C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                          C48477 +
                      (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                       C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                          C47163) +
                     (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                      C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                         C48484 -
                     (C43023 * C7174 + C43020 * C7176 + C43022 * C2570 +
                      C43019 * C2573 + C43021 * C1375 + C43018 * C1384) *
                         C47169 -
                     (C43023 * C7177 + C43020 * C7180 + C43022 * C2574 +
                      C43019 * C2579 + C43021 * C1385 + C43018 * C1402) *
                         C4029) *
                        C48331 * C48582 * C48439) *
                       C2788 +
                   (((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                      C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                         C47155 -
                     ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                       C43019 * C540 + C43021 * C125 + C43018 * C137) *
                          C48477 +
                      (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                       C43019 * C522 + C43021 * C116 + C43018 * C124) *
                          C47163) +
                     (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                      C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                         C48484 -
                     (C43023 * C2139 + C43020 * C2148 + C43022 * C2138 +
                      C43019 * C2146 + C43021 * C511 + C43018 * C524) *
                         C47169 -
                     (C43023 * C2149 + C43020 * C2157 + C43022 * C2147 +
                      C43019 * C2156 + C43021 * C525 + C43018 * C541) *
                         C4029) *
                        C48331 * C48582 * C48662 +
                    ((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C47163 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48477 -
                     (C43023 * C2571 + C43020 * C2575 + C43022 * C1376 +
                      C43019 * C1386 + C43021 * C1005 + C43018 * C1011) *
                         C47155 -
                     (C43023 * C2576 + C43020 * C2580 + C43022 * C1387 +
                      C43019 * C1403 + C43021 * C1012 + C43018 * C1020) *
                         C48484 +
                     (C43021 * C1376 + C43018 * C1386 + C43022 * C2571 +
                      C43019 * C2575 + C43023 * C7175 + C43020 * C7178) *
                         C47169 +
                     (C43021 * C1387 + C43018 * C1403 + C43022 * C2576 +
                      C43019 * C2580 + C43023 * C7179 + C43020 * C7181) *
                         C4029) *
                        C48331 * C48582 * C48439) *
                       C48360)) /
                 (p * q * std::sqrt(p + q));
    d2ee[217] += (-std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C3456 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C3454 -
                     (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                      C43019 * C520 + C43021 * C508 + C43018 * C518) *
                         C3457 -
                     (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                      C43019 * C539 + C43021 * C519 + C43018 * C538) *
                         C48481) *
                        C48331 * C48582 * C48733 +
                    ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                      C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                         C3457 -
                     ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                       C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                          C3454 +
                      (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                       C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                          C3456) +
                     (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                      C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                         C48481) *
                        C48331 * C48582 * C48721 +
                    ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                      C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                         C3456 +
                     (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                      C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                         C3454 -
                     (C43023 * C7660 + C43020 * C7662 + C43022 * C1379 +
                      C43019 * C1392 + C43021 * C1378 + C43018 * C1390) *
                         C3457 -
                     (C43023 * C7663 + C43020 * C7666 + C43022 * C1393 +
                      C43019 * C1406 + C43021 * C1391 + C43018 * C1405) *
                         C48481) *
                        C48331 * C48582 * C48694) *
                       C2788 +
                   (((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                      C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                         C3457 -
                     ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                       C43019 * C540 + C43021 * C125 + C43018 * C137) *
                          C3454 +
                      (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                       C43019 * C522 + C43021 * C116 + C43018 * C124) *
                          C3456) +
                     (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                      C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                         C48481) *
                        C48331 * C48582 * C48733 +
                    ((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C3456 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C3454 -
                     (C43023 * C2571 + C43020 * C2575 + C43022 * C1376 +
                      C43019 * C1386 + C43021 * C1005 + C43018 * C1011) *
                         C3457 -
                     (C43023 * C2576 + C43020 * C2580 + C43022 * C1387 +
                      C43019 * C1403 + C43021 * C1012 + C43018 * C1020) *
                         C48481) *
                        C48331 * C48582 * C48721 +
                    ((C43021 * C1380 + C43018 * C1394 + C43022 * C1381 +
                      C43019 * C1396 + C43023 * C7661 + C43020 * C7664) *
                         C3457 -
                     ((C43023 * C1397 + C43020 * C1408 + C43022 * C1395 +
                       C43019 * C1407 + C43021 * C321 + C43018 * C336) *
                          C3454 +
                      (C43023 * C1381 + C43020 * C1396 + C43022 * C1380 +
                       C43019 * C1394 + C43021 * C306 + C43018 * C320) *
                          C3456) +
                     (C43021 * C1395 + C43018 * C1407 + C43022 * C1397 +
                      C43019 * C1408 + C43023 * C7665 + C43020 * C7667) *
                         C48481) *
                        C48331 * C48582 * C48694) *
                       C48360)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C3456 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C3454 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C3457 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C48481) *
                       C48331 * C48582 * C48377 * C48739 +
                   ((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                     C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                        C3457 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C3454 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C3456) +
                    (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                     C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                        C48481) *
                       C48331 * C48582 * C48377 * C48732 +
                   ((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                     C43019 * C526 + C43023 * C513 + C43020 * C528) *
                        C3456 +
                    (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                     C43019 * C542 + C43023 * C529 + C43020 * C543) *
                        C3454 -
                    (C43023 * C2140 + C43020 * C2150 + C43022 * C513 +
                     C43019 * C528 + C43021 * C512 + C43018 * C526) *
                        C3457 -
                    (C43023 * C2151 + C43020 * C2158 + C43022 * C529 +
                     C43019 * C543 + C43021 * C527 + C43018 * C542) *
                        C48481) *
                       C48331 * C48582 * C48377 * C48719 +
                   ((C43021 * C514 + C43018 * C530 + C43022 * C515 +
                     C43019 * C532 + C43023 * C2440 + C43020 * C2441) *
                        C3457 -
                    ((C43023 * C533 + C43020 * C545 + C43022 * C531 +
                      C43019 * C544 + C43021 * C128 + C43018 * C139) *
                         C3454 +
                     (C43023 * C515 + C43020 * C532 + C43022 * C514 +
                      C43019 * C530 + C43021 * C118 + C43018 * C129) *
                         C3456) +
                    (C43021 * C531 + C43018 * C544 + C43022 * C533 +
                     C43019 * C545 + C43023 * C2442 + C43020 * C2443) *
                        C48481) *
                       C48331 * C48582 * C48377 * C48698)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(3.0) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C3744 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C48741 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C3745 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C48738 +
                    (C43021 * C509 + C43018 * C520 + C43022 * C2136 +
                     C43019 * C2142 + C43023 * C2137 + C43020 * C2144) *
                        C3746 +
                    (C43021 * C521 + C43018 * C539 + C43022 * C2143 +
                     C43019 * C2154 + C43023 * C2145 + C43020 * C2155) *
                        C48729 -
                    (C43023 * C12981 + C43020 * C12983 + C43022 * C2137 +
                     C43019 * C2144 + C43021 * C2136 + C43018 * C2142) *
                        C3747 -
                    (C43023 * C12984 + C43020 * C12987 + C43022 * C2145 +
                     C43019 * C2155 + C43021 * C2143 + C43018 * C2154) *
                        C48710) *
                       C48331 * C48582 * C48377 * C2788 +
                   ((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                     C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                        C3745 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48741 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C3744) +
                    (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                     C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                        C48738 -
                    (C43023 * C2139 + C43020 * C2148 + C43022 * C2138 +
                     C43019 * C2146 + C43021 * C511 + C43018 * C524) *
                        C3746 -
                    (C43023 * C2149 + C43020 * C2157 + C43022 * C2147 +
                     C43019 * C2156 + C43021 * C525 + C43018 * C541) *
                        C48729 +
                    (C43021 * C2138 + C43018 * C2146 + C43022 * C2139 +
                     C43019 * C2148 + C43023 * C12982 + C43020 * C12985) *
                        C3747 +
                    (C43021 * C2147 + C43018 * C2156 + C43022 * C2149 +
                     C43019 * C2157 + C43023 * C12986 + C43020 * C12988) *
                        C48710) *
                       C48331 * C48582 * C48377 * C48360)) /
                     (p * q * std::sqrt(p + q));
    d2ee[218] += (std::sqrt(9.) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C47163 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C48477 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C47155 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C48484 +
                    (C43021 * C509 + C43018 * C520 + C43022 * C2136 +
                     C43019 * C2142 + C43023 * C2137 + C43020 * C2144) *
                        C47169 +
                    (C43021 * C521 + C43018 * C539 + C43022 * C2143 +
                     C43019 * C2154 + C43023 * C2145 + C43020 * C2155) *
                        C4029) *
                       C48331 * C48582 * C48377 * C48355 +
                   ((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                     C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                        C47155 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48477 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C47163) +
                    (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                     C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                        C48484 -
                    (C43023 * C2139 + C43020 * C2148 + C43022 * C2138 +
                     C43019 * C2146 + C43021 * C511 + C43018 * C524) *
                        C47169 -
                    (C43023 * C2149 + C43020 * C2157 + C43022 * C2147 +
                     C43019 * C2156 + C43021 * C525 + C43018 * C541) *
                        C4029) *
                       C48331 * C48582 * C48377 * C48363 +
                   ((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                     C43019 * C526 + C43023 * C513 + C43020 * C528) *
                        C47163 +
                    (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                     C43019 * C542 + C43023 * C529 + C43020 * C543) *
                        C48477 -
                    (C43023 * C2140 + C43020 * C2150 + C43022 * C513 +
                     C43019 * C528 + C43021 * C512 + C43018 * C526) *
                        C47155 -
                    (C43023 * C2151 + C43020 * C2158 + C43022 * C529 +
                     C43019 * C543 + C43021 * C527 + C43018 * C542) *
                        C48484 +
                    (C43021 * C513 + C43018 * C528 + C43022 * C2140 +
                     C43019 * C2150 + C43023 * C2141 + C43020 * C2152) *
                        C47169 +
                    (C43021 * C529 + C43018 * C543 + C43022 * C2151 +
                     C43019 * C2158 + C43023 * C2153 + C43020 * C2159) *
                        C4029) *
                       C48331 * C48582 * C48377 * C3063)) /
                 (p * q * std::sqrt(p + q));
    d2ee[219] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C3456 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C3454 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C3457 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C48481) *
                       C48331 * C48582 * C48377 * C48739 +
                   ((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                     C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                        C3457 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C3454 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C3456) +
                    (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                     C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                        C48481) *
                       C48331 * C48582 * C48377 * C48732 +
                   ((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                     C43019 * C526 + C43023 * C513 + C43020 * C528) *
                        C3456 +
                    (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                     C43019 * C542 + C43023 * C529 + C43020 * C543) *
                        C3454 -
                    (C43023 * C2140 + C43020 * C2150 + C43022 * C513 +
                     C43019 * C528 + C43021 * C512 + C43018 * C526) *
                        C3457 -
                    (C43023 * C2151 + C43020 * C2158 + C43022 * C529 +
                     C43019 * C543 + C43021 * C527 + C43018 * C542) *
                        C48481) *
                       C48331 * C48582 * C48377 * C48719 +
                   ((C43021 * C514 + C43018 * C530 + C43022 * C515 +
                     C43019 * C532 + C43023 * C2440 + C43020 * C2441) *
                        C3457 -
                    ((C43023 * C533 + C43020 * C545 + C43022 * C531 +
                      C43019 * C544 + C43021 * C128 + C43018 * C139) *
                         C3454 +
                     (C43023 * C515 + C43020 * C532 + C43022 * C514 +
                      C43019 * C530 + C43021 * C118 + C43018 * C129) *
                         C3456) +
                    (C43021 * C531 + C43018 * C544 + C43022 * C533 +
                     C43019 * C545 + C43023 * C2442 + C43020 * C2443) *
                        C48481) *
                       C48331 * C48582 * C48377 * C48698)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C3456 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C3454 -
                     (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                      C43019 * C520 + C43021 * C508 + C43018 * C518) *
                         C3457 -
                     (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                      C43019 * C539 + C43021 * C519 + C43018 * C538) *
                         C48481) *
                        C48331 * C48582 * C48733 +
                    ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                      C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                         C3457 -
                     ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                       C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                          C3454 +
                      (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                       C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                          C3456) +
                     (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                      C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                         C48481) *
                        C48331 * C48582 * C48721 +
                    ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                      C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                         C3456 +
                     (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                      C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                         C3454 -
                     (C43023 * C7660 + C43020 * C7662 + C43022 * C1379 +
                      C43019 * C1392 + C43021 * C1378 + C43018 * C1390) *
                         C3457 -
                     (C43023 * C7663 + C43020 * C7666 + C43022 * C1393 +
                      C43019 * C1406 + C43021 * C1391 + C43018 * C1405) *
                         C48481) *
                        C48331 * C48582 * C48694) *
                       C2788 +
                   (((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                      C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                         C3457 -
                     ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                       C43019 * C540 + C43021 * C125 + C43018 * C137) *
                          C3454 +
                      (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                       C43019 * C522 + C43021 * C116 + C43018 * C124) *
                          C3456) +
                     (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                      C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                         C48481) *
                        C48331 * C48582 * C48733 +
                    ((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C3456 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C3454 -
                     (C43023 * C2571 + C43020 * C2575 + C43022 * C1376 +
                      C43019 * C1386 + C43021 * C1005 + C43018 * C1011) *
                         C3457 -
                     (C43023 * C2576 + C43020 * C2580 + C43022 * C1387 +
                      C43019 * C1403 + C43021 * C1012 + C43018 * C1020) *
                         C48481) *
                        C48331 * C48582 * C48721 +
                    ((C43021 * C1380 + C43018 * C1394 + C43022 * C1381 +
                      C43019 * C1396 + C43023 * C7661 + C43020 * C7664) *
                         C3457 -
                     ((C43023 * C1397 + C43020 * C1408 + C43022 * C1395 +
                       C43019 * C1407 + C43021 * C321 + C43018 * C336) *
                          C3454 +
                      (C43023 * C1381 + C43020 * C1396 + C43022 * C1380 +
                       C43019 * C1394 + C43021 * C306 + C43018 * C320) *
                          C3456) +
                     (C43021 * C1395 + C43018 * C1407 + C43022 * C1397 +
                      C43019 * C1408 + C43023 * C7665 + C43020 * C7667) *
                         C48481) *
                        C48331 * C48582 * C48694) *
                       C48360)) /
                     (p * q * std::sqrt(p + q));
    d2ee[220] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C114 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48394) *
                        C48331 * C48582 * C48662 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48394 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C114) *
                        C48331 * C48582 * C48439) *
                       C707 +
                   (((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C114 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48394) *
                        C48331 * C48582 * C48439 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48394 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C114) *
                        C48331 * C48582 * C48662) *
                       C708 +
                   (((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                      C43019 * C526 + C43023 * C513 + C43020 * C528) *
                         C114 +
                     (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                      C43019 * C542 + C43023 * C529 + C43020 * C543) *
                         C48394) *
                        C48331 * C48582 * C48662 -
                    ((C43023 * C1389 + C43020 * C1404 + C43022 * C1014 +
                      C43019 * C1021 + C43021 * C312 + C43018 * C332) *
                         C48394 +
                     (C43023 * C1377 + C43020 * C1388 + C43022 * C1006 +
                      C43019 * C1013 + C43021 * C302 + C43018 * C313) *
                         C114) *
                        C48331 * C48582 * C48439) *
                       C709 +
                   (((C43021 * C308 + C43018 * C324 + C43022 * C1007 +
                      C43019 * C1015 + C43023 * C2306 + C43020 * C2307) *
                         C114 +
                     (C43021 * C325 + C43018 * C338 + C43022 * C1016 +
                      C43019 * C1022 + C43023 * C2308 + C43020 * C2309) *
                         C48394) *
                        C48331 * C48582 * C48439 -
                    ((C43023 * C533 + C43020 * C545 + C43022 * C531 +
                      C43019 * C544 + C43021 * C128 + C43018 * C139) *
                         C48394 +
                     (C43023 * C515 + C43020 * C532 + C43022 * C514 +
                      C43019 * C530 + C43021 * C118 + C43018 * C129) *
                         C114) *
                        C48331 * C48582 * C48662) *
                       C48698)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C114 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48394) *
                        C48331 * C48582 * C1509 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48394 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C114) *
                        C48331 * C48582 * C1510 +
                    ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                      C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                         C114 +
                     (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                      C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                         C48394) *
                        C48331 * C48582 * C1511 -
                    ((C43023 * C6241 + C43020 * C6244 + C43022 * C1807 +
                      C43019 * C1812 + C43021 * C1251 + C43018 * C1261) *
                         C48394 +
                     (C43023 * C6238 + C43020 * C6240 + C43022 * C1803 +
                      C43019 * C1806 + C43021 * C1243 + C43018 * C1252) *
                         C114) *
                        C48331 * C48582 * C48704) *
                       C48648 +
                   (((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C114 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48394) *
                        C48331 * C48582 * C1510 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48394 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C114) *
                        C48331 * C48582 * C1509 -
                    ((C43023 * C1397 + C43020 * C1408 + C43022 * C1395 +
                      C43019 * C1407 + C43021 * C321 + C43018 * C336) *
                         C48394 +
                     (C43023 * C1381 + C43020 * C1396 + C43022 * C1380 +
                      C43019 * C1394 + C43021 * C306 + C43018 * C320) *
                         C114) *
                        C48331 * C48582 * C1511 +
                    ((C43021 * C1242 + C43018 * C1250 + C43022 * C1804 +
                      C43019 * C1808 + C43023 * C6239 + C43020 * C6242) *
                         C114 +
                     (C43021 * C1249 + C43018 * C1260 + C43022 * C1809 +
                      C43019 * C1813 + C43023 * C6243 + C43020 * C6245) *
                         C48394) *
                        C48331 * C48582 * C48704) *
                       C48360)) /
                     (p * q * std::sqrt(p + q));
    d2ee[221] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C824 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48663 -
                     (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                      C43019 * C520 + C43021 * C508 + C43018 * C518) *
                         C825 -
                     (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                      C43019 * C539 + C43021 * C519 + C43018 * C538) *
                         C48481) *
                        C48331 * C48582 * C48662 +
                    ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                      C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                         C825 -
                     ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                       C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                          C48663 +
                      (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                       C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                          C824) +
                     (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                      C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                         C48481) *
                        C48331 * C48582 * C48439) *
                       C299 +
                   (((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                      C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                         C825 -
                     ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                       C43019 * C540 + C43021 * C125 + C43018 * C137) *
                          C48663 +
                      (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                       C43019 * C522 + C43021 * C116 + C43018 * C124) *
                          C824) +
                     (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                      C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                         C48481) *
                        C48331 * C48582 * C48662 +
                    ((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C824 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48663 -
                     (C43023 * C2571 + C43020 * C2575 + C43022 * C1376 +
                      C43019 * C1386 + C43021 * C1005 + C43018 * C1011) *
                         C825 -
                     (C43023 * C2576 + C43020 * C2580 + C43022 * C1387 +
                      C43019 * C1403 + C43021 * C1012 + C43018 * C1020) *
                         C48481) *
                        C48331 * C48582 * C48439) *
                       C300 +
                   (((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                      C43019 * C526 + C43023 * C513 + C43020 * C528) *
                         C824 +
                     (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                      C43019 * C542 + C43023 * C529 + C43020 * C543) *
                         C48663 -
                     (C43023 * C2140 + C43020 * C2150 + C43022 * C513 +
                      C43019 * C528 + C43021 * C512 + C43018 * C526) *
                         C825 -
                     (C43023 * C2151 + C43020 * C2158 + C43022 * C529 +
                      C43019 * C543 + C43021 * C527 + C43018 * C542) *
                         C48481) *
                        C48331 * C48582 * C48662 +
                    ((C43021 * C1006 + C43018 * C1013 + C43022 * C1377 +
                      C43019 * C1388 + C43023 * C2572 + C43020 * C2577) *
                         C825 -
                     ((C43023 * C1389 + C43020 * C1404 + C43022 * C1014 +
                       C43019 * C1021 + C43021 * C312 + C43018 * C332) *
                          C48663 +
                      (C43023 * C1377 + C43020 * C1388 + C43022 * C1006 +
                       C43019 * C1013 + C43021 * C302 + C43018 * C313) *
                          C824) +
                     (C43021 * C1014 + C43018 * C1021 + C43022 * C1389 +
                      C43019 * C1404 + C43023 * C2578 + C43020 * C2581) *
                         C48481) *
                        C48331 * C48582 * C48439) *
                       C48688)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C824 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C48663 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C825 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C48481) *
                       C48331 * C48582 * C1509 +
                   ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                     C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                        C825 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48663 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C824) +
                    (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                     C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                        C48481) *
                       C48331 * C48582 * C1510 +
                   ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                     C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                        C824 +
                    (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                     C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                        C48663 -
                    (C43023 * C7660 + C43020 * C7662 + C43022 * C1379 +
                     C43019 * C1392 + C43021 * C1378 + C43018 * C1390) *
                        C825 -
                    (C43023 * C7663 + C43020 * C7666 + C43022 * C1393 +
                     C43019 * C1406 + C43021 * C1391 + C43018 * C1405) *
                        C48481) *
                       C48331 * C48582 * C1511 +
                   ((C43021 * C1803 + C43018 * C1806 + C43022 * C6238 +
                     C43019 * C6240 + C43023 * C23841 + C43020 * C23842) *
                        C825 -
                    ((C43023 * C6241 + C43020 * C6244 + C43022 * C1807 +
                      C43019 * C1812 + C43021 * C1251 + C43018 * C1261) *
                         C48663 +
                     (C43023 * C6238 + C43020 * C6240 + C43022 * C1803 +
                      C43019 * C1806 + C43021 * C1243 + C43018 * C1252) *
                         C824) +
                    (C43021 * C1807 + C43018 * C1812 + C43022 * C6241 +
                     C43019 * C6244 + C43023 * C23843 + C43020 * C23844) *
                        C48481) *
                       C48331 * C48582 * C48704) *
                  C48350) /
                     (p * q * std::sqrt(p + q));
    d2ee[222] += (-std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C114 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48394) *
                        C48331 * C48582 * C48733 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48394 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C114) *
                        C48331 * C48582 * C48721 +
                    ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                      C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                         C114 +
                     (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                      C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                         C48394) *
                        C48331 * C48582 * C48694) *
                       C299 +
                   (((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C114 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48394) *
                        C48331 * C48582 * C48721 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48394 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C114) *
                        C48331 * C48582 * C48733 -
                    ((C43023 * C1397 + C43020 * C1408 + C43022 * C1395 +
                      C43019 * C1407 + C43021 * C321 + C43018 * C336) *
                         C48394 +
                     (C43023 * C1381 + C43020 * C1396 + C43022 * C1380 +
                      C43019 * C1394 + C43021 * C306 + C43018 * C320) *
                         C114) *
                        C48331 * C48582 * C48694) *
                       C300 +
                   (((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                      C43019 * C526 + C43023 * C513 + C43020 * C528) *
                         C114 +
                     (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                      C43019 * C542 + C43023 * C529 + C43020 * C543) *
                         C48394) *
                        C48331 * C48582 * C48733 -
                    ((C43023 * C1389 + C43020 * C1404 + C43022 * C1014 +
                      C43019 * C1021 + C43021 * C312 + C43018 * C332) *
                         C48394 +
                     (C43023 * C1377 + C43020 * C1388 + C43022 * C1006 +
                      C43019 * C1013 + C43021 * C302 + C43018 * C313) *
                         C114) *
                        C48331 * C48582 * C48721 +
                    ((C43021 * C307 + C43018 * C322 + C43022 * C1382 +
                      C43019 * C1398 + C43023 * C1383 + C43020 * C1400) *
                         C114 +
                     (C43021 * C323 + C43018 * C337 + C43022 * C1399 +
                      C43019 * C1409 + C43023 * C1401 + C43020 * C1410) *
                         C48394) *
                        C48331 * C48582 * C48694) *
                       C48688)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C114 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C48394) *
                       C48331 * C48582 * C48377 * C108 -
                   ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                     C43019 * C540 + C43021 * C125 + C43018 * C137) *
                        C48394 +
                    (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                     C43019 * C522 + C43021 * C116 + C43018 * C124) *
                        C114) *
                       C48331 * C48582 * C48377 * C109 +
                   ((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                     C43019 * C526 + C43023 * C513 + C43020 * C528) *
                        C114 +
                    (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                     C43019 * C542 + C43023 * C529 + C43020 * C543) *
                        C48394) *
                       C48331 * C48582 * C48377 * C110 -
                   ((C43023 * C533 + C43020 * C545 + C43022 * C531 +
                     C43019 * C544 + C43021 * C128 + C43018 * C139) *
                        C48394 +
                    (C43023 * C515 + C43020 * C532 + C43022 * C514 +
                     C43019 * C530 + C43021 * C118 + C43018 * C129) *
                        C114) *
                       C48331 * C48582 * C48377 * C111 +
                   ((C43021 * C119 + C43018 * C130 + C43022 * C516 +
                     C43019 * C534 + C43023 * C517 + C43020 * C536) *
                        C114 +
                    (C43021 * C131 + C43018 * C140 + C43022 * C535 +
                     C43019 * C546 + C43023 * C537 + C43020 * C547) *
                        C48394) *
                       C48331 * C48582 * C48377 * C112)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C505 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C48734 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C506 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C48723 +
                    (C43021 * C509 + C43018 * C520 + C43022 * C2136 +
                     C43019 * C2142 + C43023 * C2137 + C43020 * C2144) *
                        C507 +
                    (C43021 * C521 + C43018 * C539 + C43022 * C2143 +
                     C43019 * C2154 + C43023 * C2145 + C43020 * C2155) *
                        C48697) *
                       C48331 * C48582 * C48377 * C299 +
                   ((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                     C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                        C506 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48734 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C505) +
                    (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                     C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                        C48723 -
                    (C43023 * C2139 + C43020 * C2148 + C43022 * C2138 +
                     C43019 * C2146 + C43021 * C511 + C43018 * C524) *
                        C507 -
                    (C43023 * C2149 + C43020 * C2157 + C43022 * C2147 +
                     C43019 * C2156 + C43021 * C525 + C43018 * C541) *
                        C48697) *
                       C48331 * C48582 * C48377 * C300 +
                   ((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                     C43019 * C526 + C43023 * C513 + C43020 * C528) *
                        C505 +
                    (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                     C43019 * C542 + C43023 * C529 + C43020 * C543) *
                        C48734 -
                    (C43023 * C2140 + C43020 * C2150 + C43022 * C513 +
                     C43019 * C528 + C43021 * C512 + C43018 * C526) *
                        C506 -
                    (C43023 * C2151 + C43020 * C2158 + C43022 * C529 +
                     C43019 * C543 + C43021 * C527 + C43018 * C542) *
                        C48723 +
                    (C43021 * C513 + C43018 * C528 + C43022 * C2140 +
                     C43019 * C2150 + C43023 * C2141 + C43020 * C2152) *
                        C507 +
                    (C43021 * C529 + C43018 * C543 + C43022 * C2151 +
                     C43019 * C2158 + C43023 * C2153 + C43020 * C2159) *
                        C48697) *
                       C48331 * C48582 * C48377 * C48688)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C114 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48394) *
                        C48331 * C48582 * C1167 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48394 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C114) *
                        C48331 * C48582 * C1168 +
                    ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                      C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                         C114 +
                     (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                      C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                         C48394) *
                        C48331 * C48582 * C48694) *
                       C48730 +
                   (((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C114 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48394) *
                        C48331 * C48582 * C1168 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48394 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C114) *
                        C48331 * C48582 * C1167 -
                    ((C43023 * C1397 + C43020 * C1408 + C43022 * C1395 +
                      C43019 * C1407 + C43021 * C321 + C43018 * C336) *
                         C48394 +
                     (C43023 * C1381 + C43020 * C1396 + C43022 * C1380 +
                      C43019 * C1394 + C43021 * C306 + C43018 * C320) *
                         C114) *
                        C48331 * C48582 * C48694) *
                       C48717 +
                   (((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                      C43019 * C526 + C43023 * C513 + C43020 * C528) *
                         C114 +
                     (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                      C43019 * C542 + C43023 * C529 + C43020 * C543) *
                         C48394) *
                        C48331 * C48582 * C1167 -
                    ((C43023 * C1389 + C43020 * C1404 + C43022 * C1014 +
                      C43019 * C1021 + C43021 * C312 + C43018 * C332) *
                         C48394 +
                     (C43023 * C1377 + C43020 * C1388 + C43022 * C1006 +
                      C43019 * C1013 + C43021 * C302 + C43018 * C313) *
                         C114) *
                        C48331 * C48582 * C1168 +
                    ((C43021 * C307 + C43018 * C322 + C43022 * C1382 +
                      C43019 * C1398 + C43023 * C1383 + C43020 * C1400) *
                         C114 +
                     (C43021 * C323 + C43018 * C337 + C43022 * C1399 +
                      C43019 * C1409 + C43023 * C1401 + C43020 * C1410) *
                         C48394) *
                        C48331 * C48582 * C48694) *
                       C48688)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.1875) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C114 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C48394) *
                       C48331 * C48582 * C1235 -
                   ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                     C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                        C48394 +
                    (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                     C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                        C114) *
                       C48331 * C48582 * C1236 +
                   ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                     C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                        C114 +
                    (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                     C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                        C48394) *
                       C48331 * C48582 * C1237 -
                   ((C43023 * C6241 + C43020 * C6244 + C43022 * C1807 +
                     C43019 * C1812 + C43021 * C1251 + C43018 * C1261) *
                        C48394 +
                    (C43023 * C6238 + C43020 * C6240 + C43022 * C1803 +
                     C43019 * C1806 + C43021 * C1243 + C43018 * C1252) *
                        C114) *
                       C48331 * C48582 * C1238 +
                   ((C43021 * C1244 + C43018 * C1253 + C43022 * C6764 +
                     C43019 * C6766 + C43023 * C22813 + C43020 * C22814) *
                        C114 +
                    (C43021 * C1254 + C43018 * C1262 + C43022 * C6767 +
                     C43019 * C6770 + C43023 * C22815 + C43020 * C22816) *
                        C48394) *
                       C48331 * C48582 * C1239) *
                  C48350) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.75) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C505 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C48734 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C506 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C48723 +
                    (C43021 * C509 + C43018 * C520 + C43022 * C2136 +
                     C43019 * C2142 + C43023 * C2137 + C43020 * C2144) *
                        C507 +
                    (C43021 * C521 + C43018 * C539 + C43022 * C2143 +
                     C43019 * C2154 + C43023 * C2145 + C43020 * C2155) *
                        C48697) *
                       C48331 * C48582 * C1167 +
                   ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                     C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                        C506 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48734 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C505) +
                    (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                     C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                        C48723 -
                    (C43023 * C7174 + C43020 * C7176 + C43022 * C2570 +
                     C43019 * C2573 + C43021 * C1375 + C43018 * C1384) *
                        C507 -
                    (C43023 * C7177 + C43020 * C7180 + C43022 * C2574 +
                     C43019 * C2579 + C43021 * C1385 + C43018 * C1402) *
                        C48697) *
                       C48331 * C48582 * C1168 +
                   ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                     C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                        C505 +
                    (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                     C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                        C48734 -
                    (C43023 * C7660 + C43020 * C7662 + C43022 * C1379 +
                     C43019 * C1392 + C43021 * C1378 + C43018 * C1390) *
                        C506 -
                    (C43023 * C7663 + C43020 * C7666 + C43022 * C1393 +
                     C43019 * C1406 + C43021 * C1391 + C43018 * C1405) *
                        C48723 +
                    (C43021 * C1379 + C43018 * C1392 + C43022 * C7660 +
                     C43019 * C7662 + C43023 * C23495 + C43020 * C23496) *
                        C507 +
                    (C43021 * C1393 + C43018 * C1406 + C43022 * C7663 +
                     C43019 * C7666 + C43023 * C23497 + C43020 * C23498) *
                        C48697) *
                       C48331 * C48582 * C48694) *
                  C48350) /
                     (p * q * std::sqrt(p + q));
    d2ee[223] += (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C824 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C48663 -
                    (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                     C43019 * C520 + C43021 * C508 + C43018 * C518) *
                        C825 -
                    (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                     C43019 * C539 + C43021 * C519 + C43018 * C538) *
                        C48481) *
                       C48331 * C48582 * C48377 * C707 +
                   ((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                     C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                        C825 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48663 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C824) +
                    (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                     C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                        C48481) *
                       C48331 * C48582 * C48377 * C708 +
                   ((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                     C43019 * C526 + C43023 * C513 + C43020 * C528) *
                        C824 +
                    (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                     C43019 * C542 + C43023 * C529 + C43020 * C543) *
                        C48663 -
                    (C43023 * C2140 + C43020 * C2150 + C43022 * C513 +
                     C43019 * C528 + C43021 * C512 + C43018 * C526) *
                        C825 -
                    (C43023 * C2151 + C43020 * C2158 + C43022 * C529 +
                     C43019 * C543 + C43021 * C527 + C43018 * C542) *
                        C48481) *
                       C48331 * C48582 * C48377 * C709 +
                   ((C43021 * C514 + C43018 * C530 + C43022 * C515 +
                     C43019 * C532 + C43023 * C2440 + C43020 * C2441) *
                        C825 -
                    ((C43023 * C533 + C43020 * C545 + C43022 * C531 +
                      C43019 * C544 + C43021 * C128 + C43018 * C139) *
                         C48663 +
                     (C43023 * C515 + C43020 * C532 + C43022 * C514 +
                      C43019 * C530 + C43021 * C118 + C43018 * C129) *
                         C824) +
                    (C43021 * C531 + C43018 * C544 + C43022 * C533 +
                     C43019 * C545 + C43023 * C2442 + C43020 * C2443) *
                        C48481) *
                       C48331 * C48582 * C48377 * C48698)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(2.25) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C824 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48663 -
                     (C43023 * C2136 + C43020 * C2142 + C43022 * C509 +
                      C43019 * C520 + C43021 * C508 + C43018 * C518) *
                         C825 -
                     (C43023 * C2143 + C43020 * C2154 + C43022 * C521 +
                      C43019 * C539 + C43021 * C519 + C43018 * C538) *
                         C48481) *
                        C48331 * C48582 * C1167 +
                    ((C43021 * C1004 + C43018 * C1009 + C43022 * C1375 +
                      C43019 * C1384 + C43023 * C2570 + C43020 * C2573) *
                         C825 -
                     ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                       C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                          C48663 +
                      (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                       C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                          C824) +
                     (C43021 * C1010 + C43018 * C1019 + C43022 * C1385 +
                      C43019 * C1402 + C43023 * C2574 + C43020 * C2579) *
                         C48481) *
                        C48331 * C48582 * C1168 +
                    ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                      C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                         C824 +
                     (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                      C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                         C48663 -
                     (C43023 * C7660 + C43020 * C7662 + C43022 * C1379 +
                      C43019 * C1392 + C43021 * C1378 + C43018 * C1390) *
                         C825 -
                     (C43023 * C7663 + C43020 * C7666 + C43022 * C1393 +
                      C43019 * C1406 + C43021 * C1391 + C43018 * C1405) *
                         C48481) *
                        C48331 * C48582 * C48694) *
                       C48648 +
                   (((C43021 * C510 + C43018 * C522 + C43022 * C511 +
                      C43019 * C524 + C43023 * C2138 + C43020 * C2146) *
                         C825 -
                     ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                       C43019 * C540 + C43021 * C125 + C43018 * C137) *
                          C48663 +
                      (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                       C43019 * C522 + C43021 * C116 + C43018 * C124) *
                          C824) +
                     (C43021 * C523 + C43018 * C540 + C43022 * C525 +
                      C43019 * C541 + C43023 * C2147 + C43020 * C2156) *
                         C48481) *
                        C48331 * C48582 * C1167 +
                    ((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C824 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48663 -
                     (C43023 * C2571 + C43020 * C2575 + C43022 * C1376 +
                      C43019 * C1386 + C43021 * C1005 + C43018 * C1011) *
                         C825 -
                     (C43023 * C2576 + C43020 * C2580 + C43022 * C1387 +
                      C43019 * C1403 + C43021 * C1012 + C43018 * C1020) *
                         C48481) *
                        C48331 * C48582 * C1168 +
                    ((C43021 * C1380 + C43018 * C1394 + C43022 * C1381 +
                      C43019 * C1396 + C43023 * C7661 + C43020 * C7664) *
                         C825 -
                     ((C43023 * C1397 + C43020 * C1408 + C43022 * C1395 +
                       C43019 * C1407 + C43021 * C321 + C43018 * C336) *
                          C48663 +
                      (C43023 * C1381 + C43020 * C1396 + C43022 * C1380 +
                       C43019 * C1394 + C43021 * C306 + C43018 * C320) *
                          C824) +
                     (C43021 * C1395 + C43018 * C1407 + C43022 * C1397 +
                      C43019 * C1408 + C43023 * C7665 + C43020 * C7667) *
                         C48481) *
                        C48331 * C48582 * C48694) *
                       C48360)) /
                     (p * q * std::sqrt(p + q));
    d2ee[224] += (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C114 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C48394) *
                       C48331 * C48582 * C48377 * C108 -
                   ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                     C43019 * C540 + C43021 * C125 + C43018 * C137) *
                        C48394 +
                    (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                     C43019 * C522 + C43021 * C116 + C43018 * C124) *
                        C114) *
                       C48331 * C48582 * C48377 * C109 +
                   ((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                     C43019 * C526 + C43023 * C513 + C43020 * C528) *
                        C114 +
                    (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                     C43019 * C542 + C43023 * C529 + C43020 * C543) *
                        C48394) *
                       C48331 * C48582 * C48377 * C110 -
                   ((C43023 * C533 + C43020 * C545 + C43022 * C531 +
                     C43019 * C544 + C43021 * C128 + C43018 * C139) *
                        C48394 +
                    (C43023 * C515 + C43020 * C532 + C43022 * C514 +
                     C43019 * C530 + C43021 * C118 + C43018 * C129) *
                        C114) *
                       C48331 * C48582 * C48377 * C111 +
                   ((C43021 * C119 + C43018 * C130 + C43022 * C516 +
                     C43019 * C534 + C43023 * C517 + C43020 * C536) *
                        C114 +
                    (C43021 * C131 + C43018 * C140 + C43022 * C535 +
                     C43019 * C546 + C43023 * C537 + C43020 * C547) *
                        C48394) *
                       C48331 * C48582 * C48377 * C112)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C114 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48394) *
                        C48331 * C48582 * C48733 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48394 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C114) *
                        C48331 * C48582 * C48721 +
                    ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                      C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                         C114 +
                     (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                      C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                         C48394) *
                        C48331 * C48582 * C48694) *
                       C299 +
                   (((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C114 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48394) *
                        C48331 * C48582 * C48721 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48394 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C114) *
                        C48331 * C48582 * C48733 -
                    ((C43023 * C1397 + C43020 * C1408 + C43022 * C1395 +
                      C43019 * C1407 + C43021 * C321 + C43018 * C336) *
                         C48394 +
                     (C43023 * C1381 + C43020 * C1396 + C43022 * C1380 +
                      C43019 * C1394 + C43021 * C306 + C43018 * C320) *
                         C114) *
                        C48331 * C48582 * C48694) *
                       C300 +
                   (((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                      C43019 * C526 + C43023 * C513 + C43020 * C528) *
                         C114 +
                     (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                      C43019 * C542 + C43023 * C529 + C43020 * C543) *
                         C48394) *
                        C48331 * C48582 * C48733 -
                    ((C43023 * C1389 + C43020 * C1404 + C43022 * C1014 +
                      C43019 * C1021 + C43021 * C312 + C43018 * C332) *
                         C48394 +
                     (C43023 * C1377 + C43020 * C1388 + C43022 * C1006 +
                      C43019 * C1013 + C43021 * C302 + C43018 * C313) *
                         C114) *
                        C48331 * C48582 * C48721 +
                    ((C43021 * C307 + C43018 * C322 + C43022 * C1382 +
                      C43019 * C1398 + C43023 * C1383 + C43020 * C1400) *
                         C114 +
                     (C43021 * C323 + C43018 * C337 + C43022 * C1399 +
                      C43019 * C1409 + C43023 * C1401 + C43020 * C1410) *
                         C48394) *
                        C48331 * C48582 * C48694) *
                       C48688)) /
                     (p * q * std::sqrt(p + q)) -
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  ((((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                      C43019 * C518 + C43023 * C509 + C43020 * C520) *
                         C114 +
                     (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                      C43019 * C538 + C43023 * C521 + C43020 * C539) *
                         C48394) *
                        C48331 * C48582 * C1167 -
                    ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                      C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                         C48394 +
                     (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                      C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                         C114) *
                        C48331 * C48582 * C1168 +
                    ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                      C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                         C114 +
                     (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                      C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                         C48394) *
                        C48331 * C48582 * C48694) *
                       C48730 +
                   (((C43021 * C303 + C43018 * C315 + C43022 * C1005 +
                      C43019 * C1011 + C43023 * C1376 + C43020 * C1386) *
                         C114 +
                     (C43021 * C314 + C43018 * C333 + C43022 * C1012 +
                      C43019 * C1020 + C43023 * C1387 + C43020 * C1403) *
                         C48394) *
                        C48331 * C48582 * C1168 -
                    ((C43023 * C525 + C43020 * C541 + C43022 * C523 +
                      C43019 * C540 + C43021 * C125 + C43018 * C137) *
                         C48394 +
                     (C43023 * C511 + C43020 * C524 + C43022 * C510 +
                      C43019 * C522 + C43021 * C116 + C43018 * C124) *
                         C114) *
                        C48331 * C48582 * C1167 -
                    ((C43023 * C1397 + C43020 * C1408 + C43022 * C1395 +
                      C43019 * C1407 + C43021 * C321 + C43018 * C336) *
                         C48394 +
                     (C43023 * C1381 + C43020 * C1396 + C43022 * C1380 +
                      C43019 * C1394 + C43021 * C306 + C43018 * C320) *
                         C114) *
                        C48331 * C48582 * C48694) *
                       C48717 +
                   (((C43021 * C117 + C43018 * C126 + C43022 * C512 +
                      C43019 * C526 + C43023 * C513 + C43020 * C528) *
                         C114 +
                     (C43021 * C127 + C43018 * C138 + C43022 * C527 +
                      C43019 * C542 + C43023 * C529 + C43020 * C543) *
                         C48394) *
                        C48331 * C48582 * C1167 -
                    ((C43023 * C1389 + C43020 * C1404 + C43022 * C1014 +
                      C43019 * C1021 + C43021 * C312 + C43018 * C332) *
                         C48394 +
                     (C43023 * C1377 + C43020 * C1388 + C43022 * C1006 +
                      C43019 * C1013 + C43021 * C302 + C43018 * C313) *
                         C114) *
                        C48331 * C48582 * C1168 +
                    ((C43021 * C307 + C43018 * C322 + C43022 * C1382 +
                      C43019 * C1398 + C43023 * C1383 + C43020 * C1400) *
                         C114 +
                     (C43021 * C323 + C43018 * C337 + C43022 * C1399 +
                      C43019 * C1409 + C43023 * C1401 + C43020 * C1410) *
                         C48394) *
                        C48331 * C48582 * C48694) *
                       C48688)) /
                     (p * q * std::sqrt(p + q)) +
                 (std::sqrt(0.5625) * 2 * std::pow(Pi, 2.5) *
                  (((C43021 * C115 + C43018 * C122 + C43022 * C508 +
                     C43019 * C518 + C43023 * C509 + C43020 * C520) *
                        C114 +
                    (C43021 * C123 + C43018 * C136 + C43022 * C519 +
                     C43019 * C538 + C43023 * C521 + C43020 * C539) *
                        C48394) *
                       C48331 * C48582 * C1235 -
                   ((C43023 * C1385 + C43020 * C1402 + C43022 * C1010 +
                     C43019 * C1019 + C43021 * C316 + C43018 * C334) *
                        C48394 +
                    (C43023 * C1375 + C43020 * C1384 + C43022 * C1004 +
                     C43019 * C1009 + C43021 * C304 + C43018 * C317) *
                        C114) *
                       C48331 * C48582 * C1236 +
                   ((C43021 * C305 + C43018 * C318 + C43022 * C1378 +
                     C43019 * C1390 + C43023 * C1379 + C43020 * C1392) *
                        C114 +
                    (C43021 * C319 + C43018 * C335 + C43022 * C1391 +
                     C43019 * C1405 + C43023 * C1393 + C43020 * C1406) *
                        C48394) *
                       C48331 * C48582 * C1237 -
                   ((C43023 * C6241 + C43020 * C6244 + C43022 * C1807 +
                     C43019 * C1812 + C43021 * C1251 + C43018 * C1261) *
                        C48394 +
                    (C43023 * C6238 + C43020 * C6240 + C43022 * C1803 +
                     C43019 * C1806 + C43021 * C1243 + C43018 * C1252) *
                        C114) *
                       C48331 * C48582 * C1238 +
                   ((C43021 * C1244 + C43018 * C1253 + C43022 * C6764 +
                     C43019 * C6766 + C43023 * C22813 + C43020 * C22814) *
                        C114 +
                    (C43021 * C1254 + C43018 * C1262 + C43022 * C6767 +
                     C43019 * C6770 + C43023 * C22815 + C43020 * C22816) *
                        C48394) *
                       C48331 * C48582 * C1239) *
                  C48350) /
                     (p * q * std::sqrt(p + q));
}
